
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018748  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  08018a18  08018a18  00028a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018e30  08018e30  00028e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018e38  08018e38  00028e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08018e3c  08018e3c  00028e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000154  24000000  08018e40  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003310  24000154  08018f94  00030154  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  24003464  08018f94  00033464  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030154  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00030182  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003707e  00000000  00000000  000301c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00006bca  00000000  00000000  00067243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002c18  00000000  00000000  0006de10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000221e  00000000  00000000  00070a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003f72a  00000000  00000000  00072c46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003ec3b  00000000  00000000  000b2370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017e5b9  00000000  00000000  000f0fab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000c680  00000000  00000000  0026f564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  0027bbe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000154 	.word	0x24000154
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08018a00 	.word	0x08018a00

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000158 	.word	0x24000158
 800030c:	08018a00 	.word	0x08018a00

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b970 	b.w	80006d8 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9e08      	ldr	r6, [sp, #32]
 8000416:	460d      	mov	r5, r1
 8000418:	4604      	mov	r4, r0
 800041a:	460f      	mov	r7, r1
 800041c:	2b00      	cmp	r3, #0
 800041e:	d14a      	bne.n	80004b6 <__udivmoddi4+0xa6>
 8000420:	428a      	cmp	r2, r1
 8000422:	4694      	mov	ip, r2
 8000424:	d965      	bls.n	80004f2 <__udivmoddi4+0xe2>
 8000426:	fab2 f382 	clz	r3, r2
 800042a:	b143      	cbz	r3, 800043e <__udivmoddi4+0x2e>
 800042c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000430:	f1c3 0220 	rsb	r2, r3, #32
 8000434:	409f      	lsls	r7, r3
 8000436:	fa20 f202 	lsr.w	r2, r0, r2
 800043a:	4317      	orrs	r7, r2
 800043c:	409c      	lsls	r4, r3
 800043e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000442:	fa1f f58c 	uxth.w	r5, ip
 8000446:	fbb7 f1fe 	udiv	r1, r7, lr
 800044a:	0c22      	lsrs	r2, r4, #16
 800044c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000450:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000454:	fb01 f005 	mul.w	r0, r1, r5
 8000458:	4290      	cmp	r0, r2
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x62>
 800045c:	eb1c 0202 	adds.w	r2, ip, r2
 8000460:	f101 37ff 	add.w	r7, r1, #4294967295
 8000464:	f080 811c 	bcs.w	80006a0 <__udivmoddi4+0x290>
 8000468:	4290      	cmp	r0, r2
 800046a:	f240 8119 	bls.w	80006a0 <__udivmoddi4+0x290>
 800046e:	3902      	subs	r1, #2
 8000470:	4462      	add	r2, ip
 8000472:	1a12      	subs	r2, r2, r0
 8000474:	b2a4      	uxth	r4, r4
 8000476:	fbb2 f0fe 	udiv	r0, r2, lr
 800047a:	fb0e 2210 	mls	r2, lr, r0, r2
 800047e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000482:	fb00 f505 	mul.w	r5, r0, r5
 8000486:	42a5      	cmp	r5, r4
 8000488:	d90a      	bls.n	80004a0 <__udivmoddi4+0x90>
 800048a:	eb1c 0404 	adds.w	r4, ip, r4
 800048e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000492:	f080 8107 	bcs.w	80006a4 <__udivmoddi4+0x294>
 8000496:	42a5      	cmp	r5, r4
 8000498:	f240 8104 	bls.w	80006a4 <__udivmoddi4+0x294>
 800049c:	4464      	add	r4, ip
 800049e:	3802      	subs	r0, #2
 80004a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80004a4:	1b64      	subs	r4, r4, r5
 80004a6:	2100      	movs	r1, #0
 80004a8:	b11e      	cbz	r6, 80004b2 <__udivmoddi4+0xa2>
 80004aa:	40dc      	lsrs	r4, r3
 80004ac:	2300      	movs	r3, #0
 80004ae:	e9c6 4300 	strd	r4, r3, [r6]
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0xbc>
 80004ba:	2e00      	cmp	r6, #0
 80004bc:	f000 80ed 	beq.w	800069a <__udivmoddi4+0x28a>
 80004c0:	2100      	movs	r1, #0
 80004c2:	e9c6 0500 	strd	r0, r5, [r6]
 80004c6:	4608      	mov	r0, r1
 80004c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004cc:	fab3 f183 	clz	r1, r3
 80004d0:	2900      	cmp	r1, #0
 80004d2:	d149      	bne.n	8000568 <__udivmoddi4+0x158>
 80004d4:	42ab      	cmp	r3, r5
 80004d6:	d302      	bcc.n	80004de <__udivmoddi4+0xce>
 80004d8:	4282      	cmp	r2, r0
 80004da:	f200 80f8 	bhi.w	80006ce <__udivmoddi4+0x2be>
 80004de:	1a84      	subs	r4, r0, r2
 80004e0:	eb65 0203 	sbc.w	r2, r5, r3
 80004e4:	2001      	movs	r0, #1
 80004e6:	4617      	mov	r7, r2
 80004e8:	2e00      	cmp	r6, #0
 80004ea:	d0e2      	beq.n	80004b2 <__udivmoddi4+0xa2>
 80004ec:	e9c6 4700 	strd	r4, r7, [r6]
 80004f0:	e7df      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004f2:	b902      	cbnz	r2, 80004f6 <__udivmoddi4+0xe6>
 80004f4:	deff      	udf	#255	; 0xff
 80004f6:	fab2 f382 	clz	r3, r2
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	f040 8090 	bne.w	8000620 <__udivmoddi4+0x210>
 8000500:	1a8a      	subs	r2, r1, r2
 8000502:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000506:	fa1f fe8c 	uxth.w	lr, ip
 800050a:	2101      	movs	r1, #1
 800050c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000510:	fb07 2015 	mls	r0, r7, r5, r2
 8000514:	0c22      	lsrs	r2, r4, #16
 8000516:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800051a:	fb0e f005 	mul.w	r0, lr, r5
 800051e:	4290      	cmp	r0, r2
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x124>
 8000522:	eb1c 0202 	adds.w	r2, ip, r2
 8000526:	f105 38ff 	add.w	r8, r5, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x122>
 800052c:	4290      	cmp	r0, r2
 800052e:	f200 80cb 	bhi.w	80006c8 <__udivmoddi4+0x2b8>
 8000532:	4645      	mov	r5, r8
 8000534:	1a12      	subs	r2, r2, r0
 8000536:	b2a4      	uxth	r4, r4
 8000538:	fbb2 f0f7 	udiv	r0, r2, r7
 800053c:	fb07 2210 	mls	r2, r7, r0, r2
 8000540:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000544:	fb0e fe00 	mul.w	lr, lr, r0
 8000548:	45a6      	cmp	lr, r4
 800054a:	d908      	bls.n	800055e <__udivmoddi4+0x14e>
 800054c:	eb1c 0404 	adds.w	r4, ip, r4
 8000550:	f100 32ff 	add.w	r2, r0, #4294967295
 8000554:	d202      	bcs.n	800055c <__udivmoddi4+0x14c>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f200 80bb 	bhi.w	80006d2 <__udivmoddi4+0x2c2>
 800055c:	4610      	mov	r0, r2
 800055e:	eba4 040e 	sub.w	r4, r4, lr
 8000562:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000566:	e79f      	b.n	80004a8 <__udivmoddi4+0x98>
 8000568:	f1c1 0720 	rsb	r7, r1, #32
 800056c:	408b      	lsls	r3, r1
 800056e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000572:	ea4c 0c03 	orr.w	ip, ip, r3
 8000576:	fa05 f401 	lsl.w	r4, r5, r1
 800057a:	fa20 f307 	lsr.w	r3, r0, r7
 800057e:	40fd      	lsrs	r5, r7
 8000580:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000584:	4323      	orrs	r3, r4
 8000586:	fbb5 f8f9 	udiv	r8, r5, r9
 800058a:	fa1f fe8c 	uxth.w	lr, ip
 800058e:	fb09 5518 	mls	r5, r9, r8, r5
 8000592:	0c1c      	lsrs	r4, r3, #16
 8000594:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000598:	fb08 f50e 	mul.w	r5, r8, lr
 800059c:	42a5      	cmp	r5, r4
 800059e:	fa02 f201 	lsl.w	r2, r2, r1
 80005a2:	fa00 f001 	lsl.w	r0, r0, r1
 80005a6:	d90b      	bls.n	80005c0 <__udivmoddi4+0x1b0>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80005b0:	f080 8088 	bcs.w	80006c4 <__udivmoddi4+0x2b4>
 80005b4:	42a5      	cmp	r5, r4
 80005b6:	f240 8085 	bls.w	80006c4 <__udivmoddi4+0x2b4>
 80005ba:	f1a8 0802 	sub.w	r8, r8, #2
 80005be:	4464      	add	r4, ip
 80005c0:	1b64      	subs	r4, r4, r5
 80005c2:	b29d      	uxth	r5, r3
 80005c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80005c8:	fb09 4413 	mls	r4, r9, r3, r4
 80005cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005d4:	45a6      	cmp	lr, r4
 80005d6:	d908      	bls.n	80005ea <__udivmoddi4+0x1da>
 80005d8:	eb1c 0404 	adds.w	r4, ip, r4
 80005dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80005e0:	d26c      	bcs.n	80006bc <__udivmoddi4+0x2ac>
 80005e2:	45a6      	cmp	lr, r4
 80005e4:	d96a      	bls.n	80006bc <__udivmoddi4+0x2ac>
 80005e6:	3b02      	subs	r3, #2
 80005e8:	4464      	add	r4, ip
 80005ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ee:	fba3 9502 	umull	r9, r5, r3, r2
 80005f2:	eba4 040e 	sub.w	r4, r4, lr
 80005f6:	42ac      	cmp	r4, r5
 80005f8:	46c8      	mov	r8, r9
 80005fa:	46ae      	mov	lr, r5
 80005fc:	d356      	bcc.n	80006ac <__udivmoddi4+0x29c>
 80005fe:	d053      	beq.n	80006a8 <__udivmoddi4+0x298>
 8000600:	b156      	cbz	r6, 8000618 <__udivmoddi4+0x208>
 8000602:	ebb0 0208 	subs.w	r2, r0, r8
 8000606:	eb64 040e 	sbc.w	r4, r4, lr
 800060a:	fa04 f707 	lsl.w	r7, r4, r7
 800060e:	40ca      	lsrs	r2, r1
 8000610:	40cc      	lsrs	r4, r1
 8000612:	4317      	orrs	r7, r2
 8000614:	e9c6 7400 	strd	r7, r4, [r6]
 8000618:	4618      	mov	r0, r3
 800061a:	2100      	movs	r1, #0
 800061c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000620:	f1c3 0120 	rsb	r1, r3, #32
 8000624:	fa02 fc03 	lsl.w	ip, r2, r3
 8000628:	fa20 f201 	lsr.w	r2, r0, r1
 800062c:	fa25 f101 	lsr.w	r1, r5, r1
 8000630:	409d      	lsls	r5, r3
 8000632:	432a      	orrs	r2, r5
 8000634:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000638:	fa1f fe8c 	uxth.w	lr, ip
 800063c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000640:	fb07 1510 	mls	r5, r7, r0, r1
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800064a:	fb00 f50e 	mul.w	r5, r0, lr
 800064e:	428d      	cmp	r5, r1
 8000650:	fa04 f403 	lsl.w	r4, r4, r3
 8000654:	d908      	bls.n	8000668 <__udivmoddi4+0x258>
 8000656:	eb1c 0101 	adds.w	r1, ip, r1
 800065a:	f100 38ff 	add.w	r8, r0, #4294967295
 800065e:	d22f      	bcs.n	80006c0 <__udivmoddi4+0x2b0>
 8000660:	428d      	cmp	r5, r1
 8000662:	d92d      	bls.n	80006c0 <__udivmoddi4+0x2b0>
 8000664:	3802      	subs	r0, #2
 8000666:	4461      	add	r1, ip
 8000668:	1b49      	subs	r1, r1, r5
 800066a:	b292      	uxth	r2, r2
 800066c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000670:	fb07 1115 	mls	r1, r7, r5, r1
 8000674:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000678:	fb05 f10e 	mul.w	r1, r5, lr
 800067c:	4291      	cmp	r1, r2
 800067e:	d908      	bls.n	8000692 <__udivmoddi4+0x282>
 8000680:	eb1c 0202 	adds.w	r2, ip, r2
 8000684:	f105 38ff 	add.w	r8, r5, #4294967295
 8000688:	d216      	bcs.n	80006b8 <__udivmoddi4+0x2a8>
 800068a:	4291      	cmp	r1, r2
 800068c:	d914      	bls.n	80006b8 <__udivmoddi4+0x2a8>
 800068e:	3d02      	subs	r5, #2
 8000690:	4462      	add	r2, ip
 8000692:	1a52      	subs	r2, r2, r1
 8000694:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000698:	e738      	b.n	800050c <__udivmoddi4+0xfc>
 800069a:	4631      	mov	r1, r6
 800069c:	4630      	mov	r0, r6
 800069e:	e708      	b.n	80004b2 <__udivmoddi4+0xa2>
 80006a0:	4639      	mov	r1, r7
 80006a2:	e6e6      	b.n	8000472 <__udivmoddi4+0x62>
 80006a4:	4610      	mov	r0, r2
 80006a6:	e6fb      	b.n	80004a0 <__udivmoddi4+0x90>
 80006a8:	4548      	cmp	r0, r9
 80006aa:	d2a9      	bcs.n	8000600 <__udivmoddi4+0x1f0>
 80006ac:	ebb9 0802 	subs.w	r8, r9, r2
 80006b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80006b4:	3b01      	subs	r3, #1
 80006b6:	e7a3      	b.n	8000600 <__udivmoddi4+0x1f0>
 80006b8:	4645      	mov	r5, r8
 80006ba:	e7ea      	b.n	8000692 <__udivmoddi4+0x282>
 80006bc:	462b      	mov	r3, r5
 80006be:	e794      	b.n	80005ea <__udivmoddi4+0x1da>
 80006c0:	4640      	mov	r0, r8
 80006c2:	e7d1      	b.n	8000668 <__udivmoddi4+0x258>
 80006c4:	46d0      	mov	r8, sl
 80006c6:	e77b      	b.n	80005c0 <__udivmoddi4+0x1b0>
 80006c8:	3d02      	subs	r5, #2
 80006ca:	4462      	add	r2, ip
 80006cc:	e732      	b.n	8000534 <__udivmoddi4+0x124>
 80006ce:	4608      	mov	r0, r1
 80006d0:	e70a      	b.n	80004e8 <__udivmoddi4+0xd8>
 80006d2:	4464      	add	r4, ip
 80006d4:	3802      	subs	r0, #2
 80006d6:	e742      	b.n	800055e <__udivmoddi4+0x14e>

080006d8 <__aeabi_idiv0>:
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop

080006dc <HG2_Write_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);

	return reg_value;
}

void HG2_Write_Register(uint8_t addr, uint8_t data){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	460a      	mov	r2, r1
 80006e6:	71fb      	strb	r3, [r7, #7]
 80006e8:	4613      	mov	r3, r2
 80006ea:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f2:	480c      	ldr	r0, [pc, #48]	; (8000724 <HG2_Write_Register+0x48>)
 80006f4:	f007 fdfe 	bl	80082f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80006f8:	1df9      	adds	r1, r7, #7
 80006fa:	2364      	movs	r3, #100	; 0x64
 80006fc:	2201      	movs	r2, #1
 80006fe:	480a      	ldr	r0, [pc, #40]	; (8000728 <HG2_Write_Register+0x4c>)
 8000700:	f00e fd42 	bl	800f188 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000704:	1db9      	adds	r1, r7, #6
 8000706:	2364      	movs	r3, #100	; 0x64
 8000708:	2201      	movs	r2, #1
 800070a:	4807      	ldr	r0, [pc, #28]	; (8000728 <HG2_Write_Register+0x4c>)
 800070c:	f00e fd3c 	bl	800f188 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 8000710:	2201      	movs	r2, #1
 8000712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000716:	4803      	ldr	r0, [pc, #12]	; (8000724 <HG2_Write_Register+0x48>)
 8000718:	f007 fdec 	bl	80082f4 <HAL_GPIO_WritePin>

}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	58020c00 	.word	0x58020c00
 8000728:	240010c8 	.word	0x240010c8

0800072c <LG2_Read_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
}



uint8_t LG2_Read_Register(uint8_t addr){
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	addr |= (1<<7);
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800073c:	b2db      	uxtb	r3, r3
 800073e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <LG2_Read_Register+0x50>)
 8000748:	f007 fdd4 	bl	80082f4 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 800074c:	1df9      	adds	r1, r7, #7
 800074e:	2364      	movs	r3, #100	; 0x64
 8000750:	2201      	movs	r2, #1
 8000752:	480b      	ldr	r0, [pc, #44]	; (8000780 <LG2_Read_Register+0x54>)
 8000754:	f00e fd18 	bl	800f188 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &reg_value, 1, 100);
 8000758:	f107 010f 	add.w	r1, r7, #15
 800075c:	2364      	movs	r3, #100	; 0x64
 800075e:	2201      	movs	r2, #1
 8000760:	4807      	ldr	r0, [pc, #28]	; (8000780 <LG2_Read_Register+0x54>)
 8000762:	f00e ff0d 	bl	800f580 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <LG2_Read_Register+0x50>)
 800076e:	f007 fdc1 	bl	80082f4 <HAL_GPIO_WritePin>

	return reg_value;
 8000772:	7bfb      	ldrb	r3, [r7, #15]
}
 8000774:	4618      	mov	r0, r3
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	58020c00 	.word	0x58020c00
 8000780:	240010c8 	.word	0x240010c8

08000784 <LG2_Write_Register>:

void LG2_Write_Register(uint8_t addr, uint8_t data){
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	460a      	mov	r2, r1
 800078e:	71fb      	strb	r3, [r7, #7]
 8000790:	4613      	mov	r3, r2
 8000792:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 7180 	mov.w	r1, #256	; 0x100
 800079a:	480c      	ldr	r0, [pc, #48]	; (80007cc <LG2_Write_Register+0x48>)
 800079c:	f007 fdaa 	bl	80082f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80007a0:	1df9      	adds	r1, r7, #7
 80007a2:	2364      	movs	r3, #100	; 0x64
 80007a4:	2201      	movs	r2, #1
 80007a6:	480a      	ldr	r0, [pc, #40]	; (80007d0 <LG2_Write_Register+0x4c>)
 80007a8:	f00e fcee 	bl	800f188 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 80007ac:	1db9      	adds	r1, r7, #6
 80007ae:	2364      	movs	r3, #100	; 0x64
 80007b0:	2201      	movs	r2, #1
 80007b2:	4807      	ldr	r0, [pc, #28]	; (80007d0 <LG2_Write_Register+0x4c>)
 80007b4:	f00e fce8 	bl	800f188 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 80007b8:	2201      	movs	r2, #1
 80007ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007be:	4803      	ldr	r0, [pc, #12]	; (80007cc <LG2_Write_Register+0x48>)
 80007c0:	f007 fd98 	bl	80082f4 <HAL_GPIO_WritePin>

}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	58020c00 	.word	0x58020c00
 80007d0:	240010c8 	.word	0x240010c8

080007d4 <LG2_Get_Gyro_X>:

float LG2_Get_Gyro_X(){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x22);
 80007da:	2022      	movs	r0, #34	; 0x22
 80007dc:	f7ff ffa6 	bl	800072c <LG2_Read_Register>
 80007e0:	4603      	mov	r3, r0
 80007e2:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x23);
 80007e4:	2023      	movs	r0, #35	; 0x23
 80007e6:	f7ff ffa1 	bl	800072c <LG2_Read_Register>
 80007ea:	4603      	mov	r3, r0
 80007ec:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80007ee:	79bb      	ldrb	r3, [r7, #6]
 80007f0:	021b      	lsls	r3, r3, #8
 80007f2:	b21a      	sxth	r2, r3
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	b21b      	sxth	r3, r3
 80007f8:	4313      	orrs	r3, r2
 80007fa:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 80007fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000800:	ee07 3a90 	vmov	s15, r3
 8000804:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000808:	eddf 6a08 	vldr	s13, [pc, #32]	; 800082c <LG2_Get_Gyro_X+0x58>
 800080c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000810:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000830 <LG2_Get_Gyro_X+0x5c>
 8000814:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000818:	edc7 7a00 	vstr	s15, [r7]
	return omega;
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	ee07 3a90 	vmov	s15, r3
}
 8000822:	eeb0 0a67 	vmov.f32	s0, s15
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	46fffe00 	.word	0x46fffe00
 8000830:	437a0000 	.word	0x437a0000

08000834 <LG2_Get_Gyro_Y>:

float LG2_Get_Gyro_Y(){
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x24);
 800083a:	2024      	movs	r0, #36	; 0x24
 800083c:	f7ff ff76 	bl	800072c <LG2_Read_Register>
 8000840:	4603      	mov	r3, r0
 8000842:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x25);
 8000844:	2025      	movs	r0, #37	; 0x25
 8000846:	f7ff ff71 	bl	800072c <LG2_Read_Register>
 800084a:	4603      	mov	r3, r0
 800084c:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	b21a      	sxth	r2, r3
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	b21b      	sxth	r3, r3
 8000858:	4313      	orrs	r3, r2
 800085a:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 800085c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000860:	ee07 3a90 	vmov	s15, r3
 8000864:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000868:	eddf 6a08 	vldr	s13, [pc, #32]	; 800088c <LG2_Get_Gyro_Y+0x58>
 800086c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000870:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000890 <LG2_Get_Gyro_Y+0x5c>
 8000874:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000878:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	ee07 3a90 	vmov	s15, r3
}
 8000882:	eeb0 0a67 	vmov.f32	s0, s15
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	46fffe00 	.word	0x46fffe00
 8000890:	437a0000 	.word	0x437a0000
 8000894:	00000000 	.word	0x00000000

08000898 <LG2_Get_Gyro_Z>:

float LG2_Get_Gyro_Z(){
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x26);
 800089e:	2026      	movs	r0, #38	; 0x26
 80008a0:	f7ff ff44 	bl	800072c <LG2_Read_Register>
 80008a4:	4603      	mov	r3, r0
 80008a6:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x27);
 80008a8:	2027      	movs	r0, #39	; 0x27
 80008aa:	f7ff ff3f 	bl	800072c <LG2_Read_Register>
 80008ae:	4603      	mov	r3, r0
 80008b0:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80008b2:	79bb      	ldrb	r3, [r7, #6]
 80008b4:	021b      	lsls	r3, r3, #8
 80008b6:	b21a      	sxth	r2, r3
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	b21b      	sxth	r3, r3
 80008bc:	4313      	orrs	r3, r2
 80008be:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767.0) * 250.0;
 80008c0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008c4:	ee07 3a90 	vmov	s15, r3
 80008c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008cc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80008d0:	ed9f 5b09 	vldr	d5, [pc, #36]	; 80008f8 <LG2_Get_Gyro_Z+0x60>
 80008d4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008d8:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000900 <LG2_Get_Gyro_Z+0x68>
 80008dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008e0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008e4:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	ee07 3a90 	vmov	s15, r3
}
 80008ee:	eeb0 0a67 	vmov.f32	s0, s15
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	00000000 	.word	0x00000000
 80008fc:	40dfffc0 	.word	0x40dfffc0
 8000900:	00000000 	.word	0x00000000
 8000904:	406f4000 	.word	0x406f4000

08000908 <LoRA_Read_Register>:
#define RSSI_OFFSET_HF_PORT      157
#define RSSI_OFFSET_LF_PORT      164

#define MAX_PKT_LENGTH           255

uint8_t LoRA_Read_Register(uint8_t addr){
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000912:	2200      	movs	r2, #0
 8000914:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000918:	480d      	ldr	r0, [pc, #52]	; (8000950 <LoRA_Read_Register+0x48>)
 800091a:	f007 fceb 	bl	80082f4 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 800091e:	1df9      	adds	r1, r7, #7
 8000920:	2364      	movs	r3, #100	; 0x64
 8000922:	2201      	movs	r2, #1
 8000924:	480b      	ldr	r0, [pc, #44]	; (8000954 <LoRA_Read_Register+0x4c>)
 8000926:	f00e fc2f 	bl	800f188 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 800092a:	f107 010f 	add.w	r1, r7, #15
 800092e:	2364      	movs	r3, #100	; 0x64
 8000930:	2201      	movs	r2, #1
 8000932:	4808      	ldr	r0, [pc, #32]	; (8000954 <LoRA_Read_Register+0x4c>)
 8000934:	f00e fe24 	bl	800f580 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000938:	2201      	movs	r2, #1
 800093a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800093e:	4804      	ldr	r0, [pc, #16]	; (8000950 <LoRA_Read_Register+0x48>)
 8000940:	f007 fcd8 	bl	80082f4 <HAL_GPIO_WritePin>

	return reg_value;
 8000944:	7bfb      	ldrb	r3, [r7, #15]
}
 8000946:	4618      	mov	r0, r3
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	58020000 	.word	0x58020000
 8000954:	24001150 	.word	0x24001150

08000958 <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data){
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	460a      	mov	r2, r1
 8000962:	71fb      	strb	r3, [r7, #7]
 8000964:	4613      	mov	r3, r2
 8000966:	71bb      	strb	r3, [r7, #6]
	addr |= (1<<7);
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800096e:	b2db      	uxtb	r3, r3
 8000970:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000978:	480c      	ldr	r0, [pc, #48]	; (80009ac <LoRA_Write_Register+0x54>)
 800097a:	f007 fcbb 	bl	80082f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 800097e:	1df9      	adds	r1, r7, #7
 8000980:	2364      	movs	r3, #100	; 0x64
 8000982:	2201      	movs	r2, #1
 8000984:	480a      	ldr	r0, [pc, #40]	; (80009b0 <LoRA_Write_Register+0x58>)
 8000986:	f00e fbff 	bl	800f188 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 800098a:	1db9      	adds	r1, r7, #6
 800098c:	2364      	movs	r3, #100	; 0x64
 800098e:	2201      	movs	r2, #1
 8000990:	4807      	ldr	r0, [pc, #28]	; (80009b0 <LoRA_Write_Register+0x58>)
 8000992:	f00e fbf9 	bl	800f188 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000996:	2201      	movs	r2, #1
 8000998:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800099c:	4803      	ldr	r0, [pc, #12]	; (80009ac <LoRA_Write_Register+0x54>)
 800099e:	f007 fca9 	bl	80082f4 <HAL_GPIO_WritePin>

}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	58020000 	.word	0x58020000
 80009b0:	24001150 	.word	0x24001150

080009b4 <LoRA_sleep>:


void LoRA_sleep(void){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 80009b8:	2180      	movs	r1, #128	; 0x80
 80009ba:	2001      	movs	r0, #1
 80009bc:	f7ff ffcc 	bl	8000958 <LoRA_Write_Register>
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency){
 80009c4:	b5b0      	push	{r4, r5, r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 80009cc:	6879      	ldr	r1, [r7, #4]
 80009ce:	17c8      	asrs	r0, r1, #31
 80009d0:	460a      	mov	r2, r1
 80009d2:	4603      	mov	r3, r0
 80009d4:	1355      	asrs	r5, r2, #13
 80009d6:	04d4      	lsls	r4, r2, #19
 80009d8:	4a18      	ldr	r2, [pc, #96]	; (8000a3c <LoRA_set_frequency+0x78>)
 80009da:	f04f 0300 	mov.w	r3, #0
 80009de:	4620      	mov	r0, r4
 80009e0:	4629      	mov	r1, r5
 80009e2:	f7ff fcfd 	bl	80003e0 <__aeabi_uldivmod>
 80009e6:	4602      	mov	r2, r0
 80009e8:	460b      	mov	r3, r1
 80009ea:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t)(frf >> 16));
 80009ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80009f2:	f04f 0200 	mov.w	r2, #0
 80009f6:	f04f 0300 	mov.w	r3, #0
 80009fa:	0c02      	lsrs	r2, r0, #16
 80009fc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a00:	0c0b      	lsrs	r3, r1, #16
 8000a02:	b2d3      	uxtb	r3, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	2006      	movs	r0, #6
 8000a08:	f7ff ffa6 	bl	8000958 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t)(frf >> 8));
 8000a0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000a10:	f04f 0200 	mov.w	r2, #0
 8000a14:	f04f 0300 	mov.w	r3, #0
 8000a18:	0a02      	lsrs	r2, r0, #8
 8000a1a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000a1e:	0a0b      	lsrs	r3, r1, #8
 8000a20:	b2d3      	uxtb	r3, r2
 8000a22:	4619      	mov	r1, r3
 8000a24:	2007      	movs	r0, #7
 8000a26:	f7ff ff97 	bl	8000958 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8000a2a:	7a3b      	ldrb	r3, [r7, #8]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	2008      	movs	r0, #8
 8000a30:	f7ff ff92 	bl	8000958 <LoRA_Write_Register>
}
 8000a34:	bf00      	nop
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a3c:	01e84800 	.word	0x01e84800

08000a40 <LoRA_idle>:

void LoRA_idle(){
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8000a44:	2181      	movs	r1, #129	; 0x81
 8000a46:	2001      	movs	r0, #1
 8000a48:	f7ff ff86 	bl	8000958 <LoRA_Write_Register>
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <LoRA_setOCP>:

void LoRA_setOCP(uint8_t mA){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	71fb      	strb	r3, [r7, #7]
	  uint8_t ocpTrim = 27;
 8000a5a:	231b      	movs	r3, #27
 8000a5c:	73fb      	strb	r3, [r7, #15]

	  if (mA <= 120) {
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	2b78      	cmp	r3, #120	; 0x78
 8000a62:	d809      	bhi.n	8000a78 <LoRA_setOCP+0x28>
	    ocpTrim = (mA - 45) / 5;
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	3b2d      	subs	r3, #45	; 0x2d
 8000a68:	4a11      	ldr	r2, [pc, #68]	; (8000ab0 <LoRA_setOCP+0x60>)
 8000a6a:	fb82 1203 	smull	r1, r2, r2, r3
 8000a6e:	1052      	asrs	r2, r2, #1
 8000a70:	17db      	asrs	r3, r3, #31
 8000a72:	1ad3      	subs	r3, r2, r3
 8000a74:	73fb      	strb	r3, [r7, #15]
 8000a76:	e00b      	b.n	8000a90 <LoRA_setOCP+0x40>
	  } else if (mA <=240) {
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	2bf0      	cmp	r3, #240	; 0xf0
 8000a7c:	d808      	bhi.n	8000a90 <LoRA_setOCP+0x40>
	    ocpTrim = (mA + 30) / 10;
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	331e      	adds	r3, #30
 8000a82:	4a0b      	ldr	r2, [pc, #44]	; (8000ab0 <LoRA_setOCP+0x60>)
 8000a84:	fb82 1203 	smull	r1, r2, r2, r3
 8000a88:	1092      	asrs	r2, r2, #2
 8000a8a:	17db      	asrs	r3, r3, #31
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	73fb      	strb	r3, [r7, #15]
	  }

	  LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8000a90:	7bfb      	ldrb	r3, [r7, #15]
 8000a92:	f003 031f 	and.w	r3, r3, #31
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	f043 0320 	orr.w	r3, r3, #32
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	200b      	movs	r0, #11
 8000aa2:	f7ff ff59 	bl	8000958 <LoRA_Write_Register>
}
 8000aa6:	bf00      	nop
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	66666667 	.word	0x66666667

08000ab4 <LoRA_setTxPower>:

void LoRA_setTxPower(int level){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
    // PA BOOST
    if (level > 17) {
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b11      	cmp	r3, #17
 8000ac0:	dd0f      	ble.n	8000ae2 <LoRA_setTxPower+0x2e>
      if (level > 20) {
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2b14      	cmp	r3, #20
 8000ac6:	dd01      	ble.n	8000acc <LoRA_setTxPower+0x18>
        level = 20;
 8000ac8:	2314      	movs	r3, #20
 8000aca:	607b      	str	r3, [r7, #4]
      }

      // subtract 3 from level, so 18 - 20 maps to 15 - 17
      level -= 3;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	3b03      	subs	r3, #3
 8000ad0:	607b      	str	r3, [r7, #4]

      // High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
      LoRA_Write_Register(REG_PA_DAC, 0x87);
 8000ad2:	2187      	movs	r1, #135	; 0x87
 8000ad4:	204d      	movs	r0, #77	; 0x4d
 8000ad6:	f7ff ff3f 	bl	8000958 <LoRA_Write_Register>
      LoRA_setOCP(140);
 8000ada:	208c      	movs	r0, #140	; 0x8c
 8000adc:	f7ff ffb8 	bl	8000a50 <LoRA_setOCP>
 8000ae0:	e00b      	b.n	8000afa <LoRA_setTxPower+0x46>
    } else {
      if (level < 2) {
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	dc01      	bgt.n	8000aec <LoRA_setTxPower+0x38>
        level = 2;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	607b      	str	r3, [r7, #4]
      }
      //Default value PA_HF/LF or +17dBm
      LoRA_Write_Register(REG_PA_DAC, 0x84);
 8000aec:	2184      	movs	r1, #132	; 0x84
 8000aee:	204d      	movs	r0, #77	; 0x4d
 8000af0:	f7ff ff32 	bl	8000958 <LoRA_Write_Register>
      LoRA_setOCP(100);
 8000af4:	2064      	movs	r0, #100	; 0x64
 8000af6:	f7ff ffab 	bl	8000a50 <LoRA_setOCP>
    }

    LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	3b02      	subs	r3, #2
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	b25b      	sxtb	r3, r3
 8000b04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b08:	b25b      	sxtb	r3, r3
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	2009      	movs	r0, #9
 8000b10:	f7ff ff22 	bl	8000958 <LoRA_Write_Register>
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <LoRA_explicit_header_mode>:

void LoRA_explicit_header_mode(){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_MODEM_CONFIG_1, LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
 8000b20:	201d      	movs	r0, #29
 8000b22:	f7ff fef1 	bl	8000908 <LoRA_Read_Register>
 8000b26:	4603      	mov	r3, r0
 8000b28:	f023 0301 	bic.w	r3, r3, #1
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	4619      	mov	r1, r3
 8000b30:	201d      	movs	r0, #29
 8000b32:	f7ff ff11 	bl	8000958 <LoRA_Write_Register>
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <LoRA_begin>:

void LoRA_begin(long frequency){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b09c      	sub	sp, #112	; 0x70
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8000b44:	2201      	movs	r2, #1
 8000b46:	2101      	movs	r1, #1
 8000b48:	4822      	ldr	r0, [pc, #136]	; (8000bd4 <LoRA_begin+0x98>)
 8000b4a:	f007 fbd3 	bl	80082f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b54:	4820      	ldr	r0, [pc, #128]	; (8000bd8 <LoRA_begin+0x9c>)
 8000b56:	f007 fbcd 	bl	80082f4 <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 8000b5a:	2042      	movs	r0, #66	; 0x42
 8000b5c:	f7ff fed4 	bl	8000908 <LoRA_Read_Register>
 8000b60:	4603      	mov	r3, r0
 8000b62:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    char data_debug[100];
	sprintf( data_debug,  "%x\n", version);
 8000b66:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000b6a:	f107 0308 	add.w	r3, r7, #8
 8000b6e:	491b      	ldr	r1, [pc, #108]	; (8000bdc <LoRA_begin+0xa0>)
 8000b70:	4618      	mov	r0, r3
 8000b72:	f016 fddf 	bl	8017734 <siprintf>
	CDC_Transmit_HS(data_debug, strlen(data_debug));
 8000b76:	f107 0308 	add.w	r3, r7, #8
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff fbd2 	bl	8000324 <strlen>
 8000b80:	4602      	mov	r2, r0
 8000b82:	f107 0308 	add.w	r3, r7, #8
 8000b86:	4611      	mov	r1, r2
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f016 f97f 	bl	8016e8c <CDC_Transmit_HS>

	LoRA_sleep();
 8000b8e:	f7ff ff11 	bl	80009b4 <LoRA_sleep>
	LoRA_set_frequency(868000000);
 8000b92:	4813      	ldr	r0, [pc, #76]	; (8000be0 <LoRA_begin+0xa4>)
 8000b94:	f7ff ff16 	bl	80009c4 <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 8000b98:	2100      	movs	r1, #0
 8000b9a:	200f      	movs	r0, #15
 8000b9c:	f7ff fedc 	bl	8000958 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	200e      	movs	r0, #14
 8000ba4:	f7ff fed8 	bl	8000958 <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 8000ba8:	200c      	movs	r0, #12
 8000baa:	f7ff fead 	bl	8000908 <LoRA_Read_Register>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	f043 0303 	orr.w	r3, r3, #3
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	200c      	movs	r0, #12
 8000bba:	f7ff fecd 	bl	8000958 <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 8000bbe:	2104      	movs	r1, #4
 8000bc0:	2026      	movs	r0, #38	; 0x26
 8000bc2:	f7ff fec9 	bl	8000958 <LoRA_Write_Register>

	LoRA_setTxPower(17);
 8000bc6:	2011      	movs	r0, #17
 8000bc8:	f7ff ff74 	bl	8000ab4 <LoRA_setTxPower>

}
 8000bcc:	bf00      	nop
 8000bce:	3770      	adds	r7, #112	; 0x70
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	58020c00 	.word	0x58020c00
 8000bd8:	58020000 	.word	0x58020000
 8000bdc:	08018a18 	.word	0x08018a18
 8000be0:	33bca100 	.word	0x33bca100

08000be4 <LoRA_beginPacket>:


void LoRA_beginPacket(){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
	LoRA_explicit_header_mode();
 8000be8:	f7ff ff98 	bl	8000b1c <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8000bec:	2100      	movs	r1, #0
 8000bee:	200d      	movs	r0, #13
 8000bf0:	f7ff feb2 	bl	8000958 <LoRA_Write_Register>
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, 0);
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2022      	movs	r0, #34	; 0x22
 8000bf8:	f7ff feae 	bl	8000958 <LoRA_Write_Register>
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <LoRA_endPacket>:

void LoRA_endPacket(){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8000c04:	2183      	movs	r1, #131	; 0x83
 8000c06:	2001      	movs	r0, #1
 8000c08:	f7ff fea6 	bl	8000958 <LoRA_Write_Register>

	while((LoRA_Read_Register(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0){
 8000c0c:	bf00      	nop
 8000c0e:	2012      	movs	r0, #18
 8000c10:	f7ff fe7a 	bl	8000908 <LoRA_Read_Register>
 8000c14:	4603      	mov	r3, r0
 8000c16:	f003 0308 	and.w	r3, r3, #8
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d0f7      	beq.n	8000c0e <LoRA_endPacket+0xe>

	}
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8000c1e:	2185      	movs	r1, #133	; 0x85
 8000c20:	2001      	movs	r0, #1
 8000c22:	f7ff fe99 	bl	8000958 <LoRA_Write_Register>

	LoRA_Write_Register(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8000c26:	2108      	movs	r1, #8
 8000c28:	2012      	movs	r0, #18
 8000c2a:	f7ff fe95 	bl	8000958 <LoRA_Write_Register>

}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <LoRA_parsePacket>:


int LoRA_parsePacket(){
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
	int packetLenght = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	607b      	str	r3, [r7, #4]
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 8000c3c:	2012      	movs	r0, #18
 8000c3e:	f7ff fe63 	bl	8000908 <LoRA_Read_Register>
 8000c42:	4603      	mov	r3, r0
 8000c44:	603b      	str	r3, [r7, #0]

	LoRA_explicit_header_mode();
 8000c46:	f7ff ff69 	bl	8000b1c <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	4619      	mov	r1, r3
 8000c50:	2012      	movs	r0, #18
 8000c52:	f7ff fe81 	bl	8000958 <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d016      	beq.n	8000c8e <LoRA_parsePacket+0x5c>
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	f003 0320 	and.w	r3, r3, #32
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d111      	bne.n	8000c8e <LoRA_parsePacket+0x5c>
		packetLenght = LoRA_Read_Register(REG_RX_NB_BYTES);
 8000c6a:	2013      	movs	r0, #19
 8000c6c:	f7ff fe4c 	bl	8000908 <LoRA_Read_Register>
 8000c70:	4603      	mov	r3, r0
 8000c72:	607b      	str	r3, [r7, #4]
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 8000c74:	2010      	movs	r0, #16
 8000c76:	f7ff fe47 	bl	8000908 <LoRA_Read_Register>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	200d      	movs	r0, #13
 8000c80:	f7ff fe6a 	bl	8000958 <LoRA_Write_Register>
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8000c84:	2185      	movs	r1, #133	; 0x85
 8000c86:	2001      	movs	r0, #1
 8000c88:	f7ff fe66 	bl	8000958 <LoRA_Write_Register>
 8000c8c:	e00d      	b.n	8000caa <LoRA_parsePacket+0x78>

		//LoRA_idle();
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS)){
 8000c8e:	2001      	movs	r0, #1
 8000c90:	f7ff fe3a 	bl	8000908 <LoRA_Read_Register>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b85      	cmp	r3, #133	; 0x85
 8000c98:	d007      	beq.n	8000caa <LoRA_parsePacket+0x78>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	200d      	movs	r0, #13
 8000c9e:	f7ff fe5b 	bl	8000958 <LoRA_Write_Register>

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8000ca2:	2185      	movs	r1, #133	; 0x85
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	f7ff fe57 	bl	8000958 <LoRA_Write_Register>
	}
	return packetLenght;
 8000caa:	687b      	ldr	r3, [r7, #4]

}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <LoRA_sendPacket>:

void LoRA_sendPacket(char * data){
 8000cb4:	b5b0      	push	{r4, r5, r7, lr}
 8000cb6:	b0c4      	sub	sp, #272	; 0x110
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000cbe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000cc2:	6018      	str	r0, [r3, #0]
	LoRA_idle();
 8000cc4:	f7ff febc 	bl	8000a40 <LoRA_idle>

	char debug[MAX_PKT_LENGTH];
	if(recv_packet(debug, MAX_PKT_LENGTH)) {
 8000cc8:	f107 0308 	add.w	r3, r7, #8
 8000ccc:	21ff      	movs	r1, #255	; 0xff
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 f878 	bl	8000dc4 <recv_packet>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d022      	beq.n	8000d20 <LoRA_sendPacket+0x6c>
		HAL_Delay(100);
 8000cda:	2064      	movs	r0, #100	; 0x64
 8000cdc:	f003 f858 	bl	8003d90 <HAL_Delay>
		strcat(debug, " was thrown away");
 8000ce0:	f107 0308 	add.w	r3, r7, #8
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fb1d 	bl	8000324 <strlen>
 8000cea:	4603      	mov	r3, r0
 8000cec:	461a      	mov	r2, r3
 8000cee:	f107 0308 	add.w	r3, r7, #8
 8000cf2:	4413      	add	r3, r2
 8000cf4:	4a32      	ldr	r2, [pc, #200]	; (8000dc0 <LoRA_sendPacket+0x10c>)
 8000cf6:	461d      	mov	r5, r3
 8000cf8:	4614      	mov	r4, r2
 8000cfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cfc:	6028      	str	r0, [r5, #0]
 8000cfe:	6069      	str	r1, [r5, #4]
 8000d00:	60aa      	str	r2, [r5, #8]
 8000d02:	60eb      	str	r3, [r5, #12]
 8000d04:	7823      	ldrb	r3, [r4, #0]
 8000d06:	742b      	strb	r3, [r5, #16]
		CDC_Transmit_HS(debug, strlen(debug));
 8000d08:	f107 0308 	add.w	r3, r7, #8
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fb09 	bl	8000324 <strlen>
 8000d12:	4602      	mov	r2, r0
 8000d14:	f107 0308 	add.w	r3, r7, #8
 8000d18:	4611      	mov	r1, r2
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f016 f8b6 	bl	8016e8c <CDC_Transmit_HS>
	}



	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 8000d20:	2012      	movs	r0, #18
 8000d22:	f7ff fdf1 	bl	8000908 <LoRA_Read_Register>
 8000d26:	4603      	mov	r3, r0
 8000d28:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	/*char debug[250];
	sprintf(debug, "here: %d\n", (irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK));
	CDC_Transmit_HS(debug, strlen(debug));
	HAL_Delay(100);*/
	if(!((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0))
 8000d2c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d005      	beq.n	8000d44 <LoRA_sendPacket+0x90>
 8000d38:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000d3c:	f003 0320 	and.w	r3, r3, #32
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d033      	beq.n	8000dac <LoRA_sendPacket+0xf8>
	{
		//CDC_Transmit_HS("here1\n", strlen("here1\n"));
		LoRA_beginPacket();
 8000d44:	f7ff ff4e 	bl	8000be4 <LoRA_beginPacket>
    	for(int i = 0; i < strlen(data); i++){
 8000d48:	2300      	movs	r3, #0
 8000d4a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000d4e:	e011      	b.n	8000d74 <LoRA_sendPacket+0xc0>
    		LoRA_Write_Register(REG_FIFO, data[i]);
 8000d50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000d54:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000d58:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000d5c:	6812      	ldr	r2, [r2, #0]
 8000d5e:	4413      	add	r3, r2
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	4619      	mov	r1, r3
 8000d64:	2000      	movs	r0, #0
 8000d66:	f7ff fdf7 	bl	8000958 <LoRA_Write_Register>
    	for(int i = 0; i < strlen(data); i++){
 8000d6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000d6e:	3301      	adds	r3, #1
 8000d70:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000d74:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d78:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000d7c:	6818      	ldr	r0, [r3, #0]
 8000d7e:	f7ff fad1 	bl	8000324 <strlen>
 8000d82:	4602      	mov	r2, r0
 8000d84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d8e1      	bhi.n	8000d50 <LoRA_sendPacket+0x9c>
    	}
    	LoRA_Write_Register(REG_PAYLOAD_LENGTH, strlen(data));
 8000d8c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d90:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000d94:	6818      	ldr	r0, [r3, #0]
 8000d96:	f7ff fac5 	bl	8000324 <strlen>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	4619      	mov	r1, r3
 8000da0:	2022      	movs	r0, #34	; 0x22
 8000da2:	f7ff fdd9 	bl	8000958 <LoRA_Write_Register>
    	LoRA_endPacket();
 8000da6:	f7ff ff2b 	bl	8000c00 <LoRA_endPacket>
 8000daa:	e004      	b.n	8000db6 <LoRA_sendPacket+0x102>
    	HAL_Delay(100);
    	CDC_Transmit_HS(sent, strlen(sent));*/
	}
	else {
		//CDC_Transmit_HS("here2\n", strlen("here2\n"));
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8000dac:	2185      	movs	r1, #133	; 0x85
 8000dae:	2001      	movs	r0, #1
 8000db0:	f7ff fdd2 	bl	8000958 <LoRA_Write_Register>
	}
	/*char sent[300];
	sprintf(sent, "\nsent: %s\n", data);
	HAL_Delay(100);
	CDC_Transmit_HS(sent, strlen(sent));*/
}
 8000db4:	bf00      	nop
 8000db6:	bf00      	nop
 8000db8:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bdb0      	pop	{r4, r5, r7, pc}
 8000dc0:	08018a1c 	.word	0x08018a1c

08000dc4 <recv_packet>:

int recv_packet(char* LoRA_data, int max_length)
{
 8000dc4:	b590      	push	{r4, r7, lr}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
  int packet_length = LoRA_parsePacket();
 8000dce:	f7ff ff30 	bl	8000c32 <LoRA_parsePacket>
 8000dd2:	60b8      	str	r0, [r7, #8]
  if(max_length-1 < packet_length) //-1 for the null terminator
 8000dd4:	683a      	ldr	r2, [r7, #0]
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	dc01      	bgt.n	8000de0 <recv_packet+0x1c>
  {
    return 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	e01c      	b.n	8000e1a <recv_packet+0x56>
  }
  if(packet_length){
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d018      	beq.n	8000e18 <recv_packet+0x54>
    for(int i = 0; i < packet_length; i++){
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	e00a      	b.n	8000e02 <recv_packet+0x3e>
      LoRA_data[i] = LoRA_Read_Register(0x00);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	18d4      	adds	r4, r2, r3
 8000df2:	2000      	movs	r0, #0
 8000df4:	f7ff fd88 	bl	8000908 <LoRA_Read_Register>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	7023      	strb	r3, [r4, #0]
    for(int i = 0; i < packet_length; i++){
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	dbf0      	blt.n	8000dec <recv_packet+0x28>
    }
    LoRA_data[packet_length] = '\0';
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	4413      	add	r3, r2
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]

    /*char rec[300];
    sprintf(rec, "received: %s\n", LoRA_data);
    CDC_Transmit_HS(rec, strlen(rec));*/
    return packet_length;
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	e000      	b.n	8000e1a <recv_packet+0x56>
  }
  else{
    return 0;
 8000e18:	2300      	movs	r3, #0
  }
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd90      	pop	{r4, r7, pc}

08000e22 <reliable_send_packet>:

void reliable_send_packet(char *LoRA_data) {
 8000e22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e26:	b089      	sub	sp, #36	; 0x24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	466b      	mov	r3, sp
 8000e2e:	461e      	mov	r6, r3
	//CDC_Transmit_HS("debug\n", strlen("debug\n"));
	uint16_t length = strlen(LoRA_data) + 1; //+1 for the \0
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff fa77 	bl	8000324 <strlen>
 8000e36:	4603      	mov	r3, r0
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	82fb      	strh	r3, [r7, #22]
	char acknowledge[length];
 8000e3e:	8af9      	ldrh	r1, [r7, #22]
 8000e40:	460b      	mov	r3, r1
 8000e42:	3b01      	subs	r3, #1
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	b28b      	uxth	r3, r1
 8000e48:	2200      	movs	r2, #0
 8000e4a:	4698      	mov	r8, r3
 8000e4c:	4691      	mov	r9, r2
 8000e4e:	f04f 0200 	mov.w	r2, #0
 8000e52:	f04f 0300 	mov.w	r3, #0
 8000e56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e62:	b28b      	uxth	r3, r1
 8000e64:	2200      	movs	r2, #0
 8000e66:	461c      	mov	r4, r3
 8000e68:	4615      	mov	r5, r2
 8000e6a:	f04f 0200 	mov.w	r2, #0
 8000e6e:	f04f 0300 	mov.w	r3, #0
 8000e72:	00eb      	lsls	r3, r5, #3
 8000e74:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000e78:	00e2      	lsls	r2, r4, #3
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	3307      	adds	r3, #7
 8000e7e:	08db      	lsrs	r3, r3, #3
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	ebad 0d03 	sub.w	sp, sp, r3
 8000e86:	466b      	mov	r3, sp
 8000e88:	3300      	adds	r3, #0
 8000e8a:	60fb      	str	r3, [r7, #12]
	uint32_t lastTime = HAL_GetTick();
 8000e8c:	f002 ff74 	bl	8003d78 <HAL_GetTick>
 8000e90:	61f8      	str	r0, [r7, #28]
	uint32_t wait_time = rand_range(3, 13)*100;
 8000e92:	210d      	movs	r1, #13
 8000e94:	2003      	movs	r0, #3
 8000e96:	f001 fe63 	bl	8002b60 <rand_range>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2264      	movs	r2, #100	; 0x64
 8000e9e:	fb02 f303 	mul.w	r3, r2, r3
 8000ea2:	61bb      	str	r3, [r7, #24]
	LoRA_sendPacket(LoRA_data);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ff05 	bl	8000cb4 <LoRA_sendPacket>
	while (1) {

		if (recv_packet(acknowledge, length)) {
 8000eaa:	8afb      	ldrh	r3, [r7, #22]
 8000eac:	4619      	mov	r1, r3
 8000eae:	68f8      	ldr	r0, [r7, #12]
 8000eb0:	f7ff ff88 	bl	8000dc4 <recv_packet>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d009      	beq.n	8000ece <reliable_send_packet+0xac>

			//cehck crc
			if (strcmp(acknowledge, LoRA_data) != 0) {
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	68f8      	ldr	r0, [r7, #12]
 8000ebe:	f7ff fa27 	bl	8000310 <strcmp>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d01a      	beq.n	8000efe <reliable_send_packet+0xdc>
				LoRA_sendPacket(LoRA_data);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff fef3 	bl	8000cb4 <LoRA_sendPacket>
			} else {
				break;
			}
		}

		if (HAL_GetTick() - lastTime > wait_time) {
 8000ece:	f002 ff53 	bl	8003d78 <HAL_GetTick>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d2e5      	bcs.n	8000eaa <reliable_send_packet+0x88>
	    	//CDC_Transmit_HS("debug\n", strlen("debug\n"));
			wait_time = rand_range(3, 13)*100;
 8000ede:	210d      	movs	r1, #13
 8000ee0:	2003      	movs	r0, #3
 8000ee2:	f001 fe3d 	bl	8002b60 <rand_range>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2264      	movs	r2, #100	; 0x64
 8000eea:	fb02 f303 	mul.w	r3, r2, r3
 8000eee:	61bb      	str	r3, [r7, #24]
			LoRA_sendPacket(LoRA_data);
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff fedf 	bl	8000cb4 <LoRA_sendPacket>
			lastTime = HAL_GetTick();
 8000ef6:	f002 ff3f 	bl	8003d78 <HAL_GetTick>
 8000efa:	61f8      	str	r0, [r7, #28]
		if (recv_packet(acknowledge, length)) {
 8000efc:	e7d5      	b.n	8000eaa <reliable_send_packet+0x88>
				break;
 8000efe:	bf00      	nop
 8000f00:	46b5      	mov	sp, r6
		}
	}
}
 8000f02:	bf00      	nop
 8000f04:	3724      	adds	r7, #36	; 0x24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000f0c <communicationHandler>:
#include "communication_protocol.h"
#include "LoRA.h"
#include "usb_device.h"

void communicationHandler(void reliableReceiveHandle(char*), void streamReceiveHandle(char*), char* streamSendHandle(int), struct ReliableSendConfig reliableSendHandle(), int initial_communication_state) {
 8000f0c:	b590      	push	{r4, r7, lr}
 8000f0e:	f2ad 4d3c 	subw	sp, sp, #1084	; 0x43c
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	f507 6487 	add.w	r4, r7, #1080	; 0x438
 8000f18:	f2a4 442c 	subw	r4, r4, #1068	; 0x42c
 8000f1c:	6020      	str	r0, [r4, #0]
 8000f1e:	f507 6087 	add.w	r0, r7, #1080	; 0x438
 8000f22:	f5a0 6086 	sub.w	r0, r0, #1072	; 0x430
 8000f26:	6001      	str	r1, [r0, #0]
 8000f28:	f507 6187 	add.w	r1, r7, #1080	; 0x438
 8000f2c:	f2a1 4134 	subw	r1, r1, #1076	; 0x434
 8000f30:	600a      	str	r2, [r1, #0]
 8000f32:	f507 6287 	add.w	r2, r7, #1080	; 0x438
 8000f36:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 8000f3a:	6013      	str	r3, [r2, #0]
  //just for testing
  char state[MAX_PKT_LENGTH] = "";
 8000f3c:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8000f40:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	22fb      	movs	r2, #251	; 0xfb
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f016 fc3e 	bl	80177d0 <memset>
  //from here it's okay
  int communication_state = initial_communication_state;
 8000f54:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8000f58:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
  int max_packet_count = 0;
 8000f5c:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8000f60:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
  char previous_packet[MAX_PKT_LENGTH] = "";
 8000f68:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8000f6c:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	3304      	adds	r3, #4
 8000f76:	22fb      	movs	r2, #251	; 0xfb
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f016 fc28 	bl	80177d0 <memset>
  char received_packet[MAX_PKT_LENGTH] = "";
 8000f80:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8000f84:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	22fb      	movs	r2, #251	; 0xfb
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f016 fc1c 	bl	80177d0 <memset>
  char general_buffer[MAX_PKT_LENGTH] = "";
 8000f98:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8000f9c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	22fb      	movs	r2, #251	; 0xfb
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f016 fc10 	bl	80177d0 <memset>
  uint32_t previousTime = HAL_GetTick();
 8000fb0:	f002 fee2 	bl	8003d78 <HAL_GetTick>
 8000fb4:	f8c7 0430 	str.w	r0, [r7, #1072]	; 0x430
  uint32_t wait_time = rand_range(3, 13)*100;
 8000fb8:	210d      	movs	r1, #13
 8000fba:	2003      	movs	r0, #3
 8000fbc:	f001 fdd0 	bl	8002b60 <rand_range>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2264      	movs	r2, #100	; 0x64
 8000fc4:	fb02 f303 	mul.w	r3, r2, r3
 8000fc8:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c

  while (1) {
      if(communication_state == RECEIVING_RELIABLE)
 8000fcc:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d152      	bne.n	800107a <communicationHandler+0x16e>
      {
        if(recv_packet(received_packet, MAX_PKT_LENGTH))
 8000fd4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000fd8:	21ff      	movs	r1, #255	; 0xff
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fef2 	bl	8000dc4 <recv_packet>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d0f2      	beq.n	8000fcc <communicationHandler+0xc0>
        {
          previousTime = HAL_GetTick();
 8000fe6:	f002 fec7 	bl	8003d78 <HAL_GetTick>
 8000fea:	f8c7 0430 	str.w	r0, [r7, #1072]	; 0x430

          if(sscanf(received_packet, "$ %s", state) == 1)
 8000fee:	f507 7249 	add.w	r2, r7, #804	; 0x324
 8000ff2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000ff6:	49c7      	ldr	r1, [pc, #796]	; (8001314 <communicationHandler+0x408>)
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f016 fbbb 	bl	8017774 <siscanf>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b01      	cmp	r3, #1
 8001002:	d103      	bne.n	800100c <communicationHandler+0x100>
          {
            communication_state = SENDING_RELIABLE;
 8001004:	2302      	movs	r3, #2
 8001006:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 800100a:	e7df      	b.n	8000fcc <communicationHandler+0xc0>
          }
          else if(sscanf(received_packet, "! %d", &max_packet_count) == 1)
 800100c:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8001010:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001014:	49c0      	ldr	r1, [pc, #768]	; (8001318 <communicationHandler+0x40c>)
 8001016:	4618      	mov	r0, r3
 8001018:	f016 fbac 	bl	8017774 <siscanf>
 800101c:	4603      	mov	r3, r0
 800101e:	2b01      	cmp	r3, #1
 8001020:	d103      	bne.n	800102a <communicationHandler+0x11e>
          {
            communication_state = SENDING_STREAM;
 8001022:	2303      	movs	r3, #3
 8001024:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 8001028:	e7d0      	b.n	8000fcc <communicationHandler+0xc0>
          }
          else if(strcmp(received_packet, previous_packet)==0)
 800102a:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800102e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001032:	4611      	mov	r1, r2
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff f96b 	bl	8000310 <strcmp>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d105      	bne.n	800104c <communicationHandler+0x140>
          {
            //send acknowledge again
            LoRA_sendPacket(received_packet);
 8001040:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fe35 	bl	8000cb4 <LoRA_sendPacket>
 800104a:	e7bf      	b.n	8000fcc <communicationHandler+0xc0>
          }
          else
          {
        	//send acknowledge
            strcpy(previous_packet, received_packet);
 800104c:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001050:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001054:	4611      	mov	r1, r2
 8001056:	4618      	mov	r0, r3
 8001058:	f016 fbee 	bl	8017838 <strcpy>
            LoRA_sendPacket(received_packet);
 800105c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fe27 	bl	8000cb4 <LoRA_sendPacket>

            reliableReceiveHandle(received_packet);
 8001066:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800106a:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800106e:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4610      	mov	r0, r2
 8001076:	4798      	blx	r3
 8001078:	e7a8      	b.n	8000fcc <communicationHandler+0xc0>

          }
        }
      }
      else if(communication_state == RECEIVING_STREAM)
 800107a:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 800107e:	2b01      	cmp	r3, #1
 8001080:	d14f      	bne.n	8001122 <communicationHandler+0x216>
      {
        if(recv_packet(received_packet, MAX_PKT_LENGTH))
 8001082:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001086:	21ff      	movs	r1, #255	; 0xff
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fe9b 	bl	8000dc4 <recv_packet>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d01c      	beq.n	80010ce <communicationHandler+0x1c2>
        {
          previousTime = HAL_GetTick();
 8001094:	f002 fe70 	bl	8003d78 <HAL_GetTick>
 8001098:	f8c7 0430 	str.w	r0, [r7, #1072]	; 0x430
          if(sscanf(received_packet, "$ %s", state) == 1)
 800109c:	f507 7249 	add.w	r2, r7, #804	; 0x324
 80010a0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80010a4:	499b      	ldr	r1, [pc, #620]	; (8001314 <communicationHandler+0x408>)
 80010a6:	4618      	mov	r0, r3
 80010a8:	f016 fb64 	bl	8017774 <siscanf>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d103      	bne.n	80010ba <communicationHandler+0x1ae>
          {
            communication_state = SENDING_RELIABLE;
 80010b2:	2302      	movs	r3, #2
 80010b4:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 80010b8:	e788      	b.n	8000fcc <communicationHandler+0xc0>
          }
          else
          {
        	streamReceiveHandle(received_packet);
 80010ba:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80010be:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80010c2:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4610      	mov	r0, r2
 80010ca:	4798      	blx	r3
 80010cc:	e77e      	b.n	8000fcc <communicationHandler+0xc0>
          }
        }
        else if(HAL_GetTick()-previousTime > wait_time)
 80010ce:	f002 fe53 	bl	8003d78 <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
 80010de:	429a      	cmp	r2, r3
 80010e0:	f4bf af74 	bcs.w	8000fcc <communicationHandler+0xc0>
        {
          wait_time = rand_range(3, 13)*100;
 80010e4:	210d      	movs	r1, #13
 80010e6:	2003      	movs	r0, #3
 80010e8:	f001 fd3a 	bl	8002b60 <rand_range>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2264      	movs	r2, #100	; 0x64
 80010f0:	fb02 f303 	mul.w	r3, r2, r3
 80010f4:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
          previousTime = HAL_GetTick();
 80010f8:	f002 fe3e 	bl	8003d78 <HAL_GetTick>
 80010fc:	f8c7 0430 	str.w	r0, [r7, #1072]	; 0x430
          //give up SENDING
          sprintf(general_buffer, "! %d", max_packet_count);
 8001100:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001104:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	f107 0320 	add.w	r3, r7, #32
 800110e:	4982      	ldr	r1, [pc, #520]	; (8001318 <communicationHandler+0x40c>)
 8001110:	4618      	mov	r0, r3
 8001112:	f016 fb0f 	bl	8017734 <siprintf>
          LoRA_sendPacket(general_buffer);
 8001116:	f107 0320 	add.w	r3, r7, #32
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fdca 	bl	8000cb4 <LoRA_sendPacket>
 8001120:	e754      	b.n	8000fcc <communicationHandler+0xc0>
        }
      }
      else if(communication_state == SENDING_STREAM)
 8001122:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8001126:	2b03      	cmp	r3, #3
 8001128:	d12b      	bne.n	8001182 <communicationHandler+0x276>
      {
        if(max_packet_count == 0)
 800112a:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800112e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d106      	bne.n	8001146 <communicationHandler+0x23a>
        {
          communication_state = TRANSITIONING;
 8001138:	2304      	movs	r3, #4
 800113a:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
          LoRA_sendPacket("$");
 800113e:	4877      	ldr	r0, [pc, #476]	; (800131c <communicationHandler+0x410>)
 8001140:	f7ff fdb8 	bl	8000cb4 <LoRA_sendPacket>
 8001144:	e742      	b.n	8000fcc <communicationHandler+0xc0>
        }
        else
        {
          //send whatever
          char* msg = streamSendHandle(max_packet_count);
 8001146:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800114a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001154:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4610      	mov	r0, r2
 800115c:	4798      	blx	r3
 800115e:	f8c7 0424 	str.w	r0, [r7, #1060]	; 0x424
          LoRA_sendPacket(msg);
 8001162:	f8d7 0424 	ldr.w	r0, [r7, #1060]	; 0x424
 8001166:	f7ff fda5 	bl	8000cb4 <LoRA_sendPacket>
          max_packet_count--;
 800116a:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800116e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	1e5a      	subs	r2, r3, #1
 8001176:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800117a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	e724      	b.n	8000fcc <communicationHandler+0xc0>
        }

      }
      else if(communication_state == SENDING_RELIABLE)
 8001182:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8001186:	2b02      	cmp	r3, #2
 8001188:	f040 8097 	bne.w	80012ba <communicationHandler+0x3ae>
      {
        reliable_send_packet("*");
 800118c:	4864      	ldr	r0, [pc, #400]	; (8001320 <communicationHandler+0x414>)
 800118e:	f7ff fe48 	bl	8000e22 <reliable_send_packet>
        struct ReliableSendConfig config = reliableSendHandle();
 8001192:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001196:	f5a3 6285 	sub.w	r2, r3, #1064	; 0x428
 800119a:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800119e:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4610      	mov	r0, r2
 80011a6:	4798      	blx	r3
        for(int i = 0; i < config.messages_count; i++)
 80011a8:	2300      	movs	r3, #0
 80011aa:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 80011ae:	e040      	b.n	8001232 <communicationHandler+0x326>
        {
        	if(config.messages[i][0] == '$' || config.messages[i][0] == '*' || config.messages[i][0] == '!')
 80011b0:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80011b4:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 80011b8:	689a      	ldr	r2, [r3, #8]
 80011ba:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b24      	cmp	r3, #36	; 0x24
 80011c8:	d019      	beq.n	80011fe <communicationHandler+0x2f2>
 80011ca:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80011ce:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b2a      	cmp	r3, #42	; 0x2a
 80011e2:	d00c      	beq.n	80011fe <communicationHandler+0x2f2>
 80011e4:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80011e8:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 80011ec:	689a      	ldr	r2, [r3, #8]
 80011ee:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b21      	cmp	r3, #33	; 0x21
 80011fc:	d107      	bne.n	800120e <communicationHandler+0x302>
        	{
        		HAL_Delay(100);
 80011fe:	2064      	movs	r0, #100	; 0x64
 8001200:	f002 fdc6 	bl	8003d90 <HAL_Delay>
        		CDC_Transmit_HS("Can't send control commands! ('$', '*', '!')\n", strlen("Can't send control commands! ('$', '*', '!')\n"));
 8001204:	212d      	movs	r1, #45	; 0x2d
 8001206:	4847      	ldr	r0, [pc, #284]	; (8001324 <communicationHandler+0x418>)
 8001208:	f015 fe40 	bl	8016e8c <CDC_Transmit_HS>
        	{
 800120c:	e00c      	b.n	8001228 <communicationHandler+0x31c>
        	}
        	else
        	{
        		reliable_send_packet(config.messages[i]);
 800120e:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001212:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4413      	add	r3, r2
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fdfd 	bl	8000e22 <reliable_send_packet>
        for(int i = 0; i < config.messages_count; i++)
 8001228:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 800122c:	3301      	adds	r3, #1
 800122e:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 8001232:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001236:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 8001240:	429a      	cmp	r2, r3
 8001242:	dbb5      	blt.n	80011b0 <communicationHandler+0x2a4>
        	}
        }
        if(config.mode==RECEIVING_STREAM)
 8001244:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001248:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d11d      	bne.n	800128e <communicationHandler+0x382>
        {
          communication_state = RECEIVING_STREAM;
 8001252:	2301      	movs	r3, #1
 8001254:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
          max_packet_count = config.streamable_packets;
 8001258:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800125c:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8001260:	685a      	ldr	r2, [r3, #4]
 8001262:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001266:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800126a:	601a      	str	r2, [r3, #0]
          sprintf(general_buffer, "! %d", max_packet_count);
 800126c:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001270:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	f107 0320 	add.w	r3, r7, #32
 800127a:	4927      	ldr	r1, [pc, #156]	; (8001318 <communicationHandler+0x40c>)
 800127c:	4618      	mov	r0, r3
 800127e:	f016 fa59 	bl	8017734 <siprintf>
          LoRA_sendPacket(general_buffer);
 8001282:	f107 0320 	add.w	r3, r7, #32
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fd14 	bl	8000cb4 <LoRA_sendPacket>
 800128c:	e69e      	b.n	8000fcc <communicationHandler+0xc0>
        }
        else if(config.mode==TRANSITIONING)
 800128e:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001292:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b04      	cmp	r3, #4
 800129a:	d106      	bne.n	80012aa <communicationHandler+0x39e>
        {
          communication_state = TRANSITIONING;
 800129c:	2304      	movs	r3, #4
 800129e:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
          LoRA_sendPacket("$");
 80012a2:	481e      	ldr	r0, [pc, #120]	; (800131c <communicationHandler+0x410>)
 80012a4:	f7ff fd06 	bl	8000cb4 <LoRA_sendPacket>
 80012a8:	e690      	b.n	8000fcc <communicationHandler+0xc0>
        }
        else
        {
            HAL_Delay(100);
 80012aa:	2064      	movs	r0, #100	; 0x64
 80012ac:	f002 fd70 	bl	8003d90 <HAL_Delay>
        	CDC_Transmit_HS("Shouldn't try to transition to this mode.\n", strlen("Shouldn't try to transition to this mode.\n"));
 80012b0:	212a      	movs	r1, #42	; 0x2a
 80012b2:	481d      	ldr	r0, [pc, #116]	; (8001328 <communicationHandler+0x41c>)
 80012b4:	f015 fdea 	bl	8016e8c <CDC_Transmit_HS>
 80012b8:	e688      	b.n	8000fcc <communicationHandler+0xc0>
        }
      }
      else if(communication_state == TRANSITIONING)
 80012ba:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80012be:	2b04      	cmp	r3, #4
 80012c0:	f47f ae84 	bne.w	8000fcc <communicationHandler+0xc0>
      {

          if(recv_packet(received_packet, MAX_PKT_LENGTH))
 80012c4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80012c8:	21ff      	movs	r1, #255	; 0xff
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fd7a 	bl	8000dc4 <recv_packet>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d02a      	beq.n	800132c <communicationHandler+0x420>
          {
            previousTime = HAL_GetTick();
 80012d6:	f002 fd4f 	bl	8003d78 <HAL_GetTick>
 80012da:	f8c7 0430 	str.w	r0, [r7, #1072]	; 0x430
            if(strcmp(received_packet, "*")==0)
 80012de:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80012e2:	490f      	ldr	r1, [pc, #60]	; (8001320 <communicationHandler+0x414>)
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff f813 	bl	8000310 <strcmp>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f47f ae6d 	bne.w	8000fcc <communicationHandler+0xc0>
            {
              strcpy(previous_packet, received_packet);
 80012f2:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80012f6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80012fa:	4611      	mov	r1, r2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f016 fa9b 	bl	8017838 <strcpy>
              communication_state = RECEIVING_RELIABLE;
 8001302:	2300      	movs	r3, #0
 8001304:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
              LoRA_sendPacket(received_packet);
 8001308:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fcd1 	bl	8000cb4 <LoRA_sendPacket>
 8001312:	e65b      	b.n	8000fcc <communicationHandler+0xc0>
 8001314:	08018a30 	.word	0x08018a30
 8001318:	08018a38 	.word	0x08018a38
 800131c:	08018a40 	.word	0x08018a40
 8001320:	08018a44 	.word	0x08018a44
 8001324:	08018a48 	.word	0x08018a48
 8001328:	08018a78 	.word	0x08018a78
            }
          }
          else if (HAL_GetTick()-previousTime > wait_time)
 800132c:	f002 fd24 	bl	8003d78 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
 800133c:	429a      	cmp	r2, r3
 800133e:	f4bf ae45 	bcs.w	8000fcc <communicationHandler+0xc0>
          {
            wait_time = rand_range(3, 13)*100;
 8001342:	210d      	movs	r1, #13
 8001344:	2003      	movs	r0, #3
 8001346:	f001 fc0b 	bl	8002b60 <rand_range>
 800134a:	4603      	mov	r3, r0
 800134c:	2264      	movs	r2, #100	; 0x64
 800134e:	fb02 f303 	mul.w	r3, r2, r3
 8001352:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
            previousTime = HAL_GetTick();
 8001356:	f002 fd0f 	bl	8003d78 <HAL_GetTick>
 800135a:	f8c7 0430 	str.w	r0, [r7, #1072]	; 0x430
            LoRA_sendPacket("$");
 800135e:	4802      	ldr	r0, [pc, #8]	; (8001368 <communicationHandler+0x45c>)
 8001360:	f7ff fca8 	bl	8000cb4 <LoRA_sendPacket>
      if(communication_state == RECEIVING_RELIABLE)
 8001364:	e632      	b.n	8000fcc <communicationHandler+0xc0>
 8001366:	bf00      	nop
 8001368:	08018a40 	.word	0x08018a40

0800136c <usbReceiveHandle>:

//to do: move usb
#define usbBufferLen 256
uint8_t usbDataBuffer[usbBufferLen];
uint32_t usbBytesReady = 0;
int usbReceiveHandle(char* output){
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	uint32_t temp = usbBytesReady;
 8001374:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <usbReceiveHandle+0x38>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	60fb      	str	r3, [r7, #12]

	if(temp > 0){
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d00c      	beq.n	800139a <usbReceiveHandle+0x2e>
		if(temp > 256){
			//crash(2);
		}
		memcpy(output, usbDataBuffer, temp);
 8001380:	68fa      	ldr	r2, [r7, #12]
 8001382:	4909      	ldr	r1, [pc, #36]	; (80013a8 <usbReceiveHandle+0x3c>)
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f016 fa5f 	bl	8017848 <memcpy>
		output[temp] = '\0';
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4413      	add	r3, r2
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]
		usbBytesReady = 0;
 8001394:	4b03      	ldr	r3, [pc, #12]	; (80013a4 <usbReceiveHandle+0x38>)
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
	}
	return temp;
 800139a:	68fb      	ldr	r3, [r7, #12]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	24000270 	.word	0x24000270
 80013a8:	24000170 	.word	0x24000170

080013ac <groundstationReliableReceiveHandle>:


void groundstationReliableReceiveHandle(char* received_packet) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	CDC_Transmit_HS(received_packet, strlen(received_packet));
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7fe ffb5 	bl	8000324 <strlen>
 80013ba:	4603      	mov	r3, r0
 80013bc:	4619      	mov	r1, r3
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f015 fd64 	bl	8016e8c <CDC_Transmit_HS>
}
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <groundstationStreamReceiveHandle>:

void groundstationStreamReceiveHandle(char* received_packet) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	CDC_Transmit_HS(received_packet, strlen(received_packet));
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7fe ffa5 	bl	8000324 <strlen>
 80013da:	4603      	mov	r3, r0
 80013dc:	4619      	mov	r1, r3
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f015 fd54 	bl	8016e8c <CDC_Transmit_HS>
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <groundstationStreamSendHandle>:

char* groundstationStreamSendHandle(int remainingPacketCount) {
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	return "Ground station shouldn't be streaming!\n";
 80013f4:	4b03      	ldr	r3, [pc, #12]	; (8001404 <groundstationStreamSendHandle+0x18>)
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	08018aa4 	.word	0x08018aa4

08001408 <groundstationReliableSendHandle>:

char input[usbBufferLen];
char* groundstation_messages[1];

struct ReliableSendConfig groundstationReliableSendHandle() {
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b0cb      	sub	sp, #300	; 0x12c
 800140c:	af00      	add	r7, sp, #0
 800140e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001412:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001416:	6018      	str	r0, [r3, #0]
	struct ReliableSendConfig config;
    CDC_Transmit_HS("\nState of other board: \n> ", strlen("\nState of other board: \n> "));
 8001418:	211a      	movs	r1, #26
 800141a:	4827      	ldr	r0, [pc, #156]	; (80014b8 <groundstationReliableSendHandle+0xb0>)
 800141c:	f015 fd36 	bl	8016e8c <CDC_Transmit_HS>
    //get input

    while(!usbReceiveHandle(input))
 8001420:	bf00      	nop
 8001422:	4826      	ldr	r0, [pc, #152]	; (80014bc <groundstationReliableSendHandle+0xb4>)
 8001424:	f7ff ffa2 	bl	800136c <usbReceiveHandle>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d0f9      	beq.n	8001422 <groundstationReliableSendHandle+0x1a>
    {}

    groundstation_messages[0]=input;
 800142e:	4b24      	ldr	r3, [pc, #144]	; (80014c0 <groundstationReliableSendHandle+0xb8>)
 8001430:	4a22      	ldr	r2, [pc, #136]	; (80014bc <groundstationReliableSendHandle+0xb4>)
 8001432:	601a      	str	r2, [r3, #0]
    config.messages = groundstation_messages;
 8001434:	4b22      	ldr	r3, [pc, #136]	; (80014c0 <groundstationReliableSendHandle+0xb8>)
 8001436:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    config.messages_count = 1;
 800143a:	2301      	movs	r3, #1
 800143c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    config.streamable_packets = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    //reliable_send_packet(input);

    char debug[usbBufferLen+10];
    sprintf(debug, "%s\n", input);
 8001446:	f107 030c 	add.w	r3, r7, #12
 800144a:	4a1c      	ldr	r2, [pc, #112]	; (80014bc <groundstationReliableSendHandle+0xb4>)
 800144c:	491d      	ldr	r1, [pc, #116]	; (80014c4 <groundstationReliableSendHandle+0xbc>)
 800144e:	4618      	mov	r0, r3
 8001450:	f016 f970 	bl	8017734 <siprintf>
    CDC_Transmit_HS(debug, strlen(debug));
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	4618      	mov	r0, r3
 800145a:	f7fe ff63 	bl	8000324 <strlen>
 800145e:	4602      	mov	r2, r0
 8001460:	f107 030c 	add.w	r3, r7, #12
 8001464:	4611      	mov	r1, r2
 8001466:	4618      	mov	r0, r3
 8001468:	f015 fd10 	bl	8016e8c <CDC_Transmit_HS>

    if(strcmp(input,"FIRE")==0)
 800146c:	4916      	ldr	r1, [pc, #88]	; (80014c8 <groundstationReliableSendHandle+0xc0>)
 800146e:	4813      	ldr	r0, [pc, #76]	; (80014bc <groundstationReliableSendHandle+0xb4>)
 8001470:	f7fe ff4e 	bl	8000310 <strcmp>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d106      	bne.n	8001488 <groundstationReliableSendHandle+0x80>
    {
      config.mode = RECEIVING_STREAM;
 800147a:	2301      	movs	r3, #1
 800147c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
      config.streamable_packets = 50;
 8001480:	2332      	movs	r3, #50	; 0x32
 8001482:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001486:	e002      	b.n	800148e <groundstationReliableSendHandle+0x86>
      sprintf(sendMessage, "! %d", 50);
      LoRA_sendPacket(sendMessage);*/
    }
    else
    {
      config.mode = TRANSITIONING;
 8001488:	2304      	movs	r3, #4
 800148a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
      /*communication_state = TRANSITIONING;
      HAL_Delay(100);
      LoRA_sendPacket("$");*/
    }
    return config;
 800148e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001492:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	461c      	mov	r4, r3
 800149a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800149e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80014a4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80014a8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80014ac:	6818      	ldr	r0, [r3, #0]
 80014ae:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd90      	pop	{r4, r7, pc}
 80014b6:	bf00      	nop
 80014b8:	08018acc 	.word	0x08018acc
 80014bc:	24000274 	.word	0x24000274
 80014c0:	24000374 	.word	0x24000374
 80014c4:	08018ae8 	.word	0x08018ae8
 80014c8:	08018aec 	.word	0x08018aec

080014cc <setServo>:
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;


void setServo(int servoNum, float angle){
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal =(int)( 3000 + (4000 * (angle/180)));
 80014d8:	ed97 7a00 	vldr	s14, [r7]
 80014dc:	eddf 6a1b 	vldr	s13, [pc, #108]	; 800154c <setServo+0x80>
 80014e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014e4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001550 <setServo+0x84>
 80014e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ec:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001554 <setServo+0x88>
 80014f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014f8:	ee17 3a90 	vmov	r3, s15
 80014fc:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3b01      	subs	r3, #1
 8001502:	2b03      	cmp	r3, #3
 8001504:	d81a      	bhi.n	800153c <setServo+0x70>
 8001506:	a201      	add	r2, pc, #4	; (adr r2, 800150c <setServo+0x40>)
 8001508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800150c:	0800151d 	.word	0x0800151d
 8001510:	08001525 	.word	0x08001525
 8001514:	0800152d 	.word	0x0800152d
 8001518:	08001535 	.word	0x08001535
		case 1:
			TIM4->CCR4 = timerVal;
 800151c:	4a0e      	ldr	r2, [pc, #56]	; (8001558 <setServo+0x8c>)
 800151e:	89fb      	ldrh	r3, [r7, #14]
 8001520:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 8001522:	e00c      	b.n	800153e <setServo+0x72>
		case 2:
			TIM4->CCR3 = timerVal;
 8001524:	4a0c      	ldr	r2, [pc, #48]	; (8001558 <setServo+0x8c>)
 8001526:	89fb      	ldrh	r3, [r7, #14]
 8001528:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 800152a:	e008      	b.n	800153e <setServo+0x72>
		case 3:
			TIM4->CCR2 = timerVal;
 800152c:	4a0a      	ldr	r2, [pc, #40]	; (8001558 <setServo+0x8c>)
 800152e:	89fb      	ldrh	r3, [r7, #14]
 8001530:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 8001532:	e004      	b.n	800153e <setServo+0x72>
		case 4:
			TIM4->CCR1 = timerVal;
 8001534:	4a08      	ldr	r2, [pc, #32]	; (8001558 <setServo+0x8c>)
 8001536:	89fb      	ldrh	r3, [r7, #14]
 8001538:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 800153a:	e000      	b.n	800153e <setServo+0x72>

		default:
			break;
 800153c:	bf00      	nop
	}
}
 800153e:	bf00      	nop
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	43340000 	.word	0x43340000
 8001550:	457a0000 	.word	0x457a0000
 8001554:	453b8000 	.word	0x453b8000
 8001558:	40000800 	.word	0x40000800

0800155c <setLEDs>:

void setLEDs(void) {
 800155c:	b580      	push	{r7, lr}
 800155e:	b08e      	sub	sp, #56	; 0x38
 8001560:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 8001562:	2300      	movs	r3, #0
 8001564:	637b      	str	r3, [r7, #52]	; 0x34
 8001566:	e181      	b.n	800186c <setLEDs+0x310>
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 8001568:	4aa1      	ldr	r2, [pc, #644]	; (80017f0 <setLEDs+0x294>)
 800156a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800156c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001570:	2b03      	cmp	r3, #3
 8001572:	f200 8177 	bhi.w	8001864 <setLEDs+0x308>
 8001576:	a201      	add	r2, pc, #4	; (adr r2, 800157c <setLEDs+0x20>)
 8001578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800157c:	0800158d 	.word	0x0800158d
 8001580:	0800163d 	.word	0x0800163d
 8001584:	080016ed 	.word	0x080016ed
 8001588:	0800179d 	.word	0x0800179d
		case 0:
			for (int j = 0; j < 3; j++) {
 800158c:	2300      	movs	r3, #0
 800158e:	633b      	str	r3, [r7, #48]	; 0x30
 8001590:	e042      	b.n	8001618 <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 8001592:	2300      	movs	r3, #0
 8001594:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001596:	e039      	b.n	800160c <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8001598:	4996      	ldr	r1, [pc, #600]	; (80017f4 <setLEDs+0x298>)
 800159a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800159c:	4613      	mov	r3, r2
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	4413      	add	r3, r2
 80015a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015a4:	4413      	add	r3, r2
 80015a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015aa:	2180      	movs	r1, #128	; 0x80
 80015ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015ae:	fa41 f202 	asr.w	r2, r1, r2
 80015b2:	4013      	ands	r3, r2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d013      	beq.n	80015e0 <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 80015b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015ba:	00da      	lsls	r2, r3, #3
 80015bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015be:	18d1      	adds	r1, r2, r3
 80015c0:	4a8b      	ldr	r2, [pc, #556]	; (80017f0 <setLEDs+0x294>)
 80015c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	4413      	add	r3, r2
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	4613      	mov	r3, r2
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	4413      	add	r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	440b      	add	r3, r1
 80015d4:	3308      	adds	r3, #8
 80015d6:	4a88      	ldr	r2, [pc, #544]	; (80017f8 <setLEDs+0x29c>)
 80015d8:	213c      	movs	r1, #60	; 0x3c
 80015da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80015de:	e012      	b.n	8001606 <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 80015e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015e2:	00da      	lsls	r2, r3, #3
 80015e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e6:	18d1      	adds	r1, r2, r3
 80015e8:	4a81      	ldr	r2, [pc, #516]	; (80017f0 <setLEDs+0x294>)
 80015ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	4413      	add	r3, r2
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	4613      	mov	r3, r2
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	4413      	add	r3, r2
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	440b      	add	r3, r1
 80015fc:	3308      	adds	r3, #8
 80015fe:	4a7e      	ldr	r2, [pc, #504]	; (80017f8 <setLEDs+0x29c>)
 8001600:	211e      	movs	r1, #30
 8001602:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8001606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001608:	3301      	adds	r3, #1
 800160a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800160c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800160e:	2b07      	cmp	r3, #7
 8001610:	ddc2      	ble.n	8001598 <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 8001612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001614:	3301      	adds	r3, #1
 8001616:	633b      	str	r3, [r7, #48]	; 0x30
 8001618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800161a:	2b02      	cmp	r3, #2
 800161c:	ddb9      	ble.n	8001592 <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 800161e:	2380      	movs	r3, #128	; 0x80
 8001620:	62bb      	str	r3, [r7, #40]	; 0x28
 8001622:	e007      	b.n	8001634 <setLEDs+0xd8>
				LED_PWM_Data_0[i] = 0;
 8001624:	4a74      	ldr	r2, [pc, #464]	; (80017f8 <setLEDs+0x29c>)
 8001626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001628:	2100      	movs	r1, #0
 800162a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 800162e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001630:	3301      	adds	r3, #1
 8001632:	62bb      	str	r3, [r7, #40]	; 0x28
 8001634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001636:	2bb1      	cmp	r3, #177	; 0xb1
 8001638:	ddf4      	ble.n	8001624 <setLEDs+0xc8>
			}
			break;
 800163a:	e114      	b.n	8001866 <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 800163c:	2300      	movs	r3, #0
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
 8001640:	e042      	b.n	80016c8 <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 8001642:	2300      	movs	r3, #0
 8001644:	623b      	str	r3, [r7, #32]
 8001646:	e039      	b.n	80016bc <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8001648:	496a      	ldr	r1, [pc, #424]	; (80017f4 <setLEDs+0x298>)
 800164a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800164c:	4613      	mov	r3, r2
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	4413      	add	r3, r2
 8001652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001654:	4413      	add	r3, r2
 8001656:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800165a:	2180      	movs	r1, #128	; 0x80
 800165c:	6a3a      	ldr	r2, [r7, #32]
 800165e:	fa41 f202 	asr.w	r2, r1, r2
 8001662:	4013      	ands	r3, r2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d013      	beq.n	8001690 <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8001668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166a:	00da      	lsls	r2, r3, #3
 800166c:	6a3b      	ldr	r3, [r7, #32]
 800166e:	18d1      	adds	r1, r2, r3
 8001670:	4a5f      	ldr	r2, [pc, #380]	; (80017f0 <setLEDs+0x294>)
 8001672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	4413      	add	r3, r2
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	4613      	mov	r3, r2
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	4413      	add	r3, r2
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	440b      	add	r3, r1
 8001684:	3308      	adds	r3, #8
 8001686:	4a5d      	ldr	r2, [pc, #372]	; (80017fc <setLEDs+0x2a0>)
 8001688:	213c      	movs	r1, #60	; 0x3c
 800168a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800168e:	e012      	b.n	80016b6 <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	00da      	lsls	r2, r3, #3
 8001694:	6a3b      	ldr	r3, [r7, #32]
 8001696:	18d1      	adds	r1, r2, r3
 8001698:	4a55      	ldr	r2, [pc, #340]	; (80017f0 <setLEDs+0x294>)
 800169a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	4413      	add	r3, r2
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	4613      	mov	r3, r2
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	4413      	add	r3, r2
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	440b      	add	r3, r1
 80016ac:	3308      	adds	r3, #8
 80016ae:	4a53      	ldr	r2, [pc, #332]	; (80017fc <setLEDs+0x2a0>)
 80016b0:	211e      	movs	r1, #30
 80016b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 80016b6:	6a3b      	ldr	r3, [r7, #32]
 80016b8:	3301      	adds	r3, #1
 80016ba:	623b      	str	r3, [r7, #32]
 80016bc:	6a3b      	ldr	r3, [r7, #32]
 80016be:	2b07      	cmp	r3, #7
 80016c0:	ddc2      	ble.n	8001648 <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 80016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c4:	3301      	adds	r3, #1
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	ddb9      	ble.n	8001642 <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 80016ce:	2380      	movs	r3, #128	; 0x80
 80016d0:	61fb      	str	r3, [r7, #28]
 80016d2:	e007      	b.n	80016e4 <setLEDs+0x188>
				LED_PWM_Data_1[i] = 0;
 80016d4:	4a49      	ldr	r2, [pc, #292]	; (80017fc <setLEDs+0x2a0>)
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	2100      	movs	r1, #0
 80016da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3301      	adds	r3, #1
 80016e2:	61fb      	str	r3, [r7, #28]
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	2bb1      	cmp	r3, #177	; 0xb1
 80016e8:	ddf4      	ble.n	80016d4 <setLEDs+0x178>
			}
			break;
 80016ea:	e0bc      	b.n	8001866 <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 80016ec:	2300      	movs	r3, #0
 80016ee:	61bb      	str	r3, [r7, #24]
 80016f0:	e042      	b.n	8001778 <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	e039      	b.n	800176c <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 80016f8:	493e      	ldr	r1, [pc, #248]	; (80017f4 <setLEDs+0x298>)
 80016fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016fc:	4613      	mov	r3, r2
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	4413      	add	r3, r2
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4413      	add	r3, r2
 8001706:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800170a:	2180      	movs	r1, #128	; 0x80
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	fa41 f202 	asr.w	r2, r1, r2
 8001712:	4013      	ands	r3, r2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d013      	beq.n	8001740 <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	00da      	lsls	r2, r3, #3
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	18d1      	adds	r1, r2, r3
 8001720:	4a33      	ldr	r2, [pc, #204]	; (80017f0 <setLEDs+0x294>)
 8001722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	4413      	add	r3, r2
 8001728:	685a      	ldr	r2, [r3, #4]
 800172a:	4613      	mov	r3, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4413      	add	r3, r2
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	440b      	add	r3, r1
 8001734:	3308      	adds	r3, #8
 8001736:	4a32      	ldr	r2, [pc, #200]	; (8001800 <setLEDs+0x2a4>)
 8001738:	213c      	movs	r1, #60	; 0x3c
 800173a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800173e:	e012      	b.n	8001766 <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	00da      	lsls	r2, r3, #3
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	18d1      	adds	r1, r2, r3
 8001748:	4a29      	ldr	r2, [pc, #164]	; (80017f0 <setLEDs+0x294>)
 800174a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	4413      	add	r3, r2
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	4613      	mov	r3, r2
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	4413      	add	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	440b      	add	r3, r1
 800175c:	3308      	adds	r3, #8
 800175e:	4a28      	ldr	r2, [pc, #160]	; (8001800 <setLEDs+0x2a4>)
 8001760:	211e      	movs	r1, #30
 8001762:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	3301      	adds	r3, #1
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	2b07      	cmp	r3, #7
 8001770:	ddc2      	ble.n	80016f8 <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	3301      	adds	r3, #1
 8001776:	61bb      	str	r3, [r7, #24]
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	2b02      	cmp	r3, #2
 800177c:	ddb9      	ble.n	80016f2 <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 800177e:	2338      	movs	r3, #56	; 0x38
 8001780:	613b      	str	r3, [r7, #16]
 8001782:	e007      	b.n	8001794 <setLEDs+0x238>
				LED_PWM_Data_2[i] = 0;
 8001784:	4a1e      	ldr	r2, [pc, #120]	; (8001800 <setLEDs+0x2a4>)
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	2100      	movs	r1, #0
 800178a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	3301      	adds	r3, #1
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	2b69      	cmp	r3, #105	; 0x69
 8001798:	ddf4      	ble.n	8001784 <setLEDs+0x228>
			}
			break;
 800179a:	e064      	b.n	8001866 <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 800179c:	2300      	movs	r3, #0
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	e04e      	b.n	8001840 <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 80017a2:	2300      	movs	r3, #0
 80017a4:	60bb      	str	r3, [r7, #8]
 80017a6:	e045      	b.n	8001834 <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 80017a8:	4912      	ldr	r1, [pc, #72]	; (80017f4 <setLEDs+0x298>)
 80017aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017ac:	4613      	mov	r3, r2
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	4413      	add	r3, r2
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	4413      	add	r3, r2
 80017b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017ba:	2180      	movs	r1, #128	; 0x80
 80017bc:	68ba      	ldr	r2, [r7, #8]
 80017be:	fa41 f202 	asr.w	r2, r1, r2
 80017c2:	4013      	ands	r3, r2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d01f      	beq.n	8001808 <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	00da      	lsls	r2, r3, #3
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	18d1      	adds	r1, r2, r3
 80017d0:	4a07      	ldr	r2, [pc, #28]	; (80017f0 <setLEDs+0x294>)
 80017d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	4413      	add	r3, r2
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	4613      	mov	r3, r2
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	4413      	add	r3, r2
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	440b      	add	r3, r1
 80017e4:	3308      	adds	r3, #8
 80017e6:	4a07      	ldr	r2, [pc, #28]	; (8001804 <setLEDs+0x2a8>)
 80017e8:	213c      	movs	r1, #60	; 0x3c
 80017ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80017ee:	e01e      	b.n	800182e <setLEDs+0x2d2>
 80017f0:	08018c1c 	.word	0x08018c1c
 80017f4:	24000c58 	.word	0x24000c58
 80017f8:	24000378 	.word	0x24000378
 80017fc:	24000640 	.word	0x24000640
 8001800:	24000908 	.word	0x24000908
 8001804:	24000ab0 	.word	0x24000ab0
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	00da      	lsls	r2, r3, #3
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	18d1      	adds	r1, r2, r3
 8001810:	4a26      	ldr	r2, [pc, #152]	; (80018ac <setLEDs+0x350>)
 8001812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	4413      	add	r3, r2
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	4613      	mov	r3, r2
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	4413      	add	r3, r2
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	440b      	add	r3, r1
 8001824:	3308      	adds	r3, #8
 8001826:	4a22      	ldr	r2, [pc, #136]	; (80018b0 <setLEDs+0x354>)
 8001828:	211e      	movs	r1, #30
 800182a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	3301      	adds	r3, #1
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	2b07      	cmp	r3, #7
 8001838:	ddb6      	ble.n	80017a8 <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	3301      	adds	r3, #1
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2b02      	cmp	r3, #2
 8001844:	ddad      	ble.n	80017a2 <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8001846:	2338      	movs	r3, #56	; 0x38
 8001848:	607b      	str	r3, [r7, #4]
 800184a:	e007      	b.n	800185c <setLEDs+0x300>
				LED_PWM_Data_3[i] = 0;
 800184c:	4a18      	ldr	r2, [pc, #96]	; (80018b0 <setLEDs+0x354>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2100      	movs	r1, #0
 8001852:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3301      	adds	r3, #1
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b69      	cmp	r3, #105	; 0x69
 8001860:	ddf4      	ble.n	800184c <setLEDs+0x2f0>
			}
			break;
 8001862:	e000      	b.n	8001866 <setLEDs+0x30a>
		default:
			break;
 8001864:	bf00      	nop
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 8001866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001868:	3301      	adds	r3, #1
 800186a:	637b      	str	r3, [r7, #52]	; 0x34
 800186c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800186e:	2b0d      	cmp	r3, #13
 8001870:	f77f ae7a 	ble.w	8001568 <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0, (NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
 8001874:	23b2      	movs	r3, #178	; 0xb2
 8001876:	4a0f      	ldr	r2, [pc, #60]	; (80018b4 <setLEDs+0x358>)
 8001878:	210c      	movs	r1, #12
 800187a:	480f      	ldr	r0, [pc, #60]	; (80018b8 <setLEDs+0x35c>)
 800187c:	f00e fac4 	bl	800fe08 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1, (NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
 8001880:	23b2      	movs	r3, #178	; 0xb2
 8001882:	4a0e      	ldr	r2, [pc, #56]	; (80018bc <setLEDs+0x360>)
 8001884:	2108      	movs	r1, #8
 8001886:	480e      	ldr	r0, [pc, #56]	; (80018c0 <setLEDs+0x364>)
 8001888:	f00e fabe 	bl	800fe08 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2, (NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
 800188c:	236a      	movs	r3, #106	; 0x6a
 800188e:	4a0d      	ldr	r2, [pc, #52]	; (80018c4 <setLEDs+0x368>)
 8001890:	2104      	movs	r1, #4
 8001892:	480d      	ldr	r0, [pc, #52]	; (80018c8 <setLEDs+0x36c>)
 8001894:	f00e fab8 	bl	800fe08 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3, (NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3
 8001898:	236a      	movs	r3, #106	; 0x6a
 800189a:	4a05      	ldr	r2, [pc, #20]	; (80018b0 <setLEDs+0x354>)
 800189c:	2100      	movs	r1, #0
 800189e:	480a      	ldr	r0, [pc, #40]	; (80018c8 <setLEDs+0x36c>)
 80018a0:	f00e fab2 	bl	800fe08 <HAL_TIM_PWM_Start_DMA>

}
 80018a4:	bf00      	nop
 80018a6:	3738      	adds	r7, #56	; 0x38
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	08018c1c 	.word	0x08018c1c
 80018b0:	24000ab0 	.word	0x24000ab0
 80018b4:	24000378 	.word	0x24000378
 80018b8:	240012bc 	.word	0x240012bc
 80018bc:	24000640 	.word	0x24000640
 80018c0:	240011d8 	.word	0x240011d8
 80018c4:	24000908 	.word	0x24000908
 80018c8:	24001224 	.word	0x24001224

080018cc <disarm>:
	int status = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
	return status;
}

int disarm(char* state)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 80018d4:	2200      	movs	r2, #0
 80018d6:	2102      	movs	r1, #2
 80018d8:	4827      	ldr	r0, [pc, #156]	; (8001978 <disarm+0xac>)
 80018da:	f006 fd0b 	bl	80082f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);
 80018de:	2200      	movs	r2, #0
 80018e0:	2104      	movs	r1, #4
 80018e2:	4825      	ldr	r0, [pc, #148]	; (8001978 <disarm+0xac>)
 80018e4:	f006 fd06 	bl	80082f4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 80018e8:	2200      	movs	r2, #0
 80018ea:	2102      	movs	r1, #2
 80018ec:	4823      	ldr	r0, [pc, #140]	; (800197c <disarm+0xb0>)
 80018ee:	f006 fd01 	bl	80082f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 80018f2:	2200      	movs	r2, #0
 80018f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018f8:	4821      	ldr	r0, [pc, #132]	; (8001980 <disarm+0xb4>)
 80018fa:	f006 fcfb 	bl	80082f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001904:	481e      	ldr	r0, [pc, #120]	; (8001980 <disarm+0xb4>)
 8001906:	f006 fcf5 	bl	80082f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001910:	481b      	ldr	r0, [pc, #108]	; (8001980 <disarm+0xb4>)
 8001912:	f006 fcef 	bl	80082f4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	2102      	movs	r1, #2
 800191a:	481a      	ldr	r0, [pc, #104]	; (8001984 <disarm+0xb8>)
 800191c:	f006 fcea 	bl	80082f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 8001920:	2200      	movs	r2, #0
 8001922:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001926:	4818      	ldr	r0, [pc, #96]	; (8001988 <disarm+0xbc>)
 8001928:	f006 fce4 	bl	80082f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 800192c:	2200      	movs	r2, #0
 800192e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001932:	4815      	ldr	r0, [pc, #84]	; (8001988 <disarm+0xbc>)
 8001934:	f006 fcde 	bl	80082f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 8001938:	2200      	movs	r2, #0
 800193a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800193e:	4812      	ldr	r0, [pc, #72]	; (8001988 <disarm+0xbc>)
 8001940:	f006 fcd8 	bl	80082f4 <HAL_GPIO_WritePin>

  LED_Color_Data[7][0] = 255;
 8001944:	4b11      	ldr	r3, [pc, #68]	; (800198c <disarm+0xc0>)
 8001946:	22ff      	movs	r2, #255	; 0xff
 8001948:	655a      	str	r2, [r3, #84]	; 0x54
  LED_Color_Data[7][1] = 0;
 800194a:	4b10      	ldr	r3, [pc, #64]	; (800198c <disarm+0xc0>)
 800194c:	2200      	movs	r2, #0
 800194e:	659a      	str	r2, [r3, #88]	; 0x58
  LED_Color_Data[7][2] = 0;
 8001950:	4b0e      	ldr	r3, [pc, #56]	; (800198c <disarm+0xc0>)
 8001952:	2200      	movs	r2, #0
 8001954:	65da      	str	r2, [r3, #92]	; 0x5c
  setLEDs();
 8001956:	f7ff fe01 	bl	800155c <setLEDs>

  strcpy(state,"DISARMED");
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	490c      	ldr	r1, [pc, #48]	; (8001990 <disarm+0xc4>)
 800195e:	461a      	mov	r2, r3
 8001960:	460b      	mov	r3, r1
 8001962:	cb03      	ldmia	r3!, {r0, r1}
 8001964:	6010      	str	r0, [r2, #0]
 8001966:	6051      	str	r1, [r2, #4]
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	7213      	strb	r3, [r2, #8]
  return 0;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	58020000 	.word	0x58020000
 800197c:	58020400 	.word	0x58020400
 8001980:	58021400 	.word	0x58021400
 8001984:	58021800 	.word	0x58021800
 8001988:	58021000 	.word	0x58021000
 800198c:	24000c58 	.word	0x24000c58
 8001990:	08018af4 	.word	0x08018af4
 8001994:	00000000 	.word	0x00000000

08001998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001998:	b5b0      	push	{r4, r5, r7, lr}
 800199a:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 800199e:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 80019a0:	4b99      	ldr	r3, [pc, #612]	; (8001c08 <main+0x270>)
 80019a2:	f507 7459 	add.w	r4, r7, #868	; 0x364
 80019a6:	461d      	mov	r5, r3
 80019a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019b0:	c403      	stmia	r4!, {r0, r1}
 80019b2:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019b4:	f002 f95a 	bl	8003c6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019b8:	f000 f944 	bl	8001c44 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80019bc:	f000 f9ba 	bl	8001d34 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019c0:	f000 ff42 	bl	8002848 <MX_GPIO_Init>
  MX_DMA_Init();
 80019c4:	f000 fee0 	bl	8002788 <MX_DMA_Init>
  MX_SPI3_Init();
 80019c8:	f000 fc3a 	bl	8002240 <MX_SPI3_Init>
  MX_FDCAN3_Init();
 80019cc:	f000 faca 	bl	8001f64 <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 80019d0:	f000 fe8e 	bl	80026f0 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80019d4:	f000 f9e0 	bl	8001d98 <MX_ADC1_Init>
  MX_TIM4_Init();
 80019d8:	f000 fd44 	bl	8002464 <MX_TIM4_Init>
  MX_ADC3_Init();
 80019dc:	f000 fa54 	bl	8001e88 <MX_ADC3_Init>
  MX_SPI2_Init();
 80019e0:	f000 fbd8 	bl	8002194 <MX_SPI2_Init>
  MX_I2C2_Init();
 80019e4:	f000 fb22 	bl	800202c <MX_I2C2_Init>
  MX_TIM2_Init();
 80019e8:	f000 fc80 	bl	80022ec <MX_TIM2_Init>
  MX_TIM5_Init();
 80019ec:	f000 fdb6 	bl	800255c <MX_TIM5_Init>
  MX_TIM3_Init();
 80019f0:	f000 fcd4 	bl	800239c <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 80019f4:	f015 f974 	bl	8016ce0 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 80019f8:	f000 fb76 	bl	80020e8 <MX_SPI1_Init>
  MX_UART4_Init();
 80019fc:	f000 fe2c 	bl	8002658 <MX_UART4_Init>
  MX_FATFS_Init();
 8001a00:	f012 fed8 	bl	80147b4 <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 8001a04:	f000 fb52 	bl	80020ac <MX_SDMMC2_SD_Init>
  MX_TIM13_Init();
 8001a08:	f000 fe02 	bl	8002610 <MX_TIM13_Init>
  MX_RNG_Init();
 8001a0c:	f001 f88c 	bl	8002b28 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

	const int MAX = 50;
 8001a10:	2332      	movs	r3, #50	; 0x32
 8001a12:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
	const double SPEED = 2.0/2000;
 8001a16:	a37a      	add	r3, pc, #488	; (adr r3, 8001c00 <main+0x268>)
 8001a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1c:	e9c7 23e8 	strd	r2, r3, [r7, #928]	; 0x3a0
	const double r_offset = 0;
 8001a20:	f04f 0200 	mov.w	r2, #0
 8001a24:	f04f 0300 	mov.w	r3, #0
 8001a28:	e9c7 23e6 	strd	r2, r3, [r7, #920]	; 0x398
	const double g_offset = 1;
 8001a2c:	f04f 0200 	mov.w	r2, #0
 8001a30:	4b76      	ldr	r3, [pc, #472]	; (8001c0c <main+0x274>)
 8001a32:	e9c7 23e4 	strd	r2, r3, [r7, #912]	; 0x390
	const double b_offset = 2;
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a3e:	e9c7 23e2 	strd	r2, r3, [r7, #904]	; 0x388

	LG2_Write_Register(0x10, 0b00111100); //Accelerometer setup - CTRL1_XL
 8001a42:	213c      	movs	r1, #60	; 0x3c
 8001a44:	2010      	movs	r0, #16
 8001a46:	f7fe fe9d 	bl	8000784 <LG2_Write_Register>
	LG2_Write_Register(0x11, 0b00110000); //Gyroscope setup - CTRL2_G
 8001a4a:	2130      	movs	r1, #48	; 0x30
 8001a4c:	2011      	movs	r0, #17
 8001a4e:	f7fe fe99 	bl	8000784 <LG2_Write_Register>
	LG2_Write_Register(0x13, 0b00000100); //disables I2C - CTRL4_C
 8001a52:	2104      	movs	r1, #4
 8001a54:	2013      	movs	r0, #19
 8001a56:	f7fe fe95 	bl	8000784 <LG2_Write_Register>

	HAL_Delay(3000);
 8001a5a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001a5e:	f002 f997 	bl	8003d90 <HAL_Delay>
	HG2_Write_Register(0x1C, 0b10111111);
 8001a62:	21bf      	movs	r1, #191	; 0xbf
 8001a64:	201c      	movs	r0, #28
 8001a66:	f7fe fe39 	bl	80006dc <HG2_Write_Register>
	HAL_Delay(2);
 8001a6a:	2002      	movs	r0, #2
 8001a6c:	f002 f990 	bl	8003d90 <HAL_Delay>

	HG2_Write_Register(0x1B, 0b01011000);
 8001a70:	2158      	movs	r1, #88	; 0x58
 8001a72:	201b      	movs	r0, #27
 8001a74:	f7fe fe32 	bl	80006dc <HG2_Write_Register>
	HG2_Write_Register(0x1B, 0b11011000);
 8001a78:	21d8      	movs	r1, #216	; 0xd8
 8001a7a:	201b      	movs	r0, #27
 8001a7c:	f7fe fe2e 	bl	80006dc <HG2_Write_Register>

	float rotZ = 0;
 8001a80:	f04f 0300 	mov.w	r3, #0
 8001a84:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
	uint32_t lastTime = 0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380

	float calOmegaX = 0;
 8001a8e:	f04f 0300 	mov.w	r3, #0
 8001a92:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
	float calOmegaY = 0;
 8001a96:	f04f 0300 	mov.w	r3, #0
 8001a9a:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
	float calOmegaZ = 0;
 8001a9e:	f04f 0300 	mov.w	r3, #0
 8001aa2:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
	//HAL_Delay(2000);
	for(int i = 0; i < 500; i++){
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 8001aac:	e022      	b.n	8001af4 <main+0x15c>
		calOmegaX += LG2_Get_Gyro_X();
 8001aae:	f7fe fe91 	bl	80007d4 <LG2_Get_Gyro_X>
 8001ab2:	eeb0 7a40 	vmov.f32	s14, s0
 8001ab6:	edd7 7aef 	vldr	s15, [r7, #956]	; 0x3bc
 8001aba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001abe:	edc7 7aef 	vstr	s15, [r7, #956]	; 0x3bc
		calOmegaY += LG2_Get_Gyro_Y();
 8001ac2:	f7fe feb7 	bl	8000834 <LG2_Get_Gyro_Y>
 8001ac6:	eeb0 7a40 	vmov.f32	s14, s0
 8001aca:	edd7 7aee 	vldr	s15, [r7, #952]	; 0x3b8
 8001ace:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ad2:	edc7 7aee 	vstr	s15, [r7, #952]	; 0x3b8
		calOmegaZ += LG2_Get_Gyro_Z();
 8001ad6:	f7fe fedf 	bl	8000898 <LG2_Get_Gyro_Z>
 8001ada:	eeb0 7a40 	vmov.f32	s14, s0
 8001ade:	edd7 7aed 	vldr	s15, [r7, #948]	; 0x3b4
 8001ae2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ae6:	edc7 7aed 	vstr	s15, [r7, #948]	; 0x3b4
	for(int i = 0; i < 500; i++){
 8001aea:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8001aee:	3301      	adds	r3, #1
 8001af0:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 8001af4:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8001af8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001afc:	dbd7      	blt.n	8001aae <main+0x116>

		//HAL_Delay(20);
	}
	calOmegaX /= 500;
 8001afe:	ed97 7aef 	vldr	s14, [r7, #956]	; 0x3bc
 8001b02:	eddf 6a43 	vldr	s13, [pc, #268]	; 8001c10 <main+0x278>
 8001b06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b0a:	edc7 7aef 	vstr	s15, [r7, #956]	; 0x3bc
	calOmegaY /= 500;
 8001b0e:	ed97 7aee 	vldr	s14, [r7, #952]	; 0x3b8
 8001b12:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8001c10 <main+0x278>
 8001b16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b1a:	edc7 7aee 	vstr	s15, [r7, #952]	; 0x3b8
	calOmegaZ /= 500;
 8001b1e:	ed97 7aed 	vldr	s14, [r7, #948]	; 0x3b4
 8001b22:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8001c10 <main+0x278>
 8001b26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b2a:	edc7 7aed 	vstr	s15, [r7, #948]	; 0x3b4

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001b2e:	2201      	movs	r2, #1
 8001b30:	2101      	movs	r1, #1
 8001b32:	4838      	ldr	r0, [pc, #224]	; (8001c14 <main+0x27c>)
 8001b34:	f006 fbde 	bl	80082f4 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001b38:	20c8      	movs	r0, #200	; 0xc8
 8001b3a:	f002 f929 	bl	8003d90 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2101      	movs	r1, #1
 8001b42:	4834      	ldr	r0, [pc, #208]	; (8001c14 <main+0x27c>)
 8001b44:	f006 fbd6 	bl	80082f4 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001b48:	20c8      	movs	r0, #200	; 0xc8
 8001b4a:	f002 f921 	bl	8003d90 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001b4e:	2201      	movs	r2, #1
 8001b50:	2101      	movs	r1, #1
 8001b52:	4830      	ldr	r0, [pc, #192]	; (8001c14 <main+0x27c>)
 8001b54:	f006 fbce 	bl	80082f4 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001b58:	20c8      	movs	r0, #200	; 0xc8
 8001b5a:	f002 f919 	bl	8003d90 <HAL_Delay>


	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 8001b5e:	2201      	movs	r2, #1
 8001b60:	2104      	movs	r1, #4
 8001b62:	482d      	ldr	r0, [pc, #180]	; (8001c18 <main+0x280>)
 8001b64:	f006 fbc6 	bl	80082f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 8001b68:	2201      	movs	r2, #1
 8001b6a:	2108      	movs	r1, #8
 8001b6c:	482a      	ldr	r0, [pc, #168]	; (8001c18 <main+0x280>)
 8001b6e:	f006 fbc1 	bl	80082f4 <HAL_GPIO_WritePin>


    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001b72:	2100      	movs	r1, #0
 8001b74:	4829      	ldr	r0, [pc, #164]	; (8001c1c <main+0x284>)
 8001b76:	f00e f82b 	bl	800fbd0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001b7a:	2104      	movs	r1, #4
 8001b7c:	4827      	ldr	r0, [pc, #156]	; (8001c1c <main+0x284>)
 8001b7e:	f00e f827 	bl	800fbd0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001b82:	2108      	movs	r1, #8
 8001b84:	4825      	ldr	r0, [pc, #148]	; (8001c1c <main+0x284>)
 8001b86:	f00e f823 	bl	800fbd0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001b8a:	210c      	movs	r1, #12
 8001b8c:	4823      	ldr	r0, [pc, #140]	; (8001c1c <main+0x284>)
 8001b8e:	f00e f81f 	bl	800fbd0 <HAL_TIM_PWM_Start>

    setServo(1, 90);
 8001b92:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8001c20 <main+0x288>
 8001b96:	2001      	movs	r0, #1
 8001b98:	f7ff fc98 	bl	80014cc <setServo>
    setServo(2, 180);
 8001b9c:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8001c24 <main+0x28c>
 8001ba0:	2002      	movs	r0, #2
 8001ba2:	f7ff fc93 	bl	80014cc <setServo>
    setServo(3, 0);
 8001ba6:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8001c28 <main+0x290>
 8001baa:	2003      	movs	r0, #3
 8001bac:	f7ff fc8e 	bl	80014cc <setServo>
    setServo(4, 45);
 8001bb0:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8001c2c <main+0x294>
 8001bb4:	2004      	movs	r0, #4
 8001bb6:	f7ff fc89 	bl	80014cc <setServo>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//HAL_ADC_Start_DMA(&hadc3, &read_Data, 1);

  char state[256] = "";
 8001bba:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8001bbe:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	3304      	adds	r3, #4
 8001bc8:	22fc      	movs	r2, #252	; 0xfc
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f015 fdff 	bl	80177d0 <memset>
  disarm(state);
 8001bd2:	463b      	mov	r3, r7
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff fe79 	bl	80018cc <disarm>
  LoRA_begin(868000000);
 8001bda:	4815      	ldr	r0, [pc, #84]	; (8001c30 <main+0x298>)
 8001bdc:	f7fe ffae 	bl	8000b3c <LoRA_begin>
  communicationHandler(
 8001be0:	2302      	movs	r3, #2
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <main+0x29c>)
 8001be6:	4a14      	ldr	r2, [pc, #80]	; (8001c38 <main+0x2a0>)
 8001be8:	4914      	ldr	r1, [pc, #80]	; (8001c3c <main+0x2a4>)
 8001bea:	4815      	ldr	r0, [pc, #84]	; (8001c40 <main+0x2a8>)
 8001bec:	f7ff f98e 	bl	8000f0c <communicationHandler>
 8001bf0:	2300      	movs	r3, #0
  );
  /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f507 7770 	add.w	r7, r7, #960	; 0x3c0
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bdb0      	pop	{r4, r5, r7, pc}
 8001bfc:	f3af 8000 	nop.w
 8001c00:	d2f1a9fc 	.word	0xd2f1a9fc
 8001c04:	3f50624d 	.word	0x3f50624d
 8001c08:	08018b40 	.word	0x08018b40
 8001c0c:	3ff00000 	.word	0x3ff00000
 8001c10:	43fa0000 	.word	0x43fa0000
 8001c14:	58020c00 	.word	0x58020c00
 8001c18:	58021800 	.word	0x58021800
 8001c1c:	24001270 	.word	0x24001270
 8001c20:	42b40000 	.word	0x42b40000
 8001c24:	43340000 	.word	0x43340000
 8001c28:	00000000 	.word	0x00000000
 8001c2c:	42340000 	.word	0x42340000
 8001c30:	33bca100 	.word	0x33bca100
 8001c34:	08001409 	.word	0x08001409
 8001c38:	080013ed 	.word	0x080013ed
 8001c3c:	080013cd 	.word	0x080013cd
 8001c40:	080013ad 	.word	0x080013ad

08001c44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b09c      	sub	sp, #112	; 0x70
 8001c48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4e:	224c      	movs	r2, #76	; 0x4c
 8001c50:	2100      	movs	r1, #0
 8001c52:	4618      	mov	r0, r3
 8001c54:	f015 fdbc 	bl	80177d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c58:	1d3b      	adds	r3, r7, #4
 8001c5a:	2220      	movs	r2, #32
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f015 fdb6 	bl	80177d0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001c64:	2002      	movs	r0, #2
 8001c66:	f007 ff59 	bl	8009b1c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	603b      	str	r3, [r7, #0]
 8001c6e:	4b30      	ldr	r3, [pc, #192]	; (8001d30 <SystemClock_Config+0xec>)
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c76:	4a2e      	ldr	r2, [pc, #184]	; (8001d30 <SystemClock_Config+0xec>)
 8001c78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c7c:	6193      	str	r3, [r2, #24]
 8001c7e:	4b2c      	ldr	r3, [pc, #176]	; (8001d30 <SystemClock_Config+0xec>)
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c86:	603b      	str	r3, [r7, #0]
 8001c88:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001c8a:	bf00      	nop
 8001c8c:	4b28      	ldr	r3, [pc, #160]	; (8001d30 <SystemClock_Config+0xec>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c98:	d1f8      	bne.n	8001c8c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001c9a:	2322      	movs	r3, #34	; 0x22
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001ca2:	2340      	movs	r3, #64	; 0x40
 8001ca4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001caa:	2302      	movs	r3, #2
 8001cac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001cb2:	2304      	movs	r3, #4
 8001cb4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001cb6:	230c      	movs	r3, #12
 8001cb8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8001cbe:	230c      	movs	r3, #12
 8001cc0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001cc6:	230c      	movs	r3, #12
 8001cc8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f007 ff6a 	bl	8009bb0 <HAL_RCC_OscConfig>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001ce2:	f000 ff1b 	bl	8002b1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ce6:	233f      	movs	r3, #63	; 0x3f
 8001ce8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cea:	2303      	movs	r3, #3
 8001cec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001cf2:	2308      	movs	r3, #8
 8001cf4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001cf6:	2340      	movs	r3, #64	; 0x40
 8001cf8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001cfa:	2340      	movs	r3, #64	; 0x40
 8001cfc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001cfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d02:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001d04:	2340      	movs	r3, #64	; 0x40
 8001d06:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d08:	1d3b      	adds	r3, r7, #4
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f008 fb29 	bl	800a364 <HAL_RCC_ClockConfig>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001d18:	f000 ff00 	bl	8002b1c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001d1c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001d20:	2100      	movs	r1, #0
 8001d22:	2000      	movs	r0, #0
 8001d24:	f008 fcd4 	bl	800a6d0 <HAL_RCC_MCOConfig>
}
 8001d28:	bf00      	nop
 8001d2a:	3770      	adds	r7, #112	; 0x70
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	58024800 	.word	0x58024800

08001d34 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b0ae      	sub	sp, #184	; 0xb8
 8001d38:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d3a:	463b      	mov	r3, r7
 8001d3c:	22b8      	movs	r2, #184	; 0xb8
 8001d3e:	2100      	movs	r1, #0
 8001d40:	4618      	mov	r0, r3
 8001d42:	f015 fd45 	bl	80177d0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 8001d46:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8001d4a:	f04f 0300 	mov.w	r3, #0
 8001d4e:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001d52:	2304      	movs	r3, #4
 8001d54:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001d56:	230c      	movs	r3, #12
 8001d58:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001d5a:	2304      	movs	r3, #4
 8001d5c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001d62:	2302      	movs	r3, #2
 8001d64:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001d66:	23c0      	movs	r3, #192	; 0xc0
 8001d68:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001d72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d76:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d7e:	463b      	mov	r3, r7
 8001d80:	4618      	mov	r0, r3
 8001d82:	f008 fee5 	bl	800ab50 <HAL_RCCEx_PeriphCLKConfig>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8001d8c:	f000 fec6 	bl	8002b1c <Error_Handler>
  }
}
 8001d90:	bf00      	nop
 8001d92:	37b8      	adds	r7, #184	; 0xb8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08c      	sub	sp, #48	; 0x30
 8001d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	605a      	str	r2, [r3, #4]
 8001da8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001daa:	463b      	mov	r3, r7
 8001dac:	2224      	movs	r2, #36	; 0x24
 8001dae:	2100      	movs	r1, #0
 8001db0:	4618      	mov	r0, r3
 8001db2:	f015 fd0d 	bl	80177d0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001db6:	4b31      	ldr	r3, [pc, #196]	; (8001e7c <MX_ADC1_Init+0xe4>)
 8001db8:	4a31      	ldr	r2, [pc, #196]	; (8001e80 <MX_ADC1_Init+0xe8>)
 8001dba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001dbc:	4b2f      	ldr	r3, [pc, #188]	; (8001e7c <MX_ADC1_Init+0xe4>)
 8001dbe:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001dc2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001dc4:	4b2d      	ldr	r3, [pc, #180]	; (8001e7c <MX_ADC1_Init+0xe4>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001dca:	4b2c      	ldr	r3, [pc, #176]	; (8001e7c <MX_ADC1_Init+0xe4>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001dd0:	4b2a      	ldr	r3, [pc, #168]	; (8001e7c <MX_ADC1_Init+0xe4>)
 8001dd2:	2204      	movs	r2, #4
 8001dd4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001dd6:	4b29      	ldr	r3, [pc, #164]	; (8001e7c <MX_ADC1_Init+0xe4>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001ddc:	4b27      	ldr	r3, [pc, #156]	; (8001e7c <MX_ADC1_Init+0xe4>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001de2:	4b26      	ldr	r3, [pc, #152]	; (8001e7c <MX_ADC1_Init+0xe4>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001de8:	4b24      	ldr	r3, [pc, #144]	; (8001e7c <MX_ADC1_Init+0xe4>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001df0:	4b22      	ldr	r3, [pc, #136]	; (8001e7c <MX_ADC1_Init+0xe4>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001df6:	4b21      	ldr	r3, [pc, #132]	; (8001e7c <MX_ADC1_Init+0xe4>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001dfc:	4b1f      	ldr	r3, [pc, #124]	; (8001e7c <MX_ADC1_Init+0xe4>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001e02:	4b1e      	ldr	r3, [pc, #120]	; (8001e7c <MX_ADC1_Init+0xe4>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001e08:	4b1c      	ldr	r3, [pc, #112]	; (8001e7c <MX_ADC1_Init+0xe4>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001e0e:	4b1b      	ldr	r3, [pc, #108]	; (8001e7c <MX_ADC1_Init+0xe4>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e16:	4819      	ldr	r0, [pc, #100]	; (8001e7c <MX_ADC1_Init+0xe4>)
 8001e18:	f002 fa3a 	bl	8004290 <HAL_ADC_Init>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001e22:	f000 fe7b 	bl	8002b1c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001e26:	2300      	movs	r3, #0
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4812      	ldr	r0, [pc, #72]	; (8001e7c <MX_ADC1_Init+0xe4>)
 8001e32:	f003 fa75 	bl	8005320 <HAL_ADCEx_MultiModeConfigChannel>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001e3c:	f000 fe6e 	bl	8002b1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001e40:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <MX_ADC1_Init+0xec>)
 8001e42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e44:	2306      	movs	r3, #6
 8001e46:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001e4c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001e50:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001e52:	2304      	movs	r3, #4
 8001e54:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e60:	463b      	mov	r3, r7
 8001e62:	4619      	mov	r1, r3
 8001e64:	4805      	ldr	r0, [pc, #20]	; (8001e7c <MX_ADC1_Init+0xe4>)
 8001e66:	f002 fc1b 	bl	80046a0 <HAL_ADC_ConfigChannel>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001e70:	f000 fe54 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e74:	bf00      	nop
 8001e76:	3730      	adds	r7, #48	; 0x30
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	24000d00 	.word	0x24000d00
 8001e80:	40022000 	.word	0x40022000
 8001e84:	2a000400 	.word	0x2a000400

08001e88 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08a      	sub	sp, #40	; 0x28
 8001e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e8e:	1d3b      	adds	r3, r7, #4
 8001e90:	2224      	movs	r2, #36	; 0x24
 8001e92:	2100      	movs	r1, #0
 8001e94:	4618      	mov	r0, r3
 8001e96:	f015 fc9b 	bl	80177d0 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001e9a:	4b2f      	ldr	r3, [pc, #188]	; (8001f58 <MX_ADC3_Init+0xd0>)
 8001e9c:	4a2f      	ldr	r2, [pc, #188]	; (8001f5c <MX_ADC3_Init+0xd4>)
 8001e9e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001ea0:	4b2d      	ldr	r3, [pc, #180]	; (8001f58 <MX_ADC3_Init+0xd0>)
 8001ea2:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001ea6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001ea8:	4b2b      	ldr	r3, [pc, #172]	; (8001f58 <MX_ADC3_Init+0xd0>)
 8001eaa:	2208      	movs	r2, #8
 8001eac:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001eae:	4b2a      	ldr	r3, [pc, #168]	; (8001f58 <MX_ADC3_Init+0xd0>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001eb4:	4b28      	ldr	r3, [pc, #160]	; (8001f58 <MX_ADC3_Init+0xd0>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001eba:	4b27      	ldr	r3, [pc, #156]	; (8001f58 <MX_ADC3_Init+0xd0>)
 8001ebc:	2204      	movs	r2, #4
 8001ebe:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001ec0:	4b25      	ldr	r3, [pc, #148]	; (8001f58 <MX_ADC3_Init+0xd0>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001ec6:	4b24      	ldr	r3, [pc, #144]	; (8001f58 <MX_ADC3_Init+0xd0>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001ecc:	4b22      	ldr	r3, [pc, #136]	; (8001f58 <MX_ADC3_Init+0xd0>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001ed2:	4b21      	ldr	r3, [pc, #132]	; (8001f58 <MX_ADC3_Init+0xd0>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001eda:	4b1f      	ldr	r3, [pc, #124]	; (8001f58 <MX_ADC3_Init+0xd0>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ee0:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <MX_ADC3_Init+0xd0>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001ee6:	4b1c      	ldr	r3, [pc, #112]	; (8001f58 <MX_ADC3_Init+0xd0>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001eee:	4b1a      	ldr	r3, [pc, #104]	; (8001f58 <MX_ADC3_Init+0xd0>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001ef4:	4b18      	ldr	r3, [pc, #96]	; (8001f58 <MX_ADC3_Init+0xd0>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001efa:	4b17      	ldr	r3, [pc, #92]	; (8001f58 <MX_ADC3_Init+0xd0>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001f00:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <MX_ADC3_Init+0xd0>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001f06:	4b14      	ldr	r3, [pc, #80]	; (8001f58 <MX_ADC3_Init+0xd0>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001f0e:	4812      	ldr	r0, [pc, #72]	; (8001f58 <MX_ADC3_Init+0xd0>)
 8001f10:	f002 f9be 	bl	8004290 <HAL_ADC_Init>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001f1a:	f000 fdff 	bl	8002b1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001f1e:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <MX_ADC3_Init+0xd8>)
 8001f20:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f22:	2306      	movs	r3, #6
 8001f24:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001f2a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001f2e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001f30:	2304      	movs	r3, #4
 8001f32:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001f3c:	1d3b      	adds	r3, r7, #4
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4805      	ldr	r0, [pc, #20]	; (8001f58 <MX_ADC3_Init+0xd0>)
 8001f42:	f002 fbad 	bl	80046a0 <HAL_ADC_ConfigChannel>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8001f4c:	f000 fde6 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001f50:	bf00      	nop
 8001f52:	3728      	adds	r7, #40	; 0x28
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	24000d70 	.word	0x24000d70
 8001f5c:	58026000 	.word	0x58026000
 8001f60:	04300002 	.word	0x04300002

08001f64 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001f68:	4b2e      	ldr	r3, [pc, #184]	; (8002024 <MX_FDCAN3_Init+0xc0>)
 8001f6a:	4a2f      	ldr	r2, [pc, #188]	; (8002028 <MX_FDCAN3_Init+0xc4>)
 8001f6c:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001f6e:	4b2d      	ldr	r3, [pc, #180]	; (8002024 <MX_FDCAN3_Init+0xc0>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001f74:	4b2b      	ldr	r3, [pc, #172]	; (8002024 <MX_FDCAN3_Init+0xc0>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8001f7a:	4b2a      	ldr	r3, [pc, #168]	; (8002024 <MX_FDCAN3_Init+0xc0>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001f80:	4b28      	ldr	r3, [pc, #160]	; (8002024 <MX_FDCAN3_Init+0xc0>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001f86:	4b27      	ldr	r3, [pc, #156]	; (8002024 <MX_FDCAN3_Init+0xc0>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8001f8c:	4b25      	ldr	r3, [pc, #148]	; (8002024 <MX_FDCAN3_Init+0xc0>)
 8001f8e:	2210      	movs	r2, #16
 8001f90:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8001f92:	4b24      	ldr	r3, [pc, #144]	; (8002024 <MX_FDCAN3_Init+0xc0>)
 8001f94:	2201      	movs	r2, #1
 8001f96:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8001f98:	4b22      	ldr	r3, [pc, #136]	; (8002024 <MX_FDCAN3_Init+0xc0>)
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8001f9e:	4b21      	ldr	r3, [pc, #132]	; (8002024 <MX_FDCAN3_Init+0xc0>)
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8001fa4:	4b1f      	ldr	r3, [pc, #124]	; (8002024 <MX_FDCAN3_Init+0xc0>)
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8001faa:	4b1e      	ldr	r3, [pc, #120]	; (8002024 <MX_FDCAN3_Init+0xc0>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8001fb0:	4b1c      	ldr	r3, [pc, #112]	; (8002024 <MX_FDCAN3_Init+0xc0>)
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8001fb6:	4b1b      	ldr	r3, [pc, #108]	; (8002024 <MX_FDCAN3_Init+0xc0>)
 8001fb8:	2201      	movs	r2, #1
 8001fba:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8001fbc:	4b19      	ldr	r3, [pc, #100]	; (8002024 <MX_FDCAN3_Init+0xc0>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8001fc2:	4b18      	ldr	r3, [pc, #96]	; (8002024 <MX_FDCAN3_Init+0xc0>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8001fc8:	4b16      	ldr	r3, [pc, #88]	; (8002024 <MX_FDCAN3_Init+0xc0>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8001fce:	4b15      	ldr	r3, [pc, #84]	; (8002024 <MX_FDCAN3_Init+0xc0>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001fd4:	4b13      	ldr	r3, [pc, #76]	; (8002024 <MX_FDCAN3_Init+0xc0>)
 8001fd6:	2204      	movs	r2, #4
 8001fd8:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8001fda:	4b12      	ldr	r3, [pc, #72]	; (8002024 <MX_FDCAN3_Init+0xc0>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001fe0:	4b10      	ldr	r3, [pc, #64]	; (8002024 <MX_FDCAN3_Init+0xc0>)
 8001fe2:	2204      	movs	r2, #4
 8001fe4:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8001fe6:	4b0f      	ldr	r3, [pc, #60]	; (8002024 <MX_FDCAN3_Init+0xc0>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001fec:	4b0d      	ldr	r3, [pc, #52]	; (8002024 <MX_FDCAN3_Init+0xc0>)
 8001fee:	2204      	movs	r2, #4
 8001ff0:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8001ff2:	4b0c      	ldr	r3, [pc, #48]	; (8002024 <MX_FDCAN3_Init+0xc0>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8001ff8:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <MX_FDCAN3_Init+0xc0>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8001ffe:	4b09      	ldr	r3, [pc, #36]	; (8002024 <MX_FDCAN3_Init+0xc0>)
 8002000:	2200      	movs	r2, #0
 8002002:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002004:	4b07      	ldr	r3, [pc, #28]	; (8002024 <MX_FDCAN3_Init+0xc0>)
 8002006:	2200      	movs	r2, #0
 8002008:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800200a:	4b06      	ldr	r3, [pc, #24]	; (8002024 <MX_FDCAN3_Init+0xc0>)
 800200c:	2204      	movs	r2, #4
 800200e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8002010:	4804      	ldr	r0, [pc, #16]	; (8002024 <MX_FDCAN3_Init+0xc0>)
 8002012:	f005 fc4b 	bl	80078ac <HAL_FDCAN_Init>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 800201c:	f000 fd7e 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8002020:	bf00      	nop
 8002022:	bd80      	pop	{r7, pc}
 8002024:	24000ed0 	.word	0x24000ed0
 8002028:	4000d400 	.word	0x4000d400

0800202c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002030:	4b1b      	ldr	r3, [pc, #108]	; (80020a0 <MX_I2C2_Init+0x74>)
 8002032:	4a1c      	ldr	r2, [pc, #112]	; (80020a4 <MX_I2C2_Init+0x78>)
 8002034:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8002036:	4b1a      	ldr	r3, [pc, #104]	; (80020a0 <MX_I2C2_Init+0x74>)
 8002038:	4a1b      	ldr	r2, [pc, #108]	; (80020a8 <MX_I2C2_Init+0x7c>)
 800203a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800203c:	4b18      	ldr	r3, [pc, #96]	; (80020a0 <MX_I2C2_Init+0x74>)
 800203e:	2200      	movs	r2, #0
 8002040:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002042:	4b17      	ldr	r3, [pc, #92]	; (80020a0 <MX_I2C2_Init+0x74>)
 8002044:	2201      	movs	r2, #1
 8002046:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002048:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <MX_I2C2_Init+0x74>)
 800204a:	2200      	movs	r2, #0
 800204c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800204e:	4b14      	ldr	r3, [pc, #80]	; (80020a0 <MX_I2C2_Init+0x74>)
 8002050:	2200      	movs	r2, #0
 8002052:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002054:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <MX_I2C2_Init+0x74>)
 8002056:	2200      	movs	r2, #0
 8002058:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800205a:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <MX_I2C2_Init+0x74>)
 800205c:	2200      	movs	r2, #0
 800205e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002060:	4b0f      	ldr	r3, [pc, #60]	; (80020a0 <MX_I2C2_Init+0x74>)
 8002062:	2200      	movs	r2, #0
 8002064:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002066:	480e      	ldr	r0, [pc, #56]	; (80020a0 <MX_I2C2_Init+0x74>)
 8002068:	f006 f95e 	bl	8008328 <HAL_I2C_Init>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002072:	f000 fd53 	bl	8002b1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002076:	2100      	movs	r1, #0
 8002078:	4809      	ldr	r0, [pc, #36]	; (80020a0 <MX_I2C2_Init+0x74>)
 800207a:	f006 f9ff 	bl	800847c <HAL_I2CEx_ConfigAnalogFilter>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002084:	f000 fd4a 	bl	8002b1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002088:	2100      	movs	r1, #0
 800208a:	4805      	ldr	r0, [pc, #20]	; (80020a0 <MX_I2C2_Init+0x74>)
 800208c:	f006 fa41 	bl	8008512 <HAL_I2CEx_ConfigDigitalFilter>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002096:	f000 fd41 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	24000f70 	.word	0x24000f70
 80020a4:	40005800 	.word	0x40005800
 80020a8:	20303e5d 	.word	0x20303e5d

080020ac <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 80020b0:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <MX_SDMMC2_SD_Init+0x34>)
 80020b2:	4a0c      	ldr	r2, [pc, #48]	; (80020e4 <MX_SDMMC2_SD_Init+0x38>)
 80020b4:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80020b6:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <MX_SDMMC2_SD_Init+0x34>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80020bc:	4b08      	ldr	r3, [pc, #32]	; (80020e0 <MX_SDMMC2_SD_Init+0x34>)
 80020be:	2200      	movs	r2, #0
 80020c0:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80020c2:	4b07      	ldr	r3, [pc, #28]	; (80020e0 <MX_SDMMC2_SD_Init+0x34>)
 80020c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020c8:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80020ca:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <MX_SDMMC2_SD_Init+0x34>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 80020d0:	4b03      	ldr	r3, [pc, #12]	; (80020e0 <MX_SDMMC2_SD_Init+0x34>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 80020d6:	bf00      	nop
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	24000fc4 	.word	0x24000fc4
 80020e4:	48022400 	.word	0x48022400

080020e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80020ec:	4b27      	ldr	r3, [pc, #156]	; (800218c <MX_SPI1_Init+0xa4>)
 80020ee:	4a28      	ldr	r2, [pc, #160]	; (8002190 <MX_SPI1_Init+0xa8>)
 80020f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020f2:	4b26      	ldr	r3, [pc, #152]	; (800218c <MX_SPI1_Init+0xa4>)
 80020f4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80020f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80020fa:	4b24      	ldr	r3, [pc, #144]	; (800218c <MX_SPI1_Init+0xa4>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002100:	4b22      	ldr	r3, [pc, #136]	; (800218c <MX_SPI1_Init+0xa4>)
 8002102:	2207      	movs	r2, #7
 8002104:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002106:	4b21      	ldr	r3, [pc, #132]	; (800218c <MX_SPI1_Init+0xa4>)
 8002108:	2200      	movs	r2, #0
 800210a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800210c:	4b1f      	ldr	r3, [pc, #124]	; (800218c <MX_SPI1_Init+0xa4>)
 800210e:	2200      	movs	r2, #0
 8002110:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002112:	4b1e      	ldr	r3, [pc, #120]	; (800218c <MX_SPI1_Init+0xa4>)
 8002114:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002118:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800211a:	4b1c      	ldr	r3, [pc, #112]	; (800218c <MX_SPI1_Init+0xa4>)
 800211c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002120:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002122:	4b1a      	ldr	r3, [pc, #104]	; (800218c <MX_SPI1_Init+0xa4>)
 8002124:	2200      	movs	r2, #0
 8002126:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002128:	4b18      	ldr	r3, [pc, #96]	; (800218c <MX_SPI1_Init+0xa4>)
 800212a:	2200      	movs	r2, #0
 800212c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800212e:	4b17      	ldr	r3, [pc, #92]	; (800218c <MX_SPI1_Init+0xa4>)
 8002130:	2200      	movs	r2, #0
 8002132:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002134:	4b15      	ldr	r3, [pc, #84]	; (800218c <MX_SPI1_Init+0xa4>)
 8002136:	2200      	movs	r2, #0
 8002138:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800213a:	4b14      	ldr	r3, [pc, #80]	; (800218c <MX_SPI1_Init+0xa4>)
 800213c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002140:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002142:	4b12      	ldr	r3, [pc, #72]	; (800218c <MX_SPI1_Init+0xa4>)
 8002144:	2200      	movs	r2, #0
 8002146:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002148:	4b10      	ldr	r3, [pc, #64]	; (800218c <MX_SPI1_Init+0xa4>)
 800214a:	2200      	movs	r2, #0
 800214c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800214e:	4b0f      	ldr	r3, [pc, #60]	; (800218c <MX_SPI1_Init+0xa4>)
 8002150:	2200      	movs	r2, #0
 8002152:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002154:	4b0d      	ldr	r3, [pc, #52]	; (800218c <MX_SPI1_Init+0xa4>)
 8002156:	2200      	movs	r2, #0
 8002158:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800215a:	4b0c      	ldr	r3, [pc, #48]	; (800218c <MX_SPI1_Init+0xa4>)
 800215c:	2200      	movs	r2, #0
 800215e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002160:	4b0a      	ldr	r3, [pc, #40]	; (800218c <MX_SPI1_Init+0xa4>)
 8002162:	2200      	movs	r2, #0
 8002164:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002166:	4b09      	ldr	r3, [pc, #36]	; (800218c <MX_SPI1_Init+0xa4>)
 8002168:	2200      	movs	r2, #0
 800216a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800216c:	4b07      	ldr	r3, [pc, #28]	; (800218c <MX_SPI1_Init+0xa4>)
 800216e:	2200      	movs	r2, #0
 8002170:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002172:	4b06      	ldr	r3, [pc, #24]	; (800218c <MX_SPI1_Init+0xa4>)
 8002174:	2200      	movs	r2, #0
 8002176:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002178:	4804      	ldr	r0, [pc, #16]	; (800218c <MX_SPI1_Init+0xa4>)
 800217a:	f00c fee1 	bl	800ef40 <HAL_SPI_Init>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8002184:	f000 fcca 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002188:	bf00      	nop
 800218a:	bd80      	pop	{r7, pc}
 800218c:	24001040 	.word	0x24001040
 8002190:	40013000 	.word	0x40013000

08002194 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002198:	4b27      	ldr	r3, [pc, #156]	; (8002238 <MX_SPI2_Init+0xa4>)
 800219a:	4a28      	ldr	r2, [pc, #160]	; (800223c <MX_SPI2_Init+0xa8>)
 800219c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800219e:	4b26      	ldr	r3, [pc, #152]	; (8002238 <MX_SPI2_Init+0xa4>)
 80021a0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80021a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80021a6:	4b24      	ldr	r3, [pc, #144]	; (8002238 <MX_SPI2_Init+0xa4>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80021ac:	4b22      	ldr	r3, [pc, #136]	; (8002238 <MX_SPI2_Init+0xa4>)
 80021ae:	2207      	movs	r2, #7
 80021b0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021b2:	4b21      	ldr	r3, [pc, #132]	; (8002238 <MX_SPI2_Init+0xa4>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021b8:	4b1f      	ldr	r3, [pc, #124]	; (8002238 <MX_SPI2_Init+0xa4>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80021be:	4b1e      	ldr	r3, [pc, #120]	; (8002238 <MX_SPI2_Init+0xa4>)
 80021c0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80021c4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80021c6:	4b1c      	ldr	r3, [pc, #112]	; (8002238 <MX_SPI2_Init+0xa4>)
 80021c8:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80021cc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021ce:	4b1a      	ldr	r3, [pc, #104]	; (8002238 <MX_SPI2_Init+0xa4>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80021d4:	4b18      	ldr	r3, [pc, #96]	; (8002238 <MX_SPI2_Init+0xa4>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021da:	4b17      	ldr	r3, [pc, #92]	; (8002238 <MX_SPI2_Init+0xa4>)
 80021dc:	2200      	movs	r2, #0
 80021de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80021e0:	4b15      	ldr	r3, [pc, #84]	; (8002238 <MX_SPI2_Init+0xa4>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80021e6:	4b14      	ldr	r3, [pc, #80]	; (8002238 <MX_SPI2_Init+0xa4>)
 80021e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021ec:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80021ee:	4b12      	ldr	r3, [pc, #72]	; (8002238 <MX_SPI2_Init+0xa4>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80021f4:	4b10      	ldr	r3, [pc, #64]	; (8002238 <MX_SPI2_Init+0xa4>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80021fa:	4b0f      	ldr	r3, [pc, #60]	; (8002238 <MX_SPI2_Init+0xa4>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002200:	4b0d      	ldr	r3, [pc, #52]	; (8002238 <MX_SPI2_Init+0xa4>)
 8002202:	2200      	movs	r2, #0
 8002204:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002206:	4b0c      	ldr	r3, [pc, #48]	; (8002238 <MX_SPI2_Init+0xa4>)
 8002208:	2200      	movs	r2, #0
 800220a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800220c:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <MX_SPI2_Init+0xa4>)
 800220e:	2200      	movs	r2, #0
 8002210:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002212:	4b09      	ldr	r3, [pc, #36]	; (8002238 <MX_SPI2_Init+0xa4>)
 8002214:	2200      	movs	r2, #0
 8002216:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002218:	4b07      	ldr	r3, [pc, #28]	; (8002238 <MX_SPI2_Init+0xa4>)
 800221a:	2200      	movs	r2, #0
 800221c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800221e:	4b06      	ldr	r3, [pc, #24]	; (8002238 <MX_SPI2_Init+0xa4>)
 8002220:	2200      	movs	r2, #0
 8002222:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002224:	4804      	ldr	r0, [pc, #16]	; (8002238 <MX_SPI2_Init+0xa4>)
 8002226:	f00c fe8b 	bl	800ef40 <HAL_SPI_Init>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8002230:	f000 fc74 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002234:	bf00      	nop
 8002236:	bd80      	pop	{r7, pc}
 8002238:	240010c8 	.word	0x240010c8
 800223c:	40003800 	.word	0x40003800

08002240 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002244:	4b27      	ldr	r3, [pc, #156]	; (80022e4 <MX_SPI3_Init+0xa4>)
 8002246:	4a28      	ldr	r2, [pc, #160]	; (80022e8 <MX_SPI3_Init+0xa8>)
 8002248:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800224a:	4b26      	ldr	r3, [pc, #152]	; (80022e4 <MX_SPI3_Init+0xa4>)
 800224c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002250:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002252:	4b24      	ldr	r3, [pc, #144]	; (80022e4 <MX_SPI3_Init+0xa4>)
 8002254:	2200      	movs	r2, #0
 8002256:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002258:	4b22      	ldr	r3, [pc, #136]	; (80022e4 <MX_SPI3_Init+0xa4>)
 800225a:	2207      	movs	r2, #7
 800225c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800225e:	4b21      	ldr	r3, [pc, #132]	; (80022e4 <MX_SPI3_Init+0xa4>)
 8002260:	2200      	movs	r2, #0
 8002262:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002264:	4b1f      	ldr	r3, [pc, #124]	; (80022e4 <MX_SPI3_Init+0xa4>)
 8002266:	2200      	movs	r2, #0
 8002268:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800226a:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <MX_SPI3_Init+0xa4>)
 800226c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002270:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002272:	4b1c      	ldr	r3, [pc, #112]	; (80022e4 <MX_SPI3_Init+0xa4>)
 8002274:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002278:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800227a:	4b1a      	ldr	r3, [pc, #104]	; (80022e4 <MX_SPI3_Init+0xa4>)
 800227c:	2200      	movs	r2, #0
 800227e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002280:	4b18      	ldr	r3, [pc, #96]	; (80022e4 <MX_SPI3_Init+0xa4>)
 8002282:	2200      	movs	r2, #0
 8002284:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002286:	4b17      	ldr	r3, [pc, #92]	; (80022e4 <MX_SPI3_Init+0xa4>)
 8002288:	2200      	movs	r2, #0
 800228a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800228c:	4b15      	ldr	r3, [pc, #84]	; (80022e4 <MX_SPI3_Init+0xa4>)
 800228e:	2200      	movs	r2, #0
 8002290:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002292:	4b14      	ldr	r3, [pc, #80]	; (80022e4 <MX_SPI3_Init+0xa4>)
 8002294:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002298:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800229a:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <MX_SPI3_Init+0xa4>)
 800229c:	2200      	movs	r2, #0
 800229e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80022a0:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <MX_SPI3_Init+0xa4>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80022a6:	4b0f      	ldr	r3, [pc, #60]	; (80022e4 <MX_SPI3_Init+0xa4>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80022ac:	4b0d      	ldr	r3, [pc, #52]	; (80022e4 <MX_SPI3_Init+0xa4>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80022b2:	4b0c      	ldr	r3, [pc, #48]	; (80022e4 <MX_SPI3_Init+0xa4>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80022b8:	4b0a      	ldr	r3, [pc, #40]	; (80022e4 <MX_SPI3_Init+0xa4>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80022be:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <MX_SPI3_Init+0xa4>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80022c4:	4b07      	ldr	r3, [pc, #28]	; (80022e4 <MX_SPI3_Init+0xa4>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80022ca:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <MX_SPI3_Init+0xa4>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80022d0:	4804      	ldr	r0, [pc, #16]	; (80022e4 <MX_SPI3_Init+0xa4>)
 80022d2:	f00c fe35 	bl	800ef40 <HAL_SPI_Init>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 80022dc:	f000 fc1e 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80022e0:	bf00      	nop
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	24001150 	.word	0x24001150
 80022e8:	40003c00 	.word	0x40003c00

080022ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08a      	sub	sp, #40	; 0x28
 80022f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022f2:	f107 031c 	add.w	r3, r7, #28
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	605a      	str	r2, [r3, #4]
 80022fc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022fe:	463b      	mov	r3, r7
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	60da      	str	r2, [r3, #12]
 800230a:	611a      	str	r2, [r3, #16]
 800230c:	615a      	str	r2, [r3, #20]
 800230e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002310:	4b21      	ldr	r3, [pc, #132]	; (8002398 <MX_TIM2_Init+0xac>)
 8002312:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002316:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002318:	4b1f      	ldr	r3, [pc, #124]	; (8002398 <MX_TIM2_Init+0xac>)
 800231a:	2200      	movs	r2, #0
 800231c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800231e:	4b1e      	ldr	r3, [pc, #120]	; (8002398 <MX_TIM2_Init+0xac>)
 8002320:	2200      	movs	r2, #0
 8002322:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 8002324:	4b1c      	ldr	r3, [pc, #112]	; (8002398 <MX_TIM2_Init+0xac>)
 8002326:	225a      	movs	r2, #90	; 0x5a
 8002328:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800232a:	4b1b      	ldr	r3, [pc, #108]	; (8002398 <MX_TIM2_Init+0xac>)
 800232c:	2200      	movs	r2, #0
 800232e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002330:	4b19      	ldr	r3, [pc, #100]	; (8002398 <MX_TIM2_Init+0xac>)
 8002332:	2200      	movs	r2, #0
 8002334:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002336:	4818      	ldr	r0, [pc, #96]	; (8002398 <MX_TIM2_Init+0xac>)
 8002338:	f00d fbf2 	bl	800fb20 <HAL_TIM_PWM_Init>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002342:	f000 fbeb 	bl	8002b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002346:	2300      	movs	r3, #0
 8002348:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800234a:	2300      	movs	r3, #0
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800234e:	f107 031c 	add.w	r3, r7, #28
 8002352:	4619      	mov	r1, r3
 8002354:	4810      	ldr	r0, [pc, #64]	; (8002398 <MX_TIM2_Init+0xac>)
 8002356:	f00e fe79 	bl	801104c <HAL_TIMEx_MasterConfigSynchronization>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002360:	f000 fbdc 	bl	8002b1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002364:	2360      	movs	r3, #96	; 0x60
 8002366:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002368:	2300      	movs	r3, #0
 800236a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800236c:	2300      	movs	r3, #0
 800236e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002370:	2300      	movs	r3, #0
 8002372:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002374:	463b      	mov	r3, r7
 8002376:	2208      	movs	r2, #8
 8002378:	4619      	mov	r1, r3
 800237a:	4807      	ldr	r0, [pc, #28]	; (8002398 <MX_TIM2_Init+0xac>)
 800237c:	f00e f898 	bl	80104b0 <HAL_TIM_PWM_ConfigChannel>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002386:	f000 fbc9 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800238a:	4803      	ldr	r0, [pc, #12]	; (8002398 <MX_TIM2_Init+0xac>)
 800238c:	f001 f980 	bl	8003690 <HAL_TIM_MspPostInit>

}
 8002390:	bf00      	nop
 8002392:	3728      	adds	r7, #40	; 0x28
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	240011d8 	.word	0x240011d8

0800239c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b08a      	sub	sp, #40	; 0x28
 80023a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023a2:	f107 031c 	add.w	r3, r7, #28
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	605a      	str	r2, [r3, #4]
 80023ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023ae:	463b      	mov	r3, r7
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	60da      	str	r2, [r3, #12]
 80023ba:	611a      	str	r2, [r3, #16]
 80023bc:	615a      	str	r2, [r3, #20]
 80023be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023c0:	4b26      	ldr	r3, [pc, #152]	; (800245c <MX_TIM3_Init+0xc0>)
 80023c2:	4a27      	ldr	r2, [pc, #156]	; (8002460 <MX_TIM3_Init+0xc4>)
 80023c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80023c6:	4b25      	ldr	r3, [pc, #148]	; (800245c <MX_TIM3_Init+0xc0>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023cc:	4b23      	ldr	r3, [pc, #140]	; (800245c <MX_TIM3_Init+0xc0>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 80023d2:	4b22      	ldr	r3, [pc, #136]	; (800245c <MX_TIM3_Init+0xc0>)
 80023d4:	225a      	movs	r2, #90	; 0x5a
 80023d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023d8:	4b20      	ldr	r3, [pc, #128]	; (800245c <MX_TIM3_Init+0xc0>)
 80023da:	2200      	movs	r2, #0
 80023dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023de:	4b1f      	ldr	r3, [pc, #124]	; (800245c <MX_TIM3_Init+0xc0>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80023e4:	481d      	ldr	r0, [pc, #116]	; (800245c <MX_TIM3_Init+0xc0>)
 80023e6:	f00d fb9b 	bl	800fb20 <HAL_TIM_PWM_Init>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80023f0:	f000 fb94 	bl	8002b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023f4:	2300      	movs	r3, #0
 80023f6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023f8:	2300      	movs	r3, #0
 80023fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023fc:	f107 031c 	add.w	r3, r7, #28
 8002400:	4619      	mov	r1, r3
 8002402:	4816      	ldr	r0, [pc, #88]	; (800245c <MX_TIM3_Init+0xc0>)
 8002404:	f00e fe22 	bl	801104c <HAL_TIMEx_MasterConfigSynchronization>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800240e:	f000 fb85 	bl	8002b1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002412:	2360      	movs	r3, #96	; 0x60
 8002414:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002416:	2300      	movs	r3, #0
 8002418:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800241a:	2300      	movs	r3, #0
 800241c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800241e:	2300      	movs	r3, #0
 8002420:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002422:	463b      	mov	r3, r7
 8002424:	2200      	movs	r2, #0
 8002426:	4619      	mov	r1, r3
 8002428:	480c      	ldr	r0, [pc, #48]	; (800245c <MX_TIM3_Init+0xc0>)
 800242a:	f00e f841 	bl	80104b0 <HAL_TIM_PWM_ConfigChannel>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002434:	f000 fb72 	bl	8002b1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002438:	463b      	mov	r3, r7
 800243a:	2204      	movs	r2, #4
 800243c:	4619      	mov	r1, r3
 800243e:	4807      	ldr	r0, [pc, #28]	; (800245c <MX_TIM3_Init+0xc0>)
 8002440:	f00e f836 	bl	80104b0 <HAL_TIM_PWM_ConfigChannel>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800244a:	f000 fb67 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800244e:	4803      	ldr	r0, [pc, #12]	; (800245c <MX_TIM3_Init+0xc0>)
 8002450:	f001 f91e 	bl	8003690 <HAL_TIM_MspPostInit>

}
 8002454:	bf00      	nop
 8002456:	3728      	adds	r7, #40	; 0x28
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	24001224 	.word	0x24001224
 8002460:	40000400 	.word	0x40000400

08002464 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b08a      	sub	sp, #40	; 0x28
 8002468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800246a:	f107 031c 	add.w	r3, r7, #28
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	605a      	str	r2, [r3, #4]
 8002474:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002476:	463b      	mov	r3, r7
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	605a      	str	r2, [r3, #4]
 800247e:	609a      	str	r2, [r3, #8]
 8002480:	60da      	str	r2, [r3, #12]
 8002482:	611a      	str	r2, [r3, #16]
 8002484:	615a      	str	r2, [r3, #20]
 8002486:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002488:	4b32      	ldr	r3, [pc, #200]	; (8002554 <MX_TIM4_Init+0xf0>)
 800248a:	4a33      	ldr	r2, [pc, #204]	; (8002558 <MX_TIM4_Init+0xf4>)
 800248c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 28;
 800248e:	4b31      	ldr	r3, [pc, #196]	; (8002554 <MX_TIM4_Init+0xf0>)
 8002490:	221c      	movs	r2, #28
 8002492:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002494:	4b2f      	ldr	r3, [pc, #188]	; (8002554 <MX_TIM4_Init+0xf0>)
 8002496:	2200      	movs	r2, #0
 8002498:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 800249a:	4b2e      	ldr	r3, [pc, #184]	; (8002554 <MX_TIM4_Init+0xf0>)
 800249c:	f242 720f 	movw	r2, #9999	; 0x270f
 80024a0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024a2:	4b2c      	ldr	r3, [pc, #176]	; (8002554 <MX_TIM4_Init+0xf0>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024a8:	4b2a      	ldr	r3, [pc, #168]	; (8002554 <MX_TIM4_Init+0xf0>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80024ae:	4829      	ldr	r0, [pc, #164]	; (8002554 <MX_TIM4_Init+0xf0>)
 80024b0:	f00d fb36 	bl	800fb20 <HAL_TIM_PWM_Init>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80024ba:	f000 fb2f 	bl	8002b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024be:	2300      	movs	r3, #0
 80024c0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024c2:	2300      	movs	r3, #0
 80024c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80024c6:	f107 031c 	add.w	r3, r7, #28
 80024ca:	4619      	mov	r1, r3
 80024cc:	4821      	ldr	r0, [pc, #132]	; (8002554 <MX_TIM4_Init+0xf0>)
 80024ce:	f00e fdbd 	bl	801104c <HAL_TIMEx_MasterConfigSynchronization>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80024d8:	f000 fb20 	bl	8002b1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024dc:	2360      	movs	r3, #96	; 0x60
 80024de:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80024e0:	2300      	movs	r3, #0
 80024e2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024e4:	2300      	movs	r3, #0
 80024e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024e8:	2300      	movs	r3, #0
 80024ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024ec:	463b      	mov	r3, r7
 80024ee:	2200      	movs	r2, #0
 80024f0:	4619      	mov	r1, r3
 80024f2:	4818      	ldr	r0, [pc, #96]	; (8002554 <MX_TIM4_Init+0xf0>)
 80024f4:	f00d ffdc 	bl	80104b0 <HAL_TIM_PWM_ConfigChannel>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80024fe:	f000 fb0d 	bl	8002b1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002502:	463b      	mov	r3, r7
 8002504:	2204      	movs	r2, #4
 8002506:	4619      	mov	r1, r3
 8002508:	4812      	ldr	r0, [pc, #72]	; (8002554 <MX_TIM4_Init+0xf0>)
 800250a:	f00d ffd1 	bl	80104b0 <HAL_TIM_PWM_ConfigChannel>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002514:	f000 fb02 	bl	8002b1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002518:	463b      	mov	r3, r7
 800251a:	2208      	movs	r2, #8
 800251c:	4619      	mov	r1, r3
 800251e:	480d      	ldr	r0, [pc, #52]	; (8002554 <MX_TIM4_Init+0xf0>)
 8002520:	f00d ffc6 	bl	80104b0 <HAL_TIM_PWM_ConfigChannel>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 800252a:	f000 faf7 	bl	8002b1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800252e:	463b      	mov	r3, r7
 8002530:	220c      	movs	r2, #12
 8002532:	4619      	mov	r1, r3
 8002534:	4807      	ldr	r0, [pc, #28]	; (8002554 <MX_TIM4_Init+0xf0>)
 8002536:	f00d ffbb 	bl	80104b0 <HAL_TIM_PWM_ConfigChannel>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8002540:	f000 faec 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002544:	4803      	ldr	r0, [pc, #12]	; (8002554 <MX_TIM4_Init+0xf0>)
 8002546:	f001 f8a3 	bl	8003690 <HAL_TIM_MspPostInit>

}
 800254a:	bf00      	nop
 800254c:	3728      	adds	r7, #40	; 0x28
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	24001270 	.word	0x24001270
 8002558:	40000800 	.word	0x40000800

0800255c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08a      	sub	sp, #40	; 0x28
 8002560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002562:	f107 031c 	add.w	r3, r7, #28
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	605a      	str	r2, [r3, #4]
 800256c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800256e:	463b      	mov	r3, r7
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	605a      	str	r2, [r3, #4]
 8002576:	609a      	str	r2, [r3, #8]
 8002578:	60da      	str	r2, [r3, #12]
 800257a:	611a      	str	r2, [r3, #16]
 800257c:	615a      	str	r2, [r3, #20]
 800257e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002580:	4b21      	ldr	r3, [pc, #132]	; (8002608 <MX_TIM5_Init+0xac>)
 8002582:	4a22      	ldr	r2, [pc, #136]	; (800260c <MX_TIM5_Init+0xb0>)
 8002584:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002586:	4b20      	ldr	r3, [pc, #128]	; (8002608 <MX_TIM5_Init+0xac>)
 8002588:	2200      	movs	r2, #0
 800258a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800258c:	4b1e      	ldr	r3, [pc, #120]	; (8002608 <MX_TIM5_Init+0xac>)
 800258e:	2200      	movs	r2, #0
 8002590:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 8002592:	4b1d      	ldr	r3, [pc, #116]	; (8002608 <MX_TIM5_Init+0xac>)
 8002594:	225a      	movs	r2, #90	; 0x5a
 8002596:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002598:	4b1b      	ldr	r3, [pc, #108]	; (8002608 <MX_TIM5_Init+0xac>)
 800259a:	2200      	movs	r2, #0
 800259c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800259e:	4b1a      	ldr	r3, [pc, #104]	; (8002608 <MX_TIM5_Init+0xac>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80025a4:	4818      	ldr	r0, [pc, #96]	; (8002608 <MX_TIM5_Init+0xac>)
 80025a6:	f00d fabb 	bl	800fb20 <HAL_TIM_PWM_Init>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80025b0:	f000 fab4 	bl	8002b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025b4:	2300      	movs	r3, #0
 80025b6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025b8:	2300      	movs	r3, #0
 80025ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80025bc:	f107 031c 	add.w	r3, r7, #28
 80025c0:	4619      	mov	r1, r3
 80025c2:	4811      	ldr	r0, [pc, #68]	; (8002608 <MX_TIM5_Init+0xac>)
 80025c4:	f00e fd42 	bl	801104c <HAL_TIMEx_MasterConfigSynchronization>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80025ce:	f000 faa5 	bl	8002b1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025d2:	2360      	movs	r3, #96	; 0x60
 80025d4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80025d6:	2300      	movs	r3, #0
 80025d8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025da:	2300      	movs	r3, #0
 80025dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025de:	2300      	movs	r3, #0
 80025e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80025e2:	463b      	mov	r3, r7
 80025e4:	220c      	movs	r2, #12
 80025e6:	4619      	mov	r1, r3
 80025e8:	4807      	ldr	r0, [pc, #28]	; (8002608 <MX_TIM5_Init+0xac>)
 80025ea:	f00d ff61 	bl	80104b0 <HAL_TIM_PWM_ConfigChannel>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80025f4:	f000 fa92 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80025f8:	4803      	ldr	r0, [pc, #12]	; (8002608 <MX_TIM5_Init+0xac>)
 80025fa:	f001 f849 	bl	8003690 <HAL_TIM_MspPostInit>

}
 80025fe:	bf00      	nop
 8002600:	3728      	adds	r7, #40	; 0x28
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	240012bc 	.word	0x240012bc
 800260c:	40000c00 	.word	0x40000c00

08002610 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002614:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <MX_TIM13_Init+0x40>)
 8002616:	4a0f      	ldr	r2, [pc, #60]	; (8002654 <MX_TIM13_Init+0x44>)
 8002618:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 95;
 800261a:	4b0d      	ldr	r3, [pc, #52]	; (8002650 <MX_TIM13_Init+0x40>)
 800261c:	225f      	movs	r2, #95	; 0x5f
 800261e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002620:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <MX_TIM13_Init+0x40>)
 8002622:	2200      	movs	r2, #0
 8002624:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8002626:	4b0a      	ldr	r3, [pc, #40]	; (8002650 <MX_TIM13_Init+0x40>)
 8002628:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800262c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800262e:	4b08      	ldr	r3, [pc, #32]	; (8002650 <MX_TIM13_Init+0x40>)
 8002630:	2200      	movs	r2, #0
 8002632:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002634:	4b06      	ldr	r3, [pc, #24]	; (8002650 <MX_TIM13_Init+0x40>)
 8002636:	2200      	movs	r2, #0
 8002638:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800263a:	4805      	ldr	r0, [pc, #20]	; (8002650 <MX_TIM13_Init+0x40>)
 800263c:	f00d fa19 	bl	800fa72 <HAL_TIM_Base_Init>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8002646:	f000 fa69 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	24001308 	.word	0x24001308
 8002654:	40001c00 	.word	0x40001c00

08002658 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800265c:	4b22      	ldr	r3, [pc, #136]	; (80026e8 <MX_UART4_Init+0x90>)
 800265e:	4a23      	ldr	r2, [pc, #140]	; (80026ec <MX_UART4_Init+0x94>)
 8002660:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002662:	4b21      	ldr	r3, [pc, #132]	; (80026e8 <MX_UART4_Init+0x90>)
 8002664:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002668:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800266a:	4b1f      	ldr	r3, [pc, #124]	; (80026e8 <MX_UART4_Init+0x90>)
 800266c:	2200      	movs	r2, #0
 800266e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002670:	4b1d      	ldr	r3, [pc, #116]	; (80026e8 <MX_UART4_Init+0x90>)
 8002672:	2200      	movs	r2, #0
 8002674:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002676:	4b1c      	ldr	r3, [pc, #112]	; (80026e8 <MX_UART4_Init+0x90>)
 8002678:	2200      	movs	r2, #0
 800267a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800267c:	4b1a      	ldr	r3, [pc, #104]	; (80026e8 <MX_UART4_Init+0x90>)
 800267e:	220c      	movs	r2, #12
 8002680:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002682:	4b19      	ldr	r3, [pc, #100]	; (80026e8 <MX_UART4_Init+0x90>)
 8002684:	2200      	movs	r2, #0
 8002686:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002688:	4b17      	ldr	r3, [pc, #92]	; (80026e8 <MX_UART4_Init+0x90>)
 800268a:	2200      	movs	r2, #0
 800268c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800268e:	4b16      	ldr	r3, [pc, #88]	; (80026e8 <MX_UART4_Init+0x90>)
 8002690:	2200      	movs	r2, #0
 8002692:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002694:	4b14      	ldr	r3, [pc, #80]	; (80026e8 <MX_UART4_Init+0x90>)
 8002696:	2200      	movs	r2, #0
 8002698:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800269a:	4b13      	ldr	r3, [pc, #76]	; (80026e8 <MX_UART4_Init+0x90>)
 800269c:	2200      	movs	r2, #0
 800269e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80026a0:	4811      	ldr	r0, [pc, #68]	; (80026e8 <MX_UART4_Init+0x90>)
 80026a2:	f00e fd8d 	bl	80111c0 <HAL_UART_Init>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80026ac:	f000 fa36 	bl	8002b1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026b0:	2100      	movs	r1, #0
 80026b2:	480d      	ldr	r0, [pc, #52]	; (80026e8 <MX_UART4_Init+0x90>)
 80026b4:	f00f fe93 	bl	80123de <HAL_UARTEx_SetTxFifoThreshold>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80026be:	f000 fa2d 	bl	8002b1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026c2:	2100      	movs	r1, #0
 80026c4:	4808      	ldr	r0, [pc, #32]	; (80026e8 <MX_UART4_Init+0x90>)
 80026c6:	f00f fec8 	bl	801245a <HAL_UARTEx_SetRxFifoThreshold>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80026d0:	f000 fa24 	bl	8002b1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80026d4:	4804      	ldr	r0, [pc, #16]	; (80026e8 <MX_UART4_Init+0x90>)
 80026d6:	f00f fe49 	bl	801236c <HAL_UARTEx_DisableFifoMode>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80026e0:	f000 fa1c 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80026e4:	bf00      	nop
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	240015ac 	.word	0x240015ac
 80026ec:	40004c00 	.word	0x40004c00

080026f0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80026f4:	4b22      	ldr	r3, [pc, #136]	; (8002780 <MX_USART6_UART_Init+0x90>)
 80026f6:	4a23      	ldr	r2, [pc, #140]	; (8002784 <MX_USART6_UART_Init+0x94>)
 80026f8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80026fa:	4b21      	ldr	r3, [pc, #132]	; (8002780 <MX_USART6_UART_Init+0x90>)
 80026fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002700:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002702:	4b1f      	ldr	r3, [pc, #124]	; (8002780 <MX_USART6_UART_Init+0x90>)
 8002704:	2200      	movs	r2, #0
 8002706:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002708:	4b1d      	ldr	r3, [pc, #116]	; (8002780 <MX_USART6_UART_Init+0x90>)
 800270a:	2200      	movs	r2, #0
 800270c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800270e:	4b1c      	ldr	r3, [pc, #112]	; (8002780 <MX_USART6_UART_Init+0x90>)
 8002710:	2200      	movs	r2, #0
 8002712:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002714:	4b1a      	ldr	r3, [pc, #104]	; (8002780 <MX_USART6_UART_Init+0x90>)
 8002716:	220c      	movs	r2, #12
 8002718:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800271a:	4b19      	ldr	r3, [pc, #100]	; (8002780 <MX_USART6_UART_Init+0x90>)
 800271c:	2200      	movs	r2, #0
 800271e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002720:	4b17      	ldr	r3, [pc, #92]	; (8002780 <MX_USART6_UART_Init+0x90>)
 8002722:	2200      	movs	r2, #0
 8002724:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002726:	4b16      	ldr	r3, [pc, #88]	; (8002780 <MX_USART6_UART_Init+0x90>)
 8002728:	2200      	movs	r2, #0
 800272a:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800272c:	4b14      	ldr	r3, [pc, #80]	; (8002780 <MX_USART6_UART_Init+0x90>)
 800272e:	2200      	movs	r2, #0
 8002730:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002732:	4b13      	ldr	r3, [pc, #76]	; (8002780 <MX_USART6_UART_Init+0x90>)
 8002734:	2200      	movs	r2, #0
 8002736:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002738:	4811      	ldr	r0, [pc, #68]	; (8002780 <MX_USART6_UART_Init+0x90>)
 800273a:	f00e fd41 	bl	80111c0 <HAL_UART_Init>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002744:	f000 f9ea 	bl	8002b1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002748:	2100      	movs	r1, #0
 800274a:	480d      	ldr	r0, [pc, #52]	; (8002780 <MX_USART6_UART_Init+0x90>)
 800274c:	f00f fe47 	bl	80123de <HAL_UARTEx_SetTxFifoThreshold>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8002756:	f000 f9e1 	bl	8002b1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800275a:	2100      	movs	r1, #0
 800275c:	4808      	ldr	r0, [pc, #32]	; (8002780 <MX_USART6_UART_Init+0x90>)
 800275e:	f00f fe7c 	bl	801245a <HAL_UARTEx_SetRxFifoThreshold>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8002768:	f000 f9d8 	bl	8002b1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 800276c:	4804      	ldr	r0, [pc, #16]	; (8002780 <MX_USART6_UART_Init+0x90>)
 800276e:	f00f fdfd 	bl	801236c <HAL_UARTEx_DisableFifoMode>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002778:	f000 f9d0 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800277c:	bf00      	nop
 800277e:	bd80      	pop	{r7, pc}
 8002780:	24001640 	.word	0x24001640
 8002784:	40011400 	.word	0x40011400

08002788 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800278e:	4b2d      	ldr	r3, [pc, #180]	; (8002844 <MX_DMA_Init+0xbc>)
 8002790:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002794:	4a2b      	ldr	r2, [pc, #172]	; (8002844 <MX_DMA_Init+0xbc>)
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800279e:	4b29      	ldr	r3, [pc, #164]	; (8002844 <MX_DMA_Init+0xbc>)
 80027a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	607b      	str	r3, [r7, #4]
 80027aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80027ac:	4b25      	ldr	r3, [pc, #148]	; (8002844 <MX_DMA_Init+0xbc>)
 80027ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80027b2:	4a24      	ldr	r2, [pc, #144]	; (8002844 <MX_DMA_Init+0xbc>)
 80027b4:	f043 0302 	orr.w	r3, r3, #2
 80027b8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80027bc:	4b21      	ldr	r3, [pc, #132]	; (8002844 <MX_DMA_Init+0xbc>)
 80027be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	603b      	str	r3, [r7, #0]
 80027c8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80027ca:	2200      	movs	r2, #0
 80027cc:	2100      	movs	r1, #0
 80027ce:	200b      	movs	r0, #11
 80027d0:	f002 ff63 	bl	800569a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80027d4:	200b      	movs	r0, #11
 80027d6:	f002 ff7a 	bl	80056ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80027da:	2200      	movs	r2, #0
 80027dc:	2100      	movs	r1, #0
 80027de:	200c      	movs	r0, #12
 80027e0:	f002 ff5b 	bl	800569a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80027e4:	200c      	movs	r0, #12
 80027e6:	f002 ff72 	bl	80056ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80027ea:	2200      	movs	r2, #0
 80027ec:	2100      	movs	r1, #0
 80027ee:	200d      	movs	r0, #13
 80027f0:	f002 ff53 	bl	800569a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80027f4:	200d      	movs	r0, #13
 80027f6:	f002 ff6a 	bl	80056ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80027fa:	2200      	movs	r2, #0
 80027fc:	2100      	movs	r1, #0
 80027fe:	200e      	movs	r0, #14
 8002800:	f002 ff4b 	bl	800569a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002804:	200e      	movs	r0, #14
 8002806:	f002 ff62 	bl	80056ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800280a:	2200      	movs	r2, #0
 800280c:	2100      	movs	r1, #0
 800280e:	200f      	movs	r0, #15
 8002810:	f002 ff43 	bl	800569a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002814:	200f      	movs	r0, #15
 8002816:	f002 ff5a 	bl	80056ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800281a:	2200      	movs	r2, #0
 800281c:	2100      	movs	r1, #0
 800281e:	2010      	movs	r0, #16
 8002820:	f002 ff3b 	bl	800569a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002824:	2010      	movs	r0, #16
 8002826:	f002 ff52 	bl	80056ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800282a:	2200      	movs	r2, #0
 800282c:	2100      	movs	r1, #0
 800282e:	2046      	movs	r0, #70	; 0x46
 8002830:	f002 ff33 	bl	800569a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002834:	2046      	movs	r0, #70	; 0x46
 8002836:	f002 ff4a 	bl	80056ce <HAL_NVIC_EnableIRQ>

}
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	58024400 	.word	0x58024400

08002848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b08c      	sub	sp, #48	; 0x30
 800284c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800284e:	f107 031c 	add.w	r3, r7, #28
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	605a      	str	r2, [r3, #4]
 8002858:	609a      	str	r2, [r3, #8]
 800285a:	60da      	str	r2, [r3, #12]
 800285c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800285e:	4ba7      	ldr	r3, [pc, #668]	; (8002afc <MX_GPIO_Init+0x2b4>)
 8002860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002864:	4aa5      	ldr	r2, [pc, #660]	; (8002afc <MX_GPIO_Init+0x2b4>)
 8002866:	f043 0310 	orr.w	r3, r3, #16
 800286a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800286e:	4ba3      	ldr	r3, [pc, #652]	; (8002afc <MX_GPIO_Init+0x2b4>)
 8002870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002874:	f003 0310 	and.w	r3, r3, #16
 8002878:	61bb      	str	r3, [r7, #24]
 800287a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800287c:	4b9f      	ldr	r3, [pc, #636]	; (8002afc <MX_GPIO_Init+0x2b4>)
 800287e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002882:	4a9e      	ldr	r2, [pc, #632]	; (8002afc <MX_GPIO_Init+0x2b4>)
 8002884:	f043 0320 	orr.w	r3, r3, #32
 8002888:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800288c:	4b9b      	ldr	r3, [pc, #620]	; (8002afc <MX_GPIO_Init+0x2b4>)
 800288e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002892:	f003 0320 	and.w	r3, r3, #32
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800289a:	4b98      	ldr	r3, [pc, #608]	; (8002afc <MX_GPIO_Init+0x2b4>)
 800289c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028a0:	4a96      	ldr	r2, [pc, #600]	; (8002afc <MX_GPIO_Init+0x2b4>)
 80028a2:	f043 0304 	orr.w	r3, r3, #4
 80028a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028aa:	4b94      	ldr	r3, [pc, #592]	; (8002afc <MX_GPIO_Init+0x2b4>)
 80028ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	613b      	str	r3, [r7, #16]
 80028b6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b8:	4b90      	ldr	r3, [pc, #576]	; (8002afc <MX_GPIO_Init+0x2b4>)
 80028ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028be:	4a8f      	ldr	r2, [pc, #572]	; (8002afc <MX_GPIO_Init+0x2b4>)
 80028c0:	f043 0301 	orr.w	r3, r3, #1
 80028c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028c8:	4b8c      	ldr	r3, [pc, #560]	; (8002afc <MX_GPIO_Init+0x2b4>)
 80028ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028d6:	4b89      	ldr	r3, [pc, #548]	; (8002afc <MX_GPIO_Init+0x2b4>)
 80028d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028dc:	4a87      	ldr	r2, [pc, #540]	; (8002afc <MX_GPIO_Init+0x2b4>)
 80028de:	f043 0302 	orr.w	r3, r3, #2
 80028e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028e6:	4b85      	ldr	r3, [pc, #532]	; (8002afc <MX_GPIO_Init+0x2b4>)
 80028e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80028f4:	4b81      	ldr	r3, [pc, #516]	; (8002afc <MX_GPIO_Init+0x2b4>)
 80028f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028fa:	4a80      	ldr	r2, [pc, #512]	; (8002afc <MX_GPIO_Init+0x2b4>)
 80028fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002900:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002904:	4b7d      	ldr	r3, [pc, #500]	; (8002afc <MX_GPIO_Init+0x2b4>)
 8002906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800290a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290e:	607b      	str	r3, [r7, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002912:	4b7a      	ldr	r3, [pc, #488]	; (8002afc <MX_GPIO_Init+0x2b4>)
 8002914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002918:	4a78      	ldr	r2, [pc, #480]	; (8002afc <MX_GPIO_Init+0x2b4>)
 800291a:	f043 0308 	orr.w	r3, r3, #8
 800291e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002922:	4b76      	ldr	r3, [pc, #472]	; (8002afc <MX_GPIO_Init+0x2b4>)
 8002924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	603b      	str	r3, [r7, #0]
 800292e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 8002930:	2200      	movs	r2, #0
 8002932:	f241 5104 	movw	r1, #5380	; 0x1504
 8002936:	4872      	ldr	r0, [pc, #456]	; (8002b00 <MX_GPIO_Init+0x2b8>)
 8002938:	f005 fcdc 	bl	80082f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|ARM2_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 800293c:	2200      	movs	r2, #0
 800293e:	f248 0106 	movw	r1, #32774	; 0x8006
 8002942:	4870      	ldr	r0, [pc, #448]	; (8002b04 <MX_GPIO_Init+0x2bc>)
 8002944:	f005 fcd6 	bl	80082f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002948:	2200      	movs	r2, #0
 800294a:	2130      	movs	r1, #48	; 0x30
 800294c:	486e      	ldr	r0, [pc, #440]	; (8002b08 <MX_GPIO_Init+0x2c0>)
 800294e:	f005 fcd1 	bl	80082f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|PYRO1_Pin, GPIO_PIN_RESET);
 8002952:	2200      	movs	r2, #0
 8002954:	2103      	movs	r1, #3
 8002956:	486d      	ldr	r0, [pc, #436]	; (8002b0c <MX_GPIO_Init+0x2c4>)
 8002958:	f005 fccc 	bl	80082f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 800295c:	2200      	movs	r2, #0
 800295e:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8002962:	486b      	ldr	r0, [pc, #428]	; (8002b10 <MX_GPIO_Init+0x2c8>)
 8002964:	f005 fcc6 	bl	80082f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8002968:	2200      	movs	r2, #0
 800296a:	210e      	movs	r1, #14
 800296c:	4869      	ldr	r0, [pc, #420]	; (8002b14 <MX_GPIO_Init+0x2cc>)
 800296e:	f005 fcc1 	bl	80082f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_SET);
 8002972:	2201      	movs	r2, #1
 8002974:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002978:	4867      	ldr	r0, [pc, #412]	; (8002b18 <MX_GPIO_Init+0x2d0>)
 800297a:	f005 fcbb 	bl	80082f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 800297e:	2200      	movs	r2, #0
 8002980:	2101      	movs	r1, #1
 8002982:	4865      	ldr	r0, [pc, #404]	; (8002b18 <MX_GPIO_Init+0x2d0>)
 8002984:	f005 fcb6 	bl	80082f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 8002988:	f241 5304 	movw	r3, #5380	; 0x1504
 800298c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800298e:	2301      	movs	r3, #1
 8002990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002992:	2300      	movs	r3, #0
 8002994:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002996:	2300      	movs	r3, #0
 8002998:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800299a:	f107 031c 	add.w	r3, r7, #28
 800299e:	4619      	mov	r1, r3
 80029a0:	4857      	ldr	r0, [pc, #348]	; (8002b00 <MX_GPIO_Init+0x2b8>)
 80029a2:	f005 fae7 	bl	8007f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin ARM2_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|ARM2_Pin|GPIO_PIN_15;
 80029a6:	f248 0306 	movw	r3, #32774	; 0x8006
 80029aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ac:	2301      	movs	r3, #1
 80029ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b0:	2300      	movs	r3, #0
 80029b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b4:	2300      	movs	r3, #0
 80029b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b8:	f107 031c 	add.w	r3, r7, #28
 80029bc:	4619      	mov	r1, r3
 80029be:	4851      	ldr	r0, [pc, #324]	; (8002b04 <MX_GPIO_Init+0x2bc>)
 80029c0:	f005 fad8 	bl	8007f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80029c4:	2330      	movs	r3, #48	; 0x30
 80029c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029c8:	2301      	movs	r3, #1
 80029ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d0:	2300      	movs	r3, #0
 80029d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029d4:	f107 031c 	add.w	r3, r7, #28
 80029d8:	4619      	mov	r1, r3
 80029da:	484b      	ldr	r0, [pc, #300]	; (8002b08 <MX_GPIO_Init+0x2c0>)
 80029dc:	f005 faca 	bl	8007f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PYRO1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|PYRO1_Pin;
 80029e0:	2303      	movs	r3, #3
 80029e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029e4:	2301      	movs	r3, #1
 80029e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ec:	2300      	movs	r3, #0
 80029ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029f0:	f107 031c 	add.w	r3, r7, #28
 80029f4:	4619      	mov	r1, r3
 80029f6:	4845      	ldr	r0, [pc, #276]	; (8002b0c <MX_GPIO_Init+0x2c4>)
 80029f8:	f005 fabc 	bl	8007f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 80029fc:	2304      	movs	r3, #4
 80029fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a00:	2300      	movs	r3, #0
 8002a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a04:	2301      	movs	r3, #1
 8002a06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 8002a08:	f107 031c 	add.w	r3, r7, #28
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	483f      	ldr	r0, [pc, #252]	; (8002b0c <MX_GPIO_Init+0x2c4>)
 8002a10:	f005 fab0 	bl	8007f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 8002a14:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8002a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a22:	2300      	movs	r3, #0
 8002a24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a26:	f107 031c 	add.w	r3, r7, #28
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4838      	ldr	r0, [pc, #224]	; (8002b10 <MX_GPIO_Init+0x2c8>)
 8002a2e:	f005 faa1 	bl	8007f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 8002a32:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a40:	f107 031c 	add.w	r3, r7, #28
 8002a44:	4619      	mov	r1, r3
 8002a46:	4832      	ldr	r0, [pc, #200]	; (8002b10 <MX_GPIO_Init+0x2c8>)
 8002a48:	f005 fa94 	bl	8007f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a50:	2300      	movs	r3, #0
 8002a52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a54:	2301      	movs	r3, #1
 8002a56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 8002a58:	f107 031c 	add.w	r3, r7, #28
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	482d      	ldr	r0, [pc, #180]	; (8002b14 <MX_GPIO_Init+0x2cc>)
 8002a60:	f005 fa88 	bl	8007f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 8002a64:	230e      	movs	r3, #14
 8002a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a70:	2300      	movs	r3, #0
 8002a72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a74:	f107 031c 	add.w	r3, r7, #28
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4826      	ldr	r0, [pc, #152]	; (8002b14 <MX_GPIO_Init+0x2cc>)
 8002a7c:	f005 fa7a 	bl	8007f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 8002a80:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 8002a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a86:	2300      	movs	r3, #0
 8002a88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a8e:	f107 031c 	add.w	r3, r7, #28
 8002a92:	4619      	mov	r1, r3
 8002a94:	481a      	ldr	r0, [pc, #104]	; (8002b00 <MX_GPIO_Init+0x2b8>)
 8002a96:	f005 fa6d 	bl	8007f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0;
 8002a9a:	f240 7301 	movw	r3, #1793	; 0x701
 8002a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002aac:	f107 031c 	add.w	r3, r7, #28
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4819      	ldr	r0, [pc, #100]	; (8002b18 <MX_GPIO_Init+0x2d0>)
 8002ab4:	f005 fa5e 	bl	8007f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 8002ab8:	2310      	movs	r3, #16
 8002aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002abc:	2300      	movs	r3, #0
 8002abe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002ac4:	f107 031c 	add.w	r3, r7, #28
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4812      	ldr	r0, [pc, #72]	; (8002b14 <MX_GPIO_Init+0x2cc>)
 8002acc:	f005 fa52 	bl	8007f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ad0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ada:	2300      	movs	r3, #0
 8002adc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae6:	f107 031c 	add.w	r3, r7, #28
 8002aea:	4619      	mov	r1, r3
 8002aec:	4805      	ldr	r0, [pc, #20]	; (8002b04 <MX_GPIO_Init+0x2bc>)
 8002aee:	f005 fa41 	bl	8007f74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002af2:	bf00      	nop
 8002af4:	3730      	adds	r7, #48	; 0x30
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	58024400 	.word	0x58024400
 8002b00:	58021000 	.word	0x58021000
 8002b04:	58020000 	.word	0x58020000
 8002b08:	58020800 	.word	0x58020800
 8002b0c:	58020400 	.word	0x58020400
 8002b10:	58021400 	.word	0x58021400
 8002b14:	58021800 	.word	0x58021800
 8002b18:	58020c00 	.word	0x58020c00

08002b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b20:	b672      	cpsid	i
}
 8002b22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002b24:	e7fe      	b.n	8002b24 <Error_Handler+0x8>
	...

08002b28 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
void MX_RNG_Init(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002b2c:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <MX_RNG_Init+0x2c>)
 8002b2e:	4a0a      	ldr	r2, [pc, #40]	; (8002b58 <MX_RNG_Init+0x30>)
 8002b30:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8002b32:	4b08      	ldr	r3, [pc, #32]	; (8002b54 <MX_RNG_Init+0x2c>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002b38:	4806      	ldr	r0, [pc, #24]	; (8002b54 <MX_RNG_Init+0x2c>)
 8002b3a:	f00a fbef 	bl	800d31c <HAL_RNG_Init>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8002b44:	f7ff ffea 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */
  initialized = 1;
 8002b48:	4b04      	ldr	r3, [pc, #16]	; (8002b5c <MX_RNG_Init+0x34>)
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]
  /* USER CODE END RNG_Init 2 */

}
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	240016d8 	.word	0x240016d8
 8002b58:	48021800 	.word	0x48021800
 8002b5c:	240016d4 	.word	0x240016d4

08002b60 <rand_range>:


uint32_t rand_range(uint32_t a, uint32_t b) {
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
	if(!initialized)
 8002b6a:	4b1c      	ldr	r3, [pc, #112]	; (8002bdc <rand_range+0x7c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d109      	bne.n	8002b86 <rand_range+0x26>
	{
		HAL_Delay(100);
 8002b72:	2064      	movs	r0, #100	; 0x64
 8002b74:	f001 f90c 	bl	8003d90 <HAL_Delay>
		CDC_Transmit_HS("Random not initialized!\n", strlen("Random not initialized!\n"));
 8002b78:	2118      	movs	r1, #24
 8002b7a:	4819      	ldr	r0, [pc, #100]	; (8002be0 <rand_range+0x80>)
 8002b7c:	f014 f986 	bl	8016e8c <CDC_Transmit_HS>
		return -1;
 8002b80:	f04f 33ff 	mov.w	r3, #4294967295
 8002b84:	e026      	b.n	8002bd4 <rand_range+0x74>
	}

	uint32_t rand = 0;
 8002b86:	2300      	movs	r3, #0
 8002b88:	60bb      	str	r3, [r7, #8]
	uint32_t MAX = 4294967295;
 8002b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b8e:	60fb      	str	r3, [r7, #12]
	if(b>a && HAL_RNG_GenerateRandomNumber(&hrng, &rand) == HAL_OK)
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d914      	bls.n	8002bc2 <rand_range+0x62>
 8002b98:	f107 0308 	add.w	r3, r7, #8
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4811      	ldr	r0, [pc, #68]	; (8002be4 <rand_range+0x84>)
 8002ba0:	f00a fc60 	bl	800d464 <HAL_RNG_GenerateRandomNumber>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10b      	bne.n	8002bc2 <rand_range+0x62>
	{
		return a+rand/(MAX/(b-a));
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	6839      	ldr	r1, [r7, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	1acb      	subs	r3, r1, r3
 8002bb2:	68f9      	ldr	r1, [r7, #12]
 8002bb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	e008      	b.n	8002bd4 <rand_range+0x74>
	}
	else
	{
		HAL_Delay(100);
 8002bc2:	2064      	movs	r0, #100	; 0x64
 8002bc4:	f001 f8e4 	bl	8003d90 <HAL_Delay>
		CDC_Transmit_HS("rng error\n", strlen("rng error\n"));
 8002bc8:	210a      	movs	r1, #10
 8002bca:	4807      	ldr	r0, [pc, #28]	; (8002be8 <rand_range+0x88>)
 8002bcc:	f014 f95e 	bl	8016e8c <CDC_Transmit_HS>
	}
	return -1;
 8002bd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	240016d4 	.word	0x240016d4
 8002be0:	08018b60 	.word	0x08018b60
 8002be4:	240016d8 	.word	0x240016d8
 8002be8:	08018b7c 	.word	0x08018b7c

08002bec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bf2:	4b0a      	ldr	r3, [pc, #40]	; (8002c1c <HAL_MspInit+0x30>)
 8002bf4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002bf8:	4a08      	ldr	r2, [pc, #32]	; (8002c1c <HAL_MspInit+0x30>)
 8002bfa:	f043 0302 	orr.w	r3, r3, #2
 8002bfe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002c02:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <HAL_MspInit+0x30>)
 8002c04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	607b      	str	r3, [r7, #4]
 8002c0e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	58024400 	.word	0x58024400

08002c20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b08c      	sub	sp, #48	; 0x30
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c28:	f107 031c 	add.w	r3, r7, #28
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	605a      	str	r2, [r3, #4]
 8002c32:	609a      	str	r2, [r3, #8]
 8002c34:	60da      	str	r2, [r3, #12]
 8002c36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a5d      	ldr	r2, [pc, #372]	; (8002db4 <HAL_ADC_MspInit+0x194>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d159      	bne.n	8002cf6 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002c42:	4b5d      	ldr	r3, [pc, #372]	; (8002db8 <HAL_ADC_MspInit+0x198>)
 8002c44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002c48:	4a5b      	ldr	r2, [pc, #364]	; (8002db8 <HAL_ADC_MspInit+0x198>)
 8002c4a:	f043 0320 	orr.w	r3, r3, #32
 8002c4e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002c52:	4b59      	ldr	r3, [pc, #356]	; (8002db8 <HAL_ADC_MspInit+0x198>)
 8002c54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002c58:	f003 0320 	and.w	r3, r3, #32
 8002c5c:	61bb      	str	r3, [r7, #24]
 8002c5e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c60:	4b55      	ldr	r3, [pc, #340]	; (8002db8 <HAL_ADC_MspInit+0x198>)
 8002c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c66:	4a54      	ldr	r2, [pc, #336]	; (8002db8 <HAL_ADC_MspInit+0x198>)
 8002c68:	f043 0304 	orr.w	r3, r3, #4
 8002c6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c70:	4b51      	ldr	r3, [pc, #324]	; (8002db8 <HAL_ADC_MspInit+0x198>)
 8002c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c76:	f003 0304 	and.w	r3, r3, #4
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = ARM_CHECK_Pin;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c82:	2303      	movs	r3, #3
 8002c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c86:	2300      	movs	r3, #0
 8002c88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002c8a:	f107 031c 	add.w	r3, r7, #28
 8002c8e:	4619      	mov	r1, r3
 8002c90:	484a      	ldr	r0, [pc, #296]	; (8002dbc <HAL_ADC_MspInit+0x19c>)
 8002c92:	f005 f96f 	bl	8007f74 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 8002c96:	4b4a      	ldr	r3, [pc, #296]	; (8002dc0 <HAL_ADC_MspInit+0x1a0>)
 8002c98:	4a4a      	ldr	r2, [pc, #296]	; (8002dc4 <HAL_ADC_MspInit+0x1a4>)
 8002c9a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002c9c:	4b48      	ldr	r3, [pc, #288]	; (8002dc0 <HAL_ADC_MspInit+0x1a0>)
 8002c9e:	2209      	movs	r2, #9
 8002ca0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ca2:	4b47      	ldr	r3, [pc, #284]	; (8002dc0 <HAL_ADC_MspInit+0x1a0>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ca8:	4b45      	ldr	r3, [pc, #276]	; (8002dc0 <HAL_ADC_MspInit+0x1a0>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002cae:	4b44      	ldr	r3, [pc, #272]	; (8002dc0 <HAL_ADC_MspInit+0x1a0>)
 8002cb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cb4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002cb6:	4b42      	ldr	r3, [pc, #264]	; (8002dc0 <HAL_ADC_MspInit+0x1a0>)
 8002cb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cbc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002cbe:	4b40      	ldr	r3, [pc, #256]	; (8002dc0 <HAL_ADC_MspInit+0x1a0>)
 8002cc0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cc4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002cc6:	4b3e      	ldr	r3, [pc, #248]	; (8002dc0 <HAL_ADC_MspInit+0x1a0>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002ccc:	4b3c      	ldr	r3, [pc, #240]	; (8002dc0 <HAL_ADC_MspInit+0x1a0>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cd2:	4b3b      	ldr	r3, [pc, #236]	; (8002dc0 <HAL_ADC_MspInit+0x1a0>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002cd8:	4839      	ldr	r0, [pc, #228]	; (8002dc0 <HAL_ADC_MspInit+0x1a0>)
 8002cda:	f002 fd13 	bl	8005704 <HAL_DMA_Init>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002ce4:	f7ff ff1a 	bl	8002b1c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a35      	ldr	r2, [pc, #212]	; (8002dc0 <HAL_ADC_MspInit+0x1a0>)
 8002cec:	659a      	str	r2, [r3, #88]	; 0x58
 8002cee:	4a34      	ldr	r2, [pc, #208]	; (8002dc0 <HAL_ADC_MspInit+0x1a0>)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002cf4:	e059      	b.n	8002daa <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a33      	ldr	r2, [pc, #204]	; (8002dc8 <HAL_ADC_MspInit+0x1a8>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d154      	bne.n	8002daa <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002d00:	4b2d      	ldr	r3, [pc, #180]	; (8002db8 <HAL_ADC_MspInit+0x198>)
 8002d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d06:	4a2c      	ldr	r2, [pc, #176]	; (8002db8 <HAL_ADC_MspInit+0x198>)
 8002d08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d10:	4b29      	ldr	r3, [pc, #164]	; (8002db8 <HAL_ADC_MspInit+0x198>)
 8002d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d1a:	613b      	str	r3, [r7, #16]
 8002d1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d1e:	4b26      	ldr	r3, [pc, #152]	; (8002db8 <HAL_ADC_MspInit+0x198>)
 8002d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d24:	4a24      	ldr	r2, [pc, #144]	; (8002db8 <HAL_ADC_MspInit+0x198>)
 8002d26:	f043 0304 	orr.w	r3, r3, #4
 8002d2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d2e:	4b22      	ldr	r3, [pc, #136]	; (8002db8 <HAL_ADC_MspInit+0x198>)
 8002d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002d3c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002d40:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002d44:	f001 f848 	bl	8003dd8 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8002d48:	4b20      	ldr	r3, [pc, #128]	; (8002dcc <HAL_ADC_MspInit+0x1ac>)
 8002d4a:	4a21      	ldr	r2, [pc, #132]	; (8002dd0 <HAL_ADC_MspInit+0x1b0>)
 8002d4c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002d4e:	4b1f      	ldr	r3, [pc, #124]	; (8002dcc <HAL_ADC_MspInit+0x1ac>)
 8002d50:	2273      	movs	r2, #115	; 0x73
 8002d52:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d54:	4b1d      	ldr	r3, [pc, #116]	; (8002dcc <HAL_ADC_MspInit+0x1ac>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d5a:	4b1c      	ldr	r3, [pc, #112]	; (8002dcc <HAL_ADC_MspInit+0x1ac>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002d60:	4b1a      	ldr	r3, [pc, #104]	; (8002dcc <HAL_ADC_MspInit+0x1ac>)
 8002d62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d66:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d68:	4b18      	ldr	r3, [pc, #96]	; (8002dcc <HAL_ADC_MspInit+0x1ac>)
 8002d6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d6e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d70:	4b16      	ldr	r3, [pc, #88]	; (8002dcc <HAL_ADC_MspInit+0x1ac>)
 8002d72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d76:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002d78:	4b14      	ldr	r3, [pc, #80]	; (8002dcc <HAL_ADC_MspInit+0x1ac>)
 8002d7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d7e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002d80:	4b12      	ldr	r3, [pc, #72]	; (8002dcc <HAL_ADC_MspInit+0x1ac>)
 8002d82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d86:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d88:	4b10      	ldr	r3, [pc, #64]	; (8002dcc <HAL_ADC_MspInit+0x1ac>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002d8e:	480f      	ldr	r0, [pc, #60]	; (8002dcc <HAL_ADC_MspInit+0x1ac>)
 8002d90:	f002 fcb8 	bl	8005704 <HAL_DMA_Init>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 8002d9a:	f7ff febf 	bl	8002b1c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a0a      	ldr	r2, [pc, #40]	; (8002dcc <HAL_ADC_MspInit+0x1ac>)
 8002da2:	659a      	str	r2, [r3, #88]	; 0x58
 8002da4:	4a09      	ldr	r2, [pc, #36]	; (8002dcc <HAL_ADC_MspInit+0x1ac>)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002daa:	bf00      	nop
 8002dac:	3730      	adds	r7, #48	; 0x30
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40022000 	.word	0x40022000
 8002db8:	58024400 	.word	0x58024400
 8002dbc:	58020800 	.word	0x58020800
 8002dc0:	24000de0 	.word	0x24000de0
 8002dc4:	40020088 	.word	0x40020088
 8002dc8:	58026000 	.word	0x58026000
 8002dcc:	24000e58 	.word	0x24000e58
 8002dd0:	400204b8 	.word	0x400204b8

08002dd4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b0b8      	sub	sp, #224	; 0xe0
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ddc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	605a      	str	r2, [r3, #4]
 8002de6:	609a      	str	r2, [r3, #8]
 8002de8:	60da      	str	r2, [r3, #12]
 8002dea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002dec:	f107 0310 	add.w	r3, r7, #16
 8002df0:	22b8      	movs	r2, #184	; 0xb8
 8002df2:	2100      	movs	r1, #0
 8002df4:	4618      	mov	r0, r3
 8002df6:	f014 fceb 	bl	80177d0 <memset>
  if(hfdcan->Instance==FDCAN3)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a26      	ldr	r2, [pc, #152]	; (8002e98 <HAL_FDCAN_MspInit+0xc4>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d145      	bne.n	8002e90 <HAL_FDCAN_MspInit+0xbc>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002e04:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002e08:	f04f 0300 	mov.w	r3, #0
 8002e0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002e10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002e14:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e16:	f107 0310 	add.w	r3, r7, #16
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f007 fe98 	bl	800ab50 <HAL_RCCEx_PeriphCLKConfig>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8002e26:	f7ff fe79 	bl	8002b1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002e2a:	4b1c      	ldr	r3, [pc, #112]	; (8002e9c <HAL_FDCAN_MspInit+0xc8>)
 8002e2c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002e30:	4a1a      	ldr	r2, [pc, #104]	; (8002e9c <HAL_FDCAN_MspInit+0xc8>)
 8002e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e36:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002e3a:	4b18      	ldr	r3, [pc, #96]	; (8002e9c <HAL_FDCAN_MspInit+0xc8>)
 8002e3c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e48:	4b14      	ldr	r3, [pc, #80]	; (8002e9c <HAL_FDCAN_MspInit+0xc8>)
 8002e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e4e:	4a13      	ldr	r2, [pc, #76]	; (8002e9c <HAL_FDCAN_MspInit+0xc8>)
 8002e50:	f043 0320 	orr.w	r3, r3, #32
 8002e54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e58:	4b10      	ldr	r3, [pc, #64]	; (8002e9c <HAL_FDCAN_MspInit+0xc8>)
 8002e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e5e:	f003 0320 	and.w	r3, r3, #32
 8002e62:	60bb      	str	r3, [r7, #8]
 8002e64:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e66:	23c0      	movs	r3, #192	; 0xc0
 8002e68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e72:	2300      	movs	r3, #0
 8002e74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8002e7e:	2302      	movs	r3, #2
 8002e80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e84:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4805      	ldr	r0, [pc, #20]	; (8002ea0 <HAL_FDCAN_MspInit+0xcc>)
 8002e8c:	f005 f872 	bl	8007f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8002e90:	bf00      	nop
 8002e92:	37e0      	adds	r7, #224	; 0xe0
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	4000d400 	.word	0x4000d400
 8002e9c:	58024400 	.word	0x58024400
 8002ea0:	58021400 	.word	0x58021400

08002ea4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b0b8      	sub	sp, #224	; 0xe0
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	605a      	str	r2, [r3, #4]
 8002eb6:	609a      	str	r2, [r3, #8]
 8002eb8:	60da      	str	r2, [r3, #12]
 8002eba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ebc:	f107 0310 	add.w	r3, r7, #16
 8002ec0:	22b8      	movs	r2, #184	; 0xb8
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f014 fc83 	bl	80177d0 <memset>
  if(hi2c->Instance==I2C2)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a2a      	ldr	r2, [pc, #168]	; (8002f78 <HAL_I2C_MspInit+0xd4>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d14d      	bne.n	8002f70 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002ed4:	f04f 0208 	mov.w	r2, #8
 8002ed8:	f04f 0300 	mov.w	r3, #0
 8002edc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ee6:	f107 0310 	add.w	r3, r7, #16
 8002eea:	4618      	mov	r0, r3
 8002eec:	f007 fe30 	bl	800ab50 <HAL_RCCEx_PeriphCLKConfig>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002ef6:	f7ff fe11 	bl	8002b1c <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002efa:	4b20      	ldr	r3, [pc, #128]	; (8002f7c <HAL_I2C_MspInit+0xd8>)
 8002efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f00:	4a1e      	ldr	r2, [pc, #120]	; (8002f7c <HAL_I2C_MspInit+0xd8>)
 8002f02:	f043 0320 	orr.w	r3, r3, #32
 8002f06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f0a:	4b1c      	ldr	r3, [pc, #112]	; (8002f7c <HAL_I2C_MspInit+0xd8>)
 8002f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f10:	f003 0320 	and.w	r3, r3, #32
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f1e:	2312      	movs	r3, #18
 8002f20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f24:	2300      	movs	r3, #0
 8002f26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002f30:	2304      	movs	r3, #4
 8002f32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f36:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4810      	ldr	r0, [pc, #64]	; (8002f80 <HAL_I2C_MspInit+0xdc>)
 8002f3e:	f005 f819 	bl	8007f74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002f42:	4b0e      	ldr	r3, [pc, #56]	; (8002f7c <HAL_I2C_MspInit+0xd8>)
 8002f44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f48:	4a0c      	ldr	r2, [pc, #48]	; (8002f7c <HAL_I2C_MspInit+0xd8>)
 8002f4a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f4e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f52:	4b0a      	ldr	r3, [pc, #40]	; (8002f7c <HAL_I2C_MspInit+0xd8>)
 8002f54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f5c:	60bb      	str	r3, [r7, #8]
 8002f5e:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8002f60:	2200      	movs	r2, #0
 8002f62:	2101      	movs	r1, #1
 8002f64:	2021      	movs	r0, #33	; 0x21
 8002f66:	f002 fb98 	bl	800569a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002f6a:	2021      	movs	r0, #33	; 0x21
 8002f6c:	f002 fbaf 	bl	80056ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002f70:	bf00      	nop
 8002f72:	37e0      	adds	r7, #224	; 0xe0
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40005800 	.word	0x40005800
 8002f7c:	58024400 	.word	0x58024400
 8002f80:	58021400 	.word	0x58021400

08002f84 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b0b2      	sub	sp, #200	; 0xc8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f8c:	f107 0310 	add.w	r3, r7, #16
 8002f90:	22b8      	movs	r2, #184	; 0xb8
 8002f92:	2100      	movs	r1, #0
 8002f94:	4618      	mov	r0, r3
 8002f96:	f014 fc1b 	bl	80177d0 <memset>
  if(hrng->Instance==RNG)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a14      	ldr	r2, [pc, #80]	; (8002ff0 <HAL_RNG_MspInit+0x6c>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d121      	bne.n	8002fe8 <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002fa4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fa8:	f04f 0300 	mov.w	r3, #0
 8002fac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fb6:	f107 0310 	add.w	r3, r7, #16
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f007 fdc8 	bl	800ab50 <HAL_RCCEx_PeriphCLKConfig>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 8002fc6:	f7ff fda9 	bl	8002b1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002fca:	4b0a      	ldr	r3, [pc, #40]	; (8002ff4 <HAL_RNG_MspInit+0x70>)
 8002fcc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002fd0:	4a08      	ldr	r2, [pc, #32]	; (8002ff4 <HAL_RNG_MspInit+0x70>)
 8002fd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fd6:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002fda:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <HAL_RNG_MspInit+0x70>)
 8002fdc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8002fe8:	bf00      	nop
 8002fea:	37c8      	adds	r7, #200	; 0xc8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	48021800 	.word	0x48021800
 8002ff4:	58024400 	.word	0x58024400

08002ff8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b0ba      	sub	sp, #232	; 0xe8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003000:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	605a      	str	r2, [r3, #4]
 800300a:	609a      	str	r2, [r3, #8]
 800300c:	60da      	str	r2, [r3, #12]
 800300e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003010:	f107 0318 	add.w	r3, r7, #24
 8003014:	22b8      	movs	r2, #184	; 0xb8
 8003016:	2100      	movs	r1, #0
 8003018:	4618      	mov	r0, r3
 800301a:	f014 fbd9 	bl	80177d0 <memset>
  if(hsd->Instance==SDMMC2)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a5d      	ldr	r2, [pc, #372]	; (8003198 <HAL_SD_MspInit+0x1a0>)
 8003024:	4293      	cmp	r3, r2
 8003026:	f040 80b3 	bne.w	8003190 <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800302a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800302e:	f04f 0300 	mov.w	r3, #0
 8003032:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8003036:	2300      	movs	r3, #0
 8003038:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800303a:	f107 0318 	add.w	r3, r7, #24
 800303e:	4618      	mov	r0, r3
 8003040:	f007 fd86 	bl	800ab50 <HAL_RCCEx_PeriphCLKConfig>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 800304a:	f7ff fd67 	bl	8002b1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 800304e:	4b53      	ldr	r3, [pc, #332]	; (800319c <HAL_SD_MspInit+0x1a4>)
 8003050:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003054:	4a51      	ldr	r2, [pc, #324]	; (800319c <HAL_SD_MspInit+0x1a4>)
 8003056:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800305a:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800305e:	4b4f      	ldr	r3, [pc, #316]	; (800319c <HAL_SD_MspInit+0x1a4>)
 8003060:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003064:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003068:	617b      	str	r3, [r7, #20]
 800306a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800306c:	4b4b      	ldr	r3, [pc, #300]	; (800319c <HAL_SD_MspInit+0x1a4>)
 800306e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003072:	4a4a      	ldr	r2, [pc, #296]	; (800319c <HAL_SD_MspInit+0x1a4>)
 8003074:	f043 0308 	orr.w	r3, r3, #8
 8003078:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800307c:	4b47      	ldr	r3, [pc, #284]	; (800319c <HAL_SD_MspInit+0x1a4>)
 800307e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	613b      	str	r3, [r7, #16]
 8003088:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800308a:	4b44      	ldr	r3, [pc, #272]	; (800319c <HAL_SD_MspInit+0x1a4>)
 800308c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003090:	4a42      	ldr	r2, [pc, #264]	; (800319c <HAL_SD_MspInit+0x1a4>)
 8003092:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003096:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800309a:	4b40      	ldr	r3, [pc, #256]	; (800319c <HAL_SD_MspInit+0x1a4>)
 800309c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80030a8:	2340      	movs	r3, #64	; 0x40
 80030aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ae:	2302      	movs	r3, #2
 80030b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b4:	2300      	movs	r3, #0
 80030b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ba:	2303      	movs	r3, #3
 80030bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80030c0:	230b      	movs	r3, #11
 80030c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030c6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80030ca:	4619      	mov	r1, r3
 80030cc:	4834      	ldr	r0, [pc, #208]	; (80031a0 <HAL_SD_MspInit+0x1a8>)
 80030ce:	f004 ff51 	bl	8007f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80030d2:	2380      	movs	r3, #128	; 0x80
 80030d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d8:	2302      	movs	r3, #2
 80030da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030de:	2301      	movs	r3, #1
 80030e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030e4:	2303      	movs	r3, #3
 80030e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80030ea:	230b      	movs	r3, #11
 80030ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80030f4:	4619      	mov	r1, r3
 80030f6:	482a      	ldr	r0, [pc, #168]	; (80031a0 <HAL_SD_MspInit+0x1a8>)
 80030f8:	f004 ff3c 	bl	8007f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80030fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003100:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003104:	2302      	movs	r3, #2
 8003106:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800310a:	2301      	movs	r3, #1
 800310c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003110:	2303      	movs	r3, #3
 8003112:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003116:	230b      	movs	r3, #11
 8003118:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800311c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003120:	4619      	mov	r1, r3
 8003122:	4820      	ldr	r0, [pc, #128]	; (80031a4 <HAL_SD_MspInit+0x1ac>)
 8003124:	f004 ff26 	bl	8007f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003128:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800312c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003130:	2302      	movs	r3, #2
 8003132:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003136:	2300      	movs	r3, #0
 8003138:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800313c:	2303      	movs	r3, #3
 800313e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003142:	230b      	movs	r3, #11
 8003144:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003148:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800314c:	4619      	mov	r1, r3
 800314e:	4815      	ldr	r0, [pc, #84]	; (80031a4 <HAL_SD_MspInit+0x1ac>)
 8003150:	f004 ff10 	bl	8007f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003154:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003158:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800315c:	2302      	movs	r3, #2
 800315e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003162:	2300      	movs	r3, #0
 8003164:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003168:	2303      	movs	r3, #3
 800316a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 800316e:	230a      	movs	r3, #10
 8003170:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003174:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003178:	4619      	mov	r1, r3
 800317a:	480a      	ldr	r0, [pc, #40]	; (80031a4 <HAL_SD_MspInit+0x1ac>)
 800317c:	f004 fefa 	bl	8007f74 <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8003180:	2200      	movs	r2, #0
 8003182:	2100      	movs	r1, #0
 8003184:	207c      	movs	r0, #124	; 0x7c
 8003186:	f002 fa88 	bl	800569a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 800318a:	207c      	movs	r0, #124	; 0x7c
 800318c:	f002 fa9f 	bl	80056ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8003190:	bf00      	nop
 8003192:	37e8      	adds	r7, #232	; 0xe8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	48022400 	.word	0x48022400
 800319c:	58024400 	.word	0x58024400
 80031a0:	58020c00 	.word	0x58020c00
 80031a4:	58021800 	.word	0x58021800

080031a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b08e      	sub	sp, #56	; 0x38
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	605a      	str	r2, [r3, #4]
 80031ba:	609a      	str	r2, [r3, #8]
 80031bc:	60da      	str	r2, [r3, #12]
 80031be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a4f      	ldr	r2, [pc, #316]	; (8003304 <HAL_SPI_MspInit+0x15c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d12e      	bne.n	8003228 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80031ca:	4b4f      	ldr	r3, [pc, #316]	; (8003308 <HAL_SPI_MspInit+0x160>)
 80031cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031d0:	4a4d      	ldr	r2, [pc, #308]	; (8003308 <HAL_SPI_MspInit+0x160>)
 80031d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031d6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80031da:	4b4b      	ldr	r3, [pc, #300]	; (8003308 <HAL_SPI_MspInit+0x160>)
 80031dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031e4:	623b      	str	r3, [r7, #32]
 80031e6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031e8:	4b47      	ldr	r3, [pc, #284]	; (8003308 <HAL_SPI_MspInit+0x160>)
 80031ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031ee:	4a46      	ldr	r2, [pc, #280]	; (8003308 <HAL_SPI_MspInit+0x160>)
 80031f0:	f043 0301 	orr.w	r3, r3, #1
 80031f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031f8:	4b43      	ldr	r3, [pc, #268]	; (8003308 <HAL_SPI_MspInit+0x160>)
 80031fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	61fb      	str	r3, [r7, #28]
 8003204:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003206:	23e0      	movs	r3, #224	; 0xe0
 8003208:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800320a:	2302      	movs	r3, #2
 800320c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320e:	2300      	movs	r3, #0
 8003210:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003212:	2300      	movs	r3, #0
 8003214:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003216:	2305      	movs	r3, #5
 8003218:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800321a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800321e:	4619      	mov	r1, r3
 8003220:	483a      	ldr	r0, [pc, #232]	; (800330c <HAL_SPI_MspInit+0x164>)
 8003222:	f004 fea7 	bl	8007f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003226:	e068      	b.n	80032fa <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a38      	ldr	r2, [pc, #224]	; (8003310 <HAL_SPI_MspInit+0x168>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d12f      	bne.n	8003292 <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003232:	4b35      	ldr	r3, [pc, #212]	; (8003308 <HAL_SPI_MspInit+0x160>)
 8003234:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003238:	4a33      	ldr	r2, [pc, #204]	; (8003308 <HAL_SPI_MspInit+0x160>)
 800323a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800323e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003242:	4b31      	ldr	r3, [pc, #196]	; (8003308 <HAL_SPI_MspInit+0x160>)
 8003244:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003248:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800324c:	61bb      	str	r3, [r7, #24]
 800324e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003250:	4b2d      	ldr	r3, [pc, #180]	; (8003308 <HAL_SPI_MspInit+0x160>)
 8003252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003256:	4a2c      	ldr	r2, [pc, #176]	; (8003308 <HAL_SPI_MspInit+0x160>)
 8003258:	f043 0302 	orr.w	r3, r3, #2
 800325c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003260:	4b29      	ldr	r3, [pc, #164]	; (8003308 <HAL_SPI_MspInit+0x160>)
 8003262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	617b      	str	r3, [r7, #20]
 800326c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800326e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003272:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003274:	2302      	movs	r3, #2
 8003276:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003278:	2300      	movs	r3, #0
 800327a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800327c:	2300      	movs	r3, #0
 800327e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003280:	2305      	movs	r3, #5
 8003282:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003288:	4619      	mov	r1, r3
 800328a:	4822      	ldr	r0, [pc, #136]	; (8003314 <HAL_SPI_MspInit+0x16c>)
 800328c:	f004 fe72 	bl	8007f74 <HAL_GPIO_Init>
}
 8003290:	e033      	b.n	80032fa <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a20      	ldr	r2, [pc, #128]	; (8003318 <HAL_SPI_MspInit+0x170>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d12e      	bne.n	80032fa <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800329c:	4b1a      	ldr	r3, [pc, #104]	; (8003308 <HAL_SPI_MspInit+0x160>)
 800329e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032a2:	4a19      	ldr	r2, [pc, #100]	; (8003308 <HAL_SPI_MspInit+0x160>)
 80032a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032a8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80032ac:	4b16      	ldr	r3, [pc, #88]	; (8003308 <HAL_SPI_MspInit+0x160>)
 80032ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032b6:	613b      	str	r3, [r7, #16]
 80032b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032ba:	4b13      	ldr	r3, [pc, #76]	; (8003308 <HAL_SPI_MspInit+0x160>)
 80032bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032c0:	4a11      	ldr	r2, [pc, #68]	; (8003308 <HAL_SPI_MspInit+0x160>)
 80032c2:	f043 0304 	orr.w	r3, r3, #4
 80032c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032ca:	4b0f      	ldr	r3, [pc, #60]	; (8003308 <HAL_SPI_MspInit+0x160>)
 80032cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80032d8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80032dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032de:	2302      	movs	r3, #2
 80032e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e2:	2300      	movs	r3, #0
 80032e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e6:	2300      	movs	r3, #0
 80032e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80032ea:	2306      	movs	r3, #6
 80032ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032f2:	4619      	mov	r1, r3
 80032f4:	4809      	ldr	r0, [pc, #36]	; (800331c <HAL_SPI_MspInit+0x174>)
 80032f6:	f004 fe3d 	bl	8007f74 <HAL_GPIO_Init>
}
 80032fa:	bf00      	nop
 80032fc:	3738      	adds	r7, #56	; 0x38
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	40013000 	.word	0x40013000
 8003308:	58024400 	.word	0x58024400
 800330c:	58020000 	.word	0x58020000
 8003310:	40003800 	.word	0x40003800
 8003314:	58020400 	.word	0x58020400
 8003318:	40003c00 	.word	0x40003c00
 800331c:	58020800 	.word	0x58020800

08003320 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b08c      	sub	sp, #48	; 0x30
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003328:	f107 031c 	add.w	r3, r7, #28
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	605a      	str	r2, [r3, #4]
 8003332:	609a      	str	r2, [r3, #8]
 8003334:	60da      	str	r2, [r3, #12]
 8003336:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003340:	d15d      	bne.n	80033fe <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003342:	4b8e      	ldr	r3, [pc, #568]	; (800357c <HAL_TIM_PWM_MspInit+0x25c>)
 8003344:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003348:	4a8c      	ldr	r2, [pc, #560]	; (800357c <HAL_TIM_PWM_MspInit+0x25c>)
 800334a:	f043 0301 	orr.w	r3, r3, #1
 800334e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003352:	4b8a      	ldr	r3, [pc, #552]	; (800357c <HAL_TIM_PWM_MspInit+0x25c>)
 8003354:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	61bb      	str	r3, [r7, #24]
 800335e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003360:	4b86      	ldr	r3, [pc, #536]	; (800357c <HAL_TIM_PWM_MspInit+0x25c>)
 8003362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003366:	4a85      	ldr	r2, [pc, #532]	; (800357c <HAL_TIM_PWM_MspInit+0x25c>)
 8003368:	f043 0301 	orr.w	r3, r3, #1
 800336c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003370:	4b82      	ldr	r3, [pc, #520]	; (800357c <HAL_TIM_PWM_MspInit+0x25c>)
 8003372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	617b      	str	r3, [r7, #20]
 800337c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800337e:	2301      	movs	r3, #1
 8003380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003382:	2302      	movs	r3, #2
 8003384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003386:	2300      	movs	r3, #0
 8003388:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338a:	2300      	movs	r3, #0
 800338c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800338e:	2301      	movs	r3, #1
 8003390:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003392:	f107 031c 	add.w	r3, r7, #28
 8003396:	4619      	mov	r1, r3
 8003398:	4879      	ldr	r0, [pc, #484]	; (8003580 <HAL_TIM_PWM_MspInit+0x260>)
 800339a:	f004 fdeb 	bl	8007f74 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 800339e:	4b79      	ldr	r3, [pc, #484]	; (8003584 <HAL_TIM_PWM_MspInit+0x264>)
 80033a0:	4a79      	ldr	r2, [pc, #484]	; (8003588 <HAL_TIM_PWM_MspInit+0x268>)
 80033a2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 80033a4:	4b77      	ldr	r3, [pc, #476]	; (8003584 <HAL_TIM_PWM_MspInit+0x264>)
 80033a6:	2214      	movs	r2, #20
 80033a8:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033aa:	4b76      	ldr	r3, [pc, #472]	; (8003584 <HAL_TIM_PWM_MspInit+0x264>)
 80033ac:	2240      	movs	r2, #64	; 0x40
 80033ae:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80033b0:	4b74      	ldr	r3, [pc, #464]	; (8003584 <HAL_TIM_PWM_MspInit+0x264>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80033b6:	4b73      	ldr	r3, [pc, #460]	; (8003584 <HAL_TIM_PWM_MspInit+0x264>)
 80033b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033bc:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80033be:	4b71      	ldr	r3, [pc, #452]	; (8003584 <HAL_TIM_PWM_MspInit+0x264>)
 80033c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033c4:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80033c6:	4b6f      	ldr	r3, [pc, #444]	; (8003584 <HAL_TIM_PWM_MspInit+0x264>)
 80033c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033cc:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 80033ce:	4b6d      	ldr	r3, [pc, #436]	; (8003584 <HAL_TIM_PWM_MspInit+0x264>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80033d4:	4b6b      	ldr	r3, [pc, #428]	; (8003584 <HAL_TIM_PWM_MspInit+0x264>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033da:	4b6a      	ldr	r3, [pc, #424]	; (8003584 <HAL_TIM_PWM_MspInit+0x264>)
 80033dc:	2200      	movs	r2, #0
 80033de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 80033e0:	4868      	ldr	r0, [pc, #416]	; (8003584 <HAL_TIM_PWM_MspInit+0x264>)
 80033e2:	f002 f98f 	bl	8005704 <HAL_DMA_Init>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 80033ec:	f7ff fb96 	bl	8002b1c <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a64      	ldr	r2, [pc, #400]	; (8003584 <HAL_TIM_PWM_MspInit+0x264>)
 80033f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80033f6:	4a63      	ldr	r2, [pc, #396]	; (8003584 <HAL_TIM_PWM_MspInit+0x264>)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80033fc:	e119      	b.n	8003632 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a62      	ldr	r2, [pc, #392]	; (800358c <HAL_TIM_PWM_MspInit+0x26c>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d16d      	bne.n	80034e4 <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003408:	4b5c      	ldr	r3, [pc, #368]	; (800357c <HAL_TIM_PWM_MspInit+0x25c>)
 800340a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800340e:	4a5b      	ldr	r2, [pc, #364]	; (800357c <HAL_TIM_PWM_MspInit+0x25c>)
 8003410:	f043 0302 	orr.w	r3, r3, #2
 8003414:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003418:	4b58      	ldr	r3, [pc, #352]	; (800357c <HAL_TIM_PWM_MspInit+0x25c>)
 800341a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	613b      	str	r3, [r7, #16]
 8003424:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 8003426:	4b5a      	ldr	r3, [pc, #360]	; (8003590 <HAL_TIM_PWM_MspInit+0x270>)
 8003428:	4a5a      	ldr	r2, [pc, #360]	; (8003594 <HAL_TIM_PWM_MspInit+0x274>)
 800342a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 800342c:	4b58      	ldr	r3, [pc, #352]	; (8003590 <HAL_TIM_PWM_MspInit+0x270>)
 800342e:	2218      	movs	r2, #24
 8003430:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003432:	4b57      	ldr	r3, [pc, #348]	; (8003590 <HAL_TIM_PWM_MspInit+0x270>)
 8003434:	2240      	movs	r2, #64	; 0x40
 8003436:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003438:	4b55      	ldr	r3, [pc, #340]	; (8003590 <HAL_TIM_PWM_MspInit+0x270>)
 800343a:	2200      	movs	r2, #0
 800343c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800343e:	4b54      	ldr	r3, [pc, #336]	; (8003590 <HAL_TIM_PWM_MspInit+0x270>)
 8003440:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003444:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003446:	4b52      	ldr	r3, [pc, #328]	; (8003590 <HAL_TIM_PWM_MspInit+0x270>)
 8003448:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800344c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800344e:	4b50      	ldr	r3, [pc, #320]	; (8003590 <HAL_TIM_PWM_MspInit+0x270>)
 8003450:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003454:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8003456:	4b4e      	ldr	r3, [pc, #312]	; (8003590 <HAL_TIM_PWM_MspInit+0x270>)
 8003458:	2200      	movs	r2, #0
 800345a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800345c:	4b4c      	ldr	r3, [pc, #304]	; (8003590 <HAL_TIM_PWM_MspInit+0x270>)
 800345e:	2200      	movs	r2, #0
 8003460:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003462:	4b4b      	ldr	r3, [pc, #300]	; (8003590 <HAL_TIM_PWM_MspInit+0x270>)
 8003464:	2200      	movs	r2, #0
 8003466:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8003468:	4849      	ldr	r0, [pc, #292]	; (8003590 <HAL_TIM_PWM_MspInit+0x270>)
 800346a:	f002 f94b 	bl	8005704 <HAL_DMA_Init>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 8003474:	f7ff fb52 	bl	8002b1c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a45      	ldr	r2, [pc, #276]	; (8003590 <HAL_TIM_PWM_MspInit+0x270>)
 800347c:	629a      	str	r2, [r3, #40]	; 0x28
 800347e:	4a44      	ldr	r2, [pc, #272]	; (8003590 <HAL_TIM_PWM_MspInit+0x270>)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 8003484:	4b44      	ldr	r3, [pc, #272]	; (8003598 <HAL_TIM_PWM_MspInit+0x278>)
 8003486:	4a45      	ldr	r2, [pc, #276]	; (800359c <HAL_TIM_PWM_MspInit+0x27c>)
 8003488:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 800348a:	4b43      	ldr	r3, [pc, #268]	; (8003598 <HAL_TIM_PWM_MspInit+0x278>)
 800348c:	2217      	movs	r2, #23
 800348e:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003490:	4b41      	ldr	r3, [pc, #260]	; (8003598 <HAL_TIM_PWM_MspInit+0x278>)
 8003492:	2240      	movs	r2, #64	; 0x40
 8003494:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003496:	4b40      	ldr	r3, [pc, #256]	; (8003598 <HAL_TIM_PWM_MspInit+0x278>)
 8003498:	2200      	movs	r2, #0
 800349a:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800349c:	4b3e      	ldr	r3, [pc, #248]	; (8003598 <HAL_TIM_PWM_MspInit+0x278>)
 800349e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034a2:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80034a4:	4b3c      	ldr	r3, [pc, #240]	; (8003598 <HAL_TIM_PWM_MspInit+0x278>)
 80034a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034aa:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80034ac:	4b3a      	ldr	r3, [pc, #232]	; (8003598 <HAL_TIM_PWM_MspInit+0x278>)
 80034ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034b2:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 80034b4:	4b38      	ldr	r3, [pc, #224]	; (8003598 <HAL_TIM_PWM_MspInit+0x278>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80034ba:	4b37      	ldr	r3, [pc, #220]	; (8003598 <HAL_TIM_PWM_MspInit+0x278>)
 80034bc:	2200      	movs	r2, #0
 80034be:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034c0:	4b35      	ldr	r3, [pc, #212]	; (8003598 <HAL_TIM_PWM_MspInit+0x278>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 80034c6:	4834      	ldr	r0, [pc, #208]	; (8003598 <HAL_TIM_PWM_MspInit+0x278>)
 80034c8:	f002 f91c 	bl	8005704 <HAL_DMA_Init>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 80034d2:	f7ff fb23 	bl	8002b1c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a2f      	ldr	r2, [pc, #188]	; (8003598 <HAL_TIM_PWM_MspInit+0x278>)
 80034da:	625a      	str	r2, [r3, #36]	; 0x24
 80034dc:	4a2e      	ldr	r2, [pc, #184]	; (8003598 <HAL_TIM_PWM_MspInit+0x278>)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80034e2:	e0a6      	b.n	8003632 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a2d      	ldr	r2, [pc, #180]	; (80035a0 <HAL_TIM_PWM_MspInit+0x280>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d15e      	bne.n	80035ac <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80034ee:	4b23      	ldr	r3, [pc, #140]	; (800357c <HAL_TIM_PWM_MspInit+0x25c>)
 80034f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034f4:	4a21      	ldr	r2, [pc, #132]	; (800357c <HAL_TIM_PWM_MspInit+0x25c>)
 80034f6:	f043 0304 	orr.w	r3, r3, #4
 80034fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80034fe:	4b1f      	ldr	r3, [pc, #124]	; (800357c <HAL_TIM_PWM_MspInit+0x25c>)
 8003500:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 800350c:	4b25      	ldr	r3, [pc, #148]	; (80035a4 <HAL_TIM_PWM_MspInit+0x284>)
 800350e:	4a26      	ldr	r2, [pc, #152]	; (80035a8 <HAL_TIM_PWM_MspInit+0x288>)
 8003510:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 8003512:	4b24      	ldr	r3, [pc, #144]	; (80035a4 <HAL_TIM_PWM_MspInit+0x284>)
 8003514:	221f      	movs	r2, #31
 8003516:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003518:	4b22      	ldr	r3, [pc, #136]	; (80035a4 <HAL_TIM_PWM_MspInit+0x284>)
 800351a:	2240      	movs	r2, #64	; 0x40
 800351c:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800351e:	4b21      	ldr	r3, [pc, #132]	; (80035a4 <HAL_TIM_PWM_MspInit+0x284>)
 8003520:	2200      	movs	r2, #0
 8003522:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003524:	4b1f      	ldr	r3, [pc, #124]	; (80035a4 <HAL_TIM_PWM_MspInit+0x284>)
 8003526:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800352a:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800352c:	4b1d      	ldr	r3, [pc, #116]	; (80035a4 <HAL_TIM_PWM_MspInit+0x284>)
 800352e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003532:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003534:	4b1b      	ldr	r3, [pc, #108]	; (80035a4 <HAL_TIM_PWM_MspInit+0x284>)
 8003536:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800353a:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 800353c:	4b19      	ldr	r3, [pc, #100]	; (80035a4 <HAL_TIM_PWM_MspInit+0x284>)
 800353e:	2200      	movs	r2, #0
 8003540:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003542:	4b18      	ldr	r3, [pc, #96]	; (80035a4 <HAL_TIM_PWM_MspInit+0x284>)
 8003544:	2200      	movs	r2, #0
 8003546:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003548:	4b16      	ldr	r3, [pc, #88]	; (80035a4 <HAL_TIM_PWM_MspInit+0x284>)
 800354a:	2200      	movs	r2, #0
 800354c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 800354e:	4815      	ldr	r0, [pc, #84]	; (80035a4 <HAL_TIM_PWM_MspInit+0x284>)
 8003550:	f002 f8d8 	bl	8005704 <HAL_DMA_Init>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 800355a:	f7ff fadf 	bl	8002b1c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a10      	ldr	r2, [pc, #64]	; (80035a4 <HAL_TIM_PWM_MspInit+0x284>)
 8003562:	62da      	str	r2, [r3, #44]	; 0x2c
 8003564:	4a0f      	ldr	r2, [pc, #60]	; (80035a4 <HAL_TIM_PWM_MspInit+0x284>)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800356a:	2200      	movs	r2, #0
 800356c:	2100      	movs	r1, #0
 800356e:	201e      	movs	r0, #30
 8003570:	f002 f893 	bl	800569a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003574:	201e      	movs	r0, #30
 8003576:	f002 f8aa 	bl	80056ce <HAL_NVIC_EnableIRQ>
}
 800357a:	e05a      	b.n	8003632 <HAL_TIM_PWM_MspInit+0x312>
 800357c:	58024400 	.word	0x58024400
 8003580:	58020000 	.word	0x58020000
 8003584:	24001354 	.word	0x24001354
 8003588:	40020028 	.word	0x40020028
 800358c:	40000400 	.word	0x40000400
 8003590:	240013cc 	.word	0x240013cc
 8003594:	40020058 	.word	0x40020058
 8003598:	24001444 	.word	0x24001444
 800359c:	40020070 	.word	0x40020070
 80035a0:	40000800 	.word	0x40000800
 80035a4:	240014bc 	.word	0x240014bc
 80035a8:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a22      	ldr	r2, [pc, #136]	; (800363c <HAL_TIM_PWM_MspInit+0x31c>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d13d      	bne.n	8003632 <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80035b6:	4b22      	ldr	r3, [pc, #136]	; (8003640 <HAL_TIM_PWM_MspInit+0x320>)
 80035b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035bc:	4a20      	ldr	r2, [pc, #128]	; (8003640 <HAL_TIM_PWM_MspInit+0x320>)
 80035be:	f043 0308 	orr.w	r3, r3, #8
 80035c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80035c6:	4b1e      	ldr	r3, [pc, #120]	; (8003640 <HAL_TIM_PWM_MspInit+0x320>)
 80035c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035cc:	f003 0308 	and.w	r3, r3, #8
 80035d0:	60bb      	str	r3, [r7, #8]
 80035d2:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 80035d4:	4b1b      	ldr	r3, [pc, #108]	; (8003644 <HAL_TIM_PWM_MspInit+0x324>)
 80035d6:	4a1c      	ldr	r2, [pc, #112]	; (8003648 <HAL_TIM_PWM_MspInit+0x328>)
 80035d8:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 80035da:	4b1a      	ldr	r3, [pc, #104]	; (8003644 <HAL_TIM_PWM_MspInit+0x324>)
 80035dc:	223a      	movs	r2, #58	; 0x3a
 80035de:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035e0:	4b18      	ldr	r3, [pc, #96]	; (8003644 <HAL_TIM_PWM_MspInit+0x324>)
 80035e2:	2240      	movs	r2, #64	; 0x40
 80035e4:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80035e6:	4b17      	ldr	r3, [pc, #92]	; (8003644 <HAL_TIM_PWM_MspInit+0x324>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80035ec:	4b15      	ldr	r3, [pc, #84]	; (8003644 <HAL_TIM_PWM_MspInit+0x324>)
 80035ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035f2:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80035f4:	4b13      	ldr	r3, [pc, #76]	; (8003644 <HAL_TIM_PWM_MspInit+0x324>)
 80035f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035fa:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80035fc:	4b11      	ldr	r3, [pc, #68]	; (8003644 <HAL_TIM_PWM_MspInit+0x324>)
 80035fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003602:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 8003604:	4b0f      	ldr	r3, [pc, #60]	; (8003644 <HAL_TIM_PWM_MspInit+0x324>)
 8003606:	2200      	movs	r2, #0
 8003608:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 800360a:	4b0e      	ldr	r3, [pc, #56]	; (8003644 <HAL_TIM_PWM_MspInit+0x324>)
 800360c:	2200      	movs	r2, #0
 800360e:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003610:	4b0c      	ldr	r3, [pc, #48]	; (8003644 <HAL_TIM_PWM_MspInit+0x324>)
 8003612:	2200      	movs	r2, #0
 8003614:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 8003616:	480b      	ldr	r0, [pc, #44]	; (8003644 <HAL_TIM_PWM_MspInit+0x324>)
 8003618:	f002 f874 	bl	8005704 <HAL_DMA_Init>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 8003622:	f7ff fa7b 	bl	8002b1c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a06      	ldr	r2, [pc, #24]	; (8003644 <HAL_TIM_PWM_MspInit+0x324>)
 800362a:	631a      	str	r2, [r3, #48]	; 0x30
 800362c:	4a05      	ldr	r2, [pc, #20]	; (8003644 <HAL_TIM_PWM_MspInit+0x324>)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003632:	bf00      	nop
 8003634:	3730      	adds	r7, #48	; 0x30
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	40000c00 	.word	0x40000c00
 8003640:	58024400 	.word	0x58024400
 8003644:	24001534 	.word	0x24001534
 8003648:	40020040 	.word	0x40020040

0800364c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a0b      	ldr	r2, [pc, #44]	; (8003688 <HAL_TIM_Base_MspInit+0x3c>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d10e      	bne.n	800367c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 800365e:	4b0b      	ldr	r3, [pc, #44]	; (800368c <HAL_TIM_Base_MspInit+0x40>)
 8003660:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003664:	4a09      	ldr	r2, [pc, #36]	; (800368c <HAL_TIM_Base_MspInit+0x40>)
 8003666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800366a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800366e:	4b07      	ldr	r3, [pc, #28]	; (800368c <HAL_TIM_Base_MspInit+0x40>)
 8003670:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003678:	60fb      	str	r3, [r7, #12]
 800367a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800367c:	bf00      	nop
 800367e:	3714      	adds	r7, #20
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr
 8003688:	40001c00 	.word	0x40001c00
 800368c:	58024400 	.word	0x58024400

08003690 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b08c      	sub	sp, #48	; 0x30
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003698:	f107 031c 	add.w	r3, r7, #28
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]
 80036a0:	605a      	str	r2, [r3, #4]
 80036a2:	609a      	str	r2, [r3, #8]
 80036a4:	60da      	str	r2, [r3, #12]
 80036a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b0:	d120      	bne.n	80036f4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036b2:	4b52      	ldr	r3, [pc, #328]	; (80037fc <HAL_TIM_MspPostInit+0x16c>)
 80036b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036b8:	4a50      	ldr	r2, [pc, #320]	; (80037fc <HAL_TIM_MspPostInit+0x16c>)
 80036ba:	f043 0302 	orr.w	r3, r3, #2
 80036be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036c2:	4b4e      	ldr	r3, [pc, #312]	; (80037fc <HAL_TIM_MspPostInit+0x16c>)
 80036c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	61bb      	str	r3, [r7, #24]
 80036ce:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80036d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d6:	2302      	movs	r3, #2
 80036d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80036da:	2302      	movs	r3, #2
 80036dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036de:	2300      	movs	r3, #0
 80036e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80036e2:	2301      	movs	r3, #1
 80036e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036e6:	f107 031c 	add.w	r3, r7, #28
 80036ea:	4619      	mov	r1, r3
 80036ec:	4844      	ldr	r0, [pc, #272]	; (8003800 <HAL_TIM_MspPostInit+0x170>)
 80036ee:	f004 fc41 	bl	8007f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80036f2:	e07f      	b.n	80037f4 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a42      	ldr	r2, [pc, #264]	; (8003804 <HAL_TIM_MspPostInit+0x174>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d11f      	bne.n	800373e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036fe:	4b3f      	ldr	r3, [pc, #252]	; (80037fc <HAL_TIM_MspPostInit+0x16c>)
 8003700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003704:	4a3d      	ldr	r2, [pc, #244]	; (80037fc <HAL_TIM_MspPostInit+0x16c>)
 8003706:	f043 0302 	orr.w	r3, r3, #2
 800370a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800370e:	4b3b      	ldr	r3, [pc, #236]	; (80037fc <HAL_TIM_MspPostInit+0x16c>)
 8003710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	617b      	str	r3, [r7, #20]
 800371a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800371c:	2330      	movs	r3, #48	; 0x30
 800371e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003720:	2302      	movs	r3, #2
 8003722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003724:	2302      	movs	r3, #2
 8003726:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003728:	2300      	movs	r3, #0
 800372a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800372c:	2302      	movs	r3, #2
 800372e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003730:	f107 031c 	add.w	r3, r7, #28
 8003734:	4619      	mov	r1, r3
 8003736:	4832      	ldr	r0, [pc, #200]	; (8003800 <HAL_TIM_MspPostInit+0x170>)
 8003738:	f004 fc1c 	bl	8007f74 <HAL_GPIO_Init>
}
 800373c:	e05a      	b.n	80037f4 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a31      	ldr	r2, [pc, #196]	; (8003808 <HAL_TIM_MspPostInit+0x178>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d131      	bne.n	80037ac <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003748:	4b2c      	ldr	r3, [pc, #176]	; (80037fc <HAL_TIM_MspPostInit+0x16c>)
 800374a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800374e:	4a2b      	ldr	r2, [pc, #172]	; (80037fc <HAL_TIM_MspPostInit+0x16c>)
 8003750:	f043 0308 	orr.w	r3, r3, #8
 8003754:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003758:	4b28      	ldr	r3, [pc, #160]	; (80037fc <HAL_TIM_MspPostInit+0x16c>)
 800375a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	613b      	str	r3, [r7, #16]
 8003764:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8003766:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800376a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800376c:	2302      	movs	r3, #2
 800376e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003770:	2300      	movs	r3, #0
 8003772:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003774:	2300      	movs	r3, #0
 8003776:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003778:	2302      	movs	r3, #2
 800377a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800377c:	f107 031c 	add.w	r3, r7, #28
 8003780:	4619      	mov	r1, r3
 8003782:	4822      	ldr	r0, [pc, #136]	; (800380c <HAL_TIM_MspPostInit+0x17c>)
 8003784:	f004 fbf6 	bl	8007f74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003788:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800378c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800378e:	2302      	movs	r3, #2
 8003790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003792:	2302      	movs	r3, #2
 8003794:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003796:	2300      	movs	r3, #0
 8003798:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800379a:	2302      	movs	r3, #2
 800379c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800379e:	f107 031c 	add.w	r3, r7, #28
 80037a2:	4619      	mov	r1, r3
 80037a4:	4819      	ldr	r0, [pc, #100]	; (800380c <HAL_TIM_MspPostInit+0x17c>)
 80037a6:	f004 fbe5 	bl	8007f74 <HAL_GPIO_Init>
}
 80037aa:	e023      	b.n	80037f4 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a17      	ldr	r2, [pc, #92]	; (8003810 <HAL_TIM_MspPostInit+0x180>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d11e      	bne.n	80037f4 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037b6:	4b11      	ldr	r3, [pc, #68]	; (80037fc <HAL_TIM_MspPostInit+0x16c>)
 80037b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037bc:	4a0f      	ldr	r2, [pc, #60]	; (80037fc <HAL_TIM_MspPostInit+0x16c>)
 80037be:	f043 0301 	orr.w	r3, r3, #1
 80037c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037c6:	4b0d      	ldr	r3, [pc, #52]	; (80037fc <HAL_TIM_MspPostInit+0x16c>)
 80037c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	60fb      	str	r3, [r7, #12]
 80037d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80037d4:	2308      	movs	r3, #8
 80037d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d8:	2302      	movs	r3, #2
 80037da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80037dc:	2302      	movs	r3, #2
 80037de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e0:	2300      	movs	r3, #0
 80037e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80037e4:	2302      	movs	r3, #2
 80037e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037e8:	f107 031c 	add.w	r3, r7, #28
 80037ec:	4619      	mov	r1, r3
 80037ee:	4809      	ldr	r0, [pc, #36]	; (8003814 <HAL_TIM_MspPostInit+0x184>)
 80037f0:	f004 fbc0 	bl	8007f74 <HAL_GPIO_Init>
}
 80037f4:	bf00      	nop
 80037f6:	3730      	adds	r7, #48	; 0x30
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	58024400 	.word	0x58024400
 8003800:	58020400 	.word	0x58020400
 8003804:	40000400 	.word	0x40000400
 8003808:	40000800 	.word	0x40000800
 800380c:	58020c00 	.word	0x58020c00
 8003810:	40000c00 	.word	0x40000c00
 8003814:	58020000 	.word	0x58020000

08003818 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b0ba      	sub	sp, #232	; 0xe8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003820:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	605a      	str	r2, [r3, #4]
 800382a:	609a      	str	r2, [r3, #8]
 800382c:	60da      	str	r2, [r3, #12]
 800382e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003830:	f107 0318 	add.w	r3, r7, #24
 8003834:	22b8      	movs	r2, #184	; 0xb8
 8003836:	2100      	movs	r1, #0
 8003838:	4618      	mov	r0, r3
 800383a:	f013 ffc9 	bl	80177d0 <memset>
  if(huart->Instance==UART4)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a4d      	ldr	r2, [pc, #308]	; (8003978 <HAL_UART_MspInit+0x160>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d147      	bne.n	80038d8 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003848:	f04f 0202 	mov.w	r2, #2
 800384c:	f04f 0300 	mov.w	r3, #0
 8003850:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003854:	2300      	movs	r3, #0
 8003856:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800385a:	f107 0318 	add.w	r3, r7, #24
 800385e:	4618      	mov	r0, r3
 8003860:	f007 f976 	bl	800ab50 <HAL_RCCEx_PeriphCLKConfig>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800386a:	f7ff f957 	bl	8002b1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800386e:	4b43      	ldr	r3, [pc, #268]	; (800397c <HAL_UART_MspInit+0x164>)
 8003870:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003874:	4a41      	ldr	r2, [pc, #260]	; (800397c <HAL_UART_MspInit+0x164>)
 8003876:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800387a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800387e:	4b3f      	ldr	r3, [pc, #252]	; (800397c <HAL_UART_MspInit+0x164>)
 8003880:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003884:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003888:	617b      	str	r3, [r7, #20]
 800388a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800388c:	4b3b      	ldr	r3, [pc, #236]	; (800397c <HAL_UART_MspInit+0x164>)
 800388e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003892:	4a3a      	ldr	r2, [pc, #232]	; (800397c <HAL_UART_MspInit+0x164>)
 8003894:	f043 0302 	orr.w	r3, r3, #2
 8003898:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800389c:	4b37      	ldr	r3, [pc, #220]	; (800397c <HAL_UART_MspInit+0x164>)
 800389e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	613b      	str	r3, [r7, #16]
 80038a8:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80038aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80038ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b2:	2302      	movs	r3, #2
 80038b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b8:	2300      	movs	r3, #0
 80038ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038be:	2300      	movs	r3, #0
 80038c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80038c4:	2308      	movs	r3, #8
 80038c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038ca:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80038ce:	4619      	mov	r1, r3
 80038d0:	482b      	ldr	r0, [pc, #172]	; (8003980 <HAL_UART_MspInit+0x168>)
 80038d2:	f004 fb4f 	bl	8007f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80038d6:	e04a      	b.n	800396e <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a29      	ldr	r2, [pc, #164]	; (8003984 <HAL_UART_MspInit+0x16c>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d145      	bne.n	800396e <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80038e2:	f04f 0201 	mov.w	r2, #1
 80038e6:	f04f 0300 	mov.w	r3, #0
 80038ea:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80038ee:	2300      	movs	r3, #0
 80038f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038f4:	f107 0318 	add.w	r3, r7, #24
 80038f8:	4618      	mov	r0, r3
 80038fa:	f007 f929 	bl	800ab50 <HAL_RCCEx_PeriphCLKConfig>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8003904:	f7ff f90a 	bl	8002b1c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003908:	4b1c      	ldr	r3, [pc, #112]	; (800397c <HAL_UART_MspInit+0x164>)
 800390a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800390e:	4a1b      	ldr	r2, [pc, #108]	; (800397c <HAL_UART_MspInit+0x164>)
 8003910:	f043 0320 	orr.w	r3, r3, #32
 8003914:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003918:	4b18      	ldr	r3, [pc, #96]	; (800397c <HAL_UART_MspInit+0x164>)
 800391a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800391e:	f003 0320 	and.w	r3, r3, #32
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003926:	4b15      	ldr	r3, [pc, #84]	; (800397c <HAL_UART_MspInit+0x164>)
 8003928:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800392c:	4a13      	ldr	r2, [pc, #76]	; (800397c <HAL_UART_MspInit+0x164>)
 800392e:	f043 0304 	orr.w	r3, r3, #4
 8003932:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003936:	4b11      	ldr	r3, [pc, #68]	; (800397c <HAL_UART_MspInit+0x164>)
 8003938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	60bb      	str	r3, [r7, #8]
 8003942:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003944:	23c0      	movs	r3, #192	; 0xc0
 8003946:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800394a:	2302      	movs	r3, #2
 800394c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003950:	2300      	movs	r3, #0
 8003952:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003956:	2300      	movs	r3, #0
 8003958:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800395c:	2307      	movs	r3, #7
 800395e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003962:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003966:	4619      	mov	r1, r3
 8003968:	4807      	ldr	r0, [pc, #28]	; (8003988 <HAL_UART_MspInit+0x170>)
 800396a:	f004 fb03 	bl	8007f74 <HAL_GPIO_Init>
}
 800396e:	bf00      	nop
 8003970:	37e8      	adds	r7, #232	; 0xe8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	40004c00 	.word	0x40004c00
 800397c:	58024400 	.word	0x58024400
 8003980:	58020400 	.word	0x58020400
 8003984:	40011400 	.word	0x40011400
 8003988:	58020800 	.word	0x58020800

0800398c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003990:	e7fe      	b.n	8003990 <NMI_Handler+0x4>

08003992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003992:	b480      	push	{r7}
 8003994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003996:	e7fe      	b.n	8003996 <HardFault_Handler+0x4>

08003998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800399c:	e7fe      	b.n	800399c <MemManage_Handler+0x4>

0800399e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800399e:	b480      	push	{r7}
 80039a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039a2:	e7fe      	b.n	80039a2 <BusFault_Handler+0x4>

080039a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039a8:	e7fe      	b.n	80039a8 <UsageFault_Handler+0x4>

080039aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039aa:	b480      	push	{r7}
 80039ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039ae:	bf00      	nop
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039bc:	bf00      	nop
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr

080039c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039c6:	b480      	push	{r7}
 80039c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039ca:	bf00      	nop
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039d8:	f000 f9ba 	bl	8003d50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039dc:	bf00      	nop
 80039de:	bd80      	pop	{r7, pc}

080039e0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 80039e4:	4802      	ldr	r0, [pc, #8]	; (80039f0 <DMA1_Stream0_IRQHandler+0x10>)
 80039e6:	f002 fc4f 	bl	8006288 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80039ea:	bf00      	nop
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	240014bc 	.word	0x240014bc

080039f4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 80039f8:	4802      	ldr	r0, [pc, #8]	; (8003a04 <DMA1_Stream1_IRQHandler+0x10>)
 80039fa:	f002 fc45 	bl	8006288 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80039fe:	bf00      	nop
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	24001354 	.word	0x24001354

08003a08 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8003a0c:	4802      	ldr	r0, [pc, #8]	; (8003a18 <DMA1_Stream2_IRQHandler+0x10>)
 8003a0e:	f002 fc3b 	bl	8006288 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003a12:	bf00      	nop
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	24001534 	.word	0x24001534

08003a1c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003a20:	4802      	ldr	r0, [pc, #8]	; (8003a2c <DMA1_Stream3_IRQHandler+0x10>)
 8003a22:	f002 fc31 	bl	8006288 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003a26:	bf00      	nop
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	240013cc 	.word	0x240013cc

08003a30 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8003a34:	4802      	ldr	r0, [pc, #8]	; (8003a40 <DMA1_Stream4_IRQHandler+0x10>)
 8003a36:	f002 fc27 	bl	8006288 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003a3a:	bf00      	nop
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	24001444 	.word	0x24001444

08003a44 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003a48:	4802      	ldr	r0, [pc, #8]	; (8003a54 <DMA1_Stream5_IRQHandler+0x10>)
 8003a4a:	f002 fc1d 	bl	8006288 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003a4e:	bf00      	nop
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	24000de0 	.word	0x24000de0

08003a58 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003a5c:	4802      	ldr	r0, [pc, #8]	; (8003a68 <TIM4_IRQHandler+0x10>)
 8003a5e:	f00c fc07 	bl	8010270 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003a62:	bf00      	nop
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	24001270 	.word	0x24001270

08003a6c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003a70:	4802      	ldr	r0, [pc, #8]	; (8003a7c <I2C2_EV_IRQHandler+0x10>)
 8003a72:	f004 fce9 	bl	8008448 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003a76:	bf00      	nop
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	24000f70 	.word	0x24000f70

08003a80 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003a84:	4802      	ldr	r0, [pc, #8]	; (8003a90 <DMA2_Stream7_IRQHandler+0x10>)
 8003a86:	f002 fbff 	bl	8006288 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003a8a:	bf00      	nop
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	24000e58 	.word	0x24000e58

08003a94 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003a98:	4802      	ldr	r0, [pc, #8]	; (8003aa4 <OTG_HS_IRQHandler+0x10>)
 8003a9a:	f004 fedf 	bl	800885c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8003a9e:	bf00      	nop
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	24002bf0 	.word	0x24002bf0

08003aa8 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8003aac:	4802      	ldr	r0, [pc, #8]	; (8003ab8 <SDMMC2_IRQHandler+0x10>)
 8003aae:	f00a f853 	bl	800db58 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 8003ab2:	bf00      	nop
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	24000fc4 	.word	0x24000fc4

08003abc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ac4:	4a14      	ldr	r2, [pc, #80]	; (8003b18 <_sbrk+0x5c>)
 8003ac6:	4b15      	ldr	r3, [pc, #84]	; (8003b1c <_sbrk+0x60>)
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ad0:	4b13      	ldr	r3, [pc, #76]	; (8003b20 <_sbrk+0x64>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d102      	bne.n	8003ade <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ad8:	4b11      	ldr	r3, [pc, #68]	; (8003b20 <_sbrk+0x64>)
 8003ada:	4a12      	ldr	r2, [pc, #72]	; (8003b24 <_sbrk+0x68>)
 8003adc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ade:	4b10      	ldr	r3, [pc, #64]	; (8003b20 <_sbrk+0x64>)
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d207      	bcs.n	8003afc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003aec:	f013 fe78 	bl	80177e0 <__errno>
 8003af0:	4603      	mov	r3, r0
 8003af2:	220c      	movs	r2, #12
 8003af4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003af6:	f04f 33ff 	mov.w	r3, #4294967295
 8003afa:	e009      	b.n	8003b10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003afc:	4b08      	ldr	r3, [pc, #32]	; (8003b20 <_sbrk+0x64>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b02:	4b07      	ldr	r3, [pc, #28]	; (8003b20 <_sbrk+0x64>)
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4413      	add	r3, r2
 8003b0a:	4a05      	ldr	r2, [pc, #20]	; (8003b20 <_sbrk+0x64>)
 8003b0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3718      	adds	r7, #24
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	24050000 	.word	0x24050000
 8003b1c:	00000800 	.word	0x00000800
 8003b20:	240016ec 	.word	0x240016ec
 8003b24:	24003468 	.word	0x24003468

08003b28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003b2c:	4b32      	ldr	r3, [pc, #200]	; (8003bf8 <SystemInit+0xd0>)
 8003b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b32:	4a31      	ldr	r2, [pc, #196]	; (8003bf8 <SystemInit+0xd0>)
 8003b34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003b3c:	4b2f      	ldr	r3, [pc, #188]	; (8003bfc <SystemInit+0xd4>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 030f 	and.w	r3, r3, #15
 8003b44:	2b06      	cmp	r3, #6
 8003b46:	d807      	bhi.n	8003b58 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003b48:	4b2c      	ldr	r3, [pc, #176]	; (8003bfc <SystemInit+0xd4>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f023 030f 	bic.w	r3, r3, #15
 8003b50:	4a2a      	ldr	r2, [pc, #168]	; (8003bfc <SystemInit+0xd4>)
 8003b52:	f043 0307 	orr.w	r3, r3, #7
 8003b56:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003b58:	4b29      	ldr	r3, [pc, #164]	; (8003c00 <SystemInit+0xd8>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a28      	ldr	r2, [pc, #160]	; (8003c00 <SystemInit+0xd8>)
 8003b5e:	f043 0301 	orr.w	r3, r3, #1
 8003b62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003b64:	4b26      	ldr	r3, [pc, #152]	; (8003c00 <SystemInit+0xd8>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003b6a:	4b25      	ldr	r3, [pc, #148]	; (8003c00 <SystemInit+0xd8>)
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	4924      	ldr	r1, [pc, #144]	; (8003c00 <SystemInit+0xd8>)
 8003b70:	4b24      	ldr	r3, [pc, #144]	; (8003c04 <SystemInit+0xdc>)
 8003b72:	4013      	ands	r3, r2
 8003b74:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003b76:	4b21      	ldr	r3, [pc, #132]	; (8003bfc <SystemInit+0xd4>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0308 	and.w	r3, r3, #8
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d007      	beq.n	8003b92 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003b82:	4b1e      	ldr	r3, [pc, #120]	; (8003bfc <SystemInit+0xd4>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f023 030f 	bic.w	r3, r3, #15
 8003b8a:	4a1c      	ldr	r2, [pc, #112]	; (8003bfc <SystemInit+0xd4>)
 8003b8c:	f043 0307 	orr.w	r3, r3, #7
 8003b90:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003b92:	4b1b      	ldr	r3, [pc, #108]	; (8003c00 <SystemInit+0xd8>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003b98:	4b19      	ldr	r3, [pc, #100]	; (8003c00 <SystemInit+0xd8>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003b9e:	4b18      	ldr	r3, [pc, #96]	; (8003c00 <SystemInit+0xd8>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003ba4:	4b16      	ldr	r3, [pc, #88]	; (8003c00 <SystemInit+0xd8>)
 8003ba6:	4a18      	ldr	r2, [pc, #96]	; (8003c08 <SystemInit+0xe0>)
 8003ba8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003baa:	4b15      	ldr	r3, [pc, #84]	; (8003c00 <SystemInit+0xd8>)
 8003bac:	4a17      	ldr	r2, [pc, #92]	; (8003c0c <SystemInit+0xe4>)
 8003bae:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003bb0:	4b13      	ldr	r3, [pc, #76]	; (8003c00 <SystemInit+0xd8>)
 8003bb2:	4a17      	ldr	r2, [pc, #92]	; (8003c10 <SystemInit+0xe8>)
 8003bb4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003bb6:	4b12      	ldr	r3, [pc, #72]	; (8003c00 <SystemInit+0xd8>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003bbc:	4b10      	ldr	r3, [pc, #64]	; (8003c00 <SystemInit+0xd8>)
 8003bbe:	4a14      	ldr	r2, [pc, #80]	; (8003c10 <SystemInit+0xe8>)
 8003bc0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003bc2:	4b0f      	ldr	r3, [pc, #60]	; (8003c00 <SystemInit+0xd8>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003bc8:	4b0d      	ldr	r3, [pc, #52]	; (8003c00 <SystemInit+0xd8>)
 8003bca:	4a11      	ldr	r2, [pc, #68]	; (8003c10 <SystemInit+0xe8>)
 8003bcc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003bce:	4b0c      	ldr	r3, [pc, #48]	; (8003c00 <SystemInit+0xd8>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003bd4:	4b0a      	ldr	r3, [pc, #40]	; (8003c00 <SystemInit+0xd8>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a09      	ldr	r2, [pc, #36]	; (8003c00 <SystemInit+0xd8>)
 8003bda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bde:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003be0:	4b07      	ldr	r3, [pc, #28]	; (8003c00 <SystemInit+0xd8>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003be6:	4b0b      	ldr	r3, [pc, #44]	; (8003c14 <SystemInit+0xec>)
 8003be8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003bec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003bee:	bf00      	nop
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	e000ed00 	.word	0xe000ed00
 8003bfc:	52002000 	.word	0x52002000
 8003c00:	58024400 	.word	0x58024400
 8003c04:	eaf6ed7f 	.word	0xeaf6ed7f
 8003c08:	02020200 	.word	0x02020200
 8003c0c:	01ff0000 	.word	0x01ff0000
 8003c10:	01010280 	.word	0x01010280
 8003c14:	52004000 	.word	0x52004000

08003c18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003c18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c50 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003c1c:	f7ff ff84 	bl	8003b28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c20:	480c      	ldr	r0, [pc, #48]	; (8003c54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003c22:	490d      	ldr	r1, [pc, #52]	; (8003c58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003c24:	4a0d      	ldr	r2, [pc, #52]	; (8003c5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c28:	e002      	b.n	8003c30 <LoopCopyDataInit>

08003c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c2e:	3304      	adds	r3, #4

08003c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c34:	d3f9      	bcc.n	8003c2a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c36:	4a0a      	ldr	r2, [pc, #40]	; (8003c60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003c38:	4c0a      	ldr	r4, [pc, #40]	; (8003c64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c3c:	e001      	b.n	8003c42 <LoopFillZerobss>

08003c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c40:	3204      	adds	r2, #4

08003c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c44:	d3fb      	bcc.n	8003c3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003c46:	f013 fdd1 	bl	80177ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c4a:	f7fd fea5 	bl	8001998 <main>
  bx  lr
 8003c4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003c50:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003c54:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003c58:	24000154 	.word	0x24000154
  ldr r2, =_sidata
 8003c5c:	08018e40 	.word	0x08018e40
  ldr r2, =_sbss
 8003c60:	24000154 	.word	0x24000154
  ldr r4, =_ebss
 8003c64:	24003464 	.word	0x24003464

08003c68 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c68:	e7fe      	b.n	8003c68 <ADC3_IRQHandler>
	...

08003c6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c72:	2003      	movs	r0, #3
 8003c74:	f001 fd06 	bl	8005684 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003c78:	f006 fd94 	bl	800a7a4 <HAL_RCC_GetSysClockFreq>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	4b15      	ldr	r3, [pc, #84]	; (8003cd4 <HAL_Init+0x68>)
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	0a1b      	lsrs	r3, r3, #8
 8003c84:	f003 030f 	and.w	r3, r3, #15
 8003c88:	4913      	ldr	r1, [pc, #76]	; (8003cd8 <HAL_Init+0x6c>)
 8003c8a:	5ccb      	ldrb	r3, [r1, r3]
 8003c8c:	f003 031f 	and.w	r3, r3, #31
 8003c90:	fa22 f303 	lsr.w	r3, r2, r3
 8003c94:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c96:	4b0f      	ldr	r3, [pc, #60]	; (8003cd4 <HAL_Init+0x68>)
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	f003 030f 	and.w	r3, r3, #15
 8003c9e:	4a0e      	ldr	r2, [pc, #56]	; (8003cd8 <HAL_Init+0x6c>)
 8003ca0:	5cd3      	ldrb	r3, [r2, r3]
 8003ca2:	f003 031f 	and.w	r3, r3, #31
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8003cac:	4a0b      	ldr	r2, [pc, #44]	; (8003cdc <HAL_Init+0x70>)
 8003cae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003cb0:	4a0b      	ldr	r2, [pc, #44]	; (8003ce0 <HAL_Init+0x74>)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003cb6:	200f      	movs	r0, #15
 8003cb8:	f000 f814 	bl	8003ce4 <HAL_InitTick>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e002      	b.n	8003ccc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003cc6:	f7fe ff91 	bl	8002bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	58024400 	.word	0x58024400
 8003cd8:	08018c8c 	.word	0x08018c8c
 8003cdc:	24000004 	.word	0x24000004
 8003ce0:	24000000 	.word	0x24000000

08003ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003cec:	4b15      	ldr	r3, [pc, #84]	; (8003d44 <HAL_InitTick+0x60>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d101      	bne.n	8003cf8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e021      	b.n	8003d3c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003cf8:	4b13      	ldr	r3, [pc, #76]	; (8003d48 <HAL_InitTick+0x64>)
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	4b11      	ldr	r3, [pc, #68]	; (8003d44 <HAL_InitTick+0x60>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	4619      	mov	r1, r3
 8003d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d06:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f001 fceb 	bl	80056ea <HAL_SYSTICK_Config>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e00e      	b.n	8003d3c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b0f      	cmp	r3, #15
 8003d22:	d80a      	bhi.n	8003d3a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d24:	2200      	movs	r2, #0
 8003d26:	6879      	ldr	r1, [r7, #4]
 8003d28:	f04f 30ff 	mov.w	r0, #4294967295
 8003d2c:	f001 fcb5 	bl	800569a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d30:	4a06      	ldr	r2, [pc, #24]	; (8003d4c <HAL_InitTick+0x68>)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
 8003d38:	e000      	b.n	8003d3c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3708      	adds	r7, #8
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	2400000c 	.word	0x2400000c
 8003d48:	24000000 	.word	0x24000000
 8003d4c:	24000008 	.word	0x24000008

08003d50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003d54:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <HAL_IncTick+0x20>)
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	461a      	mov	r2, r3
 8003d5a:	4b06      	ldr	r3, [pc, #24]	; (8003d74 <HAL_IncTick+0x24>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4413      	add	r3, r2
 8003d60:	4a04      	ldr	r2, [pc, #16]	; (8003d74 <HAL_IncTick+0x24>)
 8003d62:	6013      	str	r3, [r2, #0]
}
 8003d64:	bf00      	nop
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	2400000c 	.word	0x2400000c
 8003d74:	240016f0 	.word	0x240016f0

08003d78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d7c:	4b03      	ldr	r3, [pc, #12]	; (8003d8c <HAL_GetTick+0x14>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	240016f0 	.word	0x240016f0

08003d90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d98:	f7ff ffee 	bl	8003d78 <HAL_GetTick>
 8003d9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da8:	d005      	beq.n	8003db6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003daa:	4b0a      	ldr	r3, [pc, #40]	; (8003dd4 <HAL_Delay+0x44>)
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	461a      	mov	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4413      	add	r3, r2
 8003db4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003db6:	bf00      	nop
 8003db8:	f7ff ffde 	bl	8003d78 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d8f7      	bhi.n	8003db8 <HAL_Delay+0x28>
  {
  }
}
 8003dc8:	bf00      	nop
 8003dca:	bf00      	nop
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	2400000c 	.word	0x2400000c

08003dd8 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003de2:	4b07      	ldr	r3, [pc, #28]	; (8003e00 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	43db      	mvns	r3, r3
 8003dea:	401a      	ands	r2, r3
 8003dec:	4904      	ldr	r1, [pc, #16]	; (8003e00 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	604b      	str	r3, [r1, #4]
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	58000400 	.word	0x58000400

08003e04 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	609a      	str	r2, [r3, #8]
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b083      	sub	sp, #12
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
 8003e32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	609a      	str	r2, [r3, #8]
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b087      	sub	sp, #28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
 8003e78:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	3360      	adds	r3, #96	; 0x60
 8003e7e:	461a      	mov	r2, r3
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	4a10      	ldr	r2, [pc, #64]	; (8003ecc <LL_ADC_SetOffset+0x60>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d10b      	bne.n	8003ea8 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003ea6:	e00b      	b.n	8003ec0 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	430b      	orrs	r3, r1
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	601a      	str	r2, [r3, #0]
}
 8003ec0:	bf00      	nop
 8003ec2:	371c      	adds	r7, #28
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr
 8003ecc:	58026000 	.word	0x58026000

08003ed0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	3360      	adds	r3, #96	; 0x60
 8003ede:	461a      	mov	r2, r3
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4413      	add	r3, r2
 8003ee6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	f003 031f 	and.w	r3, r3, #31
 8003f16:	6879      	ldr	r1, [r7, #4]
 8003f18:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	611a      	str	r2, [r3, #16]
}
 8003f22:	bf00      	nop
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
	...

08003f30 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b087      	sub	sp, #28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4a0c      	ldr	r2, [pc, #48]	; (8003f70 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d00e      	beq.n	8003f62 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	3360      	adds	r3, #96	; 0x60
 8003f48:	461a      	mov	r2, r3
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4413      	add	r3, r2
 8003f50:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	601a      	str	r2, [r3, #0]
  }
}
 8003f62:	bf00      	nop
 8003f64:	371c      	adds	r7, #28
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	58026000 	.word	0x58026000

08003f74 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b087      	sub	sp, #28
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4a0c      	ldr	r2, [pc, #48]	; (8003fb4 <LL_ADC_SetOffsetSaturation+0x40>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d10e      	bne.n	8003fa6 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	3360      	adds	r3, #96	; 0x60
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4413      	add	r3, r2
 8003f94:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003fa6:	bf00      	nop
 8003fa8:	371c      	adds	r7, #28
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	58026000 	.word	0x58026000

08003fb8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b087      	sub	sp, #28
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4a0c      	ldr	r2, [pc, #48]	; (8003ff8 <LL_ADC_SetOffsetSign+0x40>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d10e      	bne.n	8003fea <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	3360      	adds	r3, #96	; 0x60
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	4413      	add	r3, r2
 8003fd8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003fea:	bf00      	nop
 8003fec:	371c      	adds	r7, #28
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	58026000 	.word	0x58026000

08003ffc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b087      	sub	sp, #28
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	3360      	adds	r3, #96	; 0x60
 800400c:	461a      	mov	r2, r3
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4413      	add	r3, r2
 8004014:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	4a0c      	ldr	r2, [pc, #48]	; (800404c <LL_ADC_SetOffsetState+0x50>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d108      	bne.n	8004030 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	431a      	orrs	r2, r3
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800402e:	e007      	b.n	8004040 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	431a      	orrs	r2, r3
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	601a      	str	r2, [r3, #0]
}
 8004040:	bf00      	nop
 8004042:	371c      	adds	r7, #28
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr
 800404c:	58026000 	.word	0x58026000

08004050 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004050:	b480      	push	{r7}
 8004052:	b087      	sub	sp, #28
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	3330      	adds	r3, #48	; 0x30
 8004060:	461a      	mov	r2, r3
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	0a1b      	lsrs	r3, r3, #8
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	f003 030c 	and.w	r3, r3, #12
 800406c:	4413      	add	r3, r2
 800406e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	f003 031f 	and.w	r3, r3, #31
 800407a:	211f      	movs	r1, #31
 800407c:	fa01 f303 	lsl.w	r3, r1, r3
 8004080:	43db      	mvns	r3, r3
 8004082:	401a      	ands	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	0e9b      	lsrs	r3, r3, #26
 8004088:	f003 011f 	and.w	r1, r3, #31
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	f003 031f 	and.w	r3, r3, #31
 8004092:	fa01 f303 	lsl.w	r3, r1, r3
 8004096:	431a      	orrs	r2, r3
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800409c:	bf00      	nop
 800409e:	371c      	adds	r7, #28
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	3314      	adds	r3, #20
 80040b8:	461a      	mov	r2, r3
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	0e5b      	lsrs	r3, r3, #25
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	f003 0304 	and.w	r3, r3, #4
 80040c4:	4413      	add	r3, r2
 80040c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	0d1b      	lsrs	r3, r3, #20
 80040d0:	f003 031f 	and.w	r3, r3, #31
 80040d4:	2107      	movs	r1, #7
 80040d6:	fa01 f303 	lsl.w	r3, r1, r3
 80040da:	43db      	mvns	r3, r3
 80040dc:	401a      	ands	r2, r3
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	0d1b      	lsrs	r3, r3, #20
 80040e2:	f003 031f 	and.w	r3, r3, #31
 80040e6:	6879      	ldr	r1, [r7, #4]
 80040e8:	fa01 f303 	lsl.w	r3, r1, r3
 80040ec:	431a      	orrs	r2, r3
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80040f2:	bf00      	nop
 80040f4:	371c      	adds	r7, #28
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
	...

08004100 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	4a1a      	ldr	r2, [pc, #104]	; (8004178 <LL_ADC_SetChannelSingleDiff+0x78>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d115      	bne.n	8004140 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004120:	43db      	mvns	r3, r3
 8004122:	401a      	ands	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f003 0318 	and.w	r3, r3, #24
 800412a:	4914      	ldr	r1, [pc, #80]	; (800417c <LL_ADC_SetChannelSingleDiff+0x7c>)
 800412c:	40d9      	lsrs	r1, r3
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	400b      	ands	r3, r1
 8004132:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004136:	431a      	orrs	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800413e:	e014      	b.n	800416a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800414c:	43db      	mvns	r3, r3
 800414e:	401a      	ands	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f003 0318 	and.w	r3, r3, #24
 8004156:	4909      	ldr	r1, [pc, #36]	; (800417c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004158:	40d9      	lsrs	r1, r3
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	400b      	ands	r3, r1
 800415e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004162:	431a      	orrs	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 800416a:	bf00      	nop
 800416c:	3714      	adds	r7, #20
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	58026000 	.word	0x58026000
 800417c:	000fffff 	.word	0x000fffff

08004180 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	4b04      	ldr	r3, [pc, #16]	; (80041a0 <LL_ADC_DisableDeepPowerDown+0x20>)
 800418e:	4013      	ands	r3, r2
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	6093      	str	r3, [r2, #8]
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	5fffffc0 	.word	0x5fffffc0

080041a4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041b8:	d101      	bne.n	80041be <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80041ba:	2301      	movs	r3, #1
 80041bc:	e000      	b.n	80041c0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	4b05      	ldr	r3, [pc, #20]	; (80041f0 <LL_ADC_EnableInternalRegulator+0x24>)
 80041da:	4013      	ands	r3, r2
 80041dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	6fffffc0 	.word	0x6fffffc0

080041f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004204:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004208:	d101      	bne.n	800420e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800420a:	2301      	movs	r3, #1
 800420c:	e000      	b.n	8004210 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	2b01      	cmp	r3, #1
 800422e:	d101      	bne.n	8004234 <LL_ADC_IsEnabled+0x18>
 8004230:	2301      	movs	r3, #1
 8004232:	e000      	b.n	8004236 <LL_ADC_IsEnabled+0x1a>
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004242:	b480      	push	{r7}
 8004244:	b083      	sub	sp, #12
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f003 0304 	and.w	r3, r3, #4
 8004252:	2b04      	cmp	r3, #4
 8004254:	d101      	bne.n	800425a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004256:	2301      	movs	r3, #1
 8004258:	e000      	b.n	800425c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f003 0308 	and.w	r3, r3, #8
 8004278:	2b08      	cmp	r3, #8
 800427a:	d101      	bne.n	8004280 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800427c:	2301      	movs	r3, #1
 800427e:	e000      	b.n	8004282 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
	...

08004290 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004290:	b590      	push	{r4, r7, lr}
 8004292:	b089      	sub	sp, #36	; 0x24
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004298:	2300      	movs	r3, #0
 800429a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800429c:	2300      	movs	r3, #0
 800429e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e1ee      	b.n	8004688 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d109      	bne.n	80042cc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7fe fcb1 	bl	8002c20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7ff ff67 	bl	80041a4 <LL_ADC_IsDeepPowerDownEnabled>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d004      	beq.n	80042e6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7ff ff4d 	bl	8004180 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff ff82 	bl	80041f4 <LL_ADC_IsInternalRegulatorEnabled>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d114      	bne.n	8004320 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7ff ff66 	bl	80041cc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004300:	4b8e      	ldr	r3, [pc, #568]	; (800453c <HAL_ADC_Init+0x2ac>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	099b      	lsrs	r3, r3, #6
 8004306:	4a8e      	ldr	r2, [pc, #568]	; (8004540 <HAL_ADC_Init+0x2b0>)
 8004308:	fba2 2303 	umull	r2, r3, r2, r3
 800430c:	099b      	lsrs	r3, r3, #6
 800430e:	3301      	adds	r3, #1
 8004310:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004312:	e002      	b.n	800431a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	3b01      	subs	r3, #1
 8004318:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1f9      	bne.n	8004314 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4618      	mov	r0, r3
 8004326:	f7ff ff65 	bl	80041f4 <LL_ADC_IsInternalRegulatorEnabled>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10d      	bne.n	800434c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004334:	f043 0210 	orr.w	r2, r3, #16
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004340:	f043 0201 	orr.w	r2, r3, #1
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4618      	mov	r0, r3
 8004352:	f7ff ff76 	bl	8004242 <LL_ADC_REG_IsConversionOngoing>
 8004356:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800435c:	f003 0310 	and.w	r3, r3, #16
 8004360:	2b00      	cmp	r3, #0
 8004362:	f040 8188 	bne.w	8004676 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2b00      	cmp	r3, #0
 800436a:	f040 8184 	bne.w	8004676 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004372:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004376:	f043 0202 	orr.w	r2, r3, #2
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4618      	mov	r0, r3
 8004384:	f7ff ff4a 	bl	800421c <LL_ADC_IsEnabled>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d136      	bne.n	80043fc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a6c      	ldr	r2, [pc, #432]	; (8004544 <HAL_ADC_Init+0x2b4>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d004      	beq.n	80043a2 <HAL_ADC_Init+0x112>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a6a      	ldr	r2, [pc, #424]	; (8004548 <HAL_ADC_Init+0x2b8>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d10e      	bne.n	80043c0 <HAL_ADC_Init+0x130>
 80043a2:	4868      	ldr	r0, [pc, #416]	; (8004544 <HAL_ADC_Init+0x2b4>)
 80043a4:	f7ff ff3a 	bl	800421c <LL_ADC_IsEnabled>
 80043a8:	4604      	mov	r4, r0
 80043aa:	4867      	ldr	r0, [pc, #412]	; (8004548 <HAL_ADC_Init+0x2b8>)
 80043ac:	f7ff ff36 	bl	800421c <LL_ADC_IsEnabled>
 80043b0:	4603      	mov	r3, r0
 80043b2:	4323      	orrs	r3, r4
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	bf0c      	ite	eq
 80043b8:	2301      	moveq	r3, #1
 80043ba:	2300      	movne	r3, #0
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	e008      	b.n	80043d2 <HAL_ADC_Init+0x142>
 80043c0:	4862      	ldr	r0, [pc, #392]	; (800454c <HAL_ADC_Init+0x2bc>)
 80043c2:	f7ff ff2b 	bl	800421c <LL_ADC_IsEnabled>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	bf0c      	ite	eq
 80043cc:	2301      	moveq	r3, #1
 80043ce:	2300      	movne	r3, #0
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d012      	beq.n	80043fc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a5a      	ldr	r2, [pc, #360]	; (8004544 <HAL_ADC_Init+0x2b4>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d004      	beq.n	80043ea <HAL_ADC_Init+0x15a>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a58      	ldr	r2, [pc, #352]	; (8004548 <HAL_ADC_Init+0x2b8>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d101      	bne.n	80043ee <HAL_ADC_Init+0x15e>
 80043ea:	4a59      	ldr	r2, [pc, #356]	; (8004550 <HAL_ADC_Init+0x2c0>)
 80043ec:	e000      	b.n	80043f0 <HAL_ADC_Init+0x160>
 80043ee:	4a59      	ldr	r2, [pc, #356]	; (8004554 <HAL_ADC_Init+0x2c4>)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	4619      	mov	r1, r3
 80043f6:	4610      	mov	r0, r2
 80043f8:	f7ff fd04 	bl	8003e04 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a52      	ldr	r2, [pc, #328]	; (800454c <HAL_ADC_Init+0x2bc>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d129      	bne.n	800445a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	7e5b      	ldrb	r3, [r3, #25]
 800440a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004410:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8004416:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	2b08      	cmp	r3, #8
 800441e:	d013      	beq.n	8004448 <HAL_ADC_Init+0x1b8>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	2b0c      	cmp	r3, #12
 8004426:	d00d      	beq.n	8004444 <HAL_ADC_Init+0x1b4>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	2b1c      	cmp	r3, #28
 800442e:	d007      	beq.n	8004440 <HAL_ADC_Init+0x1b0>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	2b18      	cmp	r3, #24
 8004436:	d101      	bne.n	800443c <HAL_ADC_Init+0x1ac>
 8004438:	2318      	movs	r3, #24
 800443a:	e006      	b.n	800444a <HAL_ADC_Init+0x1ba>
 800443c:	2300      	movs	r3, #0
 800443e:	e004      	b.n	800444a <HAL_ADC_Init+0x1ba>
 8004440:	2310      	movs	r3, #16
 8004442:	e002      	b.n	800444a <HAL_ADC_Init+0x1ba>
 8004444:	2308      	movs	r3, #8
 8004446:	e000      	b.n	800444a <HAL_ADC_Init+0x1ba>
 8004448:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800444a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004452:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004454:	4313      	orrs	r3, r2
 8004456:	61bb      	str	r3, [r7, #24]
 8004458:	e00e      	b.n	8004478 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	7e5b      	ldrb	r3, [r3, #25]
 800445e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004464:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800446a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004472:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004474:	4313      	orrs	r3, r2
 8004476:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d106      	bne.n	8004490 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	3b01      	subs	r3, #1
 8004488:	045b      	lsls	r3, r3, #17
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	4313      	orrs	r3, r2
 800448e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004494:	2b00      	cmp	r3, #0
 8004496:	d009      	beq.n	80044ac <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80044a6:	69ba      	ldr	r2, [r7, #24]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a26      	ldr	r2, [pc, #152]	; (800454c <HAL_ADC_Init+0x2bc>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d115      	bne.n	80044e2 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68da      	ldr	r2, [r3, #12]
 80044bc:	4b26      	ldr	r3, [pc, #152]	; (8004558 <HAL_ADC_Init+0x2c8>)
 80044be:	4013      	ands	r3, r2
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	6812      	ldr	r2, [r2, #0]
 80044c4:	69b9      	ldr	r1, [r7, #24]
 80044c6:	430b      	orrs	r3, r1
 80044c8:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	611a      	str	r2, [r3, #16]
 80044e0:	e009      	b.n	80044f6 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68da      	ldr	r2, [r3, #12]
 80044e8:	4b1c      	ldr	r3, [pc, #112]	; (800455c <HAL_ADC_Init+0x2cc>)
 80044ea:	4013      	ands	r3, r2
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	6812      	ldr	r2, [r2, #0]
 80044f0:	69b9      	ldr	r1, [r7, #24]
 80044f2:	430b      	orrs	r3, r1
 80044f4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7ff fea1 	bl	8004242 <LL_ADC_REG_IsConversionOngoing>
 8004500:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4618      	mov	r0, r3
 8004508:	f7ff feae 	bl	8004268 <LL_ADC_INJ_IsConversionOngoing>
 800450c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	2b00      	cmp	r3, #0
 8004512:	f040 808e 	bne.w	8004632 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2b00      	cmp	r3, #0
 800451a:	f040 808a 	bne.w	8004632 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a0a      	ldr	r2, [pc, #40]	; (800454c <HAL_ADC_Init+0x2bc>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d11b      	bne.n	8004560 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	7e1b      	ldrb	r3, [r3, #24]
 800452c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004534:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8004536:	4313      	orrs	r3, r2
 8004538:	61bb      	str	r3, [r7, #24]
 800453a:	e018      	b.n	800456e <HAL_ADC_Init+0x2de>
 800453c:	24000000 	.word	0x24000000
 8004540:	053e2d63 	.word	0x053e2d63
 8004544:	40022000 	.word	0x40022000
 8004548:	40022100 	.word	0x40022100
 800454c:	58026000 	.word	0x58026000
 8004550:	40022300 	.word	0x40022300
 8004554:	58026300 	.word	0x58026300
 8004558:	fff04007 	.word	0xfff04007
 800455c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	7e1b      	ldrb	r3, [r3, #24]
 8004564:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 800456a:	4313      	orrs	r3, r2
 800456c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	4b46      	ldr	r3, [pc, #280]	; (8004690 <HAL_ADC_Init+0x400>)
 8004576:	4013      	ands	r3, r2
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	6812      	ldr	r2, [r2, #0]
 800457c:	69b9      	ldr	r1, [r7, #24]
 800457e:	430b      	orrs	r3, r1
 8004580:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004588:	2b01      	cmp	r3, #1
 800458a:	d137      	bne.n	80045fc <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004590:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a3f      	ldr	r2, [pc, #252]	; (8004694 <HAL_ADC_Init+0x404>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d116      	bne.n	80045ca <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	691a      	ldr	r2, [r3, #16]
 80045a2:	4b3d      	ldr	r3, [pc, #244]	; (8004698 <HAL_ADC_Init+0x408>)
 80045a4:	4013      	ands	r3, r2
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80045ae:	4311      	orrs	r1, r2
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80045b4:	4311      	orrs	r1, r2
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80045ba:	430a      	orrs	r2, r1
 80045bc:	431a      	orrs	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f042 0201 	orr.w	r2, r2, #1
 80045c6:	611a      	str	r2, [r3, #16]
 80045c8:	e020      	b.n	800460c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	691a      	ldr	r2, [r3, #16]
 80045d0:	4b32      	ldr	r3, [pc, #200]	; (800469c <HAL_ADC_Init+0x40c>)
 80045d2:	4013      	ands	r3, r2
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80045d8:	3a01      	subs	r2, #1
 80045da:	0411      	lsls	r1, r2, #16
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80045e0:	4311      	orrs	r1, r2
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80045e6:	4311      	orrs	r1, r2
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80045ec:	430a      	orrs	r2, r1
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f042 0201 	orr.w	r2, r2, #1
 80045f8:	611a      	str	r2, [r3, #16]
 80045fa:	e007      	b.n	800460c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	691a      	ldr	r2, [r3, #16]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 0201 	bic.w	r2, r2, #1
 800460a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a1b      	ldr	r2, [pc, #108]	; (8004694 <HAL_ADC_Init+0x404>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d002      	beq.n	8004632 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 fd63 	bl	80050f8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d10c      	bne.n	8004654 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004640:	f023 010f 	bic.w	r1, r3, #15
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	69db      	ldr	r3, [r3, #28]
 8004648:	1e5a      	subs	r2, r3, #1
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	631a      	str	r2, [r3, #48]	; 0x30
 8004652:	e007      	b.n	8004664 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 020f 	bic.w	r2, r2, #15
 8004662:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004668:	f023 0303 	bic.w	r3, r3, #3
 800466c:	f043 0201 	orr.w	r2, r3, #1
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	661a      	str	r2, [r3, #96]	; 0x60
 8004674:	e007      	b.n	8004686 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800467a:	f043 0210 	orr.w	r2, r3, #16
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004686:	7ffb      	ldrb	r3, [r7, #31]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3724      	adds	r7, #36	; 0x24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd90      	pop	{r4, r7, pc}
 8004690:	ffffbffc 	.word	0xffffbffc
 8004694:	58026000 	.word	0x58026000
 8004698:	fc00f81f 	.word	0xfc00f81f
 800469c:	fc00f81e 	.word	0xfc00f81e

080046a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80046a0:	b590      	push	{r4, r7, lr}
 80046a2:	b0b9      	sub	sp, #228	; 0xe4
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046aa:	2300      	movs	r3, #0
 80046ac:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80046b0:	2300      	movs	r3, #0
 80046b2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046ba:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	4aa9      	ldr	r2, [pc, #676]	; (8004968 <HAL_ADC_ConfigChannel+0x2c8>)
 80046c2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d102      	bne.n	80046d4 <HAL_ADC_ConfigChannel+0x34>
 80046ce:	2302      	movs	r3, #2
 80046d0:	f000 bcfa 	b.w	80050c8 <HAL_ADC_ConfigChannel+0xa28>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7ff fdae 	bl	8004242 <LL_ADC_REG_IsConversionOngoing>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f040 84de 	bne.w	80050aa <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a9e      	ldr	r2, [pc, #632]	; (800496c <HAL_ADC_ConfigChannel+0x2cc>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d033      	beq.n	8004760 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004700:	2b00      	cmp	r3, #0
 8004702:	d108      	bne.n	8004716 <HAL_ADC_ConfigChannel+0x76>
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	0e9b      	lsrs	r3, r3, #26
 800470a:	f003 031f 	and.w	r3, r3, #31
 800470e:	2201      	movs	r2, #1
 8004710:	fa02 f303 	lsl.w	r3, r2, r3
 8004714:	e01d      	b.n	8004752 <HAL_ADC_ConfigChannel+0xb2>
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800471e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004722:	fa93 f3a3 	rbit	r3, r3
 8004726:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800472a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800472e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004732:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 800473a:	2320      	movs	r3, #32
 800473c:	e004      	b.n	8004748 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 800473e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004742:	fab3 f383 	clz	r3, r3
 8004746:	b2db      	uxtb	r3, r3
 8004748:	f003 031f 	and.w	r3, r3, #31
 800474c:	2201      	movs	r2, #1
 800474e:	fa02 f303 	lsl.w	r3, r2, r3
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	6812      	ldr	r2, [r2, #0]
 8004756:	69d1      	ldr	r1, [r2, #28]
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	6812      	ldr	r2, [r2, #0]
 800475c:	430b      	orrs	r3, r1
 800475e:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6818      	ldr	r0, [r3, #0]
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	6859      	ldr	r1, [r3, #4]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	461a      	mov	r2, r3
 800476e:	f7ff fc6f 	bl	8004050 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4618      	mov	r0, r3
 8004778:	f7ff fd63 	bl	8004242 <LL_ADC_REG_IsConversionOngoing>
 800477c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4618      	mov	r0, r3
 8004786:	f7ff fd6f 	bl	8004268 <LL_ADC_INJ_IsConversionOngoing>
 800478a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800478e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004792:	2b00      	cmp	r3, #0
 8004794:	f040 8270 	bne.w	8004c78 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004798:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800479c:	2b00      	cmp	r3, #0
 800479e:	f040 826b 	bne.w	8004c78 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6818      	ldr	r0, [r3, #0]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	6819      	ldr	r1, [r3, #0]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	461a      	mov	r2, r3
 80047b0:	f7ff fc7a 	bl	80040a8 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a6c      	ldr	r2, [pc, #432]	; (800496c <HAL_ADC_ConfigChannel+0x2cc>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d10d      	bne.n	80047da <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	695a      	ldr	r2, [r3, #20]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	08db      	lsrs	r3, r3, #3
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	fa02 f303 	lsl.w	r3, r2, r3
 80047d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047d8:	e032      	b.n	8004840 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80047da:	4b65      	ldr	r3, [pc, #404]	; (8004970 <HAL_ADC_ConfigChannel+0x2d0>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80047e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047e6:	d10b      	bne.n	8004800 <HAL_ADC_ConfigChannel+0x160>
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	695a      	ldr	r2, [r3, #20]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	089b      	lsrs	r3, r3, #2
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	fa02 f303 	lsl.w	r3, r2, r3
 80047fe:	e01d      	b.n	800483c <HAL_ADC_ConfigChannel+0x19c>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	f003 0310 	and.w	r3, r3, #16
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10b      	bne.n	8004826 <HAL_ADC_ConfigChannel+0x186>
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	695a      	ldr	r2, [r3, #20]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	089b      	lsrs	r3, r3, #2
 800481a:	f003 0307 	and.w	r3, r3, #7
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	e00a      	b.n	800483c <HAL_ADC_ConfigChannel+0x19c>
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	695a      	ldr	r2, [r3, #20]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	089b      	lsrs	r3, r3, #2
 8004832:	f003 0304 	and.w	r3, r3, #4
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	fa02 f303 	lsl.w	r3, r2, r3
 800483c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	2b04      	cmp	r3, #4
 8004846:	d048      	beq.n	80048da <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6818      	ldr	r0, [r3, #0]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	6919      	ldr	r1, [r3, #16]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004858:	f7ff fb08 	bl	8003e6c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a42      	ldr	r2, [pc, #264]	; (800496c <HAL_ADC_ConfigChannel+0x2cc>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d119      	bne.n	800489a <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6818      	ldr	r0, [r3, #0]
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	6919      	ldr	r1, [r3, #16]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	461a      	mov	r2, r3
 8004874:	f7ff fba0 	bl	8003fb8 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6818      	ldr	r0, [r3, #0]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	6919      	ldr	r1, [r3, #16]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d102      	bne.n	8004890 <HAL_ADC_ConfigChannel+0x1f0>
 800488a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800488e:	e000      	b.n	8004892 <HAL_ADC_ConfigChannel+0x1f2>
 8004890:	2300      	movs	r3, #0
 8004892:	461a      	mov	r2, r3
 8004894:	f7ff fb6e 	bl	8003f74 <LL_ADC_SetOffsetSaturation>
 8004898:	e1ee      	b.n	8004c78 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6818      	ldr	r0, [r3, #0]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	6919      	ldr	r1, [r3, #16]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d102      	bne.n	80048b2 <HAL_ADC_ConfigChannel+0x212>
 80048ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80048b0:	e000      	b.n	80048b4 <HAL_ADC_ConfigChannel+0x214>
 80048b2:	2300      	movs	r3, #0
 80048b4:	461a      	mov	r2, r3
 80048b6:	f7ff fb3b 	bl	8003f30 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6818      	ldr	r0, [r3, #0]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	6919      	ldr	r1, [r3, #16]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	7e1b      	ldrb	r3, [r3, #24]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d102      	bne.n	80048d0 <HAL_ADC_ConfigChannel+0x230>
 80048ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80048ce:	e000      	b.n	80048d2 <HAL_ADC_ConfigChannel+0x232>
 80048d0:	2300      	movs	r3, #0
 80048d2:	461a      	mov	r2, r3
 80048d4:	f7ff fb12 	bl	8003efc <LL_ADC_SetDataRightShift>
 80048d8:	e1ce      	b.n	8004c78 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a23      	ldr	r2, [pc, #140]	; (800496c <HAL_ADC_ConfigChannel+0x2cc>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	f040 8181 	bne.w	8004be8 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2100      	movs	r1, #0
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7ff faef 	bl	8003ed0 <LL_ADC_GetOffsetChannel>
 80048f2:	4603      	mov	r3, r0
 80048f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d10a      	bne.n	8004912 <HAL_ADC_ConfigChannel+0x272>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2100      	movs	r1, #0
 8004902:	4618      	mov	r0, r3
 8004904:	f7ff fae4 	bl	8003ed0 <LL_ADC_GetOffsetChannel>
 8004908:	4603      	mov	r3, r0
 800490a:	0e9b      	lsrs	r3, r3, #26
 800490c:	f003 021f 	and.w	r2, r3, #31
 8004910:	e01e      	b.n	8004950 <HAL_ADC_ConfigChannel+0x2b0>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2100      	movs	r1, #0
 8004918:	4618      	mov	r0, r3
 800491a:	f7ff fad9 	bl	8003ed0 <LL_ADC_GetOffsetChannel>
 800491e:	4603      	mov	r3, r0
 8004920:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004924:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004928:	fa93 f3a3 	rbit	r3, r3
 800492c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8004930:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004934:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8004938:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800493c:	2b00      	cmp	r3, #0
 800493e:	d101      	bne.n	8004944 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8004940:	2320      	movs	r3, #32
 8004942:	e004      	b.n	800494e <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8004944:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004948:	fab3 f383 	clz	r3, r3
 800494c:	b2db      	uxtb	r3, r3
 800494e:	461a      	mov	r2, r3
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10b      	bne.n	8004974 <HAL_ADC_ConfigChannel+0x2d4>
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	0e9b      	lsrs	r3, r3, #26
 8004962:	f003 031f 	and.w	r3, r3, #31
 8004966:	e01e      	b.n	80049a6 <HAL_ADC_ConfigChannel+0x306>
 8004968:	47ff0000 	.word	0x47ff0000
 800496c:	58026000 	.word	0x58026000
 8004970:	5c001000 	.word	0x5c001000
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800497c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004980:	fa93 f3a3 	rbit	r3, r3
 8004984:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004988:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800498c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004990:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d101      	bne.n	800499c <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8004998:	2320      	movs	r3, #32
 800499a:	e004      	b.n	80049a6 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 800499c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80049a0:	fab3 f383 	clz	r3, r3
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d106      	bne.n	80049b8 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2200      	movs	r2, #0
 80049b0:	2100      	movs	r1, #0
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7ff fb22 	bl	8003ffc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2101      	movs	r1, #1
 80049be:	4618      	mov	r0, r3
 80049c0:	f7ff fa86 	bl	8003ed0 <LL_ADC_GetOffsetChannel>
 80049c4:	4603      	mov	r3, r0
 80049c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10a      	bne.n	80049e4 <HAL_ADC_ConfigChannel+0x344>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2101      	movs	r1, #1
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7ff fa7b 	bl	8003ed0 <LL_ADC_GetOffsetChannel>
 80049da:	4603      	mov	r3, r0
 80049dc:	0e9b      	lsrs	r3, r3, #26
 80049de:	f003 021f 	and.w	r2, r3, #31
 80049e2:	e01e      	b.n	8004a22 <HAL_ADC_ConfigChannel+0x382>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2101      	movs	r1, #1
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7ff fa70 	bl	8003ed0 <LL_ADC_GetOffsetChannel>
 80049f0:	4603      	mov	r3, r0
 80049f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049fa:	fa93 f3a3 	rbit	r3, r3
 80049fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004a02:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004a0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8004a12:	2320      	movs	r3, #32
 8004a14:	e004      	b.n	8004a20 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8004a16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004a1a:	fab3 f383 	clz	r3, r3
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	461a      	mov	r2, r3
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d105      	bne.n	8004a3a <HAL_ADC_ConfigChannel+0x39a>
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	0e9b      	lsrs	r3, r3, #26
 8004a34:	f003 031f 	and.w	r3, r3, #31
 8004a38:	e018      	b.n	8004a6c <HAL_ADC_ConfigChannel+0x3cc>
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004a46:	fa93 f3a3 	rbit	r3, r3
 8004a4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004a4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a52:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004a56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8004a5e:	2320      	movs	r3, #32
 8004a60:	e004      	b.n	8004a6c <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8004a62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a66:	fab3 f383 	clz	r3, r3
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d106      	bne.n	8004a7e <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2200      	movs	r2, #0
 8004a76:	2101      	movs	r1, #1
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7ff fabf 	bl	8003ffc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2102      	movs	r1, #2
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7ff fa23 	bl	8003ed0 <LL_ADC_GetOffsetChannel>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d10a      	bne.n	8004aaa <HAL_ADC_ConfigChannel+0x40a>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2102      	movs	r1, #2
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7ff fa18 	bl	8003ed0 <LL_ADC_GetOffsetChannel>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	0e9b      	lsrs	r3, r3, #26
 8004aa4:	f003 021f 	and.w	r2, r3, #31
 8004aa8:	e01e      	b.n	8004ae8 <HAL_ADC_ConfigChannel+0x448>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2102      	movs	r1, #2
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7ff fa0d 	bl	8003ed0 <LL_ADC_GetOffsetChannel>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004abc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ac0:	fa93 f3a3 	rbit	r3, r3
 8004ac4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004ac8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004acc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004ad0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d101      	bne.n	8004adc <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8004ad8:	2320      	movs	r3, #32
 8004ada:	e004      	b.n	8004ae6 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8004adc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ae0:	fab3 f383 	clz	r3, r3
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d105      	bne.n	8004b00 <HAL_ADC_ConfigChannel+0x460>
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	0e9b      	lsrs	r3, r3, #26
 8004afa:	f003 031f 	and.w	r3, r3, #31
 8004afe:	e014      	b.n	8004b2a <HAL_ADC_ConfigChannel+0x48a>
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b08:	fa93 f3a3 	rbit	r3, r3
 8004b0c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004b0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004b14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8004b1c:	2320      	movs	r3, #32
 8004b1e:	e004      	b.n	8004b2a <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8004b20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b24:	fab3 f383 	clz	r3, r3
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d106      	bne.n	8004b3c <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2200      	movs	r2, #0
 8004b34:	2102      	movs	r1, #2
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7ff fa60 	bl	8003ffc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2103      	movs	r1, #3
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7ff f9c4 	bl	8003ed0 <LL_ADC_GetOffsetChannel>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10a      	bne.n	8004b68 <HAL_ADC_ConfigChannel+0x4c8>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2103      	movs	r1, #3
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7ff f9b9 	bl	8003ed0 <LL_ADC_GetOffsetChannel>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	0e9b      	lsrs	r3, r3, #26
 8004b62:	f003 021f 	and.w	r2, r3, #31
 8004b66:	e017      	b.n	8004b98 <HAL_ADC_ConfigChannel+0x4f8>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2103      	movs	r1, #3
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7ff f9ae 	bl	8003ed0 <LL_ADC_GetOffsetChannel>
 8004b74:	4603      	mov	r3, r0
 8004b76:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b7a:	fa93 f3a3 	rbit	r3, r3
 8004b7e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b82:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004b84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004b8a:	2320      	movs	r3, #32
 8004b8c:	e003      	b.n	8004b96 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004b8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b90:	fab3 f383 	clz	r3, r3
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	461a      	mov	r2, r3
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d105      	bne.n	8004bb0 <HAL_ADC_ConfigChannel+0x510>
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	0e9b      	lsrs	r3, r3, #26
 8004baa:	f003 031f 	and.w	r3, r3, #31
 8004bae:	e011      	b.n	8004bd4 <HAL_ADC_ConfigChannel+0x534>
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bb8:	fa93 f3a3 	rbit	r3, r3
 8004bbc:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004bbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bc0:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004bc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d101      	bne.n	8004bcc <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8004bc8:	2320      	movs	r3, #32
 8004bca:	e003      	b.n	8004bd4 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8004bcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bce:	fab3 f383 	clz	r3, r3
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d14f      	bne.n	8004c78 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	2103      	movs	r1, #3
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7ff fa0b 	bl	8003ffc <LL_ADC_SetOffsetState>
 8004be6:	e047      	b.n	8004c78 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	069b      	lsls	r3, r3, #26
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d107      	bne.n	8004c0c <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c0a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	069b      	lsls	r3, r3, #26
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d107      	bne.n	8004c30 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c2e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	069b      	lsls	r3, r3, #26
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d107      	bne.n	8004c54 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c52:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	069b      	lsls	r3, r3, #26
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d107      	bne.n	8004c78 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c76:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7ff facd 	bl	800421c <LL_ADC_IsEnabled>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f040 8219 	bne.w	80050bc <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6818      	ldr	r0, [r3, #0]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	6819      	ldr	r1, [r3, #0]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	461a      	mov	r2, r3
 8004c98:	f7ff fa32 	bl	8004100 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	4aa1      	ldr	r2, [pc, #644]	; (8004f28 <HAL_ADC_ConfigChannel+0x888>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	f040 812e 	bne.w	8004f04 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10b      	bne.n	8004cd0 <HAL_ADC_ConfigChannel+0x630>
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	0e9b      	lsrs	r3, r3, #26
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	f003 031f 	and.w	r3, r3, #31
 8004cc4:	2b09      	cmp	r3, #9
 8004cc6:	bf94      	ite	ls
 8004cc8:	2301      	movls	r3, #1
 8004cca:	2300      	movhi	r3, #0
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	e019      	b.n	8004d04 <HAL_ADC_ConfigChannel+0x664>
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cd8:	fa93 f3a3 	rbit	r3, r3
 8004cdc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004cde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ce0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004ce2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8004ce8:	2320      	movs	r3, #32
 8004cea:	e003      	b.n	8004cf4 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8004cec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cee:	fab3 f383 	clz	r3, r3
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	f003 031f 	and.w	r3, r3, #31
 8004cfa:	2b09      	cmp	r3, #9
 8004cfc:	bf94      	ite	ls
 8004cfe:	2301      	movls	r3, #1
 8004d00:	2300      	movhi	r3, #0
 8004d02:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d079      	beq.n	8004dfc <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d107      	bne.n	8004d24 <HAL_ADC_ConfigChannel+0x684>
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	0e9b      	lsrs	r3, r3, #26
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	069b      	lsls	r3, r3, #26
 8004d1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d22:	e015      	b.n	8004d50 <HAL_ADC_ConfigChannel+0x6b0>
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d2c:	fa93 f3a3 	rbit	r3, r3
 8004d30:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004d32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d34:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004d36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004d3c:	2320      	movs	r3, #32
 8004d3e:	e003      	b.n	8004d48 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004d40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d42:	fab3 f383 	clz	r3, r3
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	3301      	adds	r3, #1
 8004d4a:	069b      	lsls	r3, r3, #26
 8004d4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d109      	bne.n	8004d70 <HAL_ADC_ConfigChannel+0x6d0>
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	0e9b      	lsrs	r3, r3, #26
 8004d62:	3301      	adds	r3, #1
 8004d64:	f003 031f 	and.w	r3, r3, #31
 8004d68:	2101      	movs	r1, #1
 8004d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d6e:	e017      	b.n	8004da0 <HAL_ADC_ConfigChannel+0x700>
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d78:	fa93 f3a3 	rbit	r3, r3
 8004d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d80:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004d82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d101      	bne.n	8004d8c <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004d88:	2320      	movs	r3, #32
 8004d8a:	e003      	b.n	8004d94 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8004d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d8e:	fab3 f383 	clz	r3, r3
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	3301      	adds	r3, #1
 8004d96:	f003 031f 	and.w	r3, r3, #31
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004da0:	ea42 0103 	orr.w	r1, r2, r3
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10a      	bne.n	8004dc6 <HAL_ADC_ConfigChannel+0x726>
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	0e9b      	lsrs	r3, r3, #26
 8004db6:	3301      	adds	r3, #1
 8004db8:	f003 021f 	and.w	r2, r3, #31
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	005b      	lsls	r3, r3, #1
 8004dc0:	4413      	add	r3, r2
 8004dc2:	051b      	lsls	r3, r3, #20
 8004dc4:	e018      	b.n	8004df8 <HAL_ADC_ConfigChannel+0x758>
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dce:	fa93 f3a3 	rbit	r3, r3
 8004dd2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8004dde:	2320      	movs	r3, #32
 8004de0:	e003      	b.n	8004dea <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8004de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de4:	fab3 f383 	clz	r3, r3
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	3301      	adds	r3, #1
 8004dec:	f003 021f 	and.w	r2, r3, #31
 8004df0:	4613      	mov	r3, r2
 8004df2:	005b      	lsls	r3, r3, #1
 8004df4:	4413      	add	r3, r2
 8004df6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004df8:	430b      	orrs	r3, r1
 8004dfa:	e07e      	b.n	8004efa <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d107      	bne.n	8004e18 <HAL_ADC_ConfigChannel+0x778>
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	0e9b      	lsrs	r3, r3, #26
 8004e0e:	3301      	adds	r3, #1
 8004e10:	069b      	lsls	r3, r3, #26
 8004e12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e16:	e015      	b.n	8004e44 <HAL_ADC_ConfigChannel+0x7a4>
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e20:	fa93 f3a3 	rbit	r3, r3
 8004e24:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d101      	bne.n	8004e34 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004e30:	2320      	movs	r3, #32
 8004e32:	e003      	b.n	8004e3c <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e36:	fab3 f383 	clz	r3, r3
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	069b      	lsls	r3, r3, #26
 8004e40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d109      	bne.n	8004e64 <HAL_ADC_ConfigChannel+0x7c4>
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	0e9b      	lsrs	r3, r3, #26
 8004e56:	3301      	adds	r3, #1
 8004e58:	f003 031f 	and.w	r3, r3, #31
 8004e5c:	2101      	movs	r1, #1
 8004e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e62:	e017      	b.n	8004e94 <HAL_ADC_ConfigChannel+0x7f4>
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	fa93 f3a3 	rbit	r3, r3
 8004e70:	61bb      	str	r3, [r7, #24]
  return result;
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004e76:	6a3b      	ldr	r3, [r7, #32]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d101      	bne.n	8004e80 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004e7c:	2320      	movs	r3, #32
 8004e7e:	e003      	b.n	8004e88 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004e80:	6a3b      	ldr	r3, [r7, #32]
 8004e82:	fab3 f383 	clz	r3, r3
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	3301      	adds	r3, #1
 8004e8a:	f003 031f 	and.w	r3, r3, #31
 8004e8e:	2101      	movs	r1, #1
 8004e90:	fa01 f303 	lsl.w	r3, r1, r3
 8004e94:	ea42 0103 	orr.w	r1, r2, r3
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10d      	bne.n	8004ec0 <HAL_ADC_ConfigChannel+0x820>
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	0e9b      	lsrs	r3, r3, #26
 8004eaa:	3301      	adds	r3, #1
 8004eac:	f003 021f 	and.w	r2, r3, #31
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	4413      	add	r3, r2
 8004eb6:	3b1e      	subs	r3, #30
 8004eb8:	051b      	lsls	r3, r3, #20
 8004eba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ebe:	e01b      	b.n	8004ef8 <HAL_ADC_ConfigChannel+0x858>
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	fa93 f3a3 	rbit	r3, r3
 8004ecc:	60fb      	str	r3, [r7, #12]
  return result;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d101      	bne.n	8004edc <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004ed8:	2320      	movs	r3, #32
 8004eda:	e003      	b.n	8004ee4 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	fab3 f383 	clz	r3, r3
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	f003 021f 	and.w	r2, r3, #31
 8004eea:	4613      	mov	r3, r2
 8004eec:	005b      	lsls	r3, r3, #1
 8004eee:	4413      	add	r3, r2
 8004ef0:	3b1e      	subs	r3, #30
 8004ef2:	051b      	lsls	r3, r3, #20
 8004ef4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ef8:	430b      	orrs	r3, r1
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	6892      	ldr	r2, [r2, #8]
 8004efe:	4619      	mov	r1, r3
 8004f00:	f7ff f8d2 	bl	80040a8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f280 80d7 	bge.w	80050bc <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a06      	ldr	r2, [pc, #24]	; (8004f2c <HAL_ADC_ConfigChannel+0x88c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d004      	beq.n	8004f22 <HAL_ADC_ConfigChannel+0x882>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a04      	ldr	r2, [pc, #16]	; (8004f30 <HAL_ADC_ConfigChannel+0x890>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d10a      	bne.n	8004f38 <HAL_ADC_ConfigChannel+0x898>
 8004f22:	4b04      	ldr	r3, [pc, #16]	; (8004f34 <HAL_ADC_ConfigChannel+0x894>)
 8004f24:	e009      	b.n	8004f3a <HAL_ADC_ConfigChannel+0x89a>
 8004f26:	bf00      	nop
 8004f28:	47ff0000 	.word	0x47ff0000
 8004f2c:	40022000 	.word	0x40022000
 8004f30:	40022100 	.word	0x40022100
 8004f34:	40022300 	.word	0x40022300
 8004f38:	4b65      	ldr	r3, [pc, #404]	; (80050d0 <HAL_ADC_ConfigChannel+0xa30>)
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7fe ff88 	bl	8003e50 <LL_ADC_GetCommonPathInternalCh>
 8004f40:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a62      	ldr	r2, [pc, #392]	; (80050d4 <HAL_ADC_ConfigChannel+0xa34>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d004      	beq.n	8004f58 <HAL_ADC_ConfigChannel+0x8b8>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a61      	ldr	r2, [pc, #388]	; (80050d8 <HAL_ADC_ConfigChannel+0xa38>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d10e      	bne.n	8004f76 <HAL_ADC_ConfigChannel+0x8d6>
 8004f58:	485e      	ldr	r0, [pc, #376]	; (80050d4 <HAL_ADC_ConfigChannel+0xa34>)
 8004f5a:	f7ff f95f 	bl	800421c <LL_ADC_IsEnabled>
 8004f5e:	4604      	mov	r4, r0
 8004f60:	485d      	ldr	r0, [pc, #372]	; (80050d8 <HAL_ADC_ConfigChannel+0xa38>)
 8004f62:	f7ff f95b 	bl	800421c <LL_ADC_IsEnabled>
 8004f66:	4603      	mov	r3, r0
 8004f68:	4323      	orrs	r3, r4
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	bf0c      	ite	eq
 8004f6e:	2301      	moveq	r3, #1
 8004f70:	2300      	movne	r3, #0
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	e008      	b.n	8004f88 <HAL_ADC_ConfigChannel+0x8e8>
 8004f76:	4859      	ldr	r0, [pc, #356]	; (80050dc <HAL_ADC_ConfigChannel+0xa3c>)
 8004f78:	f7ff f950 	bl	800421c <LL_ADC_IsEnabled>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	bf0c      	ite	eq
 8004f82:	2301      	moveq	r3, #1
 8004f84:	2300      	movne	r3, #0
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 8084 	beq.w	8005096 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a53      	ldr	r2, [pc, #332]	; (80050e0 <HAL_ADC_ConfigChannel+0xa40>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d132      	bne.n	8004ffe <HAL_ADC_ConfigChannel+0x95e>
 8004f98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d12c      	bne.n	8004ffe <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a4c      	ldr	r2, [pc, #304]	; (80050dc <HAL_ADC_ConfigChannel+0xa3c>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	f040 8086 	bne.w	80050bc <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a47      	ldr	r2, [pc, #284]	; (80050d4 <HAL_ADC_ConfigChannel+0xa34>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d004      	beq.n	8004fc4 <HAL_ADC_ConfigChannel+0x924>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a46      	ldr	r2, [pc, #280]	; (80050d8 <HAL_ADC_ConfigChannel+0xa38>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d101      	bne.n	8004fc8 <HAL_ADC_ConfigChannel+0x928>
 8004fc4:	4a47      	ldr	r2, [pc, #284]	; (80050e4 <HAL_ADC_ConfigChannel+0xa44>)
 8004fc6:	e000      	b.n	8004fca <HAL_ADC_ConfigChannel+0x92a>
 8004fc8:	4a41      	ldr	r2, [pc, #260]	; (80050d0 <HAL_ADC_ConfigChannel+0xa30>)
 8004fca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004fce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	4610      	mov	r0, r2
 8004fd6:	f7fe ff28 	bl	8003e2a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004fda:	4b43      	ldr	r3, [pc, #268]	; (80050e8 <HAL_ADC_ConfigChannel+0xa48>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	099b      	lsrs	r3, r3, #6
 8004fe0:	4a42      	ldr	r2, [pc, #264]	; (80050ec <HAL_ADC_ConfigChannel+0xa4c>)
 8004fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe6:	099b      	lsrs	r3, r3, #6
 8004fe8:	3301      	adds	r3, #1
 8004fea:	005b      	lsls	r3, r3, #1
 8004fec:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004fee:	e002      	b.n	8004ff6 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1f9      	bne.n	8004ff0 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ffc:	e05e      	b.n	80050bc <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a3b      	ldr	r2, [pc, #236]	; (80050f0 <HAL_ADC_ConfigChannel+0xa50>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d120      	bne.n	800504a <HAL_ADC_ConfigChannel+0x9aa>
 8005008:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800500c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d11a      	bne.n	800504a <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a30      	ldr	r2, [pc, #192]	; (80050dc <HAL_ADC_ConfigChannel+0xa3c>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d14e      	bne.n	80050bc <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a2c      	ldr	r2, [pc, #176]	; (80050d4 <HAL_ADC_ConfigChannel+0xa34>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d004      	beq.n	8005032 <HAL_ADC_ConfigChannel+0x992>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a2a      	ldr	r2, [pc, #168]	; (80050d8 <HAL_ADC_ConfigChannel+0xa38>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d101      	bne.n	8005036 <HAL_ADC_ConfigChannel+0x996>
 8005032:	4a2c      	ldr	r2, [pc, #176]	; (80050e4 <HAL_ADC_ConfigChannel+0xa44>)
 8005034:	e000      	b.n	8005038 <HAL_ADC_ConfigChannel+0x998>
 8005036:	4a26      	ldr	r2, [pc, #152]	; (80050d0 <HAL_ADC_ConfigChannel+0xa30>)
 8005038:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800503c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005040:	4619      	mov	r1, r3
 8005042:	4610      	mov	r0, r2
 8005044:	f7fe fef1 	bl	8003e2a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005048:	e038      	b.n	80050bc <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a29      	ldr	r2, [pc, #164]	; (80050f4 <HAL_ADC_ConfigChannel+0xa54>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d133      	bne.n	80050bc <HAL_ADC_ConfigChannel+0xa1c>
 8005054:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005058:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d12d      	bne.n	80050bc <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a1d      	ldr	r2, [pc, #116]	; (80050dc <HAL_ADC_ConfigChannel+0xa3c>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d128      	bne.n	80050bc <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a19      	ldr	r2, [pc, #100]	; (80050d4 <HAL_ADC_ConfigChannel+0xa34>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d004      	beq.n	800507e <HAL_ADC_ConfigChannel+0x9de>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a17      	ldr	r2, [pc, #92]	; (80050d8 <HAL_ADC_ConfigChannel+0xa38>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d101      	bne.n	8005082 <HAL_ADC_ConfigChannel+0x9e2>
 800507e:	4a19      	ldr	r2, [pc, #100]	; (80050e4 <HAL_ADC_ConfigChannel+0xa44>)
 8005080:	e000      	b.n	8005084 <HAL_ADC_ConfigChannel+0x9e4>
 8005082:	4a13      	ldr	r2, [pc, #76]	; (80050d0 <HAL_ADC_ConfigChannel+0xa30>)
 8005084:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005088:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800508c:	4619      	mov	r1, r3
 800508e:	4610      	mov	r0, r2
 8005090:	f7fe fecb 	bl	8003e2a <LL_ADC_SetCommonPathInternalCh>
 8005094:	e012      	b.n	80050bc <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800509a:	f043 0220 	orr.w	r2, r3, #32
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80050a8:	e008      	b.n	80050bc <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ae:	f043 0220 	orr.w	r2, r3, #32
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80050c4:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	37e4      	adds	r7, #228	; 0xe4
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd90      	pop	{r4, r7, pc}
 80050d0:	58026300 	.word	0x58026300
 80050d4:	40022000 	.word	0x40022000
 80050d8:	40022100 	.word	0x40022100
 80050dc:	58026000 	.word	0x58026000
 80050e0:	c7520000 	.word	0xc7520000
 80050e4:	40022300 	.word	0x40022300
 80050e8:	24000000 	.word	0x24000000
 80050ec:	053e2d63 	.word	0x053e2d63
 80050f0:	c3210000 	.word	0xc3210000
 80050f4:	cb840000 	.word	0xcb840000

080050f8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a6c      	ldr	r2, [pc, #432]	; (80052b8 <ADC_ConfigureBoostMode+0x1c0>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d004      	beq.n	8005114 <ADC_ConfigureBoostMode+0x1c>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a6b      	ldr	r2, [pc, #428]	; (80052bc <ADC_ConfigureBoostMode+0x1c4>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d109      	bne.n	8005128 <ADC_ConfigureBoostMode+0x30>
 8005114:	4b6a      	ldr	r3, [pc, #424]	; (80052c0 <ADC_ConfigureBoostMode+0x1c8>)
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800511c:	2b00      	cmp	r3, #0
 800511e:	bf14      	ite	ne
 8005120:	2301      	movne	r3, #1
 8005122:	2300      	moveq	r3, #0
 8005124:	b2db      	uxtb	r3, r3
 8005126:	e008      	b.n	800513a <ADC_ConfigureBoostMode+0x42>
 8005128:	4b66      	ldr	r3, [pc, #408]	; (80052c4 <ADC_ConfigureBoostMode+0x1cc>)
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005130:	2b00      	cmp	r3, #0
 8005132:	bf14      	ite	ne
 8005134:	2301      	movne	r3, #1
 8005136:	2300      	moveq	r3, #0
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d01c      	beq.n	8005178 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800513e:	f005 fcab 	bl	800aa98 <HAL_RCC_GetHCLKFreq>
 8005142:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800514c:	d010      	beq.n	8005170 <ADC_ConfigureBoostMode+0x78>
 800514e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005152:	d873      	bhi.n	800523c <ADC_ConfigureBoostMode+0x144>
 8005154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005158:	d002      	beq.n	8005160 <ADC_ConfigureBoostMode+0x68>
 800515a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800515e:	d16d      	bne.n	800523c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	0c1b      	lsrs	r3, r3, #16
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	fbb2 f3f3 	udiv	r3, r2, r3
 800516c:	60fb      	str	r3, [r7, #12]
        break;
 800516e:	e068      	b.n	8005242 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	089b      	lsrs	r3, r3, #2
 8005174:	60fb      	str	r3, [r7, #12]
        break;
 8005176:	e064      	b.n	8005242 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005178:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800517c:	f04f 0100 	mov.w	r1, #0
 8005180:	f006 fe86 	bl	800be90 <HAL_RCCEx_GetPeriphCLKFreq>
 8005184:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800518e:	d051      	beq.n	8005234 <ADC_ConfigureBoostMode+0x13c>
 8005190:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005194:	d854      	bhi.n	8005240 <ADC_ConfigureBoostMode+0x148>
 8005196:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800519a:	d047      	beq.n	800522c <ADC_ConfigureBoostMode+0x134>
 800519c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80051a0:	d84e      	bhi.n	8005240 <ADC_ConfigureBoostMode+0x148>
 80051a2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80051a6:	d03d      	beq.n	8005224 <ADC_ConfigureBoostMode+0x12c>
 80051a8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80051ac:	d848      	bhi.n	8005240 <ADC_ConfigureBoostMode+0x148>
 80051ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051b2:	d033      	beq.n	800521c <ADC_ConfigureBoostMode+0x124>
 80051b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051b8:	d842      	bhi.n	8005240 <ADC_ConfigureBoostMode+0x148>
 80051ba:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80051be:	d029      	beq.n	8005214 <ADC_ConfigureBoostMode+0x11c>
 80051c0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80051c4:	d83c      	bhi.n	8005240 <ADC_ConfigureBoostMode+0x148>
 80051c6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80051ca:	d01a      	beq.n	8005202 <ADC_ConfigureBoostMode+0x10a>
 80051cc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80051d0:	d836      	bhi.n	8005240 <ADC_ConfigureBoostMode+0x148>
 80051d2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80051d6:	d014      	beq.n	8005202 <ADC_ConfigureBoostMode+0x10a>
 80051d8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80051dc:	d830      	bhi.n	8005240 <ADC_ConfigureBoostMode+0x148>
 80051de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051e2:	d00e      	beq.n	8005202 <ADC_ConfigureBoostMode+0x10a>
 80051e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051e8:	d82a      	bhi.n	8005240 <ADC_ConfigureBoostMode+0x148>
 80051ea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80051ee:	d008      	beq.n	8005202 <ADC_ConfigureBoostMode+0x10a>
 80051f0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80051f4:	d824      	bhi.n	8005240 <ADC_ConfigureBoostMode+0x148>
 80051f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051fa:	d002      	beq.n	8005202 <ADC_ConfigureBoostMode+0x10a>
 80051fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005200:	d11e      	bne.n	8005240 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	0c9b      	lsrs	r3, r3, #18
 8005208:	005b      	lsls	r3, r3, #1
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005210:	60fb      	str	r3, [r7, #12]
        break;
 8005212:	e016      	b.n	8005242 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	091b      	lsrs	r3, r3, #4
 8005218:	60fb      	str	r3, [r7, #12]
        break;
 800521a:	e012      	b.n	8005242 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	095b      	lsrs	r3, r3, #5
 8005220:	60fb      	str	r3, [r7, #12]
        break;
 8005222:	e00e      	b.n	8005242 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	099b      	lsrs	r3, r3, #6
 8005228:	60fb      	str	r3, [r7, #12]
        break;
 800522a:	e00a      	b.n	8005242 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	09db      	lsrs	r3, r3, #7
 8005230:	60fb      	str	r3, [r7, #12]
        break;
 8005232:	e006      	b.n	8005242 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	0a1b      	lsrs	r3, r3, #8
 8005238:	60fb      	str	r3, [r7, #12]
        break;
 800523a:	e002      	b.n	8005242 <ADC_ConfigureBoostMode+0x14a>
        break;
 800523c:	bf00      	nop
 800523e:	e000      	b.n	8005242 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005240:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	085b      	lsrs	r3, r3, #1
 8005246:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4a1f      	ldr	r2, [pc, #124]	; (80052c8 <ADC_ConfigureBoostMode+0x1d0>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d808      	bhi.n	8005262 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	689a      	ldr	r2, [r3, #8]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800525e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005260:	e025      	b.n	80052ae <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	4a19      	ldr	r2, [pc, #100]	; (80052cc <ADC_ConfigureBoostMode+0x1d4>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d80a      	bhi.n	8005280 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800527c:	609a      	str	r2, [r3, #8]
}
 800527e:	e016      	b.n	80052ae <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4a13      	ldr	r2, [pc, #76]	; (80052d0 <ADC_ConfigureBoostMode+0x1d8>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d80a      	bhi.n	800529e <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800529a:	609a      	str	r2, [r3, #8]
}
 800529c:	e007      	b.n	80052ae <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689a      	ldr	r2, [r3, #8]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80052ac:	609a      	str	r2, [r3, #8]
}
 80052ae:	bf00      	nop
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	40022000 	.word	0x40022000
 80052bc:	40022100 	.word	0x40022100
 80052c0:	40022300 	.word	0x40022300
 80052c4:	58026300 	.word	0x58026300
 80052c8:	005f5e10 	.word	0x005f5e10
 80052cc:	00bebc20 	.word	0x00bebc20
 80052d0:	017d7840 	.word	0x017d7840

080052d4 <LL_ADC_IsEnabled>:
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	f003 0301 	and.w	r3, r3, #1
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d101      	bne.n	80052ec <LL_ADC_IsEnabled+0x18>
 80052e8:	2301      	movs	r3, #1
 80052ea:	e000      	b.n	80052ee <LL_ADC_IsEnabled+0x1a>
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	370c      	adds	r7, #12
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <LL_ADC_REG_IsConversionOngoing>:
{
 80052fa:	b480      	push	{r7}
 80052fc:	b083      	sub	sp, #12
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f003 0304 	and.w	r3, r3, #4
 800530a:	2b04      	cmp	r3, #4
 800530c:	d101      	bne.n	8005312 <LL_ADC_REG_IsConversionOngoing+0x18>
 800530e:	2301      	movs	r3, #1
 8005310:	e000      	b.n	8005314 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005320:	b590      	push	{r4, r7, lr}
 8005322:	b0a3      	sub	sp, #140	; 0x8c
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800532a:	2300      	movs	r3, #0
 800532c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005336:	2b01      	cmp	r3, #1
 8005338:	d101      	bne.n	800533e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800533a:	2302      	movs	r3, #2
 800533c:	e0c1      	b.n	80054c2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005346:	2300      	movs	r3, #0
 8005348:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800534a:	2300      	movs	r3, #0
 800534c:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a5e      	ldr	r2, [pc, #376]	; (80054cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d102      	bne.n	800535e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005358:	4b5d      	ldr	r3, [pc, #372]	; (80054d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	e001      	b.n	8005362 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800535e:	2300      	movs	r3, #0
 8005360:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d10b      	bne.n	8005380 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800536c:	f043 0220 	orr.w	r2, r3, #32
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e0a0      	b.n	80054c2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4618      	mov	r0, r3
 8005384:	f7ff ffb9 	bl	80052fa <LL_ADC_REG_IsConversionOngoing>
 8005388:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4618      	mov	r0, r3
 8005392:	f7ff ffb2 	bl	80052fa <LL_ADC_REG_IsConversionOngoing>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	f040 8081 	bne.w	80054a0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800539e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d17c      	bne.n	80054a0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a48      	ldr	r2, [pc, #288]	; (80054cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d004      	beq.n	80053ba <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a46      	ldr	r2, [pc, #280]	; (80054d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d101      	bne.n	80053be <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80053ba:	4b46      	ldr	r3, [pc, #280]	; (80054d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80053bc:	e000      	b.n	80053c0 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80053be:	4b46      	ldr	r3, [pc, #280]	; (80054d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80053c0:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d039      	beq.n	800543e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80053ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	431a      	orrs	r2, r3
 80053d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053da:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a3a      	ldr	r2, [pc, #232]	; (80054cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d004      	beq.n	80053f0 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a39      	ldr	r2, [pc, #228]	; (80054d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d10e      	bne.n	800540e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80053f0:	4836      	ldr	r0, [pc, #216]	; (80054cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80053f2:	f7ff ff6f 	bl	80052d4 <LL_ADC_IsEnabled>
 80053f6:	4604      	mov	r4, r0
 80053f8:	4835      	ldr	r0, [pc, #212]	; (80054d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80053fa:	f7ff ff6b 	bl	80052d4 <LL_ADC_IsEnabled>
 80053fe:	4603      	mov	r3, r0
 8005400:	4323      	orrs	r3, r4
 8005402:	2b00      	cmp	r3, #0
 8005404:	bf0c      	ite	eq
 8005406:	2301      	moveq	r3, #1
 8005408:	2300      	movne	r3, #0
 800540a:	b2db      	uxtb	r3, r3
 800540c:	e008      	b.n	8005420 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800540e:	4833      	ldr	r0, [pc, #204]	; (80054dc <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005410:	f7ff ff60 	bl	80052d4 <LL_ADC_IsEnabled>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	bf0c      	ite	eq
 800541a:	2301      	moveq	r3, #1
 800541c:	2300      	movne	r3, #0
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b00      	cmp	r3, #0
 8005422:	d047      	beq.n	80054b4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005424:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005426:	689a      	ldr	r2, [r3, #8]
 8005428:	4b2d      	ldr	r3, [pc, #180]	; (80054e0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800542a:	4013      	ands	r3, r2
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	6811      	ldr	r1, [r2, #0]
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	6892      	ldr	r2, [r2, #8]
 8005434:	430a      	orrs	r2, r1
 8005436:	431a      	orrs	r2, r3
 8005438:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800543a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800543c:	e03a      	b.n	80054b4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800543e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005446:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005448:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a1f      	ldr	r2, [pc, #124]	; (80054cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d004      	beq.n	800545e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a1d      	ldr	r2, [pc, #116]	; (80054d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d10e      	bne.n	800547c <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800545e:	481b      	ldr	r0, [pc, #108]	; (80054cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005460:	f7ff ff38 	bl	80052d4 <LL_ADC_IsEnabled>
 8005464:	4604      	mov	r4, r0
 8005466:	481a      	ldr	r0, [pc, #104]	; (80054d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005468:	f7ff ff34 	bl	80052d4 <LL_ADC_IsEnabled>
 800546c:	4603      	mov	r3, r0
 800546e:	4323      	orrs	r3, r4
 8005470:	2b00      	cmp	r3, #0
 8005472:	bf0c      	ite	eq
 8005474:	2301      	moveq	r3, #1
 8005476:	2300      	movne	r3, #0
 8005478:	b2db      	uxtb	r3, r3
 800547a:	e008      	b.n	800548e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 800547c:	4817      	ldr	r0, [pc, #92]	; (80054dc <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800547e:	f7ff ff29 	bl	80052d4 <LL_ADC_IsEnabled>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	bf0c      	ite	eq
 8005488:	2301      	moveq	r3, #1
 800548a:	2300      	movne	r3, #0
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d010      	beq.n	80054b4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005492:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005494:	689a      	ldr	r2, [r3, #8]
 8005496:	4b12      	ldr	r3, [pc, #72]	; (80054e0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005498:	4013      	ands	r3, r2
 800549a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800549c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800549e:	e009      	b.n	80054b4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054a4:	f043 0220 	orr.w	r2, r3, #32
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80054b2:	e000      	b.n	80054b6 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80054b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80054be:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	378c      	adds	r7, #140	; 0x8c
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd90      	pop	{r4, r7, pc}
 80054ca:	bf00      	nop
 80054cc:	40022000 	.word	0x40022000
 80054d0:	40022100 	.word	0x40022100
 80054d4:	40022300 	.word	0x40022300
 80054d8:	58026300 	.word	0x58026300
 80054dc:	58026000 	.word	0x58026000
 80054e0:	fffff0e0 	.word	0xfffff0e0

080054e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f003 0307 	and.w	r3, r3, #7
 80054f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80054f4:	4b0b      	ldr	r3, [pc, #44]	; (8005524 <__NVIC_SetPriorityGrouping+0x40>)
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005500:	4013      	ands	r3, r2
 8005502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800550c:	4b06      	ldr	r3, [pc, #24]	; (8005528 <__NVIC_SetPriorityGrouping+0x44>)
 800550e:	4313      	orrs	r3, r2
 8005510:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005512:	4a04      	ldr	r2, [pc, #16]	; (8005524 <__NVIC_SetPriorityGrouping+0x40>)
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	60d3      	str	r3, [r2, #12]
}
 8005518:	bf00      	nop
 800551a:	3714      	adds	r7, #20
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr
 8005524:	e000ed00 	.word	0xe000ed00
 8005528:	05fa0000 	.word	0x05fa0000

0800552c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005530:	4b04      	ldr	r3, [pc, #16]	; (8005544 <__NVIC_GetPriorityGrouping+0x18>)
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	0a1b      	lsrs	r3, r3, #8
 8005536:	f003 0307 	and.w	r3, r3, #7
}
 800553a:	4618      	mov	r0, r3
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr
 8005544:	e000ed00 	.word	0xe000ed00

08005548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	4603      	mov	r3, r0
 8005550:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005552:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005556:	2b00      	cmp	r3, #0
 8005558:	db0b      	blt.n	8005572 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800555a:	88fb      	ldrh	r3, [r7, #6]
 800555c:	f003 021f 	and.w	r2, r3, #31
 8005560:	4907      	ldr	r1, [pc, #28]	; (8005580 <__NVIC_EnableIRQ+0x38>)
 8005562:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005566:	095b      	lsrs	r3, r3, #5
 8005568:	2001      	movs	r0, #1
 800556a:	fa00 f202 	lsl.w	r2, r0, r2
 800556e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005572:	bf00      	nop
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	e000e100 	.word	0xe000e100

08005584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	4603      	mov	r3, r0
 800558c:	6039      	str	r1, [r7, #0]
 800558e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005590:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005594:	2b00      	cmp	r3, #0
 8005596:	db0a      	blt.n	80055ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	b2da      	uxtb	r2, r3
 800559c:	490c      	ldr	r1, [pc, #48]	; (80055d0 <__NVIC_SetPriority+0x4c>)
 800559e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055a2:	0112      	lsls	r2, r2, #4
 80055a4:	b2d2      	uxtb	r2, r2
 80055a6:	440b      	add	r3, r1
 80055a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80055ac:	e00a      	b.n	80055c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	b2da      	uxtb	r2, r3
 80055b2:	4908      	ldr	r1, [pc, #32]	; (80055d4 <__NVIC_SetPriority+0x50>)
 80055b4:	88fb      	ldrh	r3, [r7, #6]
 80055b6:	f003 030f 	and.w	r3, r3, #15
 80055ba:	3b04      	subs	r3, #4
 80055bc:	0112      	lsls	r2, r2, #4
 80055be:	b2d2      	uxtb	r2, r2
 80055c0:	440b      	add	r3, r1
 80055c2:	761a      	strb	r2, [r3, #24]
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr
 80055d0:	e000e100 	.word	0xe000e100
 80055d4:	e000ed00 	.word	0xe000ed00

080055d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055d8:	b480      	push	{r7}
 80055da:	b089      	sub	sp, #36	; 0x24
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f003 0307 	and.w	r3, r3, #7
 80055ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	f1c3 0307 	rsb	r3, r3, #7
 80055f2:	2b04      	cmp	r3, #4
 80055f4:	bf28      	it	cs
 80055f6:	2304      	movcs	r3, #4
 80055f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	3304      	adds	r3, #4
 80055fe:	2b06      	cmp	r3, #6
 8005600:	d902      	bls.n	8005608 <NVIC_EncodePriority+0x30>
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	3b03      	subs	r3, #3
 8005606:	e000      	b.n	800560a <NVIC_EncodePriority+0x32>
 8005608:	2300      	movs	r3, #0
 800560a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800560c:	f04f 32ff 	mov.w	r2, #4294967295
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	fa02 f303 	lsl.w	r3, r2, r3
 8005616:	43da      	mvns	r2, r3
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	401a      	ands	r2, r3
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005620:	f04f 31ff 	mov.w	r1, #4294967295
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	fa01 f303 	lsl.w	r3, r1, r3
 800562a:	43d9      	mvns	r1, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005630:	4313      	orrs	r3, r2
         );
}
 8005632:	4618      	mov	r0, r3
 8005634:	3724      	adds	r7, #36	; 0x24
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
	...

08005640 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	3b01      	subs	r3, #1
 800564c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005650:	d301      	bcc.n	8005656 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005652:	2301      	movs	r3, #1
 8005654:	e00f      	b.n	8005676 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005656:	4a0a      	ldr	r2, [pc, #40]	; (8005680 <SysTick_Config+0x40>)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	3b01      	subs	r3, #1
 800565c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800565e:	210f      	movs	r1, #15
 8005660:	f04f 30ff 	mov.w	r0, #4294967295
 8005664:	f7ff ff8e 	bl	8005584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005668:	4b05      	ldr	r3, [pc, #20]	; (8005680 <SysTick_Config+0x40>)
 800566a:	2200      	movs	r2, #0
 800566c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800566e:	4b04      	ldr	r3, [pc, #16]	; (8005680 <SysTick_Config+0x40>)
 8005670:	2207      	movs	r2, #7
 8005672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3708      	adds	r7, #8
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	e000e010 	.word	0xe000e010

08005684 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f7ff ff29 	bl	80054e4 <__NVIC_SetPriorityGrouping>
}
 8005692:	bf00      	nop
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b086      	sub	sp, #24
 800569e:	af00      	add	r7, sp, #0
 80056a0:	4603      	mov	r3, r0
 80056a2:	60b9      	str	r1, [r7, #8]
 80056a4:	607a      	str	r2, [r7, #4]
 80056a6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80056a8:	f7ff ff40 	bl	800552c <__NVIC_GetPriorityGrouping>
 80056ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	68b9      	ldr	r1, [r7, #8]
 80056b2:	6978      	ldr	r0, [r7, #20]
 80056b4:	f7ff ff90 	bl	80055d8 <NVIC_EncodePriority>
 80056b8:	4602      	mov	r2, r0
 80056ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80056be:	4611      	mov	r1, r2
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7ff ff5f 	bl	8005584 <__NVIC_SetPriority>
}
 80056c6:	bf00      	nop
 80056c8:	3718      	adds	r7, #24
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b082      	sub	sp, #8
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	4603      	mov	r3, r0
 80056d6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80056d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056dc:	4618      	mov	r0, r3
 80056de:	f7ff ff33 	bl	8005548 <__NVIC_EnableIRQ>
}
 80056e2:	bf00      	nop
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b082      	sub	sp, #8
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7ff ffa4 	bl	8005640 <SysTick_Config>
 80056f8:	4603      	mov	r3, r0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3708      	adds	r7, #8
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
	...

08005704 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b086      	sub	sp, #24
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800570c:	f7fe fb34 	bl	8003d78 <HAL_GetTick>
 8005710:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e312      	b.n	8005d42 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a66      	ldr	r2, [pc, #408]	; (80058bc <HAL_DMA_Init+0x1b8>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d04a      	beq.n	80057bc <HAL_DMA_Init+0xb8>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a65      	ldr	r2, [pc, #404]	; (80058c0 <HAL_DMA_Init+0x1bc>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d045      	beq.n	80057bc <HAL_DMA_Init+0xb8>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a63      	ldr	r2, [pc, #396]	; (80058c4 <HAL_DMA_Init+0x1c0>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d040      	beq.n	80057bc <HAL_DMA_Init+0xb8>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a62      	ldr	r2, [pc, #392]	; (80058c8 <HAL_DMA_Init+0x1c4>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d03b      	beq.n	80057bc <HAL_DMA_Init+0xb8>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a60      	ldr	r2, [pc, #384]	; (80058cc <HAL_DMA_Init+0x1c8>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d036      	beq.n	80057bc <HAL_DMA_Init+0xb8>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a5f      	ldr	r2, [pc, #380]	; (80058d0 <HAL_DMA_Init+0x1cc>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d031      	beq.n	80057bc <HAL_DMA_Init+0xb8>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a5d      	ldr	r2, [pc, #372]	; (80058d4 <HAL_DMA_Init+0x1d0>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d02c      	beq.n	80057bc <HAL_DMA_Init+0xb8>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a5c      	ldr	r2, [pc, #368]	; (80058d8 <HAL_DMA_Init+0x1d4>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d027      	beq.n	80057bc <HAL_DMA_Init+0xb8>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a5a      	ldr	r2, [pc, #360]	; (80058dc <HAL_DMA_Init+0x1d8>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d022      	beq.n	80057bc <HAL_DMA_Init+0xb8>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a59      	ldr	r2, [pc, #356]	; (80058e0 <HAL_DMA_Init+0x1dc>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d01d      	beq.n	80057bc <HAL_DMA_Init+0xb8>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a57      	ldr	r2, [pc, #348]	; (80058e4 <HAL_DMA_Init+0x1e0>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d018      	beq.n	80057bc <HAL_DMA_Init+0xb8>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a56      	ldr	r2, [pc, #344]	; (80058e8 <HAL_DMA_Init+0x1e4>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d013      	beq.n	80057bc <HAL_DMA_Init+0xb8>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a54      	ldr	r2, [pc, #336]	; (80058ec <HAL_DMA_Init+0x1e8>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d00e      	beq.n	80057bc <HAL_DMA_Init+0xb8>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a53      	ldr	r2, [pc, #332]	; (80058f0 <HAL_DMA_Init+0x1ec>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d009      	beq.n	80057bc <HAL_DMA_Init+0xb8>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a51      	ldr	r2, [pc, #324]	; (80058f4 <HAL_DMA_Init+0x1f0>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d004      	beq.n	80057bc <HAL_DMA_Init+0xb8>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a50      	ldr	r2, [pc, #320]	; (80058f8 <HAL_DMA_Init+0x1f4>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d101      	bne.n	80057c0 <HAL_DMA_Init+0xbc>
 80057bc:	2301      	movs	r3, #1
 80057be:	e000      	b.n	80057c2 <HAL_DMA_Init+0xbe>
 80057c0:	2300      	movs	r3, #0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	f000 813c 	beq.w	8005a40 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2202      	movs	r2, #2
 80057cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a37      	ldr	r2, [pc, #220]	; (80058bc <HAL_DMA_Init+0x1b8>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d04a      	beq.n	8005878 <HAL_DMA_Init+0x174>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a36      	ldr	r2, [pc, #216]	; (80058c0 <HAL_DMA_Init+0x1bc>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d045      	beq.n	8005878 <HAL_DMA_Init+0x174>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a34      	ldr	r2, [pc, #208]	; (80058c4 <HAL_DMA_Init+0x1c0>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d040      	beq.n	8005878 <HAL_DMA_Init+0x174>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a33      	ldr	r2, [pc, #204]	; (80058c8 <HAL_DMA_Init+0x1c4>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d03b      	beq.n	8005878 <HAL_DMA_Init+0x174>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a31      	ldr	r2, [pc, #196]	; (80058cc <HAL_DMA_Init+0x1c8>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d036      	beq.n	8005878 <HAL_DMA_Init+0x174>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a30      	ldr	r2, [pc, #192]	; (80058d0 <HAL_DMA_Init+0x1cc>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d031      	beq.n	8005878 <HAL_DMA_Init+0x174>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a2e      	ldr	r2, [pc, #184]	; (80058d4 <HAL_DMA_Init+0x1d0>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d02c      	beq.n	8005878 <HAL_DMA_Init+0x174>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a2d      	ldr	r2, [pc, #180]	; (80058d8 <HAL_DMA_Init+0x1d4>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d027      	beq.n	8005878 <HAL_DMA_Init+0x174>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a2b      	ldr	r2, [pc, #172]	; (80058dc <HAL_DMA_Init+0x1d8>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d022      	beq.n	8005878 <HAL_DMA_Init+0x174>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a2a      	ldr	r2, [pc, #168]	; (80058e0 <HAL_DMA_Init+0x1dc>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d01d      	beq.n	8005878 <HAL_DMA_Init+0x174>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a28      	ldr	r2, [pc, #160]	; (80058e4 <HAL_DMA_Init+0x1e0>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d018      	beq.n	8005878 <HAL_DMA_Init+0x174>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a27      	ldr	r2, [pc, #156]	; (80058e8 <HAL_DMA_Init+0x1e4>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d013      	beq.n	8005878 <HAL_DMA_Init+0x174>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a25      	ldr	r2, [pc, #148]	; (80058ec <HAL_DMA_Init+0x1e8>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d00e      	beq.n	8005878 <HAL_DMA_Init+0x174>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a24      	ldr	r2, [pc, #144]	; (80058f0 <HAL_DMA_Init+0x1ec>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d009      	beq.n	8005878 <HAL_DMA_Init+0x174>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a22      	ldr	r2, [pc, #136]	; (80058f4 <HAL_DMA_Init+0x1f0>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d004      	beq.n	8005878 <HAL_DMA_Init+0x174>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a21      	ldr	r2, [pc, #132]	; (80058f8 <HAL_DMA_Init+0x1f4>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d108      	bne.n	800588a <HAL_DMA_Init+0x186>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f022 0201 	bic.w	r2, r2, #1
 8005886:	601a      	str	r2, [r3, #0]
 8005888:	e007      	b.n	800589a <HAL_DMA_Init+0x196>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f022 0201 	bic.w	r2, r2, #1
 8005898:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800589a:	e02f      	b.n	80058fc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800589c:	f7fe fa6c 	bl	8003d78 <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	2b05      	cmp	r3, #5
 80058a8:	d928      	bls.n	80058fc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2220      	movs	r2, #32
 80058ae:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2203      	movs	r2, #3
 80058b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e242      	b.n	8005d42 <HAL_DMA_Init+0x63e>
 80058bc:	40020010 	.word	0x40020010
 80058c0:	40020028 	.word	0x40020028
 80058c4:	40020040 	.word	0x40020040
 80058c8:	40020058 	.word	0x40020058
 80058cc:	40020070 	.word	0x40020070
 80058d0:	40020088 	.word	0x40020088
 80058d4:	400200a0 	.word	0x400200a0
 80058d8:	400200b8 	.word	0x400200b8
 80058dc:	40020410 	.word	0x40020410
 80058e0:	40020428 	.word	0x40020428
 80058e4:	40020440 	.word	0x40020440
 80058e8:	40020458 	.word	0x40020458
 80058ec:	40020470 	.word	0x40020470
 80058f0:	40020488 	.word	0x40020488
 80058f4:	400204a0 	.word	0x400204a0
 80058f8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1c8      	bne.n	800589c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	4b83      	ldr	r3, [pc, #524]	; (8005b24 <HAL_DMA_Init+0x420>)
 8005916:	4013      	ands	r3, r2
 8005918:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005922:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800592e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800593a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	4313      	orrs	r3, r2
 8005946:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594c:	2b04      	cmp	r3, #4
 800594e:	d107      	bne.n	8005960 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005958:	4313      	orrs	r3, r2
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	4313      	orrs	r3, r2
 800595e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	2b28      	cmp	r3, #40	; 0x28
 8005966:	d903      	bls.n	8005970 <HAL_DMA_Init+0x26c>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	2b2e      	cmp	r3, #46	; 0x2e
 800596e:	d91f      	bls.n	80059b0 <HAL_DMA_Init+0x2ac>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	2b3e      	cmp	r3, #62	; 0x3e
 8005976:	d903      	bls.n	8005980 <HAL_DMA_Init+0x27c>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	2b42      	cmp	r3, #66	; 0x42
 800597e:	d917      	bls.n	80059b0 <HAL_DMA_Init+0x2ac>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	2b46      	cmp	r3, #70	; 0x46
 8005986:	d903      	bls.n	8005990 <HAL_DMA_Init+0x28c>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	2b48      	cmp	r3, #72	; 0x48
 800598e:	d90f      	bls.n	80059b0 <HAL_DMA_Init+0x2ac>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	2b4e      	cmp	r3, #78	; 0x4e
 8005996:	d903      	bls.n	80059a0 <HAL_DMA_Init+0x29c>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	2b52      	cmp	r3, #82	; 0x52
 800599e:	d907      	bls.n	80059b0 <HAL_DMA_Init+0x2ac>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	2b73      	cmp	r3, #115	; 0x73
 80059a6:	d905      	bls.n	80059b4 <HAL_DMA_Init+0x2b0>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	2b77      	cmp	r3, #119	; 0x77
 80059ae:	d801      	bhi.n	80059b4 <HAL_DMA_Init+0x2b0>
 80059b0:	2301      	movs	r3, #1
 80059b2:	e000      	b.n	80059b6 <HAL_DMA_Init+0x2b2>
 80059b4:	2300      	movs	r3, #0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d003      	beq.n	80059c2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059c0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	695b      	ldr	r3, [r3, #20]
 80059d0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f023 0307 	bic.w	r3, r3, #7
 80059d8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e8:	2b04      	cmp	r3, #4
 80059ea:	d117      	bne.n	8005a1c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00e      	beq.n	8005a1c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f001 fdca 	bl	8007598 <DMA_CheckFifoParam>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d008      	beq.n	8005a1c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2240      	movs	r2, #64	; 0x40
 8005a0e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e192      	b.n	8005d42 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f001 fd05 	bl	8007434 <DMA_CalcBaseAndBitshift>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a32:	f003 031f 	and.w	r3, r3, #31
 8005a36:	223f      	movs	r2, #63	; 0x3f
 8005a38:	409a      	lsls	r2, r3
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	609a      	str	r2, [r3, #8]
 8005a3e:	e0c8      	b.n	8005bd2 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a38      	ldr	r2, [pc, #224]	; (8005b28 <HAL_DMA_Init+0x424>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d022      	beq.n	8005a90 <HAL_DMA_Init+0x38c>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a37      	ldr	r2, [pc, #220]	; (8005b2c <HAL_DMA_Init+0x428>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d01d      	beq.n	8005a90 <HAL_DMA_Init+0x38c>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a35      	ldr	r2, [pc, #212]	; (8005b30 <HAL_DMA_Init+0x42c>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d018      	beq.n	8005a90 <HAL_DMA_Init+0x38c>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a34      	ldr	r2, [pc, #208]	; (8005b34 <HAL_DMA_Init+0x430>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d013      	beq.n	8005a90 <HAL_DMA_Init+0x38c>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a32      	ldr	r2, [pc, #200]	; (8005b38 <HAL_DMA_Init+0x434>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d00e      	beq.n	8005a90 <HAL_DMA_Init+0x38c>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a31      	ldr	r2, [pc, #196]	; (8005b3c <HAL_DMA_Init+0x438>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d009      	beq.n	8005a90 <HAL_DMA_Init+0x38c>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a2f      	ldr	r2, [pc, #188]	; (8005b40 <HAL_DMA_Init+0x43c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d004      	beq.n	8005a90 <HAL_DMA_Init+0x38c>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a2e      	ldr	r2, [pc, #184]	; (8005b44 <HAL_DMA_Init+0x440>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d101      	bne.n	8005a94 <HAL_DMA_Init+0x390>
 8005a90:	2301      	movs	r3, #1
 8005a92:	e000      	b.n	8005a96 <HAL_DMA_Init+0x392>
 8005a94:	2300      	movs	r3, #0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f000 8092 	beq.w	8005bc0 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a21      	ldr	r2, [pc, #132]	; (8005b28 <HAL_DMA_Init+0x424>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d021      	beq.n	8005aea <HAL_DMA_Init+0x3e6>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a20      	ldr	r2, [pc, #128]	; (8005b2c <HAL_DMA_Init+0x428>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d01c      	beq.n	8005aea <HAL_DMA_Init+0x3e6>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a1e      	ldr	r2, [pc, #120]	; (8005b30 <HAL_DMA_Init+0x42c>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d017      	beq.n	8005aea <HAL_DMA_Init+0x3e6>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a1d      	ldr	r2, [pc, #116]	; (8005b34 <HAL_DMA_Init+0x430>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d012      	beq.n	8005aea <HAL_DMA_Init+0x3e6>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a1b      	ldr	r2, [pc, #108]	; (8005b38 <HAL_DMA_Init+0x434>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d00d      	beq.n	8005aea <HAL_DMA_Init+0x3e6>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a1a      	ldr	r2, [pc, #104]	; (8005b3c <HAL_DMA_Init+0x438>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d008      	beq.n	8005aea <HAL_DMA_Init+0x3e6>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a18      	ldr	r2, [pc, #96]	; (8005b40 <HAL_DMA_Init+0x43c>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d003      	beq.n	8005aea <HAL_DMA_Init+0x3e6>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a17      	ldr	r2, [pc, #92]	; (8005b44 <HAL_DMA_Init+0x440>)
 8005ae8:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2202      	movs	r2, #2
 8005aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	4b10      	ldr	r3, [pc, #64]	; (8005b48 <HAL_DMA_Init+0x444>)
 8005b06:	4013      	ands	r3, r2
 8005b08:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	2b40      	cmp	r3, #64	; 0x40
 8005b10:	d01c      	beq.n	8005b4c <HAL_DMA_Init+0x448>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	2b80      	cmp	r3, #128	; 0x80
 8005b18:	d102      	bne.n	8005b20 <HAL_DMA_Init+0x41c>
 8005b1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005b1e:	e016      	b.n	8005b4e <HAL_DMA_Init+0x44a>
 8005b20:	2300      	movs	r3, #0
 8005b22:	e014      	b.n	8005b4e <HAL_DMA_Init+0x44a>
 8005b24:	fe10803f 	.word	0xfe10803f
 8005b28:	58025408 	.word	0x58025408
 8005b2c:	5802541c 	.word	0x5802541c
 8005b30:	58025430 	.word	0x58025430
 8005b34:	58025444 	.word	0x58025444
 8005b38:	58025458 	.word	0x58025458
 8005b3c:	5802546c 	.word	0x5802546c
 8005b40:	58025480 	.word	0x58025480
 8005b44:	58025494 	.word	0x58025494
 8005b48:	fffe000f 	.word	0xfffe000f
 8005b4c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	68d2      	ldr	r2, [r2, #12]
 8005b52:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005b54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005b5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005b64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005b6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005b74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005b7c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	461a      	mov	r2, r3
 8005b92:	4b6e      	ldr	r3, [pc, #440]	; (8005d4c <HAL_DMA_Init+0x648>)
 8005b94:	4413      	add	r3, r2
 8005b96:	4a6e      	ldr	r2, [pc, #440]	; (8005d50 <HAL_DMA_Init+0x64c>)
 8005b98:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9c:	091b      	lsrs	r3, r3, #4
 8005b9e:	009a      	lsls	r2, r3, #2
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f001 fc45 	bl	8007434 <DMA_CalcBaseAndBitshift>
 8005baa:	4603      	mov	r3, r0
 8005bac:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bb2:	f003 031f 	and.w	r3, r3, #31
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	409a      	lsls	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	605a      	str	r2, [r3, #4]
 8005bbe:	e008      	b.n	8005bd2 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2240      	movs	r2, #64	; 0x40
 8005bc4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2203      	movs	r2, #3
 8005bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e0b7      	b.n	8005d42 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a5f      	ldr	r2, [pc, #380]	; (8005d54 <HAL_DMA_Init+0x650>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d072      	beq.n	8005cc2 <HAL_DMA_Init+0x5be>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a5d      	ldr	r2, [pc, #372]	; (8005d58 <HAL_DMA_Init+0x654>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d06d      	beq.n	8005cc2 <HAL_DMA_Init+0x5be>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a5c      	ldr	r2, [pc, #368]	; (8005d5c <HAL_DMA_Init+0x658>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d068      	beq.n	8005cc2 <HAL_DMA_Init+0x5be>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a5a      	ldr	r2, [pc, #360]	; (8005d60 <HAL_DMA_Init+0x65c>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d063      	beq.n	8005cc2 <HAL_DMA_Init+0x5be>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a59      	ldr	r2, [pc, #356]	; (8005d64 <HAL_DMA_Init+0x660>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d05e      	beq.n	8005cc2 <HAL_DMA_Init+0x5be>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a57      	ldr	r2, [pc, #348]	; (8005d68 <HAL_DMA_Init+0x664>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d059      	beq.n	8005cc2 <HAL_DMA_Init+0x5be>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a56      	ldr	r2, [pc, #344]	; (8005d6c <HAL_DMA_Init+0x668>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d054      	beq.n	8005cc2 <HAL_DMA_Init+0x5be>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a54      	ldr	r2, [pc, #336]	; (8005d70 <HAL_DMA_Init+0x66c>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d04f      	beq.n	8005cc2 <HAL_DMA_Init+0x5be>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a53      	ldr	r2, [pc, #332]	; (8005d74 <HAL_DMA_Init+0x670>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d04a      	beq.n	8005cc2 <HAL_DMA_Init+0x5be>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a51      	ldr	r2, [pc, #324]	; (8005d78 <HAL_DMA_Init+0x674>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d045      	beq.n	8005cc2 <HAL_DMA_Init+0x5be>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a50      	ldr	r2, [pc, #320]	; (8005d7c <HAL_DMA_Init+0x678>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d040      	beq.n	8005cc2 <HAL_DMA_Init+0x5be>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a4e      	ldr	r2, [pc, #312]	; (8005d80 <HAL_DMA_Init+0x67c>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d03b      	beq.n	8005cc2 <HAL_DMA_Init+0x5be>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a4d      	ldr	r2, [pc, #308]	; (8005d84 <HAL_DMA_Init+0x680>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d036      	beq.n	8005cc2 <HAL_DMA_Init+0x5be>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a4b      	ldr	r2, [pc, #300]	; (8005d88 <HAL_DMA_Init+0x684>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d031      	beq.n	8005cc2 <HAL_DMA_Init+0x5be>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a4a      	ldr	r2, [pc, #296]	; (8005d8c <HAL_DMA_Init+0x688>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d02c      	beq.n	8005cc2 <HAL_DMA_Init+0x5be>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a48      	ldr	r2, [pc, #288]	; (8005d90 <HAL_DMA_Init+0x68c>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d027      	beq.n	8005cc2 <HAL_DMA_Init+0x5be>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a47      	ldr	r2, [pc, #284]	; (8005d94 <HAL_DMA_Init+0x690>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d022      	beq.n	8005cc2 <HAL_DMA_Init+0x5be>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a45      	ldr	r2, [pc, #276]	; (8005d98 <HAL_DMA_Init+0x694>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d01d      	beq.n	8005cc2 <HAL_DMA_Init+0x5be>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a44      	ldr	r2, [pc, #272]	; (8005d9c <HAL_DMA_Init+0x698>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d018      	beq.n	8005cc2 <HAL_DMA_Init+0x5be>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a42      	ldr	r2, [pc, #264]	; (8005da0 <HAL_DMA_Init+0x69c>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d013      	beq.n	8005cc2 <HAL_DMA_Init+0x5be>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a41      	ldr	r2, [pc, #260]	; (8005da4 <HAL_DMA_Init+0x6a0>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d00e      	beq.n	8005cc2 <HAL_DMA_Init+0x5be>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a3f      	ldr	r2, [pc, #252]	; (8005da8 <HAL_DMA_Init+0x6a4>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d009      	beq.n	8005cc2 <HAL_DMA_Init+0x5be>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a3e      	ldr	r2, [pc, #248]	; (8005dac <HAL_DMA_Init+0x6a8>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d004      	beq.n	8005cc2 <HAL_DMA_Init+0x5be>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a3c      	ldr	r2, [pc, #240]	; (8005db0 <HAL_DMA_Init+0x6ac>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d101      	bne.n	8005cc6 <HAL_DMA_Init+0x5c2>
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e000      	b.n	8005cc8 <HAL_DMA_Init+0x5c4>
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d032      	beq.n	8005d32 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f001 fcdf 	bl	8007690 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	2b80      	cmp	r3, #128	; 0x80
 8005cd8:	d102      	bne.n	8005ce0 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ce8:	b2d2      	uxtb	r2, r2
 8005cea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005cf4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d010      	beq.n	8005d20 <HAL_DMA_Init+0x61c>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	2b08      	cmp	r3, #8
 8005d04:	d80c      	bhi.n	8005d20 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f001 fd5c 	bl	80077c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d10:	2200      	movs	r2, #0
 8005d12:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005d1c:	605a      	str	r2, [r3, #4]
 8005d1e:	e008      	b.n	8005d32 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3718      	adds	r7, #24
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	a7fdabf8 	.word	0xa7fdabf8
 8005d50:	cccccccd 	.word	0xcccccccd
 8005d54:	40020010 	.word	0x40020010
 8005d58:	40020028 	.word	0x40020028
 8005d5c:	40020040 	.word	0x40020040
 8005d60:	40020058 	.word	0x40020058
 8005d64:	40020070 	.word	0x40020070
 8005d68:	40020088 	.word	0x40020088
 8005d6c:	400200a0 	.word	0x400200a0
 8005d70:	400200b8 	.word	0x400200b8
 8005d74:	40020410 	.word	0x40020410
 8005d78:	40020428 	.word	0x40020428
 8005d7c:	40020440 	.word	0x40020440
 8005d80:	40020458 	.word	0x40020458
 8005d84:	40020470 	.word	0x40020470
 8005d88:	40020488 	.word	0x40020488
 8005d8c:	400204a0 	.word	0x400204a0
 8005d90:	400204b8 	.word	0x400204b8
 8005d94:	58025408 	.word	0x58025408
 8005d98:	5802541c 	.word	0x5802541c
 8005d9c:	58025430 	.word	0x58025430
 8005da0:	58025444 	.word	0x58025444
 8005da4:	58025458 	.word	0x58025458
 8005da8:	5802546c 	.word	0x5802546c
 8005dac:	58025480 	.word	0x58025480
 8005db0:	58025494 	.word	0x58025494

08005db4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]
 8005dc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d101      	bne.n	8005dd0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e226      	b.n	800621e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d101      	bne.n	8005dde <HAL_DMA_Start_IT+0x2a>
 8005dda:	2302      	movs	r3, #2
 8005ddc:	e21f      	b.n	800621e <HAL_DMA_Start_IT+0x46a>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	f040 820a 	bne.w	8006208 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2202      	movs	r2, #2
 8005df8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a68      	ldr	r2, [pc, #416]	; (8005fa8 <HAL_DMA_Start_IT+0x1f4>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d04a      	beq.n	8005ea2 <HAL_DMA_Start_IT+0xee>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a66      	ldr	r2, [pc, #408]	; (8005fac <HAL_DMA_Start_IT+0x1f8>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d045      	beq.n	8005ea2 <HAL_DMA_Start_IT+0xee>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a65      	ldr	r2, [pc, #404]	; (8005fb0 <HAL_DMA_Start_IT+0x1fc>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d040      	beq.n	8005ea2 <HAL_DMA_Start_IT+0xee>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a63      	ldr	r2, [pc, #396]	; (8005fb4 <HAL_DMA_Start_IT+0x200>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d03b      	beq.n	8005ea2 <HAL_DMA_Start_IT+0xee>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a62      	ldr	r2, [pc, #392]	; (8005fb8 <HAL_DMA_Start_IT+0x204>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d036      	beq.n	8005ea2 <HAL_DMA_Start_IT+0xee>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a60      	ldr	r2, [pc, #384]	; (8005fbc <HAL_DMA_Start_IT+0x208>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d031      	beq.n	8005ea2 <HAL_DMA_Start_IT+0xee>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a5f      	ldr	r2, [pc, #380]	; (8005fc0 <HAL_DMA_Start_IT+0x20c>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d02c      	beq.n	8005ea2 <HAL_DMA_Start_IT+0xee>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a5d      	ldr	r2, [pc, #372]	; (8005fc4 <HAL_DMA_Start_IT+0x210>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d027      	beq.n	8005ea2 <HAL_DMA_Start_IT+0xee>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a5c      	ldr	r2, [pc, #368]	; (8005fc8 <HAL_DMA_Start_IT+0x214>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d022      	beq.n	8005ea2 <HAL_DMA_Start_IT+0xee>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a5a      	ldr	r2, [pc, #360]	; (8005fcc <HAL_DMA_Start_IT+0x218>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d01d      	beq.n	8005ea2 <HAL_DMA_Start_IT+0xee>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a59      	ldr	r2, [pc, #356]	; (8005fd0 <HAL_DMA_Start_IT+0x21c>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d018      	beq.n	8005ea2 <HAL_DMA_Start_IT+0xee>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a57      	ldr	r2, [pc, #348]	; (8005fd4 <HAL_DMA_Start_IT+0x220>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d013      	beq.n	8005ea2 <HAL_DMA_Start_IT+0xee>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a56      	ldr	r2, [pc, #344]	; (8005fd8 <HAL_DMA_Start_IT+0x224>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d00e      	beq.n	8005ea2 <HAL_DMA_Start_IT+0xee>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a54      	ldr	r2, [pc, #336]	; (8005fdc <HAL_DMA_Start_IT+0x228>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d009      	beq.n	8005ea2 <HAL_DMA_Start_IT+0xee>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a53      	ldr	r2, [pc, #332]	; (8005fe0 <HAL_DMA_Start_IT+0x22c>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d004      	beq.n	8005ea2 <HAL_DMA_Start_IT+0xee>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a51      	ldr	r2, [pc, #324]	; (8005fe4 <HAL_DMA_Start_IT+0x230>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d108      	bne.n	8005eb4 <HAL_DMA_Start_IT+0x100>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f022 0201 	bic.w	r2, r2, #1
 8005eb0:	601a      	str	r2, [r3, #0]
 8005eb2:	e007      	b.n	8005ec4 <HAL_DMA_Start_IT+0x110>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f022 0201 	bic.w	r2, r2, #1
 8005ec2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	68b9      	ldr	r1, [r7, #8]
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	f001 f906 	bl	80070dc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a34      	ldr	r2, [pc, #208]	; (8005fa8 <HAL_DMA_Start_IT+0x1f4>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d04a      	beq.n	8005f70 <HAL_DMA_Start_IT+0x1bc>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a33      	ldr	r2, [pc, #204]	; (8005fac <HAL_DMA_Start_IT+0x1f8>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d045      	beq.n	8005f70 <HAL_DMA_Start_IT+0x1bc>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a31      	ldr	r2, [pc, #196]	; (8005fb0 <HAL_DMA_Start_IT+0x1fc>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d040      	beq.n	8005f70 <HAL_DMA_Start_IT+0x1bc>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a30      	ldr	r2, [pc, #192]	; (8005fb4 <HAL_DMA_Start_IT+0x200>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d03b      	beq.n	8005f70 <HAL_DMA_Start_IT+0x1bc>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a2e      	ldr	r2, [pc, #184]	; (8005fb8 <HAL_DMA_Start_IT+0x204>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d036      	beq.n	8005f70 <HAL_DMA_Start_IT+0x1bc>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a2d      	ldr	r2, [pc, #180]	; (8005fbc <HAL_DMA_Start_IT+0x208>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d031      	beq.n	8005f70 <HAL_DMA_Start_IT+0x1bc>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a2b      	ldr	r2, [pc, #172]	; (8005fc0 <HAL_DMA_Start_IT+0x20c>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d02c      	beq.n	8005f70 <HAL_DMA_Start_IT+0x1bc>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a2a      	ldr	r2, [pc, #168]	; (8005fc4 <HAL_DMA_Start_IT+0x210>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d027      	beq.n	8005f70 <HAL_DMA_Start_IT+0x1bc>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a28      	ldr	r2, [pc, #160]	; (8005fc8 <HAL_DMA_Start_IT+0x214>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d022      	beq.n	8005f70 <HAL_DMA_Start_IT+0x1bc>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a27      	ldr	r2, [pc, #156]	; (8005fcc <HAL_DMA_Start_IT+0x218>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d01d      	beq.n	8005f70 <HAL_DMA_Start_IT+0x1bc>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a25      	ldr	r2, [pc, #148]	; (8005fd0 <HAL_DMA_Start_IT+0x21c>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d018      	beq.n	8005f70 <HAL_DMA_Start_IT+0x1bc>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a24      	ldr	r2, [pc, #144]	; (8005fd4 <HAL_DMA_Start_IT+0x220>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d013      	beq.n	8005f70 <HAL_DMA_Start_IT+0x1bc>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a22      	ldr	r2, [pc, #136]	; (8005fd8 <HAL_DMA_Start_IT+0x224>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d00e      	beq.n	8005f70 <HAL_DMA_Start_IT+0x1bc>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a21      	ldr	r2, [pc, #132]	; (8005fdc <HAL_DMA_Start_IT+0x228>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d009      	beq.n	8005f70 <HAL_DMA_Start_IT+0x1bc>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a1f      	ldr	r2, [pc, #124]	; (8005fe0 <HAL_DMA_Start_IT+0x22c>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d004      	beq.n	8005f70 <HAL_DMA_Start_IT+0x1bc>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a1e      	ldr	r2, [pc, #120]	; (8005fe4 <HAL_DMA_Start_IT+0x230>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d101      	bne.n	8005f74 <HAL_DMA_Start_IT+0x1c0>
 8005f70:	2301      	movs	r3, #1
 8005f72:	e000      	b.n	8005f76 <HAL_DMA_Start_IT+0x1c2>
 8005f74:	2300      	movs	r3, #0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d036      	beq.n	8005fe8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f023 021e 	bic.w	r2, r3, #30
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f042 0216 	orr.w	r2, r2, #22
 8005f8c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d03e      	beq.n	8006014 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f042 0208 	orr.w	r2, r2, #8
 8005fa4:	601a      	str	r2, [r3, #0]
 8005fa6:	e035      	b.n	8006014 <HAL_DMA_Start_IT+0x260>
 8005fa8:	40020010 	.word	0x40020010
 8005fac:	40020028 	.word	0x40020028
 8005fb0:	40020040 	.word	0x40020040
 8005fb4:	40020058 	.word	0x40020058
 8005fb8:	40020070 	.word	0x40020070
 8005fbc:	40020088 	.word	0x40020088
 8005fc0:	400200a0 	.word	0x400200a0
 8005fc4:	400200b8 	.word	0x400200b8
 8005fc8:	40020410 	.word	0x40020410
 8005fcc:	40020428 	.word	0x40020428
 8005fd0:	40020440 	.word	0x40020440
 8005fd4:	40020458 	.word	0x40020458
 8005fd8:	40020470 	.word	0x40020470
 8005fdc:	40020488 	.word	0x40020488
 8005fe0:	400204a0 	.word	0x400204a0
 8005fe4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f023 020e 	bic.w	r2, r3, #14
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f042 020a 	orr.w	r2, r2, #10
 8005ffa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006000:	2b00      	cmp	r3, #0
 8006002:	d007      	beq.n	8006014 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f042 0204 	orr.w	r2, r2, #4
 8006012:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a83      	ldr	r2, [pc, #524]	; (8006228 <HAL_DMA_Start_IT+0x474>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d072      	beq.n	8006104 <HAL_DMA_Start_IT+0x350>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a82      	ldr	r2, [pc, #520]	; (800622c <HAL_DMA_Start_IT+0x478>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d06d      	beq.n	8006104 <HAL_DMA_Start_IT+0x350>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a80      	ldr	r2, [pc, #512]	; (8006230 <HAL_DMA_Start_IT+0x47c>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d068      	beq.n	8006104 <HAL_DMA_Start_IT+0x350>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a7f      	ldr	r2, [pc, #508]	; (8006234 <HAL_DMA_Start_IT+0x480>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d063      	beq.n	8006104 <HAL_DMA_Start_IT+0x350>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a7d      	ldr	r2, [pc, #500]	; (8006238 <HAL_DMA_Start_IT+0x484>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d05e      	beq.n	8006104 <HAL_DMA_Start_IT+0x350>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a7c      	ldr	r2, [pc, #496]	; (800623c <HAL_DMA_Start_IT+0x488>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d059      	beq.n	8006104 <HAL_DMA_Start_IT+0x350>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a7a      	ldr	r2, [pc, #488]	; (8006240 <HAL_DMA_Start_IT+0x48c>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d054      	beq.n	8006104 <HAL_DMA_Start_IT+0x350>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a79      	ldr	r2, [pc, #484]	; (8006244 <HAL_DMA_Start_IT+0x490>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d04f      	beq.n	8006104 <HAL_DMA_Start_IT+0x350>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a77      	ldr	r2, [pc, #476]	; (8006248 <HAL_DMA_Start_IT+0x494>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d04a      	beq.n	8006104 <HAL_DMA_Start_IT+0x350>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a76      	ldr	r2, [pc, #472]	; (800624c <HAL_DMA_Start_IT+0x498>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d045      	beq.n	8006104 <HAL_DMA_Start_IT+0x350>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a74      	ldr	r2, [pc, #464]	; (8006250 <HAL_DMA_Start_IT+0x49c>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d040      	beq.n	8006104 <HAL_DMA_Start_IT+0x350>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a73      	ldr	r2, [pc, #460]	; (8006254 <HAL_DMA_Start_IT+0x4a0>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d03b      	beq.n	8006104 <HAL_DMA_Start_IT+0x350>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a71      	ldr	r2, [pc, #452]	; (8006258 <HAL_DMA_Start_IT+0x4a4>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d036      	beq.n	8006104 <HAL_DMA_Start_IT+0x350>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a70      	ldr	r2, [pc, #448]	; (800625c <HAL_DMA_Start_IT+0x4a8>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d031      	beq.n	8006104 <HAL_DMA_Start_IT+0x350>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a6e      	ldr	r2, [pc, #440]	; (8006260 <HAL_DMA_Start_IT+0x4ac>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d02c      	beq.n	8006104 <HAL_DMA_Start_IT+0x350>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a6d      	ldr	r2, [pc, #436]	; (8006264 <HAL_DMA_Start_IT+0x4b0>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d027      	beq.n	8006104 <HAL_DMA_Start_IT+0x350>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a6b      	ldr	r2, [pc, #428]	; (8006268 <HAL_DMA_Start_IT+0x4b4>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d022      	beq.n	8006104 <HAL_DMA_Start_IT+0x350>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a6a      	ldr	r2, [pc, #424]	; (800626c <HAL_DMA_Start_IT+0x4b8>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d01d      	beq.n	8006104 <HAL_DMA_Start_IT+0x350>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a68      	ldr	r2, [pc, #416]	; (8006270 <HAL_DMA_Start_IT+0x4bc>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d018      	beq.n	8006104 <HAL_DMA_Start_IT+0x350>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a67      	ldr	r2, [pc, #412]	; (8006274 <HAL_DMA_Start_IT+0x4c0>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d013      	beq.n	8006104 <HAL_DMA_Start_IT+0x350>
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a65      	ldr	r2, [pc, #404]	; (8006278 <HAL_DMA_Start_IT+0x4c4>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d00e      	beq.n	8006104 <HAL_DMA_Start_IT+0x350>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a64      	ldr	r2, [pc, #400]	; (800627c <HAL_DMA_Start_IT+0x4c8>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d009      	beq.n	8006104 <HAL_DMA_Start_IT+0x350>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a62      	ldr	r2, [pc, #392]	; (8006280 <HAL_DMA_Start_IT+0x4cc>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d004      	beq.n	8006104 <HAL_DMA_Start_IT+0x350>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a61      	ldr	r2, [pc, #388]	; (8006284 <HAL_DMA_Start_IT+0x4d0>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d101      	bne.n	8006108 <HAL_DMA_Start_IT+0x354>
 8006104:	2301      	movs	r3, #1
 8006106:	e000      	b.n	800610a <HAL_DMA_Start_IT+0x356>
 8006108:	2300      	movs	r3, #0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d01a      	beq.n	8006144 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006118:	2b00      	cmp	r3, #0
 800611a:	d007      	beq.n	800612c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006126:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800612a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006130:	2b00      	cmp	r3, #0
 8006132:	d007      	beq.n	8006144 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800613e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006142:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a37      	ldr	r2, [pc, #220]	; (8006228 <HAL_DMA_Start_IT+0x474>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d04a      	beq.n	80061e4 <HAL_DMA_Start_IT+0x430>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a36      	ldr	r2, [pc, #216]	; (800622c <HAL_DMA_Start_IT+0x478>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d045      	beq.n	80061e4 <HAL_DMA_Start_IT+0x430>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a34      	ldr	r2, [pc, #208]	; (8006230 <HAL_DMA_Start_IT+0x47c>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d040      	beq.n	80061e4 <HAL_DMA_Start_IT+0x430>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a33      	ldr	r2, [pc, #204]	; (8006234 <HAL_DMA_Start_IT+0x480>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d03b      	beq.n	80061e4 <HAL_DMA_Start_IT+0x430>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a31      	ldr	r2, [pc, #196]	; (8006238 <HAL_DMA_Start_IT+0x484>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d036      	beq.n	80061e4 <HAL_DMA_Start_IT+0x430>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a30      	ldr	r2, [pc, #192]	; (800623c <HAL_DMA_Start_IT+0x488>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d031      	beq.n	80061e4 <HAL_DMA_Start_IT+0x430>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a2e      	ldr	r2, [pc, #184]	; (8006240 <HAL_DMA_Start_IT+0x48c>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d02c      	beq.n	80061e4 <HAL_DMA_Start_IT+0x430>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a2d      	ldr	r2, [pc, #180]	; (8006244 <HAL_DMA_Start_IT+0x490>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d027      	beq.n	80061e4 <HAL_DMA_Start_IT+0x430>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a2b      	ldr	r2, [pc, #172]	; (8006248 <HAL_DMA_Start_IT+0x494>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d022      	beq.n	80061e4 <HAL_DMA_Start_IT+0x430>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a2a      	ldr	r2, [pc, #168]	; (800624c <HAL_DMA_Start_IT+0x498>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d01d      	beq.n	80061e4 <HAL_DMA_Start_IT+0x430>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a28      	ldr	r2, [pc, #160]	; (8006250 <HAL_DMA_Start_IT+0x49c>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d018      	beq.n	80061e4 <HAL_DMA_Start_IT+0x430>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a27      	ldr	r2, [pc, #156]	; (8006254 <HAL_DMA_Start_IT+0x4a0>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d013      	beq.n	80061e4 <HAL_DMA_Start_IT+0x430>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a25      	ldr	r2, [pc, #148]	; (8006258 <HAL_DMA_Start_IT+0x4a4>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d00e      	beq.n	80061e4 <HAL_DMA_Start_IT+0x430>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a24      	ldr	r2, [pc, #144]	; (800625c <HAL_DMA_Start_IT+0x4a8>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d009      	beq.n	80061e4 <HAL_DMA_Start_IT+0x430>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a22      	ldr	r2, [pc, #136]	; (8006260 <HAL_DMA_Start_IT+0x4ac>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d004      	beq.n	80061e4 <HAL_DMA_Start_IT+0x430>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a21      	ldr	r2, [pc, #132]	; (8006264 <HAL_DMA_Start_IT+0x4b0>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d108      	bne.n	80061f6 <HAL_DMA_Start_IT+0x442>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f042 0201 	orr.w	r2, r2, #1
 80061f2:	601a      	str	r2, [r3, #0]
 80061f4:	e012      	b.n	800621c <HAL_DMA_Start_IT+0x468>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f042 0201 	orr.w	r2, r2, #1
 8006204:	601a      	str	r2, [r3, #0]
 8006206:	e009      	b.n	800621c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800620e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800621c:	7dfb      	ldrb	r3, [r7, #23]
}
 800621e:	4618      	mov	r0, r3
 8006220:	3718      	adds	r7, #24
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	40020010 	.word	0x40020010
 800622c:	40020028 	.word	0x40020028
 8006230:	40020040 	.word	0x40020040
 8006234:	40020058 	.word	0x40020058
 8006238:	40020070 	.word	0x40020070
 800623c:	40020088 	.word	0x40020088
 8006240:	400200a0 	.word	0x400200a0
 8006244:	400200b8 	.word	0x400200b8
 8006248:	40020410 	.word	0x40020410
 800624c:	40020428 	.word	0x40020428
 8006250:	40020440 	.word	0x40020440
 8006254:	40020458 	.word	0x40020458
 8006258:	40020470 	.word	0x40020470
 800625c:	40020488 	.word	0x40020488
 8006260:	400204a0 	.word	0x400204a0
 8006264:	400204b8 	.word	0x400204b8
 8006268:	58025408 	.word	0x58025408
 800626c:	5802541c 	.word	0x5802541c
 8006270:	58025430 	.word	0x58025430
 8006274:	58025444 	.word	0x58025444
 8006278:	58025458 	.word	0x58025458
 800627c:	5802546c 	.word	0x5802546c
 8006280:	58025480 	.word	0x58025480
 8006284:	58025494 	.word	0x58025494

08006288 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b08a      	sub	sp, #40	; 0x28
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006290:	2300      	movs	r3, #0
 8006292:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006294:	4b67      	ldr	r3, [pc, #412]	; (8006434 <HAL_DMA_IRQHandler+0x1ac>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a67      	ldr	r2, [pc, #412]	; (8006438 <HAL_DMA_IRQHandler+0x1b0>)
 800629a:	fba2 2303 	umull	r2, r3, r2, r3
 800629e:	0a9b      	lsrs	r3, r3, #10
 80062a0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062a6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ac:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80062ae:	6a3b      	ldr	r3, [r7, #32]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a5f      	ldr	r2, [pc, #380]	; (800643c <HAL_DMA_IRQHandler+0x1b4>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d04a      	beq.n	800635a <HAL_DMA_IRQHandler+0xd2>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a5d      	ldr	r2, [pc, #372]	; (8006440 <HAL_DMA_IRQHandler+0x1b8>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d045      	beq.n	800635a <HAL_DMA_IRQHandler+0xd2>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a5c      	ldr	r2, [pc, #368]	; (8006444 <HAL_DMA_IRQHandler+0x1bc>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d040      	beq.n	800635a <HAL_DMA_IRQHandler+0xd2>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a5a      	ldr	r2, [pc, #360]	; (8006448 <HAL_DMA_IRQHandler+0x1c0>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d03b      	beq.n	800635a <HAL_DMA_IRQHandler+0xd2>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a59      	ldr	r2, [pc, #356]	; (800644c <HAL_DMA_IRQHandler+0x1c4>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d036      	beq.n	800635a <HAL_DMA_IRQHandler+0xd2>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a57      	ldr	r2, [pc, #348]	; (8006450 <HAL_DMA_IRQHandler+0x1c8>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d031      	beq.n	800635a <HAL_DMA_IRQHandler+0xd2>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a56      	ldr	r2, [pc, #344]	; (8006454 <HAL_DMA_IRQHandler+0x1cc>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d02c      	beq.n	800635a <HAL_DMA_IRQHandler+0xd2>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a54      	ldr	r2, [pc, #336]	; (8006458 <HAL_DMA_IRQHandler+0x1d0>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d027      	beq.n	800635a <HAL_DMA_IRQHandler+0xd2>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a53      	ldr	r2, [pc, #332]	; (800645c <HAL_DMA_IRQHandler+0x1d4>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d022      	beq.n	800635a <HAL_DMA_IRQHandler+0xd2>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a51      	ldr	r2, [pc, #324]	; (8006460 <HAL_DMA_IRQHandler+0x1d8>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d01d      	beq.n	800635a <HAL_DMA_IRQHandler+0xd2>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a50      	ldr	r2, [pc, #320]	; (8006464 <HAL_DMA_IRQHandler+0x1dc>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d018      	beq.n	800635a <HAL_DMA_IRQHandler+0xd2>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a4e      	ldr	r2, [pc, #312]	; (8006468 <HAL_DMA_IRQHandler+0x1e0>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d013      	beq.n	800635a <HAL_DMA_IRQHandler+0xd2>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a4d      	ldr	r2, [pc, #308]	; (800646c <HAL_DMA_IRQHandler+0x1e4>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d00e      	beq.n	800635a <HAL_DMA_IRQHandler+0xd2>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a4b      	ldr	r2, [pc, #300]	; (8006470 <HAL_DMA_IRQHandler+0x1e8>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d009      	beq.n	800635a <HAL_DMA_IRQHandler+0xd2>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a4a      	ldr	r2, [pc, #296]	; (8006474 <HAL_DMA_IRQHandler+0x1ec>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d004      	beq.n	800635a <HAL_DMA_IRQHandler+0xd2>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a48      	ldr	r2, [pc, #288]	; (8006478 <HAL_DMA_IRQHandler+0x1f0>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d101      	bne.n	800635e <HAL_DMA_IRQHandler+0xd6>
 800635a:	2301      	movs	r3, #1
 800635c:	e000      	b.n	8006360 <HAL_DMA_IRQHandler+0xd8>
 800635e:	2300      	movs	r3, #0
 8006360:	2b00      	cmp	r3, #0
 8006362:	f000 842b 	beq.w	8006bbc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800636a:	f003 031f 	and.w	r3, r3, #31
 800636e:	2208      	movs	r2, #8
 8006370:	409a      	lsls	r2, r3
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	4013      	ands	r3, r2
 8006376:	2b00      	cmp	r3, #0
 8006378:	f000 80a2 	beq.w	80064c0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a2e      	ldr	r2, [pc, #184]	; (800643c <HAL_DMA_IRQHandler+0x1b4>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d04a      	beq.n	800641c <HAL_DMA_IRQHandler+0x194>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a2d      	ldr	r2, [pc, #180]	; (8006440 <HAL_DMA_IRQHandler+0x1b8>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d045      	beq.n	800641c <HAL_DMA_IRQHandler+0x194>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a2b      	ldr	r2, [pc, #172]	; (8006444 <HAL_DMA_IRQHandler+0x1bc>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d040      	beq.n	800641c <HAL_DMA_IRQHandler+0x194>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a2a      	ldr	r2, [pc, #168]	; (8006448 <HAL_DMA_IRQHandler+0x1c0>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d03b      	beq.n	800641c <HAL_DMA_IRQHandler+0x194>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a28      	ldr	r2, [pc, #160]	; (800644c <HAL_DMA_IRQHandler+0x1c4>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d036      	beq.n	800641c <HAL_DMA_IRQHandler+0x194>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a27      	ldr	r2, [pc, #156]	; (8006450 <HAL_DMA_IRQHandler+0x1c8>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d031      	beq.n	800641c <HAL_DMA_IRQHandler+0x194>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a25      	ldr	r2, [pc, #148]	; (8006454 <HAL_DMA_IRQHandler+0x1cc>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d02c      	beq.n	800641c <HAL_DMA_IRQHandler+0x194>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a24      	ldr	r2, [pc, #144]	; (8006458 <HAL_DMA_IRQHandler+0x1d0>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d027      	beq.n	800641c <HAL_DMA_IRQHandler+0x194>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a22      	ldr	r2, [pc, #136]	; (800645c <HAL_DMA_IRQHandler+0x1d4>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d022      	beq.n	800641c <HAL_DMA_IRQHandler+0x194>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a21      	ldr	r2, [pc, #132]	; (8006460 <HAL_DMA_IRQHandler+0x1d8>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d01d      	beq.n	800641c <HAL_DMA_IRQHandler+0x194>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a1f      	ldr	r2, [pc, #124]	; (8006464 <HAL_DMA_IRQHandler+0x1dc>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d018      	beq.n	800641c <HAL_DMA_IRQHandler+0x194>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a1e      	ldr	r2, [pc, #120]	; (8006468 <HAL_DMA_IRQHandler+0x1e0>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d013      	beq.n	800641c <HAL_DMA_IRQHandler+0x194>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a1c      	ldr	r2, [pc, #112]	; (800646c <HAL_DMA_IRQHandler+0x1e4>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d00e      	beq.n	800641c <HAL_DMA_IRQHandler+0x194>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a1b      	ldr	r2, [pc, #108]	; (8006470 <HAL_DMA_IRQHandler+0x1e8>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d009      	beq.n	800641c <HAL_DMA_IRQHandler+0x194>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a19      	ldr	r2, [pc, #100]	; (8006474 <HAL_DMA_IRQHandler+0x1ec>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d004      	beq.n	800641c <HAL_DMA_IRQHandler+0x194>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a18      	ldr	r2, [pc, #96]	; (8006478 <HAL_DMA_IRQHandler+0x1f0>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d12f      	bne.n	800647c <HAL_DMA_IRQHandler+0x1f4>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0304 	and.w	r3, r3, #4
 8006426:	2b00      	cmp	r3, #0
 8006428:	bf14      	ite	ne
 800642a:	2301      	movne	r3, #1
 800642c:	2300      	moveq	r3, #0
 800642e:	b2db      	uxtb	r3, r3
 8006430:	e02e      	b.n	8006490 <HAL_DMA_IRQHandler+0x208>
 8006432:	bf00      	nop
 8006434:	24000000 	.word	0x24000000
 8006438:	1b4e81b5 	.word	0x1b4e81b5
 800643c:	40020010 	.word	0x40020010
 8006440:	40020028 	.word	0x40020028
 8006444:	40020040 	.word	0x40020040
 8006448:	40020058 	.word	0x40020058
 800644c:	40020070 	.word	0x40020070
 8006450:	40020088 	.word	0x40020088
 8006454:	400200a0 	.word	0x400200a0
 8006458:	400200b8 	.word	0x400200b8
 800645c:	40020410 	.word	0x40020410
 8006460:	40020428 	.word	0x40020428
 8006464:	40020440 	.word	0x40020440
 8006468:	40020458 	.word	0x40020458
 800646c:	40020470 	.word	0x40020470
 8006470:	40020488 	.word	0x40020488
 8006474:	400204a0 	.word	0x400204a0
 8006478:	400204b8 	.word	0x400204b8
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0308 	and.w	r3, r3, #8
 8006486:	2b00      	cmp	r3, #0
 8006488:	bf14      	ite	ne
 800648a:	2301      	movne	r3, #1
 800648c:	2300      	moveq	r3, #0
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b00      	cmp	r3, #0
 8006492:	d015      	beq.n	80064c0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f022 0204 	bic.w	r2, r2, #4
 80064a2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064a8:	f003 031f 	and.w	r3, r3, #31
 80064ac:	2208      	movs	r2, #8
 80064ae:	409a      	lsls	r2, r3
 80064b0:	6a3b      	ldr	r3, [r7, #32]
 80064b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b8:	f043 0201 	orr.w	r2, r3, #1
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064c4:	f003 031f 	and.w	r3, r3, #31
 80064c8:	69ba      	ldr	r2, [r7, #24]
 80064ca:	fa22 f303 	lsr.w	r3, r2, r3
 80064ce:	f003 0301 	and.w	r3, r3, #1
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d06e      	beq.n	80065b4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a69      	ldr	r2, [pc, #420]	; (8006680 <HAL_DMA_IRQHandler+0x3f8>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d04a      	beq.n	8006576 <HAL_DMA_IRQHandler+0x2ee>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a67      	ldr	r2, [pc, #412]	; (8006684 <HAL_DMA_IRQHandler+0x3fc>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d045      	beq.n	8006576 <HAL_DMA_IRQHandler+0x2ee>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a66      	ldr	r2, [pc, #408]	; (8006688 <HAL_DMA_IRQHandler+0x400>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d040      	beq.n	8006576 <HAL_DMA_IRQHandler+0x2ee>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a64      	ldr	r2, [pc, #400]	; (800668c <HAL_DMA_IRQHandler+0x404>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d03b      	beq.n	8006576 <HAL_DMA_IRQHandler+0x2ee>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a63      	ldr	r2, [pc, #396]	; (8006690 <HAL_DMA_IRQHandler+0x408>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d036      	beq.n	8006576 <HAL_DMA_IRQHandler+0x2ee>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a61      	ldr	r2, [pc, #388]	; (8006694 <HAL_DMA_IRQHandler+0x40c>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d031      	beq.n	8006576 <HAL_DMA_IRQHandler+0x2ee>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a60      	ldr	r2, [pc, #384]	; (8006698 <HAL_DMA_IRQHandler+0x410>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d02c      	beq.n	8006576 <HAL_DMA_IRQHandler+0x2ee>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a5e      	ldr	r2, [pc, #376]	; (800669c <HAL_DMA_IRQHandler+0x414>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d027      	beq.n	8006576 <HAL_DMA_IRQHandler+0x2ee>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a5d      	ldr	r2, [pc, #372]	; (80066a0 <HAL_DMA_IRQHandler+0x418>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d022      	beq.n	8006576 <HAL_DMA_IRQHandler+0x2ee>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a5b      	ldr	r2, [pc, #364]	; (80066a4 <HAL_DMA_IRQHandler+0x41c>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d01d      	beq.n	8006576 <HAL_DMA_IRQHandler+0x2ee>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a5a      	ldr	r2, [pc, #360]	; (80066a8 <HAL_DMA_IRQHandler+0x420>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d018      	beq.n	8006576 <HAL_DMA_IRQHandler+0x2ee>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a58      	ldr	r2, [pc, #352]	; (80066ac <HAL_DMA_IRQHandler+0x424>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d013      	beq.n	8006576 <HAL_DMA_IRQHandler+0x2ee>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a57      	ldr	r2, [pc, #348]	; (80066b0 <HAL_DMA_IRQHandler+0x428>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d00e      	beq.n	8006576 <HAL_DMA_IRQHandler+0x2ee>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a55      	ldr	r2, [pc, #340]	; (80066b4 <HAL_DMA_IRQHandler+0x42c>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d009      	beq.n	8006576 <HAL_DMA_IRQHandler+0x2ee>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a54      	ldr	r2, [pc, #336]	; (80066b8 <HAL_DMA_IRQHandler+0x430>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d004      	beq.n	8006576 <HAL_DMA_IRQHandler+0x2ee>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a52      	ldr	r2, [pc, #328]	; (80066bc <HAL_DMA_IRQHandler+0x434>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d10a      	bne.n	800658c <HAL_DMA_IRQHandler+0x304>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	695b      	ldr	r3, [r3, #20]
 800657c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006580:	2b00      	cmp	r3, #0
 8006582:	bf14      	ite	ne
 8006584:	2301      	movne	r3, #1
 8006586:	2300      	moveq	r3, #0
 8006588:	b2db      	uxtb	r3, r3
 800658a:	e003      	b.n	8006594 <HAL_DMA_IRQHandler+0x30c>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2300      	movs	r3, #0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00d      	beq.n	80065b4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800659c:	f003 031f 	and.w	r3, r3, #31
 80065a0:	2201      	movs	r2, #1
 80065a2:	409a      	lsls	r2, r3
 80065a4:	6a3b      	ldr	r3, [r7, #32]
 80065a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ac:	f043 0202 	orr.w	r2, r3, #2
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065b8:	f003 031f 	and.w	r3, r3, #31
 80065bc:	2204      	movs	r2, #4
 80065be:	409a      	lsls	r2, r3
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	4013      	ands	r3, r2
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f000 808f 	beq.w	80066e8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a2c      	ldr	r2, [pc, #176]	; (8006680 <HAL_DMA_IRQHandler+0x3f8>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d04a      	beq.n	800666a <HAL_DMA_IRQHandler+0x3e2>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a2a      	ldr	r2, [pc, #168]	; (8006684 <HAL_DMA_IRQHandler+0x3fc>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d045      	beq.n	800666a <HAL_DMA_IRQHandler+0x3e2>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a29      	ldr	r2, [pc, #164]	; (8006688 <HAL_DMA_IRQHandler+0x400>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d040      	beq.n	800666a <HAL_DMA_IRQHandler+0x3e2>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a27      	ldr	r2, [pc, #156]	; (800668c <HAL_DMA_IRQHandler+0x404>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d03b      	beq.n	800666a <HAL_DMA_IRQHandler+0x3e2>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a26      	ldr	r2, [pc, #152]	; (8006690 <HAL_DMA_IRQHandler+0x408>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d036      	beq.n	800666a <HAL_DMA_IRQHandler+0x3e2>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a24      	ldr	r2, [pc, #144]	; (8006694 <HAL_DMA_IRQHandler+0x40c>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d031      	beq.n	800666a <HAL_DMA_IRQHandler+0x3e2>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a23      	ldr	r2, [pc, #140]	; (8006698 <HAL_DMA_IRQHandler+0x410>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d02c      	beq.n	800666a <HAL_DMA_IRQHandler+0x3e2>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a21      	ldr	r2, [pc, #132]	; (800669c <HAL_DMA_IRQHandler+0x414>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d027      	beq.n	800666a <HAL_DMA_IRQHandler+0x3e2>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a20      	ldr	r2, [pc, #128]	; (80066a0 <HAL_DMA_IRQHandler+0x418>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d022      	beq.n	800666a <HAL_DMA_IRQHandler+0x3e2>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a1e      	ldr	r2, [pc, #120]	; (80066a4 <HAL_DMA_IRQHandler+0x41c>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d01d      	beq.n	800666a <HAL_DMA_IRQHandler+0x3e2>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a1d      	ldr	r2, [pc, #116]	; (80066a8 <HAL_DMA_IRQHandler+0x420>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d018      	beq.n	800666a <HAL_DMA_IRQHandler+0x3e2>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a1b      	ldr	r2, [pc, #108]	; (80066ac <HAL_DMA_IRQHandler+0x424>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d013      	beq.n	800666a <HAL_DMA_IRQHandler+0x3e2>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a1a      	ldr	r2, [pc, #104]	; (80066b0 <HAL_DMA_IRQHandler+0x428>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d00e      	beq.n	800666a <HAL_DMA_IRQHandler+0x3e2>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a18      	ldr	r2, [pc, #96]	; (80066b4 <HAL_DMA_IRQHandler+0x42c>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d009      	beq.n	800666a <HAL_DMA_IRQHandler+0x3e2>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a17      	ldr	r2, [pc, #92]	; (80066b8 <HAL_DMA_IRQHandler+0x430>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d004      	beq.n	800666a <HAL_DMA_IRQHandler+0x3e2>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a15      	ldr	r2, [pc, #84]	; (80066bc <HAL_DMA_IRQHandler+0x434>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d12a      	bne.n	80066c0 <HAL_DMA_IRQHandler+0x438>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0302 	and.w	r3, r3, #2
 8006674:	2b00      	cmp	r3, #0
 8006676:	bf14      	ite	ne
 8006678:	2301      	movne	r3, #1
 800667a:	2300      	moveq	r3, #0
 800667c:	b2db      	uxtb	r3, r3
 800667e:	e023      	b.n	80066c8 <HAL_DMA_IRQHandler+0x440>
 8006680:	40020010 	.word	0x40020010
 8006684:	40020028 	.word	0x40020028
 8006688:	40020040 	.word	0x40020040
 800668c:	40020058 	.word	0x40020058
 8006690:	40020070 	.word	0x40020070
 8006694:	40020088 	.word	0x40020088
 8006698:	400200a0 	.word	0x400200a0
 800669c:	400200b8 	.word	0x400200b8
 80066a0:	40020410 	.word	0x40020410
 80066a4:	40020428 	.word	0x40020428
 80066a8:	40020440 	.word	0x40020440
 80066ac:	40020458 	.word	0x40020458
 80066b0:	40020470 	.word	0x40020470
 80066b4:	40020488 	.word	0x40020488
 80066b8:	400204a0 	.word	0x400204a0
 80066bc:	400204b8 	.word	0x400204b8
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2300      	movs	r3, #0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00d      	beq.n	80066e8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066d0:	f003 031f 	and.w	r3, r3, #31
 80066d4:	2204      	movs	r2, #4
 80066d6:	409a      	lsls	r2, r3
 80066d8:	6a3b      	ldr	r3, [r7, #32]
 80066da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e0:	f043 0204 	orr.w	r2, r3, #4
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ec:	f003 031f 	and.w	r3, r3, #31
 80066f0:	2210      	movs	r2, #16
 80066f2:	409a      	lsls	r2, r3
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	4013      	ands	r3, r2
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f000 80a6 	beq.w	800684a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a85      	ldr	r2, [pc, #532]	; (8006918 <HAL_DMA_IRQHandler+0x690>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d04a      	beq.n	800679e <HAL_DMA_IRQHandler+0x516>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a83      	ldr	r2, [pc, #524]	; (800691c <HAL_DMA_IRQHandler+0x694>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d045      	beq.n	800679e <HAL_DMA_IRQHandler+0x516>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a82      	ldr	r2, [pc, #520]	; (8006920 <HAL_DMA_IRQHandler+0x698>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d040      	beq.n	800679e <HAL_DMA_IRQHandler+0x516>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a80      	ldr	r2, [pc, #512]	; (8006924 <HAL_DMA_IRQHandler+0x69c>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d03b      	beq.n	800679e <HAL_DMA_IRQHandler+0x516>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a7f      	ldr	r2, [pc, #508]	; (8006928 <HAL_DMA_IRQHandler+0x6a0>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d036      	beq.n	800679e <HAL_DMA_IRQHandler+0x516>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a7d      	ldr	r2, [pc, #500]	; (800692c <HAL_DMA_IRQHandler+0x6a4>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d031      	beq.n	800679e <HAL_DMA_IRQHandler+0x516>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a7c      	ldr	r2, [pc, #496]	; (8006930 <HAL_DMA_IRQHandler+0x6a8>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d02c      	beq.n	800679e <HAL_DMA_IRQHandler+0x516>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a7a      	ldr	r2, [pc, #488]	; (8006934 <HAL_DMA_IRQHandler+0x6ac>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d027      	beq.n	800679e <HAL_DMA_IRQHandler+0x516>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a79      	ldr	r2, [pc, #484]	; (8006938 <HAL_DMA_IRQHandler+0x6b0>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d022      	beq.n	800679e <HAL_DMA_IRQHandler+0x516>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a77      	ldr	r2, [pc, #476]	; (800693c <HAL_DMA_IRQHandler+0x6b4>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d01d      	beq.n	800679e <HAL_DMA_IRQHandler+0x516>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a76      	ldr	r2, [pc, #472]	; (8006940 <HAL_DMA_IRQHandler+0x6b8>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d018      	beq.n	800679e <HAL_DMA_IRQHandler+0x516>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a74      	ldr	r2, [pc, #464]	; (8006944 <HAL_DMA_IRQHandler+0x6bc>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d013      	beq.n	800679e <HAL_DMA_IRQHandler+0x516>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a73      	ldr	r2, [pc, #460]	; (8006948 <HAL_DMA_IRQHandler+0x6c0>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d00e      	beq.n	800679e <HAL_DMA_IRQHandler+0x516>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a71      	ldr	r2, [pc, #452]	; (800694c <HAL_DMA_IRQHandler+0x6c4>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d009      	beq.n	800679e <HAL_DMA_IRQHandler+0x516>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a70      	ldr	r2, [pc, #448]	; (8006950 <HAL_DMA_IRQHandler+0x6c8>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d004      	beq.n	800679e <HAL_DMA_IRQHandler+0x516>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a6e      	ldr	r2, [pc, #440]	; (8006954 <HAL_DMA_IRQHandler+0x6cc>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d10a      	bne.n	80067b4 <HAL_DMA_IRQHandler+0x52c>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0308 	and.w	r3, r3, #8
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	bf14      	ite	ne
 80067ac:	2301      	movne	r3, #1
 80067ae:	2300      	moveq	r3, #0
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	e009      	b.n	80067c8 <HAL_DMA_IRQHandler+0x540>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 0304 	and.w	r3, r3, #4
 80067be:	2b00      	cmp	r3, #0
 80067c0:	bf14      	ite	ne
 80067c2:	2301      	movne	r3, #1
 80067c4:	2300      	moveq	r3, #0
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d03e      	beq.n	800684a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067d0:	f003 031f 	and.w	r3, r3, #31
 80067d4:	2210      	movs	r2, #16
 80067d6:	409a      	lsls	r2, r3
 80067d8:	6a3b      	ldr	r3, [r7, #32]
 80067da:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d018      	beq.n	800681c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d108      	bne.n	800680a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d024      	beq.n	800684a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	4798      	blx	r3
 8006808:	e01f      	b.n	800684a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800680e:	2b00      	cmp	r3, #0
 8006810:	d01b      	beq.n	800684a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	4798      	blx	r3
 800681a:	e016      	b.n	800684a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006826:	2b00      	cmp	r3, #0
 8006828:	d107      	bne.n	800683a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f022 0208 	bic.w	r2, r2, #8
 8006838:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683e:	2b00      	cmp	r3, #0
 8006840:	d003      	beq.n	800684a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800684e:	f003 031f 	and.w	r3, r3, #31
 8006852:	2220      	movs	r2, #32
 8006854:	409a      	lsls	r2, r3
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	4013      	ands	r3, r2
 800685a:	2b00      	cmp	r3, #0
 800685c:	f000 8110 	beq.w	8006a80 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a2c      	ldr	r2, [pc, #176]	; (8006918 <HAL_DMA_IRQHandler+0x690>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d04a      	beq.n	8006900 <HAL_DMA_IRQHandler+0x678>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a2b      	ldr	r2, [pc, #172]	; (800691c <HAL_DMA_IRQHandler+0x694>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d045      	beq.n	8006900 <HAL_DMA_IRQHandler+0x678>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a29      	ldr	r2, [pc, #164]	; (8006920 <HAL_DMA_IRQHandler+0x698>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d040      	beq.n	8006900 <HAL_DMA_IRQHandler+0x678>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a28      	ldr	r2, [pc, #160]	; (8006924 <HAL_DMA_IRQHandler+0x69c>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d03b      	beq.n	8006900 <HAL_DMA_IRQHandler+0x678>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a26      	ldr	r2, [pc, #152]	; (8006928 <HAL_DMA_IRQHandler+0x6a0>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d036      	beq.n	8006900 <HAL_DMA_IRQHandler+0x678>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a25      	ldr	r2, [pc, #148]	; (800692c <HAL_DMA_IRQHandler+0x6a4>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d031      	beq.n	8006900 <HAL_DMA_IRQHandler+0x678>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a23      	ldr	r2, [pc, #140]	; (8006930 <HAL_DMA_IRQHandler+0x6a8>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d02c      	beq.n	8006900 <HAL_DMA_IRQHandler+0x678>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a22      	ldr	r2, [pc, #136]	; (8006934 <HAL_DMA_IRQHandler+0x6ac>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d027      	beq.n	8006900 <HAL_DMA_IRQHandler+0x678>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a20      	ldr	r2, [pc, #128]	; (8006938 <HAL_DMA_IRQHandler+0x6b0>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d022      	beq.n	8006900 <HAL_DMA_IRQHandler+0x678>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a1f      	ldr	r2, [pc, #124]	; (800693c <HAL_DMA_IRQHandler+0x6b4>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d01d      	beq.n	8006900 <HAL_DMA_IRQHandler+0x678>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a1d      	ldr	r2, [pc, #116]	; (8006940 <HAL_DMA_IRQHandler+0x6b8>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d018      	beq.n	8006900 <HAL_DMA_IRQHandler+0x678>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a1c      	ldr	r2, [pc, #112]	; (8006944 <HAL_DMA_IRQHandler+0x6bc>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d013      	beq.n	8006900 <HAL_DMA_IRQHandler+0x678>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a1a      	ldr	r2, [pc, #104]	; (8006948 <HAL_DMA_IRQHandler+0x6c0>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d00e      	beq.n	8006900 <HAL_DMA_IRQHandler+0x678>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a19      	ldr	r2, [pc, #100]	; (800694c <HAL_DMA_IRQHandler+0x6c4>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d009      	beq.n	8006900 <HAL_DMA_IRQHandler+0x678>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a17      	ldr	r2, [pc, #92]	; (8006950 <HAL_DMA_IRQHandler+0x6c8>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d004      	beq.n	8006900 <HAL_DMA_IRQHandler+0x678>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a16      	ldr	r2, [pc, #88]	; (8006954 <HAL_DMA_IRQHandler+0x6cc>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d12b      	bne.n	8006958 <HAL_DMA_IRQHandler+0x6d0>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 0310 	and.w	r3, r3, #16
 800690a:	2b00      	cmp	r3, #0
 800690c:	bf14      	ite	ne
 800690e:	2301      	movne	r3, #1
 8006910:	2300      	moveq	r3, #0
 8006912:	b2db      	uxtb	r3, r3
 8006914:	e02a      	b.n	800696c <HAL_DMA_IRQHandler+0x6e4>
 8006916:	bf00      	nop
 8006918:	40020010 	.word	0x40020010
 800691c:	40020028 	.word	0x40020028
 8006920:	40020040 	.word	0x40020040
 8006924:	40020058 	.word	0x40020058
 8006928:	40020070 	.word	0x40020070
 800692c:	40020088 	.word	0x40020088
 8006930:	400200a0 	.word	0x400200a0
 8006934:	400200b8 	.word	0x400200b8
 8006938:	40020410 	.word	0x40020410
 800693c:	40020428 	.word	0x40020428
 8006940:	40020440 	.word	0x40020440
 8006944:	40020458 	.word	0x40020458
 8006948:	40020470 	.word	0x40020470
 800694c:	40020488 	.word	0x40020488
 8006950:	400204a0 	.word	0x400204a0
 8006954:	400204b8 	.word	0x400204b8
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 0302 	and.w	r3, r3, #2
 8006962:	2b00      	cmp	r3, #0
 8006964:	bf14      	ite	ne
 8006966:	2301      	movne	r3, #1
 8006968:	2300      	moveq	r3, #0
 800696a:	b2db      	uxtb	r3, r3
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 8087 	beq.w	8006a80 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006976:	f003 031f 	and.w	r3, r3, #31
 800697a:	2220      	movs	r2, #32
 800697c:	409a      	lsls	r2, r3
 800697e:	6a3b      	ldr	r3, [r7, #32]
 8006980:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006988:	b2db      	uxtb	r3, r3
 800698a:	2b04      	cmp	r3, #4
 800698c:	d139      	bne.n	8006a02 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f022 0216 	bic.w	r2, r2, #22
 800699c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	695a      	ldr	r2, [r3, #20]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069ac:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d103      	bne.n	80069be <HAL_DMA_IRQHandler+0x736>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d007      	beq.n	80069ce <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f022 0208 	bic.w	r2, r2, #8
 80069cc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069d2:	f003 031f 	and.w	r3, r3, #31
 80069d6:	223f      	movs	r2, #63	; 0x3f
 80069d8:	409a      	lsls	r2, r3
 80069da:	6a3b      	ldr	r3, [r7, #32]
 80069dc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2201      	movs	r2, #1
 80069e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	f000 834a 	beq.w	800708c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	4798      	blx	r3
          }
          return;
 8006a00:	e344      	b.n	800708c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d018      	beq.n	8006a42 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d108      	bne.n	8006a30 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d02c      	beq.n	8006a80 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	4798      	blx	r3
 8006a2e:	e027      	b.n	8006a80 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d023      	beq.n	8006a80 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	4798      	blx	r3
 8006a40:	e01e      	b.n	8006a80 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d10f      	bne.n	8006a70 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f022 0210 	bic.w	r2, r2, #16
 8006a5e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d003      	beq.n	8006a80 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f000 8306 	beq.w	8007096 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a8e:	f003 0301 	and.w	r3, r3, #1
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f000 8088 	beq.w	8006ba8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2204      	movs	r2, #4
 8006a9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a7a      	ldr	r2, [pc, #488]	; (8006c90 <HAL_DMA_IRQHandler+0xa08>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d04a      	beq.n	8006b40 <HAL_DMA_IRQHandler+0x8b8>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a79      	ldr	r2, [pc, #484]	; (8006c94 <HAL_DMA_IRQHandler+0xa0c>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d045      	beq.n	8006b40 <HAL_DMA_IRQHandler+0x8b8>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a77      	ldr	r2, [pc, #476]	; (8006c98 <HAL_DMA_IRQHandler+0xa10>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d040      	beq.n	8006b40 <HAL_DMA_IRQHandler+0x8b8>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a76      	ldr	r2, [pc, #472]	; (8006c9c <HAL_DMA_IRQHandler+0xa14>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d03b      	beq.n	8006b40 <HAL_DMA_IRQHandler+0x8b8>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a74      	ldr	r2, [pc, #464]	; (8006ca0 <HAL_DMA_IRQHandler+0xa18>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d036      	beq.n	8006b40 <HAL_DMA_IRQHandler+0x8b8>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a73      	ldr	r2, [pc, #460]	; (8006ca4 <HAL_DMA_IRQHandler+0xa1c>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d031      	beq.n	8006b40 <HAL_DMA_IRQHandler+0x8b8>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a71      	ldr	r2, [pc, #452]	; (8006ca8 <HAL_DMA_IRQHandler+0xa20>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d02c      	beq.n	8006b40 <HAL_DMA_IRQHandler+0x8b8>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a70      	ldr	r2, [pc, #448]	; (8006cac <HAL_DMA_IRQHandler+0xa24>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d027      	beq.n	8006b40 <HAL_DMA_IRQHandler+0x8b8>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a6e      	ldr	r2, [pc, #440]	; (8006cb0 <HAL_DMA_IRQHandler+0xa28>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d022      	beq.n	8006b40 <HAL_DMA_IRQHandler+0x8b8>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a6d      	ldr	r2, [pc, #436]	; (8006cb4 <HAL_DMA_IRQHandler+0xa2c>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d01d      	beq.n	8006b40 <HAL_DMA_IRQHandler+0x8b8>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a6b      	ldr	r2, [pc, #428]	; (8006cb8 <HAL_DMA_IRQHandler+0xa30>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d018      	beq.n	8006b40 <HAL_DMA_IRQHandler+0x8b8>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a6a      	ldr	r2, [pc, #424]	; (8006cbc <HAL_DMA_IRQHandler+0xa34>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d013      	beq.n	8006b40 <HAL_DMA_IRQHandler+0x8b8>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a68      	ldr	r2, [pc, #416]	; (8006cc0 <HAL_DMA_IRQHandler+0xa38>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d00e      	beq.n	8006b40 <HAL_DMA_IRQHandler+0x8b8>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a67      	ldr	r2, [pc, #412]	; (8006cc4 <HAL_DMA_IRQHandler+0xa3c>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d009      	beq.n	8006b40 <HAL_DMA_IRQHandler+0x8b8>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a65      	ldr	r2, [pc, #404]	; (8006cc8 <HAL_DMA_IRQHandler+0xa40>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d004      	beq.n	8006b40 <HAL_DMA_IRQHandler+0x8b8>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a64      	ldr	r2, [pc, #400]	; (8006ccc <HAL_DMA_IRQHandler+0xa44>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d108      	bne.n	8006b52 <HAL_DMA_IRQHandler+0x8ca>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f022 0201 	bic.w	r2, r2, #1
 8006b4e:	601a      	str	r2, [r3, #0]
 8006b50:	e007      	b.n	8006b62 <HAL_DMA_IRQHandler+0x8da>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f022 0201 	bic.w	r2, r2, #1
 8006b60:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	3301      	adds	r3, #1
 8006b66:	60fb      	str	r3, [r7, #12]
 8006b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d307      	bcc.n	8006b7e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 0301 	and.w	r3, r3, #1
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1f2      	bne.n	8006b62 <HAL_DMA_IRQHandler+0x8da>
 8006b7c:	e000      	b.n	8006b80 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006b7e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 0301 	and.w	r3, r3, #1
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d004      	beq.n	8006b98 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2203      	movs	r2, #3
 8006b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006b96:	e003      	b.n	8006ba0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f000 8272 	beq.w	8007096 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	4798      	blx	r3
 8006bba:	e26c      	b.n	8007096 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a43      	ldr	r2, [pc, #268]	; (8006cd0 <HAL_DMA_IRQHandler+0xa48>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d022      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x984>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a42      	ldr	r2, [pc, #264]	; (8006cd4 <HAL_DMA_IRQHandler+0xa4c>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d01d      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x984>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a40      	ldr	r2, [pc, #256]	; (8006cd8 <HAL_DMA_IRQHandler+0xa50>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d018      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x984>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a3f      	ldr	r2, [pc, #252]	; (8006cdc <HAL_DMA_IRQHandler+0xa54>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d013      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x984>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a3d      	ldr	r2, [pc, #244]	; (8006ce0 <HAL_DMA_IRQHandler+0xa58>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d00e      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x984>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a3c      	ldr	r2, [pc, #240]	; (8006ce4 <HAL_DMA_IRQHandler+0xa5c>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d009      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x984>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a3a      	ldr	r2, [pc, #232]	; (8006ce8 <HAL_DMA_IRQHandler+0xa60>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d004      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x984>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a39      	ldr	r2, [pc, #228]	; (8006cec <HAL_DMA_IRQHandler+0xa64>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d101      	bne.n	8006c10 <HAL_DMA_IRQHandler+0x988>
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e000      	b.n	8006c12 <HAL_DMA_IRQHandler+0x98a>
 8006c10:	2300      	movs	r3, #0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	f000 823f 	beq.w	8007096 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c24:	f003 031f 	and.w	r3, r3, #31
 8006c28:	2204      	movs	r2, #4
 8006c2a:	409a      	lsls	r2, r3
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	4013      	ands	r3, r2
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f000 80cd 	beq.w	8006dd0 <HAL_DMA_IRQHandler+0xb48>
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	f003 0304 	and.w	r3, r3, #4
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f000 80c7 	beq.w	8006dd0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c46:	f003 031f 	and.w	r3, r3, #31
 8006c4a:	2204      	movs	r2, #4
 8006c4c:	409a      	lsls	r2, r3
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d049      	beq.n	8006cf0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d109      	bne.n	8006c7a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f000 8210 	beq.w	8007090 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c78:	e20a      	b.n	8007090 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	f000 8206 	beq.w	8007090 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c8c:	e200      	b.n	8007090 <HAL_DMA_IRQHandler+0xe08>
 8006c8e:	bf00      	nop
 8006c90:	40020010 	.word	0x40020010
 8006c94:	40020028 	.word	0x40020028
 8006c98:	40020040 	.word	0x40020040
 8006c9c:	40020058 	.word	0x40020058
 8006ca0:	40020070 	.word	0x40020070
 8006ca4:	40020088 	.word	0x40020088
 8006ca8:	400200a0 	.word	0x400200a0
 8006cac:	400200b8 	.word	0x400200b8
 8006cb0:	40020410 	.word	0x40020410
 8006cb4:	40020428 	.word	0x40020428
 8006cb8:	40020440 	.word	0x40020440
 8006cbc:	40020458 	.word	0x40020458
 8006cc0:	40020470 	.word	0x40020470
 8006cc4:	40020488 	.word	0x40020488
 8006cc8:	400204a0 	.word	0x400204a0
 8006ccc:	400204b8 	.word	0x400204b8
 8006cd0:	58025408 	.word	0x58025408
 8006cd4:	5802541c 	.word	0x5802541c
 8006cd8:	58025430 	.word	0x58025430
 8006cdc:	58025444 	.word	0x58025444
 8006ce0:	58025458 	.word	0x58025458
 8006ce4:	5802546c 	.word	0x5802546c
 8006ce8:	58025480 	.word	0x58025480
 8006cec:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	f003 0320 	and.w	r3, r3, #32
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d160      	bne.n	8006dbc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a7f      	ldr	r2, [pc, #508]	; (8006efc <HAL_DMA_IRQHandler+0xc74>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d04a      	beq.n	8006d9a <HAL_DMA_IRQHandler+0xb12>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a7d      	ldr	r2, [pc, #500]	; (8006f00 <HAL_DMA_IRQHandler+0xc78>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d045      	beq.n	8006d9a <HAL_DMA_IRQHandler+0xb12>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a7c      	ldr	r2, [pc, #496]	; (8006f04 <HAL_DMA_IRQHandler+0xc7c>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d040      	beq.n	8006d9a <HAL_DMA_IRQHandler+0xb12>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a7a      	ldr	r2, [pc, #488]	; (8006f08 <HAL_DMA_IRQHandler+0xc80>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d03b      	beq.n	8006d9a <HAL_DMA_IRQHandler+0xb12>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a79      	ldr	r2, [pc, #484]	; (8006f0c <HAL_DMA_IRQHandler+0xc84>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d036      	beq.n	8006d9a <HAL_DMA_IRQHandler+0xb12>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a77      	ldr	r2, [pc, #476]	; (8006f10 <HAL_DMA_IRQHandler+0xc88>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d031      	beq.n	8006d9a <HAL_DMA_IRQHandler+0xb12>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a76      	ldr	r2, [pc, #472]	; (8006f14 <HAL_DMA_IRQHandler+0xc8c>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d02c      	beq.n	8006d9a <HAL_DMA_IRQHandler+0xb12>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a74      	ldr	r2, [pc, #464]	; (8006f18 <HAL_DMA_IRQHandler+0xc90>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d027      	beq.n	8006d9a <HAL_DMA_IRQHandler+0xb12>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a73      	ldr	r2, [pc, #460]	; (8006f1c <HAL_DMA_IRQHandler+0xc94>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d022      	beq.n	8006d9a <HAL_DMA_IRQHandler+0xb12>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a71      	ldr	r2, [pc, #452]	; (8006f20 <HAL_DMA_IRQHandler+0xc98>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d01d      	beq.n	8006d9a <HAL_DMA_IRQHandler+0xb12>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a70      	ldr	r2, [pc, #448]	; (8006f24 <HAL_DMA_IRQHandler+0xc9c>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d018      	beq.n	8006d9a <HAL_DMA_IRQHandler+0xb12>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a6e      	ldr	r2, [pc, #440]	; (8006f28 <HAL_DMA_IRQHandler+0xca0>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d013      	beq.n	8006d9a <HAL_DMA_IRQHandler+0xb12>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a6d      	ldr	r2, [pc, #436]	; (8006f2c <HAL_DMA_IRQHandler+0xca4>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d00e      	beq.n	8006d9a <HAL_DMA_IRQHandler+0xb12>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a6b      	ldr	r2, [pc, #428]	; (8006f30 <HAL_DMA_IRQHandler+0xca8>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d009      	beq.n	8006d9a <HAL_DMA_IRQHandler+0xb12>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a6a      	ldr	r2, [pc, #424]	; (8006f34 <HAL_DMA_IRQHandler+0xcac>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d004      	beq.n	8006d9a <HAL_DMA_IRQHandler+0xb12>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a68      	ldr	r2, [pc, #416]	; (8006f38 <HAL_DMA_IRQHandler+0xcb0>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d108      	bne.n	8006dac <HAL_DMA_IRQHandler+0xb24>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f022 0208 	bic.w	r2, r2, #8
 8006da8:	601a      	str	r2, [r3, #0]
 8006daa:	e007      	b.n	8006dbc <HAL_DMA_IRQHandler+0xb34>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f022 0204 	bic.w	r2, r2, #4
 8006dba:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	f000 8165 	beq.w	8007090 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dce:	e15f      	b.n	8007090 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dd4:	f003 031f 	and.w	r3, r3, #31
 8006dd8:	2202      	movs	r2, #2
 8006dda:	409a      	lsls	r2, r3
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	4013      	ands	r3, r2
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f000 80c5 	beq.w	8006f70 <HAL_DMA_IRQHandler+0xce8>
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	f003 0302 	and.w	r3, r3, #2
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f000 80bf 	beq.w	8006f70 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006df6:	f003 031f 	and.w	r3, r3, #31
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	409a      	lsls	r2, r3
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d018      	beq.n	8006e3e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d109      	bne.n	8006e2a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f000 813a 	beq.w	8007094 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e28:	e134      	b.n	8007094 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f000 8130 	beq.w	8007094 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e3c:	e12a      	b.n	8007094 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	f003 0320 	and.w	r3, r3, #32
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f040 8089 	bne.w	8006f5c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a2b      	ldr	r2, [pc, #172]	; (8006efc <HAL_DMA_IRQHandler+0xc74>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d04a      	beq.n	8006eea <HAL_DMA_IRQHandler+0xc62>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a29      	ldr	r2, [pc, #164]	; (8006f00 <HAL_DMA_IRQHandler+0xc78>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d045      	beq.n	8006eea <HAL_DMA_IRQHandler+0xc62>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a28      	ldr	r2, [pc, #160]	; (8006f04 <HAL_DMA_IRQHandler+0xc7c>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d040      	beq.n	8006eea <HAL_DMA_IRQHandler+0xc62>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a26      	ldr	r2, [pc, #152]	; (8006f08 <HAL_DMA_IRQHandler+0xc80>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d03b      	beq.n	8006eea <HAL_DMA_IRQHandler+0xc62>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a25      	ldr	r2, [pc, #148]	; (8006f0c <HAL_DMA_IRQHandler+0xc84>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d036      	beq.n	8006eea <HAL_DMA_IRQHandler+0xc62>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a23      	ldr	r2, [pc, #140]	; (8006f10 <HAL_DMA_IRQHandler+0xc88>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d031      	beq.n	8006eea <HAL_DMA_IRQHandler+0xc62>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a22      	ldr	r2, [pc, #136]	; (8006f14 <HAL_DMA_IRQHandler+0xc8c>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d02c      	beq.n	8006eea <HAL_DMA_IRQHandler+0xc62>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a20      	ldr	r2, [pc, #128]	; (8006f18 <HAL_DMA_IRQHandler+0xc90>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d027      	beq.n	8006eea <HAL_DMA_IRQHandler+0xc62>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a1f      	ldr	r2, [pc, #124]	; (8006f1c <HAL_DMA_IRQHandler+0xc94>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d022      	beq.n	8006eea <HAL_DMA_IRQHandler+0xc62>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a1d      	ldr	r2, [pc, #116]	; (8006f20 <HAL_DMA_IRQHandler+0xc98>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d01d      	beq.n	8006eea <HAL_DMA_IRQHandler+0xc62>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a1c      	ldr	r2, [pc, #112]	; (8006f24 <HAL_DMA_IRQHandler+0xc9c>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d018      	beq.n	8006eea <HAL_DMA_IRQHandler+0xc62>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a1a      	ldr	r2, [pc, #104]	; (8006f28 <HAL_DMA_IRQHandler+0xca0>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d013      	beq.n	8006eea <HAL_DMA_IRQHandler+0xc62>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a19      	ldr	r2, [pc, #100]	; (8006f2c <HAL_DMA_IRQHandler+0xca4>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d00e      	beq.n	8006eea <HAL_DMA_IRQHandler+0xc62>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a17      	ldr	r2, [pc, #92]	; (8006f30 <HAL_DMA_IRQHandler+0xca8>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d009      	beq.n	8006eea <HAL_DMA_IRQHandler+0xc62>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a16      	ldr	r2, [pc, #88]	; (8006f34 <HAL_DMA_IRQHandler+0xcac>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d004      	beq.n	8006eea <HAL_DMA_IRQHandler+0xc62>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a14      	ldr	r2, [pc, #80]	; (8006f38 <HAL_DMA_IRQHandler+0xcb0>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d128      	bne.n	8006f3c <HAL_DMA_IRQHandler+0xcb4>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f022 0214 	bic.w	r2, r2, #20
 8006ef8:	601a      	str	r2, [r3, #0]
 8006efa:	e027      	b.n	8006f4c <HAL_DMA_IRQHandler+0xcc4>
 8006efc:	40020010 	.word	0x40020010
 8006f00:	40020028 	.word	0x40020028
 8006f04:	40020040 	.word	0x40020040
 8006f08:	40020058 	.word	0x40020058
 8006f0c:	40020070 	.word	0x40020070
 8006f10:	40020088 	.word	0x40020088
 8006f14:	400200a0 	.word	0x400200a0
 8006f18:	400200b8 	.word	0x400200b8
 8006f1c:	40020410 	.word	0x40020410
 8006f20:	40020428 	.word	0x40020428
 8006f24:	40020440 	.word	0x40020440
 8006f28:	40020458 	.word	0x40020458
 8006f2c:	40020470 	.word	0x40020470
 8006f30:	40020488 	.word	0x40020488
 8006f34:	400204a0 	.word	0x400204a0
 8006f38:	400204b8 	.word	0x400204b8
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f022 020a 	bic.w	r2, r2, #10
 8006f4a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f000 8097 	beq.w	8007094 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f6e:	e091      	b.n	8007094 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f74:	f003 031f 	and.w	r3, r3, #31
 8006f78:	2208      	movs	r2, #8
 8006f7a:	409a      	lsls	r2, r3
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	4013      	ands	r3, r2
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f000 8088 	beq.w	8007096 <HAL_DMA_IRQHandler+0xe0e>
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	f003 0308 	and.w	r3, r3, #8
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f000 8082 	beq.w	8007096 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a41      	ldr	r2, [pc, #260]	; (800709c <HAL_DMA_IRQHandler+0xe14>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d04a      	beq.n	8007032 <HAL_DMA_IRQHandler+0xdaa>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a3f      	ldr	r2, [pc, #252]	; (80070a0 <HAL_DMA_IRQHandler+0xe18>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d045      	beq.n	8007032 <HAL_DMA_IRQHandler+0xdaa>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a3e      	ldr	r2, [pc, #248]	; (80070a4 <HAL_DMA_IRQHandler+0xe1c>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d040      	beq.n	8007032 <HAL_DMA_IRQHandler+0xdaa>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a3c      	ldr	r2, [pc, #240]	; (80070a8 <HAL_DMA_IRQHandler+0xe20>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d03b      	beq.n	8007032 <HAL_DMA_IRQHandler+0xdaa>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a3b      	ldr	r2, [pc, #236]	; (80070ac <HAL_DMA_IRQHandler+0xe24>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d036      	beq.n	8007032 <HAL_DMA_IRQHandler+0xdaa>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a39      	ldr	r2, [pc, #228]	; (80070b0 <HAL_DMA_IRQHandler+0xe28>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d031      	beq.n	8007032 <HAL_DMA_IRQHandler+0xdaa>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a38      	ldr	r2, [pc, #224]	; (80070b4 <HAL_DMA_IRQHandler+0xe2c>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d02c      	beq.n	8007032 <HAL_DMA_IRQHandler+0xdaa>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a36      	ldr	r2, [pc, #216]	; (80070b8 <HAL_DMA_IRQHandler+0xe30>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d027      	beq.n	8007032 <HAL_DMA_IRQHandler+0xdaa>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a35      	ldr	r2, [pc, #212]	; (80070bc <HAL_DMA_IRQHandler+0xe34>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d022      	beq.n	8007032 <HAL_DMA_IRQHandler+0xdaa>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a33      	ldr	r2, [pc, #204]	; (80070c0 <HAL_DMA_IRQHandler+0xe38>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d01d      	beq.n	8007032 <HAL_DMA_IRQHandler+0xdaa>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a32      	ldr	r2, [pc, #200]	; (80070c4 <HAL_DMA_IRQHandler+0xe3c>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d018      	beq.n	8007032 <HAL_DMA_IRQHandler+0xdaa>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a30      	ldr	r2, [pc, #192]	; (80070c8 <HAL_DMA_IRQHandler+0xe40>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d013      	beq.n	8007032 <HAL_DMA_IRQHandler+0xdaa>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a2f      	ldr	r2, [pc, #188]	; (80070cc <HAL_DMA_IRQHandler+0xe44>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d00e      	beq.n	8007032 <HAL_DMA_IRQHandler+0xdaa>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a2d      	ldr	r2, [pc, #180]	; (80070d0 <HAL_DMA_IRQHandler+0xe48>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d009      	beq.n	8007032 <HAL_DMA_IRQHandler+0xdaa>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a2c      	ldr	r2, [pc, #176]	; (80070d4 <HAL_DMA_IRQHandler+0xe4c>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d004      	beq.n	8007032 <HAL_DMA_IRQHandler+0xdaa>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a2a      	ldr	r2, [pc, #168]	; (80070d8 <HAL_DMA_IRQHandler+0xe50>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d108      	bne.n	8007044 <HAL_DMA_IRQHandler+0xdbc>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f022 021c 	bic.w	r2, r2, #28
 8007040:	601a      	str	r2, [r3, #0]
 8007042:	e007      	b.n	8007054 <HAL_DMA_IRQHandler+0xdcc>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f022 020e 	bic.w	r2, r2, #14
 8007052:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007058:	f003 031f 	and.w	r3, r3, #31
 800705c:	2201      	movs	r2, #1
 800705e:	409a      	lsls	r2, r3
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2201      	movs	r2, #1
 800706e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800707e:	2b00      	cmp	r3, #0
 8007080:	d009      	beq.n	8007096 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	4798      	blx	r3
 800708a:	e004      	b.n	8007096 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800708c:	bf00      	nop
 800708e:	e002      	b.n	8007096 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007090:	bf00      	nop
 8007092:	e000      	b.n	8007096 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007094:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007096:	3728      	adds	r7, #40	; 0x28
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}
 800709c:	40020010 	.word	0x40020010
 80070a0:	40020028 	.word	0x40020028
 80070a4:	40020040 	.word	0x40020040
 80070a8:	40020058 	.word	0x40020058
 80070ac:	40020070 	.word	0x40020070
 80070b0:	40020088 	.word	0x40020088
 80070b4:	400200a0 	.word	0x400200a0
 80070b8:	400200b8 	.word	0x400200b8
 80070bc:	40020410 	.word	0x40020410
 80070c0:	40020428 	.word	0x40020428
 80070c4:	40020440 	.word	0x40020440
 80070c8:	40020458 	.word	0x40020458
 80070cc:	40020470 	.word	0x40020470
 80070d0:	40020488 	.word	0x40020488
 80070d4:	400204a0 	.word	0x400204a0
 80070d8:	400204b8 	.word	0x400204b8

080070dc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80070dc:	b480      	push	{r7}
 80070de:	b087      	sub	sp, #28
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	607a      	str	r2, [r7, #4]
 80070e8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ee:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070f4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a7f      	ldr	r2, [pc, #508]	; (80072f8 <DMA_SetConfig+0x21c>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d072      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a7d      	ldr	r2, [pc, #500]	; (80072fc <DMA_SetConfig+0x220>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d06d      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a7c      	ldr	r2, [pc, #496]	; (8007300 <DMA_SetConfig+0x224>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d068      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a7a      	ldr	r2, [pc, #488]	; (8007304 <DMA_SetConfig+0x228>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d063      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a79      	ldr	r2, [pc, #484]	; (8007308 <DMA_SetConfig+0x22c>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d05e      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a77      	ldr	r2, [pc, #476]	; (800730c <DMA_SetConfig+0x230>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d059      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a76      	ldr	r2, [pc, #472]	; (8007310 <DMA_SetConfig+0x234>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d054      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a74      	ldr	r2, [pc, #464]	; (8007314 <DMA_SetConfig+0x238>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d04f      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a73      	ldr	r2, [pc, #460]	; (8007318 <DMA_SetConfig+0x23c>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d04a      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a71      	ldr	r2, [pc, #452]	; (800731c <DMA_SetConfig+0x240>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d045      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a70      	ldr	r2, [pc, #448]	; (8007320 <DMA_SetConfig+0x244>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d040      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a6e      	ldr	r2, [pc, #440]	; (8007324 <DMA_SetConfig+0x248>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d03b      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a6d      	ldr	r2, [pc, #436]	; (8007328 <DMA_SetConfig+0x24c>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d036      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a6b      	ldr	r2, [pc, #428]	; (800732c <DMA_SetConfig+0x250>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d031      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a6a      	ldr	r2, [pc, #424]	; (8007330 <DMA_SetConfig+0x254>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d02c      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a68      	ldr	r2, [pc, #416]	; (8007334 <DMA_SetConfig+0x258>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d027      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a67      	ldr	r2, [pc, #412]	; (8007338 <DMA_SetConfig+0x25c>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d022      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a65      	ldr	r2, [pc, #404]	; (800733c <DMA_SetConfig+0x260>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d01d      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a64      	ldr	r2, [pc, #400]	; (8007340 <DMA_SetConfig+0x264>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d018      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a62      	ldr	r2, [pc, #392]	; (8007344 <DMA_SetConfig+0x268>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d013      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a61      	ldr	r2, [pc, #388]	; (8007348 <DMA_SetConfig+0x26c>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d00e      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a5f      	ldr	r2, [pc, #380]	; (800734c <DMA_SetConfig+0x270>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d009      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a5e      	ldr	r2, [pc, #376]	; (8007350 <DMA_SetConfig+0x274>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d004      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a5c      	ldr	r2, [pc, #368]	; (8007354 <DMA_SetConfig+0x278>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d101      	bne.n	80071ea <DMA_SetConfig+0x10e>
 80071e6:	2301      	movs	r3, #1
 80071e8:	e000      	b.n	80071ec <DMA_SetConfig+0x110>
 80071ea:	2300      	movs	r3, #0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00d      	beq.n	800720c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80071f8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d004      	beq.n	800720c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007206:	68fa      	ldr	r2, [r7, #12]
 8007208:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800720a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a39      	ldr	r2, [pc, #228]	; (80072f8 <DMA_SetConfig+0x21c>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d04a      	beq.n	80072ac <DMA_SetConfig+0x1d0>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a38      	ldr	r2, [pc, #224]	; (80072fc <DMA_SetConfig+0x220>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d045      	beq.n	80072ac <DMA_SetConfig+0x1d0>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a36      	ldr	r2, [pc, #216]	; (8007300 <DMA_SetConfig+0x224>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d040      	beq.n	80072ac <DMA_SetConfig+0x1d0>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a35      	ldr	r2, [pc, #212]	; (8007304 <DMA_SetConfig+0x228>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d03b      	beq.n	80072ac <DMA_SetConfig+0x1d0>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a33      	ldr	r2, [pc, #204]	; (8007308 <DMA_SetConfig+0x22c>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d036      	beq.n	80072ac <DMA_SetConfig+0x1d0>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a32      	ldr	r2, [pc, #200]	; (800730c <DMA_SetConfig+0x230>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d031      	beq.n	80072ac <DMA_SetConfig+0x1d0>
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a30      	ldr	r2, [pc, #192]	; (8007310 <DMA_SetConfig+0x234>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d02c      	beq.n	80072ac <DMA_SetConfig+0x1d0>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a2f      	ldr	r2, [pc, #188]	; (8007314 <DMA_SetConfig+0x238>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d027      	beq.n	80072ac <DMA_SetConfig+0x1d0>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a2d      	ldr	r2, [pc, #180]	; (8007318 <DMA_SetConfig+0x23c>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d022      	beq.n	80072ac <DMA_SetConfig+0x1d0>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a2c      	ldr	r2, [pc, #176]	; (800731c <DMA_SetConfig+0x240>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d01d      	beq.n	80072ac <DMA_SetConfig+0x1d0>
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a2a      	ldr	r2, [pc, #168]	; (8007320 <DMA_SetConfig+0x244>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d018      	beq.n	80072ac <DMA_SetConfig+0x1d0>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a29      	ldr	r2, [pc, #164]	; (8007324 <DMA_SetConfig+0x248>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d013      	beq.n	80072ac <DMA_SetConfig+0x1d0>
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a27      	ldr	r2, [pc, #156]	; (8007328 <DMA_SetConfig+0x24c>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d00e      	beq.n	80072ac <DMA_SetConfig+0x1d0>
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a26      	ldr	r2, [pc, #152]	; (800732c <DMA_SetConfig+0x250>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d009      	beq.n	80072ac <DMA_SetConfig+0x1d0>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a24      	ldr	r2, [pc, #144]	; (8007330 <DMA_SetConfig+0x254>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d004      	beq.n	80072ac <DMA_SetConfig+0x1d0>
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a23      	ldr	r2, [pc, #140]	; (8007334 <DMA_SetConfig+0x258>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d101      	bne.n	80072b0 <DMA_SetConfig+0x1d4>
 80072ac:	2301      	movs	r3, #1
 80072ae:	e000      	b.n	80072b2 <DMA_SetConfig+0x1d6>
 80072b0:	2300      	movs	r3, #0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d059      	beq.n	800736a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072ba:	f003 031f 	and.w	r3, r3, #31
 80072be:	223f      	movs	r2, #63	; 0x3f
 80072c0:	409a      	lsls	r2, r3
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80072d4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	683a      	ldr	r2, [r7, #0]
 80072dc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	2b40      	cmp	r3, #64	; 0x40
 80072e4:	d138      	bne.n	8007358 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68ba      	ldr	r2, [r7, #8]
 80072f4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80072f6:	e086      	b.n	8007406 <DMA_SetConfig+0x32a>
 80072f8:	40020010 	.word	0x40020010
 80072fc:	40020028 	.word	0x40020028
 8007300:	40020040 	.word	0x40020040
 8007304:	40020058 	.word	0x40020058
 8007308:	40020070 	.word	0x40020070
 800730c:	40020088 	.word	0x40020088
 8007310:	400200a0 	.word	0x400200a0
 8007314:	400200b8 	.word	0x400200b8
 8007318:	40020410 	.word	0x40020410
 800731c:	40020428 	.word	0x40020428
 8007320:	40020440 	.word	0x40020440
 8007324:	40020458 	.word	0x40020458
 8007328:	40020470 	.word	0x40020470
 800732c:	40020488 	.word	0x40020488
 8007330:	400204a0 	.word	0x400204a0
 8007334:	400204b8 	.word	0x400204b8
 8007338:	58025408 	.word	0x58025408
 800733c:	5802541c 	.word	0x5802541c
 8007340:	58025430 	.word	0x58025430
 8007344:	58025444 	.word	0x58025444
 8007348:	58025458 	.word	0x58025458
 800734c:	5802546c 	.word	0x5802546c
 8007350:	58025480 	.word	0x58025480
 8007354:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	60da      	str	r2, [r3, #12]
}
 8007368:	e04d      	b.n	8007406 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a29      	ldr	r2, [pc, #164]	; (8007414 <DMA_SetConfig+0x338>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d022      	beq.n	80073ba <DMA_SetConfig+0x2de>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a27      	ldr	r2, [pc, #156]	; (8007418 <DMA_SetConfig+0x33c>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d01d      	beq.n	80073ba <DMA_SetConfig+0x2de>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a26      	ldr	r2, [pc, #152]	; (800741c <DMA_SetConfig+0x340>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d018      	beq.n	80073ba <DMA_SetConfig+0x2de>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a24      	ldr	r2, [pc, #144]	; (8007420 <DMA_SetConfig+0x344>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d013      	beq.n	80073ba <DMA_SetConfig+0x2de>
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a23      	ldr	r2, [pc, #140]	; (8007424 <DMA_SetConfig+0x348>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d00e      	beq.n	80073ba <DMA_SetConfig+0x2de>
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a21      	ldr	r2, [pc, #132]	; (8007428 <DMA_SetConfig+0x34c>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d009      	beq.n	80073ba <DMA_SetConfig+0x2de>
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a20      	ldr	r2, [pc, #128]	; (800742c <DMA_SetConfig+0x350>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d004      	beq.n	80073ba <DMA_SetConfig+0x2de>
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a1e      	ldr	r2, [pc, #120]	; (8007430 <DMA_SetConfig+0x354>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d101      	bne.n	80073be <DMA_SetConfig+0x2e2>
 80073ba:	2301      	movs	r3, #1
 80073bc:	e000      	b.n	80073c0 <DMA_SetConfig+0x2e4>
 80073be:	2300      	movs	r3, #0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d020      	beq.n	8007406 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073c8:	f003 031f 	and.w	r3, r3, #31
 80073cc:	2201      	movs	r2, #1
 80073ce:	409a      	lsls	r2, r3
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	683a      	ldr	r2, [r7, #0]
 80073da:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	2b40      	cmp	r3, #64	; 0x40
 80073e2:	d108      	bne.n	80073f6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68ba      	ldr	r2, [r7, #8]
 80073f2:	60da      	str	r2, [r3, #12]
}
 80073f4:	e007      	b.n	8007406 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	60da      	str	r2, [r3, #12]
}
 8007406:	bf00      	nop
 8007408:	371c      	adds	r7, #28
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	58025408 	.word	0x58025408
 8007418:	5802541c 	.word	0x5802541c
 800741c:	58025430 	.word	0x58025430
 8007420:	58025444 	.word	0x58025444
 8007424:	58025458 	.word	0x58025458
 8007428:	5802546c 	.word	0x5802546c
 800742c:	58025480 	.word	0x58025480
 8007430:	58025494 	.word	0x58025494

08007434 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a42      	ldr	r2, [pc, #264]	; (800754c <DMA_CalcBaseAndBitshift+0x118>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d04a      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a41      	ldr	r2, [pc, #260]	; (8007550 <DMA_CalcBaseAndBitshift+0x11c>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d045      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a3f      	ldr	r2, [pc, #252]	; (8007554 <DMA_CalcBaseAndBitshift+0x120>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d040      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a3e      	ldr	r2, [pc, #248]	; (8007558 <DMA_CalcBaseAndBitshift+0x124>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d03b      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a3c      	ldr	r2, [pc, #240]	; (800755c <DMA_CalcBaseAndBitshift+0x128>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d036      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a3b      	ldr	r2, [pc, #236]	; (8007560 <DMA_CalcBaseAndBitshift+0x12c>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d031      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a39      	ldr	r2, [pc, #228]	; (8007564 <DMA_CalcBaseAndBitshift+0x130>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d02c      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a38      	ldr	r2, [pc, #224]	; (8007568 <DMA_CalcBaseAndBitshift+0x134>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d027      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a36      	ldr	r2, [pc, #216]	; (800756c <DMA_CalcBaseAndBitshift+0x138>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d022      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a35      	ldr	r2, [pc, #212]	; (8007570 <DMA_CalcBaseAndBitshift+0x13c>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d01d      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a33      	ldr	r2, [pc, #204]	; (8007574 <DMA_CalcBaseAndBitshift+0x140>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d018      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a32      	ldr	r2, [pc, #200]	; (8007578 <DMA_CalcBaseAndBitshift+0x144>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d013      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a30      	ldr	r2, [pc, #192]	; (800757c <DMA_CalcBaseAndBitshift+0x148>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d00e      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a2f      	ldr	r2, [pc, #188]	; (8007580 <DMA_CalcBaseAndBitshift+0x14c>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d009      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a2d      	ldr	r2, [pc, #180]	; (8007584 <DMA_CalcBaseAndBitshift+0x150>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d004      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a2c      	ldr	r2, [pc, #176]	; (8007588 <DMA_CalcBaseAndBitshift+0x154>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d101      	bne.n	80074e0 <DMA_CalcBaseAndBitshift+0xac>
 80074dc:	2301      	movs	r3, #1
 80074de:	e000      	b.n	80074e2 <DMA_CalcBaseAndBitshift+0xae>
 80074e0:	2300      	movs	r3, #0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d024      	beq.n	8007530 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	3b10      	subs	r3, #16
 80074ee:	4a27      	ldr	r2, [pc, #156]	; (800758c <DMA_CalcBaseAndBitshift+0x158>)
 80074f0:	fba2 2303 	umull	r2, r3, r2, r3
 80074f4:	091b      	lsrs	r3, r3, #4
 80074f6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f003 0307 	and.w	r3, r3, #7
 80074fe:	4a24      	ldr	r2, [pc, #144]	; (8007590 <DMA_CalcBaseAndBitshift+0x15c>)
 8007500:	5cd3      	ldrb	r3, [r2, r3]
 8007502:	461a      	mov	r2, r3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2b03      	cmp	r3, #3
 800750c:	d908      	bls.n	8007520 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	461a      	mov	r2, r3
 8007514:	4b1f      	ldr	r3, [pc, #124]	; (8007594 <DMA_CalcBaseAndBitshift+0x160>)
 8007516:	4013      	ands	r3, r2
 8007518:	1d1a      	adds	r2, r3, #4
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	659a      	str	r2, [r3, #88]	; 0x58
 800751e:	e00d      	b.n	800753c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	461a      	mov	r2, r3
 8007526:	4b1b      	ldr	r3, [pc, #108]	; (8007594 <DMA_CalcBaseAndBitshift+0x160>)
 8007528:	4013      	ands	r3, r2
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	6593      	str	r3, [r2, #88]	; 0x58
 800752e:	e005      	b.n	800753c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007540:	4618      	mov	r0, r3
 8007542:	3714      	adds	r7, #20
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr
 800754c:	40020010 	.word	0x40020010
 8007550:	40020028 	.word	0x40020028
 8007554:	40020040 	.word	0x40020040
 8007558:	40020058 	.word	0x40020058
 800755c:	40020070 	.word	0x40020070
 8007560:	40020088 	.word	0x40020088
 8007564:	400200a0 	.word	0x400200a0
 8007568:	400200b8 	.word	0x400200b8
 800756c:	40020410 	.word	0x40020410
 8007570:	40020428 	.word	0x40020428
 8007574:	40020440 	.word	0x40020440
 8007578:	40020458 	.word	0x40020458
 800757c:	40020470 	.word	0x40020470
 8007580:	40020488 	.word	0x40020488
 8007584:	400204a0 	.word	0x400204a0
 8007588:	400204b8 	.word	0x400204b8
 800758c:	aaaaaaab 	.word	0xaaaaaaab
 8007590:	08018c9c 	.word	0x08018c9c
 8007594:	fffffc00 	.word	0xfffffc00

08007598 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075a0:	2300      	movs	r3, #0
 80075a2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	699b      	ldr	r3, [r3, #24]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d120      	bne.n	80075ee <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b0:	2b03      	cmp	r3, #3
 80075b2:	d858      	bhi.n	8007666 <DMA_CheckFifoParam+0xce>
 80075b4:	a201      	add	r2, pc, #4	; (adr r2, 80075bc <DMA_CheckFifoParam+0x24>)
 80075b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ba:	bf00      	nop
 80075bc:	080075cd 	.word	0x080075cd
 80075c0:	080075df 	.word	0x080075df
 80075c4:	080075cd 	.word	0x080075cd
 80075c8:	08007667 	.word	0x08007667
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d048      	beq.n	800766a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80075dc:	e045      	b.n	800766a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80075e6:	d142      	bne.n	800766e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80075ec:	e03f      	b.n	800766e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	699b      	ldr	r3, [r3, #24]
 80075f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075f6:	d123      	bne.n	8007640 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fc:	2b03      	cmp	r3, #3
 80075fe:	d838      	bhi.n	8007672 <DMA_CheckFifoParam+0xda>
 8007600:	a201      	add	r2, pc, #4	; (adr r2, 8007608 <DMA_CheckFifoParam+0x70>)
 8007602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007606:	bf00      	nop
 8007608:	08007619 	.word	0x08007619
 800760c:	0800761f 	.word	0x0800761f
 8007610:	08007619 	.word	0x08007619
 8007614:	08007631 	.word	0x08007631
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	73fb      	strb	r3, [r7, #15]
        break;
 800761c:	e030      	b.n	8007680 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007622:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007626:	2b00      	cmp	r3, #0
 8007628:	d025      	beq.n	8007676 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800762e:	e022      	b.n	8007676 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007634:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007638:	d11f      	bne.n	800767a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800763e:	e01c      	b.n	800767a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007644:	2b02      	cmp	r3, #2
 8007646:	d902      	bls.n	800764e <DMA_CheckFifoParam+0xb6>
 8007648:	2b03      	cmp	r3, #3
 800764a:	d003      	beq.n	8007654 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800764c:	e018      	b.n	8007680 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	73fb      	strb	r3, [r7, #15]
        break;
 8007652:	e015      	b.n	8007680 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007658:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00e      	beq.n	800767e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	73fb      	strb	r3, [r7, #15]
    break;
 8007664:	e00b      	b.n	800767e <DMA_CheckFifoParam+0xe6>
        break;
 8007666:	bf00      	nop
 8007668:	e00a      	b.n	8007680 <DMA_CheckFifoParam+0xe8>
        break;
 800766a:	bf00      	nop
 800766c:	e008      	b.n	8007680 <DMA_CheckFifoParam+0xe8>
        break;
 800766e:	bf00      	nop
 8007670:	e006      	b.n	8007680 <DMA_CheckFifoParam+0xe8>
        break;
 8007672:	bf00      	nop
 8007674:	e004      	b.n	8007680 <DMA_CheckFifoParam+0xe8>
        break;
 8007676:	bf00      	nop
 8007678:	e002      	b.n	8007680 <DMA_CheckFifoParam+0xe8>
        break;
 800767a:	bf00      	nop
 800767c:	e000      	b.n	8007680 <DMA_CheckFifoParam+0xe8>
    break;
 800767e:	bf00      	nop
    }
  }

  return status;
 8007680:	7bfb      	ldrb	r3, [r7, #15]
}
 8007682:	4618      	mov	r0, r3
 8007684:	3714      	adds	r7, #20
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop

08007690 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a38      	ldr	r2, [pc, #224]	; (8007784 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d022      	beq.n	80076ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a36      	ldr	r2, [pc, #216]	; (8007788 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d01d      	beq.n	80076ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a35      	ldr	r2, [pc, #212]	; (800778c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d018      	beq.n	80076ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a33      	ldr	r2, [pc, #204]	; (8007790 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d013      	beq.n	80076ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a32      	ldr	r2, [pc, #200]	; (8007794 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d00e      	beq.n	80076ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a30      	ldr	r2, [pc, #192]	; (8007798 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d009      	beq.n	80076ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a2f      	ldr	r2, [pc, #188]	; (800779c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d004      	beq.n	80076ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a2d      	ldr	r2, [pc, #180]	; (80077a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d101      	bne.n	80076f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80076ee:	2301      	movs	r3, #1
 80076f0:	e000      	b.n	80076f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80076f2:	2300      	movs	r3, #0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d01a      	beq.n	800772e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	3b08      	subs	r3, #8
 8007700:	4a28      	ldr	r2, [pc, #160]	; (80077a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007702:	fba2 2303 	umull	r2, r3, r2, r3
 8007706:	091b      	lsrs	r3, r3, #4
 8007708:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	4b26      	ldr	r3, [pc, #152]	; (80077a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800770e:	4413      	add	r3, r2
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	461a      	mov	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a24      	ldr	r2, [pc, #144]	; (80077ac <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800771c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f003 031f 	and.w	r3, r3, #31
 8007724:	2201      	movs	r2, #1
 8007726:	409a      	lsls	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800772c:	e024      	b.n	8007778 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	b2db      	uxtb	r3, r3
 8007734:	3b10      	subs	r3, #16
 8007736:	4a1e      	ldr	r2, [pc, #120]	; (80077b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007738:	fba2 2303 	umull	r2, r3, r2, r3
 800773c:	091b      	lsrs	r3, r3, #4
 800773e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	4a1c      	ldr	r2, [pc, #112]	; (80077b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d806      	bhi.n	8007756 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	4a1b      	ldr	r2, [pc, #108]	; (80077b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d902      	bls.n	8007756 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	3308      	adds	r3, #8
 8007754:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	4b18      	ldr	r3, [pc, #96]	; (80077bc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800775a:	4413      	add	r3, r2
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	461a      	mov	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4a16      	ldr	r2, [pc, #88]	; (80077c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007768:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f003 031f 	and.w	r3, r3, #31
 8007770:	2201      	movs	r2, #1
 8007772:	409a      	lsls	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007778:	bf00      	nop
 800777a:	3714      	adds	r7, #20
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr
 8007784:	58025408 	.word	0x58025408
 8007788:	5802541c 	.word	0x5802541c
 800778c:	58025430 	.word	0x58025430
 8007790:	58025444 	.word	0x58025444
 8007794:	58025458 	.word	0x58025458
 8007798:	5802546c 	.word	0x5802546c
 800779c:	58025480 	.word	0x58025480
 80077a0:	58025494 	.word	0x58025494
 80077a4:	cccccccd 	.word	0xcccccccd
 80077a8:	16009600 	.word	0x16009600
 80077ac:	58025880 	.word	0x58025880
 80077b0:	aaaaaaab 	.word	0xaaaaaaab
 80077b4:	400204b8 	.word	0x400204b8
 80077b8:	4002040f 	.word	0x4002040f
 80077bc:	10008200 	.word	0x10008200
 80077c0:	40020880 	.word	0x40020880

080077c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d04a      	beq.n	8007870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2b08      	cmp	r3, #8
 80077de:	d847      	bhi.n	8007870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a25      	ldr	r2, [pc, #148]	; (800787c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d022      	beq.n	8007830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a24      	ldr	r2, [pc, #144]	; (8007880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d01d      	beq.n	8007830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a22      	ldr	r2, [pc, #136]	; (8007884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d018      	beq.n	8007830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a21      	ldr	r2, [pc, #132]	; (8007888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d013      	beq.n	8007830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a1f      	ldr	r2, [pc, #124]	; (800788c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d00e      	beq.n	8007830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a1e      	ldr	r2, [pc, #120]	; (8007890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d009      	beq.n	8007830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a1c      	ldr	r2, [pc, #112]	; (8007894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d004      	beq.n	8007830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a1b      	ldr	r2, [pc, #108]	; (8007898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d101      	bne.n	8007834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007830:	2301      	movs	r3, #1
 8007832:	e000      	b.n	8007836 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007834:	2300      	movs	r3, #0
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00a      	beq.n	8007850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800783a:	68fa      	ldr	r2, [r7, #12]
 800783c:	4b17      	ldr	r3, [pc, #92]	; (800789c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800783e:	4413      	add	r3, r2
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	461a      	mov	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4a15      	ldr	r2, [pc, #84]	; (80078a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800784c:	671a      	str	r2, [r3, #112]	; 0x70
 800784e:	e009      	b.n	8007864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	4b14      	ldr	r3, [pc, #80]	; (80078a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007854:	4413      	add	r3, r2
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	461a      	mov	r2, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4a11      	ldr	r2, [pc, #68]	; (80078a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007862:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	3b01      	subs	r3, #1
 8007868:	2201      	movs	r2, #1
 800786a:	409a      	lsls	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007870:	bf00      	nop
 8007872:	3714      	adds	r7, #20
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr
 800787c:	58025408 	.word	0x58025408
 8007880:	5802541c 	.word	0x5802541c
 8007884:	58025430 	.word	0x58025430
 8007888:	58025444 	.word	0x58025444
 800788c:	58025458 	.word	0x58025458
 8007890:	5802546c 	.word	0x5802546c
 8007894:	58025480 	.word	0x58025480
 8007898:	58025494 	.word	0x58025494
 800789c:	1600963f 	.word	0x1600963f
 80078a0:	58025940 	.word	0x58025940
 80078a4:	1000823f 	.word	0x1000823f
 80078a8:	40020940 	.word	0x40020940

080078ac <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b098      	sub	sp, #96	; 0x60
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80078b4:	4a84      	ldr	r2, [pc, #528]	; (8007ac8 <HAL_FDCAN_Init+0x21c>)
 80078b6:	f107 030c 	add.w	r3, r7, #12
 80078ba:	4611      	mov	r1, r2
 80078bc:	224c      	movs	r2, #76	; 0x4c
 80078be:	4618      	mov	r0, r3
 80078c0:	f00f ffc2 	bl	8017848 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d101      	bne.n	80078ce <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	e1c6      	b.n	8007c5c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a7e      	ldr	r2, [pc, #504]	; (8007acc <HAL_FDCAN_Init+0x220>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d106      	bne.n	80078e6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80078e0:	461a      	mov	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d106      	bne.n	8007900 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f7fb fa6a 	bl	8002dd4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	699a      	ldr	r2, [r3, #24]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f022 0210 	bic.w	r2, r2, #16
 800790e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007910:	f7fc fa32 	bl	8003d78 <HAL_GetTick>
 8007914:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007916:	e014      	b.n	8007942 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007918:	f7fc fa2e 	bl	8003d78 <HAL_GetTick>
 800791c:	4602      	mov	r2, r0
 800791e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	2b0a      	cmp	r3, #10
 8007924:	d90d      	bls.n	8007942 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800792c:	f043 0201 	orr.w	r2, r3, #1
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2203      	movs	r2, #3
 800793a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	e18c      	b.n	8007c5c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	699b      	ldr	r3, [r3, #24]
 8007948:	f003 0308 	and.w	r3, r3, #8
 800794c:	2b08      	cmp	r3, #8
 800794e:	d0e3      	beq.n	8007918 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	699a      	ldr	r2, [r3, #24]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f042 0201 	orr.w	r2, r2, #1
 800795e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007960:	f7fc fa0a 	bl	8003d78 <HAL_GetTick>
 8007964:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007966:	e014      	b.n	8007992 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007968:	f7fc fa06 	bl	8003d78 <HAL_GetTick>
 800796c:	4602      	mov	r2, r0
 800796e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	2b0a      	cmp	r3, #10
 8007974:	d90d      	bls.n	8007992 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800797c:	f043 0201 	orr.w	r2, r3, #1
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2203      	movs	r2, #3
 800798a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	e164      	b.n	8007c5c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	699b      	ldr	r3, [r3, #24]
 8007998:	f003 0301 	and.w	r3, r3, #1
 800799c:	2b00      	cmp	r3, #0
 800799e:	d0e3      	beq.n	8007968 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	699a      	ldr	r2, [r3, #24]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f042 0202 	orr.w	r2, r2, #2
 80079ae:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	7c1b      	ldrb	r3, [r3, #16]
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d108      	bne.n	80079ca <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	699a      	ldr	r2, [r3, #24]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079c6:	619a      	str	r2, [r3, #24]
 80079c8:	e007      	b.n	80079da <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	699a      	ldr	r2, [r3, #24]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079d8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	7c5b      	ldrb	r3, [r3, #17]
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d108      	bne.n	80079f4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	699a      	ldr	r2, [r3, #24]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079f0:	619a      	str	r2, [r3, #24]
 80079f2:	e007      	b.n	8007a04 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	699a      	ldr	r2, [r3, #24]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007a02:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	7c9b      	ldrb	r3, [r3, #18]
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d108      	bne.n	8007a1e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	699a      	ldr	r2, [r3, #24]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007a1a:	619a      	str	r2, [r3, #24]
 8007a1c:	e007      	b.n	8007a2e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	699a      	ldr	r2, [r3, #24]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a2c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	699b      	ldr	r3, [r3, #24]
 8007a34:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	689a      	ldr	r2, [r3, #8]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	430a      	orrs	r2, r1
 8007a42:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	699a      	ldr	r2, [r3, #24]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8007a52:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	691a      	ldr	r2, [r3, #16]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f022 0210 	bic.w	r2, r2, #16
 8007a62:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d108      	bne.n	8007a7e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	699a      	ldr	r2, [r3, #24]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f042 0204 	orr.w	r2, r2, #4
 8007a7a:	619a      	str	r2, [r3, #24]
 8007a7c:	e030      	b.n	8007ae0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d02c      	beq.n	8007ae0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d020      	beq.n	8007ad0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	699a      	ldr	r2, [r3, #24]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007a9c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	691a      	ldr	r2, [r3, #16]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f042 0210 	orr.w	r2, r2, #16
 8007aac:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	2b03      	cmp	r3, #3
 8007ab4:	d114      	bne.n	8007ae0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	699a      	ldr	r2, [r3, #24]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f042 0220 	orr.w	r2, r2, #32
 8007ac4:	619a      	str	r2, [r3, #24]
 8007ac6:	e00b      	b.n	8007ae0 <HAL_FDCAN_Init+0x234>
 8007ac8:	08018b88 	.word	0x08018b88
 8007acc:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	699a      	ldr	r2, [r3, #24]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f042 0220 	orr.w	r2, r2, #32
 8007ade:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	699b      	ldr	r3, [r3, #24]
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	69db      	ldr	r3, [r3, #28]
 8007aec:	3b01      	subs	r3, #1
 8007aee:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007af0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a1b      	ldr	r3, [r3, #32]
 8007af6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007af8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	695b      	ldr	r3, [r3, #20]
 8007b00:	3b01      	subs	r3, #1
 8007b02:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007b08:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007b0a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b14:	d115      	bne.n	8007b42 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b1a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b20:	3b01      	subs	r3, #1
 8007b22:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007b24:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007b2e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b36:	3b01      	subs	r3, #1
 8007b38:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007b3e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007b40:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d00a      	beq.n	8007b60 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	430a      	orrs	r2, r1
 8007b5c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b68:	4413      	add	r3, r2
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d011      	beq.n	8007b92 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8007b76:	f023 0107 	bic.w	r1, r3, #7
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	3360      	adds	r3, #96	; 0x60
 8007b82:	443b      	add	r3, r7
 8007b84:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	430a      	orrs	r2, r1
 8007b8e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d011      	beq.n	8007bbe <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007ba2:	f023 0107 	bic.w	r1, r3, #7
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	3360      	adds	r3, #96	; 0x60
 8007bae:	443b      	add	r3, r7
 8007bb0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	430a      	orrs	r2, r1
 8007bba:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d012      	beq.n	8007bec <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007bce:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	3360      	adds	r3, #96	; 0x60
 8007bda:	443b      	add	r3, r7
 8007bdc:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007be0:	011a      	lsls	r2, r3, #4
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	430a      	orrs	r2, r1
 8007be8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d012      	beq.n	8007c1a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007bfc:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	3360      	adds	r3, #96	; 0x60
 8007c08:	443b      	add	r3, r7
 8007c0a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007c0e:	021a      	lsls	r2, r3, #8
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	430a      	orrs	r2, r1
 8007c16:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a11      	ldr	r2, [pc, #68]	; (8007c64 <HAL_FDCAN_Init+0x3b8>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d107      	bne.n	8007c34 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	689a      	ldr	r2, [r3, #8]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	f022 0203 	bic.w	r2, r2, #3
 8007c32:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 f80b 	bl	8007c68 <FDCAN_CalcultateRamBlockAddresses>
 8007c52:	4603      	mov	r3, r0
 8007c54:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8007c58:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3760      	adds	r7, #96	; 0x60
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	4000a000 	.word	0x4000a000

08007c68 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c74:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007c7e:	4ba7      	ldr	r3, [pc, #668]	; (8007f1c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007c80:	4013      	ands	r3, r2
 8007c82:	68ba      	ldr	r2, [r7, #8]
 8007c84:	0091      	lsls	r1, r2, #2
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	6812      	ldr	r2, [r2, #0]
 8007c8a:	430b      	orrs	r3, r1
 8007c8c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c98:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca0:	041a      	lsls	r2, r3, #16
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	430a      	orrs	r2, r1
 8007ca8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb0:	68ba      	ldr	r2, [r7, #8]
 8007cb2:	4413      	add	r3, r2
 8007cb4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007cbe:	4b97      	ldr	r3, [pc, #604]	; (8007f1c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007cc0:	4013      	ands	r3, r2
 8007cc2:	68ba      	ldr	r2, [r7, #8]
 8007cc4:	0091      	lsls	r1, r2, #2
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	6812      	ldr	r2, [r2, #0]
 8007cca:	430b      	orrs	r3, r1
 8007ccc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cd8:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ce0:	041a      	lsls	r2, r3, #16
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	430a      	orrs	r2, r1
 8007ce8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cf0:	005b      	lsls	r3, r3, #1
 8007cf2:	68ba      	ldr	r2, [r7, #8]
 8007cf4:	4413      	add	r3, r2
 8007cf6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007d00:	4b86      	ldr	r3, [pc, #536]	; (8007f1c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007d02:	4013      	ands	r3, r2
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	0091      	lsls	r1, r2, #2
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	6812      	ldr	r2, [r2, #0]
 8007d0c:	430b      	orrs	r3, r1
 8007d0e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007d1a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d22:	041a      	lsls	r2, r3, #16
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	430a      	orrs	r2, r1
 8007d2a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007d36:	fb02 f303 	mul.w	r3, r2, r3
 8007d3a:	68ba      	ldr	r2, [r7, #8]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007d48:	4b74      	ldr	r3, [pc, #464]	; (8007f1c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	68ba      	ldr	r2, [r7, #8]
 8007d4e:	0091      	lsls	r1, r2, #2
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	6812      	ldr	r2, [r2, #0]
 8007d54:	430b      	orrs	r3, r1
 8007d56:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007d62:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d6a:	041a      	lsls	r2, r3, #16
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	430a      	orrs	r2, r1
 8007d72:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007d7e:	fb02 f303 	mul.w	r3, r2, r3
 8007d82:	68ba      	ldr	r2, [r7, #8]
 8007d84:	4413      	add	r3, r2
 8007d86:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007d90:	4b62      	ldr	r3, [pc, #392]	; (8007f1c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007d92:	4013      	ands	r3, r2
 8007d94:	68ba      	ldr	r2, [r7, #8]
 8007d96:	0091      	lsls	r1, r2, #2
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	6812      	ldr	r2, [r2, #0]
 8007d9c:	430b      	orrs	r3, r1
 8007d9e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007daa:	fb02 f303 	mul.w	r3, r2, r3
 8007dae:	68ba      	ldr	r2, [r7, #8]
 8007db0:	4413      	add	r3, r2
 8007db2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007dbc:	4b57      	ldr	r3, [pc, #348]	; (8007f1c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007dbe:	4013      	ands	r3, r2
 8007dc0:	68ba      	ldr	r2, [r7, #8]
 8007dc2:	0091      	lsls	r1, r2, #2
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	6812      	ldr	r2, [r2, #0]
 8007dc8:	430b      	orrs	r3, r1
 8007dca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007dd6:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dde:	041a      	lsls	r2, r3, #16
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	430a      	orrs	r2, r1
 8007de6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dee:	005b      	lsls	r3, r3, #1
 8007df0:	68ba      	ldr	r2, [r7, #8]
 8007df2:	4413      	add	r3, r2
 8007df4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007dfe:	4b47      	ldr	r3, [pc, #284]	; (8007f1c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007e00:	4013      	ands	r3, r2
 8007e02:	68ba      	ldr	r2, [r7, #8]
 8007e04:	0091      	lsls	r1, r2, #2
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	6812      	ldr	r2, [r2, #0]
 8007e0a:	430b      	orrs	r3, r1
 8007e0c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007e18:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e20:	041a      	lsls	r2, r3, #16
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	430a      	orrs	r2, r1
 8007e28:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007e34:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e3c:	061a      	lsls	r2, r3, #24
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	430a      	orrs	r2, r1
 8007e44:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e4c:	4b34      	ldr	r3, [pc, #208]	; (8007f20 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007e4e:	4413      	add	r3, r2
 8007e50:	009a      	lsls	r2, r3, #2
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	441a      	add	r2, r3
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e6e:	00db      	lsls	r3, r3, #3
 8007e70:	441a      	add	r2, r3
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e7e:	6879      	ldr	r1, [r7, #4]
 8007e80:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007e82:	fb01 f303 	mul.w	r3, r1, r3
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	441a      	add	r2, r3
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e96:	6879      	ldr	r1, [r7, #4]
 8007e98:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007e9a:	fb01 f303 	mul.w	r3, r1, r3
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	441a      	add	r2, r3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eae:	6879      	ldr	r1, [r7, #4]
 8007eb0:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8007eb2:	fb01 f303 	mul.w	r3, r1, r3
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	441a      	add	r2, r3
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eca:	00db      	lsls	r3, r3, #3
 8007ecc:	441a      	add	r2, r3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ede:	6879      	ldr	r1, [r7, #4]
 8007ee0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007ee2:	fb01 f303 	mul.w	r3, r1, r3
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	441a      	add	r2, r3
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007efa:	6879      	ldr	r1, [r7, #4]
 8007efc:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007efe:	fb01 f303 	mul.w	r3, r1, r3
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	441a      	add	r2, r3
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f12:	4a04      	ldr	r2, [pc, #16]	; (8007f24 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d915      	bls.n	8007f44 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007f18:	e006      	b.n	8007f28 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007f1a:	bf00      	nop
 8007f1c:	ffff0003 	.word	0xffff0003
 8007f20:	10002b00 	.word	0x10002b00
 8007f24:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f2e:	f043 0220 	orr.w	r2, r3, #32
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2203      	movs	r2, #3
 8007f3c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007f40:	2301      	movs	r3, #1
 8007f42:	e010      	b.n	8007f66 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f48:	60fb      	str	r3, [r7, #12]
 8007f4a:	e005      	b.n	8007f58 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	3304      	adds	r3, #4
 8007f56:	60fb      	str	r3, [r7, #12]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d3f3      	bcc.n	8007f4c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007f64:	2300      	movs	r3, #0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3714      	adds	r7, #20
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop

08007f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b089      	sub	sp, #36	; 0x24
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007f82:	4b86      	ldr	r3, [pc, #536]	; (800819c <HAL_GPIO_Init+0x228>)
 8007f84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007f86:	e18c      	b.n	80082a2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	2101      	movs	r1, #1
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	fa01 f303 	lsl.w	r3, r1, r3
 8007f94:	4013      	ands	r3, r2
 8007f96:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	f000 817e 	beq.w	800829c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	f003 0303 	and.w	r3, r3, #3
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d005      	beq.n	8007fb8 <HAL_GPIO_Init+0x44>
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	f003 0303 	and.w	r3, r3, #3
 8007fb4:	2b02      	cmp	r3, #2
 8007fb6:	d130      	bne.n	800801a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	005b      	lsls	r3, r3, #1
 8007fc2:	2203      	movs	r2, #3
 8007fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8007fc8:	43db      	mvns	r3, r3
 8007fca:	69ba      	ldr	r2, [r7, #24]
 8007fcc:	4013      	ands	r3, r2
 8007fce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	68da      	ldr	r2, [r3, #12]
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	005b      	lsls	r3, r3, #1
 8007fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8007fdc:	69ba      	ldr	r2, [r7, #24]
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	69ba      	ldr	r2, [r7, #24]
 8007fe6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007fee:	2201      	movs	r2, #1
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff6:	43db      	mvns	r3, r3
 8007ff8:	69ba      	ldr	r2, [r7, #24]
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	091b      	lsrs	r3, r3, #4
 8008004:	f003 0201 	and.w	r2, r3, #1
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	fa02 f303 	lsl.w	r3, r2, r3
 800800e:	69ba      	ldr	r2, [r7, #24]
 8008010:	4313      	orrs	r3, r2
 8008012:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	69ba      	ldr	r2, [r7, #24]
 8008018:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	f003 0303 	and.w	r3, r3, #3
 8008022:	2b03      	cmp	r3, #3
 8008024:	d017      	beq.n	8008056 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	005b      	lsls	r3, r3, #1
 8008030:	2203      	movs	r2, #3
 8008032:	fa02 f303 	lsl.w	r3, r2, r3
 8008036:	43db      	mvns	r3, r3
 8008038:	69ba      	ldr	r2, [r7, #24]
 800803a:	4013      	ands	r3, r2
 800803c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	689a      	ldr	r2, [r3, #8]
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	005b      	lsls	r3, r3, #1
 8008046:	fa02 f303 	lsl.w	r3, r2, r3
 800804a:	69ba      	ldr	r2, [r7, #24]
 800804c:	4313      	orrs	r3, r2
 800804e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	69ba      	ldr	r2, [r7, #24]
 8008054:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	f003 0303 	and.w	r3, r3, #3
 800805e:	2b02      	cmp	r3, #2
 8008060:	d123      	bne.n	80080aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008062:	69fb      	ldr	r3, [r7, #28]
 8008064:	08da      	lsrs	r2, r3, #3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	3208      	adds	r2, #8
 800806a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800806e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	f003 0307 	and.w	r3, r3, #7
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	220f      	movs	r2, #15
 800807a:	fa02 f303 	lsl.w	r3, r2, r3
 800807e:	43db      	mvns	r3, r3
 8008080:	69ba      	ldr	r2, [r7, #24]
 8008082:	4013      	ands	r3, r2
 8008084:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	691a      	ldr	r2, [r3, #16]
 800808a:	69fb      	ldr	r3, [r7, #28]
 800808c:	f003 0307 	and.w	r3, r3, #7
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	fa02 f303 	lsl.w	r3, r2, r3
 8008096:	69ba      	ldr	r2, [r7, #24]
 8008098:	4313      	orrs	r3, r2
 800809a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	08da      	lsrs	r2, r3, #3
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	3208      	adds	r2, #8
 80080a4:	69b9      	ldr	r1, [r7, #24]
 80080a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	005b      	lsls	r3, r3, #1
 80080b4:	2203      	movs	r2, #3
 80080b6:	fa02 f303 	lsl.w	r3, r2, r3
 80080ba:	43db      	mvns	r3, r3
 80080bc:	69ba      	ldr	r2, [r7, #24]
 80080be:	4013      	ands	r3, r2
 80080c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	f003 0203 	and.w	r2, r3, #3
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	005b      	lsls	r3, r3, #1
 80080ce:	fa02 f303 	lsl.w	r3, r2, r3
 80080d2:	69ba      	ldr	r2, [r7, #24]
 80080d4:	4313      	orrs	r3, r2
 80080d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	69ba      	ldr	r2, [r7, #24]
 80080dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	f000 80d8 	beq.w	800829c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80080ec:	4b2c      	ldr	r3, [pc, #176]	; (80081a0 <HAL_GPIO_Init+0x22c>)
 80080ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80080f2:	4a2b      	ldr	r2, [pc, #172]	; (80081a0 <HAL_GPIO_Init+0x22c>)
 80080f4:	f043 0302 	orr.w	r3, r3, #2
 80080f8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80080fc:	4b28      	ldr	r3, [pc, #160]	; (80081a0 <HAL_GPIO_Init+0x22c>)
 80080fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008102:	f003 0302 	and.w	r3, r3, #2
 8008106:	60fb      	str	r3, [r7, #12]
 8008108:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800810a:	4a26      	ldr	r2, [pc, #152]	; (80081a4 <HAL_GPIO_Init+0x230>)
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	089b      	lsrs	r3, r3, #2
 8008110:	3302      	adds	r3, #2
 8008112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008116:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	f003 0303 	and.w	r3, r3, #3
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	220f      	movs	r2, #15
 8008122:	fa02 f303 	lsl.w	r3, r2, r3
 8008126:	43db      	mvns	r3, r3
 8008128:	69ba      	ldr	r2, [r7, #24]
 800812a:	4013      	ands	r3, r2
 800812c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4a1d      	ldr	r2, [pc, #116]	; (80081a8 <HAL_GPIO_Init+0x234>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d04a      	beq.n	80081cc <HAL_GPIO_Init+0x258>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	4a1c      	ldr	r2, [pc, #112]	; (80081ac <HAL_GPIO_Init+0x238>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d02b      	beq.n	8008196 <HAL_GPIO_Init+0x222>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4a1b      	ldr	r2, [pc, #108]	; (80081b0 <HAL_GPIO_Init+0x23c>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d025      	beq.n	8008192 <HAL_GPIO_Init+0x21e>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4a1a      	ldr	r2, [pc, #104]	; (80081b4 <HAL_GPIO_Init+0x240>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d01f      	beq.n	800818e <HAL_GPIO_Init+0x21a>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	4a19      	ldr	r2, [pc, #100]	; (80081b8 <HAL_GPIO_Init+0x244>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d019      	beq.n	800818a <HAL_GPIO_Init+0x216>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	4a18      	ldr	r2, [pc, #96]	; (80081bc <HAL_GPIO_Init+0x248>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d013      	beq.n	8008186 <HAL_GPIO_Init+0x212>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4a17      	ldr	r2, [pc, #92]	; (80081c0 <HAL_GPIO_Init+0x24c>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d00d      	beq.n	8008182 <HAL_GPIO_Init+0x20e>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4a16      	ldr	r2, [pc, #88]	; (80081c4 <HAL_GPIO_Init+0x250>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d007      	beq.n	800817e <HAL_GPIO_Init+0x20a>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4a15      	ldr	r2, [pc, #84]	; (80081c8 <HAL_GPIO_Init+0x254>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d101      	bne.n	800817a <HAL_GPIO_Init+0x206>
 8008176:	2309      	movs	r3, #9
 8008178:	e029      	b.n	80081ce <HAL_GPIO_Init+0x25a>
 800817a:	230a      	movs	r3, #10
 800817c:	e027      	b.n	80081ce <HAL_GPIO_Init+0x25a>
 800817e:	2307      	movs	r3, #7
 8008180:	e025      	b.n	80081ce <HAL_GPIO_Init+0x25a>
 8008182:	2306      	movs	r3, #6
 8008184:	e023      	b.n	80081ce <HAL_GPIO_Init+0x25a>
 8008186:	2305      	movs	r3, #5
 8008188:	e021      	b.n	80081ce <HAL_GPIO_Init+0x25a>
 800818a:	2304      	movs	r3, #4
 800818c:	e01f      	b.n	80081ce <HAL_GPIO_Init+0x25a>
 800818e:	2303      	movs	r3, #3
 8008190:	e01d      	b.n	80081ce <HAL_GPIO_Init+0x25a>
 8008192:	2302      	movs	r3, #2
 8008194:	e01b      	b.n	80081ce <HAL_GPIO_Init+0x25a>
 8008196:	2301      	movs	r3, #1
 8008198:	e019      	b.n	80081ce <HAL_GPIO_Init+0x25a>
 800819a:	bf00      	nop
 800819c:	58000080 	.word	0x58000080
 80081a0:	58024400 	.word	0x58024400
 80081a4:	58000400 	.word	0x58000400
 80081a8:	58020000 	.word	0x58020000
 80081ac:	58020400 	.word	0x58020400
 80081b0:	58020800 	.word	0x58020800
 80081b4:	58020c00 	.word	0x58020c00
 80081b8:	58021000 	.word	0x58021000
 80081bc:	58021400 	.word	0x58021400
 80081c0:	58021800 	.word	0x58021800
 80081c4:	58021c00 	.word	0x58021c00
 80081c8:	58022400 	.word	0x58022400
 80081cc:	2300      	movs	r3, #0
 80081ce:	69fa      	ldr	r2, [r7, #28]
 80081d0:	f002 0203 	and.w	r2, r2, #3
 80081d4:	0092      	lsls	r2, r2, #2
 80081d6:	4093      	lsls	r3, r2
 80081d8:	69ba      	ldr	r2, [r7, #24]
 80081da:	4313      	orrs	r3, r2
 80081dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80081de:	4938      	ldr	r1, [pc, #224]	; (80082c0 <HAL_GPIO_Init+0x34c>)
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	089b      	lsrs	r3, r3, #2
 80081e4:	3302      	adds	r3, #2
 80081e6:	69ba      	ldr	r2, [r7, #24]
 80081e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80081ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	43db      	mvns	r3, r3
 80081f8:	69ba      	ldr	r2, [r7, #24]
 80081fa:	4013      	ands	r3, r2
 80081fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008206:	2b00      	cmp	r3, #0
 8008208:	d003      	beq.n	8008212 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800820a:	69ba      	ldr	r2, [r7, #24]
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	4313      	orrs	r3, r2
 8008210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008212:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008216:	69bb      	ldr	r3, [r7, #24]
 8008218:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800821a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	43db      	mvns	r3, r3
 8008226:	69ba      	ldr	r2, [r7, #24]
 8008228:	4013      	ands	r3, r2
 800822a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008234:	2b00      	cmp	r3, #0
 8008236:	d003      	beq.n	8008240 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008238:	69ba      	ldr	r2, [r7, #24]
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	4313      	orrs	r3, r2
 800823e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008240:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	43db      	mvns	r3, r3
 8008252:	69ba      	ldr	r2, [r7, #24]
 8008254:	4013      	ands	r3, r2
 8008256:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008260:	2b00      	cmp	r3, #0
 8008262:	d003      	beq.n	800826c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008264:	69ba      	ldr	r2, [r7, #24]
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	4313      	orrs	r3, r2
 800826a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	69ba      	ldr	r2, [r7, #24]
 8008270:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	43db      	mvns	r3, r3
 800827c:	69ba      	ldr	r2, [r7, #24]
 800827e:	4013      	ands	r3, r2
 8008280:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800828a:	2b00      	cmp	r3, #0
 800828c:	d003      	beq.n	8008296 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800828e:	69ba      	ldr	r2, [r7, #24]
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	4313      	orrs	r3, r2
 8008294:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	69ba      	ldr	r2, [r7, #24]
 800829a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	3301      	adds	r3, #1
 80082a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	fa22 f303 	lsr.w	r3, r2, r3
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	f47f ae6b 	bne.w	8007f88 <HAL_GPIO_Init+0x14>
  }
}
 80082b2:	bf00      	nop
 80082b4:	bf00      	nop
 80082b6:	3724      	adds	r7, #36	; 0x24
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr
 80082c0:	58000400 	.word	0x58000400

080082c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b085      	sub	sp, #20
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	460b      	mov	r3, r1
 80082ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	691a      	ldr	r2, [r3, #16]
 80082d4:	887b      	ldrh	r3, [r7, #2]
 80082d6:	4013      	ands	r3, r2
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d002      	beq.n	80082e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80082dc:	2301      	movs	r3, #1
 80082de:	73fb      	strb	r3, [r7, #15]
 80082e0:	e001      	b.n	80082e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80082e2:	2300      	movs	r3, #0
 80082e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80082e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3714      	adds	r7, #20
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	460b      	mov	r3, r1
 80082fe:	807b      	strh	r3, [r7, #2]
 8008300:	4613      	mov	r3, r2
 8008302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008304:	787b      	ldrb	r3, [r7, #1]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d003      	beq.n	8008312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800830a:	887a      	ldrh	r2, [r7, #2]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008310:	e003      	b.n	800831a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008312:	887b      	ldrh	r3, [r7, #2]
 8008314:	041a      	lsls	r2, r3, #16
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	619a      	str	r2, [r3, #24]
}
 800831a:	bf00      	nop
 800831c:	370c      	adds	r7, #12
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr
	...

08008328 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d101      	bne.n	800833a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	e07f      	b.n	800843a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008340:	b2db      	uxtb	r3, r3
 8008342:	2b00      	cmp	r3, #0
 8008344:	d106      	bne.n	8008354 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f7fa fda8 	bl	8002ea4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2224      	movs	r2, #36	; 0x24
 8008358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f022 0201 	bic.w	r2, r2, #1
 800836a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	685a      	ldr	r2, [r3, #4]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008378:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	689a      	ldr	r2, [r3, #8]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008388:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	68db      	ldr	r3, [r3, #12]
 800838e:	2b01      	cmp	r3, #1
 8008390:	d107      	bne.n	80083a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	689a      	ldr	r2, [r3, #8]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800839e:	609a      	str	r2, [r3, #8]
 80083a0:	e006      	b.n	80083b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	689a      	ldr	r2, [r3, #8]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80083ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	2b02      	cmp	r3, #2
 80083b6:	d104      	bne.n	80083c2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	6859      	ldr	r1, [r3, #4]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	4b1d      	ldr	r3, [pc, #116]	; (8008444 <HAL_I2C_Init+0x11c>)
 80083ce:	430b      	orrs	r3, r1
 80083d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68da      	ldr	r2, [r3, #12]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80083e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	691a      	ldr	r2, [r3, #16]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	695b      	ldr	r3, [r3, #20]
 80083ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	699b      	ldr	r3, [r3, #24]
 80083f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	430a      	orrs	r2, r1
 80083fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	69d9      	ldr	r1, [r3, #28]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6a1a      	ldr	r2, [r3, #32]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	430a      	orrs	r2, r1
 800840a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f042 0201 	orr.w	r2, r2, #1
 800841a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2200      	movs	r2, #0
 8008420:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2220      	movs	r2, #32
 8008426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008438:	2300      	movs	r3, #0
}
 800843a:	4618      	mov	r0, r3
 800843c:	3708      	adds	r7, #8
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
 8008442:	bf00      	nop
 8008444:	02008000 	.word	0x02008000

08008448 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	699b      	ldr	r3, [r3, #24]
 8008456:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008464:	2b00      	cmp	r3, #0
 8008466:	d005      	beq.n	8008474 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800846c:	68ba      	ldr	r2, [r7, #8]
 800846e:	68f9      	ldr	r1, [r7, #12]
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	4798      	blx	r3
  }
}
 8008474:	bf00      	nop
 8008476:	3710      	adds	r7, #16
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800848c:	b2db      	uxtb	r3, r3
 800848e:	2b20      	cmp	r3, #32
 8008490:	d138      	bne.n	8008504 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008498:	2b01      	cmp	r3, #1
 800849a:	d101      	bne.n	80084a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800849c:	2302      	movs	r3, #2
 800849e:	e032      	b.n	8008506 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2224      	movs	r2, #36	; 0x24
 80084ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f022 0201 	bic.w	r2, r2, #1
 80084be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80084ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	6819      	ldr	r1, [r3, #0]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	683a      	ldr	r2, [r7, #0]
 80084dc:	430a      	orrs	r2, r1
 80084de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f042 0201 	orr.w	r2, r2, #1
 80084ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2220      	movs	r2, #32
 80084f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2200      	movs	r2, #0
 80084fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008500:	2300      	movs	r3, #0
 8008502:	e000      	b.n	8008506 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008504:	2302      	movs	r3, #2
  }
}
 8008506:	4618      	mov	r0, r3
 8008508:	370c      	adds	r7, #12
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr

08008512 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008512:	b480      	push	{r7}
 8008514:	b085      	sub	sp, #20
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
 800851a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008522:	b2db      	uxtb	r3, r3
 8008524:	2b20      	cmp	r3, #32
 8008526:	d139      	bne.n	800859c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800852e:	2b01      	cmp	r3, #1
 8008530:	d101      	bne.n	8008536 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008532:	2302      	movs	r3, #2
 8008534:	e033      	b.n	800859e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2201      	movs	r2, #1
 800853a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2224      	movs	r2, #36	; 0x24
 8008542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f022 0201 	bic.w	r2, r2, #1
 8008554:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008564:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	021b      	lsls	r3, r3, #8
 800856a:	68fa      	ldr	r2, [r7, #12]
 800856c:	4313      	orrs	r3, r2
 800856e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f042 0201 	orr.w	r2, r2, #1
 8008586:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2220      	movs	r2, #32
 800858c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008598:	2300      	movs	r3, #0
 800859a:	e000      	b.n	800859e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800859c:	2302      	movs	r3, #2
  }
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3714      	adds	r7, #20
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr

080085aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80085aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085ac:	b08f      	sub	sp, #60	; 0x3c
 80085ae:	af0a      	add	r7, sp, #40	; 0x28
 80085b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d101      	bne.n	80085bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80085b8:	2301      	movs	r3, #1
 80085ba:	e116      	b.n	80087ea <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d106      	bne.n	80085dc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2200      	movs	r2, #0
 80085d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f00e fda0 	bl	801711c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2203      	movs	r2, #3
 80085e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d102      	bne.n	80085f6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4618      	mov	r0, r3
 80085fc:	f00a fea5 	bl	801334a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	603b      	str	r3, [r7, #0]
 8008606:	687e      	ldr	r6, [r7, #4]
 8008608:	466d      	mov	r5, sp
 800860a:	f106 0410 	add.w	r4, r6, #16
 800860e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008610:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008612:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008614:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008616:	e894 0003 	ldmia.w	r4, {r0, r1}
 800861a:	e885 0003 	stmia.w	r5, {r0, r1}
 800861e:	1d33      	adds	r3, r6, #4
 8008620:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008622:	6838      	ldr	r0, [r7, #0]
 8008624:	f00a fd70 	bl	8013108 <USB_CoreInit>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d005      	beq.n	800863a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2202      	movs	r2, #2
 8008632:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	e0d7      	b.n	80087ea <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2100      	movs	r1, #0
 8008640:	4618      	mov	r0, r3
 8008642:	f00a fe93 	bl	801336c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008646:	2300      	movs	r3, #0
 8008648:	73fb      	strb	r3, [r7, #15]
 800864a:	e04a      	b.n	80086e2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800864c:	7bfa      	ldrb	r2, [r7, #15]
 800864e:	6879      	ldr	r1, [r7, #4]
 8008650:	4613      	mov	r3, r2
 8008652:	00db      	lsls	r3, r3, #3
 8008654:	4413      	add	r3, r2
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	440b      	add	r3, r1
 800865a:	333d      	adds	r3, #61	; 0x3d
 800865c:	2201      	movs	r2, #1
 800865e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008660:	7bfa      	ldrb	r2, [r7, #15]
 8008662:	6879      	ldr	r1, [r7, #4]
 8008664:	4613      	mov	r3, r2
 8008666:	00db      	lsls	r3, r3, #3
 8008668:	4413      	add	r3, r2
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	440b      	add	r3, r1
 800866e:	333c      	adds	r3, #60	; 0x3c
 8008670:	7bfa      	ldrb	r2, [r7, #15]
 8008672:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008674:	7bfa      	ldrb	r2, [r7, #15]
 8008676:	7bfb      	ldrb	r3, [r7, #15]
 8008678:	b298      	uxth	r0, r3
 800867a:	6879      	ldr	r1, [r7, #4]
 800867c:	4613      	mov	r3, r2
 800867e:	00db      	lsls	r3, r3, #3
 8008680:	4413      	add	r3, r2
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	440b      	add	r3, r1
 8008686:	3356      	adds	r3, #86	; 0x56
 8008688:	4602      	mov	r2, r0
 800868a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800868c:	7bfa      	ldrb	r2, [r7, #15]
 800868e:	6879      	ldr	r1, [r7, #4]
 8008690:	4613      	mov	r3, r2
 8008692:	00db      	lsls	r3, r3, #3
 8008694:	4413      	add	r3, r2
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	440b      	add	r3, r1
 800869a:	3340      	adds	r3, #64	; 0x40
 800869c:	2200      	movs	r2, #0
 800869e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80086a0:	7bfa      	ldrb	r2, [r7, #15]
 80086a2:	6879      	ldr	r1, [r7, #4]
 80086a4:	4613      	mov	r3, r2
 80086a6:	00db      	lsls	r3, r3, #3
 80086a8:	4413      	add	r3, r2
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	440b      	add	r3, r1
 80086ae:	3344      	adds	r3, #68	; 0x44
 80086b0:	2200      	movs	r2, #0
 80086b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80086b4:	7bfa      	ldrb	r2, [r7, #15]
 80086b6:	6879      	ldr	r1, [r7, #4]
 80086b8:	4613      	mov	r3, r2
 80086ba:	00db      	lsls	r3, r3, #3
 80086bc:	4413      	add	r3, r2
 80086be:	009b      	lsls	r3, r3, #2
 80086c0:	440b      	add	r3, r1
 80086c2:	3348      	adds	r3, #72	; 0x48
 80086c4:	2200      	movs	r2, #0
 80086c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80086c8:	7bfa      	ldrb	r2, [r7, #15]
 80086ca:	6879      	ldr	r1, [r7, #4]
 80086cc:	4613      	mov	r3, r2
 80086ce:	00db      	lsls	r3, r3, #3
 80086d0:	4413      	add	r3, r2
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	440b      	add	r3, r1
 80086d6:	334c      	adds	r3, #76	; 0x4c
 80086d8:	2200      	movs	r2, #0
 80086da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80086dc:	7bfb      	ldrb	r3, [r7, #15]
 80086de:	3301      	adds	r3, #1
 80086e0:	73fb      	strb	r3, [r7, #15]
 80086e2:	7bfa      	ldrb	r2, [r7, #15]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d3af      	bcc.n	800864c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80086ec:	2300      	movs	r3, #0
 80086ee:	73fb      	strb	r3, [r7, #15]
 80086f0:	e044      	b.n	800877c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80086f2:	7bfa      	ldrb	r2, [r7, #15]
 80086f4:	6879      	ldr	r1, [r7, #4]
 80086f6:	4613      	mov	r3, r2
 80086f8:	00db      	lsls	r3, r3, #3
 80086fa:	4413      	add	r3, r2
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	440b      	add	r3, r1
 8008700:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008704:	2200      	movs	r2, #0
 8008706:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008708:	7bfa      	ldrb	r2, [r7, #15]
 800870a:	6879      	ldr	r1, [r7, #4]
 800870c:	4613      	mov	r3, r2
 800870e:	00db      	lsls	r3, r3, #3
 8008710:	4413      	add	r3, r2
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	440b      	add	r3, r1
 8008716:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800871a:	7bfa      	ldrb	r2, [r7, #15]
 800871c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800871e:	7bfa      	ldrb	r2, [r7, #15]
 8008720:	6879      	ldr	r1, [r7, #4]
 8008722:	4613      	mov	r3, r2
 8008724:	00db      	lsls	r3, r3, #3
 8008726:	4413      	add	r3, r2
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	440b      	add	r3, r1
 800872c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008730:	2200      	movs	r2, #0
 8008732:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008734:	7bfa      	ldrb	r2, [r7, #15]
 8008736:	6879      	ldr	r1, [r7, #4]
 8008738:	4613      	mov	r3, r2
 800873a:	00db      	lsls	r3, r3, #3
 800873c:	4413      	add	r3, r2
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	440b      	add	r3, r1
 8008742:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8008746:	2200      	movs	r2, #0
 8008748:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800874a:	7bfa      	ldrb	r2, [r7, #15]
 800874c:	6879      	ldr	r1, [r7, #4]
 800874e:	4613      	mov	r3, r2
 8008750:	00db      	lsls	r3, r3, #3
 8008752:	4413      	add	r3, r2
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	440b      	add	r3, r1
 8008758:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800875c:	2200      	movs	r2, #0
 800875e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008760:	7bfa      	ldrb	r2, [r7, #15]
 8008762:	6879      	ldr	r1, [r7, #4]
 8008764:	4613      	mov	r3, r2
 8008766:	00db      	lsls	r3, r3, #3
 8008768:	4413      	add	r3, r2
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	440b      	add	r3, r1
 800876e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008772:	2200      	movs	r2, #0
 8008774:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008776:	7bfb      	ldrb	r3, [r7, #15]
 8008778:	3301      	adds	r3, #1
 800877a:	73fb      	strb	r3, [r7, #15]
 800877c:	7bfa      	ldrb	r2, [r7, #15]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	429a      	cmp	r2, r3
 8008784:	d3b5      	bcc.n	80086f2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	603b      	str	r3, [r7, #0]
 800878c:	687e      	ldr	r6, [r7, #4]
 800878e:	466d      	mov	r5, sp
 8008790:	f106 0410 	add.w	r4, r6, #16
 8008794:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008796:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008798:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800879a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800879c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80087a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80087a4:	1d33      	adds	r3, r6, #4
 80087a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80087a8:	6838      	ldr	r0, [r7, #0]
 80087aa:	f00a fe2b 	bl	8013404 <USB_DevInit>
 80087ae:	4603      	mov	r3, r0
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d005      	beq.n	80087c0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2202      	movs	r2, #2
 80087b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80087bc:	2301      	movs	r3, #1
 80087be:	e014      	b.n	80087ea <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2201      	movs	r2, #1
 80087cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d102      	bne.n	80087de <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f001 f96f 	bl	8009abc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4618      	mov	r0, r3
 80087e4:	f00b fe6d 	bl	80144c2 <USB_DevDisconnect>

  return HAL_OK;
 80087e8:	2300      	movs	r3, #0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3714      	adds	r7, #20
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080087f2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b084      	sub	sp, #16
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008806:	2b01      	cmp	r3, #1
 8008808:	d101      	bne.n	800880e <HAL_PCD_Start+0x1c>
 800880a:	2302      	movs	r3, #2
 800880c:	e022      	b.n	8008854 <HAL_PCD_Start+0x62>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2201      	movs	r2, #1
 8008812:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800881a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800881e:	2b00      	cmp	r3, #0
 8008820:	d109      	bne.n	8008836 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8008826:	2b01      	cmp	r3, #1
 8008828:	d105      	bne.n	8008836 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800882e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4618      	mov	r0, r3
 800883c:	f00a fd74 	bl	8013328 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4618      	mov	r0, r3
 8008846:	f00b fe1b 	bl	8014480 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008852:	2300      	movs	r3, #0
}
 8008854:	4618      	mov	r0, r3
 8008856:	3710      	adds	r7, #16
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800885c:	b590      	push	{r4, r7, lr}
 800885e:	b08d      	sub	sp, #52	; 0x34
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800886a:	6a3b      	ldr	r3, [r7, #32]
 800886c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4618      	mov	r0, r3
 8008874:	f00b fed9 	bl	801462a <USB_GetMode>
 8008878:	4603      	mov	r3, r0
 800887a:	2b00      	cmp	r3, #0
 800887c:	f040 84b7 	bne.w	80091ee <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4618      	mov	r0, r3
 8008886:	f00b fe3d 	bl	8014504 <USB_ReadInterrupts>
 800888a:	4603      	mov	r3, r0
 800888c:	2b00      	cmp	r3, #0
 800888e:	f000 84ad 	beq.w	80091ec <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8008892:	69fb      	ldr	r3, [r7, #28]
 8008894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	0a1b      	lsrs	r3, r3, #8
 800889c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4618      	mov	r0, r3
 80088ac:	f00b fe2a 	bl	8014504 <USB_ReadInterrupts>
 80088b0:	4603      	mov	r3, r0
 80088b2:	f003 0302 	and.w	r3, r3, #2
 80088b6:	2b02      	cmp	r3, #2
 80088b8:	d107      	bne.n	80088ca <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	695a      	ldr	r2, [r3, #20]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f002 0202 	and.w	r2, r2, #2
 80088c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4618      	mov	r0, r3
 80088d0:	f00b fe18 	bl	8014504 <USB_ReadInterrupts>
 80088d4:	4603      	mov	r3, r0
 80088d6:	f003 0310 	and.w	r3, r3, #16
 80088da:	2b10      	cmp	r3, #16
 80088dc:	d161      	bne.n	80089a2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	699a      	ldr	r2, [r3, #24]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f022 0210 	bic.w	r2, r2, #16
 80088ec:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80088ee:	6a3b      	ldr	r3, [r7, #32]
 80088f0:	6a1b      	ldr	r3, [r3, #32]
 80088f2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80088f4:	69bb      	ldr	r3, [r7, #24]
 80088f6:	f003 020f 	and.w	r2, r3, #15
 80088fa:	4613      	mov	r3, r2
 80088fc:	00db      	lsls	r3, r3, #3
 80088fe:	4413      	add	r3, r2
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	4413      	add	r3, r2
 800890a:	3304      	adds	r3, #4
 800890c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	0c5b      	lsrs	r3, r3, #17
 8008912:	f003 030f 	and.w	r3, r3, #15
 8008916:	2b02      	cmp	r3, #2
 8008918:	d124      	bne.n	8008964 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800891a:	69ba      	ldr	r2, [r7, #24]
 800891c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008920:	4013      	ands	r3, r2
 8008922:	2b00      	cmp	r3, #0
 8008924:	d035      	beq.n	8008992 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800892a:	69bb      	ldr	r3, [r7, #24]
 800892c:	091b      	lsrs	r3, r3, #4
 800892e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008930:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008934:	b29b      	uxth	r3, r3
 8008936:	461a      	mov	r2, r3
 8008938:	6a38      	ldr	r0, [r7, #32]
 800893a:	f00b fc4f 	bl	80141dc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	68da      	ldr	r2, [r3, #12]
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	091b      	lsrs	r3, r3, #4
 8008946:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800894a:	441a      	add	r2, r3
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	695a      	ldr	r2, [r3, #20]
 8008954:	69bb      	ldr	r3, [r7, #24]
 8008956:	091b      	lsrs	r3, r3, #4
 8008958:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800895c:	441a      	add	r2, r3
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	615a      	str	r2, [r3, #20]
 8008962:	e016      	b.n	8008992 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008964:	69bb      	ldr	r3, [r7, #24]
 8008966:	0c5b      	lsrs	r3, r3, #17
 8008968:	f003 030f 	and.w	r3, r3, #15
 800896c:	2b06      	cmp	r3, #6
 800896e:	d110      	bne.n	8008992 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008976:	2208      	movs	r2, #8
 8008978:	4619      	mov	r1, r3
 800897a:	6a38      	ldr	r0, [r7, #32]
 800897c:	f00b fc2e 	bl	80141dc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	695a      	ldr	r2, [r3, #20]
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	091b      	lsrs	r3, r3, #4
 8008988:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800898c:	441a      	add	r2, r3
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	699a      	ldr	r2, [r3, #24]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f042 0210 	orr.w	r2, r2, #16
 80089a0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4618      	mov	r0, r3
 80089a8:	f00b fdac 	bl	8014504 <USB_ReadInterrupts>
 80089ac:	4603      	mov	r3, r0
 80089ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80089b2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80089b6:	f040 80a7 	bne.w	8008b08 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80089ba:	2300      	movs	r3, #0
 80089bc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4618      	mov	r0, r3
 80089c4:	f00b fdb1 	bl	801452a <USB_ReadDevAllOutEpInterrupt>
 80089c8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80089ca:	e099      	b.n	8008b00 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80089cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ce:	f003 0301 	and.w	r3, r3, #1
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	f000 808e 	beq.w	8008af4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089de:	b2d2      	uxtb	r2, r2
 80089e0:	4611      	mov	r1, r2
 80089e2:	4618      	mov	r0, r3
 80089e4:	f00b fdd5 	bl	8014592 <USB_ReadDevOutEPInterrupt>
 80089e8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	f003 0301 	and.w	r3, r3, #1
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d00c      	beq.n	8008a0e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80089f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f6:	015a      	lsls	r2, r3, #5
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	4413      	add	r3, r2
 80089fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a00:	461a      	mov	r2, r3
 8008a02:	2301      	movs	r3, #1
 8008a04:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008a06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 fed1 	bl	80097b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	f003 0308 	and.w	r3, r3, #8
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d00c      	beq.n	8008a32 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1a:	015a      	lsls	r2, r3, #5
 8008a1c:	69fb      	ldr	r3, [r7, #28]
 8008a1e:	4413      	add	r3, r2
 8008a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a24:	461a      	mov	r2, r3
 8008a26:	2308      	movs	r3, #8
 8008a28:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008a2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f000 ffa7 	bl	8009980 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	f003 0310 	and.w	r3, r3, #16
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d008      	beq.n	8008a4e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3e:	015a      	lsls	r2, r3, #5
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	4413      	add	r3, r2
 8008a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a48:	461a      	mov	r2, r3
 8008a4a:	2310      	movs	r3, #16
 8008a4c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	f003 0302 	and.w	r3, r3, #2
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d030      	beq.n	8008aba <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008a58:	6a3b      	ldr	r3, [r7, #32]
 8008a5a:	695b      	ldr	r3, [r3, #20]
 8008a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a60:	2b80      	cmp	r3, #128	; 0x80
 8008a62:	d109      	bne.n	8008a78 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	69fa      	ldr	r2, [r7, #28]
 8008a6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008a76:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a7a:	4613      	mov	r3, r2
 8008a7c:	00db      	lsls	r3, r3, #3
 8008a7e:	4413      	add	r3, r2
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	4413      	add	r3, r2
 8008a8a:	3304      	adds	r3, #4
 8008a8c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	78db      	ldrb	r3, [r3, #3]
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d108      	bne.n	8008aa8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f00e fc32 	bl	801730c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aaa:	015a      	lsls	r2, r3, #5
 8008aac:	69fb      	ldr	r3, [r7, #28]
 8008aae:	4413      	add	r3, r2
 8008ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	2302      	movs	r3, #2
 8008ab8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	f003 0320 	and.w	r3, r3, #32
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d008      	beq.n	8008ad6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac6:	015a      	lsls	r2, r3, #5
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	4413      	add	r3, r2
 8008acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	2320      	movs	r3, #32
 8008ad4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d009      	beq.n	8008af4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae2:	015a      	lsls	r2, r3, #5
 8008ae4:	69fb      	ldr	r3, [r7, #28]
 8008ae6:	4413      	add	r3, r2
 8008ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aec:	461a      	mov	r2, r3
 8008aee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008af2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af6:	3301      	adds	r3, #1
 8008af8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008afc:	085b      	lsrs	r3, r3, #1
 8008afe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	f47f af62 	bne.w	80089cc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f00b fcf9 	bl	8014504 <USB_ReadInterrupts>
 8008b12:	4603      	mov	r3, r0
 8008b14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008b1c:	f040 80db 	bne.w	8008cd6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4618      	mov	r0, r3
 8008b26:	f00b fd1a 	bl	801455e <USB_ReadDevAllInEpInterrupt>
 8008b2a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008b30:	e0cd      	b.n	8008cce <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b34:	f003 0301 	and.w	r3, r3, #1
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	f000 80c2 	beq.w	8008cc2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b44:	b2d2      	uxtb	r2, r2
 8008b46:	4611      	mov	r1, r2
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f00b fd40 	bl	80145ce <USB_ReadDevInEPInterrupt>
 8008b4e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	f003 0301 	and.w	r3, r3, #1
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d057      	beq.n	8008c0a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5c:	f003 030f 	and.w	r3, r3, #15
 8008b60:	2201      	movs	r2, #1
 8008b62:	fa02 f303 	lsl.w	r3, r2, r3
 8008b66:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008b68:	69fb      	ldr	r3, [r7, #28]
 8008b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	43db      	mvns	r3, r3
 8008b74:	69f9      	ldr	r1, [r7, #28]
 8008b76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b7a:	4013      	ands	r3, r2
 8008b7c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b80:	015a      	lsls	r2, r3, #5
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	4413      	add	r3, r2
 8008b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d132      	bne.n	8008bfe <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008b98:	6879      	ldr	r1, [r7, #4]
 8008b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	00db      	lsls	r3, r3, #3
 8008ba0:	4413      	add	r3, r2
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	440b      	add	r3, r1
 8008ba6:	3348      	adds	r3, #72	; 0x48
 8008ba8:	6819      	ldr	r1, [r3, #0]
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bae:	4613      	mov	r3, r2
 8008bb0:	00db      	lsls	r3, r3, #3
 8008bb2:	4413      	add	r3, r2
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	4403      	add	r3, r0
 8008bb8:	3344      	adds	r3, #68	; 0x44
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4419      	add	r1, r3
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bc2:	4613      	mov	r3, r2
 8008bc4:	00db      	lsls	r3, r3, #3
 8008bc6:	4413      	add	r3, r2
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	4403      	add	r3, r0
 8008bcc:	3348      	adds	r3, #72	; 0x48
 8008bce:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d113      	bne.n	8008bfe <HAL_PCD_IRQHandler+0x3a2>
 8008bd6:	6879      	ldr	r1, [r7, #4]
 8008bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bda:	4613      	mov	r3, r2
 8008bdc:	00db      	lsls	r3, r3, #3
 8008bde:	4413      	add	r3, r2
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	440b      	add	r3, r1
 8008be4:	334c      	adds	r3, #76	; 0x4c
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d108      	bne.n	8008bfe <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6818      	ldr	r0, [r3, #0]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	2101      	movs	r1, #1
 8008bfa:	f00b fd49 	bl	8014690 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	4619      	mov	r1, r3
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f00e fafc 	bl	8017202 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	f003 0308 	and.w	r3, r3, #8
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d008      	beq.n	8008c26 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c16:	015a      	lsls	r2, r3, #5
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	4413      	add	r3, r2
 8008c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c20:	461a      	mov	r2, r3
 8008c22:	2308      	movs	r3, #8
 8008c24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	f003 0310 	and.w	r3, r3, #16
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d008      	beq.n	8008c42 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c32:	015a      	lsls	r2, r3, #5
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	4413      	add	r3, r2
 8008c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	2310      	movs	r3, #16
 8008c40:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d008      	beq.n	8008c5e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4e:	015a      	lsls	r2, r3, #5
 8008c50:	69fb      	ldr	r3, [r7, #28]
 8008c52:	4413      	add	r3, r2
 8008c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c58:	461a      	mov	r2, r3
 8008c5a:	2340      	movs	r3, #64	; 0x40
 8008c5c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	f003 0302 	and.w	r3, r3, #2
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d023      	beq.n	8008cb0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008c68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c6a:	6a38      	ldr	r0, [r7, #32]
 8008c6c:	f00a fd28 	bl	80136c0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c72:	4613      	mov	r3, r2
 8008c74:	00db      	lsls	r3, r3, #3
 8008c76:	4413      	add	r3, r2
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	3338      	adds	r3, #56	; 0x38
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	4413      	add	r3, r2
 8008c80:	3304      	adds	r3, #4
 8008c82:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	78db      	ldrb	r3, [r3, #3]
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d108      	bne.n	8008c9e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	4619      	mov	r1, r3
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f00e fb49 	bl	8017330 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca0:	015a      	lsls	r2, r3, #5
 8008ca2:	69fb      	ldr	r3, [r7, #28]
 8008ca4:	4413      	add	r3, r2
 8008ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008caa:	461a      	mov	r2, r3
 8008cac:	2302      	movs	r3, #2
 8008cae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d003      	beq.n	8008cc2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008cba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 fcea 	bl	8009696 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cca:	085b      	lsrs	r3, r3, #1
 8008ccc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	f47f af2e 	bne.w	8008b32 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f00b fc12 	bl	8014504 <USB_ReadInterrupts>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ce6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cea:	d122      	bne.n	8008d32 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	69fa      	ldr	r2, [r7, #28]
 8008cf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cfa:	f023 0301 	bic.w	r3, r3, #1
 8008cfe:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d108      	bne.n	8008d1c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008d12:	2100      	movs	r1, #0
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f000 fef5 	bl	8009b04 <HAL_PCDEx_LPM_Callback>
 8008d1a:	e002      	b.n	8008d22 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f00e fae7 	bl	80172f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	695a      	ldr	r2, [r3, #20]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008d30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4618      	mov	r0, r3
 8008d38:	f00b fbe4 	bl	8014504 <USB_ReadInterrupts>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d46:	d112      	bne.n	8008d6e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	f003 0301 	and.w	r3, r3, #1
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d102      	bne.n	8008d5e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f00e faa3 	bl	80172a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	695a      	ldr	r2, [r3, #20]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008d6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4618      	mov	r0, r3
 8008d74:	f00b fbc6 	bl	8014504 <USB_ReadInterrupts>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d82:	d121      	bne.n	8008dc8 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	695a      	ldr	r2, [r3, #20]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008d92:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d111      	bne.n	8008dc2 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2201      	movs	r2, #1
 8008da2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dac:	089b      	lsrs	r3, r3, #2
 8008dae:	f003 020f 	and.w	r2, r3, #15
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008db8:	2101      	movs	r1, #1
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 fea2 	bl	8009b04 <HAL_PCDEx_LPM_Callback>
 8008dc0:	e002      	b.n	8008dc8 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f00e fa6e 	bl	80172a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f00b fb99 	bl	8014504 <USB_ReadInterrupts>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ddc:	f040 80b7 	bne.w	8008f4e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	69fa      	ldr	r2, [r7, #28]
 8008dea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008dee:	f023 0301 	bic.w	r3, r3, #1
 8008df2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2110      	movs	r1, #16
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f00a fc60 	bl	80136c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e00:	2300      	movs	r3, #0
 8008e02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e04:	e046      	b.n	8008e94 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e08:	015a      	lsls	r2, r3, #5
 8008e0a:	69fb      	ldr	r3, [r7, #28]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e12:	461a      	mov	r2, r3
 8008e14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e18:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e1c:	015a      	lsls	r2, r3, #5
 8008e1e:	69fb      	ldr	r3, [r7, #28]
 8008e20:	4413      	add	r3, r2
 8008e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e2a:	0151      	lsls	r1, r2, #5
 8008e2c:	69fa      	ldr	r2, [r7, #28]
 8008e2e:	440a      	add	r2, r1
 8008e30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008e38:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e3c:	015a      	lsls	r2, r3, #5
 8008e3e:	69fb      	ldr	r3, [r7, #28]
 8008e40:	4413      	add	r3, r2
 8008e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e46:	461a      	mov	r2, r3
 8008e48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e4c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e50:	015a      	lsls	r2, r3, #5
 8008e52:	69fb      	ldr	r3, [r7, #28]
 8008e54:	4413      	add	r3, r2
 8008e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e5e:	0151      	lsls	r1, r2, #5
 8008e60:	69fa      	ldr	r2, [r7, #28]
 8008e62:	440a      	add	r2, r1
 8008e64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e68:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008e6c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e70:	015a      	lsls	r2, r3, #5
 8008e72:	69fb      	ldr	r3, [r7, #28]
 8008e74:	4413      	add	r3, r2
 8008e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e7e:	0151      	lsls	r1, r2, #5
 8008e80:	69fa      	ldr	r2, [r7, #28]
 8008e82:	440a      	add	r2, r1
 8008e84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e88:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008e8c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e90:	3301      	adds	r3, #1
 8008e92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d3b3      	bcc.n	8008e06 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008e9e:	69fb      	ldr	r3, [r7, #28]
 8008ea0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ea4:	69db      	ldr	r3, [r3, #28]
 8008ea6:	69fa      	ldr	r2, [r7, #28]
 8008ea8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008eac:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008eb0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d016      	beq.n	8008ee8 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008eba:	69fb      	ldr	r3, [r7, #28]
 8008ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ec4:	69fa      	ldr	r2, [r7, #28]
 8008ec6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008eca:	f043 030b 	orr.w	r3, r3, #11
 8008ece:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008ed2:	69fb      	ldr	r3, [r7, #28]
 8008ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eda:	69fa      	ldr	r2, [r7, #28]
 8008edc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ee0:	f043 030b 	orr.w	r3, r3, #11
 8008ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8008ee6:	e015      	b.n	8008f14 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008ee8:	69fb      	ldr	r3, [r7, #28]
 8008eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eee:	695a      	ldr	r2, [r3, #20]
 8008ef0:	69fb      	ldr	r3, [r7, #28]
 8008ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	f242 032b 	movw	r3, #8235	; 0x202b
 8008efc:	4313      	orrs	r3, r2
 8008efe:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008f00:	69fb      	ldr	r3, [r7, #28]
 8008f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f06:	691b      	ldr	r3, [r3, #16]
 8008f08:	69fa      	ldr	r2, [r7, #28]
 8008f0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f0e:	f043 030b 	orr.w	r3, r3, #11
 8008f12:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	69fa      	ldr	r2, [r7, #28]
 8008f1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f22:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008f26:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6818      	ldr	r0, [r3, #0]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008f38:	461a      	mov	r2, r3
 8008f3a:	f00b fba9 	bl	8014690 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	695a      	ldr	r2, [r3, #20]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008f4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4618      	mov	r0, r3
 8008f54:	f00b fad6 	bl	8014504 <USB_ReadInterrupts>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f62:	d124      	bne.n	8008fae <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f00b fb6d 	bl	8014648 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4618      	mov	r0, r3
 8008f74:	f00a fc21 	bl	80137ba <USB_GetDevSpeed>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681c      	ldr	r4, [r3, #0]
 8008f84:	f001 fd88 	bl	800aa98 <HAL_RCC_GetHCLKFreq>
 8008f88:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	461a      	mov	r2, r3
 8008f92:	4620      	mov	r0, r4
 8008f94:	f00a f926 	bl	80131e4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f00e f95a 	bl	8017252 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	695a      	ldr	r2, [r3, #20]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008fac:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f00b faa6 	bl	8014504 <USB_ReadInterrupts>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	f003 0308 	and.w	r3, r3, #8
 8008fbe:	2b08      	cmp	r3, #8
 8008fc0:	d10a      	bne.n	8008fd8 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f00e f937 	bl	8017236 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	695a      	ldr	r2, [r3, #20]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f002 0208 	and.w	r2, r2, #8
 8008fd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f00b fa91 	bl	8014504 <USB_ReadInterrupts>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fe8:	2b80      	cmp	r3, #128	; 0x80
 8008fea:	d122      	bne.n	8009032 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008fec:	6a3b      	ldr	r3, [r7, #32]
 8008fee:	699b      	ldr	r3, [r3, #24]
 8008ff0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008ff4:	6a3b      	ldr	r3, [r7, #32]
 8008ff6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8008ffc:	e014      	b.n	8009028 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008ffe:	6879      	ldr	r1, [r7, #4]
 8009000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009002:	4613      	mov	r3, r2
 8009004:	00db      	lsls	r3, r3, #3
 8009006:	4413      	add	r3, r2
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	440b      	add	r3, r1
 800900c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	2b01      	cmp	r3, #1
 8009014:	d105      	bne.n	8009022 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009018:	b2db      	uxtb	r3, r3
 800901a:	4619      	mov	r1, r3
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 fb09 	bl	8009634 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009024:	3301      	adds	r3, #1
 8009026:	627b      	str	r3, [r7, #36]	; 0x24
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800902e:	429a      	cmp	r2, r3
 8009030:	d3e5      	bcc.n	8008ffe <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4618      	mov	r0, r3
 8009038:	f00b fa64 	bl	8014504 <USB_ReadInterrupts>
 800903c:	4603      	mov	r3, r0
 800903e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009042:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009046:	d13b      	bne.n	80090c0 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009048:	2301      	movs	r3, #1
 800904a:	627b      	str	r3, [r7, #36]	; 0x24
 800904c:	e02b      	b.n	80090a6 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800904e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009050:	015a      	lsls	r2, r3, #5
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	4413      	add	r3, r2
 8009056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800905e:	6879      	ldr	r1, [r7, #4]
 8009060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009062:	4613      	mov	r3, r2
 8009064:	00db      	lsls	r3, r3, #3
 8009066:	4413      	add	r3, r2
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	440b      	add	r3, r1
 800906c:	3340      	adds	r3, #64	; 0x40
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	2b01      	cmp	r3, #1
 8009072:	d115      	bne.n	80090a0 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8009074:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009076:	2b00      	cmp	r3, #0
 8009078:	da12      	bge.n	80090a0 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800907a:	6879      	ldr	r1, [r7, #4]
 800907c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800907e:	4613      	mov	r3, r2
 8009080:	00db      	lsls	r3, r3, #3
 8009082:	4413      	add	r3, r2
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	440b      	add	r3, r1
 8009088:	333f      	adds	r3, #63	; 0x3f
 800908a:	2201      	movs	r2, #1
 800908c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800908e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009090:	b2db      	uxtb	r3, r3
 8009092:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009096:	b2db      	uxtb	r3, r3
 8009098:	4619      	mov	r1, r3
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 faca 	bl	8009634 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80090a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a2:	3301      	adds	r3, #1
 80090a4:	627b      	str	r3, [r7, #36]	; 0x24
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d3ce      	bcc.n	800904e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	695a      	ldr	r2, [r3, #20]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80090be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4618      	mov	r0, r3
 80090c6:	f00b fa1d 	bl	8014504 <USB_ReadInterrupts>
 80090ca:	4603      	mov	r3, r0
 80090cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80090d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80090d4:	d155      	bne.n	8009182 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80090d6:	2301      	movs	r3, #1
 80090d8:	627b      	str	r3, [r7, #36]	; 0x24
 80090da:	e045      	b.n	8009168 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80090dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090de:	015a      	lsls	r2, r3, #5
 80090e0:	69fb      	ldr	r3, [r7, #28]
 80090e2:	4413      	add	r3, r2
 80090e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80090ec:	6879      	ldr	r1, [r7, #4]
 80090ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090f0:	4613      	mov	r3, r2
 80090f2:	00db      	lsls	r3, r3, #3
 80090f4:	4413      	add	r3, r2
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	440b      	add	r3, r1
 80090fa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80090fe:	781b      	ldrb	r3, [r3, #0]
 8009100:	2b01      	cmp	r3, #1
 8009102:	d12e      	bne.n	8009162 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009104:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009106:	2b00      	cmp	r3, #0
 8009108:	da2b      	bge.n	8009162 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8009116:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800911a:	429a      	cmp	r2, r3
 800911c:	d121      	bne.n	8009162 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800911e:	6879      	ldr	r1, [r7, #4]
 8009120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009122:	4613      	mov	r3, r2
 8009124:	00db      	lsls	r3, r3, #3
 8009126:	4413      	add	r3, r2
 8009128:	009b      	lsls	r3, r3, #2
 800912a:	440b      	add	r3, r1
 800912c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009130:	2201      	movs	r2, #1
 8009132:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009134:	6a3b      	ldr	r3, [r7, #32]
 8009136:	699b      	ldr	r3, [r3, #24]
 8009138:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800913c:	6a3b      	ldr	r3, [r7, #32]
 800913e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8009140:	6a3b      	ldr	r3, [r7, #32]
 8009142:	695b      	ldr	r3, [r3, #20]
 8009144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009148:	2b00      	cmp	r3, #0
 800914a:	d10a      	bne.n	8009162 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800914c:	69fb      	ldr	r3, [r7, #28]
 800914e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	69fa      	ldr	r2, [r7, #28]
 8009156:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800915a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800915e:	6053      	str	r3, [r2, #4]
            break;
 8009160:	e007      	b.n	8009172 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009164:	3301      	adds	r3, #1
 8009166:	627b      	str	r3, [r7, #36]	; 0x24
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800916e:	429a      	cmp	r2, r3
 8009170:	d3b4      	bcc.n	80090dc <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	695a      	ldr	r2, [r3, #20]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8009180:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4618      	mov	r0, r3
 8009188:	f00b f9bc 	bl	8014504 <USB_ReadInterrupts>
 800918c:	4603      	mov	r3, r0
 800918e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009196:	d10a      	bne.n	80091ae <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f00e f8db 	bl	8017354 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	695a      	ldr	r2, [r3, #20]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80091ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4618      	mov	r0, r3
 80091b4:	f00b f9a6 	bl	8014504 <USB_ReadInterrupts>
 80091b8:	4603      	mov	r3, r0
 80091ba:	f003 0304 	and.w	r3, r3, #4
 80091be:	2b04      	cmp	r3, #4
 80091c0:	d115      	bne.n	80091ee <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80091ca:	69bb      	ldr	r3, [r7, #24]
 80091cc:	f003 0304 	and.w	r3, r3, #4
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d002      	beq.n	80091da <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f00e f8cb 	bl	8017370 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	6859      	ldr	r1, [r3, #4]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	69ba      	ldr	r2, [r7, #24]
 80091e6:	430a      	orrs	r2, r1
 80091e8:	605a      	str	r2, [r3, #4]
 80091ea:	e000      	b.n	80091ee <HAL_PCD_IRQHandler+0x992>
      return;
 80091ec:	bf00      	nop
    }
  }
}
 80091ee:	3734      	adds	r7, #52	; 0x34
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd90      	pop	{r4, r7, pc}

080091f4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	460b      	mov	r3, r1
 80091fe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009206:	2b01      	cmp	r3, #1
 8009208:	d101      	bne.n	800920e <HAL_PCD_SetAddress+0x1a>
 800920a:	2302      	movs	r3, #2
 800920c:	e013      	b.n	8009236 <HAL_PCD_SetAddress+0x42>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2201      	movs	r2, #1
 8009212:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	78fa      	ldrb	r2, [r7, #3]
 800921a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	78fa      	ldrb	r2, [r7, #3]
 8009224:	4611      	mov	r1, r2
 8009226:	4618      	mov	r0, r3
 8009228:	f00b f904 	bl	8014434 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2200      	movs	r2, #0
 8009230:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009234:	2300      	movs	r3, #0
}
 8009236:	4618      	mov	r0, r3
 8009238:	3708      	adds	r7, #8
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}

0800923e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800923e:	b580      	push	{r7, lr}
 8009240:	b084      	sub	sp, #16
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
 8009246:	4608      	mov	r0, r1
 8009248:	4611      	mov	r1, r2
 800924a:	461a      	mov	r2, r3
 800924c:	4603      	mov	r3, r0
 800924e:	70fb      	strb	r3, [r7, #3]
 8009250:	460b      	mov	r3, r1
 8009252:	803b      	strh	r3, [r7, #0]
 8009254:	4613      	mov	r3, r2
 8009256:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009258:	2300      	movs	r3, #0
 800925a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800925c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009260:	2b00      	cmp	r3, #0
 8009262:	da0f      	bge.n	8009284 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009264:	78fb      	ldrb	r3, [r7, #3]
 8009266:	f003 020f 	and.w	r2, r3, #15
 800926a:	4613      	mov	r3, r2
 800926c:	00db      	lsls	r3, r3, #3
 800926e:	4413      	add	r3, r2
 8009270:	009b      	lsls	r3, r3, #2
 8009272:	3338      	adds	r3, #56	; 0x38
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	4413      	add	r3, r2
 8009278:	3304      	adds	r3, #4
 800927a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2201      	movs	r2, #1
 8009280:	705a      	strb	r2, [r3, #1]
 8009282:	e00f      	b.n	80092a4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009284:	78fb      	ldrb	r3, [r7, #3]
 8009286:	f003 020f 	and.w	r2, r3, #15
 800928a:	4613      	mov	r3, r2
 800928c:	00db      	lsls	r3, r3, #3
 800928e:	4413      	add	r3, r2
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009296:	687a      	ldr	r2, [r7, #4]
 8009298:	4413      	add	r3, r2
 800929a:	3304      	adds	r3, #4
 800929c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2200      	movs	r2, #0
 80092a2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80092a4:	78fb      	ldrb	r3, [r7, #3]
 80092a6:	f003 030f 	and.w	r3, r3, #15
 80092aa:	b2da      	uxtb	r2, r3
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80092b0:	883a      	ldrh	r2, [r7, #0]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	78ba      	ldrb	r2, [r7, #2]
 80092ba:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	785b      	ldrb	r3, [r3, #1]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d004      	beq.n	80092ce <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	b29a      	uxth	r2, r3
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80092ce:	78bb      	ldrb	r3, [r7, #2]
 80092d0:	2b02      	cmp	r3, #2
 80092d2:	d102      	bne.n	80092da <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2200      	movs	r2, #0
 80092d8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d101      	bne.n	80092e8 <HAL_PCD_EP_Open+0xaa>
 80092e4:	2302      	movs	r3, #2
 80092e6:	e00e      	b.n	8009306 <HAL_PCD_EP_Open+0xc8>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	68f9      	ldr	r1, [r7, #12]
 80092f6:	4618      	mov	r0, r3
 80092f8:	f00a fa84 	bl	8013804 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8009304:	7afb      	ldrb	r3, [r7, #11]
}
 8009306:	4618      	mov	r0, r3
 8009308:	3710      	adds	r7, #16
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800930e:	b580      	push	{r7, lr}
 8009310:	b084      	sub	sp, #16
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
 8009316:	460b      	mov	r3, r1
 8009318:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800931a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800931e:	2b00      	cmp	r3, #0
 8009320:	da0f      	bge.n	8009342 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009322:	78fb      	ldrb	r3, [r7, #3]
 8009324:	f003 020f 	and.w	r2, r3, #15
 8009328:	4613      	mov	r3, r2
 800932a:	00db      	lsls	r3, r3, #3
 800932c:	4413      	add	r3, r2
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	3338      	adds	r3, #56	; 0x38
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	4413      	add	r3, r2
 8009336:	3304      	adds	r3, #4
 8009338:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2201      	movs	r2, #1
 800933e:	705a      	strb	r2, [r3, #1]
 8009340:	e00f      	b.n	8009362 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009342:	78fb      	ldrb	r3, [r7, #3]
 8009344:	f003 020f 	and.w	r2, r3, #15
 8009348:	4613      	mov	r3, r2
 800934a:	00db      	lsls	r3, r3, #3
 800934c:	4413      	add	r3, r2
 800934e:	009b      	lsls	r3, r3, #2
 8009350:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	4413      	add	r3, r2
 8009358:	3304      	adds	r3, #4
 800935a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2200      	movs	r2, #0
 8009360:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009362:	78fb      	ldrb	r3, [r7, #3]
 8009364:	f003 030f 	and.w	r3, r3, #15
 8009368:	b2da      	uxtb	r2, r3
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009374:	2b01      	cmp	r3, #1
 8009376:	d101      	bne.n	800937c <HAL_PCD_EP_Close+0x6e>
 8009378:	2302      	movs	r3, #2
 800937a:	e00e      	b.n	800939a <HAL_PCD_EP_Close+0x8c>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2201      	movs	r2, #1
 8009380:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	68f9      	ldr	r1, [r7, #12]
 800938a:	4618      	mov	r0, r3
 800938c:	f00a fac2 	bl	8013914 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8009398:	2300      	movs	r3, #0
}
 800939a:	4618      	mov	r0, r3
 800939c:	3710      	adds	r7, #16
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}

080093a2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80093a2:	b580      	push	{r7, lr}
 80093a4:	b086      	sub	sp, #24
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	60f8      	str	r0, [r7, #12]
 80093aa:	607a      	str	r2, [r7, #4]
 80093ac:	603b      	str	r3, [r7, #0]
 80093ae:	460b      	mov	r3, r1
 80093b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80093b2:	7afb      	ldrb	r3, [r7, #11]
 80093b4:	f003 020f 	and.w	r2, r3, #15
 80093b8:	4613      	mov	r3, r2
 80093ba:	00db      	lsls	r3, r3, #3
 80093bc:	4413      	add	r3, r2
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80093c4:	68fa      	ldr	r2, [r7, #12]
 80093c6:	4413      	add	r3, r2
 80093c8:	3304      	adds	r3, #4
 80093ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	683a      	ldr	r2, [r7, #0]
 80093d6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	2200      	movs	r2, #0
 80093dc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	2200      	movs	r2, #0
 80093e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80093e4:	7afb      	ldrb	r3, [r7, #11]
 80093e6:	f003 030f 	and.w	r3, r3, #15
 80093ea:	b2da      	uxtb	r2, r3
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d102      	bne.n	80093fe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	6818      	ldr	r0, [r3, #0]
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	68db      	ldr	r3, [r3, #12]
 8009406:	b2db      	uxtb	r3, r3
 8009408:	461a      	mov	r2, r3
 800940a:	6979      	ldr	r1, [r7, #20]
 800940c:	f00a fb5e 	bl	8013acc <USB_EPStartXfer>

  return HAL_OK;
 8009410:	2300      	movs	r3, #0
}
 8009412:	4618      	mov	r0, r3
 8009414:	3718      	adds	r7, #24
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}

0800941a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800941a:	b480      	push	{r7}
 800941c:	b083      	sub	sp, #12
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
 8009422:	460b      	mov	r3, r1
 8009424:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009426:	78fb      	ldrb	r3, [r7, #3]
 8009428:	f003 020f 	and.w	r2, r3, #15
 800942c:	6879      	ldr	r1, [r7, #4]
 800942e:	4613      	mov	r3, r2
 8009430:	00db      	lsls	r3, r3, #3
 8009432:	4413      	add	r3, r2
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	440b      	add	r3, r1
 8009438:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800943c:	681b      	ldr	r3, [r3, #0]
}
 800943e:	4618      	mov	r0, r3
 8009440:	370c      	adds	r7, #12
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr

0800944a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800944a:	b580      	push	{r7, lr}
 800944c:	b086      	sub	sp, #24
 800944e:	af00      	add	r7, sp, #0
 8009450:	60f8      	str	r0, [r7, #12]
 8009452:	607a      	str	r2, [r7, #4]
 8009454:	603b      	str	r3, [r7, #0]
 8009456:	460b      	mov	r3, r1
 8009458:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800945a:	7afb      	ldrb	r3, [r7, #11]
 800945c:	f003 020f 	and.w	r2, r3, #15
 8009460:	4613      	mov	r3, r2
 8009462:	00db      	lsls	r3, r3, #3
 8009464:	4413      	add	r3, r2
 8009466:	009b      	lsls	r3, r3, #2
 8009468:	3338      	adds	r3, #56	; 0x38
 800946a:	68fa      	ldr	r2, [r7, #12]
 800946c:	4413      	add	r3, r2
 800946e:	3304      	adds	r3, #4
 8009470:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	683a      	ldr	r2, [r7, #0]
 800947c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	2200      	movs	r2, #0
 8009482:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	2201      	movs	r2, #1
 8009488:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800948a:	7afb      	ldrb	r3, [r7, #11]
 800948c:	f003 030f 	and.w	r3, r3, #15
 8009490:	b2da      	uxtb	r2, r3
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	2b01      	cmp	r3, #1
 800949c:	d102      	bne.n	80094a4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800949e:	687a      	ldr	r2, [r7, #4]
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	6818      	ldr	r0, [r3, #0]
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	461a      	mov	r2, r3
 80094b0:	6979      	ldr	r1, [r7, #20]
 80094b2:	f00a fb0b 	bl	8013acc <USB_EPStartXfer>

  return HAL_OK;
 80094b6:	2300      	movs	r3, #0
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3718      	adds	r7, #24
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b084      	sub	sp, #16
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	460b      	mov	r3, r1
 80094ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80094cc:	78fb      	ldrb	r3, [r7, #3]
 80094ce:	f003 020f 	and.w	r2, r3, #15
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d901      	bls.n	80094de <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80094da:	2301      	movs	r3, #1
 80094dc:	e050      	b.n	8009580 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80094de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	da0f      	bge.n	8009506 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80094e6:	78fb      	ldrb	r3, [r7, #3]
 80094e8:	f003 020f 	and.w	r2, r3, #15
 80094ec:	4613      	mov	r3, r2
 80094ee:	00db      	lsls	r3, r3, #3
 80094f0:	4413      	add	r3, r2
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	3338      	adds	r3, #56	; 0x38
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	4413      	add	r3, r2
 80094fa:	3304      	adds	r3, #4
 80094fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2201      	movs	r2, #1
 8009502:	705a      	strb	r2, [r3, #1]
 8009504:	e00d      	b.n	8009522 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009506:	78fa      	ldrb	r2, [r7, #3]
 8009508:	4613      	mov	r3, r2
 800950a:	00db      	lsls	r3, r3, #3
 800950c:	4413      	add	r3, r2
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	4413      	add	r3, r2
 8009518:	3304      	adds	r3, #4
 800951a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2200      	movs	r2, #0
 8009520:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2201      	movs	r2, #1
 8009526:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009528:	78fb      	ldrb	r3, [r7, #3]
 800952a:	f003 030f 	and.w	r3, r3, #15
 800952e:	b2da      	uxtb	r2, r3
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800953a:	2b01      	cmp	r3, #1
 800953c:	d101      	bne.n	8009542 <HAL_PCD_EP_SetStall+0x82>
 800953e:	2302      	movs	r3, #2
 8009540:	e01e      	b.n	8009580 <HAL_PCD_EP_SetStall+0xc0>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2201      	movs	r2, #1
 8009546:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	68f9      	ldr	r1, [r7, #12]
 8009550:	4618      	mov	r0, r3
 8009552:	f00a fe9b 	bl	801428c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009556:	78fb      	ldrb	r3, [r7, #3]
 8009558:	f003 030f 	and.w	r3, r3, #15
 800955c:	2b00      	cmp	r3, #0
 800955e:	d10a      	bne.n	8009576 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6818      	ldr	r0, [r3, #0]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	68db      	ldr	r3, [r3, #12]
 8009568:	b2d9      	uxtb	r1, r3
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009570:	461a      	mov	r2, r3
 8009572:	f00b f88d 	bl	8014690 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2200      	movs	r2, #0
 800957a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800957e:	2300      	movs	r3, #0
}
 8009580:	4618      	mov	r0, r3
 8009582:	3710      	adds	r7, #16
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	460b      	mov	r3, r1
 8009592:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009594:	78fb      	ldrb	r3, [r7, #3]
 8009596:	f003 020f 	and.w	r2, r3, #15
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	429a      	cmp	r2, r3
 80095a0:	d901      	bls.n	80095a6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80095a2:	2301      	movs	r3, #1
 80095a4:	e042      	b.n	800962c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80095a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	da0f      	bge.n	80095ce <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80095ae:	78fb      	ldrb	r3, [r7, #3]
 80095b0:	f003 020f 	and.w	r2, r3, #15
 80095b4:	4613      	mov	r3, r2
 80095b6:	00db      	lsls	r3, r3, #3
 80095b8:	4413      	add	r3, r2
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	3338      	adds	r3, #56	; 0x38
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	4413      	add	r3, r2
 80095c2:	3304      	adds	r3, #4
 80095c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2201      	movs	r2, #1
 80095ca:	705a      	strb	r2, [r3, #1]
 80095cc:	e00f      	b.n	80095ee <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80095ce:	78fb      	ldrb	r3, [r7, #3]
 80095d0:	f003 020f 	and.w	r2, r3, #15
 80095d4:	4613      	mov	r3, r2
 80095d6:	00db      	lsls	r3, r3, #3
 80095d8:	4413      	add	r3, r2
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	4413      	add	r3, r2
 80095e4:	3304      	adds	r3, #4
 80095e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2200      	movs	r2, #0
 80095ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2200      	movs	r2, #0
 80095f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80095f4:	78fb      	ldrb	r3, [r7, #3]
 80095f6:	f003 030f 	and.w	r3, r3, #15
 80095fa:	b2da      	uxtb	r2, r3
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009606:	2b01      	cmp	r3, #1
 8009608:	d101      	bne.n	800960e <HAL_PCD_EP_ClrStall+0x86>
 800960a:	2302      	movs	r3, #2
 800960c:	e00e      	b.n	800962c <HAL_PCD_EP_ClrStall+0xa4>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2201      	movs	r2, #1
 8009612:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	68f9      	ldr	r1, [r7, #12]
 800961c:	4618      	mov	r0, r3
 800961e:	f00a fea3 	bl	8014368 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2200      	movs	r2, #0
 8009626:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800962a:	2300      	movs	r3, #0
}
 800962c:	4618      	mov	r0, r3
 800962e:	3710      	adds	r7, #16
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b084      	sub	sp, #16
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	460b      	mov	r3, r1
 800963e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009640:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009644:	2b00      	cmp	r3, #0
 8009646:	da0c      	bge.n	8009662 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009648:	78fb      	ldrb	r3, [r7, #3]
 800964a:	f003 020f 	and.w	r2, r3, #15
 800964e:	4613      	mov	r3, r2
 8009650:	00db      	lsls	r3, r3, #3
 8009652:	4413      	add	r3, r2
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	3338      	adds	r3, #56	; 0x38
 8009658:	687a      	ldr	r2, [r7, #4]
 800965a:	4413      	add	r3, r2
 800965c:	3304      	adds	r3, #4
 800965e:	60fb      	str	r3, [r7, #12]
 8009660:	e00c      	b.n	800967c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009662:	78fb      	ldrb	r3, [r7, #3]
 8009664:	f003 020f 	and.w	r2, r3, #15
 8009668:	4613      	mov	r3, r2
 800966a:	00db      	lsls	r3, r3, #3
 800966c:	4413      	add	r3, r2
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	4413      	add	r3, r2
 8009678:	3304      	adds	r3, #4
 800967a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	68f9      	ldr	r1, [r7, #12]
 8009682:	4618      	mov	r0, r3
 8009684:	f00a fcc2 	bl	801400c <USB_EPStopXfer>
 8009688:	4603      	mov	r3, r0
 800968a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800968c:	7afb      	ldrb	r3, [r7, #11]
}
 800968e:	4618      	mov	r0, r3
 8009690:	3710      	adds	r7, #16
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}

08009696 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009696:	b580      	push	{r7, lr}
 8009698:	b08a      	sub	sp, #40	; 0x28
 800969a:	af02      	add	r7, sp, #8
 800969c:	6078      	str	r0, [r7, #4]
 800969e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80096aa:	683a      	ldr	r2, [r7, #0]
 80096ac:	4613      	mov	r3, r2
 80096ae:	00db      	lsls	r3, r3, #3
 80096b0:	4413      	add	r3, r2
 80096b2:	009b      	lsls	r3, r3, #2
 80096b4:	3338      	adds	r3, #56	; 0x38
 80096b6:	687a      	ldr	r2, [r7, #4]
 80096b8:	4413      	add	r3, r2
 80096ba:	3304      	adds	r3, #4
 80096bc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	695a      	ldr	r2, [r3, #20]
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d901      	bls.n	80096ce <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80096ca:	2301      	movs	r3, #1
 80096cc:	e06c      	b.n	80097a8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	691a      	ldr	r2, [r3, #16]
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	695b      	ldr	r3, [r3, #20]
 80096d6:	1ad3      	subs	r3, r2, r3
 80096d8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	689b      	ldr	r3, [r3, #8]
 80096de:	69fa      	ldr	r2, [r7, #28]
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d902      	bls.n	80096ea <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	689b      	ldr	r3, [r3, #8]
 80096e8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80096ea:	69fb      	ldr	r3, [r7, #28]
 80096ec:	3303      	adds	r3, #3
 80096ee:	089b      	lsrs	r3, r3, #2
 80096f0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80096f2:	e02b      	b.n	800974c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	691a      	ldr	r2, [r3, #16]
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	695b      	ldr	r3, [r3, #20]
 80096fc:	1ad3      	subs	r3, r2, r3
 80096fe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	69fa      	ldr	r2, [r7, #28]
 8009706:	429a      	cmp	r2, r3
 8009708:	d902      	bls.n	8009710 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	689b      	ldr	r3, [r3, #8]
 800970e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009710:	69fb      	ldr	r3, [r7, #28]
 8009712:	3303      	adds	r3, #3
 8009714:	089b      	lsrs	r3, r3, #2
 8009716:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	68d9      	ldr	r1, [r3, #12]
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	b2da      	uxtb	r2, r3
 8009720:	69fb      	ldr	r3, [r7, #28]
 8009722:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009728:	b2db      	uxtb	r3, r3
 800972a:	9300      	str	r3, [sp, #0]
 800972c:	4603      	mov	r3, r0
 800972e:	6978      	ldr	r0, [r7, #20]
 8009730:	f00a fd16 	bl	8014160 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	68da      	ldr	r2, [r3, #12]
 8009738:	69fb      	ldr	r3, [r7, #28]
 800973a:	441a      	add	r2, r3
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	695a      	ldr	r2, [r3, #20]
 8009744:	69fb      	ldr	r3, [r7, #28]
 8009746:	441a      	add	r2, r3
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	015a      	lsls	r2, r3, #5
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	4413      	add	r3, r2
 8009754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009758:	699b      	ldr	r3, [r3, #24]
 800975a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800975c:	69ba      	ldr	r2, [r7, #24]
 800975e:	429a      	cmp	r2, r3
 8009760:	d809      	bhi.n	8009776 <PCD_WriteEmptyTxFifo+0xe0>
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	695a      	ldr	r2, [r3, #20]
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800976a:	429a      	cmp	r2, r3
 800976c:	d203      	bcs.n	8009776 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	691b      	ldr	r3, [r3, #16]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d1be      	bne.n	80096f4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	691a      	ldr	r2, [r3, #16]
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	695b      	ldr	r3, [r3, #20]
 800977e:	429a      	cmp	r2, r3
 8009780:	d811      	bhi.n	80097a6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	f003 030f 	and.w	r3, r3, #15
 8009788:	2201      	movs	r2, #1
 800978a:	fa02 f303 	lsl.w	r3, r2, r3
 800978e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009796:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	43db      	mvns	r3, r3
 800979c:	6939      	ldr	r1, [r7, #16]
 800979e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097a2:	4013      	ands	r3, r2
 80097a4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80097a6:	2300      	movs	r3, #0
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3720      	adds	r7, #32
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b088      	sub	sp, #32
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097c0:	69fb      	ldr	r3, [r7, #28]
 80097c2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80097c4:	69fb      	ldr	r3, [r7, #28]
 80097c6:	333c      	adds	r3, #60	; 0x3c
 80097c8:	3304      	adds	r3, #4
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	015a      	lsls	r2, r3, #5
 80097d2:	69bb      	ldr	r3, [r7, #24]
 80097d4:	4413      	add	r3, r2
 80097d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	68db      	ldr	r3, [r3, #12]
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d17b      	bne.n	80098de <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	f003 0308 	and.w	r3, r3, #8
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d015      	beq.n	800981c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	4a61      	ldr	r2, [pc, #388]	; (8009978 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	f240 80b9 	bls.w	800996c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009800:	2b00      	cmp	r3, #0
 8009802:	f000 80b3 	beq.w	800996c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	015a      	lsls	r2, r3, #5
 800980a:	69bb      	ldr	r3, [r7, #24]
 800980c:	4413      	add	r3, r2
 800980e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009812:	461a      	mov	r2, r3
 8009814:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009818:	6093      	str	r3, [r2, #8]
 800981a:	e0a7      	b.n	800996c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	f003 0320 	and.w	r3, r3, #32
 8009822:	2b00      	cmp	r3, #0
 8009824:	d009      	beq.n	800983a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	015a      	lsls	r2, r3, #5
 800982a:	69bb      	ldr	r3, [r7, #24]
 800982c:	4413      	add	r3, r2
 800982e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009832:	461a      	mov	r2, r3
 8009834:	2320      	movs	r3, #32
 8009836:	6093      	str	r3, [r2, #8]
 8009838:	e098      	b.n	800996c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009840:	2b00      	cmp	r3, #0
 8009842:	f040 8093 	bne.w	800996c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	4a4b      	ldr	r2, [pc, #300]	; (8009978 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d90f      	bls.n	800986e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009854:	2b00      	cmp	r3, #0
 8009856:	d00a      	beq.n	800986e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	015a      	lsls	r2, r3, #5
 800985c:	69bb      	ldr	r3, [r7, #24]
 800985e:	4413      	add	r3, r2
 8009860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009864:	461a      	mov	r2, r3
 8009866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800986a:	6093      	str	r3, [r2, #8]
 800986c:	e07e      	b.n	800996c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800986e:	683a      	ldr	r2, [r7, #0]
 8009870:	4613      	mov	r3, r2
 8009872:	00db      	lsls	r3, r3, #3
 8009874:	4413      	add	r3, r2
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	4413      	add	r3, r2
 8009880:	3304      	adds	r3, #4
 8009882:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	6a1a      	ldr	r2, [r3, #32]
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	0159      	lsls	r1, r3, #5
 800988c:	69bb      	ldr	r3, [r7, #24]
 800988e:	440b      	add	r3, r1
 8009890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009894:	691b      	ldr	r3, [r3, #16]
 8009896:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800989a:	1ad2      	subs	r2, r2, r3
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d114      	bne.n	80098d0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	691b      	ldr	r3, [r3, #16]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d109      	bne.n	80098c2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6818      	ldr	r0, [r3, #0]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80098b8:	461a      	mov	r2, r3
 80098ba:	2101      	movs	r1, #1
 80098bc:	f00a fee8 	bl	8014690 <USB_EP0_OutStart>
 80098c0:	e006      	b.n	80098d0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	68da      	ldr	r2, [r3, #12]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	695b      	ldr	r3, [r3, #20]
 80098ca:	441a      	add	r2, r3
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	4619      	mov	r1, r3
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f00d fc78 	bl	80171cc <HAL_PCD_DataOutStageCallback>
 80098dc:	e046      	b.n	800996c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	4a26      	ldr	r2, [pc, #152]	; (800997c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d124      	bne.n	8009930 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d00a      	beq.n	8009906 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	015a      	lsls	r2, r3, #5
 80098f4:	69bb      	ldr	r3, [r7, #24]
 80098f6:	4413      	add	r3, r2
 80098f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098fc:	461a      	mov	r2, r3
 80098fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009902:	6093      	str	r3, [r2, #8]
 8009904:	e032      	b.n	800996c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	f003 0320 	and.w	r3, r3, #32
 800990c:	2b00      	cmp	r3, #0
 800990e:	d008      	beq.n	8009922 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	015a      	lsls	r2, r3, #5
 8009914:	69bb      	ldr	r3, [r7, #24]
 8009916:	4413      	add	r3, r2
 8009918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800991c:	461a      	mov	r2, r3
 800991e:	2320      	movs	r3, #32
 8009920:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	b2db      	uxtb	r3, r3
 8009926:	4619      	mov	r1, r3
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f00d fc4f 	bl	80171cc <HAL_PCD_DataOutStageCallback>
 800992e:	e01d      	b.n	800996c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d114      	bne.n	8009960 <PCD_EP_OutXfrComplete_int+0x1b0>
 8009936:	6879      	ldr	r1, [r7, #4]
 8009938:	683a      	ldr	r2, [r7, #0]
 800993a:	4613      	mov	r3, r2
 800993c:	00db      	lsls	r3, r3, #3
 800993e:	4413      	add	r3, r2
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	440b      	add	r3, r1
 8009944:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d108      	bne.n	8009960 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6818      	ldr	r0, [r3, #0]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009958:	461a      	mov	r2, r3
 800995a:	2100      	movs	r1, #0
 800995c:	f00a fe98 	bl	8014690 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	b2db      	uxtb	r3, r3
 8009964:	4619      	mov	r1, r3
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f00d fc30 	bl	80171cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800996c:	2300      	movs	r3, #0
}
 800996e:	4618      	mov	r0, r3
 8009970:	3720      	adds	r7, #32
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
 8009976:	bf00      	nop
 8009978:	4f54300a 	.word	0x4f54300a
 800997c:	4f54310a 	.word	0x4f54310a

08009980 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b086      	sub	sp, #24
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	333c      	adds	r3, #60	; 0x3c
 8009998:	3304      	adds	r3, #4
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	015a      	lsls	r2, r3, #5
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	4413      	add	r3, r2
 80099a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	4a15      	ldr	r2, [pc, #84]	; (8009a08 <PCD_EP_OutSetupPacket_int+0x88>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d90e      	bls.n	80099d4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d009      	beq.n	80099d4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	015a      	lsls	r2, r3, #5
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	4413      	add	r3, r2
 80099c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099cc:	461a      	mov	r2, r3
 80099ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099d2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f00d fbe7 	bl	80171a8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	4a0a      	ldr	r2, [pc, #40]	; (8009a08 <PCD_EP_OutSetupPacket_int+0x88>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d90c      	bls.n	80099fc <PCD_EP_OutSetupPacket_int+0x7c>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	68db      	ldr	r3, [r3, #12]
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d108      	bne.n	80099fc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6818      	ldr	r0, [r3, #0]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80099f4:	461a      	mov	r2, r3
 80099f6:	2101      	movs	r1, #1
 80099f8:	f00a fe4a 	bl	8014690 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80099fc:	2300      	movs	r3, #0
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3718      	adds	r7, #24
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop
 8009a08:	4f54300a 	.word	0x4f54300a

08009a0c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b085      	sub	sp, #20
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	460b      	mov	r3, r1
 8009a16:	70fb      	strb	r3, [r7, #3]
 8009a18:	4613      	mov	r3, r2
 8009a1a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a22:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009a24:	78fb      	ldrb	r3, [r7, #3]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d107      	bne.n	8009a3a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009a2a:	883b      	ldrh	r3, [r7, #0]
 8009a2c:	0419      	lsls	r1, r3, #16
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	68ba      	ldr	r2, [r7, #8]
 8009a34:	430a      	orrs	r2, r1
 8009a36:	629a      	str	r2, [r3, #40]	; 0x28
 8009a38:	e028      	b.n	8009a8c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a40:	0c1b      	lsrs	r3, r3, #16
 8009a42:	68ba      	ldr	r2, [r7, #8]
 8009a44:	4413      	add	r3, r2
 8009a46:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009a48:	2300      	movs	r3, #0
 8009a4a:	73fb      	strb	r3, [r7, #15]
 8009a4c:	e00d      	b.n	8009a6a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	7bfb      	ldrb	r3, [r7, #15]
 8009a54:	3340      	adds	r3, #64	; 0x40
 8009a56:	009b      	lsls	r3, r3, #2
 8009a58:	4413      	add	r3, r2
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	0c1b      	lsrs	r3, r3, #16
 8009a5e:	68ba      	ldr	r2, [r7, #8]
 8009a60:	4413      	add	r3, r2
 8009a62:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009a64:	7bfb      	ldrb	r3, [r7, #15]
 8009a66:	3301      	adds	r3, #1
 8009a68:	73fb      	strb	r3, [r7, #15]
 8009a6a:	7bfa      	ldrb	r2, [r7, #15]
 8009a6c:	78fb      	ldrb	r3, [r7, #3]
 8009a6e:	3b01      	subs	r3, #1
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d3ec      	bcc.n	8009a4e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009a74:	883b      	ldrh	r3, [r7, #0]
 8009a76:	0418      	lsls	r0, r3, #16
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6819      	ldr	r1, [r3, #0]
 8009a7c:	78fb      	ldrb	r3, [r7, #3]
 8009a7e:	3b01      	subs	r3, #1
 8009a80:	68ba      	ldr	r2, [r7, #8]
 8009a82:	4302      	orrs	r2, r0
 8009a84:	3340      	adds	r3, #64	; 0x40
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	440b      	add	r3, r1
 8009a8a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009a8c:	2300      	movs	r3, #0
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3714      	adds	r7, #20
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr

08009a9a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009a9a:	b480      	push	{r7}
 8009a9c:	b083      	sub	sp, #12
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	887a      	ldrh	r2, [r7, #2]
 8009aac:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009aae:	2300      	movs	r3, #0
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	370c      	adds	r7, #12
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b085      	sub	sp, #20
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2201      	movs	r2, #1
 8009ace:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	699b      	ldr	r3, [r3, #24]
 8009ade:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009aea:	4b05      	ldr	r3, [pc, #20]	; (8009b00 <HAL_PCDEx_ActivateLPM+0x44>)
 8009aec:	4313      	orrs	r3, r2
 8009aee:	68fa      	ldr	r2, [r7, #12]
 8009af0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009af2:	2300      	movs	r3, #0
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3714      	adds	r7, #20
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr
 8009b00:	10000003 	.word	0x10000003

08009b04 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b083      	sub	sp, #12
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009b10:	bf00      	nop
 8009b12:	370c      	adds	r7, #12
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr

08009b1c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b084      	sub	sp, #16
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009b24:	4b19      	ldr	r3, [pc, #100]	; (8009b8c <HAL_PWREx_ConfigSupply+0x70>)
 8009b26:	68db      	ldr	r3, [r3, #12]
 8009b28:	f003 0304 	and.w	r3, r3, #4
 8009b2c:	2b04      	cmp	r3, #4
 8009b2e:	d00a      	beq.n	8009b46 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009b30:	4b16      	ldr	r3, [pc, #88]	; (8009b8c <HAL_PWREx_ConfigSupply+0x70>)
 8009b32:	68db      	ldr	r3, [r3, #12]
 8009b34:	f003 0307 	and.w	r3, r3, #7
 8009b38:	687a      	ldr	r2, [r7, #4]
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d001      	beq.n	8009b42 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	e01f      	b.n	8009b82 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009b42:	2300      	movs	r3, #0
 8009b44:	e01d      	b.n	8009b82 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009b46:	4b11      	ldr	r3, [pc, #68]	; (8009b8c <HAL_PWREx_ConfigSupply+0x70>)
 8009b48:	68db      	ldr	r3, [r3, #12]
 8009b4a:	f023 0207 	bic.w	r2, r3, #7
 8009b4e:	490f      	ldr	r1, [pc, #60]	; (8009b8c <HAL_PWREx_ConfigSupply+0x70>)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	4313      	orrs	r3, r2
 8009b54:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009b56:	f7fa f90f 	bl	8003d78 <HAL_GetTick>
 8009b5a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009b5c:	e009      	b.n	8009b72 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009b5e:	f7fa f90b 	bl	8003d78 <HAL_GetTick>
 8009b62:	4602      	mov	r2, r0
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	1ad3      	subs	r3, r2, r3
 8009b68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b6c:	d901      	bls.n	8009b72 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e007      	b.n	8009b82 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009b72:	4b06      	ldr	r3, [pc, #24]	; (8009b8c <HAL_PWREx_ConfigSupply+0x70>)
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b7e:	d1ee      	bne.n	8009b5e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009b80:	2300      	movs	r3, #0
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3710      	adds	r7, #16
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
 8009b8a:	bf00      	nop
 8009b8c:	58024800 	.word	0x58024800

08009b90 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8009b90:	b480      	push	{r7}
 8009b92:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8009b94:	4b05      	ldr	r3, [pc, #20]	; (8009bac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	4a04      	ldr	r2, [pc, #16]	; (8009bac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009b9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009b9e:	60d3      	str	r3, [r2, #12]
}
 8009ba0:	bf00      	nop
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr
 8009baa:	bf00      	nop
 8009bac:	58024800 	.word	0x58024800

08009bb0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b08c      	sub	sp, #48	; 0x30
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d101      	bne.n	8009bc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	e3c8      	b.n	800a354 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f003 0301 	and.w	r3, r3, #1
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	f000 8087 	beq.w	8009cde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009bd0:	4b88      	ldr	r3, [pc, #544]	; (8009df4 <HAL_RCC_OscConfig+0x244>)
 8009bd2:	691b      	ldr	r3, [r3, #16]
 8009bd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009bda:	4b86      	ldr	r3, [pc, #536]	; (8009df4 <HAL_RCC_OscConfig+0x244>)
 8009bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bde:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be2:	2b10      	cmp	r3, #16
 8009be4:	d007      	beq.n	8009bf6 <HAL_RCC_OscConfig+0x46>
 8009be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be8:	2b18      	cmp	r3, #24
 8009bea:	d110      	bne.n	8009c0e <HAL_RCC_OscConfig+0x5e>
 8009bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bee:	f003 0303 	and.w	r3, r3, #3
 8009bf2:	2b02      	cmp	r3, #2
 8009bf4:	d10b      	bne.n	8009c0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009bf6:	4b7f      	ldr	r3, [pc, #508]	; (8009df4 <HAL_RCC_OscConfig+0x244>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d06c      	beq.n	8009cdc <HAL_RCC_OscConfig+0x12c>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	685b      	ldr	r3, [r3, #4]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d168      	bne.n	8009cdc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	e3a2      	b.n	800a354 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	685b      	ldr	r3, [r3, #4]
 8009c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c16:	d106      	bne.n	8009c26 <HAL_RCC_OscConfig+0x76>
 8009c18:	4b76      	ldr	r3, [pc, #472]	; (8009df4 <HAL_RCC_OscConfig+0x244>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4a75      	ldr	r2, [pc, #468]	; (8009df4 <HAL_RCC_OscConfig+0x244>)
 8009c1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c22:	6013      	str	r3, [r2, #0]
 8009c24:	e02e      	b.n	8009c84 <HAL_RCC_OscConfig+0xd4>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d10c      	bne.n	8009c48 <HAL_RCC_OscConfig+0x98>
 8009c2e:	4b71      	ldr	r3, [pc, #452]	; (8009df4 <HAL_RCC_OscConfig+0x244>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4a70      	ldr	r2, [pc, #448]	; (8009df4 <HAL_RCC_OscConfig+0x244>)
 8009c34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c38:	6013      	str	r3, [r2, #0]
 8009c3a:	4b6e      	ldr	r3, [pc, #440]	; (8009df4 <HAL_RCC_OscConfig+0x244>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4a6d      	ldr	r2, [pc, #436]	; (8009df4 <HAL_RCC_OscConfig+0x244>)
 8009c40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009c44:	6013      	str	r3, [r2, #0]
 8009c46:	e01d      	b.n	8009c84 <HAL_RCC_OscConfig+0xd4>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	685b      	ldr	r3, [r3, #4]
 8009c4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009c50:	d10c      	bne.n	8009c6c <HAL_RCC_OscConfig+0xbc>
 8009c52:	4b68      	ldr	r3, [pc, #416]	; (8009df4 <HAL_RCC_OscConfig+0x244>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	4a67      	ldr	r2, [pc, #412]	; (8009df4 <HAL_RCC_OscConfig+0x244>)
 8009c58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009c5c:	6013      	str	r3, [r2, #0]
 8009c5e:	4b65      	ldr	r3, [pc, #404]	; (8009df4 <HAL_RCC_OscConfig+0x244>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	4a64      	ldr	r2, [pc, #400]	; (8009df4 <HAL_RCC_OscConfig+0x244>)
 8009c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c68:	6013      	str	r3, [r2, #0]
 8009c6a:	e00b      	b.n	8009c84 <HAL_RCC_OscConfig+0xd4>
 8009c6c:	4b61      	ldr	r3, [pc, #388]	; (8009df4 <HAL_RCC_OscConfig+0x244>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a60      	ldr	r2, [pc, #384]	; (8009df4 <HAL_RCC_OscConfig+0x244>)
 8009c72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c76:	6013      	str	r3, [r2, #0]
 8009c78:	4b5e      	ldr	r3, [pc, #376]	; (8009df4 <HAL_RCC_OscConfig+0x244>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a5d      	ldr	r2, [pc, #372]	; (8009df4 <HAL_RCC_OscConfig+0x244>)
 8009c7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009c82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d013      	beq.n	8009cb4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c8c:	f7fa f874 	bl	8003d78 <HAL_GetTick>
 8009c90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009c92:	e008      	b.n	8009ca6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009c94:	f7fa f870 	bl	8003d78 <HAL_GetTick>
 8009c98:	4602      	mov	r2, r0
 8009c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9c:	1ad3      	subs	r3, r2, r3
 8009c9e:	2b64      	cmp	r3, #100	; 0x64
 8009ca0:	d901      	bls.n	8009ca6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009ca2:	2303      	movs	r3, #3
 8009ca4:	e356      	b.n	800a354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009ca6:	4b53      	ldr	r3, [pc, #332]	; (8009df4 <HAL_RCC_OscConfig+0x244>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d0f0      	beq.n	8009c94 <HAL_RCC_OscConfig+0xe4>
 8009cb2:	e014      	b.n	8009cde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cb4:	f7fa f860 	bl	8003d78 <HAL_GetTick>
 8009cb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009cba:	e008      	b.n	8009cce <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009cbc:	f7fa f85c 	bl	8003d78 <HAL_GetTick>
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc4:	1ad3      	subs	r3, r2, r3
 8009cc6:	2b64      	cmp	r3, #100	; 0x64
 8009cc8:	d901      	bls.n	8009cce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009cca:	2303      	movs	r3, #3
 8009ccc:	e342      	b.n	800a354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009cce:	4b49      	ldr	r3, [pc, #292]	; (8009df4 <HAL_RCC_OscConfig+0x244>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d1f0      	bne.n	8009cbc <HAL_RCC_OscConfig+0x10c>
 8009cda:	e000      	b.n	8009cde <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009cdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f003 0302 	and.w	r3, r3, #2
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	f000 808c 	beq.w	8009e04 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009cec:	4b41      	ldr	r3, [pc, #260]	; (8009df4 <HAL_RCC_OscConfig+0x244>)
 8009cee:	691b      	ldr	r3, [r3, #16]
 8009cf0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009cf4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009cf6:	4b3f      	ldr	r3, [pc, #252]	; (8009df4 <HAL_RCC_OscConfig+0x244>)
 8009cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cfa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009cfc:	6a3b      	ldr	r3, [r7, #32]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d007      	beq.n	8009d12 <HAL_RCC_OscConfig+0x162>
 8009d02:	6a3b      	ldr	r3, [r7, #32]
 8009d04:	2b18      	cmp	r3, #24
 8009d06:	d137      	bne.n	8009d78 <HAL_RCC_OscConfig+0x1c8>
 8009d08:	69fb      	ldr	r3, [r7, #28]
 8009d0a:	f003 0303 	and.w	r3, r3, #3
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d132      	bne.n	8009d78 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009d12:	4b38      	ldr	r3, [pc, #224]	; (8009df4 <HAL_RCC_OscConfig+0x244>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f003 0304 	and.w	r3, r3, #4
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d005      	beq.n	8009d2a <HAL_RCC_OscConfig+0x17a>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	68db      	ldr	r3, [r3, #12]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d101      	bne.n	8009d2a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009d26:	2301      	movs	r3, #1
 8009d28:	e314      	b.n	800a354 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009d2a:	4b32      	ldr	r3, [pc, #200]	; (8009df4 <HAL_RCC_OscConfig+0x244>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f023 0219 	bic.w	r2, r3, #25
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	68db      	ldr	r3, [r3, #12]
 8009d36:	492f      	ldr	r1, [pc, #188]	; (8009df4 <HAL_RCC_OscConfig+0x244>)
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d3c:	f7fa f81c 	bl	8003d78 <HAL_GetTick>
 8009d40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009d42:	e008      	b.n	8009d56 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d44:	f7fa f818 	bl	8003d78 <HAL_GetTick>
 8009d48:	4602      	mov	r2, r0
 8009d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4c:	1ad3      	subs	r3, r2, r3
 8009d4e:	2b02      	cmp	r3, #2
 8009d50:	d901      	bls.n	8009d56 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8009d52:	2303      	movs	r3, #3
 8009d54:	e2fe      	b.n	800a354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009d56:	4b27      	ldr	r3, [pc, #156]	; (8009df4 <HAL_RCC_OscConfig+0x244>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f003 0304 	and.w	r3, r3, #4
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d0f0      	beq.n	8009d44 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009d62:	4b24      	ldr	r3, [pc, #144]	; (8009df4 <HAL_RCC_OscConfig+0x244>)
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	691b      	ldr	r3, [r3, #16]
 8009d6e:	061b      	lsls	r3, r3, #24
 8009d70:	4920      	ldr	r1, [pc, #128]	; (8009df4 <HAL_RCC_OscConfig+0x244>)
 8009d72:	4313      	orrs	r3, r2
 8009d74:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009d76:	e045      	b.n	8009e04 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	68db      	ldr	r3, [r3, #12]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d026      	beq.n	8009dce <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009d80:	4b1c      	ldr	r3, [pc, #112]	; (8009df4 <HAL_RCC_OscConfig+0x244>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f023 0219 	bic.w	r2, r3, #25
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	68db      	ldr	r3, [r3, #12]
 8009d8c:	4919      	ldr	r1, [pc, #100]	; (8009df4 <HAL_RCC_OscConfig+0x244>)
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d92:	f7f9 fff1 	bl	8003d78 <HAL_GetTick>
 8009d96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009d98:	e008      	b.n	8009dac <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d9a:	f7f9 ffed 	bl	8003d78 <HAL_GetTick>
 8009d9e:	4602      	mov	r2, r0
 8009da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da2:	1ad3      	subs	r3, r2, r3
 8009da4:	2b02      	cmp	r3, #2
 8009da6:	d901      	bls.n	8009dac <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009da8:	2303      	movs	r3, #3
 8009daa:	e2d3      	b.n	800a354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009dac:	4b11      	ldr	r3, [pc, #68]	; (8009df4 <HAL_RCC_OscConfig+0x244>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f003 0304 	and.w	r3, r3, #4
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d0f0      	beq.n	8009d9a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009db8:	4b0e      	ldr	r3, [pc, #56]	; (8009df4 <HAL_RCC_OscConfig+0x244>)
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	691b      	ldr	r3, [r3, #16]
 8009dc4:	061b      	lsls	r3, r3, #24
 8009dc6:	490b      	ldr	r1, [pc, #44]	; (8009df4 <HAL_RCC_OscConfig+0x244>)
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	604b      	str	r3, [r1, #4]
 8009dcc:	e01a      	b.n	8009e04 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009dce:	4b09      	ldr	r3, [pc, #36]	; (8009df4 <HAL_RCC_OscConfig+0x244>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4a08      	ldr	r2, [pc, #32]	; (8009df4 <HAL_RCC_OscConfig+0x244>)
 8009dd4:	f023 0301 	bic.w	r3, r3, #1
 8009dd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dda:	f7f9 ffcd 	bl	8003d78 <HAL_GetTick>
 8009dde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009de0:	e00a      	b.n	8009df8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009de2:	f7f9 ffc9 	bl	8003d78 <HAL_GetTick>
 8009de6:	4602      	mov	r2, r0
 8009de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dea:	1ad3      	subs	r3, r2, r3
 8009dec:	2b02      	cmp	r3, #2
 8009dee:	d903      	bls.n	8009df8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009df0:	2303      	movs	r3, #3
 8009df2:	e2af      	b.n	800a354 <HAL_RCC_OscConfig+0x7a4>
 8009df4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009df8:	4b96      	ldr	r3, [pc, #600]	; (800a054 <HAL_RCC_OscConfig+0x4a4>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f003 0304 	and.w	r3, r3, #4
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d1ee      	bne.n	8009de2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f003 0310 	and.w	r3, r3, #16
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d06a      	beq.n	8009ee6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009e10:	4b90      	ldr	r3, [pc, #576]	; (800a054 <HAL_RCC_OscConfig+0x4a4>)
 8009e12:	691b      	ldr	r3, [r3, #16]
 8009e14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e18:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009e1a:	4b8e      	ldr	r3, [pc, #568]	; (800a054 <HAL_RCC_OscConfig+0x4a4>)
 8009e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e1e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009e20:	69bb      	ldr	r3, [r7, #24]
 8009e22:	2b08      	cmp	r3, #8
 8009e24:	d007      	beq.n	8009e36 <HAL_RCC_OscConfig+0x286>
 8009e26:	69bb      	ldr	r3, [r7, #24]
 8009e28:	2b18      	cmp	r3, #24
 8009e2a:	d11b      	bne.n	8009e64 <HAL_RCC_OscConfig+0x2b4>
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	f003 0303 	and.w	r3, r3, #3
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d116      	bne.n	8009e64 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009e36:	4b87      	ldr	r3, [pc, #540]	; (800a054 <HAL_RCC_OscConfig+0x4a4>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d005      	beq.n	8009e4e <HAL_RCC_OscConfig+0x29e>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	69db      	ldr	r3, [r3, #28]
 8009e46:	2b80      	cmp	r3, #128	; 0x80
 8009e48:	d001      	beq.n	8009e4e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	e282      	b.n	800a354 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009e4e:	4b81      	ldr	r3, [pc, #516]	; (800a054 <HAL_RCC_OscConfig+0x4a4>)
 8009e50:	68db      	ldr	r3, [r3, #12]
 8009e52:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6a1b      	ldr	r3, [r3, #32]
 8009e5a:	061b      	lsls	r3, r3, #24
 8009e5c:	497d      	ldr	r1, [pc, #500]	; (800a054 <HAL_RCC_OscConfig+0x4a4>)
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009e62:	e040      	b.n	8009ee6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	69db      	ldr	r3, [r3, #28]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d023      	beq.n	8009eb4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009e6c:	4b79      	ldr	r3, [pc, #484]	; (800a054 <HAL_RCC_OscConfig+0x4a4>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a78      	ldr	r2, [pc, #480]	; (800a054 <HAL_RCC_OscConfig+0x4a4>)
 8009e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e78:	f7f9 ff7e 	bl	8003d78 <HAL_GetTick>
 8009e7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009e7e:	e008      	b.n	8009e92 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009e80:	f7f9 ff7a 	bl	8003d78 <HAL_GetTick>
 8009e84:	4602      	mov	r2, r0
 8009e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e88:	1ad3      	subs	r3, r2, r3
 8009e8a:	2b02      	cmp	r3, #2
 8009e8c:	d901      	bls.n	8009e92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009e8e:	2303      	movs	r3, #3
 8009e90:	e260      	b.n	800a354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009e92:	4b70      	ldr	r3, [pc, #448]	; (800a054 <HAL_RCC_OscConfig+0x4a4>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d0f0      	beq.n	8009e80 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009e9e:	4b6d      	ldr	r3, [pc, #436]	; (800a054 <HAL_RCC_OscConfig+0x4a4>)
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6a1b      	ldr	r3, [r3, #32]
 8009eaa:	061b      	lsls	r3, r3, #24
 8009eac:	4969      	ldr	r1, [pc, #420]	; (800a054 <HAL_RCC_OscConfig+0x4a4>)
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	60cb      	str	r3, [r1, #12]
 8009eb2:	e018      	b.n	8009ee6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009eb4:	4b67      	ldr	r3, [pc, #412]	; (800a054 <HAL_RCC_OscConfig+0x4a4>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	4a66      	ldr	r2, [pc, #408]	; (800a054 <HAL_RCC_OscConfig+0x4a4>)
 8009eba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ebe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ec0:	f7f9 ff5a 	bl	8003d78 <HAL_GetTick>
 8009ec4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009ec6:	e008      	b.n	8009eda <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009ec8:	f7f9 ff56 	bl	8003d78 <HAL_GetTick>
 8009ecc:	4602      	mov	r2, r0
 8009ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed0:	1ad3      	subs	r3, r2, r3
 8009ed2:	2b02      	cmp	r3, #2
 8009ed4:	d901      	bls.n	8009eda <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009ed6:	2303      	movs	r3, #3
 8009ed8:	e23c      	b.n	800a354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009eda:	4b5e      	ldr	r3, [pc, #376]	; (800a054 <HAL_RCC_OscConfig+0x4a4>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d1f0      	bne.n	8009ec8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f003 0308 	and.w	r3, r3, #8
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d036      	beq.n	8009f60 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	695b      	ldr	r3, [r3, #20]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d019      	beq.n	8009f2e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009efa:	4b56      	ldr	r3, [pc, #344]	; (800a054 <HAL_RCC_OscConfig+0x4a4>)
 8009efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009efe:	4a55      	ldr	r2, [pc, #340]	; (800a054 <HAL_RCC_OscConfig+0x4a4>)
 8009f00:	f043 0301 	orr.w	r3, r3, #1
 8009f04:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f06:	f7f9 ff37 	bl	8003d78 <HAL_GetTick>
 8009f0a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009f0c:	e008      	b.n	8009f20 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f0e:	f7f9 ff33 	bl	8003d78 <HAL_GetTick>
 8009f12:	4602      	mov	r2, r0
 8009f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f16:	1ad3      	subs	r3, r2, r3
 8009f18:	2b02      	cmp	r3, #2
 8009f1a:	d901      	bls.n	8009f20 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009f1c:	2303      	movs	r3, #3
 8009f1e:	e219      	b.n	800a354 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009f20:	4b4c      	ldr	r3, [pc, #304]	; (800a054 <HAL_RCC_OscConfig+0x4a4>)
 8009f22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f24:	f003 0302 	and.w	r3, r3, #2
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d0f0      	beq.n	8009f0e <HAL_RCC_OscConfig+0x35e>
 8009f2c:	e018      	b.n	8009f60 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009f2e:	4b49      	ldr	r3, [pc, #292]	; (800a054 <HAL_RCC_OscConfig+0x4a4>)
 8009f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f32:	4a48      	ldr	r2, [pc, #288]	; (800a054 <HAL_RCC_OscConfig+0x4a4>)
 8009f34:	f023 0301 	bic.w	r3, r3, #1
 8009f38:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f3a:	f7f9 ff1d 	bl	8003d78 <HAL_GetTick>
 8009f3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009f40:	e008      	b.n	8009f54 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f42:	f7f9 ff19 	bl	8003d78 <HAL_GetTick>
 8009f46:	4602      	mov	r2, r0
 8009f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f4a:	1ad3      	subs	r3, r2, r3
 8009f4c:	2b02      	cmp	r3, #2
 8009f4e:	d901      	bls.n	8009f54 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009f50:	2303      	movs	r3, #3
 8009f52:	e1ff      	b.n	800a354 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009f54:	4b3f      	ldr	r3, [pc, #252]	; (800a054 <HAL_RCC_OscConfig+0x4a4>)
 8009f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f58:	f003 0302 	and.w	r3, r3, #2
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d1f0      	bne.n	8009f42 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f003 0320 	and.w	r3, r3, #32
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d036      	beq.n	8009fda <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	699b      	ldr	r3, [r3, #24]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d019      	beq.n	8009fa8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009f74:	4b37      	ldr	r3, [pc, #220]	; (800a054 <HAL_RCC_OscConfig+0x4a4>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4a36      	ldr	r2, [pc, #216]	; (800a054 <HAL_RCC_OscConfig+0x4a4>)
 8009f7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009f7e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009f80:	f7f9 fefa 	bl	8003d78 <HAL_GetTick>
 8009f84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009f86:	e008      	b.n	8009f9a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009f88:	f7f9 fef6 	bl	8003d78 <HAL_GetTick>
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f90:	1ad3      	subs	r3, r2, r3
 8009f92:	2b02      	cmp	r3, #2
 8009f94:	d901      	bls.n	8009f9a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009f96:	2303      	movs	r3, #3
 8009f98:	e1dc      	b.n	800a354 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009f9a:	4b2e      	ldr	r3, [pc, #184]	; (800a054 <HAL_RCC_OscConfig+0x4a4>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d0f0      	beq.n	8009f88 <HAL_RCC_OscConfig+0x3d8>
 8009fa6:	e018      	b.n	8009fda <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009fa8:	4b2a      	ldr	r3, [pc, #168]	; (800a054 <HAL_RCC_OscConfig+0x4a4>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4a29      	ldr	r2, [pc, #164]	; (800a054 <HAL_RCC_OscConfig+0x4a4>)
 8009fae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009fb2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009fb4:	f7f9 fee0 	bl	8003d78 <HAL_GetTick>
 8009fb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009fba:	e008      	b.n	8009fce <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009fbc:	f7f9 fedc 	bl	8003d78 <HAL_GetTick>
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc4:	1ad3      	subs	r3, r2, r3
 8009fc6:	2b02      	cmp	r3, #2
 8009fc8:	d901      	bls.n	8009fce <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009fca:	2303      	movs	r3, #3
 8009fcc:	e1c2      	b.n	800a354 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009fce:	4b21      	ldr	r3, [pc, #132]	; (800a054 <HAL_RCC_OscConfig+0x4a4>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d1f0      	bne.n	8009fbc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f003 0304 	and.w	r3, r3, #4
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	f000 8086 	beq.w	800a0f4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009fe8:	4b1b      	ldr	r3, [pc, #108]	; (800a058 <HAL_RCC_OscConfig+0x4a8>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4a1a      	ldr	r2, [pc, #104]	; (800a058 <HAL_RCC_OscConfig+0x4a8>)
 8009fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ff2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009ff4:	f7f9 fec0 	bl	8003d78 <HAL_GetTick>
 8009ff8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009ffa:	e008      	b.n	800a00e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ffc:	f7f9 febc 	bl	8003d78 <HAL_GetTick>
 800a000:	4602      	mov	r2, r0
 800a002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a004:	1ad3      	subs	r3, r2, r3
 800a006:	2b64      	cmp	r3, #100	; 0x64
 800a008:	d901      	bls.n	800a00e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800a00a:	2303      	movs	r3, #3
 800a00c:	e1a2      	b.n	800a354 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a00e:	4b12      	ldr	r3, [pc, #72]	; (800a058 <HAL_RCC_OscConfig+0x4a8>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a016:	2b00      	cmp	r3, #0
 800a018:	d0f0      	beq.n	8009ffc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	689b      	ldr	r3, [r3, #8]
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d106      	bne.n	800a030 <HAL_RCC_OscConfig+0x480>
 800a022:	4b0c      	ldr	r3, [pc, #48]	; (800a054 <HAL_RCC_OscConfig+0x4a4>)
 800a024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a026:	4a0b      	ldr	r2, [pc, #44]	; (800a054 <HAL_RCC_OscConfig+0x4a4>)
 800a028:	f043 0301 	orr.w	r3, r3, #1
 800a02c:	6713      	str	r3, [r2, #112]	; 0x70
 800a02e:	e032      	b.n	800a096 <HAL_RCC_OscConfig+0x4e6>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	689b      	ldr	r3, [r3, #8]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d111      	bne.n	800a05c <HAL_RCC_OscConfig+0x4ac>
 800a038:	4b06      	ldr	r3, [pc, #24]	; (800a054 <HAL_RCC_OscConfig+0x4a4>)
 800a03a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a03c:	4a05      	ldr	r2, [pc, #20]	; (800a054 <HAL_RCC_OscConfig+0x4a4>)
 800a03e:	f023 0301 	bic.w	r3, r3, #1
 800a042:	6713      	str	r3, [r2, #112]	; 0x70
 800a044:	4b03      	ldr	r3, [pc, #12]	; (800a054 <HAL_RCC_OscConfig+0x4a4>)
 800a046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a048:	4a02      	ldr	r2, [pc, #8]	; (800a054 <HAL_RCC_OscConfig+0x4a4>)
 800a04a:	f023 0304 	bic.w	r3, r3, #4
 800a04e:	6713      	str	r3, [r2, #112]	; 0x70
 800a050:	e021      	b.n	800a096 <HAL_RCC_OscConfig+0x4e6>
 800a052:	bf00      	nop
 800a054:	58024400 	.word	0x58024400
 800a058:	58024800 	.word	0x58024800
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	689b      	ldr	r3, [r3, #8]
 800a060:	2b05      	cmp	r3, #5
 800a062:	d10c      	bne.n	800a07e <HAL_RCC_OscConfig+0x4ce>
 800a064:	4b83      	ldr	r3, [pc, #524]	; (800a274 <HAL_RCC_OscConfig+0x6c4>)
 800a066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a068:	4a82      	ldr	r2, [pc, #520]	; (800a274 <HAL_RCC_OscConfig+0x6c4>)
 800a06a:	f043 0304 	orr.w	r3, r3, #4
 800a06e:	6713      	str	r3, [r2, #112]	; 0x70
 800a070:	4b80      	ldr	r3, [pc, #512]	; (800a274 <HAL_RCC_OscConfig+0x6c4>)
 800a072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a074:	4a7f      	ldr	r2, [pc, #508]	; (800a274 <HAL_RCC_OscConfig+0x6c4>)
 800a076:	f043 0301 	orr.w	r3, r3, #1
 800a07a:	6713      	str	r3, [r2, #112]	; 0x70
 800a07c:	e00b      	b.n	800a096 <HAL_RCC_OscConfig+0x4e6>
 800a07e:	4b7d      	ldr	r3, [pc, #500]	; (800a274 <HAL_RCC_OscConfig+0x6c4>)
 800a080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a082:	4a7c      	ldr	r2, [pc, #496]	; (800a274 <HAL_RCC_OscConfig+0x6c4>)
 800a084:	f023 0301 	bic.w	r3, r3, #1
 800a088:	6713      	str	r3, [r2, #112]	; 0x70
 800a08a:	4b7a      	ldr	r3, [pc, #488]	; (800a274 <HAL_RCC_OscConfig+0x6c4>)
 800a08c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a08e:	4a79      	ldr	r2, [pc, #484]	; (800a274 <HAL_RCC_OscConfig+0x6c4>)
 800a090:	f023 0304 	bic.w	r3, r3, #4
 800a094:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	689b      	ldr	r3, [r3, #8]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d015      	beq.n	800a0ca <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a09e:	f7f9 fe6b 	bl	8003d78 <HAL_GetTick>
 800a0a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a0a4:	e00a      	b.n	800a0bc <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0a6:	f7f9 fe67 	bl	8003d78 <HAL_GetTick>
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ae:	1ad3      	subs	r3, r2, r3
 800a0b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d901      	bls.n	800a0bc <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800a0b8:	2303      	movs	r3, #3
 800a0ba:	e14b      	b.n	800a354 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a0bc:	4b6d      	ldr	r3, [pc, #436]	; (800a274 <HAL_RCC_OscConfig+0x6c4>)
 800a0be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0c0:	f003 0302 	and.w	r3, r3, #2
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d0ee      	beq.n	800a0a6 <HAL_RCC_OscConfig+0x4f6>
 800a0c8:	e014      	b.n	800a0f4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0ca:	f7f9 fe55 	bl	8003d78 <HAL_GetTick>
 800a0ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a0d0:	e00a      	b.n	800a0e8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0d2:	f7f9 fe51 	bl	8003d78 <HAL_GetTick>
 800a0d6:	4602      	mov	r2, r0
 800a0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0da:	1ad3      	subs	r3, r2, r3
 800a0dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d901      	bls.n	800a0e8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800a0e4:	2303      	movs	r3, #3
 800a0e6:	e135      	b.n	800a354 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a0e8:	4b62      	ldr	r3, [pc, #392]	; (800a274 <HAL_RCC_OscConfig+0x6c4>)
 800a0ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0ec:	f003 0302 	and.w	r3, r3, #2
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d1ee      	bne.n	800a0d2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	f000 812a 	beq.w	800a352 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a0fe:	4b5d      	ldr	r3, [pc, #372]	; (800a274 <HAL_RCC_OscConfig+0x6c4>)
 800a100:	691b      	ldr	r3, [r3, #16]
 800a102:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a106:	2b18      	cmp	r3, #24
 800a108:	f000 80ba 	beq.w	800a280 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a110:	2b02      	cmp	r3, #2
 800a112:	f040 8095 	bne.w	800a240 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a116:	4b57      	ldr	r3, [pc, #348]	; (800a274 <HAL_RCC_OscConfig+0x6c4>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	4a56      	ldr	r2, [pc, #344]	; (800a274 <HAL_RCC_OscConfig+0x6c4>)
 800a11c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a120:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a122:	f7f9 fe29 	bl	8003d78 <HAL_GetTick>
 800a126:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a128:	e008      	b.n	800a13c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a12a:	f7f9 fe25 	bl	8003d78 <HAL_GetTick>
 800a12e:	4602      	mov	r2, r0
 800a130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a132:	1ad3      	subs	r3, r2, r3
 800a134:	2b02      	cmp	r3, #2
 800a136:	d901      	bls.n	800a13c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800a138:	2303      	movs	r3, #3
 800a13a:	e10b      	b.n	800a354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a13c:	4b4d      	ldr	r3, [pc, #308]	; (800a274 <HAL_RCC_OscConfig+0x6c4>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a144:	2b00      	cmp	r3, #0
 800a146:	d1f0      	bne.n	800a12a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a148:	4b4a      	ldr	r3, [pc, #296]	; (800a274 <HAL_RCC_OscConfig+0x6c4>)
 800a14a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a14c:	4b4a      	ldr	r3, [pc, #296]	; (800a278 <HAL_RCC_OscConfig+0x6c8>)
 800a14e:	4013      	ands	r3, r2
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a154:	687a      	ldr	r2, [r7, #4]
 800a156:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a158:	0112      	lsls	r2, r2, #4
 800a15a:	430a      	orrs	r2, r1
 800a15c:	4945      	ldr	r1, [pc, #276]	; (800a274 <HAL_RCC_OscConfig+0x6c4>)
 800a15e:	4313      	orrs	r3, r2
 800a160:	628b      	str	r3, [r1, #40]	; 0x28
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a166:	3b01      	subs	r3, #1
 800a168:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a170:	3b01      	subs	r3, #1
 800a172:	025b      	lsls	r3, r3, #9
 800a174:	b29b      	uxth	r3, r3
 800a176:	431a      	orrs	r2, r3
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a17c:	3b01      	subs	r3, #1
 800a17e:	041b      	lsls	r3, r3, #16
 800a180:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a184:	431a      	orrs	r2, r3
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a18a:	3b01      	subs	r3, #1
 800a18c:	061b      	lsls	r3, r3, #24
 800a18e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a192:	4938      	ldr	r1, [pc, #224]	; (800a274 <HAL_RCC_OscConfig+0x6c4>)
 800a194:	4313      	orrs	r3, r2
 800a196:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a198:	4b36      	ldr	r3, [pc, #216]	; (800a274 <HAL_RCC_OscConfig+0x6c4>)
 800a19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a19c:	4a35      	ldr	r2, [pc, #212]	; (800a274 <HAL_RCC_OscConfig+0x6c4>)
 800a19e:	f023 0301 	bic.w	r3, r3, #1
 800a1a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a1a4:	4b33      	ldr	r3, [pc, #204]	; (800a274 <HAL_RCC_OscConfig+0x6c4>)
 800a1a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1a8:	4b34      	ldr	r3, [pc, #208]	; (800a27c <HAL_RCC_OscConfig+0x6cc>)
 800a1aa:	4013      	ands	r3, r2
 800a1ac:	687a      	ldr	r2, [r7, #4]
 800a1ae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a1b0:	00d2      	lsls	r2, r2, #3
 800a1b2:	4930      	ldr	r1, [pc, #192]	; (800a274 <HAL_RCC_OscConfig+0x6c4>)
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a1b8:	4b2e      	ldr	r3, [pc, #184]	; (800a274 <HAL_RCC_OscConfig+0x6c4>)
 800a1ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1bc:	f023 020c 	bic.w	r2, r3, #12
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c4:	492b      	ldr	r1, [pc, #172]	; (800a274 <HAL_RCC_OscConfig+0x6c4>)
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a1ca:	4b2a      	ldr	r3, [pc, #168]	; (800a274 <HAL_RCC_OscConfig+0x6c4>)
 800a1cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ce:	f023 0202 	bic.w	r2, r3, #2
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1d6:	4927      	ldr	r1, [pc, #156]	; (800a274 <HAL_RCC_OscConfig+0x6c4>)
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a1dc:	4b25      	ldr	r3, [pc, #148]	; (800a274 <HAL_RCC_OscConfig+0x6c4>)
 800a1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e0:	4a24      	ldr	r2, [pc, #144]	; (800a274 <HAL_RCC_OscConfig+0x6c4>)
 800a1e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a1e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1e8:	4b22      	ldr	r3, [pc, #136]	; (800a274 <HAL_RCC_OscConfig+0x6c4>)
 800a1ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ec:	4a21      	ldr	r2, [pc, #132]	; (800a274 <HAL_RCC_OscConfig+0x6c4>)
 800a1ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a1f4:	4b1f      	ldr	r3, [pc, #124]	; (800a274 <HAL_RCC_OscConfig+0x6c4>)
 800a1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1f8:	4a1e      	ldr	r2, [pc, #120]	; (800a274 <HAL_RCC_OscConfig+0x6c4>)
 800a1fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a1fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a200:	4b1c      	ldr	r3, [pc, #112]	; (800a274 <HAL_RCC_OscConfig+0x6c4>)
 800a202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a204:	4a1b      	ldr	r2, [pc, #108]	; (800a274 <HAL_RCC_OscConfig+0x6c4>)
 800a206:	f043 0301 	orr.w	r3, r3, #1
 800a20a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a20c:	4b19      	ldr	r3, [pc, #100]	; (800a274 <HAL_RCC_OscConfig+0x6c4>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a18      	ldr	r2, [pc, #96]	; (800a274 <HAL_RCC_OscConfig+0x6c4>)
 800a212:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a216:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a218:	f7f9 fdae 	bl	8003d78 <HAL_GetTick>
 800a21c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a21e:	e008      	b.n	800a232 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a220:	f7f9 fdaa 	bl	8003d78 <HAL_GetTick>
 800a224:	4602      	mov	r2, r0
 800a226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a228:	1ad3      	subs	r3, r2, r3
 800a22a:	2b02      	cmp	r3, #2
 800a22c:	d901      	bls.n	800a232 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800a22e:	2303      	movs	r3, #3
 800a230:	e090      	b.n	800a354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a232:	4b10      	ldr	r3, [pc, #64]	; (800a274 <HAL_RCC_OscConfig+0x6c4>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d0f0      	beq.n	800a220 <HAL_RCC_OscConfig+0x670>
 800a23e:	e088      	b.n	800a352 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a240:	4b0c      	ldr	r3, [pc, #48]	; (800a274 <HAL_RCC_OscConfig+0x6c4>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a0b      	ldr	r2, [pc, #44]	; (800a274 <HAL_RCC_OscConfig+0x6c4>)
 800a246:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a24a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a24c:	f7f9 fd94 	bl	8003d78 <HAL_GetTick>
 800a250:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a252:	e008      	b.n	800a266 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a254:	f7f9 fd90 	bl	8003d78 <HAL_GetTick>
 800a258:	4602      	mov	r2, r0
 800a25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a25c:	1ad3      	subs	r3, r2, r3
 800a25e:	2b02      	cmp	r3, #2
 800a260:	d901      	bls.n	800a266 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800a262:	2303      	movs	r3, #3
 800a264:	e076      	b.n	800a354 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a266:	4b03      	ldr	r3, [pc, #12]	; (800a274 <HAL_RCC_OscConfig+0x6c4>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d1f0      	bne.n	800a254 <HAL_RCC_OscConfig+0x6a4>
 800a272:	e06e      	b.n	800a352 <HAL_RCC_OscConfig+0x7a2>
 800a274:	58024400 	.word	0x58024400
 800a278:	fffffc0c 	.word	0xfffffc0c
 800a27c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a280:	4b36      	ldr	r3, [pc, #216]	; (800a35c <HAL_RCC_OscConfig+0x7ac>)
 800a282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a284:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a286:	4b35      	ldr	r3, [pc, #212]	; (800a35c <HAL_RCC_OscConfig+0x7ac>)
 800a288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a28a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a290:	2b01      	cmp	r3, #1
 800a292:	d031      	beq.n	800a2f8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	f003 0203 	and.w	r2, r3, #3
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d12a      	bne.n	800a2f8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	091b      	lsrs	r3, r3, #4
 800a2a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d122      	bne.n	800a2f8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2bc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d11a      	bne.n	800a2f8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	0a5b      	lsrs	r3, r3, #9
 800a2c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2ce:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d111      	bne.n	800a2f8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	0c1b      	lsrs	r3, r3, #16
 800a2d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	d108      	bne.n	800a2f8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	0e1b      	lsrs	r3, r3, #24
 800a2ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2f2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d001      	beq.n	800a2fc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	e02b      	b.n	800a354 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a2fc:	4b17      	ldr	r3, [pc, #92]	; (800a35c <HAL_RCC_OscConfig+0x7ac>)
 800a2fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a300:	08db      	lsrs	r3, r3, #3
 800a302:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a306:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a30c:	693a      	ldr	r2, [r7, #16]
 800a30e:	429a      	cmp	r2, r3
 800a310:	d01f      	beq.n	800a352 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a312:	4b12      	ldr	r3, [pc, #72]	; (800a35c <HAL_RCC_OscConfig+0x7ac>)
 800a314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a316:	4a11      	ldr	r2, [pc, #68]	; (800a35c <HAL_RCC_OscConfig+0x7ac>)
 800a318:	f023 0301 	bic.w	r3, r3, #1
 800a31c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a31e:	f7f9 fd2b 	bl	8003d78 <HAL_GetTick>
 800a322:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a324:	bf00      	nop
 800a326:	f7f9 fd27 	bl	8003d78 <HAL_GetTick>
 800a32a:	4602      	mov	r2, r0
 800a32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32e:	4293      	cmp	r3, r2
 800a330:	d0f9      	beq.n	800a326 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a332:	4b0a      	ldr	r3, [pc, #40]	; (800a35c <HAL_RCC_OscConfig+0x7ac>)
 800a334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a336:	4b0a      	ldr	r3, [pc, #40]	; (800a360 <HAL_RCC_OscConfig+0x7b0>)
 800a338:	4013      	ands	r3, r2
 800a33a:	687a      	ldr	r2, [r7, #4]
 800a33c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a33e:	00d2      	lsls	r2, r2, #3
 800a340:	4906      	ldr	r1, [pc, #24]	; (800a35c <HAL_RCC_OscConfig+0x7ac>)
 800a342:	4313      	orrs	r3, r2
 800a344:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a346:	4b05      	ldr	r3, [pc, #20]	; (800a35c <HAL_RCC_OscConfig+0x7ac>)
 800a348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a34a:	4a04      	ldr	r2, [pc, #16]	; (800a35c <HAL_RCC_OscConfig+0x7ac>)
 800a34c:	f043 0301 	orr.w	r3, r3, #1
 800a350:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a352:	2300      	movs	r3, #0
}
 800a354:	4618      	mov	r0, r3
 800a356:	3730      	adds	r7, #48	; 0x30
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}
 800a35c:	58024400 	.word	0x58024400
 800a360:	ffff0007 	.word	0xffff0007

0800a364 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b086      	sub	sp, #24
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d101      	bne.n	800a378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a374:	2301      	movs	r3, #1
 800a376:	e19c      	b.n	800a6b2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a378:	4b8a      	ldr	r3, [pc, #552]	; (800a5a4 <HAL_RCC_ClockConfig+0x240>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f003 030f 	and.w	r3, r3, #15
 800a380:	683a      	ldr	r2, [r7, #0]
 800a382:	429a      	cmp	r2, r3
 800a384:	d910      	bls.n	800a3a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a386:	4b87      	ldr	r3, [pc, #540]	; (800a5a4 <HAL_RCC_ClockConfig+0x240>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f023 020f 	bic.w	r2, r3, #15
 800a38e:	4985      	ldr	r1, [pc, #532]	; (800a5a4 <HAL_RCC_ClockConfig+0x240>)
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	4313      	orrs	r3, r2
 800a394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a396:	4b83      	ldr	r3, [pc, #524]	; (800a5a4 <HAL_RCC_ClockConfig+0x240>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f003 030f 	and.w	r3, r3, #15
 800a39e:	683a      	ldr	r2, [r7, #0]
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d001      	beq.n	800a3a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	e184      	b.n	800a6b2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f003 0304 	and.w	r3, r3, #4
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d010      	beq.n	800a3d6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	691a      	ldr	r2, [r3, #16]
 800a3b8:	4b7b      	ldr	r3, [pc, #492]	; (800a5a8 <HAL_RCC_ClockConfig+0x244>)
 800a3ba:	699b      	ldr	r3, [r3, #24]
 800a3bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d908      	bls.n	800a3d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a3c4:	4b78      	ldr	r3, [pc, #480]	; (800a5a8 <HAL_RCC_ClockConfig+0x244>)
 800a3c6:	699b      	ldr	r3, [r3, #24]
 800a3c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	691b      	ldr	r3, [r3, #16]
 800a3d0:	4975      	ldr	r1, [pc, #468]	; (800a5a8 <HAL_RCC_ClockConfig+0x244>)
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f003 0308 	and.w	r3, r3, #8
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d010      	beq.n	800a404 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	695a      	ldr	r2, [r3, #20]
 800a3e6:	4b70      	ldr	r3, [pc, #448]	; (800a5a8 <HAL_RCC_ClockConfig+0x244>)
 800a3e8:	69db      	ldr	r3, [r3, #28]
 800a3ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d908      	bls.n	800a404 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a3f2:	4b6d      	ldr	r3, [pc, #436]	; (800a5a8 <HAL_RCC_ClockConfig+0x244>)
 800a3f4:	69db      	ldr	r3, [r3, #28]
 800a3f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	695b      	ldr	r3, [r3, #20]
 800a3fe:	496a      	ldr	r1, [pc, #424]	; (800a5a8 <HAL_RCC_ClockConfig+0x244>)
 800a400:	4313      	orrs	r3, r2
 800a402:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f003 0310 	and.w	r3, r3, #16
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d010      	beq.n	800a432 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	699a      	ldr	r2, [r3, #24]
 800a414:	4b64      	ldr	r3, [pc, #400]	; (800a5a8 <HAL_RCC_ClockConfig+0x244>)
 800a416:	69db      	ldr	r3, [r3, #28]
 800a418:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a41c:	429a      	cmp	r2, r3
 800a41e:	d908      	bls.n	800a432 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a420:	4b61      	ldr	r3, [pc, #388]	; (800a5a8 <HAL_RCC_ClockConfig+0x244>)
 800a422:	69db      	ldr	r3, [r3, #28]
 800a424:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	699b      	ldr	r3, [r3, #24]
 800a42c:	495e      	ldr	r1, [pc, #376]	; (800a5a8 <HAL_RCC_ClockConfig+0x244>)
 800a42e:	4313      	orrs	r3, r2
 800a430:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f003 0320 	and.w	r3, r3, #32
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d010      	beq.n	800a460 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	69da      	ldr	r2, [r3, #28]
 800a442:	4b59      	ldr	r3, [pc, #356]	; (800a5a8 <HAL_RCC_ClockConfig+0x244>)
 800a444:	6a1b      	ldr	r3, [r3, #32]
 800a446:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d908      	bls.n	800a460 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a44e:	4b56      	ldr	r3, [pc, #344]	; (800a5a8 <HAL_RCC_ClockConfig+0x244>)
 800a450:	6a1b      	ldr	r3, [r3, #32]
 800a452:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	69db      	ldr	r3, [r3, #28]
 800a45a:	4953      	ldr	r1, [pc, #332]	; (800a5a8 <HAL_RCC_ClockConfig+0x244>)
 800a45c:	4313      	orrs	r3, r2
 800a45e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f003 0302 	and.w	r3, r3, #2
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d010      	beq.n	800a48e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	68da      	ldr	r2, [r3, #12]
 800a470:	4b4d      	ldr	r3, [pc, #308]	; (800a5a8 <HAL_RCC_ClockConfig+0x244>)
 800a472:	699b      	ldr	r3, [r3, #24]
 800a474:	f003 030f 	and.w	r3, r3, #15
 800a478:	429a      	cmp	r2, r3
 800a47a:	d908      	bls.n	800a48e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a47c:	4b4a      	ldr	r3, [pc, #296]	; (800a5a8 <HAL_RCC_ClockConfig+0x244>)
 800a47e:	699b      	ldr	r3, [r3, #24]
 800a480:	f023 020f 	bic.w	r2, r3, #15
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	68db      	ldr	r3, [r3, #12]
 800a488:	4947      	ldr	r1, [pc, #284]	; (800a5a8 <HAL_RCC_ClockConfig+0x244>)
 800a48a:	4313      	orrs	r3, r2
 800a48c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f003 0301 	and.w	r3, r3, #1
 800a496:	2b00      	cmp	r3, #0
 800a498:	d055      	beq.n	800a546 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a49a:	4b43      	ldr	r3, [pc, #268]	; (800a5a8 <HAL_RCC_ClockConfig+0x244>)
 800a49c:	699b      	ldr	r3, [r3, #24]
 800a49e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	689b      	ldr	r3, [r3, #8]
 800a4a6:	4940      	ldr	r1, [pc, #256]	; (800a5a8 <HAL_RCC_ClockConfig+0x244>)
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	2b02      	cmp	r3, #2
 800a4b2:	d107      	bne.n	800a4c4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a4b4:	4b3c      	ldr	r3, [pc, #240]	; (800a5a8 <HAL_RCC_ClockConfig+0x244>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d121      	bne.n	800a504 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	e0f6      	b.n	800a6b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	2b03      	cmp	r3, #3
 800a4ca:	d107      	bne.n	800a4dc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a4cc:	4b36      	ldr	r3, [pc, #216]	; (800a5a8 <HAL_RCC_ClockConfig+0x244>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d115      	bne.n	800a504 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	e0ea      	b.n	800a6b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d107      	bne.n	800a4f4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a4e4:	4b30      	ldr	r3, [pc, #192]	; (800a5a8 <HAL_RCC_ClockConfig+0x244>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d109      	bne.n	800a504 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	e0de      	b.n	800a6b2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a4f4:	4b2c      	ldr	r3, [pc, #176]	; (800a5a8 <HAL_RCC_ClockConfig+0x244>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f003 0304 	and.w	r3, r3, #4
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d101      	bne.n	800a504 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a500:	2301      	movs	r3, #1
 800a502:	e0d6      	b.n	800a6b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a504:	4b28      	ldr	r3, [pc, #160]	; (800a5a8 <HAL_RCC_ClockConfig+0x244>)
 800a506:	691b      	ldr	r3, [r3, #16]
 800a508:	f023 0207 	bic.w	r2, r3, #7
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	4925      	ldr	r1, [pc, #148]	; (800a5a8 <HAL_RCC_ClockConfig+0x244>)
 800a512:	4313      	orrs	r3, r2
 800a514:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a516:	f7f9 fc2f 	bl	8003d78 <HAL_GetTick>
 800a51a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a51c:	e00a      	b.n	800a534 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a51e:	f7f9 fc2b 	bl	8003d78 <HAL_GetTick>
 800a522:	4602      	mov	r2, r0
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	1ad3      	subs	r3, r2, r3
 800a528:	f241 3288 	movw	r2, #5000	; 0x1388
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d901      	bls.n	800a534 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a530:	2303      	movs	r3, #3
 800a532:	e0be      	b.n	800a6b2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a534:	4b1c      	ldr	r3, [pc, #112]	; (800a5a8 <HAL_RCC_ClockConfig+0x244>)
 800a536:	691b      	ldr	r3, [r3, #16]
 800a538:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	00db      	lsls	r3, r3, #3
 800a542:	429a      	cmp	r2, r3
 800a544:	d1eb      	bne.n	800a51e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f003 0302 	and.w	r3, r3, #2
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d010      	beq.n	800a574 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	68da      	ldr	r2, [r3, #12]
 800a556:	4b14      	ldr	r3, [pc, #80]	; (800a5a8 <HAL_RCC_ClockConfig+0x244>)
 800a558:	699b      	ldr	r3, [r3, #24]
 800a55a:	f003 030f 	and.w	r3, r3, #15
 800a55e:	429a      	cmp	r2, r3
 800a560:	d208      	bcs.n	800a574 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a562:	4b11      	ldr	r3, [pc, #68]	; (800a5a8 <HAL_RCC_ClockConfig+0x244>)
 800a564:	699b      	ldr	r3, [r3, #24]
 800a566:	f023 020f 	bic.w	r2, r3, #15
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	68db      	ldr	r3, [r3, #12]
 800a56e:	490e      	ldr	r1, [pc, #56]	; (800a5a8 <HAL_RCC_ClockConfig+0x244>)
 800a570:	4313      	orrs	r3, r2
 800a572:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a574:	4b0b      	ldr	r3, [pc, #44]	; (800a5a4 <HAL_RCC_ClockConfig+0x240>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f003 030f 	and.w	r3, r3, #15
 800a57c:	683a      	ldr	r2, [r7, #0]
 800a57e:	429a      	cmp	r2, r3
 800a580:	d214      	bcs.n	800a5ac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a582:	4b08      	ldr	r3, [pc, #32]	; (800a5a4 <HAL_RCC_ClockConfig+0x240>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f023 020f 	bic.w	r2, r3, #15
 800a58a:	4906      	ldr	r1, [pc, #24]	; (800a5a4 <HAL_RCC_ClockConfig+0x240>)
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	4313      	orrs	r3, r2
 800a590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a592:	4b04      	ldr	r3, [pc, #16]	; (800a5a4 <HAL_RCC_ClockConfig+0x240>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f003 030f 	and.w	r3, r3, #15
 800a59a:	683a      	ldr	r2, [r7, #0]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d005      	beq.n	800a5ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	e086      	b.n	800a6b2 <HAL_RCC_ClockConfig+0x34e>
 800a5a4:	52002000 	.word	0x52002000
 800a5a8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f003 0304 	and.w	r3, r3, #4
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d010      	beq.n	800a5da <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	691a      	ldr	r2, [r3, #16]
 800a5bc:	4b3f      	ldr	r3, [pc, #252]	; (800a6bc <HAL_RCC_ClockConfig+0x358>)
 800a5be:	699b      	ldr	r3, [r3, #24]
 800a5c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d208      	bcs.n	800a5da <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a5c8:	4b3c      	ldr	r3, [pc, #240]	; (800a6bc <HAL_RCC_ClockConfig+0x358>)
 800a5ca:	699b      	ldr	r3, [r3, #24]
 800a5cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	691b      	ldr	r3, [r3, #16]
 800a5d4:	4939      	ldr	r1, [pc, #228]	; (800a6bc <HAL_RCC_ClockConfig+0x358>)
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f003 0308 	and.w	r3, r3, #8
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d010      	beq.n	800a608 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	695a      	ldr	r2, [r3, #20]
 800a5ea:	4b34      	ldr	r3, [pc, #208]	; (800a6bc <HAL_RCC_ClockConfig+0x358>)
 800a5ec:	69db      	ldr	r3, [r3, #28]
 800a5ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d208      	bcs.n	800a608 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a5f6:	4b31      	ldr	r3, [pc, #196]	; (800a6bc <HAL_RCC_ClockConfig+0x358>)
 800a5f8:	69db      	ldr	r3, [r3, #28]
 800a5fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	695b      	ldr	r3, [r3, #20]
 800a602:	492e      	ldr	r1, [pc, #184]	; (800a6bc <HAL_RCC_ClockConfig+0x358>)
 800a604:	4313      	orrs	r3, r2
 800a606:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f003 0310 	and.w	r3, r3, #16
 800a610:	2b00      	cmp	r3, #0
 800a612:	d010      	beq.n	800a636 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	699a      	ldr	r2, [r3, #24]
 800a618:	4b28      	ldr	r3, [pc, #160]	; (800a6bc <HAL_RCC_ClockConfig+0x358>)
 800a61a:	69db      	ldr	r3, [r3, #28]
 800a61c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a620:	429a      	cmp	r2, r3
 800a622:	d208      	bcs.n	800a636 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a624:	4b25      	ldr	r3, [pc, #148]	; (800a6bc <HAL_RCC_ClockConfig+0x358>)
 800a626:	69db      	ldr	r3, [r3, #28]
 800a628:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	699b      	ldr	r3, [r3, #24]
 800a630:	4922      	ldr	r1, [pc, #136]	; (800a6bc <HAL_RCC_ClockConfig+0x358>)
 800a632:	4313      	orrs	r3, r2
 800a634:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f003 0320 	and.w	r3, r3, #32
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d010      	beq.n	800a664 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	69da      	ldr	r2, [r3, #28]
 800a646:	4b1d      	ldr	r3, [pc, #116]	; (800a6bc <HAL_RCC_ClockConfig+0x358>)
 800a648:	6a1b      	ldr	r3, [r3, #32]
 800a64a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a64e:	429a      	cmp	r2, r3
 800a650:	d208      	bcs.n	800a664 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a652:	4b1a      	ldr	r3, [pc, #104]	; (800a6bc <HAL_RCC_ClockConfig+0x358>)
 800a654:	6a1b      	ldr	r3, [r3, #32]
 800a656:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	69db      	ldr	r3, [r3, #28]
 800a65e:	4917      	ldr	r1, [pc, #92]	; (800a6bc <HAL_RCC_ClockConfig+0x358>)
 800a660:	4313      	orrs	r3, r2
 800a662:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a664:	f000 f89e 	bl	800a7a4 <HAL_RCC_GetSysClockFreq>
 800a668:	4602      	mov	r2, r0
 800a66a:	4b14      	ldr	r3, [pc, #80]	; (800a6bc <HAL_RCC_ClockConfig+0x358>)
 800a66c:	699b      	ldr	r3, [r3, #24]
 800a66e:	0a1b      	lsrs	r3, r3, #8
 800a670:	f003 030f 	and.w	r3, r3, #15
 800a674:	4912      	ldr	r1, [pc, #72]	; (800a6c0 <HAL_RCC_ClockConfig+0x35c>)
 800a676:	5ccb      	ldrb	r3, [r1, r3]
 800a678:	f003 031f 	and.w	r3, r3, #31
 800a67c:	fa22 f303 	lsr.w	r3, r2, r3
 800a680:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a682:	4b0e      	ldr	r3, [pc, #56]	; (800a6bc <HAL_RCC_ClockConfig+0x358>)
 800a684:	699b      	ldr	r3, [r3, #24]
 800a686:	f003 030f 	and.w	r3, r3, #15
 800a68a:	4a0d      	ldr	r2, [pc, #52]	; (800a6c0 <HAL_RCC_ClockConfig+0x35c>)
 800a68c:	5cd3      	ldrb	r3, [r2, r3]
 800a68e:	f003 031f 	and.w	r3, r3, #31
 800a692:	693a      	ldr	r2, [r7, #16]
 800a694:	fa22 f303 	lsr.w	r3, r2, r3
 800a698:	4a0a      	ldr	r2, [pc, #40]	; (800a6c4 <HAL_RCC_ClockConfig+0x360>)
 800a69a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a69c:	4a0a      	ldr	r2, [pc, #40]	; (800a6c8 <HAL_RCC_ClockConfig+0x364>)
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a6a2:	4b0a      	ldr	r3, [pc, #40]	; (800a6cc <HAL_RCC_ClockConfig+0x368>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7f9 fb1c 	bl	8003ce4 <HAL_InitTick>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a6b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3718      	adds	r7, #24
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}
 800a6ba:	bf00      	nop
 800a6bc:	58024400 	.word	0x58024400
 800a6c0:	08018c8c 	.word	0x08018c8c
 800a6c4:	24000004 	.word	0x24000004
 800a6c8:	24000000 	.word	0x24000000
 800a6cc:	24000008 	.word	0x24000008

0800a6d0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b08c      	sub	sp, #48	; 0x30
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	60f8      	str	r0, [r7, #12]
 800a6d8:	60b9      	str	r1, [r7, #8]
 800a6da:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d12a      	bne.n	800a738 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800a6e2:	4b2d      	ldr	r3, [pc, #180]	; (800a798 <HAL_RCC_MCOConfig+0xc8>)
 800a6e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a6e8:	4a2b      	ldr	r2, [pc, #172]	; (800a798 <HAL_RCC_MCOConfig+0xc8>)
 800a6ea:	f043 0301 	orr.w	r3, r3, #1
 800a6ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a6f2:	4b29      	ldr	r3, [pc, #164]	; (800a798 <HAL_RCC_MCOConfig+0xc8>)
 800a6f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a6f8:	f003 0301 	and.w	r3, r3, #1
 800a6fc:	61bb      	str	r3, [r7, #24]
 800a6fe:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a700:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a706:	2302      	movs	r3, #2
 800a708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a70a:	2303      	movs	r3, #3
 800a70c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a70e:	2300      	movs	r3, #0
 800a710:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a712:	2300      	movs	r3, #0
 800a714:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a716:	f107 031c 	add.w	r3, r7, #28
 800a71a:	4619      	mov	r1, r3
 800a71c:	481f      	ldr	r0, [pc, #124]	; (800a79c <HAL_RCC_MCOConfig+0xcc>)
 800a71e:	f7fd fc29 	bl	8007f74 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a722:	4b1d      	ldr	r3, [pc, #116]	; (800a798 <HAL_RCC_MCOConfig+0xc8>)
 800a724:	691b      	ldr	r3, [r3, #16]
 800a726:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800a72a:	68b9      	ldr	r1, [r7, #8]
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	430b      	orrs	r3, r1
 800a730:	4919      	ldr	r1, [pc, #100]	; (800a798 <HAL_RCC_MCOConfig+0xc8>)
 800a732:	4313      	orrs	r3, r2
 800a734:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800a736:	e02a      	b.n	800a78e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800a738:	4b17      	ldr	r3, [pc, #92]	; (800a798 <HAL_RCC_MCOConfig+0xc8>)
 800a73a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a73e:	4a16      	ldr	r2, [pc, #88]	; (800a798 <HAL_RCC_MCOConfig+0xc8>)
 800a740:	f043 0304 	orr.w	r3, r3, #4
 800a744:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a748:	4b13      	ldr	r3, [pc, #76]	; (800a798 <HAL_RCC_MCOConfig+0xc8>)
 800a74a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a74e:	f003 0304 	and.w	r3, r3, #4
 800a752:	617b      	str	r3, [r7, #20]
 800a754:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a756:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a75a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a75c:	2302      	movs	r3, #2
 800a75e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a760:	2303      	movs	r3, #3
 800a762:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a764:	2300      	movs	r3, #0
 800a766:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a768:	2300      	movs	r3, #0
 800a76a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a76c:	f107 031c 	add.w	r3, r7, #28
 800a770:	4619      	mov	r1, r3
 800a772:	480b      	ldr	r0, [pc, #44]	; (800a7a0 <HAL_RCC_MCOConfig+0xd0>)
 800a774:	f7fd fbfe 	bl	8007f74 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a778:	4b07      	ldr	r3, [pc, #28]	; (800a798 <HAL_RCC_MCOConfig+0xc8>)
 800a77a:	691b      	ldr	r3, [r3, #16]
 800a77c:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	01d9      	lsls	r1, r3, #7
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	430b      	orrs	r3, r1
 800a788:	4903      	ldr	r1, [pc, #12]	; (800a798 <HAL_RCC_MCOConfig+0xc8>)
 800a78a:	4313      	orrs	r3, r2
 800a78c:	610b      	str	r3, [r1, #16]
}
 800a78e:	bf00      	nop
 800a790:	3730      	adds	r7, #48	; 0x30
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
 800a796:	bf00      	nop
 800a798:	58024400 	.word	0x58024400
 800a79c:	58020000 	.word	0x58020000
 800a7a0:	58020800 	.word	0x58020800

0800a7a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b089      	sub	sp, #36	; 0x24
 800a7a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a7aa:	4bb3      	ldr	r3, [pc, #716]	; (800aa78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7ac:	691b      	ldr	r3, [r3, #16]
 800a7ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a7b2:	2b18      	cmp	r3, #24
 800a7b4:	f200 8155 	bhi.w	800aa62 <HAL_RCC_GetSysClockFreq+0x2be>
 800a7b8:	a201      	add	r2, pc, #4	; (adr r2, 800a7c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a7ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7be:	bf00      	nop
 800a7c0:	0800a825 	.word	0x0800a825
 800a7c4:	0800aa63 	.word	0x0800aa63
 800a7c8:	0800aa63 	.word	0x0800aa63
 800a7cc:	0800aa63 	.word	0x0800aa63
 800a7d0:	0800aa63 	.word	0x0800aa63
 800a7d4:	0800aa63 	.word	0x0800aa63
 800a7d8:	0800aa63 	.word	0x0800aa63
 800a7dc:	0800aa63 	.word	0x0800aa63
 800a7e0:	0800a84b 	.word	0x0800a84b
 800a7e4:	0800aa63 	.word	0x0800aa63
 800a7e8:	0800aa63 	.word	0x0800aa63
 800a7ec:	0800aa63 	.word	0x0800aa63
 800a7f0:	0800aa63 	.word	0x0800aa63
 800a7f4:	0800aa63 	.word	0x0800aa63
 800a7f8:	0800aa63 	.word	0x0800aa63
 800a7fc:	0800aa63 	.word	0x0800aa63
 800a800:	0800a851 	.word	0x0800a851
 800a804:	0800aa63 	.word	0x0800aa63
 800a808:	0800aa63 	.word	0x0800aa63
 800a80c:	0800aa63 	.word	0x0800aa63
 800a810:	0800aa63 	.word	0x0800aa63
 800a814:	0800aa63 	.word	0x0800aa63
 800a818:	0800aa63 	.word	0x0800aa63
 800a81c:	0800aa63 	.word	0x0800aa63
 800a820:	0800a857 	.word	0x0800a857
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a824:	4b94      	ldr	r3, [pc, #592]	; (800aa78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f003 0320 	and.w	r3, r3, #32
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d009      	beq.n	800a844 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a830:	4b91      	ldr	r3, [pc, #580]	; (800aa78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	08db      	lsrs	r3, r3, #3
 800a836:	f003 0303 	and.w	r3, r3, #3
 800a83a:	4a90      	ldr	r2, [pc, #576]	; (800aa7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a83c:	fa22 f303 	lsr.w	r3, r2, r3
 800a840:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a842:	e111      	b.n	800aa68 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a844:	4b8d      	ldr	r3, [pc, #564]	; (800aa7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a846:	61bb      	str	r3, [r7, #24]
      break;
 800a848:	e10e      	b.n	800aa68 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a84a:	4b8d      	ldr	r3, [pc, #564]	; (800aa80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a84c:	61bb      	str	r3, [r7, #24]
      break;
 800a84e:	e10b      	b.n	800aa68 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a850:	4b8c      	ldr	r3, [pc, #560]	; (800aa84 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a852:	61bb      	str	r3, [r7, #24]
      break;
 800a854:	e108      	b.n	800aa68 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a856:	4b88      	ldr	r3, [pc, #544]	; (800aa78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a85a:	f003 0303 	and.w	r3, r3, #3
 800a85e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a860:	4b85      	ldr	r3, [pc, #532]	; (800aa78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a864:	091b      	lsrs	r3, r3, #4
 800a866:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a86a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a86c:	4b82      	ldr	r3, [pc, #520]	; (800aa78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a86e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a870:	f003 0301 	and.w	r3, r3, #1
 800a874:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a876:	4b80      	ldr	r3, [pc, #512]	; (800aa78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a87a:	08db      	lsrs	r3, r3, #3
 800a87c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a880:	68fa      	ldr	r2, [r7, #12]
 800a882:	fb02 f303 	mul.w	r3, r2, r3
 800a886:	ee07 3a90 	vmov	s15, r3
 800a88a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a88e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	2b00      	cmp	r3, #0
 800a896:	f000 80e1 	beq.w	800aa5c <HAL_RCC_GetSysClockFreq+0x2b8>
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	2b02      	cmp	r3, #2
 800a89e:	f000 8083 	beq.w	800a9a8 <HAL_RCC_GetSysClockFreq+0x204>
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	2b02      	cmp	r3, #2
 800a8a6:	f200 80a1 	bhi.w	800a9ec <HAL_RCC_GetSysClockFreq+0x248>
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d003      	beq.n	800a8b8 <HAL_RCC_GetSysClockFreq+0x114>
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	d056      	beq.n	800a964 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a8b6:	e099      	b.n	800a9ec <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8b8:	4b6f      	ldr	r3, [pc, #444]	; (800aa78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f003 0320 	and.w	r3, r3, #32
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d02d      	beq.n	800a920 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a8c4:	4b6c      	ldr	r3, [pc, #432]	; (800aa78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	08db      	lsrs	r3, r3, #3
 800a8ca:	f003 0303 	and.w	r3, r3, #3
 800a8ce:	4a6b      	ldr	r2, [pc, #428]	; (800aa7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a8d0:	fa22 f303 	lsr.w	r3, r2, r3
 800a8d4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	ee07 3a90 	vmov	s15, r3
 800a8dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	ee07 3a90 	vmov	s15, r3
 800a8e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8ee:	4b62      	ldr	r3, [pc, #392]	; (800aa78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8f6:	ee07 3a90 	vmov	s15, r3
 800a8fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8fe:	ed97 6a02 	vldr	s12, [r7, #8]
 800a902:	eddf 5a61 	vldr	s11, [pc, #388]	; 800aa88 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a90a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a90e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a91a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a91e:	e087      	b.n	800aa30 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	ee07 3a90 	vmov	s15, r3
 800a926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a92a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800aa8c <HAL_RCC_GetSysClockFreq+0x2e8>
 800a92e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a932:	4b51      	ldr	r3, [pc, #324]	; (800aa78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a93a:	ee07 3a90 	vmov	s15, r3
 800a93e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a942:	ed97 6a02 	vldr	s12, [r7, #8]
 800a946:	eddf 5a50 	vldr	s11, [pc, #320]	; 800aa88 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a94a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a94e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a95a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a95e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a962:	e065      	b.n	800aa30 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	ee07 3a90 	vmov	s15, r3
 800a96a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a96e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800aa90 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a976:	4b40      	ldr	r3, [pc, #256]	; (800aa78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a97a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a97e:	ee07 3a90 	vmov	s15, r3
 800a982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a986:	ed97 6a02 	vldr	s12, [r7, #8]
 800a98a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800aa88 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a98e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a99a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a99e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a9a6:	e043      	b.n	800aa30 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	ee07 3a90 	vmov	s15, r3
 800a9ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9b2:	eddf 6a38 	vldr	s13, [pc, #224]	; 800aa94 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a9b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9ba:	4b2f      	ldr	r3, [pc, #188]	; (800aa78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9c2:	ee07 3a90 	vmov	s15, r3
 800a9c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9ca:	ed97 6a02 	vldr	s12, [r7, #8]
 800a9ce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800aa88 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a9d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a9ea:	e021      	b.n	800aa30 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	ee07 3a90 	vmov	s15, r3
 800a9f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9f6:	eddf 6a26 	vldr	s13, [pc, #152]	; 800aa90 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a9fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9fe:	4b1e      	ldr	r3, [pc, #120]	; (800aa78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa06:	ee07 3a90 	vmov	s15, r3
 800aa0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa0e:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa12:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800aa88 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aa2e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800aa30:	4b11      	ldr	r3, [pc, #68]	; (800aa78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa34:	0a5b      	lsrs	r3, r3, #9
 800aa36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa3a:	3301      	adds	r3, #1
 800aa3c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	ee07 3a90 	vmov	s15, r3
 800aa44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800aa48:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa54:	ee17 3a90 	vmov	r3, s15
 800aa58:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800aa5a:	e005      	b.n	800aa68 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	61bb      	str	r3, [r7, #24]
      break;
 800aa60:	e002      	b.n	800aa68 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800aa62:	4b07      	ldr	r3, [pc, #28]	; (800aa80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800aa64:	61bb      	str	r3, [r7, #24]
      break;
 800aa66:	bf00      	nop
  }

  return sysclockfreq;
 800aa68:	69bb      	ldr	r3, [r7, #24]
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3724      	adds	r7, #36	; 0x24
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa74:	4770      	bx	lr
 800aa76:	bf00      	nop
 800aa78:	58024400 	.word	0x58024400
 800aa7c:	03d09000 	.word	0x03d09000
 800aa80:	003d0900 	.word	0x003d0900
 800aa84:	02faf080 	.word	0x02faf080
 800aa88:	46000000 	.word	0x46000000
 800aa8c:	4c742400 	.word	0x4c742400
 800aa90:	4a742400 	.word	0x4a742400
 800aa94:	4c3ebc20 	.word	0x4c3ebc20

0800aa98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b082      	sub	sp, #8
 800aa9c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800aa9e:	f7ff fe81 	bl	800a7a4 <HAL_RCC_GetSysClockFreq>
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	4b10      	ldr	r3, [pc, #64]	; (800aae8 <HAL_RCC_GetHCLKFreq+0x50>)
 800aaa6:	699b      	ldr	r3, [r3, #24]
 800aaa8:	0a1b      	lsrs	r3, r3, #8
 800aaaa:	f003 030f 	and.w	r3, r3, #15
 800aaae:	490f      	ldr	r1, [pc, #60]	; (800aaec <HAL_RCC_GetHCLKFreq+0x54>)
 800aab0:	5ccb      	ldrb	r3, [r1, r3]
 800aab2:	f003 031f 	and.w	r3, r3, #31
 800aab6:	fa22 f303 	lsr.w	r3, r2, r3
 800aaba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aabc:	4b0a      	ldr	r3, [pc, #40]	; (800aae8 <HAL_RCC_GetHCLKFreq+0x50>)
 800aabe:	699b      	ldr	r3, [r3, #24]
 800aac0:	f003 030f 	and.w	r3, r3, #15
 800aac4:	4a09      	ldr	r2, [pc, #36]	; (800aaec <HAL_RCC_GetHCLKFreq+0x54>)
 800aac6:	5cd3      	ldrb	r3, [r2, r3]
 800aac8:	f003 031f 	and.w	r3, r3, #31
 800aacc:	687a      	ldr	r2, [r7, #4]
 800aace:	fa22 f303 	lsr.w	r3, r2, r3
 800aad2:	4a07      	ldr	r2, [pc, #28]	; (800aaf0 <HAL_RCC_GetHCLKFreq+0x58>)
 800aad4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800aad6:	4a07      	ldr	r2, [pc, #28]	; (800aaf4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800aadc:	4b04      	ldr	r3, [pc, #16]	; (800aaf0 <HAL_RCC_GetHCLKFreq+0x58>)
 800aade:	681b      	ldr	r3, [r3, #0]
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3708      	adds	r7, #8
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}
 800aae8:	58024400 	.word	0x58024400
 800aaec:	08018c8c 	.word	0x08018c8c
 800aaf0:	24000004 	.word	0x24000004
 800aaf4:	24000000 	.word	0x24000000

0800aaf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800aafc:	f7ff ffcc 	bl	800aa98 <HAL_RCC_GetHCLKFreq>
 800ab00:	4602      	mov	r2, r0
 800ab02:	4b06      	ldr	r3, [pc, #24]	; (800ab1c <HAL_RCC_GetPCLK1Freq+0x24>)
 800ab04:	69db      	ldr	r3, [r3, #28]
 800ab06:	091b      	lsrs	r3, r3, #4
 800ab08:	f003 0307 	and.w	r3, r3, #7
 800ab0c:	4904      	ldr	r1, [pc, #16]	; (800ab20 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ab0e:	5ccb      	ldrb	r3, [r1, r3]
 800ab10:	f003 031f 	and.w	r3, r3, #31
 800ab14:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	bd80      	pop	{r7, pc}
 800ab1c:	58024400 	.word	0x58024400
 800ab20:	08018c8c 	.word	0x08018c8c

0800ab24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ab28:	f7ff ffb6 	bl	800aa98 <HAL_RCC_GetHCLKFreq>
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	4b06      	ldr	r3, [pc, #24]	; (800ab48 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ab30:	69db      	ldr	r3, [r3, #28]
 800ab32:	0a1b      	lsrs	r3, r3, #8
 800ab34:	f003 0307 	and.w	r3, r3, #7
 800ab38:	4904      	ldr	r1, [pc, #16]	; (800ab4c <HAL_RCC_GetPCLK2Freq+0x28>)
 800ab3a:	5ccb      	ldrb	r3, [r1, r3]
 800ab3c:	f003 031f 	and.w	r3, r3, #31
 800ab40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	bd80      	pop	{r7, pc}
 800ab48:	58024400 	.word	0x58024400
 800ab4c:	08018c8c 	.word	0x08018c8c

0800ab50 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ab50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ab54:	b0c6      	sub	sp, #280	; 0x118
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ab62:	2300      	movs	r3, #0
 800ab64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ab68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab70:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800ab74:	2500      	movs	r5, #0
 800ab76:	ea54 0305 	orrs.w	r3, r4, r5
 800ab7a:	d049      	beq.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800ab7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab82:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ab86:	d02f      	beq.n	800abe8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800ab88:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ab8c:	d828      	bhi.n	800abe0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ab8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab92:	d01a      	beq.n	800abca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800ab94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab98:	d822      	bhi.n	800abe0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d003      	beq.n	800aba6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800ab9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aba2:	d007      	beq.n	800abb4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800aba4:	e01c      	b.n	800abe0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aba6:	4bab      	ldr	r3, [pc, #684]	; (800ae54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abaa:	4aaa      	ldr	r2, [pc, #680]	; (800ae54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800abac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abb0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800abb2:	e01a      	b.n	800abea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800abb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abb8:	3308      	adds	r3, #8
 800abba:	2102      	movs	r1, #2
 800abbc:	4618      	mov	r0, r3
 800abbe:	f002 fa49 	bl	800d054 <RCCEx_PLL2_Config>
 800abc2:	4603      	mov	r3, r0
 800abc4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800abc8:	e00f      	b.n	800abea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800abca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abce:	3328      	adds	r3, #40	; 0x28
 800abd0:	2102      	movs	r1, #2
 800abd2:	4618      	mov	r0, r3
 800abd4:	f002 faf0 	bl	800d1b8 <RCCEx_PLL3_Config>
 800abd8:	4603      	mov	r3, r0
 800abda:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800abde:	e004      	b.n	800abea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800abe0:	2301      	movs	r3, #1
 800abe2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800abe6:	e000      	b.n	800abea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800abe8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d10a      	bne.n	800ac08 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800abf2:	4b98      	ldr	r3, [pc, #608]	; (800ae54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800abf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abf6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800abfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac00:	4a94      	ldr	r2, [pc, #592]	; (800ae54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ac02:	430b      	orrs	r3, r1
 800ac04:	6513      	str	r3, [r2, #80]	; 0x50
 800ac06:	e003      	b.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac0c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ac10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac18:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800ac1c:	f04f 0900 	mov.w	r9, #0
 800ac20:	ea58 0309 	orrs.w	r3, r8, r9
 800ac24:	d047      	beq.n	800acb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ac26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac2c:	2b04      	cmp	r3, #4
 800ac2e:	d82a      	bhi.n	800ac86 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ac30:	a201      	add	r2, pc, #4	; (adr r2, 800ac38 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ac32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac36:	bf00      	nop
 800ac38:	0800ac4d 	.word	0x0800ac4d
 800ac3c:	0800ac5b 	.word	0x0800ac5b
 800ac40:	0800ac71 	.word	0x0800ac71
 800ac44:	0800ac8f 	.word	0x0800ac8f
 800ac48:	0800ac8f 	.word	0x0800ac8f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac4c:	4b81      	ldr	r3, [pc, #516]	; (800ae54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ac4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac50:	4a80      	ldr	r2, [pc, #512]	; (800ae54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ac52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ac58:	e01a      	b.n	800ac90 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac5e:	3308      	adds	r3, #8
 800ac60:	2100      	movs	r1, #0
 800ac62:	4618      	mov	r0, r3
 800ac64:	f002 f9f6 	bl	800d054 <RCCEx_PLL2_Config>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ac6e:	e00f      	b.n	800ac90 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ac70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac74:	3328      	adds	r3, #40	; 0x28
 800ac76:	2100      	movs	r1, #0
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f002 fa9d 	bl	800d1b8 <RCCEx_PLL3_Config>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ac84:	e004      	b.n	800ac90 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac86:	2301      	movs	r3, #1
 800ac88:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ac8c:	e000      	b.n	800ac90 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800ac8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d10a      	bne.n	800acae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ac98:	4b6e      	ldr	r3, [pc, #440]	; (800ae54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ac9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac9c:	f023 0107 	bic.w	r1, r3, #7
 800aca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aca6:	4a6b      	ldr	r2, [pc, #428]	; (800ae54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aca8:	430b      	orrs	r3, r1
 800acaa:	6513      	str	r3, [r2, #80]	; 0x50
 800acac:	e003      	b.n	800acb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800acb2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800acb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acbe:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800acc2:	f04f 0b00 	mov.w	fp, #0
 800acc6:	ea5a 030b 	orrs.w	r3, sl, fp
 800acca:	d05b      	beq.n	800ad84 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800accc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800acd4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800acd8:	d03b      	beq.n	800ad52 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800acda:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800acde:	d834      	bhi.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ace0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ace4:	d037      	beq.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800ace6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800acea:	d82e      	bhi.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800acec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800acf0:	d033      	beq.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800acf2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800acf6:	d828      	bhi.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800acf8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800acfc:	d01a      	beq.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800acfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad02:	d822      	bhi.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d003      	beq.n	800ad10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800ad08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad0c:	d007      	beq.n	800ad1e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800ad0e:	e01c      	b.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad10:	4b50      	ldr	r3, [pc, #320]	; (800ae54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ad12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad14:	4a4f      	ldr	r2, [pc, #316]	; (800ae54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ad16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ad1c:	e01e      	b.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ad1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad22:	3308      	adds	r3, #8
 800ad24:	2100      	movs	r1, #0
 800ad26:	4618      	mov	r0, r3
 800ad28:	f002 f994 	bl	800d054 <RCCEx_PLL2_Config>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ad32:	e013      	b.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ad34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad38:	3328      	adds	r3, #40	; 0x28
 800ad3a:	2100      	movs	r1, #0
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f002 fa3b 	bl	800d1b8 <RCCEx_PLL3_Config>
 800ad42:	4603      	mov	r3, r0
 800ad44:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ad48:	e008      	b.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ad50:	e004      	b.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ad52:	bf00      	nop
 800ad54:	e002      	b.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ad56:	bf00      	nop
 800ad58:	e000      	b.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ad5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d10b      	bne.n	800ad7c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ad64:	4b3b      	ldr	r3, [pc, #236]	; (800ae54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ad66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad68:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800ad6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ad74:	4a37      	ldr	r2, [pc, #220]	; (800ae54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ad76:	430b      	orrs	r3, r1
 800ad78:	6593      	str	r3, [r2, #88]	; 0x58
 800ad7a:	e003      	b.n	800ad84 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad80:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ad84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad8c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800ad90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ad94:	2300      	movs	r3, #0
 800ad96:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ad9a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800ad9e:	460b      	mov	r3, r1
 800ada0:	4313      	orrs	r3, r2
 800ada2:	d05d      	beq.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800ada4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ada8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800adac:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800adb0:	d03b      	beq.n	800ae2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800adb2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800adb6:	d834      	bhi.n	800ae22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800adb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800adbc:	d037      	beq.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800adbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800adc2:	d82e      	bhi.n	800ae22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800adc4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800adc8:	d033      	beq.n	800ae32 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800adca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800adce:	d828      	bhi.n	800ae22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800add0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800add4:	d01a      	beq.n	800ae0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800add6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800adda:	d822      	bhi.n	800ae22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800addc:	2b00      	cmp	r3, #0
 800adde:	d003      	beq.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800ade0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ade4:	d007      	beq.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800ade6:	e01c      	b.n	800ae22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ade8:	4b1a      	ldr	r3, [pc, #104]	; (800ae54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800adea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adec:	4a19      	ldr	r2, [pc, #100]	; (800ae54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800adee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800adf2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800adf4:	e01e      	b.n	800ae34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800adf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adfa:	3308      	adds	r3, #8
 800adfc:	2100      	movs	r1, #0
 800adfe:	4618      	mov	r0, r3
 800ae00:	f002 f928 	bl	800d054 <RCCEx_PLL2_Config>
 800ae04:	4603      	mov	r3, r0
 800ae06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ae0a:	e013      	b.n	800ae34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ae0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae10:	3328      	adds	r3, #40	; 0x28
 800ae12:	2100      	movs	r1, #0
 800ae14:	4618      	mov	r0, r3
 800ae16:	f002 f9cf 	bl	800d1b8 <RCCEx_PLL3_Config>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ae20:	e008      	b.n	800ae34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ae22:	2301      	movs	r3, #1
 800ae24:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ae28:	e004      	b.n	800ae34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ae2a:	bf00      	nop
 800ae2c:	e002      	b.n	800ae34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ae2e:	bf00      	nop
 800ae30:	e000      	b.n	800ae34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ae32:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d10d      	bne.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ae3c:	4b05      	ldr	r3, [pc, #20]	; (800ae54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ae3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae40:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800ae44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae48:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ae4c:	4a01      	ldr	r2, [pc, #4]	; (800ae54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ae4e:	430b      	orrs	r3, r1
 800ae50:	6593      	str	r3, [r2, #88]	; 0x58
 800ae52:	e005      	b.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800ae54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae5c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800ae60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae68:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800ae6c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ae70:	2300      	movs	r3, #0
 800ae72:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ae76:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800ae7a:	460b      	mov	r3, r1
 800ae7c:	4313      	orrs	r3, r2
 800ae7e:	d03a      	beq.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800ae80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae86:	2b30      	cmp	r3, #48	; 0x30
 800ae88:	d01f      	beq.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800ae8a:	2b30      	cmp	r3, #48	; 0x30
 800ae8c:	d819      	bhi.n	800aec2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800ae8e:	2b20      	cmp	r3, #32
 800ae90:	d00c      	beq.n	800aeac <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800ae92:	2b20      	cmp	r3, #32
 800ae94:	d815      	bhi.n	800aec2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d019      	beq.n	800aece <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800ae9a:	2b10      	cmp	r3, #16
 800ae9c:	d111      	bne.n	800aec2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae9e:	4baa      	ldr	r3, [pc, #680]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea2:	4aa9      	ldr	r2, [pc, #676]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aea8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800aeaa:	e011      	b.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aeac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeb0:	3308      	adds	r3, #8
 800aeb2:	2102      	movs	r1, #2
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f002 f8cd 	bl	800d054 <RCCEx_PLL2_Config>
 800aeba:	4603      	mov	r3, r0
 800aebc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800aec0:	e006      	b.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800aec2:	2301      	movs	r3, #1
 800aec4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aec8:	e002      	b.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800aeca:	bf00      	nop
 800aecc:	e000      	b.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800aece:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aed0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d10a      	bne.n	800aeee <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800aed8:	4b9b      	ldr	r3, [pc, #620]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aeda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aedc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800aee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aee6:	4a98      	ldr	r2, [pc, #608]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aee8:	430b      	orrs	r3, r1
 800aeea:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aeec:	e003      	b.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aef2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800aef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aefa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefe:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800af02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800af06:	2300      	movs	r3, #0
 800af08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800af0c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800af10:	460b      	mov	r3, r1
 800af12:	4313      	orrs	r3, r2
 800af14:	d051      	beq.n	800afba <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800af16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af20:	d035      	beq.n	800af8e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800af22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af26:	d82e      	bhi.n	800af86 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800af28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800af2c:	d031      	beq.n	800af92 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800af2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800af32:	d828      	bhi.n	800af86 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800af34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af38:	d01a      	beq.n	800af70 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800af3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af3e:	d822      	bhi.n	800af86 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800af40:	2b00      	cmp	r3, #0
 800af42:	d003      	beq.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800af44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af48:	d007      	beq.n	800af5a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800af4a:	e01c      	b.n	800af86 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af4c:	4b7e      	ldr	r3, [pc, #504]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800af4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af50:	4a7d      	ldr	r2, [pc, #500]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800af52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800af58:	e01c      	b.n	800af94 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af5e:	3308      	adds	r3, #8
 800af60:	2100      	movs	r1, #0
 800af62:	4618      	mov	r0, r3
 800af64:	f002 f876 	bl	800d054 <RCCEx_PLL2_Config>
 800af68:	4603      	mov	r3, r0
 800af6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800af6e:	e011      	b.n	800af94 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af74:	3328      	adds	r3, #40	; 0x28
 800af76:	2100      	movs	r1, #0
 800af78:	4618      	mov	r0, r3
 800af7a:	f002 f91d 	bl	800d1b8 <RCCEx_PLL3_Config>
 800af7e:	4603      	mov	r3, r0
 800af80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800af84:	e006      	b.n	800af94 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af86:	2301      	movs	r3, #1
 800af88:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800af8c:	e002      	b.n	800af94 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800af8e:	bf00      	nop
 800af90:	e000      	b.n	800af94 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800af92:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d10a      	bne.n	800afb2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800af9c:	4b6a      	ldr	r3, [pc, #424]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800af9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afa0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800afa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800afaa:	4a67      	ldr	r2, [pc, #412]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800afac:	430b      	orrs	r3, r1
 800afae:	6513      	str	r3, [r2, #80]	; 0x50
 800afb0:	e003      	b.n	800afba <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afb2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800afb6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800afba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800afc6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800afca:	2300      	movs	r3, #0
 800afcc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800afd0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800afd4:	460b      	mov	r3, r1
 800afd6:	4313      	orrs	r3, r2
 800afd8:	d053      	beq.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800afda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800afe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800afe4:	d033      	beq.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800afe6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800afea:	d82c      	bhi.n	800b046 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800afec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aff0:	d02f      	beq.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800aff2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aff6:	d826      	bhi.n	800b046 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800aff8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800affc:	d02b      	beq.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800affe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b002:	d820      	bhi.n	800b046 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b004:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b008:	d012      	beq.n	800b030 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800b00a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b00e:	d81a      	bhi.n	800b046 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b010:	2b00      	cmp	r3, #0
 800b012:	d022      	beq.n	800b05a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800b014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b018:	d115      	bne.n	800b046 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b01a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b01e:	3308      	adds	r3, #8
 800b020:	2101      	movs	r1, #1
 800b022:	4618      	mov	r0, r3
 800b024:	f002 f816 	bl	800d054 <RCCEx_PLL2_Config>
 800b028:	4603      	mov	r3, r0
 800b02a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b02e:	e015      	b.n	800b05c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b034:	3328      	adds	r3, #40	; 0x28
 800b036:	2101      	movs	r1, #1
 800b038:	4618      	mov	r0, r3
 800b03a:	f002 f8bd 	bl	800d1b8 <RCCEx_PLL3_Config>
 800b03e:	4603      	mov	r3, r0
 800b040:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b044:	e00a      	b.n	800b05c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b046:	2301      	movs	r3, #1
 800b048:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b04c:	e006      	b.n	800b05c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b04e:	bf00      	nop
 800b050:	e004      	b.n	800b05c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b052:	bf00      	nop
 800b054:	e002      	b.n	800b05c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b056:	bf00      	nop
 800b058:	e000      	b.n	800b05c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b05a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b05c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b060:	2b00      	cmp	r3, #0
 800b062:	d10a      	bne.n	800b07a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b064:	4b38      	ldr	r3, [pc, #224]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b068:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b06c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b072:	4a35      	ldr	r2, [pc, #212]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b074:	430b      	orrs	r3, r1
 800b076:	6513      	str	r3, [r2, #80]	; 0x50
 800b078:	e003      	b.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b07a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b07e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b082:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b08a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b08e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b092:	2300      	movs	r3, #0
 800b094:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b098:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b09c:	460b      	mov	r3, r1
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	d058      	beq.n	800b154 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b0a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b0aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b0ae:	d033      	beq.n	800b118 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800b0b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b0b4:	d82c      	bhi.n	800b110 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b0b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0ba:	d02f      	beq.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800b0bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0c0:	d826      	bhi.n	800b110 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b0c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b0c6:	d02b      	beq.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800b0c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b0cc:	d820      	bhi.n	800b110 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b0ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0d2:	d012      	beq.n	800b0fa <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800b0d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0d8:	d81a      	bhi.n	800b110 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d022      	beq.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b0de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b0e2:	d115      	bne.n	800b110 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b0e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0e8:	3308      	adds	r3, #8
 800b0ea:	2101      	movs	r1, #1
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f001 ffb1 	bl	800d054 <RCCEx_PLL2_Config>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b0f8:	e015      	b.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b0fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0fe:	3328      	adds	r3, #40	; 0x28
 800b100:	2101      	movs	r1, #1
 800b102:	4618      	mov	r0, r3
 800b104:	f002 f858 	bl	800d1b8 <RCCEx_PLL3_Config>
 800b108:	4603      	mov	r3, r0
 800b10a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b10e:	e00a      	b.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b110:	2301      	movs	r3, #1
 800b112:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b116:	e006      	b.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b118:	bf00      	nop
 800b11a:	e004      	b.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b11c:	bf00      	nop
 800b11e:	e002      	b.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b120:	bf00      	nop
 800b122:	e000      	b.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b124:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b126:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d10e      	bne.n	800b14c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b12e:	4b06      	ldr	r3, [pc, #24]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b132:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b136:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b13a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b13e:	4a02      	ldr	r2, [pc, #8]	; (800b148 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b140:	430b      	orrs	r3, r1
 800b142:	6593      	str	r3, [r2, #88]	; 0x58
 800b144:	e006      	b.n	800b154 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800b146:	bf00      	nop
 800b148:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b14c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b150:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b154:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b15c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b160:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b164:	2300      	movs	r3, #0
 800b166:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b16a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b16e:	460b      	mov	r3, r1
 800b170:	4313      	orrs	r3, r2
 800b172:	d037      	beq.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b174:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b178:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b17a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b17e:	d00e      	beq.n	800b19e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800b180:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b184:	d816      	bhi.n	800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800b186:	2b00      	cmp	r3, #0
 800b188:	d018      	beq.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800b18a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b18e:	d111      	bne.n	800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b190:	4bc4      	ldr	r3, [pc, #784]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b194:	4ac3      	ldr	r2, [pc, #780]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b196:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b19a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b19c:	e00f      	b.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b19e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1a2:	3308      	adds	r3, #8
 800b1a4:	2101      	movs	r1, #1
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f001 ff54 	bl	800d054 <RCCEx_PLL2_Config>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b1b2:	e004      	b.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b1ba:	e000      	b.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800b1bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d10a      	bne.n	800b1dc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b1c6:	4bb7      	ldr	r3, [pc, #732]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b1c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1ca:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b1ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1d4:	4ab3      	ldr	r2, [pc, #716]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b1d6:	430b      	orrs	r3, r1
 800b1d8:	6513      	str	r3, [r2, #80]	; 0x50
 800b1da:	e003      	b.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b1e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ec:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b1f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b1fa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b1fe:	460b      	mov	r3, r1
 800b200:	4313      	orrs	r3, r2
 800b202:	d039      	beq.n	800b278 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b20a:	2b03      	cmp	r3, #3
 800b20c:	d81c      	bhi.n	800b248 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800b20e:	a201      	add	r2, pc, #4	; (adr r2, 800b214 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800b210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b214:	0800b251 	.word	0x0800b251
 800b218:	0800b225 	.word	0x0800b225
 800b21c:	0800b233 	.word	0x0800b233
 800b220:	0800b251 	.word	0x0800b251
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b224:	4b9f      	ldr	r3, [pc, #636]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b228:	4a9e      	ldr	r2, [pc, #632]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b22a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b22e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b230:	e00f      	b.n	800b252 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b232:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b236:	3308      	adds	r3, #8
 800b238:	2102      	movs	r1, #2
 800b23a:	4618      	mov	r0, r3
 800b23c:	f001 ff0a 	bl	800d054 <RCCEx_PLL2_Config>
 800b240:	4603      	mov	r3, r0
 800b242:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b246:	e004      	b.n	800b252 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b248:	2301      	movs	r3, #1
 800b24a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b24e:	e000      	b.n	800b252 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800b250:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b252:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b256:	2b00      	cmp	r3, #0
 800b258:	d10a      	bne.n	800b270 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b25a:	4b92      	ldr	r3, [pc, #584]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b25c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b25e:	f023 0103 	bic.w	r1, r3, #3
 800b262:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b268:	4a8e      	ldr	r2, [pc, #568]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b26a:	430b      	orrs	r3, r1
 800b26c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b26e:	e003      	b.n	800b278 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b270:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b274:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b280:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b284:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b288:	2300      	movs	r3, #0
 800b28a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b28e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b292:	460b      	mov	r3, r1
 800b294:	4313      	orrs	r3, r2
 800b296:	f000 8099 	beq.w	800b3cc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b29a:	4b83      	ldr	r3, [pc, #524]	; (800b4a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	4a82      	ldr	r2, [pc, #520]	; (800b4a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b2a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b2a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b2a6:	f7f8 fd67 	bl	8003d78 <HAL_GetTick>
 800b2aa:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b2ae:	e00b      	b.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b2b0:	f7f8 fd62 	bl	8003d78 <HAL_GetTick>
 800b2b4:	4602      	mov	r2, r0
 800b2b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b2ba:	1ad3      	subs	r3, r2, r3
 800b2bc:	2b64      	cmp	r3, #100	; 0x64
 800b2be:	d903      	bls.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800b2c0:	2303      	movs	r3, #3
 800b2c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b2c6:	e005      	b.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b2c8:	4b77      	ldr	r3, [pc, #476]	; (800b4a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d0ed      	beq.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800b2d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d173      	bne.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b2dc:	4b71      	ldr	r3, [pc, #452]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b2de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b2e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b2e8:	4053      	eors	r3, r2
 800b2ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d015      	beq.n	800b31e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b2f2:	4b6c      	ldr	r3, [pc, #432]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b2f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b2fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b2fe:	4b69      	ldr	r3, [pc, #420]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b302:	4a68      	ldr	r2, [pc, #416]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b308:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b30a:	4b66      	ldr	r3, [pc, #408]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b30c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b30e:	4a65      	ldr	r2, [pc, #404]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b314:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b316:	4a63      	ldr	r2, [pc, #396]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b318:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b31c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b31e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b322:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b32a:	d118      	bne.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b32c:	f7f8 fd24 	bl	8003d78 <HAL_GetTick>
 800b330:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b334:	e00d      	b.n	800b352 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b336:	f7f8 fd1f 	bl	8003d78 <HAL_GetTick>
 800b33a:	4602      	mov	r2, r0
 800b33c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b340:	1ad2      	subs	r2, r2, r3
 800b342:	f241 3388 	movw	r3, #5000	; 0x1388
 800b346:	429a      	cmp	r2, r3
 800b348:	d903      	bls.n	800b352 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800b34a:	2303      	movs	r3, #3
 800b34c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800b350:	e005      	b.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b352:	4b54      	ldr	r3, [pc, #336]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b356:	f003 0302 	and.w	r3, r3, #2
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d0eb      	beq.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800b35e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b362:	2b00      	cmp	r3, #0
 800b364:	d129      	bne.n	800b3ba <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b366:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b36a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b36e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b372:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b376:	d10e      	bne.n	800b396 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800b378:	4b4a      	ldr	r3, [pc, #296]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b37a:	691b      	ldr	r3, [r3, #16]
 800b37c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b380:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b384:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b388:	091a      	lsrs	r2, r3, #4
 800b38a:	4b48      	ldr	r3, [pc, #288]	; (800b4ac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800b38c:	4013      	ands	r3, r2
 800b38e:	4a45      	ldr	r2, [pc, #276]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b390:	430b      	orrs	r3, r1
 800b392:	6113      	str	r3, [r2, #16]
 800b394:	e005      	b.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800b396:	4b43      	ldr	r3, [pc, #268]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b398:	691b      	ldr	r3, [r3, #16]
 800b39a:	4a42      	ldr	r2, [pc, #264]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b39c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b3a0:	6113      	str	r3, [r2, #16]
 800b3a2:	4b40      	ldr	r3, [pc, #256]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b3a4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b3a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b3ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b3b2:	4a3c      	ldr	r2, [pc, #240]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b3b4:	430b      	orrs	r3, r1
 800b3b6:	6713      	str	r3, [r2, #112]	; 0x70
 800b3b8:	e008      	b.n	800b3cc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b3ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3be:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800b3c2:	e003      	b.n	800b3cc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3c8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b3cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d4:	f002 0301 	and.w	r3, r2, #1
 800b3d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b3dc:	2300      	movs	r3, #0
 800b3de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b3e2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b3e6:	460b      	mov	r3, r1
 800b3e8:	4313      	orrs	r3, r2
 800b3ea:	f000 808f 	beq.w	800b50c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b3ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b3f4:	2b28      	cmp	r3, #40	; 0x28
 800b3f6:	d871      	bhi.n	800b4dc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b3f8:	a201      	add	r2, pc, #4	; (adr r2, 800b400 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800b3fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3fe:	bf00      	nop
 800b400:	0800b4e5 	.word	0x0800b4e5
 800b404:	0800b4dd 	.word	0x0800b4dd
 800b408:	0800b4dd 	.word	0x0800b4dd
 800b40c:	0800b4dd 	.word	0x0800b4dd
 800b410:	0800b4dd 	.word	0x0800b4dd
 800b414:	0800b4dd 	.word	0x0800b4dd
 800b418:	0800b4dd 	.word	0x0800b4dd
 800b41c:	0800b4dd 	.word	0x0800b4dd
 800b420:	0800b4b1 	.word	0x0800b4b1
 800b424:	0800b4dd 	.word	0x0800b4dd
 800b428:	0800b4dd 	.word	0x0800b4dd
 800b42c:	0800b4dd 	.word	0x0800b4dd
 800b430:	0800b4dd 	.word	0x0800b4dd
 800b434:	0800b4dd 	.word	0x0800b4dd
 800b438:	0800b4dd 	.word	0x0800b4dd
 800b43c:	0800b4dd 	.word	0x0800b4dd
 800b440:	0800b4c7 	.word	0x0800b4c7
 800b444:	0800b4dd 	.word	0x0800b4dd
 800b448:	0800b4dd 	.word	0x0800b4dd
 800b44c:	0800b4dd 	.word	0x0800b4dd
 800b450:	0800b4dd 	.word	0x0800b4dd
 800b454:	0800b4dd 	.word	0x0800b4dd
 800b458:	0800b4dd 	.word	0x0800b4dd
 800b45c:	0800b4dd 	.word	0x0800b4dd
 800b460:	0800b4e5 	.word	0x0800b4e5
 800b464:	0800b4dd 	.word	0x0800b4dd
 800b468:	0800b4dd 	.word	0x0800b4dd
 800b46c:	0800b4dd 	.word	0x0800b4dd
 800b470:	0800b4dd 	.word	0x0800b4dd
 800b474:	0800b4dd 	.word	0x0800b4dd
 800b478:	0800b4dd 	.word	0x0800b4dd
 800b47c:	0800b4dd 	.word	0x0800b4dd
 800b480:	0800b4e5 	.word	0x0800b4e5
 800b484:	0800b4dd 	.word	0x0800b4dd
 800b488:	0800b4dd 	.word	0x0800b4dd
 800b48c:	0800b4dd 	.word	0x0800b4dd
 800b490:	0800b4dd 	.word	0x0800b4dd
 800b494:	0800b4dd 	.word	0x0800b4dd
 800b498:	0800b4dd 	.word	0x0800b4dd
 800b49c:	0800b4dd 	.word	0x0800b4dd
 800b4a0:	0800b4e5 	.word	0x0800b4e5
 800b4a4:	58024400 	.word	0x58024400
 800b4a8:	58024800 	.word	0x58024800
 800b4ac:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b4b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4b4:	3308      	adds	r3, #8
 800b4b6:	2101      	movs	r1, #1
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f001 fdcb 	bl	800d054 <RCCEx_PLL2_Config>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b4c4:	e00f      	b.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b4c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4ca:	3328      	adds	r3, #40	; 0x28
 800b4cc:	2101      	movs	r1, #1
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f001 fe72 	bl	800d1b8 <RCCEx_PLL3_Config>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b4da:	e004      	b.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4dc:	2301      	movs	r3, #1
 800b4de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b4e2:	e000      	b.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800b4e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d10a      	bne.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b4ee:	4bbf      	ldr	r3, [pc, #764]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b4f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4f2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b4f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b4fc:	4abb      	ldr	r2, [pc, #748]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b4fe:	430b      	orrs	r3, r1
 800b500:	6553      	str	r3, [r2, #84]	; 0x54
 800b502:	e003      	b.n	800b50c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b504:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b508:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b50c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b514:	f002 0302 	and.w	r3, r2, #2
 800b518:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b51c:	2300      	movs	r3, #0
 800b51e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b522:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b526:	460b      	mov	r3, r1
 800b528:	4313      	orrs	r3, r2
 800b52a:	d041      	beq.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b52c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b532:	2b05      	cmp	r3, #5
 800b534:	d824      	bhi.n	800b580 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800b536:	a201      	add	r2, pc, #4	; (adr r2, 800b53c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800b538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b53c:	0800b589 	.word	0x0800b589
 800b540:	0800b555 	.word	0x0800b555
 800b544:	0800b56b 	.word	0x0800b56b
 800b548:	0800b589 	.word	0x0800b589
 800b54c:	0800b589 	.word	0x0800b589
 800b550:	0800b589 	.word	0x0800b589
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b554:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b558:	3308      	adds	r3, #8
 800b55a:	2101      	movs	r1, #1
 800b55c:	4618      	mov	r0, r3
 800b55e:	f001 fd79 	bl	800d054 <RCCEx_PLL2_Config>
 800b562:	4603      	mov	r3, r0
 800b564:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b568:	e00f      	b.n	800b58a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b56a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b56e:	3328      	adds	r3, #40	; 0x28
 800b570:	2101      	movs	r1, #1
 800b572:	4618      	mov	r0, r3
 800b574:	f001 fe20 	bl	800d1b8 <RCCEx_PLL3_Config>
 800b578:	4603      	mov	r3, r0
 800b57a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b57e:	e004      	b.n	800b58a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b580:	2301      	movs	r3, #1
 800b582:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b586:	e000      	b.n	800b58a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800b588:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b58a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d10a      	bne.n	800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b592:	4b96      	ldr	r3, [pc, #600]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b596:	f023 0107 	bic.w	r1, r3, #7
 800b59a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b59e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5a0:	4a92      	ldr	r2, [pc, #584]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b5a2:	430b      	orrs	r3, r1
 800b5a4:	6553      	str	r3, [r2, #84]	; 0x54
 800b5a6:	e003      	b.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5ac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b5b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b8:	f002 0304 	and.w	r3, r2, #4
 800b5bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b5c6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b5ca:	460b      	mov	r3, r1
 800b5cc:	4313      	orrs	r3, r2
 800b5ce:	d044      	beq.n	800b65a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b5d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5d8:	2b05      	cmp	r3, #5
 800b5da:	d825      	bhi.n	800b628 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800b5dc:	a201      	add	r2, pc, #4	; (adr r2, 800b5e4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800b5de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5e2:	bf00      	nop
 800b5e4:	0800b631 	.word	0x0800b631
 800b5e8:	0800b5fd 	.word	0x0800b5fd
 800b5ec:	0800b613 	.word	0x0800b613
 800b5f0:	0800b631 	.word	0x0800b631
 800b5f4:	0800b631 	.word	0x0800b631
 800b5f8:	0800b631 	.word	0x0800b631
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b5fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b600:	3308      	adds	r3, #8
 800b602:	2101      	movs	r1, #1
 800b604:	4618      	mov	r0, r3
 800b606:	f001 fd25 	bl	800d054 <RCCEx_PLL2_Config>
 800b60a:	4603      	mov	r3, r0
 800b60c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b610:	e00f      	b.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b616:	3328      	adds	r3, #40	; 0x28
 800b618:	2101      	movs	r1, #1
 800b61a:	4618      	mov	r0, r3
 800b61c:	f001 fdcc 	bl	800d1b8 <RCCEx_PLL3_Config>
 800b620:	4603      	mov	r3, r0
 800b622:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b626:	e004      	b.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b628:	2301      	movs	r3, #1
 800b62a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b62e:	e000      	b.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800b630:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b632:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b636:	2b00      	cmp	r3, #0
 800b638:	d10b      	bne.n	800b652 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b63a:	4b6c      	ldr	r3, [pc, #432]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b63c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b63e:	f023 0107 	bic.w	r1, r3, #7
 800b642:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b64a:	4a68      	ldr	r2, [pc, #416]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b64c:	430b      	orrs	r3, r1
 800b64e:	6593      	str	r3, [r2, #88]	; 0x58
 800b650:	e003      	b.n	800b65a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b652:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b656:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b65a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b662:	f002 0320 	and.w	r3, r2, #32
 800b666:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b66a:	2300      	movs	r3, #0
 800b66c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b670:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b674:	460b      	mov	r3, r1
 800b676:	4313      	orrs	r3, r2
 800b678:	d055      	beq.n	800b726 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b67a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b67e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b682:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b686:	d033      	beq.n	800b6f0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800b688:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b68c:	d82c      	bhi.n	800b6e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b68e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b692:	d02f      	beq.n	800b6f4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b698:	d826      	bhi.n	800b6e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b69a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b69e:	d02b      	beq.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b6a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b6a4:	d820      	bhi.n	800b6e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b6a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6aa:	d012      	beq.n	800b6d2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800b6ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6b0:	d81a      	bhi.n	800b6e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d022      	beq.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b6b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6ba:	d115      	bne.n	800b6e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b6bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6c0:	3308      	adds	r3, #8
 800b6c2:	2100      	movs	r1, #0
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f001 fcc5 	bl	800d054 <RCCEx_PLL2_Config>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b6d0:	e015      	b.n	800b6fe <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b6d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6d6:	3328      	adds	r3, #40	; 0x28
 800b6d8:	2102      	movs	r1, #2
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f001 fd6c 	bl	800d1b8 <RCCEx_PLL3_Config>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b6e6:	e00a      	b.n	800b6fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b6ee:	e006      	b.n	800b6fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b6f0:	bf00      	nop
 800b6f2:	e004      	b.n	800b6fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b6f4:	bf00      	nop
 800b6f6:	e002      	b.n	800b6fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b6f8:	bf00      	nop
 800b6fa:	e000      	b.n	800b6fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b6fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b702:	2b00      	cmp	r3, #0
 800b704:	d10b      	bne.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b706:	4b39      	ldr	r3, [pc, #228]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b70a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b70e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b712:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b716:	4a35      	ldr	r2, [pc, #212]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b718:	430b      	orrs	r3, r1
 800b71a:	6553      	str	r3, [r2, #84]	; 0x54
 800b71c:	e003      	b.n	800b726 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b71e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b722:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b726:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b732:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b736:	2300      	movs	r3, #0
 800b738:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b73c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b740:	460b      	mov	r3, r1
 800b742:	4313      	orrs	r3, r2
 800b744:	d058      	beq.n	800b7f8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b746:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b74a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b74e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b752:	d033      	beq.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b754:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b758:	d82c      	bhi.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b75a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b75e:	d02f      	beq.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b764:	d826      	bhi.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b766:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b76a:	d02b      	beq.n	800b7c4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b76c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b770:	d820      	bhi.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b772:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b776:	d012      	beq.n	800b79e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800b778:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b77c:	d81a      	bhi.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d022      	beq.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b786:	d115      	bne.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b788:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b78c:	3308      	adds	r3, #8
 800b78e:	2100      	movs	r1, #0
 800b790:	4618      	mov	r0, r3
 800b792:	f001 fc5f 	bl	800d054 <RCCEx_PLL2_Config>
 800b796:	4603      	mov	r3, r0
 800b798:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b79c:	e015      	b.n	800b7ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b79e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7a2:	3328      	adds	r3, #40	; 0x28
 800b7a4:	2102      	movs	r1, #2
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f001 fd06 	bl	800d1b8 <RCCEx_PLL3_Config>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b7b2:	e00a      	b.n	800b7ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b7ba:	e006      	b.n	800b7ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b7bc:	bf00      	nop
 800b7be:	e004      	b.n	800b7ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b7c0:	bf00      	nop
 800b7c2:	e002      	b.n	800b7ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b7c4:	bf00      	nop
 800b7c6:	e000      	b.n	800b7ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b7c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d10e      	bne.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b7d2:	4b06      	ldr	r3, [pc, #24]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b7d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7d6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b7da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b7e2:	4a02      	ldr	r2, [pc, #8]	; (800b7ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b7e4:	430b      	orrs	r3, r1
 800b7e6:	6593      	str	r3, [r2, #88]	; 0x58
 800b7e8:	e006      	b.n	800b7f8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800b7ea:	bf00      	nop
 800b7ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7f4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b7f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b800:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b804:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b808:	2300      	movs	r3, #0
 800b80a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b80e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b812:	460b      	mov	r3, r1
 800b814:	4313      	orrs	r3, r2
 800b816:	d055      	beq.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b818:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b81c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b820:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b824:	d033      	beq.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800b826:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b82a:	d82c      	bhi.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b82c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b830:	d02f      	beq.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b832:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b836:	d826      	bhi.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b838:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b83c:	d02b      	beq.n	800b896 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b83e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b842:	d820      	bhi.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b844:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b848:	d012      	beq.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800b84a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b84e:	d81a      	bhi.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b850:	2b00      	cmp	r3, #0
 800b852:	d022      	beq.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b854:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b858:	d115      	bne.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b85a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b85e:	3308      	adds	r3, #8
 800b860:	2100      	movs	r1, #0
 800b862:	4618      	mov	r0, r3
 800b864:	f001 fbf6 	bl	800d054 <RCCEx_PLL2_Config>
 800b868:	4603      	mov	r3, r0
 800b86a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b86e:	e015      	b.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b870:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b874:	3328      	adds	r3, #40	; 0x28
 800b876:	2102      	movs	r1, #2
 800b878:	4618      	mov	r0, r3
 800b87a:	f001 fc9d 	bl	800d1b8 <RCCEx_PLL3_Config>
 800b87e:	4603      	mov	r3, r0
 800b880:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b884:	e00a      	b.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b886:	2301      	movs	r3, #1
 800b888:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b88c:	e006      	b.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b88e:	bf00      	nop
 800b890:	e004      	b.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b892:	bf00      	nop
 800b894:	e002      	b.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b896:	bf00      	nop
 800b898:	e000      	b.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b89a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b89c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d10b      	bne.n	800b8bc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b8a4:	4ba0      	ldr	r3, [pc, #640]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b8a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8a8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b8ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b8b4:	4a9c      	ldr	r2, [pc, #624]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b8b6:	430b      	orrs	r3, r1
 800b8b8:	6593      	str	r3, [r2, #88]	; 0x58
 800b8ba:	e003      	b.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b8c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8cc:	f002 0308 	and.w	r3, r2, #8
 800b8d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b8da:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b8de:	460b      	mov	r3, r1
 800b8e0:	4313      	orrs	r3, r2
 800b8e2:	d01e      	beq.n	800b922 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800b8e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8f0:	d10c      	bne.n	800b90c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b8f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8f6:	3328      	adds	r3, #40	; 0x28
 800b8f8:	2102      	movs	r1, #2
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f001 fc5c 	bl	800d1b8 <RCCEx_PLL3_Config>
 800b900:	4603      	mov	r3, r0
 800b902:	2b00      	cmp	r3, #0
 800b904:	d002      	beq.n	800b90c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800b906:	2301      	movs	r3, #1
 800b908:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b90c:	4b86      	ldr	r3, [pc, #536]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b90e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b910:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b914:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b918:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b91c:	4a82      	ldr	r2, [pc, #520]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b91e:	430b      	orrs	r3, r1
 800b920:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b922:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b92a:	f002 0310 	and.w	r3, r2, #16
 800b92e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b932:	2300      	movs	r3, #0
 800b934:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b938:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b93c:	460b      	mov	r3, r1
 800b93e:	4313      	orrs	r3, r2
 800b940:	d01e      	beq.n	800b980 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b942:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b946:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b94a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b94e:	d10c      	bne.n	800b96a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b950:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b954:	3328      	adds	r3, #40	; 0x28
 800b956:	2102      	movs	r1, #2
 800b958:	4618      	mov	r0, r3
 800b95a:	f001 fc2d 	bl	800d1b8 <RCCEx_PLL3_Config>
 800b95e:	4603      	mov	r3, r0
 800b960:	2b00      	cmp	r3, #0
 800b962:	d002      	beq.n	800b96a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800b964:	2301      	movs	r3, #1
 800b966:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b96a:	4b6f      	ldr	r3, [pc, #444]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b96c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b96e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b976:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b97a:	4a6b      	ldr	r2, [pc, #428]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b97c:	430b      	orrs	r3, r1
 800b97e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b980:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b988:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b98c:	67bb      	str	r3, [r7, #120]	; 0x78
 800b98e:	2300      	movs	r3, #0
 800b990:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b992:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b996:	460b      	mov	r3, r1
 800b998:	4313      	orrs	r3, r2
 800b99a:	d03e      	beq.n	800ba1a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b99c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b9a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9a8:	d022      	beq.n	800b9f0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b9aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9ae:	d81b      	bhi.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d003      	beq.n	800b9bc <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800b9b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9b8:	d00b      	beq.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800b9ba:	e015      	b.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b9bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9c0:	3308      	adds	r3, #8
 800b9c2:	2100      	movs	r1, #0
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f001 fb45 	bl	800d054 <RCCEx_PLL2_Config>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b9d0:	e00f      	b.n	800b9f2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b9d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9d6:	3328      	adds	r3, #40	; 0x28
 800b9d8:	2102      	movs	r1, #2
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f001 fbec 	bl	800d1b8 <RCCEx_PLL3_Config>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b9e6:	e004      	b.n	800b9f2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b9ee:	e000      	b.n	800b9f2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800b9f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d10b      	bne.n	800ba12 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b9fa:	4b4b      	ldr	r3, [pc, #300]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b9fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9fe:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800ba02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ba0a:	4a47      	ldr	r2, [pc, #284]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ba0c:	430b      	orrs	r3, r1
 800ba0e:	6593      	str	r3, [r2, #88]	; 0x58
 800ba10:	e003      	b.n	800ba1a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba12:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba16:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ba1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba22:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800ba26:	673b      	str	r3, [r7, #112]	; 0x70
 800ba28:	2300      	movs	r3, #0
 800ba2a:	677b      	str	r3, [r7, #116]	; 0x74
 800ba2c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800ba30:	460b      	mov	r3, r1
 800ba32:	4313      	orrs	r3, r2
 800ba34:	d03b      	beq.n	800baae <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800ba36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba3e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ba42:	d01f      	beq.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800ba44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ba48:	d818      	bhi.n	800ba7c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800ba4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba4e:	d003      	beq.n	800ba58 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800ba50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ba54:	d007      	beq.n	800ba66 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800ba56:	e011      	b.n	800ba7c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba58:	4b33      	ldr	r3, [pc, #204]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ba5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba5c:	4a32      	ldr	r2, [pc, #200]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ba5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ba64:	e00f      	b.n	800ba86 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba6a:	3328      	adds	r3, #40	; 0x28
 800ba6c:	2101      	movs	r1, #1
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f001 fba2 	bl	800d1b8 <RCCEx_PLL3_Config>
 800ba74:	4603      	mov	r3, r0
 800ba76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800ba7a:	e004      	b.n	800ba86 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ba82:	e000      	b.n	800ba86 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800ba84:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba86:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d10b      	bne.n	800baa6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ba8e:	4b26      	ldr	r3, [pc, #152]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ba90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba92:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ba96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba9e:	4a22      	ldr	r2, [pc, #136]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800baa0:	430b      	orrs	r3, r1
 800baa2:	6553      	str	r3, [r2, #84]	; 0x54
 800baa4:	e003      	b.n	800baae <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baa6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800baaa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800baae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800baba:	66bb      	str	r3, [r7, #104]	; 0x68
 800babc:	2300      	movs	r3, #0
 800babe:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bac0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800bac4:	460b      	mov	r3, r1
 800bac6:	4313      	orrs	r3, r2
 800bac8:	d034      	beq.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800baca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d003      	beq.n	800badc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800bad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bad8:	d007      	beq.n	800baea <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800bada:	e011      	b.n	800bb00 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800badc:	4b12      	ldr	r3, [pc, #72]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bae0:	4a11      	ldr	r2, [pc, #68]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bae2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bae6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bae8:	e00e      	b.n	800bb08 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800baea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baee:	3308      	adds	r3, #8
 800baf0:	2102      	movs	r1, #2
 800baf2:	4618      	mov	r0, r3
 800baf4:	f001 faae 	bl	800d054 <RCCEx_PLL2_Config>
 800baf8:	4603      	mov	r3, r0
 800bafa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bafe:	e003      	b.n	800bb08 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800bb00:	2301      	movs	r3, #1
 800bb02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bb06:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d10d      	bne.n	800bb2c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bb10:	4b05      	ldr	r3, [pc, #20]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bb12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bb18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb1e:	4a02      	ldr	r2, [pc, #8]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bb20:	430b      	orrs	r3, r1
 800bb22:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bb24:	e006      	b.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800bb26:	bf00      	nop
 800bb28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb30:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bb34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb3c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800bb40:	663b      	str	r3, [r7, #96]	; 0x60
 800bb42:	2300      	movs	r3, #0
 800bb44:	667b      	str	r3, [r7, #100]	; 0x64
 800bb46:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800bb4a:	460b      	mov	r3, r1
 800bb4c:	4313      	orrs	r3, r2
 800bb4e:	d00c      	beq.n	800bb6a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bb50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb54:	3328      	adds	r3, #40	; 0x28
 800bb56:	2102      	movs	r1, #2
 800bb58:	4618      	mov	r0, r3
 800bb5a:	f001 fb2d 	bl	800d1b8 <RCCEx_PLL3_Config>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d002      	beq.n	800bb6a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800bb64:	2301      	movs	r3, #1
 800bb66:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bb6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb72:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800bb76:	65bb      	str	r3, [r7, #88]	; 0x58
 800bb78:	2300      	movs	r3, #0
 800bb7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bb7c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800bb80:	460b      	mov	r3, r1
 800bb82:	4313      	orrs	r3, r2
 800bb84:	d036      	beq.n	800bbf4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800bb86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb90:	d018      	beq.n	800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800bb92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb96:	d811      	bhi.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800bb98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb9c:	d014      	beq.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800bb9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bba2:	d80b      	bhi.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d011      	beq.n	800bbcc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800bba8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbac:	d106      	bne.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbae:	4bb7      	ldr	r3, [pc, #732]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bbb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbb2:	4ab6      	ldr	r2, [pc, #728]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bbb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bbb8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800bbba:	e008      	b.n	800bbce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bbc2:	e004      	b.n	800bbce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800bbc4:	bf00      	nop
 800bbc6:	e002      	b.n	800bbce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800bbc8:	bf00      	nop
 800bbca:	e000      	b.n	800bbce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800bbcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d10a      	bne.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bbd6:	4bad      	ldr	r3, [pc, #692]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bbd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbda:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bbde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbe2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bbe4:	4aa9      	ldr	r2, [pc, #676]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bbe6:	430b      	orrs	r3, r1
 800bbe8:	6553      	str	r3, [r2, #84]	; 0x54
 800bbea:	e003      	b.n	800bbf4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbf0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bbf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbfc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800bc00:	653b      	str	r3, [r7, #80]	; 0x50
 800bc02:	2300      	movs	r3, #0
 800bc04:	657b      	str	r3, [r7, #84]	; 0x54
 800bc06:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800bc0a:	460b      	mov	r3, r1
 800bc0c:	4313      	orrs	r3, r2
 800bc0e:	d009      	beq.n	800bc24 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bc10:	4b9e      	ldr	r3, [pc, #632]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bc12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc14:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bc18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc1e:	4a9b      	ldr	r2, [pc, #620]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bc20:	430b      	orrs	r3, r1
 800bc22:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bc24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc2c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800bc30:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc32:	2300      	movs	r3, #0
 800bc34:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc36:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800bc3a:	460b      	mov	r3, r1
 800bc3c:	4313      	orrs	r3, r2
 800bc3e:	d009      	beq.n	800bc54 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bc40:	4b92      	ldr	r3, [pc, #584]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bc42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc44:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800bc48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc4e:	4a8f      	ldr	r2, [pc, #572]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bc50:	430b      	orrs	r3, r1
 800bc52:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bc54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc5c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800bc60:	643b      	str	r3, [r7, #64]	; 0x40
 800bc62:	2300      	movs	r3, #0
 800bc64:	647b      	str	r3, [r7, #68]	; 0x44
 800bc66:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800bc6a:	460b      	mov	r3, r1
 800bc6c:	4313      	orrs	r3, r2
 800bc6e:	d00e      	beq.n	800bc8e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bc70:	4b86      	ldr	r3, [pc, #536]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bc72:	691b      	ldr	r3, [r3, #16]
 800bc74:	4a85      	ldr	r2, [pc, #532]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bc76:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bc7a:	6113      	str	r3, [r2, #16]
 800bc7c:	4b83      	ldr	r3, [pc, #524]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bc7e:	6919      	ldr	r1, [r3, #16]
 800bc80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bc88:	4a80      	ldr	r2, [pc, #512]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bc8a:	430b      	orrs	r3, r1
 800bc8c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bc8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc96:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800bc9a:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bca0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800bca4:	460b      	mov	r3, r1
 800bca6:	4313      	orrs	r3, r2
 800bca8:	d009      	beq.n	800bcbe <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bcaa:	4b78      	ldr	r3, [pc, #480]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bcac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcae:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bcb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcb8:	4a74      	ldr	r2, [pc, #464]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bcba:	430b      	orrs	r3, r1
 800bcbc:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bcbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800bcca:	633b      	str	r3, [r7, #48]	; 0x30
 800bccc:	2300      	movs	r3, #0
 800bcce:	637b      	str	r3, [r7, #52]	; 0x34
 800bcd0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800bcd4:	460b      	mov	r3, r1
 800bcd6:	4313      	orrs	r3, r2
 800bcd8:	d00a      	beq.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bcda:	4b6c      	ldr	r3, [pc, #432]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bcdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcde:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800bce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcea:	4a68      	ldr	r2, [pc, #416]	; (800be8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bcec:	430b      	orrs	r3, r1
 800bcee:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800bcf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf8:	2100      	movs	r1, #0
 800bcfa:	62b9      	str	r1, [r7, #40]	; 0x28
 800bcfc:	f003 0301 	and.w	r3, r3, #1
 800bd00:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd02:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800bd06:	460b      	mov	r3, r1
 800bd08:	4313      	orrs	r3, r2
 800bd0a:	d011      	beq.n	800bd30 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd10:	3308      	adds	r3, #8
 800bd12:	2100      	movs	r1, #0
 800bd14:	4618      	mov	r0, r3
 800bd16:	f001 f99d 	bl	800d054 <RCCEx_PLL2_Config>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bd20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d003      	beq.n	800bd30 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd2c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bd30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd38:	2100      	movs	r1, #0
 800bd3a:	6239      	str	r1, [r7, #32]
 800bd3c:	f003 0302 	and.w	r3, r3, #2
 800bd40:	627b      	str	r3, [r7, #36]	; 0x24
 800bd42:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bd46:	460b      	mov	r3, r1
 800bd48:	4313      	orrs	r3, r2
 800bd4a:	d011      	beq.n	800bd70 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bd4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd50:	3308      	adds	r3, #8
 800bd52:	2101      	movs	r1, #1
 800bd54:	4618      	mov	r0, r3
 800bd56:	f001 f97d 	bl	800d054 <RCCEx_PLL2_Config>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bd60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d003      	beq.n	800bd70 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd6c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bd70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd78:	2100      	movs	r1, #0
 800bd7a:	61b9      	str	r1, [r7, #24]
 800bd7c:	f003 0304 	and.w	r3, r3, #4
 800bd80:	61fb      	str	r3, [r7, #28]
 800bd82:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bd86:	460b      	mov	r3, r1
 800bd88:	4313      	orrs	r3, r2
 800bd8a:	d011      	beq.n	800bdb0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bd8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd90:	3308      	adds	r3, #8
 800bd92:	2102      	movs	r1, #2
 800bd94:	4618      	mov	r0, r3
 800bd96:	f001 f95d 	bl	800d054 <RCCEx_PLL2_Config>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bda0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d003      	beq.n	800bdb0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bda8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bdac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bdb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb8:	2100      	movs	r1, #0
 800bdba:	6139      	str	r1, [r7, #16]
 800bdbc:	f003 0308 	and.w	r3, r3, #8
 800bdc0:	617b      	str	r3, [r7, #20]
 800bdc2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bdc6:	460b      	mov	r3, r1
 800bdc8:	4313      	orrs	r3, r2
 800bdca:	d011      	beq.n	800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bdcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdd0:	3328      	adds	r3, #40	; 0x28
 800bdd2:	2100      	movs	r1, #0
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f001 f9ef 	bl	800d1b8 <RCCEx_PLL3_Config>
 800bdda:	4603      	mov	r3, r0
 800bddc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800bde0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d003      	beq.n	800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bde8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bdec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bdf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf8:	2100      	movs	r1, #0
 800bdfa:	60b9      	str	r1, [r7, #8]
 800bdfc:	f003 0310 	and.w	r3, r3, #16
 800be00:	60fb      	str	r3, [r7, #12]
 800be02:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800be06:	460b      	mov	r3, r1
 800be08:	4313      	orrs	r3, r2
 800be0a:	d011      	beq.n	800be30 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800be0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be10:	3328      	adds	r3, #40	; 0x28
 800be12:	2101      	movs	r1, #1
 800be14:	4618      	mov	r0, r3
 800be16:	f001 f9cf 	bl	800d1b8 <RCCEx_PLL3_Config>
 800be1a:	4603      	mov	r3, r0
 800be1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800be20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be24:	2b00      	cmp	r3, #0
 800be26:	d003      	beq.n	800be30 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be2c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800be30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be38:	2100      	movs	r1, #0
 800be3a:	6039      	str	r1, [r7, #0]
 800be3c:	f003 0320 	and.w	r3, r3, #32
 800be40:	607b      	str	r3, [r7, #4]
 800be42:	e9d7 1200 	ldrd	r1, r2, [r7]
 800be46:	460b      	mov	r3, r1
 800be48:	4313      	orrs	r3, r2
 800be4a:	d011      	beq.n	800be70 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800be4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be50:	3328      	adds	r3, #40	; 0x28
 800be52:	2102      	movs	r1, #2
 800be54:	4618      	mov	r0, r3
 800be56:	f001 f9af 	bl	800d1b8 <RCCEx_PLL3_Config>
 800be5a:	4603      	mov	r3, r0
 800be5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800be60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be64:	2b00      	cmp	r3, #0
 800be66:	d003      	beq.n	800be70 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be6c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800be70:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800be74:	2b00      	cmp	r3, #0
 800be76:	d101      	bne.n	800be7c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800be78:	2300      	movs	r3, #0
 800be7a:	e000      	b.n	800be7e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800be7c:	2301      	movs	r3, #1
}
 800be7e:	4618      	mov	r0, r3
 800be80:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800be84:	46bd      	mov	sp, r7
 800be86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800be8a:	bf00      	nop
 800be8c:	58024400 	.word	0x58024400

0800be90 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b090      	sub	sp, #64	; 0x40
 800be94:	af00      	add	r7, sp, #0
 800be96:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800be9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be9e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800bea2:	430b      	orrs	r3, r1
 800bea4:	f040 8094 	bne.w	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800bea8:	4b9b      	ldr	r3, [pc, #620]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800beaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800beac:	f003 0307 	and.w	r3, r3, #7
 800beb0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800beb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb4:	2b04      	cmp	r3, #4
 800beb6:	f200 8087 	bhi.w	800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800beba:	a201      	add	r2, pc, #4	; (adr r2, 800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800bebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bec0:	0800bed5 	.word	0x0800bed5
 800bec4:	0800befd 	.word	0x0800befd
 800bec8:	0800bf25 	.word	0x0800bf25
 800becc:	0800bfc1 	.word	0x0800bfc1
 800bed0:	0800bf4d 	.word	0x0800bf4d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bed4:	4b90      	ldr	r3, [pc, #576]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bedc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bee0:	d108      	bne.n	800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bee2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bee6:	4618      	mov	r0, r3
 800bee8:	f000 ff62 	bl	800cdb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800beec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bef0:	f000 bc93 	b.w	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bef4:	2300      	movs	r3, #0
 800bef6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bef8:	f000 bc8f 	b.w	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800befc:	4b86      	ldr	r3, [pc, #536]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf08:	d108      	bne.n	800bf1c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf0a:	f107 0318 	add.w	r3, r7, #24
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f000 fca6 	bl	800c860 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bf14:	69bb      	ldr	r3, [r7, #24]
 800bf16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf18:	f000 bc7f 	b.w	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf20:	f000 bc7b 	b.w	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bf24:	4b7c      	ldr	r3, [pc, #496]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf30:	d108      	bne.n	800bf44 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf32:	f107 030c 	add.w	r3, r7, #12
 800bf36:	4618      	mov	r0, r3
 800bf38:	f000 fde6 	bl	800cb08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf40:	f000 bc6b 	b.w	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf44:	2300      	movs	r3, #0
 800bf46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf48:	f000 bc67 	b.w	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bf4c:	4b72      	ldr	r3, [pc, #456]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bf4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bf54:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bf56:	4b70      	ldr	r3, [pc, #448]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f003 0304 	and.w	r3, r3, #4
 800bf5e:	2b04      	cmp	r3, #4
 800bf60:	d10c      	bne.n	800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bf62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d109      	bne.n	800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf68:	4b6b      	ldr	r3, [pc, #428]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	08db      	lsrs	r3, r3, #3
 800bf6e:	f003 0303 	and.w	r3, r3, #3
 800bf72:	4a6a      	ldr	r2, [pc, #424]	; (800c11c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800bf74:	fa22 f303 	lsr.w	r3, r2, r3
 800bf78:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf7a:	e01f      	b.n	800bfbc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bf7c:	4b66      	ldr	r3, [pc, #408]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf88:	d106      	bne.n	800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800bf8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf90:	d102      	bne.n	800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bf92:	4b63      	ldr	r3, [pc, #396]	; (800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800bf94:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf96:	e011      	b.n	800bfbc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bf98:	4b5f      	ldr	r3, [pc, #380]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfa0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bfa4:	d106      	bne.n	800bfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bfa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfac:	d102      	bne.n	800bfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bfae:	4b5d      	ldr	r3, [pc, #372]	; (800c124 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bfb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfb2:	e003      	b.n	800bfbc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bfb8:	f000 bc2f 	b.w	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bfbc:	f000 bc2d 	b.w	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bfc0:	4b59      	ldr	r3, [pc, #356]	; (800c128 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bfc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfc4:	f000 bc29 	b.w	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfcc:	f000 bc25 	b.w	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800bfd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfd4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800bfd8:	430b      	orrs	r3, r1
 800bfda:	f040 80a7 	bne.w	800c12c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800bfde:	4b4e      	ldr	r3, [pc, #312]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bfe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfe2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800bfe6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bfe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bfee:	d054      	beq.n	800c09a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800bff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bff6:	f200 808b 	bhi.w	800c110 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c000:	f000 8083 	beq.w	800c10a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800c004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c006:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c00a:	f200 8081 	bhi.w	800c110 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c010:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c014:	d02f      	beq.n	800c076 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c018:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c01c:	d878      	bhi.n	800c110 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c020:	2b00      	cmp	r3, #0
 800c022:	d004      	beq.n	800c02e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800c024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c026:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c02a:	d012      	beq.n	800c052 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800c02c:	e070      	b.n	800c110 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c02e:	4b3a      	ldr	r3, [pc, #232]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c036:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c03a:	d107      	bne.n	800c04c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c03c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c040:	4618      	mov	r0, r3
 800c042:	f000 feb5 	bl	800cdb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c048:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c04a:	e3e6      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c04c:	2300      	movs	r3, #0
 800c04e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c050:	e3e3      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c052:	4b31      	ldr	r3, [pc, #196]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c05a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c05e:	d107      	bne.n	800c070 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c060:	f107 0318 	add.w	r3, r7, #24
 800c064:	4618      	mov	r0, r3
 800c066:	f000 fbfb 	bl	800c860 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c06a:	69bb      	ldr	r3, [r7, #24]
 800c06c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c06e:	e3d4      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c070:	2300      	movs	r3, #0
 800c072:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c074:	e3d1      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c076:	4b28      	ldr	r3, [pc, #160]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c07e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c082:	d107      	bne.n	800c094 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c084:	f107 030c 	add.w	r3, r7, #12
 800c088:	4618      	mov	r0, r3
 800c08a:	f000 fd3d 	bl	800cb08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c092:	e3c2      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c094:	2300      	movs	r3, #0
 800c096:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c098:	e3bf      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c09a:	4b1f      	ldr	r3, [pc, #124]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c09c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c09e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c0a2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c0a4:	4b1c      	ldr	r3, [pc, #112]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f003 0304 	and.w	r3, r3, #4
 800c0ac:	2b04      	cmp	r3, #4
 800c0ae:	d10c      	bne.n	800c0ca <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800c0b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d109      	bne.n	800c0ca <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c0b6:	4b18      	ldr	r3, [pc, #96]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	08db      	lsrs	r3, r3, #3
 800c0bc:	f003 0303 	and.w	r3, r3, #3
 800c0c0:	4a16      	ldr	r2, [pc, #88]	; (800c11c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c0c2:	fa22 f303 	lsr.w	r3, r2, r3
 800c0c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0c8:	e01e      	b.n	800c108 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c0ca:	4b13      	ldr	r3, [pc, #76]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0d6:	d106      	bne.n	800c0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800c0d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c0de:	d102      	bne.n	800c0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c0e0:	4b0f      	ldr	r3, [pc, #60]	; (800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800c0e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0e4:	e010      	b.n	800c108 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c0e6:	4b0c      	ldr	r3, [pc, #48]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0f2:	d106      	bne.n	800c102 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800c0f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0fa:	d102      	bne.n	800c102 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c0fc:	4b09      	ldr	r3, [pc, #36]	; (800c124 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c0fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c100:	e002      	b.n	800c108 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c102:	2300      	movs	r3, #0
 800c104:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c106:	e388      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c108:	e387      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c10a:	4b07      	ldr	r3, [pc, #28]	; (800c128 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c10c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c10e:	e384      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c110:	2300      	movs	r3, #0
 800c112:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c114:	e381      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c116:	bf00      	nop
 800c118:	58024400 	.word	0x58024400
 800c11c:	03d09000 	.word	0x03d09000
 800c120:	003d0900 	.word	0x003d0900
 800c124:	02faf080 	.word	0x02faf080
 800c128:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c12c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c130:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c134:	430b      	orrs	r3, r1
 800c136:	f040 809c 	bne.w	800c272 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c13a:	4b9e      	ldr	r3, [pc, #632]	; (800c3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c13c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c13e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c142:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c146:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c14a:	d054      	beq.n	800c1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800c14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c14e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c152:	f200 808b 	bhi.w	800c26c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c158:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c15c:	f000 8083 	beq.w	800c266 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800c160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c162:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c166:	f200 8081 	bhi.w	800c26c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c16c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c170:	d02f      	beq.n	800c1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800c172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c174:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c178:	d878      	bhi.n	800c26c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d004      	beq.n	800c18a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800c180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c182:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c186:	d012      	beq.n	800c1ae <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800c188:	e070      	b.n	800c26c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c18a:	4b8a      	ldr	r3, [pc, #552]	; (800c3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c192:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c196:	d107      	bne.n	800c1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c19c:	4618      	mov	r0, r3
 800c19e:	f000 fe07 	bl	800cdb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1a6:	e338      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1ac:	e335      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c1ae:	4b81      	ldr	r3, [pc, #516]	; (800c3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c1b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c1ba:	d107      	bne.n	800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1bc:	f107 0318 	add.w	r3, r7, #24
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f000 fb4d 	bl	800c860 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c1c6:	69bb      	ldr	r3, [r7, #24]
 800c1c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1ca:	e326      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1d0:	e323      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c1d2:	4b78      	ldr	r3, [pc, #480]	; (800c3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c1da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1de:	d107      	bne.n	800c1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1e0:	f107 030c 	add.w	r3, r7, #12
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f000 fc8f 	bl	800cb08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1ee:	e314      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1f4:	e311      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c1f6:	4b6f      	ldr	r3, [pc, #444]	; (800c3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c1f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c1fe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c200:	4b6c      	ldr	r3, [pc, #432]	; (800c3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f003 0304 	and.w	r3, r3, #4
 800c208:	2b04      	cmp	r3, #4
 800c20a:	d10c      	bne.n	800c226 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800c20c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d109      	bne.n	800c226 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c212:	4b68      	ldr	r3, [pc, #416]	; (800c3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	08db      	lsrs	r3, r3, #3
 800c218:	f003 0303 	and.w	r3, r3, #3
 800c21c:	4a66      	ldr	r2, [pc, #408]	; (800c3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c21e:	fa22 f303 	lsr.w	r3, r2, r3
 800c222:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c224:	e01e      	b.n	800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c226:	4b63      	ldr	r3, [pc, #396]	; (800c3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c22e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c232:	d106      	bne.n	800c242 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800c234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c236:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c23a:	d102      	bne.n	800c242 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c23c:	4b5f      	ldr	r3, [pc, #380]	; (800c3bc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c23e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c240:	e010      	b.n	800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c242:	4b5c      	ldr	r3, [pc, #368]	; (800c3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c24a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c24e:	d106      	bne.n	800c25e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800c250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c252:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c256:	d102      	bne.n	800c25e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c258:	4b59      	ldr	r3, [pc, #356]	; (800c3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c25a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c25c:	e002      	b.n	800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c25e:	2300      	movs	r3, #0
 800c260:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c262:	e2da      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c264:	e2d9      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c266:	4b57      	ldr	r3, [pc, #348]	; (800c3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c268:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c26a:	e2d6      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c26c:	2300      	movs	r3, #0
 800c26e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c270:	e2d3      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c272:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c276:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c27a:	430b      	orrs	r3, r1
 800c27c:	f040 80a7 	bne.w	800c3ce <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c280:	4b4c      	ldr	r3, [pc, #304]	; (800c3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c284:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c288:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c28c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c290:	d055      	beq.n	800c33e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800c292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c294:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c298:	f200 8096 	bhi.w	800c3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c29e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c2a2:	f000 8084 	beq.w	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800c2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c2ac:	f200 808c 	bhi.w	800c3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c2b6:	d030      	beq.n	800c31a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800c2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c2be:	f200 8083 	bhi.w	800c3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d004      	beq.n	800c2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800c2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2ce:	d012      	beq.n	800c2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800c2d0:	e07a      	b.n	800c3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c2d2:	4b38      	ldr	r3, [pc, #224]	; (800c3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c2da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c2de:	d107      	bne.n	800c2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c2e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f000 fd63 	bl	800cdb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2ee:	e294      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2f4:	e291      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c2f6:	4b2f      	ldr	r3, [pc, #188]	; (800c3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c302:	d107      	bne.n	800c314 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c304:	f107 0318 	add.w	r3, r7, #24
 800c308:	4618      	mov	r0, r3
 800c30a:	f000 faa9 	bl	800c860 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c30e:	69bb      	ldr	r3, [r7, #24]
 800c310:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c312:	e282      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c314:	2300      	movs	r3, #0
 800c316:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c318:	e27f      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c31a:	4b26      	ldr	r3, [pc, #152]	; (800c3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c322:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c326:	d107      	bne.n	800c338 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c328:	f107 030c 	add.w	r3, r7, #12
 800c32c:	4618      	mov	r0, r3
 800c32e:	f000 fbeb 	bl	800cb08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c336:	e270      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c338:	2300      	movs	r3, #0
 800c33a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c33c:	e26d      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c33e:	4b1d      	ldr	r3, [pc, #116]	; (800c3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c342:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c346:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c348:	4b1a      	ldr	r3, [pc, #104]	; (800c3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f003 0304 	and.w	r3, r3, #4
 800c350:	2b04      	cmp	r3, #4
 800c352:	d10c      	bne.n	800c36e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800c354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c356:	2b00      	cmp	r3, #0
 800c358:	d109      	bne.n	800c36e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c35a:	4b16      	ldr	r3, [pc, #88]	; (800c3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	08db      	lsrs	r3, r3, #3
 800c360:	f003 0303 	and.w	r3, r3, #3
 800c364:	4a14      	ldr	r2, [pc, #80]	; (800c3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c366:	fa22 f303 	lsr.w	r3, r2, r3
 800c36a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c36c:	e01e      	b.n	800c3ac <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c36e:	4b11      	ldr	r3, [pc, #68]	; (800c3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c37a:	d106      	bne.n	800c38a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800c37c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c37e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c382:	d102      	bne.n	800c38a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c384:	4b0d      	ldr	r3, [pc, #52]	; (800c3bc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c386:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c388:	e010      	b.n	800c3ac <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c38a:	4b0a      	ldr	r3, [pc, #40]	; (800c3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c392:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c396:	d106      	bne.n	800c3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800c398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c39a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c39e:	d102      	bne.n	800c3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c3a0:	4b07      	ldr	r3, [pc, #28]	; (800c3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c3a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3a4:	e002      	b.n	800c3ac <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c3aa:	e236      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c3ac:	e235      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c3ae:	4b05      	ldr	r3, [pc, #20]	; (800c3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c3b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3b2:	e232      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c3b4:	58024400 	.word	0x58024400
 800c3b8:	03d09000 	.word	0x03d09000
 800c3bc:	003d0900 	.word	0x003d0900
 800c3c0:	02faf080 	.word	0x02faf080
 800c3c4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3cc:	e225      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c3ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3d2:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c3d6:	430b      	orrs	r3, r1
 800c3d8:	f040 8085 	bne.w	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c3dc:	4b9c      	ldr	r3, [pc, #624]	; (800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c3de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3e0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c3e4:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c3ec:	d06b      	beq.n	800c4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800c3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c3f4:	d874      	bhi.n	800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c3fc:	d056      	beq.n	800c4ac <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800c3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c400:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c404:	d86c      	bhi.n	800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c408:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c40c:	d03b      	beq.n	800c486 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800c40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c410:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c414:	d864      	bhi.n	800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c418:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c41c:	d021      	beq.n	800c462 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800c41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c420:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c424:	d85c      	bhi.n	800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d004      	beq.n	800c436 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800c42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c42e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c432:	d004      	beq.n	800c43e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800c434:	e054      	b.n	800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c436:	f7fe fb5f 	bl	800aaf8 <HAL_RCC_GetPCLK1Freq>
 800c43a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c43c:	e1ed      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c43e:	4b84      	ldr	r3, [pc, #528]	; (800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c446:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c44a:	d107      	bne.n	800c45c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c44c:	f107 0318 	add.w	r3, r7, #24
 800c450:	4618      	mov	r0, r3
 800c452:	f000 fa05 	bl	800c860 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c456:	69fb      	ldr	r3, [r7, #28]
 800c458:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c45a:	e1de      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c45c:	2300      	movs	r3, #0
 800c45e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c460:	e1db      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c462:	4b7b      	ldr	r3, [pc, #492]	; (800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c46a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c46e:	d107      	bne.n	800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c470:	f107 030c 	add.w	r3, r7, #12
 800c474:	4618      	mov	r0, r3
 800c476:	f000 fb47 	bl	800cb08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c47e:	e1cc      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c480:	2300      	movs	r3, #0
 800c482:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c484:	e1c9      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c486:	4b72      	ldr	r3, [pc, #456]	; (800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f003 0304 	and.w	r3, r3, #4
 800c48e:	2b04      	cmp	r3, #4
 800c490:	d109      	bne.n	800c4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c492:	4b6f      	ldr	r3, [pc, #444]	; (800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	08db      	lsrs	r3, r3, #3
 800c498:	f003 0303 	and.w	r3, r3, #3
 800c49c:	4a6d      	ldr	r2, [pc, #436]	; (800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c49e:	fa22 f303 	lsr.w	r3, r2, r3
 800c4a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4a4:	e1b9      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4aa:	e1b6      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c4ac:	4b68      	ldr	r3, [pc, #416]	; (800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4b8:	d102      	bne.n	800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800c4ba:	4b67      	ldr	r3, [pc, #412]	; (800c658 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c4bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4be:	e1ac      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4c4:	e1a9      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c4c6:	4b62      	ldr	r3, [pc, #392]	; (800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4d2:	d102      	bne.n	800c4da <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800c4d4:	4b61      	ldr	r3, [pc, #388]	; (800c65c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4d8:	e19f      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4de:	e19c      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4e4:	e199      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c4e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4ea:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c4ee:	430b      	orrs	r3, r1
 800c4f0:	d173      	bne.n	800c5da <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c4f2:	4b57      	ldr	r3, [pc, #348]	; (800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c4f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c4fa:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c502:	d02f      	beq.n	800c564 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800c504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c506:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c50a:	d863      	bhi.n	800c5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800c50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d004      	beq.n	800c51c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800c512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c518:	d012      	beq.n	800c540 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800c51a:	e05b      	b.n	800c5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c51c:	4b4c      	ldr	r3, [pc, #304]	; (800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c524:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c528:	d107      	bne.n	800c53a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c52a:	f107 0318 	add.w	r3, r7, #24
 800c52e:	4618      	mov	r0, r3
 800c530:	f000 f996 	bl	800c860 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c534:	69bb      	ldr	r3, [r7, #24]
 800c536:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c538:	e16f      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c53a:	2300      	movs	r3, #0
 800c53c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c53e:	e16c      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c540:	4b43      	ldr	r3, [pc, #268]	; (800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c548:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c54c:	d107      	bne.n	800c55e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c54e:	f107 030c 	add.w	r3, r7, #12
 800c552:	4618      	mov	r0, r3
 800c554:	f000 fad8 	bl	800cb08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c55c:	e15d      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c55e:	2300      	movs	r3, #0
 800c560:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c562:	e15a      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c564:	4b3a      	ldr	r3, [pc, #232]	; (800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c568:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c56c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c56e:	4b38      	ldr	r3, [pc, #224]	; (800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	f003 0304 	and.w	r3, r3, #4
 800c576:	2b04      	cmp	r3, #4
 800c578:	d10c      	bne.n	800c594 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800c57a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d109      	bne.n	800c594 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c580:	4b33      	ldr	r3, [pc, #204]	; (800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	08db      	lsrs	r3, r3, #3
 800c586:	f003 0303 	and.w	r3, r3, #3
 800c58a:	4a32      	ldr	r2, [pc, #200]	; (800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c58c:	fa22 f303 	lsr.w	r3, r2, r3
 800c590:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c592:	e01e      	b.n	800c5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c594:	4b2e      	ldr	r3, [pc, #184]	; (800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c59c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5a0:	d106      	bne.n	800c5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800c5a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c5a8:	d102      	bne.n	800c5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c5aa:	4b2b      	ldr	r3, [pc, #172]	; (800c658 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c5ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5ae:	e010      	b.n	800c5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c5b0:	4b27      	ldr	r3, [pc, #156]	; (800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5bc:	d106      	bne.n	800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800c5be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5c4:	d102      	bne.n	800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c5c6:	4b25      	ldr	r3, [pc, #148]	; (800c65c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c5c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5ca:	e002      	b.n	800c5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c5d0:	e123      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c5d2:	e122      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5d8:	e11f      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c5da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5de:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c5e2:	430b      	orrs	r3, r1
 800c5e4:	d13c      	bne.n	800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c5e6:	4b1a      	ldr	r3, [pc, #104]	; (800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c5e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c5ee:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d004      	beq.n	800c600 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800c5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5fc:	d012      	beq.n	800c624 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800c5fe:	e023      	b.n	800c648 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c600:	4b13      	ldr	r3, [pc, #76]	; (800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c608:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c60c:	d107      	bne.n	800c61e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c60e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c612:	4618      	mov	r0, r3
 800c614:	f000 fbcc 	bl	800cdb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c61a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c61c:	e0fd      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c61e:	2300      	movs	r3, #0
 800c620:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c622:	e0fa      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c624:	4b0a      	ldr	r3, [pc, #40]	; (800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c62c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c630:	d107      	bne.n	800c642 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c632:	f107 0318 	add.w	r3, r7, #24
 800c636:	4618      	mov	r0, r3
 800c638:	f000 f912 	bl	800c860 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c63c:	6a3b      	ldr	r3, [r7, #32]
 800c63e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c640:	e0eb      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c642:	2300      	movs	r3, #0
 800c644:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c646:	e0e8      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c648:	2300      	movs	r3, #0
 800c64a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c64c:	e0e5      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c64e:	bf00      	nop
 800c650:	58024400 	.word	0x58024400
 800c654:	03d09000 	.word	0x03d09000
 800c658:	003d0900 	.word	0x003d0900
 800c65c:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c660:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c664:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c668:	430b      	orrs	r3, r1
 800c66a:	f040 8085 	bne.w	800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c66e:	4b6d      	ldr	r3, [pc, #436]	; (800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c672:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c676:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c67a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c67e:	d06b      	beq.n	800c758 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800c680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c682:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c686:	d874      	bhi.n	800c772 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c68a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c68e:	d056      	beq.n	800c73e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800c690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c696:	d86c      	bhi.n	800c772 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c69a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c69e:	d03b      	beq.n	800c718 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800c6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c6a6:	d864      	bhi.n	800c772 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6ae:	d021      	beq.n	800c6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800c6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6b6:	d85c      	bhi.n	800c772 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d004      	beq.n	800c6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800c6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c6c4:	d004      	beq.n	800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800c6c6:	e054      	b.n	800c772 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c6c8:	f000 f8b4 	bl	800c834 <HAL_RCCEx_GetD3PCLK1Freq>
 800c6cc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c6ce:	e0a4      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c6d0:	4b54      	ldr	r3, [pc, #336]	; (800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c6dc:	d107      	bne.n	800c6ee <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6de:	f107 0318 	add.w	r3, r7, #24
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f000 f8bc 	bl	800c860 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c6e8:	69fb      	ldr	r3, [r7, #28]
 800c6ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6ec:	e095      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6f2:	e092      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c6f4:	4b4b      	ldr	r3, [pc, #300]	; (800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c6fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c700:	d107      	bne.n	800c712 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c702:	f107 030c 	add.w	r3, r7, #12
 800c706:	4618      	mov	r0, r3
 800c708:	f000 f9fe 	bl	800cb08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c70c:	693b      	ldr	r3, [r7, #16]
 800c70e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c710:	e083      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c712:	2300      	movs	r3, #0
 800c714:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c716:	e080      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c718:	4b42      	ldr	r3, [pc, #264]	; (800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	f003 0304 	and.w	r3, r3, #4
 800c720:	2b04      	cmp	r3, #4
 800c722:	d109      	bne.n	800c738 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c724:	4b3f      	ldr	r3, [pc, #252]	; (800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	08db      	lsrs	r3, r3, #3
 800c72a:	f003 0303 	and.w	r3, r3, #3
 800c72e:	4a3e      	ldr	r2, [pc, #248]	; (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c730:	fa22 f303 	lsr.w	r3, r2, r3
 800c734:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c736:	e070      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c738:	2300      	movs	r3, #0
 800c73a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c73c:	e06d      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c73e:	4b39      	ldr	r3, [pc, #228]	; (800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c74a:	d102      	bne.n	800c752 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800c74c:	4b37      	ldr	r3, [pc, #220]	; (800c82c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c74e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c750:	e063      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c752:	2300      	movs	r3, #0
 800c754:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c756:	e060      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c758:	4b32      	ldr	r3, [pc, #200]	; (800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c760:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c764:	d102      	bne.n	800c76c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800c766:	4b32      	ldr	r3, [pc, #200]	; (800c830 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c768:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c76a:	e056      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c76c:	2300      	movs	r3, #0
 800c76e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c770:	e053      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c772:	2300      	movs	r3, #0
 800c774:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c776:	e050      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c778:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c77c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c780:	430b      	orrs	r3, r1
 800c782:	d148      	bne.n	800c816 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c784:	4b27      	ldr	r3, [pc, #156]	; (800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c788:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c78c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c78e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c790:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c794:	d02a      	beq.n	800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c798:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c79c:	d838      	bhi.n	800c810 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d004      	beq.n	800c7ae <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c7aa:	d00d      	beq.n	800c7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800c7ac:	e030      	b.n	800c810 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c7ae:	4b1d      	ldr	r3, [pc, #116]	; (800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c7ba:	d102      	bne.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800c7bc:	4b1c      	ldr	r3, [pc, #112]	; (800c830 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c7be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7c0:	e02b      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7c6:	e028      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c7c8:	4b16      	ldr	r3, [pc, #88]	; (800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c7d4:	d107      	bne.n	800c7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c7d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f000 fae8 	bl	800cdb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7e4:	e019      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7ea:	e016      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c7ec:	4b0d      	ldr	r3, [pc, #52]	; (800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c7f8:	d107      	bne.n	800c80a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7fa:	f107 0318 	add.w	r3, r7, #24
 800c7fe:	4618      	mov	r0, r3
 800c800:	f000 f82e 	bl	800c860 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c804:	69fb      	ldr	r3, [r7, #28]
 800c806:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c808:	e007      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c80a:	2300      	movs	r3, #0
 800c80c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c80e:	e004      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c810:	2300      	movs	r3, #0
 800c812:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c814:	e001      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800c816:	2300      	movs	r3, #0
 800c818:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c81a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3740      	adds	r7, #64	; 0x40
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}
 800c824:	58024400 	.word	0x58024400
 800c828:	03d09000 	.word	0x03d09000
 800c82c:	003d0900 	.word	0x003d0900
 800c830:	02faf080 	.word	0x02faf080

0800c834 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c838:	f7fe f92e 	bl	800aa98 <HAL_RCC_GetHCLKFreq>
 800c83c:	4602      	mov	r2, r0
 800c83e:	4b06      	ldr	r3, [pc, #24]	; (800c858 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c840:	6a1b      	ldr	r3, [r3, #32]
 800c842:	091b      	lsrs	r3, r3, #4
 800c844:	f003 0307 	and.w	r3, r3, #7
 800c848:	4904      	ldr	r1, [pc, #16]	; (800c85c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c84a:	5ccb      	ldrb	r3, [r1, r3]
 800c84c:	f003 031f 	and.w	r3, r3, #31
 800c850:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c854:	4618      	mov	r0, r3
 800c856:	bd80      	pop	{r7, pc}
 800c858:	58024400 	.word	0x58024400
 800c85c:	08018c8c 	.word	0x08018c8c

0800c860 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c860:	b480      	push	{r7}
 800c862:	b089      	sub	sp, #36	; 0x24
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c868:	4ba1      	ldr	r3, [pc, #644]	; (800caf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c86a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c86c:	f003 0303 	and.w	r3, r3, #3
 800c870:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c872:	4b9f      	ldr	r3, [pc, #636]	; (800caf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c876:	0b1b      	lsrs	r3, r3, #12
 800c878:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c87c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c87e:	4b9c      	ldr	r3, [pc, #624]	; (800caf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c882:	091b      	lsrs	r3, r3, #4
 800c884:	f003 0301 	and.w	r3, r3, #1
 800c888:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c88a:	4b99      	ldr	r3, [pc, #612]	; (800caf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c88c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c88e:	08db      	lsrs	r3, r3, #3
 800c890:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c894:	693a      	ldr	r2, [r7, #16]
 800c896:	fb02 f303 	mul.w	r3, r2, r3
 800c89a:	ee07 3a90 	vmov	s15, r3
 800c89e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	f000 8111 	beq.w	800cad0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c8ae:	69bb      	ldr	r3, [r7, #24]
 800c8b0:	2b02      	cmp	r3, #2
 800c8b2:	f000 8083 	beq.w	800c9bc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c8b6:	69bb      	ldr	r3, [r7, #24]
 800c8b8:	2b02      	cmp	r3, #2
 800c8ba:	f200 80a1 	bhi.w	800ca00 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c8be:	69bb      	ldr	r3, [r7, #24]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d003      	beq.n	800c8cc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c8c4:	69bb      	ldr	r3, [r7, #24]
 800c8c6:	2b01      	cmp	r3, #1
 800c8c8:	d056      	beq.n	800c978 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c8ca:	e099      	b.n	800ca00 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c8cc:	4b88      	ldr	r3, [pc, #544]	; (800caf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	f003 0320 	and.w	r3, r3, #32
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d02d      	beq.n	800c934 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c8d8:	4b85      	ldr	r3, [pc, #532]	; (800caf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	08db      	lsrs	r3, r3, #3
 800c8de:	f003 0303 	and.w	r3, r3, #3
 800c8e2:	4a84      	ldr	r2, [pc, #528]	; (800caf4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c8e4:	fa22 f303 	lsr.w	r3, r2, r3
 800c8e8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	ee07 3a90 	vmov	s15, r3
 800c8f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	ee07 3a90 	vmov	s15, r3
 800c8fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c902:	4b7b      	ldr	r3, [pc, #492]	; (800caf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c90a:	ee07 3a90 	vmov	s15, r3
 800c90e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c912:	ed97 6a03 	vldr	s12, [r7, #12]
 800c916:	eddf 5a78 	vldr	s11, [pc, #480]	; 800caf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c91a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c91e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c922:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c92a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c92e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c932:	e087      	b.n	800ca44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	ee07 3a90 	vmov	s15, r3
 800c93a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c93e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cafc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c946:	4b6a      	ldr	r3, [pc, #424]	; (800caf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c94a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c94e:	ee07 3a90 	vmov	s15, r3
 800c952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c956:	ed97 6a03 	vldr	s12, [r7, #12]
 800c95a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800caf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c95e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c96a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c96e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c972:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c976:	e065      	b.n	800ca44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c978:	697b      	ldr	r3, [r7, #20]
 800c97a:	ee07 3a90 	vmov	s15, r3
 800c97e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c982:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cb00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c98a:	4b59      	ldr	r3, [pc, #356]	; (800caf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c98c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c98e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c992:	ee07 3a90 	vmov	s15, r3
 800c996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c99a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c99e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800caf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c9a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9ba:	e043      	b.n	800ca44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	ee07 3a90 	vmov	s15, r3
 800c9c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cb04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c9ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9ce:	4b48      	ldr	r3, [pc, #288]	; (800caf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9d6:	ee07 3a90 	vmov	s15, r3
 800c9da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9de:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800caf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c9e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9fe:	e021      	b.n	800ca44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca00:	697b      	ldr	r3, [r7, #20]
 800ca02:	ee07 3a90 	vmov	s15, r3
 800ca06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca0a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cb00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ca0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca12:	4b37      	ldr	r3, [pc, #220]	; (800caf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca1a:	ee07 3a90 	vmov	s15, r3
 800ca1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca22:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca26:	eddf 5a34 	vldr	s11, [pc, #208]	; 800caf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca42:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ca44:	4b2a      	ldr	r3, [pc, #168]	; (800caf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca48:	0a5b      	lsrs	r3, r3, #9
 800ca4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca4e:	ee07 3a90 	vmov	s15, r3
 800ca52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca5e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca6a:	ee17 2a90 	vmov	r2, s15
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ca72:	4b1f      	ldr	r3, [pc, #124]	; (800caf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca76:	0c1b      	lsrs	r3, r3, #16
 800ca78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca7c:	ee07 3a90 	vmov	s15, r3
 800ca80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca88:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca8c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca98:	ee17 2a90 	vmov	r2, s15
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800caa0:	4b13      	ldr	r3, [pc, #76]	; (800caf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800caa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caa4:	0e1b      	lsrs	r3, r3, #24
 800caa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800caaa:	ee07 3a90 	vmov	s15, r3
 800caae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cab2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cab6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800caba:	edd7 6a07 	vldr	s13, [r7, #28]
 800cabe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cac2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cac6:	ee17 2a90 	vmov	r2, s15
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cace:	e008      	b.n	800cae2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2200      	movs	r2, #0
 800cad4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2200      	movs	r2, #0
 800cada:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2200      	movs	r2, #0
 800cae0:	609a      	str	r2, [r3, #8]
}
 800cae2:	bf00      	nop
 800cae4:	3724      	adds	r7, #36	; 0x24
 800cae6:	46bd      	mov	sp, r7
 800cae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caec:	4770      	bx	lr
 800caee:	bf00      	nop
 800caf0:	58024400 	.word	0x58024400
 800caf4:	03d09000 	.word	0x03d09000
 800caf8:	46000000 	.word	0x46000000
 800cafc:	4c742400 	.word	0x4c742400
 800cb00:	4a742400 	.word	0x4a742400
 800cb04:	4c3ebc20 	.word	0x4c3ebc20

0800cb08 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b089      	sub	sp, #36	; 0x24
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cb10:	4ba1      	ldr	r3, [pc, #644]	; (800cd98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb14:	f003 0303 	and.w	r3, r3, #3
 800cb18:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cb1a:	4b9f      	ldr	r3, [pc, #636]	; (800cd98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb1e:	0d1b      	lsrs	r3, r3, #20
 800cb20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb24:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cb26:	4b9c      	ldr	r3, [pc, #624]	; (800cd98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb2a:	0a1b      	lsrs	r3, r3, #8
 800cb2c:	f003 0301 	and.w	r3, r3, #1
 800cb30:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cb32:	4b99      	ldr	r3, [pc, #612]	; (800cd98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb36:	08db      	lsrs	r3, r3, #3
 800cb38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cb3c:	693a      	ldr	r2, [r7, #16]
 800cb3e:	fb02 f303 	mul.w	r3, r2, r3
 800cb42:	ee07 3a90 	vmov	s15, r3
 800cb46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cb4e:	697b      	ldr	r3, [r7, #20]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	f000 8111 	beq.w	800cd78 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cb56:	69bb      	ldr	r3, [r7, #24]
 800cb58:	2b02      	cmp	r3, #2
 800cb5a:	f000 8083 	beq.w	800cc64 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cb5e:	69bb      	ldr	r3, [r7, #24]
 800cb60:	2b02      	cmp	r3, #2
 800cb62:	f200 80a1 	bhi.w	800cca8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cb66:	69bb      	ldr	r3, [r7, #24]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d003      	beq.n	800cb74 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cb6c:	69bb      	ldr	r3, [r7, #24]
 800cb6e:	2b01      	cmp	r3, #1
 800cb70:	d056      	beq.n	800cc20 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cb72:	e099      	b.n	800cca8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb74:	4b88      	ldr	r3, [pc, #544]	; (800cd98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	f003 0320 	and.w	r3, r3, #32
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d02d      	beq.n	800cbdc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb80:	4b85      	ldr	r3, [pc, #532]	; (800cd98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	08db      	lsrs	r3, r3, #3
 800cb86:	f003 0303 	and.w	r3, r3, #3
 800cb8a:	4a84      	ldr	r2, [pc, #528]	; (800cd9c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cb8c:	fa22 f303 	lsr.w	r3, r2, r3
 800cb90:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	ee07 3a90 	vmov	s15, r3
 800cb98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb9c:	697b      	ldr	r3, [r7, #20]
 800cb9e:	ee07 3a90 	vmov	s15, r3
 800cba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbaa:	4b7b      	ldr	r3, [pc, #492]	; (800cd98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbb2:	ee07 3a90 	vmov	s15, r3
 800cbb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbba:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbbe:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cda0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cbc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbd6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cbda:	e087      	b.n	800ccec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cbdc:	697b      	ldr	r3, [r7, #20]
 800cbde:	ee07 3a90 	vmov	s15, r3
 800cbe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbe6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cda4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cbea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbee:	4b6a      	ldr	r3, [pc, #424]	; (800cd98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbf6:	ee07 3a90 	vmov	s15, r3
 800cbfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbfe:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc02:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cda0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cc06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc1e:	e065      	b.n	800ccec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cc20:	697b      	ldr	r3, [r7, #20]
 800cc22:	ee07 3a90 	vmov	s15, r3
 800cc26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc2a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cda8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cc2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc32:	4b59      	ldr	r3, [pc, #356]	; (800cd98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc3a:	ee07 3a90 	vmov	s15, r3
 800cc3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc42:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc46:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cda0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cc4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc62:	e043      	b.n	800ccec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	ee07 3a90 	vmov	s15, r3
 800cc6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc6e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cdac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cc72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc76:	4b48      	ldr	r3, [pc, #288]	; (800cd98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc7e:	ee07 3a90 	vmov	s15, r3
 800cc82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc86:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc8a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cda0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cc8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cca2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cca6:	e021      	b.n	800ccec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	ee07 3a90 	vmov	s15, r3
 800ccae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccb2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cda8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ccb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccba:	4b37      	ldr	r3, [pc, #220]	; (800cd98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccc2:	ee07 3a90 	vmov	s15, r3
 800ccc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccca:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccce:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cda0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ccd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cce6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ccea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ccec:	4b2a      	ldr	r3, [pc, #168]	; (800cd98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccf0:	0a5b      	lsrs	r3, r3, #9
 800ccf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccf6:	ee07 3a90 	vmov	s15, r3
 800ccfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd02:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd06:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd12:	ee17 2a90 	vmov	r2, s15
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800cd1a:	4b1f      	ldr	r3, [pc, #124]	; (800cd98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd1e:	0c1b      	lsrs	r3, r3, #16
 800cd20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd24:	ee07 3a90 	vmov	s15, r3
 800cd28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd30:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd34:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd40:	ee17 2a90 	vmov	r2, s15
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800cd48:	4b13      	ldr	r3, [pc, #76]	; (800cd98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd4c:	0e1b      	lsrs	r3, r3, #24
 800cd4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd52:	ee07 3a90 	vmov	s15, r3
 800cd56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd62:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd6e:	ee17 2a90 	vmov	r2, s15
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cd76:	e008      	b.n	800cd8a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2200      	movs	r2, #0
 800cd82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2200      	movs	r2, #0
 800cd88:	609a      	str	r2, [r3, #8]
}
 800cd8a:	bf00      	nop
 800cd8c:	3724      	adds	r7, #36	; 0x24
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd94:	4770      	bx	lr
 800cd96:	bf00      	nop
 800cd98:	58024400 	.word	0x58024400
 800cd9c:	03d09000 	.word	0x03d09000
 800cda0:	46000000 	.word	0x46000000
 800cda4:	4c742400 	.word	0x4c742400
 800cda8:	4a742400 	.word	0x4a742400
 800cdac:	4c3ebc20 	.word	0x4c3ebc20

0800cdb0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800cdb0:	b480      	push	{r7}
 800cdb2:	b089      	sub	sp, #36	; 0x24
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cdb8:	4ba0      	ldr	r3, [pc, #640]	; (800d03c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cdba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdbc:	f003 0303 	and.w	r3, r3, #3
 800cdc0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800cdc2:	4b9e      	ldr	r3, [pc, #632]	; (800d03c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cdc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdc6:	091b      	lsrs	r3, r3, #4
 800cdc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cdcc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cdce:	4b9b      	ldr	r3, [pc, #620]	; (800d03c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cdd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdd2:	f003 0301 	and.w	r3, r3, #1
 800cdd6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cdd8:	4b98      	ldr	r3, [pc, #608]	; (800d03c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cdda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cddc:	08db      	lsrs	r3, r3, #3
 800cdde:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cde2:	693a      	ldr	r2, [r7, #16]
 800cde4:	fb02 f303 	mul.w	r3, r2, r3
 800cde8:	ee07 3a90 	vmov	s15, r3
 800cdec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdf0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800cdf4:	697b      	ldr	r3, [r7, #20]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	f000 8111 	beq.w	800d01e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800cdfc:	69bb      	ldr	r3, [r7, #24]
 800cdfe:	2b02      	cmp	r3, #2
 800ce00:	f000 8083 	beq.w	800cf0a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ce04:	69bb      	ldr	r3, [r7, #24]
 800ce06:	2b02      	cmp	r3, #2
 800ce08:	f200 80a1 	bhi.w	800cf4e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ce0c:	69bb      	ldr	r3, [r7, #24]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d003      	beq.n	800ce1a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ce12:	69bb      	ldr	r3, [r7, #24]
 800ce14:	2b01      	cmp	r3, #1
 800ce16:	d056      	beq.n	800cec6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ce18:	e099      	b.n	800cf4e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ce1a:	4b88      	ldr	r3, [pc, #544]	; (800d03c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	f003 0320 	and.w	r3, r3, #32
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d02d      	beq.n	800ce82 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce26:	4b85      	ldr	r3, [pc, #532]	; (800d03c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	08db      	lsrs	r3, r3, #3
 800ce2c:	f003 0303 	and.w	r3, r3, #3
 800ce30:	4a83      	ldr	r2, [pc, #524]	; (800d040 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ce32:	fa22 f303 	lsr.w	r3, r2, r3
 800ce36:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	ee07 3a90 	vmov	s15, r3
 800ce3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	ee07 3a90 	vmov	s15, r3
 800ce48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce50:	4b7a      	ldr	r3, [pc, #488]	; (800d03c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce58:	ee07 3a90 	vmov	s15, r3
 800ce5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce60:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce64:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d044 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ce68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce78:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce7c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ce80:	e087      	b.n	800cf92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ce82:	697b      	ldr	r3, [r7, #20]
 800ce84:	ee07 3a90 	vmov	s15, r3
 800ce88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce8c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d048 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ce90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce94:	4b69      	ldr	r3, [pc, #420]	; (800d03c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce9c:	ee07 3a90 	vmov	s15, r3
 800cea0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cea4:	ed97 6a03 	vldr	s12, [r7, #12]
 800cea8:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d044 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ceac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ceb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ceb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ceb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cec0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cec4:	e065      	b.n	800cf92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	ee07 3a90 	vmov	s15, r3
 800cecc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ced0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d04c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800ced4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ced8:	4b58      	ldr	r3, [pc, #352]	; (800d03c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ceda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cedc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cee0:	ee07 3a90 	vmov	s15, r3
 800cee4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cee8:	ed97 6a03 	vldr	s12, [r7, #12]
 800ceec:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d044 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cef0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cef4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cef8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cefc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf04:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf08:	e043      	b.n	800cf92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf0a:	697b      	ldr	r3, [r7, #20]
 800cf0c:	ee07 3a90 	vmov	s15, r3
 800cf10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf14:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d050 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800cf18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf1c:	4b47      	ldr	r3, [pc, #284]	; (800d03c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf24:	ee07 3a90 	vmov	s15, r3
 800cf28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf2c:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf30:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d044 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cf34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf48:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf4c:	e021      	b.n	800cf92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	ee07 3a90 	vmov	s15, r3
 800cf54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf58:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d048 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cf5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf60:	4b36      	ldr	r3, [pc, #216]	; (800d03c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf68:	ee07 3a90 	vmov	s15, r3
 800cf6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf70:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf74:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d044 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cf78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf8c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf90:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800cf92:	4b2a      	ldr	r3, [pc, #168]	; (800d03c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf96:	0a5b      	lsrs	r3, r3, #9
 800cf98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf9c:	ee07 3a90 	vmov	s15, r3
 800cfa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfa4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cfa8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cfac:	edd7 6a07 	vldr	s13, [r7, #28]
 800cfb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cfb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cfb8:	ee17 2a90 	vmov	r2, s15
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800cfc0:	4b1e      	ldr	r3, [pc, #120]	; (800d03c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cfc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfc4:	0c1b      	lsrs	r3, r3, #16
 800cfc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfca:	ee07 3a90 	vmov	s15, r3
 800cfce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cfd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cfda:	edd7 6a07 	vldr	s13, [r7, #28]
 800cfde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cfe2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cfe6:	ee17 2a90 	vmov	r2, s15
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800cfee:	4b13      	ldr	r3, [pc, #76]	; (800d03c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cff2:	0e1b      	lsrs	r3, r3, #24
 800cff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cff8:	ee07 3a90 	vmov	s15, r3
 800cffc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d000:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d004:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d008:	edd7 6a07 	vldr	s13, [r7, #28]
 800d00c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d010:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d014:	ee17 2a90 	vmov	r2, s15
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d01c:	e008      	b.n	800d030 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2200      	movs	r2, #0
 800d022:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2200      	movs	r2, #0
 800d028:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	2200      	movs	r2, #0
 800d02e:	609a      	str	r2, [r3, #8]
}
 800d030:	bf00      	nop
 800d032:	3724      	adds	r7, #36	; 0x24
 800d034:	46bd      	mov	sp, r7
 800d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03a:	4770      	bx	lr
 800d03c:	58024400 	.word	0x58024400
 800d040:	03d09000 	.word	0x03d09000
 800d044:	46000000 	.word	0x46000000
 800d048:	4c742400 	.word	0x4c742400
 800d04c:	4a742400 	.word	0x4a742400
 800d050:	4c3ebc20 	.word	0x4c3ebc20

0800d054 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b084      	sub	sp, #16
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
 800d05c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d05e:	2300      	movs	r3, #0
 800d060:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d062:	4b53      	ldr	r3, [pc, #332]	; (800d1b0 <RCCEx_PLL2_Config+0x15c>)
 800d064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d066:	f003 0303 	and.w	r3, r3, #3
 800d06a:	2b03      	cmp	r3, #3
 800d06c:	d101      	bne.n	800d072 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d06e:	2301      	movs	r3, #1
 800d070:	e099      	b.n	800d1a6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d072:	4b4f      	ldr	r3, [pc, #316]	; (800d1b0 <RCCEx_PLL2_Config+0x15c>)
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	4a4e      	ldr	r2, [pc, #312]	; (800d1b0 <RCCEx_PLL2_Config+0x15c>)
 800d078:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d07c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d07e:	f7f6 fe7b 	bl	8003d78 <HAL_GetTick>
 800d082:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d084:	e008      	b.n	800d098 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d086:	f7f6 fe77 	bl	8003d78 <HAL_GetTick>
 800d08a:	4602      	mov	r2, r0
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	1ad3      	subs	r3, r2, r3
 800d090:	2b02      	cmp	r3, #2
 800d092:	d901      	bls.n	800d098 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d094:	2303      	movs	r3, #3
 800d096:	e086      	b.n	800d1a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d098:	4b45      	ldr	r3, [pc, #276]	; (800d1b0 <RCCEx_PLL2_Config+0x15c>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d1f0      	bne.n	800d086 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d0a4:	4b42      	ldr	r3, [pc, #264]	; (800d1b0 <RCCEx_PLL2_Config+0x15c>)
 800d0a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0a8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	031b      	lsls	r3, r3, #12
 800d0b2:	493f      	ldr	r1, [pc, #252]	; (800d1b0 <RCCEx_PLL2_Config+0x15c>)
 800d0b4:	4313      	orrs	r3, r2
 800d0b6:	628b      	str	r3, [r1, #40]	; 0x28
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	685b      	ldr	r3, [r3, #4]
 800d0bc:	3b01      	subs	r3, #1
 800d0be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	689b      	ldr	r3, [r3, #8]
 800d0c6:	3b01      	subs	r3, #1
 800d0c8:	025b      	lsls	r3, r3, #9
 800d0ca:	b29b      	uxth	r3, r3
 800d0cc:	431a      	orrs	r2, r3
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	68db      	ldr	r3, [r3, #12]
 800d0d2:	3b01      	subs	r3, #1
 800d0d4:	041b      	lsls	r3, r3, #16
 800d0d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d0da:	431a      	orrs	r2, r3
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	691b      	ldr	r3, [r3, #16]
 800d0e0:	3b01      	subs	r3, #1
 800d0e2:	061b      	lsls	r3, r3, #24
 800d0e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d0e8:	4931      	ldr	r1, [pc, #196]	; (800d1b0 <RCCEx_PLL2_Config+0x15c>)
 800d0ea:	4313      	orrs	r3, r2
 800d0ec:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d0ee:	4b30      	ldr	r3, [pc, #192]	; (800d1b0 <RCCEx_PLL2_Config+0x15c>)
 800d0f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	695b      	ldr	r3, [r3, #20]
 800d0fa:	492d      	ldr	r1, [pc, #180]	; (800d1b0 <RCCEx_PLL2_Config+0x15c>)
 800d0fc:	4313      	orrs	r3, r2
 800d0fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d100:	4b2b      	ldr	r3, [pc, #172]	; (800d1b0 <RCCEx_PLL2_Config+0x15c>)
 800d102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d104:	f023 0220 	bic.w	r2, r3, #32
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	699b      	ldr	r3, [r3, #24]
 800d10c:	4928      	ldr	r1, [pc, #160]	; (800d1b0 <RCCEx_PLL2_Config+0x15c>)
 800d10e:	4313      	orrs	r3, r2
 800d110:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d112:	4b27      	ldr	r3, [pc, #156]	; (800d1b0 <RCCEx_PLL2_Config+0x15c>)
 800d114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d116:	4a26      	ldr	r2, [pc, #152]	; (800d1b0 <RCCEx_PLL2_Config+0x15c>)
 800d118:	f023 0310 	bic.w	r3, r3, #16
 800d11c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d11e:	4b24      	ldr	r3, [pc, #144]	; (800d1b0 <RCCEx_PLL2_Config+0x15c>)
 800d120:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d122:	4b24      	ldr	r3, [pc, #144]	; (800d1b4 <RCCEx_PLL2_Config+0x160>)
 800d124:	4013      	ands	r3, r2
 800d126:	687a      	ldr	r2, [r7, #4]
 800d128:	69d2      	ldr	r2, [r2, #28]
 800d12a:	00d2      	lsls	r2, r2, #3
 800d12c:	4920      	ldr	r1, [pc, #128]	; (800d1b0 <RCCEx_PLL2_Config+0x15c>)
 800d12e:	4313      	orrs	r3, r2
 800d130:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d132:	4b1f      	ldr	r3, [pc, #124]	; (800d1b0 <RCCEx_PLL2_Config+0x15c>)
 800d134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d136:	4a1e      	ldr	r2, [pc, #120]	; (800d1b0 <RCCEx_PLL2_Config+0x15c>)
 800d138:	f043 0310 	orr.w	r3, r3, #16
 800d13c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d106      	bne.n	800d152 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d144:	4b1a      	ldr	r3, [pc, #104]	; (800d1b0 <RCCEx_PLL2_Config+0x15c>)
 800d146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d148:	4a19      	ldr	r2, [pc, #100]	; (800d1b0 <RCCEx_PLL2_Config+0x15c>)
 800d14a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d14e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d150:	e00f      	b.n	800d172 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	2b01      	cmp	r3, #1
 800d156:	d106      	bne.n	800d166 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d158:	4b15      	ldr	r3, [pc, #84]	; (800d1b0 <RCCEx_PLL2_Config+0x15c>)
 800d15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d15c:	4a14      	ldr	r2, [pc, #80]	; (800d1b0 <RCCEx_PLL2_Config+0x15c>)
 800d15e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d162:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d164:	e005      	b.n	800d172 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d166:	4b12      	ldr	r3, [pc, #72]	; (800d1b0 <RCCEx_PLL2_Config+0x15c>)
 800d168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d16a:	4a11      	ldr	r2, [pc, #68]	; (800d1b0 <RCCEx_PLL2_Config+0x15c>)
 800d16c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d170:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d172:	4b0f      	ldr	r3, [pc, #60]	; (800d1b0 <RCCEx_PLL2_Config+0x15c>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	4a0e      	ldr	r2, [pc, #56]	; (800d1b0 <RCCEx_PLL2_Config+0x15c>)
 800d178:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d17c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d17e:	f7f6 fdfb 	bl	8003d78 <HAL_GetTick>
 800d182:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d184:	e008      	b.n	800d198 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d186:	f7f6 fdf7 	bl	8003d78 <HAL_GetTick>
 800d18a:	4602      	mov	r2, r0
 800d18c:	68bb      	ldr	r3, [r7, #8]
 800d18e:	1ad3      	subs	r3, r2, r3
 800d190:	2b02      	cmp	r3, #2
 800d192:	d901      	bls.n	800d198 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d194:	2303      	movs	r3, #3
 800d196:	e006      	b.n	800d1a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d198:	4b05      	ldr	r3, [pc, #20]	; (800d1b0 <RCCEx_PLL2_Config+0x15c>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d0f0      	beq.n	800d186 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d1a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3710      	adds	r7, #16
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}
 800d1ae:	bf00      	nop
 800d1b0:	58024400 	.word	0x58024400
 800d1b4:	ffff0007 	.word	0xffff0007

0800d1b8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b084      	sub	sp, #16
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
 800d1c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d1c6:	4b53      	ldr	r3, [pc, #332]	; (800d314 <RCCEx_PLL3_Config+0x15c>)
 800d1c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1ca:	f003 0303 	and.w	r3, r3, #3
 800d1ce:	2b03      	cmp	r3, #3
 800d1d0:	d101      	bne.n	800d1d6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d1d2:	2301      	movs	r3, #1
 800d1d4:	e099      	b.n	800d30a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d1d6:	4b4f      	ldr	r3, [pc, #316]	; (800d314 <RCCEx_PLL3_Config+0x15c>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	4a4e      	ldr	r2, [pc, #312]	; (800d314 <RCCEx_PLL3_Config+0x15c>)
 800d1dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d1e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d1e2:	f7f6 fdc9 	bl	8003d78 <HAL_GetTick>
 800d1e6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d1e8:	e008      	b.n	800d1fc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d1ea:	f7f6 fdc5 	bl	8003d78 <HAL_GetTick>
 800d1ee:	4602      	mov	r2, r0
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	1ad3      	subs	r3, r2, r3
 800d1f4:	2b02      	cmp	r3, #2
 800d1f6:	d901      	bls.n	800d1fc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d1f8:	2303      	movs	r3, #3
 800d1fa:	e086      	b.n	800d30a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d1fc:	4b45      	ldr	r3, [pc, #276]	; (800d314 <RCCEx_PLL3_Config+0x15c>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d204:	2b00      	cmp	r3, #0
 800d206:	d1f0      	bne.n	800d1ea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d208:	4b42      	ldr	r3, [pc, #264]	; (800d314 <RCCEx_PLL3_Config+0x15c>)
 800d20a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d20c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	051b      	lsls	r3, r3, #20
 800d216:	493f      	ldr	r1, [pc, #252]	; (800d314 <RCCEx_PLL3_Config+0x15c>)
 800d218:	4313      	orrs	r3, r2
 800d21a:	628b      	str	r3, [r1, #40]	; 0x28
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	685b      	ldr	r3, [r3, #4]
 800d220:	3b01      	subs	r3, #1
 800d222:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	689b      	ldr	r3, [r3, #8]
 800d22a:	3b01      	subs	r3, #1
 800d22c:	025b      	lsls	r3, r3, #9
 800d22e:	b29b      	uxth	r3, r3
 800d230:	431a      	orrs	r2, r3
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	68db      	ldr	r3, [r3, #12]
 800d236:	3b01      	subs	r3, #1
 800d238:	041b      	lsls	r3, r3, #16
 800d23a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d23e:	431a      	orrs	r2, r3
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	691b      	ldr	r3, [r3, #16]
 800d244:	3b01      	subs	r3, #1
 800d246:	061b      	lsls	r3, r3, #24
 800d248:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d24c:	4931      	ldr	r1, [pc, #196]	; (800d314 <RCCEx_PLL3_Config+0x15c>)
 800d24e:	4313      	orrs	r3, r2
 800d250:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d252:	4b30      	ldr	r3, [pc, #192]	; (800d314 <RCCEx_PLL3_Config+0x15c>)
 800d254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d256:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	695b      	ldr	r3, [r3, #20]
 800d25e:	492d      	ldr	r1, [pc, #180]	; (800d314 <RCCEx_PLL3_Config+0x15c>)
 800d260:	4313      	orrs	r3, r2
 800d262:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d264:	4b2b      	ldr	r3, [pc, #172]	; (800d314 <RCCEx_PLL3_Config+0x15c>)
 800d266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d268:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	699b      	ldr	r3, [r3, #24]
 800d270:	4928      	ldr	r1, [pc, #160]	; (800d314 <RCCEx_PLL3_Config+0x15c>)
 800d272:	4313      	orrs	r3, r2
 800d274:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d276:	4b27      	ldr	r3, [pc, #156]	; (800d314 <RCCEx_PLL3_Config+0x15c>)
 800d278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d27a:	4a26      	ldr	r2, [pc, #152]	; (800d314 <RCCEx_PLL3_Config+0x15c>)
 800d27c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d280:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d282:	4b24      	ldr	r3, [pc, #144]	; (800d314 <RCCEx_PLL3_Config+0x15c>)
 800d284:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d286:	4b24      	ldr	r3, [pc, #144]	; (800d318 <RCCEx_PLL3_Config+0x160>)
 800d288:	4013      	ands	r3, r2
 800d28a:	687a      	ldr	r2, [r7, #4]
 800d28c:	69d2      	ldr	r2, [r2, #28]
 800d28e:	00d2      	lsls	r2, r2, #3
 800d290:	4920      	ldr	r1, [pc, #128]	; (800d314 <RCCEx_PLL3_Config+0x15c>)
 800d292:	4313      	orrs	r3, r2
 800d294:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d296:	4b1f      	ldr	r3, [pc, #124]	; (800d314 <RCCEx_PLL3_Config+0x15c>)
 800d298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d29a:	4a1e      	ldr	r2, [pc, #120]	; (800d314 <RCCEx_PLL3_Config+0x15c>)
 800d29c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d2a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d106      	bne.n	800d2b6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d2a8:	4b1a      	ldr	r3, [pc, #104]	; (800d314 <RCCEx_PLL3_Config+0x15c>)
 800d2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ac:	4a19      	ldr	r2, [pc, #100]	; (800d314 <RCCEx_PLL3_Config+0x15c>)
 800d2ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d2b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d2b4:	e00f      	b.n	800d2d6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	2b01      	cmp	r3, #1
 800d2ba:	d106      	bne.n	800d2ca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d2bc:	4b15      	ldr	r3, [pc, #84]	; (800d314 <RCCEx_PLL3_Config+0x15c>)
 800d2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2c0:	4a14      	ldr	r2, [pc, #80]	; (800d314 <RCCEx_PLL3_Config+0x15c>)
 800d2c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d2c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d2c8:	e005      	b.n	800d2d6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d2ca:	4b12      	ldr	r3, [pc, #72]	; (800d314 <RCCEx_PLL3_Config+0x15c>)
 800d2cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ce:	4a11      	ldr	r2, [pc, #68]	; (800d314 <RCCEx_PLL3_Config+0x15c>)
 800d2d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d2d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d2d6:	4b0f      	ldr	r3, [pc, #60]	; (800d314 <RCCEx_PLL3_Config+0x15c>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	4a0e      	ldr	r2, [pc, #56]	; (800d314 <RCCEx_PLL3_Config+0x15c>)
 800d2dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d2e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d2e2:	f7f6 fd49 	bl	8003d78 <HAL_GetTick>
 800d2e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d2e8:	e008      	b.n	800d2fc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d2ea:	f7f6 fd45 	bl	8003d78 <HAL_GetTick>
 800d2ee:	4602      	mov	r2, r0
 800d2f0:	68bb      	ldr	r3, [r7, #8]
 800d2f2:	1ad3      	subs	r3, r2, r3
 800d2f4:	2b02      	cmp	r3, #2
 800d2f6:	d901      	bls.n	800d2fc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d2f8:	2303      	movs	r3, #3
 800d2fa:	e006      	b.n	800d30a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d2fc:	4b05      	ldr	r3, [pc, #20]	; (800d314 <RCCEx_PLL3_Config+0x15c>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d304:	2b00      	cmp	r3, #0
 800d306:	d0f0      	beq.n	800d2ea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d308:	7bfb      	ldrb	r3, [r7, #15]
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	3710      	adds	r7, #16
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}
 800d312:	bf00      	nop
 800d314:	58024400 	.word	0x58024400
 800d318:	ffff0007 	.word	0xffff0007

0800d31c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b084      	sub	sp, #16
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d101      	bne.n	800d32e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800d32a:	2301      	movs	r3, #1
 800d32c:	e092      	b.n	800d454 <HAL_RNG_Init+0x138>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	7a5b      	ldrb	r3, [r3, #9]
 800d332:	b2db      	uxtb	r3, r3
 800d334:	2b00      	cmp	r3, #0
 800d336:	d105      	bne.n	800d344 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2200      	movs	r2, #0
 800d33c:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f7f5 fe20 	bl	8002f84 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2202      	movs	r2, #2
 800d348:	725a      	strb	r2, [r3, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	681a      	ldr	r2, [r3, #0]
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	f022 0204 	bic.w	r2, r2, #4
 800d358:	601a      	str	r2, [r3, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	681a      	ldr	r2, [r3, #0]
 800d360:	4b3e      	ldr	r3, [pc, #248]	; (800d45c <HAL_RNG_Init+0x140>)
 800d362:	4013      	ands	r3, r2
 800d364:	687a      	ldr	r2, [r7, #4]
 800d366:	6852      	ldr	r2, [r2, #4]
 800d368:	431a      	orrs	r2, r3
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800d372:	601a      	str	r2, [r3, #0]

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	4a39      	ldr	r2, [pc, #228]	; (800d460 <HAL_RNG_Init+0x144>)
 800d37a:	611a      	str	r2, [r3, #16]
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	f247 2274 	movw	r2, #29300	; 0x7274
 800d384:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	681a      	ldr	r2, [r3, #0]
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800d394:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d396:	f7f6 fcef 	bl	8003d78 <HAL_GetTick>
 800d39a:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800d39c:	e016      	b.n	800d3cc <HAL_RNG_Init+0xb0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800d39e:	f7f6 fceb 	bl	8003d78 <HAL_GetTick>
 800d3a2:	4602      	mov	r2, r0
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	1ad3      	subs	r3, r2, r3
 800d3a8:	2b02      	cmp	r3, #2
 800d3aa:	d90f      	bls.n	800d3cc <HAL_RNG_Init+0xb0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d3b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d3ba:	d107      	bne.n	800d3cc <HAL_RNG_Init+0xb0>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2201      	movs	r2, #1
 800d3c0:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2202      	movs	r2, #2
 800d3c6:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	e043      	b.n	800d454 <HAL_RNG_Init+0x138>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d3d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d3da:	d0e0      	beq.n	800d39e <HAL_RNG_Init+0x82>
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	681a      	ldr	r2, [r3, #0]
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	f042 0204 	orr.w	r2, r2, #4
 800d3ea:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	685b      	ldr	r3, [r3, #4]
 800d3f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3f6:	2b40      	cmp	r3, #64	; 0x40
 800d3f8:	d104      	bne.n	800d404 <HAL_RNG_Init+0xe8>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2204      	movs	r2, #4
 800d3fe:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800d400:	2301      	movs	r3, #1
 800d402:	e027      	b.n	800d454 <HAL_RNG_Init+0x138>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800d404:	f7f6 fcb8 	bl	8003d78 <HAL_GetTick>
 800d408:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800d40a:	e015      	b.n	800d438 <HAL_RNG_Init+0x11c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800d40c:	f7f6 fcb4 	bl	8003d78 <HAL_GetTick>
 800d410:	4602      	mov	r2, r0
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	1ad3      	subs	r3, r2, r3
 800d416:	2b02      	cmp	r3, #2
 800d418:	d90e      	bls.n	800d438 <HAL_RNG_Init+0x11c>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	685b      	ldr	r3, [r3, #4]
 800d420:	f003 0304 	and.w	r3, r3, #4
 800d424:	2b04      	cmp	r3, #4
 800d426:	d107      	bne.n	800d438 <HAL_RNG_Init+0x11c>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2204      	movs	r2, #4
 800d42c:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2202      	movs	r2, #2
 800d432:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800d434:	2301      	movs	r3, #1
 800d436:	e00d      	b.n	800d454 <HAL_RNG_Init+0x138>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	685b      	ldr	r3, [r3, #4]
 800d43e:	f003 0304 	and.w	r3, r3, #4
 800d442:	2b04      	cmp	r3, #4
 800d444:	d0e2      	beq.n	800d40c <HAL_RNG_Init+0xf0>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	2201      	movs	r2, #1
 800d44a:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2200      	movs	r2, #0
 800d450:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800d452:	2300      	movs	r3, #0
}
 800d454:	4618      	mov	r0, r3
 800d456:	3710      	adds	r7, #16
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}
 800d45c:	bfffffdf 	.word	0xbfffffdf
 800d460:	17590abc 	.word	0x17590abc

0800d464 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b084      	sub	sp, #16
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
 800d46c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d46e:	2300      	movs	r3, #0
 800d470:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	7a1b      	ldrb	r3, [r3, #8]
 800d476:	2b01      	cmp	r3, #1
 800d478:	d101      	bne.n	800d47e <HAL_RNG_GenerateRandomNumber+0x1a>
 800d47a:	2302      	movs	r3, #2
 800d47c:	e06d      	b.n	800d55a <HAL_RNG_GenerateRandomNumber+0xf6>
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2201      	movs	r2, #1
 800d482:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	7a5b      	ldrb	r3, [r3, #9]
 800d488:	b2db      	uxtb	r3, r3
 800d48a:	2b01      	cmp	r3, #1
 800d48c:	d15c      	bne.n	800d548 <HAL_RNG_GenerateRandomNumber+0xe4>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	2202      	movs	r2, #2
 800d492:	725a      	strb	r2, [r3, #9]
#if defined(RNG_CR_CONDRST)
    /* Check if there is a seed error */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	685b      	ldr	r3, [r3, #4]
 800d49a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d49e:	2b40      	cmp	r3, #64	; 0x40
 800d4a0:	d10c      	bne.n	800d4bc <HAL_RNG_GenerateRandomNumber+0x58>
    {
      /* Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2208      	movs	r2, #8
 800d4a6:	60da      	str	r2, [r3, #12]
      /* Reset from seed error */
      status = RNG_RecoverSeedError(hrng);
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	f000 f864 	bl	800d576 <RNG_RecoverSeedError>
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_ERROR)
 800d4b2:	7bfb      	ldrb	r3, [r7, #15]
 800d4b4:	2b01      	cmp	r3, #1
 800d4b6:	d101      	bne.n	800d4bc <HAL_RNG_GenerateRandomNumber+0x58>
      {
        return status;
 800d4b8:	7bfb      	ldrb	r3, [r7, #15]
 800d4ba:	e04e      	b.n	800d55a <HAL_RNG_GenerateRandomNumber+0xf6>
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 800d4bc:	f7f6 fc5c 	bl	8003d78 <HAL_GetTick>
 800d4c0:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800d4c2:	e018      	b.n	800d4f6 <HAL_RNG_GenerateRandomNumber+0x92>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800d4c4:	f7f6 fc58 	bl	8003d78 <HAL_GetTick>
 800d4c8:	4602      	mov	r2, r0
 800d4ca:	68bb      	ldr	r3, [r7, #8]
 800d4cc:	1ad3      	subs	r3, r2, r3
 800d4ce:	2b02      	cmp	r3, #2
 800d4d0:	d911      	bls.n	800d4f6 <HAL_RNG_GenerateRandomNumber+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	685b      	ldr	r3, [r3, #4]
 800d4d8:	f003 0301 	and.w	r3, r3, #1
 800d4dc:	2b01      	cmp	r3, #1
 800d4de:	d00a      	beq.n	800d4f6 <HAL_RNG_GenerateRandomNumber+0x92>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2201      	movs	r2, #1
 800d4e4:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2202      	movs	r2, #2
 800d4ea:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 800d4f2:	2301      	movs	r3, #1
 800d4f4:	e031      	b.n	800d55a <HAL_RNG_GenerateRandomNumber+0xf6>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	685b      	ldr	r3, [r3, #4]
 800d4fc:	f003 0301 	and.w	r3, r3, #1
 800d500:	2b01      	cmp	r3, #1
 800d502:	d1df      	bne.n	800d4c4 <HAL_RNG_GenerateRandomNumber+0x60>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	689a      	ldr	r2, [r3, #8]
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	611a      	str	r2, [r3, #16]
#if defined(RNG_CR_CONDRST)
    /* In case of seed error, the value available in the RNG_DR register must not
       be used as it may not have enough entropy */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	685b      	ldr	r3, [r3, #4]
 800d514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d518:	2b40      	cmp	r3, #64	; 0x40
 800d51a:	d10d      	bne.n	800d538 <HAL_RNG_GenerateRandomNumber+0xd4>
    {
      /* Update the error code and status */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2208      	movs	r2, #8
 800d520:	60da      	str	r2, [r3, #12]
      status = HAL_ERROR;
 800d522:	2301      	movs	r3, #1
 800d524:	73fb      	strb	r3, [r7, #15]
      /* Clear bit DRDY */
      CLEAR_BIT(hrng->Instance->SR, RNG_FLAG_DRDY);
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	685a      	ldr	r2, [r3, #4]
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	f022 0201 	bic.w	r2, r2, #1
 800d534:	605a      	str	r2, [r3, #4]
 800d536:	e003      	b.n	800d540 <HAL_RNG_GenerateRandomNumber+0xdc>
    }
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	691a      	ldr	r2, [r3, #16]
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	601a      	str	r2, [r3, #0]
    }
#else
    *random32bit = hrng->RandomNumber;

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2201      	movs	r2, #1
 800d544:	725a      	strb	r2, [r3, #9]
 800d546:	e004      	b.n	800d552 <HAL_RNG_GenerateRandomNumber+0xee>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2204      	movs	r2, #4
 800d54c:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800d54e:	2301      	movs	r3, #1
 800d550:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	2200      	movs	r2, #0
 800d556:	721a      	strb	r2, [r3, #8]

  return status;
 800d558:	7bfb      	ldrb	r3, [r7, #15]
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3710      	adds	r7, #16
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}

0800d562 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 800d562:	b480      	push	{r7}
 800d564:	b083      	sub	sp, #12
 800d566:	af00      	add	r7, sp, #0
 800d568:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 800d56a:	bf00      	nop
 800d56c:	370c      	adds	r7, #12
 800d56e:	46bd      	mov	sp, r7
 800d570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d574:	4770      	bx	lr

0800d576 <RNG_RecoverSeedError>:
  * @brief  RNG sequence to recover from a seed error
  * @param  hrng pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef RNG_RecoverSeedError(RNG_HandleTypeDef *hrng)
{
 800d576:	b580      	push	{r7, lr}
 800d578:	b084      	sub	sp, #16
 800d57a:	af00      	add	r7, sp, #0
 800d57c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d57e:	2300      	movs	r3, #0
 800d580:	60fb      	str	r3, [r7, #12]

  /*Check if seed error current status (SECS)is set */
  if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	685b      	ldr	r3, [r3, #4]
 800d588:	f003 0304 	and.w	r3, r3, #4
 800d58c:	2b04      	cmp	r3, #4
 800d58e:	d008      	beq.n	800d5a2 <RNG_RecoverSeedError+0x2c>
  {
    /* RNG performed the reset automatically (auto-reset) */
    /* Clear bit SEIS */
    CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	685a      	ldr	r2, [r3, #4]
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d59e:	605a      	str	r2, [r3, #4]
 800d5a0:	e05f      	b.n	800d662 <RNG_RecoverSeedError+0xec>
  }
  else  /* Sequence to fully recover from a seed error*/
  {
    /* Writing bit CONDRST=1*/
    SET_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	681a      	ldr	r2, [r3, #0]
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800d5b0:	601a      	str	r2, [r3, #0]
    /* Writing bit CONDRST=0*/
    CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	681a      	ldr	r2, [r3, #0]
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800d5c0:	601a      	str	r2, [r3, #0]

    /* Wait for conditioning reset process to be completed */
    count = RNG_TIMEOUT_VALUE;
 800d5c2:	2302      	movs	r3, #2
 800d5c4:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	3b01      	subs	r3, #1
 800d5ca:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d110      	bne.n	800d5f4 <RNG_RecoverSeedError+0x7e>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2201      	movs	r2, #1
 800d5d6:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	68db      	ldr	r3, [r3, #12]
 800d5dc:	f043 0202 	orr.w	r2, r3, #2
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	f7ff ffb9 	bl	800d562 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	e03d      	b.n	800d670 <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST));
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d5fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d602:	d0e0      	beq.n	800d5c6 <RNG_RecoverSeedError+0x50>

    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	685b      	ldr	r3, [r3, #4]
 800d60a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d60e:	2b40      	cmp	r3, #64	; 0x40
 800d610:	d107      	bne.n	800d622 <RNG_RecoverSeedError+0xac>
    {
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	685a      	ldr	r2, [r3, #4]
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d620:	605a      	str	r2, [r3, #4]
    }

    /* Wait for SECS to be cleared */
    count = RNG_TIMEOUT_VALUE;
 800d622:	2302      	movs	r3, #2
 800d624:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	3b01      	subs	r3, #1
 800d62a:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d110      	bne.n	800d654 <RNG_RecoverSeedError+0xde>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2201      	movs	r2, #1
 800d636:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	68db      	ldr	r3, [r3, #12]
 800d63c:	f043 0202 	orr.w	r2, r3, #2
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2200      	movs	r2, #0
 800d648:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 800d64a:	6878      	ldr	r0, [r7, #4]
 800d64c:	f7ff ff89 	bl	800d562 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 800d650:	2301      	movs	r3, #1
 800d652:	e00d      	b.n	800d670 <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	685b      	ldr	r3, [r3, #4]
 800d65a:	f003 0304 	and.w	r3, r3, #4
 800d65e:	2b04      	cmp	r3, #4
 800d660:	d0e1      	beq.n	800d626 <RNG_RecoverSeedError+0xb0>
  }
  /* Update the error code */
  hrng->ErrorCode &= ~ HAL_RNG_ERROR_SEED;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	68db      	ldr	r3, [r3, #12]
 800d666:	f023 0208 	bic.w	r2, r3, #8
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 800d66e:	2300      	movs	r3, #0
}
 800d670:	4618      	mov	r0, r3
 800d672:	3710      	adds	r7, #16
 800d674:	46bd      	mov	sp, r7
 800d676:	bd80      	pop	{r7, pc}

0800d678 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b08a      	sub	sp, #40	; 0x28
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d101      	bne.n	800d68a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d686:	2301      	movs	r3, #1
 800d688:	e075      	b.n	800d776 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d690:	b2db      	uxtb	r3, r3
 800d692:	2b00      	cmp	r3, #0
 800d694:	d105      	bne.n	800d6a2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2200      	movs	r2, #0
 800d69a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f7f5 fcab 	bl	8002ff8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	2204      	movs	r2, #4
 800d6a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	f000 f868 	bl	800d780 <HAL_SD_InitCard>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d001      	beq.n	800d6ba <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d6b6:	2301      	movs	r3, #1
 800d6b8:	e05d      	b.n	800d776 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800d6ba:	f107 0308 	add.w	r3, r7, #8
 800d6be:	4619      	mov	r1, r3
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	f000 fdaf 	bl	800e224 <HAL_SD_GetCardStatus>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d001      	beq.n	800d6d0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	e052      	b.n	800d776 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800d6d0:	7e3b      	ldrb	r3, [r7, #24]
 800d6d2:	b2db      	uxtb	r3, r3
 800d6d4:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800d6d6:	7e7b      	ldrb	r3, [r7, #25]
 800d6d8:	b2db      	uxtb	r3, r3
 800d6da:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6e0:	2b01      	cmp	r3, #1
 800d6e2:	d10a      	bne.n	800d6fa <HAL_SD_Init+0x82>
 800d6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d102      	bne.n	800d6f0 <HAL_SD_Init+0x78>
 800d6ea:	6a3b      	ldr	r3, [r7, #32]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d004      	beq.n	800d6fa <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d6f6:	659a      	str	r2, [r3, #88]	; 0x58
 800d6f8:	e00b      	b.n	800d712 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6fe:	2b01      	cmp	r3, #1
 800d700:	d104      	bne.n	800d70c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d708:	659a      	str	r2, [r3, #88]	; 0x58
 800d70a:	e002      	b.n	800d712 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	2200      	movs	r2, #0
 800d710:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	68db      	ldr	r3, [r3, #12]
 800d716:	4619      	mov	r1, r3
 800d718:	6878      	ldr	r0, [r7, #4]
 800d71a:	f000 fe6d 	bl	800e3f8 <HAL_SD_ConfigWideBusOperation>
 800d71e:	4603      	mov	r3, r0
 800d720:	2b00      	cmp	r3, #0
 800d722:	d001      	beq.n	800d728 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800d724:	2301      	movs	r3, #1
 800d726:	e026      	b.n	800d776 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800d728:	f7f6 fb26 	bl	8003d78 <HAL_GetTick>
 800d72c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d72e:	e011      	b.n	800d754 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d730:	f7f6 fb22 	bl	8003d78 <HAL_GetTick>
 800d734:	4602      	mov	r2, r0
 800d736:	69fb      	ldr	r3, [r7, #28]
 800d738:	1ad3      	subs	r3, r2, r3
 800d73a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d73e:	d109      	bne.n	800d754 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d746:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2201      	movs	r2, #1
 800d74c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800d750:	2303      	movs	r3, #3
 800d752:	e010      	b.n	800d776 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d754:	6878      	ldr	r0, [r7, #4]
 800d756:	f000 ff61 	bl	800e61c <HAL_SD_GetCardState>
 800d75a:	4603      	mov	r3, r0
 800d75c:	2b04      	cmp	r3, #4
 800d75e:	d1e7      	bne.n	800d730 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2200      	movs	r2, #0
 800d764:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2200      	movs	r2, #0
 800d76a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2201      	movs	r2, #1
 800d770:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800d774:	2300      	movs	r3, #0
}
 800d776:	4618      	mov	r0, r3
 800d778:	3728      	adds	r7, #40	; 0x28
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}
	...

0800d780 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d780:	b590      	push	{r4, r7, lr}
 800d782:	b08d      	sub	sp, #52	; 0x34
 800d784:	af02      	add	r7, sp, #8
 800d786:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d788:	2300      	movs	r3, #0
 800d78a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d78c:	2300      	movs	r3, #0
 800d78e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d790:	2300      	movs	r3, #0
 800d792:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d794:	2300      	movs	r3, #0
 800d796:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d798:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d79c:	f04f 0100 	mov.w	r1, #0
 800d7a0:	f7fe fb76 	bl	800be90 <HAL_RCCEx_GetPeriphCLKFreq>
 800d7a4:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800d7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d109      	bne.n	800d7c0 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2201      	movs	r2, #1
 800d7b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d7ba:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d7bc:	2301      	movs	r3, #1
 800d7be:	e070      	b.n	800d8a2 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800d7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c2:	0a1b      	lsrs	r3, r3, #8
 800d7c4:	4a39      	ldr	r2, [pc, #228]	; (800d8ac <HAL_SD_InitCard+0x12c>)
 800d7c6:	fba2 2303 	umull	r2, r3, r2, r3
 800d7ca:	091b      	lsrs	r3, r3, #4
 800d7cc:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681c      	ldr	r4, [r3, #0]
 800d7d2:	466a      	mov	r2, sp
 800d7d4:	f107 0318 	add.w	r3, r7, #24
 800d7d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d7dc:	e882 0003 	stmia.w	r2, {r0, r1}
 800d7e0:	f107 030c 	add.w	r3, r7, #12
 800d7e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d7e6:	4620      	mov	r0, r4
 800d7e8:	f004 fec4 	bl	8012574 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	f004 ff07 	bl	8012604 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800d7f6:	69fb      	ldr	r3, [r7, #28]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d005      	beq.n	800d808 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800d7fc:	69fb      	ldr	r3, [r7, #28]
 800d7fe:	005b      	lsls	r3, r3, #1
 800d800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d802:	fbb2 f3f3 	udiv	r3, r2, r3
 800d806:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800d808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d007      	beq.n	800d81e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800d80e:	4a28      	ldr	r2, [pc, #160]	; (800d8b0 <HAL_SD_InitCard+0x130>)
 800d810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d812:	fbb2 f3f3 	udiv	r3, r2, r3
 800d816:	3301      	adds	r3, #1
 800d818:	4618      	mov	r0, r3
 800d81a:	f7f6 fab9 	bl	8003d90 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d81e:	6878      	ldr	r0, [r7, #4]
 800d820:	f000 ffea 	bl	800e7f8 <SD_PowerON>
 800d824:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d826:	6a3b      	ldr	r3, [r7, #32]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d00b      	beq.n	800d844 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2201      	movs	r2, #1
 800d830:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d838:	6a3b      	ldr	r3, [r7, #32]
 800d83a:	431a      	orrs	r2, r3
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d840:	2301      	movs	r3, #1
 800d842:	e02e      	b.n	800d8a2 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d844:	6878      	ldr	r0, [r7, #4]
 800d846:	f000 ff09 	bl	800e65c <SD_InitCard>
 800d84a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d84c:	6a3b      	ldr	r3, [r7, #32]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d00b      	beq.n	800d86a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2201      	movs	r2, #1
 800d856:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d85e:	6a3b      	ldr	r3, [r7, #32]
 800d860:	431a      	orrs	r2, r3
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d866:	2301      	movs	r3, #1
 800d868:	e01b      	b.n	800d8a2 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d872:	4618      	mov	r0, r3
 800d874:	f004 ff5c 	bl	8012730 <SDMMC_CmdBlockLength>
 800d878:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d87a:	6a3b      	ldr	r3, [r7, #32]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d00f      	beq.n	800d8a0 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	4a0b      	ldr	r2, [pc, #44]	; (800d8b4 <HAL_SD_InitCard+0x134>)
 800d886:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d88c:	6a3b      	ldr	r3, [r7, #32]
 800d88e:	431a      	orrs	r2, r3
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2201      	movs	r2, #1
 800d898:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d89c:	2301      	movs	r3, #1
 800d89e:	e000      	b.n	800d8a2 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800d8a0:	2300      	movs	r3, #0
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	372c      	adds	r7, #44	; 0x2c
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd90      	pop	{r4, r7, pc}
 800d8aa:	bf00      	nop
 800d8ac:	014f8b59 	.word	0x014f8b59
 800d8b0:	00012110 	.word	0x00012110
 800d8b4:	1fe00fff 	.word	0x1fe00fff

0800d8b8 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b08c      	sub	sp, #48	; 0x30
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	60f8      	str	r0, [r7, #12]
 800d8c0:	60b9      	str	r1, [r7, #8]
 800d8c2:	607a      	str	r2, [r7, #4]
 800d8c4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d8ca:	68bb      	ldr	r3, [r7, #8]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d107      	bne.n	800d8e0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8d4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d8dc:	2301      	movs	r3, #1
 800d8de:	e08d      	b.n	800d9fc <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d8e6:	b2db      	uxtb	r3, r3
 800d8e8:	2b01      	cmp	r3, #1
 800d8ea:	f040 8086 	bne.w	800d9fa <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d8f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	441a      	add	r2, r3
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8fe:	429a      	cmp	r2, r3
 800d900:	d907      	bls.n	800d912 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d906:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d90e:	2301      	movs	r3, #1
 800d910:	e074      	b.n	800d9fc <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	2203      	movs	r2, #3
 800d916:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	2200      	movs	r2, #0
 800d920:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	68ba      	ldr	r2, [r7, #8]
 800d926:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	025a      	lsls	r2, r3, #9
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d934:	2b01      	cmp	r3, #1
 800d936:	d002      	beq.n	800d93e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800d938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d93a:	025b      	lsls	r3, r3, #9
 800d93c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d93e:	f04f 33ff 	mov.w	r3, #4294967295
 800d942:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	025b      	lsls	r3, r3, #9
 800d948:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d94a:	2390      	movs	r3, #144	; 0x90
 800d94c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d94e:	2302      	movs	r3, #2
 800d950:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d952:	2300      	movs	r3, #0
 800d954:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d956:	2300      	movs	r3, #0
 800d958:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	f107 0210 	add.w	r2, r7, #16
 800d962:	4611      	mov	r1, r2
 800d964:	4618      	mov	r0, r3
 800d966:	f004 feb7 	bl	80126d8 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	68da      	ldr	r2, [r3, #12]
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d978:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	68ba      	ldr	r2, [r7, #8]
 800d980:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	2201      	movs	r2, #1
 800d988:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	2b01      	cmp	r3, #1
 800d98e:	d90a      	bls.n	800d9a6 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	2282      	movs	r2, #130	; 0x82
 800d994:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d99c:	4618      	mov	r0, r3
 800d99e:	f004 ff0d 	bl	80127bc <SDMMC_CmdReadMultiBlock>
 800d9a2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d9a4:	e009      	b.n	800d9ba <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	2281      	movs	r2, #129	; 0x81
 800d9aa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f004 fedf 	bl	8012776 <SDMMC_CmdReadSingleBlock>
 800d9b8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d012      	beq.n	800d9e6 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	4a0f      	ldr	r2, [pc, #60]	; (800da04 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d9c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ce:	431a      	orrs	r2, r3
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	2201      	movs	r2, #1
 800d9d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	2200      	movs	r2, #0
 800d9e0:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d9e2:	2301      	movs	r3, #1
 800d9e4:	e00a      	b.n	800d9fc <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d9f4:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	e000      	b.n	800d9fc <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d9fa:	2302      	movs	r3, #2
  }
}
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	3730      	adds	r7, #48	; 0x30
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}
 800da04:	1fe00fff 	.word	0x1fe00fff

0800da08 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b08c      	sub	sp, #48	; 0x30
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	60f8      	str	r0, [r7, #12]
 800da10:	60b9      	str	r1, [r7, #8]
 800da12:	607a      	str	r2, [r7, #4]
 800da14:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800da1a:	68bb      	ldr	r3, [r7, #8]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d107      	bne.n	800da30 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da24:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800da2c:	2301      	movs	r3, #1
 800da2e:	e08d      	b.n	800db4c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800da36:	b2db      	uxtb	r3, r3
 800da38:	2b01      	cmp	r3, #1
 800da3a:	f040 8086 	bne.w	800db4a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	2200      	movs	r2, #0
 800da42:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800da44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	441a      	add	r2, r3
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da4e:	429a      	cmp	r2, r3
 800da50:	d907      	bls.n	800da62 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da56:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800da5e:	2301      	movs	r3, #1
 800da60:	e074      	b.n	800db4c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	2203      	movs	r2, #3
 800da66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	2200      	movs	r2, #0
 800da70:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	68ba      	ldr	r2, [r7, #8]
 800da76:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	025a      	lsls	r2, r3, #9
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da84:	2b01      	cmp	r3, #1
 800da86:	d002      	beq.n	800da8e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800da88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da8a:	025b      	lsls	r3, r3, #9
 800da8c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800da8e:	f04f 33ff 	mov.w	r3, #4294967295
 800da92:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	025b      	lsls	r3, r3, #9
 800da98:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800da9a:	2390      	movs	r3, #144	; 0x90
 800da9c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800da9e:	2300      	movs	r3, #0
 800daa0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800daa2:	2300      	movs	r3, #0
 800daa4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800daa6:	2300      	movs	r3, #0
 800daa8:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	f107 0210 	add.w	r2, r7, #16
 800dab2:	4611      	mov	r1, r2
 800dab4:	4618      	mov	r0, r3
 800dab6:	f004 fe0f 	bl	80126d8 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	68da      	ldr	r2, [r3, #12]
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dac8:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	68ba      	ldr	r2, [r7, #8]
 800dad0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	2201      	movs	r2, #1
 800dad8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	2b01      	cmp	r3, #1
 800dade:	d90a      	bls.n	800daf6 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	22a0      	movs	r2, #160	; 0xa0
 800dae4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800daec:	4618      	mov	r0, r3
 800daee:	f004 feab 	bl	8012848 <SDMMC_CmdWriteMultiBlock>
 800daf2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800daf4:	e009      	b.n	800db0a <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	2290      	movs	r2, #144	; 0x90
 800dafa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800db02:	4618      	mov	r0, r3
 800db04:	f004 fe7d 	bl	8012802 <SDMMC_CmdWriteSingleBlock>
 800db08:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800db0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d012      	beq.n	800db36 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	4a0f      	ldr	r2, [pc, #60]	; (800db54 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800db16:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db1e:	431a      	orrs	r2, r3
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	2201      	movs	r2, #1
 800db28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	2200      	movs	r2, #0
 800db30:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800db32:	2301      	movs	r3, #1
 800db34:	e00a      	b.n	800db4c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800db44:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800db46:	2300      	movs	r3, #0
 800db48:	e000      	b.n	800db4c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800db4a:	2302      	movs	r3, #2
  }
}
 800db4c:	4618      	mov	r0, r3
 800db4e:	3730      	adds	r7, #48	; 0x30
 800db50:	46bd      	mov	sp, r7
 800db52:	bd80      	pop	{r7, pc}
 800db54:	1fe00fff 	.word	0x1fe00fff

0800db58 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b084      	sub	sp, #16
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db64:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800db70:	2b00      	cmp	r3, #0
 800db72:	d008      	beq.n	800db86 <HAL_SD_IRQHandler+0x2e>
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	f003 0308 	and.w	r3, r3, #8
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d003      	beq.n	800db86 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f001 f926 	bl	800edd0 <SD_Read_IT>
 800db84:	e19a      	b.n	800debc <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db90:	2b00      	cmp	r3, #0
 800db92:	f000 80ac 	beq.w	800dcee <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800db9e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681a      	ldr	r2, [r3, #0]
 800dbaa:	4b59      	ldr	r3, [pc, #356]	; (800dd10 <HAL_SD_IRQHandler+0x1b8>)
 800dbac:	400b      	ands	r3, r1
 800dbae:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800dbbe:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	68da      	ldr	r2, [r3, #12]
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dbce:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	f003 0308 	and.w	r3, r3, #8
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d038      	beq.n	800dc4c <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	f003 0302 	and.w	r3, r3, #2
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d104      	bne.n	800dbee <HAL_SD_IRQHandler+0x96>
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	f003 0320 	and.w	r3, r3, #32
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d011      	beq.n	800dc12 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	f004 fe4c 	bl	8012890 <SDMMC_CmdStopTransfer>
 800dbf8:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800dbfa:	68bb      	ldr	r3, [r7, #8]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d008      	beq.n	800dc12 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	431a      	orrs	r2, r3
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800dc0c:	6878      	ldr	r0, [r7, #4]
 800dc0e:	f000 f95b 	bl	800dec8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	4a3f      	ldr	r2, [pc, #252]	; (800dd14 <HAL_SD_IRQHandler+0x1bc>)
 800dc18:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	2201      	movs	r2, #1
 800dc1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	2200      	movs	r2, #0
 800dc26:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	f003 0301 	and.w	r3, r3, #1
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d104      	bne.n	800dc3c <HAL_SD_IRQHandler+0xe4>
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	f003 0302 	and.w	r3, r3, #2
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d003      	beq.n	800dc44 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800dc3c:	6878      	ldr	r0, [r7, #4]
 800dc3e:	f006 fe4d 	bl	80148dc <HAL_SD_RxCpltCallback>
 800dc42:	e13b      	b.n	800debc <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800dc44:	6878      	ldr	r0, [r7, #4]
 800dc46:	f006 fe3f 	bl	80148c8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800dc4a:	e137      	b.n	800debc <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	f000 8132 	beq.w	800debc <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	2200      	movs	r2, #0
 800dc66:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	f003 0302 	and.w	r3, r3, #2
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d104      	bne.n	800dc84 <HAL_SD_IRQHandler+0x12c>
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	f003 0320 	and.w	r3, r3, #32
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d011      	beq.n	800dca8 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	4618      	mov	r0, r3
 800dc8a:	f004 fe01 	bl	8012890 <SDMMC_CmdStopTransfer>
 800dc8e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800dc90:	68bb      	ldr	r3, [r7, #8]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d008      	beq.n	800dca8 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc9a:	68bb      	ldr	r3, [r7, #8]
 800dc9c:	431a      	orrs	r2, r3
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f000 f910 	bl	800dec8 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2201      	movs	r2, #1
 800dcac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	f003 0310 	and.w	r3, r3, #16
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d104      	bne.n	800dcca <HAL_SD_IRQHandler+0x172>
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	f003 0320 	and.w	r3, r3, #32
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d002      	beq.n	800dcd0 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800dcca:	6878      	ldr	r0, [r7, #4]
 800dccc:	f006 fdfc 	bl	80148c8 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	f003 0301 	and.w	r3, r3, #1
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d105      	bne.n	800dce6 <HAL_SD_IRQHandler+0x18e>
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	f003 0302 	and.w	r3, r3, #2
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	f000 80eb 	beq.w	800debc <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800dce6:	6878      	ldr	r0, [r7, #4]
 800dce8:	f006 fdf8 	bl	80148dc <HAL_SD_RxCpltCallback>
}
 800dcec:	e0e6      	b.n	800debc <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d00d      	beq.n	800dd18 <HAL_SD_IRQHandler+0x1c0>
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	f003 0308 	and.w	r3, r3, #8
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d008      	beq.n	800dd18 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800dd06:	6878      	ldr	r0, [r7, #4]
 800dd08:	f001 f8a8 	bl	800ee5c <SD_Write_IT>
 800dd0c:	e0d6      	b.n	800debc <HAL_SD_IRQHandler+0x364>
 800dd0e:	bf00      	nop
 800dd10:	ffff3ec5 	.word	0xffff3ec5
 800dd14:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd1e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	f000 809d 	beq.w	800de62 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd2e:	f003 0302 	and.w	r3, r3, #2
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d005      	beq.n	800dd42 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd3a:	f043 0202 	orr.w	r2, r3, #2
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd48:	f003 0308 	and.w	r3, r3, #8
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d005      	beq.n	800dd5c <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd54:	f043 0208 	orr.w	r2, r3, #8
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd62:	f003 0320 	and.w	r3, r3, #32
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d005      	beq.n	800dd76 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd6e:	f043 0220 	orr.w	r2, r3, #32
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd7c:	f003 0310 	and.w	r3, r3, #16
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d005      	beq.n	800dd90 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd88:	f043 0210 	orr.w	r2, r3, #16
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	4a4b      	ldr	r2, [pc, #300]	; (800dec4 <HAL_SD_IRQHandler+0x36c>)
 800dd96:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800dda6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	68da      	ldr	r2, [r3, #12]
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ddb6:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ddc6:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	68da      	ldr	r2, [r3, #12]
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ddd6:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	4618      	mov	r0, r3
 800ddde:	f004 fd57 	bl	8012890 <SDMMC_CmdStopTransfer>
 800dde2:	4602      	mov	r2, r0
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dde8:	431a      	orrs	r2, r3
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	68da      	ldr	r2, [r3, #12]
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ddfc:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800de06:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	f003 0308 	and.w	r3, r3, #8
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d00a      	beq.n	800de28 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	2201      	movs	r2, #1
 800de16:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	2200      	movs	r2, #0
 800de1e:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800de20:	6878      	ldr	r0, [r7, #4]
 800de22:	f000 f851 	bl	800dec8 <HAL_SD_ErrorCallback>
}
 800de26:	e049      	b.n	800debc <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d044      	beq.n	800debc <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de36:	2b00      	cmp	r3, #0
 800de38:	d040      	beq.n	800debc <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800de48:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	2200      	movs	r2, #0
 800de50:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	2201      	movs	r2, #1
 800de56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800de5a:	6878      	ldr	r0, [r7, #4]
 800de5c:	f000 f834 	bl	800dec8 <HAL_SD_ErrorCallback>
}
 800de60:	e02c      	b.n	800debc <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d025      	beq.n	800debc <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de78:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de80:	f003 0304 	and.w	r3, r3, #4
 800de84:	2b00      	cmp	r3, #0
 800de86:	d10c      	bne.n	800dea2 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	f003 0320 	and.w	r3, r3, #32
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d003      	beq.n	800de9a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800de92:	6878      	ldr	r0, [r7, #4]
 800de94:	f001 f84a 	bl	800ef2c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800de98:	e010      	b.n	800debc <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800de9a:	6878      	ldr	r0, [r7, #4]
 800de9c:	f001 f832 	bl	800ef04 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800dea0:	e00c      	b.n	800debc <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	f003 0320 	and.w	r3, r3, #32
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d003      	beq.n	800deb4 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800deac:	6878      	ldr	r0, [r7, #4]
 800deae:	f001 f833 	bl	800ef18 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800deb2:	e003      	b.n	800debc <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800deb4:	6878      	ldr	r0, [r7, #4]
 800deb6:	f001 f81b 	bl	800eef0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800deba:	e7ff      	b.n	800debc <HAL_SD_IRQHandler+0x364>
 800debc:	bf00      	nop
 800debe:	3710      	adds	r7, #16
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bd80      	pop	{r7, pc}
 800dec4:	18000f3a 	.word	0x18000f3a

0800dec8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800dec8:	b480      	push	{r7}
 800deca:	b083      	sub	sp, #12
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800ded0:	bf00      	nop
 800ded2:	370c      	adds	r7, #12
 800ded4:	46bd      	mov	sp, r7
 800ded6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deda:	4770      	bx	lr

0800dedc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800dedc:	b480      	push	{r7}
 800dede:	b083      	sub	sp, #12
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
 800dee4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800deea:	0f9b      	lsrs	r3, r3, #30
 800deec:	b2da      	uxtb	r2, r3
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800def6:	0e9b      	lsrs	r3, r3, #26
 800def8:	b2db      	uxtb	r3, r3
 800defa:	f003 030f 	and.w	r3, r3, #15
 800defe:	b2da      	uxtb	r2, r3
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df08:	0e1b      	lsrs	r3, r3, #24
 800df0a:	b2db      	uxtb	r3, r3
 800df0c:	f003 0303 	and.w	r3, r3, #3
 800df10:	b2da      	uxtb	r2, r3
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df1a:	0c1b      	lsrs	r3, r3, #16
 800df1c:	b2da      	uxtb	r2, r3
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df26:	0a1b      	lsrs	r3, r3, #8
 800df28:	b2da      	uxtb	r2, r3
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df32:	b2da      	uxtb	r2, r3
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df3c:	0d1b      	lsrs	r3, r3, #20
 800df3e:	b29a      	uxth	r2, r3
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df48:	0c1b      	lsrs	r3, r3, #16
 800df4a:	b2db      	uxtb	r3, r3
 800df4c:	f003 030f 	and.w	r3, r3, #15
 800df50:	b2da      	uxtb	r2, r3
 800df52:	683b      	ldr	r3, [r7, #0]
 800df54:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df5a:	0bdb      	lsrs	r3, r3, #15
 800df5c:	b2db      	uxtb	r3, r3
 800df5e:	f003 0301 	and.w	r3, r3, #1
 800df62:	b2da      	uxtb	r2, r3
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df6c:	0b9b      	lsrs	r3, r3, #14
 800df6e:	b2db      	uxtb	r3, r3
 800df70:	f003 0301 	and.w	r3, r3, #1
 800df74:	b2da      	uxtb	r2, r3
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df7e:	0b5b      	lsrs	r3, r3, #13
 800df80:	b2db      	uxtb	r3, r3
 800df82:	f003 0301 	and.w	r3, r3, #1
 800df86:	b2da      	uxtb	r2, r3
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df90:	0b1b      	lsrs	r3, r3, #12
 800df92:	b2db      	uxtb	r3, r3
 800df94:	f003 0301 	and.w	r3, r3, #1
 800df98:	b2da      	uxtb	r2, r3
 800df9a:	683b      	ldr	r3, [r7, #0]
 800df9c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800df9e:	683b      	ldr	r3, [r7, #0]
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d163      	bne.n	800e074 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dfb0:	009a      	lsls	r2, r3, #2
 800dfb2:	f640 73fc 	movw	r3, #4092	; 0xffc
 800dfb6:	4013      	ands	r3, r2
 800dfb8:	687a      	ldr	r2, [r7, #4]
 800dfba:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800dfbc:	0f92      	lsrs	r2, r2, #30
 800dfbe:	431a      	orrs	r2, r3
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfc8:	0edb      	lsrs	r3, r3, #27
 800dfca:	b2db      	uxtb	r3, r3
 800dfcc:	f003 0307 	and.w	r3, r3, #7
 800dfd0:	b2da      	uxtb	r2, r3
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfda:	0e1b      	lsrs	r3, r3, #24
 800dfdc:	b2db      	uxtb	r3, r3
 800dfde:	f003 0307 	and.w	r3, r3, #7
 800dfe2:	b2da      	uxtb	r2, r3
 800dfe4:	683b      	ldr	r3, [r7, #0]
 800dfe6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfec:	0d5b      	lsrs	r3, r3, #21
 800dfee:	b2db      	uxtb	r3, r3
 800dff0:	f003 0307 	and.w	r3, r3, #7
 800dff4:	b2da      	uxtb	r2, r3
 800dff6:	683b      	ldr	r3, [r7, #0]
 800dff8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dffe:	0c9b      	lsrs	r3, r3, #18
 800e000:	b2db      	uxtb	r3, r3
 800e002:	f003 0307 	and.w	r3, r3, #7
 800e006:	b2da      	uxtb	r2, r3
 800e008:	683b      	ldr	r3, [r7, #0]
 800e00a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e010:	0bdb      	lsrs	r3, r3, #15
 800e012:	b2db      	uxtb	r3, r3
 800e014:	f003 0307 	and.w	r3, r3, #7
 800e018:	b2da      	uxtb	r2, r3
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	691b      	ldr	r3, [r3, #16]
 800e022:	1c5a      	adds	r2, r3, #1
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	7e1b      	ldrb	r3, [r3, #24]
 800e02c:	b2db      	uxtb	r3, r3
 800e02e:	f003 0307 	and.w	r3, r3, #7
 800e032:	3302      	adds	r3, #2
 800e034:	2201      	movs	r2, #1
 800e036:	fa02 f303 	lsl.w	r3, r2, r3
 800e03a:	687a      	ldr	r2, [r7, #4]
 800e03c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e03e:	fb03 f202 	mul.w	r2, r3, r2
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	7a1b      	ldrb	r3, [r3, #8]
 800e04a:	b2db      	uxtb	r3, r3
 800e04c:	f003 030f 	and.w	r3, r3, #15
 800e050:	2201      	movs	r2, #1
 800e052:	409a      	lsls	r2, r3
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e05c:	687a      	ldr	r2, [r7, #4]
 800e05e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800e060:	0a52      	lsrs	r2, r2, #9
 800e062:	fb03 f202 	mul.w	r2, r3, r2
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e070:	655a      	str	r2, [r3, #84]	; 0x54
 800e072:	e031      	b.n	800e0d8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e078:	2b01      	cmp	r3, #1
 800e07a:	d11d      	bne.n	800e0b8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e080:	041b      	lsls	r3, r3, #16
 800e082:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e08a:	0c1b      	lsrs	r3, r3, #16
 800e08c:	431a      	orrs	r2, r3
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	691b      	ldr	r3, [r3, #16]
 800e096:	3301      	adds	r3, #1
 800e098:	029a      	lsls	r2, r3, #10
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e0ac:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	655a      	str	r2, [r3, #84]	; 0x54
 800e0b6:	e00f      	b.n	800e0d8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	4a58      	ldr	r2, [pc, #352]	; (800e220 <HAL_SD_GetCardCSD+0x344>)
 800e0be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	2201      	movs	r2, #1
 800e0d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800e0d4:	2301      	movs	r3, #1
 800e0d6:	e09d      	b.n	800e214 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0dc:	0b9b      	lsrs	r3, r3, #14
 800e0de:	b2db      	uxtb	r3, r3
 800e0e0:	f003 0301 	and.w	r3, r3, #1
 800e0e4:	b2da      	uxtb	r2, r3
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0ee:	09db      	lsrs	r3, r3, #7
 800e0f0:	b2db      	uxtb	r3, r3
 800e0f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0f6:	b2da      	uxtb	r2, r3
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e100:	b2db      	uxtb	r3, r3
 800e102:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e106:	b2da      	uxtb	r2, r3
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e110:	0fdb      	lsrs	r3, r3, #31
 800e112:	b2da      	uxtb	r2, r3
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e11c:	0f5b      	lsrs	r3, r3, #29
 800e11e:	b2db      	uxtb	r3, r3
 800e120:	f003 0303 	and.w	r3, r3, #3
 800e124:	b2da      	uxtb	r2, r3
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e12e:	0e9b      	lsrs	r3, r3, #26
 800e130:	b2db      	uxtb	r3, r3
 800e132:	f003 0307 	and.w	r3, r3, #7
 800e136:	b2da      	uxtb	r2, r3
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e140:	0d9b      	lsrs	r3, r3, #22
 800e142:	b2db      	uxtb	r3, r3
 800e144:	f003 030f 	and.w	r3, r3, #15
 800e148:	b2da      	uxtb	r2, r3
 800e14a:	683b      	ldr	r3, [r7, #0]
 800e14c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e152:	0d5b      	lsrs	r3, r3, #21
 800e154:	b2db      	uxtb	r3, r3
 800e156:	f003 0301 	and.w	r3, r3, #1
 800e15a:	b2da      	uxtb	r2, r3
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800e162:	683b      	ldr	r3, [r7, #0]
 800e164:	2200      	movs	r2, #0
 800e166:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e16e:	0c1b      	lsrs	r3, r3, #16
 800e170:	b2db      	uxtb	r3, r3
 800e172:	f003 0301 	and.w	r3, r3, #1
 800e176:	b2da      	uxtb	r2, r3
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e182:	0bdb      	lsrs	r3, r3, #15
 800e184:	b2db      	uxtb	r3, r3
 800e186:	f003 0301 	and.w	r3, r3, #1
 800e18a:	b2da      	uxtb	r2, r3
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e196:	0b9b      	lsrs	r3, r3, #14
 800e198:	b2db      	uxtb	r3, r3
 800e19a:	f003 0301 	and.w	r3, r3, #1
 800e19e:	b2da      	uxtb	r2, r3
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e1aa:	0b5b      	lsrs	r3, r3, #13
 800e1ac:	b2db      	uxtb	r3, r3
 800e1ae:	f003 0301 	and.w	r3, r3, #1
 800e1b2:	b2da      	uxtb	r2, r3
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e1be:	0b1b      	lsrs	r3, r3, #12
 800e1c0:	b2db      	uxtb	r3, r3
 800e1c2:	f003 0301 	and.w	r3, r3, #1
 800e1c6:	b2da      	uxtb	r2, r3
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e1d2:	0a9b      	lsrs	r3, r3, #10
 800e1d4:	b2db      	uxtb	r3, r3
 800e1d6:	f003 0303 	and.w	r3, r3, #3
 800e1da:	b2da      	uxtb	r2, r3
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e1e6:	0a1b      	lsrs	r3, r3, #8
 800e1e8:	b2db      	uxtb	r3, r3
 800e1ea:	f003 0303 	and.w	r3, r3, #3
 800e1ee:	b2da      	uxtb	r2, r3
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e1fa:	085b      	lsrs	r3, r3, #1
 800e1fc:	b2db      	uxtb	r3, r3
 800e1fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e202:	b2da      	uxtb	r2, r3
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800e20a:	683b      	ldr	r3, [r7, #0]
 800e20c:	2201      	movs	r2, #1
 800e20e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800e212:	2300      	movs	r3, #0
}
 800e214:	4618      	mov	r0, r3
 800e216:	370c      	adds	r7, #12
 800e218:	46bd      	mov	sp, r7
 800e21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21e:	4770      	bx	lr
 800e220:	1fe00fff 	.word	0x1fe00fff

0800e224 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b094      	sub	sp, #80	; 0x50
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
 800e22c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800e22e:	2300      	movs	r3, #0
 800e230:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e23a:	b2db      	uxtb	r3, r3
 800e23c:	2b03      	cmp	r3, #3
 800e23e:	d101      	bne.n	800e244 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800e240:	2301      	movs	r3, #1
 800e242:	e0a7      	b.n	800e394 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800e244:	f107 0308 	add.w	r3, r7, #8
 800e248:	4619      	mov	r1, r3
 800e24a:	6878      	ldr	r0, [r7, #4]
 800e24c:	f000 fb62 	bl	800e914 <SD_SendSDStatus>
 800e250:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e252:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e254:	2b00      	cmp	r3, #0
 800e256:	d011      	beq.n	800e27c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	4a4f      	ldr	r2, [pc, #316]	; (800e39c <HAL_SD_GetCardStatus+0x178>)
 800e25e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e264:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e266:	431a      	orrs	r2, r3
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	2201      	movs	r2, #1
 800e270:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800e274:	2301      	movs	r3, #1
 800e276:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800e27a:	e070      	b.n	800e35e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800e27c:	68bb      	ldr	r3, [r7, #8]
 800e27e:	099b      	lsrs	r3, r3, #6
 800e280:	b2db      	uxtb	r3, r3
 800e282:	f003 0303 	and.w	r3, r3, #3
 800e286:	b2da      	uxtb	r2, r3
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800e28c:	68bb      	ldr	r3, [r7, #8]
 800e28e:	095b      	lsrs	r3, r3, #5
 800e290:	b2db      	uxtb	r3, r3
 800e292:	f003 0301 	and.w	r3, r3, #1
 800e296:	b2da      	uxtb	r2, r3
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800e29c:	68bb      	ldr	r3, [r7, #8]
 800e29e:	0a1b      	lsrs	r3, r3, #8
 800e2a0:	b29b      	uxth	r3, r3
 800e2a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e2a6:	b29a      	uxth	r2, r3
 800e2a8:	68bb      	ldr	r3, [r7, #8]
 800e2aa:	0e1b      	lsrs	r3, r3, #24
 800e2ac:	b29b      	uxth	r3, r3
 800e2ae:	4313      	orrs	r3, r2
 800e2b0:	b29a      	uxth	r2, r3
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	061a      	lsls	r2, r3, #24
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	021b      	lsls	r3, r3, #8
 800e2be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e2c2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	0a1b      	lsrs	r3, r3, #8
 800e2c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e2cc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	0e1b      	lsrs	r3, r3, #24
 800e2d2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e2d4:	683b      	ldr	r3, [r7, #0]
 800e2d6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800e2d8:	693b      	ldr	r3, [r7, #16]
 800e2da:	b2da      	uxtb	r2, r3
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800e2e0:	693b      	ldr	r3, [r7, #16]
 800e2e2:	0a1b      	lsrs	r3, r3, #8
 800e2e4:	b2da      	uxtb	r2, r3
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800e2ea:	693b      	ldr	r3, [r7, #16]
 800e2ec:	0d1b      	lsrs	r3, r3, #20
 800e2ee:	b2db      	uxtb	r3, r3
 800e2f0:	f003 030f 	and.w	r3, r3, #15
 800e2f4:	b2da      	uxtb	r2, r3
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800e2fa:	693b      	ldr	r3, [r7, #16]
 800e2fc:	0c1b      	lsrs	r3, r3, #16
 800e2fe:	b29b      	uxth	r3, r3
 800e300:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e304:	b29a      	uxth	r2, r3
 800e306:	697b      	ldr	r3, [r7, #20]
 800e308:	b29b      	uxth	r3, r3
 800e30a:	b2db      	uxtb	r3, r3
 800e30c:	b29b      	uxth	r3, r3
 800e30e:	4313      	orrs	r3, r2
 800e310:	b29a      	uxth	r2, r3
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800e316:	697b      	ldr	r3, [r7, #20]
 800e318:	0a9b      	lsrs	r3, r3, #10
 800e31a:	b2db      	uxtb	r3, r3
 800e31c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e320:	b2da      	uxtb	r2, r3
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800e326:	697b      	ldr	r3, [r7, #20]
 800e328:	0a1b      	lsrs	r3, r3, #8
 800e32a:	b2db      	uxtb	r3, r3
 800e32c:	f003 0303 	and.w	r3, r3, #3
 800e330:	b2da      	uxtb	r2, r3
 800e332:	683b      	ldr	r3, [r7, #0]
 800e334:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800e336:	697b      	ldr	r3, [r7, #20]
 800e338:	091b      	lsrs	r3, r3, #4
 800e33a:	b2db      	uxtb	r3, r3
 800e33c:	f003 030f 	and.w	r3, r3, #15
 800e340:	b2da      	uxtb	r2, r3
 800e342:	683b      	ldr	r3, [r7, #0]
 800e344:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800e346:	697b      	ldr	r3, [r7, #20]
 800e348:	b2db      	uxtb	r3, r3
 800e34a:	f003 030f 	and.w	r3, r3, #15
 800e34e:	b2da      	uxtb	r2, r3
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800e354:	69bb      	ldr	r3, [r7, #24]
 800e356:	0e1b      	lsrs	r3, r3, #24
 800e358:	b2da      	uxtb	r2, r3
 800e35a:	683b      	ldr	r3, [r7, #0]
 800e35c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e366:	4618      	mov	r0, r3
 800e368:	f004 f9e2 	bl	8012730 <SDMMC_CmdBlockLength>
 800e36c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e36e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e370:	2b00      	cmp	r3, #0
 800e372:	d00d      	beq.n	800e390 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	4a08      	ldr	r2, [pc, #32]	; (800e39c <HAL_SD_GetCardStatus+0x178>)
 800e37a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e380:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	2201      	movs	r2, #1
 800e386:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800e38a:	2301      	movs	r3, #1
 800e38c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800e390:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800e394:	4618      	mov	r0, r3
 800e396:	3750      	adds	r7, #80	; 0x50
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}
 800e39c:	1fe00fff 	.word	0x1fe00fff

0800e3a0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800e3a0:	b480      	push	{r7}
 800e3a2:	b083      	sub	sp, #12
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
 800e3a8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e3d6:	683b      	ldr	r3, [r7, #0]
 800e3d8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e3e6:	683b      	ldr	r3, [r7, #0]
 800e3e8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800e3ea:	2300      	movs	r3, #0
}
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	370c      	adds	r7, #12
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f6:	4770      	bx	lr

0800e3f8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800e3f8:	b590      	push	{r4, r7, lr}
 800e3fa:	b08d      	sub	sp, #52	; 0x34
 800e3fc:	af02      	add	r7, sp, #8
 800e3fe:	6078      	str	r0, [r7, #4]
 800e400:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800e402:	2300      	movs	r3, #0
 800e404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2203      	movs	r2, #3
 800e40c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e414:	2b03      	cmp	r3, #3
 800e416:	d02e      	beq.n	800e476 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e41e:	d106      	bne.n	800e42e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e424:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	635a      	str	r2, [r3, #52]	; 0x34
 800e42c:	e029      	b.n	800e482 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800e42e:	683b      	ldr	r3, [r7, #0]
 800e430:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e434:	d10a      	bne.n	800e44c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e436:	6878      	ldr	r0, [r7, #4]
 800e438:	f000 fb64 	bl	800eb04 <SD_WideBus_Enable>
 800e43c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e442:	6a3b      	ldr	r3, [r7, #32]
 800e444:	431a      	orrs	r2, r3
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	635a      	str	r2, [r3, #52]	; 0x34
 800e44a:	e01a      	b.n	800e482 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800e44c:	683b      	ldr	r3, [r7, #0]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d10a      	bne.n	800e468 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	f000 fba1 	bl	800eb9a <SD_WideBus_Disable>
 800e458:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e45e:	6a3b      	ldr	r3, [r7, #32]
 800e460:	431a      	orrs	r2, r3
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	635a      	str	r2, [r3, #52]	; 0x34
 800e466:	e00c      	b.n	800e482 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e46c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	635a      	str	r2, [r3, #52]	; 0x34
 800e474:	e005      	b.n	800e482 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e47a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e486:	2b00      	cmp	r3, #0
 800e488:	d007      	beq.n	800e49a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	4a5f      	ldr	r2, [pc, #380]	; (800e60c <HAL_SD_ConfigWideBusOperation+0x214>)
 800e490:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800e492:	2301      	movs	r3, #1
 800e494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e498:	e096      	b.n	800e5c8 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800e49a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800e49e:	f04f 0100 	mov.w	r1, #0
 800e4a2:	f7fd fcf5 	bl	800be90 <HAL_RCCEx_GetPeriphCLKFreq>
 800e4a6:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800e4a8:	69fb      	ldr	r3, [r7, #28]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	f000 8083 	beq.w	800e5b6 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	685b      	ldr	r3, [r3, #4]
 800e4b4:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	689b      	ldr	r3, [r3, #8]
 800e4ba:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800e4bc:	683b      	ldr	r3, [r7, #0]
 800e4be:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	691b      	ldr	r3, [r3, #16]
 800e4c4:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	695a      	ldr	r2, [r3, #20]
 800e4ca:	69fb      	ldr	r3, [r7, #28]
 800e4cc:	4950      	ldr	r1, [pc, #320]	; (800e610 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e4ce:	fba1 1303 	umull	r1, r3, r1, r3
 800e4d2:	0e1b      	lsrs	r3, r3, #24
 800e4d4:	429a      	cmp	r2, r3
 800e4d6:	d303      	bcc.n	800e4e0 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	695b      	ldr	r3, [r3, #20]
 800e4dc:	61bb      	str	r3, [r7, #24]
 800e4de:	e05a      	b.n	800e596 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e4e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e4e8:	d103      	bne.n	800e4f2 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	695b      	ldr	r3, [r3, #20]
 800e4ee:	61bb      	str	r3, [r7, #24]
 800e4f0:	e051      	b.n	800e596 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e4f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e4fa:	d126      	bne.n	800e54a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	695b      	ldr	r3, [r3, #20]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d10e      	bne.n	800e522 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800e504:	69fb      	ldr	r3, [r7, #28]
 800e506:	4a43      	ldr	r2, [pc, #268]	; (800e614 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e508:	4293      	cmp	r3, r2
 800e50a:	d906      	bls.n	800e51a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e50c:	69fb      	ldr	r3, [r7, #28]
 800e50e:	4a40      	ldr	r2, [pc, #256]	; (800e610 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e510:	fba2 2303 	umull	r2, r3, r2, r3
 800e514:	0e5b      	lsrs	r3, r3, #25
 800e516:	61bb      	str	r3, [r7, #24]
 800e518:	e03d      	b.n	800e596 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	695b      	ldr	r3, [r3, #20]
 800e51e:	61bb      	str	r3, [r7, #24]
 800e520:	e039      	b.n	800e596 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	695b      	ldr	r3, [r3, #20]
 800e526:	005b      	lsls	r3, r3, #1
 800e528:	69fa      	ldr	r2, [r7, #28]
 800e52a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e52e:	4a39      	ldr	r2, [pc, #228]	; (800e614 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e530:	4293      	cmp	r3, r2
 800e532:	d906      	bls.n	800e542 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e534:	69fb      	ldr	r3, [r7, #28]
 800e536:	4a36      	ldr	r2, [pc, #216]	; (800e610 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e538:	fba2 2303 	umull	r2, r3, r2, r3
 800e53c:	0e5b      	lsrs	r3, r3, #25
 800e53e:	61bb      	str	r3, [r7, #24]
 800e540:	e029      	b.n	800e596 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	695b      	ldr	r3, [r3, #20]
 800e546:	61bb      	str	r3, [r7, #24]
 800e548:	e025      	b.n	800e596 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	695b      	ldr	r3, [r3, #20]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d10e      	bne.n	800e570 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800e552:	69fb      	ldr	r3, [r7, #28]
 800e554:	4a30      	ldr	r2, [pc, #192]	; (800e618 <HAL_SD_ConfigWideBusOperation+0x220>)
 800e556:	4293      	cmp	r3, r2
 800e558:	d906      	bls.n	800e568 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e55a:	69fb      	ldr	r3, [r7, #28]
 800e55c:	4a2c      	ldr	r2, [pc, #176]	; (800e610 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e55e:	fba2 2303 	umull	r2, r3, r2, r3
 800e562:	0e1b      	lsrs	r3, r3, #24
 800e564:	61bb      	str	r3, [r7, #24]
 800e566:	e016      	b.n	800e596 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	695b      	ldr	r3, [r3, #20]
 800e56c:	61bb      	str	r3, [r7, #24]
 800e56e:	e012      	b.n	800e596 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	695b      	ldr	r3, [r3, #20]
 800e574:	005b      	lsls	r3, r3, #1
 800e576:	69fa      	ldr	r2, [r7, #28]
 800e578:	fbb2 f3f3 	udiv	r3, r2, r3
 800e57c:	4a26      	ldr	r2, [pc, #152]	; (800e618 <HAL_SD_ConfigWideBusOperation+0x220>)
 800e57e:	4293      	cmp	r3, r2
 800e580:	d906      	bls.n	800e590 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e582:	69fb      	ldr	r3, [r7, #28]
 800e584:	4a22      	ldr	r2, [pc, #136]	; (800e610 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e586:	fba2 2303 	umull	r2, r3, r2, r3
 800e58a:	0e1b      	lsrs	r3, r3, #24
 800e58c:	61bb      	str	r3, [r7, #24]
 800e58e:	e002      	b.n	800e596 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	695b      	ldr	r3, [r3, #20]
 800e594:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	681c      	ldr	r4, [r3, #0]
 800e59a:	466a      	mov	r2, sp
 800e59c:	f107 0314 	add.w	r3, r7, #20
 800e5a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e5a4:	e882 0003 	stmia.w	r2, {r0, r1}
 800e5a8:	f107 0308 	add.w	r3, r7, #8
 800e5ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e5ae:	4620      	mov	r0, r4
 800e5b0:	f003 ffe0 	bl	8012574 <SDMMC_Init>
 800e5b4:	e008      	b.n	800e5c8 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5ba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800e5c2:	2301      	movs	r3, #1
 800e5c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	f004 f8ad 	bl	8012730 <SDMMC_CmdBlockLength>
 800e5d6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e5d8:	6a3b      	ldr	r3, [r7, #32]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d00c      	beq.n	800e5f8 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	4a0a      	ldr	r2, [pc, #40]	; (800e60c <HAL_SD_ConfigWideBusOperation+0x214>)
 800e5e4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e5ea:	6a3b      	ldr	r3, [r7, #32]
 800e5ec:	431a      	orrs	r2, r3
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800e5f2:	2301      	movs	r3, #1
 800e5f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	2201      	movs	r2, #1
 800e5fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800e600:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e604:	4618      	mov	r0, r3
 800e606:	372c      	adds	r7, #44	; 0x2c
 800e608:	46bd      	mov	sp, r7
 800e60a:	bd90      	pop	{r4, r7, pc}
 800e60c:	1fe00fff 	.word	0x1fe00fff
 800e610:	55e63b89 	.word	0x55e63b89
 800e614:	02faf080 	.word	0x02faf080
 800e618:	017d7840 	.word	0x017d7840

0800e61c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b086      	sub	sp, #24
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e624:	2300      	movs	r3, #0
 800e626:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e628:	f107 030c 	add.w	r3, r7, #12
 800e62c:	4619      	mov	r1, r3
 800e62e:	6878      	ldr	r0, [r7, #4]
 800e630:	f000 fa40 	bl	800eab4 <SD_SendStatus>
 800e634:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e636:	697b      	ldr	r3, [r7, #20]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d005      	beq.n	800e648 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	431a      	orrs	r2, r3
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	0a5b      	lsrs	r3, r3, #9
 800e64c:	f003 030f 	and.w	r3, r3, #15
 800e650:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e652:	693b      	ldr	r3, [r7, #16]
}
 800e654:	4618      	mov	r0, r3
 800e656:	3718      	adds	r7, #24
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd80      	pop	{r7, pc}

0800e65c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b090      	sub	sp, #64	; 0x40
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800e664:	2300      	movs	r3, #0
 800e666:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800e668:	f7f5 fb86 	bl	8003d78 <HAL_GetTick>
 800e66c:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	4618      	mov	r0, r3
 800e674:	f003 ffd7 	bl	8012626 <SDMMC_GetPowerState>
 800e678:	4603      	mov	r3, r0
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d102      	bne.n	800e684 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e67e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e682:	e0b5      	b.n	800e7f0 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e688:	2b03      	cmp	r3, #3
 800e68a:	d02e      	beq.n	800e6ea <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	4618      	mov	r0, r3
 800e692:	f004 fa22 	bl	8012ada <SDMMC_CmdSendCID>
 800e696:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d001      	beq.n	800e6a2 <SD_InitCard+0x46>
    {
      return errorstate;
 800e69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6a0:	e0a6      	b.n	800e7f0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	2100      	movs	r1, #0
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	f004 f802 	bl	80126b2 <SDMMC_GetResponse>
 800e6ae:	4602      	mov	r2, r0
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	2104      	movs	r1, #4
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f003 fff9 	bl	80126b2 <SDMMC_GetResponse>
 800e6c0:	4602      	mov	r2, r0
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	2108      	movs	r1, #8
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f003 fff0 	bl	80126b2 <SDMMC_GetResponse>
 800e6d2:	4602      	mov	r2, r0
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	210c      	movs	r1, #12
 800e6de:	4618      	mov	r0, r3
 800e6e0:	f003 ffe7 	bl	80126b2 <SDMMC_GetResponse>
 800e6e4:	4602      	mov	r2, r0
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6ee:	2b03      	cmp	r3, #3
 800e6f0:	d01d      	beq.n	800e72e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800e6f2:	e019      	b.n	800e728 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	f107 020a 	add.w	r2, r7, #10
 800e6fc:	4611      	mov	r1, r2
 800e6fe:	4618      	mov	r0, r3
 800e700:	f004 fa2a 	bl	8012b58 <SDMMC_CmdSetRelAdd>
 800e704:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800e706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d001      	beq.n	800e710 <SD_InitCard+0xb4>
      {
        return errorstate;
 800e70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e70e:	e06f      	b.n	800e7f0 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800e710:	f7f5 fb32 	bl	8003d78 <HAL_GetTick>
 800e714:	4602      	mov	r2, r0
 800e716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e718:	1ad3      	subs	r3, r2, r3
 800e71a:	f241 3287 	movw	r2, #4999	; 0x1387
 800e71e:	4293      	cmp	r3, r2
 800e720:	d902      	bls.n	800e728 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800e722:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e726:	e063      	b.n	800e7f0 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800e728:	897b      	ldrh	r3, [r7, #10]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d0e2      	beq.n	800e6f4 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e732:	2b03      	cmp	r3, #3
 800e734:	d036      	beq.n	800e7a4 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e736:	897b      	ldrh	r3, [r7, #10]
 800e738:	461a      	mov	r2, r3
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681a      	ldr	r2, [r3, #0]
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e746:	041b      	lsls	r3, r3, #16
 800e748:	4619      	mov	r1, r3
 800e74a:	4610      	mov	r0, r2
 800e74c:	f004 f9e4 	bl	8012b18 <SDMMC_CmdSendCSD>
 800e750:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e754:	2b00      	cmp	r3, #0
 800e756:	d001      	beq.n	800e75c <SD_InitCard+0x100>
    {
      return errorstate;
 800e758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e75a:	e049      	b.n	800e7f0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	2100      	movs	r1, #0
 800e762:	4618      	mov	r0, r3
 800e764:	f003 ffa5 	bl	80126b2 <SDMMC_GetResponse>
 800e768:	4602      	mov	r2, r0
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	2104      	movs	r1, #4
 800e774:	4618      	mov	r0, r3
 800e776:	f003 ff9c 	bl	80126b2 <SDMMC_GetResponse>
 800e77a:	4602      	mov	r2, r0
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	2108      	movs	r1, #8
 800e786:	4618      	mov	r0, r3
 800e788:	f003 ff93 	bl	80126b2 <SDMMC_GetResponse>
 800e78c:	4602      	mov	r2, r0
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	210c      	movs	r1, #12
 800e798:	4618      	mov	r0, r3
 800e79a:	f003 ff8a 	bl	80126b2 <SDMMC_GetResponse>
 800e79e:	4602      	mov	r2, r0
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	2104      	movs	r1, #4
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	f003 ff81 	bl	80126b2 <SDMMC_GetResponse>
 800e7b0:	4603      	mov	r3, r0
 800e7b2:	0d1a      	lsrs	r2, r3, #20
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e7b8:	f107 030c 	add.w	r3, r7, #12
 800e7bc:	4619      	mov	r1, r3
 800e7be:	6878      	ldr	r0, [r7, #4]
 800e7c0:	f7ff fb8c 	bl	800dedc <HAL_SD_GetCardCSD>
 800e7c4:	4603      	mov	r3, r0
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d002      	beq.n	800e7d0 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e7ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e7ce:	e00f      	b.n	800e7f0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681a      	ldr	r2, [r3, #0]
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7d8:	041b      	lsls	r3, r3, #16
 800e7da:	4619      	mov	r1, r3
 800e7dc:	4610      	mov	r0, r2
 800e7de:	f004 f893 	bl	8012908 <SDMMC_CmdSelDesel>
 800e7e2:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800e7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d001      	beq.n	800e7ee <SD_InitCard+0x192>
  {
    return errorstate;
 800e7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ec:	e000      	b.n	800e7f0 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e7ee:	2300      	movs	r3, #0
}
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	3740      	adds	r7, #64	; 0x40
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	bd80      	pop	{r7, pc}

0800e7f8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b086      	sub	sp, #24
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e800:	2300      	movs	r3, #0
 800e802:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800e804:	2300      	movs	r3, #0
 800e806:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800e808:	2300      	movs	r3, #0
 800e80a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	4618      	mov	r0, r3
 800e812:	f004 f89c 	bl	801294e <SDMMC_CmdGoIdleState>
 800e816:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d001      	beq.n	800e822 <SD_PowerON+0x2a>
  {
    return errorstate;
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	e072      	b.n	800e908 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	4618      	mov	r0, r3
 800e828:	f004 f8af 	bl	801298a <SDMMC_CmdOperCond>
 800e82c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e834:	d10d      	bne.n	800e852 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	2200      	movs	r2, #0
 800e83a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	4618      	mov	r0, r3
 800e842:	f004 f884 	bl	801294e <SDMMC_CmdGoIdleState>
 800e846:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d004      	beq.n	800e858 <SD_PowerON+0x60>
    {
      return errorstate;
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	e05a      	b.n	800e908 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	2201      	movs	r2, #1
 800e856:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e85c:	2b01      	cmp	r3, #1
 800e85e:	d137      	bne.n	800e8d0 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	2100      	movs	r1, #0
 800e866:	4618      	mov	r0, r3
 800e868:	f004 f8af 	bl	80129ca <SDMMC_CmdAppCommand>
 800e86c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d02d      	beq.n	800e8d0 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e874:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e878:	e046      	b.n	800e908 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	2100      	movs	r1, #0
 800e880:	4618      	mov	r0, r3
 800e882:	f004 f8a2 	bl	80129ca <SDMMC_CmdAppCommand>
 800e886:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d001      	beq.n	800e892 <SD_PowerON+0x9a>
    {
      return errorstate;
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	e03a      	b.n	800e908 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	491e      	ldr	r1, [pc, #120]	; (800e910 <SD_PowerON+0x118>)
 800e898:	4618      	mov	r0, r3
 800e89a:	f004 f8b9 	bl	8012a10 <SDMMC_CmdAppOperCommand>
 800e89e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d002      	beq.n	800e8ac <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e8a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e8aa:	e02d      	b.n	800e908 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	2100      	movs	r1, #0
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	f003 fefd 	bl	80126b2 <SDMMC_GetResponse>
 800e8b8:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e8ba:	697b      	ldr	r3, [r7, #20]
 800e8bc:	0fdb      	lsrs	r3, r3, #31
 800e8be:	2b01      	cmp	r3, #1
 800e8c0:	d101      	bne.n	800e8c6 <SD_PowerON+0xce>
 800e8c2:	2301      	movs	r3, #1
 800e8c4:	e000      	b.n	800e8c8 <SD_PowerON+0xd0>
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	613b      	str	r3, [r7, #16]

    count++;
 800e8ca:	68bb      	ldr	r3, [r7, #8]
 800e8cc:	3301      	adds	r3, #1
 800e8ce:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e8d0:	68bb      	ldr	r3, [r7, #8]
 800e8d2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e8d6:	4293      	cmp	r3, r2
 800e8d8:	d802      	bhi.n	800e8e0 <SD_PowerON+0xe8>
 800e8da:	693b      	ldr	r3, [r7, #16]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d0cc      	beq.n	800e87a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800e8e0:	68bb      	ldr	r3, [r7, #8]
 800e8e2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e8e6:	4293      	cmp	r3, r2
 800e8e8:	d902      	bls.n	800e8f0 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e8ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e8ee:	e00b      	b.n	800e908 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800e8f6:	697b      	ldr	r3, [r7, #20]
 800e8f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d002      	beq.n	800e906 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2201      	movs	r2, #1
 800e904:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e906:	2300      	movs	r3, #0
}
 800e908:	4618      	mov	r0, r3
 800e90a:	3718      	adds	r7, #24
 800e90c:	46bd      	mov	sp, r7
 800e90e:	bd80      	pop	{r7, pc}
 800e910:	c1100000 	.word	0xc1100000

0800e914 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e914:	b580      	push	{r7, lr}
 800e916:	b08c      	sub	sp, #48	; 0x30
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
 800e91c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e91e:	f7f5 fa2b 	bl	8003d78 <HAL_GetTick>
 800e922:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	2100      	movs	r1, #0
 800e92e:	4618      	mov	r0, r3
 800e930:	f003 febf 	bl	80126b2 <SDMMC_GetResponse>
 800e934:	4603      	mov	r3, r0
 800e936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e93a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e93e:	d102      	bne.n	800e946 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e940:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e944:	e0b0      	b.n	800eaa8 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	2140      	movs	r1, #64	; 0x40
 800e94c:	4618      	mov	r0, r3
 800e94e:	f003 feef 	bl	8012730 <SDMMC_CmdBlockLength>
 800e952:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e954:	6a3b      	ldr	r3, [r7, #32]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d005      	beq.n	800e966 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e962:	6a3b      	ldr	r3, [r7, #32]
 800e964:	e0a0      	b.n	800eaa8 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681a      	ldr	r2, [r3, #0]
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e96e:	041b      	lsls	r3, r3, #16
 800e970:	4619      	mov	r1, r3
 800e972:	4610      	mov	r0, r2
 800e974:	f004 f829 	bl	80129ca <SDMMC_CmdAppCommand>
 800e978:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e97a:	6a3b      	ldr	r3, [r7, #32]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d005      	beq.n	800e98c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e988:	6a3b      	ldr	r3, [r7, #32]
 800e98a:	e08d      	b.n	800eaa8 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e98c:	f04f 33ff 	mov.w	r3, #4294967295
 800e990:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e992:	2340      	movs	r3, #64	; 0x40
 800e994:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e996:	2360      	movs	r3, #96	; 0x60
 800e998:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e99a:	2302      	movs	r3, #2
 800e99c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e99e:	2300      	movs	r3, #0
 800e9a0:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e9a2:	2301      	movs	r3, #1
 800e9a4:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	f107 0208 	add.w	r2, r7, #8
 800e9ae:	4611      	mov	r1, r2
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	f003 fe91 	bl	80126d8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	f004 f911 	bl	8012be2 <SDMMC_CmdStatusRegister>
 800e9c0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e9c2:	6a3b      	ldr	r3, [r7, #32]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d02b      	beq.n	800ea20 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e9d0:	6a3b      	ldr	r3, [r7, #32]
 800e9d2:	e069      	b.n	800eaa8 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d013      	beq.n	800ea0a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e9e6:	e00d      	b.n	800ea04 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	f003 fdeb 	bl	80125c8 <SDMMC_ReadFIFO>
 800e9f2:	4602      	mov	r2, r0
 800e9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9f6:	601a      	str	r2, [r3, #0]
        pData++;
 800e9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9fa:	3304      	adds	r3, #4
 800e9fc:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800e9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea00:	3301      	adds	r3, #1
 800ea02:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea06:	2b07      	cmp	r3, #7
 800ea08:	d9ee      	bls.n	800e9e8 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ea0a:	f7f5 f9b5 	bl	8003d78 <HAL_GetTick>
 800ea0e:	4602      	mov	r2, r0
 800ea10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea12:	1ad3      	subs	r3, r2, r3
 800ea14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea18:	d102      	bne.n	800ea20 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ea1a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ea1e:	e043      	b.n	800eaa8 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea26:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d0d2      	beq.n	800e9d4 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea34:	f003 0308 	and.w	r3, r3, #8
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d001      	beq.n	800ea40 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ea3c:	2308      	movs	r3, #8
 800ea3e:	e033      	b.n	800eaa8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea46:	f003 0302 	and.w	r3, r3, #2
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d001      	beq.n	800ea52 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ea4e:	2302      	movs	r3, #2
 800ea50:	e02a      	b.n	800eaa8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea58:	f003 0320 	and.w	r3, r3, #32
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d017      	beq.n	800ea90 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800ea60:	2320      	movs	r3, #32
 800ea62:	e021      	b.n	800eaa8 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f003 fdad 	bl	80125c8 <SDMMC_ReadFIFO>
 800ea6e:	4602      	mov	r2, r0
 800ea70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea72:	601a      	str	r2, [r3, #0]
    pData++;
 800ea74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea76:	3304      	adds	r3, #4
 800ea78:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ea7a:	f7f5 f97d 	bl	8003d78 <HAL_GetTick>
 800ea7e:	4602      	mov	r2, r0
 800ea80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea82:	1ad3      	subs	r3, r2, r3
 800ea84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea88:	d102      	bne.n	800ea90 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ea8a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ea8e:	e00b      	b.n	800eaa8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d1e2      	bne.n	800ea64 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	4a03      	ldr	r2, [pc, #12]	; (800eab0 <SD_SendSDStatus+0x19c>)
 800eaa4:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800eaa6:	2300      	movs	r3, #0
}
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	3730      	adds	r7, #48	; 0x30
 800eaac:	46bd      	mov	sp, r7
 800eaae:	bd80      	pop	{r7, pc}
 800eab0:	18000f3a 	.word	0x18000f3a

0800eab4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b084      	sub	sp, #16
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
 800eabc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800eabe:	683b      	ldr	r3, [r7, #0]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d102      	bne.n	800eaca <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800eac4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800eac8:	e018      	b.n	800eafc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	681a      	ldr	r2, [r3, #0]
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ead2:	041b      	lsls	r3, r3, #16
 800ead4:	4619      	mov	r1, r3
 800ead6:	4610      	mov	r0, r2
 800ead8:	f004 f860 	bl	8012b9c <SDMMC_CmdSendStatus>
 800eadc:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d001      	beq.n	800eae8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	e009      	b.n	800eafc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	2100      	movs	r1, #0
 800eaee:	4618      	mov	r0, r3
 800eaf0:	f003 fddf 	bl	80126b2 <SDMMC_GetResponse>
 800eaf4:	4602      	mov	r2, r0
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800eafa:	2300      	movs	r3, #0
}
 800eafc:	4618      	mov	r0, r3
 800eafe:	3710      	adds	r7, #16
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}

0800eb04 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b086      	sub	sp, #24
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	60fb      	str	r3, [r7, #12]
 800eb10:	2300      	movs	r3, #0
 800eb12:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	2100      	movs	r1, #0
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	f003 fdc9 	bl	80126b2 <SDMMC_GetResponse>
 800eb20:	4603      	mov	r3, r0
 800eb22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eb26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800eb2a:	d102      	bne.n	800eb32 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800eb2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eb30:	e02f      	b.n	800eb92 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800eb32:	f107 030c 	add.w	r3, r7, #12
 800eb36:	4619      	mov	r1, r3
 800eb38:	6878      	ldr	r0, [r7, #4]
 800eb3a:	f000 f879 	bl	800ec30 <SD_FindSCR>
 800eb3e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800eb40:	697b      	ldr	r3, [r7, #20]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d001      	beq.n	800eb4a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800eb46:	697b      	ldr	r3, [r7, #20]
 800eb48:	e023      	b.n	800eb92 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800eb4a:	693b      	ldr	r3, [r7, #16]
 800eb4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d01c      	beq.n	800eb8e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	681a      	ldr	r2, [r3, #0]
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb5c:	041b      	lsls	r3, r3, #16
 800eb5e:	4619      	mov	r1, r3
 800eb60:	4610      	mov	r0, r2
 800eb62:	f003 ff32 	bl	80129ca <SDMMC_CmdAppCommand>
 800eb66:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800eb68:	697b      	ldr	r3, [r7, #20]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d001      	beq.n	800eb72 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800eb6e:	697b      	ldr	r3, [r7, #20]
 800eb70:	e00f      	b.n	800eb92 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	2102      	movs	r1, #2
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f003 ff69 	bl	8012a50 <SDMMC_CmdBusWidth>
 800eb7e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800eb80:	697b      	ldr	r3, [r7, #20]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d001      	beq.n	800eb8a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800eb86:	697b      	ldr	r3, [r7, #20]
 800eb88:	e003      	b.n	800eb92 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	e001      	b.n	800eb92 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800eb8e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800eb92:	4618      	mov	r0, r3
 800eb94:	3718      	adds	r7, #24
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bd80      	pop	{r7, pc}

0800eb9a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800eb9a:	b580      	push	{r7, lr}
 800eb9c:	b086      	sub	sp, #24
 800eb9e:	af00      	add	r7, sp, #0
 800eba0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800eba2:	2300      	movs	r3, #0
 800eba4:	60fb      	str	r3, [r7, #12]
 800eba6:	2300      	movs	r3, #0
 800eba8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	2100      	movs	r1, #0
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f003 fd7e 	bl	80126b2 <SDMMC_GetResponse>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ebbc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ebc0:	d102      	bne.n	800ebc8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ebc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ebc6:	e02f      	b.n	800ec28 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ebc8:	f107 030c 	add.w	r3, r7, #12
 800ebcc:	4619      	mov	r1, r3
 800ebce:	6878      	ldr	r0, [r7, #4]
 800ebd0:	f000 f82e 	bl	800ec30 <SD_FindSCR>
 800ebd4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ebd6:	697b      	ldr	r3, [r7, #20]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d001      	beq.n	800ebe0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800ebdc:	697b      	ldr	r3, [r7, #20]
 800ebde:	e023      	b.n	800ec28 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ebe0:	693b      	ldr	r3, [r7, #16]
 800ebe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d01c      	beq.n	800ec24 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681a      	ldr	r2, [r3, #0]
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebf2:	041b      	lsls	r3, r3, #16
 800ebf4:	4619      	mov	r1, r3
 800ebf6:	4610      	mov	r0, r2
 800ebf8:	f003 fee7 	bl	80129ca <SDMMC_CmdAppCommand>
 800ebfc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ebfe:	697b      	ldr	r3, [r7, #20]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d001      	beq.n	800ec08 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800ec04:	697b      	ldr	r3, [r7, #20]
 800ec06:	e00f      	b.n	800ec28 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	2100      	movs	r1, #0
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f003 ff1e 	bl	8012a50 <SDMMC_CmdBusWidth>
 800ec14:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ec16:	697b      	ldr	r3, [r7, #20]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d001      	beq.n	800ec20 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800ec1c:	697b      	ldr	r3, [r7, #20]
 800ec1e:	e003      	b.n	800ec28 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ec20:	2300      	movs	r3, #0
 800ec22:	e001      	b.n	800ec28 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ec24:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ec28:	4618      	mov	r0, r3
 800ec2a:	3718      	adds	r7, #24
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	bd80      	pop	{r7, pc}

0800ec30 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b08e      	sub	sp, #56	; 0x38
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
 800ec38:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ec3a:	f7f5 f89d 	bl	8003d78 <HAL_GetTick>
 800ec3e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800ec40:	2300      	movs	r3, #0
 800ec42:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800ec44:	2300      	movs	r3, #0
 800ec46:	60bb      	str	r3, [r7, #8]
 800ec48:	2300      	movs	r3, #0
 800ec4a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800ec4c:	683b      	ldr	r3, [r7, #0]
 800ec4e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	2108      	movs	r1, #8
 800ec56:	4618      	mov	r0, r3
 800ec58:	f003 fd6a 	bl	8012730 <SDMMC_CmdBlockLength>
 800ec5c:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ec5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d001      	beq.n	800ec68 <SD_FindSCR+0x38>
  {
    return errorstate;
 800ec64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec66:	e0ad      	b.n	800edc4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681a      	ldr	r2, [r3, #0]
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec70:	041b      	lsls	r3, r3, #16
 800ec72:	4619      	mov	r1, r3
 800ec74:	4610      	mov	r0, r2
 800ec76:	f003 fea8 	bl	80129ca <SDMMC_CmdAppCommand>
 800ec7a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ec7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d001      	beq.n	800ec86 <SD_FindSCR+0x56>
  {
    return errorstate;
 800ec82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec84:	e09e      	b.n	800edc4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ec86:	f04f 33ff 	mov.w	r3, #4294967295
 800ec8a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800ec8c:	2308      	movs	r3, #8
 800ec8e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800ec90:	2330      	movs	r3, #48	; 0x30
 800ec92:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ec94:	2302      	movs	r3, #2
 800ec96:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ec98:	2300      	movs	r3, #0
 800ec9a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ec9c:	2301      	movs	r3, #1
 800ec9e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	f107 0210 	add.w	r2, r7, #16
 800eca8:	4611      	mov	r1, r2
 800ecaa:	4618      	mov	r0, r3
 800ecac:	f003 fd14 	bl	80126d8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	f003 feee 	bl	8012a96 <SDMMC_CmdSendSCR>
 800ecba:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ecbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d027      	beq.n	800ed12 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800ecc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecc4:	e07e      	b.n	800edc4 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eccc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d113      	bne.n	800ecfc <SD_FindSCR+0xcc>
 800ecd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d110      	bne.n	800ecfc <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	4618      	mov	r0, r3
 800ece0:	f003 fc72 	bl	80125c8 <SDMMC_ReadFIFO>
 800ece4:	4603      	mov	r3, r0
 800ece6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	4618      	mov	r0, r3
 800ecee:	f003 fc6b 	bl	80125c8 <SDMMC_ReadFIFO>
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	60fb      	str	r3, [r7, #12]
      index++;
 800ecf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecf8:	3301      	adds	r3, #1
 800ecfa:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ecfc:	f7f5 f83c 	bl	8003d78 <HAL_GetTick>
 800ed00:	4602      	mov	r2, r0
 800ed02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed04:	1ad3      	subs	r3, r2, r3
 800ed06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed0a:	d102      	bne.n	800ed12 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ed0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ed10:	e058      	b.n	800edc4 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ed18:	f240 532a 	movw	r3, #1322	; 0x52a
 800ed1c:	4013      	ands	r3, r2
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d0d1      	beq.n	800ecc6 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed28:	f003 0308 	and.w	r3, r3, #8
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d005      	beq.n	800ed3c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	2208      	movs	r2, #8
 800ed36:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ed38:	2308      	movs	r3, #8
 800ed3a:	e043      	b.n	800edc4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed42:	f003 0302 	and.w	r3, r3, #2
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d005      	beq.n	800ed56 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	2202      	movs	r2, #2
 800ed50:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ed52:	2302      	movs	r3, #2
 800ed54:	e036      	b.n	800edc4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed5c:	f003 0320 	and.w	r3, r3, #32
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d005      	beq.n	800ed70 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	2220      	movs	r2, #32
 800ed6a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ed6c:	2320      	movs	r3, #32
 800ed6e:	e029      	b.n	800edc4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	4a15      	ldr	r2, [pc, #84]	; (800edcc <SD_FindSCR+0x19c>)
 800ed76:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	061a      	lsls	r2, r3, #24
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	021b      	lsls	r3, r3, #8
 800ed80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ed84:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	0a1b      	lsrs	r3, r3, #8
 800ed8a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ed8e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	0e1b      	lsrs	r3, r3, #24
 800ed94:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ed96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed98:	601a      	str	r2, [r3, #0]
    scr++;
 800ed9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed9c:	3304      	adds	r3, #4
 800ed9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800eda0:	68bb      	ldr	r3, [r7, #8]
 800eda2:	061a      	lsls	r2, r3, #24
 800eda4:	68bb      	ldr	r3, [r7, #8]
 800eda6:	021b      	lsls	r3, r3, #8
 800eda8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800edac:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800edae:	68bb      	ldr	r3, [r7, #8]
 800edb0:	0a1b      	lsrs	r3, r3, #8
 800edb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800edb6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800edb8:	68bb      	ldr	r3, [r7, #8]
 800edba:	0e1b      	lsrs	r3, r3, #24
 800edbc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800edbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edc0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800edc2:	2300      	movs	r3, #0
}
 800edc4:	4618      	mov	r0, r3
 800edc6:	3738      	adds	r7, #56	; 0x38
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}
 800edcc:	18000f3a 	.word	0x18000f3a

0800edd0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b086      	sub	sp, #24
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eddc:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ede2:	2b1f      	cmp	r3, #31
 800ede4:	d936      	bls.n	800ee54 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800ede6:	2300      	movs	r3, #0
 800ede8:	617b      	str	r3, [r7, #20]
 800edea:	e027      	b.n	800ee3c <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	4618      	mov	r0, r3
 800edf2:	f003 fbe9 	bl	80125c8 <SDMMC_ReadFIFO>
 800edf6:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	b2da      	uxtb	r2, r3
 800edfc:	693b      	ldr	r3, [r7, #16]
 800edfe:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ee00:	693b      	ldr	r3, [r7, #16]
 800ee02:	3301      	adds	r3, #1
 800ee04:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	0a1b      	lsrs	r3, r3, #8
 800ee0a:	b2da      	uxtb	r2, r3
 800ee0c:	693b      	ldr	r3, [r7, #16]
 800ee0e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ee10:	693b      	ldr	r3, [r7, #16]
 800ee12:	3301      	adds	r3, #1
 800ee14:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	0c1b      	lsrs	r3, r3, #16
 800ee1a:	b2da      	uxtb	r2, r3
 800ee1c:	693b      	ldr	r3, [r7, #16]
 800ee1e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ee20:	693b      	ldr	r3, [r7, #16]
 800ee22:	3301      	adds	r3, #1
 800ee24:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	0e1b      	lsrs	r3, r3, #24
 800ee2a:	b2da      	uxtb	r2, r3
 800ee2c:	693b      	ldr	r3, [r7, #16]
 800ee2e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ee30:	693b      	ldr	r3, [r7, #16]
 800ee32:	3301      	adds	r3, #1
 800ee34:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800ee36:	697b      	ldr	r3, [r7, #20]
 800ee38:	3301      	adds	r3, #1
 800ee3a:	617b      	str	r3, [r7, #20]
 800ee3c:	697b      	ldr	r3, [r7, #20]
 800ee3e:	2b07      	cmp	r3, #7
 800ee40:	d9d4      	bls.n	800edec <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	693a      	ldr	r2, [r7, #16]
 800ee46:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee4c:	f1a3 0220 	sub.w	r2, r3, #32
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800ee54:	bf00      	nop
 800ee56:	3718      	adds	r7, #24
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}

0800ee5c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b086      	sub	sp, #24
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	69db      	ldr	r3, [r3, #28]
 800ee68:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	6a1b      	ldr	r3, [r3, #32]
 800ee6e:	2b1f      	cmp	r3, #31
 800ee70:	d93a      	bls.n	800eee8 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800ee72:	2300      	movs	r3, #0
 800ee74:	617b      	str	r3, [r7, #20]
 800ee76:	e02b      	b.n	800eed0 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800ee78:	693b      	ldr	r3, [r7, #16]
 800ee7a:	781b      	ldrb	r3, [r3, #0]
 800ee7c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ee7e:	693b      	ldr	r3, [r7, #16]
 800ee80:	3301      	adds	r3, #1
 800ee82:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800ee84:	693b      	ldr	r3, [r7, #16]
 800ee86:	781b      	ldrb	r3, [r3, #0]
 800ee88:	021a      	lsls	r2, r3, #8
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	4313      	orrs	r3, r2
 800ee8e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ee90:	693b      	ldr	r3, [r7, #16]
 800ee92:	3301      	adds	r3, #1
 800ee94:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800ee96:	693b      	ldr	r3, [r7, #16]
 800ee98:	781b      	ldrb	r3, [r3, #0]
 800ee9a:	041a      	lsls	r2, r3, #16
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	4313      	orrs	r3, r2
 800eea0:	60fb      	str	r3, [r7, #12]
      tmp++;
 800eea2:	693b      	ldr	r3, [r7, #16]
 800eea4:	3301      	adds	r3, #1
 800eea6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800eea8:	693b      	ldr	r3, [r7, #16]
 800eeaa:	781b      	ldrb	r3, [r3, #0]
 800eeac:	061a      	lsls	r2, r3, #24
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	4313      	orrs	r3, r2
 800eeb2:	60fb      	str	r3, [r7, #12]
      tmp++;
 800eeb4:	693b      	ldr	r3, [r7, #16]
 800eeb6:	3301      	adds	r3, #1
 800eeb8:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	f107 020c 	add.w	r2, r7, #12
 800eec2:	4611      	mov	r1, r2
 800eec4:	4618      	mov	r0, r3
 800eec6:	f003 fb8c 	bl	80125e2 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800eeca:	697b      	ldr	r3, [r7, #20]
 800eecc:	3301      	adds	r3, #1
 800eece:	617b      	str	r3, [r7, #20]
 800eed0:	697b      	ldr	r3, [r7, #20]
 800eed2:	2b07      	cmp	r3, #7
 800eed4:	d9d0      	bls.n	800ee78 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	693a      	ldr	r2, [r7, #16]
 800eeda:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	6a1b      	ldr	r3, [r3, #32]
 800eee0:	f1a3 0220 	sub.w	r2, r3, #32
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	621a      	str	r2, [r3, #32]
  }
}
 800eee8:	bf00      	nop
 800eeea:	3718      	adds	r7, #24
 800eeec:	46bd      	mov	sp, r7
 800eeee:	bd80      	pop	{r7, pc}

0800eef0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800eef0:	b480      	push	{r7}
 800eef2:	b083      	sub	sp, #12
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800eef8:	bf00      	nop
 800eefa:	370c      	adds	r7, #12
 800eefc:	46bd      	mov	sp, r7
 800eefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef02:	4770      	bx	lr

0800ef04 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800ef04:	b480      	push	{r7}
 800ef06:	b083      	sub	sp, #12
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800ef0c:	bf00      	nop
 800ef0e:	370c      	adds	r7, #12
 800ef10:	46bd      	mov	sp, r7
 800ef12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef16:	4770      	bx	lr

0800ef18 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800ef18:	b480      	push	{r7}
 800ef1a:	b083      	sub	sp, #12
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800ef20:	bf00      	nop
 800ef22:	370c      	adds	r7, #12
 800ef24:	46bd      	mov	sp, r7
 800ef26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2a:	4770      	bx	lr

0800ef2c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800ef2c:	b480      	push	{r7}
 800ef2e:	b083      	sub	sp, #12
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800ef34:	bf00      	nop
 800ef36:	370c      	adds	r7, #12
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3e:	4770      	bx	lr

0800ef40 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b084      	sub	sp, #16
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d101      	bne.n	800ef52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ef4e:	2301      	movs	r3, #1
 800ef50:	e10f      	b.n	800f172 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	2200      	movs	r2, #0
 800ef56:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	4a87      	ldr	r2, [pc, #540]	; (800f17c <HAL_SPI_Init+0x23c>)
 800ef5e:	4293      	cmp	r3, r2
 800ef60:	d00f      	beq.n	800ef82 <HAL_SPI_Init+0x42>
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	4a86      	ldr	r2, [pc, #536]	; (800f180 <HAL_SPI_Init+0x240>)
 800ef68:	4293      	cmp	r3, r2
 800ef6a:	d00a      	beq.n	800ef82 <HAL_SPI_Init+0x42>
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	4a84      	ldr	r2, [pc, #528]	; (800f184 <HAL_SPI_Init+0x244>)
 800ef72:	4293      	cmp	r3, r2
 800ef74:	d005      	beq.n	800ef82 <HAL_SPI_Init+0x42>
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	68db      	ldr	r3, [r3, #12]
 800ef7a:	2b0f      	cmp	r3, #15
 800ef7c:	d901      	bls.n	800ef82 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ef7e:	2301      	movs	r3, #1
 800ef80:	e0f7      	b.n	800f172 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ef82:	6878      	ldr	r0, [r7, #4]
 800ef84:	f000 fd5a 	bl	800fa3c <SPI_GetPacketSize>
 800ef88:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	4a7b      	ldr	r2, [pc, #492]	; (800f17c <HAL_SPI_Init+0x23c>)
 800ef90:	4293      	cmp	r3, r2
 800ef92:	d00c      	beq.n	800efae <HAL_SPI_Init+0x6e>
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	4a79      	ldr	r2, [pc, #484]	; (800f180 <HAL_SPI_Init+0x240>)
 800ef9a:	4293      	cmp	r3, r2
 800ef9c:	d007      	beq.n	800efae <HAL_SPI_Init+0x6e>
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	4a78      	ldr	r2, [pc, #480]	; (800f184 <HAL_SPI_Init+0x244>)
 800efa4:	4293      	cmp	r3, r2
 800efa6:	d002      	beq.n	800efae <HAL_SPI_Init+0x6e>
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	2b08      	cmp	r3, #8
 800efac:	d811      	bhi.n	800efd2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800efb2:	4a72      	ldr	r2, [pc, #456]	; (800f17c <HAL_SPI_Init+0x23c>)
 800efb4:	4293      	cmp	r3, r2
 800efb6:	d009      	beq.n	800efcc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	4a70      	ldr	r2, [pc, #448]	; (800f180 <HAL_SPI_Init+0x240>)
 800efbe:	4293      	cmp	r3, r2
 800efc0:	d004      	beq.n	800efcc <HAL_SPI_Init+0x8c>
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	4a6f      	ldr	r2, [pc, #444]	; (800f184 <HAL_SPI_Init+0x244>)
 800efc8:	4293      	cmp	r3, r2
 800efca:	d104      	bne.n	800efd6 <HAL_SPI_Init+0x96>
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	2b10      	cmp	r3, #16
 800efd0:	d901      	bls.n	800efd6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800efd2:	2301      	movs	r3, #1
 800efd4:	e0cd      	b.n	800f172 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800efdc:	b2db      	uxtb	r3, r3
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d106      	bne.n	800eff0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	2200      	movs	r2, #0
 800efe6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800efea:	6878      	ldr	r0, [r7, #4]
 800efec:	f7f4 f8dc 	bl	80031a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	2202      	movs	r2, #2
 800eff4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	681a      	ldr	r2, [r3, #0]
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	f022 0201 	bic.w	r2, r2, #1
 800f006:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	689b      	ldr	r3, [r3, #8]
 800f00e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800f012:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	699b      	ldr	r3, [r3, #24]
 800f018:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f01c:	d119      	bne.n	800f052 <HAL_SPI_Init+0x112>
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	685b      	ldr	r3, [r3, #4]
 800f022:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f026:	d103      	bne.n	800f030 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d008      	beq.n	800f042 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f034:	2b00      	cmp	r3, #0
 800f036:	d10c      	bne.n	800f052 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f03c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f040:	d107      	bne.n	800f052 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	681a      	ldr	r2, [r3, #0]
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f050:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	685b      	ldr	r3, [r3, #4]
 800f056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d00f      	beq.n	800f07e <HAL_SPI_Init+0x13e>
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	68db      	ldr	r3, [r3, #12]
 800f062:	2b06      	cmp	r3, #6
 800f064:	d90b      	bls.n	800f07e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	430a      	orrs	r2, r1
 800f07a:	601a      	str	r2, [r3, #0]
 800f07c:	e007      	b.n	800f08e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	681a      	ldr	r2, [r3, #0]
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f08c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	69da      	ldr	r2, [r3, #28]
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f096:	431a      	orrs	r2, r3
 800f098:	68bb      	ldr	r3, [r7, #8]
 800f09a:	431a      	orrs	r2, r3
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0a0:	ea42 0103 	orr.w	r1, r2, r3
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	68da      	ldr	r2, [r3, #12]
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	430a      	orrs	r2, r1
 800f0ae:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0b8:	431a      	orrs	r2, r3
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0be:	431a      	orrs	r2, r3
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	699b      	ldr	r3, [r3, #24]
 800f0c4:	431a      	orrs	r2, r3
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	691b      	ldr	r3, [r3, #16]
 800f0ca:	431a      	orrs	r2, r3
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	695b      	ldr	r3, [r3, #20]
 800f0d0:	431a      	orrs	r2, r3
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	6a1b      	ldr	r3, [r3, #32]
 800f0d6:	431a      	orrs	r2, r3
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	685b      	ldr	r3, [r3, #4]
 800f0dc:	431a      	orrs	r2, r3
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f0e2:	431a      	orrs	r2, r3
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	689b      	ldr	r3, [r3, #8]
 800f0e8:	431a      	orrs	r2, r3
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f0ee:	ea42 0103 	orr.w	r1, r2, r3
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	430a      	orrs	r2, r1
 800f0fc:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	685b      	ldr	r3, [r3, #4]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d113      	bne.n	800f12e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	689b      	ldr	r3, [r3, #8]
 800f10c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f118:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	689b      	ldr	r3, [r3, #8]
 800f120:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f12c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	f022 0201 	bic.w	r2, r2, #1
 800f13c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	685b      	ldr	r3, [r3, #4]
 800f142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f146:	2b00      	cmp	r3, #0
 800f148:	d00a      	beq.n	800f160 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	68db      	ldr	r3, [r3, #12]
 800f150:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	430a      	orrs	r2, r1
 800f15e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	2200      	movs	r2, #0
 800f164:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	2201      	movs	r2, #1
 800f16c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800f170:	2300      	movs	r3, #0
}
 800f172:	4618      	mov	r0, r3
 800f174:	3710      	adds	r7, #16
 800f176:	46bd      	mov	sp, r7
 800f178:	bd80      	pop	{r7, pc}
 800f17a:	bf00      	nop
 800f17c:	40013000 	.word	0x40013000
 800f180:	40003800 	.word	0x40003800
 800f184:	40003c00 	.word	0x40003c00

0800f188 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b08a      	sub	sp, #40	; 0x28
 800f18c:	af02      	add	r7, sp, #8
 800f18e:	60f8      	str	r0, [r7, #12]
 800f190:	60b9      	str	r1, [r7, #8]
 800f192:	603b      	str	r3, [r7, #0]
 800f194:	4613      	mov	r3, r2
 800f196:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	3320      	adds	r3, #32
 800f19e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f1aa:	2b01      	cmp	r3, #1
 800f1ac:	d101      	bne.n	800f1b2 <HAL_SPI_Transmit+0x2a>
 800f1ae:	2302      	movs	r3, #2
 800f1b0:	e1e1      	b.n	800f576 <HAL_SPI_Transmit+0x3ee>
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	2201      	movs	r2, #1
 800f1b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f1ba:	f7f4 fddd 	bl	8003d78 <HAL_GetTick>
 800f1be:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f1c6:	b2db      	uxtb	r3, r3
 800f1c8:	2b01      	cmp	r3, #1
 800f1ca:	d007      	beq.n	800f1dc <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800f1cc:	2302      	movs	r3, #2
 800f1ce:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f1d8:	7efb      	ldrb	r3, [r7, #27]
 800f1da:	e1cc      	b.n	800f576 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f1dc:	68bb      	ldr	r3, [r7, #8]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d002      	beq.n	800f1e8 <HAL_SPI_Transmit+0x60>
 800f1e2:	88fb      	ldrh	r3, [r7, #6]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d107      	bne.n	800f1f8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800f1e8:	2301      	movs	r3, #1
 800f1ea:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f1f4:	7efb      	ldrb	r3, [r7, #27]
 800f1f6:	e1be      	b.n	800f576 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	2203      	movs	r2, #3
 800f1fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	2200      	movs	r2, #0
 800f204:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	68ba      	ldr	r2, [r7, #8]
 800f20c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	88fa      	ldrh	r2, [r7, #6]
 800f212:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	88fa      	ldrh	r2, [r7, #6]
 800f21a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	2200      	movs	r2, #0
 800f222:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	2200      	movs	r2, #0
 800f228:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	2200      	movs	r2, #0
 800f230:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	2200      	movs	r2, #0
 800f238:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	2200      	movs	r2, #0
 800f23e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	689b      	ldr	r3, [r3, #8]
 800f244:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800f248:	d108      	bne.n	800f25c <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	681a      	ldr	r2, [r3, #0]
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f258:	601a      	str	r2, [r3, #0]
 800f25a:	e009      	b.n	800f270 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	68db      	ldr	r3, [r3, #12]
 800f262:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800f26e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	685a      	ldr	r2, [r3, #4]
 800f276:	4b96      	ldr	r3, [pc, #600]	; (800f4d0 <HAL_SPI_Transmit+0x348>)
 800f278:	4013      	ands	r3, r2
 800f27a:	88f9      	ldrh	r1, [r7, #6]
 800f27c:	68fa      	ldr	r2, [r7, #12]
 800f27e:	6812      	ldr	r2, [r2, #0]
 800f280:	430b      	orrs	r3, r1
 800f282:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	681a      	ldr	r2, [r3, #0]
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	f042 0201 	orr.w	r2, r2, #1
 800f292:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	685b      	ldr	r3, [r3, #4]
 800f298:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f29c:	d107      	bne.n	800f2ae <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	681a      	ldr	r2, [r3, #0]
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f2ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	68db      	ldr	r3, [r3, #12]
 800f2b2:	2b0f      	cmp	r3, #15
 800f2b4:	d947      	bls.n	800f346 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f2b6:	e03f      	b.n	800f338 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	695b      	ldr	r3, [r3, #20]
 800f2be:	f003 0302 	and.w	r3, r3, #2
 800f2c2:	2b02      	cmp	r3, #2
 800f2c4:	d114      	bne.n	800f2f0 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	6812      	ldr	r2, [r2, #0]
 800f2d0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f2d6:	1d1a      	adds	r2, r3, #4
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f2e2:	b29b      	uxth	r3, r3
 800f2e4:	3b01      	subs	r3, #1
 800f2e6:	b29a      	uxth	r2, r3
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f2ee:	e023      	b.n	800f338 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f2f0:	f7f4 fd42 	bl	8003d78 <HAL_GetTick>
 800f2f4:	4602      	mov	r2, r0
 800f2f6:	697b      	ldr	r3, [r7, #20]
 800f2f8:	1ad3      	subs	r3, r2, r3
 800f2fa:	683a      	ldr	r2, [r7, #0]
 800f2fc:	429a      	cmp	r2, r3
 800f2fe:	d803      	bhi.n	800f308 <HAL_SPI_Transmit+0x180>
 800f300:	683b      	ldr	r3, [r7, #0]
 800f302:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f306:	d102      	bne.n	800f30e <HAL_SPI_Transmit+0x186>
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d114      	bne.n	800f338 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f30e:	68f8      	ldr	r0, [r7, #12]
 800f310:	f000 fac6 	bl	800f8a0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	2200      	movs	r2, #0
 800f318:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f322:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	2201      	movs	r2, #1
 800f330:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f334:	2303      	movs	r3, #3
 800f336:	e11e      	b.n	800f576 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f33e:	b29b      	uxth	r3, r3
 800f340:	2b00      	cmp	r3, #0
 800f342:	d1b9      	bne.n	800f2b8 <HAL_SPI_Transmit+0x130>
 800f344:	e0f1      	b.n	800f52a <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	68db      	ldr	r3, [r3, #12]
 800f34a:	2b07      	cmp	r3, #7
 800f34c:	f240 80e6 	bls.w	800f51c <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f350:	e05d      	b.n	800f40e <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	695b      	ldr	r3, [r3, #20]
 800f358:	f003 0302 	and.w	r3, r3, #2
 800f35c:	2b02      	cmp	r3, #2
 800f35e:	d132      	bne.n	800f3c6 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f366:	b29b      	uxth	r3, r3
 800f368:	2b01      	cmp	r3, #1
 800f36a:	d918      	bls.n	800f39e <HAL_SPI_Transmit+0x216>
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f370:	2b00      	cmp	r3, #0
 800f372:	d014      	beq.n	800f39e <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	6812      	ldr	r2, [r2, #0]
 800f37e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f384:	1d1a      	adds	r2, r3, #4
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f390:	b29b      	uxth	r3, r3
 800f392:	3b02      	subs	r3, #2
 800f394:	b29a      	uxth	r2, r3
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f39c:	e037      	b.n	800f40e <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f3a2:	881a      	ldrh	r2, [r3, #0]
 800f3a4:	69fb      	ldr	r3, [r7, #28]
 800f3a6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f3ac:	1c9a      	adds	r2, r3, #2
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f3b8:	b29b      	uxth	r3, r3
 800f3ba:	3b01      	subs	r3, #1
 800f3bc:	b29a      	uxth	r2, r3
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f3c4:	e023      	b.n	800f40e <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f3c6:	f7f4 fcd7 	bl	8003d78 <HAL_GetTick>
 800f3ca:	4602      	mov	r2, r0
 800f3cc:	697b      	ldr	r3, [r7, #20]
 800f3ce:	1ad3      	subs	r3, r2, r3
 800f3d0:	683a      	ldr	r2, [r7, #0]
 800f3d2:	429a      	cmp	r2, r3
 800f3d4:	d803      	bhi.n	800f3de <HAL_SPI_Transmit+0x256>
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3dc:	d102      	bne.n	800f3e4 <HAL_SPI_Transmit+0x25c>
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d114      	bne.n	800f40e <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f3e4:	68f8      	ldr	r0, [r7, #12]
 800f3e6:	f000 fa5b 	bl	800f8a0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f3f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	2201      	movs	r2, #1
 800f406:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f40a:	2303      	movs	r3, #3
 800f40c:	e0b3      	b.n	800f576 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f414:	b29b      	uxth	r3, r3
 800f416:	2b00      	cmp	r3, #0
 800f418:	d19b      	bne.n	800f352 <HAL_SPI_Transmit+0x1ca>
 800f41a:	e086      	b.n	800f52a <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	695b      	ldr	r3, [r3, #20]
 800f422:	f003 0302 	and.w	r3, r3, #2
 800f426:	2b02      	cmp	r3, #2
 800f428:	d154      	bne.n	800f4d4 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f430:	b29b      	uxth	r3, r3
 800f432:	2b03      	cmp	r3, #3
 800f434:	d918      	bls.n	800f468 <HAL_SPI_Transmit+0x2e0>
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f43a:	2b40      	cmp	r3, #64	; 0x40
 800f43c:	d914      	bls.n	800f468 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	6812      	ldr	r2, [r2, #0]
 800f448:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f44e:	1d1a      	adds	r2, r3, #4
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f45a:	b29b      	uxth	r3, r3
 800f45c:	3b04      	subs	r3, #4
 800f45e:	b29a      	uxth	r2, r3
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f466:	e059      	b.n	800f51c <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f46e:	b29b      	uxth	r3, r3
 800f470:	2b01      	cmp	r3, #1
 800f472:	d917      	bls.n	800f4a4 <HAL_SPI_Transmit+0x31c>
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d013      	beq.n	800f4a4 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f480:	881a      	ldrh	r2, [r3, #0]
 800f482:	69fb      	ldr	r3, [r7, #28]
 800f484:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f48a:	1c9a      	adds	r2, r3, #2
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f496:	b29b      	uxth	r3, r3
 800f498:	3b02      	subs	r3, #2
 800f49a:	b29a      	uxth	r2, r3
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f4a2:	e03b      	b.n	800f51c <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	3320      	adds	r3, #32
 800f4ae:	7812      	ldrb	r2, [r2, #0]
 800f4b0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f4b6:	1c5a      	adds	r2, r3, #1
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f4c2:	b29b      	uxth	r3, r3
 800f4c4:	3b01      	subs	r3, #1
 800f4c6:	b29a      	uxth	r2, r3
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f4ce:	e025      	b.n	800f51c <HAL_SPI_Transmit+0x394>
 800f4d0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f4d4:	f7f4 fc50 	bl	8003d78 <HAL_GetTick>
 800f4d8:	4602      	mov	r2, r0
 800f4da:	697b      	ldr	r3, [r7, #20]
 800f4dc:	1ad3      	subs	r3, r2, r3
 800f4de:	683a      	ldr	r2, [r7, #0]
 800f4e0:	429a      	cmp	r2, r3
 800f4e2:	d803      	bhi.n	800f4ec <HAL_SPI_Transmit+0x364>
 800f4e4:	683b      	ldr	r3, [r7, #0]
 800f4e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4ea:	d102      	bne.n	800f4f2 <HAL_SPI_Transmit+0x36a>
 800f4ec:	683b      	ldr	r3, [r7, #0]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d114      	bne.n	800f51c <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f4f2:	68f8      	ldr	r0, [r7, #12]
 800f4f4:	f000 f9d4 	bl	800f8a0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f506:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	2201      	movs	r2, #1
 800f514:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f518:	2303      	movs	r3, #3
 800f51a:	e02c      	b.n	800f576 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f522:	b29b      	uxth	r3, r3
 800f524:	2b00      	cmp	r3, #0
 800f526:	f47f af79 	bne.w	800f41c <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800f52a:	697b      	ldr	r3, [r7, #20]
 800f52c:	9300      	str	r3, [sp, #0]
 800f52e:	683b      	ldr	r3, [r7, #0]
 800f530:	2200      	movs	r2, #0
 800f532:	2108      	movs	r1, #8
 800f534:	68f8      	ldr	r0, [r7, #12]
 800f536:	f000 fa53 	bl	800f9e0 <SPI_WaitOnFlagUntilTimeout>
 800f53a:	4603      	mov	r3, r0
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d007      	beq.n	800f550 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f546:	f043 0220 	orr.w	r2, r3, #32
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f550:	68f8      	ldr	r0, [r7, #12]
 800f552:	f000 f9a5 	bl	800f8a0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	2200      	movs	r2, #0
 800f55a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	2201      	movs	r2, #1
 800f562:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d001      	beq.n	800f574 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800f570:	2301      	movs	r3, #1
 800f572:	e000      	b.n	800f576 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800f574:	7efb      	ldrb	r3, [r7, #27]
}
 800f576:	4618      	mov	r0, r3
 800f578:	3720      	adds	r7, #32
 800f57a:	46bd      	mov	sp, r7
 800f57c:	bd80      	pop	{r7, pc}
 800f57e:	bf00      	nop

0800f580 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b088      	sub	sp, #32
 800f584:	af00      	add	r7, sp, #0
 800f586:	60f8      	str	r0, [r7, #12]
 800f588:	60b9      	str	r1, [r7, #8]
 800f58a:	603b      	str	r3, [r7, #0]
 800f58c:	4613      	mov	r3, r2
 800f58e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f590:	2300      	movs	r3, #0
 800f592:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	3330      	adds	r3, #48	; 0x30
 800f59a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f5a2:	2b01      	cmp	r3, #1
 800f5a4:	d101      	bne.n	800f5aa <HAL_SPI_Receive+0x2a>
 800f5a6:	2302      	movs	r3, #2
 800f5a8:	e173      	b.n	800f892 <HAL_SPI_Receive+0x312>
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	2201      	movs	r2, #1
 800f5ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f5b2:	f7f4 fbe1 	bl	8003d78 <HAL_GetTick>
 800f5b6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f5be:	b2db      	uxtb	r3, r3
 800f5c0:	2b01      	cmp	r3, #1
 800f5c2:	d007      	beq.n	800f5d4 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800f5c4:	2302      	movs	r3, #2
 800f5c6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f5d0:	7ffb      	ldrb	r3, [r7, #31]
 800f5d2:	e15e      	b.n	800f892 <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f5d4:	68bb      	ldr	r3, [r7, #8]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d002      	beq.n	800f5e0 <HAL_SPI_Receive+0x60>
 800f5da:	88fb      	ldrh	r3, [r7, #6]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d107      	bne.n	800f5f0 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800f5e0:	2301      	movs	r3, #1
 800f5e2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f5ec:	7ffb      	ldrb	r3, [r7, #31]
 800f5ee:	e150      	b.n	800f892 <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	2204      	movs	r2, #4
 800f5f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	68ba      	ldr	r2, [r7, #8]
 800f604:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	88fa      	ldrh	r2, [r7, #6]
 800f60a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	88fa      	ldrh	r2, [r7, #6]
 800f612:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	2200      	movs	r2, #0
 800f61a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	2200      	movs	r2, #0
 800f620:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	2200      	movs	r2, #0
 800f628:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	2200      	movs	r2, #0
 800f630:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	2200      	movs	r2, #0
 800f636:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	689b      	ldr	r3, [r3, #8]
 800f63c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800f640:	d108      	bne.n	800f654 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	681a      	ldr	r2, [r3, #0]
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f650:	601a      	str	r2, [r3, #0]
 800f652:	e009      	b.n	800f668 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	68db      	ldr	r3, [r3, #12]
 800f65a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800f666:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	685a      	ldr	r2, [r3, #4]
 800f66e:	4b8b      	ldr	r3, [pc, #556]	; (800f89c <HAL_SPI_Receive+0x31c>)
 800f670:	4013      	ands	r3, r2
 800f672:	88f9      	ldrh	r1, [r7, #6]
 800f674:	68fa      	ldr	r2, [r7, #12]
 800f676:	6812      	ldr	r2, [r2, #0]
 800f678:	430b      	orrs	r3, r1
 800f67a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	681a      	ldr	r2, [r3, #0]
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	f042 0201 	orr.w	r2, r2, #1
 800f68a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	685b      	ldr	r3, [r3, #4]
 800f690:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f694:	d107      	bne.n	800f6a6 <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	681a      	ldr	r2, [r3, #0]
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f6a4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	68db      	ldr	r3, [r3, #12]
 800f6aa:	2b0f      	cmp	r3, #15
 800f6ac:	d948      	bls.n	800f740 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f6ae:	e040      	b.n	800f732 <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	695a      	ldr	r2, [r3, #20]
 800f6b6:	f248 0308 	movw	r3, #32776	; 0x8008
 800f6ba:	4013      	ands	r3, r2
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d014      	beq.n	800f6ea <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	681a      	ldr	r2, [r3, #0]
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f6c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f6ca:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f6d0:	1d1a      	adds	r2, r3, #4
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f6dc:	b29b      	uxth	r3, r3
 800f6de:	3b01      	subs	r3, #1
 800f6e0:	b29a      	uxth	r2, r3
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f6e8:	e023      	b.n	800f732 <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f6ea:	f7f4 fb45 	bl	8003d78 <HAL_GetTick>
 800f6ee:	4602      	mov	r2, r0
 800f6f0:	697b      	ldr	r3, [r7, #20]
 800f6f2:	1ad3      	subs	r3, r2, r3
 800f6f4:	683a      	ldr	r2, [r7, #0]
 800f6f6:	429a      	cmp	r2, r3
 800f6f8:	d803      	bhi.n	800f702 <HAL_SPI_Receive+0x182>
 800f6fa:	683b      	ldr	r3, [r7, #0]
 800f6fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f700:	d102      	bne.n	800f708 <HAL_SPI_Receive+0x188>
 800f702:	683b      	ldr	r3, [r7, #0]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d114      	bne.n	800f732 <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f708:	68f8      	ldr	r0, [r7, #12]
 800f70a:	f000 f8c9 	bl	800f8a0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	2200      	movs	r2, #0
 800f712:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f71c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	2201      	movs	r2, #1
 800f72a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f72e:	2303      	movs	r3, #3
 800f730:	e0af      	b.n	800f892 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f738:	b29b      	uxth	r3, r3
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d1b8      	bne.n	800f6b0 <HAL_SPI_Receive+0x130>
 800f73e:	e095      	b.n	800f86c <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	68db      	ldr	r3, [r3, #12]
 800f744:	2b07      	cmp	r3, #7
 800f746:	f240 808b 	bls.w	800f860 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f74a:	e03f      	b.n	800f7cc <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	695b      	ldr	r3, [r3, #20]
 800f752:	f003 0301 	and.w	r3, r3, #1
 800f756:	2b01      	cmp	r3, #1
 800f758:	d114      	bne.n	800f784 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f75e:	69ba      	ldr	r2, [r7, #24]
 800f760:	8812      	ldrh	r2, [r2, #0]
 800f762:	b292      	uxth	r2, r2
 800f764:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f76a:	1c9a      	adds	r2, r3, #2
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f776:	b29b      	uxth	r3, r3
 800f778:	3b01      	subs	r3, #1
 800f77a:	b29a      	uxth	r2, r3
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f782:	e023      	b.n	800f7cc <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f784:	f7f4 faf8 	bl	8003d78 <HAL_GetTick>
 800f788:	4602      	mov	r2, r0
 800f78a:	697b      	ldr	r3, [r7, #20]
 800f78c:	1ad3      	subs	r3, r2, r3
 800f78e:	683a      	ldr	r2, [r7, #0]
 800f790:	429a      	cmp	r2, r3
 800f792:	d803      	bhi.n	800f79c <HAL_SPI_Receive+0x21c>
 800f794:	683b      	ldr	r3, [r7, #0]
 800f796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f79a:	d102      	bne.n	800f7a2 <HAL_SPI_Receive+0x222>
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d114      	bne.n	800f7cc <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f7a2:	68f8      	ldr	r0, [r7, #12]
 800f7a4:	f000 f87c 	bl	800f8a0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	2200      	movs	r2, #0
 800f7ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f7b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	2201      	movs	r2, #1
 800f7c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f7c8:	2303      	movs	r3, #3
 800f7ca:	e062      	b.n	800f892 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f7d2:	b29b      	uxth	r3, r3
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d1b9      	bne.n	800f74c <HAL_SPI_Receive+0x1cc>
 800f7d8:	e048      	b.n	800f86c <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	695b      	ldr	r3, [r3, #20]
 800f7e0:	f003 0301 	and.w	r3, r3, #1
 800f7e4:	2b01      	cmp	r3, #1
 800f7e6:	d117      	bne.n	800f818 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f7f4:	7812      	ldrb	r2, [r2, #0]
 800f7f6:	b2d2      	uxtb	r2, r2
 800f7f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f7fe:	1c5a      	adds	r2, r3, #1
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f80a:	b29b      	uxth	r3, r3
 800f80c:	3b01      	subs	r3, #1
 800f80e:	b29a      	uxth	r2, r3
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f816:	e023      	b.n	800f860 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f818:	f7f4 faae 	bl	8003d78 <HAL_GetTick>
 800f81c:	4602      	mov	r2, r0
 800f81e:	697b      	ldr	r3, [r7, #20]
 800f820:	1ad3      	subs	r3, r2, r3
 800f822:	683a      	ldr	r2, [r7, #0]
 800f824:	429a      	cmp	r2, r3
 800f826:	d803      	bhi.n	800f830 <HAL_SPI_Receive+0x2b0>
 800f828:	683b      	ldr	r3, [r7, #0]
 800f82a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f82e:	d102      	bne.n	800f836 <HAL_SPI_Receive+0x2b6>
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d114      	bne.n	800f860 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f836:	68f8      	ldr	r0, [r7, #12]
 800f838:	f000 f832 	bl	800f8a0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	2200      	movs	r2, #0
 800f840:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f84a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	2201      	movs	r2, #1
 800f858:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f85c:	2303      	movs	r3, #3
 800f85e:	e018      	b.n	800f892 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f866:	b29b      	uxth	r3, r3
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d1b6      	bne.n	800f7da <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f86c:	68f8      	ldr	r0, [r7, #12]
 800f86e:	f000 f817 	bl	800f8a0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	2200      	movs	r2, #0
 800f876:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	2201      	movs	r2, #1
 800f87e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d001      	beq.n	800f890 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800f88c:	2301      	movs	r3, #1
 800f88e:	e000      	b.n	800f892 <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800f890:	7ffb      	ldrb	r3, [r7, #31]
}
 800f892:	4618      	mov	r0, r3
 800f894:	3720      	adds	r7, #32
 800f896:	46bd      	mov	sp, r7
 800f898:	bd80      	pop	{r7, pc}
 800f89a:	bf00      	nop
 800f89c:	ffff0000 	.word	0xffff0000

0800f8a0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f8a0:	b480      	push	{r7}
 800f8a2:	b085      	sub	sp, #20
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	695b      	ldr	r3, [r3, #20]
 800f8ae:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	699a      	ldr	r2, [r3, #24]
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	f042 0208 	orr.w	r2, r2, #8
 800f8be:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	699a      	ldr	r2, [r3, #24]
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	f042 0210 	orr.w	r2, r2, #16
 800f8ce:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	681a      	ldr	r2, [r3, #0]
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	f022 0201 	bic.w	r2, r2, #1
 800f8de:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	6919      	ldr	r1, [r3, #16]
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	681a      	ldr	r2, [r3, #0]
 800f8ea:	4b3c      	ldr	r3, [pc, #240]	; (800f9dc <SPI_CloseTransfer+0x13c>)
 800f8ec:	400b      	ands	r3, r1
 800f8ee:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	689a      	ldr	r2, [r3, #8]
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f8fe:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f906:	b2db      	uxtb	r3, r3
 800f908:	2b04      	cmp	r3, #4
 800f90a:	d014      	beq.n	800f936 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	f003 0320 	and.w	r3, r3, #32
 800f912:	2b00      	cmp	r3, #0
 800f914:	d00f      	beq.n	800f936 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f91c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	699a      	ldr	r2, [r3, #24]
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	f042 0220 	orr.w	r2, r2, #32
 800f934:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f93c:	b2db      	uxtb	r3, r3
 800f93e:	2b03      	cmp	r3, #3
 800f940:	d014      	beq.n	800f96c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d00f      	beq.n	800f96c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f952:	f043 0204 	orr.w	r2, r3, #4
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	699a      	ldr	r2, [r3, #24]
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f96a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f972:	2b00      	cmp	r3, #0
 800f974:	d00f      	beq.n	800f996 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f97c:	f043 0201 	orr.w	r2, r3, #1
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	699a      	ldr	r2, [r3, #24]
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f994:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d00f      	beq.n	800f9c0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f9a6:	f043 0208 	orr.w	r2, r3, #8
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	699a      	ldr	r2, [r3, #24]
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f9be:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800f9d0:	bf00      	nop
 800f9d2:	3714      	adds	r7, #20
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9da:	4770      	bx	lr
 800f9dc:	fffffc90 	.word	0xfffffc90

0800f9e0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b084      	sub	sp, #16
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	60f8      	str	r0, [r7, #12]
 800f9e8:	60b9      	str	r1, [r7, #8]
 800f9ea:	603b      	str	r3, [r7, #0]
 800f9ec:	4613      	mov	r3, r2
 800f9ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f9f0:	e010      	b.n	800fa14 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f9f2:	f7f4 f9c1 	bl	8003d78 <HAL_GetTick>
 800f9f6:	4602      	mov	r2, r0
 800f9f8:	69bb      	ldr	r3, [r7, #24]
 800f9fa:	1ad3      	subs	r3, r2, r3
 800f9fc:	683a      	ldr	r2, [r7, #0]
 800f9fe:	429a      	cmp	r2, r3
 800fa00:	d803      	bhi.n	800fa0a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800fa02:	683b      	ldr	r3, [r7, #0]
 800fa04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa08:	d102      	bne.n	800fa10 <SPI_WaitOnFlagUntilTimeout+0x30>
 800fa0a:	683b      	ldr	r3, [r7, #0]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d101      	bne.n	800fa14 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800fa10:	2303      	movs	r3, #3
 800fa12:	e00f      	b.n	800fa34 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	695a      	ldr	r2, [r3, #20]
 800fa1a:	68bb      	ldr	r3, [r7, #8]
 800fa1c:	4013      	ands	r3, r2
 800fa1e:	68ba      	ldr	r2, [r7, #8]
 800fa20:	429a      	cmp	r2, r3
 800fa22:	bf0c      	ite	eq
 800fa24:	2301      	moveq	r3, #1
 800fa26:	2300      	movne	r3, #0
 800fa28:	b2db      	uxtb	r3, r3
 800fa2a:	461a      	mov	r2, r3
 800fa2c:	79fb      	ldrb	r3, [r7, #7]
 800fa2e:	429a      	cmp	r2, r3
 800fa30:	d0df      	beq.n	800f9f2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800fa32:	2300      	movs	r3, #0
}
 800fa34:	4618      	mov	r0, r3
 800fa36:	3710      	adds	r7, #16
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	bd80      	pop	{r7, pc}

0800fa3c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800fa3c:	b480      	push	{r7}
 800fa3e:	b085      	sub	sp, #20
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa48:	095b      	lsrs	r3, r3, #5
 800fa4a:	3301      	adds	r3, #1
 800fa4c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	68db      	ldr	r3, [r3, #12]
 800fa52:	3301      	adds	r3, #1
 800fa54:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800fa56:	68bb      	ldr	r3, [r7, #8]
 800fa58:	3307      	adds	r3, #7
 800fa5a:	08db      	lsrs	r3, r3, #3
 800fa5c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800fa5e:	68bb      	ldr	r3, [r7, #8]
 800fa60:	68fa      	ldr	r2, [r7, #12]
 800fa62:	fb02 f303 	mul.w	r3, r2, r3
}
 800fa66:	4618      	mov	r0, r3
 800fa68:	3714      	adds	r7, #20
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa70:	4770      	bx	lr

0800fa72 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800fa72:	b580      	push	{r7, lr}
 800fa74:	b082      	sub	sp, #8
 800fa76:	af00      	add	r7, sp, #0
 800fa78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d101      	bne.n	800fa84 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800fa80:	2301      	movs	r3, #1
 800fa82:	e049      	b.n	800fb18 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fa8a:	b2db      	uxtb	r3, r3
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d106      	bne.n	800fa9e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	2200      	movs	r2, #0
 800fa94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800fa98:	6878      	ldr	r0, [r7, #4]
 800fa9a:	f7f3 fdd7 	bl	800364c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	2202      	movs	r2, #2
 800faa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	681a      	ldr	r2, [r3, #0]
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	3304      	adds	r3, #4
 800faae:	4619      	mov	r1, r3
 800fab0:	4610      	mov	r0, r2
 800fab2:	f000 ff29 	bl	8010908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	2201      	movs	r2, #1
 800faba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	2201      	movs	r2, #1
 800fac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	2201      	movs	r2, #1
 800faca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	2201      	movs	r2, #1
 800fad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	2201      	movs	r2, #1
 800fada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	2201      	movs	r2, #1
 800fae2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	2201      	movs	r2, #1
 800faea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	2201      	movs	r2, #1
 800faf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	2201      	movs	r2, #1
 800fafa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	2201      	movs	r2, #1
 800fb02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	2201      	movs	r2, #1
 800fb0a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	2201      	movs	r2, #1
 800fb12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fb16:	2300      	movs	r3, #0
}
 800fb18:	4618      	mov	r0, r3
 800fb1a:	3708      	adds	r7, #8
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}

0800fb20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b082      	sub	sp, #8
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d101      	bne.n	800fb32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800fb2e:	2301      	movs	r3, #1
 800fb30:	e049      	b.n	800fbc6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fb38:	b2db      	uxtb	r3, r3
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d106      	bne.n	800fb4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	2200      	movs	r2, #0
 800fb42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800fb46:	6878      	ldr	r0, [r7, #4]
 800fb48:	f7f3 fbea 	bl	8003320 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	2202      	movs	r2, #2
 800fb50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	681a      	ldr	r2, [r3, #0]
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	3304      	adds	r3, #4
 800fb5c:	4619      	mov	r1, r3
 800fb5e:	4610      	mov	r0, r2
 800fb60:	f000 fed2 	bl	8010908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	2201      	movs	r2, #1
 800fb68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	2201      	movs	r2, #1
 800fb70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	2201      	movs	r2, #1
 800fb78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	2201      	movs	r2, #1
 800fb80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	2201      	movs	r2, #1
 800fb88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	2201      	movs	r2, #1
 800fb90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	2201      	movs	r2, #1
 800fb98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	2201      	movs	r2, #1
 800fba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	2201      	movs	r2, #1
 800fba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	2201      	movs	r2, #1
 800fbb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	2201      	movs	r2, #1
 800fbb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	2201      	movs	r2, #1
 800fbc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fbc4:	2300      	movs	r3, #0
}
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	3708      	adds	r7, #8
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	bd80      	pop	{r7, pc}
	...

0800fbd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b084      	sub	sp, #16
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
 800fbd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800fbda:	683b      	ldr	r3, [r7, #0]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d109      	bne.n	800fbf4 <HAL_TIM_PWM_Start+0x24>
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fbe6:	b2db      	uxtb	r3, r3
 800fbe8:	2b01      	cmp	r3, #1
 800fbea:	bf14      	ite	ne
 800fbec:	2301      	movne	r3, #1
 800fbee:	2300      	moveq	r3, #0
 800fbf0:	b2db      	uxtb	r3, r3
 800fbf2:	e03c      	b.n	800fc6e <HAL_TIM_PWM_Start+0x9e>
 800fbf4:	683b      	ldr	r3, [r7, #0]
 800fbf6:	2b04      	cmp	r3, #4
 800fbf8:	d109      	bne.n	800fc0e <HAL_TIM_PWM_Start+0x3e>
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800fc00:	b2db      	uxtb	r3, r3
 800fc02:	2b01      	cmp	r3, #1
 800fc04:	bf14      	ite	ne
 800fc06:	2301      	movne	r3, #1
 800fc08:	2300      	moveq	r3, #0
 800fc0a:	b2db      	uxtb	r3, r3
 800fc0c:	e02f      	b.n	800fc6e <HAL_TIM_PWM_Start+0x9e>
 800fc0e:	683b      	ldr	r3, [r7, #0]
 800fc10:	2b08      	cmp	r3, #8
 800fc12:	d109      	bne.n	800fc28 <HAL_TIM_PWM_Start+0x58>
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fc1a:	b2db      	uxtb	r3, r3
 800fc1c:	2b01      	cmp	r3, #1
 800fc1e:	bf14      	ite	ne
 800fc20:	2301      	movne	r3, #1
 800fc22:	2300      	moveq	r3, #0
 800fc24:	b2db      	uxtb	r3, r3
 800fc26:	e022      	b.n	800fc6e <HAL_TIM_PWM_Start+0x9e>
 800fc28:	683b      	ldr	r3, [r7, #0]
 800fc2a:	2b0c      	cmp	r3, #12
 800fc2c:	d109      	bne.n	800fc42 <HAL_TIM_PWM_Start+0x72>
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fc34:	b2db      	uxtb	r3, r3
 800fc36:	2b01      	cmp	r3, #1
 800fc38:	bf14      	ite	ne
 800fc3a:	2301      	movne	r3, #1
 800fc3c:	2300      	moveq	r3, #0
 800fc3e:	b2db      	uxtb	r3, r3
 800fc40:	e015      	b.n	800fc6e <HAL_TIM_PWM_Start+0x9e>
 800fc42:	683b      	ldr	r3, [r7, #0]
 800fc44:	2b10      	cmp	r3, #16
 800fc46:	d109      	bne.n	800fc5c <HAL_TIM_PWM_Start+0x8c>
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fc4e:	b2db      	uxtb	r3, r3
 800fc50:	2b01      	cmp	r3, #1
 800fc52:	bf14      	ite	ne
 800fc54:	2301      	movne	r3, #1
 800fc56:	2300      	moveq	r3, #0
 800fc58:	b2db      	uxtb	r3, r3
 800fc5a:	e008      	b.n	800fc6e <HAL_TIM_PWM_Start+0x9e>
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fc62:	b2db      	uxtb	r3, r3
 800fc64:	2b01      	cmp	r3, #1
 800fc66:	bf14      	ite	ne
 800fc68:	2301      	movne	r3, #1
 800fc6a:	2300      	moveq	r3, #0
 800fc6c:	b2db      	uxtb	r3, r3
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d001      	beq.n	800fc76 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800fc72:	2301      	movs	r3, #1
 800fc74:	e0ab      	b.n	800fdce <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fc76:	683b      	ldr	r3, [r7, #0]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d104      	bne.n	800fc86 <HAL_TIM_PWM_Start+0xb6>
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	2202      	movs	r2, #2
 800fc80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fc84:	e023      	b.n	800fcce <HAL_TIM_PWM_Start+0xfe>
 800fc86:	683b      	ldr	r3, [r7, #0]
 800fc88:	2b04      	cmp	r3, #4
 800fc8a:	d104      	bne.n	800fc96 <HAL_TIM_PWM_Start+0xc6>
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	2202      	movs	r2, #2
 800fc90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fc94:	e01b      	b.n	800fcce <HAL_TIM_PWM_Start+0xfe>
 800fc96:	683b      	ldr	r3, [r7, #0]
 800fc98:	2b08      	cmp	r3, #8
 800fc9a:	d104      	bne.n	800fca6 <HAL_TIM_PWM_Start+0xd6>
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	2202      	movs	r2, #2
 800fca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fca4:	e013      	b.n	800fcce <HAL_TIM_PWM_Start+0xfe>
 800fca6:	683b      	ldr	r3, [r7, #0]
 800fca8:	2b0c      	cmp	r3, #12
 800fcaa:	d104      	bne.n	800fcb6 <HAL_TIM_PWM_Start+0xe6>
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	2202      	movs	r2, #2
 800fcb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fcb4:	e00b      	b.n	800fcce <HAL_TIM_PWM_Start+0xfe>
 800fcb6:	683b      	ldr	r3, [r7, #0]
 800fcb8:	2b10      	cmp	r3, #16
 800fcba:	d104      	bne.n	800fcc6 <HAL_TIM_PWM_Start+0xf6>
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	2202      	movs	r2, #2
 800fcc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fcc4:	e003      	b.n	800fcce <HAL_TIM_PWM_Start+0xfe>
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	2202      	movs	r2, #2
 800fcca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	2201      	movs	r2, #1
 800fcd4:	6839      	ldr	r1, [r7, #0]
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	f001 f992 	bl	8011000 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	4a3d      	ldr	r2, [pc, #244]	; (800fdd8 <HAL_TIM_PWM_Start+0x208>)
 800fce2:	4293      	cmp	r3, r2
 800fce4:	d013      	beq.n	800fd0e <HAL_TIM_PWM_Start+0x13e>
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	4a3c      	ldr	r2, [pc, #240]	; (800fddc <HAL_TIM_PWM_Start+0x20c>)
 800fcec:	4293      	cmp	r3, r2
 800fcee:	d00e      	beq.n	800fd0e <HAL_TIM_PWM_Start+0x13e>
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	4a3a      	ldr	r2, [pc, #232]	; (800fde0 <HAL_TIM_PWM_Start+0x210>)
 800fcf6:	4293      	cmp	r3, r2
 800fcf8:	d009      	beq.n	800fd0e <HAL_TIM_PWM_Start+0x13e>
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	4a39      	ldr	r2, [pc, #228]	; (800fde4 <HAL_TIM_PWM_Start+0x214>)
 800fd00:	4293      	cmp	r3, r2
 800fd02:	d004      	beq.n	800fd0e <HAL_TIM_PWM_Start+0x13e>
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	4a37      	ldr	r2, [pc, #220]	; (800fde8 <HAL_TIM_PWM_Start+0x218>)
 800fd0a:	4293      	cmp	r3, r2
 800fd0c:	d101      	bne.n	800fd12 <HAL_TIM_PWM_Start+0x142>
 800fd0e:	2301      	movs	r3, #1
 800fd10:	e000      	b.n	800fd14 <HAL_TIM_PWM_Start+0x144>
 800fd12:	2300      	movs	r3, #0
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d007      	beq.n	800fd28 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fd26:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	4a2a      	ldr	r2, [pc, #168]	; (800fdd8 <HAL_TIM_PWM_Start+0x208>)
 800fd2e:	4293      	cmp	r3, r2
 800fd30:	d02c      	beq.n	800fd8c <HAL_TIM_PWM_Start+0x1bc>
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fd3a:	d027      	beq.n	800fd8c <HAL_TIM_PWM_Start+0x1bc>
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	4a2a      	ldr	r2, [pc, #168]	; (800fdec <HAL_TIM_PWM_Start+0x21c>)
 800fd42:	4293      	cmp	r3, r2
 800fd44:	d022      	beq.n	800fd8c <HAL_TIM_PWM_Start+0x1bc>
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	4a29      	ldr	r2, [pc, #164]	; (800fdf0 <HAL_TIM_PWM_Start+0x220>)
 800fd4c:	4293      	cmp	r3, r2
 800fd4e:	d01d      	beq.n	800fd8c <HAL_TIM_PWM_Start+0x1bc>
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	4a27      	ldr	r2, [pc, #156]	; (800fdf4 <HAL_TIM_PWM_Start+0x224>)
 800fd56:	4293      	cmp	r3, r2
 800fd58:	d018      	beq.n	800fd8c <HAL_TIM_PWM_Start+0x1bc>
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	4a1f      	ldr	r2, [pc, #124]	; (800fddc <HAL_TIM_PWM_Start+0x20c>)
 800fd60:	4293      	cmp	r3, r2
 800fd62:	d013      	beq.n	800fd8c <HAL_TIM_PWM_Start+0x1bc>
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	4a23      	ldr	r2, [pc, #140]	; (800fdf8 <HAL_TIM_PWM_Start+0x228>)
 800fd6a:	4293      	cmp	r3, r2
 800fd6c:	d00e      	beq.n	800fd8c <HAL_TIM_PWM_Start+0x1bc>
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	4a1b      	ldr	r2, [pc, #108]	; (800fde0 <HAL_TIM_PWM_Start+0x210>)
 800fd74:	4293      	cmp	r3, r2
 800fd76:	d009      	beq.n	800fd8c <HAL_TIM_PWM_Start+0x1bc>
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	4a1f      	ldr	r2, [pc, #124]	; (800fdfc <HAL_TIM_PWM_Start+0x22c>)
 800fd7e:	4293      	cmp	r3, r2
 800fd80:	d004      	beq.n	800fd8c <HAL_TIM_PWM_Start+0x1bc>
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	4a1e      	ldr	r2, [pc, #120]	; (800fe00 <HAL_TIM_PWM_Start+0x230>)
 800fd88:	4293      	cmp	r3, r2
 800fd8a:	d115      	bne.n	800fdb8 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	689a      	ldr	r2, [r3, #8]
 800fd92:	4b1c      	ldr	r3, [pc, #112]	; (800fe04 <HAL_TIM_PWM_Start+0x234>)
 800fd94:	4013      	ands	r3, r2
 800fd96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	2b06      	cmp	r3, #6
 800fd9c:	d015      	beq.n	800fdca <HAL_TIM_PWM_Start+0x1fa>
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fda4:	d011      	beq.n	800fdca <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	681a      	ldr	r2, [r3, #0]
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	f042 0201 	orr.w	r2, r2, #1
 800fdb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fdb6:	e008      	b.n	800fdca <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	681a      	ldr	r2, [r3, #0]
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	f042 0201 	orr.w	r2, r2, #1
 800fdc6:	601a      	str	r2, [r3, #0]
 800fdc8:	e000      	b.n	800fdcc <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fdca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fdcc:	2300      	movs	r3, #0
}
 800fdce:	4618      	mov	r0, r3
 800fdd0:	3710      	adds	r7, #16
 800fdd2:	46bd      	mov	sp, r7
 800fdd4:	bd80      	pop	{r7, pc}
 800fdd6:	bf00      	nop
 800fdd8:	40010000 	.word	0x40010000
 800fddc:	40010400 	.word	0x40010400
 800fde0:	40014000 	.word	0x40014000
 800fde4:	40014400 	.word	0x40014400
 800fde8:	40014800 	.word	0x40014800
 800fdec:	40000400 	.word	0x40000400
 800fdf0:	40000800 	.word	0x40000800
 800fdf4:	40000c00 	.word	0x40000c00
 800fdf8:	40001800 	.word	0x40001800
 800fdfc:	4000e000 	.word	0x4000e000
 800fe00:	4000e400 	.word	0x4000e400
 800fe04:	00010007 	.word	0x00010007

0800fe08 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b086      	sub	sp, #24
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	60f8      	str	r0, [r7, #12]
 800fe10:	60b9      	str	r1, [r7, #8]
 800fe12:	607a      	str	r2, [r7, #4]
 800fe14:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800fe16:	2300      	movs	r3, #0
 800fe18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800fe1a:	68bb      	ldr	r3, [r7, #8]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d109      	bne.n	800fe34 <HAL_TIM_PWM_Start_DMA+0x2c>
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fe26:	b2db      	uxtb	r3, r3
 800fe28:	2b02      	cmp	r3, #2
 800fe2a:	bf0c      	ite	eq
 800fe2c:	2301      	moveq	r3, #1
 800fe2e:	2300      	movne	r3, #0
 800fe30:	b2db      	uxtb	r3, r3
 800fe32:	e03c      	b.n	800feae <HAL_TIM_PWM_Start_DMA+0xa6>
 800fe34:	68bb      	ldr	r3, [r7, #8]
 800fe36:	2b04      	cmp	r3, #4
 800fe38:	d109      	bne.n	800fe4e <HAL_TIM_PWM_Start_DMA+0x46>
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800fe40:	b2db      	uxtb	r3, r3
 800fe42:	2b02      	cmp	r3, #2
 800fe44:	bf0c      	ite	eq
 800fe46:	2301      	moveq	r3, #1
 800fe48:	2300      	movne	r3, #0
 800fe4a:	b2db      	uxtb	r3, r3
 800fe4c:	e02f      	b.n	800feae <HAL_TIM_PWM_Start_DMA+0xa6>
 800fe4e:	68bb      	ldr	r3, [r7, #8]
 800fe50:	2b08      	cmp	r3, #8
 800fe52:	d109      	bne.n	800fe68 <HAL_TIM_PWM_Start_DMA+0x60>
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fe5a:	b2db      	uxtb	r3, r3
 800fe5c:	2b02      	cmp	r3, #2
 800fe5e:	bf0c      	ite	eq
 800fe60:	2301      	moveq	r3, #1
 800fe62:	2300      	movne	r3, #0
 800fe64:	b2db      	uxtb	r3, r3
 800fe66:	e022      	b.n	800feae <HAL_TIM_PWM_Start_DMA+0xa6>
 800fe68:	68bb      	ldr	r3, [r7, #8]
 800fe6a:	2b0c      	cmp	r3, #12
 800fe6c:	d109      	bne.n	800fe82 <HAL_TIM_PWM_Start_DMA+0x7a>
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fe74:	b2db      	uxtb	r3, r3
 800fe76:	2b02      	cmp	r3, #2
 800fe78:	bf0c      	ite	eq
 800fe7a:	2301      	moveq	r3, #1
 800fe7c:	2300      	movne	r3, #0
 800fe7e:	b2db      	uxtb	r3, r3
 800fe80:	e015      	b.n	800feae <HAL_TIM_PWM_Start_DMA+0xa6>
 800fe82:	68bb      	ldr	r3, [r7, #8]
 800fe84:	2b10      	cmp	r3, #16
 800fe86:	d109      	bne.n	800fe9c <HAL_TIM_PWM_Start_DMA+0x94>
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fe8e:	b2db      	uxtb	r3, r3
 800fe90:	2b02      	cmp	r3, #2
 800fe92:	bf0c      	ite	eq
 800fe94:	2301      	moveq	r3, #1
 800fe96:	2300      	movne	r3, #0
 800fe98:	b2db      	uxtb	r3, r3
 800fe9a:	e008      	b.n	800feae <HAL_TIM_PWM_Start_DMA+0xa6>
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fea2:	b2db      	uxtb	r3, r3
 800fea4:	2b02      	cmp	r3, #2
 800fea6:	bf0c      	ite	eq
 800fea8:	2301      	moveq	r3, #1
 800feaa:	2300      	movne	r3, #0
 800feac:	b2db      	uxtb	r3, r3
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d001      	beq.n	800feb6 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800feb2:	2302      	movs	r3, #2
 800feb4:	e1ba      	b.n	801022c <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800feb6:	68bb      	ldr	r3, [r7, #8]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d109      	bne.n	800fed0 <HAL_TIM_PWM_Start_DMA+0xc8>
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fec2:	b2db      	uxtb	r3, r3
 800fec4:	2b01      	cmp	r3, #1
 800fec6:	bf0c      	ite	eq
 800fec8:	2301      	moveq	r3, #1
 800feca:	2300      	movne	r3, #0
 800fecc:	b2db      	uxtb	r3, r3
 800fece:	e03c      	b.n	800ff4a <HAL_TIM_PWM_Start_DMA+0x142>
 800fed0:	68bb      	ldr	r3, [r7, #8]
 800fed2:	2b04      	cmp	r3, #4
 800fed4:	d109      	bne.n	800feea <HAL_TIM_PWM_Start_DMA+0xe2>
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800fedc:	b2db      	uxtb	r3, r3
 800fede:	2b01      	cmp	r3, #1
 800fee0:	bf0c      	ite	eq
 800fee2:	2301      	moveq	r3, #1
 800fee4:	2300      	movne	r3, #0
 800fee6:	b2db      	uxtb	r3, r3
 800fee8:	e02f      	b.n	800ff4a <HAL_TIM_PWM_Start_DMA+0x142>
 800feea:	68bb      	ldr	r3, [r7, #8]
 800feec:	2b08      	cmp	r3, #8
 800feee:	d109      	bne.n	800ff04 <HAL_TIM_PWM_Start_DMA+0xfc>
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fef6:	b2db      	uxtb	r3, r3
 800fef8:	2b01      	cmp	r3, #1
 800fefa:	bf0c      	ite	eq
 800fefc:	2301      	moveq	r3, #1
 800fefe:	2300      	movne	r3, #0
 800ff00:	b2db      	uxtb	r3, r3
 800ff02:	e022      	b.n	800ff4a <HAL_TIM_PWM_Start_DMA+0x142>
 800ff04:	68bb      	ldr	r3, [r7, #8]
 800ff06:	2b0c      	cmp	r3, #12
 800ff08:	d109      	bne.n	800ff1e <HAL_TIM_PWM_Start_DMA+0x116>
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ff10:	b2db      	uxtb	r3, r3
 800ff12:	2b01      	cmp	r3, #1
 800ff14:	bf0c      	ite	eq
 800ff16:	2301      	moveq	r3, #1
 800ff18:	2300      	movne	r3, #0
 800ff1a:	b2db      	uxtb	r3, r3
 800ff1c:	e015      	b.n	800ff4a <HAL_TIM_PWM_Start_DMA+0x142>
 800ff1e:	68bb      	ldr	r3, [r7, #8]
 800ff20:	2b10      	cmp	r3, #16
 800ff22:	d109      	bne.n	800ff38 <HAL_TIM_PWM_Start_DMA+0x130>
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ff2a:	b2db      	uxtb	r3, r3
 800ff2c:	2b01      	cmp	r3, #1
 800ff2e:	bf0c      	ite	eq
 800ff30:	2301      	moveq	r3, #1
 800ff32:	2300      	movne	r3, #0
 800ff34:	b2db      	uxtb	r3, r3
 800ff36:	e008      	b.n	800ff4a <HAL_TIM_PWM_Start_DMA+0x142>
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ff3e:	b2db      	uxtb	r3, r3
 800ff40:	2b01      	cmp	r3, #1
 800ff42:	bf0c      	ite	eq
 800ff44:	2301      	moveq	r3, #1
 800ff46:	2300      	movne	r3, #0
 800ff48:	b2db      	uxtb	r3, r3
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d034      	beq.n	800ffb8 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d002      	beq.n	800ff5a <HAL_TIM_PWM_Start_DMA+0x152>
 800ff54:	887b      	ldrh	r3, [r7, #2]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d101      	bne.n	800ff5e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800ff5a:	2301      	movs	r3, #1
 800ff5c:	e166      	b.n	801022c <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ff5e:	68bb      	ldr	r3, [r7, #8]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d104      	bne.n	800ff6e <HAL_TIM_PWM_Start_DMA+0x166>
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	2202      	movs	r2, #2
 800ff68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ff6c:	e026      	b.n	800ffbc <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ff6e:	68bb      	ldr	r3, [r7, #8]
 800ff70:	2b04      	cmp	r3, #4
 800ff72:	d104      	bne.n	800ff7e <HAL_TIM_PWM_Start_DMA+0x176>
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	2202      	movs	r2, #2
 800ff78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ff7c:	e01e      	b.n	800ffbc <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ff7e:	68bb      	ldr	r3, [r7, #8]
 800ff80:	2b08      	cmp	r3, #8
 800ff82:	d104      	bne.n	800ff8e <HAL_TIM_PWM_Start_DMA+0x186>
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	2202      	movs	r2, #2
 800ff88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ff8c:	e016      	b.n	800ffbc <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ff8e:	68bb      	ldr	r3, [r7, #8]
 800ff90:	2b0c      	cmp	r3, #12
 800ff92:	d104      	bne.n	800ff9e <HAL_TIM_PWM_Start_DMA+0x196>
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	2202      	movs	r2, #2
 800ff98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ff9c:	e00e      	b.n	800ffbc <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ff9e:	68bb      	ldr	r3, [r7, #8]
 800ffa0:	2b10      	cmp	r3, #16
 800ffa2:	d104      	bne.n	800ffae <HAL_TIM_PWM_Start_DMA+0x1a6>
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	2202      	movs	r2, #2
 800ffa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ffac:	e006      	b.n	800ffbc <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	2202      	movs	r2, #2
 800ffb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ffb6:	e001      	b.n	800ffbc <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800ffb8:	2301      	movs	r3, #1
 800ffba:	e137      	b.n	801022c <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800ffbc:	68bb      	ldr	r3, [r7, #8]
 800ffbe:	2b0c      	cmp	r3, #12
 800ffc0:	f200 80ae 	bhi.w	8010120 <HAL_TIM_PWM_Start_DMA+0x318>
 800ffc4:	a201      	add	r2, pc, #4	; (adr r2, 800ffcc <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800ffc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffca:	bf00      	nop
 800ffcc:	08010001 	.word	0x08010001
 800ffd0:	08010121 	.word	0x08010121
 800ffd4:	08010121 	.word	0x08010121
 800ffd8:	08010121 	.word	0x08010121
 800ffdc:	08010049 	.word	0x08010049
 800ffe0:	08010121 	.word	0x08010121
 800ffe4:	08010121 	.word	0x08010121
 800ffe8:	08010121 	.word	0x08010121
 800ffec:	08010091 	.word	0x08010091
 800fff0:	08010121 	.word	0x08010121
 800fff4:	08010121 	.word	0x08010121
 800fff8:	08010121 	.word	0x08010121
 800fffc:	080100d9 	.word	0x080100d9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010004:	4a8b      	ldr	r2, [pc, #556]	; (8010234 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8010006:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801000c:	4a8a      	ldr	r2, [pc, #552]	; (8010238 <HAL_TIM_PWM_Start_DMA+0x430>)
 801000e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010014:	4a89      	ldr	r2, [pc, #548]	; (801023c <HAL_TIM_PWM_Start_DMA+0x434>)
 8010016:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801001c:	6879      	ldr	r1, [r7, #4]
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	3334      	adds	r3, #52	; 0x34
 8010024:	461a      	mov	r2, r3
 8010026:	887b      	ldrh	r3, [r7, #2]
 8010028:	f7f5 fec4 	bl	8005db4 <HAL_DMA_Start_IT>
 801002c:	4603      	mov	r3, r0
 801002e:	2b00      	cmp	r3, #0
 8010030:	d001      	beq.n	8010036 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8010032:	2301      	movs	r3, #1
 8010034:	e0fa      	b.n	801022c <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	68da      	ldr	r2, [r3, #12]
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010044:	60da      	str	r2, [r3, #12]
      break;
 8010046:	e06e      	b.n	8010126 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801004c:	4a79      	ldr	r2, [pc, #484]	; (8010234 <HAL_TIM_PWM_Start_DMA+0x42c>)
 801004e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010054:	4a78      	ldr	r2, [pc, #480]	; (8010238 <HAL_TIM_PWM_Start_DMA+0x430>)
 8010056:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801005c:	4a77      	ldr	r2, [pc, #476]	; (801023c <HAL_TIM_PWM_Start_DMA+0x434>)
 801005e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8010064:	6879      	ldr	r1, [r7, #4]
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	3338      	adds	r3, #56	; 0x38
 801006c:	461a      	mov	r2, r3
 801006e:	887b      	ldrh	r3, [r7, #2]
 8010070:	f7f5 fea0 	bl	8005db4 <HAL_DMA_Start_IT>
 8010074:	4603      	mov	r3, r0
 8010076:	2b00      	cmp	r3, #0
 8010078:	d001      	beq.n	801007e <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 801007a:	2301      	movs	r3, #1
 801007c:	e0d6      	b.n	801022c <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	68da      	ldr	r2, [r3, #12]
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801008c:	60da      	str	r2, [r3, #12]
      break;
 801008e:	e04a      	b.n	8010126 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010094:	4a67      	ldr	r2, [pc, #412]	; (8010234 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8010096:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801009c:	4a66      	ldr	r2, [pc, #408]	; (8010238 <HAL_TIM_PWM_Start_DMA+0x430>)
 801009e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100a4:	4a65      	ldr	r2, [pc, #404]	; (801023c <HAL_TIM_PWM_Start_DMA+0x434>)
 80100a6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80100ac:	6879      	ldr	r1, [r7, #4]
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	333c      	adds	r3, #60	; 0x3c
 80100b4:	461a      	mov	r2, r3
 80100b6:	887b      	ldrh	r3, [r7, #2]
 80100b8:	f7f5 fe7c 	bl	8005db4 <HAL_DMA_Start_IT>
 80100bc:	4603      	mov	r3, r0
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d001      	beq.n	80100c6 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80100c2:	2301      	movs	r3, #1
 80100c4:	e0b2      	b.n	801022c <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	68da      	ldr	r2, [r3, #12]
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80100d4:	60da      	str	r2, [r3, #12]
      break;
 80100d6:	e026      	b.n	8010126 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100dc:	4a55      	ldr	r2, [pc, #340]	; (8010234 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80100de:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100e4:	4a54      	ldr	r2, [pc, #336]	; (8010238 <HAL_TIM_PWM_Start_DMA+0x430>)
 80100e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100ec:	4a53      	ldr	r2, [pc, #332]	; (801023c <HAL_TIM_PWM_Start_DMA+0x434>)
 80100ee:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80100f4:	6879      	ldr	r1, [r7, #4]
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	3340      	adds	r3, #64	; 0x40
 80100fc:	461a      	mov	r2, r3
 80100fe:	887b      	ldrh	r3, [r7, #2]
 8010100:	f7f5 fe58 	bl	8005db4 <HAL_DMA_Start_IT>
 8010104:	4603      	mov	r3, r0
 8010106:	2b00      	cmp	r3, #0
 8010108:	d001      	beq.n	801010e <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 801010a:	2301      	movs	r3, #1
 801010c:	e08e      	b.n	801022c <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	68da      	ldr	r2, [r3, #12]
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801011c:	60da      	str	r2, [r3, #12]
      break;
 801011e:	e002      	b.n	8010126 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8010120:	2301      	movs	r3, #1
 8010122:	75fb      	strb	r3, [r7, #23]
      break;
 8010124:	bf00      	nop
  }

  if (status == HAL_OK)
 8010126:	7dfb      	ldrb	r3, [r7, #23]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d17e      	bne.n	801022a <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	2201      	movs	r2, #1
 8010132:	68b9      	ldr	r1, [r7, #8]
 8010134:	4618      	mov	r0, r3
 8010136:	f000 ff63 	bl	8011000 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	4a40      	ldr	r2, [pc, #256]	; (8010240 <HAL_TIM_PWM_Start_DMA+0x438>)
 8010140:	4293      	cmp	r3, r2
 8010142:	d013      	beq.n	801016c <HAL_TIM_PWM_Start_DMA+0x364>
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	4a3e      	ldr	r2, [pc, #248]	; (8010244 <HAL_TIM_PWM_Start_DMA+0x43c>)
 801014a:	4293      	cmp	r3, r2
 801014c:	d00e      	beq.n	801016c <HAL_TIM_PWM_Start_DMA+0x364>
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	4a3d      	ldr	r2, [pc, #244]	; (8010248 <HAL_TIM_PWM_Start_DMA+0x440>)
 8010154:	4293      	cmp	r3, r2
 8010156:	d009      	beq.n	801016c <HAL_TIM_PWM_Start_DMA+0x364>
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	4a3b      	ldr	r2, [pc, #236]	; (801024c <HAL_TIM_PWM_Start_DMA+0x444>)
 801015e:	4293      	cmp	r3, r2
 8010160:	d004      	beq.n	801016c <HAL_TIM_PWM_Start_DMA+0x364>
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	4a3a      	ldr	r2, [pc, #232]	; (8010250 <HAL_TIM_PWM_Start_DMA+0x448>)
 8010168:	4293      	cmp	r3, r2
 801016a:	d101      	bne.n	8010170 <HAL_TIM_PWM_Start_DMA+0x368>
 801016c:	2301      	movs	r3, #1
 801016e:	e000      	b.n	8010172 <HAL_TIM_PWM_Start_DMA+0x36a>
 8010170:	2300      	movs	r3, #0
 8010172:	2b00      	cmp	r3, #0
 8010174:	d007      	beq.n	8010186 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010184:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	4a2d      	ldr	r2, [pc, #180]	; (8010240 <HAL_TIM_PWM_Start_DMA+0x438>)
 801018c:	4293      	cmp	r3, r2
 801018e:	d02c      	beq.n	80101ea <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010198:	d027      	beq.n	80101ea <HAL_TIM_PWM_Start_DMA+0x3e2>
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	4a2d      	ldr	r2, [pc, #180]	; (8010254 <HAL_TIM_PWM_Start_DMA+0x44c>)
 80101a0:	4293      	cmp	r3, r2
 80101a2:	d022      	beq.n	80101ea <HAL_TIM_PWM_Start_DMA+0x3e2>
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	4a2b      	ldr	r2, [pc, #172]	; (8010258 <HAL_TIM_PWM_Start_DMA+0x450>)
 80101aa:	4293      	cmp	r3, r2
 80101ac:	d01d      	beq.n	80101ea <HAL_TIM_PWM_Start_DMA+0x3e2>
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	4a2a      	ldr	r2, [pc, #168]	; (801025c <HAL_TIM_PWM_Start_DMA+0x454>)
 80101b4:	4293      	cmp	r3, r2
 80101b6:	d018      	beq.n	80101ea <HAL_TIM_PWM_Start_DMA+0x3e2>
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	4a21      	ldr	r2, [pc, #132]	; (8010244 <HAL_TIM_PWM_Start_DMA+0x43c>)
 80101be:	4293      	cmp	r3, r2
 80101c0:	d013      	beq.n	80101ea <HAL_TIM_PWM_Start_DMA+0x3e2>
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	4a26      	ldr	r2, [pc, #152]	; (8010260 <HAL_TIM_PWM_Start_DMA+0x458>)
 80101c8:	4293      	cmp	r3, r2
 80101ca:	d00e      	beq.n	80101ea <HAL_TIM_PWM_Start_DMA+0x3e2>
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	4a1d      	ldr	r2, [pc, #116]	; (8010248 <HAL_TIM_PWM_Start_DMA+0x440>)
 80101d2:	4293      	cmp	r3, r2
 80101d4:	d009      	beq.n	80101ea <HAL_TIM_PWM_Start_DMA+0x3e2>
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	4a22      	ldr	r2, [pc, #136]	; (8010264 <HAL_TIM_PWM_Start_DMA+0x45c>)
 80101dc:	4293      	cmp	r3, r2
 80101de:	d004      	beq.n	80101ea <HAL_TIM_PWM_Start_DMA+0x3e2>
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	4a20      	ldr	r2, [pc, #128]	; (8010268 <HAL_TIM_PWM_Start_DMA+0x460>)
 80101e6:	4293      	cmp	r3, r2
 80101e8:	d115      	bne.n	8010216 <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	689a      	ldr	r2, [r3, #8]
 80101f0:	4b1e      	ldr	r3, [pc, #120]	; (801026c <HAL_TIM_PWM_Start_DMA+0x464>)
 80101f2:	4013      	ands	r3, r2
 80101f4:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80101f6:	693b      	ldr	r3, [r7, #16]
 80101f8:	2b06      	cmp	r3, #6
 80101fa:	d015      	beq.n	8010228 <HAL_TIM_PWM_Start_DMA+0x420>
 80101fc:	693b      	ldr	r3, [r7, #16]
 80101fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010202:	d011      	beq.n	8010228 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	681a      	ldr	r2, [r3, #0]
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	f042 0201 	orr.w	r2, r2, #1
 8010212:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010214:	e008      	b.n	8010228 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	681a      	ldr	r2, [r3, #0]
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	f042 0201 	orr.w	r2, r2, #1
 8010224:	601a      	str	r2, [r3, #0]
 8010226:	e000      	b.n	801022a <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010228:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 801022a:	7dfb      	ldrb	r3, [r7, #23]
}
 801022c:	4618      	mov	r0, r3
 801022e:	3718      	adds	r7, #24
 8010230:	46bd      	mov	sp, r7
 8010232:	bd80      	pop	{r7, pc}
 8010234:	080107f7 	.word	0x080107f7
 8010238:	0801089f 	.word	0x0801089f
 801023c:	08010765 	.word	0x08010765
 8010240:	40010000 	.word	0x40010000
 8010244:	40010400 	.word	0x40010400
 8010248:	40014000 	.word	0x40014000
 801024c:	40014400 	.word	0x40014400
 8010250:	40014800 	.word	0x40014800
 8010254:	40000400 	.word	0x40000400
 8010258:	40000800 	.word	0x40000800
 801025c:	40000c00 	.word	0x40000c00
 8010260:	40001800 	.word	0x40001800
 8010264:	4000e000 	.word	0x4000e000
 8010268:	4000e400 	.word	0x4000e400
 801026c:	00010007 	.word	0x00010007

08010270 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010270:	b580      	push	{r7, lr}
 8010272:	b082      	sub	sp, #8
 8010274:	af00      	add	r7, sp, #0
 8010276:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	691b      	ldr	r3, [r3, #16]
 801027e:	f003 0302 	and.w	r3, r3, #2
 8010282:	2b02      	cmp	r3, #2
 8010284:	d122      	bne.n	80102cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	68db      	ldr	r3, [r3, #12]
 801028c:	f003 0302 	and.w	r3, r3, #2
 8010290:	2b02      	cmp	r3, #2
 8010292:	d11b      	bne.n	80102cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	f06f 0202 	mvn.w	r2, #2
 801029c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	2201      	movs	r2, #1
 80102a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	699b      	ldr	r3, [r3, #24]
 80102aa:	f003 0303 	and.w	r3, r3, #3
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d003      	beq.n	80102ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80102b2:	6878      	ldr	r0, [r7, #4]
 80102b4:	f000 fa24 	bl	8010700 <HAL_TIM_IC_CaptureCallback>
 80102b8:	e005      	b.n	80102c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80102ba:	6878      	ldr	r0, [r7, #4]
 80102bc:	f000 fa16 	bl	80106ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80102c0:	6878      	ldr	r0, [r7, #4]
 80102c2:	f000 fa27 	bl	8010714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	2200      	movs	r2, #0
 80102ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	691b      	ldr	r3, [r3, #16]
 80102d2:	f003 0304 	and.w	r3, r3, #4
 80102d6:	2b04      	cmp	r3, #4
 80102d8:	d122      	bne.n	8010320 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	68db      	ldr	r3, [r3, #12]
 80102e0:	f003 0304 	and.w	r3, r3, #4
 80102e4:	2b04      	cmp	r3, #4
 80102e6:	d11b      	bne.n	8010320 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	f06f 0204 	mvn.w	r2, #4
 80102f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	2202      	movs	r2, #2
 80102f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	699b      	ldr	r3, [r3, #24]
 80102fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010302:	2b00      	cmp	r3, #0
 8010304:	d003      	beq.n	801030e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010306:	6878      	ldr	r0, [r7, #4]
 8010308:	f000 f9fa 	bl	8010700 <HAL_TIM_IC_CaptureCallback>
 801030c:	e005      	b.n	801031a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801030e:	6878      	ldr	r0, [r7, #4]
 8010310:	f000 f9ec 	bl	80106ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010314:	6878      	ldr	r0, [r7, #4]
 8010316:	f000 f9fd 	bl	8010714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	2200      	movs	r2, #0
 801031e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	691b      	ldr	r3, [r3, #16]
 8010326:	f003 0308 	and.w	r3, r3, #8
 801032a:	2b08      	cmp	r3, #8
 801032c:	d122      	bne.n	8010374 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	68db      	ldr	r3, [r3, #12]
 8010334:	f003 0308 	and.w	r3, r3, #8
 8010338:	2b08      	cmp	r3, #8
 801033a:	d11b      	bne.n	8010374 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	f06f 0208 	mvn.w	r2, #8
 8010344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	2204      	movs	r2, #4
 801034a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	69db      	ldr	r3, [r3, #28]
 8010352:	f003 0303 	and.w	r3, r3, #3
 8010356:	2b00      	cmp	r3, #0
 8010358:	d003      	beq.n	8010362 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801035a:	6878      	ldr	r0, [r7, #4]
 801035c:	f000 f9d0 	bl	8010700 <HAL_TIM_IC_CaptureCallback>
 8010360:	e005      	b.n	801036e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010362:	6878      	ldr	r0, [r7, #4]
 8010364:	f000 f9c2 	bl	80106ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010368:	6878      	ldr	r0, [r7, #4]
 801036a:	f000 f9d3 	bl	8010714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	2200      	movs	r2, #0
 8010372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	691b      	ldr	r3, [r3, #16]
 801037a:	f003 0310 	and.w	r3, r3, #16
 801037e:	2b10      	cmp	r3, #16
 8010380:	d122      	bne.n	80103c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	68db      	ldr	r3, [r3, #12]
 8010388:	f003 0310 	and.w	r3, r3, #16
 801038c:	2b10      	cmp	r3, #16
 801038e:	d11b      	bne.n	80103c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	f06f 0210 	mvn.w	r2, #16
 8010398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	2208      	movs	r2, #8
 801039e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	69db      	ldr	r3, [r3, #28]
 80103a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d003      	beq.n	80103b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	f000 f9a6 	bl	8010700 <HAL_TIM_IC_CaptureCallback>
 80103b4:	e005      	b.n	80103c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80103b6:	6878      	ldr	r0, [r7, #4]
 80103b8:	f000 f998 	bl	80106ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80103bc:	6878      	ldr	r0, [r7, #4]
 80103be:	f000 f9a9 	bl	8010714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	2200      	movs	r2, #0
 80103c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	691b      	ldr	r3, [r3, #16]
 80103ce:	f003 0301 	and.w	r3, r3, #1
 80103d2:	2b01      	cmp	r3, #1
 80103d4:	d10e      	bne.n	80103f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	68db      	ldr	r3, [r3, #12]
 80103dc:	f003 0301 	and.w	r3, r3, #1
 80103e0:	2b01      	cmp	r3, #1
 80103e2:	d107      	bne.n	80103f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	f06f 0201 	mvn.w	r2, #1
 80103ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80103ee:	6878      	ldr	r0, [r7, #4]
 80103f0:	f000 f972 	bl	80106d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	691b      	ldr	r3, [r3, #16]
 80103fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80103fe:	2b80      	cmp	r3, #128	; 0x80
 8010400:	d10e      	bne.n	8010420 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	68db      	ldr	r3, [r3, #12]
 8010408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801040c:	2b80      	cmp	r3, #128	; 0x80
 801040e:	d107      	bne.n	8010420 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801041a:	6878      	ldr	r0, [r7, #4]
 801041c:	f000 febc 	bl	8011198 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	691b      	ldr	r3, [r3, #16]
 8010426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801042a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801042e:	d10e      	bne.n	801044e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	68db      	ldr	r3, [r3, #12]
 8010436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801043a:	2b80      	cmp	r3, #128	; 0x80
 801043c:	d107      	bne.n	801044e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8010446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010448:	6878      	ldr	r0, [r7, #4]
 801044a:	f000 feaf 	bl	80111ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	691b      	ldr	r3, [r3, #16]
 8010454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010458:	2b40      	cmp	r3, #64	; 0x40
 801045a:	d10e      	bne.n	801047a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	68db      	ldr	r3, [r3, #12]
 8010462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010466:	2b40      	cmp	r3, #64	; 0x40
 8010468:	d107      	bne.n	801047a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010474:	6878      	ldr	r0, [r7, #4]
 8010476:	f000 f961 	bl	801073c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	691b      	ldr	r3, [r3, #16]
 8010480:	f003 0320 	and.w	r3, r3, #32
 8010484:	2b20      	cmp	r3, #32
 8010486:	d10e      	bne.n	80104a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	68db      	ldr	r3, [r3, #12]
 801048e:	f003 0320 	and.w	r3, r3, #32
 8010492:	2b20      	cmp	r3, #32
 8010494:	d107      	bne.n	80104a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	f06f 0220 	mvn.w	r2, #32
 801049e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80104a0:	6878      	ldr	r0, [r7, #4]
 80104a2:	f000 fe6f 	bl	8011184 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80104a6:	bf00      	nop
 80104a8:	3708      	adds	r7, #8
 80104aa:	46bd      	mov	sp, r7
 80104ac:	bd80      	pop	{r7, pc}
	...

080104b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b086      	sub	sp, #24
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	60f8      	str	r0, [r7, #12]
 80104b8:	60b9      	str	r1, [r7, #8]
 80104ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80104bc:	2300      	movs	r3, #0
 80104be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80104c6:	2b01      	cmp	r3, #1
 80104c8:	d101      	bne.n	80104ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80104ca:	2302      	movs	r3, #2
 80104cc:	e0ff      	b.n	80106ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	2201      	movs	r2, #1
 80104d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	2b14      	cmp	r3, #20
 80104da:	f200 80f0 	bhi.w	80106be <HAL_TIM_PWM_ConfigChannel+0x20e>
 80104de:	a201      	add	r2, pc, #4	; (adr r2, 80104e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80104e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104e4:	08010539 	.word	0x08010539
 80104e8:	080106bf 	.word	0x080106bf
 80104ec:	080106bf 	.word	0x080106bf
 80104f0:	080106bf 	.word	0x080106bf
 80104f4:	08010579 	.word	0x08010579
 80104f8:	080106bf 	.word	0x080106bf
 80104fc:	080106bf 	.word	0x080106bf
 8010500:	080106bf 	.word	0x080106bf
 8010504:	080105bb 	.word	0x080105bb
 8010508:	080106bf 	.word	0x080106bf
 801050c:	080106bf 	.word	0x080106bf
 8010510:	080106bf 	.word	0x080106bf
 8010514:	080105fb 	.word	0x080105fb
 8010518:	080106bf 	.word	0x080106bf
 801051c:	080106bf 	.word	0x080106bf
 8010520:	080106bf 	.word	0x080106bf
 8010524:	0801063d 	.word	0x0801063d
 8010528:	080106bf 	.word	0x080106bf
 801052c:	080106bf 	.word	0x080106bf
 8010530:	080106bf 	.word	0x080106bf
 8010534:	0801067d 	.word	0x0801067d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	68b9      	ldr	r1, [r7, #8]
 801053e:	4618      	mov	r0, r3
 8010540:	f000 fa88 	bl	8010a54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	699a      	ldr	r2, [r3, #24]
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	f042 0208 	orr.w	r2, r2, #8
 8010552:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	699a      	ldr	r2, [r3, #24]
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	f022 0204 	bic.w	r2, r2, #4
 8010562:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	6999      	ldr	r1, [r3, #24]
 801056a:	68bb      	ldr	r3, [r7, #8]
 801056c:	691a      	ldr	r2, [r3, #16]
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	430a      	orrs	r2, r1
 8010574:	619a      	str	r2, [r3, #24]
      break;
 8010576:	e0a5      	b.n	80106c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	68b9      	ldr	r1, [r7, #8]
 801057e:	4618      	mov	r0, r3
 8010580:	f000 faf8 	bl	8010b74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	699a      	ldr	r2, [r3, #24]
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010592:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	699a      	ldr	r2, [r3, #24]
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80105a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	6999      	ldr	r1, [r3, #24]
 80105aa:	68bb      	ldr	r3, [r7, #8]
 80105ac:	691b      	ldr	r3, [r3, #16]
 80105ae:	021a      	lsls	r2, r3, #8
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	430a      	orrs	r2, r1
 80105b6:	619a      	str	r2, [r3, #24]
      break;
 80105b8:	e084      	b.n	80106c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	68b9      	ldr	r1, [r7, #8]
 80105c0:	4618      	mov	r0, r3
 80105c2:	f000 fb61 	bl	8010c88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	69da      	ldr	r2, [r3, #28]
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	f042 0208 	orr.w	r2, r2, #8
 80105d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	69da      	ldr	r2, [r3, #28]
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	f022 0204 	bic.w	r2, r2, #4
 80105e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	69d9      	ldr	r1, [r3, #28]
 80105ec:	68bb      	ldr	r3, [r7, #8]
 80105ee:	691a      	ldr	r2, [r3, #16]
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	430a      	orrs	r2, r1
 80105f6:	61da      	str	r2, [r3, #28]
      break;
 80105f8:	e064      	b.n	80106c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	68b9      	ldr	r1, [r7, #8]
 8010600:	4618      	mov	r0, r3
 8010602:	f000 fbc9 	bl	8010d98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	69da      	ldr	r2, [r3, #28]
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010614:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	69da      	ldr	r2, [r3, #28]
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010624:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	69d9      	ldr	r1, [r3, #28]
 801062c:	68bb      	ldr	r3, [r7, #8]
 801062e:	691b      	ldr	r3, [r3, #16]
 8010630:	021a      	lsls	r2, r3, #8
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	430a      	orrs	r2, r1
 8010638:	61da      	str	r2, [r3, #28]
      break;
 801063a:	e043      	b.n	80106c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	68b9      	ldr	r1, [r7, #8]
 8010642:	4618      	mov	r0, r3
 8010644:	f000 fc12 	bl	8010e6c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	f042 0208 	orr.w	r2, r2, #8
 8010656:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	f022 0204 	bic.w	r2, r2, #4
 8010666:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801066e:	68bb      	ldr	r3, [r7, #8]
 8010670:	691a      	ldr	r2, [r3, #16]
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	430a      	orrs	r2, r1
 8010678:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801067a:	e023      	b.n	80106c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	68b9      	ldr	r1, [r7, #8]
 8010682:	4618      	mov	r0, r3
 8010684:	f000 fc56 	bl	8010f34 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010696:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80106a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80106ae:	68bb      	ldr	r3, [r7, #8]
 80106b0:	691b      	ldr	r3, [r3, #16]
 80106b2:	021a      	lsls	r2, r3, #8
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	430a      	orrs	r2, r1
 80106ba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80106bc:	e002      	b.n	80106c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80106be:	2301      	movs	r3, #1
 80106c0:	75fb      	strb	r3, [r7, #23]
      break;
 80106c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	2200      	movs	r2, #0
 80106c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80106cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80106ce:	4618      	mov	r0, r3
 80106d0:	3718      	adds	r7, #24
 80106d2:	46bd      	mov	sp, r7
 80106d4:	bd80      	pop	{r7, pc}
 80106d6:	bf00      	nop

080106d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80106d8:	b480      	push	{r7}
 80106da:	b083      	sub	sp, #12
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80106e0:	bf00      	nop
 80106e2:	370c      	adds	r7, #12
 80106e4:	46bd      	mov	sp, r7
 80106e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ea:	4770      	bx	lr

080106ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80106ec:	b480      	push	{r7}
 80106ee:	b083      	sub	sp, #12
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80106f4:	bf00      	nop
 80106f6:	370c      	adds	r7, #12
 80106f8:	46bd      	mov	sp, r7
 80106fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fe:	4770      	bx	lr

08010700 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010700:	b480      	push	{r7}
 8010702:	b083      	sub	sp, #12
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010708:	bf00      	nop
 801070a:	370c      	adds	r7, #12
 801070c:	46bd      	mov	sp, r7
 801070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010712:	4770      	bx	lr

08010714 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010714:	b480      	push	{r7}
 8010716:	b083      	sub	sp, #12
 8010718:	af00      	add	r7, sp, #0
 801071a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801071c:	bf00      	nop
 801071e:	370c      	adds	r7, #12
 8010720:	46bd      	mov	sp, r7
 8010722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010726:	4770      	bx	lr

08010728 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010728:	b480      	push	{r7}
 801072a:	b083      	sub	sp, #12
 801072c:	af00      	add	r7, sp, #0
 801072e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8010730:	bf00      	nop
 8010732:	370c      	adds	r7, #12
 8010734:	46bd      	mov	sp, r7
 8010736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073a:	4770      	bx	lr

0801073c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801073c:	b480      	push	{r7}
 801073e:	b083      	sub	sp, #12
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010744:	bf00      	nop
 8010746:	370c      	adds	r7, #12
 8010748:	46bd      	mov	sp, r7
 801074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074e:	4770      	bx	lr

08010750 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8010750:	b480      	push	{r7}
 8010752:	b083      	sub	sp, #12
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8010758:	bf00      	nop
 801075a:	370c      	adds	r7, #12
 801075c:	46bd      	mov	sp, r7
 801075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010762:	4770      	bx	lr

08010764 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8010764:	b580      	push	{r7, lr}
 8010766:	b084      	sub	sp, #16
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010770:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010776:	687a      	ldr	r2, [r7, #4]
 8010778:	429a      	cmp	r2, r3
 801077a:	d107      	bne.n	801078c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	2201      	movs	r2, #1
 8010780:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	2201      	movs	r2, #1
 8010786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801078a:	e02a      	b.n	80107e2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010790:	687a      	ldr	r2, [r7, #4]
 8010792:	429a      	cmp	r2, r3
 8010794:	d107      	bne.n	80107a6 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	2202      	movs	r2, #2
 801079a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	2201      	movs	r2, #1
 80107a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80107a4:	e01d      	b.n	80107e2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107aa:	687a      	ldr	r2, [r7, #4]
 80107ac:	429a      	cmp	r2, r3
 80107ae:	d107      	bne.n	80107c0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	2204      	movs	r2, #4
 80107b4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	2201      	movs	r2, #1
 80107ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80107be:	e010      	b.n	80107e2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107c4:	687a      	ldr	r2, [r7, #4]
 80107c6:	429a      	cmp	r2, r3
 80107c8:	d107      	bne.n	80107da <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	2208      	movs	r2, #8
 80107ce:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	2201      	movs	r2, #1
 80107d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80107d8:	e003      	b.n	80107e2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	2201      	movs	r2, #1
 80107de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80107e2:	68f8      	ldr	r0, [r7, #12]
 80107e4:	f7ff ffb4 	bl	8010750 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	2200      	movs	r2, #0
 80107ec:	771a      	strb	r2, [r3, #28]
}
 80107ee:	bf00      	nop
 80107f0:	3710      	adds	r7, #16
 80107f2:	46bd      	mov	sp, r7
 80107f4:	bd80      	pop	{r7, pc}

080107f6 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80107f6:	b580      	push	{r7, lr}
 80107f8:	b084      	sub	sp, #16
 80107fa:	af00      	add	r7, sp, #0
 80107fc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010802:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010808:	687a      	ldr	r2, [r7, #4]
 801080a:	429a      	cmp	r2, r3
 801080c:	d10b      	bne.n	8010826 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	2201      	movs	r2, #1
 8010812:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	69db      	ldr	r3, [r3, #28]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d136      	bne.n	801088a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	2201      	movs	r2, #1
 8010820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010824:	e031      	b.n	801088a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801082a:	687a      	ldr	r2, [r7, #4]
 801082c:	429a      	cmp	r2, r3
 801082e:	d10b      	bne.n	8010848 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	2202      	movs	r2, #2
 8010834:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	69db      	ldr	r3, [r3, #28]
 801083a:	2b00      	cmp	r3, #0
 801083c:	d125      	bne.n	801088a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	2201      	movs	r2, #1
 8010842:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010846:	e020      	b.n	801088a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801084c:	687a      	ldr	r2, [r7, #4]
 801084e:	429a      	cmp	r2, r3
 8010850:	d10b      	bne.n	801086a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	2204      	movs	r2, #4
 8010856:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	69db      	ldr	r3, [r3, #28]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d114      	bne.n	801088a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	2201      	movs	r2, #1
 8010864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010868:	e00f      	b.n	801088a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801086e:	687a      	ldr	r2, [r7, #4]
 8010870:	429a      	cmp	r2, r3
 8010872:	d10a      	bne.n	801088a <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	2208      	movs	r2, #8
 8010878:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	69db      	ldr	r3, [r3, #28]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d103      	bne.n	801088a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	2201      	movs	r2, #1
 8010886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 801088a:	68f8      	ldr	r0, [r7, #12]
 801088c:	f7ff ff42 	bl	8010714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	2200      	movs	r2, #0
 8010894:	771a      	strb	r2, [r3, #28]
}
 8010896:	bf00      	nop
 8010898:	3710      	adds	r7, #16
 801089a:	46bd      	mov	sp, r7
 801089c:	bd80      	pop	{r7, pc}

0801089e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 801089e:	b580      	push	{r7, lr}
 80108a0:	b084      	sub	sp, #16
 80108a2:	af00      	add	r7, sp, #0
 80108a4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108aa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108b0:	687a      	ldr	r2, [r7, #4]
 80108b2:	429a      	cmp	r2, r3
 80108b4:	d103      	bne.n	80108be <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	2201      	movs	r2, #1
 80108ba:	771a      	strb	r2, [r3, #28]
 80108bc:	e019      	b.n	80108f2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108c2:	687a      	ldr	r2, [r7, #4]
 80108c4:	429a      	cmp	r2, r3
 80108c6:	d103      	bne.n	80108d0 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	2202      	movs	r2, #2
 80108cc:	771a      	strb	r2, [r3, #28]
 80108ce:	e010      	b.n	80108f2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108d4:	687a      	ldr	r2, [r7, #4]
 80108d6:	429a      	cmp	r2, r3
 80108d8:	d103      	bne.n	80108e2 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	2204      	movs	r2, #4
 80108de:	771a      	strb	r2, [r3, #28]
 80108e0:	e007      	b.n	80108f2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108e6:	687a      	ldr	r2, [r7, #4]
 80108e8:	429a      	cmp	r2, r3
 80108ea:	d102      	bne.n	80108f2 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	2208      	movs	r2, #8
 80108f0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80108f2:	68f8      	ldr	r0, [r7, #12]
 80108f4:	f7ff ff18 	bl	8010728 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	2200      	movs	r2, #0
 80108fc:	771a      	strb	r2, [r3, #28]
}
 80108fe:	bf00      	nop
 8010900:	3710      	adds	r7, #16
 8010902:	46bd      	mov	sp, r7
 8010904:	bd80      	pop	{r7, pc}
	...

08010908 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010908:	b480      	push	{r7}
 801090a:	b085      	sub	sp, #20
 801090c:	af00      	add	r7, sp, #0
 801090e:	6078      	str	r0, [r7, #4]
 8010910:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	4a44      	ldr	r2, [pc, #272]	; (8010a2c <TIM_Base_SetConfig+0x124>)
 801091c:	4293      	cmp	r3, r2
 801091e:	d013      	beq.n	8010948 <TIM_Base_SetConfig+0x40>
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010926:	d00f      	beq.n	8010948 <TIM_Base_SetConfig+0x40>
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	4a41      	ldr	r2, [pc, #260]	; (8010a30 <TIM_Base_SetConfig+0x128>)
 801092c:	4293      	cmp	r3, r2
 801092e:	d00b      	beq.n	8010948 <TIM_Base_SetConfig+0x40>
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	4a40      	ldr	r2, [pc, #256]	; (8010a34 <TIM_Base_SetConfig+0x12c>)
 8010934:	4293      	cmp	r3, r2
 8010936:	d007      	beq.n	8010948 <TIM_Base_SetConfig+0x40>
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	4a3f      	ldr	r2, [pc, #252]	; (8010a38 <TIM_Base_SetConfig+0x130>)
 801093c:	4293      	cmp	r3, r2
 801093e:	d003      	beq.n	8010948 <TIM_Base_SetConfig+0x40>
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	4a3e      	ldr	r2, [pc, #248]	; (8010a3c <TIM_Base_SetConfig+0x134>)
 8010944:	4293      	cmp	r3, r2
 8010946:	d108      	bne.n	801095a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801094e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010950:	683b      	ldr	r3, [r7, #0]
 8010952:	685b      	ldr	r3, [r3, #4]
 8010954:	68fa      	ldr	r2, [r7, #12]
 8010956:	4313      	orrs	r3, r2
 8010958:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	4a33      	ldr	r2, [pc, #204]	; (8010a2c <TIM_Base_SetConfig+0x124>)
 801095e:	4293      	cmp	r3, r2
 8010960:	d027      	beq.n	80109b2 <TIM_Base_SetConfig+0xaa>
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010968:	d023      	beq.n	80109b2 <TIM_Base_SetConfig+0xaa>
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	4a30      	ldr	r2, [pc, #192]	; (8010a30 <TIM_Base_SetConfig+0x128>)
 801096e:	4293      	cmp	r3, r2
 8010970:	d01f      	beq.n	80109b2 <TIM_Base_SetConfig+0xaa>
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	4a2f      	ldr	r2, [pc, #188]	; (8010a34 <TIM_Base_SetConfig+0x12c>)
 8010976:	4293      	cmp	r3, r2
 8010978:	d01b      	beq.n	80109b2 <TIM_Base_SetConfig+0xaa>
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	4a2e      	ldr	r2, [pc, #184]	; (8010a38 <TIM_Base_SetConfig+0x130>)
 801097e:	4293      	cmp	r3, r2
 8010980:	d017      	beq.n	80109b2 <TIM_Base_SetConfig+0xaa>
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	4a2d      	ldr	r2, [pc, #180]	; (8010a3c <TIM_Base_SetConfig+0x134>)
 8010986:	4293      	cmp	r3, r2
 8010988:	d013      	beq.n	80109b2 <TIM_Base_SetConfig+0xaa>
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	4a2c      	ldr	r2, [pc, #176]	; (8010a40 <TIM_Base_SetConfig+0x138>)
 801098e:	4293      	cmp	r3, r2
 8010990:	d00f      	beq.n	80109b2 <TIM_Base_SetConfig+0xaa>
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	4a2b      	ldr	r2, [pc, #172]	; (8010a44 <TIM_Base_SetConfig+0x13c>)
 8010996:	4293      	cmp	r3, r2
 8010998:	d00b      	beq.n	80109b2 <TIM_Base_SetConfig+0xaa>
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	4a2a      	ldr	r2, [pc, #168]	; (8010a48 <TIM_Base_SetConfig+0x140>)
 801099e:	4293      	cmp	r3, r2
 80109a0:	d007      	beq.n	80109b2 <TIM_Base_SetConfig+0xaa>
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	4a29      	ldr	r2, [pc, #164]	; (8010a4c <TIM_Base_SetConfig+0x144>)
 80109a6:	4293      	cmp	r3, r2
 80109a8:	d003      	beq.n	80109b2 <TIM_Base_SetConfig+0xaa>
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	4a28      	ldr	r2, [pc, #160]	; (8010a50 <TIM_Base_SetConfig+0x148>)
 80109ae:	4293      	cmp	r3, r2
 80109b0:	d108      	bne.n	80109c4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80109b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80109ba:	683b      	ldr	r3, [r7, #0]
 80109bc:	68db      	ldr	r3, [r3, #12]
 80109be:	68fa      	ldr	r2, [r7, #12]
 80109c0:	4313      	orrs	r3, r2
 80109c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80109ca:	683b      	ldr	r3, [r7, #0]
 80109cc:	695b      	ldr	r3, [r3, #20]
 80109ce:	4313      	orrs	r3, r2
 80109d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	68fa      	ldr	r2, [r7, #12]
 80109d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80109d8:	683b      	ldr	r3, [r7, #0]
 80109da:	689a      	ldr	r2, [r3, #8]
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80109e0:	683b      	ldr	r3, [r7, #0]
 80109e2:	681a      	ldr	r2, [r3, #0]
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	4a10      	ldr	r2, [pc, #64]	; (8010a2c <TIM_Base_SetConfig+0x124>)
 80109ec:	4293      	cmp	r3, r2
 80109ee:	d00f      	beq.n	8010a10 <TIM_Base_SetConfig+0x108>
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	4a12      	ldr	r2, [pc, #72]	; (8010a3c <TIM_Base_SetConfig+0x134>)
 80109f4:	4293      	cmp	r3, r2
 80109f6:	d00b      	beq.n	8010a10 <TIM_Base_SetConfig+0x108>
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	4a11      	ldr	r2, [pc, #68]	; (8010a40 <TIM_Base_SetConfig+0x138>)
 80109fc:	4293      	cmp	r3, r2
 80109fe:	d007      	beq.n	8010a10 <TIM_Base_SetConfig+0x108>
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	4a10      	ldr	r2, [pc, #64]	; (8010a44 <TIM_Base_SetConfig+0x13c>)
 8010a04:	4293      	cmp	r3, r2
 8010a06:	d003      	beq.n	8010a10 <TIM_Base_SetConfig+0x108>
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	4a0f      	ldr	r2, [pc, #60]	; (8010a48 <TIM_Base_SetConfig+0x140>)
 8010a0c:	4293      	cmp	r3, r2
 8010a0e:	d103      	bne.n	8010a18 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010a10:	683b      	ldr	r3, [r7, #0]
 8010a12:	691a      	ldr	r2, [r3, #16]
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	2201      	movs	r2, #1
 8010a1c:	615a      	str	r2, [r3, #20]
}
 8010a1e:	bf00      	nop
 8010a20:	3714      	adds	r7, #20
 8010a22:	46bd      	mov	sp, r7
 8010a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a28:	4770      	bx	lr
 8010a2a:	bf00      	nop
 8010a2c:	40010000 	.word	0x40010000
 8010a30:	40000400 	.word	0x40000400
 8010a34:	40000800 	.word	0x40000800
 8010a38:	40000c00 	.word	0x40000c00
 8010a3c:	40010400 	.word	0x40010400
 8010a40:	40014000 	.word	0x40014000
 8010a44:	40014400 	.word	0x40014400
 8010a48:	40014800 	.word	0x40014800
 8010a4c:	4000e000 	.word	0x4000e000
 8010a50:	4000e400 	.word	0x4000e400

08010a54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010a54:	b480      	push	{r7}
 8010a56:	b087      	sub	sp, #28
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
 8010a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	6a1b      	ldr	r3, [r3, #32]
 8010a62:	f023 0201 	bic.w	r2, r3, #1
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	6a1b      	ldr	r3, [r3, #32]
 8010a6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	685b      	ldr	r3, [r3, #4]
 8010a74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	699b      	ldr	r3, [r3, #24]
 8010a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010a7c:	68fa      	ldr	r2, [r7, #12]
 8010a7e:	4b37      	ldr	r3, [pc, #220]	; (8010b5c <TIM_OC1_SetConfig+0x108>)
 8010a80:	4013      	ands	r3, r2
 8010a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	f023 0303 	bic.w	r3, r3, #3
 8010a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010a8c:	683b      	ldr	r3, [r7, #0]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	68fa      	ldr	r2, [r7, #12]
 8010a92:	4313      	orrs	r3, r2
 8010a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010a96:	697b      	ldr	r3, [r7, #20]
 8010a98:	f023 0302 	bic.w	r3, r3, #2
 8010a9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010a9e:	683b      	ldr	r3, [r7, #0]
 8010aa0:	689b      	ldr	r3, [r3, #8]
 8010aa2:	697a      	ldr	r2, [r7, #20]
 8010aa4:	4313      	orrs	r3, r2
 8010aa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	4a2d      	ldr	r2, [pc, #180]	; (8010b60 <TIM_OC1_SetConfig+0x10c>)
 8010aac:	4293      	cmp	r3, r2
 8010aae:	d00f      	beq.n	8010ad0 <TIM_OC1_SetConfig+0x7c>
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	4a2c      	ldr	r2, [pc, #176]	; (8010b64 <TIM_OC1_SetConfig+0x110>)
 8010ab4:	4293      	cmp	r3, r2
 8010ab6:	d00b      	beq.n	8010ad0 <TIM_OC1_SetConfig+0x7c>
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	4a2b      	ldr	r2, [pc, #172]	; (8010b68 <TIM_OC1_SetConfig+0x114>)
 8010abc:	4293      	cmp	r3, r2
 8010abe:	d007      	beq.n	8010ad0 <TIM_OC1_SetConfig+0x7c>
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	4a2a      	ldr	r2, [pc, #168]	; (8010b6c <TIM_OC1_SetConfig+0x118>)
 8010ac4:	4293      	cmp	r3, r2
 8010ac6:	d003      	beq.n	8010ad0 <TIM_OC1_SetConfig+0x7c>
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	4a29      	ldr	r2, [pc, #164]	; (8010b70 <TIM_OC1_SetConfig+0x11c>)
 8010acc:	4293      	cmp	r3, r2
 8010ace:	d10c      	bne.n	8010aea <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010ad0:	697b      	ldr	r3, [r7, #20]
 8010ad2:	f023 0308 	bic.w	r3, r3, #8
 8010ad6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010ad8:	683b      	ldr	r3, [r7, #0]
 8010ada:	68db      	ldr	r3, [r3, #12]
 8010adc:	697a      	ldr	r2, [r7, #20]
 8010ade:	4313      	orrs	r3, r2
 8010ae0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010ae2:	697b      	ldr	r3, [r7, #20]
 8010ae4:	f023 0304 	bic.w	r3, r3, #4
 8010ae8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	4a1c      	ldr	r2, [pc, #112]	; (8010b60 <TIM_OC1_SetConfig+0x10c>)
 8010aee:	4293      	cmp	r3, r2
 8010af0:	d00f      	beq.n	8010b12 <TIM_OC1_SetConfig+0xbe>
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	4a1b      	ldr	r2, [pc, #108]	; (8010b64 <TIM_OC1_SetConfig+0x110>)
 8010af6:	4293      	cmp	r3, r2
 8010af8:	d00b      	beq.n	8010b12 <TIM_OC1_SetConfig+0xbe>
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	4a1a      	ldr	r2, [pc, #104]	; (8010b68 <TIM_OC1_SetConfig+0x114>)
 8010afe:	4293      	cmp	r3, r2
 8010b00:	d007      	beq.n	8010b12 <TIM_OC1_SetConfig+0xbe>
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	4a19      	ldr	r2, [pc, #100]	; (8010b6c <TIM_OC1_SetConfig+0x118>)
 8010b06:	4293      	cmp	r3, r2
 8010b08:	d003      	beq.n	8010b12 <TIM_OC1_SetConfig+0xbe>
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	4a18      	ldr	r2, [pc, #96]	; (8010b70 <TIM_OC1_SetConfig+0x11c>)
 8010b0e:	4293      	cmp	r3, r2
 8010b10:	d111      	bne.n	8010b36 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010b12:	693b      	ldr	r3, [r7, #16]
 8010b14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010b18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010b1a:	693b      	ldr	r3, [r7, #16]
 8010b1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010b20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010b22:	683b      	ldr	r3, [r7, #0]
 8010b24:	695b      	ldr	r3, [r3, #20]
 8010b26:	693a      	ldr	r2, [r7, #16]
 8010b28:	4313      	orrs	r3, r2
 8010b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010b2c:	683b      	ldr	r3, [r7, #0]
 8010b2e:	699b      	ldr	r3, [r3, #24]
 8010b30:	693a      	ldr	r2, [r7, #16]
 8010b32:	4313      	orrs	r3, r2
 8010b34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	693a      	ldr	r2, [r7, #16]
 8010b3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	68fa      	ldr	r2, [r7, #12]
 8010b40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010b42:	683b      	ldr	r3, [r7, #0]
 8010b44:	685a      	ldr	r2, [r3, #4]
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	697a      	ldr	r2, [r7, #20]
 8010b4e:	621a      	str	r2, [r3, #32]
}
 8010b50:	bf00      	nop
 8010b52:	371c      	adds	r7, #28
 8010b54:	46bd      	mov	sp, r7
 8010b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b5a:	4770      	bx	lr
 8010b5c:	fffeff8f 	.word	0xfffeff8f
 8010b60:	40010000 	.word	0x40010000
 8010b64:	40010400 	.word	0x40010400
 8010b68:	40014000 	.word	0x40014000
 8010b6c:	40014400 	.word	0x40014400
 8010b70:	40014800 	.word	0x40014800

08010b74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010b74:	b480      	push	{r7}
 8010b76:	b087      	sub	sp, #28
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	6078      	str	r0, [r7, #4]
 8010b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	6a1b      	ldr	r3, [r3, #32]
 8010b82:	f023 0210 	bic.w	r2, r3, #16
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	6a1b      	ldr	r3, [r3, #32]
 8010b8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	685b      	ldr	r3, [r3, #4]
 8010b94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	699b      	ldr	r3, [r3, #24]
 8010b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010b9c:	68fa      	ldr	r2, [r7, #12]
 8010b9e:	4b34      	ldr	r3, [pc, #208]	; (8010c70 <TIM_OC2_SetConfig+0xfc>)
 8010ba0:	4013      	ands	r3, r2
 8010ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010baa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010bac:	683b      	ldr	r3, [r7, #0]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	021b      	lsls	r3, r3, #8
 8010bb2:	68fa      	ldr	r2, [r7, #12]
 8010bb4:	4313      	orrs	r3, r2
 8010bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010bb8:	697b      	ldr	r3, [r7, #20]
 8010bba:	f023 0320 	bic.w	r3, r3, #32
 8010bbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010bc0:	683b      	ldr	r3, [r7, #0]
 8010bc2:	689b      	ldr	r3, [r3, #8]
 8010bc4:	011b      	lsls	r3, r3, #4
 8010bc6:	697a      	ldr	r2, [r7, #20]
 8010bc8:	4313      	orrs	r3, r2
 8010bca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	4a29      	ldr	r2, [pc, #164]	; (8010c74 <TIM_OC2_SetConfig+0x100>)
 8010bd0:	4293      	cmp	r3, r2
 8010bd2:	d003      	beq.n	8010bdc <TIM_OC2_SetConfig+0x68>
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	4a28      	ldr	r2, [pc, #160]	; (8010c78 <TIM_OC2_SetConfig+0x104>)
 8010bd8:	4293      	cmp	r3, r2
 8010bda:	d10d      	bne.n	8010bf8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010bdc:	697b      	ldr	r3, [r7, #20]
 8010bde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010be2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010be4:	683b      	ldr	r3, [r7, #0]
 8010be6:	68db      	ldr	r3, [r3, #12]
 8010be8:	011b      	lsls	r3, r3, #4
 8010bea:	697a      	ldr	r2, [r7, #20]
 8010bec:	4313      	orrs	r3, r2
 8010bee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010bf0:	697b      	ldr	r3, [r7, #20]
 8010bf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010bf6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	4a1e      	ldr	r2, [pc, #120]	; (8010c74 <TIM_OC2_SetConfig+0x100>)
 8010bfc:	4293      	cmp	r3, r2
 8010bfe:	d00f      	beq.n	8010c20 <TIM_OC2_SetConfig+0xac>
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	4a1d      	ldr	r2, [pc, #116]	; (8010c78 <TIM_OC2_SetConfig+0x104>)
 8010c04:	4293      	cmp	r3, r2
 8010c06:	d00b      	beq.n	8010c20 <TIM_OC2_SetConfig+0xac>
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	4a1c      	ldr	r2, [pc, #112]	; (8010c7c <TIM_OC2_SetConfig+0x108>)
 8010c0c:	4293      	cmp	r3, r2
 8010c0e:	d007      	beq.n	8010c20 <TIM_OC2_SetConfig+0xac>
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	4a1b      	ldr	r2, [pc, #108]	; (8010c80 <TIM_OC2_SetConfig+0x10c>)
 8010c14:	4293      	cmp	r3, r2
 8010c16:	d003      	beq.n	8010c20 <TIM_OC2_SetConfig+0xac>
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	4a1a      	ldr	r2, [pc, #104]	; (8010c84 <TIM_OC2_SetConfig+0x110>)
 8010c1c:	4293      	cmp	r3, r2
 8010c1e:	d113      	bne.n	8010c48 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010c20:	693b      	ldr	r3, [r7, #16]
 8010c22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010c26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010c28:	693b      	ldr	r3, [r7, #16]
 8010c2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010c2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010c30:	683b      	ldr	r3, [r7, #0]
 8010c32:	695b      	ldr	r3, [r3, #20]
 8010c34:	009b      	lsls	r3, r3, #2
 8010c36:	693a      	ldr	r2, [r7, #16]
 8010c38:	4313      	orrs	r3, r2
 8010c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010c3c:	683b      	ldr	r3, [r7, #0]
 8010c3e:	699b      	ldr	r3, [r3, #24]
 8010c40:	009b      	lsls	r3, r3, #2
 8010c42:	693a      	ldr	r2, [r7, #16]
 8010c44:	4313      	orrs	r3, r2
 8010c46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	693a      	ldr	r2, [r7, #16]
 8010c4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	68fa      	ldr	r2, [r7, #12]
 8010c52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010c54:	683b      	ldr	r3, [r7, #0]
 8010c56:	685a      	ldr	r2, [r3, #4]
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	697a      	ldr	r2, [r7, #20]
 8010c60:	621a      	str	r2, [r3, #32]
}
 8010c62:	bf00      	nop
 8010c64:	371c      	adds	r7, #28
 8010c66:	46bd      	mov	sp, r7
 8010c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6c:	4770      	bx	lr
 8010c6e:	bf00      	nop
 8010c70:	feff8fff 	.word	0xfeff8fff
 8010c74:	40010000 	.word	0x40010000
 8010c78:	40010400 	.word	0x40010400
 8010c7c:	40014000 	.word	0x40014000
 8010c80:	40014400 	.word	0x40014400
 8010c84:	40014800 	.word	0x40014800

08010c88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010c88:	b480      	push	{r7}
 8010c8a:	b087      	sub	sp, #28
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	6078      	str	r0, [r7, #4]
 8010c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	6a1b      	ldr	r3, [r3, #32]
 8010c96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	6a1b      	ldr	r3, [r3, #32]
 8010ca2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	685b      	ldr	r3, [r3, #4]
 8010ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	69db      	ldr	r3, [r3, #28]
 8010cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010cb0:	68fa      	ldr	r2, [r7, #12]
 8010cb2:	4b33      	ldr	r3, [pc, #204]	; (8010d80 <TIM_OC3_SetConfig+0xf8>)
 8010cb4:	4013      	ands	r3, r2
 8010cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	f023 0303 	bic.w	r3, r3, #3
 8010cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010cc0:	683b      	ldr	r3, [r7, #0]
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	68fa      	ldr	r2, [r7, #12]
 8010cc6:	4313      	orrs	r3, r2
 8010cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010cca:	697b      	ldr	r3, [r7, #20]
 8010ccc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010cd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010cd2:	683b      	ldr	r3, [r7, #0]
 8010cd4:	689b      	ldr	r3, [r3, #8]
 8010cd6:	021b      	lsls	r3, r3, #8
 8010cd8:	697a      	ldr	r2, [r7, #20]
 8010cda:	4313      	orrs	r3, r2
 8010cdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	4a28      	ldr	r2, [pc, #160]	; (8010d84 <TIM_OC3_SetConfig+0xfc>)
 8010ce2:	4293      	cmp	r3, r2
 8010ce4:	d003      	beq.n	8010cee <TIM_OC3_SetConfig+0x66>
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	4a27      	ldr	r2, [pc, #156]	; (8010d88 <TIM_OC3_SetConfig+0x100>)
 8010cea:	4293      	cmp	r3, r2
 8010cec:	d10d      	bne.n	8010d0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010cee:	697b      	ldr	r3, [r7, #20]
 8010cf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010cf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010cf6:	683b      	ldr	r3, [r7, #0]
 8010cf8:	68db      	ldr	r3, [r3, #12]
 8010cfa:	021b      	lsls	r3, r3, #8
 8010cfc:	697a      	ldr	r2, [r7, #20]
 8010cfe:	4313      	orrs	r3, r2
 8010d00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010d02:	697b      	ldr	r3, [r7, #20]
 8010d04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010d08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	4a1d      	ldr	r2, [pc, #116]	; (8010d84 <TIM_OC3_SetConfig+0xfc>)
 8010d0e:	4293      	cmp	r3, r2
 8010d10:	d00f      	beq.n	8010d32 <TIM_OC3_SetConfig+0xaa>
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	4a1c      	ldr	r2, [pc, #112]	; (8010d88 <TIM_OC3_SetConfig+0x100>)
 8010d16:	4293      	cmp	r3, r2
 8010d18:	d00b      	beq.n	8010d32 <TIM_OC3_SetConfig+0xaa>
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	4a1b      	ldr	r2, [pc, #108]	; (8010d8c <TIM_OC3_SetConfig+0x104>)
 8010d1e:	4293      	cmp	r3, r2
 8010d20:	d007      	beq.n	8010d32 <TIM_OC3_SetConfig+0xaa>
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	4a1a      	ldr	r2, [pc, #104]	; (8010d90 <TIM_OC3_SetConfig+0x108>)
 8010d26:	4293      	cmp	r3, r2
 8010d28:	d003      	beq.n	8010d32 <TIM_OC3_SetConfig+0xaa>
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	4a19      	ldr	r2, [pc, #100]	; (8010d94 <TIM_OC3_SetConfig+0x10c>)
 8010d2e:	4293      	cmp	r3, r2
 8010d30:	d113      	bne.n	8010d5a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010d32:	693b      	ldr	r3, [r7, #16]
 8010d34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010d38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010d3a:	693b      	ldr	r3, [r7, #16]
 8010d3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010d40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010d42:	683b      	ldr	r3, [r7, #0]
 8010d44:	695b      	ldr	r3, [r3, #20]
 8010d46:	011b      	lsls	r3, r3, #4
 8010d48:	693a      	ldr	r2, [r7, #16]
 8010d4a:	4313      	orrs	r3, r2
 8010d4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010d4e:	683b      	ldr	r3, [r7, #0]
 8010d50:	699b      	ldr	r3, [r3, #24]
 8010d52:	011b      	lsls	r3, r3, #4
 8010d54:	693a      	ldr	r2, [r7, #16]
 8010d56:	4313      	orrs	r3, r2
 8010d58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	693a      	ldr	r2, [r7, #16]
 8010d5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	68fa      	ldr	r2, [r7, #12]
 8010d64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010d66:	683b      	ldr	r3, [r7, #0]
 8010d68:	685a      	ldr	r2, [r3, #4]
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	697a      	ldr	r2, [r7, #20]
 8010d72:	621a      	str	r2, [r3, #32]
}
 8010d74:	bf00      	nop
 8010d76:	371c      	adds	r7, #28
 8010d78:	46bd      	mov	sp, r7
 8010d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d7e:	4770      	bx	lr
 8010d80:	fffeff8f 	.word	0xfffeff8f
 8010d84:	40010000 	.word	0x40010000
 8010d88:	40010400 	.word	0x40010400
 8010d8c:	40014000 	.word	0x40014000
 8010d90:	40014400 	.word	0x40014400
 8010d94:	40014800 	.word	0x40014800

08010d98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010d98:	b480      	push	{r7}
 8010d9a:	b087      	sub	sp, #28
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	6078      	str	r0, [r7, #4]
 8010da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	6a1b      	ldr	r3, [r3, #32]
 8010da6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	6a1b      	ldr	r3, [r3, #32]
 8010db2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	685b      	ldr	r3, [r3, #4]
 8010db8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	69db      	ldr	r3, [r3, #28]
 8010dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010dc0:	68fa      	ldr	r2, [r7, #12]
 8010dc2:	4b24      	ldr	r3, [pc, #144]	; (8010e54 <TIM_OC4_SetConfig+0xbc>)
 8010dc4:	4013      	ands	r3, r2
 8010dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010dce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010dd0:	683b      	ldr	r3, [r7, #0]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	021b      	lsls	r3, r3, #8
 8010dd6:	68fa      	ldr	r2, [r7, #12]
 8010dd8:	4313      	orrs	r3, r2
 8010dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010ddc:	693b      	ldr	r3, [r7, #16]
 8010dde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010de2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010de4:	683b      	ldr	r3, [r7, #0]
 8010de6:	689b      	ldr	r3, [r3, #8]
 8010de8:	031b      	lsls	r3, r3, #12
 8010dea:	693a      	ldr	r2, [r7, #16]
 8010dec:	4313      	orrs	r3, r2
 8010dee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	4a19      	ldr	r2, [pc, #100]	; (8010e58 <TIM_OC4_SetConfig+0xc0>)
 8010df4:	4293      	cmp	r3, r2
 8010df6:	d00f      	beq.n	8010e18 <TIM_OC4_SetConfig+0x80>
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	4a18      	ldr	r2, [pc, #96]	; (8010e5c <TIM_OC4_SetConfig+0xc4>)
 8010dfc:	4293      	cmp	r3, r2
 8010dfe:	d00b      	beq.n	8010e18 <TIM_OC4_SetConfig+0x80>
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	4a17      	ldr	r2, [pc, #92]	; (8010e60 <TIM_OC4_SetConfig+0xc8>)
 8010e04:	4293      	cmp	r3, r2
 8010e06:	d007      	beq.n	8010e18 <TIM_OC4_SetConfig+0x80>
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	4a16      	ldr	r2, [pc, #88]	; (8010e64 <TIM_OC4_SetConfig+0xcc>)
 8010e0c:	4293      	cmp	r3, r2
 8010e0e:	d003      	beq.n	8010e18 <TIM_OC4_SetConfig+0x80>
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	4a15      	ldr	r2, [pc, #84]	; (8010e68 <TIM_OC4_SetConfig+0xd0>)
 8010e14:	4293      	cmp	r3, r2
 8010e16:	d109      	bne.n	8010e2c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010e18:	697b      	ldr	r3, [r7, #20]
 8010e1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010e1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010e20:	683b      	ldr	r3, [r7, #0]
 8010e22:	695b      	ldr	r3, [r3, #20]
 8010e24:	019b      	lsls	r3, r3, #6
 8010e26:	697a      	ldr	r2, [r7, #20]
 8010e28:	4313      	orrs	r3, r2
 8010e2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	697a      	ldr	r2, [r7, #20]
 8010e30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	68fa      	ldr	r2, [r7, #12]
 8010e36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010e38:	683b      	ldr	r3, [r7, #0]
 8010e3a:	685a      	ldr	r2, [r3, #4]
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	693a      	ldr	r2, [r7, #16]
 8010e44:	621a      	str	r2, [r3, #32]
}
 8010e46:	bf00      	nop
 8010e48:	371c      	adds	r7, #28
 8010e4a:	46bd      	mov	sp, r7
 8010e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e50:	4770      	bx	lr
 8010e52:	bf00      	nop
 8010e54:	feff8fff 	.word	0xfeff8fff
 8010e58:	40010000 	.word	0x40010000
 8010e5c:	40010400 	.word	0x40010400
 8010e60:	40014000 	.word	0x40014000
 8010e64:	40014400 	.word	0x40014400
 8010e68:	40014800 	.word	0x40014800

08010e6c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010e6c:	b480      	push	{r7}
 8010e6e:	b087      	sub	sp, #28
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	6078      	str	r0, [r7, #4]
 8010e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	6a1b      	ldr	r3, [r3, #32]
 8010e7a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	6a1b      	ldr	r3, [r3, #32]
 8010e86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	685b      	ldr	r3, [r3, #4]
 8010e8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010e94:	68fa      	ldr	r2, [r7, #12]
 8010e96:	4b21      	ldr	r3, [pc, #132]	; (8010f1c <TIM_OC5_SetConfig+0xb0>)
 8010e98:	4013      	ands	r3, r2
 8010e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010e9c:	683b      	ldr	r3, [r7, #0]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	68fa      	ldr	r2, [r7, #12]
 8010ea2:	4313      	orrs	r3, r2
 8010ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010ea6:	693b      	ldr	r3, [r7, #16]
 8010ea8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010eac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010eae:	683b      	ldr	r3, [r7, #0]
 8010eb0:	689b      	ldr	r3, [r3, #8]
 8010eb2:	041b      	lsls	r3, r3, #16
 8010eb4:	693a      	ldr	r2, [r7, #16]
 8010eb6:	4313      	orrs	r3, r2
 8010eb8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	4a18      	ldr	r2, [pc, #96]	; (8010f20 <TIM_OC5_SetConfig+0xb4>)
 8010ebe:	4293      	cmp	r3, r2
 8010ec0:	d00f      	beq.n	8010ee2 <TIM_OC5_SetConfig+0x76>
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	4a17      	ldr	r2, [pc, #92]	; (8010f24 <TIM_OC5_SetConfig+0xb8>)
 8010ec6:	4293      	cmp	r3, r2
 8010ec8:	d00b      	beq.n	8010ee2 <TIM_OC5_SetConfig+0x76>
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	4a16      	ldr	r2, [pc, #88]	; (8010f28 <TIM_OC5_SetConfig+0xbc>)
 8010ece:	4293      	cmp	r3, r2
 8010ed0:	d007      	beq.n	8010ee2 <TIM_OC5_SetConfig+0x76>
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	4a15      	ldr	r2, [pc, #84]	; (8010f2c <TIM_OC5_SetConfig+0xc0>)
 8010ed6:	4293      	cmp	r3, r2
 8010ed8:	d003      	beq.n	8010ee2 <TIM_OC5_SetConfig+0x76>
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	4a14      	ldr	r2, [pc, #80]	; (8010f30 <TIM_OC5_SetConfig+0xc4>)
 8010ede:	4293      	cmp	r3, r2
 8010ee0:	d109      	bne.n	8010ef6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010ee2:	697b      	ldr	r3, [r7, #20]
 8010ee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010ee8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010eea:	683b      	ldr	r3, [r7, #0]
 8010eec:	695b      	ldr	r3, [r3, #20]
 8010eee:	021b      	lsls	r3, r3, #8
 8010ef0:	697a      	ldr	r2, [r7, #20]
 8010ef2:	4313      	orrs	r3, r2
 8010ef4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	697a      	ldr	r2, [r7, #20]
 8010efa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	68fa      	ldr	r2, [r7, #12]
 8010f00:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8010f02:	683b      	ldr	r3, [r7, #0]
 8010f04:	685a      	ldr	r2, [r3, #4]
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	693a      	ldr	r2, [r7, #16]
 8010f0e:	621a      	str	r2, [r3, #32]
}
 8010f10:	bf00      	nop
 8010f12:	371c      	adds	r7, #28
 8010f14:	46bd      	mov	sp, r7
 8010f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1a:	4770      	bx	lr
 8010f1c:	fffeff8f 	.word	0xfffeff8f
 8010f20:	40010000 	.word	0x40010000
 8010f24:	40010400 	.word	0x40010400
 8010f28:	40014000 	.word	0x40014000
 8010f2c:	40014400 	.word	0x40014400
 8010f30:	40014800 	.word	0x40014800

08010f34 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010f34:	b480      	push	{r7}
 8010f36:	b087      	sub	sp, #28
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	6078      	str	r0, [r7, #4]
 8010f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	6a1b      	ldr	r3, [r3, #32]
 8010f42:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	6a1b      	ldr	r3, [r3, #32]
 8010f4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	685b      	ldr	r3, [r3, #4]
 8010f54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010f5c:	68fa      	ldr	r2, [r7, #12]
 8010f5e:	4b22      	ldr	r3, [pc, #136]	; (8010fe8 <TIM_OC6_SetConfig+0xb4>)
 8010f60:	4013      	ands	r3, r2
 8010f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010f64:	683b      	ldr	r3, [r7, #0]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	021b      	lsls	r3, r3, #8
 8010f6a:	68fa      	ldr	r2, [r7, #12]
 8010f6c:	4313      	orrs	r3, r2
 8010f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010f70:	693b      	ldr	r3, [r7, #16]
 8010f72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010f76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010f78:	683b      	ldr	r3, [r7, #0]
 8010f7a:	689b      	ldr	r3, [r3, #8]
 8010f7c:	051b      	lsls	r3, r3, #20
 8010f7e:	693a      	ldr	r2, [r7, #16]
 8010f80:	4313      	orrs	r3, r2
 8010f82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	4a19      	ldr	r2, [pc, #100]	; (8010fec <TIM_OC6_SetConfig+0xb8>)
 8010f88:	4293      	cmp	r3, r2
 8010f8a:	d00f      	beq.n	8010fac <TIM_OC6_SetConfig+0x78>
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	4a18      	ldr	r2, [pc, #96]	; (8010ff0 <TIM_OC6_SetConfig+0xbc>)
 8010f90:	4293      	cmp	r3, r2
 8010f92:	d00b      	beq.n	8010fac <TIM_OC6_SetConfig+0x78>
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	4a17      	ldr	r2, [pc, #92]	; (8010ff4 <TIM_OC6_SetConfig+0xc0>)
 8010f98:	4293      	cmp	r3, r2
 8010f9a:	d007      	beq.n	8010fac <TIM_OC6_SetConfig+0x78>
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	4a16      	ldr	r2, [pc, #88]	; (8010ff8 <TIM_OC6_SetConfig+0xc4>)
 8010fa0:	4293      	cmp	r3, r2
 8010fa2:	d003      	beq.n	8010fac <TIM_OC6_SetConfig+0x78>
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	4a15      	ldr	r2, [pc, #84]	; (8010ffc <TIM_OC6_SetConfig+0xc8>)
 8010fa8:	4293      	cmp	r3, r2
 8010faa:	d109      	bne.n	8010fc0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010fac:	697b      	ldr	r3, [r7, #20]
 8010fae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010fb2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010fb4:	683b      	ldr	r3, [r7, #0]
 8010fb6:	695b      	ldr	r3, [r3, #20]
 8010fb8:	029b      	lsls	r3, r3, #10
 8010fba:	697a      	ldr	r2, [r7, #20]
 8010fbc:	4313      	orrs	r3, r2
 8010fbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	697a      	ldr	r2, [r7, #20]
 8010fc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	68fa      	ldr	r2, [r7, #12]
 8010fca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010fcc:	683b      	ldr	r3, [r7, #0]
 8010fce:	685a      	ldr	r2, [r3, #4]
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	693a      	ldr	r2, [r7, #16]
 8010fd8:	621a      	str	r2, [r3, #32]
}
 8010fda:	bf00      	nop
 8010fdc:	371c      	adds	r7, #28
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe4:	4770      	bx	lr
 8010fe6:	bf00      	nop
 8010fe8:	feff8fff 	.word	0xfeff8fff
 8010fec:	40010000 	.word	0x40010000
 8010ff0:	40010400 	.word	0x40010400
 8010ff4:	40014000 	.word	0x40014000
 8010ff8:	40014400 	.word	0x40014400
 8010ffc:	40014800 	.word	0x40014800

08011000 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011000:	b480      	push	{r7}
 8011002:	b087      	sub	sp, #28
 8011004:	af00      	add	r7, sp, #0
 8011006:	60f8      	str	r0, [r7, #12]
 8011008:	60b9      	str	r1, [r7, #8]
 801100a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801100c:	68bb      	ldr	r3, [r7, #8]
 801100e:	f003 031f 	and.w	r3, r3, #31
 8011012:	2201      	movs	r2, #1
 8011014:	fa02 f303 	lsl.w	r3, r2, r3
 8011018:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	6a1a      	ldr	r2, [r3, #32]
 801101e:	697b      	ldr	r3, [r7, #20]
 8011020:	43db      	mvns	r3, r3
 8011022:	401a      	ands	r2, r3
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	6a1a      	ldr	r2, [r3, #32]
 801102c:	68bb      	ldr	r3, [r7, #8]
 801102e:	f003 031f 	and.w	r3, r3, #31
 8011032:	6879      	ldr	r1, [r7, #4]
 8011034:	fa01 f303 	lsl.w	r3, r1, r3
 8011038:	431a      	orrs	r2, r3
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	621a      	str	r2, [r3, #32]
}
 801103e:	bf00      	nop
 8011040:	371c      	adds	r7, #28
 8011042:	46bd      	mov	sp, r7
 8011044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011048:	4770      	bx	lr
	...

0801104c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801104c:	b480      	push	{r7}
 801104e:	b085      	sub	sp, #20
 8011050:	af00      	add	r7, sp, #0
 8011052:	6078      	str	r0, [r7, #4]
 8011054:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801105c:	2b01      	cmp	r3, #1
 801105e:	d101      	bne.n	8011064 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011060:	2302      	movs	r3, #2
 8011062:	e077      	b.n	8011154 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	2201      	movs	r2, #1
 8011068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	2202      	movs	r2, #2
 8011070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	685b      	ldr	r3, [r3, #4]
 801107a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	689b      	ldr	r3, [r3, #8]
 8011082:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	4a35      	ldr	r2, [pc, #212]	; (8011160 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801108a:	4293      	cmp	r3, r2
 801108c:	d004      	beq.n	8011098 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	4a34      	ldr	r2, [pc, #208]	; (8011164 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011094:	4293      	cmp	r3, r2
 8011096:	d108      	bne.n	80110aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801109e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80110a0:	683b      	ldr	r3, [r7, #0]
 80110a2:	685b      	ldr	r3, [r3, #4]
 80110a4:	68fa      	ldr	r2, [r7, #12]
 80110a6:	4313      	orrs	r3, r2
 80110a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80110b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80110b2:	683b      	ldr	r3, [r7, #0]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	68fa      	ldr	r2, [r7, #12]
 80110b8:	4313      	orrs	r3, r2
 80110ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	68fa      	ldr	r2, [r7, #12]
 80110c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	4a25      	ldr	r2, [pc, #148]	; (8011160 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80110ca:	4293      	cmp	r3, r2
 80110cc:	d02c      	beq.n	8011128 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80110d6:	d027      	beq.n	8011128 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	4a22      	ldr	r2, [pc, #136]	; (8011168 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80110de:	4293      	cmp	r3, r2
 80110e0:	d022      	beq.n	8011128 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	4a21      	ldr	r2, [pc, #132]	; (801116c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80110e8:	4293      	cmp	r3, r2
 80110ea:	d01d      	beq.n	8011128 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	4a1f      	ldr	r2, [pc, #124]	; (8011170 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80110f2:	4293      	cmp	r3, r2
 80110f4:	d018      	beq.n	8011128 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	4a1a      	ldr	r2, [pc, #104]	; (8011164 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80110fc:	4293      	cmp	r3, r2
 80110fe:	d013      	beq.n	8011128 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	4a1b      	ldr	r2, [pc, #108]	; (8011174 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8011106:	4293      	cmp	r3, r2
 8011108:	d00e      	beq.n	8011128 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	4a1a      	ldr	r2, [pc, #104]	; (8011178 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8011110:	4293      	cmp	r3, r2
 8011112:	d009      	beq.n	8011128 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	4a18      	ldr	r2, [pc, #96]	; (801117c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 801111a:	4293      	cmp	r3, r2
 801111c:	d004      	beq.n	8011128 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	4a17      	ldr	r2, [pc, #92]	; (8011180 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8011124:	4293      	cmp	r3, r2
 8011126:	d10c      	bne.n	8011142 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011128:	68bb      	ldr	r3, [r7, #8]
 801112a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801112e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011130:	683b      	ldr	r3, [r7, #0]
 8011132:	689b      	ldr	r3, [r3, #8]
 8011134:	68ba      	ldr	r2, [r7, #8]
 8011136:	4313      	orrs	r3, r2
 8011138:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	68ba      	ldr	r2, [r7, #8]
 8011140:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	2201      	movs	r2, #1
 8011146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	2200      	movs	r2, #0
 801114e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011152:	2300      	movs	r3, #0
}
 8011154:	4618      	mov	r0, r3
 8011156:	3714      	adds	r7, #20
 8011158:	46bd      	mov	sp, r7
 801115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801115e:	4770      	bx	lr
 8011160:	40010000 	.word	0x40010000
 8011164:	40010400 	.word	0x40010400
 8011168:	40000400 	.word	0x40000400
 801116c:	40000800 	.word	0x40000800
 8011170:	40000c00 	.word	0x40000c00
 8011174:	40001800 	.word	0x40001800
 8011178:	40014000 	.word	0x40014000
 801117c:	4000e000 	.word	0x4000e000
 8011180:	4000e400 	.word	0x4000e400

08011184 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011184:	b480      	push	{r7}
 8011186:	b083      	sub	sp, #12
 8011188:	af00      	add	r7, sp, #0
 801118a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801118c:	bf00      	nop
 801118e:	370c      	adds	r7, #12
 8011190:	46bd      	mov	sp, r7
 8011192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011196:	4770      	bx	lr

08011198 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011198:	b480      	push	{r7}
 801119a:	b083      	sub	sp, #12
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80111a0:	bf00      	nop
 80111a2:	370c      	adds	r7, #12
 80111a4:	46bd      	mov	sp, r7
 80111a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111aa:	4770      	bx	lr

080111ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80111ac:	b480      	push	{r7}
 80111ae:	b083      	sub	sp, #12
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80111b4:	bf00      	nop
 80111b6:	370c      	adds	r7, #12
 80111b8:	46bd      	mov	sp, r7
 80111ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111be:	4770      	bx	lr

080111c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80111c0:	b580      	push	{r7, lr}
 80111c2:	b082      	sub	sp, #8
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d101      	bne.n	80111d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80111ce:	2301      	movs	r3, #1
 80111d0:	e042      	b.n	8011258 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d106      	bne.n	80111ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	2200      	movs	r2, #0
 80111e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80111e4:	6878      	ldr	r0, [r7, #4]
 80111e6:	f7f2 fb17 	bl	8003818 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	2224      	movs	r2, #36	; 0x24
 80111ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	681a      	ldr	r2, [r3, #0]
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	f022 0201 	bic.w	r2, r2, #1
 8011200:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011202:	6878      	ldr	r0, [r7, #4]
 8011204:	f000 f82c 	bl	8011260 <UART_SetConfig>
 8011208:	4603      	mov	r3, r0
 801120a:	2b01      	cmp	r3, #1
 801120c:	d101      	bne.n	8011212 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801120e:	2301      	movs	r3, #1
 8011210:	e022      	b.n	8011258 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011216:	2b00      	cmp	r3, #0
 8011218:	d002      	beq.n	8011220 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801121a:	6878      	ldr	r0, [r7, #4]
 801121c:	f000 fe8c 	bl	8011f38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	685a      	ldr	r2, [r3, #4]
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801122e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	689a      	ldr	r2, [r3, #8]
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801123e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	681a      	ldr	r2, [r3, #0]
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	f042 0201 	orr.w	r2, r2, #1
 801124e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011250:	6878      	ldr	r0, [r7, #4]
 8011252:	f000 ff13 	bl	801207c <UART_CheckIdleState>
 8011256:	4603      	mov	r3, r0
}
 8011258:	4618      	mov	r0, r3
 801125a:	3708      	adds	r7, #8
 801125c:	46bd      	mov	sp, r7
 801125e:	bd80      	pop	{r7, pc}

08011260 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011264:	b092      	sub	sp, #72	; 0x48
 8011266:	af00      	add	r7, sp, #0
 8011268:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801126a:	2300      	movs	r3, #0
 801126c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011270:	697b      	ldr	r3, [r7, #20]
 8011272:	689a      	ldr	r2, [r3, #8]
 8011274:	697b      	ldr	r3, [r7, #20]
 8011276:	691b      	ldr	r3, [r3, #16]
 8011278:	431a      	orrs	r2, r3
 801127a:	697b      	ldr	r3, [r7, #20]
 801127c:	695b      	ldr	r3, [r3, #20]
 801127e:	431a      	orrs	r2, r3
 8011280:	697b      	ldr	r3, [r7, #20]
 8011282:	69db      	ldr	r3, [r3, #28]
 8011284:	4313      	orrs	r3, r2
 8011286:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011288:	697b      	ldr	r3, [r7, #20]
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	681a      	ldr	r2, [r3, #0]
 801128e:	4bbe      	ldr	r3, [pc, #760]	; (8011588 <UART_SetConfig+0x328>)
 8011290:	4013      	ands	r3, r2
 8011292:	697a      	ldr	r2, [r7, #20]
 8011294:	6812      	ldr	r2, [r2, #0]
 8011296:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011298:	430b      	orrs	r3, r1
 801129a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801129c:	697b      	ldr	r3, [r7, #20]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	685b      	ldr	r3, [r3, #4]
 80112a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80112a6:	697b      	ldr	r3, [r7, #20]
 80112a8:	68da      	ldr	r2, [r3, #12]
 80112aa:	697b      	ldr	r3, [r7, #20]
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	430a      	orrs	r2, r1
 80112b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80112b2:	697b      	ldr	r3, [r7, #20]
 80112b4:	699b      	ldr	r3, [r3, #24]
 80112b6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80112b8:	697b      	ldr	r3, [r7, #20]
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	4ab3      	ldr	r2, [pc, #716]	; (801158c <UART_SetConfig+0x32c>)
 80112be:	4293      	cmp	r3, r2
 80112c0:	d004      	beq.n	80112cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80112c2:	697b      	ldr	r3, [r7, #20]
 80112c4:	6a1b      	ldr	r3, [r3, #32]
 80112c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80112c8:	4313      	orrs	r3, r2
 80112ca:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80112cc:	697b      	ldr	r3, [r7, #20]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	689a      	ldr	r2, [r3, #8]
 80112d2:	4baf      	ldr	r3, [pc, #700]	; (8011590 <UART_SetConfig+0x330>)
 80112d4:	4013      	ands	r3, r2
 80112d6:	697a      	ldr	r2, [r7, #20]
 80112d8:	6812      	ldr	r2, [r2, #0]
 80112da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80112dc:	430b      	orrs	r3, r1
 80112de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80112e0:	697b      	ldr	r3, [r7, #20]
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112e6:	f023 010f 	bic.w	r1, r3, #15
 80112ea:	697b      	ldr	r3, [r7, #20]
 80112ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80112ee:	697b      	ldr	r3, [r7, #20]
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	430a      	orrs	r2, r1
 80112f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80112f6:	697b      	ldr	r3, [r7, #20]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	4aa6      	ldr	r2, [pc, #664]	; (8011594 <UART_SetConfig+0x334>)
 80112fc:	4293      	cmp	r3, r2
 80112fe:	d177      	bne.n	80113f0 <UART_SetConfig+0x190>
 8011300:	4ba5      	ldr	r3, [pc, #660]	; (8011598 <UART_SetConfig+0x338>)
 8011302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011304:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011308:	2b28      	cmp	r3, #40	; 0x28
 801130a:	d86d      	bhi.n	80113e8 <UART_SetConfig+0x188>
 801130c:	a201      	add	r2, pc, #4	; (adr r2, 8011314 <UART_SetConfig+0xb4>)
 801130e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011312:	bf00      	nop
 8011314:	080113b9 	.word	0x080113b9
 8011318:	080113e9 	.word	0x080113e9
 801131c:	080113e9 	.word	0x080113e9
 8011320:	080113e9 	.word	0x080113e9
 8011324:	080113e9 	.word	0x080113e9
 8011328:	080113e9 	.word	0x080113e9
 801132c:	080113e9 	.word	0x080113e9
 8011330:	080113e9 	.word	0x080113e9
 8011334:	080113c1 	.word	0x080113c1
 8011338:	080113e9 	.word	0x080113e9
 801133c:	080113e9 	.word	0x080113e9
 8011340:	080113e9 	.word	0x080113e9
 8011344:	080113e9 	.word	0x080113e9
 8011348:	080113e9 	.word	0x080113e9
 801134c:	080113e9 	.word	0x080113e9
 8011350:	080113e9 	.word	0x080113e9
 8011354:	080113c9 	.word	0x080113c9
 8011358:	080113e9 	.word	0x080113e9
 801135c:	080113e9 	.word	0x080113e9
 8011360:	080113e9 	.word	0x080113e9
 8011364:	080113e9 	.word	0x080113e9
 8011368:	080113e9 	.word	0x080113e9
 801136c:	080113e9 	.word	0x080113e9
 8011370:	080113e9 	.word	0x080113e9
 8011374:	080113d1 	.word	0x080113d1
 8011378:	080113e9 	.word	0x080113e9
 801137c:	080113e9 	.word	0x080113e9
 8011380:	080113e9 	.word	0x080113e9
 8011384:	080113e9 	.word	0x080113e9
 8011388:	080113e9 	.word	0x080113e9
 801138c:	080113e9 	.word	0x080113e9
 8011390:	080113e9 	.word	0x080113e9
 8011394:	080113d9 	.word	0x080113d9
 8011398:	080113e9 	.word	0x080113e9
 801139c:	080113e9 	.word	0x080113e9
 80113a0:	080113e9 	.word	0x080113e9
 80113a4:	080113e9 	.word	0x080113e9
 80113a8:	080113e9 	.word	0x080113e9
 80113ac:	080113e9 	.word	0x080113e9
 80113b0:	080113e9 	.word	0x080113e9
 80113b4:	080113e1 	.word	0x080113e1
 80113b8:	2301      	movs	r3, #1
 80113ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113be:	e326      	b.n	8011a0e <UART_SetConfig+0x7ae>
 80113c0:	2304      	movs	r3, #4
 80113c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113c6:	e322      	b.n	8011a0e <UART_SetConfig+0x7ae>
 80113c8:	2308      	movs	r3, #8
 80113ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113ce:	e31e      	b.n	8011a0e <UART_SetConfig+0x7ae>
 80113d0:	2310      	movs	r3, #16
 80113d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113d6:	e31a      	b.n	8011a0e <UART_SetConfig+0x7ae>
 80113d8:	2320      	movs	r3, #32
 80113da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113de:	e316      	b.n	8011a0e <UART_SetConfig+0x7ae>
 80113e0:	2340      	movs	r3, #64	; 0x40
 80113e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113e6:	e312      	b.n	8011a0e <UART_SetConfig+0x7ae>
 80113e8:	2380      	movs	r3, #128	; 0x80
 80113ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113ee:	e30e      	b.n	8011a0e <UART_SetConfig+0x7ae>
 80113f0:	697b      	ldr	r3, [r7, #20]
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	4a69      	ldr	r2, [pc, #420]	; (801159c <UART_SetConfig+0x33c>)
 80113f6:	4293      	cmp	r3, r2
 80113f8:	d130      	bne.n	801145c <UART_SetConfig+0x1fc>
 80113fa:	4b67      	ldr	r3, [pc, #412]	; (8011598 <UART_SetConfig+0x338>)
 80113fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80113fe:	f003 0307 	and.w	r3, r3, #7
 8011402:	2b05      	cmp	r3, #5
 8011404:	d826      	bhi.n	8011454 <UART_SetConfig+0x1f4>
 8011406:	a201      	add	r2, pc, #4	; (adr r2, 801140c <UART_SetConfig+0x1ac>)
 8011408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801140c:	08011425 	.word	0x08011425
 8011410:	0801142d 	.word	0x0801142d
 8011414:	08011435 	.word	0x08011435
 8011418:	0801143d 	.word	0x0801143d
 801141c:	08011445 	.word	0x08011445
 8011420:	0801144d 	.word	0x0801144d
 8011424:	2300      	movs	r3, #0
 8011426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801142a:	e2f0      	b.n	8011a0e <UART_SetConfig+0x7ae>
 801142c:	2304      	movs	r3, #4
 801142e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011432:	e2ec      	b.n	8011a0e <UART_SetConfig+0x7ae>
 8011434:	2308      	movs	r3, #8
 8011436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801143a:	e2e8      	b.n	8011a0e <UART_SetConfig+0x7ae>
 801143c:	2310      	movs	r3, #16
 801143e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011442:	e2e4      	b.n	8011a0e <UART_SetConfig+0x7ae>
 8011444:	2320      	movs	r3, #32
 8011446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801144a:	e2e0      	b.n	8011a0e <UART_SetConfig+0x7ae>
 801144c:	2340      	movs	r3, #64	; 0x40
 801144e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011452:	e2dc      	b.n	8011a0e <UART_SetConfig+0x7ae>
 8011454:	2380      	movs	r3, #128	; 0x80
 8011456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801145a:	e2d8      	b.n	8011a0e <UART_SetConfig+0x7ae>
 801145c:	697b      	ldr	r3, [r7, #20]
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	4a4f      	ldr	r2, [pc, #316]	; (80115a0 <UART_SetConfig+0x340>)
 8011462:	4293      	cmp	r3, r2
 8011464:	d130      	bne.n	80114c8 <UART_SetConfig+0x268>
 8011466:	4b4c      	ldr	r3, [pc, #304]	; (8011598 <UART_SetConfig+0x338>)
 8011468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801146a:	f003 0307 	and.w	r3, r3, #7
 801146e:	2b05      	cmp	r3, #5
 8011470:	d826      	bhi.n	80114c0 <UART_SetConfig+0x260>
 8011472:	a201      	add	r2, pc, #4	; (adr r2, 8011478 <UART_SetConfig+0x218>)
 8011474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011478:	08011491 	.word	0x08011491
 801147c:	08011499 	.word	0x08011499
 8011480:	080114a1 	.word	0x080114a1
 8011484:	080114a9 	.word	0x080114a9
 8011488:	080114b1 	.word	0x080114b1
 801148c:	080114b9 	.word	0x080114b9
 8011490:	2300      	movs	r3, #0
 8011492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011496:	e2ba      	b.n	8011a0e <UART_SetConfig+0x7ae>
 8011498:	2304      	movs	r3, #4
 801149a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801149e:	e2b6      	b.n	8011a0e <UART_SetConfig+0x7ae>
 80114a0:	2308      	movs	r3, #8
 80114a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114a6:	e2b2      	b.n	8011a0e <UART_SetConfig+0x7ae>
 80114a8:	2310      	movs	r3, #16
 80114aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114ae:	e2ae      	b.n	8011a0e <UART_SetConfig+0x7ae>
 80114b0:	2320      	movs	r3, #32
 80114b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114b6:	e2aa      	b.n	8011a0e <UART_SetConfig+0x7ae>
 80114b8:	2340      	movs	r3, #64	; 0x40
 80114ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114be:	e2a6      	b.n	8011a0e <UART_SetConfig+0x7ae>
 80114c0:	2380      	movs	r3, #128	; 0x80
 80114c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114c6:	e2a2      	b.n	8011a0e <UART_SetConfig+0x7ae>
 80114c8:	697b      	ldr	r3, [r7, #20]
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	4a35      	ldr	r2, [pc, #212]	; (80115a4 <UART_SetConfig+0x344>)
 80114ce:	4293      	cmp	r3, r2
 80114d0:	d130      	bne.n	8011534 <UART_SetConfig+0x2d4>
 80114d2:	4b31      	ldr	r3, [pc, #196]	; (8011598 <UART_SetConfig+0x338>)
 80114d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80114d6:	f003 0307 	and.w	r3, r3, #7
 80114da:	2b05      	cmp	r3, #5
 80114dc:	d826      	bhi.n	801152c <UART_SetConfig+0x2cc>
 80114de:	a201      	add	r2, pc, #4	; (adr r2, 80114e4 <UART_SetConfig+0x284>)
 80114e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114e4:	080114fd 	.word	0x080114fd
 80114e8:	08011505 	.word	0x08011505
 80114ec:	0801150d 	.word	0x0801150d
 80114f0:	08011515 	.word	0x08011515
 80114f4:	0801151d 	.word	0x0801151d
 80114f8:	08011525 	.word	0x08011525
 80114fc:	2300      	movs	r3, #0
 80114fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011502:	e284      	b.n	8011a0e <UART_SetConfig+0x7ae>
 8011504:	2304      	movs	r3, #4
 8011506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801150a:	e280      	b.n	8011a0e <UART_SetConfig+0x7ae>
 801150c:	2308      	movs	r3, #8
 801150e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011512:	e27c      	b.n	8011a0e <UART_SetConfig+0x7ae>
 8011514:	2310      	movs	r3, #16
 8011516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801151a:	e278      	b.n	8011a0e <UART_SetConfig+0x7ae>
 801151c:	2320      	movs	r3, #32
 801151e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011522:	e274      	b.n	8011a0e <UART_SetConfig+0x7ae>
 8011524:	2340      	movs	r3, #64	; 0x40
 8011526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801152a:	e270      	b.n	8011a0e <UART_SetConfig+0x7ae>
 801152c:	2380      	movs	r3, #128	; 0x80
 801152e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011532:	e26c      	b.n	8011a0e <UART_SetConfig+0x7ae>
 8011534:	697b      	ldr	r3, [r7, #20]
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	4a1b      	ldr	r2, [pc, #108]	; (80115a8 <UART_SetConfig+0x348>)
 801153a:	4293      	cmp	r3, r2
 801153c:	d142      	bne.n	80115c4 <UART_SetConfig+0x364>
 801153e:	4b16      	ldr	r3, [pc, #88]	; (8011598 <UART_SetConfig+0x338>)
 8011540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011542:	f003 0307 	and.w	r3, r3, #7
 8011546:	2b05      	cmp	r3, #5
 8011548:	d838      	bhi.n	80115bc <UART_SetConfig+0x35c>
 801154a:	a201      	add	r2, pc, #4	; (adr r2, 8011550 <UART_SetConfig+0x2f0>)
 801154c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011550:	08011569 	.word	0x08011569
 8011554:	08011571 	.word	0x08011571
 8011558:	08011579 	.word	0x08011579
 801155c:	08011581 	.word	0x08011581
 8011560:	080115ad 	.word	0x080115ad
 8011564:	080115b5 	.word	0x080115b5
 8011568:	2300      	movs	r3, #0
 801156a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801156e:	e24e      	b.n	8011a0e <UART_SetConfig+0x7ae>
 8011570:	2304      	movs	r3, #4
 8011572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011576:	e24a      	b.n	8011a0e <UART_SetConfig+0x7ae>
 8011578:	2308      	movs	r3, #8
 801157a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801157e:	e246      	b.n	8011a0e <UART_SetConfig+0x7ae>
 8011580:	2310      	movs	r3, #16
 8011582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011586:	e242      	b.n	8011a0e <UART_SetConfig+0x7ae>
 8011588:	cfff69f3 	.word	0xcfff69f3
 801158c:	58000c00 	.word	0x58000c00
 8011590:	11fff4ff 	.word	0x11fff4ff
 8011594:	40011000 	.word	0x40011000
 8011598:	58024400 	.word	0x58024400
 801159c:	40004400 	.word	0x40004400
 80115a0:	40004800 	.word	0x40004800
 80115a4:	40004c00 	.word	0x40004c00
 80115a8:	40005000 	.word	0x40005000
 80115ac:	2320      	movs	r3, #32
 80115ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115b2:	e22c      	b.n	8011a0e <UART_SetConfig+0x7ae>
 80115b4:	2340      	movs	r3, #64	; 0x40
 80115b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115ba:	e228      	b.n	8011a0e <UART_SetConfig+0x7ae>
 80115bc:	2380      	movs	r3, #128	; 0x80
 80115be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115c2:	e224      	b.n	8011a0e <UART_SetConfig+0x7ae>
 80115c4:	697b      	ldr	r3, [r7, #20]
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	4ab1      	ldr	r2, [pc, #708]	; (8011890 <UART_SetConfig+0x630>)
 80115ca:	4293      	cmp	r3, r2
 80115cc:	d176      	bne.n	80116bc <UART_SetConfig+0x45c>
 80115ce:	4bb1      	ldr	r3, [pc, #708]	; (8011894 <UART_SetConfig+0x634>)
 80115d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80115d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80115d6:	2b28      	cmp	r3, #40	; 0x28
 80115d8:	d86c      	bhi.n	80116b4 <UART_SetConfig+0x454>
 80115da:	a201      	add	r2, pc, #4	; (adr r2, 80115e0 <UART_SetConfig+0x380>)
 80115dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115e0:	08011685 	.word	0x08011685
 80115e4:	080116b5 	.word	0x080116b5
 80115e8:	080116b5 	.word	0x080116b5
 80115ec:	080116b5 	.word	0x080116b5
 80115f0:	080116b5 	.word	0x080116b5
 80115f4:	080116b5 	.word	0x080116b5
 80115f8:	080116b5 	.word	0x080116b5
 80115fc:	080116b5 	.word	0x080116b5
 8011600:	0801168d 	.word	0x0801168d
 8011604:	080116b5 	.word	0x080116b5
 8011608:	080116b5 	.word	0x080116b5
 801160c:	080116b5 	.word	0x080116b5
 8011610:	080116b5 	.word	0x080116b5
 8011614:	080116b5 	.word	0x080116b5
 8011618:	080116b5 	.word	0x080116b5
 801161c:	080116b5 	.word	0x080116b5
 8011620:	08011695 	.word	0x08011695
 8011624:	080116b5 	.word	0x080116b5
 8011628:	080116b5 	.word	0x080116b5
 801162c:	080116b5 	.word	0x080116b5
 8011630:	080116b5 	.word	0x080116b5
 8011634:	080116b5 	.word	0x080116b5
 8011638:	080116b5 	.word	0x080116b5
 801163c:	080116b5 	.word	0x080116b5
 8011640:	0801169d 	.word	0x0801169d
 8011644:	080116b5 	.word	0x080116b5
 8011648:	080116b5 	.word	0x080116b5
 801164c:	080116b5 	.word	0x080116b5
 8011650:	080116b5 	.word	0x080116b5
 8011654:	080116b5 	.word	0x080116b5
 8011658:	080116b5 	.word	0x080116b5
 801165c:	080116b5 	.word	0x080116b5
 8011660:	080116a5 	.word	0x080116a5
 8011664:	080116b5 	.word	0x080116b5
 8011668:	080116b5 	.word	0x080116b5
 801166c:	080116b5 	.word	0x080116b5
 8011670:	080116b5 	.word	0x080116b5
 8011674:	080116b5 	.word	0x080116b5
 8011678:	080116b5 	.word	0x080116b5
 801167c:	080116b5 	.word	0x080116b5
 8011680:	080116ad 	.word	0x080116ad
 8011684:	2301      	movs	r3, #1
 8011686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801168a:	e1c0      	b.n	8011a0e <UART_SetConfig+0x7ae>
 801168c:	2304      	movs	r3, #4
 801168e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011692:	e1bc      	b.n	8011a0e <UART_SetConfig+0x7ae>
 8011694:	2308      	movs	r3, #8
 8011696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801169a:	e1b8      	b.n	8011a0e <UART_SetConfig+0x7ae>
 801169c:	2310      	movs	r3, #16
 801169e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116a2:	e1b4      	b.n	8011a0e <UART_SetConfig+0x7ae>
 80116a4:	2320      	movs	r3, #32
 80116a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116aa:	e1b0      	b.n	8011a0e <UART_SetConfig+0x7ae>
 80116ac:	2340      	movs	r3, #64	; 0x40
 80116ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116b2:	e1ac      	b.n	8011a0e <UART_SetConfig+0x7ae>
 80116b4:	2380      	movs	r3, #128	; 0x80
 80116b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116ba:	e1a8      	b.n	8011a0e <UART_SetConfig+0x7ae>
 80116bc:	697b      	ldr	r3, [r7, #20]
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	4a75      	ldr	r2, [pc, #468]	; (8011898 <UART_SetConfig+0x638>)
 80116c2:	4293      	cmp	r3, r2
 80116c4:	d130      	bne.n	8011728 <UART_SetConfig+0x4c8>
 80116c6:	4b73      	ldr	r3, [pc, #460]	; (8011894 <UART_SetConfig+0x634>)
 80116c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80116ca:	f003 0307 	and.w	r3, r3, #7
 80116ce:	2b05      	cmp	r3, #5
 80116d0:	d826      	bhi.n	8011720 <UART_SetConfig+0x4c0>
 80116d2:	a201      	add	r2, pc, #4	; (adr r2, 80116d8 <UART_SetConfig+0x478>)
 80116d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116d8:	080116f1 	.word	0x080116f1
 80116dc:	080116f9 	.word	0x080116f9
 80116e0:	08011701 	.word	0x08011701
 80116e4:	08011709 	.word	0x08011709
 80116e8:	08011711 	.word	0x08011711
 80116ec:	08011719 	.word	0x08011719
 80116f0:	2300      	movs	r3, #0
 80116f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116f6:	e18a      	b.n	8011a0e <UART_SetConfig+0x7ae>
 80116f8:	2304      	movs	r3, #4
 80116fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116fe:	e186      	b.n	8011a0e <UART_SetConfig+0x7ae>
 8011700:	2308      	movs	r3, #8
 8011702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011706:	e182      	b.n	8011a0e <UART_SetConfig+0x7ae>
 8011708:	2310      	movs	r3, #16
 801170a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801170e:	e17e      	b.n	8011a0e <UART_SetConfig+0x7ae>
 8011710:	2320      	movs	r3, #32
 8011712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011716:	e17a      	b.n	8011a0e <UART_SetConfig+0x7ae>
 8011718:	2340      	movs	r3, #64	; 0x40
 801171a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801171e:	e176      	b.n	8011a0e <UART_SetConfig+0x7ae>
 8011720:	2380      	movs	r3, #128	; 0x80
 8011722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011726:	e172      	b.n	8011a0e <UART_SetConfig+0x7ae>
 8011728:	697b      	ldr	r3, [r7, #20]
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	4a5b      	ldr	r2, [pc, #364]	; (801189c <UART_SetConfig+0x63c>)
 801172e:	4293      	cmp	r3, r2
 8011730:	d130      	bne.n	8011794 <UART_SetConfig+0x534>
 8011732:	4b58      	ldr	r3, [pc, #352]	; (8011894 <UART_SetConfig+0x634>)
 8011734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011736:	f003 0307 	and.w	r3, r3, #7
 801173a:	2b05      	cmp	r3, #5
 801173c:	d826      	bhi.n	801178c <UART_SetConfig+0x52c>
 801173e:	a201      	add	r2, pc, #4	; (adr r2, 8011744 <UART_SetConfig+0x4e4>)
 8011740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011744:	0801175d 	.word	0x0801175d
 8011748:	08011765 	.word	0x08011765
 801174c:	0801176d 	.word	0x0801176d
 8011750:	08011775 	.word	0x08011775
 8011754:	0801177d 	.word	0x0801177d
 8011758:	08011785 	.word	0x08011785
 801175c:	2300      	movs	r3, #0
 801175e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011762:	e154      	b.n	8011a0e <UART_SetConfig+0x7ae>
 8011764:	2304      	movs	r3, #4
 8011766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801176a:	e150      	b.n	8011a0e <UART_SetConfig+0x7ae>
 801176c:	2308      	movs	r3, #8
 801176e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011772:	e14c      	b.n	8011a0e <UART_SetConfig+0x7ae>
 8011774:	2310      	movs	r3, #16
 8011776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801177a:	e148      	b.n	8011a0e <UART_SetConfig+0x7ae>
 801177c:	2320      	movs	r3, #32
 801177e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011782:	e144      	b.n	8011a0e <UART_SetConfig+0x7ae>
 8011784:	2340      	movs	r3, #64	; 0x40
 8011786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801178a:	e140      	b.n	8011a0e <UART_SetConfig+0x7ae>
 801178c:	2380      	movs	r3, #128	; 0x80
 801178e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011792:	e13c      	b.n	8011a0e <UART_SetConfig+0x7ae>
 8011794:	697b      	ldr	r3, [r7, #20]
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	4a41      	ldr	r2, [pc, #260]	; (80118a0 <UART_SetConfig+0x640>)
 801179a:	4293      	cmp	r3, r2
 801179c:	f040 8082 	bne.w	80118a4 <UART_SetConfig+0x644>
 80117a0:	4b3c      	ldr	r3, [pc, #240]	; (8011894 <UART_SetConfig+0x634>)
 80117a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80117a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80117a8:	2b28      	cmp	r3, #40	; 0x28
 80117aa:	d86d      	bhi.n	8011888 <UART_SetConfig+0x628>
 80117ac:	a201      	add	r2, pc, #4	; (adr r2, 80117b4 <UART_SetConfig+0x554>)
 80117ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117b2:	bf00      	nop
 80117b4:	08011859 	.word	0x08011859
 80117b8:	08011889 	.word	0x08011889
 80117bc:	08011889 	.word	0x08011889
 80117c0:	08011889 	.word	0x08011889
 80117c4:	08011889 	.word	0x08011889
 80117c8:	08011889 	.word	0x08011889
 80117cc:	08011889 	.word	0x08011889
 80117d0:	08011889 	.word	0x08011889
 80117d4:	08011861 	.word	0x08011861
 80117d8:	08011889 	.word	0x08011889
 80117dc:	08011889 	.word	0x08011889
 80117e0:	08011889 	.word	0x08011889
 80117e4:	08011889 	.word	0x08011889
 80117e8:	08011889 	.word	0x08011889
 80117ec:	08011889 	.word	0x08011889
 80117f0:	08011889 	.word	0x08011889
 80117f4:	08011869 	.word	0x08011869
 80117f8:	08011889 	.word	0x08011889
 80117fc:	08011889 	.word	0x08011889
 8011800:	08011889 	.word	0x08011889
 8011804:	08011889 	.word	0x08011889
 8011808:	08011889 	.word	0x08011889
 801180c:	08011889 	.word	0x08011889
 8011810:	08011889 	.word	0x08011889
 8011814:	08011871 	.word	0x08011871
 8011818:	08011889 	.word	0x08011889
 801181c:	08011889 	.word	0x08011889
 8011820:	08011889 	.word	0x08011889
 8011824:	08011889 	.word	0x08011889
 8011828:	08011889 	.word	0x08011889
 801182c:	08011889 	.word	0x08011889
 8011830:	08011889 	.word	0x08011889
 8011834:	08011879 	.word	0x08011879
 8011838:	08011889 	.word	0x08011889
 801183c:	08011889 	.word	0x08011889
 8011840:	08011889 	.word	0x08011889
 8011844:	08011889 	.word	0x08011889
 8011848:	08011889 	.word	0x08011889
 801184c:	08011889 	.word	0x08011889
 8011850:	08011889 	.word	0x08011889
 8011854:	08011881 	.word	0x08011881
 8011858:	2301      	movs	r3, #1
 801185a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801185e:	e0d6      	b.n	8011a0e <UART_SetConfig+0x7ae>
 8011860:	2304      	movs	r3, #4
 8011862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011866:	e0d2      	b.n	8011a0e <UART_SetConfig+0x7ae>
 8011868:	2308      	movs	r3, #8
 801186a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801186e:	e0ce      	b.n	8011a0e <UART_SetConfig+0x7ae>
 8011870:	2310      	movs	r3, #16
 8011872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011876:	e0ca      	b.n	8011a0e <UART_SetConfig+0x7ae>
 8011878:	2320      	movs	r3, #32
 801187a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801187e:	e0c6      	b.n	8011a0e <UART_SetConfig+0x7ae>
 8011880:	2340      	movs	r3, #64	; 0x40
 8011882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011886:	e0c2      	b.n	8011a0e <UART_SetConfig+0x7ae>
 8011888:	2380      	movs	r3, #128	; 0x80
 801188a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801188e:	e0be      	b.n	8011a0e <UART_SetConfig+0x7ae>
 8011890:	40011400 	.word	0x40011400
 8011894:	58024400 	.word	0x58024400
 8011898:	40007800 	.word	0x40007800
 801189c:	40007c00 	.word	0x40007c00
 80118a0:	40011800 	.word	0x40011800
 80118a4:	697b      	ldr	r3, [r7, #20]
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	4aad      	ldr	r2, [pc, #692]	; (8011b60 <UART_SetConfig+0x900>)
 80118aa:	4293      	cmp	r3, r2
 80118ac:	d176      	bne.n	801199c <UART_SetConfig+0x73c>
 80118ae:	4bad      	ldr	r3, [pc, #692]	; (8011b64 <UART_SetConfig+0x904>)
 80118b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80118b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80118b6:	2b28      	cmp	r3, #40	; 0x28
 80118b8:	d86c      	bhi.n	8011994 <UART_SetConfig+0x734>
 80118ba:	a201      	add	r2, pc, #4	; (adr r2, 80118c0 <UART_SetConfig+0x660>)
 80118bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118c0:	08011965 	.word	0x08011965
 80118c4:	08011995 	.word	0x08011995
 80118c8:	08011995 	.word	0x08011995
 80118cc:	08011995 	.word	0x08011995
 80118d0:	08011995 	.word	0x08011995
 80118d4:	08011995 	.word	0x08011995
 80118d8:	08011995 	.word	0x08011995
 80118dc:	08011995 	.word	0x08011995
 80118e0:	0801196d 	.word	0x0801196d
 80118e4:	08011995 	.word	0x08011995
 80118e8:	08011995 	.word	0x08011995
 80118ec:	08011995 	.word	0x08011995
 80118f0:	08011995 	.word	0x08011995
 80118f4:	08011995 	.word	0x08011995
 80118f8:	08011995 	.word	0x08011995
 80118fc:	08011995 	.word	0x08011995
 8011900:	08011975 	.word	0x08011975
 8011904:	08011995 	.word	0x08011995
 8011908:	08011995 	.word	0x08011995
 801190c:	08011995 	.word	0x08011995
 8011910:	08011995 	.word	0x08011995
 8011914:	08011995 	.word	0x08011995
 8011918:	08011995 	.word	0x08011995
 801191c:	08011995 	.word	0x08011995
 8011920:	0801197d 	.word	0x0801197d
 8011924:	08011995 	.word	0x08011995
 8011928:	08011995 	.word	0x08011995
 801192c:	08011995 	.word	0x08011995
 8011930:	08011995 	.word	0x08011995
 8011934:	08011995 	.word	0x08011995
 8011938:	08011995 	.word	0x08011995
 801193c:	08011995 	.word	0x08011995
 8011940:	08011985 	.word	0x08011985
 8011944:	08011995 	.word	0x08011995
 8011948:	08011995 	.word	0x08011995
 801194c:	08011995 	.word	0x08011995
 8011950:	08011995 	.word	0x08011995
 8011954:	08011995 	.word	0x08011995
 8011958:	08011995 	.word	0x08011995
 801195c:	08011995 	.word	0x08011995
 8011960:	0801198d 	.word	0x0801198d
 8011964:	2301      	movs	r3, #1
 8011966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801196a:	e050      	b.n	8011a0e <UART_SetConfig+0x7ae>
 801196c:	2304      	movs	r3, #4
 801196e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011972:	e04c      	b.n	8011a0e <UART_SetConfig+0x7ae>
 8011974:	2308      	movs	r3, #8
 8011976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801197a:	e048      	b.n	8011a0e <UART_SetConfig+0x7ae>
 801197c:	2310      	movs	r3, #16
 801197e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011982:	e044      	b.n	8011a0e <UART_SetConfig+0x7ae>
 8011984:	2320      	movs	r3, #32
 8011986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801198a:	e040      	b.n	8011a0e <UART_SetConfig+0x7ae>
 801198c:	2340      	movs	r3, #64	; 0x40
 801198e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011992:	e03c      	b.n	8011a0e <UART_SetConfig+0x7ae>
 8011994:	2380      	movs	r3, #128	; 0x80
 8011996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801199a:	e038      	b.n	8011a0e <UART_SetConfig+0x7ae>
 801199c:	697b      	ldr	r3, [r7, #20]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	4a71      	ldr	r2, [pc, #452]	; (8011b68 <UART_SetConfig+0x908>)
 80119a2:	4293      	cmp	r3, r2
 80119a4:	d130      	bne.n	8011a08 <UART_SetConfig+0x7a8>
 80119a6:	4b6f      	ldr	r3, [pc, #444]	; (8011b64 <UART_SetConfig+0x904>)
 80119a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80119aa:	f003 0307 	and.w	r3, r3, #7
 80119ae:	2b05      	cmp	r3, #5
 80119b0:	d826      	bhi.n	8011a00 <UART_SetConfig+0x7a0>
 80119b2:	a201      	add	r2, pc, #4	; (adr r2, 80119b8 <UART_SetConfig+0x758>)
 80119b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119b8:	080119d1 	.word	0x080119d1
 80119bc:	080119d9 	.word	0x080119d9
 80119c0:	080119e1 	.word	0x080119e1
 80119c4:	080119e9 	.word	0x080119e9
 80119c8:	080119f1 	.word	0x080119f1
 80119cc:	080119f9 	.word	0x080119f9
 80119d0:	2302      	movs	r3, #2
 80119d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80119d6:	e01a      	b.n	8011a0e <UART_SetConfig+0x7ae>
 80119d8:	2304      	movs	r3, #4
 80119da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80119de:	e016      	b.n	8011a0e <UART_SetConfig+0x7ae>
 80119e0:	2308      	movs	r3, #8
 80119e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80119e6:	e012      	b.n	8011a0e <UART_SetConfig+0x7ae>
 80119e8:	2310      	movs	r3, #16
 80119ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80119ee:	e00e      	b.n	8011a0e <UART_SetConfig+0x7ae>
 80119f0:	2320      	movs	r3, #32
 80119f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80119f6:	e00a      	b.n	8011a0e <UART_SetConfig+0x7ae>
 80119f8:	2340      	movs	r3, #64	; 0x40
 80119fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80119fe:	e006      	b.n	8011a0e <UART_SetConfig+0x7ae>
 8011a00:	2380      	movs	r3, #128	; 0x80
 8011a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a06:	e002      	b.n	8011a0e <UART_SetConfig+0x7ae>
 8011a08:	2380      	movs	r3, #128	; 0x80
 8011a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011a0e:	697b      	ldr	r3, [r7, #20]
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	4a55      	ldr	r2, [pc, #340]	; (8011b68 <UART_SetConfig+0x908>)
 8011a14:	4293      	cmp	r3, r2
 8011a16:	f040 80f8 	bne.w	8011c0a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011a1a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011a1e:	2b20      	cmp	r3, #32
 8011a20:	dc46      	bgt.n	8011ab0 <UART_SetConfig+0x850>
 8011a22:	2b02      	cmp	r3, #2
 8011a24:	db75      	blt.n	8011b12 <UART_SetConfig+0x8b2>
 8011a26:	3b02      	subs	r3, #2
 8011a28:	2b1e      	cmp	r3, #30
 8011a2a:	d872      	bhi.n	8011b12 <UART_SetConfig+0x8b2>
 8011a2c:	a201      	add	r2, pc, #4	; (adr r2, 8011a34 <UART_SetConfig+0x7d4>)
 8011a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a32:	bf00      	nop
 8011a34:	08011ab7 	.word	0x08011ab7
 8011a38:	08011b13 	.word	0x08011b13
 8011a3c:	08011abf 	.word	0x08011abf
 8011a40:	08011b13 	.word	0x08011b13
 8011a44:	08011b13 	.word	0x08011b13
 8011a48:	08011b13 	.word	0x08011b13
 8011a4c:	08011acf 	.word	0x08011acf
 8011a50:	08011b13 	.word	0x08011b13
 8011a54:	08011b13 	.word	0x08011b13
 8011a58:	08011b13 	.word	0x08011b13
 8011a5c:	08011b13 	.word	0x08011b13
 8011a60:	08011b13 	.word	0x08011b13
 8011a64:	08011b13 	.word	0x08011b13
 8011a68:	08011b13 	.word	0x08011b13
 8011a6c:	08011adf 	.word	0x08011adf
 8011a70:	08011b13 	.word	0x08011b13
 8011a74:	08011b13 	.word	0x08011b13
 8011a78:	08011b13 	.word	0x08011b13
 8011a7c:	08011b13 	.word	0x08011b13
 8011a80:	08011b13 	.word	0x08011b13
 8011a84:	08011b13 	.word	0x08011b13
 8011a88:	08011b13 	.word	0x08011b13
 8011a8c:	08011b13 	.word	0x08011b13
 8011a90:	08011b13 	.word	0x08011b13
 8011a94:	08011b13 	.word	0x08011b13
 8011a98:	08011b13 	.word	0x08011b13
 8011a9c:	08011b13 	.word	0x08011b13
 8011aa0:	08011b13 	.word	0x08011b13
 8011aa4:	08011b13 	.word	0x08011b13
 8011aa8:	08011b13 	.word	0x08011b13
 8011aac:	08011b05 	.word	0x08011b05
 8011ab0:	2b40      	cmp	r3, #64	; 0x40
 8011ab2:	d02a      	beq.n	8011b0a <UART_SetConfig+0x8aa>
 8011ab4:	e02d      	b.n	8011b12 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8011ab6:	f7fa febd 	bl	800c834 <HAL_RCCEx_GetD3PCLK1Freq>
 8011aba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011abc:	e02f      	b.n	8011b1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011ac2:	4618      	mov	r0, r3
 8011ac4:	f7fa fecc 	bl	800c860 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011acc:	e027      	b.n	8011b1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011ace:	f107 0318 	add.w	r3, r7, #24
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	f7fb f818 	bl	800cb08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011ad8:	69fb      	ldr	r3, [r7, #28]
 8011ada:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011adc:	e01f      	b.n	8011b1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011ade:	4b21      	ldr	r3, [pc, #132]	; (8011b64 <UART_SetConfig+0x904>)
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	f003 0320 	and.w	r3, r3, #32
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d009      	beq.n	8011afe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011aea:	4b1e      	ldr	r3, [pc, #120]	; (8011b64 <UART_SetConfig+0x904>)
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	08db      	lsrs	r3, r3, #3
 8011af0:	f003 0303 	and.w	r3, r3, #3
 8011af4:	4a1d      	ldr	r2, [pc, #116]	; (8011b6c <UART_SetConfig+0x90c>)
 8011af6:	fa22 f303 	lsr.w	r3, r2, r3
 8011afa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011afc:	e00f      	b.n	8011b1e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8011afe:	4b1b      	ldr	r3, [pc, #108]	; (8011b6c <UART_SetConfig+0x90c>)
 8011b00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b02:	e00c      	b.n	8011b1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011b04:	4b1a      	ldr	r3, [pc, #104]	; (8011b70 <UART_SetConfig+0x910>)
 8011b06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b08:	e009      	b.n	8011b1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011b0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b10:	e005      	b.n	8011b1e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011b12:	2300      	movs	r3, #0
 8011b14:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011b16:	2301      	movs	r3, #1
 8011b18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011b1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	f000 81ee 	beq.w	8011f02 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011b26:	697b      	ldr	r3, [r7, #20]
 8011b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b2a:	4a12      	ldr	r2, [pc, #72]	; (8011b74 <UART_SetConfig+0x914>)
 8011b2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011b30:	461a      	mov	r2, r3
 8011b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b34:	fbb3 f3f2 	udiv	r3, r3, r2
 8011b38:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011b3a:	697b      	ldr	r3, [r7, #20]
 8011b3c:	685a      	ldr	r2, [r3, #4]
 8011b3e:	4613      	mov	r3, r2
 8011b40:	005b      	lsls	r3, r3, #1
 8011b42:	4413      	add	r3, r2
 8011b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b46:	429a      	cmp	r2, r3
 8011b48:	d305      	bcc.n	8011b56 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011b4a:	697b      	ldr	r3, [r7, #20]
 8011b4c:	685b      	ldr	r3, [r3, #4]
 8011b4e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011b50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b52:	429a      	cmp	r2, r3
 8011b54:	d910      	bls.n	8011b78 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8011b56:	2301      	movs	r3, #1
 8011b58:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011b5c:	e1d1      	b.n	8011f02 <UART_SetConfig+0xca2>
 8011b5e:	bf00      	nop
 8011b60:	40011c00 	.word	0x40011c00
 8011b64:	58024400 	.word	0x58024400
 8011b68:	58000c00 	.word	0x58000c00
 8011b6c:	03d09000 	.word	0x03d09000
 8011b70:	003d0900 	.word	0x003d0900
 8011b74:	08018ca4 	.word	0x08018ca4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b7a:	2200      	movs	r2, #0
 8011b7c:	60bb      	str	r3, [r7, #8]
 8011b7e:	60fa      	str	r2, [r7, #12]
 8011b80:	697b      	ldr	r3, [r7, #20]
 8011b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b84:	4ac0      	ldr	r2, [pc, #768]	; (8011e88 <UART_SetConfig+0xc28>)
 8011b86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011b8a:	b29b      	uxth	r3, r3
 8011b8c:	2200      	movs	r2, #0
 8011b8e:	603b      	str	r3, [r7, #0]
 8011b90:	607a      	str	r2, [r7, #4]
 8011b92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011b96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011b9a:	f7ee fc21 	bl	80003e0 <__aeabi_uldivmod>
 8011b9e:	4602      	mov	r2, r0
 8011ba0:	460b      	mov	r3, r1
 8011ba2:	4610      	mov	r0, r2
 8011ba4:	4619      	mov	r1, r3
 8011ba6:	f04f 0200 	mov.w	r2, #0
 8011baa:	f04f 0300 	mov.w	r3, #0
 8011bae:	020b      	lsls	r3, r1, #8
 8011bb0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011bb4:	0202      	lsls	r2, r0, #8
 8011bb6:	6979      	ldr	r1, [r7, #20]
 8011bb8:	6849      	ldr	r1, [r1, #4]
 8011bba:	0849      	lsrs	r1, r1, #1
 8011bbc:	2000      	movs	r0, #0
 8011bbe:	460c      	mov	r4, r1
 8011bc0:	4605      	mov	r5, r0
 8011bc2:	eb12 0804 	adds.w	r8, r2, r4
 8011bc6:	eb43 0905 	adc.w	r9, r3, r5
 8011bca:	697b      	ldr	r3, [r7, #20]
 8011bcc:	685b      	ldr	r3, [r3, #4]
 8011bce:	2200      	movs	r2, #0
 8011bd0:	469a      	mov	sl, r3
 8011bd2:	4693      	mov	fp, r2
 8011bd4:	4652      	mov	r2, sl
 8011bd6:	465b      	mov	r3, fp
 8011bd8:	4640      	mov	r0, r8
 8011bda:	4649      	mov	r1, r9
 8011bdc:	f7ee fc00 	bl	80003e0 <__aeabi_uldivmod>
 8011be0:	4602      	mov	r2, r0
 8011be2:	460b      	mov	r3, r1
 8011be4:	4613      	mov	r3, r2
 8011be6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011bee:	d308      	bcc.n	8011c02 <UART_SetConfig+0x9a2>
 8011bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011bf6:	d204      	bcs.n	8011c02 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8011bf8:	697b      	ldr	r3, [r7, #20]
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011bfe:	60da      	str	r2, [r3, #12]
 8011c00:	e17f      	b.n	8011f02 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8011c02:	2301      	movs	r3, #1
 8011c04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011c08:	e17b      	b.n	8011f02 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011c0a:	697b      	ldr	r3, [r7, #20]
 8011c0c:	69db      	ldr	r3, [r3, #28]
 8011c0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011c12:	f040 80bd 	bne.w	8011d90 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8011c16:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011c1a:	2b20      	cmp	r3, #32
 8011c1c:	dc48      	bgt.n	8011cb0 <UART_SetConfig+0xa50>
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	db7b      	blt.n	8011d1a <UART_SetConfig+0xaba>
 8011c22:	2b20      	cmp	r3, #32
 8011c24:	d879      	bhi.n	8011d1a <UART_SetConfig+0xaba>
 8011c26:	a201      	add	r2, pc, #4	; (adr r2, 8011c2c <UART_SetConfig+0x9cc>)
 8011c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c2c:	08011cb7 	.word	0x08011cb7
 8011c30:	08011cbf 	.word	0x08011cbf
 8011c34:	08011d1b 	.word	0x08011d1b
 8011c38:	08011d1b 	.word	0x08011d1b
 8011c3c:	08011cc7 	.word	0x08011cc7
 8011c40:	08011d1b 	.word	0x08011d1b
 8011c44:	08011d1b 	.word	0x08011d1b
 8011c48:	08011d1b 	.word	0x08011d1b
 8011c4c:	08011cd7 	.word	0x08011cd7
 8011c50:	08011d1b 	.word	0x08011d1b
 8011c54:	08011d1b 	.word	0x08011d1b
 8011c58:	08011d1b 	.word	0x08011d1b
 8011c5c:	08011d1b 	.word	0x08011d1b
 8011c60:	08011d1b 	.word	0x08011d1b
 8011c64:	08011d1b 	.word	0x08011d1b
 8011c68:	08011d1b 	.word	0x08011d1b
 8011c6c:	08011ce7 	.word	0x08011ce7
 8011c70:	08011d1b 	.word	0x08011d1b
 8011c74:	08011d1b 	.word	0x08011d1b
 8011c78:	08011d1b 	.word	0x08011d1b
 8011c7c:	08011d1b 	.word	0x08011d1b
 8011c80:	08011d1b 	.word	0x08011d1b
 8011c84:	08011d1b 	.word	0x08011d1b
 8011c88:	08011d1b 	.word	0x08011d1b
 8011c8c:	08011d1b 	.word	0x08011d1b
 8011c90:	08011d1b 	.word	0x08011d1b
 8011c94:	08011d1b 	.word	0x08011d1b
 8011c98:	08011d1b 	.word	0x08011d1b
 8011c9c:	08011d1b 	.word	0x08011d1b
 8011ca0:	08011d1b 	.word	0x08011d1b
 8011ca4:	08011d1b 	.word	0x08011d1b
 8011ca8:	08011d1b 	.word	0x08011d1b
 8011cac:	08011d0d 	.word	0x08011d0d
 8011cb0:	2b40      	cmp	r3, #64	; 0x40
 8011cb2:	d02e      	beq.n	8011d12 <UART_SetConfig+0xab2>
 8011cb4:	e031      	b.n	8011d1a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011cb6:	f7f8 ff1f 	bl	800aaf8 <HAL_RCC_GetPCLK1Freq>
 8011cba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011cbc:	e033      	b.n	8011d26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011cbe:	f7f8 ff31 	bl	800ab24 <HAL_RCC_GetPCLK2Freq>
 8011cc2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011cc4:	e02f      	b.n	8011d26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011cc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011cca:	4618      	mov	r0, r3
 8011ccc:	f7fa fdc8 	bl	800c860 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011cd4:	e027      	b.n	8011d26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011cd6:	f107 0318 	add.w	r3, r7, #24
 8011cda:	4618      	mov	r0, r3
 8011cdc:	f7fa ff14 	bl	800cb08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011ce0:	69fb      	ldr	r3, [r7, #28]
 8011ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011ce4:	e01f      	b.n	8011d26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011ce6:	4b69      	ldr	r3, [pc, #420]	; (8011e8c <UART_SetConfig+0xc2c>)
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	f003 0320 	and.w	r3, r3, #32
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d009      	beq.n	8011d06 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011cf2:	4b66      	ldr	r3, [pc, #408]	; (8011e8c <UART_SetConfig+0xc2c>)
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	08db      	lsrs	r3, r3, #3
 8011cf8:	f003 0303 	and.w	r3, r3, #3
 8011cfc:	4a64      	ldr	r2, [pc, #400]	; (8011e90 <UART_SetConfig+0xc30>)
 8011cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8011d02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011d04:	e00f      	b.n	8011d26 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8011d06:	4b62      	ldr	r3, [pc, #392]	; (8011e90 <UART_SetConfig+0xc30>)
 8011d08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d0a:	e00c      	b.n	8011d26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011d0c:	4b61      	ldr	r3, [pc, #388]	; (8011e94 <UART_SetConfig+0xc34>)
 8011d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d10:	e009      	b.n	8011d26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011d12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011d16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d18:	e005      	b.n	8011d26 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011d1e:	2301      	movs	r3, #1
 8011d20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011d24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	f000 80ea 	beq.w	8011f02 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011d2e:	697b      	ldr	r3, [r7, #20]
 8011d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d32:	4a55      	ldr	r2, [pc, #340]	; (8011e88 <UART_SetConfig+0xc28>)
 8011d34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011d38:	461a      	mov	r2, r3
 8011d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011d40:	005a      	lsls	r2, r3, #1
 8011d42:	697b      	ldr	r3, [r7, #20]
 8011d44:	685b      	ldr	r3, [r3, #4]
 8011d46:	085b      	lsrs	r3, r3, #1
 8011d48:	441a      	add	r2, r3
 8011d4a:	697b      	ldr	r3, [r7, #20]
 8011d4c:	685b      	ldr	r3, [r3, #4]
 8011d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011d52:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d56:	2b0f      	cmp	r3, #15
 8011d58:	d916      	bls.n	8011d88 <UART_SetConfig+0xb28>
 8011d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011d60:	d212      	bcs.n	8011d88 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d64:	b29b      	uxth	r3, r3
 8011d66:	f023 030f 	bic.w	r3, r3, #15
 8011d6a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d6e:	085b      	lsrs	r3, r3, #1
 8011d70:	b29b      	uxth	r3, r3
 8011d72:	f003 0307 	and.w	r3, r3, #7
 8011d76:	b29a      	uxth	r2, r3
 8011d78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011d7a:	4313      	orrs	r3, r2
 8011d7c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011d7e:	697b      	ldr	r3, [r7, #20]
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011d84:	60da      	str	r2, [r3, #12]
 8011d86:	e0bc      	b.n	8011f02 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011d88:	2301      	movs	r3, #1
 8011d8a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011d8e:	e0b8      	b.n	8011f02 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011d90:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011d94:	2b20      	cmp	r3, #32
 8011d96:	dc4b      	bgt.n	8011e30 <UART_SetConfig+0xbd0>
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	f2c0 8087 	blt.w	8011eac <UART_SetConfig+0xc4c>
 8011d9e:	2b20      	cmp	r3, #32
 8011da0:	f200 8084 	bhi.w	8011eac <UART_SetConfig+0xc4c>
 8011da4:	a201      	add	r2, pc, #4	; (adr r2, 8011dac <UART_SetConfig+0xb4c>)
 8011da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011daa:	bf00      	nop
 8011dac:	08011e37 	.word	0x08011e37
 8011db0:	08011e3f 	.word	0x08011e3f
 8011db4:	08011ead 	.word	0x08011ead
 8011db8:	08011ead 	.word	0x08011ead
 8011dbc:	08011e47 	.word	0x08011e47
 8011dc0:	08011ead 	.word	0x08011ead
 8011dc4:	08011ead 	.word	0x08011ead
 8011dc8:	08011ead 	.word	0x08011ead
 8011dcc:	08011e57 	.word	0x08011e57
 8011dd0:	08011ead 	.word	0x08011ead
 8011dd4:	08011ead 	.word	0x08011ead
 8011dd8:	08011ead 	.word	0x08011ead
 8011ddc:	08011ead 	.word	0x08011ead
 8011de0:	08011ead 	.word	0x08011ead
 8011de4:	08011ead 	.word	0x08011ead
 8011de8:	08011ead 	.word	0x08011ead
 8011dec:	08011e67 	.word	0x08011e67
 8011df0:	08011ead 	.word	0x08011ead
 8011df4:	08011ead 	.word	0x08011ead
 8011df8:	08011ead 	.word	0x08011ead
 8011dfc:	08011ead 	.word	0x08011ead
 8011e00:	08011ead 	.word	0x08011ead
 8011e04:	08011ead 	.word	0x08011ead
 8011e08:	08011ead 	.word	0x08011ead
 8011e0c:	08011ead 	.word	0x08011ead
 8011e10:	08011ead 	.word	0x08011ead
 8011e14:	08011ead 	.word	0x08011ead
 8011e18:	08011ead 	.word	0x08011ead
 8011e1c:	08011ead 	.word	0x08011ead
 8011e20:	08011ead 	.word	0x08011ead
 8011e24:	08011ead 	.word	0x08011ead
 8011e28:	08011ead 	.word	0x08011ead
 8011e2c:	08011e9f 	.word	0x08011e9f
 8011e30:	2b40      	cmp	r3, #64	; 0x40
 8011e32:	d037      	beq.n	8011ea4 <UART_SetConfig+0xc44>
 8011e34:	e03a      	b.n	8011eac <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011e36:	f7f8 fe5f 	bl	800aaf8 <HAL_RCC_GetPCLK1Freq>
 8011e3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011e3c:	e03c      	b.n	8011eb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011e3e:	f7f8 fe71 	bl	800ab24 <HAL_RCC_GetPCLK2Freq>
 8011e42:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011e44:	e038      	b.n	8011eb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	f7fa fd08 	bl	800c860 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011e54:	e030      	b.n	8011eb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011e56:	f107 0318 	add.w	r3, r7, #24
 8011e5a:	4618      	mov	r0, r3
 8011e5c:	f7fa fe54 	bl	800cb08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011e60:	69fb      	ldr	r3, [r7, #28]
 8011e62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011e64:	e028      	b.n	8011eb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011e66:	4b09      	ldr	r3, [pc, #36]	; (8011e8c <UART_SetConfig+0xc2c>)
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	f003 0320 	and.w	r3, r3, #32
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d012      	beq.n	8011e98 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011e72:	4b06      	ldr	r3, [pc, #24]	; (8011e8c <UART_SetConfig+0xc2c>)
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	08db      	lsrs	r3, r3, #3
 8011e78:	f003 0303 	and.w	r3, r3, #3
 8011e7c:	4a04      	ldr	r2, [pc, #16]	; (8011e90 <UART_SetConfig+0xc30>)
 8011e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8011e82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011e84:	e018      	b.n	8011eb8 <UART_SetConfig+0xc58>
 8011e86:	bf00      	nop
 8011e88:	08018ca4 	.word	0x08018ca4
 8011e8c:	58024400 	.word	0x58024400
 8011e90:	03d09000 	.word	0x03d09000
 8011e94:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8011e98:	4b24      	ldr	r3, [pc, #144]	; (8011f2c <UART_SetConfig+0xccc>)
 8011e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011e9c:	e00c      	b.n	8011eb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011e9e:	4b24      	ldr	r3, [pc, #144]	; (8011f30 <UART_SetConfig+0xcd0>)
 8011ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011ea2:	e009      	b.n	8011eb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011ea4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011eaa:	e005      	b.n	8011eb8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8011eac:	2300      	movs	r3, #0
 8011eae:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011eb0:	2301      	movs	r3, #1
 8011eb2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011eb6:	bf00      	nop
    }

    if (pclk != 0U)
 8011eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d021      	beq.n	8011f02 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011ebe:	697b      	ldr	r3, [r7, #20]
 8011ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ec2:	4a1c      	ldr	r2, [pc, #112]	; (8011f34 <UART_SetConfig+0xcd4>)
 8011ec4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011ec8:	461a      	mov	r2, r3
 8011eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ecc:	fbb3 f2f2 	udiv	r2, r3, r2
 8011ed0:	697b      	ldr	r3, [r7, #20]
 8011ed2:	685b      	ldr	r3, [r3, #4]
 8011ed4:	085b      	lsrs	r3, r3, #1
 8011ed6:	441a      	add	r2, r3
 8011ed8:	697b      	ldr	r3, [r7, #20]
 8011eda:	685b      	ldr	r3, [r3, #4]
 8011edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8011ee0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ee4:	2b0f      	cmp	r3, #15
 8011ee6:	d909      	bls.n	8011efc <UART_SetConfig+0xc9c>
 8011ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011eee:	d205      	bcs.n	8011efc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ef2:	b29a      	uxth	r2, r3
 8011ef4:	697b      	ldr	r3, [r7, #20]
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	60da      	str	r2, [r3, #12]
 8011efa:	e002      	b.n	8011f02 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011efc:	2301      	movs	r3, #1
 8011efe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011f02:	697b      	ldr	r3, [r7, #20]
 8011f04:	2201      	movs	r2, #1
 8011f06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011f0a:	697b      	ldr	r3, [r7, #20]
 8011f0c:	2201      	movs	r2, #1
 8011f0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011f12:	697b      	ldr	r3, [r7, #20]
 8011f14:	2200      	movs	r2, #0
 8011f16:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011f18:	697b      	ldr	r3, [r7, #20]
 8011f1a:	2200      	movs	r2, #0
 8011f1c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011f1e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011f22:	4618      	mov	r0, r3
 8011f24:	3748      	adds	r7, #72	; 0x48
 8011f26:	46bd      	mov	sp, r7
 8011f28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011f2c:	03d09000 	.word	0x03d09000
 8011f30:	003d0900 	.word	0x003d0900
 8011f34:	08018ca4 	.word	0x08018ca4

08011f38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011f38:	b480      	push	{r7}
 8011f3a:	b083      	sub	sp, #12
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f44:	f003 0301 	and.w	r3, r3, #1
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d00a      	beq.n	8011f62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	685b      	ldr	r3, [r3, #4]
 8011f52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	430a      	orrs	r2, r1
 8011f60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f66:	f003 0302 	and.w	r3, r3, #2
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d00a      	beq.n	8011f84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	685b      	ldr	r3, [r3, #4]
 8011f74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	430a      	orrs	r2, r1
 8011f82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f88:	f003 0304 	and.w	r3, r3, #4
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d00a      	beq.n	8011fa6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	685b      	ldr	r3, [r3, #4]
 8011f96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	430a      	orrs	r2, r1
 8011fa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011faa:	f003 0308 	and.w	r3, r3, #8
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d00a      	beq.n	8011fc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	685b      	ldr	r3, [r3, #4]
 8011fb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	430a      	orrs	r2, r1
 8011fc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011fcc:	f003 0310 	and.w	r3, r3, #16
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d00a      	beq.n	8011fea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	689b      	ldr	r3, [r3, #8]
 8011fda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	430a      	orrs	r2, r1
 8011fe8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011fee:	f003 0320 	and.w	r3, r3, #32
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d00a      	beq.n	801200c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	689b      	ldr	r3, [r3, #8]
 8011ffc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	430a      	orrs	r2, r1
 801200a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012014:	2b00      	cmp	r3, #0
 8012016:	d01a      	beq.n	801204e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	685b      	ldr	r3, [r3, #4]
 801201e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	430a      	orrs	r2, r1
 801202c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012032:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012036:	d10a      	bne.n	801204e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	685b      	ldr	r3, [r3, #4]
 801203e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	430a      	orrs	r2, r1
 801204c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012056:	2b00      	cmp	r3, #0
 8012058:	d00a      	beq.n	8012070 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	685b      	ldr	r3, [r3, #4]
 8012060:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	430a      	orrs	r2, r1
 801206e:	605a      	str	r2, [r3, #4]
  }
}
 8012070:	bf00      	nop
 8012072:	370c      	adds	r7, #12
 8012074:	46bd      	mov	sp, r7
 8012076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801207a:	4770      	bx	lr

0801207c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801207c:	b580      	push	{r7, lr}
 801207e:	b098      	sub	sp, #96	; 0x60
 8012080:	af02      	add	r7, sp, #8
 8012082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	2200      	movs	r2, #0
 8012088:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801208c:	f7f1 fe74 	bl	8003d78 <HAL_GetTick>
 8012090:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	f003 0308 	and.w	r3, r3, #8
 801209c:	2b08      	cmp	r3, #8
 801209e:	d12f      	bne.n	8012100 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80120a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80120a4:	9300      	str	r3, [sp, #0]
 80120a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80120a8:	2200      	movs	r2, #0
 80120aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80120ae:	6878      	ldr	r0, [r7, #4]
 80120b0:	f000 f88e 	bl	80121d0 <UART_WaitOnFlagUntilTimeout>
 80120b4:	4603      	mov	r3, r0
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d022      	beq.n	8012100 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120c2:	e853 3f00 	ldrex	r3, [r3]
 80120c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80120c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80120ce:	653b      	str	r3, [r7, #80]	; 0x50
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	461a      	mov	r2, r3
 80120d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120d8:	647b      	str	r3, [r7, #68]	; 0x44
 80120da:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80120de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80120e0:	e841 2300 	strex	r3, r2, [r1]
 80120e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80120e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d1e6      	bne.n	80120ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	2220      	movs	r2, #32
 80120f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	2200      	movs	r2, #0
 80120f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80120fc:	2303      	movs	r3, #3
 80120fe:	e063      	b.n	80121c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	f003 0304 	and.w	r3, r3, #4
 801210a:	2b04      	cmp	r3, #4
 801210c:	d149      	bne.n	80121a2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801210e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012112:	9300      	str	r3, [sp, #0]
 8012114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012116:	2200      	movs	r2, #0
 8012118:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801211c:	6878      	ldr	r0, [r7, #4]
 801211e:	f000 f857 	bl	80121d0 <UART_WaitOnFlagUntilTimeout>
 8012122:	4603      	mov	r3, r0
 8012124:	2b00      	cmp	r3, #0
 8012126:	d03c      	beq.n	80121a2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012130:	e853 3f00 	ldrex	r3, [r3]
 8012134:	623b      	str	r3, [r7, #32]
   return(result);
 8012136:	6a3b      	ldr	r3, [r7, #32]
 8012138:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801213c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	461a      	mov	r2, r3
 8012144:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012146:	633b      	str	r3, [r7, #48]	; 0x30
 8012148:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801214a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801214c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801214e:	e841 2300 	strex	r3, r2, [r1]
 8012152:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012156:	2b00      	cmp	r3, #0
 8012158:	d1e6      	bne.n	8012128 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	3308      	adds	r3, #8
 8012160:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012162:	693b      	ldr	r3, [r7, #16]
 8012164:	e853 3f00 	ldrex	r3, [r3]
 8012168:	60fb      	str	r3, [r7, #12]
   return(result);
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	f023 0301 	bic.w	r3, r3, #1
 8012170:	64bb      	str	r3, [r7, #72]	; 0x48
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	3308      	adds	r3, #8
 8012178:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801217a:	61fa      	str	r2, [r7, #28]
 801217c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801217e:	69b9      	ldr	r1, [r7, #24]
 8012180:	69fa      	ldr	r2, [r7, #28]
 8012182:	e841 2300 	strex	r3, r2, [r1]
 8012186:	617b      	str	r3, [r7, #20]
   return(result);
 8012188:	697b      	ldr	r3, [r7, #20]
 801218a:	2b00      	cmp	r3, #0
 801218c:	d1e5      	bne.n	801215a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	2220      	movs	r2, #32
 8012192:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	2200      	movs	r2, #0
 801219a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801219e:	2303      	movs	r3, #3
 80121a0:	e012      	b.n	80121c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	2220      	movs	r2, #32
 80121a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	2220      	movs	r2, #32
 80121ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	2200      	movs	r2, #0
 80121b6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	2200      	movs	r2, #0
 80121bc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	2200      	movs	r2, #0
 80121c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80121c6:	2300      	movs	r3, #0
}
 80121c8:	4618      	mov	r0, r3
 80121ca:	3758      	adds	r7, #88	; 0x58
 80121cc:	46bd      	mov	sp, r7
 80121ce:	bd80      	pop	{r7, pc}

080121d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80121d0:	b580      	push	{r7, lr}
 80121d2:	b084      	sub	sp, #16
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	60f8      	str	r0, [r7, #12]
 80121d8:	60b9      	str	r1, [r7, #8]
 80121da:	603b      	str	r3, [r7, #0]
 80121dc:	4613      	mov	r3, r2
 80121de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80121e0:	e049      	b.n	8012276 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80121e2:	69bb      	ldr	r3, [r7, #24]
 80121e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121e8:	d045      	beq.n	8012276 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80121ea:	f7f1 fdc5 	bl	8003d78 <HAL_GetTick>
 80121ee:	4602      	mov	r2, r0
 80121f0:	683b      	ldr	r3, [r7, #0]
 80121f2:	1ad3      	subs	r3, r2, r3
 80121f4:	69ba      	ldr	r2, [r7, #24]
 80121f6:	429a      	cmp	r2, r3
 80121f8:	d302      	bcc.n	8012200 <UART_WaitOnFlagUntilTimeout+0x30>
 80121fa:	69bb      	ldr	r3, [r7, #24]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d101      	bne.n	8012204 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8012200:	2303      	movs	r3, #3
 8012202:	e048      	b.n	8012296 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	f003 0304 	and.w	r3, r3, #4
 801220e:	2b00      	cmp	r3, #0
 8012210:	d031      	beq.n	8012276 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	69db      	ldr	r3, [r3, #28]
 8012218:	f003 0308 	and.w	r3, r3, #8
 801221c:	2b08      	cmp	r3, #8
 801221e:	d110      	bne.n	8012242 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	2208      	movs	r2, #8
 8012226:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8012228:	68f8      	ldr	r0, [r7, #12]
 801222a:	f000 f839 	bl	80122a0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	2208      	movs	r2, #8
 8012232:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	2200      	movs	r2, #0
 801223a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 801223e:	2301      	movs	r3, #1
 8012240:	e029      	b.n	8012296 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	69db      	ldr	r3, [r3, #28]
 8012248:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801224c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012250:	d111      	bne.n	8012276 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801225a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801225c:	68f8      	ldr	r0, [r7, #12]
 801225e:	f000 f81f 	bl	80122a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	2220      	movs	r2, #32
 8012266:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	2200      	movs	r2, #0
 801226e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8012272:	2303      	movs	r3, #3
 8012274:	e00f      	b.n	8012296 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	69da      	ldr	r2, [r3, #28]
 801227c:	68bb      	ldr	r3, [r7, #8]
 801227e:	4013      	ands	r3, r2
 8012280:	68ba      	ldr	r2, [r7, #8]
 8012282:	429a      	cmp	r2, r3
 8012284:	bf0c      	ite	eq
 8012286:	2301      	moveq	r3, #1
 8012288:	2300      	movne	r3, #0
 801228a:	b2db      	uxtb	r3, r3
 801228c:	461a      	mov	r2, r3
 801228e:	79fb      	ldrb	r3, [r7, #7]
 8012290:	429a      	cmp	r2, r3
 8012292:	d0a6      	beq.n	80121e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012294:	2300      	movs	r3, #0
}
 8012296:	4618      	mov	r0, r3
 8012298:	3710      	adds	r7, #16
 801229a:	46bd      	mov	sp, r7
 801229c:	bd80      	pop	{r7, pc}
	...

080122a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80122a0:	b480      	push	{r7}
 80122a2:	b095      	sub	sp, #84	; 0x54
 80122a4:	af00      	add	r7, sp, #0
 80122a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122b0:	e853 3f00 	ldrex	r3, [r3]
 80122b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80122b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80122bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	461a      	mov	r2, r3
 80122c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122c6:	643b      	str	r3, [r7, #64]	; 0x40
 80122c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80122cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80122ce:	e841 2300 	strex	r3, r2, [r1]
 80122d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80122d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d1e6      	bne.n	80122a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	3308      	adds	r3, #8
 80122e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122e2:	6a3b      	ldr	r3, [r7, #32]
 80122e4:	e853 3f00 	ldrex	r3, [r3]
 80122e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80122ea:	69fa      	ldr	r2, [r7, #28]
 80122ec:	4b1e      	ldr	r3, [pc, #120]	; (8012368 <UART_EndRxTransfer+0xc8>)
 80122ee:	4013      	ands	r3, r2
 80122f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	3308      	adds	r3, #8
 80122f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80122fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80122fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012300:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012302:	e841 2300 	strex	r3, r2, [r1]
 8012306:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801230a:	2b00      	cmp	r3, #0
 801230c:	d1e5      	bne.n	80122da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012312:	2b01      	cmp	r3, #1
 8012314:	d118      	bne.n	8012348 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	e853 3f00 	ldrex	r3, [r3]
 8012322:	60bb      	str	r3, [r7, #8]
   return(result);
 8012324:	68bb      	ldr	r3, [r7, #8]
 8012326:	f023 0310 	bic.w	r3, r3, #16
 801232a:	647b      	str	r3, [r7, #68]	; 0x44
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	461a      	mov	r2, r3
 8012332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012334:	61bb      	str	r3, [r7, #24]
 8012336:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012338:	6979      	ldr	r1, [r7, #20]
 801233a:	69ba      	ldr	r2, [r7, #24]
 801233c:	e841 2300 	strex	r3, r2, [r1]
 8012340:	613b      	str	r3, [r7, #16]
   return(result);
 8012342:	693b      	ldr	r3, [r7, #16]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d1e6      	bne.n	8012316 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	2220      	movs	r2, #32
 801234c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	2200      	movs	r2, #0
 8012354:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	2200      	movs	r2, #0
 801235a:	675a      	str	r2, [r3, #116]	; 0x74
}
 801235c:	bf00      	nop
 801235e:	3754      	adds	r7, #84	; 0x54
 8012360:	46bd      	mov	sp, r7
 8012362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012366:	4770      	bx	lr
 8012368:	effffffe 	.word	0xeffffffe

0801236c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801236c:	b480      	push	{r7}
 801236e:	b085      	sub	sp, #20
 8012370:	af00      	add	r7, sp, #0
 8012372:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801237a:	2b01      	cmp	r3, #1
 801237c:	d101      	bne.n	8012382 <HAL_UARTEx_DisableFifoMode+0x16>
 801237e:	2302      	movs	r3, #2
 8012380:	e027      	b.n	80123d2 <HAL_UARTEx_DisableFifoMode+0x66>
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	2201      	movs	r2, #1
 8012386:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	2224      	movs	r2, #36	; 0x24
 801238e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	681a      	ldr	r2, [r3, #0]
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	f022 0201 	bic.w	r2, r2, #1
 80123a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80123b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	2200      	movs	r2, #0
 80123b6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	68fa      	ldr	r2, [r7, #12]
 80123be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	2220      	movs	r2, #32
 80123c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	2200      	movs	r2, #0
 80123cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80123d0:	2300      	movs	r3, #0
}
 80123d2:	4618      	mov	r0, r3
 80123d4:	3714      	adds	r7, #20
 80123d6:	46bd      	mov	sp, r7
 80123d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123dc:	4770      	bx	lr

080123de <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80123de:	b580      	push	{r7, lr}
 80123e0:	b084      	sub	sp, #16
 80123e2:	af00      	add	r7, sp, #0
 80123e4:	6078      	str	r0, [r7, #4]
 80123e6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80123ee:	2b01      	cmp	r3, #1
 80123f0:	d101      	bne.n	80123f6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80123f2:	2302      	movs	r3, #2
 80123f4:	e02d      	b.n	8012452 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	2201      	movs	r2, #1
 80123fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	2224      	movs	r2, #36	; 0x24
 8012402:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	681a      	ldr	r2, [r3, #0]
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	f022 0201 	bic.w	r2, r2, #1
 801241c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	689b      	ldr	r3, [r3, #8]
 8012424:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	683a      	ldr	r2, [r7, #0]
 801242e:	430a      	orrs	r2, r1
 8012430:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012432:	6878      	ldr	r0, [r7, #4]
 8012434:	f000 f850 	bl	80124d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	68fa      	ldr	r2, [r7, #12]
 801243e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	2220      	movs	r2, #32
 8012444:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	2200      	movs	r2, #0
 801244c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012450:	2300      	movs	r3, #0
}
 8012452:	4618      	mov	r0, r3
 8012454:	3710      	adds	r7, #16
 8012456:	46bd      	mov	sp, r7
 8012458:	bd80      	pop	{r7, pc}

0801245a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801245a:	b580      	push	{r7, lr}
 801245c:	b084      	sub	sp, #16
 801245e:	af00      	add	r7, sp, #0
 8012460:	6078      	str	r0, [r7, #4]
 8012462:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801246a:	2b01      	cmp	r3, #1
 801246c:	d101      	bne.n	8012472 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801246e:	2302      	movs	r3, #2
 8012470:	e02d      	b.n	80124ce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	2201      	movs	r2, #1
 8012476:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	2224      	movs	r2, #36	; 0x24
 801247e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	681a      	ldr	r2, [r3, #0]
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	f022 0201 	bic.w	r2, r2, #1
 8012498:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	689b      	ldr	r3, [r3, #8]
 80124a0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	683a      	ldr	r2, [r7, #0]
 80124aa:	430a      	orrs	r2, r1
 80124ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80124ae:	6878      	ldr	r0, [r7, #4]
 80124b0:	f000 f812 	bl	80124d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	68fa      	ldr	r2, [r7, #12]
 80124ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	2220      	movs	r2, #32
 80124c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	2200      	movs	r2, #0
 80124c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80124cc:	2300      	movs	r3, #0
}
 80124ce:	4618      	mov	r0, r3
 80124d0:	3710      	adds	r7, #16
 80124d2:	46bd      	mov	sp, r7
 80124d4:	bd80      	pop	{r7, pc}
	...

080124d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80124d8:	b480      	push	{r7}
 80124da:	b085      	sub	sp, #20
 80124dc:	af00      	add	r7, sp, #0
 80124de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d108      	bne.n	80124fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	2201      	movs	r2, #1
 80124ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	2201      	movs	r2, #1
 80124f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80124f8:	e031      	b.n	801255e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80124fa:	2310      	movs	r3, #16
 80124fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80124fe:	2310      	movs	r3, #16
 8012500:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	689b      	ldr	r3, [r3, #8]
 8012508:	0e5b      	lsrs	r3, r3, #25
 801250a:	b2db      	uxtb	r3, r3
 801250c:	f003 0307 	and.w	r3, r3, #7
 8012510:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	689b      	ldr	r3, [r3, #8]
 8012518:	0f5b      	lsrs	r3, r3, #29
 801251a:	b2db      	uxtb	r3, r3
 801251c:	f003 0307 	and.w	r3, r3, #7
 8012520:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012522:	7bbb      	ldrb	r3, [r7, #14]
 8012524:	7b3a      	ldrb	r2, [r7, #12]
 8012526:	4911      	ldr	r1, [pc, #68]	; (801256c <UARTEx_SetNbDataToProcess+0x94>)
 8012528:	5c8a      	ldrb	r2, [r1, r2]
 801252a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801252e:	7b3a      	ldrb	r2, [r7, #12]
 8012530:	490f      	ldr	r1, [pc, #60]	; (8012570 <UARTEx_SetNbDataToProcess+0x98>)
 8012532:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012534:	fb93 f3f2 	sdiv	r3, r3, r2
 8012538:	b29a      	uxth	r2, r3
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012540:	7bfb      	ldrb	r3, [r7, #15]
 8012542:	7b7a      	ldrb	r2, [r7, #13]
 8012544:	4909      	ldr	r1, [pc, #36]	; (801256c <UARTEx_SetNbDataToProcess+0x94>)
 8012546:	5c8a      	ldrb	r2, [r1, r2]
 8012548:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801254c:	7b7a      	ldrb	r2, [r7, #13]
 801254e:	4908      	ldr	r1, [pc, #32]	; (8012570 <UARTEx_SetNbDataToProcess+0x98>)
 8012550:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012552:	fb93 f3f2 	sdiv	r3, r3, r2
 8012556:	b29a      	uxth	r2, r3
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801255e:	bf00      	nop
 8012560:	3714      	adds	r7, #20
 8012562:	46bd      	mov	sp, r7
 8012564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012568:	4770      	bx	lr
 801256a:	bf00      	nop
 801256c:	08018cbc 	.word	0x08018cbc
 8012570:	08018cc4 	.word	0x08018cc4

08012574 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8012574:	b084      	sub	sp, #16
 8012576:	b480      	push	{r7}
 8012578:	b085      	sub	sp, #20
 801257a:	af00      	add	r7, sp, #0
 801257c:	6078      	str	r0, [r7, #4]
 801257e:	f107 001c 	add.w	r0, r7, #28
 8012582:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8012586:	2300      	movs	r3, #0
 8012588:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 801258a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 801258c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 801258e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8012590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8012592:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8012594:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8012596:	431a      	orrs	r2, r3
             Init.ClockDiv
 8012598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 801259a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 801259c:	68fa      	ldr	r2, [r7, #12]
 801259e:	4313      	orrs	r3, r2
 80125a0:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	685a      	ldr	r2, [r3, #4]
 80125a6:	4b07      	ldr	r3, [pc, #28]	; (80125c4 <SDMMC_Init+0x50>)
 80125a8:	4013      	ands	r3, r2
 80125aa:	68fa      	ldr	r2, [r7, #12]
 80125ac:	431a      	orrs	r2, r3
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80125b2:	2300      	movs	r3, #0
}
 80125b4:	4618      	mov	r0, r3
 80125b6:	3714      	adds	r7, #20
 80125b8:	46bd      	mov	sp, r7
 80125ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125be:	b004      	add	sp, #16
 80125c0:	4770      	bx	lr
 80125c2:	bf00      	nop
 80125c4:	ffc02c00 	.word	0xffc02c00

080125c8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80125c8:	b480      	push	{r7}
 80125ca:	b083      	sub	sp, #12
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80125d6:	4618      	mov	r0, r3
 80125d8:	370c      	adds	r7, #12
 80125da:	46bd      	mov	sp, r7
 80125dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e0:	4770      	bx	lr

080125e2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80125e2:	b480      	push	{r7}
 80125e4:	b083      	sub	sp, #12
 80125e6:	af00      	add	r7, sp, #0
 80125e8:	6078      	str	r0, [r7, #4]
 80125ea:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80125ec:	683b      	ldr	r3, [r7, #0]
 80125ee:	681a      	ldr	r2, [r3, #0]
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80125f6:	2300      	movs	r3, #0
}
 80125f8:	4618      	mov	r0, r3
 80125fa:	370c      	adds	r7, #12
 80125fc:	46bd      	mov	sp, r7
 80125fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012602:	4770      	bx	lr

08012604 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8012604:	b480      	push	{r7}
 8012606:	b083      	sub	sp, #12
 8012608:	af00      	add	r7, sp, #0
 801260a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	f043 0203 	orr.w	r2, r3, #3
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8012618:	2300      	movs	r3, #0
}
 801261a:	4618      	mov	r0, r3
 801261c:	370c      	adds	r7, #12
 801261e:	46bd      	mov	sp, r7
 8012620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012624:	4770      	bx	lr

08012626 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8012626:	b480      	push	{r7}
 8012628:	b083      	sub	sp, #12
 801262a:	af00      	add	r7, sp, #0
 801262c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	f003 0303 	and.w	r3, r3, #3
}
 8012636:	4618      	mov	r0, r3
 8012638:	370c      	adds	r7, #12
 801263a:	46bd      	mov	sp, r7
 801263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012640:	4770      	bx	lr
	...

08012644 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8012644:	b480      	push	{r7}
 8012646:	b085      	sub	sp, #20
 8012648:	af00      	add	r7, sp, #0
 801264a:	6078      	str	r0, [r7, #4]
 801264c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801264e:	2300      	movs	r3, #0
 8012650:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8012652:	683b      	ldr	r3, [r7, #0]
 8012654:	681a      	ldr	r2, [r3, #0]
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801265a:	683b      	ldr	r3, [r7, #0]
 801265c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 801265e:	683b      	ldr	r3, [r7, #0]
 8012660:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012662:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8012664:	683b      	ldr	r3, [r7, #0]
 8012666:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8012668:	431a      	orrs	r2, r3
                       Command->CPSM);
 801266a:	683b      	ldr	r3, [r7, #0]
 801266c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 801266e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012670:	68fa      	ldr	r2, [r7, #12]
 8012672:	4313      	orrs	r3, r2
 8012674:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	68da      	ldr	r2, [r3, #12]
 801267a:	4b06      	ldr	r3, [pc, #24]	; (8012694 <SDMMC_SendCommand+0x50>)
 801267c:	4013      	ands	r3, r2
 801267e:	68fa      	ldr	r2, [r7, #12]
 8012680:	431a      	orrs	r2, r3
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012686:	2300      	movs	r3, #0
}
 8012688:	4618      	mov	r0, r3
 801268a:	3714      	adds	r7, #20
 801268c:	46bd      	mov	sp, r7
 801268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012692:	4770      	bx	lr
 8012694:	fffee0c0 	.word	0xfffee0c0

08012698 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8012698:	b480      	push	{r7}
 801269a:	b083      	sub	sp, #12
 801269c:	af00      	add	r7, sp, #0
 801269e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	691b      	ldr	r3, [r3, #16]
 80126a4:	b2db      	uxtb	r3, r3
}
 80126a6:	4618      	mov	r0, r3
 80126a8:	370c      	adds	r7, #12
 80126aa:	46bd      	mov	sp, r7
 80126ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b0:	4770      	bx	lr

080126b2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80126b2:	b480      	push	{r7}
 80126b4:	b085      	sub	sp, #20
 80126b6:	af00      	add	r7, sp, #0
 80126b8:	6078      	str	r0, [r7, #4]
 80126ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	3314      	adds	r3, #20
 80126c0:	461a      	mov	r2, r3
 80126c2:	683b      	ldr	r3, [r7, #0]
 80126c4:	4413      	add	r3, r2
 80126c6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	681b      	ldr	r3, [r3, #0]
}
 80126cc:	4618      	mov	r0, r3
 80126ce:	3714      	adds	r7, #20
 80126d0:	46bd      	mov	sp, r7
 80126d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d6:	4770      	bx	lr

080126d8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80126d8:	b480      	push	{r7}
 80126da:	b085      	sub	sp, #20
 80126dc:	af00      	add	r7, sp, #0
 80126de:	6078      	str	r0, [r7, #4]
 80126e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80126e2:	2300      	movs	r3, #0
 80126e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80126e6:	683b      	ldr	r3, [r7, #0]
 80126e8:	681a      	ldr	r2, [r3, #0]
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80126ee:	683b      	ldr	r3, [r7, #0]
 80126f0:	685a      	ldr	r2, [r3, #4]
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80126f6:	683b      	ldr	r3, [r7, #0]
 80126f8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80126fa:	683b      	ldr	r3, [r7, #0]
 80126fc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80126fe:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8012700:	683b      	ldr	r3, [r7, #0]
 8012702:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8012704:	431a      	orrs	r2, r3
                       Data->DPSM);
 8012706:	683b      	ldr	r3, [r7, #0]
 8012708:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 801270a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801270c:	68fa      	ldr	r2, [r7, #12]
 801270e:	4313      	orrs	r3, r2
 8012710:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012716:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	431a      	orrs	r2, r3
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8012722:	2300      	movs	r3, #0

}
 8012724:	4618      	mov	r0, r3
 8012726:	3714      	adds	r7, #20
 8012728:	46bd      	mov	sp, r7
 801272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801272e:	4770      	bx	lr

08012730 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8012730:	b580      	push	{r7, lr}
 8012732:	b088      	sub	sp, #32
 8012734:	af00      	add	r7, sp, #0
 8012736:	6078      	str	r0, [r7, #4]
 8012738:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801273a:	683b      	ldr	r3, [r7, #0]
 801273c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801273e:	2310      	movs	r3, #16
 8012740:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012742:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012746:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012748:	2300      	movs	r3, #0
 801274a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801274c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012750:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012752:	f107 0308 	add.w	r3, r7, #8
 8012756:	4619      	mov	r1, r3
 8012758:	6878      	ldr	r0, [r7, #4]
 801275a:	f7ff ff73 	bl	8012644 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801275e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012762:	2110      	movs	r1, #16
 8012764:	6878      	ldr	r0, [r7, #4]
 8012766:	f000 fa5f 	bl	8012c28 <SDMMC_GetCmdResp1>
 801276a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801276c:	69fb      	ldr	r3, [r7, #28]
}
 801276e:	4618      	mov	r0, r3
 8012770:	3720      	adds	r7, #32
 8012772:	46bd      	mov	sp, r7
 8012774:	bd80      	pop	{r7, pc}

08012776 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012776:	b580      	push	{r7, lr}
 8012778:	b088      	sub	sp, #32
 801277a:	af00      	add	r7, sp, #0
 801277c:	6078      	str	r0, [r7, #4]
 801277e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012780:	683b      	ldr	r3, [r7, #0]
 8012782:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8012784:	2311      	movs	r3, #17
 8012786:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012788:	f44f 7380 	mov.w	r3, #256	; 0x100
 801278c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801278e:	2300      	movs	r3, #0
 8012790:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012792:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012796:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012798:	f107 0308 	add.w	r3, r7, #8
 801279c:	4619      	mov	r1, r3
 801279e:	6878      	ldr	r0, [r7, #4]
 80127a0:	f7ff ff50 	bl	8012644 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80127a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80127a8:	2111      	movs	r1, #17
 80127aa:	6878      	ldr	r0, [r7, #4]
 80127ac:	f000 fa3c 	bl	8012c28 <SDMMC_GetCmdResp1>
 80127b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80127b2:	69fb      	ldr	r3, [r7, #28]
}
 80127b4:	4618      	mov	r0, r3
 80127b6:	3720      	adds	r7, #32
 80127b8:	46bd      	mov	sp, r7
 80127ba:	bd80      	pop	{r7, pc}

080127bc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80127bc:	b580      	push	{r7, lr}
 80127be:	b088      	sub	sp, #32
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	6078      	str	r0, [r7, #4]
 80127c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80127c6:	683b      	ldr	r3, [r7, #0]
 80127c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80127ca:	2312      	movs	r3, #18
 80127cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80127ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80127d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80127d4:	2300      	movs	r3, #0
 80127d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80127d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80127dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80127de:	f107 0308 	add.w	r3, r7, #8
 80127e2:	4619      	mov	r1, r3
 80127e4:	6878      	ldr	r0, [r7, #4]
 80127e6:	f7ff ff2d 	bl	8012644 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80127ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80127ee:	2112      	movs	r1, #18
 80127f0:	6878      	ldr	r0, [r7, #4]
 80127f2:	f000 fa19 	bl	8012c28 <SDMMC_GetCmdResp1>
 80127f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80127f8:	69fb      	ldr	r3, [r7, #28]
}
 80127fa:	4618      	mov	r0, r3
 80127fc:	3720      	adds	r7, #32
 80127fe:	46bd      	mov	sp, r7
 8012800:	bd80      	pop	{r7, pc}

08012802 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012802:	b580      	push	{r7, lr}
 8012804:	b088      	sub	sp, #32
 8012806:	af00      	add	r7, sp, #0
 8012808:	6078      	str	r0, [r7, #4]
 801280a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801280c:	683b      	ldr	r3, [r7, #0]
 801280e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8012810:	2318      	movs	r3, #24
 8012812:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012814:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012818:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801281a:	2300      	movs	r3, #0
 801281c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801281e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012822:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012824:	f107 0308 	add.w	r3, r7, #8
 8012828:	4619      	mov	r1, r3
 801282a:	6878      	ldr	r0, [r7, #4]
 801282c:	f7ff ff0a 	bl	8012644 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012830:	f241 3288 	movw	r2, #5000	; 0x1388
 8012834:	2118      	movs	r1, #24
 8012836:	6878      	ldr	r0, [r7, #4]
 8012838:	f000 f9f6 	bl	8012c28 <SDMMC_GetCmdResp1>
 801283c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801283e:	69fb      	ldr	r3, [r7, #28]
}
 8012840:	4618      	mov	r0, r3
 8012842:	3720      	adds	r7, #32
 8012844:	46bd      	mov	sp, r7
 8012846:	bd80      	pop	{r7, pc}

08012848 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012848:	b580      	push	{r7, lr}
 801284a:	b088      	sub	sp, #32
 801284c:	af00      	add	r7, sp, #0
 801284e:	6078      	str	r0, [r7, #4]
 8012850:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012852:	683b      	ldr	r3, [r7, #0]
 8012854:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8012856:	2319      	movs	r3, #25
 8012858:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801285a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801285e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012860:	2300      	movs	r3, #0
 8012862:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012868:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801286a:	f107 0308 	add.w	r3, r7, #8
 801286e:	4619      	mov	r1, r3
 8012870:	6878      	ldr	r0, [r7, #4]
 8012872:	f7ff fee7 	bl	8012644 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012876:	f241 3288 	movw	r2, #5000	; 0x1388
 801287a:	2119      	movs	r1, #25
 801287c:	6878      	ldr	r0, [r7, #4]
 801287e:	f000 f9d3 	bl	8012c28 <SDMMC_GetCmdResp1>
 8012882:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012884:	69fb      	ldr	r3, [r7, #28]
}
 8012886:	4618      	mov	r0, r3
 8012888:	3720      	adds	r7, #32
 801288a:	46bd      	mov	sp, r7
 801288c:	bd80      	pop	{r7, pc}
	...

08012890 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8012890:	b580      	push	{r7, lr}
 8012892:	b088      	sub	sp, #32
 8012894:	af00      	add	r7, sp, #0
 8012896:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8012898:	2300      	movs	r3, #0
 801289a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 801289c:	230c      	movs	r3, #12
 801289e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80128a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80128a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80128a6:	2300      	movs	r3, #0
 80128a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80128aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80128ae:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	68db      	ldr	r3, [r3, #12]
 80128b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	68db      	ldr	r3, [r3, #12]
 80128c0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80128c8:	f107 0308 	add.w	r3, r7, #8
 80128cc:	4619      	mov	r1, r3
 80128ce:	6878      	ldr	r0, [r7, #4]
 80128d0:	f7ff feb8 	bl	8012644 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80128d4:	4a0b      	ldr	r2, [pc, #44]	; (8012904 <SDMMC_CmdStopTransfer+0x74>)
 80128d6:	210c      	movs	r1, #12
 80128d8:	6878      	ldr	r0, [r7, #4]
 80128da:	f000 f9a5 	bl	8012c28 <SDMMC_GetCmdResp1>
 80128de:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	68db      	ldr	r3, [r3, #12]
 80128e4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80128ec:	69fb      	ldr	r3, [r7, #28]
 80128ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80128f2:	d101      	bne.n	80128f8 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80128f4:	2300      	movs	r3, #0
 80128f6:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80128f8:	69fb      	ldr	r3, [r7, #28]
}
 80128fa:	4618      	mov	r0, r3
 80128fc:	3720      	adds	r7, #32
 80128fe:	46bd      	mov	sp, r7
 8012900:	bd80      	pop	{r7, pc}
 8012902:	bf00      	nop
 8012904:	05f5e100 	.word	0x05f5e100

08012908 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8012908:	b580      	push	{r7, lr}
 801290a:	b088      	sub	sp, #32
 801290c:	af00      	add	r7, sp, #0
 801290e:	6078      	str	r0, [r7, #4]
 8012910:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8012912:	683b      	ldr	r3, [r7, #0]
 8012914:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8012916:	2307      	movs	r3, #7
 8012918:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801291a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801291e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012920:	2300      	movs	r3, #0
 8012922:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012924:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012928:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801292a:	f107 0308 	add.w	r3, r7, #8
 801292e:	4619      	mov	r1, r3
 8012930:	6878      	ldr	r0, [r7, #4]
 8012932:	f7ff fe87 	bl	8012644 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8012936:	f241 3288 	movw	r2, #5000	; 0x1388
 801293a:	2107      	movs	r1, #7
 801293c:	6878      	ldr	r0, [r7, #4]
 801293e:	f000 f973 	bl	8012c28 <SDMMC_GetCmdResp1>
 8012942:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012944:	69fb      	ldr	r3, [r7, #28]
}
 8012946:	4618      	mov	r0, r3
 8012948:	3720      	adds	r7, #32
 801294a:	46bd      	mov	sp, r7
 801294c:	bd80      	pop	{r7, pc}

0801294e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 801294e:	b580      	push	{r7, lr}
 8012950:	b088      	sub	sp, #32
 8012952:	af00      	add	r7, sp, #0
 8012954:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012956:	2300      	movs	r3, #0
 8012958:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801295a:	2300      	movs	r3, #0
 801295c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 801295e:	2300      	movs	r3, #0
 8012960:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012962:	2300      	movs	r3, #0
 8012964:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801296a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801296c:	f107 0308 	add.w	r3, r7, #8
 8012970:	4619      	mov	r1, r3
 8012972:	6878      	ldr	r0, [r7, #4]
 8012974:	f7ff fe66 	bl	8012644 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8012978:	6878      	ldr	r0, [r7, #4]
 801297a:	f000 fb97 	bl	80130ac <SDMMC_GetCmdError>
 801297e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012980:	69fb      	ldr	r3, [r7, #28]
}
 8012982:	4618      	mov	r0, r3
 8012984:	3720      	adds	r7, #32
 8012986:	46bd      	mov	sp, r7
 8012988:	bd80      	pop	{r7, pc}

0801298a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801298a:	b580      	push	{r7, lr}
 801298c:	b088      	sub	sp, #32
 801298e:	af00      	add	r7, sp, #0
 8012990:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8012992:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8012996:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8012998:	2308      	movs	r3, #8
 801299a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801299c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80129a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80129a2:	2300      	movs	r3, #0
 80129a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80129a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80129aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80129ac:	f107 0308 	add.w	r3, r7, #8
 80129b0:	4619      	mov	r1, r3
 80129b2:	6878      	ldr	r0, [r7, #4]
 80129b4:	f7ff fe46 	bl	8012644 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80129b8:	6878      	ldr	r0, [r7, #4]
 80129ba:	f000 fb29 	bl	8013010 <SDMMC_GetCmdResp7>
 80129be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80129c0:	69fb      	ldr	r3, [r7, #28]
}
 80129c2:	4618      	mov	r0, r3
 80129c4:	3720      	adds	r7, #32
 80129c6:	46bd      	mov	sp, r7
 80129c8:	bd80      	pop	{r7, pc}

080129ca <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80129ca:	b580      	push	{r7, lr}
 80129cc:	b088      	sub	sp, #32
 80129ce:	af00      	add	r7, sp, #0
 80129d0:	6078      	str	r0, [r7, #4]
 80129d2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80129d4:	683b      	ldr	r3, [r7, #0]
 80129d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80129d8:	2337      	movs	r3, #55	; 0x37
 80129da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80129dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80129e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80129e2:	2300      	movs	r3, #0
 80129e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80129e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80129ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80129ec:	f107 0308 	add.w	r3, r7, #8
 80129f0:	4619      	mov	r1, r3
 80129f2:	6878      	ldr	r0, [r7, #4]
 80129f4:	f7ff fe26 	bl	8012644 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80129f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80129fc:	2137      	movs	r1, #55	; 0x37
 80129fe:	6878      	ldr	r0, [r7, #4]
 8012a00:	f000 f912 	bl	8012c28 <SDMMC_GetCmdResp1>
 8012a04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012a06:	69fb      	ldr	r3, [r7, #28]
}
 8012a08:	4618      	mov	r0, r3
 8012a0a:	3720      	adds	r7, #32
 8012a0c:	46bd      	mov	sp, r7
 8012a0e:	bd80      	pop	{r7, pc}

08012a10 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012a10:	b580      	push	{r7, lr}
 8012a12:	b088      	sub	sp, #32
 8012a14:	af00      	add	r7, sp, #0
 8012a16:	6078      	str	r0, [r7, #4]
 8012a18:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012a1a:	683b      	ldr	r3, [r7, #0]
 8012a1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8012a1e:	2329      	movs	r3, #41	; 0x29
 8012a20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012a22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012a26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012a28:	2300      	movs	r3, #0
 8012a2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012a2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012a30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012a32:	f107 0308 	add.w	r3, r7, #8
 8012a36:	4619      	mov	r1, r3
 8012a38:	6878      	ldr	r0, [r7, #4]
 8012a3a:	f7ff fe03 	bl	8012644 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8012a3e:	6878      	ldr	r0, [r7, #4]
 8012a40:	f000 fa2e 	bl	8012ea0 <SDMMC_GetCmdResp3>
 8012a44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012a46:	69fb      	ldr	r3, [r7, #28]
}
 8012a48:	4618      	mov	r0, r3
 8012a4a:	3720      	adds	r7, #32
 8012a4c:	46bd      	mov	sp, r7
 8012a4e:	bd80      	pop	{r7, pc}

08012a50 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8012a50:	b580      	push	{r7, lr}
 8012a52:	b088      	sub	sp, #32
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	6078      	str	r0, [r7, #4]
 8012a58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8012a5a:	683b      	ldr	r3, [r7, #0]
 8012a5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8012a5e:	2306      	movs	r3, #6
 8012a60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012a62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012a66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012a68:	2300      	movs	r3, #0
 8012a6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012a6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012a70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012a72:	f107 0308 	add.w	r3, r7, #8
 8012a76:	4619      	mov	r1, r3
 8012a78:	6878      	ldr	r0, [r7, #4]
 8012a7a:	f7ff fde3 	bl	8012644 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8012a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012a82:	2106      	movs	r1, #6
 8012a84:	6878      	ldr	r0, [r7, #4]
 8012a86:	f000 f8cf 	bl	8012c28 <SDMMC_GetCmdResp1>
 8012a8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012a8c:	69fb      	ldr	r3, [r7, #28]
}
 8012a8e:	4618      	mov	r0, r3
 8012a90:	3720      	adds	r7, #32
 8012a92:	46bd      	mov	sp, r7
 8012a94:	bd80      	pop	{r7, pc}

08012a96 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8012a96:	b580      	push	{r7, lr}
 8012a98:	b088      	sub	sp, #32
 8012a9a:	af00      	add	r7, sp, #0
 8012a9c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8012a9e:	2300      	movs	r3, #0
 8012aa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8012aa2:	2333      	movs	r3, #51	; 0x33
 8012aa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012aa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012aaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012aac:	2300      	movs	r3, #0
 8012aae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012ab4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012ab6:	f107 0308 	add.w	r3, r7, #8
 8012aba:	4619      	mov	r1, r3
 8012abc:	6878      	ldr	r0, [r7, #4]
 8012abe:	f7ff fdc1 	bl	8012644 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8012ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8012ac6:	2133      	movs	r1, #51	; 0x33
 8012ac8:	6878      	ldr	r0, [r7, #4]
 8012aca:	f000 f8ad 	bl	8012c28 <SDMMC_GetCmdResp1>
 8012ace:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012ad0:	69fb      	ldr	r3, [r7, #28]
}
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	3720      	adds	r7, #32
 8012ad6:	46bd      	mov	sp, r7
 8012ad8:	bd80      	pop	{r7, pc}

08012ada <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8012ada:	b580      	push	{r7, lr}
 8012adc:	b088      	sub	sp, #32
 8012ade:	af00      	add	r7, sp, #0
 8012ae0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8012ae2:	2300      	movs	r3, #0
 8012ae4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8012ae6:	2302      	movs	r3, #2
 8012ae8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012aea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012aee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012af0:	2300      	movs	r3, #0
 8012af2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012af8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012afa:	f107 0308 	add.w	r3, r7, #8
 8012afe:	4619      	mov	r1, r3
 8012b00:	6878      	ldr	r0, [r7, #4]
 8012b02:	f7ff fd9f 	bl	8012644 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012b06:	6878      	ldr	r0, [r7, #4]
 8012b08:	f000 f980 	bl	8012e0c <SDMMC_GetCmdResp2>
 8012b0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012b0e:	69fb      	ldr	r3, [r7, #28]
}
 8012b10:	4618      	mov	r0, r3
 8012b12:	3720      	adds	r7, #32
 8012b14:	46bd      	mov	sp, r7
 8012b16:	bd80      	pop	{r7, pc}

08012b18 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012b18:	b580      	push	{r7, lr}
 8012b1a:	b088      	sub	sp, #32
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	6078      	str	r0, [r7, #4]
 8012b20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8012b22:	683b      	ldr	r3, [r7, #0]
 8012b24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8012b26:	2309      	movs	r3, #9
 8012b28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012b2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012b2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012b30:	2300      	movs	r3, #0
 8012b32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012b34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012b38:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012b3a:	f107 0308 	add.w	r3, r7, #8
 8012b3e:	4619      	mov	r1, r3
 8012b40:	6878      	ldr	r0, [r7, #4]
 8012b42:	f7ff fd7f 	bl	8012644 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012b46:	6878      	ldr	r0, [r7, #4]
 8012b48:	f000 f960 	bl	8012e0c <SDMMC_GetCmdResp2>
 8012b4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012b4e:	69fb      	ldr	r3, [r7, #28]
}
 8012b50:	4618      	mov	r0, r3
 8012b52:	3720      	adds	r7, #32
 8012b54:	46bd      	mov	sp, r7
 8012b56:	bd80      	pop	{r7, pc}

08012b58 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8012b58:	b580      	push	{r7, lr}
 8012b5a:	b088      	sub	sp, #32
 8012b5c:	af00      	add	r7, sp, #0
 8012b5e:	6078      	str	r0, [r7, #4]
 8012b60:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8012b62:	2300      	movs	r3, #0
 8012b64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8012b66:	2303      	movs	r3, #3
 8012b68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012b6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012b6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012b70:	2300      	movs	r3, #0
 8012b72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012b74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012b78:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012b7a:	f107 0308 	add.w	r3, r7, #8
 8012b7e:	4619      	mov	r1, r3
 8012b80:	6878      	ldr	r0, [r7, #4]
 8012b82:	f7ff fd5f 	bl	8012644 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8012b86:	683a      	ldr	r2, [r7, #0]
 8012b88:	2103      	movs	r1, #3
 8012b8a:	6878      	ldr	r0, [r7, #4]
 8012b8c:	f000 f9c8 	bl	8012f20 <SDMMC_GetCmdResp6>
 8012b90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012b92:	69fb      	ldr	r3, [r7, #28]
}
 8012b94:	4618      	mov	r0, r3
 8012b96:	3720      	adds	r7, #32
 8012b98:	46bd      	mov	sp, r7
 8012b9a:	bd80      	pop	{r7, pc}

08012b9c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012b9c:	b580      	push	{r7, lr}
 8012b9e:	b088      	sub	sp, #32
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	6078      	str	r0, [r7, #4]
 8012ba4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012ba6:	683b      	ldr	r3, [r7, #0]
 8012ba8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8012baa:	230d      	movs	r3, #13
 8012bac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012bae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012bb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012bbc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012bbe:	f107 0308 	add.w	r3, r7, #8
 8012bc2:	4619      	mov	r1, r3
 8012bc4:	6878      	ldr	r0, [r7, #4]
 8012bc6:	f7ff fd3d 	bl	8012644 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8012bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8012bce:	210d      	movs	r1, #13
 8012bd0:	6878      	ldr	r0, [r7, #4]
 8012bd2:	f000 f829 	bl	8012c28 <SDMMC_GetCmdResp1>
 8012bd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012bd8:	69fb      	ldr	r3, [r7, #28]
}
 8012bda:	4618      	mov	r0, r3
 8012bdc:	3720      	adds	r7, #32
 8012bde:	46bd      	mov	sp, r7
 8012be0:	bd80      	pop	{r7, pc}

08012be2 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8012be2:	b580      	push	{r7, lr}
 8012be4:	b088      	sub	sp, #32
 8012be6:	af00      	add	r7, sp, #0
 8012be8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012bea:	2300      	movs	r3, #0
 8012bec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8012bee:	230d      	movs	r3, #13
 8012bf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012bf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012bf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012bf8:	2300      	movs	r3, #0
 8012bfa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012c00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012c02:	f107 0308 	add.w	r3, r7, #8
 8012c06:	4619      	mov	r1, r3
 8012c08:	6878      	ldr	r0, [r7, #4]
 8012c0a:	f7ff fd1b 	bl	8012644 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8012c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012c12:	210d      	movs	r1, #13
 8012c14:	6878      	ldr	r0, [r7, #4]
 8012c16:	f000 f807 	bl	8012c28 <SDMMC_GetCmdResp1>
 8012c1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012c1c:	69fb      	ldr	r3, [r7, #28]
}
 8012c1e:	4618      	mov	r0, r3
 8012c20:	3720      	adds	r7, #32
 8012c22:	46bd      	mov	sp, r7
 8012c24:	bd80      	pop	{r7, pc}
	...

08012c28 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8012c28:	b580      	push	{r7, lr}
 8012c2a:	b088      	sub	sp, #32
 8012c2c:	af00      	add	r7, sp, #0
 8012c2e:	60f8      	str	r0, [r7, #12]
 8012c30:	460b      	mov	r3, r1
 8012c32:	607a      	str	r2, [r7, #4]
 8012c34:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8012c36:	4b70      	ldr	r3, [pc, #448]	; (8012df8 <SDMMC_GetCmdResp1+0x1d0>)
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	4a70      	ldr	r2, [pc, #448]	; (8012dfc <SDMMC_GetCmdResp1+0x1d4>)
 8012c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8012c40:	0a5a      	lsrs	r2, r3, #9
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	fb02 f303 	mul.w	r3, r2, r3
 8012c48:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012c4a:	69fb      	ldr	r3, [r7, #28]
 8012c4c:	1e5a      	subs	r2, r3, #1
 8012c4e:	61fa      	str	r2, [r7, #28]
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d102      	bne.n	8012c5a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012c54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012c58:	e0c9      	b.n	8012dee <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c5e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8012c60:	69ba      	ldr	r2, [r7, #24]
 8012c62:	4b67      	ldr	r3, [pc, #412]	; (8012e00 <SDMMC_GetCmdResp1+0x1d8>)
 8012c64:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d0ef      	beq.n	8012c4a <SDMMC_GetCmdResp1+0x22>
 8012c6a:	69bb      	ldr	r3, [r7, #24]
 8012c6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d1ea      	bne.n	8012c4a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012c74:	68fb      	ldr	r3, [r7, #12]
 8012c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c78:	f003 0304 	and.w	r3, r3, #4
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d004      	beq.n	8012c8a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	2204      	movs	r2, #4
 8012c84:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012c86:	2304      	movs	r3, #4
 8012c88:	e0b1      	b.n	8012dee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c8e:	f003 0301 	and.w	r3, r3, #1
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d004      	beq.n	8012ca0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	2201      	movs	r2, #1
 8012c9a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012c9c:	2301      	movs	r3, #1
 8012c9e:	e0a6      	b.n	8012dee <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	4a58      	ldr	r2, [pc, #352]	; (8012e04 <SDMMC_GetCmdResp1+0x1dc>)
 8012ca4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012ca6:	68f8      	ldr	r0, [r7, #12]
 8012ca8:	f7ff fcf6 	bl	8012698 <SDMMC_GetCommandResponse>
 8012cac:	4603      	mov	r3, r0
 8012cae:	461a      	mov	r2, r3
 8012cb0:	7afb      	ldrb	r3, [r7, #11]
 8012cb2:	4293      	cmp	r3, r2
 8012cb4:	d001      	beq.n	8012cba <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012cb6:	2301      	movs	r3, #1
 8012cb8:	e099      	b.n	8012dee <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012cba:	2100      	movs	r1, #0
 8012cbc:	68f8      	ldr	r0, [r7, #12]
 8012cbe:	f7ff fcf8 	bl	80126b2 <SDMMC_GetResponse>
 8012cc2:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012cc4:	697a      	ldr	r2, [r7, #20]
 8012cc6:	4b50      	ldr	r3, [pc, #320]	; (8012e08 <SDMMC_GetCmdResp1+0x1e0>)
 8012cc8:	4013      	ands	r3, r2
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d101      	bne.n	8012cd2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8012cce:	2300      	movs	r3, #0
 8012cd0:	e08d      	b.n	8012dee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8012cd2:	697b      	ldr	r3, [r7, #20]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	da02      	bge.n	8012cde <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012cd8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012cdc:	e087      	b.n	8012dee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8012cde:	697b      	ldr	r3, [r7, #20]
 8012ce0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d001      	beq.n	8012cec <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012ce8:	2340      	movs	r3, #64	; 0x40
 8012cea:	e080      	b.n	8012dee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012cec:	697b      	ldr	r3, [r7, #20]
 8012cee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d001      	beq.n	8012cfa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012cf6:	2380      	movs	r3, #128	; 0x80
 8012cf8:	e079      	b.n	8012dee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012cfa:	697b      	ldr	r3, [r7, #20]
 8012cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d002      	beq.n	8012d0a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012d04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012d08:	e071      	b.n	8012dee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012d0a:	697b      	ldr	r3, [r7, #20]
 8012d0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d002      	beq.n	8012d1a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012d14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012d18:	e069      	b.n	8012dee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012d1a:	697b      	ldr	r3, [r7, #20]
 8012d1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d002      	beq.n	8012d2a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012d24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012d28:	e061      	b.n	8012dee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012d2a:	697b      	ldr	r3, [r7, #20]
 8012d2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d002      	beq.n	8012d3a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012d34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012d38:	e059      	b.n	8012dee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012d3a:	697b      	ldr	r3, [r7, #20]
 8012d3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d002      	beq.n	8012d4a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012d44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012d48:	e051      	b.n	8012dee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012d4a:	697b      	ldr	r3, [r7, #20]
 8012d4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d002      	beq.n	8012d5a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012d54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012d58:	e049      	b.n	8012dee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012d5a:	697b      	ldr	r3, [r7, #20]
 8012d5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d002      	beq.n	8012d6a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012d64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012d68:	e041      	b.n	8012dee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012d6a:	697b      	ldr	r3, [r7, #20]
 8012d6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d002      	beq.n	8012d7a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8012d74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012d78:	e039      	b.n	8012dee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012d7a:	697b      	ldr	r3, [r7, #20]
 8012d7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d002      	beq.n	8012d8a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012d84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012d88:	e031      	b.n	8012dee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012d8a:	697b      	ldr	r3, [r7, #20]
 8012d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d002      	beq.n	8012d9a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012d94:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012d98:	e029      	b.n	8012dee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8012d9a:	697b      	ldr	r3, [r7, #20]
 8012d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d002      	beq.n	8012daa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012da4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012da8:	e021      	b.n	8012dee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8012daa:	697b      	ldr	r3, [r7, #20]
 8012dac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d002      	beq.n	8012dba <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012db4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012db8:	e019      	b.n	8012dee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8012dba:	697b      	ldr	r3, [r7, #20]
 8012dbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d002      	beq.n	8012dca <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012dc4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012dc8:	e011      	b.n	8012dee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8012dca:	697b      	ldr	r3, [r7, #20]
 8012dcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d002      	beq.n	8012dda <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8012dd4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012dd8:	e009      	b.n	8012dee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8012dda:	697b      	ldr	r3, [r7, #20]
 8012ddc:	f003 0308 	and.w	r3, r3, #8
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d002      	beq.n	8012dea <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8012de4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8012de8:	e001      	b.n	8012dee <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012dea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012dee:	4618      	mov	r0, r3
 8012df0:	3720      	adds	r7, #32
 8012df2:	46bd      	mov	sp, r7
 8012df4:	bd80      	pop	{r7, pc}
 8012df6:	bf00      	nop
 8012df8:	24000000 	.word	0x24000000
 8012dfc:	10624dd3 	.word	0x10624dd3
 8012e00:	00200045 	.word	0x00200045
 8012e04:	002000c5 	.word	0x002000c5
 8012e08:	fdffe008 	.word	0xfdffe008

08012e0c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8012e0c:	b480      	push	{r7}
 8012e0e:	b085      	sub	sp, #20
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012e14:	4b1f      	ldr	r3, [pc, #124]	; (8012e94 <SDMMC_GetCmdResp2+0x88>)
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	4a1f      	ldr	r2, [pc, #124]	; (8012e98 <SDMMC_GetCmdResp2+0x8c>)
 8012e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8012e1e:	0a5b      	lsrs	r3, r3, #9
 8012e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8012e24:	fb02 f303 	mul.w	r3, r2, r3
 8012e28:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	1e5a      	subs	r2, r3, #1
 8012e2e:	60fa      	str	r2, [r7, #12]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d102      	bne.n	8012e3a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012e34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012e38:	e026      	b.n	8012e88 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e3e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012e40:	68bb      	ldr	r3, [r7, #8]
 8012e42:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d0ef      	beq.n	8012e2a <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012e4a:	68bb      	ldr	r3, [r7, #8]
 8012e4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d1ea      	bne.n	8012e2a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e58:	f003 0304 	and.w	r3, r3, #4
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d004      	beq.n	8012e6a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	2204      	movs	r2, #4
 8012e64:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012e66:	2304      	movs	r3, #4
 8012e68:	e00e      	b.n	8012e88 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e6e:	f003 0301 	and.w	r3, r3, #1
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d004      	beq.n	8012e80 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	2201      	movs	r2, #1
 8012e7a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012e7c:	2301      	movs	r3, #1
 8012e7e:	e003      	b.n	8012e88 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	4a06      	ldr	r2, [pc, #24]	; (8012e9c <SDMMC_GetCmdResp2+0x90>)
 8012e84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012e86:	2300      	movs	r3, #0
}
 8012e88:	4618      	mov	r0, r3
 8012e8a:	3714      	adds	r7, #20
 8012e8c:	46bd      	mov	sp, r7
 8012e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e92:	4770      	bx	lr
 8012e94:	24000000 	.word	0x24000000
 8012e98:	10624dd3 	.word	0x10624dd3
 8012e9c:	002000c5 	.word	0x002000c5

08012ea0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8012ea0:	b480      	push	{r7}
 8012ea2:	b085      	sub	sp, #20
 8012ea4:	af00      	add	r7, sp, #0
 8012ea6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012ea8:	4b1a      	ldr	r3, [pc, #104]	; (8012f14 <SDMMC_GetCmdResp3+0x74>)
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	4a1a      	ldr	r2, [pc, #104]	; (8012f18 <SDMMC_GetCmdResp3+0x78>)
 8012eae:	fba2 2303 	umull	r2, r3, r2, r3
 8012eb2:	0a5b      	lsrs	r3, r3, #9
 8012eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8012eb8:	fb02 f303 	mul.w	r3, r2, r3
 8012ebc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	1e5a      	subs	r2, r3, #1
 8012ec2:	60fa      	str	r2, [r7, #12]
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d102      	bne.n	8012ece <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012ec8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012ecc:	e01b      	b.n	8012f06 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ed2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012ed4:	68bb      	ldr	r3, [r7, #8]
 8012ed6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d0ef      	beq.n	8012ebe <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012ede:	68bb      	ldr	r3, [r7, #8]
 8012ee0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d1ea      	bne.n	8012ebe <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012eec:	f003 0304 	and.w	r3, r3, #4
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d004      	beq.n	8012efe <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	2204      	movs	r2, #4
 8012ef8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012efa:	2304      	movs	r3, #4
 8012efc:	e003      	b.n	8012f06 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	4a06      	ldr	r2, [pc, #24]	; (8012f1c <SDMMC_GetCmdResp3+0x7c>)
 8012f02:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012f04:	2300      	movs	r3, #0
}
 8012f06:	4618      	mov	r0, r3
 8012f08:	3714      	adds	r7, #20
 8012f0a:	46bd      	mov	sp, r7
 8012f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f10:	4770      	bx	lr
 8012f12:	bf00      	nop
 8012f14:	24000000 	.word	0x24000000
 8012f18:	10624dd3 	.word	0x10624dd3
 8012f1c:	002000c5 	.word	0x002000c5

08012f20 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8012f20:	b580      	push	{r7, lr}
 8012f22:	b088      	sub	sp, #32
 8012f24:	af00      	add	r7, sp, #0
 8012f26:	60f8      	str	r0, [r7, #12]
 8012f28:	460b      	mov	r3, r1
 8012f2a:	607a      	str	r2, [r7, #4]
 8012f2c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012f2e:	4b35      	ldr	r3, [pc, #212]	; (8013004 <SDMMC_GetCmdResp6+0xe4>)
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	4a35      	ldr	r2, [pc, #212]	; (8013008 <SDMMC_GetCmdResp6+0xe8>)
 8012f34:	fba2 2303 	umull	r2, r3, r2, r3
 8012f38:	0a5b      	lsrs	r3, r3, #9
 8012f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8012f3e:	fb02 f303 	mul.w	r3, r2, r3
 8012f42:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012f44:	69fb      	ldr	r3, [r7, #28]
 8012f46:	1e5a      	subs	r2, r3, #1
 8012f48:	61fa      	str	r2, [r7, #28]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d102      	bne.n	8012f54 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012f4e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012f52:	e052      	b.n	8012ffa <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f58:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012f5a:	69bb      	ldr	r3, [r7, #24]
 8012f5c:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d0ef      	beq.n	8012f44 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012f64:	69bb      	ldr	r3, [r7, #24]
 8012f66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d1ea      	bne.n	8012f44 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f72:	f003 0304 	and.w	r3, r3, #4
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d004      	beq.n	8012f84 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	2204      	movs	r2, #4
 8012f7e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012f80:	2304      	movs	r3, #4
 8012f82:	e03a      	b.n	8012ffa <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f88:	f003 0301 	and.w	r3, r3, #1
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d004      	beq.n	8012f9a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	2201      	movs	r2, #1
 8012f94:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012f96:	2301      	movs	r3, #1
 8012f98:	e02f      	b.n	8012ffa <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012f9a:	68f8      	ldr	r0, [r7, #12]
 8012f9c:	f7ff fb7c 	bl	8012698 <SDMMC_GetCommandResponse>
 8012fa0:	4603      	mov	r3, r0
 8012fa2:	461a      	mov	r2, r3
 8012fa4:	7afb      	ldrb	r3, [r7, #11]
 8012fa6:	4293      	cmp	r3, r2
 8012fa8:	d001      	beq.n	8012fae <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012faa:	2301      	movs	r3, #1
 8012fac:	e025      	b.n	8012ffa <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	4a16      	ldr	r2, [pc, #88]	; (801300c <SDMMC_GetCmdResp6+0xec>)
 8012fb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012fb4:	2100      	movs	r1, #0
 8012fb6:	68f8      	ldr	r0, [r7, #12]
 8012fb8:	f7ff fb7b 	bl	80126b2 <SDMMC_GetResponse>
 8012fbc:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8012fbe:	697b      	ldr	r3, [r7, #20]
 8012fc0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d106      	bne.n	8012fd6 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8012fc8:	697b      	ldr	r3, [r7, #20]
 8012fca:	0c1b      	lsrs	r3, r3, #16
 8012fcc:	b29a      	uxth	r2, r3
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8012fd2:	2300      	movs	r3, #0
 8012fd4:	e011      	b.n	8012ffa <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8012fd6:	697b      	ldr	r3, [r7, #20]
 8012fd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d002      	beq.n	8012fe6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012fe0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012fe4:	e009      	b.n	8012ffa <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8012fe6:	697b      	ldr	r3, [r7, #20]
 8012fe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d002      	beq.n	8012ff6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012ff0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012ff4:	e001      	b.n	8012ffa <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012ff6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012ffa:	4618      	mov	r0, r3
 8012ffc:	3720      	adds	r7, #32
 8012ffe:	46bd      	mov	sp, r7
 8013000:	bd80      	pop	{r7, pc}
 8013002:	bf00      	nop
 8013004:	24000000 	.word	0x24000000
 8013008:	10624dd3 	.word	0x10624dd3
 801300c:	002000c5 	.word	0x002000c5

08013010 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8013010:	b480      	push	{r7}
 8013012:	b085      	sub	sp, #20
 8013014:	af00      	add	r7, sp, #0
 8013016:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013018:	4b22      	ldr	r3, [pc, #136]	; (80130a4 <SDMMC_GetCmdResp7+0x94>)
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	4a22      	ldr	r2, [pc, #136]	; (80130a8 <SDMMC_GetCmdResp7+0x98>)
 801301e:	fba2 2303 	umull	r2, r3, r2, r3
 8013022:	0a5b      	lsrs	r3, r3, #9
 8013024:	f241 3288 	movw	r2, #5000	; 0x1388
 8013028:	fb02 f303 	mul.w	r3, r2, r3
 801302c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	1e5a      	subs	r2, r3, #1
 8013032:	60fa      	str	r2, [r7, #12]
 8013034:	2b00      	cmp	r3, #0
 8013036:	d102      	bne.n	801303e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013038:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801303c:	e02c      	b.n	8013098 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013042:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013044:	68bb      	ldr	r3, [r7, #8]
 8013046:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801304a:	2b00      	cmp	r3, #0
 801304c:	d0ef      	beq.n	801302e <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801304e:	68bb      	ldr	r3, [r7, #8]
 8013050:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013054:	2b00      	cmp	r3, #0
 8013056:	d1ea      	bne.n	801302e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801305c:	f003 0304 	and.w	r3, r3, #4
 8013060:	2b00      	cmp	r3, #0
 8013062:	d004      	beq.n	801306e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	2204      	movs	r2, #4
 8013068:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801306a:	2304      	movs	r3, #4
 801306c:	e014      	b.n	8013098 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013072:	f003 0301 	and.w	r3, r3, #1
 8013076:	2b00      	cmp	r3, #0
 8013078:	d004      	beq.n	8013084 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	2201      	movs	r2, #1
 801307e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013080:	2301      	movs	r3, #1
 8013082:	e009      	b.n	8013098 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801308c:	2b00      	cmp	r3, #0
 801308e:	d002      	beq.n	8013096 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	2240      	movs	r2, #64	; 0x40
 8013094:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8013096:	2300      	movs	r3, #0

}
 8013098:	4618      	mov	r0, r3
 801309a:	3714      	adds	r7, #20
 801309c:	46bd      	mov	sp, r7
 801309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130a2:	4770      	bx	lr
 80130a4:	24000000 	.word	0x24000000
 80130a8:	10624dd3 	.word	0x10624dd3

080130ac <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80130ac:	b480      	push	{r7}
 80130ae:	b085      	sub	sp, #20
 80130b0:	af00      	add	r7, sp, #0
 80130b2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80130b4:	4b11      	ldr	r3, [pc, #68]	; (80130fc <SDMMC_GetCmdError+0x50>)
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	4a11      	ldr	r2, [pc, #68]	; (8013100 <SDMMC_GetCmdError+0x54>)
 80130ba:	fba2 2303 	umull	r2, r3, r2, r3
 80130be:	0a5b      	lsrs	r3, r3, #9
 80130c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80130c4:	fb02 f303 	mul.w	r3, r2, r3
 80130c8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	1e5a      	subs	r2, r3, #1
 80130ce:	60fa      	str	r2, [r7, #12]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d102      	bne.n	80130da <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80130d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80130d8:	e009      	b.n	80130ee <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80130de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d0f1      	beq.n	80130ca <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	4a06      	ldr	r2, [pc, #24]	; (8013104 <SDMMC_GetCmdError+0x58>)
 80130ea:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80130ec:	2300      	movs	r3, #0
}
 80130ee:	4618      	mov	r0, r3
 80130f0:	3714      	adds	r7, #20
 80130f2:	46bd      	mov	sp, r7
 80130f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f8:	4770      	bx	lr
 80130fa:	bf00      	nop
 80130fc:	24000000 	.word	0x24000000
 8013100:	10624dd3 	.word	0x10624dd3
 8013104:	002000c5 	.word	0x002000c5

08013108 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013108:	b084      	sub	sp, #16
 801310a:	b580      	push	{r7, lr}
 801310c:	b084      	sub	sp, #16
 801310e:	af00      	add	r7, sp, #0
 8013110:	6078      	str	r0, [r7, #4]
 8013112:	f107 001c 	add.w	r0, r7, #28
 8013116:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801311a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801311c:	2b01      	cmp	r3, #1
 801311e:	d120      	bne.n	8013162 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013124:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	68da      	ldr	r2, [r3, #12]
 8013130:	4b2a      	ldr	r3, [pc, #168]	; (80131dc <USB_CoreInit+0xd4>)
 8013132:	4013      	ands	r3, r2
 8013134:	687a      	ldr	r2, [r7, #4]
 8013136:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	68db      	ldr	r3, [r3, #12]
 801313c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8013144:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013146:	2b01      	cmp	r3, #1
 8013148:	d105      	bne.n	8013156 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	68db      	ldr	r3, [r3, #12]
 801314e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8013156:	6878      	ldr	r0, [r7, #4]
 8013158:	f001 faf8 	bl	801474c <USB_CoreReset>
 801315c:	4603      	mov	r3, r0
 801315e:	73fb      	strb	r3, [r7, #15]
 8013160:	e01a      	b.n	8013198 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	68db      	ldr	r3, [r3, #12]
 8013166:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801316e:	6878      	ldr	r0, [r7, #4]
 8013170:	f001 faec 	bl	801474c <USB_CoreReset>
 8013174:	4603      	mov	r3, r0
 8013176:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8013178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801317a:	2b00      	cmp	r3, #0
 801317c:	d106      	bne.n	801318c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013182:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	639a      	str	r2, [r3, #56]	; 0x38
 801318a:	e005      	b.n	8013198 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013190:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8013198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801319a:	2b01      	cmp	r3, #1
 801319c:	d116      	bne.n	80131cc <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80131a2:	b29a      	uxth	r2, r3
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80131ac:	4b0c      	ldr	r3, [pc, #48]	; (80131e0 <USB_CoreInit+0xd8>)
 80131ae:	4313      	orrs	r3, r2
 80131b0:	687a      	ldr	r2, [r7, #4]
 80131b2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	689b      	ldr	r3, [r3, #8]
 80131b8:	f043 0206 	orr.w	r2, r3, #6
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	689b      	ldr	r3, [r3, #8]
 80131c4:	f043 0220 	orr.w	r2, r3, #32
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80131cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80131ce:	4618      	mov	r0, r3
 80131d0:	3710      	adds	r7, #16
 80131d2:	46bd      	mov	sp, r7
 80131d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80131d8:	b004      	add	sp, #16
 80131da:	4770      	bx	lr
 80131dc:	ffbdffbf 	.word	0xffbdffbf
 80131e0:	03ee0000 	.word	0x03ee0000

080131e4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80131e4:	b480      	push	{r7}
 80131e6:	b087      	sub	sp, #28
 80131e8:	af00      	add	r7, sp, #0
 80131ea:	60f8      	str	r0, [r7, #12]
 80131ec:	60b9      	str	r1, [r7, #8]
 80131ee:	4613      	mov	r3, r2
 80131f0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80131f2:	79fb      	ldrb	r3, [r7, #7]
 80131f4:	2b02      	cmp	r3, #2
 80131f6:	d165      	bne.n	80132c4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80131f8:	68bb      	ldr	r3, [r7, #8]
 80131fa:	4a41      	ldr	r2, [pc, #260]	; (8013300 <USB_SetTurnaroundTime+0x11c>)
 80131fc:	4293      	cmp	r3, r2
 80131fe:	d906      	bls.n	801320e <USB_SetTurnaroundTime+0x2a>
 8013200:	68bb      	ldr	r3, [r7, #8]
 8013202:	4a40      	ldr	r2, [pc, #256]	; (8013304 <USB_SetTurnaroundTime+0x120>)
 8013204:	4293      	cmp	r3, r2
 8013206:	d202      	bcs.n	801320e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8013208:	230f      	movs	r3, #15
 801320a:	617b      	str	r3, [r7, #20]
 801320c:	e062      	b.n	80132d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801320e:	68bb      	ldr	r3, [r7, #8]
 8013210:	4a3c      	ldr	r2, [pc, #240]	; (8013304 <USB_SetTurnaroundTime+0x120>)
 8013212:	4293      	cmp	r3, r2
 8013214:	d306      	bcc.n	8013224 <USB_SetTurnaroundTime+0x40>
 8013216:	68bb      	ldr	r3, [r7, #8]
 8013218:	4a3b      	ldr	r2, [pc, #236]	; (8013308 <USB_SetTurnaroundTime+0x124>)
 801321a:	4293      	cmp	r3, r2
 801321c:	d202      	bcs.n	8013224 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801321e:	230e      	movs	r3, #14
 8013220:	617b      	str	r3, [r7, #20]
 8013222:	e057      	b.n	80132d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8013224:	68bb      	ldr	r3, [r7, #8]
 8013226:	4a38      	ldr	r2, [pc, #224]	; (8013308 <USB_SetTurnaroundTime+0x124>)
 8013228:	4293      	cmp	r3, r2
 801322a:	d306      	bcc.n	801323a <USB_SetTurnaroundTime+0x56>
 801322c:	68bb      	ldr	r3, [r7, #8]
 801322e:	4a37      	ldr	r2, [pc, #220]	; (801330c <USB_SetTurnaroundTime+0x128>)
 8013230:	4293      	cmp	r3, r2
 8013232:	d202      	bcs.n	801323a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8013234:	230d      	movs	r3, #13
 8013236:	617b      	str	r3, [r7, #20]
 8013238:	e04c      	b.n	80132d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801323a:	68bb      	ldr	r3, [r7, #8]
 801323c:	4a33      	ldr	r2, [pc, #204]	; (801330c <USB_SetTurnaroundTime+0x128>)
 801323e:	4293      	cmp	r3, r2
 8013240:	d306      	bcc.n	8013250 <USB_SetTurnaroundTime+0x6c>
 8013242:	68bb      	ldr	r3, [r7, #8]
 8013244:	4a32      	ldr	r2, [pc, #200]	; (8013310 <USB_SetTurnaroundTime+0x12c>)
 8013246:	4293      	cmp	r3, r2
 8013248:	d802      	bhi.n	8013250 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801324a:	230c      	movs	r3, #12
 801324c:	617b      	str	r3, [r7, #20]
 801324e:	e041      	b.n	80132d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8013250:	68bb      	ldr	r3, [r7, #8]
 8013252:	4a2f      	ldr	r2, [pc, #188]	; (8013310 <USB_SetTurnaroundTime+0x12c>)
 8013254:	4293      	cmp	r3, r2
 8013256:	d906      	bls.n	8013266 <USB_SetTurnaroundTime+0x82>
 8013258:	68bb      	ldr	r3, [r7, #8]
 801325a:	4a2e      	ldr	r2, [pc, #184]	; (8013314 <USB_SetTurnaroundTime+0x130>)
 801325c:	4293      	cmp	r3, r2
 801325e:	d802      	bhi.n	8013266 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8013260:	230b      	movs	r3, #11
 8013262:	617b      	str	r3, [r7, #20]
 8013264:	e036      	b.n	80132d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8013266:	68bb      	ldr	r3, [r7, #8]
 8013268:	4a2a      	ldr	r2, [pc, #168]	; (8013314 <USB_SetTurnaroundTime+0x130>)
 801326a:	4293      	cmp	r3, r2
 801326c:	d906      	bls.n	801327c <USB_SetTurnaroundTime+0x98>
 801326e:	68bb      	ldr	r3, [r7, #8]
 8013270:	4a29      	ldr	r2, [pc, #164]	; (8013318 <USB_SetTurnaroundTime+0x134>)
 8013272:	4293      	cmp	r3, r2
 8013274:	d802      	bhi.n	801327c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8013276:	230a      	movs	r3, #10
 8013278:	617b      	str	r3, [r7, #20]
 801327a:	e02b      	b.n	80132d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801327c:	68bb      	ldr	r3, [r7, #8]
 801327e:	4a26      	ldr	r2, [pc, #152]	; (8013318 <USB_SetTurnaroundTime+0x134>)
 8013280:	4293      	cmp	r3, r2
 8013282:	d906      	bls.n	8013292 <USB_SetTurnaroundTime+0xae>
 8013284:	68bb      	ldr	r3, [r7, #8]
 8013286:	4a25      	ldr	r2, [pc, #148]	; (801331c <USB_SetTurnaroundTime+0x138>)
 8013288:	4293      	cmp	r3, r2
 801328a:	d202      	bcs.n	8013292 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801328c:	2309      	movs	r3, #9
 801328e:	617b      	str	r3, [r7, #20]
 8013290:	e020      	b.n	80132d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8013292:	68bb      	ldr	r3, [r7, #8]
 8013294:	4a21      	ldr	r2, [pc, #132]	; (801331c <USB_SetTurnaroundTime+0x138>)
 8013296:	4293      	cmp	r3, r2
 8013298:	d306      	bcc.n	80132a8 <USB_SetTurnaroundTime+0xc4>
 801329a:	68bb      	ldr	r3, [r7, #8]
 801329c:	4a20      	ldr	r2, [pc, #128]	; (8013320 <USB_SetTurnaroundTime+0x13c>)
 801329e:	4293      	cmp	r3, r2
 80132a0:	d802      	bhi.n	80132a8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80132a2:	2308      	movs	r3, #8
 80132a4:	617b      	str	r3, [r7, #20]
 80132a6:	e015      	b.n	80132d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80132a8:	68bb      	ldr	r3, [r7, #8]
 80132aa:	4a1d      	ldr	r2, [pc, #116]	; (8013320 <USB_SetTurnaroundTime+0x13c>)
 80132ac:	4293      	cmp	r3, r2
 80132ae:	d906      	bls.n	80132be <USB_SetTurnaroundTime+0xda>
 80132b0:	68bb      	ldr	r3, [r7, #8]
 80132b2:	4a1c      	ldr	r2, [pc, #112]	; (8013324 <USB_SetTurnaroundTime+0x140>)
 80132b4:	4293      	cmp	r3, r2
 80132b6:	d202      	bcs.n	80132be <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80132b8:	2307      	movs	r3, #7
 80132ba:	617b      	str	r3, [r7, #20]
 80132bc:	e00a      	b.n	80132d4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80132be:	2306      	movs	r3, #6
 80132c0:	617b      	str	r3, [r7, #20]
 80132c2:	e007      	b.n	80132d4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80132c4:	79fb      	ldrb	r3, [r7, #7]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d102      	bne.n	80132d0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80132ca:	2309      	movs	r3, #9
 80132cc:	617b      	str	r3, [r7, #20]
 80132ce:	e001      	b.n	80132d4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80132d0:	2309      	movs	r3, #9
 80132d2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	68db      	ldr	r3, [r3, #12]
 80132d8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	68da      	ldr	r2, [r3, #12]
 80132e4:	697b      	ldr	r3, [r7, #20]
 80132e6:	029b      	lsls	r3, r3, #10
 80132e8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80132ec:	431a      	orrs	r2, r3
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80132f2:	2300      	movs	r3, #0
}
 80132f4:	4618      	mov	r0, r3
 80132f6:	371c      	adds	r7, #28
 80132f8:	46bd      	mov	sp, r7
 80132fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132fe:	4770      	bx	lr
 8013300:	00d8acbf 	.word	0x00d8acbf
 8013304:	00e4e1c0 	.word	0x00e4e1c0
 8013308:	00f42400 	.word	0x00f42400
 801330c:	01067380 	.word	0x01067380
 8013310:	011a499f 	.word	0x011a499f
 8013314:	01312cff 	.word	0x01312cff
 8013318:	014ca43f 	.word	0x014ca43f
 801331c:	016e3600 	.word	0x016e3600
 8013320:	01a6ab1f 	.word	0x01a6ab1f
 8013324:	01e84800 	.word	0x01e84800

08013328 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013328:	b480      	push	{r7}
 801332a:	b083      	sub	sp, #12
 801332c:	af00      	add	r7, sp, #0
 801332e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	689b      	ldr	r3, [r3, #8]
 8013334:	f043 0201 	orr.w	r2, r3, #1
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801333c:	2300      	movs	r3, #0
}
 801333e:	4618      	mov	r0, r3
 8013340:	370c      	adds	r7, #12
 8013342:	46bd      	mov	sp, r7
 8013344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013348:	4770      	bx	lr

0801334a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801334a:	b480      	push	{r7}
 801334c:	b083      	sub	sp, #12
 801334e:	af00      	add	r7, sp, #0
 8013350:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	689b      	ldr	r3, [r3, #8]
 8013356:	f023 0201 	bic.w	r2, r3, #1
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801335e:	2300      	movs	r3, #0
}
 8013360:	4618      	mov	r0, r3
 8013362:	370c      	adds	r7, #12
 8013364:	46bd      	mov	sp, r7
 8013366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801336a:	4770      	bx	lr

0801336c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801336c:	b580      	push	{r7, lr}
 801336e:	b084      	sub	sp, #16
 8013370:	af00      	add	r7, sp, #0
 8013372:	6078      	str	r0, [r7, #4]
 8013374:	460b      	mov	r3, r1
 8013376:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8013378:	2300      	movs	r3, #0
 801337a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	68db      	ldr	r3, [r3, #12]
 8013380:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8013388:	78fb      	ldrb	r3, [r7, #3]
 801338a:	2b01      	cmp	r3, #1
 801338c:	d115      	bne.n	80133ba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	68db      	ldr	r3, [r3, #12]
 8013392:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801339a:	2001      	movs	r0, #1
 801339c:	f7f0 fcf8 	bl	8003d90 <HAL_Delay>
      ms++;
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	3301      	adds	r3, #1
 80133a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80133a6:	6878      	ldr	r0, [r7, #4]
 80133a8:	f001 f93f 	bl	801462a <USB_GetMode>
 80133ac:	4603      	mov	r3, r0
 80133ae:	2b01      	cmp	r3, #1
 80133b0:	d01e      	beq.n	80133f0 <USB_SetCurrentMode+0x84>
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	2b31      	cmp	r3, #49	; 0x31
 80133b6:	d9f0      	bls.n	801339a <USB_SetCurrentMode+0x2e>
 80133b8:	e01a      	b.n	80133f0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80133ba:	78fb      	ldrb	r3, [r7, #3]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d115      	bne.n	80133ec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	68db      	ldr	r3, [r3, #12]
 80133c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80133cc:	2001      	movs	r0, #1
 80133ce:	f7f0 fcdf 	bl	8003d90 <HAL_Delay>
      ms++;
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	3301      	adds	r3, #1
 80133d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80133d8:	6878      	ldr	r0, [r7, #4]
 80133da:	f001 f926 	bl	801462a <USB_GetMode>
 80133de:	4603      	mov	r3, r0
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d005      	beq.n	80133f0 <USB_SetCurrentMode+0x84>
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	2b31      	cmp	r3, #49	; 0x31
 80133e8:	d9f0      	bls.n	80133cc <USB_SetCurrentMode+0x60>
 80133ea:	e001      	b.n	80133f0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80133ec:	2301      	movs	r3, #1
 80133ee:	e005      	b.n	80133fc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	2b32      	cmp	r3, #50	; 0x32
 80133f4:	d101      	bne.n	80133fa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80133f6:	2301      	movs	r3, #1
 80133f8:	e000      	b.n	80133fc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80133fa:	2300      	movs	r3, #0
}
 80133fc:	4618      	mov	r0, r3
 80133fe:	3710      	adds	r7, #16
 8013400:	46bd      	mov	sp, r7
 8013402:	bd80      	pop	{r7, pc}

08013404 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013404:	b084      	sub	sp, #16
 8013406:	b580      	push	{r7, lr}
 8013408:	b086      	sub	sp, #24
 801340a:	af00      	add	r7, sp, #0
 801340c:	6078      	str	r0, [r7, #4]
 801340e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8013412:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8013416:	2300      	movs	r3, #0
 8013418:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801341e:	2300      	movs	r3, #0
 8013420:	613b      	str	r3, [r7, #16]
 8013422:	e009      	b.n	8013438 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8013424:	687a      	ldr	r2, [r7, #4]
 8013426:	693b      	ldr	r3, [r7, #16]
 8013428:	3340      	adds	r3, #64	; 0x40
 801342a:	009b      	lsls	r3, r3, #2
 801342c:	4413      	add	r3, r2
 801342e:	2200      	movs	r2, #0
 8013430:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8013432:	693b      	ldr	r3, [r7, #16]
 8013434:	3301      	adds	r3, #1
 8013436:	613b      	str	r3, [r7, #16]
 8013438:	693b      	ldr	r3, [r7, #16]
 801343a:	2b0e      	cmp	r3, #14
 801343c:	d9f2      	bls.n	8013424 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801343e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013440:	2b00      	cmp	r3, #0
 8013442:	d11c      	bne.n	801347e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801344a:	685b      	ldr	r3, [r3, #4]
 801344c:	68fa      	ldr	r2, [r7, #12]
 801344e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013452:	f043 0302 	orr.w	r3, r3, #2
 8013456:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801345c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	601a      	str	r2, [r3, #0]
 801347c:	e005      	b.n	801348a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013482:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013490:	461a      	mov	r2, r3
 8013492:	2300      	movs	r3, #0
 8013494:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801349c:	4619      	mov	r1, r3
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80134a4:	461a      	mov	r2, r3
 80134a6:	680b      	ldr	r3, [r1, #0]
 80134a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80134aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134ac:	2b01      	cmp	r3, #1
 80134ae:	d10c      	bne.n	80134ca <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80134b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d104      	bne.n	80134c0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80134b6:	2100      	movs	r1, #0
 80134b8:	6878      	ldr	r0, [r7, #4]
 80134ba:	f000 f965 	bl	8013788 <USB_SetDevSpeed>
 80134be:	e008      	b.n	80134d2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80134c0:	2101      	movs	r1, #1
 80134c2:	6878      	ldr	r0, [r7, #4]
 80134c4:	f000 f960 	bl	8013788 <USB_SetDevSpeed>
 80134c8:	e003      	b.n	80134d2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80134ca:	2103      	movs	r1, #3
 80134cc:	6878      	ldr	r0, [r7, #4]
 80134ce:	f000 f95b 	bl	8013788 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80134d2:	2110      	movs	r1, #16
 80134d4:	6878      	ldr	r0, [r7, #4]
 80134d6:	f000 f8f3 	bl	80136c0 <USB_FlushTxFifo>
 80134da:	4603      	mov	r3, r0
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d001      	beq.n	80134e4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80134e0:	2301      	movs	r3, #1
 80134e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80134e4:	6878      	ldr	r0, [r7, #4]
 80134e6:	f000 f91f 	bl	8013728 <USB_FlushRxFifo>
 80134ea:	4603      	mov	r3, r0
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d001      	beq.n	80134f4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80134f0:	2301      	movs	r3, #1
 80134f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80134fa:	461a      	mov	r2, r3
 80134fc:	2300      	movs	r3, #0
 80134fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013506:	461a      	mov	r2, r3
 8013508:	2300      	movs	r3, #0
 801350a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013512:	461a      	mov	r2, r3
 8013514:	2300      	movs	r3, #0
 8013516:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013518:	2300      	movs	r3, #0
 801351a:	613b      	str	r3, [r7, #16]
 801351c:	e043      	b.n	80135a6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801351e:	693b      	ldr	r3, [r7, #16]
 8013520:	015a      	lsls	r2, r3, #5
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	4413      	add	r3, r2
 8013526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013530:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013534:	d118      	bne.n	8013568 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8013536:	693b      	ldr	r3, [r7, #16]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d10a      	bne.n	8013552 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801353c:	693b      	ldr	r3, [r7, #16]
 801353e:	015a      	lsls	r2, r3, #5
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	4413      	add	r3, r2
 8013544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013548:	461a      	mov	r2, r3
 801354a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801354e:	6013      	str	r3, [r2, #0]
 8013550:	e013      	b.n	801357a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8013552:	693b      	ldr	r3, [r7, #16]
 8013554:	015a      	lsls	r2, r3, #5
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	4413      	add	r3, r2
 801355a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801355e:	461a      	mov	r2, r3
 8013560:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013564:	6013      	str	r3, [r2, #0]
 8013566:	e008      	b.n	801357a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8013568:	693b      	ldr	r3, [r7, #16]
 801356a:	015a      	lsls	r2, r3, #5
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	4413      	add	r3, r2
 8013570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013574:	461a      	mov	r2, r3
 8013576:	2300      	movs	r3, #0
 8013578:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801357a:	693b      	ldr	r3, [r7, #16]
 801357c:	015a      	lsls	r2, r3, #5
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	4413      	add	r3, r2
 8013582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013586:	461a      	mov	r2, r3
 8013588:	2300      	movs	r3, #0
 801358a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801358c:	693b      	ldr	r3, [r7, #16]
 801358e:	015a      	lsls	r2, r3, #5
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	4413      	add	r3, r2
 8013594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013598:	461a      	mov	r2, r3
 801359a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801359e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80135a0:	693b      	ldr	r3, [r7, #16]
 80135a2:	3301      	adds	r3, #1
 80135a4:	613b      	str	r3, [r7, #16]
 80135a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135a8:	693a      	ldr	r2, [r7, #16]
 80135aa:	429a      	cmp	r2, r3
 80135ac:	d3b7      	bcc.n	801351e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80135ae:	2300      	movs	r3, #0
 80135b0:	613b      	str	r3, [r7, #16]
 80135b2:	e043      	b.n	801363c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80135b4:	693b      	ldr	r3, [r7, #16]
 80135b6:	015a      	lsls	r2, r3, #5
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	4413      	add	r3, r2
 80135bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80135c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80135ca:	d118      	bne.n	80135fe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80135cc:	693b      	ldr	r3, [r7, #16]
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d10a      	bne.n	80135e8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80135d2:	693b      	ldr	r3, [r7, #16]
 80135d4:	015a      	lsls	r2, r3, #5
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	4413      	add	r3, r2
 80135da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135de:	461a      	mov	r2, r3
 80135e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80135e4:	6013      	str	r3, [r2, #0]
 80135e6:	e013      	b.n	8013610 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80135e8:	693b      	ldr	r3, [r7, #16]
 80135ea:	015a      	lsls	r2, r3, #5
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	4413      	add	r3, r2
 80135f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135f4:	461a      	mov	r2, r3
 80135f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80135fa:	6013      	str	r3, [r2, #0]
 80135fc:	e008      	b.n	8013610 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80135fe:	693b      	ldr	r3, [r7, #16]
 8013600:	015a      	lsls	r2, r3, #5
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	4413      	add	r3, r2
 8013606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801360a:	461a      	mov	r2, r3
 801360c:	2300      	movs	r3, #0
 801360e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8013610:	693b      	ldr	r3, [r7, #16]
 8013612:	015a      	lsls	r2, r3, #5
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	4413      	add	r3, r2
 8013618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801361c:	461a      	mov	r2, r3
 801361e:	2300      	movs	r3, #0
 8013620:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8013622:	693b      	ldr	r3, [r7, #16]
 8013624:	015a      	lsls	r2, r3, #5
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	4413      	add	r3, r2
 801362a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801362e:	461a      	mov	r2, r3
 8013630:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013634:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013636:	693b      	ldr	r3, [r7, #16]
 8013638:	3301      	adds	r3, #1
 801363a:	613b      	str	r3, [r7, #16]
 801363c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801363e:	693a      	ldr	r2, [r7, #16]
 8013640:	429a      	cmp	r2, r3
 8013642:	d3b7      	bcc.n	80135b4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801364a:	691b      	ldr	r3, [r3, #16]
 801364c:	68fa      	ldr	r2, [r7, #12]
 801364e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013652:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013656:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	2200      	movs	r2, #0
 801365c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8013664:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8013666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013668:	2b00      	cmp	r3, #0
 801366a:	d105      	bne.n	8013678 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	699b      	ldr	r3, [r3, #24]
 8013670:	f043 0210 	orr.w	r2, r3, #16
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	699a      	ldr	r2, [r3, #24]
 801367c:	4b0e      	ldr	r3, [pc, #56]	; (80136b8 <USB_DevInit+0x2b4>)
 801367e:	4313      	orrs	r3, r2
 8013680:	687a      	ldr	r2, [r7, #4]
 8013682:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8013684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013686:	2b00      	cmp	r3, #0
 8013688:	d005      	beq.n	8013696 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	699b      	ldr	r3, [r3, #24]
 801368e:	f043 0208 	orr.w	r2, r3, #8
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8013696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013698:	2b01      	cmp	r3, #1
 801369a:	d105      	bne.n	80136a8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	699a      	ldr	r2, [r3, #24]
 80136a0:	4b06      	ldr	r3, [pc, #24]	; (80136bc <USB_DevInit+0x2b8>)
 80136a2:	4313      	orrs	r3, r2
 80136a4:	687a      	ldr	r2, [r7, #4]
 80136a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80136a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80136aa:	4618      	mov	r0, r3
 80136ac:	3718      	adds	r7, #24
 80136ae:	46bd      	mov	sp, r7
 80136b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80136b4:	b004      	add	sp, #16
 80136b6:	4770      	bx	lr
 80136b8:	803c3800 	.word	0x803c3800
 80136bc:	40000004 	.word	0x40000004

080136c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80136c0:	b480      	push	{r7}
 80136c2:	b085      	sub	sp, #20
 80136c4:	af00      	add	r7, sp, #0
 80136c6:	6078      	str	r0, [r7, #4]
 80136c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80136ca:	2300      	movs	r3, #0
 80136cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	3301      	adds	r3, #1
 80136d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	4a13      	ldr	r2, [pc, #76]	; (8013724 <USB_FlushTxFifo+0x64>)
 80136d8:	4293      	cmp	r3, r2
 80136da:	d901      	bls.n	80136e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80136dc:	2303      	movs	r3, #3
 80136de:	e01b      	b.n	8013718 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	691b      	ldr	r3, [r3, #16]
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	daf2      	bge.n	80136ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80136e8:	2300      	movs	r3, #0
 80136ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80136ec:	683b      	ldr	r3, [r7, #0]
 80136ee:	019b      	lsls	r3, r3, #6
 80136f0:	f043 0220 	orr.w	r2, r3, #32
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	3301      	adds	r3, #1
 80136fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	4a08      	ldr	r2, [pc, #32]	; (8013724 <USB_FlushTxFifo+0x64>)
 8013702:	4293      	cmp	r3, r2
 8013704:	d901      	bls.n	801370a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8013706:	2303      	movs	r3, #3
 8013708:	e006      	b.n	8013718 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	691b      	ldr	r3, [r3, #16]
 801370e:	f003 0320 	and.w	r3, r3, #32
 8013712:	2b20      	cmp	r3, #32
 8013714:	d0f0      	beq.n	80136f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8013716:	2300      	movs	r3, #0
}
 8013718:	4618      	mov	r0, r3
 801371a:	3714      	adds	r7, #20
 801371c:	46bd      	mov	sp, r7
 801371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013722:	4770      	bx	lr
 8013724:	00030d40 	.word	0x00030d40

08013728 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8013728:	b480      	push	{r7}
 801372a:	b085      	sub	sp, #20
 801372c:	af00      	add	r7, sp, #0
 801372e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013730:	2300      	movs	r3, #0
 8013732:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	3301      	adds	r3, #1
 8013738:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	4a11      	ldr	r2, [pc, #68]	; (8013784 <USB_FlushRxFifo+0x5c>)
 801373e:	4293      	cmp	r3, r2
 8013740:	d901      	bls.n	8013746 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8013742:	2303      	movs	r3, #3
 8013744:	e018      	b.n	8013778 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	691b      	ldr	r3, [r3, #16]
 801374a:	2b00      	cmp	r3, #0
 801374c:	daf2      	bge.n	8013734 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801374e:	2300      	movs	r3, #0
 8013750:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	2210      	movs	r2, #16
 8013756:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	3301      	adds	r3, #1
 801375c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	4a08      	ldr	r2, [pc, #32]	; (8013784 <USB_FlushRxFifo+0x5c>)
 8013762:	4293      	cmp	r3, r2
 8013764:	d901      	bls.n	801376a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8013766:	2303      	movs	r3, #3
 8013768:	e006      	b.n	8013778 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	691b      	ldr	r3, [r3, #16]
 801376e:	f003 0310 	and.w	r3, r3, #16
 8013772:	2b10      	cmp	r3, #16
 8013774:	d0f0      	beq.n	8013758 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8013776:	2300      	movs	r3, #0
}
 8013778:	4618      	mov	r0, r3
 801377a:	3714      	adds	r7, #20
 801377c:	46bd      	mov	sp, r7
 801377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013782:	4770      	bx	lr
 8013784:	00030d40 	.word	0x00030d40

08013788 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8013788:	b480      	push	{r7}
 801378a:	b085      	sub	sp, #20
 801378c:	af00      	add	r7, sp, #0
 801378e:	6078      	str	r0, [r7, #4]
 8013790:	460b      	mov	r3, r1
 8013792:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801379e:	681a      	ldr	r2, [r3, #0]
 80137a0:	78fb      	ldrb	r3, [r7, #3]
 80137a2:	68f9      	ldr	r1, [r7, #12]
 80137a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80137a8:	4313      	orrs	r3, r2
 80137aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80137ac:	2300      	movs	r3, #0
}
 80137ae:	4618      	mov	r0, r3
 80137b0:	3714      	adds	r7, #20
 80137b2:	46bd      	mov	sp, r7
 80137b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b8:	4770      	bx	lr

080137ba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80137ba:	b480      	push	{r7}
 80137bc:	b087      	sub	sp, #28
 80137be:	af00      	add	r7, sp, #0
 80137c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80137c6:	693b      	ldr	r3, [r7, #16]
 80137c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80137cc:	689b      	ldr	r3, [r3, #8]
 80137ce:	f003 0306 	and.w	r3, r3, #6
 80137d2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d102      	bne.n	80137e0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80137da:	2300      	movs	r3, #0
 80137dc:	75fb      	strb	r3, [r7, #23]
 80137de:	e00a      	b.n	80137f6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	2b02      	cmp	r3, #2
 80137e4:	d002      	beq.n	80137ec <USB_GetDevSpeed+0x32>
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	2b06      	cmp	r3, #6
 80137ea:	d102      	bne.n	80137f2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80137ec:	2302      	movs	r3, #2
 80137ee:	75fb      	strb	r3, [r7, #23]
 80137f0:	e001      	b.n	80137f6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80137f2:	230f      	movs	r3, #15
 80137f4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80137f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80137f8:	4618      	mov	r0, r3
 80137fa:	371c      	adds	r7, #28
 80137fc:	46bd      	mov	sp, r7
 80137fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013802:	4770      	bx	lr

08013804 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013804:	b480      	push	{r7}
 8013806:	b085      	sub	sp, #20
 8013808:	af00      	add	r7, sp, #0
 801380a:	6078      	str	r0, [r7, #4]
 801380c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013812:	683b      	ldr	r3, [r7, #0]
 8013814:	781b      	ldrb	r3, [r3, #0]
 8013816:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013818:	683b      	ldr	r3, [r7, #0]
 801381a:	785b      	ldrb	r3, [r3, #1]
 801381c:	2b01      	cmp	r3, #1
 801381e:	d139      	bne.n	8013894 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013826:	69da      	ldr	r2, [r3, #28]
 8013828:	683b      	ldr	r3, [r7, #0]
 801382a:	781b      	ldrb	r3, [r3, #0]
 801382c:	f003 030f 	and.w	r3, r3, #15
 8013830:	2101      	movs	r1, #1
 8013832:	fa01 f303 	lsl.w	r3, r1, r3
 8013836:	b29b      	uxth	r3, r3
 8013838:	68f9      	ldr	r1, [r7, #12]
 801383a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801383e:	4313      	orrs	r3, r2
 8013840:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8013842:	68bb      	ldr	r3, [r7, #8]
 8013844:	015a      	lsls	r2, r3, #5
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	4413      	add	r3, r2
 801384a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013854:	2b00      	cmp	r3, #0
 8013856:	d153      	bne.n	8013900 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013858:	68bb      	ldr	r3, [r7, #8]
 801385a:	015a      	lsls	r2, r3, #5
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	4413      	add	r3, r2
 8013860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013864:	681a      	ldr	r2, [r3, #0]
 8013866:	683b      	ldr	r3, [r7, #0]
 8013868:	689b      	ldr	r3, [r3, #8]
 801386a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801386e:	683b      	ldr	r3, [r7, #0]
 8013870:	791b      	ldrb	r3, [r3, #4]
 8013872:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013874:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013876:	68bb      	ldr	r3, [r7, #8]
 8013878:	059b      	lsls	r3, r3, #22
 801387a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801387c:	431a      	orrs	r2, r3
 801387e:	68bb      	ldr	r3, [r7, #8]
 8013880:	0159      	lsls	r1, r3, #5
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	440b      	add	r3, r1
 8013886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801388a:	4619      	mov	r1, r3
 801388c:	4b20      	ldr	r3, [pc, #128]	; (8013910 <USB_ActivateEndpoint+0x10c>)
 801388e:	4313      	orrs	r3, r2
 8013890:	600b      	str	r3, [r1, #0]
 8013892:	e035      	b.n	8013900 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801389a:	69da      	ldr	r2, [r3, #28]
 801389c:	683b      	ldr	r3, [r7, #0]
 801389e:	781b      	ldrb	r3, [r3, #0]
 80138a0:	f003 030f 	and.w	r3, r3, #15
 80138a4:	2101      	movs	r1, #1
 80138a6:	fa01 f303 	lsl.w	r3, r1, r3
 80138aa:	041b      	lsls	r3, r3, #16
 80138ac:	68f9      	ldr	r1, [r7, #12]
 80138ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80138b2:	4313      	orrs	r3, r2
 80138b4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80138b6:	68bb      	ldr	r3, [r7, #8]
 80138b8:	015a      	lsls	r2, r3, #5
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	4413      	add	r3, r2
 80138be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d119      	bne.n	8013900 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80138cc:	68bb      	ldr	r3, [r7, #8]
 80138ce:	015a      	lsls	r2, r3, #5
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	4413      	add	r3, r2
 80138d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138d8:	681a      	ldr	r2, [r3, #0]
 80138da:	683b      	ldr	r3, [r7, #0]
 80138dc:	689b      	ldr	r3, [r3, #8]
 80138de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80138e2:	683b      	ldr	r3, [r7, #0]
 80138e4:	791b      	ldrb	r3, [r3, #4]
 80138e6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80138e8:	430b      	orrs	r3, r1
 80138ea:	431a      	orrs	r2, r3
 80138ec:	68bb      	ldr	r3, [r7, #8]
 80138ee:	0159      	lsls	r1, r3, #5
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	440b      	add	r3, r1
 80138f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138f8:	4619      	mov	r1, r3
 80138fa:	4b05      	ldr	r3, [pc, #20]	; (8013910 <USB_ActivateEndpoint+0x10c>)
 80138fc:	4313      	orrs	r3, r2
 80138fe:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8013900:	2300      	movs	r3, #0
}
 8013902:	4618      	mov	r0, r3
 8013904:	3714      	adds	r7, #20
 8013906:	46bd      	mov	sp, r7
 8013908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801390c:	4770      	bx	lr
 801390e:	bf00      	nop
 8013910:	10008000 	.word	0x10008000

08013914 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013914:	b480      	push	{r7}
 8013916:	b085      	sub	sp, #20
 8013918:	af00      	add	r7, sp, #0
 801391a:	6078      	str	r0, [r7, #4]
 801391c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013922:	683b      	ldr	r3, [r7, #0]
 8013924:	781b      	ldrb	r3, [r3, #0]
 8013926:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8013928:	683b      	ldr	r3, [r7, #0]
 801392a:	785b      	ldrb	r3, [r3, #1]
 801392c:	2b01      	cmp	r3, #1
 801392e:	d161      	bne.n	80139f4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013930:	68bb      	ldr	r3, [r7, #8]
 8013932:	015a      	lsls	r2, r3, #5
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	4413      	add	r3, r2
 8013938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013942:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013946:	d11f      	bne.n	8013988 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8013948:	68bb      	ldr	r3, [r7, #8]
 801394a:	015a      	lsls	r2, r3, #5
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	4413      	add	r3, r2
 8013950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	68ba      	ldr	r2, [r7, #8]
 8013958:	0151      	lsls	r1, r2, #5
 801395a:	68fa      	ldr	r2, [r7, #12]
 801395c:	440a      	add	r2, r1
 801395e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013962:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013966:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8013968:	68bb      	ldr	r3, [r7, #8]
 801396a:	015a      	lsls	r2, r3, #5
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	4413      	add	r3, r2
 8013970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013974:	681b      	ldr	r3, [r3, #0]
 8013976:	68ba      	ldr	r2, [r7, #8]
 8013978:	0151      	lsls	r1, r2, #5
 801397a:	68fa      	ldr	r2, [r7, #12]
 801397c:	440a      	add	r2, r1
 801397e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013982:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013986:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801398e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013990:	683b      	ldr	r3, [r7, #0]
 8013992:	781b      	ldrb	r3, [r3, #0]
 8013994:	f003 030f 	and.w	r3, r3, #15
 8013998:	2101      	movs	r1, #1
 801399a:	fa01 f303 	lsl.w	r3, r1, r3
 801399e:	b29b      	uxth	r3, r3
 80139a0:	43db      	mvns	r3, r3
 80139a2:	68f9      	ldr	r1, [r7, #12]
 80139a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80139a8:	4013      	ands	r3, r2
 80139aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80139b2:	69da      	ldr	r2, [r3, #28]
 80139b4:	683b      	ldr	r3, [r7, #0]
 80139b6:	781b      	ldrb	r3, [r3, #0]
 80139b8:	f003 030f 	and.w	r3, r3, #15
 80139bc:	2101      	movs	r1, #1
 80139be:	fa01 f303 	lsl.w	r3, r1, r3
 80139c2:	b29b      	uxth	r3, r3
 80139c4:	43db      	mvns	r3, r3
 80139c6:	68f9      	ldr	r1, [r7, #12]
 80139c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80139cc:	4013      	ands	r3, r2
 80139ce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80139d0:	68bb      	ldr	r3, [r7, #8]
 80139d2:	015a      	lsls	r2, r3, #5
 80139d4:	68fb      	ldr	r3, [r7, #12]
 80139d6:	4413      	add	r3, r2
 80139d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139dc:	681a      	ldr	r2, [r3, #0]
 80139de:	68bb      	ldr	r3, [r7, #8]
 80139e0:	0159      	lsls	r1, r3, #5
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	440b      	add	r3, r1
 80139e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139ea:	4619      	mov	r1, r3
 80139ec:	4b35      	ldr	r3, [pc, #212]	; (8013ac4 <USB_DeactivateEndpoint+0x1b0>)
 80139ee:	4013      	ands	r3, r2
 80139f0:	600b      	str	r3, [r1, #0]
 80139f2:	e060      	b.n	8013ab6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80139f4:	68bb      	ldr	r3, [r7, #8]
 80139f6:	015a      	lsls	r2, r3, #5
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	4413      	add	r3, r2
 80139fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013a06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013a0a:	d11f      	bne.n	8013a4c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8013a0c:	68bb      	ldr	r3, [r7, #8]
 8013a0e:	015a      	lsls	r2, r3, #5
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	4413      	add	r3, r2
 8013a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	68ba      	ldr	r2, [r7, #8]
 8013a1c:	0151      	lsls	r1, r2, #5
 8013a1e:	68fa      	ldr	r2, [r7, #12]
 8013a20:	440a      	add	r2, r1
 8013a22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013a26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013a2a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8013a2c:	68bb      	ldr	r3, [r7, #8]
 8013a2e:	015a      	lsls	r2, r3, #5
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	4413      	add	r3, r2
 8013a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	68ba      	ldr	r2, [r7, #8]
 8013a3c:	0151      	lsls	r1, r2, #5
 8013a3e:	68fa      	ldr	r2, [r7, #12]
 8013a40:	440a      	add	r2, r1
 8013a42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013a46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013a4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013a54:	683b      	ldr	r3, [r7, #0]
 8013a56:	781b      	ldrb	r3, [r3, #0]
 8013a58:	f003 030f 	and.w	r3, r3, #15
 8013a5c:	2101      	movs	r1, #1
 8013a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8013a62:	041b      	lsls	r3, r3, #16
 8013a64:	43db      	mvns	r3, r3
 8013a66:	68f9      	ldr	r1, [r7, #12]
 8013a68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013a6c:	4013      	ands	r3, r2
 8013a6e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a76:	69da      	ldr	r2, [r3, #28]
 8013a78:	683b      	ldr	r3, [r7, #0]
 8013a7a:	781b      	ldrb	r3, [r3, #0]
 8013a7c:	f003 030f 	and.w	r3, r3, #15
 8013a80:	2101      	movs	r1, #1
 8013a82:	fa01 f303 	lsl.w	r3, r1, r3
 8013a86:	041b      	lsls	r3, r3, #16
 8013a88:	43db      	mvns	r3, r3
 8013a8a:	68f9      	ldr	r1, [r7, #12]
 8013a8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013a90:	4013      	ands	r3, r2
 8013a92:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013a94:	68bb      	ldr	r3, [r7, #8]
 8013a96:	015a      	lsls	r2, r3, #5
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	4413      	add	r3, r2
 8013a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013aa0:	681a      	ldr	r2, [r3, #0]
 8013aa2:	68bb      	ldr	r3, [r7, #8]
 8013aa4:	0159      	lsls	r1, r3, #5
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	440b      	add	r3, r1
 8013aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013aae:	4619      	mov	r1, r3
 8013ab0:	4b05      	ldr	r3, [pc, #20]	; (8013ac8 <USB_DeactivateEndpoint+0x1b4>)
 8013ab2:	4013      	ands	r3, r2
 8013ab4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8013ab6:	2300      	movs	r3, #0
}
 8013ab8:	4618      	mov	r0, r3
 8013aba:	3714      	adds	r7, #20
 8013abc:	46bd      	mov	sp, r7
 8013abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac2:	4770      	bx	lr
 8013ac4:	ec337800 	.word	0xec337800
 8013ac8:	eff37800 	.word	0xeff37800

08013acc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8013acc:	b580      	push	{r7, lr}
 8013ace:	b08a      	sub	sp, #40	; 0x28
 8013ad0:	af02      	add	r7, sp, #8
 8013ad2:	60f8      	str	r0, [r7, #12]
 8013ad4:	60b9      	str	r1, [r7, #8]
 8013ad6:	4613      	mov	r3, r2
 8013ad8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8013ade:	68bb      	ldr	r3, [r7, #8]
 8013ae0:	781b      	ldrb	r3, [r3, #0]
 8013ae2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013ae4:	68bb      	ldr	r3, [r7, #8]
 8013ae6:	785b      	ldrb	r3, [r3, #1]
 8013ae8:	2b01      	cmp	r3, #1
 8013aea:	f040 8181 	bne.w	8013df0 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8013aee:	68bb      	ldr	r3, [r7, #8]
 8013af0:	691b      	ldr	r3, [r3, #16]
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d132      	bne.n	8013b5c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013af6:	69bb      	ldr	r3, [r7, #24]
 8013af8:	015a      	lsls	r2, r3, #5
 8013afa:	69fb      	ldr	r3, [r7, #28]
 8013afc:	4413      	add	r3, r2
 8013afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b02:	691a      	ldr	r2, [r3, #16]
 8013b04:	69bb      	ldr	r3, [r7, #24]
 8013b06:	0159      	lsls	r1, r3, #5
 8013b08:	69fb      	ldr	r3, [r7, #28]
 8013b0a:	440b      	add	r3, r1
 8013b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b10:	4619      	mov	r1, r3
 8013b12:	4ba5      	ldr	r3, [pc, #660]	; (8013da8 <USB_EPStartXfer+0x2dc>)
 8013b14:	4013      	ands	r3, r2
 8013b16:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013b18:	69bb      	ldr	r3, [r7, #24]
 8013b1a:	015a      	lsls	r2, r3, #5
 8013b1c:	69fb      	ldr	r3, [r7, #28]
 8013b1e:	4413      	add	r3, r2
 8013b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b24:	691b      	ldr	r3, [r3, #16]
 8013b26:	69ba      	ldr	r2, [r7, #24]
 8013b28:	0151      	lsls	r1, r2, #5
 8013b2a:	69fa      	ldr	r2, [r7, #28]
 8013b2c:	440a      	add	r2, r1
 8013b2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013b32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013b36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013b38:	69bb      	ldr	r3, [r7, #24]
 8013b3a:	015a      	lsls	r2, r3, #5
 8013b3c:	69fb      	ldr	r3, [r7, #28]
 8013b3e:	4413      	add	r3, r2
 8013b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b44:	691a      	ldr	r2, [r3, #16]
 8013b46:	69bb      	ldr	r3, [r7, #24]
 8013b48:	0159      	lsls	r1, r3, #5
 8013b4a:	69fb      	ldr	r3, [r7, #28]
 8013b4c:	440b      	add	r3, r1
 8013b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b52:	4619      	mov	r1, r3
 8013b54:	4b95      	ldr	r3, [pc, #596]	; (8013dac <USB_EPStartXfer+0x2e0>)
 8013b56:	4013      	ands	r3, r2
 8013b58:	610b      	str	r3, [r1, #16]
 8013b5a:	e092      	b.n	8013c82 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013b5c:	69bb      	ldr	r3, [r7, #24]
 8013b5e:	015a      	lsls	r2, r3, #5
 8013b60:	69fb      	ldr	r3, [r7, #28]
 8013b62:	4413      	add	r3, r2
 8013b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b68:	691a      	ldr	r2, [r3, #16]
 8013b6a:	69bb      	ldr	r3, [r7, #24]
 8013b6c:	0159      	lsls	r1, r3, #5
 8013b6e:	69fb      	ldr	r3, [r7, #28]
 8013b70:	440b      	add	r3, r1
 8013b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b76:	4619      	mov	r1, r3
 8013b78:	4b8c      	ldr	r3, [pc, #560]	; (8013dac <USB_EPStartXfer+0x2e0>)
 8013b7a:	4013      	ands	r3, r2
 8013b7c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013b7e:	69bb      	ldr	r3, [r7, #24]
 8013b80:	015a      	lsls	r2, r3, #5
 8013b82:	69fb      	ldr	r3, [r7, #28]
 8013b84:	4413      	add	r3, r2
 8013b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b8a:	691a      	ldr	r2, [r3, #16]
 8013b8c:	69bb      	ldr	r3, [r7, #24]
 8013b8e:	0159      	lsls	r1, r3, #5
 8013b90:	69fb      	ldr	r3, [r7, #28]
 8013b92:	440b      	add	r3, r1
 8013b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b98:	4619      	mov	r1, r3
 8013b9a:	4b83      	ldr	r3, [pc, #524]	; (8013da8 <USB_EPStartXfer+0x2dc>)
 8013b9c:	4013      	ands	r3, r2
 8013b9e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8013ba0:	69bb      	ldr	r3, [r7, #24]
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d11a      	bne.n	8013bdc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8013ba6:	68bb      	ldr	r3, [r7, #8]
 8013ba8:	691a      	ldr	r2, [r3, #16]
 8013baa:	68bb      	ldr	r3, [r7, #8]
 8013bac:	689b      	ldr	r3, [r3, #8]
 8013bae:	429a      	cmp	r2, r3
 8013bb0:	d903      	bls.n	8013bba <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8013bb2:	68bb      	ldr	r3, [r7, #8]
 8013bb4:	689a      	ldr	r2, [r3, #8]
 8013bb6:	68bb      	ldr	r3, [r7, #8]
 8013bb8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013bba:	69bb      	ldr	r3, [r7, #24]
 8013bbc:	015a      	lsls	r2, r3, #5
 8013bbe:	69fb      	ldr	r3, [r7, #28]
 8013bc0:	4413      	add	r3, r2
 8013bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013bc6:	691b      	ldr	r3, [r3, #16]
 8013bc8:	69ba      	ldr	r2, [r7, #24]
 8013bca:	0151      	lsls	r1, r2, #5
 8013bcc:	69fa      	ldr	r2, [r7, #28]
 8013bce:	440a      	add	r2, r1
 8013bd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013bd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013bd8:	6113      	str	r3, [r2, #16]
 8013bda:	e01b      	b.n	8013c14 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013bdc:	69bb      	ldr	r3, [r7, #24]
 8013bde:	015a      	lsls	r2, r3, #5
 8013be0:	69fb      	ldr	r3, [r7, #28]
 8013be2:	4413      	add	r3, r2
 8013be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013be8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8013bea:	68bb      	ldr	r3, [r7, #8]
 8013bec:	6919      	ldr	r1, [r3, #16]
 8013bee:	68bb      	ldr	r3, [r7, #8]
 8013bf0:	689b      	ldr	r3, [r3, #8]
 8013bf2:	440b      	add	r3, r1
 8013bf4:	1e59      	subs	r1, r3, #1
 8013bf6:	68bb      	ldr	r3, [r7, #8]
 8013bf8:	689b      	ldr	r3, [r3, #8]
 8013bfa:	fbb1 f3f3 	udiv	r3, r1, r3
 8013bfe:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013c00:	4b6b      	ldr	r3, [pc, #428]	; (8013db0 <USB_EPStartXfer+0x2e4>)
 8013c02:	400b      	ands	r3, r1
 8013c04:	69b9      	ldr	r1, [r7, #24]
 8013c06:	0148      	lsls	r0, r1, #5
 8013c08:	69f9      	ldr	r1, [r7, #28]
 8013c0a:	4401      	add	r1, r0
 8013c0c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013c10:	4313      	orrs	r3, r2
 8013c12:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013c14:	69bb      	ldr	r3, [r7, #24]
 8013c16:	015a      	lsls	r2, r3, #5
 8013c18:	69fb      	ldr	r3, [r7, #28]
 8013c1a:	4413      	add	r3, r2
 8013c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c20:	691a      	ldr	r2, [r3, #16]
 8013c22:	68bb      	ldr	r3, [r7, #8]
 8013c24:	691b      	ldr	r3, [r3, #16]
 8013c26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013c2a:	69b9      	ldr	r1, [r7, #24]
 8013c2c:	0148      	lsls	r0, r1, #5
 8013c2e:	69f9      	ldr	r1, [r7, #28]
 8013c30:	4401      	add	r1, r0
 8013c32:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013c36:	4313      	orrs	r3, r2
 8013c38:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8013c3a:	68bb      	ldr	r3, [r7, #8]
 8013c3c:	791b      	ldrb	r3, [r3, #4]
 8013c3e:	2b01      	cmp	r3, #1
 8013c40:	d11f      	bne.n	8013c82 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8013c42:	69bb      	ldr	r3, [r7, #24]
 8013c44:	015a      	lsls	r2, r3, #5
 8013c46:	69fb      	ldr	r3, [r7, #28]
 8013c48:	4413      	add	r3, r2
 8013c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c4e:	691b      	ldr	r3, [r3, #16]
 8013c50:	69ba      	ldr	r2, [r7, #24]
 8013c52:	0151      	lsls	r1, r2, #5
 8013c54:	69fa      	ldr	r2, [r7, #28]
 8013c56:	440a      	add	r2, r1
 8013c58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c5c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8013c60:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8013c62:	69bb      	ldr	r3, [r7, #24]
 8013c64:	015a      	lsls	r2, r3, #5
 8013c66:	69fb      	ldr	r3, [r7, #28]
 8013c68:	4413      	add	r3, r2
 8013c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c6e:	691b      	ldr	r3, [r3, #16]
 8013c70:	69ba      	ldr	r2, [r7, #24]
 8013c72:	0151      	lsls	r1, r2, #5
 8013c74:	69fa      	ldr	r2, [r7, #28]
 8013c76:	440a      	add	r2, r1
 8013c78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013c80:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8013c82:	79fb      	ldrb	r3, [r7, #7]
 8013c84:	2b01      	cmp	r3, #1
 8013c86:	d14b      	bne.n	8013d20 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8013c88:	68bb      	ldr	r3, [r7, #8]
 8013c8a:	69db      	ldr	r3, [r3, #28]
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d009      	beq.n	8013ca4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013c90:	69bb      	ldr	r3, [r7, #24]
 8013c92:	015a      	lsls	r2, r3, #5
 8013c94:	69fb      	ldr	r3, [r7, #28]
 8013c96:	4413      	add	r3, r2
 8013c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c9c:	461a      	mov	r2, r3
 8013c9e:	68bb      	ldr	r3, [r7, #8]
 8013ca0:	69db      	ldr	r3, [r3, #28]
 8013ca2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8013ca4:	68bb      	ldr	r3, [r7, #8]
 8013ca6:	791b      	ldrb	r3, [r3, #4]
 8013ca8:	2b01      	cmp	r3, #1
 8013caa:	d128      	bne.n	8013cfe <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013cac:	69fb      	ldr	r3, [r7, #28]
 8013cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013cb2:	689b      	ldr	r3, [r3, #8]
 8013cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d110      	bne.n	8013cde <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013cbc:	69bb      	ldr	r3, [r7, #24]
 8013cbe:	015a      	lsls	r2, r3, #5
 8013cc0:	69fb      	ldr	r3, [r7, #28]
 8013cc2:	4413      	add	r3, r2
 8013cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	69ba      	ldr	r2, [r7, #24]
 8013ccc:	0151      	lsls	r1, r2, #5
 8013cce:	69fa      	ldr	r2, [r7, #28]
 8013cd0:	440a      	add	r2, r1
 8013cd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013cd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013cda:	6013      	str	r3, [r2, #0]
 8013cdc:	e00f      	b.n	8013cfe <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013cde:	69bb      	ldr	r3, [r7, #24]
 8013ce0:	015a      	lsls	r2, r3, #5
 8013ce2:	69fb      	ldr	r3, [r7, #28]
 8013ce4:	4413      	add	r3, r2
 8013ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	69ba      	ldr	r2, [r7, #24]
 8013cee:	0151      	lsls	r1, r2, #5
 8013cf0:	69fa      	ldr	r2, [r7, #28]
 8013cf2:	440a      	add	r2, r1
 8013cf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013cfc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013cfe:	69bb      	ldr	r3, [r7, #24]
 8013d00:	015a      	lsls	r2, r3, #5
 8013d02:	69fb      	ldr	r3, [r7, #28]
 8013d04:	4413      	add	r3, r2
 8013d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	69ba      	ldr	r2, [r7, #24]
 8013d0e:	0151      	lsls	r1, r2, #5
 8013d10:	69fa      	ldr	r2, [r7, #28]
 8013d12:	440a      	add	r2, r1
 8013d14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d18:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013d1c:	6013      	str	r3, [r2, #0]
 8013d1e:	e16a      	b.n	8013ff6 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013d20:	69bb      	ldr	r3, [r7, #24]
 8013d22:	015a      	lsls	r2, r3, #5
 8013d24:	69fb      	ldr	r3, [r7, #28]
 8013d26:	4413      	add	r3, r2
 8013d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	69ba      	ldr	r2, [r7, #24]
 8013d30:	0151      	lsls	r1, r2, #5
 8013d32:	69fa      	ldr	r2, [r7, #28]
 8013d34:	440a      	add	r2, r1
 8013d36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013d3e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8013d40:	68bb      	ldr	r3, [r7, #8]
 8013d42:	791b      	ldrb	r3, [r3, #4]
 8013d44:	2b01      	cmp	r3, #1
 8013d46:	d015      	beq.n	8013d74 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8013d48:	68bb      	ldr	r3, [r7, #8]
 8013d4a:	691b      	ldr	r3, [r3, #16]
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	f000 8152 	beq.w	8013ff6 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013d52:	69fb      	ldr	r3, [r7, #28]
 8013d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013d5a:	68bb      	ldr	r3, [r7, #8]
 8013d5c:	781b      	ldrb	r3, [r3, #0]
 8013d5e:	f003 030f 	and.w	r3, r3, #15
 8013d62:	2101      	movs	r1, #1
 8013d64:	fa01 f303 	lsl.w	r3, r1, r3
 8013d68:	69f9      	ldr	r1, [r7, #28]
 8013d6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013d6e:	4313      	orrs	r3, r2
 8013d70:	634b      	str	r3, [r1, #52]	; 0x34
 8013d72:	e140      	b.n	8013ff6 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013d74:	69fb      	ldr	r3, [r7, #28]
 8013d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d7a:	689b      	ldr	r3, [r3, #8]
 8013d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d117      	bne.n	8013db4 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013d84:	69bb      	ldr	r3, [r7, #24]
 8013d86:	015a      	lsls	r2, r3, #5
 8013d88:	69fb      	ldr	r3, [r7, #28]
 8013d8a:	4413      	add	r3, r2
 8013d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	69ba      	ldr	r2, [r7, #24]
 8013d94:	0151      	lsls	r1, r2, #5
 8013d96:	69fa      	ldr	r2, [r7, #28]
 8013d98:	440a      	add	r2, r1
 8013d9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013da2:	6013      	str	r3, [r2, #0]
 8013da4:	e016      	b.n	8013dd4 <USB_EPStartXfer+0x308>
 8013da6:	bf00      	nop
 8013da8:	e007ffff 	.word	0xe007ffff
 8013dac:	fff80000 	.word	0xfff80000
 8013db0:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013db4:	69bb      	ldr	r3, [r7, #24]
 8013db6:	015a      	lsls	r2, r3, #5
 8013db8:	69fb      	ldr	r3, [r7, #28]
 8013dba:	4413      	add	r3, r2
 8013dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	69ba      	ldr	r2, [r7, #24]
 8013dc4:	0151      	lsls	r1, r2, #5
 8013dc6:	69fa      	ldr	r2, [r7, #28]
 8013dc8:	440a      	add	r2, r1
 8013dca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013dd2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8013dd4:	68bb      	ldr	r3, [r7, #8]
 8013dd6:	68d9      	ldr	r1, [r3, #12]
 8013dd8:	68bb      	ldr	r3, [r7, #8]
 8013dda:	781a      	ldrb	r2, [r3, #0]
 8013ddc:	68bb      	ldr	r3, [r7, #8]
 8013dde:	691b      	ldr	r3, [r3, #16]
 8013de0:	b298      	uxth	r0, r3
 8013de2:	79fb      	ldrb	r3, [r7, #7]
 8013de4:	9300      	str	r3, [sp, #0]
 8013de6:	4603      	mov	r3, r0
 8013de8:	68f8      	ldr	r0, [r7, #12]
 8013dea:	f000 f9b9 	bl	8014160 <USB_WritePacket>
 8013dee:	e102      	b.n	8013ff6 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013df0:	69bb      	ldr	r3, [r7, #24]
 8013df2:	015a      	lsls	r2, r3, #5
 8013df4:	69fb      	ldr	r3, [r7, #28]
 8013df6:	4413      	add	r3, r2
 8013df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013dfc:	691a      	ldr	r2, [r3, #16]
 8013dfe:	69bb      	ldr	r3, [r7, #24]
 8013e00:	0159      	lsls	r1, r3, #5
 8013e02:	69fb      	ldr	r3, [r7, #28]
 8013e04:	440b      	add	r3, r1
 8013e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e0a:	4619      	mov	r1, r3
 8013e0c:	4b7c      	ldr	r3, [pc, #496]	; (8014000 <USB_EPStartXfer+0x534>)
 8013e0e:	4013      	ands	r3, r2
 8013e10:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8013e12:	69bb      	ldr	r3, [r7, #24]
 8013e14:	015a      	lsls	r2, r3, #5
 8013e16:	69fb      	ldr	r3, [r7, #28]
 8013e18:	4413      	add	r3, r2
 8013e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e1e:	691a      	ldr	r2, [r3, #16]
 8013e20:	69bb      	ldr	r3, [r7, #24]
 8013e22:	0159      	lsls	r1, r3, #5
 8013e24:	69fb      	ldr	r3, [r7, #28]
 8013e26:	440b      	add	r3, r1
 8013e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e2c:	4619      	mov	r1, r3
 8013e2e:	4b75      	ldr	r3, [pc, #468]	; (8014004 <USB_EPStartXfer+0x538>)
 8013e30:	4013      	ands	r3, r2
 8013e32:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8013e34:	69bb      	ldr	r3, [r7, #24]
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d12f      	bne.n	8013e9a <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8013e3a:	68bb      	ldr	r3, [r7, #8]
 8013e3c:	691b      	ldr	r3, [r3, #16]
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d003      	beq.n	8013e4a <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8013e42:	68bb      	ldr	r3, [r7, #8]
 8013e44:	689a      	ldr	r2, [r3, #8]
 8013e46:	68bb      	ldr	r3, [r7, #8]
 8013e48:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8013e4a:	68bb      	ldr	r3, [r7, #8]
 8013e4c:	689a      	ldr	r2, [r3, #8]
 8013e4e:	68bb      	ldr	r3, [r7, #8]
 8013e50:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8013e52:	69bb      	ldr	r3, [r7, #24]
 8013e54:	015a      	lsls	r2, r3, #5
 8013e56:	69fb      	ldr	r3, [r7, #28]
 8013e58:	4413      	add	r3, r2
 8013e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e5e:	691a      	ldr	r2, [r3, #16]
 8013e60:	68bb      	ldr	r3, [r7, #8]
 8013e62:	6a1b      	ldr	r3, [r3, #32]
 8013e64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013e68:	69b9      	ldr	r1, [r7, #24]
 8013e6a:	0148      	lsls	r0, r1, #5
 8013e6c:	69f9      	ldr	r1, [r7, #28]
 8013e6e:	4401      	add	r1, r0
 8013e70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013e74:	4313      	orrs	r3, r2
 8013e76:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013e78:	69bb      	ldr	r3, [r7, #24]
 8013e7a:	015a      	lsls	r2, r3, #5
 8013e7c:	69fb      	ldr	r3, [r7, #28]
 8013e7e:	4413      	add	r3, r2
 8013e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e84:	691b      	ldr	r3, [r3, #16]
 8013e86:	69ba      	ldr	r2, [r7, #24]
 8013e88:	0151      	lsls	r1, r2, #5
 8013e8a:	69fa      	ldr	r2, [r7, #28]
 8013e8c:	440a      	add	r2, r1
 8013e8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013e92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013e96:	6113      	str	r3, [r2, #16]
 8013e98:	e05f      	b.n	8013f5a <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8013e9a:	68bb      	ldr	r3, [r7, #8]
 8013e9c:	691b      	ldr	r3, [r3, #16]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d123      	bne.n	8013eea <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8013ea2:	69bb      	ldr	r3, [r7, #24]
 8013ea4:	015a      	lsls	r2, r3, #5
 8013ea6:	69fb      	ldr	r3, [r7, #28]
 8013ea8:	4413      	add	r3, r2
 8013eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013eae:	691a      	ldr	r2, [r3, #16]
 8013eb0:	68bb      	ldr	r3, [r7, #8]
 8013eb2:	689b      	ldr	r3, [r3, #8]
 8013eb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013eb8:	69b9      	ldr	r1, [r7, #24]
 8013eba:	0148      	lsls	r0, r1, #5
 8013ebc:	69f9      	ldr	r1, [r7, #28]
 8013ebe:	4401      	add	r1, r0
 8013ec0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013ec4:	4313      	orrs	r3, r2
 8013ec6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013ec8:	69bb      	ldr	r3, [r7, #24]
 8013eca:	015a      	lsls	r2, r3, #5
 8013ecc:	69fb      	ldr	r3, [r7, #28]
 8013ece:	4413      	add	r3, r2
 8013ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ed4:	691b      	ldr	r3, [r3, #16]
 8013ed6:	69ba      	ldr	r2, [r7, #24]
 8013ed8:	0151      	lsls	r1, r2, #5
 8013eda:	69fa      	ldr	r2, [r7, #28]
 8013edc:	440a      	add	r2, r1
 8013ede:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013ee2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013ee6:	6113      	str	r3, [r2, #16]
 8013ee8:	e037      	b.n	8013f5a <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8013eea:	68bb      	ldr	r3, [r7, #8]
 8013eec:	691a      	ldr	r2, [r3, #16]
 8013eee:	68bb      	ldr	r3, [r7, #8]
 8013ef0:	689b      	ldr	r3, [r3, #8]
 8013ef2:	4413      	add	r3, r2
 8013ef4:	1e5a      	subs	r2, r3, #1
 8013ef6:	68bb      	ldr	r3, [r7, #8]
 8013ef8:	689b      	ldr	r3, [r3, #8]
 8013efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8013efe:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8013f00:	68bb      	ldr	r3, [r7, #8]
 8013f02:	689b      	ldr	r3, [r3, #8]
 8013f04:	8afa      	ldrh	r2, [r7, #22]
 8013f06:	fb03 f202 	mul.w	r2, r3, r2
 8013f0a:	68bb      	ldr	r3, [r7, #8]
 8013f0c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013f0e:	69bb      	ldr	r3, [r7, #24]
 8013f10:	015a      	lsls	r2, r3, #5
 8013f12:	69fb      	ldr	r3, [r7, #28]
 8013f14:	4413      	add	r3, r2
 8013f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f1a:	691a      	ldr	r2, [r3, #16]
 8013f1c:	8afb      	ldrh	r3, [r7, #22]
 8013f1e:	04d9      	lsls	r1, r3, #19
 8013f20:	4b39      	ldr	r3, [pc, #228]	; (8014008 <USB_EPStartXfer+0x53c>)
 8013f22:	400b      	ands	r3, r1
 8013f24:	69b9      	ldr	r1, [r7, #24]
 8013f26:	0148      	lsls	r0, r1, #5
 8013f28:	69f9      	ldr	r1, [r7, #28]
 8013f2a:	4401      	add	r1, r0
 8013f2c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013f30:	4313      	orrs	r3, r2
 8013f32:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8013f34:	69bb      	ldr	r3, [r7, #24]
 8013f36:	015a      	lsls	r2, r3, #5
 8013f38:	69fb      	ldr	r3, [r7, #28]
 8013f3a:	4413      	add	r3, r2
 8013f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f40:	691a      	ldr	r2, [r3, #16]
 8013f42:	68bb      	ldr	r3, [r7, #8]
 8013f44:	6a1b      	ldr	r3, [r3, #32]
 8013f46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013f4a:	69b9      	ldr	r1, [r7, #24]
 8013f4c:	0148      	lsls	r0, r1, #5
 8013f4e:	69f9      	ldr	r1, [r7, #28]
 8013f50:	4401      	add	r1, r0
 8013f52:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013f56:	4313      	orrs	r3, r2
 8013f58:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8013f5a:	79fb      	ldrb	r3, [r7, #7]
 8013f5c:	2b01      	cmp	r3, #1
 8013f5e:	d10d      	bne.n	8013f7c <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8013f60:	68bb      	ldr	r3, [r7, #8]
 8013f62:	68db      	ldr	r3, [r3, #12]
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d009      	beq.n	8013f7c <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013f68:	68bb      	ldr	r3, [r7, #8]
 8013f6a:	68d9      	ldr	r1, [r3, #12]
 8013f6c:	69bb      	ldr	r3, [r7, #24]
 8013f6e:	015a      	lsls	r2, r3, #5
 8013f70:	69fb      	ldr	r3, [r7, #28]
 8013f72:	4413      	add	r3, r2
 8013f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f78:	460a      	mov	r2, r1
 8013f7a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8013f7c:	68bb      	ldr	r3, [r7, #8]
 8013f7e:	791b      	ldrb	r3, [r3, #4]
 8013f80:	2b01      	cmp	r3, #1
 8013f82:	d128      	bne.n	8013fd6 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013f84:	69fb      	ldr	r3, [r7, #28]
 8013f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f8a:	689b      	ldr	r3, [r3, #8]
 8013f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d110      	bne.n	8013fb6 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8013f94:	69bb      	ldr	r3, [r7, #24]
 8013f96:	015a      	lsls	r2, r3, #5
 8013f98:	69fb      	ldr	r3, [r7, #28]
 8013f9a:	4413      	add	r3, r2
 8013f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	69ba      	ldr	r2, [r7, #24]
 8013fa4:	0151      	lsls	r1, r2, #5
 8013fa6:	69fa      	ldr	r2, [r7, #28]
 8013fa8:	440a      	add	r2, r1
 8013faa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013fae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013fb2:	6013      	str	r3, [r2, #0]
 8013fb4:	e00f      	b.n	8013fd6 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8013fb6:	69bb      	ldr	r3, [r7, #24]
 8013fb8:	015a      	lsls	r2, r3, #5
 8013fba:	69fb      	ldr	r3, [r7, #28]
 8013fbc:	4413      	add	r3, r2
 8013fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013fc2:	681b      	ldr	r3, [r3, #0]
 8013fc4:	69ba      	ldr	r2, [r7, #24]
 8013fc6:	0151      	lsls	r1, r2, #5
 8013fc8:	69fa      	ldr	r2, [r7, #28]
 8013fca:	440a      	add	r2, r1
 8013fcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013fd4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013fd6:	69bb      	ldr	r3, [r7, #24]
 8013fd8:	015a      	lsls	r2, r3, #5
 8013fda:	69fb      	ldr	r3, [r7, #28]
 8013fdc:	4413      	add	r3, r2
 8013fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	69ba      	ldr	r2, [r7, #24]
 8013fe6:	0151      	lsls	r1, r2, #5
 8013fe8:	69fa      	ldr	r2, [r7, #28]
 8013fea:	440a      	add	r2, r1
 8013fec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013ff0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013ff4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013ff6:	2300      	movs	r3, #0
}
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	3720      	adds	r7, #32
 8013ffc:	46bd      	mov	sp, r7
 8013ffe:	bd80      	pop	{r7, pc}
 8014000:	fff80000 	.word	0xfff80000
 8014004:	e007ffff 	.word	0xe007ffff
 8014008:	1ff80000 	.word	0x1ff80000

0801400c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801400c:	b480      	push	{r7}
 801400e:	b087      	sub	sp, #28
 8014010:	af00      	add	r7, sp, #0
 8014012:	6078      	str	r0, [r7, #4]
 8014014:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8014016:	2300      	movs	r3, #0
 8014018:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801401a:	2300      	movs	r3, #0
 801401c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014022:	683b      	ldr	r3, [r7, #0]
 8014024:	785b      	ldrb	r3, [r3, #1]
 8014026:	2b01      	cmp	r3, #1
 8014028:	d14a      	bne.n	80140c0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801402a:	683b      	ldr	r3, [r7, #0]
 801402c:	781b      	ldrb	r3, [r3, #0]
 801402e:	015a      	lsls	r2, r3, #5
 8014030:	693b      	ldr	r3, [r7, #16]
 8014032:	4413      	add	r3, r2
 8014034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801403e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014042:	f040 8086 	bne.w	8014152 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8014046:	683b      	ldr	r3, [r7, #0]
 8014048:	781b      	ldrb	r3, [r3, #0]
 801404a:	015a      	lsls	r2, r3, #5
 801404c:	693b      	ldr	r3, [r7, #16]
 801404e:	4413      	add	r3, r2
 8014050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	683a      	ldr	r2, [r7, #0]
 8014058:	7812      	ldrb	r2, [r2, #0]
 801405a:	0151      	lsls	r1, r2, #5
 801405c:	693a      	ldr	r2, [r7, #16]
 801405e:	440a      	add	r2, r1
 8014060:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014064:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014068:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801406a:	683b      	ldr	r3, [r7, #0]
 801406c:	781b      	ldrb	r3, [r3, #0]
 801406e:	015a      	lsls	r2, r3, #5
 8014070:	693b      	ldr	r3, [r7, #16]
 8014072:	4413      	add	r3, r2
 8014074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	683a      	ldr	r2, [r7, #0]
 801407c:	7812      	ldrb	r2, [r2, #0]
 801407e:	0151      	lsls	r1, r2, #5
 8014080:	693a      	ldr	r2, [r7, #16]
 8014082:	440a      	add	r2, r1
 8014084:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014088:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801408c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	3301      	adds	r3, #1
 8014092:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	f242 7210 	movw	r2, #10000	; 0x2710
 801409a:	4293      	cmp	r3, r2
 801409c:	d902      	bls.n	80140a4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801409e:	2301      	movs	r3, #1
 80140a0:	75fb      	strb	r3, [r7, #23]
          break;
 80140a2:	e056      	b.n	8014152 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80140a4:	683b      	ldr	r3, [r7, #0]
 80140a6:	781b      	ldrb	r3, [r3, #0]
 80140a8:	015a      	lsls	r2, r3, #5
 80140aa:	693b      	ldr	r3, [r7, #16]
 80140ac:	4413      	add	r3, r2
 80140ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80140b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80140bc:	d0e7      	beq.n	801408e <USB_EPStopXfer+0x82>
 80140be:	e048      	b.n	8014152 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80140c0:	683b      	ldr	r3, [r7, #0]
 80140c2:	781b      	ldrb	r3, [r3, #0]
 80140c4:	015a      	lsls	r2, r3, #5
 80140c6:	693b      	ldr	r3, [r7, #16]
 80140c8:	4413      	add	r3, r2
 80140ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140ce:	681b      	ldr	r3, [r3, #0]
 80140d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80140d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80140d8:	d13b      	bne.n	8014152 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80140da:	683b      	ldr	r3, [r7, #0]
 80140dc:	781b      	ldrb	r3, [r3, #0]
 80140de:	015a      	lsls	r2, r3, #5
 80140e0:	693b      	ldr	r3, [r7, #16]
 80140e2:	4413      	add	r3, r2
 80140e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	683a      	ldr	r2, [r7, #0]
 80140ec:	7812      	ldrb	r2, [r2, #0]
 80140ee:	0151      	lsls	r1, r2, #5
 80140f0:	693a      	ldr	r2, [r7, #16]
 80140f2:	440a      	add	r2, r1
 80140f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80140f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80140fc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80140fe:	683b      	ldr	r3, [r7, #0]
 8014100:	781b      	ldrb	r3, [r3, #0]
 8014102:	015a      	lsls	r2, r3, #5
 8014104:	693b      	ldr	r3, [r7, #16]
 8014106:	4413      	add	r3, r2
 8014108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	683a      	ldr	r2, [r7, #0]
 8014110:	7812      	ldrb	r2, [r2, #0]
 8014112:	0151      	lsls	r1, r2, #5
 8014114:	693a      	ldr	r2, [r7, #16]
 8014116:	440a      	add	r2, r1
 8014118:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801411c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014120:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014122:	68fb      	ldr	r3, [r7, #12]
 8014124:	3301      	adds	r3, #1
 8014126:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014128:	68fb      	ldr	r3, [r7, #12]
 801412a:	f242 7210 	movw	r2, #10000	; 0x2710
 801412e:	4293      	cmp	r3, r2
 8014130:	d902      	bls.n	8014138 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8014132:	2301      	movs	r3, #1
 8014134:	75fb      	strb	r3, [r7, #23]
          break;
 8014136:	e00c      	b.n	8014152 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8014138:	683b      	ldr	r3, [r7, #0]
 801413a:	781b      	ldrb	r3, [r3, #0]
 801413c:	015a      	lsls	r2, r3, #5
 801413e:	693b      	ldr	r3, [r7, #16]
 8014140:	4413      	add	r3, r2
 8014142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801414c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014150:	d0e7      	beq.n	8014122 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8014152:	7dfb      	ldrb	r3, [r7, #23]
}
 8014154:	4618      	mov	r0, r3
 8014156:	371c      	adds	r7, #28
 8014158:	46bd      	mov	sp, r7
 801415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801415e:	4770      	bx	lr

08014160 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8014160:	b480      	push	{r7}
 8014162:	b089      	sub	sp, #36	; 0x24
 8014164:	af00      	add	r7, sp, #0
 8014166:	60f8      	str	r0, [r7, #12]
 8014168:	60b9      	str	r1, [r7, #8]
 801416a:	4611      	mov	r1, r2
 801416c:	461a      	mov	r2, r3
 801416e:	460b      	mov	r3, r1
 8014170:	71fb      	strb	r3, [r7, #7]
 8014172:	4613      	mov	r3, r2
 8014174:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014176:	68fb      	ldr	r3, [r7, #12]
 8014178:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801417a:	68bb      	ldr	r3, [r7, #8]
 801417c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801417e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014182:	2b00      	cmp	r3, #0
 8014184:	d123      	bne.n	80141ce <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8014186:	88bb      	ldrh	r3, [r7, #4]
 8014188:	3303      	adds	r3, #3
 801418a:	089b      	lsrs	r3, r3, #2
 801418c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801418e:	2300      	movs	r3, #0
 8014190:	61bb      	str	r3, [r7, #24]
 8014192:	e018      	b.n	80141c6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014194:	79fb      	ldrb	r3, [r7, #7]
 8014196:	031a      	lsls	r2, r3, #12
 8014198:	697b      	ldr	r3, [r7, #20]
 801419a:	4413      	add	r3, r2
 801419c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80141a0:	461a      	mov	r2, r3
 80141a2:	69fb      	ldr	r3, [r7, #28]
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80141a8:	69fb      	ldr	r3, [r7, #28]
 80141aa:	3301      	adds	r3, #1
 80141ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80141ae:	69fb      	ldr	r3, [r7, #28]
 80141b0:	3301      	adds	r3, #1
 80141b2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80141b4:	69fb      	ldr	r3, [r7, #28]
 80141b6:	3301      	adds	r3, #1
 80141b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80141ba:	69fb      	ldr	r3, [r7, #28]
 80141bc:	3301      	adds	r3, #1
 80141be:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80141c0:	69bb      	ldr	r3, [r7, #24]
 80141c2:	3301      	adds	r3, #1
 80141c4:	61bb      	str	r3, [r7, #24]
 80141c6:	69ba      	ldr	r2, [r7, #24]
 80141c8:	693b      	ldr	r3, [r7, #16]
 80141ca:	429a      	cmp	r2, r3
 80141cc:	d3e2      	bcc.n	8014194 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80141ce:	2300      	movs	r3, #0
}
 80141d0:	4618      	mov	r0, r3
 80141d2:	3724      	adds	r7, #36	; 0x24
 80141d4:	46bd      	mov	sp, r7
 80141d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141da:	4770      	bx	lr

080141dc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80141dc:	b480      	push	{r7}
 80141de:	b08b      	sub	sp, #44	; 0x2c
 80141e0:	af00      	add	r7, sp, #0
 80141e2:	60f8      	str	r0, [r7, #12]
 80141e4:	60b9      	str	r1, [r7, #8]
 80141e6:	4613      	mov	r3, r2
 80141e8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80141ee:	68bb      	ldr	r3, [r7, #8]
 80141f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80141f2:	88fb      	ldrh	r3, [r7, #6]
 80141f4:	089b      	lsrs	r3, r3, #2
 80141f6:	b29b      	uxth	r3, r3
 80141f8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80141fa:	88fb      	ldrh	r3, [r7, #6]
 80141fc:	f003 0303 	and.w	r3, r3, #3
 8014200:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8014202:	2300      	movs	r3, #0
 8014204:	623b      	str	r3, [r7, #32]
 8014206:	e014      	b.n	8014232 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8014208:	69bb      	ldr	r3, [r7, #24]
 801420a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801420e:	681a      	ldr	r2, [r3, #0]
 8014210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014212:	601a      	str	r2, [r3, #0]
    pDest++;
 8014214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014216:	3301      	adds	r3, #1
 8014218:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801421c:	3301      	adds	r3, #1
 801421e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014222:	3301      	adds	r3, #1
 8014224:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014228:	3301      	adds	r3, #1
 801422a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 801422c:	6a3b      	ldr	r3, [r7, #32]
 801422e:	3301      	adds	r3, #1
 8014230:	623b      	str	r3, [r7, #32]
 8014232:	6a3a      	ldr	r2, [r7, #32]
 8014234:	697b      	ldr	r3, [r7, #20]
 8014236:	429a      	cmp	r2, r3
 8014238:	d3e6      	bcc.n	8014208 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801423a:	8bfb      	ldrh	r3, [r7, #30]
 801423c:	2b00      	cmp	r3, #0
 801423e:	d01e      	beq.n	801427e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8014240:	2300      	movs	r3, #0
 8014242:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8014244:	69bb      	ldr	r3, [r7, #24]
 8014246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801424a:	461a      	mov	r2, r3
 801424c:	f107 0310 	add.w	r3, r7, #16
 8014250:	6812      	ldr	r2, [r2, #0]
 8014252:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8014254:	693a      	ldr	r2, [r7, #16]
 8014256:	6a3b      	ldr	r3, [r7, #32]
 8014258:	b2db      	uxtb	r3, r3
 801425a:	00db      	lsls	r3, r3, #3
 801425c:	fa22 f303 	lsr.w	r3, r2, r3
 8014260:	b2da      	uxtb	r2, r3
 8014262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014264:	701a      	strb	r2, [r3, #0]
      i++;
 8014266:	6a3b      	ldr	r3, [r7, #32]
 8014268:	3301      	adds	r3, #1
 801426a:	623b      	str	r3, [r7, #32]
      pDest++;
 801426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801426e:	3301      	adds	r3, #1
 8014270:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8014272:	8bfb      	ldrh	r3, [r7, #30]
 8014274:	3b01      	subs	r3, #1
 8014276:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8014278:	8bfb      	ldrh	r3, [r7, #30]
 801427a:	2b00      	cmp	r3, #0
 801427c:	d1ea      	bne.n	8014254 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014280:	4618      	mov	r0, r3
 8014282:	372c      	adds	r7, #44	; 0x2c
 8014284:	46bd      	mov	sp, r7
 8014286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801428a:	4770      	bx	lr

0801428c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801428c:	b480      	push	{r7}
 801428e:	b085      	sub	sp, #20
 8014290:	af00      	add	r7, sp, #0
 8014292:	6078      	str	r0, [r7, #4]
 8014294:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801429a:	683b      	ldr	r3, [r7, #0]
 801429c:	781b      	ldrb	r3, [r3, #0]
 801429e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80142a0:	683b      	ldr	r3, [r7, #0]
 80142a2:	785b      	ldrb	r3, [r3, #1]
 80142a4:	2b01      	cmp	r3, #1
 80142a6:	d12c      	bne.n	8014302 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80142a8:	68bb      	ldr	r3, [r7, #8]
 80142aa:	015a      	lsls	r2, r3, #5
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	4413      	add	r3, r2
 80142b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	db12      	blt.n	80142e0 <USB_EPSetStall+0x54>
 80142ba:	68bb      	ldr	r3, [r7, #8]
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d00f      	beq.n	80142e0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80142c0:	68bb      	ldr	r3, [r7, #8]
 80142c2:	015a      	lsls	r2, r3, #5
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	4413      	add	r3, r2
 80142c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	68ba      	ldr	r2, [r7, #8]
 80142d0:	0151      	lsls	r1, r2, #5
 80142d2:	68fa      	ldr	r2, [r7, #12]
 80142d4:	440a      	add	r2, r1
 80142d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80142da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80142de:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80142e0:	68bb      	ldr	r3, [r7, #8]
 80142e2:	015a      	lsls	r2, r3, #5
 80142e4:	68fb      	ldr	r3, [r7, #12]
 80142e6:	4413      	add	r3, r2
 80142e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	68ba      	ldr	r2, [r7, #8]
 80142f0:	0151      	lsls	r1, r2, #5
 80142f2:	68fa      	ldr	r2, [r7, #12]
 80142f4:	440a      	add	r2, r1
 80142f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80142fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80142fe:	6013      	str	r3, [r2, #0]
 8014300:	e02b      	b.n	801435a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014302:	68bb      	ldr	r3, [r7, #8]
 8014304:	015a      	lsls	r2, r3, #5
 8014306:	68fb      	ldr	r3, [r7, #12]
 8014308:	4413      	add	r3, r2
 801430a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	2b00      	cmp	r3, #0
 8014312:	db12      	blt.n	801433a <USB_EPSetStall+0xae>
 8014314:	68bb      	ldr	r3, [r7, #8]
 8014316:	2b00      	cmp	r3, #0
 8014318:	d00f      	beq.n	801433a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801431a:	68bb      	ldr	r3, [r7, #8]
 801431c:	015a      	lsls	r2, r3, #5
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	4413      	add	r3, r2
 8014322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014326:	681b      	ldr	r3, [r3, #0]
 8014328:	68ba      	ldr	r2, [r7, #8]
 801432a:	0151      	lsls	r1, r2, #5
 801432c:	68fa      	ldr	r2, [r7, #12]
 801432e:	440a      	add	r2, r1
 8014330:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014334:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014338:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801433a:	68bb      	ldr	r3, [r7, #8]
 801433c:	015a      	lsls	r2, r3, #5
 801433e:	68fb      	ldr	r3, [r7, #12]
 8014340:	4413      	add	r3, r2
 8014342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	68ba      	ldr	r2, [r7, #8]
 801434a:	0151      	lsls	r1, r2, #5
 801434c:	68fa      	ldr	r2, [r7, #12]
 801434e:	440a      	add	r2, r1
 8014350:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014354:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014358:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801435a:	2300      	movs	r3, #0
}
 801435c:	4618      	mov	r0, r3
 801435e:	3714      	adds	r7, #20
 8014360:	46bd      	mov	sp, r7
 8014362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014366:	4770      	bx	lr

08014368 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014368:	b480      	push	{r7}
 801436a:	b085      	sub	sp, #20
 801436c:	af00      	add	r7, sp, #0
 801436e:	6078      	str	r0, [r7, #4]
 8014370:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014376:	683b      	ldr	r3, [r7, #0]
 8014378:	781b      	ldrb	r3, [r3, #0]
 801437a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801437c:	683b      	ldr	r3, [r7, #0]
 801437e:	785b      	ldrb	r3, [r3, #1]
 8014380:	2b01      	cmp	r3, #1
 8014382:	d128      	bne.n	80143d6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8014384:	68bb      	ldr	r3, [r7, #8]
 8014386:	015a      	lsls	r2, r3, #5
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	4413      	add	r3, r2
 801438c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	68ba      	ldr	r2, [r7, #8]
 8014394:	0151      	lsls	r1, r2, #5
 8014396:	68fa      	ldr	r2, [r7, #12]
 8014398:	440a      	add	r2, r1
 801439a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801439e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80143a2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80143a4:	683b      	ldr	r3, [r7, #0]
 80143a6:	791b      	ldrb	r3, [r3, #4]
 80143a8:	2b03      	cmp	r3, #3
 80143aa:	d003      	beq.n	80143b4 <USB_EPClearStall+0x4c>
 80143ac:	683b      	ldr	r3, [r7, #0]
 80143ae:	791b      	ldrb	r3, [r3, #4]
 80143b0:	2b02      	cmp	r3, #2
 80143b2:	d138      	bne.n	8014426 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80143b4:	68bb      	ldr	r3, [r7, #8]
 80143b6:	015a      	lsls	r2, r3, #5
 80143b8:	68fb      	ldr	r3, [r7, #12]
 80143ba:	4413      	add	r3, r2
 80143bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	68ba      	ldr	r2, [r7, #8]
 80143c4:	0151      	lsls	r1, r2, #5
 80143c6:	68fa      	ldr	r2, [r7, #12]
 80143c8:	440a      	add	r2, r1
 80143ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80143ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80143d2:	6013      	str	r3, [r2, #0]
 80143d4:	e027      	b.n	8014426 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80143d6:	68bb      	ldr	r3, [r7, #8]
 80143d8:	015a      	lsls	r2, r3, #5
 80143da:	68fb      	ldr	r3, [r7, #12]
 80143dc:	4413      	add	r3, r2
 80143de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	68ba      	ldr	r2, [r7, #8]
 80143e6:	0151      	lsls	r1, r2, #5
 80143e8:	68fa      	ldr	r2, [r7, #12]
 80143ea:	440a      	add	r2, r1
 80143ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80143f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80143f4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80143f6:	683b      	ldr	r3, [r7, #0]
 80143f8:	791b      	ldrb	r3, [r3, #4]
 80143fa:	2b03      	cmp	r3, #3
 80143fc:	d003      	beq.n	8014406 <USB_EPClearStall+0x9e>
 80143fe:	683b      	ldr	r3, [r7, #0]
 8014400:	791b      	ldrb	r3, [r3, #4]
 8014402:	2b02      	cmp	r3, #2
 8014404:	d10f      	bne.n	8014426 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014406:	68bb      	ldr	r3, [r7, #8]
 8014408:	015a      	lsls	r2, r3, #5
 801440a:	68fb      	ldr	r3, [r7, #12]
 801440c:	4413      	add	r3, r2
 801440e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	68ba      	ldr	r2, [r7, #8]
 8014416:	0151      	lsls	r1, r2, #5
 8014418:	68fa      	ldr	r2, [r7, #12]
 801441a:	440a      	add	r2, r1
 801441c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014424:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8014426:	2300      	movs	r3, #0
}
 8014428:	4618      	mov	r0, r3
 801442a:	3714      	adds	r7, #20
 801442c:	46bd      	mov	sp, r7
 801442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014432:	4770      	bx	lr

08014434 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8014434:	b480      	push	{r7}
 8014436:	b085      	sub	sp, #20
 8014438:	af00      	add	r7, sp, #0
 801443a:	6078      	str	r0, [r7, #4]
 801443c:	460b      	mov	r3, r1
 801443e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8014444:	68fb      	ldr	r3, [r7, #12]
 8014446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	68fa      	ldr	r2, [r7, #12]
 801444e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014452:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8014456:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8014458:	68fb      	ldr	r3, [r7, #12]
 801445a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801445e:	681a      	ldr	r2, [r3, #0]
 8014460:	78fb      	ldrb	r3, [r7, #3]
 8014462:	011b      	lsls	r3, r3, #4
 8014464:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8014468:	68f9      	ldr	r1, [r7, #12]
 801446a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801446e:	4313      	orrs	r3, r2
 8014470:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8014472:	2300      	movs	r3, #0
}
 8014474:	4618      	mov	r0, r3
 8014476:	3714      	adds	r7, #20
 8014478:	46bd      	mov	sp, r7
 801447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801447e:	4770      	bx	lr

08014480 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014480:	b480      	push	{r7}
 8014482:	b085      	sub	sp, #20
 8014484:	af00      	add	r7, sp, #0
 8014486:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014492:	681b      	ldr	r3, [r3, #0]
 8014494:	68fa      	ldr	r2, [r7, #12]
 8014496:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801449a:	f023 0303 	bic.w	r3, r3, #3
 801449e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80144a0:	68fb      	ldr	r3, [r7, #12]
 80144a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80144a6:	685b      	ldr	r3, [r3, #4]
 80144a8:	68fa      	ldr	r2, [r7, #12]
 80144aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80144ae:	f023 0302 	bic.w	r3, r3, #2
 80144b2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80144b4:	2300      	movs	r3, #0
}
 80144b6:	4618      	mov	r0, r3
 80144b8:	3714      	adds	r7, #20
 80144ba:	46bd      	mov	sp, r7
 80144bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144c0:	4770      	bx	lr

080144c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80144c2:	b480      	push	{r7}
 80144c4:	b085      	sub	sp, #20
 80144c6:	af00      	add	r7, sp, #0
 80144c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80144ce:	68fb      	ldr	r3, [r7, #12]
 80144d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80144d4:	681b      	ldr	r3, [r3, #0]
 80144d6:	68fa      	ldr	r2, [r7, #12]
 80144d8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80144dc:	f023 0303 	bic.w	r3, r3, #3
 80144e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80144e2:	68fb      	ldr	r3, [r7, #12]
 80144e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80144e8:	685b      	ldr	r3, [r3, #4]
 80144ea:	68fa      	ldr	r2, [r7, #12]
 80144ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80144f0:	f043 0302 	orr.w	r3, r3, #2
 80144f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80144f6:	2300      	movs	r3, #0
}
 80144f8:	4618      	mov	r0, r3
 80144fa:	3714      	adds	r7, #20
 80144fc:	46bd      	mov	sp, r7
 80144fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014502:	4770      	bx	lr

08014504 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8014504:	b480      	push	{r7}
 8014506:	b085      	sub	sp, #20
 8014508:	af00      	add	r7, sp, #0
 801450a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	695b      	ldr	r3, [r3, #20]
 8014510:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	699b      	ldr	r3, [r3, #24]
 8014516:	68fa      	ldr	r2, [r7, #12]
 8014518:	4013      	ands	r3, r2
 801451a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801451c:	68fb      	ldr	r3, [r7, #12]
}
 801451e:	4618      	mov	r0, r3
 8014520:	3714      	adds	r7, #20
 8014522:	46bd      	mov	sp, r7
 8014524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014528:	4770      	bx	lr

0801452a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801452a:	b480      	push	{r7}
 801452c:	b085      	sub	sp, #20
 801452e:	af00      	add	r7, sp, #0
 8014530:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801453c:	699b      	ldr	r3, [r3, #24]
 801453e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014546:	69db      	ldr	r3, [r3, #28]
 8014548:	68ba      	ldr	r2, [r7, #8]
 801454a:	4013      	ands	r3, r2
 801454c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801454e:	68bb      	ldr	r3, [r7, #8]
 8014550:	0c1b      	lsrs	r3, r3, #16
}
 8014552:	4618      	mov	r0, r3
 8014554:	3714      	adds	r7, #20
 8014556:	46bd      	mov	sp, r7
 8014558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801455c:	4770      	bx	lr

0801455e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801455e:	b480      	push	{r7}
 8014560:	b085      	sub	sp, #20
 8014562:	af00      	add	r7, sp, #0
 8014564:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014570:	699b      	ldr	r3, [r3, #24]
 8014572:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801457a:	69db      	ldr	r3, [r3, #28]
 801457c:	68ba      	ldr	r2, [r7, #8]
 801457e:	4013      	ands	r3, r2
 8014580:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8014582:	68bb      	ldr	r3, [r7, #8]
 8014584:	b29b      	uxth	r3, r3
}
 8014586:	4618      	mov	r0, r3
 8014588:	3714      	adds	r7, #20
 801458a:	46bd      	mov	sp, r7
 801458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014590:	4770      	bx	lr

08014592 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014592:	b480      	push	{r7}
 8014594:	b085      	sub	sp, #20
 8014596:	af00      	add	r7, sp, #0
 8014598:	6078      	str	r0, [r7, #4]
 801459a:	460b      	mov	r3, r1
 801459c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80145a2:	78fb      	ldrb	r3, [r7, #3]
 80145a4:	015a      	lsls	r2, r3, #5
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	4413      	add	r3, r2
 80145aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145ae:	689b      	ldr	r3, [r3, #8]
 80145b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80145b8:	695b      	ldr	r3, [r3, #20]
 80145ba:	68ba      	ldr	r2, [r7, #8]
 80145bc:	4013      	ands	r3, r2
 80145be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80145c0:	68bb      	ldr	r3, [r7, #8]
}
 80145c2:	4618      	mov	r0, r3
 80145c4:	3714      	adds	r7, #20
 80145c6:	46bd      	mov	sp, r7
 80145c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145cc:	4770      	bx	lr

080145ce <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80145ce:	b480      	push	{r7}
 80145d0:	b087      	sub	sp, #28
 80145d2:	af00      	add	r7, sp, #0
 80145d4:	6078      	str	r0, [r7, #4]
 80145d6:	460b      	mov	r3, r1
 80145d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80145de:	697b      	ldr	r3, [r7, #20]
 80145e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80145e4:	691b      	ldr	r3, [r3, #16]
 80145e6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80145e8:	697b      	ldr	r3, [r7, #20]
 80145ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80145ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80145f0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80145f2:	78fb      	ldrb	r3, [r7, #3]
 80145f4:	f003 030f 	and.w	r3, r3, #15
 80145f8:	68fa      	ldr	r2, [r7, #12]
 80145fa:	fa22 f303 	lsr.w	r3, r2, r3
 80145fe:	01db      	lsls	r3, r3, #7
 8014600:	b2db      	uxtb	r3, r3
 8014602:	693a      	ldr	r2, [r7, #16]
 8014604:	4313      	orrs	r3, r2
 8014606:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8014608:	78fb      	ldrb	r3, [r7, #3]
 801460a:	015a      	lsls	r2, r3, #5
 801460c:	697b      	ldr	r3, [r7, #20]
 801460e:	4413      	add	r3, r2
 8014610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014614:	689b      	ldr	r3, [r3, #8]
 8014616:	693a      	ldr	r2, [r7, #16]
 8014618:	4013      	ands	r3, r2
 801461a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801461c:	68bb      	ldr	r3, [r7, #8]
}
 801461e:	4618      	mov	r0, r3
 8014620:	371c      	adds	r7, #28
 8014622:	46bd      	mov	sp, r7
 8014624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014628:	4770      	bx	lr

0801462a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801462a:	b480      	push	{r7}
 801462c:	b083      	sub	sp, #12
 801462e:	af00      	add	r7, sp, #0
 8014630:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	695b      	ldr	r3, [r3, #20]
 8014636:	f003 0301 	and.w	r3, r3, #1
}
 801463a:	4618      	mov	r0, r3
 801463c:	370c      	adds	r7, #12
 801463e:	46bd      	mov	sp, r7
 8014640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014644:	4770      	bx	lr
	...

08014648 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8014648:	b480      	push	{r7}
 801464a:	b085      	sub	sp, #20
 801464c:	af00      	add	r7, sp, #0
 801464e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8014654:	68fb      	ldr	r3, [r7, #12]
 8014656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801465a:	681a      	ldr	r2, [r3, #0]
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014662:	4619      	mov	r1, r3
 8014664:	4b09      	ldr	r3, [pc, #36]	; (801468c <USB_ActivateSetup+0x44>)
 8014666:	4013      	ands	r3, r2
 8014668:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801466a:	68fb      	ldr	r3, [r7, #12]
 801466c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014670:	685b      	ldr	r3, [r3, #4]
 8014672:	68fa      	ldr	r2, [r7, #12]
 8014674:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801467c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801467e:	2300      	movs	r3, #0
}
 8014680:	4618      	mov	r0, r3
 8014682:	3714      	adds	r7, #20
 8014684:	46bd      	mov	sp, r7
 8014686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801468a:	4770      	bx	lr
 801468c:	fffff800 	.word	0xfffff800

08014690 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8014690:	b480      	push	{r7}
 8014692:	b087      	sub	sp, #28
 8014694:	af00      	add	r7, sp, #0
 8014696:	60f8      	str	r0, [r7, #12]
 8014698:	460b      	mov	r3, r1
 801469a:	607a      	str	r2, [r7, #4]
 801469c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801469e:	68fb      	ldr	r3, [r7, #12]
 80146a0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	333c      	adds	r3, #60	; 0x3c
 80146a6:	3304      	adds	r3, #4
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80146ac:	693b      	ldr	r3, [r7, #16]
 80146ae:	4a26      	ldr	r2, [pc, #152]	; (8014748 <USB_EP0_OutStart+0xb8>)
 80146b0:	4293      	cmp	r3, r2
 80146b2:	d90a      	bls.n	80146ca <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80146b4:	697b      	ldr	r3, [r7, #20]
 80146b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80146c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80146c4:	d101      	bne.n	80146ca <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80146c6:	2300      	movs	r3, #0
 80146c8:	e037      	b.n	801473a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80146ca:	697b      	ldr	r3, [r7, #20]
 80146cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80146d0:	461a      	mov	r2, r3
 80146d2:	2300      	movs	r3, #0
 80146d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80146d6:	697b      	ldr	r3, [r7, #20]
 80146d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80146dc:	691b      	ldr	r3, [r3, #16]
 80146de:	697a      	ldr	r2, [r7, #20]
 80146e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80146e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80146e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80146ea:	697b      	ldr	r3, [r7, #20]
 80146ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80146f0:	691b      	ldr	r3, [r3, #16]
 80146f2:	697a      	ldr	r2, [r7, #20]
 80146f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80146f8:	f043 0318 	orr.w	r3, r3, #24
 80146fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80146fe:	697b      	ldr	r3, [r7, #20]
 8014700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014704:	691b      	ldr	r3, [r3, #16]
 8014706:	697a      	ldr	r2, [r7, #20]
 8014708:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801470c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8014710:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8014712:	7afb      	ldrb	r3, [r7, #11]
 8014714:	2b01      	cmp	r3, #1
 8014716:	d10f      	bne.n	8014738 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8014718:	697b      	ldr	r3, [r7, #20]
 801471a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801471e:	461a      	mov	r2, r3
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8014724:	697b      	ldr	r3, [r7, #20]
 8014726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	697a      	ldr	r2, [r7, #20]
 801472e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014732:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8014736:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014738:	2300      	movs	r3, #0
}
 801473a:	4618      	mov	r0, r3
 801473c:	371c      	adds	r7, #28
 801473e:	46bd      	mov	sp, r7
 8014740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014744:	4770      	bx	lr
 8014746:	bf00      	nop
 8014748:	4f54300a 	.word	0x4f54300a

0801474c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801474c:	b480      	push	{r7}
 801474e:	b085      	sub	sp, #20
 8014750:	af00      	add	r7, sp, #0
 8014752:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014754:	2300      	movs	r3, #0
 8014756:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	3301      	adds	r3, #1
 801475c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801475e:	68fb      	ldr	r3, [r7, #12]
 8014760:	4a13      	ldr	r2, [pc, #76]	; (80147b0 <USB_CoreReset+0x64>)
 8014762:	4293      	cmp	r3, r2
 8014764:	d901      	bls.n	801476a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8014766:	2303      	movs	r3, #3
 8014768:	e01b      	b.n	80147a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	691b      	ldr	r3, [r3, #16]
 801476e:	2b00      	cmp	r3, #0
 8014770:	daf2      	bge.n	8014758 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8014772:	2300      	movs	r3, #0
 8014774:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	691b      	ldr	r3, [r3, #16]
 801477a:	f043 0201 	orr.w	r2, r3, #1
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	3301      	adds	r3, #1
 8014786:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	4a09      	ldr	r2, [pc, #36]	; (80147b0 <USB_CoreReset+0x64>)
 801478c:	4293      	cmp	r3, r2
 801478e:	d901      	bls.n	8014794 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8014790:	2303      	movs	r3, #3
 8014792:	e006      	b.n	80147a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	691b      	ldr	r3, [r3, #16]
 8014798:	f003 0301 	and.w	r3, r3, #1
 801479c:	2b01      	cmp	r3, #1
 801479e:	d0f0      	beq.n	8014782 <USB_CoreReset+0x36>

  return HAL_OK;
 80147a0:	2300      	movs	r3, #0
}
 80147a2:	4618      	mov	r0, r3
 80147a4:	3714      	adds	r7, #20
 80147a6:	46bd      	mov	sp, r7
 80147a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ac:	4770      	bx	lr
 80147ae:	bf00      	nop
 80147b0:	00030d40 	.word	0x00030d40

080147b4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80147b4:	b580      	push	{r7, lr}
 80147b6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80147b8:	4904      	ldr	r1, [pc, #16]	; (80147cc <MX_FATFS_Init+0x18>)
 80147ba:	4805      	ldr	r0, [pc, #20]	; (80147d0 <MX_FATFS_Init+0x1c>)
 80147bc:	f002 fa80 	bl	8016cc0 <FATFS_LinkDriver>
 80147c0:	4603      	mov	r3, r0
 80147c2:	461a      	mov	r2, r3
 80147c4:	4b03      	ldr	r3, [pc, #12]	; (80147d4 <MX_FATFS_Init+0x20>)
 80147c6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80147c8:	bf00      	nop
 80147ca:	bd80      	pop	{r7, pc}
 80147cc:	240016f8 	.word	0x240016f8
 80147d0:	08018ccc 	.word	0x08018ccc
 80147d4:	240016f4 	.word	0x240016f4

080147d8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80147d8:	b580      	push	{r7, lr}
 80147da:	b082      	sub	sp, #8
 80147dc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80147de:	2300      	movs	r3, #0
 80147e0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80147e2:	f000 f885 	bl	80148f0 <BSP_SD_IsDetected>
 80147e6:	4603      	mov	r3, r0
 80147e8:	2b01      	cmp	r3, #1
 80147ea:	d001      	beq.n	80147f0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80147ec:	2302      	movs	r3, #2
 80147ee:	e012      	b.n	8014816 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 80147f0:	480b      	ldr	r0, [pc, #44]	; (8014820 <BSP_SD_Init+0x48>)
 80147f2:	f7f8 ff41 	bl	800d678 <HAL_SD_Init>
 80147f6:	4603      	mov	r3, r0
 80147f8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80147fa:	79fb      	ldrb	r3, [r7, #7]
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d109      	bne.n	8014814 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8014800:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8014804:	4806      	ldr	r0, [pc, #24]	; (8014820 <BSP_SD_Init+0x48>)
 8014806:	f7f9 fdf7 	bl	800e3f8 <HAL_SD_ConfigWideBusOperation>
 801480a:	4603      	mov	r3, r0
 801480c:	2b00      	cmp	r3, #0
 801480e:	d001      	beq.n	8014814 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8014810:	2301      	movs	r3, #1
 8014812:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8014814:	79fb      	ldrb	r3, [r7, #7]
}
 8014816:	4618      	mov	r0, r3
 8014818:	3708      	adds	r7, #8
 801481a:	46bd      	mov	sp, r7
 801481c:	bd80      	pop	{r7, pc}
 801481e:	bf00      	nop
 8014820:	24000fc4 	.word	0x24000fc4

08014824 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8014824:	b580      	push	{r7, lr}
 8014826:	b086      	sub	sp, #24
 8014828:	af00      	add	r7, sp, #0
 801482a:	60f8      	str	r0, [r7, #12]
 801482c:	60b9      	str	r1, [r7, #8]
 801482e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014830:	2300      	movs	r3, #0
 8014832:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	68ba      	ldr	r2, [r7, #8]
 8014838:	68f9      	ldr	r1, [r7, #12]
 801483a:	4806      	ldr	r0, [pc, #24]	; (8014854 <BSP_SD_ReadBlocks_DMA+0x30>)
 801483c:	f7f9 f83c 	bl	800d8b8 <HAL_SD_ReadBlocks_DMA>
 8014840:	4603      	mov	r3, r0
 8014842:	2b00      	cmp	r3, #0
 8014844:	d001      	beq.n	801484a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8014846:	2301      	movs	r3, #1
 8014848:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801484a:	7dfb      	ldrb	r3, [r7, #23]
}
 801484c:	4618      	mov	r0, r3
 801484e:	3718      	adds	r7, #24
 8014850:	46bd      	mov	sp, r7
 8014852:	bd80      	pop	{r7, pc}
 8014854:	24000fc4 	.word	0x24000fc4

08014858 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8014858:	b580      	push	{r7, lr}
 801485a:	b086      	sub	sp, #24
 801485c:	af00      	add	r7, sp, #0
 801485e:	60f8      	str	r0, [r7, #12]
 8014860:	60b9      	str	r1, [r7, #8]
 8014862:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014864:	2300      	movs	r3, #0
 8014866:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	68ba      	ldr	r2, [r7, #8]
 801486c:	68f9      	ldr	r1, [r7, #12]
 801486e:	4806      	ldr	r0, [pc, #24]	; (8014888 <BSP_SD_WriteBlocks_DMA+0x30>)
 8014870:	f7f9 f8ca 	bl	800da08 <HAL_SD_WriteBlocks_DMA>
 8014874:	4603      	mov	r3, r0
 8014876:	2b00      	cmp	r3, #0
 8014878:	d001      	beq.n	801487e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801487a:	2301      	movs	r3, #1
 801487c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801487e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014880:	4618      	mov	r0, r3
 8014882:	3718      	adds	r7, #24
 8014884:	46bd      	mov	sp, r7
 8014886:	bd80      	pop	{r7, pc}
 8014888:	24000fc4 	.word	0x24000fc4

0801488c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 801488c:	b580      	push	{r7, lr}
 801488e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8014890:	4805      	ldr	r0, [pc, #20]	; (80148a8 <BSP_SD_GetCardState+0x1c>)
 8014892:	f7f9 fec3 	bl	800e61c <HAL_SD_GetCardState>
 8014896:	4603      	mov	r3, r0
 8014898:	2b04      	cmp	r3, #4
 801489a:	bf14      	ite	ne
 801489c:	2301      	movne	r3, #1
 801489e:	2300      	moveq	r3, #0
 80148a0:	b2db      	uxtb	r3, r3
}
 80148a2:	4618      	mov	r0, r3
 80148a4:	bd80      	pop	{r7, pc}
 80148a6:	bf00      	nop
 80148a8:	24000fc4 	.word	0x24000fc4

080148ac <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80148ac:	b580      	push	{r7, lr}
 80148ae:	b082      	sub	sp, #8
 80148b0:	af00      	add	r7, sp, #0
 80148b2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 80148b4:	6879      	ldr	r1, [r7, #4]
 80148b6:	4803      	ldr	r0, [pc, #12]	; (80148c4 <BSP_SD_GetCardInfo+0x18>)
 80148b8:	f7f9 fd72 	bl	800e3a0 <HAL_SD_GetCardInfo>
}
 80148bc:	bf00      	nop
 80148be:	3708      	adds	r7, #8
 80148c0:	46bd      	mov	sp, r7
 80148c2:	bd80      	pop	{r7, pc}
 80148c4:	24000fc4 	.word	0x24000fc4

080148c8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80148c8:	b580      	push	{r7, lr}
 80148ca:	b082      	sub	sp, #8
 80148cc:	af00      	add	r7, sp, #0
 80148ce:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80148d0:	f000 f9a0 	bl	8014c14 <BSP_SD_WriteCpltCallback>
}
 80148d4:	bf00      	nop
 80148d6:	3708      	adds	r7, #8
 80148d8:	46bd      	mov	sp, r7
 80148da:	bd80      	pop	{r7, pc}

080148dc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80148dc:	b580      	push	{r7, lr}
 80148de:	b082      	sub	sp, #8
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80148e4:	f000 f9a2 	bl	8014c2c <BSP_SD_ReadCpltCallback>
}
 80148e8:	bf00      	nop
 80148ea:	3708      	adds	r7, #8
 80148ec:	46bd      	mov	sp, r7
 80148ee:	bd80      	pop	{r7, pc}

080148f0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80148f0:	b580      	push	{r7, lr}
 80148f2:	b082      	sub	sp, #8
 80148f4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80148f6:	2301      	movs	r3, #1
 80148f8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80148fa:	f000 f80b 	bl	8014914 <BSP_PlatformIsDetected>
 80148fe:	4603      	mov	r3, r0
 8014900:	2b00      	cmp	r3, #0
 8014902:	d101      	bne.n	8014908 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8014904:	2300      	movs	r3, #0
 8014906:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8014908:	79fb      	ldrb	r3, [r7, #7]
 801490a:	b2db      	uxtb	r3, r3
}
 801490c:	4618      	mov	r0, r3
 801490e:	3708      	adds	r7, #8
 8014910:	46bd      	mov	sp, r7
 8014912:	bd80      	pop	{r7, pc}

08014914 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8014914:	b580      	push	{r7, lr}
 8014916:	b082      	sub	sp, #8
 8014918:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801491a:	2301      	movs	r3, #1
 801491c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801491e:	2104      	movs	r1, #4
 8014920:	4806      	ldr	r0, [pc, #24]	; (801493c <BSP_PlatformIsDetected+0x28>)
 8014922:	f7f3 fccf 	bl	80082c4 <HAL_GPIO_ReadPin>
 8014926:	4603      	mov	r3, r0
 8014928:	2b00      	cmp	r3, #0
 801492a:	d001      	beq.n	8014930 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 801492c:	2300      	movs	r3, #0
 801492e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8014930:	79fb      	ldrb	r3, [r7, #7]
}
 8014932:	4618      	mov	r0, r3
 8014934:	3708      	adds	r7, #8
 8014936:	46bd      	mov	sp, r7
 8014938:	bd80      	pop	{r7, pc}
 801493a:	bf00      	nop
 801493c:	58020400 	.word	0x58020400

08014940 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8014940:	b580      	push	{r7, lr}
 8014942:	b084      	sub	sp, #16
 8014944:	af00      	add	r7, sp, #0
 8014946:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8014948:	f7ef fa16 	bl	8003d78 <HAL_GetTick>
 801494c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801494e:	e006      	b.n	801495e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014950:	f7ff ff9c 	bl	801488c <BSP_SD_GetCardState>
 8014954:	4603      	mov	r3, r0
 8014956:	2b00      	cmp	r3, #0
 8014958:	d101      	bne.n	801495e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801495a:	2300      	movs	r3, #0
 801495c:	e009      	b.n	8014972 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801495e:	f7ef fa0b 	bl	8003d78 <HAL_GetTick>
 8014962:	4602      	mov	r2, r0
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	1ad3      	subs	r3, r2, r3
 8014968:	687a      	ldr	r2, [r7, #4]
 801496a:	429a      	cmp	r2, r3
 801496c:	d8f0      	bhi.n	8014950 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801496e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014972:	4618      	mov	r0, r3
 8014974:	3710      	adds	r7, #16
 8014976:	46bd      	mov	sp, r7
 8014978:	bd80      	pop	{r7, pc}
	...

0801497c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801497c:	b580      	push	{r7, lr}
 801497e:	b082      	sub	sp, #8
 8014980:	af00      	add	r7, sp, #0
 8014982:	4603      	mov	r3, r0
 8014984:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8014986:	4b0b      	ldr	r3, [pc, #44]	; (80149b4 <SD_CheckStatus+0x38>)
 8014988:	2201      	movs	r2, #1
 801498a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801498c:	f7ff ff7e 	bl	801488c <BSP_SD_GetCardState>
 8014990:	4603      	mov	r3, r0
 8014992:	2b00      	cmp	r3, #0
 8014994:	d107      	bne.n	80149a6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8014996:	4b07      	ldr	r3, [pc, #28]	; (80149b4 <SD_CheckStatus+0x38>)
 8014998:	781b      	ldrb	r3, [r3, #0]
 801499a:	b2db      	uxtb	r3, r3
 801499c:	f023 0301 	bic.w	r3, r3, #1
 80149a0:	b2da      	uxtb	r2, r3
 80149a2:	4b04      	ldr	r3, [pc, #16]	; (80149b4 <SD_CheckStatus+0x38>)
 80149a4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80149a6:	4b03      	ldr	r3, [pc, #12]	; (80149b4 <SD_CheckStatus+0x38>)
 80149a8:	781b      	ldrb	r3, [r3, #0]
 80149aa:	b2db      	uxtb	r3, r3
}
 80149ac:	4618      	mov	r0, r3
 80149ae:	3708      	adds	r7, #8
 80149b0:	46bd      	mov	sp, r7
 80149b2:	bd80      	pop	{r7, pc}
 80149b4:	2400000d 	.word	0x2400000d

080149b8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80149b8:	b580      	push	{r7, lr}
 80149ba:	b082      	sub	sp, #8
 80149bc:	af00      	add	r7, sp, #0
 80149be:	4603      	mov	r3, r0
 80149c0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80149c2:	f7ff ff09 	bl	80147d8 <BSP_SD_Init>
 80149c6:	4603      	mov	r3, r0
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d107      	bne.n	80149dc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80149cc:	79fb      	ldrb	r3, [r7, #7]
 80149ce:	4618      	mov	r0, r3
 80149d0:	f7ff ffd4 	bl	801497c <SD_CheckStatus>
 80149d4:	4603      	mov	r3, r0
 80149d6:	461a      	mov	r2, r3
 80149d8:	4b04      	ldr	r3, [pc, #16]	; (80149ec <SD_initialize+0x34>)
 80149da:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80149dc:	4b03      	ldr	r3, [pc, #12]	; (80149ec <SD_initialize+0x34>)
 80149de:	781b      	ldrb	r3, [r3, #0]
 80149e0:	b2db      	uxtb	r3, r3
}
 80149e2:	4618      	mov	r0, r3
 80149e4:	3708      	adds	r7, #8
 80149e6:	46bd      	mov	sp, r7
 80149e8:	bd80      	pop	{r7, pc}
 80149ea:	bf00      	nop
 80149ec:	2400000d 	.word	0x2400000d

080149f0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80149f0:	b580      	push	{r7, lr}
 80149f2:	b082      	sub	sp, #8
 80149f4:	af00      	add	r7, sp, #0
 80149f6:	4603      	mov	r3, r0
 80149f8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80149fa:	79fb      	ldrb	r3, [r7, #7]
 80149fc:	4618      	mov	r0, r3
 80149fe:	f7ff ffbd 	bl	801497c <SD_CheckStatus>
 8014a02:	4603      	mov	r3, r0
}
 8014a04:	4618      	mov	r0, r3
 8014a06:	3708      	adds	r7, #8
 8014a08:	46bd      	mov	sp, r7
 8014a0a:	bd80      	pop	{r7, pc}

08014a0c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8014a0c:	b580      	push	{r7, lr}
 8014a0e:	b086      	sub	sp, #24
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	60b9      	str	r1, [r7, #8]
 8014a14:	607a      	str	r2, [r7, #4]
 8014a16:	603b      	str	r3, [r7, #0]
 8014a18:	4603      	mov	r3, r0
 8014a1a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014a1c:	2301      	movs	r3, #1
 8014a1e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014a20:	f247 5030 	movw	r0, #30000	; 0x7530
 8014a24:	f7ff ff8c 	bl	8014940 <SD_CheckStatusWithTimeout>
 8014a28:	4603      	mov	r3, r0
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	da01      	bge.n	8014a32 <SD_read+0x26>
  {
    return res;
 8014a2e:	7dfb      	ldrb	r3, [r7, #23]
 8014a30:	e03b      	b.n	8014aaa <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8014a32:	683a      	ldr	r2, [r7, #0]
 8014a34:	6879      	ldr	r1, [r7, #4]
 8014a36:	68b8      	ldr	r0, [r7, #8]
 8014a38:	f7ff fef4 	bl	8014824 <BSP_SD_ReadBlocks_DMA>
 8014a3c:	4603      	mov	r3, r0
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d132      	bne.n	8014aa8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8014a42:	4b1c      	ldr	r3, [pc, #112]	; (8014ab4 <SD_read+0xa8>)
 8014a44:	2200      	movs	r2, #0
 8014a46:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8014a48:	f7ef f996 	bl	8003d78 <HAL_GetTick>
 8014a4c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8014a4e:	bf00      	nop
 8014a50:	4b18      	ldr	r3, [pc, #96]	; (8014ab4 <SD_read+0xa8>)
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d108      	bne.n	8014a6a <SD_read+0x5e>
 8014a58:	f7ef f98e 	bl	8003d78 <HAL_GetTick>
 8014a5c:	4602      	mov	r2, r0
 8014a5e:	693b      	ldr	r3, [r7, #16]
 8014a60:	1ad3      	subs	r3, r2, r3
 8014a62:	f247 522f 	movw	r2, #29999	; 0x752f
 8014a66:	4293      	cmp	r3, r2
 8014a68:	d9f2      	bls.n	8014a50 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8014a6a:	4b12      	ldr	r3, [pc, #72]	; (8014ab4 <SD_read+0xa8>)
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d102      	bne.n	8014a78 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8014a72:	2301      	movs	r3, #1
 8014a74:	75fb      	strb	r3, [r7, #23]
 8014a76:	e017      	b.n	8014aa8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8014a78:	4b0e      	ldr	r3, [pc, #56]	; (8014ab4 <SD_read+0xa8>)
 8014a7a:	2200      	movs	r2, #0
 8014a7c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8014a7e:	f7ef f97b 	bl	8003d78 <HAL_GetTick>
 8014a82:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014a84:	e007      	b.n	8014a96 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014a86:	f7ff ff01 	bl	801488c <BSP_SD_GetCardState>
 8014a8a:	4603      	mov	r3, r0
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d102      	bne.n	8014a96 <SD_read+0x8a>
          {
            res = RES_OK;
 8014a90:	2300      	movs	r3, #0
 8014a92:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8014a94:	e008      	b.n	8014aa8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014a96:	f7ef f96f 	bl	8003d78 <HAL_GetTick>
 8014a9a:	4602      	mov	r2, r0
 8014a9c:	693b      	ldr	r3, [r7, #16]
 8014a9e:	1ad3      	subs	r3, r2, r3
 8014aa0:	f247 522f 	movw	r2, #29999	; 0x752f
 8014aa4:	4293      	cmp	r3, r2
 8014aa6:	d9ee      	bls.n	8014a86 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8014aa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8014aaa:	4618      	mov	r0, r3
 8014aac:	3718      	adds	r7, #24
 8014aae:	46bd      	mov	sp, r7
 8014ab0:	bd80      	pop	{r7, pc}
 8014ab2:	bf00      	nop
 8014ab4:	24001700 	.word	0x24001700

08014ab8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8014ab8:	b580      	push	{r7, lr}
 8014aba:	b086      	sub	sp, #24
 8014abc:	af00      	add	r7, sp, #0
 8014abe:	60b9      	str	r1, [r7, #8]
 8014ac0:	607a      	str	r2, [r7, #4]
 8014ac2:	603b      	str	r3, [r7, #0]
 8014ac4:	4603      	mov	r3, r0
 8014ac6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014ac8:	2301      	movs	r3, #1
 8014aca:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8014acc:	4b24      	ldr	r3, [pc, #144]	; (8014b60 <SD_write+0xa8>)
 8014ace:	2200      	movs	r2, #0
 8014ad0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014ad2:	f247 5030 	movw	r0, #30000	; 0x7530
 8014ad6:	f7ff ff33 	bl	8014940 <SD_CheckStatusWithTimeout>
 8014ada:	4603      	mov	r3, r0
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	da01      	bge.n	8014ae4 <SD_write+0x2c>
  {
    return res;
 8014ae0:	7dfb      	ldrb	r3, [r7, #23]
 8014ae2:	e038      	b.n	8014b56 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8014ae4:	683a      	ldr	r2, [r7, #0]
 8014ae6:	6879      	ldr	r1, [r7, #4]
 8014ae8:	68b8      	ldr	r0, [r7, #8]
 8014aea:	f7ff feb5 	bl	8014858 <BSP_SD_WriteBlocks_DMA>
 8014aee:	4603      	mov	r3, r0
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	d12f      	bne.n	8014b54 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8014af4:	f7ef f940 	bl	8003d78 <HAL_GetTick>
 8014af8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8014afa:	bf00      	nop
 8014afc:	4b18      	ldr	r3, [pc, #96]	; (8014b60 <SD_write+0xa8>)
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d108      	bne.n	8014b16 <SD_write+0x5e>
 8014b04:	f7ef f938 	bl	8003d78 <HAL_GetTick>
 8014b08:	4602      	mov	r2, r0
 8014b0a:	693b      	ldr	r3, [r7, #16]
 8014b0c:	1ad3      	subs	r3, r2, r3
 8014b0e:	f247 522f 	movw	r2, #29999	; 0x752f
 8014b12:	4293      	cmp	r3, r2
 8014b14:	d9f2      	bls.n	8014afc <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8014b16:	4b12      	ldr	r3, [pc, #72]	; (8014b60 <SD_write+0xa8>)
 8014b18:	681b      	ldr	r3, [r3, #0]
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d102      	bne.n	8014b24 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8014b1e:	2301      	movs	r3, #1
 8014b20:	75fb      	strb	r3, [r7, #23]
 8014b22:	e017      	b.n	8014b54 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8014b24:	4b0e      	ldr	r3, [pc, #56]	; (8014b60 <SD_write+0xa8>)
 8014b26:	2200      	movs	r2, #0
 8014b28:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8014b2a:	f7ef f925 	bl	8003d78 <HAL_GetTick>
 8014b2e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014b30:	e007      	b.n	8014b42 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014b32:	f7ff feab 	bl	801488c <BSP_SD_GetCardState>
 8014b36:	4603      	mov	r3, r0
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d102      	bne.n	8014b42 <SD_write+0x8a>
          {
            res = RES_OK;
 8014b3c:	2300      	movs	r3, #0
 8014b3e:	75fb      	strb	r3, [r7, #23]
            break;
 8014b40:	e008      	b.n	8014b54 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014b42:	f7ef f919 	bl	8003d78 <HAL_GetTick>
 8014b46:	4602      	mov	r2, r0
 8014b48:	693b      	ldr	r3, [r7, #16]
 8014b4a:	1ad3      	subs	r3, r2, r3
 8014b4c:	f247 522f 	movw	r2, #29999	; 0x752f
 8014b50:	4293      	cmp	r3, r2
 8014b52:	d9ee      	bls.n	8014b32 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8014b54:	7dfb      	ldrb	r3, [r7, #23]
}
 8014b56:	4618      	mov	r0, r3
 8014b58:	3718      	adds	r7, #24
 8014b5a:	46bd      	mov	sp, r7
 8014b5c:	bd80      	pop	{r7, pc}
 8014b5e:	bf00      	nop
 8014b60:	240016fc 	.word	0x240016fc

08014b64 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8014b64:	b580      	push	{r7, lr}
 8014b66:	b08c      	sub	sp, #48	; 0x30
 8014b68:	af00      	add	r7, sp, #0
 8014b6a:	4603      	mov	r3, r0
 8014b6c:	603a      	str	r2, [r7, #0]
 8014b6e:	71fb      	strb	r3, [r7, #7]
 8014b70:	460b      	mov	r3, r1
 8014b72:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8014b74:	2301      	movs	r3, #1
 8014b76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8014b7a:	4b25      	ldr	r3, [pc, #148]	; (8014c10 <SD_ioctl+0xac>)
 8014b7c:	781b      	ldrb	r3, [r3, #0]
 8014b7e:	b2db      	uxtb	r3, r3
 8014b80:	f003 0301 	and.w	r3, r3, #1
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d001      	beq.n	8014b8c <SD_ioctl+0x28>
 8014b88:	2303      	movs	r3, #3
 8014b8a:	e03c      	b.n	8014c06 <SD_ioctl+0xa2>

  switch (cmd)
 8014b8c:	79bb      	ldrb	r3, [r7, #6]
 8014b8e:	2b03      	cmp	r3, #3
 8014b90:	d834      	bhi.n	8014bfc <SD_ioctl+0x98>
 8014b92:	a201      	add	r2, pc, #4	; (adr r2, 8014b98 <SD_ioctl+0x34>)
 8014b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b98:	08014ba9 	.word	0x08014ba9
 8014b9c:	08014bb1 	.word	0x08014bb1
 8014ba0:	08014bc9 	.word	0x08014bc9
 8014ba4:	08014be3 	.word	0x08014be3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8014ba8:	2300      	movs	r3, #0
 8014baa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014bae:	e028      	b.n	8014c02 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8014bb0:	f107 0308 	add.w	r3, r7, #8
 8014bb4:	4618      	mov	r0, r3
 8014bb6:	f7ff fe79 	bl	80148ac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8014bba:	6a3a      	ldr	r2, [r7, #32]
 8014bbc:	683b      	ldr	r3, [r7, #0]
 8014bbe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014bc0:	2300      	movs	r3, #0
 8014bc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014bc6:	e01c      	b.n	8014c02 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014bc8:	f107 0308 	add.w	r3, r7, #8
 8014bcc:	4618      	mov	r0, r3
 8014bce:	f7ff fe6d 	bl	80148ac <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8014bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bd4:	b29a      	uxth	r2, r3
 8014bd6:	683b      	ldr	r3, [r7, #0]
 8014bd8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8014bda:	2300      	movs	r3, #0
 8014bdc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014be0:	e00f      	b.n	8014c02 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014be2:	f107 0308 	add.w	r3, r7, #8
 8014be6:	4618      	mov	r0, r3
 8014be8:	f7ff fe60 	bl	80148ac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8014bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bee:	0a5a      	lsrs	r2, r3, #9
 8014bf0:	683b      	ldr	r3, [r7, #0]
 8014bf2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014bf4:	2300      	movs	r3, #0
 8014bf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014bfa:	e002      	b.n	8014c02 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8014bfc:	2304      	movs	r3, #4
 8014bfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8014c02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8014c06:	4618      	mov	r0, r3
 8014c08:	3730      	adds	r7, #48	; 0x30
 8014c0a:	46bd      	mov	sp, r7
 8014c0c:	bd80      	pop	{r7, pc}
 8014c0e:	bf00      	nop
 8014c10:	2400000d 	.word	0x2400000d

08014c14 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8014c14:	b480      	push	{r7}
 8014c16:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8014c18:	4b03      	ldr	r3, [pc, #12]	; (8014c28 <BSP_SD_WriteCpltCallback+0x14>)
 8014c1a:	2201      	movs	r2, #1
 8014c1c:	601a      	str	r2, [r3, #0]
}
 8014c1e:	bf00      	nop
 8014c20:	46bd      	mov	sp, r7
 8014c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c26:	4770      	bx	lr
 8014c28:	240016fc 	.word	0x240016fc

08014c2c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8014c2c:	b480      	push	{r7}
 8014c2e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8014c30:	4b03      	ldr	r3, [pc, #12]	; (8014c40 <BSP_SD_ReadCpltCallback+0x14>)
 8014c32:	2201      	movs	r2, #1
 8014c34:	601a      	str	r2, [r3, #0]
}
 8014c36:	bf00      	nop
 8014c38:	46bd      	mov	sp, r7
 8014c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c3e:	4770      	bx	lr
 8014c40:	24001700 	.word	0x24001700

08014c44 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014c44:	b580      	push	{r7, lr}
 8014c46:	b084      	sub	sp, #16
 8014c48:	af00      	add	r7, sp, #0
 8014c4a:	6078      	str	r0, [r7, #4]
 8014c4c:	460b      	mov	r3, r1
 8014c4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014c50:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8014c54:	f002 fd2a 	bl	80176ac <USBD_static_malloc>
 8014c58:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d109      	bne.n	8014c74 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	32b0      	adds	r2, #176	; 0xb0
 8014c6a:	2100      	movs	r1, #0
 8014c6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8014c70:	2302      	movs	r3, #2
 8014c72:	e0d4      	b.n	8014e1e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8014c74:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8014c78:	2100      	movs	r1, #0
 8014c7a:	68f8      	ldr	r0, [r7, #12]
 8014c7c:	f002 fda8 	bl	80177d0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	32b0      	adds	r2, #176	; 0xb0
 8014c8a:	68f9      	ldr	r1, [r7, #12]
 8014c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	32b0      	adds	r2, #176	; 0xb0
 8014c9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	7c1b      	ldrb	r3, [r3, #16]
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d138      	bne.n	8014d1e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014cac:	4b5e      	ldr	r3, [pc, #376]	; (8014e28 <USBD_CDC_Init+0x1e4>)
 8014cae:	7819      	ldrb	r1, [r3, #0]
 8014cb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014cb4:	2202      	movs	r2, #2
 8014cb6:	6878      	ldr	r0, [r7, #4]
 8014cb8:	f002 fbd5 	bl	8017466 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014cbc:	4b5a      	ldr	r3, [pc, #360]	; (8014e28 <USBD_CDC_Init+0x1e4>)
 8014cbe:	781b      	ldrb	r3, [r3, #0]
 8014cc0:	f003 020f 	and.w	r2, r3, #15
 8014cc4:	6879      	ldr	r1, [r7, #4]
 8014cc6:	4613      	mov	r3, r2
 8014cc8:	009b      	lsls	r3, r3, #2
 8014cca:	4413      	add	r3, r2
 8014ccc:	009b      	lsls	r3, r3, #2
 8014cce:	440b      	add	r3, r1
 8014cd0:	3324      	adds	r3, #36	; 0x24
 8014cd2:	2201      	movs	r2, #1
 8014cd4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014cd6:	4b55      	ldr	r3, [pc, #340]	; (8014e2c <USBD_CDC_Init+0x1e8>)
 8014cd8:	7819      	ldrb	r1, [r3, #0]
 8014cda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014cde:	2202      	movs	r2, #2
 8014ce0:	6878      	ldr	r0, [r7, #4]
 8014ce2:	f002 fbc0 	bl	8017466 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014ce6:	4b51      	ldr	r3, [pc, #324]	; (8014e2c <USBD_CDC_Init+0x1e8>)
 8014ce8:	781b      	ldrb	r3, [r3, #0]
 8014cea:	f003 020f 	and.w	r2, r3, #15
 8014cee:	6879      	ldr	r1, [r7, #4]
 8014cf0:	4613      	mov	r3, r2
 8014cf2:	009b      	lsls	r3, r3, #2
 8014cf4:	4413      	add	r3, r2
 8014cf6:	009b      	lsls	r3, r3, #2
 8014cf8:	440b      	add	r3, r1
 8014cfa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014cfe:	2201      	movs	r2, #1
 8014d00:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8014d02:	4b4b      	ldr	r3, [pc, #300]	; (8014e30 <USBD_CDC_Init+0x1ec>)
 8014d04:	781b      	ldrb	r3, [r3, #0]
 8014d06:	f003 020f 	and.w	r2, r3, #15
 8014d0a:	6879      	ldr	r1, [r7, #4]
 8014d0c:	4613      	mov	r3, r2
 8014d0e:	009b      	lsls	r3, r3, #2
 8014d10:	4413      	add	r3, r2
 8014d12:	009b      	lsls	r3, r3, #2
 8014d14:	440b      	add	r3, r1
 8014d16:	3326      	adds	r3, #38	; 0x26
 8014d18:	2210      	movs	r2, #16
 8014d1a:	801a      	strh	r2, [r3, #0]
 8014d1c:	e035      	b.n	8014d8a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014d1e:	4b42      	ldr	r3, [pc, #264]	; (8014e28 <USBD_CDC_Init+0x1e4>)
 8014d20:	7819      	ldrb	r1, [r3, #0]
 8014d22:	2340      	movs	r3, #64	; 0x40
 8014d24:	2202      	movs	r2, #2
 8014d26:	6878      	ldr	r0, [r7, #4]
 8014d28:	f002 fb9d 	bl	8017466 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014d2c:	4b3e      	ldr	r3, [pc, #248]	; (8014e28 <USBD_CDC_Init+0x1e4>)
 8014d2e:	781b      	ldrb	r3, [r3, #0]
 8014d30:	f003 020f 	and.w	r2, r3, #15
 8014d34:	6879      	ldr	r1, [r7, #4]
 8014d36:	4613      	mov	r3, r2
 8014d38:	009b      	lsls	r3, r3, #2
 8014d3a:	4413      	add	r3, r2
 8014d3c:	009b      	lsls	r3, r3, #2
 8014d3e:	440b      	add	r3, r1
 8014d40:	3324      	adds	r3, #36	; 0x24
 8014d42:	2201      	movs	r2, #1
 8014d44:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014d46:	4b39      	ldr	r3, [pc, #228]	; (8014e2c <USBD_CDC_Init+0x1e8>)
 8014d48:	7819      	ldrb	r1, [r3, #0]
 8014d4a:	2340      	movs	r3, #64	; 0x40
 8014d4c:	2202      	movs	r2, #2
 8014d4e:	6878      	ldr	r0, [r7, #4]
 8014d50:	f002 fb89 	bl	8017466 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014d54:	4b35      	ldr	r3, [pc, #212]	; (8014e2c <USBD_CDC_Init+0x1e8>)
 8014d56:	781b      	ldrb	r3, [r3, #0]
 8014d58:	f003 020f 	and.w	r2, r3, #15
 8014d5c:	6879      	ldr	r1, [r7, #4]
 8014d5e:	4613      	mov	r3, r2
 8014d60:	009b      	lsls	r3, r3, #2
 8014d62:	4413      	add	r3, r2
 8014d64:	009b      	lsls	r3, r3, #2
 8014d66:	440b      	add	r3, r1
 8014d68:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014d6c:	2201      	movs	r2, #1
 8014d6e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014d70:	4b2f      	ldr	r3, [pc, #188]	; (8014e30 <USBD_CDC_Init+0x1ec>)
 8014d72:	781b      	ldrb	r3, [r3, #0]
 8014d74:	f003 020f 	and.w	r2, r3, #15
 8014d78:	6879      	ldr	r1, [r7, #4]
 8014d7a:	4613      	mov	r3, r2
 8014d7c:	009b      	lsls	r3, r3, #2
 8014d7e:	4413      	add	r3, r2
 8014d80:	009b      	lsls	r3, r3, #2
 8014d82:	440b      	add	r3, r1
 8014d84:	3326      	adds	r3, #38	; 0x26
 8014d86:	2210      	movs	r2, #16
 8014d88:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014d8a:	4b29      	ldr	r3, [pc, #164]	; (8014e30 <USBD_CDC_Init+0x1ec>)
 8014d8c:	7819      	ldrb	r1, [r3, #0]
 8014d8e:	2308      	movs	r3, #8
 8014d90:	2203      	movs	r2, #3
 8014d92:	6878      	ldr	r0, [r7, #4]
 8014d94:	f002 fb67 	bl	8017466 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8014d98:	4b25      	ldr	r3, [pc, #148]	; (8014e30 <USBD_CDC_Init+0x1ec>)
 8014d9a:	781b      	ldrb	r3, [r3, #0]
 8014d9c:	f003 020f 	and.w	r2, r3, #15
 8014da0:	6879      	ldr	r1, [r7, #4]
 8014da2:	4613      	mov	r3, r2
 8014da4:	009b      	lsls	r3, r3, #2
 8014da6:	4413      	add	r3, r2
 8014da8:	009b      	lsls	r3, r3, #2
 8014daa:	440b      	add	r3, r1
 8014dac:	3324      	adds	r3, #36	; 0x24
 8014dae:	2201      	movs	r2, #1
 8014db0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	2200      	movs	r2, #0
 8014db6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014dc0:	687a      	ldr	r2, [r7, #4]
 8014dc2:	33b0      	adds	r3, #176	; 0xb0
 8014dc4:	009b      	lsls	r3, r3, #2
 8014dc6:	4413      	add	r3, r2
 8014dc8:	685b      	ldr	r3, [r3, #4]
 8014dca:	681b      	ldr	r3, [r3, #0]
 8014dcc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	2200      	movs	r2, #0
 8014dd2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8014dd6:	68fb      	ldr	r3, [r7, #12]
 8014dd8:	2200      	movs	r2, #0
 8014dda:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d101      	bne.n	8014dec <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8014de8:	2302      	movs	r3, #2
 8014dea:	e018      	b.n	8014e1e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	7c1b      	ldrb	r3, [r3, #16]
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d10a      	bne.n	8014e0a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014df4:	4b0d      	ldr	r3, [pc, #52]	; (8014e2c <USBD_CDC_Init+0x1e8>)
 8014df6:	7819      	ldrb	r1, [r3, #0]
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014dfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014e02:	6878      	ldr	r0, [r7, #4]
 8014e04:	f002 fc1e 	bl	8017644 <USBD_LL_PrepareReceive>
 8014e08:	e008      	b.n	8014e1c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014e0a:	4b08      	ldr	r3, [pc, #32]	; (8014e2c <USBD_CDC_Init+0x1e8>)
 8014e0c:	7819      	ldrb	r1, [r3, #0]
 8014e0e:	68fb      	ldr	r3, [r7, #12]
 8014e10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014e14:	2340      	movs	r3, #64	; 0x40
 8014e16:	6878      	ldr	r0, [r7, #4]
 8014e18:	f002 fc14 	bl	8017644 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014e1c:	2300      	movs	r3, #0
}
 8014e1e:	4618      	mov	r0, r3
 8014e20:	3710      	adds	r7, #16
 8014e22:	46bd      	mov	sp, r7
 8014e24:	bd80      	pop	{r7, pc}
 8014e26:	bf00      	nop
 8014e28:	24000097 	.word	0x24000097
 8014e2c:	24000098 	.word	0x24000098
 8014e30:	24000099 	.word	0x24000099

08014e34 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014e34:	b580      	push	{r7, lr}
 8014e36:	b082      	sub	sp, #8
 8014e38:	af00      	add	r7, sp, #0
 8014e3a:	6078      	str	r0, [r7, #4]
 8014e3c:	460b      	mov	r3, r1
 8014e3e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8014e40:	4b3a      	ldr	r3, [pc, #232]	; (8014f2c <USBD_CDC_DeInit+0xf8>)
 8014e42:	781b      	ldrb	r3, [r3, #0]
 8014e44:	4619      	mov	r1, r3
 8014e46:	6878      	ldr	r0, [r7, #4]
 8014e48:	f002 fb33 	bl	80174b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8014e4c:	4b37      	ldr	r3, [pc, #220]	; (8014f2c <USBD_CDC_DeInit+0xf8>)
 8014e4e:	781b      	ldrb	r3, [r3, #0]
 8014e50:	f003 020f 	and.w	r2, r3, #15
 8014e54:	6879      	ldr	r1, [r7, #4]
 8014e56:	4613      	mov	r3, r2
 8014e58:	009b      	lsls	r3, r3, #2
 8014e5a:	4413      	add	r3, r2
 8014e5c:	009b      	lsls	r3, r3, #2
 8014e5e:	440b      	add	r3, r1
 8014e60:	3324      	adds	r3, #36	; 0x24
 8014e62:	2200      	movs	r2, #0
 8014e64:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8014e66:	4b32      	ldr	r3, [pc, #200]	; (8014f30 <USBD_CDC_DeInit+0xfc>)
 8014e68:	781b      	ldrb	r3, [r3, #0]
 8014e6a:	4619      	mov	r1, r3
 8014e6c:	6878      	ldr	r0, [r7, #4]
 8014e6e:	f002 fb20 	bl	80174b2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8014e72:	4b2f      	ldr	r3, [pc, #188]	; (8014f30 <USBD_CDC_DeInit+0xfc>)
 8014e74:	781b      	ldrb	r3, [r3, #0]
 8014e76:	f003 020f 	and.w	r2, r3, #15
 8014e7a:	6879      	ldr	r1, [r7, #4]
 8014e7c:	4613      	mov	r3, r2
 8014e7e:	009b      	lsls	r3, r3, #2
 8014e80:	4413      	add	r3, r2
 8014e82:	009b      	lsls	r3, r3, #2
 8014e84:	440b      	add	r3, r1
 8014e86:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014e8a:	2200      	movs	r2, #0
 8014e8c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8014e8e:	4b29      	ldr	r3, [pc, #164]	; (8014f34 <USBD_CDC_DeInit+0x100>)
 8014e90:	781b      	ldrb	r3, [r3, #0]
 8014e92:	4619      	mov	r1, r3
 8014e94:	6878      	ldr	r0, [r7, #4]
 8014e96:	f002 fb0c 	bl	80174b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8014e9a:	4b26      	ldr	r3, [pc, #152]	; (8014f34 <USBD_CDC_DeInit+0x100>)
 8014e9c:	781b      	ldrb	r3, [r3, #0]
 8014e9e:	f003 020f 	and.w	r2, r3, #15
 8014ea2:	6879      	ldr	r1, [r7, #4]
 8014ea4:	4613      	mov	r3, r2
 8014ea6:	009b      	lsls	r3, r3, #2
 8014ea8:	4413      	add	r3, r2
 8014eaa:	009b      	lsls	r3, r3, #2
 8014eac:	440b      	add	r3, r1
 8014eae:	3324      	adds	r3, #36	; 0x24
 8014eb0:	2200      	movs	r2, #0
 8014eb2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8014eb4:	4b1f      	ldr	r3, [pc, #124]	; (8014f34 <USBD_CDC_DeInit+0x100>)
 8014eb6:	781b      	ldrb	r3, [r3, #0]
 8014eb8:	f003 020f 	and.w	r2, r3, #15
 8014ebc:	6879      	ldr	r1, [r7, #4]
 8014ebe:	4613      	mov	r3, r2
 8014ec0:	009b      	lsls	r3, r3, #2
 8014ec2:	4413      	add	r3, r2
 8014ec4:	009b      	lsls	r3, r3, #2
 8014ec6:	440b      	add	r3, r1
 8014ec8:	3326      	adds	r3, #38	; 0x26
 8014eca:	2200      	movs	r2, #0
 8014ecc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	32b0      	adds	r2, #176	; 0xb0
 8014ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d01f      	beq.n	8014f20 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014ee6:	687a      	ldr	r2, [r7, #4]
 8014ee8:	33b0      	adds	r3, #176	; 0xb0
 8014eea:	009b      	lsls	r3, r3, #2
 8014eec:	4413      	add	r3, r2
 8014eee:	685b      	ldr	r3, [r3, #4]
 8014ef0:	685b      	ldr	r3, [r3, #4]
 8014ef2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	32b0      	adds	r2, #176	; 0xb0
 8014efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f02:	4618      	mov	r0, r3
 8014f04:	f002 fbe0 	bl	80176c8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	32b0      	adds	r2, #176	; 0xb0
 8014f12:	2100      	movs	r1, #0
 8014f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	2200      	movs	r2, #0
 8014f1c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014f20:	2300      	movs	r3, #0
}
 8014f22:	4618      	mov	r0, r3
 8014f24:	3708      	adds	r7, #8
 8014f26:	46bd      	mov	sp, r7
 8014f28:	bd80      	pop	{r7, pc}
 8014f2a:	bf00      	nop
 8014f2c:	24000097 	.word	0x24000097
 8014f30:	24000098 	.word	0x24000098
 8014f34:	24000099 	.word	0x24000099

08014f38 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8014f38:	b580      	push	{r7, lr}
 8014f3a:	b086      	sub	sp, #24
 8014f3c:	af00      	add	r7, sp, #0
 8014f3e:	6078      	str	r0, [r7, #4]
 8014f40:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	32b0      	adds	r2, #176	; 0xb0
 8014f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f50:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8014f52:	2300      	movs	r3, #0
 8014f54:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8014f56:	2300      	movs	r3, #0
 8014f58:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8014f5a:	2300      	movs	r3, #0
 8014f5c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8014f5e:	693b      	ldr	r3, [r7, #16]
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d101      	bne.n	8014f68 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8014f64:	2303      	movs	r3, #3
 8014f66:	e0bf      	b.n	80150e8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014f68:	683b      	ldr	r3, [r7, #0]
 8014f6a:	781b      	ldrb	r3, [r3, #0]
 8014f6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d050      	beq.n	8015016 <USBD_CDC_Setup+0xde>
 8014f74:	2b20      	cmp	r3, #32
 8014f76:	f040 80af 	bne.w	80150d8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8014f7a:	683b      	ldr	r3, [r7, #0]
 8014f7c:	88db      	ldrh	r3, [r3, #6]
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d03a      	beq.n	8014ff8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8014f82:	683b      	ldr	r3, [r7, #0]
 8014f84:	781b      	ldrb	r3, [r3, #0]
 8014f86:	b25b      	sxtb	r3, r3
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	da1b      	bge.n	8014fc4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014f92:	687a      	ldr	r2, [r7, #4]
 8014f94:	33b0      	adds	r3, #176	; 0xb0
 8014f96:	009b      	lsls	r3, r3, #2
 8014f98:	4413      	add	r3, r2
 8014f9a:	685b      	ldr	r3, [r3, #4]
 8014f9c:	689b      	ldr	r3, [r3, #8]
 8014f9e:	683a      	ldr	r2, [r7, #0]
 8014fa0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8014fa2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014fa4:	683a      	ldr	r2, [r7, #0]
 8014fa6:	88d2      	ldrh	r2, [r2, #6]
 8014fa8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8014faa:	683b      	ldr	r3, [r7, #0]
 8014fac:	88db      	ldrh	r3, [r3, #6]
 8014fae:	2b07      	cmp	r3, #7
 8014fb0:	bf28      	it	cs
 8014fb2:	2307      	movcs	r3, #7
 8014fb4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8014fb6:	693b      	ldr	r3, [r7, #16]
 8014fb8:	89fa      	ldrh	r2, [r7, #14]
 8014fba:	4619      	mov	r1, r3
 8014fbc:	6878      	ldr	r0, [r7, #4]
 8014fbe:	f001 fdb3 	bl	8016b28 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8014fc2:	e090      	b.n	80150e6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8014fc4:	683b      	ldr	r3, [r7, #0]
 8014fc6:	785a      	ldrb	r2, [r3, #1]
 8014fc8:	693b      	ldr	r3, [r7, #16]
 8014fca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8014fce:	683b      	ldr	r3, [r7, #0]
 8014fd0:	88db      	ldrh	r3, [r3, #6]
 8014fd2:	2b3f      	cmp	r3, #63	; 0x3f
 8014fd4:	d803      	bhi.n	8014fde <USBD_CDC_Setup+0xa6>
 8014fd6:	683b      	ldr	r3, [r7, #0]
 8014fd8:	88db      	ldrh	r3, [r3, #6]
 8014fda:	b2da      	uxtb	r2, r3
 8014fdc:	e000      	b.n	8014fe0 <USBD_CDC_Setup+0xa8>
 8014fde:	2240      	movs	r2, #64	; 0x40
 8014fe0:	693b      	ldr	r3, [r7, #16]
 8014fe2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8014fe6:	6939      	ldr	r1, [r7, #16]
 8014fe8:	693b      	ldr	r3, [r7, #16]
 8014fea:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8014fee:	461a      	mov	r2, r3
 8014ff0:	6878      	ldr	r0, [r7, #4]
 8014ff2:	f001 fdc5 	bl	8016b80 <USBD_CtlPrepareRx>
      break;
 8014ff6:	e076      	b.n	80150e6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014ffe:	687a      	ldr	r2, [r7, #4]
 8015000:	33b0      	adds	r3, #176	; 0xb0
 8015002:	009b      	lsls	r3, r3, #2
 8015004:	4413      	add	r3, r2
 8015006:	685b      	ldr	r3, [r3, #4]
 8015008:	689b      	ldr	r3, [r3, #8]
 801500a:	683a      	ldr	r2, [r7, #0]
 801500c:	7850      	ldrb	r0, [r2, #1]
 801500e:	2200      	movs	r2, #0
 8015010:	6839      	ldr	r1, [r7, #0]
 8015012:	4798      	blx	r3
      break;
 8015014:	e067      	b.n	80150e6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015016:	683b      	ldr	r3, [r7, #0]
 8015018:	785b      	ldrb	r3, [r3, #1]
 801501a:	2b0b      	cmp	r3, #11
 801501c:	d851      	bhi.n	80150c2 <USBD_CDC_Setup+0x18a>
 801501e:	a201      	add	r2, pc, #4	; (adr r2, 8015024 <USBD_CDC_Setup+0xec>)
 8015020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015024:	08015055 	.word	0x08015055
 8015028:	080150d1 	.word	0x080150d1
 801502c:	080150c3 	.word	0x080150c3
 8015030:	080150c3 	.word	0x080150c3
 8015034:	080150c3 	.word	0x080150c3
 8015038:	080150c3 	.word	0x080150c3
 801503c:	080150c3 	.word	0x080150c3
 8015040:	080150c3 	.word	0x080150c3
 8015044:	080150c3 	.word	0x080150c3
 8015048:	080150c3 	.word	0x080150c3
 801504c:	0801507f 	.word	0x0801507f
 8015050:	080150a9 	.word	0x080150a9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801505a:	b2db      	uxtb	r3, r3
 801505c:	2b03      	cmp	r3, #3
 801505e:	d107      	bne.n	8015070 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015060:	f107 030a 	add.w	r3, r7, #10
 8015064:	2202      	movs	r2, #2
 8015066:	4619      	mov	r1, r3
 8015068:	6878      	ldr	r0, [r7, #4]
 801506a:	f001 fd5d 	bl	8016b28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801506e:	e032      	b.n	80150d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015070:	6839      	ldr	r1, [r7, #0]
 8015072:	6878      	ldr	r0, [r7, #4]
 8015074:	f001 fce7 	bl	8016a46 <USBD_CtlError>
            ret = USBD_FAIL;
 8015078:	2303      	movs	r3, #3
 801507a:	75fb      	strb	r3, [r7, #23]
          break;
 801507c:	e02b      	b.n	80150d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015084:	b2db      	uxtb	r3, r3
 8015086:	2b03      	cmp	r3, #3
 8015088:	d107      	bne.n	801509a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801508a:	f107 030d 	add.w	r3, r7, #13
 801508e:	2201      	movs	r2, #1
 8015090:	4619      	mov	r1, r3
 8015092:	6878      	ldr	r0, [r7, #4]
 8015094:	f001 fd48 	bl	8016b28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015098:	e01d      	b.n	80150d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801509a:	6839      	ldr	r1, [r7, #0]
 801509c:	6878      	ldr	r0, [r7, #4]
 801509e:	f001 fcd2 	bl	8016a46 <USBD_CtlError>
            ret = USBD_FAIL;
 80150a2:	2303      	movs	r3, #3
 80150a4:	75fb      	strb	r3, [r7, #23]
          break;
 80150a6:	e016      	b.n	80150d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80150ae:	b2db      	uxtb	r3, r3
 80150b0:	2b03      	cmp	r3, #3
 80150b2:	d00f      	beq.n	80150d4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80150b4:	6839      	ldr	r1, [r7, #0]
 80150b6:	6878      	ldr	r0, [r7, #4]
 80150b8:	f001 fcc5 	bl	8016a46 <USBD_CtlError>
            ret = USBD_FAIL;
 80150bc:	2303      	movs	r3, #3
 80150be:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80150c0:	e008      	b.n	80150d4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80150c2:	6839      	ldr	r1, [r7, #0]
 80150c4:	6878      	ldr	r0, [r7, #4]
 80150c6:	f001 fcbe 	bl	8016a46 <USBD_CtlError>
          ret = USBD_FAIL;
 80150ca:	2303      	movs	r3, #3
 80150cc:	75fb      	strb	r3, [r7, #23]
          break;
 80150ce:	e002      	b.n	80150d6 <USBD_CDC_Setup+0x19e>
          break;
 80150d0:	bf00      	nop
 80150d2:	e008      	b.n	80150e6 <USBD_CDC_Setup+0x1ae>
          break;
 80150d4:	bf00      	nop
      }
      break;
 80150d6:	e006      	b.n	80150e6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80150d8:	6839      	ldr	r1, [r7, #0]
 80150da:	6878      	ldr	r0, [r7, #4]
 80150dc:	f001 fcb3 	bl	8016a46 <USBD_CtlError>
      ret = USBD_FAIL;
 80150e0:	2303      	movs	r3, #3
 80150e2:	75fb      	strb	r3, [r7, #23]
      break;
 80150e4:	bf00      	nop
  }

  return (uint8_t)ret;
 80150e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80150e8:	4618      	mov	r0, r3
 80150ea:	3718      	adds	r7, #24
 80150ec:	46bd      	mov	sp, r7
 80150ee:	bd80      	pop	{r7, pc}

080150f0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80150f0:	b580      	push	{r7, lr}
 80150f2:	b084      	sub	sp, #16
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	6078      	str	r0, [r7, #4]
 80150f8:	460b      	mov	r3, r1
 80150fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015102:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	32b0      	adds	r2, #176	; 0xb0
 801510e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015112:	2b00      	cmp	r3, #0
 8015114:	d101      	bne.n	801511a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8015116:	2303      	movs	r3, #3
 8015118:	e065      	b.n	80151e6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	32b0      	adds	r2, #176	; 0xb0
 8015124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015128:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801512a:	78fb      	ldrb	r3, [r7, #3]
 801512c:	f003 020f 	and.w	r2, r3, #15
 8015130:	6879      	ldr	r1, [r7, #4]
 8015132:	4613      	mov	r3, r2
 8015134:	009b      	lsls	r3, r3, #2
 8015136:	4413      	add	r3, r2
 8015138:	009b      	lsls	r3, r3, #2
 801513a:	440b      	add	r3, r1
 801513c:	3318      	adds	r3, #24
 801513e:	681b      	ldr	r3, [r3, #0]
 8015140:	2b00      	cmp	r3, #0
 8015142:	d02f      	beq.n	80151a4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8015144:	78fb      	ldrb	r3, [r7, #3]
 8015146:	f003 020f 	and.w	r2, r3, #15
 801514a:	6879      	ldr	r1, [r7, #4]
 801514c:	4613      	mov	r3, r2
 801514e:	009b      	lsls	r3, r3, #2
 8015150:	4413      	add	r3, r2
 8015152:	009b      	lsls	r3, r3, #2
 8015154:	440b      	add	r3, r1
 8015156:	3318      	adds	r3, #24
 8015158:	681a      	ldr	r2, [r3, #0]
 801515a:	78fb      	ldrb	r3, [r7, #3]
 801515c:	f003 010f 	and.w	r1, r3, #15
 8015160:	68f8      	ldr	r0, [r7, #12]
 8015162:	460b      	mov	r3, r1
 8015164:	00db      	lsls	r3, r3, #3
 8015166:	440b      	add	r3, r1
 8015168:	009b      	lsls	r3, r3, #2
 801516a:	4403      	add	r3, r0
 801516c:	3344      	adds	r3, #68	; 0x44
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	fbb2 f1f3 	udiv	r1, r2, r3
 8015174:	fb01 f303 	mul.w	r3, r1, r3
 8015178:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801517a:	2b00      	cmp	r3, #0
 801517c:	d112      	bne.n	80151a4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801517e:	78fb      	ldrb	r3, [r7, #3]
 8015180:	f003 020f 	and.w	r2, r3, #15
 8015184:	6879      	ldr	r1, [r7, #4]
 8015186:	4613      	mov	r3, r2
 8015188:	009b      	lsls	r3, r3, #2
 801518a:	4413      	add	r3, r2
 801518c:	009b      	lsls	r3, r3, #2
 801518e:	440b      	add	r3, r1
 8015190:	3318      	adds	r3, #24
 8015192:	2200      	movs	r2, #0
 8015194:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8015196:	78f9      	ldrb	r1, [r7, #3]
 8015198:	2300      	movs	r3, #0
 801519a:	2200      	movs	r2, #0
 801519c:	6878      	ldr	r0, [r7, #4]
 801519e:	f002 fa30 	bl	8017602 <USBD_LL_Transmit>
 80151a2:	e01f      	b.n	80151e4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80151a4:	68bb      	ldr	r3, [r7, #8]
 80151a6:	2200      	movs	r2, #0
 80151a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80151b2:	687a      	ldr	r2, [r7, #4]
 80151b4:	33b0      	adds	r3, #176	; 0xb0
 80151b6:	009b      	lsls	r3, r3, #2
 80151b8:	4413      	add	r3, r2
 80151ba:	685b      	ldr	r3, [r3, #4]
 80151bc:	691b      	ldr	r3, [r3, #16]
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d010      	beq.n	80151e4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80151c8:	687a      	ldr	r2, [r7, #4]
 80151ca:	33b0      	adds	r3, #176	; 0xb0
 80151cc:	009b      	lsls	r3, r3, #2
 80151ce:	4413      	add	r3, r2
 80151d0:	685b      	ldr	r3, [r3, #4]
 80151d2:	691b      	ldr	r3, [r3, #16]
 80151d4:	68ba      	ldr	r2, [r7, #8]
 80151d6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80151da:	68ba      	ldr	r2, [r7, #8]
 80151dc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80151e0:	78fa      	ldrb	r2, [r7, #3]
 80151e2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80151e4:	2300      	movs	r3, #0
}
 80151e6:	4618      	mov	r0, r3
 80151e8:	3710      	adds	r7, #16
 80151ea:	46bd      	mov	sp, r7
 80151ec:	bd80      	pop	{r7, pc}

080151ee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80151ee:	b580      	push	{r7, lr}
 80151f0:	b084      	sub	sp, #16
 80151f2:	af00      	add	r7, sp, #0
 80151f4:	6078      	str	r0, [r7, #4]
 80151f6:	460b      	mov	r3, r1
 80151f8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	32b0      	adds	r2, #176	; 0xb0
 8015204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015208:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	32b0      	adds	r2, #176	; 0xb0
 8015214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015218:	2b00      	cmp	r3, #0
 801521a:	d101      	bne.n	8015220 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 801521c:	2303      	movs	r3, #3
 801521e:	e01a      	b.n	8015256 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8015220:	78fb      	ldrb	r3, [r7, #3]
 8015222:	4619      	mov	r1, r3
 8015224:	6878      	ldr	r0, [r7, #4]
 8015226:	f002 fa2e 	bl	8017686 <USBD_LL_GetRxDataSize>
 801522a:	4602      	mov	r2, r0
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015238:	687a      	ldr	r2, [r7, #4]
 801523a:	33b0      	adds	r3, #176	; 0xb0
 801523c:	009b      	lsls	r3, r3, #2
 801523e:	4413      	add	r3, r2
 8015240:	685b      	ldr	r3, [r3, #4]
 8015242:	68db      	ldr	r3, [r3, #12]
 8015244:	68fa      	ldr	r2, [r7, #12]
 8015246:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801524a:	68fa      	ldr	r2, [r7, #12]
 801524c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8015250:	4611      	mov	r1, r2
 8015252:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8015254:	2300      	movs	r3, #0
}
 8015256:	4618      	mov	r0, r3
 8015258:	3710      	adds	r7, #16
 801525a:	46bd      	mov	sp, r7
 801525c:	bd80      	pop	{r7, pc}

0801525e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801525e:	b580      	push	{r7, lr}
 8015260:	b084      	sub	sp, #16
 8015262:	af00      	add	r7, sp, #0
 8015264:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	32b0      	adds	r2, #176	; 0xb0
 8015270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015274:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	2b00      	cmp	r3, #0
 801527a:	d101      	bne.n	8015280 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801527c:	2303      	movs	r3, #3
 801527e:	e025      	b.n	80152cc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015286:	687a      	ldr	r2, [r7, #4]
 8015288:	33b0      	adds	r3, #176	; 0xb0
 801528a:	009b      	lsls	r3, r3, #2
 801528c:	4413      	add	r3, r2
 801528e:	685b      	ldr	r3, [r3, #4]
 8015290:	2b00      	cmp	r3, #0
 8015292:	d01a      	beq.n	80152ca <USBD_CDC_EP0_RxReady+0x6c>
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801529a:	2bff      	cmp	r3, #255	; 0xff
 801529c:	d015      	beq.n	80152ca <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80152a4:	687a      	ldr	r2, [r7, #4]
 80152a6:	33b0      	adds	r3, #176	; 0xb0
 80152a8:	009b      	lsls	r3, r3, #2
 80152aa:	4413      	add	r3, r2
 80152ac:	685b      	ldr	r3, [r3, #4]
 80152ae:	689b      	ldr	r3, [r3, #8]
 80152b0:	68fa      	ldr	r2, [r7, #12]
 80152b2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80152b6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80152b8:	68fa      	ldr	r2, [r7, #12]
 80152ba:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80152be:	b292      	uxth	r2, r2
 80152c0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	22ff      	movs	r2, #255	; 0xff
 80152c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80152ca:	2300      	movs	r3, #0
}
 80152cc:	4618      	mov	r0, r3
 80152ce:	3710      	adds	r7, #16
 80152d0:	46bd      	mov	sp, r7
 80152d2:	bd80      	pop	{r7, pc}

080152d4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80152d4:	b580      	push	{r7, lr}
 80152d6:	b086      	sub	sp, #24
 80152d8:	af00      	add	r7, sp, #0
 80152da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80152dc:	2182      	movs	r1, #130	; 0x82
 80152de:	4818      	ldr	r0, [pc, #96]	; (8015340 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80152e0:	f000 fd4f 	bl	8015d82 <USBD_GetEpDesc>
 80152e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80152e6:	2101      	movs	r1, #1
 80152e8:	4815      	ldr	r0, [pc, #84]	; (8015340 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80152ea:	f000 fd4a 	bl	8015d82 <USBD_GetEpDesc>
 80152ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80152f0:	2181      	movs	r1, #129	; 0x81
 80152f2:	4813      	ldr	r0, [pc, #76]	; (8015340 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80152f4:	f000 fd45 	bl	8015d82 <USBD_GetEpDesc>
 80152f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80152fa:	697b      	ldr	r3, [r7, #20]
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	d002      	beq.n	8015306 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015300:	697b      	ldr	r3, [r7, #20]
 8015302:	2210      	movs	r2, #16
 8015304:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015306:	693b      	ldr	r3, [r7, #16]
 8015308:	2b00      	cmp	r3, #0
 801530a:	d006      	beq.n	801531a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801530c:	693b      	ldr	r3, [r7, #16]
 801530e:	2200      	movs	r2, #0
 8015310:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015314:	711a      	strb	r2, [r3, #4]
 8015316:	2200      	movs	r2, #0
 8015318:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	2b00      	cmp	r3, #0
 801531e:	d006      	beq.n	801532e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015320:	68fb      	ldr	r3, [r7, #12]
 8015322:	2200      	movs	r2, #0
 8015324:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015328:	711a      	strb	r2, [r3, #4]
 801532a:	2200      	movs	r2, #0
 801532c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	2243      	movs	r2, #67	; 0x43
 8015332:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015334:	4b02      	ldr	r3, [pc, #8]	; (8015340 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8015336:	4618      	mov	r0, r3
 8015338:	3718      	adds	r7, #24
 801533a:	46bd      	mov	sp, r7
 801533c:	bd80      	pop	{r7, pc}
 801533e:	bf00      	nop
 8015340:	24000054 	.word	0x24000054

08015344 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8015344:	b580      	push	{r7, lr}
 8015346:	b086      	sub	sp, #24
 8015348:	af00      	add	r7, sp, #0
 801534a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801534c:	2182      	movs	r1, #130	; 0x82
 801534e:	4818      	ldr	r0, [pc, #96]	; (80153b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015350:	f000 fd17 	bl	8015d82 <USBD_GetEpDesc>
 8015354:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015356:	2101      	movs	r1, #1
 8015358:	4815      	ldr	r0, [pc, #84]	; (80153b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801535a:	f000 fd12 	bl	8015d82 <USBD_GetEpDesc>
 801535e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015360:	2181      	movs	r1, #129	; 0x81
 8015362:	4813      	ldr	r0, [pc, #76]	; (80153b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015364:	f000 fd0d 	bl	8015d82 <USBD_GetEpDesc>
 8015368:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801536a:	697b      	ldr	r3, [r7, #20]
 801536c:	2b00      	cmp	r3, #0
 801536e:	d002      	beq.n	8015376 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8015370:	697b      	ldr	r3, [r7, #20]
 8015372:	2210      	movs	r2, #16
 8015374:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015376:	693b      	ldr	r3, [r7, #16]
 8015378:	2b00      	cmp	r3, #0
 801537a:	d006      	beq.n	801538a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801537c:	693b      	ldr	r3, [r7, #16]
 801537e:	2200      	movs	r2, #0
 8015380:	711a      	strb	r2, [r3, #4]
 8015382:	2200      	movs	r2, #0
 8015384:	f042 0202 	orr.w	r2, r2, #2
 8015388:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	2b00      	cmp	r3, #0
 801538e:	d006      	beq.n	801539e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	2200      	movs	r2, #0
 8015394:	711a      	strb	r2, [r3, #4]
 8015396:	2200      	movs	r2, #0
 8015398:	f042 0202 	orr.w	r2, r2, #2
 801539c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	2243      	movs	r2, #67	; 0x43
 80153a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80153a4:	4b02      	ldr	r3, [pc, #8]	; (80153b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80153a6:	4618      	mov	r0, r3
 80153a8:	3718      	adds	r7, #24
 80153aa:	46bd      	mov	sp, r7
 80153ac:	bd80      	pop	{r7, pc}
 80153ae:	bf00      	nop
 80153b0:	24000054 	.word	0x24000054

080153b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80153b4:	b580      	push	{r7, lr}
 80153b6:	b086      	sub	sp, #24
 80153b8:	af00      	add	r7, sp, #0
 80153ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80153bc:	2182      	movs	r1, #130	; 0x82
 80153be:	4818      	ldr	r0, [pc, #96]	; (8015420 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80153c0:	f000 fcdf 	bl	8015d82 <USBD_GetEpDesc>
 80153c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80153c6:	2101      	movs	r1, #1
 80153c8:	4815      	ldr	r0, [pc, #84]	; (8015420 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80153ca:	f000 fcda 	bl	8015d82 <USBD_GetEpDesc>
 80153ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80153d0:	2181      	movs	r1, #129	; 0x81
 80153d2:	4813      	ldr	r0, [pc, #76]	; (8015420 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80153d4:	f000 fcd5 	bl	8015d82 <USBD_GetEpDesc>
 80153d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80153da:	697b      	ldr	r3, [r7, #20]
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d002      	beq.n	80153e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80153e0:	697b      	ldr	r3, [r7, #20]
 80153e2:	2210      	movs	r2, #16
 80153e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80153e6:	693b      	ldr	r3, [r7, #16]
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d006      	beq.n	80153fa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80153ec:	693b      	ldr	r3, [r7, #16]
 80153ee:	2200      	movs	r2, #0
 80153f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80153f4:	711a      	strb	r2, [r3, #4]
 80153f6:	2200      	movs	r2, #0
 80153f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	d006      	beq.n	801540e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015400:	68fb      	ldr	r3, [r7, #12]
 8015402:	2200      	movs	r2, #0
 8015404:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015408:	711a      	strb	r2, [r3, #4]
 801540a:	2200      	movs	r2, #0
 801540c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	2243      	movs	r2, #67	; 0x43
 8015412:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015414:	4b02      	ldr	r3, [pc, #8]	; (8015420 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8015416:	4618      	mov	r0, r3
 8015418:	3718      	adds	r7, #24
 801541a:	46bd      	mov	sp, r7
 801541c:	bd80      	pop	{r7, pc}
 801541e:	bf00      	nop
 8015420:	24000054 	.word	0x24000054

08015424 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8015424:	b480      	push	{r7}
 8015426:	b083      	sub	sp, #12
 8015428:	af00      	add	r7, sp, #0
 801542a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	220a      	movs	r2, #10
 8015430:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8015432:	4b03      	ldr	r3, [pc, #12]	; (8015440 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8015434:	4618      	mov	r0, r3
 8015436:	370c      	adds	r7, #12
 8015438:	46bd      	mov	sp, r7
 801543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801543e:	4770      	bx	lr
 8015440:	24000010 	.word	0x24000010

08015444 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8015444:	b480      	push	{r7}
 8015446:	b083      	sub	sp, #12
 8015448:	af00      	add	r7, sp, #0
 801544a:	6078      	str	r0, [r7, #4]
 801544c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801544e:	683b      	ldr	r3, [r7, #0]
 8015450:	2b00      	cmp	r3, #0
 8015452:	d101      	bne.n	8015458 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8015454:	2303      	movs	r3, #3
 8015456:	e009      	b.n	801546c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801545e:	687a      	ldr	r2, [r7, #4]
 8015460:	33b0      	adds	r3, #176	; 0xb0
 8015462:	009b      	lsls	r3, r3, #2
 8015464:	4413      	add	r3, r2
 8015466:	683a      	ldr	r2, [r7, #0]
 8015468:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801546a:	2300      	movs	r3, #0
}
 801546c:	4618      	mov	r0, r3
 801546e:	370c      	adds	r7, #12
 8015470:	46bd      	mov	sp, r7
 8015472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015476:	4770      	bx	lr

08015478 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8015478:	b480      	push	{r7}
 801547a:	b087      	sub	sp, #28
 801547c:	af00      	add	r7, sp, #0
 801547e:	60f8      	str	r0, [r7, #12]
 8015480:	60b9      	str	r1, [r7, #8]
 8015482:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015484:	68fb      	ldr	r3, [r7, #12]
 8015486:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801548a:	68fb      	ldr	r3, [r7, #12]
 801548c:	32b0      	adds	r2, #176	; 0xb0
 801548e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015492:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015494:	697b      	ldr	r3, [r7, #20]
 8015496:	2b00      	cmp	r3, #0
 8015498:	d101      	bne.n	801549e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801549a:	2303      	movs	r3, #3
 801549c:	e008      	b.n	80154b0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801549e:	697b      	ldr	r3, [r7, #20]
 80154a0:	68ba      	ldr	r2, [r7, #8]
 80154a2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80154a6:	697b      	ldr	r3, [r7, #20]
 80154a8:	687a      	ldr	r2, [r7, #4]
 80154aa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80154ae:	2300      	movs	r3, #0
}
 80154b0:	4618      	mov	r0, r3
 80154b2:	371c      	adds	r7, #28
 80154b4:	46bd      	mov	sp, r7
 80154b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ba:	4770      	bx	lr

080154bc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80154bc:	b480      	push	{r7}
 80154be:	b085      	sub	sp, #20
 80154c0:	af00      	add	r7, sp, #0
 80154c2:	6078      	str	r0, [r7, #4]
 80154c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	32b0      	adds	r2, #176	; 0xb0
 80154d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154d4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80154d6:	68fb      	ldr	r3, [r7, #12]
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d101      	bne.n	80154e0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80154dc:	2303      	movs	r3, #3
 80154de:	e004      	b.n	80154ea <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80154e0:	68fb      	ldr	r3, [r7, #12]
 80154e2:	683a      	ldr	r2, [r7, #0]
 80154e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80154e8:	2300      	movs	r3, #0
}
 80154ea:	4618      	mov	r0, r3
 80154ec:	3714      	adds	r7, #20
 80154ee:	46bd      	mov	sp, r7
 80154f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154f4:	4770      	bx	lr
	...

080154f8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80154f8:	b580      	push	{r7, lr}
 80154fa:	b084      	sub	sp, #16
 80154fc:	af00      	add	r7, sp, #0
 80154fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	32b0      	adds	r2, #176	; 0xb0
 801550a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801550e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8015510:	2301      	movs	r3, #1
 8015512:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015514:	68bb      	ldr	r3, [r7, #8]
 8015516:	2b00      	cmp	r3, #0
 8015518:	d101      	bne.n	801551e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801551a:	2303      	movs	r3, #3
 801551c:	e025      	b.n	801556a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 801551e:	68bb      	ldr	r3, [r7, #8]
 8015520:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015524:	2b00      	cmp	r3, #0
 8015526:	d11f      	bne.n	8015568 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8015528:	68bb      	ldr	r3, [r7, #8]
 801552a:	2201      	movs	r2, #1
 801552c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8015530:	4b10      	ldr	r3, [pc, #64]	; (8015574 <USBD_CDC_TransmitPacket+0x7c>)
 8015532:	781b      	ldrb	r3, [r3, #0]
 8015534:	f003 020f 	and.w	r2, r3, #15
 8015538:	68bb      	ldr	r3, [r7, #8]
 801553a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 801553e:	6878      	ldr	r0, [r7, #4]
 8015540:	4613      	mov	r3, r2
 8015542:	009b      	lsls	r3, r3, #2
 8015544:	4413      	add	r3, r2
 8015546:	009b      	lsls	r3, r3, #2
 8015548:	4403      	add	r3, r0
 801554a:	3318      	adds	r3, #24
 801554c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 801554e:	4b09      	ldr	r3, [pc, #36]	; (8015574 <USBD_CDC_TransmitPacket+0x7c>)
 8015550:	7819      	ldrb	r1, [r3, #0]
 8015552:	68bb      	ldr	r3, [r7, #8]
 8015554:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8015558:	68bb      	ldr	r3, [r7, #8]
 801555a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801555e:	6878      	ldr	r0, [r7, #4]
 8015560:	f002 f84f 	bl	8017602 <USBD_LL_Transmit>

    ret = USBD_OK;
 8015564:	2300      	movs	r3, #0
 8015566:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8015568:	7bfb      	ldrb	r3, [r7, #15]
}
 801556a:	4618      	mov	r0, r3
 801556c:	3710      	adds	r7, #16
 801556e:	46bd      	mov	sp, r7
 8015570:	bd80      	pop	{r7, pc}
 8015572:	bf00      	nop
 8015574:	24000097 	.word	0x24000097

08015578 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8015578:	b580      	push	{r7, lr}
 801557a:	b084      	sub	sp, #16
 801557c:	af00      	add	r7, sp, #0
 801557e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	32b0      	adds	r2, #176	; 0xb0
 801558a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801558e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	32b0      	adds	r2, #176	; 0xb0
 801559a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d101      	bne.n	80155a6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80155a2:	2303      	movs	r3, #3
 80155a4:	e018      	b.n	80155d8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	7c1b      	ldrb	r3, [r3, #16]
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d10a      	bne.n	80155c4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80155ae:	4b0c      	ldr	r3, [pc, #48]	; (80155e0 <USBD_CDC_ReceivePacket+0x68>)
 80155b0:	7819      	ldrb	r1, [r3, #0]
 80155b2:	68fb      	ldr	r3, [r7, #12]
 80155b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80155b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80155bc:	6878      	ldr	r0, [r7, #4]
 80155be:	f002 f841 	bl	8017644 <USBD_LL_PrepareReceive>
 80155c2:	e008      	b.n	80155d6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80155c4:	4b06      	ldr	r3, [pc, #24]	; (80155e0 <USBD_CDC_ReceivePacket+0x68>)
 80155c6:	7819      	ldrb	r1, [r3, #0]
 80155c8:	68fb      	ldr	r3, [r7, #12]
 80155ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80155ce:	2340      	movs	r3, #64	; 0x40
 80155d0:	6878      	ldr	r0, [r7, #4]
 80155d2:	f002 f837 	bl	8017644 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80155d6:	2300      	movs	r3, #0
}
 80155d8:	4618      	mov	r0, r3
 80155da:	3710      	adds	r7, #16
 80155dc:	46bd      	mov	sp, r7
 80155de:	bd80      	pop	{r7, pc}
 80155e0:	24000098 	.word	0x24000098

080155e4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80155e4:	b580      	push	{r7, lr}
 80155e6:	b086      	sub	sp, #24
 80155e8:	af00      	add	r7, sp, #0
 80155ea:	60f8      	str	r0, [r7, #12]
 80155ec:	60b9      	str	r1, [r7, #8]
 80155ee:	4613      	mov	r3, r2
 80155f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80155f2:	68fb      	ldr	r3, [r7, #12]
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d101      	bne.n	80155fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80155f8:	2303      	movs	r3, #3
 80155fa:	e01f      	b.n	801563c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80155fc:	68fb      	ldr	r3, [r7, #12]
 80155fe:	2200      	movs	r2, #0
 8015600:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8015604:	68fb      	ldr	r3, [r7, #12]
 8015606:	2200      	movs	r2, #0
 8015608:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801560c:	68fb      	ldr	r3, [r7, #12]
 801560e:	2200      	movs	r2, #0
 8015610:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015614:	68bb      	ldr	r3, [r7, #8]
 8015616:	2b00      	cmp	r3, #0
 8015618:	d003      	beq.n	8015622 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801561a:	68fb      	ldr	r3, [r7, #12]
 801561c:	68ba      	ldr	r2, [r7, #8]
 801561e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015622:	68fb      	ldr	r3, [r7, #12]
 8015624:	2201      	movs	r2, #1
 8015626:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	79fa      	ldrb	r2, [r7, #7]
 801562e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8015630:	68f8      	ldr	r0, [r7, #12]
 8015632:	f001 feab 	bl	801738c <USBD_LL_Init>
 8015636:	4603      	mov	r3, r0
 8015638:	75fb      	strb	r3, [r7, #23]

  return ret;
 801563a:	7dfb      	ldrb	r3, [r7, #23]
}
 801563c:	4618      	mov	r0, r3
 801563e:	3718      	adds	r7, #24
 8015640:	46bd      	mov	sp, r7
 8015642:	bd80      	pop	{r7, pc}

08015644 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015644:	b580      	push	{r7, lr}
 8015646:	b084      	sub	sp, #16
 8015648:	af00      	add	r7, sp, #0
 801564a:	6078      	str	r0, [r7, #4]
 801564c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801564e:	2300      	movs	r3, #0
 8015650:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8015652:	683b      	ldr	r3, [r7, #0]
 8015654:	2b00      	cmp	r3, #0
 8015656:	d101      	bne.n	801565c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015658:	2303      	movs	r3, #3
 801565a:	e025      	b.n	80156a8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	683a      	ldr	r2, [r7, #0]
 8015660:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	32ae      	adds	r2, #174	; 0xae
 801566e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015674:	2b00      	cmp	r3, #0
 8015676:	d00f      	beq.n	8015698 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	32ae      	adds	r2, #174	; 0xae
 8015682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015688:	f107 020e 	add.w	r2, r7, #14
 801568c:	4610      	mov	r0, r2
 801568e:	4798      	blx	r3
 8015690:	4602      	mov	r2, r0
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801569e:	1c5a      	adds	r2, r3, #1
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80156a6:	2300      	movs	r3, #0
}
 80156a8:	4618      	mov	r0, r3
 80156aa:	3710      	adds	r7, #16
 80156ac:	46bd      	mov	sp, r7
 80156ae:	bd80      	pop	{r7, pc}

080156b0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80156b0:	b580      	push	{r7, lr}
 80156b2:	b082      	sub	sp, #8
 80156b4:	af00      	add	r7, sp, #0
 80156b6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80156b8:	6878      	ldr	r0, [r7, #4]
 80156ba:	f001 feb9 	bl	8017430 <USBD_LL_Start>
 80156be:	4603      	mov	r3, r0
}
 80156c0:	4618      	mov	r0, r3
 80156c2:	3708      	adds	r7, #8
 80156c4:	46bd      	mov	sp, r7
 80156c6:	bd80      	pop	{r7, pc}

080156c8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80156c8:	b480      	push	{r7}
 80156ca:	b083      	sub	sp, #12
 80156cc:	af00      	add	r7, sp, #0
 80156ce:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80156d0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80156d2:	4618      	mov	r0, r3
 80156d4:	370c      	adds	r7, #12
 80156d6:	46bd      	mov	sp, r7
 80156d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156dc:	4770      	bx	lr

080156de <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80156de:	b580      	push	{r7, lr}
 80156e0:	b084      	sub	sp, #16
 80156e2:	af00      	add	r7, sp, #0
 80156e4:	6078      	str	r0, [r7, #4]
 80156e6:	460b      	mov	r3, r1
 80156e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80156ea:	2300      	movs	r3, #0
 80156ec:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d009      	beq.n	801570c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	78fa      	ldrb	r2, [r7, #3]
 8015702:	4611      	mov	r1, r2
 8015704:	6878      	ldr	r0, [r7, #4]
 8015706:	4798      	blx	r3
 8015708:	4603      	mov	r3, r0
 801570a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801570c:	7bfb      	ldrb	r3, [r7, #15]
}
 801570e:	4618      	mov	r0, r3
 8015710:	3710      	adds	r7, #16
 8015712:	46bd      	mov	sp, r7
 8015714:	bd80      	pop	{r7, pc}

08015716 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015716:	b580      	push	{r7, lr}
 8015718:	b084      	sub	sp, #16
 801571a:	af00      	add	r7, sp, #0
 801571c:	6078      	str	r0, [r7, #4]
 801571e:	460b      	mov	r3, r1
 8015720:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015722:	2300      	movs	r3, #0
 8015724:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801572c:	685b      	ldr	r3, [r3, #4]
 801572e:	78fa      	ldrb	r2, [r7, #3]
 8015730:	4611      	mov	r1, r2
 8015732:	6878      	ldr	r0, [r7, #4]
 8015734:	4798      	blx	r3
 8015736:	4603      	mov	r3, r0
 8015738:	2b00      	cmp	r3, #0
 801573a:	d001      	beq.n	8015740 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 801573c:	2303      	movs	r3, #3
 801573e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015740:	7bfb      	ldrb	r3, [r7, #15]
}
 8015742:	4618      	mov	r0, r3
 8015744:	3710      	adds	r7, #16
 8015746:	46bd      	mov	sp, r7
 8015748:	bd80      	pop	{r7, pc}

0801574a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801574a:	b580      	push	{r7, lr}
 801574c:	b084      	sub	sp, #16
 801574e:	af00      	add	r7, sp, #0
 8015750:	6078      	str	r0, [r7, #4]
 8015752:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801575a:	6839      	ldr	r1, [r7, #0]
 801575c:	4618      	mov	r0, r3
 801575e:	f001 f938 	bl	80169d2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	2201      	movs	r2, #1
 8015766:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8015770:	461a      	mov	r2, r3
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801577e:	f003 031f 	and.w	r3, r3, #31
 8015782:	2b02      	cmp	r3, #2
 8015784:	d01a      	beq.n	80157bc <USBD_LL_SetupStage+0x72>
 8015786:	2b02      	cmp	r3, #2
 8015788:	d822      	bhi.n	80157d0 <USBD_LL_SetupStage+0x86>
 801578a:	2b00      	cmp	r3, #0
 801578c:	d002      	beq.n	8015794 <USBD_LL_SetupStage+0x4a>
 801578e:	2b01      	cmp	r3, #1
 8015790:	d00a      	beq.n	80157a8 <USBD_LL_SetupStage+0x5e>
 8015792:	e01d      	b.n	80157d0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801579a:	4619      	mov	r1, r3
 801579c:	6878      	ldr	r0, [r7, #4]
 801579e:	f000 fb65 	bl	8015e6c <USBD_StdDevReq>
 80157a2:	4603      	mov	r3, r0
 80157a4:	73fb      	strb	r3, [r7, #15]
      break;
 80157a6:	e020      	b.n	80157ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80157ae:	4619      	mov	r1, r3
 80157b0:	6878      	ldr	r0, [r7, #4]
 80157b2:	f000 fbcd 	bl	8015f50 <USBD_StdItfReq>
 80157b6:	4603      	mov	r3, r0
 80157b8:	73fb      	strb	r3, [r7, #15]
      break;
 80157ba:	e016      	b.n	80157ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80157c2:	4619      	mov	r1, r3
 80157c4:	6878      	ldr	r0, [r7, #4]
 80157c6:	f000 fc2f 	bl	8016028 <USBD_StdEPReq>
 80157ca:	4603      	mov	r3, r0
 80157cc:	73fb      	strb	r3, [r7, #15]
      break;
 80157ce:	e00c      	b.n	80157ea <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80157d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80157da:	b2db      	uxtb	r3, r3
 80157dc:	4619      	mov	r1, r3
 80157de:	6878      	ldr	r0, [r7, #4]
 80157e0:	f001 fe86 	bl	80174f0 <USBD_LL_StallEP>
 80157e4:	4603      	mov	r3, r0
 80157e6:	73fb      	strb	r3, [r7, #15]
      break;
 80157e8:	bf00      	nop
  }

  return ret;
 80157ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80157ec:	4618      	mov	r0, r3
 80157ee:	3710      	adds	r7, #16
 80157f0:	46bd      	mov	sp, r7
 80157f2:	bd80      	pop	{r7, pc}

080157f4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80157f4:	b580      	push	{r7, lr}
 80157f6:	b086      	sub	sp, #24
 80157f8:	af00      	add	r7, sp, #0
 80157fa:	60f8      	str	r0, [r7, #12]
 80157fc:	460b      	mov	r3, r1
 80157fe:	607a      	str	r2, [r7, #4]
 8015800:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8015802:	2300      	movs	r3, #0
 8015804:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8015806:	7afb      	ldrb	r3, [r7, #11]
 8015808:	2b00      	cmp	r3, #0
 801580a:	d16e      	bne.n	80158ea <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015812:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801581a:	2b03      	cmp	r3, #3
 801581c:	f040 8098 	bne.w	8015950 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8015820:	693b      	ldr	r3, [r7, #16]
 8015822:	689a      	ldr	r2, [r3, #8]
 8015824:	693b      	ldr	r3, [r7, #16]
 8015826:	68db      	ldr	r3, [r3, #12]
 8015828:	429a      	cmp	r2, r3
 801582a:	d913      	bls.n	8015854 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 801582c:	693b      	ldr	r3, [r7, #16]
 801582e:	689a      	ldr	r2, [r3, #8]
 8015830:	693b      	ldr	r3, [r7, #16]
 8015832:	68db      	ldr	r3, [r3, #12]
 8015834:	1ad2      	subs	r2, r2, r3
 8015836:	693b      	ldr	r3, [r7, #16]
 8015838:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801583a:	693b      	ldr	r3, [r7, #16]
 801583c:	68da      	ldr	r2, [r3, #12]
 801583e:	693b      	ldr	r3, [r7, #16]
 8015840:	689b      	ldr	r3, [r3, #8]
 8015842:	4293      	cmp	r3, r2
 8015844:	bf28      	it	cs
 8015846:	4613      	movcs	r3, r2
 8015848:	461a      	mov	r2, r3
 801584a:	6879      	ldr	r1, [r7, #4]
 801584c:	68f8      	ldr	r0, [r7, #12]
 801584e:	f001 f9b4 	bl	8016bba <USBD_CtlContinueRx>
 8015852:	e07d      	b.n	8015950 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8015854:	68fb      	ldr	r3, [r7, #12]
 8015856:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801585a:	f003 031f 	and.w	r3, r3, #31
 801585e:	2b02      	cmp	r3, #2
 8015860:	d014      	beq.n	801588c <USBD_LL_DataOutStage+0x98>
 8015862:	2b02      	cmp	r3, #2
 8015864:	d81d      	bhi.n	80158a2 <USBD_LL_DataOutStage+0xae>
 8015866:	2b00      	cmp	r3, #0
 8015868:	d002      	beq.n	8015870 <USBD_LL_DataOutStage+0x7c>
 801586a:	2b01      	cmp	r3, #1
 801586c:	d003      	beq.n	8015876 <USBD_LL_DataOutStage+0x82>
 801586e:	e018      	b.n	80158a2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8015870:	2300      	movs	r3, #0
 8015872:	75bb      	strb	r3, [r7, #22]
            break;
 8015874:	e018      	b.n	80158a8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801587c:	b2db      	uxtb	r3, r3
 801587e:	4619      	mov	r1, r3
 8015880:	68f8      	ldr	r0, [r7, #12]
 8015882:	f000 fa64 	bl	8015d4e <USBD_CoreFindIF>
 8015886:	4603      	mov	r3, r0
 8015888:	75bb      	strb	r3, [r7, #22]
            break;
 801588a:	e00d      	b.n	80158a8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015892:	b2db      	uxtb	r3, r3
 8015894:	4619      	mov	r1, r3
 8015896:	68f8      	ldr	r0, [r7, #12]
 8015898:	f000 fa66 	bl	8015d68 <USBD_CoreFindEP>
 801589c:	4603      	mov	r3, r0
 801589e:	75bb      	strb	r3, [r7, #22]
            break;
 80158a0:	e002      	b.n	80158a8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80158a2:	2300      	movs	r3, #0
 80158a4:	75bb      	strb	r3, [r7, #22]
            break;
 80158a6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80158a8:	7dbb      	ldrb	r3, [r7, #22]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d119      	bne.n	80158e2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80158b4:	b2db      	uxtb	r3, r3
 80158b6:	2b03      	cmp	r3, #3
 80158b8:	d113      	bne.n	80158e2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80158ba:	7dba      	ldrb	r2, [r7, #22]
 80158bc:	68fb      	ldr	r3, [r7, #12]
 80158be:	32ae      	adds	r2, #174	; 0xae
 80158c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158c4:	691b      	ldr	r3, [r3, #16]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d00b      	beq.n	80158e2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80158ca:	7dba      	ldrb	r2, [r7, #22]
 80158cc:	68fb      	ldr	r3, [r7, #12]
 80158ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80158d2:	7dba      	ldrb	r2, [r7, #22]
 80158d4:	68fb      	ldr	r3, [r7, #12]
 80158d6:	32ae      	adds	r2, #174	; 0xae
 80158d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158dc:	691b      	ldr	r3, [r3, #16]
 80158de:	68f8      	ldr	r0, [r7, #12]
 80158e0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80158e2:	68f8      	ldr	r0, [r7, #12]
 80158e4:	f001 f97a 	bl	8016bdc <USBD_CtlSendStatus>
 80158e8:	e032      	b.n	8015950 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80158ea:	7afb      	ldrb	r3, [r7, #11]
 80158ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80158f0:	b2db      	uxtb	r3, r3
 80158f2:	4619      	mov	r1, r3
 80158f4:	68f8      	ldr	r0, [r7, #12]
 80158f6:	f000 fa37 	bl	8015d68 <USBD_CoreFindEP>
 80158fa:	4603      	mov	r3, r0
 80158fc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80158fe:	7dbb      	ldrb	r3, [r7, #22]
 8015900:	2bff      	cmp	r3, #255	; 0xff
 8015902:	d025      	beq.n	8015950 <USBD_LL_DataOutStage+0x15c>
 8015904:	7dbb      	ldrb	r3, [r7, #22]
 8015906:	2b00      	cmp	r3, #0
 8015908:	d122      	bne.n	8015950 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801590a:	68fb      	ldr	r3, [r7, #12]
 801590c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015910:	b2db      	uxtb	r3, r3
 8015912:	2b03      	cmp	r3, #3
 8015914:	d117      	bne.n	8015946 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8015916:	7dba      	ldrb	r2, [r7, #22]
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	32ae      	adds	r2, #174	; 0xae
 801591c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015920:	699b      	ldr	r3, [r3, #24]
 8015922:	2b00      	cmp	r3, #0
 8015924:	d00f      	beq.n	8015946 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8015926:	7dba      	ldrb	r2, [r7, #22]
 8015928:	68fb      	ldr	r3, [r7, #12]
 801592a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801592e:	7dba      	ldrb	r2, [r7, #22]
 8015930:	68fb      	ldr	r3, [r7, #12]
 8015932:	32ae      	adds	r2, #174	; 0xae
 8015934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015938:	699b      	ldr	r3, [r3, #24]
 801593a:	7afa      	ldrb	r2, [r7, #11]
 801593c:	4611      	mov	r1, r2
 801593e:	68f8      	ldr	r0, [r7, #12]
 8015940:	4798      	blx	r3
 8015942:	4603      	mov	r3, r0
 8015944:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8015946:	7dfb      	ldrb	r3, [r7, #23]
 8015948:	2b00      	cmp	r3, #0
 801594a:	d001      	beq.n	8015950 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801594c:	7dfb      	ldrb	r3, [r7, #23]
 801594e:	e000      	b.n	8015952 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8015950:	2300      	movs	r3, #0
}
 8015952:	4618      	mov	r0, r3
 8015954:	3718      	adds	r7, #24
 8015956:	46bd      	mov	sp, r7
 8015958:	bd80      	pop	{r7, pc}

0801595a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801595a:	b580      	push	{r7, lr}
 801595c:	b086      	sub	sp, #24
 801595e:	af00      	add	r7, sp, #0
 8015960:	60f8      	str	r0, [r7, #12]
 8015962:	460b      	mov	r3, r1
 8015964:	607a      	str	r2, [r7, #4]
 8015966:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8015968:	7afb      	ldrb	r3, [r7, #11]
 801596a:	2b00      	cmp	r3, #0
 801596c:	d16f      	bne.n	8015a4e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	3314      	adds	r3, #20
 8015972:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015974:	68fb      	ldr	r3, [r7, #12]
 8015976:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801597a:	2b02      	cmp	r3, #2
 801597c:	d15a      	bne.n	8015a34 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801597e:	693b      	ldr	r3, [r7, #16]
 8015980:	689a      	ldr	r2, [r3, #8]
 8015982:	693b      	ldr	r3, [r7, #16]
 8015984:	68db      	ldr	r3, [r3, #12]
 8015986:	429a      	cmp	r2, r3
 8015988:	d914      	bls.n	80159b4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801598a:	693b      	ldr	r3, [r7, #16]
 801598c:	689a      	ldr	r2, [r3, #8]
 801598e:	693b      	ldr	r3, [r7, #16]
 8015990:	68db      	ldr	r3, [r3, #12]
 8015992:	1ad2      	subs	r2, r2, r3
 8015994:	693b      	ldr	r3, [r7, #16]
 8015996:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015998:	693b      	ldr	r3, [r7, #16]
 801599a:	689b      	ldr	r3, [r3, #8]
 801599c:	461a      	mov	r2, r3
 801599e:	6879      	ldr	r1, [r7, #4]
 80159a0:	68f8      	ldr	r0, [r7, #12]
 80159a2:	f001 f8dc 	bl	8016b5e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80159a6:	2300      	movs	r3, #0
 80159a8:	2200      	movs	r2, #0
 80159aa:	2100      	movs	r1, #0
 80159ac:	68f8      	ldr	r0, [r7, #12]
 80159ae:	f001 fe49 	bl	8017644 <USBD_LL_PrepareReceive>
 80159b2:	e03f      	b.n	8015a34 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80159b4:	693b      	ldr	r3, [r7, #16]
 80159b6:	68da      	ldr	r2, [r3, #12]
 80159b8:	693b      	ldr	r3, [r7, #16]
 80159ba:	689b      	ldr	r3, [r3, #8]
 80159bc:	429a      	cmp	r2, r3
 80159be:	d11c      	bne.n	80159fa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80159c0:	693b      	ldr	r3, [r7, #16]
 80159c2:	685a      	ldr	r2, [r3, #4]
 80159c4:	693b      	ldr	r3, [r7, #16]
 80159c6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80159c8:	429a      	cmp	r2, r3
 80159ca:	d316      	bcc.n	80159fa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80159cc:	693b      	ldr	r3, [r7, #16]
 80159ce:	685a      	ldr	r2, [r3, #4]
 80159d0:	68fb      	ldr	r3, [r7, #12]
 80159d2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80159d6:	429a      	cmp	r2, r3
 80159d8:	d20f      	bcs.n	80159fa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80159da:	2200      	movs	r2, #0
 80159dc:	2100      	movs	r1, #0
 80159de:	68f8      	ldr	r0, [r7, #12]
 80159e0:	f001 f8bd 	bl	8016b5e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80159e4:	68fb      	ldr	r3, [r7, #12]
 80159e6:	2200      	movs	r2, #0
 80159e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80159ec:	2300      	movs	r3, #0
 80159ee:	2200      	movs	r2, #0
 80159f0:	2100      	movs	r1, #0
 80159f2:	68f8      	ldr	r0, [r7, #12]
 80159f4:	f001 fe26 	bl	8017644 <USBD_LL_PrepareReceive>
 80159f8:	e01c      	b.n	8015a34 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80159fa:	68fb      	ldr	r3, [r7, #12]
 80159fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a00:	b2db      	uxtb	r3, r3
 8015a02:	2b03      	cmp	r3, #3
 8015a04:	d10f      	bne.n	8015a26 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8015a06:	68fb      	ldr	r3, [r7, #12]
 8015a08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a0c:	68db      	ldr	r3, [r3, #12]
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d009      	beq.n	8015a26 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	2200      	movs	r2, #0
 8015a16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a20:	68db      	ldr	r3, [r3, #12]
 8015a22:	68f8      	ldr	r0, [r7, #12]
 8015a24:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015a26:	2180      	movs	r1, #128	; 0x80
 8015a28:	68f8      	ldr	r0, [r7, #12]
 8015a2a:	f001 fd61 	bl	80174f0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015a2e:	68f8      	ldr	r0, [r7, #12]
 8015a30:	f001 f8e7 	bl	8016c02 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	d03a      	beq.n	8015ab4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8015a3e:	68f8      	ldr	r0, [r7, #12]
 8015a40:	f7ff fe42 	bl	80156c8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015a44:	68fb      	ldr	r3, [r7, #12]
 8015a46:	2200      	movs	r2, #0
 8015a48:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8015a4c:	e032      	b.n	8015ab4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8015a4e:	7afb      	ldrb	r3, [r7, #11]
 8015a50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015a54:	b2db      	uxtb	r3, r3
 8015a56:	4619      	mov	r1, r3
 8015a58:	68f8      	ldr	r0, [r7, #12]
 8015a5a:	f000 f985 	bl	8015d68 <USBD_CoreFindEP>
 8015a5e:	4603      	mov	r3, r0
 8015a60:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015a62:	7dfb      	ldrb	r3, [r7, #23]
 8015a64:	2bff      	cmp	r3, #255	; 0xff
 8015a66:	d025      	beq.n	8015ab4 <USBD_LL_DataInStage+0x15a>
 8015a68:	7dfb      	ldrb	r3, [r7, #23]
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d122      	bne.n	8015ab4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015a6e:	68fb      	ldr	r3, [r7, #12]
 8015a70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a74:	b2db      	uxtb	r3, r3
 8015a76:	2b03      	cmp	r3, #3
 8015a78:	d11c      	bne.n	8015ab4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8015a7a:	7dfa      	ldrb	r2, [r7, #23]
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	32ae      	adds	r2, #174	; 0xae
 8015a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a84:	695b      	ldr	r3, [r3, #20]
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d014      	beq.n	8015ab4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8015a8a:	7dfa      	ldrb	r2, [r7, #23]
 8015a8c:	68fb      	ldr	r3, [r7, #12]
 8015a8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8015a92:	7dfa      	ldrb	r2, [r7, #23]
 8015a94:	68fb      	ldr	r3, [r7, #12]
 8015a96:	32ae      	adds	r2, #174	; 0xae
 8015a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a9c:	695b      	ldr	r3, [r3, #20]
 8015a9e:	7afa      	ldrb	r2, [r7, #11]
 8015aa0:	4611      	mov	r1, r2
 8015aa2:	68f8      	ldr	r0, [r7, #12]
 8015aa4:	4798      	blx	r3
 8015aa6:	4603      	mov	r3, r0
 8015aa8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8015aaa:	7dbb      	ldrb	r3, [r7, #22]
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d001      	beq.n	8015ab4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8015ab0:	7dbb      	ldrb	r3, [r7, #22]
 8015ab2:	e000      	b.n	8015ab6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8015ab4:	2300      	movs	r3, #0
}
 8015ab6:	4618      	mov	r0, r3
 8015ab8:	3718      	adds	r7, #24
 8015aba:	46bd      	mov	sp, r7
 8015abc:	bd80      	pop	{r7, pc}

08015abe <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015abe:	b580      	push	{r7, lr}
 8015ac0:	b084      	sub	sp, #16
 8015ac2:	af00      	add	r7, sp, #0
 8015ac4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8015ac6:	2300      	movs	r3, #0
 8015ac8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	2201      	movs	r2, #1
 8015ace:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	2200      	movs	r2, #0
 8015ad6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	2200      	movs	r2, #0
 8015ade:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	2200      	movs	r2, #0
 8015ae4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	2200      	movs	r2, #0
 8015aec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d014      	beq.n	8015b24 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b00:	685b      	ldr	r3, [r3, #4]
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d00e      	beq.n	8015b24 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b0c:	685b      	ldr	r3, [r3, #4]
 8015b0e:	687a      	ldr	r2, [r7, #4]
 8015b10:	6852      	ldr	r2, [r2, #4]
 8015b12:	b2d2      	uxtb	r2, r2
 8015b14:	4611      	mov	r1, r2
 8015b16:	6878      	ldr	r0, [r7, #4]
 8015b18:	4798      	blx	r3
 8015b1a:	4603      	mov	r3, r0
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d001      	beq.n	8015b24 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8015b20:	2303      	movs	r3, #3
 8015b22:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015b24:	2340      	movs	r3, #64	; 0x40
 8015b26:	2200      	movs	r2, #0
 8015b28:	2100      	movs	r1, #0
 8015b2a:	6878      	ldr	r0, [r7, #4]
 8015b2c:	f001 fc9b 	bl	8017466 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	2201      	movs	r2, #1
 8015b34:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	2240      	movs	r2, #64	; 0x40
 8015b3c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015b40:	2340      	movs	r3, #64	; 0x40
 8015b42:	2200      	movs	r2, #0
 8015b44:	2180      	movs	r1, #128	; 0x80
 8015b46:	6878      	ldr	r0, [r7, #4]
 8015b48:	f001 fc8d 	bl	8017466 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	2201      	movs	r2, #1
 8015b50:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	2240      	movs	r2, #64	; 0x40
 8015b56:	621a      	str	r2, [r3, #32]

  return ret;
 8015b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b5a:	4618      	mov	r0, r3
 8015b5c:	3710      	adds	r7, #16
 8015b5e:	46bd      	mov	sp, r7
 8015b60:	bd80      	pop	{r7, pc}

08015b62 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015b62:	b480      	push	{r7}
 8015b64:	b083      	sub	sp, #12
 8015b66:	af00      	add	r7, sp, #0
 8015b68:	6078      	str	r0, [r7, #4]
 8015b6a:	460b      	mov	r3, r1
 8015b6c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	78fa      	ldrb	r2, [r7, #3]
 8015b72:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015b74:	2300      	movs	r3, #0
}
 8015b76:	4618      	mov	r0, r3
 8015b78:	370c      	adds	r7, #12
 8015b7a:	46bd      	mov	sp, r7
 8015b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b80:	4770      	bx	lr

08015b82 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015b82:	b480      	push	{r7}
 8015b84:	b083      	sub	sp, #12
 8015b86:	af00      	add	r7, sp, #0
 8015b88:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b90:	b2db      	uxtb	r3, r3
 8015b92:	2b04      	cmp	r3, #4
 8015b94:	d006      	beq.n	8015ba4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b9c:	b2da      	uxtb	r2, r3
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	2204      	movs	r2, #4
 8015ba8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015bac:	2300      	movs	r3, #0
}
 8015bae:	4618      	mov	r0, r3
 8015bb0:	370c      	adds	r7, #12
 8015bb2:	46bd      	mov	sp, r7
 8015bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bb8:	4770      	bx	lr

08015bba <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015bba:	b480      	push	{r7}
 8015bbc:	b083      	sub	sp, #12
 8015bbe:	af00      	add	r7, sp, #0
 8015bc0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015bc8:	b2db      	uxtb	r3, r3
 8015bca:	2b04      	cmp	r3, #4
 8015bcc:	d106      	bne.n	8015bdc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8015bd4:	b2da      	uxtb	r2, r3
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8015bdc:	2300      	movs	r3, #0
}
 8015bde:	4618      	mov	r0, r3
 8015be0:	370c      	adds	r7, #12
 8015be2:	46bd      	mov	sp, r7
 8015be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015be8:	4770      	bx	lr

08015bea <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015bea:	b580      	push	{r7, lr}
 8015bec:	b082      	sub	sp, #8
 8015bee:	af00      	add	r7, sp, #0
 8015bf0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015bf8:	b2db      	uxtb	r3, r3
 8015bfa:	2b03      	cmp	r3, #3
 8015bfc:	d110      	bne.n	8015c20 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d00b      	beq.n	8015c20 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015c0e:	69db      	ldr	r3, [r3, #28]
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d005      	beq.n	8015c20 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015c1a:	69db      	ldr	r3, [r3, #28]
 8015c1c:	6878      	ldr	r0, [r7, #4]
 8015c1e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8015c20:	2300      	movs	r3, #0
}
 8015c22:	4618      	mov	r0, r3
 8015c24:	3708      	adds	r7, #8
 8015c26:	46bd      	mov	sp, r7
 8015c28:	bd80      	pop	{r7, pc}

08015c2a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8015c2a:	b580      	push	{r7, lr}
 8015c2c:	b082      	sub	sp, #8
 8015c2e:	af00      	add	r7, sp, #0
 8015c30:	6078      	str	r0, [r7, #4]
 8015c32:	460b      	mov	r3, r1
 8015c34:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	32ae      	adds	r2, #174	; 0xae
 8015c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d101      	bne.n	8015c4c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8015c48:	2303      	movs	r3, #3
 8015c4a:	e01c      	b.n	8015c86 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015c52:	b2db      	uxtb	r3, r3
 8015c54:	2b03      	cmp	r3, #3
 8015c56:	d115      	bne.n	8015c84 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	32ae      	adds	r2, #174	; 0xae
 8015c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c66:	6a1b      	ldr	r3, [r3, #32]
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d00b      	beq.n	8015c84 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	32ae      	adds	r2, #174	; 0xae
 8015c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c7a:	6a1b      	ldr	r3, [r3, #32]
 8015c7c:	78fa      	ldrb	r2, [r7, #3]
 8015c7e:	4611      	mov	r1, r2
 8015c80:	6878      	ldr	r0, [r7, #4]
 8015c82:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015c84:	2300      	movs	r3, #0
}
 8015c86:	4618      	mov	r0, r3
 8015c88:	3708      	adds	r7, #8
 8015c8a:	46bd      	mov	sp, r7
 8015c8c:	bd80      	pop	{r7, pc}

08015c8e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015c8e:	b580      	push	{r7, lr}
 8015c90:	b082      	sub	sp, #8
 8015c92:	af00      	add	r7, sp, #0
 8015c94:	6078      	str	r0, [r7, #4]
 8015c96:	460b      	mov	r3, r1
 8015c98:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	32ae      	adds	r2, #174	; 0xae
 8015ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	d101      	bne.n	8015cb0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8015cac:	2303      	movs	r3, #3
 8015cae:	e01c      	b.n	8015cea <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015cb6:	b2db      	uxtb	r3, r3
 8015cb8:	2b03      	cmp	r3, #3
 8015cba:	d115      	bne.n	8015ce8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	32ae      	adds	r2, #174	; 0xae
 8015cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d00b      	beq.n	8015ce8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	32ae      	adds	r2, #174	; 0xae
 8015cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ce0:	78fa      	ldrb	r2, [r7, #3]
 8015ce2:	4611      	mov	r1, r2
 8015ce4:	6878      	ldr	r0, [r7, #4]
 8015ce6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015ce8:	2300      	movs	r3, #0
}
 8015cea:	4618      	mov	r0, r3
 8015cec:	3708      	adds	r7, #8
 8015cee:	46bd      	mov	sp, r7
 8015cf0:	bd80      	pop	{r7, pc}

08015cf2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8015cf2:	b480      	push	{r7}
 8015cf4:	b083      	sub	sp, #12
 8015cf6:	af00      	add	r7, sp, #0
 8015cf8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015cfa:	2300      	movs	r3, #0
}
 8015cfc:	4618      	mov	r0, r3
 8015cfe:	370c      	adds	r7, #12
 8015d00:	46bd      	mov	sp, r7
 8015d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d06:	4770      	bx	lr

08015d08 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8015d08:	b580      	push	{r7, lr}
 8015d0a:	b084      	sub	sp, #16
 8015d0c:	af00      	add	r7, sp, #0
 8015d0e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8015d10:	2300      	movs	r3, #0
 8015d12:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	2201      	movs	r2, #1
 8015d18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d00e      	beq.n	8015d44 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d2c:	685b      	ldr	r3, [r3, #4]
 8015d2e:	687a      	ldr	r2, [r7, #4]
 8015d30:	6852      	ldr	r2, [r2, #4]
 8015d32:	b2d2      	uxtb	r2, r2
 8015d34:	4611      	mov	r1, r2
 8015d36:	6878      	ldr	r0, [r7, #4]
 8015d38:	4798      	blx	r3
 8015d3a:	4603      	mov	r3, r0
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d001      	beq.n	8015d44 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8015d40:	2303      	movs	r3, #3
 8015d42:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d46:	4618      	mov	r0, r3
 8015d48:	3710      	adds	r7, #16
 8015d4a:	46bd      	mov	sp, r7
 8015d4c:	bd80      	pop	{r7, pc}

08015d4e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015d4e:	b480      	push	{r7}
 8015d50:	b083      	sub	sp, #12
 8015d52:	af00      	add	r7, sp, #0
 8015d54:	6078      	str	r0, [r7, #4]
 8015d56:	460b      	mov	r3, r1
 8015d58:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015d5a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015d5c:	4618      	mov	r0, r3
 8015d5e:	370c      	adds	r7, #12
 8015d60:	46bd      	mov	sp, r7
 8015d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d66:	4770      	bx	lr

08015d68 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015d68:	b480      	push	{r7}
 8015d6a:	b083      	sub	sp, #12
 8015d6c:	af00      	add	r7, sp, #0
 8015d6e:	6078      	str	r0, [r7, #4]
 8015d70:	460b      	mov	r3, r1
 8015d72:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015d74:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015d76:	4618      	mov	r0, r3
 8015d78:	370c      	adds	r7, #12
 8015d7a:	46bd      	mov	sp, r7
 8015d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d80:	4770      	bx	lr

08015d82 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8015d82:	b580      	push	{r7, lr}
 8015d84:	b086      	sub	sp, #24
 8015d86:	af00      	add	r7, sp, #0
 8015d88:	6078      	str	r0, [r7, #4]
 8015d8a:	460b      	mov	r3, r1
 8015d8c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8015d96:	2300      	movs	r3, #0
 8015d98:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8015d9a:	68fb      	ldr	r3, [r7, #12]
 8015d9c:	885b      	ldrh	r3, [r3, #2]
 8015d9e:	b29a      	uxth	r2, r3
 8015da0:	68fb      	ldr	r3, [r7, #12]
 8015da2:	781b      	ldrb	r3, [r3, #0]
 8015da4:	b29b      	uxth	r3, r3
 8015da6:	429a      	cmp	r2, r3
 8015da8:	d920      	bls.n	8015dec <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8015daa:	68fb      	ldr	r3, [r7, #12]
 8015dac:	781b      	ldrb	r3, [r3, #0]
 8015dae:	b29b      	uxth	r3, r3
 8015db0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8015db2:	e013      	b.n	8015ddc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8015db4:	f107 030a 	add.w	r3, r7, #10
 8015db8:	4619      	mov	r1, r3
 8015dba:	6978      	ldr	r0, [r7, #20]
 8015dbc:	f000 f81b 	bl	8015df6 <USBD_GetNextDesc>
 8015dc0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8015dc2:	697b      	ldr	r3, [r7, #20]
 8015dc4:	785b      	ldrb	r3, [r3, #1]
 8015dc6:	2b05      	cmp	r3, #5
 8015dc8:	d108      	bne.n	8015ddc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8015dca:	697b      	ldr	r3, [r7, #20]
 8015dcc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8015dce:	693b      	ldr	r3, [r7, #16]
 8015dd0:	789b      	ldrb	r3, [r3, #2]
 8015dd2:	78fa      	ldrb	r2, [r7, #3]
 8015dd4:	429a      	cmp	r2, r3
 8015dd6:	d008      	beq.n	8015dea <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8015dd8:	2300      	movs	r3, #0
 8015dda:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8015ddc:	68fb      	ldr	r3, [r7, #12]
 8015dde:	885b      	ldrh	r3, [r3, #2]
 8015de0:	b29a      	uxth	r2, r3
 8015de2:	897b      	ldrh	r3, [r7, #10]
 8015de4:	429a      	cmp	r2, r3
 8015de6:	d8e5      	bhi.n	8015db4 <USBD_GetEpDesc+0x32>
 8015de8:	e000      	b.n	8015dec <USBD_GetEpDesc+0x6a>
          break;
 8015dea:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8015dec:	693b      	ldr	r3, [r7, #16]
}
 8015dee:	4618      	mov	r0, r3
 8015df0:	3718      	adds	r7, #24
 8015df2:	46bd      	mov	sp, r7
 8015df4:	bd80      	pop	{r7, pc}

08015df6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8015df6:	b480      	push	{r7}
 8015df8:	b085      	sub	sp, #20
 8015dfa:	af00      	add	r7, sp, #0
 8015dfc:	6078      	str	r0, [r7, #4]
 8015dfe:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8015e04:	683b      	ldr	r3, [r7, #0]
 8015e06:	881a      	ldrh	r2, [r3, #0]
 8015e08:	68fb      	ldr	r3, [r7, #12]
 8015e0a:	781b      	ldrb	r3, [r3, #0]
 8015e0c:	b29b      	uxth	r3, r3
 8015e0e:	4413      	add	r3, r2
 8015e10:	b29a      	uxth	r2, r3
 8015e12:	683b      	ldr	r3, [r7, #0]
 8015e14:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8015e16:	68fb      	ldr	r3, [r7, #12]
 8015e18:	781b      	ldrb	r3, [r3, #0]
 8015e1a:	461a      	mov	r2, r3
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	4413      	add	r3, r2
 8015e20:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8015e22:	68fb      	ldr	r3, [r7, #12]
}
 8015e24:	4618      	mov	r0, r3
 8015e26:	3714      	adds	r7, #20
 8015e28:	46bd      	mov	sp, r7
 8015e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e2e:	4770      	bx	lr

08015e30 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015e30:	b480      	push	{r7}
 8015e32:	b087      	sub	sp, #28
 8015e34:	af00      	add	r7, sp, #0
 8015e36:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015e3c:	697b      	ldr	r3, [r7, #20]
 8015e3e:	781b      	ldrb	r3, [r3, #0]
 8015e40:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8015e42:	697b      	ldr	r3, [r7, #20]
 8015e44:	3301      	adds	r3, #1
 8015e46:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015e48:	697b      	ldr	r3, [r7, #20]
 8015e4a:	781b      	ldrb	r3, [r3, #0]
 8015e4c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015e4e:	8a3b      	ldrh	r3, [r7, #16]
 8015e50:	021b      	lsls	r3, r3, #8
 8015e52:	b21a      	sxth	r2, r3
 8015e54:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015e58:	4313      	orrs	r3, r2
 8015e5a:	b21b      	sxth	r3, r3
 8015e5c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015e5e:	89fb      	ldrh	r3, [r7, #14]
}
 8015e60:	4618      	mov	r0, r3
 8015e62:	371c      	adds	r7, #28
 8015e64:	46bd      	mov	sp, r7
 8015e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e6a:	4770      	bx	lr

08015e6c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e6c:	b580      	push	{r7, lr}
 8015e6e:	b084      	sub	sp, #16
 8015e70:	af00      	add	r7, sp, #0
 8015e72:	6078      	str	r0, [r7, #4]
 8015e74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015e76:	2300      	movs	r3, #0
 8015e78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015e7a:	683b      	ldr	r3, [r7, #0]
 8015e7c:	781b      	ldrb	r3, [r3, #0]
 8015e7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015e82:	2b40      	cmp	r3, #64	; 0x40
 8015e84:	d005      	beq.n	8015e92 <USBD_StdDevReq+0x26>
 8015e86:	2b40      	cmp	r3, #64	; 0x40
 8015e88:	d857      	bhi.n	8015f3a <USBD_StdDevReq+0xce>
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d00f      	beq.n	8015eae <USBD_StdDevReq+0x42>
 8015e8e:	2b20      	cmp	r3, #32
 8015e90:	d153      	bne.n	8015f3a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	32ae      	adds	r2, #174	; 0xae
 8015e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ea0:	689b      	ldr	r3, [r3, #8]
 8015ea2:	6839      	ldr	r1, [r7, #0]
 8015ea4:	6878      	ldr	r0, [r7, #4]
 8015ea6:	4798      	blx	r3
 8015ea8:	4603      	mov	r3, r0
 8015eaa:	73fb      	strb	r3, [r7, #15]
      break;
 8015eac:	e04a      	b.n	8015f44 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015eae:	683b      	ldr	r3, [r7, #0]
 8015eb0:	785b      	ldrb	r3, [r3, #1]
 8015eb2:	2b09      	cmp	r3, #9
 8015eb4:	d83b      	bhi.n	8015f2e <USBD_StdDevReq+0xc2>
 8015eb6:	a201      	add	r2, pc, #4	; (adr r2, 8015ebc <USBD_StdDevReq+0x50>)
 8015eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ebc:	08015f11 	.word	0x08015f11
 8015ec0:	08015f25 	.word	0x08015f25
 8015ec4:	08015f2f 	.word	0x08015f2f
 8015ec8:	08015f1b 	.word	0x08015f1b
 8015ecc:	08015f2f 	.word	0x08015f2f
 8015ed0:	08015eef 	.word	0x08015eef
 8015ed4:	08015ee5 	.word	0x08015ee5
 8015ed8:	08015f2f 	.word	0x08015f2f
 8015edc:	08015f07 	.word	0x08015f07
 8015ee0:	08015ef9 	.word	0x08015ef9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015ee4:	6839      	ldr	r1, [r7, #0]
 8015ee6:	6878      	ldr	r0, [r7, #4]
 8015ee8:	f000 fa3c 	bl	8016364 <USBD_GetDescriptor>
          break;
 8015eec:	e024      	b.n	8015f38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8015eee:	6839      	ldr	r1, [r7, #0]
 8015ef0:	6878      	ldr	r0, [r7, #4]
 8015ef2:	f000 fbcb 	bl	801668c <USBD_SetAddress>
          break;
 8015ef6:	e01f      	b.n	8015f38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8015ef8:	6839      	ldr	r1, [r7, #0]
 8015efa:	6878      	ldr	r0, [r7, #4]
 8015efc:	f000 fc0a 	bl	8016714 <USBD_SetConfig>
 8015f00:	4603      	mov	r3, r0
 8015f02:	73fb      	strb	r3, [r7, #15]
          break;
 8015f04:	e018      	b.n	8015f38 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8015f06:	6839      	ldr	r1, [r7, #0]
 8015f08:	6878      	ldr	r0, [r7, #4]
 8015f0a:	f000 fcad 	bl	8016868 <USBD_GetConfig>
          break;
 8015f0e:	e013      	b.n	8015f38 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8015f10:	6839      	ldr	r1, [r7, #0]
 8015f12:	6878      	ldr	r0, [r7, #4]
 8015f14:	f000 fcde 	bl	80168d4 <USBD_GetStatus>
          break;
 8015f18:	e00e      	b.n	8015f38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8015f1a:	6839      	ldr	r1, [r7, #0]
 8015f1c:	6878      	ldr	r0, [r7, #4]
 8015f1e:	f000 fd0d 	bl	801693c <USBD_SetFeature>
          break;
 8015f22:	e009      	b.n	8015f38 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015f24:	6839      	ldr	r1, [r7, #0]
 8015f26:	6878      	ldr	r0, [r7, #4]
 8015f28:	f000 fd31 	bl	801698e <USBD_ClrFeature>
          break;
 8015f2c:	e004      	b.n	8015f38 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8015f2e:	6839      	ldr	r1, [r7, #0]
 8015f30:	6878      	ldr	r0, [r7, #4]
 8015f32:	f000 fd88 	bl	8016a46 <USBD_CtlError>
          break;
 8015f36:	bf00      	nop
      }
      break;
 8015f38:	e004      	b.n	8015f44 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8015f3a:	6839      	ldr	r1, [r7, #0]
 8015f3c:	6878      	ldr	r0, [r7, #4]
 8015f3e:	f000 fd82 	bl	8016a46 <USBD_CtlError>
      break;
 8015f42:	bf00      	nop
  }

  return ret;
 8015f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f46:	4618      	mov	r0, r3
 8015f48:	3710      	adds	r7, #16
 8015f4a:	46bd      	mov	sp, r7
 8015f4c:	bd80      	pop	{r7, pc}
 8015f4e:	bf00      	nop

08015f50 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015f50:	b580      	push	{r7, lr}
 8015f52:	b084      	sub	sp, #16
 8015f54:	af00      	add	r7, sp, #0
 8015f56:	6078      	str	r0, [r7, #4]
 8015f58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015f5a:	2300      	movs	r3, #0
 8015f5c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015f5e:	683b      	ldr	r3, [r7, #0]
 8015f60:	781b      	ldrb	r3, [r3, #0]
 8015f62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015f66:	2b40      	cmp	r3, #64	; 0x40
 8015f68:	d005      	beq.n	8015f76 <USBD_StdItfReq+0x26>
 8015f6a:	2b40      	cmp	r3, #64	; 0x40
 8015f6c:	d852      	bhi.n	8016014 <USBD_StdItfReq+0xc4>
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d001      	beq.n	8015f76 <USBD_StdItfReq+0x26>
 8015f72:	2b20      	cmp	r3, #32
 8015f74:	d14e      	bne.n	8016014 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015f7c:	b2db      	uxtb	r3, r3
 8015f7e:	3b01      	subs	r3, #1
 8015f80:	2b02      	cmp	r3, #2
 8015f82:	d840      	bhi.n	8016006 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015f84:	683b      	ldr	r3, [r7, #0]
 8015f86:	889b      	ldrh	r3, [r3, #4]
 8015f88:	b2db      	uxtb	r3, r3
 8015f8a:	2b01      	cmp	r3, #1
 8015f8c:	d836      	bhi.n	8015ffc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8015f8e:	683b      	ldr	r3, [r7, #0]
 8015f90:	889b      	ldrh	r3, [r3, #4]
 8015f92:	b2db      	uxtb	r3, r3
 8015f94:	4619      	mov	r1, r3
 8015f96:	6878      	ldr	r0, [r7, #4]
 8015f98:	f7ff fed9 	bl	8015d4e <USBD_CoreFindIF>
 8015f9c:	4603      	mov	r3, r0
 8015f9e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015fa0:	7bbb      	ldrb	r3, [r7, #14]
 8015fa2:	2bff      	cmp	r3, #255	; 0xff
 8015fa4:	d01d      	beq.n	8015fe2 <USBD_StdItfReq+0x92>
 8015fa6:	7bbb      	ldrb	r3, [r7, #14]
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d11a      	bne.n	8015fe2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8015fac:	7bba      	ldrb	r2, [r7, #14]
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	32ae      	adds	r2, #174	; 0xae
 8015fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015fb6:	689b      	ldr	r3, [r3, #8]
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d00f      	beq.n	8015fdc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8015fbc:	7bba      	ldrb	r2, [r7, #14]
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015fc4:	7bba      	ldrb	r2, [r7, #14]
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	32ae      	adds	r2, #174	; 0xae
 8015fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015fce:	689b      	ldr	r3, [r3, #8]
 8015fd0:	6839      	ldr	r1, [r7, #0]
 8015fd2:	6878      	ldr	r0, [r7, #4]
 8015fd4:	4798      	blx	r3
 8015fd6:	4603      	mov	r3, r0
 8015fd8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015fda:	e004      	b.n	8015fe6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8015fdc:	2303      	movs	r3, #3
 8015fde:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015fe0:	e001      	b.n	8015fe6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8015fe2:	2303      	movs	r3, #3
 8015fe4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8015fe6:	683b      	ldr	r3, [r7, #0]
 8015fe8:	88db      	ldrh	r3, [r3, #6]
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d110      	bne.n	8016010 <USBD_StdItfReq+0xc0>
 8015fee:	7bfb      	ldrb	r3, [r7, #15]
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d10d      	bne.n	8016010 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8015ff4:	6878      	ldr	r0, [r7, #4]
 8015ff6:	f000 fdf1 	bl	8016bdc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8015ffa:	e009      	b.n	8016010 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8015ffc:	6839      	ldr	r1, [r7, #0]
 8015ffe:	6878      	ldr	r0, [r7, #4]
 8016000:	f000 fd21 	bl	8016a46 <USBD_CtlError>
          break;
 8016004:	e004      	b.n	8016010 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8016006:	6839      	ldr	r1, [r7, #0]
 8016008:	6878      	ldr	r0, [r7, #4]
 801600a:	f000 fd1c 	bl	8016a46 <USBD_CtlError>
          break;
 801600e:	e000      	b.n	8016012 <USBD_StdItfReq+0xc2>
          break;
 8016010:	bf00      	nop
      }
      break;
 8016012:	e004      	b.n	801601e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8016014:	6839      	ldr	r1, [r7, #0]
 8016016:	6878      	ldr	r0, [r7, #4]
 8016018:	f000 fd15 	bl	8016a46 <USBD_CtlError>
      break;
 801601c:	bf00      	nop
  }

  return ret;
 801601e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016020:	4618      	mov	r0, r3
 8016022:	3710      	adds	r7, #16
 8016024:	46bd      	mov	sp, r7
 8016026:	bd80      	pop	{r7, pc}

08016028 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016028:	b580      	push	{r7, lr}
 801602a:	b084      	sub	sp, #16
 801602c:	af00      	add	r7, sp, #0
 801602e:	6078      	str	r0, [r7, #4]
 8016030:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8016032:	2300      	movs	r3, #0
 8016034:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8016036:	683b      	ldr	r3, [r7, #0]
 8016038:	889b      	ldrh	r3, [r3, #4]
 801603a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801603c:	683b      	ldr	r3, [r7, #0]
 801603e:	781b      	ldrb	r3, [r3, #0]
 8016040:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016044:	2b40      	cmp	r3, #64	; 0x40
 8016046:	d007      	beq.n	8016058 <USBD_StdEPReq+0x30>
 8016048:	2b40      	cmp	r3, #64	; 0x40
 801604a:	f200 817f 	bhi.w	801634c <USBD_StdEPReq+0x324>
 801604e:	2b00      	cmp	r3, #0
 8016050:	d02a      	beq.n	80160a8 <USBD_StdEPReq+0x80>
 8016052:	2b20      	cmp	r3, #32
 8016054:	f040 817a 	bne.w	801634c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8016058:	7bbb      	ldrb	r3, [r7, #14]
 801605a:	4619      	mov	r1, r3
 801605c:	6878      	ldr	r0, [r7, #4]
 801605e:	f7ff fe83 	bl	8015d68 <USBD_CoreFindEP>
 8016062:	4603      	mov	r3, r0
 8016064:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016066:	7b7b      	ldrb	r3, [r7, #13]
 8016068:	2bff      	cmp	r3, #255	; 0xff
 801606a:	f000 8174 	beq.w	8016356 <USBD_StdEPReq+0x32e>
 801606e:	7b7b      	ldrb	r3, [r7, #13]
 8016070:	2b00      	cmp	r3, #0
 8016072:	f040 8170 	bne.w	8016356 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8016076:	7b7a      	ldrb	r2, [r7, #13]
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801607e:	7b7a      	ldrb	r2, [r7, #13]
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	32ae      	adds	r2, #174	; 0xae
 8016084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016088:	689b      	ldr	r3, [r3, #8]
 801608a:	2b00      	cmp	r3, #0
 801608c:	f000 8163 	beq.w	8016356 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8016090:	7b7a      	ldrb	r2, [r7, #13]
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	32ae      	adds	r2, #174	; 0xae
 8016096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801609a:	689b      	ldr	r3, [r3, #8]
 801609c:	6839      	ldr	r1, [r7, #0]
 801609e:	6878      	ldr	r0, [r7, #4]
 80160a0:	4798      	blx	r3
 80160a2:	4603      	mov	r3, r0
 80160a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80160a6:	e156      	b.n	8016356 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80160a8:	683b      	ldr	r3, [r7, #0]
 80160aa:	785b      	ldrb	r3, [r3, #1]
 80160ac:	2b03      	cmp	r3, #3
 80160ae:	d008      	beq.n	80160c2 <USBD_StdEPReq+0x9a>
 80160b0:	2b03      	cmp	r3, #3
 80160b2:	f300 8145 	bgt.w	8016340 <USBD_StdEPReq+0x318>
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	f000 809b 	beq.w	80161f2 <USBD_StdEPReq+0x1ca>
 80160bc:	2b01      	cmp	r3, #1
 80160be:	d03c      	beq.n	801613a <USBD_StdEPReq+0x112>
 80160c0:	e13e      	b.n	8016340 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80160c8:	b2db      	uxtb	r3, r3
 80160ca:	2b02      	cmp	r3, #2
 80160cc:	d002      	beq.n	80160d4 <USBD_StdEPReq+0xac>
 80160ce:	2b03      	cmp	r3, #3
 80160d0:	d016      	beq.n	8016100 <USBD_StdEPReq+0xd8>
 80160d2:	e02c      	b.n	801612e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80160d4:	7bbb      	ldrb	r3, [r7, #14]
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d00d      	beq.n	80160f6 <USBD_StdEPReq+0xce>
 80160da:	7bbb      	ldrb	r3, [r7, #14]
 80160dc:	2b80      	cmp	r3, #128	; 0x80
 80160de:	d00a      	beq.n	80160f6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80160e0:	7bbb      	ldrb	r3, [r7, #14]
 80160e2:	4619      	mov	r1, r3
 80160e4:	6878      	ldr	r0, [r7, #4]
 80160e6:	f001 fa03 	bl	80174f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80160ea:	2180      	movs	r1, #128	; 0x80
 80160ec:	6878      	ldr	r0, [r7, #4]
 80160ee:	f001 f9ff 	bl	80174f0 <USBD_LL_StallEP>
 80160f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80160f4:	e020      	b.n	8016138 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80160f6:	6839      	ldr	r1, [r7, #0]
 80160f8:	6878      	ldr	r0, [r7, #4]
 80160fa:	f000 fca4 	bl	8016a46 <USBD_CtlError>
              break;
 80160fe:	e01b      	b.n	8016138 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016100:	683b      	ldr	r3, [r7, #0]
 8016102:	885b      	ldrh	r3, [r3, #2]
 8016104:	2b00      	cmp	r3, #0
 8016106:	d10e      	bne.n	8016126 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016108:	7bbb      	ldrb	r3, [r7, #14]
 801610a:	2b00      	cmp	r3, #0
 801610c:	d00b      	beq.n	8016126 <USBD_StdEPReq+0xfe>
 801610e:	7bbb      	ldrb	r3, [r7, #14]
 8016110:	2b80      	cmp	r3, #128	; 0x80
 8016112:	d008      	beq.n	8016126 <USBD_StdEPReq+0xfe>
 8016114:	683b      	ldr	r3, [r7, #0]
 8016116:	88db      	ldrh	r3, [r3, #6]
 8016118:	2b00      	cmp	r3, #0
 801611a:	d104      	bne.n	8016126 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801611c:	7bbb      	ldrb	r3, [r7, #14]
 801611e:	4619      	mov	r1, r3
 8016120:	6878      	ldr	r0, [r7, #4]
 8016122:	f001 f9e5 	bl	80174f0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8016126:	6878      	ldr	r0, [r7, #4]
 8016128:	f000 fd58 	bl	8016bdc <USBD_CtlSendStatus>

              break;
 801612c:	e004      	b.n	8016138 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801612e:	6839      	ldr	r1, [r7, #0]
 8016130:	6878      	ldr	r0, [r7, #4]
 8016132:	f000 fc88 	bl	8016a46 <USBD_CtlError>
              break;
 8016136:	bf00      	nop
          }
          break;
 8016138:	e107      	b.n	801634a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016140:	b2db      	uxtb	r3, r3
 8016142:	2b02      	cmp	r3, #2
 8016144:	d002      	beq.n	801614c <USBD_StdEPReq+0x124>
 8016146:	2b03      	cmp	r3, #3
 8016148:	d016      	beq.n	8016178 <USBD_StdEPReq+0x150>
 801614a:	e04b      	b.n	80161e4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801614c:	7bbb      	ldrb	r3, [r7, #14]
 801614e:	2b00      	cmp	r3, #0
 8016150:	d00d      	beq.n	801616e <USBD_StdEPReq+0x146>
 8016152:	7bbb      	ldrb	r3, [r7, #14]
 8016154:	2b80      	cmp	r3, #128	; 0x80
 8016156:	d00a      	beq.n	801616e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016158:	7bbb      	ldrb	r3, [r7, #14]
 801615a:	4619      	mov	r1, r3
 801615c:	6878      	ldr	r0, [r7, #4]
 801615e:	f001 f9c7 	bl	80174f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016162:	2180      	movs	r1, #128	; 0x80
 8016164:	6878      	ldr	r0, [r7, #4]
 8016166:	f001 f9c3 	bl	80174f0 <USBD_LL_StallEP>
 801616a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801616c:	e040      	b.n	80161f0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801616e:	6839      	ldr	r1, [r7, #0]
 8016170:	6878      	ldr	r0, [r7, #4]
 8016172:	f000 fc68 	bl	8016a46 <USBD_CtlError>
              break;
 8016176:	e03b      	b.n	80161f0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016178:	683b      	ldr	r3, [r7, #0]
 801617a:	885b      	ldrh	r3, [r3, #2]
 801617c:	2b00      	cmp	r3, #0
 801617e:	d136      	bne.n	80161ee <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8016180:	7bbb      	ldrb	r3, [r7, #14]
 8016182:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016186:	2b00      	cmp	r3, #0
 8016188:	d004      	beq.n	8016194 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801618a:	7bbb      	ldrb	r3, [r7, #14]
 801618c:	4619      	mov	r1, r3
 801618e:	6878      	ldr	r0, [r7, #4]
 8016190:	f001 f9cd 	bl	801752e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8016194:	6878      	ldr	r0, [r7, #4]
 8016196:	f000 fd21 	bl	8016bdc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801619a:	7bbb      	ldrb	r3, [r7, #14]
 801619c:	4619      	mov	r1, r3
 801619e:	6878      	ldr	r0, [r7, #4]
 80161a0:	f7ff fde2 	bl	8015d68 <USBD_CoreFindEP>
 80161a4:	4603      	mov	r3, r0
 80161a6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80161a8:	7b7b      	ldrb	r3, [r7, #13]
 80161aa:	2bff      	cmp	r3, #255	; 0xff
 80161ac:	d01f      	beq.n	80161ee <USBD_StdEPReq+0x1c6>
 80161ae:	7b7b      	ldrb	r3, [r7, #13]
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d11c      	bne.n	80161ee <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80161b4:	7b7a      	ldrb	r2, [r7, #13]
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80161bc:	7b7a      	ldrb	r2, [r7, #13]
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	32ae      	adds	r2, #174	; 0xae
 80161c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80161c6:	689b      	ldr	r3, [r3, #8]
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d010      	beq.n	80161ee <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80161cc:	7b7a      	ldrb	r2, [r7, #13]
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	32ae      	adds	r2, #174	; 0xae
 80161d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80161d6:	689b      	ldr	r3, [r3, #8]
 80161d8:	6839      	ldr	r1, [r7, #0]
 80161da:	6878      	ldr	r0, [r7, #4]
 80161dc:	4798      	blx	r3
 80161de:	4603      	mov	r3, r0
 80161e0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80161e2:	e004      	b.n	80161ee <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80161e4:	6839      	ldr	r1, [r7, #0]
 80161e6:	6878      	ldr	r0, [r7, #4]
 80161e8:	f000 fc2d 	bl	8016a46 <USBD_CtlError>
              break;
 80161ec:	e000      	b.n	80161f0 <USBD_StdEPReq+0x1c8>
              break;
 80161ee:	bf00      	nop
          }
          break;
 80161f0:	e0ab      	b.n	801634a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80161f8:	b2db      	uxtb	r3, r3
 80161fa:	2b02      	cmp	r3, #2
 80161fc:	d002      	beq.n	8016204 <USBD_StdEPReq+0x1dc>
 80161fe:	2b03      	cmp	r3, #3
 8016200:	d032      	beq.n	8016268 <USBD_StdEPReq+0x240>
 8016202:	e097      	b.n	8016334 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016204:	7bbb      	ldrb	r3, [r7, #14]
 8016206:	2b00      	cmp	r3, #0
 8016208:	d007      	beq.n	801621a <USBD_StdEPReq+0x1f2>
 801620a:	7bbb      	ldrb	r3, [r7, #14]
 801620c:	2b80      	cmp	r3, #128	; 0x80
 801620e:	d004      	beq.n	801621a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8016210:	6839      	ldr	r1, [r7, #0]
 8016212:	6878      	ldr	r0, [r7, #4]
 8016214:	f000 fc17 	bl	8016a46 <USBD_CtlError>
                break;
 8016218:	e091      	b.n	801633e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801621a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801621e:	2b00      	cmp	r3, #0
 8016220:	da0b      	bge.n	801623a <USBD_StdEPReq+0x212>
 8016222:	7bbb      	ldrb	r3, [r7, #14]
 8016224:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016228:	4613      	mov	r3, r2
 801622a:	009b      	lsls	r3, r3, #2
 801622c:	4413      	add	r3, r2
 801622e:	009b      	lsls	r3, r3, #2
 8016230:	3310      	adds	r3, #16
 8016232:	687a      	ldr	r2, [r7, #4]
 8016234:	4413      	add	r3, r2
 8016236:	3304      	adds	r3, #4
 8016238:	e00b      	b.n	8016252 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801623a:	7bbb      	ldrb	r3, [r7, #14]
 801623c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016240:	4613      	mov	r3, r2
 8016242:	009b      	lsls	r3, r3, #2
 8016244:	4413      	add	r3, r2
 8016246:	009b      	lsls	r3, r3, #2
 8016248:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801624c:	687a      	ldr	r2, [r7, #4]
 801624e:	4413      	add	r3, r2
 8016250:	3304      	adds	r3, #4
 8016252:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8016254:	68bb      	ldr	r3, [r7, #8]
 8016256:	2200      	movs	r2, #0
 8016258:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801625a:	68bb      	ldr	r3, [r7, #8]
 801625c:	2202      	movs	r2, #2
 801625e:	4619      	mov	r1, r3
 8016260:	6878      	ldr	r0, [r7, #4]
 8016262:	f000 fc61 	bl	8016b28 <USBD_CtlSendData>
              break;
 8016266:	e06a      	b.n	801633e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016268:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801626c:	2b00      	cmp	r3, #0
 801626e:	da11      	bge.n	8016294 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016270:	7bbb      	ldrb	r3, [r7, #14]
 8016272:	f003 020f 	and.w	r2, r3, #15
 8016276:	6879      	ldr	r1, [r7, #4]
 8016278:	4613      	mov	r3, r2
 801627a:	009b      	lsls	r3, r3, #2
 801627c:	4413      	add	r3, r2
 801627e:	009b      	lsls	r3, r3, #2
 8016280:	440b      	add	r3, r1
 8016282:	3324      	adds	r3, #36	; 0x24
 8016284:	881b      	ldrh	r3, [r3, #0]
 8016286:	2b00      	cmp	r3, #0
 8016288:	d117      	bne.n	80162ba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801628a:	6839      	ldr	r1, [r7, #0]
 801628c:	6878      	ldr	r0, [r7, #4]
 801628e:	f000 fbda 	bl	8016a46 <USBD_CtlError>
                  break;
 8016292:	e054      	b.n	801633e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8016294:	7bbb      	ldrb	r3, [r7, #14]
 8016296:	f003 020f 	and.w	r2, r3, #15
 801629a:	6879      	ldr	r1, [r7, #4]
 801629c:	4613      	mov	r3, r2
 801629e:	009b      	lsls	r3, r3, #2
 80162a0:	4413      	add	r3, r2
 80162a2:	009b      	lsls	r3, r3, #2
 80162a4:	440b      	add	r3, r1
 80162a6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80162aa:	881b      	ldrh	r3, [r3, #0]
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d104      	bne.n	80162ba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80162b0:	6839      	ldr	r1, [r7, #0]
 80162b2:	6878      	ldr	r0, [r7, #4]
 80162b4:	f000 fbc7 	bl	8016a46 <USBD_CtlError>
                  break;
 80162b8:	e041      	b.n	801633e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80162ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80162be:	2b00      	cmp	r3, #0
 80162c0:	da0b      	bge.n	80162da <USBD_StdEPReq+0x2b2>
 80162c2:	7bbb      	ldrb	r3, [r7, #14]
 80162c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80162c8:	4613      	mov	r3, r2
 80162ca:	009b      	lsls	r3, r3, #2
 80162cc:	4413      	add	r3, r2
 80162ce:	009b      	lsls	r3, r3, #2
 80162d0:	3310      	adds	r3, #16
 80162d2:	687a      	ldr	r2, [r7, #4]
 80162d4:	4413      	add	r3, r2
 80162d6:	3304      	adds	r3, #4
 80162d8:	e00b      	b.n	80162f2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80162da:	7bbb      	ldrb	r3, [r7, #14]
 80162dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80162e0:	4613      	mov	r3, r2
 80162e2:	009b      	lsls	r3, r3, #2
 80162e4:	4413      	add	r3, r2
 80162e6:	009b      	lsls	r3, r3, #2
 80162e8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80162ec:	687a      	ldr	r2, [r7, #4]
 80162ee:	4413      	add	r3, r2
 80162f0:	3304      	adds	r3, #4
 80162f2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80162f4:	7bbb      	ldrb	r3, [r7, #14]
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d002      	beq.n	8016300 <USBD_StdEPReq+0x2d8>
 80162fa:	7bbb      	ldrb	r3, [r7, #14]
 80162fc:	2b80      	cmp	r3, #128	; 0x80
 80162fe:	d103      	bne.n	8016308 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8016300:	68bb      	ldr	r3, [r7, #8]
 8016302:	2200      	movs	r2, #0
 8016304:	601a      	str	r2, [r3, #0]
 8016306:	e00e      	b.n	8016326 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016308:	7bbb      	ldrb	r3, [r7, #14]
 801630a:	4619      	mov	r1, r3
 801630c:	6878      	ldr	r0, [r7, #4]
 801630e:	f001 f92d 	bl	801756c <USBD_LL_IsStallEP>
 8016312:	4603      	mov	r3, r0
 8016314:	2b00      	cmp	r3, #0
 8016316:	d003      	beq.n	8016320 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8016318:	68bb      	ldr	r3, [r7, #8]
 801631a:	2201      	movs	r2, #1
 801631c:	601a      	str	r2, [r3, #0]
 801631e:	e002      	b.n	8016326 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8016320:	68bb      	ldr	r3, [r7, #8]
 8016322:	2200      	movs	r2, #0
 8016324:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016326:	68bb      	ldr	r3, [r7, #8]
 8016328:	2202      	movs	r2, #2
 801632a:	4619      	mov	r1, r3
 801632c:	6878      	ldr	r0, [r7, #4]
 801632e:	f000 fbfb 	bl	8016b28 <USBD_CtlSendData>
              break;
 8016332:	e004      	b.n	801633e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8016334:	6839      	ldr	r1, [r7, #0]
 8016336:	6878      	ldr	r0, [r7, #4]
 8016338:	f000 fb85 	bl	8016a46 <USBD_CtlError>
              break;
 801633c:	bf00      	nop
          }
          break;
 801633e:	e004      	b.n	801634a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8016340:	6839      	ldr	r1, [r7, #0]
 8016342:	6878      	ldr	r0, [r7, #4]
 8016344:	f000 fb7f 	bl	8016a46 <USBD_CtlError>
          break;
 8016348:	bf00      	nop
      }
      break;
 801634a:	e005      	b.n	8016358 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801634c:	6839      	ldr	r1, [r7, #0]
 801634e:	6878      	ldr	r0, [r7, #4]
 8016350:	f000 fb79 	bl	8016a46 <USBD_CtlError>
      break;
 8016354:	e000      	b.n	8016358 <USBD_StdEPReq+0x330>
      break;
 8016356:	bf00      	nop
  }

  return ret;
 8016358:	7bfb      	ldrb	r3, [r7, #15]
}
 801635a:	4618      	mov	r0, r3
 801635c:	3710      	adds	r7, #16
 801635e:	46bd      	mov	sp, r7
 8016360:	bd80      	pop	{r7, pc}
	...

08016364 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016364:	b580      	push	{r7, lr}
 8016366:	b084      	sub	sp, #16
 8016368:	af00      	add	r7, sp, #0
 801636a:	6078      	str	r0, [r7, #4]
 801636c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801636e:	2300      	movs	r3, #0
 8016370:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8016372:	2300      	movs	r3, #0
 8016374:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8016376:	2300      	movs	r3, #0
 8016378:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801637a:	683b      	ldr	r3, [r7, #0]
 801637c:	885b      	ldrh	r3, [r3, #2]
 801637e:	0a1b      	lsrs	r3, r3, #8
 8016380:	b29b      	uxth	r3, r3
 8016382:	3b01      	subs	r3, #1
 8016384:	2b0e      	cmp	r3, #14
 8016386:	f200 8152 	bhi.w	801662e <USBD_GetDescriptor+0x2ca>
 801638a:	a201      	add	r2, pc, #4	; (adr r2, 8016390 <USBD_GetDescriptor+0x2c>)
 801638c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016390:	08016401 	.word	0x08016401
 8016394:	08016419 	.word	0x08016419
 8016398:	08016459 	.word	0x08016459
 801639c:	0801662f 	.word	0x0801662f
 80163a0:	0801662f 	.word	0x0801662f
 80163a4:	080165cf 	.word	0x080165cf
 80163a8:	080165fb 	.word	0x080165fb
 80163ac:	0801662f 	.word	0x0801662f
 80163b0:	0801662f 	.word	0x0801662f
 80163b4:	0801662f 	.word	0x0801662f
 80163b8:	0801662f 	.word	0x0801662f
 80163bc:	0801662f 	.word	0x0801662f
 80163c0:	0801662f 	.word	0x0801662f
 80163c4:	0801662f 	.word	0x0801662f
 80163c8:	080163cd 	.word	0x080163cd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80163d2:	69db      	ldr	r3, [r3, #28]
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d00b      	beq.n	80163f0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80163de:	69db      	ldr	r3, [r3, #28]
 80163e0:	687a      	ldr	r2, [r7, #4]
 80163e2:	7c12      	ldrb	r2, [r2, #16]
 80163e4:	f107 0108 	add.w	r1, r7, #8
 80163e8:	4610      	mov	r0, r2
 80163ea:	4798      	blx	r3
 80163ec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80163ee:	e126      	b.n	801663e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80163f0:	6839      	ldr	r1, [r7, #0]
 80163f2:	6878      	ldr	r0, [r7, #4]
 80163f4:	f000 fb27 	bl	8016a46 <USBD_CtlError>
        err++;
 80163f8:	7afb      	ldrb	r3, [r7, #11]
 80163fa:	3301      	adds	r3, #1
 80163fc:	72fb      	strb	r3, [r7, #11]
      break;
 80163fe:	e11e      	b.n	801663e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016406:	681b      	ldr	r3, [r3, #0]
 8016408:	687a      	ldr	r2, [r7, #4]
 801640a:	7c12      	ldrb	r2, [r2, #16]
 801640c:	f107 0108 	add.w	r1, r7, #8
 8016410:	4610      	mov	r0, r2
 8016412:	4798      	blx	r3
 8016414:	60f8      	str	r0, [r7, #12]
      break;
 8016416:	e112      	b.n	801663e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	7c1b      	ldrb	r3, [r3, #16]
 801641c:	2b00      	cmp	r3, #0
 801641e:	d10d      	bne.n	801643c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016428:	f107 0208 	add.w	r2, r7, #8
 801642c:	4610      	mov	r0, r2
 801642e:	4798      	blx	r3
 8016430:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	3301      	adds	r3, #1
 8016436:	2202      	movs	r2, #2
 8016438:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801643a:	e100      	b.n	801663e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016444:	f107 0208 	add.w	r2, r7, #8
 8016448:	4610      	mov	r0, r2
 801644a:	4798      	blx	r3
 801644c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801644e:	68fb      	ldr	r3, [r7, #12]
 8016450:	3301      	adds	r3, #1
 8016452:	2202      	movs	r2, #2
 8016454:	701a      	strb	r2, [r3, #0]
      break;
 8016456:	e0f2      	b.n	801663e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8016458:	683b      	ldr	r3, [r7, #0]
 801645a:	885b      	ldrh	r3, [r3, #2]
 801645c:	b2db      	uxtb	r3, r3
 801645e:	2b05      	cmp	r3, #5
 8016460:	f200 80ac 	bhi.w	80165bc <USBD_GetDescriptor+0x258>
 8016464:	a201      	add	r2, pc, #4	; (adr r2, 801646c <USBD_GetDescriptor+0x108>)
 8016466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801646a:	bf00      	nop
 801646c:	08016485 	.word	0x08016485
 8016470:	080164b9 	.word	0x080164b9
 8016474:	080164ed 	.word	0x080164ed
 8016478:	08016521 	.word	0x08016521
 801647c:	08016555 	.word	0x08016555
 8016480:	08016589 	.word	0x08016589
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801648a:	685b      	ldr	r3, [r3, #4]
 801648c:	2b00      	cmp	r3, #0
 801648e:	d00b      	beq.n	80164a8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016496:	685b      	ldr	r3, [r3, #4]
 8016498:	687a      	ldr	r2, [r7, #4]
 801649a:	7c12      	ldrb	r2, [r2, #16]
 801649c:	f107 0108 	add.w	r1, r7, #8
 80164a0:	4610      	mov	r0, r2
 80164a2:	4798      	blx	r3
 80164a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80164a6:	e091      	b.n	80165cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80164a8:	6839      	ldr	r1, [r7, #0]
 80164aa:	6878      	ldr	r0, [r7, #4]
 80164ac:	f000 facb 	bl	8016a46 <USBD_CtlError>
            err++;
 80164b0:	7afb      	ldrb	r3, [r7, #11]
 80164b2:	3301      	adds	r3, #1
 80164b4:	72fb      	strb	r3, [r7, #11]
          break;
 80164b6:	e089      	b.n	80165cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80164be:	689b      	ldr	r3, [r3, #8]
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d00b      	beq.n	80164dc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80164ca:	689b      	ldr	r3, [r3, #8]
 80164cc:	687a      	ldr	r2, [r7, #4]
 80164ce:	7c12      	ldrb	r2, [r2, #16]
 80164d0:	f107 0108 	add.w	r1, r7, #8
 80164d4:	4610      	mov	r0, r2
 80164d6:	4798      	blx	r3
 80164d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80164da:	e077      	b.n	80165cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80164dc:	6839      	ldr	r1, [r7, #0]
 80164de:	6878      	ldr	r0, [r7, #4]
 80164e0:	f000 fab1 	bl	8016a46 <USBD_CtlError>
            err++;
 80164e4:	7afb      	ldrb	r3, [r7, #11]
 80164e6:	3301      	adds	r3, #1
 80164e8:	72fb      	strb	r3, [r7, #11]
          break;
 80164ea:	e06f      	b.n	80165cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80164f2:	68db      	ldr	r3, [r3, #12]
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d00b      	beq.n	8016510 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80164fe:	68db      	ldr	r3, [r3, #12]
 8016500:	687a      	ldr	r2, [r7, #4]
 8016502:	7c12      	ldrb	r2, [r2, #16]
 8016504:	f107 0108 	add.w	r1, r7, #8
 8016508:	4610      	mov	r0, r2
 801650a:	4798      	blx	r3
 801650c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801650e:	e05d      	b.n	80165cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016510:	6839      	ldr	r1, [r7, #0]
 8016512:	6878      	ldr	r0, [r7, #4]
 8016514:	f000 fa97 	bl	8016a46 <USBD_CtlError>
            err++;
 8016518:	7afb      	ldrb	r3, [r7, #11]
 801651a:	3301      	adds	r3, #1
 801651c:	72fb      	strb	r3, [r7, #11]
          break;
 801651e:	e055      	b.n	80165cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016526:	691b      	ldr	r3, [r3, #16]
 8016528:	2b00      	cmp	r3, #0
 801652a:	d00b      	beq.n	8016544 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016532:	691b      	ldr	r3, [r3, #16]
 8016534:	687a      	ldr	r2, [r7, #4]
 8016536:	7c12      	ldrb	r2, [r2, #16]
 8016538:	f107 0108 	add.w	r1, r7, #8
 801653c:	4610      	mov	r0, r2
 801653e:	4798      	blx	r3
 8016540:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016542:	e043      	b.n	80165cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016544:	6839      	ldr	r1, [r7, #0]
 8016546:	6878      	ldr	r0, [r7, #4]
 8016548:	f000 fa7d 	bl	8016a46 <USBD_CtlError>
            err++;
 801654c:	7afb      	ldrb	r3, [r7, #11]
 801654e:	3301      	adds	r3, #1
 8016550:	72fb      	strb	r3, [r7, #11]
          break;
 8016552:	e03b      	b.n	80165cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801655a:	695b      	ldr	r3, [r3, #20]
 801655c:	2b00      	cmp	r3, #0
 801655e:	d00b      	beq.n	8016578 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016566:	695b      	ldr	r3, [r3, #20]
 8016568:	687a      	ldr	r2, [r7, #4]
 801656a:	7c12      	ldrb	r2, [r2, #16]
 801656c:	f107 0108 	add.w	r1, r7, #8
 8016570:	4610      	mov	r0, r2
 8016572:	4798      	blx	r3
 8016574:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016576:	e029      	b.n	80165cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016578:	6839      	ldr	r1, [r7, #0]
 801657a:	6878      	ldr	r0, [r7, #4]
 801657c:	f000 fa63 	bl	8016a46 <USBD_CtlError>
            err++;
 8016580:	7afb      	ldrb	r3, [r7, #11]
 8016582:	3301      	adds	r3, #1
 8016584:	72fb      	strb	r3, [r7, #11]
          break;
 8016586:	e021      	b.n	80165cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801658e:	699b      	ldr	r3, [r3, #24]
 8016590:	2b00      	cmp	r3, #0
 8016592:	d00b      	beq.n	80165ac <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801659a:	699b      	ldr	r3, [r3, #24]
 801659c:	687a      	ldr	r2, [r7, #4]
 801659e:	7c12      	ldrb	r2, [r2, #16]
 80165a0:	f107 0108 	add.w	r1, r7, #8
 80165a4:	4610      	mov	r0, r2
 80165a6:	4798      	blx	r3
 80165a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80165aa:	e00f      	b.n	80165cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80165ac:	6839      	ldr	r1, [r7, #0]
 80165ae:	6878      	ldr	r0, [r7, #4]
 80165b0:	f000 fa49 	bl	8016a46 <USBD_CtlError>
            err++;
 80165b4:	7afb      	ldrb	r3, [r7, #11]
 80165b6:	3301      	adds	r3, #1
 80165b8:	72fb      	strb	r3, [r7, #11]
          break;
 80165ba:	e007      	b.n	80165cc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80165bc:	6839      	ldr	r1, [r7, #0]
 80165be:	6878      	ldr	r0, [r7, #4]
 80165c0:	f000 fa41 	bl	8016a46 <USBD_CtlError>
          err++;
 80165c4:	7afb      	ldrb	r3, [r7, #11]
 80165c6:	3301      	adds	r3, #1
 80165c8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80165ca:	bf00      	nop
      }
      break;
 80165cc:	e037      	b.n	801663e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	7c1b      	ldrb	r3, [r3, #16]
 80165d2:	2b00      	cmp	r3, #0
 80165d4:	d109      	bne.n	80165ea <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80165dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80165de:	f107 0208 	add.w	r2, r7, #8
 80165e2:	4610      	mov	r0, r2
 80165e4:	4798      	blx	r3
 80165e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80165e8:	e029      	b.n	801663e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80165ea:	6839      	ldr	r1, [r7, #0]
 80165ec:	6878      	ldr	r0, [r7, #4]
 80165ee:	f000 fa2a 	bl	8016a46 <USBD_CtlError>
        err++;
 80165f2:	7afb      	ldrb	r3, [r7, #11]
 80165f4:	3301      	adds	r3, #1
 80165f6:	72fb      	strb	r3, [r7, #11]
      break;
 80165f8:	e021      	b.n	801663e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	7c1b      	ldrb	r3, [r3, #16]
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d10d      	bne.n	801661e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801660a:	f107 0208 	add.w	r2, r7, #8
 801660e:	4610      	mov	r0, r2
 8016610:	4798      	blx	r3
 8016612:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8016614:	68fb      	ldr	r3, [r7, #12]
 8016616:	3301      	adds	r3, #1
 8016618:	2207      	movs	r2, #7
 801661a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801661c:	e00f      	b.n	801663e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801661e:	6839      	ldr	r1, [r7, #0]
 8016620:	6878      	ldr	r0, [r7, #4]
 8016622:	f000 fa10 	bl	8016a46 <USBD_CtlError>
        err++;
 8016626:	7afb      	ldrb	r3, [r7, #11]
 8016628:	3301      	adds	r3, #1
 801662a:	72fb      	strb	r3, [r7, #11]
      break;
 801662c:	e007      	b.n	801663e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801662e:	6839      	ldr	r1, [r7, #0]
 8016630:	6878      	ldr	r0, [r7, #4]
 8016632:	f000 fa08 	bl	8016a46 <USBD_CtlError>
      err++;
 8016636:	7afb      	ldrb	r3, [r7, #11]
 8016638:	3301      	adds	r3, #1
 801663a:	72fb      	strb	r3, [r7, #11]
      break;
 801663c:	bf00      	nop
  }

  if (err != 0U)
 801663e:	7afb      	ldrb	r3, [r7, #11]
 8016640:	2b00      	cmp	r3, #0
 8016642:	d11e      	bne.n	8016682 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8016644:	683b      	ldr	r3, [r7, #0]
 8016646:	88db      	ldrh	r3, [r3, #6]
 8016648:	2b00      	cmp	r3, #0
 801664a:	d016      	beq.n	801667a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 801664c:	893b      	ldrh	r3, [r7, #8]
 801664e:	2b00      	cmp	r3, #0
 8016650:	d00e      	beq.n	8016670 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8016652:	683b      	ldr	r3, [r7, #0]
 8016654:	88da      	ldrh	r2, [r3, #6]
 8016656:	893b      	ldrh	r3, [r7, #8]
 8016658:	4293      	cmp	r3, r2
 801665a:	bf28      	it	cs
 801665c:	4613      	movcs	r3, r2
 801665e:	b29b      	uxth	r3, r3
 8016660:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8016662:	893b      	ldrh	r3, [r7, #8]
 8016664:	461a      	mov	r2, r3
 8016666:	68f9      	ldr	r1, [r7, #12]
 8016668:	6878      	ldr	r0, [r7, #4]
 801666a:	f000 fa5d 	bl	8016b28 <USBD_CtlSendData>
 801666e:	e009      	b.n	8016684 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8016670:	6839      	ldr	r1, [r7, #0]
 8016672:	6878      	ldr	r0, [r7, #4]
 8016674:	f000 f9e7 	bl	8016a46 <USBD_CtlError>
 8016678:	e004      	b.n	8016684 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801667a:	6878      	ldr	r0, [r7, #4]
 801667c:	f000 faae 	bl	8016bdc <USBD_CtlSendStatus>
 8016680:	e000      	b.n	8016684 <USBD_GetDescriptor+0x320>
    return;
 8016682:	bf00      	nop
  }
}
 8016684:	3710      	adds	r7, #16
 8016686:	46bd      	mov	sp, r7
 8016688:	bd80      	pop	{r7, pc}
 801668a:	bf00      	nop

0801668c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801668c:	b580      	push	{r7, lr}
 801668e:	b084      	sub	sp, #16
 8016690:	af00      	add	r7, sp, #0
 8016692:	6078      	str	r0, [r7, #4]
 8016694:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8016696:	683b      	ldr	r3, [r7, #0]
 8016698:	889b      	ldrh	r3, [r3, #4]
 801669a:	2b00      	cmp	r3, #0
 801669c:	d131      	bne.n	8016702 <USBD_SetAddress+0x76>
 801669e:	683b      	ldr	r3, [r7, #0]
 80166a0:	88db      	ldrh	r3, [r3, #6]
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	d12d      	bne.n	8016702 <USBD_SetAddress+0x76>
 80166a6:	683b      	ldr	r3, [r7, #0]
 80166a8:	885b      	ldrh	r3, [r3, #2]
 80166aa:	2b7f      	cmp	r3, #127	; 0x7f
 80166ac:	d829      	bhi.n	8016702 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80166ae:	683b      	ldr	r3, [r7, #0]
 80166b0:	885b      	ldrh	r3, [r3, #2]
 80166b2:	b2db      	uxtb	r3, r3
 80166b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80166b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80166c0:	b2db      	uxtb	r3, r3
 80166c2:	2b03      	cmp	r3, #3
 80166c4:	d104      	bne.n	80166d0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80166c6:	6839      	ldr	r1, [r7, #0]
 80166c8:	6878      	ldr	r0, [r7, #4]
 80166ca:	f000 f9bc 	bl	8016a46 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80166ce:	e01d      	b.n	801670c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	7bfa      	ldrb	r2, [r7, #15]
 80166d4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80166d8:	7bfb      	ldrb	r3, [r7, #15]
 80166da:	4619      	mov	r1, r3
 80166dc:	6878      	ldr	r0, [r7, #4]
 80166de:	f000 ff71 	bl	80175c4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80166e2:	6878      	ldr	r0, [r7, #4]
 80166e4:	f000 fa7a 	bl	8016bdc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80166e8:	7bfb      	ldrb	r3, [r7, #15]
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d004      	beq.n	80166f8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	2202      	movs	r2, #2
 80166f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80166f6:	e009      	b.n	801670c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	2201      	movs	r2, #1
 80166fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016700:	e004      	b.n	801670c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8016702:	6839      	ldr	r1, [r7, #0]
 8016704:	6878      	ldr	r0, [r7, #4]
 8016706:	f000 f99e 	bl	8016a46 <USBD_CtlError>
  }
}
 801670a:	bf00      	nop
 801670c:	bf00      	nop
 801670e:	3710      	adds	r7, #16
 8016710:	46bd      	mov	sp, r7
 8016712:	bd80      	pop	{r7, pc}

08016714 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016714:	b580      	push	{r7, lr}
 8016716:	b084      	sub	sp, #16
 8016718:	af00      	add	r7, sp, #0
 801671a:	6078      	str	r0, [r7, #4]
 801671c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801671e:	2300      	movs	r3, #0
 8016720:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8016722:	683b      	ldr	r3, [r7, #0]
 8016724:	885b      	ldrh	r3, [r3, #2]
 8016726:	b2da      	uxtb	r2, r3
 8016728:	4b4e      	ldr	r3, [pc, #312]	; (8016864 <USBD_SetConfig+0x150>)
 801672a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801672c:	4b4d      	ldr	r3, [pc, #308]	; (8016864 <USBD_SetConfig+0x150>)
 801672e:	781b      	ldrb	r3, [r3, #0]
 8016730:	2b01      	cmp	r3, #1
 8016732:	d905      	bls.n	8016740 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8016734:	6839      	ldr	r1, [r7, #0]
 8016736:	6878      	ldr	r0, [r7, #4]
 8016738:	f000 f985 	bl	8016a46 <USBD_CtlError>
    return USBD_FAIL;
 801673c:	2303      	movs	r3, #3
 801673e:	e08c      	b.n	801685a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016746:	b2db      	uxtb	r3, r3
 8016748:	2b02      	cmp	r3, #2
 801674a:	d002      	beq.n	8016752 <USBD_SetConfig+0x3e>
 801674c:	2b03      	cmp	r3, #3
 801674e:	d029      	beq.n	80167a4 <USBD_SetConfig+0x90>
 8016750:	e075      	b.n	801683e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8016752:	4b44      	ldr	r3, [pc, #272]	; (8016864 <USBD_SetConfig+0x150>)
 8016754:	781b      	ldrb	r3, [r3, #0]
 8016756:	2b00      	cmp	r3, #0
 8016758:	d020      	beq.n	801679c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801675a:	4b42      	ldr	r3, [pc, #264]	; (8016864 <USBD_SetConfig+0x150>)
 801675c:	781b      	ldrb	r3, [r3, #0]
 801675e:	461a      	mov	r2, r3
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016764:	4b3f      	ldr	r3, [pc, #252]	; (8016864 <USBD_SetConfig+0x150>)
 8016766:	781b      	ldrb	r3, [r3, #0]
 8016768:	4619      	mov	r1, r3
 801676a:	6878      	ldr	r0, [r7, #4]
 801676c:	f7fe ffb7 	bl	80156de <USBD_SetClassConfig>
 8016770:	4603      	mov	r3, r0
 8016772:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8016774:	7bfb      	ldrb	r3, [r7, #15]
 8016776:	2b00      	cmp	r3, #0
 8016778:	d008      	beq.n	801678c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801677a:	6839      	ldr	r1, [r7, #0]
 801677c:	6878      	ldr	r0, [r7, #4]
 801677e:	f000 f962 	bl	8016a46 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	2202      	movs	r2, #2
 8016786:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801678a:	e065      	b.n	8016858 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801678c:	6878      	ldr	r0, [r7, #4]
 801678e:	f000 fa25 	bl	8016bdc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	2203      	movs	r2, #3
 8016796:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801679a:	e05d      	b.n	8016858 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801679c:	6878      	ldr	r0, [r7, #4]
 801679e:	f000 fa1d 	bl	8016bdc <USBD_CtlSendStatus>
      break;
 80167a2:	e059      	b.n	8016858 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80167a4:	4b2f      	ldr	r3, [pc, #188]	; (8016864 <USBD_SetConfig+0x150>)
 80167a6:	781b      	ldrb	r3, [r3, #0]
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	d112      	bne.n	80167d2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	2202      	movs	r2, #2
 80167b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80167b4:	4b2b      	ldr	r3, [pc, #172]	; (8016864 <USBD_SetConfig+0x150>)
 80167b6:	781b      	ldrb	r3, [r3, #0]
 80167b8:	461a      	mov	r2, r3
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80167be:	4b29      	ldr	r3, [pc, #164]	; (8016864 <USBD_SetConfig+0x150>)
 80167c0:	781b      	ldrb	r3, [r3, #0]
 80167c2:	4619      	mov	r1, r3
 80167c4:	6878      	ldr	r0, [r7, #4]
 80167c6:	f7fe ffa6 	bl	8015716 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80167ca:	6878      	ldr	r0, [r7, #4]
 80167cc:	f000 fa06 	bl	8016bdc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80167d0:	e042      	b.n	8016858 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80167d2:	4b24      	ldr	r3, [pc, #144]	; (8016864 <USBD_SetConfig+0x150>)
 80167d4:	781b      	ldrb	r3, [r3, #0]
 80167d6:	461a      	mov	r2, r3
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	685b      	ldr	r3, [r3, #4]
 80167dc:	429a      	cmp	r2, r3
 80167de:	d02a      	beq.n	8016836 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	685b      	ldr	r3, [r3, #4]
 80167e4:	b2db      	uxtb	r3, r3
 80167e6:	4619      	mov	r1, r3
 80167e8:	6878      	ldr	r0, [r7, #4]
 80167ea:	f7fe ff94 	bl	8015716 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80167ee:	4b1d      	ldr	r3, [pc, #116]	; (8016864 <USBD_SetConfig+0x150>)
 80167f0:	781b      	ldrb	r3, [r3, #0]
 80167f2:	461a      	mov	r2, r3
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80167f8:	4b1a      	ldr	r3, [pc, #104]	; (8016864 <USBD_SetConfig+0x150>)
 80167fa:	781b      	ldrb	r3, [r3, #0]
 80167fc:	4619      	mov	r1, r3
 80167fe:	6878      	ldr	r0, [r7, #4]
 8016800:	f7fe ff6d 	bl	80156de <USBD_SetClassConfig>
 8016804:	4603      	mov	r3, r0
 8016806:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8016808:	7bfb      	ldrb	r3, [r7, #15]
 801680a:	2b00      	cmp	r3, #0
 801680c:	d00f      	beq.n	801682e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801680e:	6839      	ldr	r1, [r7, #0]
 8016810:	6878      	ldr	r0, [r7, #4]
 8016812:	f000 f918 	bl	8016a46 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	685b      	ldr	r3, [r3, #4]
 801681a:	b2db      	uxtb	r3, r3
 801681c:	4619      	mov	r1, r3
 801681e:	6878      	ldr	r0, [r7, #4]
 8016820:	f7fe ff79 	bl	8015716 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	2202      	movs	r2, #2
 8016828:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801682c:	e014      	b.n	8016858 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801682e:	6878      	ldr	r0, [r7, #4]
 8016830:	f000 f9d4 	bl	8016bdc <USBD_CtlSendStatus>
      break;
 8016834:	e010      	b.n	8016858 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016836:	6878      	ldr	r0, [r7, #4]
 8016838:	f000 f9d0 	bl	8016bdc <USBD_CtlSendStatus>
      break;
 801683c:	e00c      	b.n	8016858 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801683e:	6839      	ldr	r1, [r7, #0]
 8016840:	6878      	ldr	r0, [r7, #4]
 8016842:	f000 f900 	bl	8016a46 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016846:	4b07      	ldr	r3, [pc, #28]	; (8016864 <USBD_SetConfig+0x150>)
 8016848:	781b      	ldrb	r3, [r3, #0]
 801684a:	4619      	mov	r1, r3
 801684c:	6878      	ldr	r0, [r7, #4]
 801684e:	f7fe ff62 	bl	8015716 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8016852:	2303      	movs	r3, #3
 8016854:	73fb      	strb	r3, [r7, #15]
      break;
 8016856:	bf00      	nop
  }

  return ret;
 8016858:	7bfb      	ldrb	r3, [r7, #15]
}
 801685a:	4618      	mov	r0, r3
 801685c:	3710      	adds	r7, #16
 801685e:	46bd      	mov	sp, r7
 8016860:	bd80      	pop	{r7, pc}
 8016862:	bf00      	nop
 8016864:	24001704 	.word	0x24001704

08016868 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016868:	b580      	push	{r7, lr}
 801686a:	b082      	sub	sp, #8
 801686c:	af00      	add	r7, sp, #0
 801686e:	6078      	str	r0, [r7, #4]
 8016870:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8016872:	683b      	ldr	r3, [r7, #0]
 8016874:	88db      	ldrh	r3, [r3, #6]
 8016876:	2b01      	cmp	r3, #1
 8016878:	d004      	beq.n	8016884 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801687a:	6839      	ldr	r1, [r7, #0]
 801687c:	6878      	ldr	r0, [r7, #4]
 801687e:	f000 f8e2 	bl	8016a46 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8016882:	e023      	b.n	80168cc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801688a:	b2db      	uxtb	r3, r3
 801688c:	2b02      	cmp	r3, #2
 801688e:	dc02      	bgt.n	8016896 <USBD_GetConfig+0x2e>
 8016890:	2b00      	cmp	r3, #0
 8016892:	dc03      	bgt.n	801689c <USBD_GetConfig+0x34>
 8016894:	e015      	b.n	80168c2 <USBD_GetConfig+0x5a>
 8016896:	2b03      	cmp	r3, #3
 8016898:	d00b      	beq.n	80168b2 <USBD_GetConfig+0x4a>
 801689a:	e012      	b.n	80168c2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	2200      	movs	r2, #0
 80168a0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	3308      	adds	r3, #8
 80168a6:	2201      	movs	r2, #1
 80168a8:	4619      	mov	r1, r3
 80168aa:	6878      	ldr	r0, [r7, #4]
 80168ac:	f000 f93c 	bl	8016b28 <USBD_CtlSendData>
        break;
 80168b0:	e00c      	b.n	80168cc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	3304      	adds	r3, #4
 80168b6:	2201      	movs	r2, #1
 80168b8:	4619      	mov	r1, r3
 80168ba:	6878      	ldr	r0, [r7, #4]
 80168bc:	f000 f934 	bl	8016b28 <USBD_CtlSendData>
        break;
 80168c0:	e004      	b.n	80168cc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80168c2:	6839      	ldr	r1, [r7, #0]
 80168c4:	6878      	ldr	r0, [r7, #4]
 80168c6:	f000 f8be 	bl	8016a46 <USBD_CtlError>
        break;
 80168ca:	bf00      	nop
}
 80168cc:	bf00      	nop
 80168ce:	3708      	adds	r7, #8
 80168d0:	46bd      	mov	sp, r7
 80168d2:	bd80      	pop	{r7, pc}

080168d4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80168d4:	b580      	push	{r7, lr}
 80168d6:	b082      	sub	sp, #8
 80168d8:	af00      	add	r7, sp, #0
 80168da:	6078      	str	r0, [r7, #4]
 80168dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80168e4:	b2db      	uxtb	r3, r3
 80168e6:	3b01      	subs	r3, #1
 80168e8:	2b02      	cmp	r3, #2
 80168ea:	d81e      	bhi.n	801692a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80168ec:	683b      	ldr	r3, [r7, #0]
 80168ee:	88db      	ldrh	r3, [r3, #6]
 80168f0:	2b02      	cmp	r3, #2
 80168f2:	d004      	beq.n	80168fe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80168f4:	6839      	ldr	r1, [r7, #0]
 80168f6:	6878      	ldr	r0, [r7, #4]
 80168f8:	f000 f8a5 	bl	8016a46 <USBD_CtlError>
        break;
 80168fc:	e01a      	b.n	8016934 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	2201      	movs	r2, #1
 8016902:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801690a:	2b00      	cmp	r3, #0
 801690c:	d005      	beq.n	801691a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	68db      	ldr	r3, [r3, #12]
 8016912:	f043 0202 	orr.w	r2, r3, #2
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	330c      	adds	r3, #12
 801691e:	2202      	movs	r2, #2
 8016920:	4619      	mov	r1, r3
 8016922:	6878      	ldr	r0, [r7, #4]
 8016924:	f000 f900 	bl	8016b28 <USBD_CtlSendData>
      break;
 8016928:	e004      	b.n	8016934 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801692a:	6839      	ldr	r1, [r7, #0]
 801692c:	6878      	ldr	r0, [r7, #4]
 801692e:	f000 f88a 	bl	8016a46 <USBD_CtlError>
      break;
 8016932:	bf00      	nop
  }
}
 8016934:	bf00      	nop
 8016936:	3708      	adds	r7, #8
 8016938:	46bd      	mov	sp, r7
 801693a:	bd80      	pop	{r7, pc}

0801693c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801693c:	b580      	push	{r7, lr}
 801693e:	b082      	sub	sp, #8
 8016940:	af00      	add	r7, sp, #0
 8016942:	6078      	str	r0, [r7, #4]
 8016944:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016946:	683b      	ldr	r3, [r7, #0]
 8016948:	885b      	ldrh	r3, [r3, #2]
 801694a:	2b01      	cmp	r3, #1
 801694c:	d107      	bne.n	801695e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	2201      	movs	r2, #1
 8016952:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8016956:	6878      	ldr	r0, [r7, #4]
 8016958:	f000 f940 	bl	8016bdc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801695c:	e013      	b.n	8016986 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801695e:	683b      	ldr	r3, [r7, #0]
 8016960:	885b      	ldrh	r3, [r3, #2]
 8016962:	2b02      	cmp	r3, #2
 8016964:	d10b      	bne.n	801697e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8016966:	683b      	ldr	r3, [r7, #0]
 8016968:	889b      	ldrh	r3, [r3, #4]
 801696a:	0a1b      	lsrs	r3, r3, #8
 801696c:	b29b      	uxth	r3, r3
 801696e:	b2da      	uxtb	r2, r3
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8016976:	6878      	ldr	r0, [r7, #4]
 8016978:	f000 f930 	bl	8016bdc <USBD_CtlSendStatus>
}
 801697c:	e003      	b.n	8016986 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801697e:	6839      	ldr	r1, [r7, #0]
 8016980:	6878      	ldr	r0, [r7, #4]
 8016982:	f000 f860 	bl	8016a46 <USBD_CtlError>
}
 8016986:	bf00      	nop
 8016988:	3708      	adds	r7, #8
 801698a:	46bd      	mov	sp, r7
 801698c:	bd80      	pop	{r7, pc}

0801698e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801698e:	b580      	push	{r7, lr}
 8016990:	b082      	sub	sp, #8
 8016992:	af00      	add	r7, sp, #0
 8016994:	6078      	str	r0, [r7, #4]
 8016996:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801699e:	b2db      	uxtb	r3, r3
 80169a0:	3b01      	subs	r3, #1
 80169a2:	2b02      	cmp	r3, #2
 80169a4:	d80b      	bhi.n	80169be <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80169a6:	683b      	ldr	r3, [r7, #0]
 80169a8:	885b      	ldrh	r3, [r3, #2]
 80169aa:	2b01      	cmp	r3, #1
 80169ac:	d10c      	bne.n	80169c8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	2200      	movs	r2, #0
 80169b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80169b6:	6878      	ldr	r0, [r7, #4]
 80169b8:	f000 f910 	bl	8016bdc <USBD_CtlSendStatus>
      }
      break;
 80169bc:	e004      	b.n	80169c8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80169be:	6839      	ldr	r1, [r7, #0]
 80169c0:	6878      	ldr	r0, [r7, #4]
 80169c2:	f000 f840 	bl	8016a46 <USBD_CtlError>
      break;
 80169c6:	e000      	b.n	80169ca <USBD_ClrFeature+0x3c>
      break;
 80169c8:	bf00      	nop
  }
}
 80169ca:	bf00      	nop
 80169cc:	3708      	adds	r7, #8
 80169ce:	46bd      	mov	sp, r7
 80169d0:	bd80      	pop	{r7, pc}

080169d2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80169d2:	b580      	push	{r7, lr}
 80169d4:	b084      	sub	sp, #16
 80169d6:	af00      	add	r7, sp, #0
 80169d8:	6078      	str	r0, [r7, #4]
 80169da:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80169dc:	683b      	ldr	r3, [r7, #0]
 80169de:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80169e0:	68fb      	ldr	r3, [r7, #12]
 80169e2:	781a      	ldrb	r2, [r3, #0]
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80169e8:	68fb      	ldr	r3, [r7, #12]
 80169ea:	3301      	adds	r3, #1
 80169ec:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	781a      	ldrb	r2, [r3, #0]
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80169f6:	68fb      	ldr	r3, [r7, #12]
 80169f8:	3301      	adds	r3, #1
 80169fa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80169fc:	68f8      	ldr	r0, [r7, #12]
 80169fe:	f7ff fa17 	bl	8015e30 <SWAPBYTE>
 8016a02:	4603      	mov	r3, r0
 8016a04:	461a      	mov	r2, r3
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8016a0a:	68fb      	ldr	r3, [r7, #12]
 8016a0c:	3301      	adds	r3, #1
 8016a0e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016a10:	68fb      	ldr	r3, [r7, #12]
 8016a12:	3301      	adds	r3, #1
 8016a14:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8016a16:	68f8      	ldr	r0, [r7, #12]
 8016a18:	f7ff fa0a 	bl	8015e30 <SWAPBYTE>
 8016a1c:	4603      	mov	r3, r0
 8016a1e:	461a      	mov	r2, r3
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8016a24:	68fb      	ldr	r3, [r7, #12]
 8016a26:	3301      	adds	r3, #1
 8016a28:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	3301      	adds	r3, #1
 8016a2e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8016a30:	68f8      	ldr	r0, [r7, #12]
 8016a32:	f7ff f9fd 	bl	8015e30 <SWAPBYTE>
 8016a36:	4603      	mov	r3, r0
 8016a38:	461a      	mov	r2, r3
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	80da      	strh	r2, [r3, #6]
}
 8016a3e:	bf00      	nop
 8016a40:	3710      	adds	r7, #16
 8016a42:	46bd      	mov	sp, r7
 8016a44:	bd80      	pop	{r7, pc}

08016a46 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016a46:	b580      	push	{r7, lr}
 8016a48:	b082      	sub	sp, #8
 8016a4a:	af00      	add	r7, sp, #0
 8016a4c:	6078      	str	r0, [r7, #4]
 8016a4e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016a50:	2180      	movs	r1, #128	; 0x80
 8016a52:	6878      	ldr	r0, [r7, #4]
 8016a54:	f000 fd4c 	bl	80174f0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016a58:	2100      	movs	r1, #0
 8016a5a:	6878      	ldr	r0, [r7, #4]
 8016a5c:	f000 fd48 	bl	80174f0 <USBD_LL_StallEP>
}
 8016a60:	bf00      	nop
 8016a62:	3708      	adds	r7, #8
 8016a64:	46bd      	mov	sp, r7
 8016a66:	bd80      	pop	{r7, pc}

08016a68 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016a68:	b580      	push	{r7, lr}
 8016a6a:	b086      	sub	sp, #24
 8016a6c:	af00      	add	r7, sp, #0
 8016a6e:	60f8      	str	r0, [r7, #12]
 8016a70:	60b9      	str	r1, [r7, #8]
 8016a72:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016a74:	2300      	movs	r3, #0
 8016a76:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016a78:	68fb      	ldr	r3, [r7, #12]
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d036      	beq.n	8016aec <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8016a7e:	68fb      	ldr	r3, [r7, #12]
 8016a80:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8016a82:	6938      	ldr	r0, [r7, #16]
 8016a84:	f000 f836 	bl	8016af4 <USBD_GetLen>
 8016a88:	4603      	mov	r3, r0
 8016a8a:	3301      	adds	r3, #1
 8016a8c:	b29b      	uxth	r3, r3
 8016a8e:	005b      	lsls	r3, r3, #1
 8016a90:	b29a      	uxth	r2, r3
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8016a96:	7dfb      	ldrb	r3, [r7, #23]
 8016a98:	68ba      	ldr	r2, [r7, #8]
 8016a9a:	4413      	add	r3, r2
 8016a9c:	687a      	ldr	r2, [r7, #4]
 8016a9e:	7812      	ldrb	r2, [r2, #0]
 8016aa0:	701a      	strb	r2, [r3, #0]
  idx++;
 8016aa2:	7dfb      	ldrb	r3, [r7, #23]
 8016aa4:	3301      	adds	r3, #1
 8016aa6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016aa8:	7dfb      	ldrb	r3, [r7, #23]
 8016aaa:	68ba      	ldr	r2, [r7, #8]
 8016aac:	4413      	add	r3, r2
 8016aae:	2203      	movs	r2, #3
 8016ab0:	701a      	strb	r2, [r3, #0]
  idx++;
 8016ab2:	7dfb      	ldrb	r3, [r7, #23]
 8016ab4:	3301      	adds	r3, #1
 8016ab6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016ab8:	e013      	b.n	8016ae2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8016aba:	7dfb      	ldrb	r3, [r7, #23]
 8016abc:	68ba      	ldr	r2, [r7, #8]
 8016abe:	4413      	add	r3, r2
 8016ac0:	693a      	ldr	r2, [r7, #16]
 8016ac2:	7812      	ldrb	r2, [r2, #0]
 8016ac4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016ac6:	693b      	ldr	r3, [r7, #16]
 8016ac8:	3301      	adds	r3, #1
 8016aca:	613b      	str	r3, [r7, #16]
    idx++;
 8016acc:	7dfb      	ldrb	r3, [r7, #23]
 8016ace:	3301      	adds	r3, #1
 8016ad0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8016ad2:	7dfb      	ldrb	r3, [r7, #23]
 8016ad4:	68ba      	ldr	r2, [r7, #8]
 8016ad6:	4413      	add	r3, r2
 8016ad8:	2200      	movs	r2, #0
 8016ada:	701a      	strb	r2, [r3, #0]
    idx++;
 8016adc:	7dfb      	ldrb	r3, [r7, #23]
 8016ade:	3301      	adds	r3, #1
 8016ae0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016ae2:	693b      	ldr	r3, [r7, #16]
 8016ae4:	781b      	ldrb	r3, [r3, #0]
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	d1e7      	bne.n	8016aba <USBD_GetString+0x52>
 8016aea:	e000      	b.n	8016aee <USBD_GetString+0x86>
    return;
 8016aec:	bf00      	nop
  }
}
 8016aee:	3718      	adds	r7, #24
 8016af0:	46bd      	mov	sp, r7
 8016af2:	bd80      	pop	{r7, pc}

08016af4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016af4:	b480      	push	{r7}
 8016af6:	b085      	sub	sp, #20
 8016af8:	af00      	add	r7, sp, #0
 8016afa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016afc:	2300      	movs	r3, #0
 8016afe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016b04:	e005      	b.n	8016b12 <USBD_GetLen+0x1e>
  {
    len++;
 8016b06:	7bfb      	ldrb	r3, [r7, #15]
 8016b08:	3301      	adds	r3, #1
 8016b0a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8016b0c:	68bb      	ldr	r3, [r7, #8]
 8016b0e:	3301      	adds	r3, #1
 8016b10:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016b12:	68bb      	ldr	r3, [r7, #8]
 8016b14:	781b      	ldrb	r3, [r3, #0]
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d1f5      	bne.n	8016b06 <USBD_GetLen+0x12>
  }

  return len;
 8016b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b1c:	4618      	mov	r0, r3
 8016b1e:	3714      	adds	r7, #20
 8016b20:	46bd      	mov	sp, r7
 8016b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b26:	4770      	bx	lr

08016b28 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8016b28:	b580      	push	{r7, lr}
 8016b2a:	b084      	sub	sp, #16
 8016b2c:	af00      	add	r7, sp, #0
 8016b2e:	60f8      	str	r0, [r7, #12]
 8016b30:	60b9      	str	r1, [r7, #8]
 8016b32:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016b34:	68fb      	ldr	r3, [r7, #12]
 8016b36:	2202      	movs	r2, #2
 8016b38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8016b3c:	68fb      	ldr	r3, [r7, #12]
 8016b3e:	687a      	ldr	r2, [r7, #4]
 8016b40:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8016b42:	68fb      	ldr	r3, [r7, #12]
 8016b44:	687a      	ldr	r2, [r7, #4]
 8016b46:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	68ba      	ldr	r2, [r7, #8]
 8016b4c:	2100      	movs	r1, #0
 8016b4e:	68f8      	ldr	r0, [r7, #12]
 8016b50:	f000 fd57 	bl	8017602 <USBD_LL_Transmit>

  return USBD_OK;
 8016b54:	2300      	movs	r3, #0
}
 8016b56:	4618      	mov	r0, r3
 8016b58:	3710      	adds	r7, #16
 8016b5a:	46bd      	mov	sp, r7
 8016b5c:	bd80      	pop	{r7, pc}

08016b5e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8016b5e:	b580      	push	{r7, lr}
 8016b60:	b084      	sub	sp, #16
 8016b62:	af00      	add	r7, sp, #0
 8016b64:	60f8      	str	r0, [r7, #12]
 8016b66:	60b9      	str	r1, [r7, #8]
 8016b68:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	68ba      	ldr	r2, [r7, #8]
 8016b6e:	2100      	movs	r1, #0
 8016b70:	68f8      	ldr	r0, [r7, #12]
 8016b72:	f000 fd46 	bl	8017602 <USBD_LL_Transmit>

  return USBD_OK;
 8016b76:	2300      	movs	r3, #0
}
 8016b78:	4618      	mov	r0, r3
 8016b7a:	3710      	adds	r7, #16
 8016b7c:	46bd      	mov	sp, r7
 8016b7e:	bd80      	pop	{r7, pc}

08016b80 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8016b80:	b580      	push	{r7, lr}
 8016b82:	b084      	sub	sp, #16
 8016b84:	af00      	add	r7, sp, #0
 8016b86:	60f8      	str	r0, [r7, #12]
 8016b88:	60b9      	str	r1, [r7, #8]
 8016b8a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8016b8c:	68fb      	ldr	r3, [r7, #12]
 8016b8e:	2203      	movs	r2, #3
 8016b90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8016b94:	68fb      	ldr	r3, [r7, #12]
 8016b96:	687a      	ldr	r2, [r7, #4]
 8016b98:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8016b9c:	68fb      	ldr	r3, [r7, #12]
 8016b9e:	687a      	ldr	r2, [r7, #4]
 8016ba0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	68ba      	ldr	r2, [r7, #8]
 8016ba8:	2100      	movs	r1, #0
 8016baa:	68f8      	ldr	r0, [r7, #12]
 8016bac:	f000 fd4a 	bl	8017644 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016bb0:	2300      	movs	r3, #0
}
 8016bb2:	4618      	mov	r0, r3
 8016bb4:	3710      	adds	r7, #16
 8016bb6:	46bd      	mov	sp, r7
 8016bb8:	bd80      	pop	{r7, pc}

08016bba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016bba:	b580      	push	{r7, lr}
 8016bbc:	b084      	sub	sp, #16
 8016bbe:	af00      	add	r7, sp, #0
 8016bc0:	60f8      	str	r0, [r7, #12]
 8016bc2:	60b9      	str	r1, [r7, #8]
 8016bc4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	68ba      	ldr	r2, [r7, #8]
 8016bca:	2100      	movs	r1, #0
 8016bcc:	68f8      	ldr	r0, [r7, #12]
 8016bce:	f000 fd39 	bl	8017644 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016bd2:	2300      	movs	r3, #0
}
 8016bd4:	4618      	mov	r0, r3
 8016bd6:	3710      	adds	r7, #16
 8016bd8:	46bd      	mov	sp, r7
 8016bda:	bd80      	pop	{r7, pc}

08016bdc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016bdc:	b580      	push	{r7, lr}
 8016bde:	b082      	sub	sp, #8
 8016be0:	af00      	add	r7, sp, #0
 8016be2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	2204      	movs	r2, #4
 8016be8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016bec:	2300      	movs	r3, #0
 8016bee:	2200      	movs	r2, #0
 8016bf0:	2100      	movs	r1, #0
 8016bf2:	6878      	ldr	r0, [r7, #4]
 8016bf4:	f000 fd05 	bl	8017602 <USBD_LL_Transmit>

  return USBD_OK;
 8016bf8:	2300      	movs	r3, #0
}
 8016bfa:	4618      	mov	r0, r3
 8016bfc:	3708      	adds	r7, #8
 8016bfe:	46bd      	mov	sp, r7
 8016c00:	bd80      	pop	{r7, pc}

08016c02 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016c02:	b580      	push	{r7, lr}
 8016c04:	b082      	sub	sp, #8
 8016c06:	af00      	add	r7, sp, #0
 8016c08:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	2205      	movs	r2, #5
 8016c0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016c12:	2300      	movs	r3, #0
 8016c14:	2200      	movs	r2, #0
 8016c16:	2100      	movs	r1, #0
 8016c18:	6878      	ldr	r0, [r7, #4]
 8016c1a:	f000 fd13 	bl	8017644 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016c1e:	2300      	movs	r3, #0
}
 8016c20:	4618      	mov	r0, r3
 8016c22:	3708      	adds	r7, #8
 8016c24:	46bd      	mov	sp, r7
 8016c26:	bd80      	pop	{r7, pc}

08016c28 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8016c28:	b480      	push	{r7}
 8016c2a:	b087      	sub	sp, #28
 8016c2c:	af00      	add	r7, sp, #0
 8016c2e:	60f8      	str	r0, [r7, #12]
 8016c30:	60b9      	str	r1, [r7, #8]
 8016c32:	4613      	mov	r3, r2
 8016c34:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8016c36:	2301      	movs	r3, #1
 8016c38:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8016c3a:	2300      	movs	r3, #0
 8016c3c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8016c3e:	4b1f      	ldr	r3, [pc, #124]	; (8016cbc <FATFS_LinkDriverEx+0x94>)
 8016c40:	7a5b      	ldrb	r3, [r3, #9]
 8016c42:	b2db      	uxtb	r3, r3
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d131      	bne.n	8016cac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8016c48:	4b1c      	ldr	r3, [pc, #112]	; (8016cbc <FATFS_LinkDriverEx+0x94>)
 8016c4a:	7a5b      	ldrb	r3, [r3, #9]
 8016c4c:	b2db      	uxtb	r3, r3
 8016c4e:	461a      	mov	r2, r3
 8016c50:	4b1a      	ldr	r3, [pc, #104]	; (8016cbc <FATFS_LinkDriverEx+0x94>)
 8016c52:	2100      	movs	r1, #0
 8016c54:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8016c56:	4b19      	ldr	r3, [pc, #100]	; (8016cbc <FATFS_LinkDriverEx+0x94>)
 8016c58:	7a5b      	ldrb	r3, [r3, #9]
 8016c5a:	b2db      	uxtb	r3, r3
 8016c5c:	4a17      	ldr	r2, [pc, #92]	; (8016cbc <FATFS_LinkDriverEx+0x94>)
 8016c5e:	009b      	lsls	r3, r3, #2
 8016c60:	4413      	add	r3, r2
 8016c62:	68fa      	ldr	r2, [r7, #12]
 8016c64:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8016c66:	4b15      	ldr	r3, [pc, #84]	; (8016cbc <FATFS_LinkDriverEx+0x94>)
 8016c68:	7a5b      	ldrb	r3, [r3, #9]
 8016c6a:	b2db      	uxtb	r3, r3
 8016c6c:	461a      	mov	r2, r3
 8016c6e:	4b13      	ldr	r3, [pc, #76]	; (8016cbc <FATFS_LinkDriverEx+0x94>)
 8016c70:	4413      	add	r3, r2
 8016c72:	79fa      	ldrb	r2, [r7, #7]
 8016c74:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8016c76:	4b11      	ldr	r3, [pc, #68]	; (8016cbc <FATFS_LinkDriverEx+0x94>)
 8016c78:	7a5b      	ldrb	r3, [r3, #9]
 8016c7a:	b2db      	uxtb	r3, r3
 8016c7c:	1c5a      	adds	r2, r3, #1
 8016c7e:	b2d1      	uxtb	r1, r2
 8016c80:	4a0e      	ldr	r2, [pc, #56]	; (8016cbc <FATFS_LinkDriverEx+0x94>)
 8016c82:	7251      	strb	r1, [r2, #9]
 8016c84:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8016c86:	7dbb      	ldrb	r3, [r7, #22]
 8016c88:	3330      	adds	r3, #48	; 0x30
 8016c8a:	b2da      	uxtb	r2, r3
 8016c8c:	68bb      	ldr	r3, [r7, #8]
 8016c8e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8016c90:	68bb      	ldr	r3, [r7, #8]
 8016c92:	3301      	adds	r3, #1
 8016c94:	223a      	movs	r2, #58	; 0x3a
 8016c96:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8016c98:	68bb      	ldr	r3, [r7, #8]
 8016c9a:	3302      	adds	r3, #2
 8016c9c:	222f      	movs	r2, #47	; 0x2f
 8016c9e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8016ca0:	68bb      	ldr	r3, [r7, #8]
 8016ca2:	3303      	adds	r3, #3
 8016ca4:	2200      	movs	r2, #0
 8016ca6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8016ca8:	2300      	movs	r3, #0
 8016caa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8016cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8016cae:	4618      	mov	r0, r3
 8016cb0:	371c      	adds	r7, #28
 8016cb2:	46bd      	mov	sp, r7
 8016cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cb8:	4770      	bx	lr
 8016cba:	bf00      	nop
 8016cbc:	24001708 	.word	0x24001708

08016cc0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016cc0:	b580      	push	{r7, lr}
 8016cc2:	b082      	sub	sp, #8
 8016cc4:	af00      	add	r7, sp, #0
 8016cc6:	6078      	str	r0, [r7, #4]
 8016cc8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8016cca:	2200      	movs	r2, #0
 8016ccc:	6839      	ldr	r1, [r7, #0]
 8016cce:	6878      	ldr	r0, [r7, #4]
 8016cd0:	f7ff ffaa 	bl	8016c28 <FATFS_LinkDriverEx>
 8016cd4:	4603      	mov	r3, r0
}
 8016cd6:	4618      	mov	r0, r3
 8016cd8:	3708      	adds	r7, #8
 8016cda:	46bd      	mov	sp, r7
 8016cdc:	bd80      	pop	{r7, pc}
	...

08016ce0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016ce0:	b580      	push	{r7, lr}
 8016ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8016ce4:	2201      	movs	r2, #1
 8016ce6:	4913      	ldr	r1, [pc, #76]	; (8016d34 <MX_USB_DEVICE_Init+0x54>)
 8016ce8:	4813      	ldr	r0, [pc, #76]	; (8016d38 <MX_USB_DEVICE_Init+0x58>)
 8016cea:	f7fe fc7b 	bl	80155e4 <USBD_Init>
 8016cee:	4603      	mov	r3, r0
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d001      	beq.n	8016cf8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016cf4:	f7eb ff12 	bl	8002b1c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8016cf8:	4910      	ldr	r1, [pc, #64]	; (8016d3c <MX_USB_DEVICE_Init+0x5c>)
 8016cfa:	480f      	ldr	r0, [pc, #60]	; (8016d38 <MX_USB_DEVICE_Init+0x58>)
 8016cfc:	f7fe fca2 	bl	8015644 <USBD_RegisterClass>
 8016d00:	4603      	mov	r3, r0
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d001      	beq.n	8016d0a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8016d06:	f7eb ff09 	bl	8002b1c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8016d0a:	490d      	ldr	r1, [pc, #52]	; (8016d40 <MX_USB_DEVICE_Init+0x60>)
 8016d0c:	480a      	ldr	r0, [pc, #40]	; (8016d38 <MX_USB_DEVICE_Init+0x58>)
 8016d0e:	f7fe fb99 	bl	8015444 <USBD_CDC_RegisterInterface>
 8016d12:	4603      	mov	r3, r0
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	d001      	beq.n	8016d1c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016d18:	f7eb ff00 	bl	8002b1c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8016d1c:	4806      	ldr	r0, [pc, #24]	; (8016d38 <MX_USB_DEVICE_Init+0x58>)
 8016d1e:	f7fe fcc7 	bl	80156b0 <USBD_Start>
 8016d22:	4603      	mov	r3, r0
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	d001      	beq.n	8016d2c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016d28:	f7eb fef8 	bl	8002b1c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8016d2c:	f7f2 ff30 	bl	8009b90 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016d30:	bf00      	nop
 8016d32:	bd80      	pop	{r7, pc}
 8016d34:	240000b0 	.word	0x240000b0
 8016d38:	24001714 	.word	0x24001714
 8016d3c:	2400001c 	.word	0x2400001c
 8016d40:	2400009c 	.word	0x2400009c

08016d44 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8016d44:	b580      	push	{r7, lr}
 8016d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8016d48:	2200      	movs	r2, #0
 8016d4a:	4905      	ldr	r1, [pc, #20]	; (8016d60 <CDC_Init_HS+0x1c>)
 8016d4c:	4805      	ldr	r0, [pc, #20]	; (8016d64 <CDC_Init_HS+0x20>)
 8016d4e:	f7fe fb93 	bl	8015478 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8016d52:	4905      	ldr	r1, [pc, #20]	; (8016d68 <CDC_Init_HS+0x24>)
 8016d54:	4803      	ldr	r0, [pc, #12]	; (8016d64 <CDC_Init_HS+0x20>)
 8016d56:	f7fe fbb1 	bl	80154bc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016d5a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8016d5c:	4618      	mov	r0, r3
 8016d5e:	bd80      	pop	{r7, pc}
 8016d60:	240021f0 	.word	0x240021f0
 8016d64:	24001714 	.word	0x24001714
 8016d68:	240019f0 	.word	0x240019f0

08016d6c <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8016d6c:	b480      	push	{r7}
 8016d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8016d70:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8016d72:	4618      	mov	r0, r3
 8016d74:	46bd      	mov	sp, r7
 8016d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d7a:	4770      	bx	lr

08016d7c <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016d7c:	b480      	push	{r7}
 8016d7e:	b083      	sub	sp, #12
 8016d80:	af00      	add	r7, sp, #0
 8016d82:	4603      	mov	r3, r0
 8016d84:	6039      	str	r1, [r7, #0]
 8016d86:	71fb      	strb	r3, [r7, #7]
 8016d88:	4613      	mov	r3, r2
 8016d8a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8016d8c:	79fb      	ldrb	r3, [r7, #7]
 8016d8e:	2b23      	cmp	r3, #35	; 0x23
 8016d90:	d84a      	bhi.n	8016e28 <CDC_Control_HS+0xac>
 8016d92:	a201      	add	r2, pc, #4	; (adr r2, 8016d98 <CDC_Control_HS+0x1c>)
 8016d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d98:	08016e29 	.word	0x08016e29
 8016d9c:	08016e29 	.word	0x08016e29
 8016da0:	08016e29 	.word	0x08016e29
 8016da4:	08016e29 	.word	0x08016e29
 8016da8:	08016e29 	.word	0x08016e29
 8016dac:	08016e29 	.word	0x08016e29
 8016db0:	08016e29 	.word	0x08016e29
 8016db4:	08016e29 	.word	0x08016e29
 8016db8:	08016e29 	.word	0x08016e29
 8016dbc:	08016e29 	.word	0x08016e29
 8016dc0:	08016e29 	.word	0x08016e29
 8016dc4:	08016e29 	.word	0x08016e29
 8016dc8:	08016e29 	.word	0x08016e29
 8016dcc:	08016e29 	.word	0x08016e29
 8016dd0:	08016e29 	.word	0x08016e29
 8016dd4:	08016e29 	.word	0x08016e29
 8016dd8:	08016e29 	.word	0x08016e29
 8016ddc:	08016e29 	.word	0x08016e29
 8016de0:	08016e29 	.word	0x08016e29
 8016de4:	08016e29 	.word	0x08016e29
 8016de8:	08016e29 	.word	0x08016e29
 8016dec:	08016e29 	.word	0x08016e29
 8016df0:	08016e29 	.word	0x08016e29
 8016df4:	08016e29 	.word	0x08016e29
 8016df8:	08016e29 	.word	0x08016e29
 8016dfc:	08016e29 	.word	0x08016e29
 8016e00:	08016e29 	.word	0x08016e29
 8016e04:	08016e29 	.word	0x08016e29
 8016e08:	08016e29 	.word	0x08016e29
 8016e0c:	08016e29 	.word	0x08016e29
 8016e10:	08016e29 	.word	0x08016e29
 8016e14:	08016e29 	.word	0x08016e29
 8016e18:	08016e29 	.word	0x08016e29
 8016e1c:	08016e29 	.word	0x08016e29
 8016e20:	08016e29 	.word	0x08016e29
 8016e24:	08016e29 	.word	0x08016e29
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016e28:	bf00      	nop
  }

  return (USBD_OK);
 8016e2a:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8016e2c:	4618      	mov	r0, r3
 8016e2e:	370c      	adds	r7, #12
 8016e30:	46bd      	mov	sp, r7
 8016e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e36:	4770      	bx	lr

08016e38 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8016e38:	b580      	push	{r7, lr}
 8016e3a:	b084      	sub	sp, #16
 8016e3c:	af00      	add	r7, sp, #0
 8016e3e:	6078      	str	r0, [r7, #4]
 8016e40:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8016e42:	6879      	ldr	r1, [r7, #4]
 8016e44:	480e      	ldr	r0, [pc, #56]	; (8016e80 <CDC_Receive_HS+0x48>)
 8016e46:	f7fe fb39 	bl	80154bc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8016e4a:	480d      	ldr	r0, [pc, #52]	; (8016e80 <CDC_Receive_HS+0x48>)
 8016e4c:	f7fe fb94 	bl	8015578 <USBD_CDC_ReceivePacket>

  extern uint8_t usbDataBuffer[usbBufferLen];
  extern uint32_t usbBytesReady;

  uint32_t cpyLen = *Len;
 8016e50:	683b      	ldr	r3, [r7, #0]
 8016e52:	681b      	ldr	r3, [r3, #0]
 8016e54:	60fb      	str	r3, [r7, #12]
  /*char debug[250];
  sprintf(debug, "cpyLen: %d\n", cpyLen);
  CDC_Transmit_HS(debug, strlen(debug));*/

  memcpy(usbDataBuffer + usbBytesReady, Buf, cpyLen);
 8016e56:	4b0b      	ldr	r3, [pc, #44]	; (8016e84 <CDC_Receive_HS+0x4c>)
 8016e58:	681b      	ldr	r3, [r3, #0]
 8016e5a:	4a0b      	ldr	r2, [pc, #44]	; (8016e88 <CDC_Receive_HS+0x50>)
 8016e5c:	4413      	add	r3, r2
 8016e5e:	68fa      	ldr	r2, [r7, #12]
 8016e60:	6879      	ldr	r1, [r7, #4]
 8016e62:	4618      	mov	r0, r3
 8016e64:	f000 fcf0 	bl	8017848 <memcpy>
  usbBytesReady += cpyLen;
 8016e68:	4b06      	ldr	r3, [pc, #24]	; (8016e84 <CDC_Receive_HS+0x4c>)
 8016e6a:	681a      	ldr	r2, [r3, #0]
 8016e6c:	68fb      	ldr	r3, [r7, #12]
 8016e6e:	4413      	add	r3, r2
 8016e70:	4a04      	ldr	r2, [pc, #16]	; (8016e84 <CDC_Receive_HS+0x4c>)
 8016e72:	6013      	str	r3, [r2, #0]
  
  return (USBD_OK);
 8016e74:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8016e76:	4618      	mov	r0, r3
 8016e78:	3710      	adds	r7, #16
 8016e7a:	46bd      	mov	sp, r7
 8016e7c:	bd80      	pop	{r7, pc}
 8016e7e:	bf00      	nop
 8016e80:	24001714 	.word	0x24001714
 8016e84:	24000270 	.word	0x24000270
 8016e88:	24000170 	.word	0x24000170

08016e8c <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8016e8c:	b580      	push	{r7, lr}
 8016e8e:	b084      	sub	sp, #16
 8016e90:	af00      	add	r7, sp, #0
 8016e92:	6078      	str	r0, [r7, #4]
 8016e94:	460b      	mov	r3, r1
 8016e96:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8016e98:	2300      	movs	r3, #0
 8016e9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8016e9c:	4b0d      	ldr	r3, [pc, #52]	; (8016ed4 <CDC_Transmit_HS+0x48>)
 8016e9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016ea2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016ea4:	68bb      	ldr	r3, [r7, #8]
 8016ea6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d001      	beq.n	8016eb2 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8016eae:	2301      	movs	r3, #1
 8016eb0:	e00b      	b.n	8016eca <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8016eb2:	887b      	ldrh	r3, [r7, #2]
 8016eb4:	461a      	mov	r2, r3
 8016eb6:	6879      	ldr	r1, [r7, #4]
 8016eb8:	4806      	ldr	r0, [pc, #24]	; (8016ed4 <CDC_Transmit_HS+0x48>)
 8016eba:	f7fe fadd 	bl	8015478 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8016ebe:	4805      	ldr	r0, [pc, #20]	; (8016ed4 <CDC_Transmit_HS+0x48>)
 8016ec0:	f7fe fb1a 	bl	80154f8 <USBD_CDC_TransmitPacket>
 8016ec4:	4603      	mov	r3, r0
 8016ec6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8016ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8016eca:	4618      	mov	r0, r3
 8016ecc:	3710      	adds	r7, #16
 8016ece:	46bd      	mov	sp, r7
 8016ed0:	bd80      	pop	{r7, pc}
 8016ed2:	bf00      	nop
 8016ed4:	24001714 	.word	0x24001714

08016ed8 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016ed8:	b480      	push	{r7}
 8016eda:	b087      	sub	sp, #28
 8016edc:	af00      	add	r7, sp, #0
 8016ede:	60f8      	str	r0, [r7, #12]
 8016ee0:	60b9      	str	r1, [r7, #8]
 8016ee2:	4613      	mov	r3, r2
 8016ee4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8016ee6:	2300      	movs	r3, #0
 8016ee8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8016eea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016eee:	4618      	mov	r0, r3
 8016ef0:	371c      	adds	r7, #28
 8016ef2:	46bd      	mov	sp, r7
 8016ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ef8:	4770      	bx	lr
	...

08016efc <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016efc:	b480      	push	{r7}
 8016efe:	b083      	sub	sp, #12
 8016f00:	af00      	add	r7, sp, #0
 8016f02:	4603      	mov	r3, r0
 8016f04:	6039      	str	r1, [r7, #0]
 8016f06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8016f08:	683b      	ldr	r3, [r7, #0]
 8016f0a:	2212      	movs	r2, #18
 8016f0c:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8016f0e:	4b03      	ldr	r3, [pc, #12]	; (8016f1c <USBD_HS_DeviceDescriptor+0x20>)
}
 8016f10:	4618      	mov	r0, r3
 8016f12:	370c      	adds	r7, #12
 8016f14:	46bd      	mov	sp, r7
 8016f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f1a:	4770      	bx	lr
 8016f1c:	240000d0 	.word	0x240000d0

08016f20 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016f20:	b480      	push	{r7}
 8016f22:	b083      	sub	sp, #12
 8016f24:	af00      	add	r7, sp, #0
 8016f26:	4603      	mov	r3, r0
 8016f28:	6039      	str	r1, [r7, #0]
 8016f2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016f2c:	683b      	ldr	r3, [r7, #0]
 8016f2e:	2204      	movs	r2, #4
 8016f30:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016f32:	4b03      	ldr	r3, [pc, #12]	; (8016f40 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8016f34:	4618      	mov	r0, r3
 8016f36:	370c      	adds	r7, #12
 8016f38:	46bd      	mov	sp, r7
 8016f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f3e:	4770      	bx	lr
 8016f40:	240000e4 	.word	0x240000e4

08016f44 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016f44:	b580      	push	{r7, lr}
 8016f46:	b082      	sub	sp, #8
 8016f48:	af00      	add	r7, sp, #0
 8016f4a:	4603      	mov	r3, r0
 8016f4c:	6039      	str	r1, [r7, #0]
 8016f4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016f50:	79fb      	ldrb	r3, [r7, #7]
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d105      	bne.n	8016f62 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8016f56:	683a      	ldr	r2, [r7, #0]
 8016f58:	4907      	ldr	r1, [pc, #28]	; (8016f78 <USBD_HS_ProductStrDescriptor+0x34>)
 8016f5a:	4808      	ldr	r0, [pc, #32]	; (8016f7c <USBD_HS_ProductStrDescriptor+0x38>)
 8016f5c:	f7ff fd84 	bl	8016a68 <USBD_GetString>
 8016f60:	e004      	b.n	8016f6c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8016f62:	683a      	ldr	r2, [r7, #0]
 8016f64:	4904      	ldr	r1, [pc, #16]	; (8016f78 <USBD_HS_ProductStrDescriptor+0x34>)
 8016f66:	4805      	ldr	r0, [pc, #20]	; (8016f7c <USBD_HS_ProductStrDescriptor+0x38>)
 8016f68:	f7ff fd7e 	bl	8016a68 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016f6c:	4b02      	ldr	r3, [pc, #8]	; (8016f78 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8016f6e:	4618      	mov	r0, r3
 8016f70:	3708      	adds	r7, #8
 8016f72:	46bd      	mov	sp, r7
 8016f74:	bd80      	pop	{r7, pc}
 8016f76:	bf00      	nop
 8016f78:	240029f0 	.word	0x240029f0
 8016f7c:	08018bd4 	.word	0x08018bd4

08016f80 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016f80:	b580      	push	{r7, lr}
 8016f82:	b082      	sub	sp, #8
 8016f84:	af00      	add	r7, sp, #0
 8016f86:	4603      	mov	r3, r0
 8016f88:	6039      	str	r1, [r7, #0]
 8016f8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016f8c:	683a      	ldr	r2, [r7, #0]
 8016f8e:	4904      	ldr	r1, [pc, #16]	; (8016fa0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8016f90:	4804      	ldr	r0, [pc, #16]	; (8016fa4 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8016f92:	f7ff fd69 	bl	8016a68 <USBD_GetString>
  return USBD_StrDesc;
 8016f96:	4b02      	ldr	r3, [pc, #8]	; (8016fa0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8016f98:	4618      	mov	r0, r3
 8016f9a:	3708      	adds	r7, #8
 8016f9c:	46bd      	mov	sp, r7
 8016f9e:	bd80      	pop	{r7, pc}
 8016fa0:	240029f0 	.word	0x240029f0
 8016fa4:	08018bf0 	.word	0x08018bf0

08016fa8 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016fa8:	b580      	push	{r7, lr}
 8016faa:	b082      	sub	sp, #8
 8016fac:	af00      	add	r7, sp, #0
 8016fae:	4603      	mov	r3, r0
 8016fb0:	6039      	str	r1, [r7, #0]
 8016fb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016fb4:	683b      	ldr	r3, [r7, #0]
 8016fb6:	221a      	movs	r2, #26
 8016fb8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016fba:	f000 f843 	bl	8017044 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8016fbe:	4b02      	ldr	r3, [pc, #8]	; (8016fc8 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8016fc0:	4618      	mov	r0, r3
 8016fc2:	3708      	adds	r7, #8
 8016fc4:	46bd      	mov	sp, r7
 8016fc6:	bd80      	pop	{r7, pc}
 8016fc8:	240000e8 	.word	0x240000e8

08016fcc <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016fcc:	b580      	push	{r7, lr}
 8016fce:	b082      	sub	sp, #8
 8016fd0:	af00      	add	r7, sp, #0
 8016fd2:	4603      	mov	r3, r0
 8016fd4:	6039      	str	r1, [r7, #0]
 8016fd6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016fd8:	79fb      	ldrb	r3, [r7, #7]
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d105      	bne.n	8016fea <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8016fde:	683a      	ldr	r2, [r7, #0]
 8016fe0:	4907      	ldr	r1, [pc, #28]	; (8017000 <USBD_HS_ConfigStrDescriptor+0x34>)
 8016fe2:	4808      	ldr	r0, [pc, #32]	; (8017004 <USBD_HS_ConfigStrDescriptor+0x38>)
 8016fe4:	f7ff fd40 	bl	8016a68 <USBD_GetString>
 8016fe8:	e004      	b.n	8016ff4 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8016fea:	683a      	ldr	r2, [r7, #0]
 8016fec:	4904      	ldr	r1, [pc, #16]	; (8017000 <USBD_HS_ConfigStrDescriptor+0x34>)
 8016fee:	4805      	ldr	r0, [pc, #20]	; (8017004 <USBD_HS_ConfigStrDescriptor+0x38>)
 8016ff0:	f7ff fd3a 	bl	8016a68 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016ff4:	4b02      	ldr	r3, [pc, #8]	; (8017000 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8016ff6:	4618      	mov	r0, r3
 8016ff8:	3708      	adds	r7, #8
 8016ffa:	46bd      	mov	sp, r7
 8016ffc:	bd80      	pop	{r7, pc}
 8016ffe:	bf00      	nop
 8017000:	240029f0 	.word	0x240029f0
 8017004:	08018bf4 	.word	0x08018bf4

08017008 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017008:	b580      	push	{r7, lr}
 801700a:	b082      	sub	sp, #8
 801700c:	af00      	add	r7, sp, #0
 801700e:	4603      	mov	r3, r0
 8017010:	6039      	str	r1, [r7, #0]
 8017012:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017014:	79fb      	ldrb	r3, [r7, #7]
 8017016:	2b00      	cmp	r3, #0
 8017018:	d105      	bne.n	8017026 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801701a:	683a      	ldr	r2, [r7, #0]
 801701c:	4907      	ldr	r1, [pc, #28]	; (801703c <USBD_HS_InterfaceStrDescriptor+0x34>)
 801701e:	4808      	ldr	r0, [pc, #32]	; (8017040 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8017020:	f7ff fd22 	bl	8016a68 <USBD_GetString>
 8017024:	e004      	b.n	8017030 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8017026:	683a      	ldr	r2, [r7, #0]
 8017028:	4904      	ldr	r1, [pc, #16]	; (801703c <USBD_HS_InterfaceStrDescriptor+0x34>)
 801702a:	4805      	ldr	r0, [pc, #20]	; (8017040 <USBD_HS_InterfaceStrDescriptor+0x38>)
 801702c:	f7ff fd1c 	bl	8016a68 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017030:	4b02      	ldr	r3, [pc, #8]	; (801703c <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8017032:	4618      	mov	r0, r3
 8017034:	3708      	adds	r7, #8
 8017036:	46bd      	mov	sp, r7
 8017038:	bd80      	pop	{r7, pc}
 801703a:	bf00      	nop
 801703c:	240029f0 	.word	0x240029f0
 8017040:	08018c00 	.word	0x08018c00

08017044 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017044:	b580      	push	{r7, lr}
 8017046:	b084      	sub	sp, #16
 8017048:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801704a:	4b0f      	ldr	r3, [pc, #60]	; (8017088 <Get_SerialNum+0x44>)
 801704c:	681b      	ldr	r3, [r3, #0]
 801704e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017050:	4b0e      	ldr	r3, [pc, #56]	; (801708c <Get_SerialNum+0x48>)
 8017052:	681b      	ldr	r3, [r3, #0]
 8017054:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017056:	4b0e      	ldr	r3, [pc, #56]	; (8017090 <Get_SerialNum+0x4c>)
 8017058:	681b      	ldr	r3, [r3, #0]
 801705a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801705c:	68fa      	ldr	r2, [r7, #12]
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	4413      	add	r3, r2
 8017062:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017064:	68fb      	ldr	r3, [r7, #12]
 8017066:	2b00      	cmp	r3, #0
 8017068:	d009      	beq.n	801707e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801706a:	2208      	movs	r2, #8
 801706c:	4909      	ldr	r1, [pc, #36]	; (8017094 <Get_SerialNum+0x50>)
 801706e:	68f8      	ldr	r0, [r7, #12]
 8017070:	f000 f814 	bl	801709c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017074:	2204      	movs	r2, #4
 8017076:	4908      	ldr	r1, [pc, #32]	; (8017098 <Get_SerialNum+0x54>)
 8017078:	68b8      	ldr	r0, [r7, #8]
 801707a:	f000 f80f 	bl	801709c <IntToUnicode>
  }
}
 801707e:	bf00      	nop
 8017080:	3710      	adds	r7, #16
 8017082:	46bd      	mov	sp, r7
 8017084:	bd80      	pop	{r7, pc}
 8017086:	bf00      	nop
 8017088:	1ff1e800 	.word	0x1ff1e800
 801708c:	1ff1e804 	.word	0x1ff1e804
 8017090:	1ff1e808 	.word	0x1ff1e808
 8017094:	240000ea 	.word	0x240000ea
 8017098:	240000fa 	.word	0x240000fa

0801709c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801709c:	b480      	push	{r7}
 801709e:	b087      	sub	sp, #28
 80170a0:	af00      	add	r7, sp, #0
 80170a2:	60f8      	str	r0, [r7, #12]
 80170a4:	60b9      	str	r1, [r7, #8]
 80170a6:	4613      	mov	r3, r2
 80170a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80170aa:	2300      	movs	r3, #0
 80170ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80170ae:	2300      	movs	r3, #0
 80170b0:	75fb      	strb	r3, [r7, #23]
 80170b2:	e027      	b.n	8017104 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80170b4:	68fb      	ldr	r3, [r7, #12]
 80170b6:	0f1b      	lsrs	r3, r3, #28
 80170b8:	2b09      	cmp	r3, #9
 80170ba:	d80b      	bhi.n	80170d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80170bc:	68fb      	ldr	r3, [r7, #12]
 80170be:	0f1b      	lsrs	r3, r3, #28
 80170c0:	b2da      	uxtb	r2, r3
 80170c2:	7dfb      	ldrb	r3, [r7, #23]
 80170c4:	005b      	lsls	r3, r3, #1
 80170c6:	4619      	mov	r1, r3
 80170c8:	68bb      	ldr	r3, [r7, #8]
 80170ca:	440b      	add	r3, r1
 80170cc:	3230      	adds	r2, #48	; 0x30
 80170ce:	b2d2      	uxtb	r2, r2
 80170d0:	701a      	strb	r2, [r3, #0]
 80170d2:	e00a      	b.n	80170ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80170d4:	68fb      	ldr	r3, [r7, #12]
 80170d6:	0f1b      	lsrs	r3, r3, #28
 80170d8:	b2da      	uxtb	r2, r3
 80170da:	7dfb      	ldrb	r3, [r7, #23]
 80170dc:	005b      	lsls	r3, r3, #1
 80170de:	4619      	mov	r1, r3
 80170e0:	68bb      	ldr	r3, [r7, #8]
 80170e2:	440b      	add	r3, r1
 80170e4:	3237      	adds	r2, #55	; 0x37
 80170e6:	b2d2      	uxtb	r2, r2
 80170e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80170ea:	68fb      	ldr	r3, [r7, #12]
 80170ec:	011b      	lsls	r3, r3, #4
 80170ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80170f0:	7dfb      	ldrb	r3, [r7, #23]
 80170f2:	005b      	lsls	r3, r3, #1
 80170f4:	3301      	adds	r3, #1
 80170f6:	68ba      	ldr	r2, [r7, #8]
 80170f8:	4413      	add	r3, r2
 80170fa:	2200      	movs	r2, #0
 80170fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80170fe:	7dfb      	ldrb	r3, [r7, #23]
 8017100:	3301      	adds	r3, #1
 8017102:	75fb      	strb	r3, [r7, #23]
 8017104:	7dfa      	ldrb	r2, [r7, #23]
 8017106:	79fb      	ldrb	r3, [r7, #7]
 8017108:	429a      	cmp	r2, r3
 801710a:	d3d3      	bcc.n	80170b4 <IntToUnicode+0x18>
  }
}
 801710c:	bf00      	nop
 801710e:	bf00      	nop
 8017110:	371c      	adds	r7, #28
 8017112:	46bd      	mov	sp, r7
 8017114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017118:	4770      	bx	lr
	...

0801711c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801711c:	b580      	push	{r7, lr}
 801711e:	b0b2      	sub	sp, #200	; 0xc8
 8017120:	af00      	add	r7, sp, #0
 8017122:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8017124:	f107 0310 	add.w	r3, r7, #16
 8017128:	22b8      	movs	r2, #184	; 0xb8
 801712a:	2100      	movs	r1, #0
 801712c:	4618      	mov	r0, r3
 801712e:	f000 fb4f 	bl	80177d0 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	681b      	ldr	r3, [r3, #0]
 8017136:	4a1a      	ldr	r2, [pc, #104]	; (80171a0 <HAL_PCD_MspInit+0x84>)
 8017138:	4293      	cmp	r3, r2
 801713a:	d12c      	bne.n	8017196 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801713c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8017140:	f04f 0300 	mov.w	r3, #0
 8017144:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8017148:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 801714c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8017150:	f107 0310 	add.w	r3, r7, #16
 8017154:	4618      	mov	r0, r3
 8017156:	f7f3 fcfb 	bl	800ab50 <HAL_RCCEx_PeriphCLKConfig>
 801715a:	4603      	mov	r3, r0
 801715c:	2b00      	cmp	r3, #0
 801715e:	d001      	beq.n	8017164 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8017160:	f7eb fcdc 	bl	8002b1c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8017164:	f7f2 fd14 	bl	8009b90 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8017168:	4b0e      	ldr	r3, [pc, #56]	; (80171a4 <HAL_PCD_MspInit+0x88>)
 801716a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801716e:	4a0d      	ldr	r2, [pc, #52]	; (80171a4 <HAL_PCD_MspInit+0x88>)
 8017170:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8017174:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8017178:	4b0a      	ldr	r3, [pc, #40]	; (80171a4 <HAL_PCD_MspInit+0x88>)
 801717a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801717e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017182:	60fb      	str	r3, [r7, #12]
 8017184:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8017186:	2200      	movs	r2, #0
 8017188:	2100      	movs	r1, #0
 801718a:	204d      	movs	r0, #77	; 0x4d
 801718c:	f7ee fa85 	bl	800569a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8017190:	204d      	movs	r0, #77	; 0x4d
 8017192:	f7ee fa9c 	bl	80056ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8017196:	bf00      	nop
 8017198:	37c8      	adds	r7, #200	; 0xc8
 801719a:	46bd      	mov	sp, r7
 801719c:	bd80      	pop	{r7, pc}
 801719e:	bf00      	nop
 80171a0:	40040000 	.word	0x40040000
 80171a4:	58024400 	.word	0x58024400

080171a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80171a8:	b580      	push	{r7, lr}
 80171aa:	b082      	sub	sp, #8
 80171ac:	af00      	add	r7, sp, #0
 80171ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80171bc:	4619      	mov	r1, r3
 80171be:	4610      	mov	r0, r2
 80171c0:	f7fe fac3 	bl	801574a <USBD_LL_SetupStage>
}
 80171c4:	bf00      	nop
 80171c6:	3708      	adds	r7, #8
 80171c8:	46bd      	mov	sp, r7
 80171ca:	bd80      	pop	{r7, pc}

080171cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80171cc:	b580      	push	{r7, lr}
 80171ce:	b082      	sub	sp, #8
 80171d0:	af00      	add	r7, sp, #0
 80171d2:	6078      	str	r0, [r7, #4]
 80171d4:	460b      	mov	r3, r1
 80171d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80171de:	78fa      	ldrb	r2, [r7, #3]
 80171e0:	6879      	ldr	r1, [r7, #4]
 80171e2:	4613      	mov	r3, r2
 80171e4:	00db      	lsls	r3, r3, #3
 80171e6:	4413      	add	r3, r2
 80171e8:	009b      	lsls	r3, r3, #2
 80171ea:	440b      	add	r3, r1
 80171ec:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80171f0:	681a      	ldr	r2, [r3, #0]
 80171f2:	78fb      	ldrb	r3, [r7, #3]
 80171f4:	4619      	mov	r1, r3
 80171f6:	f7fe fafd 	bl	80157f4 <USBD_LL_DataOutStage>
}
 80171fa:	bf00      	nop
 80171fc:	3708      	adds	r7, #8
 80171fe:	46bd      	mov	sp, r7
 8017200:	bd80      	pop	{r7, pc}

08017202 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017202:	b580      	push	{r7, lr}
 8017204:	b082      	sub	sp, #8
 8017206:	af00      	add	r7, sp, #0
 8017208:	6078      	str	r0, [r7, #4]
 801720a:	460b      	mov	r3, r1
 801720c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8017214:	78fa      	ldrb	r2, [r7, #3]
 8017216:	6879      	ldr	r1, [r7, #4]
 8017218:	4613      	mov	r3, r2
 801721a:	00db      	lsls	r3, r3, #3
 801721c:	4413      	add	r3, r2
 801721e:	009b      	lsls	r3, r3, #2
 8017220:	440b      	add	r3, r1
 8017222:	3348      	adds	r3, #72	; 0x48
 8017224:	681a      	ldr	r2, [r3, #0]
 8017226:	78fb      	ldrb	r3, [r7, #3]
 8017228:	4619      	mov	r1, r3
 801722a:	f7fe fb96 	bl	801595a <USBD_LL_DataInStage>
}
 801722e:	bf00      	nop
 8017230:	3708      	adds	r7, #8
 8017232:	46bd      	mov	sp, r7
 8017234:	bd80      	pop	{r7, pc}

08017236 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017236:	b580      	push	{r7, lr}
 8017238:	b082      	sub	sp, #8
 801723a:	af00      	add	r7, sp, #0
 801723c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017244:	4618      	mov	r0, r3
 8017246:	f7fe fcd0 	bl	8015bea <USBD_LL_SOF>
}
 801724a:	bf00      	nop
 801724c:	3708      	adds	r7, #8
 801724e:	46bd      	mov	sp, r7
 8017250:	bd80      	pop	{r7, pc}

08017252 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017252:	b580      	push	{r7, lr}
 8017254:	b084      	sub	sp, #16
 8017256:	af00      	add	r7, sp, #0
 8017258:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801725a:	2301      	movs	r3, #1
 801725c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	691b      	ldr	r3, [r3, #16]
 8017262:	2b00      	cmp	r3, #0
 8017264:	d102      	bne.n	801726c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8017266:	2300      	movs	r3, #0
 8017268:	73fb      	strb	r3, [r7, #15]
 801726a:	e008      	b.n	801727e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	691b      	ldr	r3, [r3, #16]
 8017270:	2b02      	cmp	r3, #2
 8017272:	d102      	bne.n	801727a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8017274:	2301      	movs	r3, #1
 8017276:	73fb      	strb	r3, [r7, #15]
 8017278:	e001      	b.n	801727e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801727a:	f7eb fc4f 	bl	8002b1c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017284:	7bfa      	ldrb	r2, [r7, #15]
 8017286:	4611      	mov	r1, r2
 8017288:	4618      	mov	r0, r3
 801728a:	f7fe fc6a 	bl	8015b62 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017294:	4618      	mov	r0, r3
 8017296:	f7fe fc12 	bl	8015abe <USBD_LL_Reset>
}
 801729a:	bf00      	nop
 801729c:	3710      	adds	r7, #16
 801729e:	46bd      	mov	sp, r7
 80172a0:	bd80      	pop	{r7, pc}
	...

080172a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80172a4:	b580      	push	{r7, lr}
 80172a6:	b082      	sub	sp, #8
 80172a8:	af00      	add	r7, sp, #0
 80172aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80172b2:	4618      	mov	r0, r3
 80172b4:	f7fe fc65 	bl	8015b82 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	681b      	ldr	r3, [r3, #0]
 80172bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80172c0:	681b      	ldr	r3, [r3, #0]
 80172c2:	687a      	ldr	r2, [r7, #4]
 80172c4:	6812      	ldr	r2, [r2, #0]
 80172c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80172ca:	f043 0301 	orr.w	r3, r3, #1
 80172ce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	6a1b      	ldr	r3, [r3, #32]
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	d005      	beq.n	80172e4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80172d8:	4b04      	ldr	r3, [pc, #16]	; (80172ec <HAL_PCD_SuspendCallback+0x48>)
 80172da:	691b      	ldr	r3, [r3, #16]
 80172dc:	4a03      	ldr	r2, [pc, #12]	; (80172ec <HAL_PCD_SuspendCallback+0x48>)
 80172de:	f043 0306 	orr.w	r3, r3, #6
 80172e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80172e4:	bf00      	nop
 80172e6:	3708      	adds	r7, #8
 80172e8:	46bd      	mov	sp, r7
 80172ea:	bd80      	pop	{r7, pc}
 80172ec:	e000ed00 	.word	0xe000ed00

080172f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80172f0:	b580      	push	{r7, lr}
 80172f2:	b082      	sub	sp, #8
 80172f4:	af00      	add	r7, sp, #0
 80172f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80172fe:	4618      	mov	r0, r3
 8017300:	f7fe fc5b 	bl	8015bba <USBD_LL_Resume>
}
 8017304:	bf00      	nop
 8017306:	3708      	adds	r7, #8
 8017308:	46bd      	mov	sp, r7
 801730a:	bd80      	pop	{r7, pc}

0801730c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801730c:	b580      	push	{r7, lr}
 801730e:	b082      	sub	sp, #8
 8017310:	af00      	add	r7, sp, #0
 8017312:	6078      	str	r0, [r7, #4]
 8017314:	460b      	mov	r3, r1
 8017316:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801731e:	78fa      	ldrb	r2, [r7, #3]
 8017320:	4611      	mov	r1, r2
 8017322:	4618      	mov	r0, r3
 8017324:	f7fe fcb3 	bl	8015c8e <USBD_LL_IsoOUTIncomplete>
}
 8017328:	bf00      	nop
 801732a:	3708      	adds	r7, #8
 801732c:	46bd      	mov	sp, r7
 801732e:	bd80      	pop	{r7, pc}

08017330 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017330:	b580      	push	{r7, lr}
 8017332:	b082      	sub	sp, #8
 8017334:	af00      	add	r7, sp, #0
 8017336:	6078      	str	r0, [r7, #4]
 8017338:	460b      	mov	r3, r1
 801733a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017342:	78fa      	ldrb	r2, [r7, #3]
 8017344:	4611      	mov	r1, r2
 8017346:	4618      	mov	r0, r3
 8017348:	f7fe fc6f 	bl	8015c2a <USBD_LL_IsoINIncomplete>
}
 801734c:	bf00      	nop
 801734e:	3708      	adds	r7, #8
 8017350:	46bd      	mov	sp, r7
 8017352:	bd80      	pop	{r7, pc}

08017354 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017354:	b580      	push	{r7, lr}
 8017356:	b082      	sub	sp, #8
 8017358:	af00      	add	r7, sp, #0
 801735a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017362:	4618      	mov	r0, r3
 8017364:	f7fe fcc5 	bl	8015cf2 <USBD_LL_DevConnected>
}
 8017368:	bf00      	nop
 801736a:	3708      	adds	r7, #8
 801736c:	46bd      	mov	sp, r7
 801736e:	bd80      	pop	{r7, pc}

08017370 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017370:	b580      	push	{r7, lr}
 8017372:	b082      	sub	sp, #8
 8017374:	af00      	add	r7, sp, #0
 8017376:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801737e:	4618      	mov	r0, r3
 8017380:	f7fe fcc2 	bl	8015d08 <USBD_LL_DevDisconnected>
}
 8017384:	bf00      	nop
 8017386:	3708      	adds	r7, #8
 8017388:	46bd      	mov	sp, r7
 801738a:	bd80      	pop	{r7, pc}

0801738c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801738c:	b580      	push	{r7, lr}
 801738e:	b082      	sub	sp, #8
 8017390:	af00      	add	r7, sp, #0
 8017392:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	781b      	ldrb	r3, [r3, #0]
 8017398:	2b01      	cmp	r3, #1
 801739a:	d140      	bne.n	801741e <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 801739c:	4a22      	ldr	r2, [pc, #136]	; (8017428 <USBD_LL_Init+0x9c>)
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	4a20      	ldr	r2, [pc, #128]	; (8017428 <USBD_LL_Init+0x9c>)
 80173a8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80173ac:	4b1e      	ldr	r3, [pc, #120]	; (8017428 <USBD_LL_Init+0x9c>)
 80173ae:	4a1f      	ldr	r2, [pc, #124]	; (801742c <USBD_LL_Init+0xa0>)
 80173b0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80173b2:	4b1d      	ldr	r3, [pc, #116]	; (8017428 <USBD_LL_Init+0x9c>)
 80173b4:	2209      	movs	r2, #9
 80173b6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 80173b8:	4b1b      	ldr	r3, [pc, #108]	; (8017428 <USBD_LL_Init+0x9c>)
 80173ba:	2202      	movs	r2, #2
 80173bc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80173be:	4b1a      	ldr	r3, [pc, #104]	; (8017428 <USBD_LL_Init+0x9c>)
 80173c0:	2200      	movs	r2, #0
 80173c2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80173c4:	4b18      	ldr	r3, [pc, #96]	; (8017428 <USBD_LL_Init+0x9c>)
 80173c6:	2202      	movs	r2, #2
 80173c8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80173ca:	4b17      	ldr	r3, [pc, #92]	; (8017428 <USBD_LL_Init+0x9c>)
 80173cc:	2200      	movs	r2, #0
 80173ce:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80173d0:	4b15      	ldr	r3, [pc, #84]	; (8017428 <USBD_LL_Init+0x9c>)
 80173d2:	2200      	movs	r2, #0
 80173d4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80173d6:	4b14      	ldr	r3, [pc, #80]	; (8017428 <USBD_LL_Init+0x9c>)
 80173d8:	2200      	movs	r2, #0
 80173da:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80173dc:	4b12      	ldr	r3, [pc, #72]	; (8017428 <USBD_LL_Init+0x9c>)
 80173de:	2200      	movs	r2, #0
 80173e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80173e2:	4b11      	ldr	r3, [pc, #68]	; (8017428 <USBD_LL_Init+0x9c>)
 80173e4:	2200      	movs	r2, #0
 80173e6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80173e8:	4b0f      	ldr	r3, [pc, #60]	; (8017428 <USBD_LL_Init+0x9c>)
 80173ea:	2200      	movs	r2, #0
 80173ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80173ee:	480e      	ldr	r0, [pc, #56]	; (8017428 <USBD_LL_Init+0x9c>)
 80173f0:	f7f1 f8db 	bl	80085aa <HAL_PCD_Init>
 80173f4:	4603      	mov	r3, r0
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	d001      	beq.n	80173fe <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80173fa:	f7eb fb8f 	bl	8002b1c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80173fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8017402:	4809      	ldr	r0, [pc, #36]	; (8017428 <USBD_LL_Init+0x9c>)
 8017404:	f7f2 fb49 	bl	8009a9a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8017408:	2280      	movs	r2, #128	; 0x80
 801740a:	2100      	movs	r1, #0
 801740c:	4806      	ldr	r0, [pc, #24]	; (8017428 <USBD_LL_Init+0x9c>)
 801740e:	f7f2 fafd 	bl	8009a0c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8017412:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8017416:	2101      	movs	r1, #1
 8017418:	4803      	ldr	r0, [pc, #12]	; (8017428 <USBD_LL_Init+0x9c>)
 801741a:	f7f2 faf7 	bl	8009a0c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 801741e:	2300      	movs	r3, #0
}
 8017420:	4618      	mov	r0, r3
 8017422:	3708      	adds	r7, #8
 8017424:	46bd      	mov	sp, r7
 8017426:	bd80      	pop	{r7, pc}
 8017428:	24002bf0 	.word	0x24002bf0
 801742c:	40040000 	.word	0x40040000

08017430 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017430:	b580      	push	{r7, lr}
 8017432:	b084      	sub	sp, #16
 8017434:	af00      	add	r7, sp, #0
 8017436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017438:	2300      	movs	r3, #0
 801743a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801743c:	2300      	movs	r3, #0
 801743e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017446:	4618      	mov	r0, r3
 8017448:	f7f1 f9d3 	bl	80087f2 <HAL_PCD_Start>
 801744c:	4603      	mov	r3, r0
 801744e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017450:	7bfb      	ldrb	r3, [r7, #15]
 8017452:	4618      	mov	r0, r3
 8017454:	f000 f942 	bl	80176dc <USBD_Get_USB_Status>
 8017458:	4603      	mov	r3, r0
 801745a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801745c:	7bbb      	ldrb	r3, [r7, #14]
}
 801745e:	4618      	mov	r0, r3
 8017460:	3710      	adds	r7, #16
 8017462:	46bd      	mov	sp, r7
 8017464:	bd80      	pop	{r7, pc}

08017466 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017466:	b580      	push	{r7, lr}
 8017468:	b084      	sub	sp, #16
 801746a:	af00      	add	r7, sp, #0
 801746c:	6078      	str	r0, [r7, #4]
 801746e:	4608      	mov	r0, r1
 8017470:	4611      	mov	r1, r2
 8017472:	461a      	mov	r2, r3
 8017474:	4603      	mov	r3, r0
 8017476:	70fb      	strb	r3, [r7, #3]
 8017478:	460b      	mov	r3, r1
 801747a:	70bb      	strb	r3, [r7, #2]
 801747c:	4613      	mov	r3, r2
 801747e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017480:	2300      	movs	r3, #0
 8017482:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017484:	2300      	movs	r3, #0
 8017486:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801748e:	78bb      	ldrb	r3, [r7, #2]
 8017490:	883a      	ldrh	r2, [r7, #0]
 8017492:	78f9      	ldrb	r1, [r7, #3]
 8017494:	f7f1 fed3 	bl	800923e <HAL_PCD_EP_Open>
 8017498:	4603      	mov	r3, r0
 801749a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801749c:	7bfb      	ldrb	r3, [r7, #15]
 801749e:	4618      	mov	r0, r3
 80174a0:	f000 f91c 	bl	80176dc <USBD_Get_USB_Status>
 80174a4:	4603      	mov	r3, r0
 80174a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80174a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80174aa:	4618      	mov	r0, r3
 80174ac:	3710      	adds	r7, #16
 80174ae:	46bd      	mov	sp, r7
 80174b0:	bd80      	pop	{r7, pc}

080174b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80174b2:	b580      	push	{r7, lr}
 80174b4:	b084      	sub	sp, #16
 80174b6:	af00      	add	r7, sp, #0
 80174b8:	6078      	str	r0, [r7, #4]
 80174ba:	460b      	mov	r3, r1
 80174bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80174be:	2300      	movs	r3, #0
 80174c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80174c2:	2300      	movs	r3, #0
 80174c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80174cc:	78fa      	ldrb	r2, [r7, #3]
 80174ce:	4611      	mov	r1, r2
 80174d0:	4618      	mov	r0, r3
 80174d2:	f7f1 ff1c 	bl	800930e <HAL_PCD_EP_Close>
 80174d6:	4603      	mov	r3, r0
 80174d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80174da:	7bfb      	ldrb	r3, [r7, #15]
 80174dc:	4618      	mov	r0, r3
 80174de:	f000 f8fd 	bl	80176dc <USBD_Get_USB_Status>
 80174e2:	4603      	mov	r3, r0
 80174e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80174e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80174e8:	4618      	mov	r0, r3
 80174ea:	3710      	adds	r7, #16
 80174ec:	46bd      	mov	sp, r7
 80174ee:	bd80      	pop	{r7, pc}

080174f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80174f0:	b580      	push	{r7, lr}
 80174f2:	b084      	sub	sp, #16
 80174f4:	af00      	add	r7, sp, #0
 80174f6:	6078      	str	r0, [r7, #4]
 80174f8:	460b      	mov	r3, r1
 80174fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80174fc:	2300      	movs	r3, #0
 80174fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017500:	2300      	movs	r3, #0
 8017502:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801750a:	78fa      	ldrb	r2, [r7, #3]
 801750c:	4611      	mov	r1, r2
 801750e:	4618      	mov	r0, r3
 8017510:	f7f1 ffd6 	bl	80094c0 <HAL_PCD_EP_SetStall>
 8017514:	4603      	mov	r3, r0
 8017516:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017518:	7bfb      	ldrb	r3, [r7, #15]
 801751a:	4618      	mov	r0, r3
 801751c:	f000 f8de 	bl	80176dc <USBD_Get_USB_Status>
 8017520:	4603      	mov	r3, r0
 8017522:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017524:	7bbb      	ldrb	r3, [r7, #14]
}
 8017526:	4618      	mov	r0, r3
 8017528:	3710      	adds	r7, #16
 801752a:	46bd      	mov	sp, r7
 801752c:	bd80      	pop	{r7, pc}

0801752e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801752e:	b580      	push	{r7, lr}
 8017530:	b084      	sub	sp, #16
 8017532:	af00      	add	r7, sp, #0
 8017534:	6078      	str	r0, [r7, #4]
 8017536:	460b      	mov	r3, r1
 8017538:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801753a:	2300      	movs	r3, #0
 801753c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801753e:	2300      	movs	r3, #0
 8017540:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017548:	78fa      	ldrb	r2, [r7, #3]
 801754a:	4611      	mov	r1, r2
 801754c:	4618      	mov	r0, r3
 801754e:	f7f2 f81b 	bl	8009588 <HAL_PCD_EP_ClrStall>
 8017552:	4603      	mov	r3, r0
 8017554:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017556:	7bfb      	ldrb	r3, [r7, #15]
 8017558:	4618      	mov	r0, r3
 801755a:	f000 f8bf 	bl	80176dc <USBD_Get_USB_Status>
 801755e:	4603      	mov	r3, r0
 8017560:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017562:	7bbb      	ldrb	r3, [r7, #14]
}
 8017564:	4618      	mov	r0, r3
 8017566:	3710      	adds	r7, #16
 8017568:	46bd      	mov	sp, r7
 801756a:	bd80      	pop	{r7, pc}

0801756c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801756c:	b480      	push	{r7}
 801756e:	b085      	sub	sp, #20
 8017570:	af00      	add	r7, sp, #0
 8017572:	6078      	str	r0, [r7, #4]
 8017574:	460b      	mov	r3, r1
 8017576:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801757e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017580:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017584:	2b00      	cmp	r3, #0
 8017586:	da0b      	bge.n	80175a0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017588:	78fb      	ldrb	r3, [r7, #3]
 801758a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801758e:	68f9      	ldr	r1, [r7, #12]
 8017590:	4613      	mov	r3, r2
 8017592:	00db      	lsls	r3, r3, #3
 8017594:	4413      	add	r3, r2
 8017596:	009b      	lsls	r3, r3, #2
 8017598:	440b      	add	r3, r1
 801759a:	333e      	adds	r3, #62	; 0x3e
 801759c:	781b      	ldrb	r3, [r3, #0]
 801759e:	e00b      	b.n	80175b8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80175a0:	78fb      	ldrb	r3, [r7, #3]
 80175a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80175a6:	68f9      	ldr	r1, [r7, #12]
 80175a8:	4613      	mov	r3, r2
 80175aa:	00db      	lsls	r3, r3, #3
 80175ac:	4413      	add	r3, r2
 80175ae:	009b      	lsls	r3, r3, #2
 80175b0:	440b      	add	r3, r1
 80175b2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80175b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80175b8:	4618      	mov	r0, r3
 80175ba:	3714      	adds	r7, #20
 80175bc:	46bd      	mov	sp, r7
 80175be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175c2:	4770      	bx	lr

080175c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80175c4:	b580      	push	{r7, lr}
 80175c6:	b084      	sub	sp, #16
 80175c8:	af00      	add	r7, sp, #0
 80175ca:	6078      	str	r0, [r7, #4]
 80175cc:	460b      	mov	r3, r1
 80175ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80175d0:	2300      	movs	r3, #0
 80175d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80175d4:	2300      	movs	r3, #0
 80175d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80175de:	78fa      	ldrb	r2, [r7, #3]
 80175e0:	4611      	mov	r1, r2
 80175e2:	4618      	mov	r0, r3
 80175e4:	f7f1 fe06 	bl	80091f4 <HAL_PCD_SetAddress>
 80175e8:	4603      	mov	r3, r0
 80175ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80175ec:	7bfb      	ldrb	r3, [r7, #15]
 80175ee:	4618      	mov	r0, r3
 80175f0:	f000 f874 	bl	80176dc <USBD_Get_USB_Status>
 80175f4:	4603      	mov	r3, r0
 80175f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80175f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80175fa:	4618      	mov	r0, r3
 80175fc:	3710      	adds	r7, #16
 80175fe:	46bd      	mov	sp, r7
 8017600:	bd80      	pop	{r7, pc}

08017602 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017602:	b580      	push	{r7, lr}
 8017604:	b086      	sub	sp, #24
 8017606:	af00      	add	r7, sp, #0
 8017608:	60f8      	str	r0, [r7, #12]
 801760a:	607a      	str	r2, [r7, #4]
 801760c:	603b      	str	r3, [r7, #0]
 801760e:	460b      	mov	r3, r1
 8017610:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017612:	2300      	movs	r3, #0
 8017614:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017616:	2300      	movs	r3, #0
 8017618:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801761a:	68fb      	ldr	r3, [r7, #12]
 801761c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017620:	7af9      	ldrb	r1, [r7, #11]
 8017622:	683b      	ldr	r3, [r7, #0]
 8017624:	687a      	ldr	r2, [r7, #4]
 8017626:	f7f1 ff10 	bl	800944a <HAL_PCD_EP_Transmit>
 801762a:	4603      	mov	r3, r0
 801762c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801762e:	7dfb      	ldrb	r3, [r7, #23]
 8017630:	4618      	mov	r0, r3
 8017632:	f000 f853 	bl	80176dc <USBD_Get_USB_Status>
 8017636:	4603      	mov	r3, r0
 8017638:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801763a:	7dbb      	ldrb	r3, [r7, #22]
}
 801763c:	4618      	mov	r0, r3
 801763e:	3718      	adds	r7, #24
 8017640:	46bd      	mov	sp, r7
 8017642:	bd80      	pop	{r7, pc}

08017644 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017644:	b580      	push	{r7, lr}
 8017646:	b086      	sub	sp, #24
 8017648:	af00      	add	r7, sp, #0
 801764a:	60f8      	str	r0, [r7, #12]
 801764c:	607a      	str	r2, [r7, #4]
 801764e:	603b      	str	r3, [r7, #0]
 8017650:	460b      	mov	r3, r1
 8017652:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017654:	2300      	movs	r3, #0
 8017656:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017658:	2300      	movs	r3, #0
 801765a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801765c:	68fb      	ldr	r3, [r7, #12]
 801765e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017662:	7af9      	ldrb	r1, [r7, #11]
 8017664:	683b      	ldr	r3, [r7, #0]
 8017666:	687a      	ldr	r2, [r7, #4]
 8017668:	f7f1 fe9b 	bl	80093a2 <HAL_PCD_EP_Receive>
 801766c:	4603      	mov	r3, r0
 801766e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017670:	7dfb      	ldrb	r3, [r7, #23]
 8017672:	4618      	mov	r0, r3
 8017674:	f000 f832 	bl	80176dc <USBD_Get_USB_Status>
 8017678:	4603      	mov	r3, r0
 801767a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801767c:	7dbb      	ldrb	r3, [r7, #22]
}
 801767e:	4618      	mov	r0, r3
 8017680:	3718      	adds	r7, #24
 8017682:	46bd      	mov	sp, r7
 8017684:	bd80      	pop	{r7, pc}

08017686 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017686:	b580      	push	{r7, lr}
 8017688:	b082      	sub	sp, #8
 801768a:	af00      	add	r7, sp, #0
 801768c:	6078      	str	r0, [r7, #4]
 801768e:	460b      	mov	r3, r1
 8017690:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017698:	78fa      	ldrb	r2, [r7, #3]
 801769a:	4611      	mov	r1, r2
 801769c:	4618      	mov	r0, r3
 801769e:	f7f1 febc 	bl	800941a <HAL_PCD_EP_GetRxCount>
 80176a2:	4603      	mov	r3, r0
}
 80176a4:	4618      	mov	r0, r3
 80176a6:	3708      	adds	r7, #8
 80176a8:	46bd      	mov	sp, r7
 80176aa:	bd80      	pop	{r7, pc}

080176ac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80176ac:	b480      	push	{r7}
 80176ae:	b083      	sub	sp, #12
 80176b0:	af00      	add	r7, sp, #0
 80176b2:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80176b4:	4b03      	ldr	r3, [pc, #12]	; (80176c4 <USBD_static_malloc+0x18>)
}
 80176b6:	4618      	mov	r0, r3
 80176b8:	370c      	adds	r7, #12
 80176ba:	46bd      	mov	sp, r7
 80176bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176c0:	4770      	bx	lr
 80176c2:	bf00      	nop
 80176c4:	240030fc 	.word	0x240030fc

080176c8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80176c8:	b480      	push	{r7}
 80176ca:	b083      	sub	sp, #12
 80176cc:	af00      	add	r7, sp, #0
 80176ce:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80176d0:	bf00      	nop
 80176d2:	370c      	adds	r7, #12
 80176d4:	46bd      	mov	sp, r7
 80176d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176da:	4770      	bx	lr

080176dc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80176dc:	b480      	push	{r7}
 80176de:	b085      	sub	sp, #20
 80176e0:	af00      	add	r7, sp, #0
 80176e2:	4603      	mov	r3, r0
 80176e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80176e6:	2300      	movs	r3, #0
 80176e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80176ea:	79fb      	ldrb	r3, [r7, #7]
 80176ec:	2b03      	cmp	r3, #3
 80176ee:	d817      	bhi.n	8017720 <USBD_Get_USB_Status+0x44>
 80176f0:	a201      	add	r2, pc, #4	; (adr r2, 80176f8 <USBD_Get_USB_Status+0x1c>)
 80176f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80176f6:	bf00      	nop
 80176f8:	08017709 	.word	0x08017709
 80176fc:	0801770f 	.word	0x0801770f
 8017700:	08017715 	.word	0x08017715
 8017704:	0801771b 	.word	0x0801771b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017708:	2300      	movs	r3, #0
 801770a:	73fb      	strb	r3, [r7, #15]
    break;
 801770c:	e00b      	b.n	8017726 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801770e:	2303      	movs	r3, #3
 8017710:	73fb      	strb	r3, [r7, #15]
    break;
 8017712:	e008      	b.n	8017726 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017714:	2301      	movs	r3, #1
 8017716:	73fb      	strb	r3, [r7, #15]
    break;
 8017718:	e005      	b.n	8017726 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801771a:	2303      	movs	r3, #3
 801771c:	73fb      	strb	r3, [r7, #15]
    break;
 801771e:	e002      	b.n	8017726 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017720:	2303      	movs	r3, #3
 8017722:	73fb      	strb	r3, [r7, #15]
    break;
 8017724:	bf00      	nop
  }
  return usb_status;
 8017726:	7bfb      	ldrb	r3, [r7, #15]
}
 8017728:	4618      	mov	r0, r3
 801772a:	3714      	adds	r7, #20
 801772c:	46bd      	mov	sp, r7
 801772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017732:	4770      	bx	lr

08017734 <siprintf>:
 8017734:	b40e      	push	{r1, r2, r3}
 8017736:	b500      	push	{lr}
 8017738:	b09c      	sub	sp, #112	; 0x70
 801773a:	ab1d      	add	r3, sp, #116	; 0x74
 801773c:	9002      	str	r0, [sp, #8]
 801773e:	9006      	str	r0, [sp, #24]
 8017740:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017744:	4809      	ldr	r0, [pc, #36]	; (801776c <siprintf+0x38>)
 8017746:	9107      	str	r1, [sp, #28]
 8017748:	9104      	str	r1, [sp, #16]
 801774a:	4909      	ldr	r1, [pc, #36]	; (8017770 <siprintf+0x3c>)
 801774c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017750:	9105      	str	r1, [sp, #20]
 8017752:	6800      	ldr	r0, [r0, #0]
 8017754:	9301      	str	r3, [sp, #4]
 8017756:	a902      	add	r1, sp, #8
 8017758:	f000 f9d6 	bl	8017b08 <_svfiprintf_r>
 801775c:	9b02      	ldr	r3, [sp, #8]
 801775e:	2200      	movs	r2, #0
 8017760:	701a      	strb	r2, [r3, #0]
 8017762:	b01c      	add	sp, #112	; 0x70
 8017764:	f85d eb04 	ldr.w	lr, [sp], #4
 8017768:	b003      	add	sp, #12
 801776a:	4770      	bx	lr
 801776c:	24000150 	.word	0x24000150
 8017770:	ffff0208 	.word	0xffff0208

08017774 <siscanf>:
 8017774:	b40e      	push	{r1, r2, r3}
 8017776:	b510      	push	{r4, lr}
 8017778:	b09f      	sub	sp, #124	; 0x7c
 801777a:	ac21      	add	r4, sp, #132	; 0x84
 801777c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8017780:	f854 2b04 	ldr.w	r2, [r4], #4
 8017784:	9201      	str	r2, [sp, #4]
 8017786:	f8ad 101c 	strh.w	r1, [sp, #28]
 801778a:	9004      	str	r0, [sp, #16]
 801778c:	9008      	str	r0, [sp, #32]
 801778e:	f7e8 fdc9 	bl	8000324 <strlen>
 8017792:	4b0c      	ldr	r3, [pc, #48]	; (80177c4 <siscanf+0x50>)
 8017794:	9005      	str	r0, [sp, #20]
 8017796:	9009      	str	r0, [sp, #36]	; 0x24
 8017798:	930d      	str	r3, [sp, #52]	; 0x34
 801779a:	480b      	ldr	r0, [pc, #44]	; (80177c8 <siscanf+0x54>)
 801779c:	9a01      	ldr	r2, [sp, #4]
 801779e:	6800      	ldr	r0, [r0, #0]
 80177a0:	9403      	str	r4, [sp, #12]
 80177a2:	2300      	movs	r3, #0
 80177a4:	9311      	str	r3, [sp, #68]	; 0x44
 80177a6:	9316      	str	r3, [sp, #88]	; 0x58
 80177a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80177ac:	f8ad 301e 	strh.w	r3, [sp, #30]
 80177b0:	a904      	add	r1, sp, #16
 80177b2:	4623      	mov	r3, r4
 80177b4:	f000 fb00 	bl	8017db8 <__ssvfiscanf_r>
 80177b8:	b01f      	add	sp, #124	; 0x7c
 80177ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80177be:	b003      	add	sp, #12
 80177c0:	4770      	bx	lr
 80177c2:	bf00      	nop
 80177c4:	080177cd 	.word	0x080177cd
 80177c8:	24000150 	.word	0x24000150

080177cc <__seofread>:
 80177cc:	2000      	movs	r0, #0
 80177ce:	4770      	bx	lr

080177d0 <memset>:
 80177d0:	4402      	add	r2, r0
 80177d2:	4603      	mov	r3, r0
 80177d4:	4293      	cmp	r3, r2
 80177d6:	d100      	bne.n	80177da <memset+0xa>
 80177d8:	4770      	bx	lr
 80177da:	f803 1b01 	strb.w	r1, [r3], #1
 80177de:	e7f9      	b.n	80177d4 <memset+0x4>

080177e0 <__errno>:
 80177e0:	4b01      	ldr	r3, [pc, #4]	; (80177e8 <__errno+0x8>)
 80177e2:	6818      	ldr	r0, [r3, #0]
 80177e4:	4770      	bx	lr
 80177e6:	bf00      	nop
 80177e8:	24000150 	.word	0x24000150

080177ec <__libc_init_array>:
 80177ec:	b570      	push	{r4, r5, r6, lr}
 80177ee:	4d0d      	ldr	r5, [pc, #52]	; (8017824 <__libc_init_array+0x38>)
 80177f0:	4c0d      	ldr	r4, [pc, #52]	; (8017828 <__libc_init_array+0x3c>)
 80177f2:	1b64      	subs	r4, r4, r5
 80177f4:	10a4      	asrs	r4, r4, #2
 80177f6:	2600      	movs	r6, #0
 80177f8:	42a6      	cmp	r6, r4
 80177fa:	d109      	bne.n	8017810 <__libc_init_array+0x24>
 80177fc:	4d0b      	ldr	r5, [pc, #44]	; (801782c <__libc_init_array+0x40>)
 80177fe:	4c0c      	ldr	r4, [pc, #48]	; (8017830 <__libc_init_array+0x44>)
 8017800:	f001 f8fe 	bl	8018a00 <_init>
 8017804:	1b64      	subs	r4, r4, r5
 8017806:	10a4      	asrs	r4, r4, #2
 8017808:	2600      	movs	r6, #0
 801780a:	42a6      	cmp	r6, r4
 801780c:	d105      	bne.n	801781a <__libc_init_array+0x2e>
 801780e:	bd70      	pop	{r4, r5, r6, pc}
 8017810:	f855 3b04 	ldr.w	r3, [r5], #4
 8017814:	4798      	blx	r3
 8017816:	3601      	adds	r6, #1
 8017818:	e7ee      	b.n	80177f8 <__libc_init_array+0xc>
 801781a:	f855 3b04 	ldr.w	r3, [r5], #4
 801781e:	4798      	blx	r3
 8017820:	3601      	adds	r6, #1
 8017822:	e7f2      	b.n	801780a <__libc_init_array+0x1e>
 8017824:	08018e38 	.word	0x08018e38
 8017828:	08018e38 	.word	0x08018e38
 801782c:	08018e38 	.word	0x08018e38
 8017830:	08018e3c 	.word	0x08018e3c

08017834 <__retarget_lock_acquire_recursive>:
 8017834:	4770      	bx	lr

08017836 <__retarget_lock_release_recursive>:
 8017836:	4770      	bx	lr

08017838 <strcpy>:
 8017838:	4603      	mov	r3, r0
 801783a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801783e:	f803 2b01 	strb.w	r2, [r3], #1
 8017842:	2a00      	cmp	r2, #0
 8017844:	d1f9      	bne.n	801783a <strcpy+0x2>
 8017846:	4770      	bx	lr

08017848 <memcpy>:
 8017848:	440a      	add	r2, r1
 801784a:	4291      	cmp	r1, r2
 801784c:	f100 33ff 	add.w	r3, r0, #4294967295
 8017850:	d100      	bne.n	8017854 <memcpy+0xc>
 8017852:	4770      	bx	lr
 8017854:	b510      	push	{r4, lr}
 8017856:	f811 4b01 	ldrb.w	r4, [r1], #1
 801785a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801785e:	4291      	cmp	r1, r2
 8017860:	d1f9      	bne.n	8017856 <memcpy+0xe>
 8017862:	bd10      	pop	{r4, pc}

08017864 <_free_r>:
 8017864:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017866:	2900      	cmp	r1, #0
 8017868:	d044      	beq.n	80178f4 <_free_r+0x90>
 801786a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801786e:	9001      	str	r0, [sp, #4]
 8017870:	2b00      	cmp	r3, #0
 8017872:	f1a1 0404 	sub.w	r4, r1, #4
 8017876:	bfb8      	it	lt
 8017878:	18e4      	addlt	r4, r4, r3
 801787a:	f000 f8df 	bl	8017a3c <__malloc_lock>
 801787e:	4a1e      	ldr	r2, [pc, #120]	; (80178f8 <_free_r+0x94>)
 8017880:	9801      	ldr	r0, [sp, #4]
 8017882:	6813      	ldr	r3, [r2, #0]
 8017884:	b933      	cbnz	r3, 8017894 <_free_r+0x30>
 8017886:	6063      	str	r3, [r4, #4]
 8017888:	6014      	str	r4, [r2, #0]
 801788a:	b003      	add	sp, #12
 801788c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017890:	f000 b8da 	b.w	8017a48 <__malloc_unlock>
 8017894:	42a3      	cmp	r3, r4
 8017896:	d908      	bls.n	80178aa <_free_r+0x46>
 8017898:	6825      	ldr	r5, [r4, #0]
 801789a:	1961      	adds	r1, r4, r5
 801789c:	428b      	cmp	r3, r1
 801789e:	bf01      	itttt	eq
 80178a0:	6819      	ldreq	r1, [r3, #0]
 80178a2:	685b      	ldreq	r3, [r3, #4]
 80178a4:	1949      	addeq	r1, r1, r5
 80178a6:	6021      	streq	r1, [r4, #0]
 80178a8:	e7ed      	b.n	8017886 <_free_r+0x22>
 80178aa:	461a      	mov	r2, r3
 80178ac:	685b      	ldr	r3, [r3, #4]
 80178ae:	b10b      	cbz	r3, 80178b4 <_free_r+0x50>
 80178b0:	42a3      	cmp	r3, r4
 80178b2:	d9fa      	bls.n	80178aa <_free_r+0x46>
 80178b4:	6811      	ldr	r1, [r2, #0]
 80178b6:	1855      	adds	r5, r2, r1
 80178b8:	42a5      	cmp	r5, r4
 80178ba:	d10b      	bne.n	80178d4 <_free_r+0x70>
 80178bc:	6824      	ldr	r4, [r4, #0]
 80178be:	4421      	add	r1, r4
 80178c0:	1854      	adds	r4, r2, r1
 80178c2:	42a3      	cmp	r3, r4
 80178c4:	6011      	str	r1, [r2, #0]
 80178c6:	d1e0      	bne.n	801788a <_free_r+0x26>
 80178c8:	681c      	ldr	r4, [r3, #0]
 80178ca:	685b      	ldr	r3, [r3, #4]
 80178cc:	6053      	str	r3, [r2, #4]
 80178ce:	440c      	add	r4, r1
 80178d0:	6014      	str	r4, [r2, #0]
 80178d2:	e7da      	b.n	801788a <_free_r+0x26>
 80178d4:	d902      	bls.n	80178dc <_free_r+0x78>
 80178d6:	230c      	movs	r3, #12
 80178d8:	6003      	str	r3, [r0, #0]
 80178da:	e7d6      	b.n	801788a <_free_r+0x26>
 80178dc:	6825      	ldr	r5, [r4, #0]
 80178de:	1961      	adds	r1, r4, r5
 80178e0:	428b      	cmp	r3, r1
 80178e2:	bf04      	itt	eq
 80178e4:	6819      	ldreq	r1, [r3, #0]
 80178e6:	685b      	ldreq	r3, [r3, #4]
 80178e8:	6063      	str	r3, [r4, #4]
 80178ea:	bf04      	itt	eq
 80178ec:	1949      	addeq	r1, r1, r5
 80178ee:	6021      	streq	r1, [r4, #0]
 80178f0:	6054      	str	r4, [r2, #4]
 80178f2:	e7ca      	b.n	801788a <_free_r+0x26>
 80178f4:	b003      	add	sp, #12
 80178f6:	bd30      	pop	{r4, r5, pc}
 80178f8:	2400345c 	.word	0x2400345c

080178fc <sbrk_aligned>:
 80178fc:	b570      	push	{r4, r5, r6, lr}
 80178fe:	4e0e      	ldr	r6, [pc, #56]	; (8017938 <sbrk_aligned+0x3c>)
 8017900:	460c      	mov	r4, r1
 8017902:	6831      	ldr	r1, [r6, #0]
 8017904:	4605      	mov	r5, r0
 8017906:	b911      	cbnz	r1, 801790e <sbrk_aligned+0x12>
 8017908:	f000 ff3a 	bl	8018780 <_sbrk_r>
 801790c:	6030      	str	r0, [r6, #0]
 801790e:	4621      	mov	r1, r4
 8017910:	4628      	mov	r0, r5
 8017912:	f000 ff35 	bl	8018780 <_sbrk_r>
 8017916:	1c43      	adds	r3, r0, #1
 8017918:	d00a      	beq.n	8017930 <sbrk_aligned+0x34>
 801791a:	1cc4      	adds	r4, r0, #3
 801791c:	f024 0403 	bic.w	r4, r4, #3
 8017920:	42a0      	cmp	r0, r4
 8017922:	d007      	beq.n	8017934 <sbrk_aligned+0x38>
 8017924:	1a21      	subs	r1, r4, r0
 8017926:	4628      	mov	r0, r5
 8017928:	f000 ff2a 	bl	8018780 <_sbrk_r>
 801792c:	3001      	adds	r0, #1
 801792e:	d101      	bne.n	8017934 <sbrk_aligned+0x38>
 8017930:	f04f 34ff 	mov.w	r4, #4294967295
 8017934:	4620      	mov	r0, r4
 8017936:	bd70      	pop	{r4, r5, r6, pc}
 8017938:	24003460 	.word	0x24003460

0801793c <_malloc_r>:
 801793c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017940:	1ccd      	adds	r5, r1, #3
 8017942:	f025 0503 	bic.w	r5, r5, #3
 8017946:	3508      	adds	r5, #8
 8017948:	2d0c      	cmp	r5, #12
 801794a:	bf38      	it	cc
 801794c:	250c      	movcc	r5, #12
 801794e:	2d00      	cmp	r5, #0
 8017950:	4607      	mov	r7, r0
 8017952:	db01      	blt.n	8017958 <_malloc_r+0x1c>
 8017954:	42a9      	cmp	r1, r5
 8017956:	d905      	bls.n	8017964 <_malloc_r+0x28>
 8017958:	230c      	movs	r3, #12
 801795a:	603b      	str	r3, [r7, #0]
 801795c:	2600      	movs	r6, #0
 801795e:	4630      	mov	r0, r6
 8017960:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017964:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017a38 <_malloc_r+0xfc>
 8017968:	f000 f868 	bl	8017a3c <__malloc_lock>
 801796c:	f8d8 3000 	ldr.w	r3, [r8]
 8017970:	461c      	mov	r4, r3
 8017972:	bb5c      	cbnz	r4, 80179cc <_malloc_r+0x90>
 8017974:	4629      	mov	r1, r5
 8017976:	4638      	mov	r0, r7
 8017978:	f7ff ffc0 	bl	80178fc <sbrk_aligned>
 801797c:	1c43      	adds	r3, r0, #1
 801797e:	4604      	mov	r4, r0
 8017980:	d155      	bne.n	8017a2e <_malloc_r+0xf2>
 8017982:	f8d8 4000 	ldr.w	r4, [r8]
 8017986:	4626      	mov	r6, r4
 8017988:	2e00      	cmp	r6, #0
 801798a:	d145      	bne.n	8017a18 <_malloc_r+0xdc>
 801798c:	2c00      	cmp	r4, #0
 801798e:	d048      	beq.n	8017a22 <_malloc_r+0xe6>
 8017990:	6823      	ldr	r3, [r4, #0]
 8017992:	4631      	mov	r1, r6
 8017994:	4638      	mov	r0, r7
 8017996:	eb04 0903 	add.w	r9, r4, r3
 801799a:	f000 fef1 	bl	8018780 <_sbrk_r>
 801799e:	4581      	cmp	r9, r0
 80179a0:	d13f      	bne.n	8017a22 <_malloc_r+0xe6>
 80179a2:	6821      	ldr	r1, [r4, #0]
 80179a4:	1a6d      	subs	r5, r5, r1
 80179a6:	4629      	mov	r1, r5
 80179a8:	4638      	mov	r0, r7
 80179aa:	f7ff ffa7 	bl	80178fc <sbrk_aligned>
 80179ae:	3001      	adds	r0, #1
 80179b0:	d037      	beq.n	8017a22 <_malloc_r+0xe6>
 80179b2:	6823      	ldr	r3, [r4, #0]
 80179b4:	442b      	add	r3, r5
 80179b6:	6023      	str	r3, [r4, #0]
 80179b8:	f8d8 3000 	ldr.w	r3, [r8]
 80179bc:	2b00      	cmp	r3, #0
 80179be:	d038      	beq.n	8017a32 <_malloc_r+0xf6>
 80179c0:	685a      	ldr	r2, [r3, #4]
 80179c2:	42a2      	cmp	r2, r4
 80179c4:	d12b      	bne.n	8017a1e <_malloc_r+0xe2>
 80179c6:	2200      	movs	r2, #0
 80179c8:	605a      	str	r2, [r3, #4]
 80179ca:	e00f      	b.n	80179ec <_malloc_r+0xb0>
 80179cc:	6822      	ldr	r2, [r4, #0]
 80179ce:	1b52      	subs	r2, r2, r5
 80179d0:	d41f      	bmi.n	8017a12 <_malloc_r+0xd6>
 80179d2:	2a0b      	cmp	r2, #11
 80179d4:	d917      	bls.n	8017a06 <_malloc_r+0xca>
 80179d6:	1961      	adds	r1, r4, r5
 80179d8:	42a3      	cmp	r3, r4
 80179da:	6025      	str	r5, [r4, #0]
 80179dc:	bf18      	it	ne
 80179de:	6059      	strne	r1, [r3, #4]
 80179e0:	6863      	ldr	r3, [r4, #4]
 80179e2:	bf08      	it	eq
 80179e4:	f8c8 1000 	streq.w	r1, [r8]
 80179e8:	5162      	str	r2, [r4, r5]
 80179ea:	604b      	str	r3, [r1, #4]
 80179ec:	4638      	mov	r0, r7
 80179ee:	f104 060b 	add.w	r6, r4, #11
 80179f2:	f000 f829 	bl	8017a48 <__malloc_unlock>
 80179f6:	f026 0607 	bic.w	r6, r6, #7
 80179fa:	1d23      	adds	r3, r4, #4
 80179fc:	1af2      	subs	r2, r6, r3
 80179fe:	d0ae      	beq.n	801795e <_malloc_r+0x22>
 8017a00:	1b9b      	subs	r3, r3, r6
 8017a02:	50a3      	str	r3, [r4, r2]
 8017a04:	e7ab      	b.n	801795e <_malloc_r+0x22>
 8017a06:	42a3      	cmp	r3, r4
 8017a08:	6862      	ldr	r2, [r4, #4]
 8017a0a:	d1dd      	bne.n	80179c8 <_malloc_r+0x8c>
 8017a0c:	f8c8 2000 	str.w	r2, [r8]
 8017a10:	e7ec      	b.n	80179ec <_malloc_r+0xb0>
 8017a12:	4623      	mov	r3, r4
 8017a14:	6864      	ldr	r4, [r4, #4]
 8017a16:	e7ac      	b.n	8017972 <_malloc_r+0x36>
 8017a18:	4634      	mov	r4, r6
 8017a1a:	6876      	ldr	r6, [r6, #4]
 8017a1c:	e7b4      	b.n	8017988 <_malloc_r+0x4c>
 8017a1e:	4613      	mov	r3, r2
 8017a20:	e7cc      	b.n	80179bc <_malloc_r+0x80>
 8017a22:	230c      	movs	r3, #12
 8017a24:	603b      	str	r3, [r7, #0]
 8017a26:	4638      	mov	r0, r7
 8017a28:	f000 f80e 	bl	8017a48 <__malloc_unlock>
 8017a2c:	e797      	b.n	801795e <_malloc_r+0x22>
 8017a2e:	6025      	str	r5, [r4, #0]
 8017a30:	e7dc      	b.n	80179ec <_malloc_r+0xb0>
 8017a32:	605b      	str	r3, [r3, #4]
 8017a34:	deff      	udf	#255	; 0xff
 8017a36:	bf00      	nop
 8017a38:	2400345c 	.word	0x2400345c

08017a3c <__malloc_lock>:
 8017a3c:	4801      	ldr	r0, [pc, #4]	; (8017a44 <__malloc_lock+0x8>)
 8017a3e:	f7ff bef9 	b.w	8017834 <__retarget_lock_acquire_recursive>
 8017a42:	bf00      	nop
 8017a44:	24003458 	.word	0x24003458

08017a48 <__malloc_unlock>:
 8017a48:	4801      	ldr	r0, [pc, #4]	; (8017a50 <__malloc_unlock+0x8>)
 8017a4a:	f7ff bef4 	b.w	8017836 <__retarget_lock_release_recursive>
 8017a4e:	bf00      	nop
 8017a50:	24003458 	.word	0x24003458

08017a54 <__ssputs_r>:
 8017a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a58:	688e      	ldr	r6, [r1, #8]
 8017a5a:	461f      	mov	r7, r3
 8017a5c:	42be      	cmp	r6, r7
 8017a5e:	680b      	ldr	r3, [r1, #0]
 8017a60:	4682      	mov	sl, r0
 8017a62:	460c      	mov	r4, r1
 8017a64:	4690      	mov	r8, r2
 8017a66:	d82c      	bhi.n	8017ac2 <__ssputs_r+0x6e>
 8017a68:	898a      	ldrh	r2, [r1, #12]
 8017a6a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017a6e:	d026      	beq.n	8017abe <__ssputs_r+0x6a>
 8017a70:	6965      	ldr	r5, [r4, #20]
 8017a72:	6909      	ldr	r1, [r1, #16]
 8017a74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017a78:	eba3 0901 	sub.w	r9, r3, r1
 8017a7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017a80:	1c7b      	adds	r3, r7, #1
 8017a82:	444b      	add	r3, r9
 8017a84:	106d      	asrs	r5, r5, #1
 8017a86:	429d      	cmp	r5, r3
 8017a88:	bf38      	it	cc
 8017a8a:	461d      	movcc	r5, r3
 8017a8c:	0553      	lsls	r3, r2, #21
 8017a8e:	d527      	bpl.n	8017ae0 <__ssputs_r+0x8c>
 8017a90:	4629      	mov	r1, r5
 8017a92:	f7ff ff53 	bl	801793c <_malloc_r>
 8017a96:	4606      	mov	r6, r0
 8017a98:	b360      	cbz	r0, 8017af4 <__ssputs_r+0xa0>
 8017a9a:	6921      	ldr	r1, [r4, #16]
 8017a9c:	464a      	mov	r2, r9
 8017a9e:	f7ff fed3 	bl	8017848 <memcpy>
 8017aa2:	89a3      	ldrh	r3, [r4, #12]
 8017aa4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017aac:	81a3      	strh	r3, [r4, #12]
 8017aae:	6126      	str	r6, [r4, #16]
 8017ab0:	6165      	str	r5, [r4, #20]
 8017ab2:	444e      	add	r6, r9
 8017ab4:	eba5 0509 	sub.w	r5, r5, r9
 8017ab8:	6026      	str	r6, [r4, #0]
 8017aba:	60a5      	str	r5, [r4, #8]
 8017abc:	463e      	mov	r6, r7
 8017abe:	42be      	cmp	r6, r7
 8017ac0:	d900      	bls.n	8017ac4 <__ssputs_r+0x70>
 8017ac2:	463e      	mov	r6, r7
 8017ac4:	6820      	ldr	r0, [r4, #0]
 8017ac6:	4632      	mov	r2, r6
 8017ac8:	4641      	mov	r1, r8
 8017aca:	f000 fe3e 	bl	801874a <memmove>
 8017ace:	68a3      	ldr	r3, [r4, #8]
 8017ad0:	1b9b      	subs	r3, r3, r6
 8017ad2:	60a3      	str	r3, [r4, #8]
 8017ad4:	6823      	ldr	r3, [r4, #0]
 8017ad6:	4433      	add	r3, r6
 8017ad8:	6023      	str	r3, [r4, #0]
 8017ada:	2000      	movs	r0, #0
 8017adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ae0:	462a      	mov	r2, r5
 8017ae2:	f000 fe5d 	bl	80187a0 <_realloc_r>
 8017ae6:	4606      	mov	r6, r0
 8017ae8:	2800      	cmp	r0, #0
 8017aea:	d1e0      	bne.n	8017aae <__ssputs_r+0x5a>
 8017aec:	6921      	ldr	r1, [r4, #16]
 8017aee:	4650      	mov	r0, sl
 8017af0:	f7ff feb8 	bl	8017864 <_free_r>
 8017af4:	230c      	movs	r3, #12
 8017af6:	f8ca 3000 	str.w	r3, [sl]
 8017afa:	89a3      	ldrh	r3, [r4, #12]
 8017afc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017b00:	81a3      	strh	r3, [r4, #12]
 8017b02:	f04f 30ff 	mov.w	r0, #4294967295
 8017b06:	e7e9      	b.n	8017adc <__ssputs_r+0x88>

08017b08 <_svfiprintf_r>:
 8017b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b0c:	4698      	mov	r8, r3
 8017b0e:	898b      	ldrh	r3, [r1, #12]
 8017b10:	061b      	lsls	r3, r3, #24
 8017b12:	b09d      	sub	sp, #116	; 0x74
 8017b14:	4607      	mov	r7, r0
 8017b16:	460d      	mov	r5, r1
 8017b18:	4614      	mov	r4, r2
 8017b1a:	d50e      	bpl.n	8017b3a <_svfiprintf_r+0x32>
 8017b1c:	690b      	ldr	r3, [r1, #16]
 8017b1e:	b963      	cbnz	r3, 8017b3a <_svfiprintf_r+0x32>
 8017b20:	2140      	movs	r1, #64	; 0x40
 8017b22:	f7ff ff0b 	bl	801793c <_malloc_r>
 8017b26:	6028      	str	r0, [r5, #0]
 8017b28:	6128      	str	r0, [r5, #16]
 8017b2a:	b920      	cbnz	r0, 8017b36 <_svfiprintf_r+0x2e>
 8017b2c:	230c      	movs	r3, #12
 8017b2e:	603b      	str	r3, [r7, #0]
 8017b30:	f04f 30ff 	mov.w	r0, #4294967295
 8017b34:	e0d0      	b.n	8017cd8 <_svfiprintf_r+0x1d0>
 8017b36:	2340      	movs	r3, #64	; 0x40
 8017b38:	616b      	str	r3, [r5, #20]
 8017b3a:	2300      	movs	r3, #0
 8017b3c:	9309      	str	r3, [sp, #36]	; 0x24
 8017b3e:	2320      	movs	r3, #32
 8017b40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017b44:	f8cd 800c 	str.w	r8, [sp, #12]
 8017b48:	2330      	movs	r3, #48	; 0x30
 8017b4a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8017cf0 <_svfiprintf_r+0x1e8>
 8017b4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017b52:	f04f 0901 	mov.w	r9, #1
 8017b56:	4623      	mov	r3, r4
 8017b58:	469a      	mov	sl, r3
 8017b5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017b5e:	b10a      	cbz	r2, 8017b64 <_svfiprintf_r+0x5c>
 8017b60:	2a25      	cmp	r2, #37	; 0x25
 8017b62:	d1f9      	bne.n	8017b58 <_svfiprintf_r+0x50>
 8017b64:	ebba 0b04 	subs.w	fp, sl, r4
 8017b68:	d00b      	beq.n	8017b82 <_svfiprintf_r+0x7a>
 8017b6a:	465b      	mov	r3, fp
 8017b6c:	4622      	mov	r2, r4
 8017b6e:	4629      	mov	r1, r5
 8017b70:	4638      	mov	r0, r7
 8017b72:	f7ff ff6f 	bl	8017a54 <__ssputs_r>
 8017b76:	3001      	adds	r0, #1
 8017b78:	f000 80a9 	beq.w	8017cce <_svfiprintf_r+0x1c6>
 8017b7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017b7e:	445a      	add	r2, fp
 8017b80:	9209      	str	r2, [sp, #36]	; 0x24
 8017b82:	f89a 3000 	ldrb.w	r3, [sl]
 8017b86:	2b00      	cmp	r3, #0
 8017b88:	f000 80a1 	beq.w	8017cce <_svfiprintf_r+0x1c6>
 8017b8c:	2300      	movs	r3, #0
 8017b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8017b92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017b96:	f10a 0a01 	add.w	sl, sl, #1
 8017b9a:	9304      	str	r3, [sp, #16]
 8017b9c:	9307      	str	r3, [sp, #28]
 8017b9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017ba2:	931a      	str	r3, [sp, #104]	; 0x68
 8017ba4:	4654      	mov	r4, sl
 8017ba6:	2205      	movs	r2, #5
 8017ba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017bac:	4850      	ldr	r0, [pc, #320]	; (8017cf0 <_svfiprintf_r+0x1e8>)
 8017bae:	f7e8 fbc7 	bl	8000340 <memchr>
 8017bb2:	9a04      	ldr	r2, [sp, #16]
 8017bb4:	b9d8      	cbnz	r0, 8017bee <_svfiprintf_r+0xe6>
 8017bb6:	06d0      	lsls	r0, r2, #27
 8017bb8:	bf44      	itt	mi
 8017bba:	2320      	movmi	r3, #32
 8017bbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017bc0:	0711      	lsls	r1, r2, #28
 8017bc2:	bf44      	itt	mi
 8017bc4:	232b      	movmi	r3, #43	; 0x2b
 8017bc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017bca:	f89a 3000 	ldrb.w	r3, [sl]
 8017bce:	2b2a      	cmp	r3, #42	; 0x2a
 8017bd0:	d015      	beq.n	8017bfe <_svfiprintf_r+0xf6>
 8017bd2:	9a07      	ldr	r2, [sp, #28]
 8017bd4:	4654      	mov	r4, sl
 8017bd6:	2000      	movs	r0, #0
 8017bd8:	f04f 0c0a 	mov.w	ip, #10
 8017bdc:	4621      	mov	r1, r4
 8017bde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017be2:	3b30      	subs	r3, #48	; 0x30
 8017be4:	2b09      	cmp	r3, #9
 8017be6:	d94d      	bls.n	8017c84 <_svfiprintf_r+0x17c>
 8017be8:	b1b0      	cbz	r0, 8017c18 <_svfiprintf_r+0x110>
 8017bea:	9207      	str	r2, [sp, #28]
 8017bec:	e014      	b.n	8017c18 <_svfiprintf_r+0x110>
 8017bee:	eba0 0308 	sub.w	r3, r0, r8
 8017bf2:	fa09 f303 	lsl.w	r3, r9, r3
 8017bf6:	4313      	orrs	r3, r2
 8017bf8:	9304      	str	r3, [sp, #16]
 8017bfa:	46a2      	mov	sl, r4
 8017bfc:	e7d2      	b.n	8017ba4 <_svfiprintf_r+0x9c>
 8017bfe:	9b03      	ldr	r3, [sp, #12]
 8017c00:	1d19      	adds	r1, r3, #4
 8017c02:	681b      	ldr	r3, [r3, #0]
 8017c04:	9103      	str	r1, [sp, #12]
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	bfbb      	ittet	lt
 8017c0a:	425b      	neglt	r3, r3
 8017c0c:	f042 0202 	orrlt.w	r2, r2, #2
 8017c10:	9307      	strge	r3, [sp, #28]
 8017c12:	9307      	strlt	r3, [sp, #28]
 8017c14:	bfb8      	it	lt
 8017c16:	9204      	strlt	r2, [sp, #16]
 8017c18:	7823      	ldrb	r3, [r4, #0]
 8017c1a:	2b2e      	cmp	r3, #46	; 0x2e
 8017c1c:	d10c      	bne.n	8017c38 <_svfiprintf_r+0x130>
 8017c1e:	7863      	ldrb	r3, [r4, #1]
 8017c20:	2b2a      	cmp	r3, #42	; 0x2a
 8017c22:	d134      	bne.n	8017c8e <_svfiprintf_r+0x186>
 8017c24:	9b03      	ldr	r3, [sp, #12]
 8017c26:	1d1a      	adds	r2, r3, #4
 8017c28:	681b      	ldr	r3, [r3, #0]
 8017c2a:	9203      	str	r2, [sp, #12]
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	bfb8      	it	lt
 8017c30:	f04f 33ff 	movlt.w	r3, #4294967295
 8017c34:	3402      	adds	r4, #2
 8017c36:	9305      	str	r3, [sp, #20]
 8017c38:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8017d00 <_svfiprintf_r+0x1f8>
 8017c3c:	7821      	ldrb	r1, [r4, #0]
 8017c3e:	2203      	movs	r2, #3
 8017c40:	4650      	mov	r0, sl
 8017c42:	f7e8 fb7d 	bl	8000340 <memchr>
 8017c46:	b138      	cbz	r0, 8017c58 <_svfiprintf_r+0x150>
 8017c48:	9b04      	ldr	r3, [sp, #16]
 8017c4a:	eba0 000a 	sub.w	r0, r0, sl
 8017c4e:	2240      	movs	r2, #64	; 0x40
 8017c50:	4082      	lsls	r2, r0
 8017c52:	4313      	orrs	r3, r2
 8017c54:	3401      	adds	r4, #1
 8017c56:	9304      	str	r3, [sp, #16]
 8017c58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c5c:	4825      	ldr	r0, [pc, #148]	; (8017cf4 <_svfiprintf_r+0x1ec>)
 8017c5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017c62:	2206      	movs	r2, #6
 8017c64:	f7e8 fb6c 	bl	8000340 <memchr>
 8017c68:	2800      	cmp	r0, #0
 8017c6a:	d038      	beq.n	8017cde <_svfiprintf_r+0x1d6>
 8017c6c:	4b22      	ldr	r3, [pc, #136]	; (8017cf8 <_svfiprintf_r+0x1f0>)
 8017c6e:	bb1b      	cbnz	r3, 8017cb8 <_svfiprintf_r+0x1b0>
 8017c70:	9b03      	ldr	r3, [sp, #12]
 8017c72:	3307      	adds	r3, #7
 8017c74:	f023 0307 	bic.w	r3, r3, #7
 8017c78:	3308      	adds	r3, #8
 8017c7a:	9303      	str	r3, [sp, #12]
 8017c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c7e:	4433      	add	r3, r6
 8017c80:	9309      	str	r3, [sp, #36]	; 0x24
 8017c82:	e768      	b.n	8017b56 <_svfiprintf_r+0x4e>
 8017c84:	fb0c 3202 	mla	r2, ip, r2, r3
 8017c88:	460c      	mov	r4, r1
 8017c8a:	2001      	movs	r0, #1
 8017c8c:	e7a6      	b.n	8017bdc <_svfiprintf_r+0xd4>
 8017c8e:	2300      	movs	r3, #0
 8017c90:	3401      	adds	r4, #1
 8017c92:	9305      	str	r3, [sp, #20]
 8017c94:	4619      	mov	r1, r3
 8017c96:	f04f 0c0a 	mov.w	ip, #10
 8017c9a:	4620      	mov	r0, r4
 8017c9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017ca0:	3a30      	subs	r2, #48	; 0x30
 8017ca2:	2a09      	cmp	r2, #9
 8017ca4:	d903      	bls.n	8017cae <_svfiprintf_r+0x1a6>
 8017ca6:	2b00      	cmp	r3, #0
 8017ca8:	d0c6      	beq.n	8017c38 <_svfiprintf_r+0x130>
 8017caa:	9105      	str	r1, [sp, #20]
 8017cac:	e7c4      	b.n	8017c38 <_svfiprintf_r+0x130>
 8017cae:	fb0c 2101 	mla	r1, ip, r1, r2
 8017cb2:	4604      	mov	r4, r0
 8017cb4:	2301      	movs	r3, #1
 8017cb6:	e7f0      	b.n	8017c9a <_svfiprintf_r+0x192>
 8017cb8:	ab03      	add	r3, sp, #12
 8017cba:	9300      	str	r3, [sp, #0]
 8017cbc:	462a      	mov	r2, r5
 8017cbe:	4b0f      	ldr	r3, [pc, #60]	; (8017cfc <_svfiprintf_r+0x1f4>)
 8017cc0:	a904      	add	r1, sp, #16
 8017cc2:	4638      	mov	r0, r7
 8017cc4:	f3af 8000 	nop.w
 8017cc8:	1c42      	adds	r2, r0, #1
 8017cca:	4606      	mov	r6, r0
 8017ccc:	d1d6      	bne.n	8017c7c <_svfiprintf_r+0x174>
 8017cce:	89ab      	ldrh	r3, [r5, #12]
 8017cd0:	065b      	lsls	r3, r3, #25
 8017cd2:	f53f af2d 	bmi.w	8017b30 <_svfiprintf_r+0x28>
 8017cd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017cd8:	b01d      	add	sp, #116	; 0x74
 8017cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cde:	ab03      	add	r3, sp, #12
 8017ce0:	9300      	str	r3, [sp, #0]
 8017ce2:	462a      	mov	r2, r5
 8017ce4:	4b05      	ldr	r3, [pc, #20]	; (8017cfc <_svfiprintf_r+0x1f4>)
 8017ce6:	a904      	add	r1, sp, #16
 8017ce8:	4638      	mov	r0, r7
 8017cea:	f000 fa4b 	bl	8018184 <_printf_i>
 8017cee:	e7eb      	b.n	8017cc8 <_svfiprintf_r+0x1c0>
 8017cf0:	08018ce0 	.word	0x08018ce0
 8017cf4:	08018cea 	.word	0x08018cea
 8017cf8:	00000000 	.word	0x00000000
 8017cfc:	08017a55 	.word	0x08017a55
 8017d00:	08018ce6 	.word	0x08018ce6

08017d04 <_sungetc_r>:
 8017d04:	b538      	push	{r3, r4, r5, lr}
 8017d06:	1c4b      	adds	r3, r1, #1
 8017d08:	4614      	mov	r4, r2
 8017d0a:	d103      	bne.n	8017d14 <_sungetc_r+0x10>
 8017d0c:	f04f 35ff 	mov.w	r5, #4294967295
 8017d10:	4628      	mov	r0, r5
 8017d12:	bd38      	pop	{r3, r4, r5, pc}
 8017d14:	8993      	ldrh	r3, [r2, #12]
 8017d16:	f023 0320 	bic.w	r3, r3, #32
 8017d1a:	8193      	strh	r3, [r2, #12]
 8017d1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017d1e:	6852      	ldr	r2, [r2, #4]
 8017d20:	b2cd      	uxtb	r5, r1
 8017d22:	b18b      	cbz	r3, 8017d48 <_sungetc_r+0x44>
 8017d24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017d26:	4293      	cmp	r3, r2
 8017d28:	dd08      	ble.n	8017d3c <_sungetc_r+0x38>
 8017d2a:	6823      	ldr	r3, [r4, #0]
 8017d2c:	1e5a      	subs	r2, r3, #1
 8017d2e:	6022      	str	r2, [r4, #0]
 8017d30:	f803 5c01 	strb.w	r5, [r3, #-1]
 8017d34:	6863      	ldr	r3, [r4, #4]
 8017d36:	3301      	adds	r3, #1
 8017d38:	6063      	str	r3, [r4, #4]
 8017d3a:	e7e9      	b.n	8017d10 <_sungetc_r+0xc>
 8017d3c:	4621      	mov	r1, r4
 8017d3e:	f000 fcca 	bl	80186d6 <__submore>
 8017d42:	2800      	cmp	r0, #0
 8017d44:	d0f1      	beq.n	8017d2a <_sungetc_r+0x26>
 8017d46:	e7e1      	b.n	8017d0c <_sungetc_r+0x8>
 8017d48:	6921      	ldr	r1, [r4, #16]
 8017d4a:	6823      	ldr	r3, [r4, #0]
 8017d4c:	b151      	cbz	r1, 8017d64 <_sungetc_r+0x60>
 8017d4e:	4299      	cmp	r1, r3
 8017d50:	d208      	bcs.n	8017d64 <_sungetc_r+0x60>
 8017d52:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8017d56:	42a9      	cmp	r1, r5
 8017d58:	d104      	bne.n	8017d64 <_sungetc_r+0x60>
 8017d5a:	3b01      	subs	r3, #1
 8017d5c:	3201      	adds	r2, #1
 8017d5e:	6023      	str	r3, [r4, #0]
 8017d60:	6062      	str	r2, [r4, #4]
 8017d62:	e7d5      	b.n	8017d10 <_sungetc_r+0xc>
 8017d64:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8017d68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017d6c:	6363      	str	r3, [r4, #52]	; 0x34
 8017d6e:	2303      	movs	r3, #3
 8017d70:	63a3      	str	r3, [r4, #56]	; 0x38
 8017d72:	4623      	mov	r3, r4
 8017d74:	f803 5f46 	strb.w	r5, [r3, #70]!
 8017d78:	6023      	str	r3, [r4, #0]
 8017d7a:	2301      	movs	r3, #1
 8017d7c:	e7dc      	b.n	8017d38 <_sungetc_r+0x34>

08017d7e <__ssrefill_r>:
 8017d7e:	b510      	push	{r4, lr}
 8017d80:	460c      	mov	r4, r1
 8017d82:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017d84:	b169      	cbz	r1, 8017da2 <__ssrefill_r+0x24>
 8017d86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017d8a:	4299      	cmp	r1, r3
 8017d8c:	d001      	beq.n	8017d92 <__ssrefill_r+0x14>
 8017d8e:	f7ff fd69 	bl	8017864 <_free_r>
 8017d92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017d94:	6063      	str	r3, [r4, #4]
 8017d96:	2000      	movs	r0, #0
 8017d98:	6360      	str	r0, [r4, #52]	; 0x34
 8017d9a:	b113      	cbz	r3, 8017da2 <__ssrefill_r+0x24>
 8017d9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017d9e:	6023      	str	r3, [r4, #0]
 8017da0:	bd10      	pop	{r4, pc}
 8017da2:	6923      	ldr	r3, [r4, #16]
 8017da4:	6023      	str	r3, [r4, #0]
 8017da6:	2300      	movs	r3, #0
 8017da8:	6063      	str	r3, [r4, #4]
 8017daa:	89a3      	ldrh	r3, [r4, #12]
 8017dac:	f043 0320 	orr.w	r3, r3, #32
 8017db0:	81a3      	strh	r3, [r4, #12]
 8017db2:	f04f 30ff 	mov.w	r0, #4294967295
 8017db6:	e7f3      	b.n	8017da0 <__ssrefill_r+0x22>

08017db8 <__ssvfiscanf_r>:
 8017db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017dbc:	460c      	mov	r4, r1
 8017dbe:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8017dc2:	2100      	movs	r1, #0
 8017dc4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8017dc8:	49a6      	ldr	r1, [pc, #664]	; (8018064 <__ssvfiscanf_r+0x2ac>)
 8017dca:	91a0      	str	r1, [sp, #640]	; 0x280
 8017dcc:	f10d 0804 	add.w	r8, sp, #4
 8017dd0:	49a5      	ldr	r1, [pc, #660]	; (8018068 <__ssvfiscanf_r+0x2b0>)
 8017dd2:	4fa6      	ldr	r7, [pc, #664]	; (801806c <__ssvfiscanf_r+0x2b4>)
 8017dd4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8018070 <__ssvfiscanf_r+0x2b8>
 8017dd8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8017ddc:	4606      	mov	r6, r0
 8017dde:	91a1      	str	r1, [sp, #644]	; 0x284
 8017de0:	9300      	str	r3, [sp, #0]
 8017de2:	7813      	ldrb	r3, [r2, #0]
 8017de4:	2b00      	cmp	r3, #0
 8017de6:	f000 815a 	beq.w	801809e <__ssvfiscanf_r+0x2e6>
 8017dea:	5cf9      	ldrb	r1, [r7, r3]
 8017dec:	f011 0108 	ands.w	r1, r1, #8
 8017df0:	f102 0501 	add.w	r5, r2, #1
 8017df4:	d019      	beq.n	8017e2a <__ssvfiscanf_r+0x72>
 8017df6:	6863      	ldr	r3, [r4, #4]
 8017df8:	2b00      	cmp	r3, #0
 8017dfa:	dd0f      	ble.n	8017e1c <__ssvfiscanf_r+0x64>
 8017dfc:	6823      	ldr	r3, [r4, #0]
 8017dfe:	781a      	ldrb	r2, [r3, #0]
 8017e00:	5cba      	ldrb	r2, [r7, r2]
 8017e02:	0712      	lsls	r2, r2, #28
 8017e04:	d401      	bmi.n	8017e0a <__ssvfiscanf_r+0x52>
 8017e06:	462a      	mov	r2, r5
 8017e08:	e7eb      	b.n	8017de2 <__ssvfiscanf_r+0x2a>
 8017e0a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017e0c:	3201      	adds	r2, #1
 8017e0e:	9245      	str	r2, [sp, #276]	; 0x114
 8017e10:	6862      	ldr	r2, [r4, #4]
 8017e12:	3301      	adds	r3, #1
 8017e14:	3a01      	subs	r2, #1
 8017e16:	6062      	str	r2, [r4, #4]
 8017e18:	6023      	str	r3, [r4, #0]
 8017e1a:	e7ec      	b.n	8017df6 <__ssvfiscanf_r+0x3e>
 8017e1c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017e1e:	4621      	mov	r1, r4
 8017e20:	4630      	mov	r0, r6
 8017e22:	4798      	blx	r3
 8017e24:	2800      	cmp	r0, #0
 8017e26:	d0e9      	beq.n	8017dfc <__ssvfiscanf_r+0x44>
 8017e28:	e7ed      	b.n	8017e06 <__ssvfiscanf_r+0x4e>
 8017e2a:	2b25      	cmp	r3, #37	; 0x25
 8017e2c:	d012      	beq.n	8017e54 <__ssvfiscanf_r+0x9c>
 8017e2e:	469a      	mov	sl, r3
 8017e30:	6863      	ldr	r3, [r4, #4]
 8017e32:	2b00      	cmp	r3, #0
 8017e34:	f340 8091 	ble.w	8017f5a <__ssvfiscanf_r+0x1a2>
 8017e38:	6822      	ldr	r2, [r4, #0]
 8017e3a:	7813      	ldrb	r3, [r2, #0]
 8017e3c:	4553      	cmp	r3, sl
 8017e3e:	f040 812e 	bne.w	801809e <__ssvfiscanf_r+0x2e6>
 8017e42:	6863      	ldr	r3, [r4, #4]
 8017e44:	3b01      	subs	r3, #1
 8017e46:	6063      	str	r3, [r4, #4]
 8017e48:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8017e4a:	3201      	adds	r2, #1
 8017e4c:	3301      	adds	r3, #1
 8017e4e:	6022      	str	r2, [r4, #0]
 8017e50:	9345      	str	r3, [sp, #276]	; 0x114
 8017e52:	e7d8      	b.n	8017e06 <__ssvfiscanf_r+0x4e>
 8017e54:	9141      	str	r1, [sp, #260]	; 0x104
 8017e56:	9143      	str	r1, [sp, #268]	; 0x10c
 8017e58:	7853      	ldrb	r3, [r2, #1]
 8017e5a:	2b2a      	cmp	r3, #42	; 0x2a
 8017e5c:	bf02      	ittt	eq
 8017e5e:	2310      	moveq	r3, #16
 8017e60:	1c95      	addeq	r5, r2, #2
 8017e62:	9341      	streq	r3, [sp, #260]	; 0x104
 8017e64:	220a      	movs	r2, #10
 8017e66:	46aa      	mov	sl, r5
 8017e68:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8017e6c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8017e70:	2b09      	cmp	r3, #9
 8017e72:	d91c      	bls.n	8017eae <__ssvfiscanf_r+0xf6>
 8017e74:	487e      	ldr	r0, [pc, #504]	; (8018070 <__ssvfiscanf_r+0x2b8>)
 8017e76:	2203      	movs	r2, #3
 8017e78:	f7e8 fa62 	bl	8000340 <memchr>
 8017e7c:	b138      	cbz	r0, 8017e8e <__ssvfiscanf_r+0xd6>
 8017e7e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017e80:	eba0 0009 	sub.w	r0, r0, r9
 8017e84:	2301      	movs	r3, #1
 8017e86:	4083      	lsls	r3, r0
 8017e88:	4313      	orrs	r3, r2
 8017e8a:	9341      	str	r3, [sp, #260]	; 0x104
 8017e8c:	4655      	mov	r5, sl
 8017e8e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017e92:	2b78      	cmp	r3, #120	; 0x78
 8017e94:	d806      	bhi.n	8017ea4 <__ssvfiscanf_r+0xec>
 8017e96:	2b57      	cmp	r3, #87	; 0x57
 8017e98:	d810      	bhi.n	8017ebc <__ssvfiscanf_r+0x104>
 8017e9a:	2b25      	cmp	r3, #37	; 0x25
 8017e9c:	d0c7      	beq.n	8017e2e <__ssvfiscanf_r+0x76>
 8017e9e:	d857      	bhi.n	8017f50 <__ssvfiscanf_r+0x198>
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	d065      	beq.n	8017f70 <__ssvfiscanf_r+0x1b8>
 8017ea4:	2303      	movs	r3, #3
 8017ea6:	9347      	str	r3, [sp, #284]	; 0x11c
 8017ea8:	230a      	movs	r3, #10
 8017eaa:	9342      	str	r3, [sp, #264]	; 0x108
 8017eac:	e076      	b.n	8017f9c <__ssvfiscanf_r+0x1e4>
 8017eae:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017eb0:	fb02 1103 	mla	r1, r2, r3, r1
 8017eb4:	3930      	subs	r1, #48	; 0x30
 8017eb6:	9143      	str	r1, [sp, #268]	; 0x10c
 8017eb8:	4655      	mov	r5, sl
 8017eba:	e7d4      	b.n	8017e66 <__ssvfiscanf_r+0xae>
 8017ebc:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8017ec0:	2a20      	cmp	r2, #32
 8017ec2:	d8ef      	bhi.n	8017ea4 <__ssvfiscanf_r+0xec>
 8017ec4:	a101      	add	r1, pc, #4	; (adr r1, 8017ecc <__ssvfiscanf_r+0x114>)
 8017ec6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017eca:	bf00      	nop
 8017ecc:	08017f7f 	.word	0x08017f7f
 8017ed0:	08017ea5 	.word	0x08017ea5
 8017ed4:	08017ea5 	.word	0x08017ea5
 8017ed8:	08017fdd 	.word	0x08017fdd
 8017edc:	08017ea5 	.word	0x08017ea5
 8017ee0:	08017ea5 	.word	0x08017ea5
 8017ee4:	08017ea5 	.word	0x08017ea5
 8017ee8:	08017ea5 	.word	0x08017ea5
 8017eec:	08017ea5 	.word	0x08017ea5
 8017ef0:	08017ea5 	.word	0x08017ea5
 8017ef4:	08017ea5 	.word	0x08017ea5
 8017ef8:	08017ff3 	.word	0x08017ff3
 8017efc:	08017fd9 	.word	0x08017fd9
 8017f00:	08017f57 	.word	0x08017f57
 8017f04:	08017f57 	.word	0x08017f57
 8017f08:	08017f57 	.word	0x08017f57
 8017f0c:	08017ea5 	.word	0x08017ea5
 8017f10:	08017f95 	.word	0x08017f95
 8017f14:	08017ea5 	.word	0x08017ea5
 8017f18:	08017ea5 	.word	0x08017ea5
 8017f1c:	08017ea5 	.word	0x08017ea5
 8017f20:	08017ea5 	.word	0x08017ea5
 8017f24:	08018003 	.word	0x08018003
 8017f28:	08017fd1 	.word	0x08017fd1
 8017f2c:	08017f77 	.word	0x08017f77
 8017f30:	08017ea5 	.word	0x08017ea5
 8017f34:	08017ea5 	.word	0x08017ea5
 8017f38:	08017fff 	.word	0x08017fff
 8017f3c:	08017ea5 	.word	0x08017ea5
 8017f40:	08017fd9 	.word	0x08017fd9
 8017f44:	08017ea5 	.word	0x08017ea5
 8017f48:	08017ea5 	.word	0x08017ea5
 8017f4c:	08017f7f 	.word	0x08017f7f
 8017f50:	3b45      	subs	r3, #69	; 0x45
 8017f52:	2b02      	cmp	r3, #2
 8017f54:	d8a6      	bhi.n	8017ea4 <__ssvfiscanf_r+0xec>
 8017f56:	2305      	movs	r3, #5
 8017f58:	e01f      	b.n	8017f9a <__ssvfiscanf_r+0x1e2>
 8017f5a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017f5c:	4621      	mov	r1, r4
 8017f5e:	4630      	mov	r0, r6
 8017f60:	4798      	blx	r3
 8017f62:	2800      	cmp	r0, #0
 8017f64:	f43f af68 	beq.w	8017e38 <__ssvfiscanf_r+0x80>
 8017f68:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017f6a:	2800      	cmp	r0, #0
 8017f6c:	f040 808d 	bne.w	801808a <__ssvfiscanf_r+0x2d2>
 8017f70:	f04f 30ff 	mov.w	r0, #4294967295
 8017f74:	e08f      	b.n	8018096 <__ssvfiscanf_r+0x2de>
 8017f76:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017f78:	f042 0220 	orr.w	r2, r2, #32
 8017f7c:	9241      	str	r2, [sp, #260]	; 0x104
 8017f7e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017f80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017f84:	9241      	str	r2, [sp, #260]	; 0x104
 8017f86:	2210      	movs	r2, #16
 8017f88:	2b6f      	cmp	r3, #111	; 0x6f
 8017f8a:	9242      	str	r2, [sp, #264]	; 0x108
 8017f8c:	bf34      	ite	cc
 8017f8e:	2303      	movcc	r3, #3
 8017f90:	2304      	movcs	r3, #4
 8017f92:	e002      	b.n	8017f9a <__ssvfiscanf_r+0x1e2>
 8017f94:	2300      	movs	r3, #0
 8017f96:	9342      	str	r3, [sp, #264]	; 0x108
 8017f98:	2303      	movs	r3, #3
 8017f9a:	9347      	str	r3, [sp, #284]	; 0x11c
 8017f9c:	6863      	ldr	r3, [r4, #4]
 8017f9e:	2b00      	cmp	r3, #0
 8017fa0:	dd3d      	ble.n	801801e <__ssvfiscanf_r+0x266>
 8017fa2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017fa4:	0659      	lsls	r1, r3, #25
 8017fa6:	d404      	bmi.n	8017fb2 <__ssvfiscanf_r+0x1fa>
 8017fa8:	6823      	ldr	r3, [r4, #0]
 8017faa:	781a      	ldrb	r2, [r3, #0]
 8017fac:	5cba      	ldrb	r2, [r7, r2]
 8017fae:	0712      	lsls	r2, r2, #28
 8017fb0:	d43c      	bmi.n	801802c <__ssvfiscanf_r+0x274>
 8017fb2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8017fb4:	2b02      	cmp	r3, #2
 8017fb6:	dc4b      	bgt.n	8018050 <__ssvfiscanf_r+0x298>
 8017fb8:	466b      	mov	r3, sp
 8017fba:	4622      	mov	r2, r4
 8017fbc:	a941      	add	r1, sp, #260	; 0x104
 8017fbe:	4630      	mov	r0, r6
 8017fc0:	f000 fa02 	bl	80183c8 <_scanf_chars>
 8017fc4:	2801      	cmp	r0, #1
 8017fc6:	d06a      	beq.n	801809e <__ssvfiscanf_r+0x2e6>
 8017fc8:	2802      	cmp	r0, #2
 8017fca:	f47f af1c 	bne.w	8017e06 <__ssvfiscanf_r+0x4e>
 8017fce:	e7cb      	b.n	8017f68 <__ssvfiscanf_r+0x1b0>
 8017fd0:	2308      	movs	r3, #8
 8017fd2:	9342      	str	r3, [sp, #264]	; 0x108
 8017fd4:	2304      	movs	r3, #4
 8017fd6:	e7e0      	b.n	8017f9a <__ssvfiscanf_r+0x1e2>
 8017fd8:	220a      	movs	r2, #10
 8017fda:	e7d5      	b.n	8017f88 <__ssvfiscanf_r+0x1d0>
 8017fdc:	4629      	mov	r1, r5
 8017fde:	4640      	mov	r0, r8
 8017fe0:	f000 fb40 	bl	8018664 <__sccl>
 8017fe4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017fea:	9341      	str	r3, [sp, #260]	; 0x104
 8017fec:	4605      	mov	r5, r0
 8017fee:	2301      	movs	r3, #1
 8017ff0:	e7d3      	b.n	8017f9a <__ssvfiscanf_r+0x1e2>
 8017ff2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017ff8:	9341      	str	r3, [sp, #260]	; 0x104
 8017ffa:	2300      	movs	r3, #0
 8017ffc:	e7cd      	b.n	8017f9a <__ssvfiscanf_r+0x1e2>
 8017ffe:	2302      	movs	r3, #2
 8018000:	e7cb      	b.n	8017f9a <__ssvfiscanf_r+0x1e2>
 8018002:	9841      	ldr	r0, [sp, #260]	; 0x104
 8018004:	06c3      	lsls	r3, r0, #27
 8018006:	f53f aefe 	bmi.w	8017e06 <__ssvfiscanf_r+0x4e>
 801800a:	9b00      	ldr	r3, [sp, #0]
 801800c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801800e:	1d19      	adds	r1, r3, #4
 8018010:	9100      	str	r1, [sp, #0]
 8018012:	681b      	ldr	r3, [r3, #0]
 8018014:	07c0      	lsls	r0, r0, #31
 8018016:	bf4c      	ite	mi
 8018018:	801a      	strhmi	r2, [r3, #0]
 801801a:	601a      	strpl	r2, [r3, #0]
 801801c:	e6f3      	b.n	8017e06 <__ssvfiscanf_r+0x4e>
 801801e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018020:	4621      	mov	r1, r4
 8018022:	4630      	mov	r0, r6
 8018024:	4798      	blx	r3
 8018026:	2800      	cmp	r0, #0
 8018028:	d0bb      	beq.n	8017fa2 <__ssvfiscanf_r+0x1ea>
 801802a:	e79d      	b.n	8017f68 <__ssvfiscanf_r+0x1b0>
 801802c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801802e:	3201      	adds	r2, #1
 8018030:	9245      	str	r2, [sp, #276]	; 0x114
 8018032:	6862      	ldr	r2, [r4, #4]
 8018034:	3a01      	subs	r2, #1
 8018036:	2a00      	cmp	r2, #0
 8018038:	6062      	str	r2, [r4, #4]
 801803a:	dd02      	ble.n	8018042 <__ssvfiscanf_r+0x28a>
 801803c:	3301      	adds	r3, #1
 801803e:	6023      	str	r3, [r4, #0]
 8018040:	e7b2      	b.n	8017fa8 <__ssvfiscanf_r+0x1f0>
 8018042:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018044:	4621      	mov	r1, r4
 8018046:	4630      	mov	r0, r6
 8018048:	4798      	blx	r3
 801804a:	2800      	cmp	r0, #0
 801804c:	d0ac      	beq.n	8017fa8 <__ssvfiscanf_r+0x1f0>
 801804e:	e78b      	b.n	8017f68 <__ssvfiscanf_r+0x1b0>
 8018050:	2b04      	cmp	r3, #4
 8018052:	dc0f      	bgt.n	8018074 <__ssvfiscanf_r+0x2bc>
 8018054:	466b      	mov	r3, sp
 8018056:	4622      	mov	r2, r4
 8018058:	a941      	add	r1, sp, #260	; 0x104
 801805a:	4630      	mov	r0, r6
 801805c:	f000 fa0e 	bl	801847c <_scanf_i>
 8018060:	e7b0      	b.n	8017fc4 <__ssvfiscanf_r+0x20c>
 8018062:	bf00      	nop
 8018064:	08017d05 	.word	0x08017d05
 8018068:	08017d7f 	.word	0x08017d7f
 801806c:	08018d2f 	.word	0x08018d2f
 8018070:	08018ce6 	.word	0x08018ce6
 8018074:	4b0b      	ldr	r3, [pc, #44]	; (80180a4 <__ssvfiscanf_r+0x2ec>)
 8018076:	2b00      	cmp	r3, #0
 8018078:	f43f aec5 	beq.w	8017e06 <__ssvfiscanf_r+0x4e>
 801807c:	466b      	mov	r3, sp
 801807e:	4622      	mov	r2, r4
 8018080:	a941      	add	r1, sp, #260	; 0x104
 8018082:	4630      	mov	r0, r6
 8018084:	f3af 8000 	nop.w
 8018088:	e79c      	b.n	8017fc4 <__ssvfiscanf_r+0x20c>
 801808a:	89a3      	ldrh	r3, [r4, #12]
 801808c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8018090:	bf18      	it	ne
 8018092:	f04f 30ff 	movne.w	r0, #4294967295
 8018096:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801809a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801809e:	9844      	ldr	r0, [sp, #272]	; 0x110
 80180a0:	e7f9      	b.n	8018096 <__ssvfiscanf_r+0x2de>
 80180a2:	bf00      	nop
 80180a4:	00000000 	.word	0x00000000

080180a8 <_printf_common>:
 80180a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80180ac:	4616      	mov	r6, r2
 80180ae:	4699      	mov	r9, r3
 80180b0:	688a      	ldr	r2, [r1, #8]
 80180b2:	690b      	ldr	r3, [r1, #16]
 80180b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80180b8:	4293      	cmp	r3, r2
 80180ba:	bfb8      	it	lt
 80180bc:	4613      	movlt	r3, r2
 80180be:	6033      	str	r3, [r6, #0]
 80180c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80180c4:	4607      	mov	r7, r0
 80180c6:	460c      	mov	r4, r1
 80180c8:	b10a      	cbz	r2, 80180ce <_printf_common+0x26>
 80180ca:	3301      	adds	r3, #1
 80180cc:	6033      	str	r3, [r6, #0]
 80180ce:	6823      	ldr	r3, [r4, #0]
 80180d0:	0699      	lsls	r1, r3, #26
 80180d2:	bf42      	ittt	mi
 80180d4:	6833      	ldrmi	r3, [r6, #0]
 80180d6:	3302      	addmi	r3, #2
 80180d8:	6033      	strmi	r3, [r6, #0]
 80180da:	6825      	ldr	r5, [r4, #0]
 80180dc:	f015 0506 	ands.w	r5, r5, #6
 80180e0:	d106      	bne.n	80180f0 <_printf_common+0x48>
 80180e2:	f104 0a19 	add.w	sl, r4, #25
 80180e6:	68e3      	ldr	r3, [r4, #12]
 80180e8:	6832      	ldr	r2, [r6, #0]
 80180ea:	1a9b      	subs	r3, r3, r2
 80180ec:	42ab      	cmp	r3, r5
 80180ee:	dc26      	bgt.n	801813e <_printf_common+0x96>
 80180f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80180f4:	1e13      	subs	r3, r2, #0
 80180f6:	6822      	ldr	r2, [r4, #0]
 80180f8:	bf18      	it	ne
 80180fa:	2301      	movne	r3, #1
 80180fc:	0692      	lsls	r2, r2, #26
 80180fe:	d42b      	bmi.n	8018158 <_printf_common+0xb0>
 8018100:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018104:	4649      	mov	r1, r9
 8018106:	4638      	mov	r0, r7
 8018108:	47c0      	blx	r8
 801810a:	3001      	adds	r0, #1
 801810c:	d01e      	beq.n	801814c <_printf_common+0xa4>
 801810e:	6823      	ldr	r3, [r4, #0]
 8018110:	6922      	ldr	r2, [r4, #16]
 8018112:	f003 0306 	and.w	r3, r3, #6
 8018116:	2b04      	cmp	r3, #4
 8018118:	bf02      	ittt	eq
 801811a:	68e5      	ldreq	r5, [r4, #12]
 801811c:	6833      	ldreq	r3, [r6, #0]
 801811e:	1aed      	subeq	r5, r5, r3
 8018120:	68a3      	ldr	r3, [r4, #8]
 8018122:	bf0c      	ite	eq
 8018124:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018128:	2500      	movne	r5, #0
 801812a:	4293      	cmp	r3, r2
 801812c:	bfc4      	itt	gt
 801812e:	1a9b      	subgt	r3, r3, r2
 8018130:	18ed      	addgt	r5, r5, r3
 8018132:	2600      	movs	r6, #0
 8018134:	341a      	adds	r4, #26
 8018136:	42b5      	cmp	r5, r6
 8018138:	d11a      	bne.n	8018170 <_printf_common+0xc8>
 801813a:	2000      	movs	r0, #0
 801813c:	e008      	b.n	8018150 <_printf_common+0xa8>
 801813e:	2301      	movs	r3, #1
 8018140:	4652      	mov	r2, sl
 8018142:	4649      	mov	r1, r9
 8018144:	4638      	mov	r0, r7
 8018146:	47c0      	blx	r8
 8018148:	3001      	adds	r0, #1
 801814a:	d103      	bne.n	8018154 <_printf_common+0xac>
 801814c:	f04f 30ff 	mov.w	r0, #4294967295
 8018150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018154:	3501      	adds	r5, #1
 8018156:	e7c6      	b.n	80180e6 <_printf_common+0x3e>
 8018158:	18e1      	adds	r1, r4, r3
 801815a:	1c5a      	adds	r2, r3, #1
 801815c:	2030      	movs	r0, #48	; 0x30
 801815e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018162:	4422      	add	r2, r4
 8018164:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018168:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801816c:	3302      	adds	r3, #2
 801816e:	e7c7      	b.n	8018100 <_printf_common+0x58>
 8018170:	2301      	movs	r3, #1
 8018172:	4622      	mov	r2, r4
 8018174:	4649      	mov	r1, r9
 8018176:	4638      	mov	r0, r7
 8018178:	47c0      	blx	r8
 801817a:	3001      	adds	r0, #1
 801817c:	d0e6      	beq.n	801814c <_printf_common+0xa4>
 801817e:	3601      	adds	r6, #1
 8018180:	e7d9      	b.n	8018136 <_printf_common+0x8e>
	...

08018184 <_printf_i>:
 8018184:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018188:	7e0f      	ldrb	r7, [r1, #24]
 801818a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801818c:	2f78      	cmp	r7, #120	; 0x78
 801818e:	4691      	mov	r9, r2
 8018190:	4680      	mov	r8, r0
 8018192:	460c      	mov	r4, r1
 8018194:	469a      	mov	sl, r3
 8018196:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801819a:	d807      	bhi.n	80181ac <_printf_i+0x28>
 801819c:	2f62      	cmp	r7, #98	; 0x62
 801819e:	d80a      	bhi.n	80181b6 <_printf_i+0x32>
 80181a0:	2f00      	cmp	r7, #0
 80181a2:	f000 80d4 	beq.w	801834e <_printf_i+0x1ca>
 80181a6:	2f58      	cmp	r7, #88	; 0x58
 80181a8:	f000 80c0 	beq.w	801832c <_printf_i+0x1a8>
 80181ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80181b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80181b4:	e03a      	b.n	801822c <_printf_i+0xa8>
 80181b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80181ba:	2b15      	cmp	r3, #21
 80181bc:	d8f6      	bhi.n	80181ac <_printf_i+0x28>
 80181be:	a101      	add	r1, pc, #4	; (adr r1, 80181c4 <_printf_i+0x40>)
 80181c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80181c4:	0801821d 	.word	0x0801821d
 80181c8:	08018231 	.word	0x08018231
 80181cc:	080181ad 	.word	0x080181ad
 80181d0:	080181ad 	.word	0x080181ad
 80181d4:	080181ad 	.word	0x080181ad
 80181d8:	080181ad 	.word	0x080181ad
 80181dc:	08018231 	.word	0x08018231
 80181e0:	080181ad 	.word	0x080181ad
 80181e4:	080181ad 	.word	0x080181ad
 80181e8:	080181ad 	.word	0x080181ad
 80181ec:	080181ad 	.word	0x080181ad
 80181f0:	08018335 	.word	0x08018335
 80181f4:	0801825d 	.word	0x0801825d
 80181f8:	080182ef 	.word	0x080182ef
 80181fc:	080181ad 	.word	0x080181ad
 8018200:	080181ad 	.word	0x080181ad
 8018204:	08018357 	.word	0x08018357
 8018208:	080181ad 	.word	0x080181ad
 801820c:	0801825d 	.word	0x0801825d
 8018210:	080181ad 	.word	0x080181ad
 8018214:	080181ad 	.word	0x080181ad
 8018218:	080182f7 	.word	0x080182f7
 801821c:	682b      	ldr	r3, [r5, #0]
 801821e:	1d1a      	adds	r2, r3, #4
 8018220:	681b      	ldr	r3, [r3, #0]
 8018222:	602a      	str	r2, [r5, #0]
 8018224:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018228:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801822c:	2301      	movs	r3, #1
 801822e:	e09f      	b.n	8018370 <_printf_i+0x1ec>
 8018230:	6820      	ldr	r0, [r4, #0]
 8018232:	682b      	ldr	r3, [r5, #0]
 8018234:	0607      	lsls	r7, r0, #24
 8018236:	f103 0104 	add.w	r1, r3, #4
 801823a:	6029      	str	r1, [r5, #0]
 801823c:	d501      	bpl.n	8018242 <_printf_i+0xbe>
 801823e:	681e      	ldr	r6, [r3, #0]
 8018240:	e003      	b.n	801824a <_printf_i+0xc6>
 8018242:	0646      	lsls	r6, r0, #25
 8018244:	d5fb      	bpl.n	801823e <_printf_i+0xba>
 8018246:	f9b3 6000 	ldrsh.w	r6, [r3]
 801824a:	2e00      	cmp	r6, #0
 801824c:	da03      	bge.n	8018256 <_printf_i+0xd2>
 801824e:	232d      	movs	r3, #45	; 0x2d
 8018250:	4276      	negs	r6, r6
 8018252:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018256:	485a      	ldr	r0, [pc, #360]	; (80183c0 <_printf_i+0x23c>)
 8018258:	230a      	movs	r3, #10
 801825a:	e012      	b.n	8018282 <_printf_i+0xfe>
 801825c:	682b      	ldr	r3, [r5, #0]
 801825e:	6820      	ldr	r0, [r4, #0]
 8018260:	1d19      	adds	r1, r3, #4
 8018262:	6029      	str	r1, [r5, #0]
 8018264:	0605      	lsls	r5, r0, #24
 8018266:	d501      	bpl.n	801826c <_printf_i+0xe8>
 8018268:	681e      	ldr	r6, [r3, #0]
 801826a:	e002      	b.n	8018272 <_printf_i+0xee>
 801826c:	0641      	lsls	r1, r0, #25
 801826e:	d5fb      	bpl.n	8018268 <_printf_i+0xe4>
 8018270:	881e      	ldrh	r6, [r3, #0]
 8018272:	4853      	ldr	r0, [pc, #332]	; (80183c0 <_printf_i+0x23c>)
 8018274:	2f6f      	cmp	r7, #111	; 0x6f
 8018276:	bf0c      	ite	eq
 8018278:	2308      	moveq	r3, #8
 801827a:	230a      	movne	r3, #10
 801827c:	2100      	movs	r1, #0
 801827e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018282:	6865      	ldr	r5, [r4, #4]
 8018284:	60a5      	str	r5, [r4, #8]
 8018286:	2d00      	cmp	r5, #0
 8018288:	bfa2      	ittt	ge
 801828a:	6821      	ldrge	r1, [r4, #0]
 801828c:	f021 0104 	bicge.w	r1, r1, #4
 8018290:	6021      	strge	r1, [r4, #0]
 8018292:	b90e      	cbnz	r6, 8018298 <_printf_i+0x114>
 8018294:	2d00      	cmp	r5, #0
 8018296:	d04b      	beq.n	8018330 <_printf_i+0x1ac>
 8018298:	4615      	mov	r5, r2
 801829a:	fbb6 f1f3 	udiv	r1, r6, r3
 801829e:	fb03 6711 	mls	r7, r3, r1, r6
 80182a2:	5dc7      	ldrb	r7, [r0, r7]
 80182a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80182a8:	4637      	mov	r7, r6
 80182aa:	42bb      	cmp	r3, r7
 80182ac:	460e      	mov	r6, r1
 80182ae:	d9f4      	bls.n	801829a <_printf_i+0x116>
 80182b0:	2b08      	cmp	r3, #8
 80182b2:	d10b      	bne.n	80182cc <_printf_i+0x148>
 80182b4:	6823      	ldr	r3, [r4, #0]
 80182b6:	07de      	lsls	r6, r3, #31
 80182b8:	d508      	bpl.n	80182cc <_printf_i+0x148>
 80182ba:	6923      	ldr	r3, [r4, #16]
 80182bc:	6861      	ldr	r1, [r4, #4]
 80182be:	4299      	cmp	r1, r3
 80182c0:	bfde      	ittt	le
 80182c2:	2330      	movle	r3, #48	; 0x30
 80182c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80182c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80182cc:	1b52      	subs	r2, r2, r5
 80182ce:	6122      	str	r2, [r4, #16]
 80182d0:	f8cd a000 	str.w	sl, [sp]
 80182d4:	464b      	mov	r3, r9
 80182d6:	aa03      	add	r2, sp, #12
 80182d8:	4621      	mov	r1, r4
 80182da:	4640      	mov	r0, r8
 80182dc:	f7ff fee4 	bl	80180a8 <_printf_common>
 80182e0:	3001      	adds	r0, #1
 80182e2:	d14a      	bne.n	801837a <_printf_i+0x1f6>
 80182e4:	f04f 30ff 	mov.w	r0, #4294967295
 80182e8:	b004      	add	sp, #16
 80182ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80182ee:	6823      	ldr	r3, [r4, #0]
 80182f0:	f043 0320 	orr.w	r3, r3, #32
 80182f4:	6023      	str	r3, [r4, #0]
 80182f6:	4833      	ldr	r0, [pc, #204]	; (80183c4 <_printf_i+0x240>)
 80182f8:	2778      	movs	r7, #120	; 0x78
 80182fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80182fe:	6823      	ldr	r3, [r4, #0]
 8018300:	6829      	ldr	r1, [r5, #0]
 8018302:	061f      	lsls	r7, r3, #24
 8018304:	f851 6b04 	ldr.w	r6, [r1], #4
 8018308:	d402      	bmi.n	8018310 <_printf_i+0x18c>
 801830a:	065f      	lsls	r7, r3, #25
 801830c:	bf48      	it	mi
 801830e:	b2b6      	uxthmi	r6, r6
 8018310:	07df      	lsls	r7, r3, #31
 8018312:	bf48      	it	mi
 8018314:	f043 0320 	orrmi.w	r3, r3, #32
 8018318:	6029      	str	r1, [r5, #0]
 801831a:	bf48      	it	mi
 801831c:	6023      	strmi	r3, [r4, #0]
 801831e:	b91e      	cbnz	r6, 8018328 <_printf_i+0x1a4>
 8018320:	6823      	ldr	r3, [r4, #0]
 8018322:	f023 0320 	bic.w	r3, r3, #32
 8018326:	6023      	str	r3, [r4, #0]
 8018328:	2310      	movs	r3, #16
 801832a:	e7a7      	b.n	801827c <_printf_i+0xf8>
 801832c:	4824      	ldr	r0, [pc, #144]	; (80183c0 <_printf_i+0x23c>)
 801832e:	e7e4      	b.n	80182fa <_printf_i+0x176>
 8018330:	4615      	mov	r5, r2
 8018332:	e7bd      	b.n	80182b0 <_printf_i+0x12c>
 8018334:	682b      	ldr	r3, [r5, #0]
 8018336:	6826      	ldr	r6, [r4, #0]
 8018338:	6961      	ldr	r1, [r4, #20]
 801833a:	1d18      	adds	r0, r3, #4
 801833c:	6028      	str	r0, [r5, #0]
 801833e:	0635      	lsls	r5, r6, #24
 8018340:	681b      	ldr	r3, [r3, #0]
 8018342:	d501      	bpl.n	8018348 <_printf_i+0x1c4>
 8018344:	6019      	str	r1, [r3, #0]
 8018346:	e002      	b.n	801834e <_printf_i+0x1ca>
 8018348:	0670      	lsls	r0, r6, #25
 801834a:	d5fb      	bpl.n	8018344 <_printf_i+0x1c0>
 801834c:	8019      	strh	r1, [r3, #0]
 801834e:	2300      	movs	r3, #0
 8018350:	6123      	str	r3, [r4, #16]
 8018352:	4615      	mov	r5, r2
 8018354:	e7bc      	b.n	80182d0 <_printf_i+0x14c>
 8018356:	682b      	ldr	r3, [r5, #0]
 8018358:	1d1a      	adds	r2, r3, #4
 801835a:	602a      	str	r2, [r5, #0]
 801835c:	681d      	ldr	r5, [r3, #0]
 801835e:	6862      	ldr	r2, [r4, #4]
 8018360:	2100      	movs	r1, #0
 8018362:	4628      	mov	r0, r5
 8018364:	f7e7 ffec 	bl	8000340 <memchr>
 8018368:	b108      	cbz	r0, 801836e <_printf_i+0x1ea>
 801836a:	1b40      	subs	r0, r0, r5
 801836c:	6060      	str	r0, [r4, #4]
 801836e:	6863      	ldr	r3, [r4, #4]
 8018370:	6123      	str	r3, [r4, #16]
 8018372:	2300      	movs	r3, #0
 8018374:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018378:	e7aa      	b.n	80182d0 <_printf_i+0x14c>
 801837a:	6923      	ldr	r3, [r4, #16]
 801837c:	462a      	mov	r2, r5
 801837e:	4649      	mov	r1, r9
 8018380:	4640      	mov	r0, r8
 8018382:	47d0      	blx	sl
 8018384:	3001      	adds	r0, #1
 8018386:	d0ad      	beq.n	80182e4 <_printf_i+0x160>
 8018388:	6823      	ldr	r3, [r4, #0]
 801838a:	079b      	lsls	r3, r3, #30
 801838c:	d413      	bmi.n	80183b6 <_printf_i+0x232>
 801838e:	68e0      	ldr	r0, [r4, #12]
 8018390:	9b03      	ldr	r3, [sp, #12]
 8018392:	4298      	cmp	r0, r3
 8018394:	bfb8      	it	lt
 8018396:	4618      	movlt	r0, r3
 8018398:	e7a6      	b.n	80182e8 <_printf_i+0x164>
 801839a:	2301      	movs	r3, #1
 801839c:	4632      	mov	r2, r6
 801839e:	4649      	mov	r1, r9
 80183a0:	4640      	mov	r0, r8
 80183a2:	47d0      	blx	sl
 80183a4:	3001      	adds	r0, #1
 80183a6:	d09d      	beq.n	80182e4 <_printf_i+0x160>
 80183a8:	3501      	adds	r5, #1
 80183aa:	68e3      	ldr	r3, [r4, #12]
 80183ac:	9903      	ldr	r1, [sp, #12]
 80183ae:	1a5b      	subs	r3, r3, r1
 80183b0:	42ab      	cmp	r3, r5
 80183b2:	dcf2      	bgt.n	801839a <_printf_i+0x216>
 80183b4:	e7eb      	b.n	801838e <_printf_i+0x20a>
 80183b6:	2500      	movs	r5, #0
 80183b8:	f104 0619 	add.w	r6, r4, #25
 80183bc:	e7f5      	b.n	80183aa <_printf_i+0x226>
 80183be:	bf00      	nop
 80183c0:	08018cf1 	.word	0x08018cf1
 80183c4:	08018d02 	.word	0x08018d02

080183c8 <_scanf_chars>:
 80183c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80183cc:	4615      	mov	r5, r2
 80183ce:	688a      	ldr	r2, [r1, #8]
 80183d0:	4680      	mov	r8, r0
 80183d2:	460c      	mov	r4, r1
 80183d4:	b932      	cbnz	r2, 80183e4 <_scanf_chars+0x1c>
 80183d6:	698a      	ldr	r2, [r1, #24]
 80183d8:	2a00      	cmp	r2, #0
 80183da:	bf0c      	ite	eq
 80183dc:	2201      	moveq	r2, #1
 80183de:	f04f 32ff 	movne.w	r2, #4294967295
 80183e2:	608a      	str	r2, [r1, #8]
 80183e4:	6822      	ldr	r2, [r4, #0]
 80183e6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8018478 <_scanf_chars+0xb0>
 80183ea:	06d1      	lsls	r1, r2, #27
 80183ec:	bf5f      	itttt	pl
 80183ee:	681a      	ldrpl	r2, [r3, #0]
 80183f0:	1d11      	addpl	r1, r2, #4
 80183f2:	6019      	strpl	r1, [r3, #0]
 80183f4:	6816      	ldrpl	r6, [r2, #0]
 80183f6:	2700      	movs	r7, #0
 80183f8:	69a0      	ldr	r0, [r4, #24]
 80183fa:	b188      	cbz	r0, 8018420 <_scanf_chars+0x58>
 80183fc:	2801      	cmp	r0, #1
 80183fe:	d107      	bne.n	8018410 <_scanf_chars+0x48>
 8018400:	682a      	ldr	r2, [r5, #0]
 8018402:	7811      	ldrb	r1, [r2, #0]
 8018404:	6962      	ldr	r2, [r4, #20]
 8018406:	5c52      	ldrb	r2, [r2, r1]
 8018408:	b952      	cbnz	r2, 8018420 <_scanf_chars+0x58>
 801840a:	2f00      	cmp	r7, #0
 801840c:	d031      	beq.n	8018472 <_scanf_chars+0xaa>
 801840e:	e022      	b.n	8018456 <_scanf_chars+0x8e>
 8018410:	2802      	cmp	r0, #2
 8018412:	d120      	bne.n	8018456 <_scanf_chars+0x8e>
 8018414:	682b      	ldr	r3, [r5, #0]
 8018416:	781b      	ldrb	r3, [r3, #0]
 8018418:	f819 3003 	ldrb.w	r3, [r9, r3]
 801841c:	071b      	lsls	r3, r3, #28
 801841e:	d41a      	bmi.n	8018456 <_scanf_chars+0x8e>
 8018420:	6823      	ldr	r3, [r4, #0]
 8018422:	06da      	lsls	r2, r3, #27
 8018424:	bf5e      	ittt	pl
 8018426:	682b      	ldrpl	r3, [r5, #0]
 8018428:	781b      	ldrbpl	r3, [r3, #0]
 801842a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801842e:	682a      	ldr	r2, [r5, #0]
 8018430:	686b      	ldr	r3, [r5, #4]
 8018432:	3201      	adds	r2, #1
 8018434:	602a      	str	r2, [r5, #0]
 8018436:	68a2      	ldr	r2, [r4, #8]
 8018438:	3b01      	subs	r3, #1
 801843a:	3a01      	subs	r2, #1
 801843c:	606b      	str	r3, [r5, #4]
 801843e:	3701      	adds	r7, #1
 8018440:	60a2      	str	r2, [r4, #8]
 8018442:	b142      	cbz	r2, 8018456 <_scanf_chars+0x8e>
 8018444:	2b00      	cmp	r3, #0
 8018446:	dcd7      	bgt.n	80183f8 <_scanf_chars+0x30>
 8018448:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801844c:	4629      	mov	r1, r5
 801844e:	4640      	mov	r0, r8
 8018450:	4798      	blx	r3
 8018452:	2800      	cmp	r0, #0
 8018454:	d0d0      	beq.n	80183f8 <_scanf_chars+0x30>
 8018456:	6823      	ldr	r3, [r4, #0]
 8018458:	f013 0310 	ands.w	r3, r3, #16
 801845c:	d105      	bne.n	801846a <_scanf_chars+0xa2>
 801845e:	68e2      	ldr	r2, [r4, #12]
 8018460:	3201      	adds	r2, #1
 8018462:	60e2      	str	r2, [r4, #12]
 8018464:	69a2      	ldr	r2, [r4, #24]
 8018466:	b102      	cbz	r2, 801846a <_scanf_chars+0xa2>
 8018468:	7033      	strb	r3, [r6, #0]
 801846a:	6923      	ldr	r3, [r4, #16]
 801846c:	443b      	add	r3, r7
 801846e:	6123      	str	r3, [r4, #16]
 8018470:	2000      	movs	r0, #0
 8018472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018476:	bf00      	nop
 8018478:	08018d2f 	.word	0x08018d2f

0801847c <_scanf_i>:
 801847c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018480:	4698      	mov	r8, r3
 8018482:	4b74      	ldr	r3, [pc, #464]	; (8018654 <_scanf_i+0x1d8>)
 8018484:	460c      	mov	r4, r1
 8018486:	4682      	mov	sl, r0
 8018488:	4616      	mov	r6, r2
 801848a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801848e:	b087      	sub	sp, #28
 8018490:	ab03      	add	r3, sp, #12
 8018492:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8018496:	4b70      	ldr	r3, [pc, #448]	; (8018658 <_scanf_i+0x1dc>)
 8018498:	69a1      	ldr	r1, [r4, #24]
 801849a:	4a70      	ldr	r2, [pc, #448]	; (801865c <_scanf_i+0x1e0>)
 801849c:	2903      	cmp	r1, #3
 801849e:	bf18      	it	ne
 80184a0:	461a      	movne	r2, r3
 80184a2:	68a3      	ldr	r3, [r4, #8]
 80184a4:	9201      	str	r2, [sp, #4]
 80184a6:	1e5a      	subs	r2, r3, #1
 80184a8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80184ac:	bf88      	it	hi
 80184ae:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80184b2:	4627      	mov	r7, r4
 80184b4:	bf82      	ittt	hi
 80184b6:	eb03 0905 	addhi.w	r9, r3, r5
 80184ba:	f240 135d 	movwhi	r3, #349	; 0x15d
 80184be:	60a3      	strhi	r3, [r4, #8]
 80184c0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80184c4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80184c8:	bf98      	it	ls
 80184ca:	f04f 0900 	movls.w	r9, #0
 80184ce:	6023      	str	r3, [r4, #0]
 80184d0:	463d      	mov	r5, r7
 80184d2:	f04f 0b00 	mov.w	fp, #0
 80184d6:	6831      	ldr	r1, [r6, #0]
 80184d8:	ab03      	add	r3, sp, #12
 80184da:	7809      	ldrb	r1, [r1, #0]
 80184dc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80184e0:	2202      	movs	r2, #2
 80184e2:	f7e7 ff2d 	bl	8000340 <memchr>
 80184e6:	b328      	cbz	r0, 8018534 <_scanf_i+0xb8>
 80184e8:	f1bb 0f01 	cmp.w	fp, #1
 80184ec:	d159      	bne.n	80185a2 <_scanf_i+0x126>
 80184ee:	6862      	ldr	r2, [r4, #4]
 80184f0:	b92a      	cbnz	r2, 80184fe <_scanf_i+0x82>
 80184f2:	6822      	ldr	r2, [r4, #0]
 80184f4:	2308      	movs	r3, #8
 80184f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80184fa:	6063      	str	r3, [r4, #4]
 80184fc:	6022      	str	r2, [r4, #0]
 80184fe:	6822      	ldr	r2, [r4, #0]
 8018500:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8018504:	6022      	str	r2, [r4, #0]
 8018506:	68a2      	ldr	r2, [r4, #8]
 8018508:	1e51      	subs	r1, r2, #1
 801850a:	60a1      	str	r1, [r4, #8]
 801850c:	b192      	cbz	r2, 8018534 <_scanf_i+0xb8>
 801850e:	6832      	ldr	r2, [r6, #0]
 8018510:	1c51      	adds	r1, r2, #1
 8018512:	6031      	str	r1, [r6, #0]
 8018514:	7812      	ldrb	r2, [r2, #0]
 8018516:	f805 2b01 	strb.w	r2, [r5], #1
 801851a:	6872      	ldr	r2, [r6, #4]
 801851c:	3a01      	subs	r2, #1
 801851e:	2a00      	cmp	r2, #0
 8018520:	6072      	str	r2, [r6, #4]
 8018522:	dc07      	bgt.n	8018534 <_scanf_i+0xb8>
 8018524:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8018528:	4631      	mov	r1, r6
 801852a:	4650      	mov	r0, sl
 801852c:	4790      	blx	r2
 801852e:	2800      	cmp	r0, #0
 8018530:	f040 8085 	bne.w	801863e <_scanf_i+0x1c2>
 8018534:	f10b 0b01 	add.w	fp, fp, #1
 8018538:	f1bb 0f03 	cmp.w	fp, #3
 801853c:	d1cb      	bne.n	80184d6 <_scanf_i+0x5a>
 801853e:	6863      	ldr	r3, [r4, #4]
 8018540:	b90b      	cbnz	r3, 8018546 <_scanf_i+0xca>
 8018542:	230a      	movs	r3, #10
 8018544:	6063      	str	r3, [r4, #4]
 8018546:	6863      	ldr	r3, [r4, #4]
 8018548:	4945      	ldr	r1, [pc, #276]	; (8018660 <_scanf_i+0x1e4>)
 801854a:	6960      	ldr	r0, [r4, #20]
 801854c:	1ac9      	subs	r1, r1, r3
 801854e:	f000 f889 	bl	8018664 <__sccl>
 8018552:	f04f 0b00 	mov.w	fp, #0
 8018556:	68a3      	ldr	r3, [r4, #8]
 8018558:	6822      	ldr	r2, [r4, #0]
 801855a:	2b00      	cmp	r3, #0
 801855c:	d03d      	beq.n	80185da <_scanf_i+0x15e>
 801855e:	6831      	ldr	r1, [r6, #0]
 8018560:	6960      	ldr	r0, [r4, #20]
 8018562:	f891 c000 	ldrb.w	ip, [r1]
 8018566:	f810 000c 	ldrb.w	r0, [r0, ip]
 801856a:	2800      	cmp	r0, #0
 801856c:	d035      	beq.n	80185da <_scanf_i+0x15e>
 801856e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8018572:	d124      	bne.n	80185be <_scanf_i+0x142>
 8018574:	0510      	lsls	r0, r2, #20
 8018576:	d522      	bpl.n	80185be <_scanf_i+0x142>
 8018578:	f10b 0b01 	add.w	fp, fp, #1
 801857c:	f1b9 0f00 	cmp.w	r9, #0
 8018580:	d003      	beq.n	801858a <_scanf_i+0x10e>
 8018582:	3301      	adds	r3, #1
 8018584:	f109 39ff 	add.w	r9, r9, #4294967295
 8018588:	60a3      	str	r3, [r4, #8]
 801858a:	6873      	ldr	r3, [r6, #4]
 801858c:	3b01      	subs	r3, #1
 801858e:	2b00      	cmp	r3, #0
 8018590:	6073      	str	r3, [r6, #4]
 8018592:	dd1b      	ble.n	80185cc <_scanf_i+0x150>
 8018594:	6833      	ldr	r3, [r6, #0]
 8018596:	3301      	adds	r3, #1
 8018598:	6033      	str	r3, [r6, #0]
 801859a:	68a3      	ldr	r3, [r4, #8]
 801859c:	3b01      	subs	r3, #1
 801859e:	60a3      	str	r3, [r4, #8]
 80185a0:	e7d9      	b.n	8018556 <_scanf_i+0xda>
 80185a2:	f1bb 0f02 	cmp.w	fp, #2
 80185a6:	d1ae      	bne.n	8018506 <_scanf_i+0x8a>
 80185a8:	6822      	ldr	r2, [r4, #0]
 80185aa:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80185ae:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80185b2:	d1bf      	bne.n	8018534 <_scanf_i+0xb8>
 80185b4:	2310      	movs	r3, #16
 80185b6:	6063      	str	r3, [r4, #4]
 80185b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80185bc:	e7a2      	b.n	8018504 <_scanf_i+0x88>
 80185be:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80185c2:	6022      	str	r2, [r4, #0]
 80185c4:	780b      	ldrb	r3, [r1, #0]
 80185c6:	f805 3b01 	strb.w	r3, [r5], #1
 80185ca:	e7de      	b.n	801858a <_scanf_i+0x10e>
 80185cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80185d0:	4631      	mov	r1, r6
 80185d2:	4650      	mov	r0, sl
 80185d4:	4798      	blx	r3
 80185d6:	2800      	cmp	r0, #0
 80185d8:	d0df      	beq.n	801859a <_scanf_i+0x11e>
 80185da:	6823      	ldr	r3, [r4, #0]
 80185dc:	05d9      	lsls	r1, r3, #23
 80185de:	d50d      	bpl.n	80185fc <_scanf_i+0x180>
 80185e0:	42bd      	cmp	r5, r7
 80185e2:	d909      	bls.n	80185f8 <_scanf_i+0x17c>
 80185e4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80185e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80185ec:	4632      	mov	r2, r6
 80185ee:	4650      	mov	r0, sl
 80185f0:	4798      	blx	r3
 80185f2:	f105 39ff 	add.w	r9, r5, #4294967295
 80185f6:	464d      	mov	r5, r9
 80185f8:	42bd      	cmp	r5, r7
 80185fa:	d028      	beq.n	801864e <_scanf_i+0x1d2>
 80185fc:	6822      	ldr	r2, [r4, #0]
 80185fe:	f012 0210 	ands.w	r2, r2, #16
 8018602:	d113      	bne.n	801862c <_scanf_i+0x1b0>
 8018604:	702a      	strb	r2, [r5, #0]
 8018606:	6863      	ldr	r3, [r4, #4]
 8018608:	9e01      	ldr	r6, [sp, #4]
 801860a:	4639      	mov	r1, r7
 801860c:	4650      	mov	r0, sl
 801860e:	47b0      	blx	r6
 8018610:	f8d8 3000 	ldr.w	r3, [r8]
 8018614:	6821      	ldr	r1, [r4, #0]
 8018616:	1d1a      	adds	r2, r3, #4
 8018618:	f8c8 2000 	str.w	r2, [r8]
 801861c:	f011 0f20 	tst.w	r1, #32
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	d00f      	beq.n	8018644 <_scanf_i+0x1c8>
 8018624:	6018      	str	r0, [r3, #0]
 8018626:	68e3      	ldr	r3, [r4, #12]
 8018628:	3301      	adds	r3, #1
 801862a:	60e3      	str	r3, [r4, #12]
 801862c:	6923      	ldr	r3, [r4, #16]
 801862e:	1bed      	subs	r5, r5, r7
 8018630:	445d      	add	r5, fp
 8018632:	442b      	add	r3, r5
 8018634:	6123      	str	r3, [r4, #16]
 8018636:	2000      	movs	r0, #0
 8018638:	b007      	add	sp, #28
 801863a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801863e:	f04f 0b00 	mov.w	fp, #0
 8018642:	e7ca      	b.n	80185da <_scanf_i+0x15e>
 8018644:	07ca      	lsls	r2, r1, #31
 8018646:	bf4c      	ite	mi
 8018648:	8018      	strhmi	r0, [r3, #0]
 801864a:	6018      	strpl	r0, [r3, #0]
 801864c:	e7eb      	b.n	8018626 <_scanf_i+0x1aa>
 801864e:	2001      	movs	r0, #1
 8018650:	e7f2      	b.n	8018638 <_scanf_i+0x1bc>
 8018652:	bf00      	nop
 8018654:	08018c10 	.word	0x08018c10
 8018658:	080189ed 	.word	0x080189ed
 801865c:	08018905 	.word	0x08018905
 8018660:	08018d23 	.word	0x08018d23

08018664 <__sccl>:
 8018664:	b570      	push	{r4, r5, r6, lr}
 8018666:	780b      	ldrb	r3, [r1, #0]
 8018668:	4604      	mov	r4, r0
 801866a:	2b5e      	cmp	r3, #94	; 0x5e
 801866c:	bf0b      	itete	eq
 801866e:	784b      	ldrbeq	r3, [r1, #1]
 8018670:	1c4a      	addne	r2, r1, #1
 8018672:	1c8a      	addeq	r2, r1, #2
 8018674:	2100      	movne	r1, #0
 8018676:	bf08      	it	eq
 8018678:	2101      	moveq	r1, #1
 801867a:	3801      	subs	r0, #1
 801867c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8018680:	f800 1f01 	strb.w	r1, [r0, #1]!
 8018684:	42a8      	cmp	r0, r5
 8018686:	d1fb      	bne.n	8018680 <__sccl+0x1c>
 8018688:	b90b      	cbnz	r3, 801868e <__sccl+0x2a>
 801868a:	1e50      	subs	r0, r2, #1
 801868c:	bd70      	pop	{r4, r5, r6, pc}
 801868e:	f081 0101 	eor.w	r1, r1, #1
 8018692:	54e1      	strb	r1, [r4, r3]
 8018694:	4610      	mov	r0, r2
 8018696:	4602      	mov	r2, r0
 8018698:	f812 5b01 	ldrb.w	r5, [r2], #1
 801869c:	2d2d      	cmp	r5, #45	; 0x2d
 801869e:	d005      	beq.n	80186ac <__sccl+0x48>
 80186a0:	2d5d      	cmp	r5, #93	; 0x5d
 80186a2:	d016      	beq.n	80186d2 <__sccl+0x6e>
 80186a4:	2d00      	cmp	r5, #0
 80186a6:	d0f1      	beq.n	801868c <__sccl+0x28>
 80186a8:	462b      	mov	r3, r5
 80186aa:	e7f2      	b.n	8018692 <__sccl+0x2e>
 80186ac:	7846      	ldrb	r6, [r0, #1]
 80186ae:	2e5d      	cmp	r6, #93	; 0x5d
 80186b0:	d0fa      	beq.n	80186a8 <__sccl+0x44>
 80186b2:	42b3      	cmp	r3, r6
 80186b4:	dcf8      	bgt.n	80186a8 <__sccl+0x44>
 80186b6:	3002      	adds	r0, #2
 80186b8:	461a      	mov	r2, r3
 80186ba:	3201      	adds	r2, #1
 80186bc:	4296      	cmp	r6, r2
 80186be:	54a1      	strb	r1, [r4, r2]
 80186c0:	dcfb      	bgt.n	80186ba <__sccl+0x56>
 80186c2:	1af2      	subs	r2, r6, r3
 80186c4:	3a01      	subs	r2, #1
 80186c6:	1c5d      	adds	r5, r3, #1
 80186c8:	42b3      	cmp	r3, r6
 80186ca:	bfa8      	it	ge
 80186cc:	2200      	movge	r2, #0
 80186ce:	18ab      	adds	r3, r5, r2
 80186d0:	e7e1      	b.n	8018696 <__sccl+0x32>
 80186d2:	4610      	mov	r0, r2
 80186d4:	e7da      	b.n	801868c <__sccl+0x28>

080186d6 <__submore>:
 80186d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80186da:	460c      	mov	r4, r1
 80186dc:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80186de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80186e2:	4299      	cmp	r1, r3
 80186e4:	d11d      	bne.n	8018722 <__submore+0x4c>
 80186e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80186ea:	f7ff f927 	bl	801793c <_malloc_r>
 80186ee:	b918      	cbnz	r0, 80186f8 <__submore+0x22>
 80186f0:	f04f 30ff 	mov.w	r0, #4294967295
 80186f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80186f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80186fc:	63a3      	str	r3, [r4, #56]	; 0x38
 80186fe:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8018702:	6360      	str	r0, [r4, #52]	; 0x34
 8018704:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8018708:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801870c:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8018710:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8018714:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8018718:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801871c:	6020      	str	r0, [r4, #0]
 801871e:	2000      	movs	r0, #0
 8018720:	e7e8      	b.n	80186f4 <__submore+0x1e>
 8018722:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8018724:	0077      	lsls	r7, r6, #1
 8018726:	463a      	mov	r2, r7
 8018728:	f000 f83a 	bl	80187a0 <_realloc_r>
 801872c:	4605      	mov	r5, r0
 801872e:	2800      	cmp	r0, #0
 8018730:	d0de      	beq.n	80186f0 <__submore+0x1a>
 8018732:	eb00 0806 	add.w	r8, r0, r6
 8018736:	4601      	mov	r1, r0
 8018738:	4632      	mov	r2, r6
 801873a:	4640      	mov	r0, r8
 801873c:	f7ff f884 	bl	8017848 <memcpy>
 8018740:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8018744:	f8c4 8000 	str.w	r8, [r4]
 8018748:	e7e9      	b.n	801871e <__submore+0x48>

0801874a <memmove>:
 801874a:	4288      	cmp	r0, r1
 801874c:	b510      	push	{r4, lr}
 801874e:	eb01 0402 	add.w	r4, r1, r2
 8018752:	d902      	bls.n	801875a <memmove+0x10>
 8018754:	4284      	cmp	r4, r0
 8018756:	4623      	mov	r3, r4
 8018758:	d807      	bhi.n	801876a <memmove+0x20>
 801875a:	1e43      	subs	r3, r0, #1
 801875c:	42a1      	cmp	r1, r4
 801875e:	d008      	beq.n	8018772 <memmove+0x28>
 8018760:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018764:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018768:	e7f8      	b.n	801875c <memmove+0x12>
 801876a:	4402      	add	r2, r0
 801876c:	4601      	mov	r1, r0
 801876e:	428a      	cmp	r2, r1
 8018770:	d100      	bne.n	8018774 <memmove+0x2a>
 8018772:	bd10      	pop	{r4, pc}
 8018774:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018778:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801877c:	e7f7      	b.n	801876e <memmove+0x24>
	...

08018780 <_sbrk_r>:
 8018780:	b538      	push	{r3, r4, r5, lr}
 8018782:	4d06      	ldr	r5, [pc, #24]	; (801879c <_sbrk_r+0x1c>)
 8018784:	2300      	movs	r3, #0
 8018786:	4604      	mov	r4, r0
 8018788:	4608      	mov	r0, r1
 801878a:	602b      	str	r3, [r5, #0]
 801878c:	f7eb f996 	bl	8003abc <_sbrk>
 8018790:	1c43      	adds	r3, r0, #1
 8018792:	d102      	bne.n	801879a <_sbrk_r+0x1a>
 8018794:	682b      	ldr	r3, [r5, #0]
 8018796:	b103      	cbz	r3, 801879a <_sbrk_r+0x1a>
 8018798:	6023      	str	r3, [r4, #0]
 801879a:	bd38      	pop	{r3, r4, r5, pc}
 801879c:	24003454 	.word	0x24003454

080187a0 <_realloc_r>:
 80187a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187a4:	4680      	mov	r8, r0
 80187a6:	4614      	mov	r4, r2
 80187a8:	460e      	mov	r6, r1
 80187aa:	b921      	cbnz	r1, 80187b6 <_realloc_r+0x16>
 80187ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80187b0:	4611      	mov	r1, r2
 80187b2:	f7ff b8c3 	b.w	801793c <_malloc_r>
 80187b6:	b92a      	cbnz	r2, 80187c4 <_realloc_r+0x24>
 80187b8:	f7ff f854 	bl	8017864 <_free_r>
 80187bc:	4625      	mov	r5, r4
 80187be:	4628      	mov	r0, r5
 80187c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80187c4:	f000 f914 	bl	80189f0 <_malloc_usable_size_r>
 80187c8:	4284      	cmp	r4, r0
 80187ca:	4607      	mov	r7, r0
 80187cc:	d802      	bhi.n	80187d4 <_realloc_r+0x34>
 80187ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80187d2:	d812      	bhi.n	80187fa <_realloc_r+0x5a>
 80187d4:	4621      	mov	r1, r4
 80187d6:	4640      	mov	r0, r8
 80187d8:	f7ff f8b0 	bl	801793c <_malloc_r>
 80187dc:	4605      	mov	r5, r0
 80187de:	2800      	cmp	r0, #0
 80187e0:	d0ed      	beq.n	80187be <_realloc_r+0x1e>
 80187e2:	42bc      	cmp	r4, r7
 80187e4:	4622      	mov	r2, r4
 80187e6:	4631      	mov	r1, r6
 80187e8:	bf28      	it	cs
 80187ea:	463a      	movcs	r2, r7
 80187ec:	f7ff f82c 	bl	8017848 <memcpy>
 80187f0:	4631      	mov	r1, r6
 80187f2:	4640      	mov	r0, r8
 80187f4:	f7ff f836 	bl	8017864 <_free_r>
 80187f8:	e7e1      	b.n	80187be <_realloc_r+0x1e>
 80187fa:	4635      	mov	r5, r6
 80187fc:	e7df      	b.n	80187be <_realloc_r+0x1e>
	...

08018800 <_strtol_l.constprop.0>:
 8018800:	2b01      	cmp	r3, #1
 8018802:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018806:	d001      	beq.n	801880c <_strtol_l.constprop.0+0xc>
 8018808:	2b24      	cmp	r3, #36	; 0x24
 801880a:	d906      	bls.n	801881a <_strtol_l.constprop.0+0x1a>
 801880c:	f7fe ffe8 	bl	80177e0 <__errno>
 8018810:	2316      	movs	r3, #22
 8018812:	6003      	str	r3, [r0, #0]
 8018814:	2000      	movs	r0, #0
 8018816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801881a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8018900 <_strtol_l.constprop.0+0x100>
 801881e:	460d      	mov	r5, r1
 8018820:	462e      	mov	r6, r5
 8018822:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018826:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801882a:	f017 0708 	ands.w	r7, r7, #8
 801882e:	d1f7      	bne.n	8018820 <_strtol_l.constprop.0+0x20>
 8018830:	2c2d      	cmp	r4, #45	; 0x2d
 8018832:	d132      	bne.n	801889a <_strtol_l.constprop.0+0x9a>
 8018834:	782c      	ldrb	r4, [r5, #0]
 8018836:	2701      	movs	r7, #1
 8018838:	1cb5      	adds	r5, r6, #2
 801883a:	2b00      	cmp	r3, #0
 801883c:	d05b      	beq.n	80188f6 <_strtol_l.constprop.0+0xf6>
 801883e:	2b10      	cmp	r3, #16
 8018840:	d109      	bne.n	8018856 <_strtol_l.constprop.0+0x56>
 8018842:	2c30      	cmp	r4, #48	; 0x30
 8018844:	d107      	bne.n	8018856 <_strtol_l.constprop.0+0x56>
 8018846:	782c      	ldrb	r4, [r5, #0]
 8018848:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801884c:	2c58      	cmp	r4, #88	; 0x58
 801884e:	d14d      	bne.n	80188ec <_strtol_l.constprop.0+0xec>
 8018850:	786c      	ldrb	r4, [r5, #1]
 8018852:	2310      	movs	r3, #16
 8018854:	3502      	adds	r5, #2
 8018856:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801885a:	f108 38ff 	add.w	r8, r8, #4294967295
 801885e:	f04f 0e00 	mov.w	lr, #0
 8018862:	fbb8 f9f3 	udiv	r9, r8, r3
 8018866:	4676      	mov	r6, lr
 8018868:	fb03 8a19 	mls	sl, r3, r9, r8
 801886c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8018870:	f1bc 0f09 	cmp.w	ip, #9
 8018874:	d816      	bhi.n	80188a4 <_strtol_l.constprop.0+0xa4>
 8018876:	4664      	mov	r4, ip
 8018878:	42a3      	cmp	r3, r4
 801887a:	dd24      	ble.n	80188c6 <_strtol_l.constprop.0+0xc6>
 801887c:	f1be 3fff 	cmp.w	lr, #4294967295
 8018880:	d008      	beq.n	8018894 <_strtol_l.constprop.0+0x94>
 8018882:	45b1      	cmp	r9, r6
 8018884:	d31c      	bcc.n	80188c0 <_strtol_l.constprop.0+0xc0>
 8018886:	d101      	bne.n	801888c <_strtol_l.constprop.0+0x8c>
 8018888:	45a2      	cmp	sl, r4
 801888a:	db19      	blt.n	80188c0 <_strtol_l.constprop.0+0xc0>
 801888c:	fb06 4603 	mla	r6, r6, r3, r4
 8018890:	f04f 0e01 	mov.w	lr, #1
 8018894:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018898:	e7e8      	b.n	801886c <_strtol_l.constprop.0+0x6c>
 801889a:	2c2b      	cmp	r4, #43	; 0x2b
 801889c:	bf04      	itt	eq
 801889e:	782c      	ldrbeq	r4, [r5, #0]
 80188a0:	1cb5      	addeq	r5, r6, #2
 80188a2:	e7ca      	b.n	801883a <_strtol_l.constprop.0+0x3a>
 80188a4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80188a8:	f1bc 0f19 	cmp.w	ip, #25
 80188ac:	d801      	bhi.n	80188b2 <_strtol_l.constprop.0+0xb2>
 80188ae:	3c37      	subs	r4, #55	; 0x37
 80188b0:	e7e2      	b.n	8018878 <_strtol_l.constprop.0+0x78>
 80188b2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80188b6:	f1bc 0f19 	cmp.w	ip, #25
 80188ba:	d804      	bhi.n	80188c6 <_strtol_l.constprop.0+0xc6>
 80188bc:	3c57      	subs	r4, #87	; 0x57
 80188be:	e7db      	b.n	8018878 <_strtol_l.constprop.0+0x78>
 80188c0:	f04f 3eff 	mov.w	lr, #4294967295
 80188c4:	e7e6      	b.n	8018894 <_strtol_l.constprop.0+0x94>
 80188c6:	f1be 3fff 	cmp.w	lr, #4294967295
 80188ca:	d105      	bne.n	80188d8 <_strtol_l.constprop.0+0xd8>
 80188cc:	2322      	movs	r3, #34	; 0x22
 80188ce:	6003      	str	r3, [r0, #0]
 80188d0:	4646      	mov	r6, r8
 80188d2:	b942      	cbnz	r2, 80188e6 <_strtol_l.constprop.0+0xe6>
 80188d4:	4630      	mov	r0, r6
 80188d6:	e79e      	b.n	8018816 <_strtol_l.constprop.0+0x16>
 80188d8:	b107      	cbz	r7, 80188dc <_strtol_l.constprop.0+0xdc>
 80188da:	4276      	negs	r6, r6
 80188dc:	2a00      	cmp	r2, #0
 80188de:	d0f9      	beq.n	80188d4 <_strtol_l.constprop.0+0xd4>
 80188e0:	f1be 0f00 	cmp.w	lr, #0
 80188e4:	d000      	beq.n	80188e8 <_strtol_l.constprop.0+0xe8>
 80188e6:	1e69      	subs	r1, r5, #1
 80188e8:	6011      	str	r1, [r2, #0]
 80188ea:	e7f3      	b.n	80188d4 <_strtol_l.constprop.0+0xd4>
 80188ec:	2430      	movs	r4, #48	; 0x30
 80188ee:	2b00      	cmp	r3, #0
 80188f0:	d1b1      	bne.n	8018856 <_strtol_l.constprop.0+0x56>
 80188f2:	2308      	movs	r3, #8
 80188f4:	e7af      	b.n	8018856 <_strtol_l.constprop.0+0x56>
 80188f6:	2c30      	cmp	r4, #48	; 0x30
 80188f8:	d0a5      	beq.n	8018846 <_strtol_l.constprop.0+0x46>
 80188fa:	230a      	movs	r3, #10
 80188fc:	e7ab      	b.n	8018856 <_strtol_l.constprop.0+0x56>
 80188fe:	bf00      	nop
 8018900:	08018d2f 	.word	0x08018d2f

08018904 <_strtol_r>:
 8018904:	f7ff bf7c 	b.w	8018800 <_strtol_l.constprop.0>

08018908 <_strtoul_l.constprop.0>:
 8018908:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801890c:	4f36      	ldr	r7, [pc, #216]	; (80189e8 <_strtoul_l.constprop.0+0xe0>)
 801890e:	4686      	mov	lr, r0
 8018910:	460d      	mov	r5, r1
 8018912:	4628      	mov	r0, r5
 8018914:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018918:	5d3e      	ldrb	r6, [r7, r4]
 801891a:	f016 0608 	ands.w	r6, r6, #8
 801891e:	d1f8      	bne.n	8018912 <_strtoul_l.constprop.0+0xa>
 8018920:	2c2d      	cmp	r4, #45	; 0x2d
 8018922:	d130      	bne.n	8018986 <_strtoul_l.constprop.0+0x7e>
 8018924:	782c      	ldrb	r4, [r5, #0]
 8018926:	2601      	movs	r6, #1
 8018928:	1c85      	adds	r5, r0, #2
 801892a:	2b00      	cmp	r3, #0
 801892c:	d057      	beq.n	80189de <_strtoul_l.constprop.0+0xd6>
 801892e:	2b10      	cmp	r3, #16
 8018930:	d109      	bne.n	8018946 <_strtoul_l.constprop.0+0x3e>
 8018932:	2c30      	cmp	r4, #48	; 0x30
 8018934:	d107      	bne.n	8018946 <_strtoul_l.constprop.0+0x3e>
 8018936:	7828      	ldrb	r0, [r5, #0]
 8018938:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801893c:	2858      	cmp	r0, #88	; 0x58
 801893e:	d149      	bne.n	80189d4 <_strtoul_l.constprop.0+0xcc>
 8018940:	786c      	ldrb	r4, [r5, #1]
 8018942:	2310      	movs	r3, #16
 8018944:	3502      	adds	r5, #2
 8018946:	f04f 38ff 	mov.w	r8, #4294967295
 801894a:	2700      	movs	r7, #0
 801894c:	fbb8 f8f3 	udiv	r8, r8, r3
 8018950:	fb03 f908 	mul.w	r9, r3, r8
 8018954:	ea6f 0909 	mvn.w	r9, r9
 8018958:	4638      	mov	r0, r7
 801895a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801895e:	f1bc 0f09 	cmp.w	ip, #9
 8018962:	d815      	bhi.n	8018990 <_strtoul_l.constprop.0+0x88>
 8018964:	4664      	mov	r4, ip
 8018966:	42a3      	cmp	r3, r4
 8018968:	dd23      	ble.n	80189b2 <_strtoul_l.constprop.0+0xaa>
 801896a:	f1b7 3fff 	cmp.w	r7, #4294967295
 801896e:	d007      	beq.n	8018980 <_strtoul_l.constprop.0+0x78>
 8018970:	4580      	cmp	r8, r0
 8018972:	d31b      	bcc.n	80189ac <_strtoul_l.constprop.0+0xa4>
 8018974:	d101      	bne.n	801897a <_strtoul_l.constprop.0+0x72>
 8018976:	45a1      	cmp	r9, r4
 8018978:	db18      	blt.n	80189ac <_strtoul_l.constprop.0+0xa4>
 801897a:	fb00 4003 	mla	r0, r0, r3, r4
 801897e:	2701      	movs	r7, #1
 8018980:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018984:	e7e9      	b.n	801895a <_strtoul_l.constprop.0+0x52>
 8018986:	2c2b      	cmp	r4, #43	; 0x2b
 8018988:	bf04      	itt	eq
 801898a:	782c      	ldrbeq	r4, [r5, #0]
 801898c:	1c85      	addeq	r5, r0, #2
 801898e:	e7cc      	b.n	801892a <_strtoul_l.constprop.0+0x22>
 8018990:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8018994:	f1bc 0f19 	cmp.w	ip, #25
 8018998:	d801      	bhi.n	801899e <_strtoul_l.constprop.0+0x96>
 801899a:	3c37      	subs	r4, #55	; 0x37
 801899c:	e7e3      	b.n	8018966 <_strtoul_l.constprop.0+0x5e>
 801899e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80189a2:	f1bc 0f19 	cmp.w	ip, #25
 80189a6:	d804      	bhi.n	80189b2 <_strtoul_l.constprop.0+0xaa>
 80189a8:	3c57      	subs	r4, #87	; 0x57
 80189aa:	e7dc      	b.n	8018966 <_strtoul_l.constprop.0+0x5e>
 80189ac:	f04f 37ff 	mov.w	r7, #4294967295
 80189b0:	e7e6      	b.n	8018980 <_strtoul_l.constprop.0+0x78>
 80189b2:	1c7b      	adds	r3, r7, #1
 80189b4:	d106      	bne.n	80189c4 <_strtoul_l.constprop.0+0xbc>
 80189b6:	2322      	movs	r3, #34	; 0x22
 80189b8:	f8ce 3000 	str.w	r3, [lr]
 80189bc:	4638      	mov	r0, r7
 80189be:	b932      	cbnz	r2, 80189ce <_strtoul_l.constprop.0+0xc6>
 80189c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80189c4:	b106      	cbz	r6, 80189c8 <_strtoul_l.constprop.0+0xc0>
 80189c6:	4240      	negs	r0, r0
 80189c8:	2a00      	cmp	r2, #0
 80189ca:	d0f9      	beq.n	80189c0 <_strtoul_l.constprop.0+0xb8>
 80189cc:	b107      	cbz	r7, 80189d0 <_strtoul_l.constprop.0+0xc8>
 80189ce:	1e69      	subs	r1, r5, #1
 80189d0:	6011      	str	r1, [r2, #0]
 80189d2:	e7f5      	b.n	80189c0 <_strtoul_l.constprop.0+0xb8>
 80189d4:	2430      	movs	r4, #48	; 0x30
 80189d6:	2b00      	cmp	r3, #0
 80189d8:	d1b5      	bne.n	8018946 <_strtoul_l.constprop.0+0x3e>
 80189da:	2308      	movs	r3, #8
 80189dc:	e7b3      	b.n	8018946 <_strtoul_l.constprop.0+0x3e>
 80189de:	2c30      	cmp	r4, #48	; 0x30
 80189e0:	d0a9      	beq.n	8018936 <_strtoul_l.constprop.0+0x2e>
 80189e2:	230a      	movs	r3, #10
 80189e4:	e7af      	b.n	8018946 <_strtoul_l.constprop.0+0x3e>
 80189e6:	bf00      	nop
 80189e8:	08018d2f 	.word	0x08018d2f

080189ec <_strtoul_r>:
 80189ec:	f7ff bf8c 	b.w	8018908 <_strtoul_l.constprop.0>

080189f0 <_malloc_usable_size_r>:
 80189f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80189f4:	1f18      	subs	r0, r3, #4
 80189f6:	2b00      	cmp	r3, #0
 80189f8:	bfbc      	itt	lt
 80189fa:	580b      	ldrlt	r3, [r1, r0]
 80189fc:	18c0      	addlt	r0, r0, r3
 80189fe:	4770      	bx	lr

08018a00 <_init>:
 8018a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a02:	bf00      	nop
 8018a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018a06:	bc08      	pop	{r3}
 8018a08:	469e      	mov	lr, r3
 8018a0a:	4770      	bx	lr

08018a0c <_fini>:
 8018a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a0e:	bf00      	nop
 8018a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018a12:	bc08      	pop	{r3}
 8018a14:	469e      	mov	lr, r3
 8018a16:	4770      	bx	lr
