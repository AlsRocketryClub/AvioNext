
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c178  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000838  0801c448  0801c448  0002c448  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801cc80  0801cc80  0002cc80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801cc88  0801cc88  0002cc88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801cc8c  0801cc8c  0002cc8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002f4  24000000  0801cc90  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003088  240002f4  0801cf84  000302f4  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  2400337c  0801cf84  0003337c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000302f4  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00030322  2**0
                  CONTENTS, READONLY
 11 .debug_info   00037cff  00000000  00000000  00030365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00006b89  00000000  00000000  00068064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002c60  00000000  00000000  0006ebf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000022b1  00000000  00000000  00071850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003f7a1  00000000  00000000  00073b01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003d618  00000000  00000000  000b32a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017f267  00000000  00000000  000f08ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000d328  00000000  00000000  0026fb24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  0027ce4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002f4 	.word	0x240002f4
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801c430 	.word	0x0801c430

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002f8 	.word	0x240002f8
 800030c:	0801c430 	.word	0x0801c430

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	; 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295
 8000768:	f04f 30ff 	movne.w	r0, #4294967295
 800076c:	f000 b9a8 	b.w	8000ac0 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f83e 	bl	80007f8 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__aeabi_d2lz>:
 8000788:	b508      	push	{r3, lr}
 800078a:	4602      	mov	r2, r0
 800078c:	460b      	mov	r3, r1
 800078e:	ec43 2b17 	vmov	d7, r2, r3
 8000792:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079a:	d403      	bmi.n	80007a4 <__aeabi_d2lz+0x1c>
 800079c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007a0:	f000 b80a 	b.w	80007b8 <__aeabi_d2ulz>
 80007a4:	eeb1 7b47 	vneg.f64	d7, d7
 80007a8:	ec51 0b17 	vmov	r0, r1, d7
 80007ac:	f000 f804 	bl	80007b8 <__aeabi_d2ulz>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	bd08      	pop	{r3, pc}

080007b8 <__aeabi_d2ulz>:
 80007b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007e8 <__aeabi_d2ulz+0x30>
 80007bc:	ec41 0b17 	vmov	d7, r0, r1
 80007c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007f0 <__aeabi_d2ulz+0x38>
 80007c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007d8:	ee16 1a10 	vmov	r1, s12
 80007dc:	ee17 0a90 	vmov	r0, s15
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	f3af 8000 	nop.w
 80007e8:	00000000 	.word	0x00000000
 80007ec:	3df00000 	.word	0x3df00000
 80007f0:	00000000 	.word	0x00000000
 80007f4:	41f00000 	.word	0x41f00000

080007f8 <__udivmoddi4>:
 80007f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007fc:	9e08      	ldr	r6, [sp, #32]
 80007fe:	460d      	mov	r5, r1
 8000800:	4604      	mov	r4, r0
 8000802:	460f      	mov	r7, r1
 8000804:	2b00      	cmp	r3, #0
 8000806:	d14a      	bne.n	800089e <__udivmoddi4+0xa6>
 8000808:	428a      	cmp	r2, r1
 800080a:	4694      	mov	ip, r2
 800080c:	d965      	bls.n	80008da <__udivmoddi4+0xe2>
 800080e:	fab2 f382 	clz	r3, r2
 8000812:	b143      	cbz	r3, 8000826 <__udivmoddi4+0x2e>
 8000814:	fa02 fc03 	lsl.w	ip, r2, r3
 8000818:	f1c3 0220 	rsb	r2, r3, #32
 800081c:	409f      	lsls	r7, r3
 800081e:	fa20 f202 	lsr.w	r2, r0, r2
 8000822:	4317      	orrs	r7, r2
 8000824:	409c      	lsls	r4, r3
 8000826:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800082a:	fa1f f58c 	uxth.w	r5, ip
 800082e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000832:	0c22      	lsrs	r2, r4, #16
 8000834:	fb0e 7711 	mls	r7, lr, r1, r7
 8000838:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800083c:	fb01 f005 	mul.w	r0, r1, r5
 8000840:	4290      	cmp	r0, r2
 8000842:	d90a      	bls.n	800085a <__udivmoddi4+0x62>
 8000844:	eb1c 0202 	adds.w	r2, ip, r2
 8000848:	f101 37ff 	add.w	r7, r1, #4294967295
 800084c:	f080 811c 	bcs.w	8000a88 <__udivmoddi4+0x290>
 8000850:	4290      	cmp	r0, r2
 8000852:	f240 8119 	bls.w	8000a88 <__udivmoddi4+0x290>
 8000856:	3902      	subs	r1, #2
 8000858:	4462      	add	r2, ip
 800085a:	1a12      	subs	r2, r2, r0
 800085c:	b2a4      	uxth	r4, r4
 800085e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000862:	fb0e 2210 	mls	r2, lr, r0, r2
 8000866:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800086a:	fb00 f505 	mul.w	r5, r0, r5
 800086e:	42a5      	cmp	r5, r4
 8000870:	d90a      	bls.n	8000888 <__udivmoddi4+0x90>
 8000872:	eb1c 0404 	adds.w	r4, ip, r4
 8000876:	f100 32ff 	add.w	r2, r0, #4294967295
 800087a:	f080 8107 	bcs.w	8000a8c <__udivmoddi4+0x294>
 800087e:	42a5      	cmp	r5, r4
 8000880:	f240 8104 	bls.w	8000a8c <__udivmoddi4+0x294>
 8000884:	4464      	add	r4, ip
 8000886:	3802      	subs	r0, #2
 8000888:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800088c:	1b64      	subs	r4, r4, r5
 800088e:	2100      	movs	r1, #0
 8000890:	b11e      	cbz	r6, 800089a <__udivmoddi4+0xa2>
 8000892:	40dc      	lsrs	r4, r3
 8000894:	2300      	movs	r3, #0
 8000896:	e9c6 4300 	strd	r4, r3, [r6]
 800089a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800089e:	428b      	cmp	r3, r1
 80008a0:	d908      	bls.n	80008b4 <__udivmoddi4+0xbc>
 80008a2:	2e00      	cmp	r6, #0
 80008a4:	f000 80ed 	beq.w	8000a82 <__udivmoddi4+0x28a>
 80008a8:	2100      	movs	r1, #0
 80008aa:	e9c6 0500 	strd	r0, r5, [r6]
 80008ae:	4608      	mov	r0, r1
 80008b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008b4:	fab3 f183 	clz	r1, r3
 80008b8:	2900      	cmp	r1, #0
 80008ba:	d149      	bne.n	8000950 <__udivmoddi4+0x158>
 80008bc:	42ab      	cmp	r3, r5
 80008be:	d302      	bcc.n	80008c6 <__udivmoddi4+0xce>
 80008c0:	4282      	cmp	r2, r0
 80008c2:	f200 80f8 	bhi.w	8000ab6 <__udivmoddi4+0x2be>
 80008c6:	1a84      	subs	r4, r0, r2
 80008c8:	eb65 0203 	sbc.w	r2, r5, r3
 80008cc:	2001      	movs	r0, #1
 80008ce:	4617      	mov	r7, r2
 80008d0:	2e00      	cmp	r6, #0
 80008d2:	d0e2      	beq.n	800089a <__udivmoddi4+0xa2>
 80008d4:	e9c6 4700 	strd	r4, r7, [r6]
 80008d8:	e7df      	b.n	800089a <__udivmoddi4+0xa2>
 80008da:	b902      	cbnz	r2, 80008de <__udivmoddi4+0xe6>
 80008dc:	deff      	udf	#255	; 0xff
 80008de:	fab2 f382 	clz	r3, r2
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	f040 8090 	bne.w	8000a08 <__udivmoddi4+0x210>
 80008e8:	1a8a      	subs	r2, r1, r2
 80008ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008ee:	fa1f fe8c 	uxth.w	lr, ip
 80008f2:	2101      	movs	r1, #1
 80008f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008f8:	fb07 2015 	mls	r0, r7, r5, r2
 80008fc:	0c22      	lsrs	r2, r4, #16
 80008fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000902:	fb0e f005 	mul.w	r0, lr, r5
 8000906:	4290      	cmp	r0, r2
 8000908:	d908      	bls.n	800091c <__udivmoddi4+0x124>
 800090a:	eb1c 0202 	adds.w	r2, ip, r2
 800090e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000912:	d202      	bcs.n	800091a <__udivmoddi4+0x122>
 8000914:	4290      	cmp	r0, r2
 8000916:	f200 80cb 	bhi.w	8000ab0 <__udivmoddi4+0x2b8>
 800091a:	4645      	mov	r5, r8
 800091c:	1a12      	subs	r2, r2, r0
 800091e:	b2a4      	uxth	r4, r4
 8000920:	fbb2 f0f7 	udiv	r0, r2, r7
 8000924:	fb07 2210 	mls	r2, r7, r0, r2
 8000928:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800092c:	fb0e fe00 	mul.w	lr, lr, r0
 8000930:	45a6      	cmp	lr, r4
 8000932:	d908      	bls.n	8000946 <__udivmoddi4+0x14e>
 8000934:	eb1c 0404 	adds.w	r4, ip, r4
 8000938:	f100 32ff 	add.w	r2, r0, #4294967295
 800093c:	d202      	bcs.n	8000944 <__udivmoddi4+0x14c>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f200 80bb 	bhi.w	8000aba <__udivmoddi4+0x2c2>
 8000944:	4610      	mov	r0, r2
 8000946:	eba4 040e 	sub.w	r4, r4, lr
 800094a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800094e:	e79f      	b.n	8000890 <__udivmoddi4+0x98>
 8000950:	f1c1 0720 	rsb	r7, r1, #32
 8000954:	408b      	lsls	r3, r1
 8000956:	fa22 fc07 	lsr.w	ip, r2, r7
 800095a:	ea4c 0c03 	orr.w	ip, ip, r3
 800095e:	fa05 f401 	lsl.w	r4, r5, r1
 8000962:	fa20 f307 	lsr.w	r3, r0, r7
 8000966:	40fd      	lsrs	r5, r7
 8000968:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800096c:	4323      	orrs	r3, r4
 800096e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000972:	fa1f fe8c 	uxth.w	lr, ip
 8000976:	fb09 5518 	mls	r5, r9, r8, r5
 800097a:	0c1c      	lsrs	r4, r3, #16
 800097c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000980:	fb08 f50e 	mul.w	r5, r8, lr
 8000984:	42a5      	cmp	r5, r4
 8000986:	fa02 f201 	lsl.w	r2, r2, r1
 800098a:	fa00 f001 	lsl.w	r0, r0, r1
 800098e:	d90b      	bls.n	80009a8 <__udivmoddi4+0x1b0>
 8000990:	eb1c 0404 	adds.w	r4, ip, r4
 8000994:	f108 3aff 	add.w	sl, r8, #4294967295
 8000998:	f080 8088 	bcs.w	8000aac <__udivmoddi4+0x2b4>
 800099c:	42a5      	cmp	r5, r4
 800099e:	f240 8085 	bls.w	8000aac <__udivmoddi4+0x2b4>
 80009a2:	f1a8 0802 	sub.w	r8, r8, #2
 80009a6:	4464      	add	r4, ip
 80009a8:	1b64      	subs	r4, r4, r5
 80009aa:	b29d      	uxth	r5, r3
 80009ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80009b0:	fb09 4413 	mls	r4, r9, r3, r4
 80009b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80009bc:	45a6      	cmp	lr, r4
 80009be:	d908      	bls.n	80009d2 <__udivmoddi4+0x1da>
 80009c0:	eb1c 0404 	adds.w	r4, ip, r4
 80009c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80009c8:	d26c      	bcs.n	8000aa4 <__udivmoddi4+0x2ac>
 80009ca:	45a6      	cmp	lr, r4
 80009cc:	d96a      	bls.n	8000aa4 <__udivmoddi4+0x2ac>
 80009ce:	3b02      	subs	r3, #2
 80009d0:	4464      	add	r4, ip
 80009d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009d6:	fba3 9502 	umull	r9, r5, r3, r2
 80009da:	eba4 040e 	sub.w	r4, r4, lr
 80009de:	42ac      	cmp	r4, r5
 80009e0:	46c8      	mov	r8, r9
 80009e2:	46ae      	mov	lr, r5
 80009e4:	d356      	bcc.n	8000a94 <__udivmoddi4+0x29c>
 80009e6:	d053      	beq.n	8000a90 <__udivmoddi4+0x298>
 80009e8:	b156      	cbz	r6, 8000a00 <__udivmoddi4+0x208>
 80009ea:	ebb0 0208 	subs.w	r2, r0, r8
 80009ee:	eb64 040e 	sbc.w	r4, r4, lr
 80009f2:	fa04 f707 	lsl.w	r7, r4, r7
 80009f6:	40ca      	lsrs	r2, r1
 80009f8:	40cc      	lsrs	r4, r1
 80009fa:	4317      	orrs	r7, r2
 80009fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000a00:	4618      	mov	r0, r3
 8000a02:	2100      	movs	r1, #0
 8000a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a08:	f1c3 0120 	rsb	r1, r3, #32
 8000a0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a10:	fa20 f201 	lsr.w	r2, r0, r1
 8000a14:	fa25 f101 	lsr.w	r1, r5, r1
 8000a18:	409d      	lsls	r5, r3
 8000a1a:	432a      	orrs	r2, r5
 8000a1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a20:	fa1f fe8c 	uxth.w	lr, ip
 8000a24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a28:	fb07 1510 	mls	r5, r7, r0, r1
 8000a2c:	0c11      	lsrs	r1, r2, #16
 8000a2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a32:	fb00 f50e 	mul.w	r5, r0, lr
 8000a36:	428d      	cmp	r5, r1
 8000a38:	fa04 f403 	lsl.w	r4, r4, r3
 8000a3c:	d908      	bls.n	8000a50 <__udivmoddi4+0x258>
 8000a3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000a42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a46:	d22f      	bcs.n	8000aa8 <__udivmoddi4+0x2b0>
 8000a48:	428d      	cmp	r5, r1
 8000a4a:	d92d      	bls.n	8000aa8 <__udivmoddi4+0x2b0>
 8000a4c:	3802      	subs	r0, #2
 8000a4e:	4461      	add	r1, ip
 8000a50:	1b49      	subs	r1, r1, r5
 8000a52:	b292      	uxth	r2, r2
 8000a54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a58:	fb07 1115 	mls	r1, r7, r5, r1
 8000a5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a60:	fb05 f10e 	mul.w	r1, r5, lr
 8000a64:	4291      	cmp	r1, r2
 8000a66:	d908      	bls.n	8000a7a <__udivmoddi4+0x282>
 8000a68:	eb1c 0202 	adds.w	r2, ip, r2
 8000a6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a70:	d216      	bcs.n	8000aa0 <__udivmoddi4+0x2a8>
 8000a72:	4291      	cmp	r1, r2
 8000a74:	d914      	bls.n	8000aa0 <__udivmoddi4+0x2a8>
 8000a76:	3d02      	subs	r5, #2
 8000a78:	4462      	add	r2, ip
 8000a7a:	1a52      	subs	r2, r2, r1
 8000a7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a80:	e738      	b.n	80008f4 <__udivmoddi4+0xfc>
 8000a82:	4631      	mov	r1, r6
 8000a84:	4630      	mov	r0, r6
 8000a86:	e708      	b.n	800089a <__udivmoddi4+0xa2>
 8000a88:	4639      	mov	r1, r7
 8000a8a:	e6e6      	b.n	800085a <__udivmoddi4+0x62>
 8000a8c:	4610      	mov	r0, r2
 8000a8e:	e6fb      	b.n	8000888 <__udivmoddi4+0x90>
 8000a90:	4548      	cmp	r0, r9
 8000a92:	d2a9      	bcs.n	80009e8 <__udivmoddi4+0x1f0>
 8000a94:	ebb9 0802 	subs.w	r8, r9, r2
 8000a98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a9c:	3b01      	subs	r3, #1
 8000a9e:	e7a3      	b.n	80009e8 <__udivmoddi4+0x1f0>
 8000aa0:	4645      	mov	r5, r8
 8000aa2:	e7ea      	b.n	8000a7a <__udivmoddi4+0x282>
 8000aa4:	462b      	mov	r3, r5
 8000aa6:	e794      	b.n	80009d2 <__udivmoddi4+0x1da>
 8000aa8:	4640      	mov	r0, r8
 8000aaa:	e7d1      	b.n	8000a50 <__udivmoddi4+0x258>
 8000aac:	46d0      	mov	r8, sl
 8000aae:	e77b      	b.n	80009a8 <__udivmoddi4+0x1b0>
 8000ab0:	3d02      	subs	r5, #2
 8000ab2:	4462      	add	r2, ip
 8000ab4:	e732      	b.n	800091c <__udivmoddi4+0x124>
 8000ab6:	4608      	mov	r0, r1
 8000ab8:	e70a      	b.n	80008d0 <__udivmoddi4+0xd8>
 8000aba:	4464      	add	r4, ip
 8000abc:	3802      	subs	r0, #2
 8000abe:	e742      	b.n	8000946 <__udivmoddi4+0x14e>

08000ac0 <__aeabi_idiv0>:
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <HG2_Write_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);

	return reg_value;
}

void HG2_Write_Register(uint8_t addr, uint8_t data){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	460a      	mov	r2, r1
 8000ace:	71fb      	strb	r3, [r7, #7]
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ada:	480c      	ldr	r0, [pc, #48]	; (8000b0c <HG2_Write_Register+0x48>)
 8000adc:	f007 feb2 	bl	8008844 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000ae0:	1df9      	adds	r1, r7, #7
 8000ae2:	2364      	movs	r3, #100	; 0x64
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	480a      	ldr	r0, [pc, #40]	; (8000b10 <HG2_Write_Register+0x4c>)
 8000ae8:	f00f f854 	bl	800fb94 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000aec:	1db9      	adds	r1, r7, #6
 8000aee:	2364      	movs	r3, #100	; 0x64
 8000af0:	2201      	movs	r2, #1
 8000af2:	4807      	ldr	r0, [pc, #28]	; (8000b10 <HG2_Write_Register+0x4c>)
 8000af4:	f00f f84e 	bl	800fb94 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 8000af8:	2201      	movs	r2, #1
 8000afa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000afe:	4803      	ldr	r0, [pc, #12]	; (8000b0c <HG2_Write_Register+0x48>)
 8000b00:	f007 fea0 	bl	8008844 <HAL_GPIO_WritePin>

}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	58020c00 	.word	0x58020c00
 8000b10:	24000fc8 	.word	0x24000fc8

08000b14 <HG2_Get_Acc>:


void HG2_Get_Acc(int16_t* data){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	uint8_t addr = 0x08 | (1<<7);
 8000b1c:	2388      	movs	r3, #136	; 0x88
 8000b1e:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 8000b20:	2200      	movs	r2, #0
 8000b22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b26:	4827      	ldr	r0, [pc, #156]	; (8000bc4 <HG2_Get_Acc+0xb0>)
 8000b28:	f007 fe8c 	bl	8008844 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000b2c:	f107 010f 	add.w	r1, r7, #15
 8000b30:	2364      	movs	r3, #100	; 0x64
 8000b32:	2201      	movs	r2, #1
 8000b34:	4824      	ldr	r0, [pc, #144]	; (8000bc8 <HG2_Get_Acc+0xb4>)
 8000b36:	f00f f82d 	bl	800fb94 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, data[0], 1, 100);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b40:	4619      	mov	r1, r3
 8000b42:	2364      	movs	r3, #100	; 0x64
 8000b44:	2201      	movs	r2, #1
 8000b46:	4820      	ldr	r0, [pc, #128]	; (8000bc8 <HG2_Get_Acc+0xb4>)
 8000b48:	f00f fa20 	bl	800ff8c <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi2, data[1], 1, 100);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3302      	adds	r3, #2
 8000b50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b54:	4619      	mov	r1, r3
 8000b56:	2364      	movs	r3, #100	; 0x64
 8000b58:	2201      	movs	r2, #1
 8000b5a:	481b      	ldr	r0, [pc, #108]	; (8000bc8 <HG2_Get_Acc+0xb4>)
 8000b5c:	f00f fa16 	bl	800ff8c <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi2, data[2], 1, 100);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3304      	adds	r3, #4
 8000b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	2364      	movs	r3, #100	; 0x64
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	4816      	ldr	r0, [pc, #88]	; (8000bc8 <HG2_Get_Acc+0xb4>)
 8000b70:	f00f fa0c 	bl	800ff8c <HAL_SPI_Receive>

	HAL_SPI_Receive(&hspi2, data[3], 1, 100);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	3306      	adds	r3, #6
 8000b78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	2364      	movs	r3, #100	; 0x64
 8000b80:	2201      	movs	r2, #1
 8000b82:	4811      	ldr	r0, [pc, #68]	; (8000bc8 <HG2_Get_Acc+0xb4>)
 8000b84:	f00f fa02 	bl	800ff8c <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi2, data[4], 1, 100);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3308      	adds	r3, #8
 8000b8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b90:	4619      	mov	r1, r3
 8000b92:	2364      	movs	r3, #100	; 0x64
 8000b94:	2201      	movs	r2, #1
 8000b96:	480c      	ldr	r0, [pc, #48]	; (8000bc8 <HG2_Get_Acc+0xb4>)
 8000b98:	f00f f9f8 	bl	800ff8c <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi2, data[5], 1, 100);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	330a      	adds	r3, #10
 8000ba0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	2364      	movs	r3, #100	; 0x64
 8000ba8:	2201      	movs	r2, #1
 8000baa:	4807      	ldr	r0, [pc, #28]	; (8000bc8 <HG2_Get_Acc+0xb4>)
 8000bac:	f00f f9ee 	bl	800ff8c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bb6:	4803      	ldr	r0, [pc, #12]	; (8000bc4 <HG2_Get_Acc+0xb0>)
 8000bb8:	f007 fe44 	bl	8008844 <HAL_GPIO_WritePin>
}
 8000bbc:	bf00      	nop
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	58020c00 	.word	0x58020c00
 8000bc8:	24000fc8 	.word	0x24000fc8

08000bcc <LoRA_Read_Register>:





uint8_t LoRA_Read_Register(uint8_t addr){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bdc:	480d      	ldr	r0, [pc, #52]	; (8000c14 <LoRA_Read_Register+0x48>)
 8000bde:	f007 fe31 	bl	8008844 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000be2:	1df9      	adds	r1, r7, #7
 8000be4:	2364      	movs	r3, #100	; 0x64
 8000be6:	2201      	movs	r2, #1
 8000be8:	480b      	ldr	r0, [pc, #44]	; (8000c18 <LoRA_Read_Register+0x4c>)
 8000bea:	f00e ffd3 	bl	800fb94 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 8000bee:	f107 010f 	add.w	r1, r7, #15
 8000bf2:	2364      	movs	r3, #100	; 0x64
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	4808      	ldr	r0, [pc, #32]	; (8000c18 <LoRA_Read_Register+0x4c>)
 8000bf8:	f00f f9c8 	bl	800ff8c <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c02:	4804      	ldr	r0, [pc, #16]	; (8000c14 <LoRA_Read_Register+0x48>)
 8000c04:	f007 fe1e 	bl	8008844 <HAL_GPIO_WritePin>

	return reg_value;
 8000c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	58020000 	.word	0x58020000
 8000c18:	24001050 	.word	0x24001050

08000c1c <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	460a      	mov	r2, r1
 8000c26:	71fb      	strb	r3, [r7, #7]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	71bb      	strb	r3, [r7, #6]
	addr |= (1<<7);
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c3c:	480c      	ldr	r0, [pc, #48]	; (8000c70 <LoRA_Write_Register+0x54>)
 8000c3e:	f007 fe01 	bl	8008844 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000c42:	1df9      	adds	r1, r7, #7
 8000c44:	2364      	movs	r3, #100	; 0x64
 8000c46:	2201      	movs	r2, #1
 8000c48:	480a      	ldr	r0, [pc, #40]	; (8000c74 <LoRA_Write_Register+0x58>)
 8000c4a:	f00e ffa3 	bl	800fb94 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8000c4e:	1db9      	adds	r1, r7, #6
 8000c50:	2364      	movs	r3, #100	; 0x64
 8000c52:	2201      	movs	r2, #1
 8000c54:	4807      	ldr	r0, [pc, #28]	; (8000c74 <LoRA_Write_Register+0x58>)
 8000c56:	f00e ff9d 	bl	800fb94 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c60:	4803      	ldr	r0, [pc, #12]	; (8000c70 <LoRA_Write_Register+0x54>)
 8000c62:	f007 fdef 	bl	8008844 <HAL_GPIO_WritePin>

}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	58020000 	.word	0x58020000
 8000c74:	24001050 	.word	0x24001050

08000c78 <LoRA_sleep>:


void LoRA_sleep(void){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000c7c:	2180      	movs	r1, #128	; 0x80
 8000c7e:	2001      	movs	r0, #1
 8000c80:	f7ff ffcc 	bl	8000c1c <LoRA_Write_Register>
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency){
 8000c88:	b5b0      	push	{r4, r5, r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8000c90:	6879      	ldr	r1, [r7, #4]
 8000c92:	17c8      	asrs	r0, r1, #31
 8000c94:	460a      	mov	r2, r1
 8000c96:	4603      	mov	r3, r0
 8000c98:	1355      	asrs	r5, r2, #13
 8000c9a:	04d4      	lsls	r4, r2, #19
 8000c9c:	4a18      	ldr	r2, [pc, #96]	; (8000d00 <LoRA_set_frequency+0x78>)
 8000c9e:	f04f 0300 	mov.w	r3, #0
 8000ca2:	4620      	mov	r0, r4
 8000ca4:	4629      	mov	r1, r5
 8000ca6:	f7ff fd57 	bl	8000758 <__aeabi_uldivmod>
 8000caa:	4602      	mov	r2, r0
 8000cac:	460b      	mov	r3, r1
 8000cae:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8000cb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000cb6:	f04f 0200 	mov.w	r2, #0
 8000cba:	f04f 0300 	mov.w	r3, #0
 8000cbe:	0c02      	lsrs	r2, r0, #16
 8000cc0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cc4:	0c0b      	lsrs	r3, r1, #16
 8000cc6:	b2d3      	uxtb	r3, r2
 8000cc8:	4619      	mov	r1, r3
 8000cca:	2006      	movs	r0, #6
 8000ccc:	f7ff ffa6 	bl	8000c1c <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t)(frf >> 8));
 8000cd0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000cd4:	f04f 0200 	mov.w	r2, #0
 8000cd8:	f04f 0300 	mov.w	r3, #0
 8000cdc:	0a02      	lsrs	r2, r0, #8
 8000cde:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000ce2:	0a0b      	lsrs	r3, r1, #8
 8000ce4:	b2d3      	uxtb	r3, r2
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	2007      	movs	r0, #7
 8000cea:	f7ff ff97 	bl	8000c1c <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8000cee:	7a3b      	ldrb	r3, [r7, #8]
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	2008      	movs	r0, #8
 8000cf4:	f7ff ff92 	bl	8000c1c <LoRA_Write_Register>
}
 8000cf8:	bf00      	nop
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bdb0      	pop	{r4, r5, r7, pc}
 8000d00:	01e84800 	.word	0x01e84800

08000d04 <LoRA_setOCP>:

void LoRA_idle(){
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
}

void LoRA_setOCP(uint8_t mA){
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
	  uint8_t ocpTrim = 27;
 8000d0e:	231b      	movs	r3, #27
 8000d10:	73fb      	strb	r3, [r7, #15]

	  if (mA <= 120) {
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	2b78      	cmp	r3, #120	; 0x78
 8000d16:	d809      	bhi.n	8000d2c <LoRA_setOCP+0x28>
	    ocpTrim = (mA - 45) / 5;
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	3b2d      	subs	r3, #45	; 0x2d
 8000d1c:	4a11      	ldr	r2, [pc, #68]	; (8000d64 <LoRA_setOCP+0x60>)
 8000d1e:	fb82 1203 	smull	r1, r2, r2, r3
 8000d22:	1052      	asrs	r2, r2, #1
 8000d24:	17db      	asrs	r3, r3, #31
 8000d26:	1ad3      	subs	r3, r2, r3
 8000d28:	73fb      	strb	r3, [r7, #15]
 8000d2a:	e00b      	b.n	8000d44 <LoRA_setOCP+0x40>
	  } else if (mA <=240) {
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	2bf0      	cmp	r3, #240	; 0xf0
 8000d30:	d808      	bhi.n	8000d44 <LoRA_setOCP+0x40>
	    ocpTrim = (mA + 30) / 10;
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	331e      	adds	r3, #30
 8000d36:	4a0b      	ldr	r2, [pc, #44]	; (8000d64 <LoRA_setOCP+0x60>)
 8000d38:	fb82 1203 	smull	r1, r2, r2, r3
 8000d3c:	1092      	asrs	r2, r2, #2
 8000d3e:	17db      	asrs	r3, r3, #31
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	73fb      	strb	r3, [r7, #15]
	  }

	  LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
 8000d46:	f003 031f 	and.w	r3, r3, #31
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	f043 0320 	orr.w	r3, r3, #32
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	4619      	mov	r1, r3
 8000d54:	200b      	movs	r0, #11
 8000d56:	f7ff ff61 	bl	8000c1c <LoRA_Write_Register>
}
 8000d5a:	bf00      	nop
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	66666667 	.word	0x66666667

08000d68 <LoRA_setTxPower>:

void LoRA_setTxPower(int level){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
    // PA BOOST
    if (level > 17) {
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2b11      	cmp	r3, #17
 8000d74:	dd0f      	ble.n	8000d96 <LoRA_setTxPower+0x2e>
      if (level > 20) {
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2b14      	cmp	r3, #20
 8000d7a:	dd01      	ble.n	8000d80 <LoRA_setTxPower+0x18>
        level = 20;
 8000d7c:	2314      	movs	r3, #20
 8000d7e:	607b      	str	r3, [r7, #4]
      }

      // subtract 3 from level, so 18 - 20 maps to 15 - 17
      level -= 3;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3b03      	subs	r3, #3
 8000d84:	607b      	str	r3, [r7, #4]

      // High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
      LoRA_Write_Register(REG_PA_DAC, 0x87);
 8000d86:	2187      	movs	r1, #135	; 0x87
 8000d88:	204d      	movs	r0, #77	; 0x4d
 8000d8a:	f7ff ff47 	bl	8000c1c <LoRA_Write_Register>
      LoRA_setOCP(140);
 8000d8e:	208c      	movs	r0, #140	; 0x8c
 8000d90:	f7ff ffb8 	bl	8000d04 <LoRA_setOCP>
 8000d94:	e00b      	b.n	8000dae <LoRA_setTxPower+0x46>
    } else {
      if (level < 2) {
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	dc01      	bgt.n	8000da0 <LoRA_setTxPower+0x38>
        level = 2;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	607b      	str	r3, [r7, #4]
      }
      //Default value PA_HF/LF or +17dBm
      LoRA_Write_Register(REG_PA_DAC, 0x84);
 8000da0:	2184      	movs	r1, #132	; 0x84
 8000da2:	204d      	movs	r0, #77	; 0x4d
 8000da4:	f7ff ff3a 	bl	8000c1c <LoRA_Write_Register>
      LoRA_setOCP(100);
 8000da8:	2064      	movs	r0, #100	; 0x64
 8000daa:	f7ff ffab 	bl	8000d04 <LoRA_setOCP>
    }

    LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	3b02      	subs	r3, #2
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	b25b      	sxtb	r3, r3
 8000db8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000dbc:	b25b      	sxtb	r3, r3
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	2009      	movs	r0, #9
 8000dc4:	f7ff ff2a 	bl	8000c1c <LoRA_Write_Register>
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <LoRA_explicit_header_mode>:

void LoRA_explicit_header_mode(){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_MODEM_CONFIG_1, LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
 8000dd4:	201d      	movs	r0, #29
 8000dd6:	f7ff fef9 	bl	8000bcc <LoRA_Read_Register>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	f023 0301 	bic.w	r3, r3, #1
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	4619      	mov	r1, r3
 8000de4:	201d      	movs	r0, #29
 8000de6:	f7ff ff19 	bl	8000c1c <LoRA_Write_Register>
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <LoRA_begin>:

void LoRA_begin(long frequency){
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b09c      	sub	sp, #112	; 0x70
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8000df8:	2201      	movs	r2, #1
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	4822      	ldr	r0, [pc, #136]	; (8000e88 <LoRA_begin+0x98>)
 8000dfe:	f007 fd21 	bl	8008844 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000e02:	2201      	movs	r2, #1
 8000e04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e08:	4820      	ldr	r0, [pc, #128]	; (8000e8c <LoRA_begin+0x9c>)
 8000e0a:	f007 fd1b 	bl	8008844 <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 8000e0e:	2042      	movs	r0, #66	; 0x42
 8000e10:	f7ff fedc 	bl	8000bcc <LoRA_Read_Register>
 8000e14:	4603      	mov	r3, r0
 8000e16:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    char data_debug[100];
	sprintf( data_debug,  "%x\n", version);
 8000e1a:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000e1e:	f107 0308 	add.w	r3, r7, #8
 8000e22:	491b      	ldr	r1, [pc, #108]	; (8000e90 <LoRA_begin+0xa0>)
 8000e24:	4618      	mov	r0, r3
 8000e26:	f017 ff2f 	bl	8018c88 <siprintf>
	CDC_Transmit_HS(data_debug, strlen(data_debug));
 8000e2a:	f107 0308 	add.w	r3, r7, #8
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff face 	bl	80003d0 <strlen>
 8000e34:	4602      	mov	r2, r0
 8000e36:	f107 0308 	add.w	r3, r7, #8
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f016 fbcf 	bl	80175e0 <CDC_Transmit_HS>

	LoRA_sleep();
 8000e42:	f7ff ff19 	bl	8000c78 <LoRA_sleep>
	LoRA_set_frequency(frequency);
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f7ff ff1e 	bl	8000c88 <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	200f      	movs	r0, #15
 8000e50:	f7ff fee4 	bl	8000c1c <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 8000e54:	2100      	movs	r1, #0
 8000e56:	200e      	movs	r0, #14
 8000e58:	f7ff fee0 	bl	8000c1c <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 8000e5c:	200c      	movs	r0, #12
 8000e5e:	f7ff feb5 	bl	8000bcc <LoRA_Read_Register>
 8000e62:	4603      	mov	r3, r0
 8000e64:	f043 0303 	orr.w	r3, r3, #3
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	200c      	movs	r0, #12
 8000e6e:	f7ff fed5 	bl	8000c1c <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 8000e72:	2104      	movs	r1, #4
 8000e74:	2026      	movs	r0, #38	; 0x26
 8000e76:	f7ff fed1 	bl	8000c1c <LoRA_Write_Register>

	LoRA_setTxPower(17);
 8000e7a:	2011      	movs	r0, #17
 8000e7c:	f7ff ff74 	bl	8000d68 <LoRA_setTxPower>

}
 8000e80:	bf00      	nop
 8000e82:	3770      	adds	r7, #112	; 0x70
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	58020c00 	.word	0x58020c00
 8000e8c:	58020000 	.word	0x58020000
 8000e90:	0801c448 	.word	0x0801c448

08000e94 <LoRA_beginPacket>:


void LoRA_beginPacket(){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	LoRA_explicit_header_mode();
 8000e98:	f7ff ff9a 	bl	8000dd0 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	200d      	movs	r0, #13
 8000ea0:	f7ff febc 	bl	8000c1c <LoRA_Write_Register>
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, 0);
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	2022      	movs	r0, #34	; 0x22
 8000ea8:	f7ff feb8 	bl	8000c1c <LoRA_Write_Register>
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <LoRA_endPacket>:

void LoRA_endPacket(){
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8000eb4:	2183      	movs	r1, #131	; 0x83
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	f7ff feb0 	bl	8000c1c <LoRA_Write_Register>

	while((LoRA_Read_Register(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0){
 8000ebc:	bf00      	nop
 8000ebe:	2012      	movs	r0, #18
 8000ec0:	f7ff fe84 	bl	8000bcc <LoRA_Read_Register>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	f003 0308 	and.w	r3, r3, #8
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d0f7      	beq.n	8000ebe <LoRA_endPacket+0xe>

	}
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8000ece:	2185      	movs	r1, #133	; 0x85
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	f7ff fea3 	bl	8000c1c <LoRA_Write_Register>

	LoRA_Write_Register(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8000ed6:	2108      	movs	r1, #8
 8000ed8:	2012      	movs	r0, #18
 8000eda:	f7ff fe9f 	bl	8000c1c <LoRA_Write_Register>

}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <LoRA_sendPacket>:
	}
	return packetLenght;

}

void LoRA_sendPacket(char * data){
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b084      	sub	sp, #16
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
    LoRA_beginPacket();
 8000eea:	f7ff ffd3 	bl	8000e94 <LoRA_beginPacket>
    for(int i = 0; i < strlen(data); i++){
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	e00a      	b.n	8000f0a <LoRA_sendPacket+0x28>
    	LoRA_Write_Register(REG_FIFO, data[i]);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	4413      	add	r3, r2
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	2000      	movs	r0, #0
 8000f00:	f7ff fe8c 	bl	8000c1c <LoRA_Write_Register>
    for(int i = 0; i < strlen(data); i++){
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	3301      	adds	r3, #1
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff fa60 	bl	80003d0 <strlen>
 8000f10:	4602      	mov	r2, r0
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d8ed      	bhi.n	8000ef4 <LoRA_sendPacket+0x12>
    }
    LoRA_Write_Register(REG_PAYLOAD_LENGTH, strlen(data));
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff fa59 	bl	80003d0 <strlen>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	4619      	mov	r1, r3
 8000f24:	2022      	movs	r0, #34	; 0x22
 8000f26:	f7ff fe79 	bl	8000c1c <LoRA_Write_Register>
    LoRA_endPacket();
 8000f2a:	f7ff ffc1 	bl	8000eb0 <LoRA_endPacket>
}
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <setLEDs>:
	uint8_t data;
	HAL_I2C_Mem_Read(&hi2c2, writeAddress, memAddr, 2, &data, 1, 100);
	return data;
}

void setLEDs(uint8_t LED_Color_Data[14][3]) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b090      	sub	sp, #64	; 0x40
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	static uint32_t LED_PWM_Data_0[(NUM_LEDS_0 * 24) + 58];
	static uint32_t LED_PWM_Data_1[(NUM_LEDS_1 * 24) + 58];
	static uint32_t LED_PWM_Data_2[(NUM_LEDS_2 * 24) + 58];
	static uint32_t LED_PWM_Data_3[(NUM_LEDS_3 * 24) + 58];

	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3;
 8000f40:	2300      	movs	r3, #0
 8000f42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f44:	e184      	b.n	8001250 <setLEDs+0x318>
			i++) {
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 8000f46:	4aa4      	ldr	r2, [pc, #656]	; (80011d8 <setLEDs+0x2a0>)
 8000f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f4a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000f4e:	2b03      	cmp	r3, #3
 8000f50:	f200 817a 	bhi.w	8001248 <setLEDs+0x310>
 8000f54:	a201      	add	r2, pc, #4	; (adr r2, 8000f5c <setLEDs+0x24>)
 8000f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f5a:	bf00      	nop
 8000f5c:	08000f6d 	.word	0x08000f6d
 8000f60:	0800101f 	.word	0x0800101f
 8000f64:	080010d1 	.word	0x080010d1
 8000f68:	08001183 	.word	0x08001183
		case 0:
			for (int j = 0; j < 3; j++) {
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f70:	e043      	b.n	8000ffa <setLEDs+0xc2>
				for (int n = 0; n < 8; n++) {
 8000f72:	2300      	movs	r3, #0
 8000f74:	637b      	str	r3, [r7, #52]	; 0x34
 8000f76:	e03a      	b.n	8000fee <setLEDs+0xb6>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000f78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	4413      	add	r3, r2
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	441a      	add	r2, r3
 8000f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f86:	4413      	add	r3, r2
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	2280      	movs	r2, #128	; 0x80
 8000f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f90:	fa42 f303 	asr.w	r3, r2, r3
 8000f94:	400b      	ands	r3, r1
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d013      	beq.n	8000fc2 <setLEDs+0x8a>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f9c:	00da      	lsls	r2, r3, #3
 8000f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fa0:	18d1      	adds	r1, r2, r3
 8000fa2:	4a8d      	ldr	r2, [pc, #564]	; (80011d8 <setLEDs+0x2a0>)
 8000fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	4413      	add	r3, r2
 8000faa:	685a      	ldr	r2, [r3, #4]
 8000fac:	4613      	mov	r3, r2
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	4413      	add	r3, r2
 8000fb2:	00db      	lsls	r3, r3, #3
 8000fb4:	440b      	add	r3, r1
								+ 8] = 60;
 8000fb6:	3308      	adds	r3, #8
 8000fb8:	4a88      	ldr	r2, [pc, #544]	; (80011dc <setLEDs+0x2a4>)
 8000fba:	213c      	movs	r1, #60	; 0x3c
 8000fbc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000fc0:	e012      	b.n	8000fe8 <setLEDs+0xb0>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fc4:	00da      	lsls	r2, r3, #3
 8000fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fc8:	18d1      	adds	r1, r2, r3
 8000fca:	4a83      	ldr	r2, [pc, #524]	; (80011d8 <setLEDs+0x2a0>)
 8000fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fce:	00db      	lsls	r3, r3, #3
 8000fd0:	4413      	add	r3, r2
 8000fd2:	685a      	ldr	r2, [r3, #4]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	4413      	add	r3, r2
 8000fda:	00db      	lsls	r3, r3, #3
 8000fdc:	440b      	add	r3, r1
								+ 8] = 30;
 8000fde:	3308      	adds	r3, #8
 8000fe0:	4a7e      	ldr	r2, [pc, #504]	; (80011dc <setLEDs+0x2a4>)
 8000fe2:	211e      	movs	r1, #30
 8000fe4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fea:	3301      	adds	r3, #1
 8000fec:	637b      	str	r3, [r7, #52]	; 0x34
 8000fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff0:	2b07      	cmp	r3, #7
 8000ff2:	ddc1      	ble.n	8000f78 <setLEDs+0x40>
			for (int j = 0; j < 3; j++) {
 8000ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	ddb8      	ble.n	8000f72 <setLEDs+0x3a>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58;
 8001000:	2380      	movs	r3, #128	; 0x80
 8001002:	633b      	str	r3, [r7, #48]	; 0x30
 8001004:	e007      	b.n	8001016 <setLEDs+0xde>
					i++) {
				LED_PWM_Data_0[i] = 0;
 8001006:	4a75      	ldr	r2, [pc, #468]	; (80011dc <setLEDs+0x2a4>)
 8001008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800100a:	2100      	movs	r1, #0
 800100c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8001010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001012:	3301      	adds	r3, #1
 8001014:	633b      	str	r3, [r7, #48]	; 0x30
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58;
 8001016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001018:	2bb1      	cmp	r3, #177	; 0xb1
 800101a:	ddf4      	ble.n	8001006 <setLEDs+0xce>
			}
			break;
 800101c:	e115      	b.n	800124a <setLEDs+0x312>
		case 1:
			for (int j = 0; j < 3; j++) {
 800101e:	2300      	movs	r3, #0
 8001020:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001022:	e043      	b.n	80010ac <setLEDs+0x174>
				for (int n = 0; n < 8; n++) {
 8001024:	2300      	movs	r3, #0
 8001026:	62bb      	str	r3, [r7, #40]	; 0x28
 8001028:	e03a      	b.n	80010a0 <setLEDs+0x168>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 800102a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800102c:	4613      	mov	r3, r2
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	4413      	add	r3, r2
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	441a      	add	r2, r3
 8001036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001038:	4413      	add	r3, r2
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	4619      	mov	r1, r3
 800103e:	2280      	movs	r2, #128	; 0x80
 8001040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001042:	fa42 f303 	asr.w	r3, r2, r3
 8001046:	400b      	ands	r3, r1
 8001048:	2b00      	cmp	r3, #0
 800104a:	d013      	beq.n	8001074 <setLEDs+0x13c>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1])
 800104c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800104e:	00da      	lsls	r2, r3, #3
 8001050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001052:	18d1      	adds	r1, r2, r3
 8001054:	4a60      	ldr	r2, [pc, #384]	; (80011d8 <setLEDs+0x2a0>)
 8001056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	4413      	add	r3, r2
 800105c:	685a      	ldr	r2, [r3, #4]
 800105e:	4613      	mov	r3, r2
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	4413      	add	r3, r2
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	440b      	add	r3, r1
								+ 8] = 60;
 8001068:	3308      	adds	r3, #8
 800106a:	4a5d      	ldr	r2, [pc, #372]	; (80011e0 <setLEDs+0x2a8>)
 800106c:	213c      	movs	r1, #60	; 0x3c
 800106e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001072:	e012      	b.n	800109a <setLEDs+0x162>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8001074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001076:	00da      	lsls	r2, r3, #3
 8001078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800107a:	18d1      	adds	r1, r2, r3
 800107c:	4a56      	ldr	r2, [pc, #344]	; (80011d8 <setLEDs+0x2a0>)
 800107e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	4413      	add	r3, r2
 8001084:	685a      	ldr	r2, [r3, #4]
 8001086:	4613      	mov	r3, r2
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	4413      	add	r3, r2
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	440b      	add	r3, r1
								+ 8] = 30;
 8001090:	3308      	adds	r3, #8
 8001092:	4a53      	ldr	r2, [pc, #332]	; (80011e0 <setLEDs+0x2a8>)
 8001094:	211e      	movs	r1, #30
 8001096:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 800109a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800109c:	3301      	adds	r3, #1
 800109e:	62bb      	str	r3, [r7, #40]	; 0x28
 80010a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010a2:	2b07      	cmp	r3, #7
 80010a4:	ddc1      	ble.n	800102a <setLEDs+0xf2>
			for (int j = 0; j < 3; j++) {
 80010a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010a8:	3301      	adds	r3, #1
 80010aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	ddb8      	ble.n	8001024 <setLEDs+0xec>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58;
 80010b2:	2380      	movs	r3, #128	; 0x80
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
 80010b6:	e007      	b.n	80010c8 <setLEDs+0x190>
					i++) {
				LED_PWM_Data_1[i] = 0;
 80010b8:	4a49      	ldr	r2, [pc, #292]	; (80011e0 <setLEDs+0x2a8>)
 80010ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010bc:	2100      	movs	r1, #0
 80010be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 80010c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c4:	3301      	adds	r3, #1
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58;
 80010c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ca:	2bb1      	cmp	r3, #177	; 0xb1
 80010cc:	ddf4      	ble.n	80010b8 <setLEDs+0x180>
			}
			break;
 80010ce:	e0bc      	b.n	800124a <setLEDs+0x312>
		case 2:
			for (int j = 0; j < 3; j++) {
 80010d0:	2300      	movs	r3, #0
 80010d2:	623b      	str	r3, [r7, #32]
 80010d4:	e043      	b.n	800115e <setLEDs+0x226>
				for (int n = 0; n < 8; n++) {
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
 80010da:	e03a      	b.n	8001152 <setLEDs+0x21a>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 80010dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80010de:	4613      	mov	r3, r2
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	4413      	add	r3, r2
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	441a      	add	r2, r3
 80010e8:	6a3b      	ldr	r3, [r7, #32]
 80010ea:	4413      	add	r3, r2
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	4619      	mov	r1, r3
 80010f0:	2280      	movs	r2, #128	; 0x80
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	fa42 f303 	asr.w	r3, r2, r3
 80010f8:	400b      	ands	r3, r1
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d013      	beq.n	8001126 <setLEDs+0x1ee>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1])
 80010fe:	6a3b      	ldr	r3, [r7, #32]
 8001100:	00da      	lsls	r2, r3, #3
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	18d1      	adds	r1, r2, r3
 8001106:	4a34      	ldr	r2, [pc, #208]	; (80011d8 <setLEDs+0x2a0>)
 8001108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	4413      	add	r3, r2
 800110e:	685a      	ldr	r2, [r3, #4]
 8001110:	4613      	mov	r3, r2
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	4413      	add	r3, r2
 8001116:	00db      	lsls	r3, r3, #3
 8001118:	440b      	add	r3, r1
								+ 8] = 60;
 800111a:	3308      	adds	r3, #8
 800111c:	4a31      	ldr	r2, [pc, #196]	; (80011e4 <setLEDs+0x2ac>)
 800111e:	213c      	movs	r1, #60	; 0x3c
 8001120:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001124:	e012      	b.n	800114c <setLEDs+0x214>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8001126:	6a3b      	ldr	r3, [r7, #32]
 8001128:	00da      	lsls	r2, r3, #3
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	18d1      	adds	r1, r2, r3
 800112e:	4a2a      	ldr	r2, [pc, #168]	; (80011d8 <setLEDs+0x2a0>)
 8001130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001132:	00db      	lsls	r3, r3, #3
 8001134:	4413      	add	r3, r2
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	4613      	mov	r3, r2
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	4413      	add	r3, r2
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	440b      	add	r3, r1
								+ 8] = 30;
 8001142:	3308      	adds	r3, #8
 8001144:	4a27      	ldr	r2, [pc, #156]	; (80011e4 <setLEDs+0x2ac>)
 8001146:	211e      	movs	r1, #30
 8001148:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	3301      	adds	r3, #1
 8001150:	61fb      	str	r3, [r7, #28]
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	2b07      	cmp	r3, #7
 8001156:	ddc1      	ble.n	80010dc <setLEDs+0x1a4>
			for (int j = 0; j < 3; j++) {
 8001158:	6a3b      	ldr	r3, [r7, #32]
 800115a:	3301      	adds	r3, #1
 800115c:	623b      	str	r3, [r7, #32]
 800115e:	6a3b      	ldr	r3, [r7, #32]
 8001160:	2b02      	cmp	r3, #2
 8001162:	ddb8      	ble.n	80010d6 <setLEDs+0x19e>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58;
 8001164:	2338      	movs	r3, #56	; 0x38
 8001166:	61bb      	str	r3, [r7, #24]
 8001168:	e007      	b.n	800117a <setLEDs+0x242>
					i++) {
				LED_PWM_Data_2[i] = 0;
 800116a:	4a1e      	ldr	r2, [pc, #120]	; (80011e4 <setLEDs+0x2ac>)
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	2100      	movs	r1, #0
 8001170:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	3301      	adds	r3, #1
 8001178:	61bb      	str	r3, [r7, #24]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58;
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	2b69      	cmp	r3, #105	; 0x69
 800117e:	ddf4      	ble.n	800116a <setLEDs+0x232>
			}
			break;
 8001180:	e063      	b.n	800124a <setLEDs+0x312>
		case 3:
			for (int j = 0; j < 3; j++) {
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
 8001186:	e04d      	b.n	8001224 <setLEDs+0x2ec>
				for (int n = 0; n < 8; n++) {
 8001188:	2300      	movs	r3, #0
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	e044      	b.n	8001218 <setLEDs+0x2e0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 800118e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001190:	4613      	mov	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4413      	add	r3, r2
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	441a      	add	r2, r3
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	4413      	add	r3, r2
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	4619      	mov	r1, r3
 80011a2:	2280      	movs	r2, #128	; 0x80
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	fa42 f303 	asr.w	r3, r2, r3
 80011aa:	400b      	ands	r3, r1
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d01d      	beq.n	80011ec <setLEDs+0x2b4>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1])
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	00da      	lsls	r2, r3, #3
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	18d1      	adds	r1, r2, r3
 80011b8:	4a07      	ldr	r2, [pc, #28]	; (80011d8 <setLEDs+0x2a0>)
 80011ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	4413      	add	r3, r2
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	4613      	mov	r3, r2
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	4413      	add	r3, r2
 80011c8:	00db      	lsls	r3, r3, #3
 80011ca:	440b      	add	r3, r1
								+ 8] = 60;
 80011cc:	3308      	adds	r3, #8
 80011ce:	4a06      	ldr	r2, [pc, #24]	; (80011e8 <setLEDs+0x2b0>)
 80011d0:	213c      	movs	r1, #60	; 0x3c
 80011d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80011d6:	e01c      	b.n	8001212 <setLEDs+0x2da>
 80011d8:	0801c778 	.word	0x0801c778
 80011dc:	24000310 	.word	0x24000310
 80011e0:	240005d8 	.word	0x240005d8
 80011e4:	240008a0 	.word	0x240008a0
 80011e8:	24000a48 	.word	0x24000a48
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1])
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	00da      	lsls	r2, r3, #3
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	18d1      	adds	r1, r2, r3
 80011f4:	4a26      	ldr	r2, [pc, #152]	; (8001290 <setLEDs+0x358>)
 80011f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	4413      	add	r3, r2
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	4613      	mov	r3, r2
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	4413      	add	r3, r2
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	440b      	add	r3, r1
								+ 8] = 30;
 8001208:	3308      	adds	r3, #8
 800120a:	4a22      	ldr	r2, [pc, #136]	; (8001294 <setLEDs+0x35c>)
 800120c:	211e      	movs	r1, #30
 800120e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	3301      	adds	r3, #1
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	2b07      	cmp	r3, #7
 800121c:	ddb7      	ble.n	800118e <setLEDs+0x256>
			for (int j = 0; j < 3; j++) {
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	3301      	adds	r3, #1
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	2b02      	cmp	r3, #2
 8001228:	ddae      	ble.n	8001188 <setLEDs+0x250>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58;
 800122a:	2338      	movs	r3, #56	; 0x38
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	e007      	b.n	8001240 <setLEDs+0x308>
					i++) {
				LED_PWM_Data_3[i] = 0;
 8001230:	4a18      	ldr	r2, [pc, #96]	; (8001294 <setLEDs+0x35c>)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2100      	movs	r1, #0
 8001236:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	3301      	adds	r3, #1
 800123e:	60fb      	str	r3, [r7, #12]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2b69      	cmp	r3, #105	; 0x69
 8001244:	ddf4      	ble.n	8001230 <setLEDs+0x2f8>
			}
			break;
 8001246:	e000      	b.n	800124a <setLEDs+0x312>
		default:
			break;
 8001248:	bf00      	nop
			i++) {
 800124a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800124c:	3301      	adds	r3, #1
 800124e:	63fb      	str	r3, [r7, #60]	; 0x3c
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3;
 8001250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001252:	2b0d      	cmp	r3, #13
 8001254:	f77f ae77 	ble.w	8000f46 <setLEDs+0xe>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0,
 8001258:	23b2      	movs	r3, #178	; 0xb2
 800125a:	4a0f      	ldr	r2, [pc, #60]	; (8001298 <setLEDs+0x360>)
 800125c:	210c      	movs	r1, #12
 800125e:	480f      	ldr	r0, [pc, #60]	; (800129c <setLEDs+0x364>)
 8001260:	f00f f9bc 	bl	80105dc <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1,
 8001264:	23b2      	movs	r3, #178	; 0xb2
 8001266:	4a0e      	ldr	r2, [pc, #56]	; (80012a0 <setLEDs+0x368>)
 8001268:	2108      	movs	r1, #8
 800126a:	480e      	ldr	r0, [pc, #56]	; (80012a4 <setLEDs+0x36c>)
 800126c:	f00f f9b6 	bl	80105dc <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2,
 8001270:	236a      	movs	r3, #106	; 0x6a
 8001272:	4a0d      	ldr	r2, [pc, #52]	; (80012a8 <setLEDs+0x370>)
 8001274:	2104      	movs	r1, #4
 8001276:	480d      	ldr	r0, [pc, #52]	; (80012ac <setLEDs+0x374>)
 8001278:	f00f f9b0 	bl	80105dc <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3,
 800127c:	236a      	movs	r3, #106	; 0x6a
 800127e:	4a05      	ldr	r2, [pc, #20]	; (8001294 <setLEDs+0x35c>)
 8001280:	2100      	movs	r1, #0
 8001282:	480a      	ldr	r0, [pc, #40]	; (80012ac <setLEDs+0x374>)
 8001284:	f00f f9aa 	bl	80105dc <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3

}
 8001288:	bf00      	nop
 800128a:	3740      	adds	r7, #64	; 0x40
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	0801c778 	.word	0x0801c778
 8001294:	24000a48 	.word	0x24000a48
 8001298:	24000310 	.word	0x24000310
 800129c:	240011bc 	.word	0x240011bc
 80012a0:	240005d8 	.word	0x240005d8
 80012a4:	240010d8 	.word	0x240010d8
 80012a8:	240008a0 	.word	0x240008a0
 80012ac:	24001124 	.word	0x24001124

080012b0 <LG_Read_Register>:
extern SPI_HandleTypeDef hspi2;

int current_sensor = 2;


uint8_t LG_Read_Register(uint8_t addr){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	addr |= (1<<7);
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	71fb      	strb	r3, [r7, #7]

	if(current_sensor == 1){
 80012c4:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <LG_Read_Register+0x90>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d117      	bne.n	80012fc <LG_Read_Register+0x4c>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 0);
 80012cc:	2200      	movs	r2, #0
 80012ce:	2110      	movs	r1, #16
 80012d0:	481c      	ldr	r0, [pc, #112]	; (8001344 <LG_Read_Register+0x94>)
 80012d2:	f007 fab7 	bl	8008844 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, &addr, 1, 100);
 80012d6:	1df9      	adds	r1, r7, #7
 80012d8:	2364      	movs	r3, #100	; 0x64
 80012da:	2201      	movs	r2, #1
 80012dc:	481a      	ldr	r0, [pc, #104]	; (8001348 <LG_Read_Register+0x98>)
 80012de:	f00e fc59 	bl	800fb94 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &reg_value, 1, 100);
 80012e2:	f107 010f 	add.w	r1, r7, #15
 80012e6:	2364      	movs	r3, #100	; 0x64
 80012e8:	2201      	movs	r2, #1
 80012ea:	4817      	ldr	r0, [pc, #92]	; (8001348 <LG_Read_Register+0x98>)
 80012ec:	f00e fe4e 	bl	800ff8c <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 1);
 80012f0:	2201      	movs	r2, #1
 80012f2:	2110      	movs	r1, #16
 80012f4:	4813      	ldr	r0, [pc, #76]	; (8001344 <LG_Read_Register+0x94>)
 80012f6:	f007 faa5 	bl	8008844 <HAL_GPIO_WritePin>
 80012fa:	e01c      	b.n	8001336 <LG_Read_Register+0x86>
	}else if(current_sensor == 2){
 80012fc:	4b10      	ldr	r3, [pc, #64]	; (8001340 <LG_Read_Register+0x90>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b02      	cmp	r3, #2
 8001302:	d118      	bne.n	8001336 <LG_Read_Register+0x86>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8001304:	2200      	movs	r2, #0
 8001306:	f44f 7180 	mov.w	r1, #256	; 0x100
 800130a:	4810      	ldr	r0, [pc, #64]	; (800134c <LG_Read_Register+0x9c>)
 800130c:	f007 fa9a 	bl	8008844 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8001310:	1df9      	adds	r1, r7, #7
 8001312:	2364      	movs	r3, #100	; 0x64
 8001314:	2201      	movs	r2, #1
 8001316:	480e      	ldr	r0, [pc, #56]	; (8001350 <LG_Read_Register+0xa0>)
 8001318:	f00e fc3c 	bl	800fb94 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, &reg_value, 1, 100);
 800131c:	f107 010f 	add.w	r1, r7, #15
 8001320:	2364      	movs	r3, #100	; 0x64
 8001322:	2201      	movs	r2, #1
 8001324:	480a      	ldr	r0, [pc, #40]	; (8001350 <LG_Read_Register+0xa0>)
 8001326:	f00e fe31 	bl	800ff8c <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 800132a:	2201      	movs	r2, #1
 800132c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001330:	4806      	ldr	r0, [pc, #24]	; (800134c <LG_Read_Register+0x9c>)
 8001332:	f007 fa87 	bl	8008844 <HAL_GPIO_WritePin>
	}


	return reg_value;
 8001336:	7bfb      	ldrb	r3, [r7, #15]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	24000000 	.word	0x24000000
 8001344:	58020800 	.word	0x58020800
 8001348:	24000f40 	.word	0x24000f40
 800134c:	58020c00 	.word	0x58020c00
 8001350:	24000fc8 	.word	0x24000fc8

08001354 <LG_Write_Register>:

void LG_Write_Register(uint8_t addr, uint8_t data){
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	460a      	mov	r2, r1
 800135e:	71fb      	strb	r3, [r7, #7]
 8001360:	4613      	mov	r3, r2
 8001362:	71bb      	strb	r3, [r7, #6]
	if(current_sensor == 1){
 8001364:	4b1d      	ldr	r3, [pc, #116]	; (80013dc <LG_Write_Register+0x88>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d116      	bne.n	800139a <LG_Write_Register+0x46>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 0);
 800136c:	2200      	movs	r2, #0
 800136e:	2110      	movs	r1, #16
 8001370:	481b      	ldr	r0, [pc, #108]	; (80013e0 <LG_Write_Register+0x8c>)
 8001372:	f007 fa67 	bl	8008844 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, &addr, 1, 100);
 8001376:	1df9      	adds	r1, r7, #7
 8001378:	2364      	movs	r3, #100	; 0x64
 800137a:	2201      	movs	r2, #1
 800137c:	4819      	ldr	r0, [pc, #100]	; (80013e4 <LG_Write_Register+0x90>)
 800137e:	f00e fc09 	bl	800fb94 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 8001382:	1db9      	adds	r1, r7, #6
 8001384:	2364      	movs	r3, #100	; 0x64
 8001386:	2201      	movs	r2, #1
 8001388:	4816      	ldr	r0, [pc, #88]	; (80013e4 <LG_Write_Register+0x90>)
 800138a:	f00e fc03 	bl	800fb94 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 1);
 800138e:	2201      	movs	r2, #1
 8001390:	2110      	movs	r1, #16
 8001392:	4813      	ldr	r0, [pc, #76]	; (80013e0 <LG_Write_Register+0x8c>)
 8001394:	f007 fa56 	bl	8008844 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
		HAL_SPI_Transmit(&hspi2, &data, 1, 100);
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
	}

}
 8001398:	e01b      	b.n	80013d2 <LG_Write_Register+0x7e>
	} else if(current_sensor == 2){
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <LG_Write_Register+0x88>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d117      	bne.n	80013d2 <LG_Write_Register+0x7e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 80013a2:	2200      	movs	r2, #0
 80013a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013a8:	480f      	ldr	r0, [pc, #60]	; (80013e8 <LG_Write_Register+0x94>)
 80013aa:	f007 fa4b 	bl	8008844 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80013ae:	1df9      	adds	r1, r7, #7
 80013b0:	2364      	movs	r3, #100	; 0x64
 80013b2:	2201      	movs	r2, #1
 80013b4:	480d      	ldr	r0, [pc, #52]	; (80013ec <LG_Write_Register+0x98>)
 80013b6:	f00e fbed 	bl	800fb94 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 80013ba:	1db9      	adds	r1, r7, #6
 80013bc:	2364      	movs	r3, #100	; 0x64
 80013be:	2201      	movs	r2, #1
 80013c0:	480a      	ldr	r0, [pc, #40]	; (80013ec <LG_Write_Register+0x98>)
 80013c2:	f00e fbe7 	bl	800fb94 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 80013c6:	2201      	movs	r2, #1
 80013c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013cc:	4806      	ldr	r0, [pc, #24]	; (80013e8 <LG_Write_Register+0x94>)
 80013ce:	f007 fa39 	bl	8008844 <HAL_GPIO_WritePin>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	24000000 	.word	0x24000000
 80013e0:	58020800 	.word	0x58020800
 80013e4:	24000f40 	.word	0x24000f40
 80013e8:	58020c00 	.word	0x58020c00
 80013ec:	24000fc8 	.word	0x24000fc8

080013f0 <LG_Check>:

uint8_t LG_Check(){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
	current_sensor = 1;
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <LG_Check+0x60>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	601a      	str	r2, [r3, #0]
	uint8_t sensors_state = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	71fb      	strb	r3, [r7, #7]
	if(LG_Read_Register(0x0F) == 0x6B){
 8001400:	200f      	movs	r0, #15
 8001402:	f7ff ff55 	bl	80012b0 <LG_Read_Register>
 8001406:	4603      	mov	r3, r0
 8001408:	2b6b      	cmp	r3, #107	; 0x6b
 800140a:	d103      	bne.n	8001414 <LG_Check+0x24>
		sensors_state |= 0b1;
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	f043 0301 	orr.w	r3, r3, #1
 8001412:	71fb      	strb	r3, [r7, #7]
	}

	current_sensor = 2;
 8001414:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <LG_Check+0x60>)
 8001416:	2202      	movs	r2, #2
 8001418:	601a      	str	r2, [r3, #0]
	if(LG_Read_Register(0x0F) == 0x6B){
 800141a:	200f      	movs	r0, #15
 800141c:	f7ff ff48 	bl	80012b0 <LG_Read_Register>
 8001420:	4603      	mov	r3, r0
 8001422:	2b6b      	cmp	r3, #107	; 0x6b
 8001424:	d103      	bne.n	800142e <LG_Check+0x3e>
		sensors_state |= 0b10;
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	f043 0302 	orr.w	r3, r3, #2
 800142c:	71fb      	strb	r3, [r7, #7]
	}

	if(sensors_state & 0b1){
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <LG_Check+0x50>
		current_sensor = 1;
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <LG_Check+0x60>)
 800143a:	2201      	movs	r2, #1
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	e002      	b.n	8001446 <LG_Check+0x56>
	}else{
		current_sensor = 2;
 8001440:	4b03      	ldr	r3, [pc, #12]	; (8001450 <LG_Check+0x60>)
 8001442:	2202      	movs	r2, #2
 8001444:	601a      	str	r2, [r3, #0]
	}
	return sensors_state;
 8001446:	79fb      	ldrb	r3, [r7, #7]

}
 8001448:	4618      	mov	r0, r3
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	24000000 	.word	0x24000000

08001454 <LG_Configure>:

void LG_Configure(){
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
	LG_Write_Register(0x10, 0b00111100); //Accelerometer setup - CTRL1_XL
 8001458:	213c      	movs	r1, #60	; 0x3c
 800145a:	2010      	movs	r0, #16
 800145c:	f7ff ff7a 	bl	8001354 <LG_Write_Register>
	LG_Write_Register(0x11, 0b01101000); //Gyroscope setup - CTRL2_G
 8001460:	2168      	movs	r1, #104	; 0x68
 8001462:	2011      	movs	r0, #17
 8001464:	f7ff ff76 	bl	8001354 <LG_Write_Register>
	LG_Write_Register(0x13, 0b00001100); //disables I2C - CTRL4_C
 8001468:	210c      	movs	r1, #12
 800146a:	2013      	movs	r0, #19
 800146c:	f7ff ff72 	bl	8001354 <LG_Write_Register>
}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}
 8001474:	0000      	movs	r0, r0
	...

08001478 <LG_Get_Gyro_X>:

float LG_Get_Gyro_X(){
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG_Read_Register(0x22);
 800147e:	2022      	movs	r0, #34	; 0x22
 8001480:	f7ff ff16 	bl	80012b0 <LG_Read_Register>
 8001484:	4603      	mov	r3, r0
 8001486:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG_Read_Register(0x23);
 8001488:	2023      	movs	r0, #35	; 0x23
 800148a:	f7ff ff11 	bl	80012b0 <LG_Read_Register>
 800148e:	4603      	mov	r3, r0
 8001490:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 8001492:	79bb      	ldrb	r3, [r7, #6]
 8001494:	021b      	lsls	r3, r3, #8
 8001496:	b21a      	sxth	r2, r3
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	b21b      	sxth	r3, r3
 800149c:	4313      	orrs	r3, r2
 800149e:	80bb      	strh	r3, [r7, #4]
	float omega = (float)Gyro*35.0/1000;
 80014a0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014a4:	ee07 3a90 	vmov	s15, r3
 80014a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014b0:	ed9f 6b09 	vldr	d6, [pc, #36]	; 80014d8 <LG_Get_Gyro_X+0x60>
 80014b4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80014b8:	ed9f 5b09 	vldr	d5, [pc, #36]	; 80014e0 <LG_Get_Gyro_X+0x68>
 80014bc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014c0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014c4:	edc7 7a00 	vstr	s15, [r7]
	return omega;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	ee07 3a90 	vmov	s15, r3
}
 80014ce:	eeb0 0a67 	vmov.f32	s0, s15
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	00000000 	.word	0x00000000
 80014dc:	40418000 	.word	0x40418000
 80014e0:	00000000 	.word	0x00000000
 80014e4:	408f4000 	.word	0x408f4000

080014e8 <LG_Get_Gyro_Y>:

float LG_Get_Gyro_Y(){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG_Read_Register(0x24);
 80014ee:	2024      	movs	r0, #36	; 0x24
 80014f0:	f7ff fede 	bl	80012b0 <LG_Read_Register>
 80014f4:	4603      	mov	r3, r0
 80014f6:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG_Read_Register(0x25);
 80014f8:	2025      	movs	r0, #37	; 0x25
 80014fa:	f7ff fed9 	bl	80012b0 <LG_Read_Register>
 80014fe:	4603      	mov	r3, r0
 8001500:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 8001502:	79bb      	ldrb	r3, [r7, #6]
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	b21a      	sxth	r2, r3
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	b21b      	sxth	r3, r3
 800150c:	4313      	orrs	r3, r2
 800150e:	80bb      	strh	r3, [r7, #4]
	float omega = (float)Gyro*35.0/1000;
 8001510:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001514:	ee07 3a90 	vmov	s15, r3
 8001518:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800151c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001520:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8001548 <LG_Get_Gyro_Y+0x60>
 8001524:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001528:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8001550 <LG_Get_Gyro_Y+0x68>
 800152c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001530:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001534:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	ee07 3a90 	vmov	s15, r3
}
 800153e:	eeb0 0a67 	vmov.f32	s0, s15
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	00000000 	.word	0x00000000
 800154c:	40418000 	.word	0x40418000
 8001550:	00000000 	.word	0x00000000
 8001554:	408f4000 	.word	0x408f4000

08001558 <LG_Get_Gyro_Z>:

float LG_Get_Gyro_Z(){
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG_Read_Register(0x26);
 800155e:	2026      	movs	r0, #38	; 0x26
 8001560:	f7ff fea6 	bl	80012b0 <LG_Read_Register>
 8001564:	4603      	mov	r3, r0
 8001566:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG_Read_Register(0x27);
 8001568:	2027      	movs	r0, #39	; 0x27
 800156a:	f7ff fea1 	bl	80012b0 <LG_Read_Register>
 800156e:	4603      	mov	r3, r0
 8001570:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 8001572:	79bb      	ldrb	r3, [r7, #6]
 8001574:	021b      	lsls	r3, r3, #8
 8001576:	b21a      	sxth	r2, r3
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	b21b      	sxth	r3, r3
 800157c:	4313      	orrs	r3, r2
 800157e:	80bb      	strh	r3, [r7, #4]
	float omega = (float)Gyro*35.0/1000;
 8001580:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001584:	ee07 3a90 	vmov	s15, r3
 8001588:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800158c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001590:	ed9f 6b09 	vldr	d6, [pc, #36]	; 80015b8 <LG_Get_Gyro_Z+0x60>
 8001594:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001598:	ed9f 5b09 	vldr	d5, [pc, #36]	; 80015c0 <LG_Get_Gyro_Z+0x68>
 800159c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015a0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015a4:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	ee07 3a90 	vmov	s15, r3
}
 80015ae:	eeb0 0a67 	vmov.f32	s0, s15
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	00000000 	.word	0x00000000
 80015bc:	40418000 	.word	0x40418000
 80015c0:	00000000 	.word	0x00000000
 80015c4:	408f4000 	.word	0x408f4000

080015c8 <LG_Get_Acc_X>:

float LG_Get_Acc_X(){
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
	uint8_t Acc_L = LG_Read_Register(0x28);
 80015ce:	2028      	movs	r0, #40	; 0x28
 80015d0:	f7ff fe6e 	bl	80012b0 <LG_Read_Register>
 80015d4:	4603      	mov	r3, r0
 80015d6:	71fb      	strb	r3, [r7, #7]
	uint8_t Acc_H = LG_Read_Register(0x29);
 80015d8:	2029      	movs	r0, #41	; 0x29
 80015da:	f7ff fe69 	bl	80012b0 <LG_Read_Register>
 80015de:	4603      	mov	r3, r0
 80015e0:	71bb      	strb	r3, [r7, #6]
	int16_t Acc = ((int16_t) Acc_H << 8) | Acc_L;
 80015e2:	79bb      	ldrb	r3, [r7, #6]
 80015e4:	021b      	lsls	r3, r3, #8
 80015e6:	b21a      	sxth	r2, r3
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	b21b      	sxth	r3, r3
 80015ec:	4313      	orrs	r3, r2
 80015ee:	80bb      	strh	r3, [r7, #4]

	float AccSI = ((float)Acc / 32767) * 9.8 * 8;
 80015f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015f4:	ee07 3a90 	vmov	s15, r3
 80015f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015fc:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001638 <LG_Get_Acc_X+0x70>
 8001600:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001604:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001608:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8001630 <LG_Get_Acc_X+0x68>
 800160c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001610:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 8001614:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001618:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800161c:	edc7 7a00 	vstr	s15, [r7]
	return AccSI;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	ee07 3a90 	vmov	s15, r3
}
 8001626:	eeb0 0a67 	vmov.f32	s0, s15
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	9999999a 	.word	0x9999999a
 8001634:	40239999 	.word	0x40239999
 8001638:	46fffe00 	.word	0x46fffe00
 800163c:	00000000 	.word	0x00000000

08001640 <LG_Get_Acc_Y>:

float LG_Get_Acc_Y(){
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
	uint8_t Acc_L = LG_Read_Register(0x2A);
 8001646:	202a      	movs	r0, #42	; 0x2a
 8001648:	f7ff fe32 	bl	80012b0 <LG_Read_Register>
 800164c:	4603      	mov	r3, r0
 800164e:	71fb      	strb	r3, [r7, #7]
	uint8_t Acc_H = LG_Read_Register(0x2B);
 8001650:	202b      	movs	r0, #43	; 0x2b
 8001652:	f7ff fe2d 	bl	80012b0 <LG_Read_Register>
 8001656:	4603      	mov	r3, r0
 8001658:	71bb      	strb	r3, [r7, #6]
	int16_t Acc = ((int16_t) Acc_H << 8) | Acc_L;
 800165a:	79bb      	ldrb	r3, [r7, #6]
 800165c:	021b      	lsls	r3, r3, #8
 800165e:	b21a      	sxth	r2, r3
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	b21b      	sxth	r3, r3
 8001664:	4313      	orrs	r3, r2
 8001666:	80bb      	strh	r3, [r7, #4]

	float AccSI = ((float)Acc / 32767) * 9.8 * 8;
 8001668:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800166c:	ee07 3a90 	vmov	s15, r3
 8001670:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001674:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80016b0 <LG_Get_Acc_Y+0x70>
 8001678:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800167c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001680:	ed9f 6b09 	vldr	d6, [pc, #36]	; 80016a8 <LG_Get_Acc_Y+0x68>
 8001684:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001688:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 800168c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001690:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001694:	edc7 7a00 	vstr	s15, [r7]
	return AccSI;
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	ee07 3a90 	vmov	s15, r3
}
 800169e:	eeb0 0a67 	vmov.f32	s0, s15
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	9999999a 	.word	0x9999999a
 80016ac:	40239999 	.word	0x40239999
 80016b0:	46fffe00 	.word	0x46fffe00
 80016b4:	00000000 	.word	0x00000000

080016b8 <LG_Get_Acc_Z>:

float LG_Get_Acc_Z(){
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
	uint8_t Acc_L = LG_Read_Register(0x2C);
 80016be:	202c      	movs	r0, #44	; 0x2c
 80016c0:	f7ff fdf6 	bl	80012b0 <LG_Read_Register>
 80016c4:	4603      	mov	r3, r0
 80016c6:	71fb      	strb	r3, [r7, #7]
	uint8_t Acc_H = LG_Read_Register(0x2D);
 80016c8:	202d      	movs	r0, #45	; 0x2d
 80016ca:	f7ff fdf1 	bl	80012b0 <LG_Read_Register>
 80016ce:	4603      	mov	r3, r0
 80016d0:	71bb      	strb	r3, [r7, #6]
	int16_t Acc = ((int16_t) Acc_H << 8) | Acc_L;
 80016d2:	79bb      	ldrb	r3, [r7, #6]
 80016d4:	021b      	lsls	r3, r3, #8
 80016d6:	b21a      	sxth	r2, r3
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	b21b      	sxth	r3, r3
 80016dc:	4313      	orrs	r3, r2
 80016de:	80bb      	strh	r3, [r7, #4]

	float AccSI = ((float)Acc / 32767) * 9.8 * 8;
 80016e0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016e4:	ee07 3a90 	vmov	s15, r3
 80016e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016ec:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001728 <LG_Get_Acc_Z+0x70>
 80016f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016f8:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8001720 <LG_Get_Acc_Z+0x68>
 80016fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001700:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 8001704:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001708:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800170c:	edc7 7a00 	vstr	s15, [r7]
	return AccSI;
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	ee07 3a90 	vmov	s15, r3
}
 8001716:	eeb0 0a67 	vmov.f32	s0, s15
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	9999999a 	.word	0x9999999a
 8001724:	40239999 	.word	0x40239999
 8001728:	46fffe00 	.word	0x46fffe00

0800172c <setStatus>:
uint8_t statusArray[14];


const float brightness = 0.4;

void setStatus(char *ModuleName, uint8_t status) {
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	460b      	mov	r3, r1
 8001736:	70fb      	strb	r3, [r7, #3]

	if (strcmp(ModuleName, "CAN") == 0) {
 8001738:	494e      	ldr	r1, [pc, #312]	; (8001874 <setStatus+0x148>)
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7fe fde8 	bl	8000310 <strcmp>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d103      	bne.n	800174e <setStatus+0x22>
		statusArray[0] = status;
 8001746:	4a4c      	ldr	r2, [pc, #304]	; (8001878 <setStatus+0x14c>)
 8001748:	78fb      	ldrb	r3, [r7, #3]
 800174a:	7013      	strb	r3, [r2, #0]
	} else if (strcmp(ModuleName, "BATT") == 0) {
		statusArray[13] = status;

	}

}
 800174c:	e08d      	b.n	800186a <setStatus+0x13e>
	} else if (strcmp(ModuleName, "GPS") == 0) {
 800174e:	494b      	ldr	r1, [pc, #300]	; (800187c <setStatus+0x150>)
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7fe fddd 	bl	8000310 <strcmp>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d103      	bne.n	8001764 <setStatus+0x38>
		statusArray[1] = status;
 800175c:	4a46      	ldr	r2, [pc, #280]	; (8001878 <setStatus+0x14c>)
 800175e:	78fb      	ldrb	r3, [r7, #3]
 8001760:	7053      	strb	r3, [r2, #1]
}
 8001762:	e082      	b.n	800186a <setStatus+0x13e>
	} else if (strcmp(ModuleName, "LoRA") == 0) {
 8001764:	4946      	ldr	r1, [pc, #280]	; (8001880 <setStatus+0x154>)
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7fe fdd2 	bl	8000310 <strcmp>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d103      	bne.n	800177a <setStatus+0x4e>
		statusArray[2] = status;
 8001772:	4a41      	ldr	r2, [pc, #260]	; (8001878 <setStatus+0x14c>)
 8001774:	78fb      	ldrb	r3, [r7, #3]
 8001776:	7093      	strb	r3, [r2, #2]
}
 8001778:	e077      	b.n	800186a <setStatus+0x13e>
	} else if (strcmp(ModuleName, "SD CARD") == 0) {
 800177a:	4942      	ldr	r1, [pc, #264]	; (8001884 <setStatus+0x158>)
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7fe fdc7 	bl	8000310 <strcmp>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d103      	bne.n	8001790 <setStatus+0x64>
		statusArray[3] = status;
 8001788:	4a3b      	ldr	r2, [pc, #236]	; (8001878 <setStatus+0x14c>)
 800178a:	78fb      	ldrb	r3, [r7, #3]
 800178c:	70d3      	strb	r3, [r2, #3]
}
 800178e:	e06c      	b.n	800186a <setStatus+0x13e>
	} else if (strcmp(ModuleName, "HG 1") == 0) {
 8001790:	493d      	ldr	r1, [pc, #244]	; (8001888 <setStatus+0x15c>)
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7fe fdbc 	bl	8000310 <strcmp>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d103      	bne.n	80017a6 <setStatus+0x7a>
		statusArray[4] = status;
 800179e:	4a36      	ldr	r2, [pc, #216]	; (8001878 <setStatus+0x14c>)
 80017a0:	78fb      	ldrb	r3, [r7, #3]
 80017a2:	7113      	strb	r3, [r2, #4]
}
 80017a4:	e061      	b.n	800186a <setStatus+0x13e>
	} else if (strcmp(ModuleName, "LG 1") == 0) {
 80017a6:	4939      	ldr	r1, [pc, #228]	; (800188c <setStatus+0x160>)
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7fe fdb1 	bl	8000310 <strcmp>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d103      	bne.n	80017bc <setStatus+0x90>
		statusArray[5] = status;
 80017b4:	4a30      	ldr	r2, [pc, #192]	; (8001878 <setStatus+0x14c>)
 80017b6:	78fb      	ldrb	r3, [r7, #3]
 80017b8:	7153      	strb	r3, [r2, #5]
}
 80017ba:	e056      	b.n	800186a <setStatus+0x13e>
	} else if (strcmp(ModuleName, "BAR 1") == 0) {
 80017bc:	4934      	ldr	r1, [pc, #208]	; (8001890 <setStatus+0x164>)
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7fe fda6 	bl	8000310 <strcmp>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d103      	bne.n	80017d2 <setStatus+0xa6>
		statusArray[6] = status;
 80017ca:	4a2b      	ldr	r2, [pc, #172]	; (8001878 <setStatus+0x14c>)
 80017cc:	78fb      	ldrb	r3, [r7, #3]
 80017ce:	7193      	strb	r3, [r2, #6]
}
 80017d0:	e04b      	b.n	800186a <setStatus+0x13e>
	} else if (strcmp(ModuleName, "ARM") == 0) {
 80017d2:	4930      	ldr	r1, [pc, #192]	; (8001894 <setStatus+0x168>)
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7fe fd9b 	bl	8000310 <strcmp>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d103      	bne.n	80017e8 <setStatus+0xbc>
		statusArray[7] = status;
 80017e0:	4a25      	ldr	r2, [pc, #148]	; (8001878 <setStatus+0x14c>)
 80017e2:	78fb      	ldrb	r3, [r7, #3]
 80017e4:	71d3      	strb	r3, [r2, #7]
}
 80017e6:	e040      	b.n	800186a <setStatus+0x13e>
	} else if (strcmp(ModuleName, "HG 2") == 0) {
 80017e8:	492b      	ldr	r1, [pc, #172]	; (8001898 <setStatus+0x16c>)
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7fe fd90 	bl	8000310 <strcmp>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d103      	bne.n	80017fe <setStatus+0xd2>
		statusArray[8] = status;
 80017f6:	4a20      	ldr	r2, [pc, #128]	; (8001878 <setStatus+0x14c>)
 80017f8:	78fb      	ldrb	r3, [r7, #3]
 80017fa:	7213      	strb	r3, [r2, #8]
}
 80017fc:	e035      	b.n	800186a <setStatus+0x13e>
	} else if (strcmp(ModuleName, "LG 2") == 0) {
 80017fe:	4927      	ldr	r1, [pc, #156]	; (800189c <setStatus+0x170>)
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7fe fd85 	bl	8000310 <strcmp>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d103      	bne.n	8001814 <setStatus+0xe8>
		statusArray[9] = status;
 800180c:	4a1a      	ldr	r2, [pc, #104]	; (8001878 <setStatus+0x14c>)
 800180e:	78fb      	ldrb	r3, [r7, #3]
 8001810:	7253      	strb	r3, [r2, #9]
}
 8001812:	e02a      	b.n	800186a <setStatus+0x13e>
	} else if (strcmp(ModuleName, "BAR 2") == 0) {
 8001814:	4922      	ldr	r1, [pc, #136]	; (80018a0 <setStatus+0x174>)
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7fe fd7a 	bl	8000310 <strcmp>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d103      	bne.n	800182a <setStatus+0xfe>
		statusArray[10] = status;
 8001822:	4a15      	ldr	r2, [pc, #84]	; (8001878 <setStatus+0x14c>)
 8001824:	78fb      	ldrb	r3, [r7, #3]
 8001826:	7293      	strb	r3, [r2, #10]
}
 8001828:	e01f      	b.n	800186a <setStatus+0x13e>
	} else if (strcmp(ModuleName, "REG 1") == 0) {
 800182a:	491e      	ldr	r1, [pc, #120]	; (80018a4 <setStatus+0x178>)
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7fe fd6f 	bl	8000310 <strcmp>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d103      	bne.n	8001840 <setStatus+0x114>
		statusArray[11] = status;
 8001838:	4a0f      	ldr	r2, [pc, #60]	; (8001878 <setStatus+0x14c>)
 800183a:	78fb      	ldrb	r3, [r7, #3]
 800183c:	72d3      	strb	r3, [r2, #11]
}
 800183e:	e014      	b.n	800186a <setStatus+0x13e>
	} else if (strcmp(ModuleName, "REG 2") == 0) {
 8001840:	4919      	ldr	r1, [pc, #100]	; (80018a8 <setStatus+0x17c>)
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7fe fd64 	bl	8000310 <strcmp>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d103      	bne.n	8001856 <setStatus+0x12a>
		statusArray[12] = status;
 800184e:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <setStatus+0x14c>)
 8001850:	78fb      	ldrb	r3, [r7, #3]
 8001852:	7313      	strb	r3, [r2, #12]
}
 8001854:	e009      	b.n	800186a <setStatus+0x13e>
	} else if (strcmp(ModuleName, "BATT") == 0) {
 8001856:	4915      	ldr	r1, [pc, #84]	; (80018ac <setStatus+0x180>)
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7fe fd59 	bl	8000310 <strcmp>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d102      	bne.n	800186a <setStatus+0x13e>
		statusArray[13] = status;
 8001864:	4a04      	ldr	r2, [pc, #16]	; (8001878 <setStatus+0x14c>)
 8001866:	78fb      	ldrb	r3, [r7, #3]
 8001868:	7353      	strb	r3, [r2, #13]
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	0801c44c 	.word	0x0801c44c
 8001878:	24000bf0 	.word	0x24000bf0
 800187c:	0801c450 	.word	0x0801c450
 8001880:	0801c454 	.word	0x0801c454
 8001884:	0801c45c 	.word	0x0801c45c
 8001888:	0801c464 	.word	0x0801c464
 800188c:	0801c46c 	.word	0x0801c46c
 8001890:	0801c474 	.word	0x0801c474
 8001894:	0801c47c 	.word	0x0801c47c
 8001898:	0801c480 	.word	0x0801c480
 800189c:	0801c488 	.word	0x0801c488
 80018a0:	0801c490 	.word	0x0801c490
 80018a4:	0801c498 	.word	0x0801c498
 80018a8:	0801c4a0 	.word	0x0801c4a0
 80018ac:	0801c4a8 	.word	0x0801c4a8

080018b0 <updateStatus>:

void updateStatus() {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08e      	sub	sp, #56	; 0x38
 80018b4:	af00      	add	r7, sp, #0
	uint8_t LED_Color_Data_Staus[14][3];
	for (int i = 0; i < 14; i++) {
 80018b6:	2300      	movs	r3, #0
 80018b8:	637b      	str	r3, [r7, #52]	; 0x34
 80018ba:	e0d0      	b.n	8001a5e <updateStatus+0x1ae>
		switch (statusArray[i]) {
 80018bc:	4a6e      	ldr	r2, [pc, #440]	; (8001a78 <updateStatus+0x1c8>)
 80018be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018c0:	4413      	add	r3, r2
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	f000 809a 	beq.w	80019fe <updateStatus+0x14e>
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	f300 80c3 	bgt.w	8001a56 <updateStatus+0x1a6>
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d002      	beq.n	80018da <updateStatus+0x2a>
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d02d      	beq.n	8001934 <updateStatus+0x84>
		case 2: //GREEN LED, module nominal
			LED_Color_Data_Staus[i][0] = (int)(255 * brightness);
			LED_Color_Data_Staus[i][1] = 0;
			LED_Color_Data_Staus[i][2] = 0;
		default:
			break;
 80018d8:	e0bd      	b.n	8001a56 <updateStatus+0x1a6>
			LED_Color_Data_Staus[i][0] = 0;
 80018da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018dc:	4613      	mov	r3, r2
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	4413      	add	r3, r2
 80018e2:	3330      	adds	r3, #48	; 0x30
 80018e4:	f107 0208 	add.w	r2, r7, #8
 80018e8:	4413      	add	r3, r2
 80018ea:	3b30      	subs	r3, #48	; 0x30
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
			LED_Color_Data_Staus[i][1] = (int)(255 * brightness);
 80018f0:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8001a7c <updateStatus+0x1cc>
 80018f4:	eddf 7a62 	vldr	s15, [pc, #392]	; 8001a80 <updateStatus+0x1d0>
 80018f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001900:	edc7 7a01 	vstr	s15, [r7, #4]
 8001904:	7939      	ldrb	r1, [r7, #4]
 8001906:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001908:	4613      	mov	r3, r2
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	4413      	add	r3, r2
 800190e:	3330      	adds	r3, #48	; 0x30
 8001910:	f107 0208 	add.w	r2, r7, #8
 8001914:	4413      	add	r3, r2
 8001916:	3b2f      	subs	r3, #47	; 0x2f
 8001918:	460a      	mov	r2, r1
 800191a:	701a      	strb	r2, [r3, #0]
			LED_Color_Data_Staus[i][2] = 0;
 800191c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800191e:	4613      	mov	r3, r2
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	4413      	add	r3, r2
 8001924:	3330      	adds	r3, #48	; 0x30
 8001926:	f107 0208 	add.w	r2, r7, #8
 800192a:	4413      	add	r3, r2
 800192c:	3b2e      	subs	r3, #46	; 0x2e
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
			break;
 8001932:	e091      	b.n	8001a58 <updateStatus+0x1a8>
			if ((HAL_GetTick() / 1000) % 2) {
 8001934:	f002 fcc8 	bl	80042c8 <HAL_GetTick>
 8001938:	4603      	mov	r3, r0
 800193a:	4a52      	ldr	r2, [pc, #328]	; (8001a84 <updateStatus+0x1d4>)
 800193c:	fba2 2303 	umull	r2, r3, r2, r3
 8001940:	099b      	lsrs	r3, r3, #6
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	2b00      	cmp	r3, #0
 8001948:	d037      	beq.n	80019ba <updateStatus+0x10a>
				LED_Color_Data_Staus[i][0] = (int)(50 * brightness);
 800194a:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001a7c <updateStatus+0x1cc>
 800194e:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8001a88 <updateStatus+0x1d8>
 8001952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001956:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800195a:	edc7 7a01 	vstr	s15, [r7, #4]
 800195e:	7939      	ldrb	r1, [r7, #4]
 8001960:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001962:	4613      	mov	r3, r2
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	4413      	add	r3, r2
 8001968:	3330      	adds	r3, #48	; 0x30
 800196a:	f107 0208 	add.w	r2, r7, #8
 800196e:	4413      	add	r3, r2
 8001970:	3b30      	subs	r3, #48	; 0x30
 8001972:	460a      	mov	r2, r1
 8001974:	701a      	strb	r2, [r3, #0]
				LED_Color_Data_Staus[i][1] = (int)(255 * brightness);
 8001976:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8001a7c <updateStatus+0x1cc>
 800197a:	eddf 7a41 	vldr	s15, [pc, #260]	; 8001a80 <updateStatus+0x1d0>
 800197e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001982:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001986:	edc7 7a01 	vstr	s15, [r7, #4]
 800198a:	7939      	ldrb	r1, [r7, #4]
 800198c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800198e:	4613      	mov	r3, r2
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	4413      	add	r3, r2
 8001994:	3330      	adds	r3, #48	; 0x30
 8001996:	f107 0208 	add.w	r2, r7, #8
 800199a:	4413      	add	r3, r2
 800199c:	3b2f      	subs	r3, #47	; 0x2f
 800199e:	460a      	mov	r2, r1
 80019a0:	701a      	strb	r2, [r3, #0]
				LED_Color_Data_Staus[i][2] = 0;
 80019a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019a4:	4613      	mov	r3, r2
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	4413      	add	r3, r2
 80019aa:	3330      	adds	r3, #48	; 0x30
 80019ac:	f107 0208 	add.w	r2, r7, #8
 80019b0:	4413      	add	r3, r2
 80019b2:	3b2e      	subs	r3, #46	; 0x2e
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
			break;
 80019b8:	e04e      	b.n	8001a58 <updateStatus+0x1a8>
				LED_Color_Data_Staus[i][0] = 0;
 80019ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019bc:	4613      	mov	r3, r2
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	4413      	add	r3, r2
 80019c2:	3330      	adds	r3, #48	; 0x30
 80019c4:	f107 0208 	add.w	r2, r7, #8
 80019c8:	4413      	add	r3, r2
 80019ca:	3b30      	subs	r3, #48	; 0x30
 80019cc:	2200      	movs	r2, #0
 80019ce:	701a      	strb	r2, [r3, #0]
				LED_Color_Data_Staus[i][1] = 0;
 80019d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019d2:	4613      	mov	r3, r2
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	4413      	add	r3, r2
 80019d8:	3330      	adds	r3, #48	; 0x30
 80019da:	f107 0208 	add.w	r2, r7, #8
 80019de:	4413      	add	r3, r2
 80019e0:	3b2f      	subs	r3, #47	; 0x2f
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]
				LED_Color_Data_Staus[i][2] = 0;
 80019e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019e8:	4613      	mov	r3, r2
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	4413      	add	r3, r2
 80019ee:	3330      	adds	r3, #48	; 0x30
 80019f0:	f107 0208 	add.w	r2, r7, #8
 80019f4:	4413      	add	r3, r2
 80019f6:	3b2e      	subs	r3, #46	; 0x2e
 80019f8:	2200      	movs	r2, #0
 80019fa:	701a      	strb	r2, [r3, #0]
			break;
 80019fc:	e02c      	b.n	8001a58 <updateStatus+0x1a8>
			LED_Color_Data_Staus[i][0] = (int)(255 * brightness);
 80019fe:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001a7c <updateStatus+0x1cc>
 8001a02:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8001a80 <updateStatus+0x1d0>
 8001a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a0e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001a12:	7939      	ldrb	r1, [r7, #4]
 8001a14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a16:	4613      	mov	r3, r2
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	4413      	add	r3, r2
 8001a1c:	3330      	adds	r3, #48	; 0x30
 8001a1e:	f107 0208 	add.w	r2, r7, #8
 8001a22:	4413      	add	r3, r2
 8001a24:	3b30      	subs	r3, #48	; 0x30
 8001a26:	460a      	mov	r2, r1
 8001a28:	701a      	strb	r2, [r3, #0]
			LED_Color_Data_Staus[i][1] = 0;
 8001a2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	4413      	add	r3, r2
 8001a32:	3330      	adds	r3, #48	; 0x30
 8001a34:	f107 0208 	add.w	r2, r7, #8
 8001a38:	4413      	add	r3, r2
 8001a3a:	3b2f      	subs	r3, #47	; 0x2f
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	701a      	strb	r2, [r3, #0]
			LED_Color_Data_Staus[i][2] = 0;
 8001a40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a42:	4613      	mov	r3, r2
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	4413      	add	r3, r2
 8001a48:	3330      	adds	r3, #48	; 0x30
 8001a4a:	f107 0208 	add.w	r2, r7, #8
 8001a4e:	4413      	add	r3, r2
 8001a50:	3b2e      	subs	r3, #46	; 0x2e
 8001a52:	2200      	movs	r2, #0
 8001a54:	701a      	strb	r2, [r3, #0]
			break;
 8001a56:	bf00      	nop
	for (int i = 0; i < 14; i++) {
 8001a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	637b      	str	r3, [r7, #52]	; 0x34
 8001a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a60:	2b0d      	cmp	r3, #13
 8001a62:	f77f af2b 	ble.w	80018bc <updateStatus+0xc>
		}
	}
	setLEDs(LED_Color_Data_Staus);
 8001a66:	f107 0308 	add.w	r3, r7, #8
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff fa64 	bl	8000f38 <setLEDs>
}
 8001a70:	bf00      	nop
 8001a72:	3738      	adds	r7, #56	; 0x38
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	24000bf0 	.word	0x24000bf0
 8001a7c:	3ecccccd 	.word	0x3ecccccd
 8001a80:	437f0000 	.word	0x437f0000
 8001a84:	10624dd3 	.word	0x10624dd3
 8001a88:	42480000 	.word	0x42480000

08001a8c <disarm>:
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;
uint8_t LED_Color_Data[14][3];

int disarm(char *state) {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2102      	movs	r1, #2
 8001a98:	4823      	ldr	r0, [pc, #140]	; (8001b28 <disarm+0x9c>)
 8001a9a:	f006 fed3 	bl	8008844 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2104      	movs	r1, #4
 8001aa2:	4821      	ldr	r0, [pc, #132]	; (8001b28 <disarm+0x9c>)
 8001aa4:	f006 fece 	bl	8008844 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2102      	movs	r1, #2
 8001aac:	481f      	ldr	r0, [pc, #124]	; (8001b2c <disarm+0xa0>)
 8001aae:	f006 fec9 	bl	8008844 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ab8:	481d      	ldr	r0, [pc, #116]	; (8001b30 <disarm+0xa4>)
 8001aba:	f006 fec3 	bl	8008844 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ac4:	481a      	ldr	r0, [pc, #104]	; (8001b30 <disarm+0xa4>)
 8001ac6:	f006 febd 	bl	8008844 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ad0:	4817      	ldr	r0, [pc, #92]	; (8001b30 <disarm+0xa4>)
 8001ad2:	f006 feb7 	bl	8008844 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2102      	movs	r1, #2
 8001ada:	4816      	ldr	r0, [pc, #88]	; (8001b34 <disarm+0xa8>)
 8001adc:	f006 feb2 	bl	8008844 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ae6:	4814      	ldr	r0, [pc, #80]	; (8001b38 <disarm+0xac>)
 8001ae8:	f006 feac 	bl	8008844 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 8001aec:	2200      	movs	r2, #0
 8001aee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001af2:	4811      	ldr	r0, [pc, #68]	; (8001b38 <disarm+0xac>)
 8001af4:	f006 fea6 	bl	8008844 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 8001af8:	2200      	movs	r2, #0
 8001afa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001afe:	480e      	ldr	r0, [pc, #56]	; (8001b38 <disarm+0xac>)
 8001b00:	f006 fea0 	bl	8008844 <HAL_GPIO_WritePin>


	setStatus("ARM", 2);
 8001b04:	2102      	movs	r1, #2
 8001b06:	480d      	ldr	r0, [pc, #52]	; (8001b3c <disarm+0xb0>)
 8001b08:	f7ff fe10 	bl	800172c <setStatus>

	strcpy(state, "DISARMED");
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	490c      	ldr	r1, [pc, #48]	; (8001b40 <disarm+0xb4>)
 8001b10:	461a      	mov	r2, r3
 8001b12:	460b      	mov	r3, r1
 8001b14:	cb03      	ldmia	r3!, {r0, r1}
 8001b16:	6010      	str	r0, [r2, #0]
 8001b18:	6051      	str	r1, [r2, #4]
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	7213      	strb	r3, [r2, #8]
	return 0;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	58020000 	.word	0x58020000
 8001b2c:	58020400 	.word	0x58020400
 8001b30:	58021400 	.word	0x58021400
 8001b34:	58021800 	.word	0x58021800
 8001b38:	58021000 	.word	0x58021000
 8001b3c:	0801c4b0 	.word	0x0801c4b0
 8001b40:	0801c4b4 	.word	0x0801c4b4

08001b44 <Baro2_Read_Register>:
	for (int i = 0; i < 4; i++) {
		x[i] = temp[i];
	}
}

uint8_t Baro2_Read_Register(uint8_t addr) {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	addr |= (1 << 7);
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, 0);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b5e:	480d      	ldr	r0, [pc, #52]	; (8001b94 <Baro2_Read_Register+0x50>)
 8001b60:	f006 fe70 	bl	8008844 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8001b64:	1df9      	adds	r1, r7, #7
 8001b66:	2364      	movs	r3, #100	; 0x64
 8001b68:	2201      	movs	r2, #1
 8001b6a:	480b      	ldr	r0, [pc, #44]	; (8001b98 <Baro2_Read_Register+0x54>)
 8001b6c:	f00e f812 	bl	800fb94 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &reg_value, 1, 100);
 8001b70:	f107 010f 	add.w	r1, r7, #15
 8001b74:	2364      	movs	r3, #100	; 0x64
 8001b76:	2201      	movs	r2, #1
 8001b78:	4807      	ldr	r0, [pc, #28]	; (8001b98 <Baro2_Read_Register+0x54>)
 8001b7a:	f00e fa07 	bl	800ff8c <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, 1);
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b84:	4803      	ldr	r0, [pc, #12]	; (8001b94 <Baro2_Read_Register+0x50>)
 8001b86:	f006 fe5d 	bl	8008844 <HAL_GPIO_WritePin>

	return reg_value;
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	58020c00 	.word	0x58020c00
 8001b98:	24000fc8 	.word	0x24000fc8

08001b9c <Baro2_Write_Register>:

void Baro2_Write_Register(uint8_t addr, uint8_t data) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	460a      	mov	r2, r1
 8001ba6:	71fb      	strb	r3, [r7, #7]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, 0);
 8001bac:	2200      	movs	r2, #0
 8001bae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bb2:	480c      	ldr	r0, [pc, #48]	; (8001be4 <Baro2_Write_Register+0x48>)
 8001bb4:	f006 fe46 	bl	8008844 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8001bb8:	1df9      	adds	r1, r7, #7
 8001bba:	2364      	movs	r3, #100	; 0x64
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	480a      	ldr	r0, [pc, #40]	; (8001be8 <Baro2_Write_Register+0x4c>)
 8001bc0:	f00d ffe8 	bl	800fb94 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8001bc4:	1db9      	adds	r1, r7, #6
 8001bc6:	2364      	movs	r3, #100	; 0x64
 8001bc8:	2201      	movs	r2, #1
 8001bca:	4807      	ldr	r0, [pc, #28]	; (8001be8 <Baro2_Write_Register+0x4c>)
 8001bcc:	f00d ffe2 	bl	800fb94 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, 1);
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bd6:	4803      	ldr	r0, [pc, #12]	; (8001be4 <Baro2_Write_Register+0x48>)
 8001bd8:	f006 fe34 	bl	8008844 <HAL_GPIO_WritePin>

}
 8001bdc:	bf00      	nop
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	58020c00 	.word	0x58020c00
 8001be8:	24000fc8 	.word	0x24000fc8

08001bec <Baro2_Configure>:

void Baro2_Configure(){
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
	int16_t cal_val = 0; //calibration value for soldering stresses, measured on 19/08/2024
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	80fb      	strh	r3, [r7, #6]
	int8_t cal_L = (int8_t)cal_val;
 8001bf6:	88fb      	ldrh	r3, [r7, #6]
 8001bf8:	717b      	strb	r3, [r7, #5]
	int8_t cal_H = (int8_t)(cal_val>>8);
 8001bfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bfe:	121b      	asrs	r3, r3, #8
 8001c00:	b21b      	sxth	r3, r3
 8001c02:	713b      	strb	r3, [r7, #4]

	Baro2_Write_Register(0x18, cal_L);
 8001c04:	797b      	ldrb	r3, [r7, #5]
 8001c06:	4619      	mov	r1, r3
 8001c08:	2018      	movs	r0, #24
 8001c0a:	f7ff ffc7 	bl	8001b9c <Baro2_Write_Register>
	Baro2_Write_Register(0x19, cal_H);
 8001c0e:	793b      	ldrb	r3, [r7, #4]
 8001c10:	4619      	mov	r1, r3
 8001c12:	2019      	movs	r0, #25
 8001c14:	f7ff ffc2 	bl	8001b9c <Baro2_Write_Register>


	Baro2_Write_Register(0x10, 0b01000000); //50Hz refresh rate, low pass off
 8001c18:	2140      	movs	r1, #64	; 0x40
 8001c1a:	2010      	movs	r0, #16
 8001c1c:	f7ff ffbe 	bl	8001b9c <Baro2_Write_Register>
	Baro2_Write_Register(0x11, 0b00000010); //enables low noise mode
 8001c20:	2102      	movs	r1, #2
 8001c22:	2011      	movs	r0, #17
 8001c24:	f7ff ffba 	bl	8001b9c <Baro2_Write_Register>
}
 8001c28:	bf00      	nop
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <Baro2_Get_Pressure>:

int32_t Baro2_Get_Pressure(){
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
	uint8_t BARO_L = Baro2_Read_Register(0x28);
 8001c36:	2028      	movs	r0, #40	; 0x28
 8001c38:	f7ff ff84 	bl	8001b44 <Baro2_Read_Register>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	71fb      	strb	r3, [r7, #7]
	uint8_t BARO_M = Baro2_Read_Register(0x29);
 8001c40:	2029      	movs	r0, #41	; 0x29
 8001c42:	f7ff ff7f 	bl	8001b44 <Baro2_Read_Register>
 8001c46:	4603      	mov	r3, r0
 8001c48:	71bb      	strb	r3, [r7, #6]
	uint8_t BARO_H = Baro2_Read_Register(0x2A);
 8001c4a:	202a      	movs	r0, #42	; 0x2a
 8001c4c:	f7ff ff7a 	bl	8001b44 <Baro2_Read_Register>
 8001c50:	4603      	mov	r3, r0
 8001c52:	717b      	strb	r3, [r7, #5]

	int32_t BARO = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	603b      	str	r3, [r7, #0]
	BARO = ((int32_t)BARO_H << 24) | ((int32_t)BARO_M << 16) | ((int32_t)BARO_L << 8);
 8001c58:	797b      	ldrb	r3, [r7, #5]
 8001c5a:	061a      	lsls	r2, r3, #24
 8001c5c:	79bb      	ldrb	r3, [r7, #6]
 8001c5e:	041b      	lsls	r3, r3, #16
 8001c60:	431a      	orrs	r2, r3
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	021b      	lsls	r3, r3, #8
 8001c66:	4313      	orrs	r3, r2
 8001c68:	603b      	str	r3, [r7, #0]
	return BARO;
 8001c6a:	683b      	ldr	r3, [r7, #0]

}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	0000      	movs	r0, r0
	...

08001c78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c78:	b5b0      	push	{r4, r5, r7, lr}
 8001c7a:	ed2d 8b0a 	vpush	{d8-d12}
 8001c7e:	f5ad 6d06 	sub.w	sp, sp, #2144	; 0x860
 8001c82:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE BEGIN 1 */
	char state[50] = "DISARMED";
 8001c84:	4a92      	ldr	r2, [pc, #584]	; (8001ed0 <main+0x258>)
 8001c86:	f207 73b4 	addw	r3, r7, #1972	; 0x7b4
 8001c8a:	6810      	ldr	r0, [r2, #0]
 8001c8c:	6851      	ldr	r1, [r2, #4]
 8001c8e:	c303      	stmia	r3!, {r0, r1}
 8001c90:	7a12      	ldrb	r2, [r2, #8]
 8001c92:	701a      	strb	r2, [r3, #0]
 8001c94:	f207 73bd 	addw	r3, r7, #1981	; 0x7bd
 8001c98:	2229      	movs	r2, #41	; 0x29
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f017 f856 	bl	8018d4e <memset>


	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 8001ca2:	4b8c      	ldr	r3, [pc, #560]	; (8001ed4 <main+0x25c>)
 8001ca4:	f507 64f3 	add.w	r4, r7, #1944	; 0x798
 8001ca8:	461d      	mov	r5, r3
 8001caa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cb2:	c403      	stmia	r4!, {r0, r1}
 8001cb4:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cb6:	f002 fa81 	bl	80041bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cba:	f000 f9cd 	bl	8002058 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001cbe:	f000 fa47 	bl	8002150 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cc2:	f000 ffcf 	bl	8002c64 <MX_GPIO_Init>
  MX_DMA_Init();
 8001cc6:	f000 ff6d 	bl	8002ba4 <MX_DMA_Init>
  MX_SPI3_Init();
 8001cca:	f000 fcc7 	bl	800265c <MX_SPI3_Init>
  MX_FDCAN3_Init();
 8001cce:	f000 fb57 	bl	8002380 <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 8001cd2:	f000 ff1b 	bl	8002b0c <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001cd6:	f000 fa6d 	bl	80021b4 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001cda:	f000 fdd1 	bl	8002880 <MX_TIM4_Init>
  MX_ADC3_Init();
 8001cde:	f000 fae1 	bl	80022a4 <MX_ADC3_Init>
  MX_SPI2_Init();
 8001ce2:	f000 fc65 	bl	80025b0 <MX_SPI2_Init>
  MX_I2C2_Init();
 8001ce6:	f000 fbaf 	bl	8002448 <MX_I2C2_Init>
  MX_TIM2_Init();
 8001cea:	f000 fd0d 	bl	8002708 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001cee:	f000 fe43 	bl	8002978 <MX_TIM5_Init>
  MX_TIM3_Init();
 8001cf2:	f000 fd61 	bl	80027b8 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8001cf6:	f015 fbb3 	bl	8017460 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8001cfa:	f000 fc03 	bl	8002504 <MX_SPI1_Init>
  MX_UART4_Init();
 8001cfe:	f000 feb9 	bl	8002a74 <MX_UART4_Init>
  MX_FATFS_Init();
 8001d02:	f013 f941 	bl	8014f88 <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 8001d06:	f000 fbdf 	bl	80024c8 <MX_SDMMC2_SD_Init>
  MX_TIM13_Init();
 8001d0a:	f000 fe8f 	bl	8002a2c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  	char debugmsg[200];
  	sprintf(debugmsg, "debug: %d\n", MAX_M10s_init(&hi2c2));
 8001d0e:	4872      	ldr	r0, [pc, #456]	; (8001ed8 <main+0x260>)
 8001d10:	f001 f95c 	bl	8002fcc <MAX_M10s_init>
 8001d14:	4603      	mov	r3, r0
 8001d16:	461a      	mov	r2, r3
 8001d18:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8001d1c:	496f      	ldr	r1, [pc, #444]	; (8001edc <main+0x264>)
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f016 ffb2 	bl	8018c88 <siprintf>
  	CDC_Transmit_HS(debugmsg, strlen(debugmsg));
 8001d24:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe fb51 	bl	80003d0 <strlen>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8001d34:	4611      	mov	r1, r2
 8001d36:	4618      	mov	r0, r3
 8001d38:	f015 fc52 	bl	80175e0 <CDC_Transmit_HS>
	if (MAX_M10s_init(&hi2c2)){
 8001d3c:	4866      	ldr	r0, [pc, #408]	; (8001ed8 <main+0x260>)
 8001d3e:	f001 f945 	bl	8002fcc <MAX_M10s_init>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d004      	beq.n	8001d52 <main+0xda>
		setStatus("GPS", 0);
 8001d48:	2100      	movs	r1, #0
 8001d4a:	4865      	ldr	r0, [pc, #404]	; (8001ee0 <main+0x268>)
 8001d4c:	f7ff fcee 	bl	800172c <setStatus>
 8001d50:	e003      	b.n	8001d5a <main+0xe2>

	}else{
		setStatus("GPS", 2);
 8001d52:	2102      	movs	r1, #2
 8001d54:	4862      	ldr	r0, [pc, #392]	; (8001ee0 <main+0x268>)
 8001d56:	f7ff fce9 	bl	800172c <setStatus>

	}
	//MAX_M10S_init(&hi2c2);
	const int MAX = 50;
 8001d5a:	2332      	movs	r3, #50	; 0x32
 8001d5c:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
	const double SPEED = 2.0 / 2000;
 8001d60:	a355      	add	r3, pc, #340	; (adr r3, 8001eb8 <main+0x240>)
 8001d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d66:	f507 61ff 	add.w	r1, r7, #2040	; 0x7f8
 8001d6a:	e9c1 2300 	strd	r2, r3, [r1]
	const double r_offset = 0;
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	f04f 0300 	mov.w	r3, #0
 8001d76:	f507 61fe 	add.w	r1, r7, #2032	; 0x7f0
 8001d7a:	e9c1 2300 	strd	r2, r3, [r1]
	const double g_offset = 1;
 8001d7e:	f04f 0200 	mov.w	r2, #0
 8001d82:	4b58      	ldr	r3, [pc, #352]	; (8001ee4 <main+0x26c>)
 8001d84:	f507 61fd 	add.w	r1, r7, #2024	; 0x7e8
 8001d88:	e9c1 2300 	strd	r2, r3, [r1]
	const double b_offset = 2;
 8001d8c:	f04f 0200 	mov.w	r2, #0
 8001d90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d94:	f507 6102 	add.w	r1, r7, #2080	; 0x820
 8001d98:	e9c1 2300 	strd	r2, r3, [r1]


	uint8_t LG_status = LG_Check();
 8001d9c:	f7ff fb28 	bl	80013f0 <LG_Check>
 8001da0:	4603      	mov	r3, r0
 8001da2:	f887 381f 	strb.w	r3, [r7, #2079]	; 0x81f

	if(LG_status & 1){
 8001da6:	f897 381f 	ldrb.w	r3, [r7, #2079]	; 0x81f
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d004      	beq.n	8001dbc <main+0x144>
		setStatus("LG 1", 2);
 8001db2:	2102      	movs	r1, #2
 8001db4:	484c      	ldr	r0, [pc, #304]	; (8001ee8 <main+0x270>)
 8001db6:	f7ff fcb9 	bl	800172c <setStatus>
 8001dba:	e003      	b.n	8001dc4 <main+0x14c>
	}else{
		setStatus("LG 1", 0);
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	484a      	ldr	r0, [pc, #296]	; (8001ee8 <main+0x270>)
 8001dc0:	f7ff fcb4 	bl	800172c <setStatus>
	}

	if(LG_status & 2){
 8001dc4:	f897 381f 	ldrb.w	r3, [r7, #2079]	; 0x81f
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d004      	beq.n	8001dda <main+0x162>
		setStatus("LG 2", 2);
 8001dd0:	2102      	movs	r1, #2
 8001dd2:	4846      	ldr	r0, [pc, #280]	; (8001eec <main+0x274>)
 8001dd4:	f7ff fcaa 	bl	800172c <setStatus>
 8001dd8:	e003      	b.n	8001de2 <main+0x16a>
	}else{
		setStatus("LG 2", 0);
 8001dda:	2100      	movs	r1, #0
 8001ddc:	4843      	ldr	r0, [pc, #268]	; (8001eec <main+0x274>)
 8001dde:	f7ff fca5 	bl	800172c <setStatus>
	}

	CDC_Transmit_HS("hi", strlen("hi"));
 8001de2:	2102      	movs	r1, #2
 8001de4:	4842      	ldr	r0, [pc, #264]	; (8001ef0 <main+0x278>)
 8001de6:	f015 fbfb 	bl	80175e0 <CDC_Transmit_HS>
	LG_Configure();
 8001dea:	f7ff fb33 	bl	8001454 <LG_Configure>
	HAL_Delay(3000);
 8001dee:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001df2:	f002 fa75 	bl	80042e0 <HAL_Delay>
	HG2_Write_Register(0x1C, 0b10111111);
 8001df6:	21bf      	movs	r1, #191	; 0xbf
 8001df8:	201c      	movs	r0, #28
 8001dfa:	f7fe fe63 	bl	8000ac4 <HG2_Write_Register>
	HAL_Delay(2);
 8001dfe:	2002      	movs	r0, #2
 8001e00:	f002 fa6e 	bl	80042e0 <HAL_Delay>

	HG2_Write_Register(0x1B, 0b01011000);
 8001e04:	2158      	movs	r1, #88	; 0x58
 8001e06:	201b      	movs	r0, #27
 8001e08:	f7fe fe5c 	bl	8000ac4 <HG2_Write_Register>
	HG2_Write_Register(0x1B, 0b11011000);
 8001e0c:	21d8      	movs	r1, #216	; 0xd8
 8001e0e:	201b      	movs	r0, #27
 8001e10:	f7fe fe58 	bl	8000ac4 <HG2_Write_Register>

	Baro2_Configure();
 8001e14:	f7ff feea 	bl	8001bec <Baro2_Configure>

	double temperature = 275.15;
 8001e18:	a329      	add	r3, pc, #164	; (adr r3, 8001ec0 <main+0x248>)
 8001e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1e:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 8001e22:	e9c1 2300 	strd	r2, r3, [r1]
	double sea_level_pressure = 101.7;
 8001e26:	a328      	add	r3, pc, #160	; (adr r3, 8001ec8 <main+0x250>)
 8001e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2c:	f607 0108 	addw	r1, r7, #2056	; 0x808
 8001e30:	e9c1 2300 	strd	r2, r3, [r1]

	int index = 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
	double avg_tab[100];

	for(int i = 0; i < 14; i++){
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
 8001e40:	e021      	b.n	8001e86 <main+0x20e>
		LED_Color_Data[i][0] = 0;
 8001e42:	492c      	ldr	r1, [pc, #176]	; (8001ef4 <main+0x27c>)
 8001e44:	f8d7 282c 	ldr.w	r2, [r7, #2092]	; 0x82c
 8001e48:	4613      	mov	r3, r2
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	4413      	add	r3, r2
 8001e4e:	440b      	add	r3, r1
 8001e50:	2200      	movs	r2, #0
 8001e52:	701a      	strb	r2, [r3, #0]
		LED_Color_Data[i][1] = 255;
 8001e54:	4927      	ldr	r1, [pc, #156]	; (8001ef4 <main+0x27c>)
 8001e56:	f8d7 282c 	ldr.w	r2, [r7, #2092]	; 0x82c
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	4413      	add	r3, r2
 8001e60:	440b      	add	r3, r1
 8001e62:	3301      	adds	r3, #1
 8001e64:	22ff      	movs	r2, #255	; 0xff
 8001e66:	701a      	strb	r2, [r3, #0]
		LED_Color_Data[i][2] = 0;
 8001e68:	4922      	ldr	r1, [pc, #136]	; (8001ef4 <main+0x27c>)
 8001e6a:	f8d7 282c 	ldr.w	r2, [r7, #2092]	; 0x82c
 8001e6e:	4613      	mov	r3, r2
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	4413      	add	r3, r2
 8001e74:	440b      	add	r3, r1
 8001e76:	3302      	adds	r3, #2
 8001e78:	2200      	movs	r2, #0
 8001e7a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 14; i++){
 8001e7c:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8001e80:	3301      	adds	r3, #1
 8001e82:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
 8001e86:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8001e8a:	2b0d      	cmp	r3, #13
 8001e8c:	ddd9      	ble.n	8001e42 <main+0x1ca>

	}
	CDC_Transmit_HS("hi1", strlen("hi1"));
 8001e8e:	2103      	movs	r1, #3
 8001e90:	4819      	ldr	r0, [pc, #100]	; (8001ef8 <main+0x280>)
 8001e92:	f015 fba5 	bl	80175e0 <CDC_Transmit_HS>
	disarm(state);
 8001e96:	f207 73b4 	addw	r3, r7, #1972	; 0x7b4
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff fdf6 	bl	8001a8c <disarm>
	setLEDs(LED_Color_Data);
 8001ea0:	4814      	ldr	r0, [pc, #80]	; (8001ef4 <main+0x27c>)
 8001ea2:	f7ff f849 	bl	8000f38 <setLEDs>
	setStatus("CAN", 1);
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	4814      	ldr	r0, [pc, #80]	; (8001efc <main+0x284>)
 8001eaa:	f7ff fc3f 	bl	800172c <setStatus>
	for(int i = 0; i < 100; i++){
 8001eae:	2300      	movs	r3, #0
 8001eb0:	f8c7 3828 	str.w	r3, [r7, #2088]	; 0x828
 8001eb4:	e037      	b.n	8001f26 <main+0x2ae>
 8001eb6:	bf00      	nop
 8001eb8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001ebc:	3f50624d 	.word	0x3f50624d
 8001ec0:	66666666 	.word	0x66666666
 8001ec4:	40713266 	.word	0x40713266
 8001ec8:	cccccccd 	.word	0xcccccccd
 8001ecc:	40596ccc 	.word	0x40596ccc
 8001ed0:	0801c4b4 	.word	0x0801c4b4
 8001ed4:	0801c580 	.word	0x0801c580
 8001ed8:	24000e70 	.word	0x24000e70
 8001edc:	0801c4c8 	.word	0x0801c4c8
 8001ee0:	0801c4d4 	.word	0x0801c4d4
 8001ee4:	3ff00000 	.word	0x3ff00000
 8001ee8:	0801c4d8 	.word	0x0801c4d8
 8001eec:	0801c4e0 	.word	0x0801c4e0
 8001ef0:	0801c4e8 	.word	0x0801c4e8
 8001ef4:	240015d4 	.word	0x240015d4
 8001ef8:	0801c4ec 	.word	0x0801c4ec
 8001efc:	0801c4f0 	.word	0x0801c4f0
		avg_tab[i] = 0;
 8001f00:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8001f04:	f5a3 62d0 	sub.w	r2, r3, #1664	; 0x680
 8001f08:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	18d1      	adds	r1, r2, r3
 8001f10:	f04f 0200 	mov.w	r2, #0
 8001f14:	f04f 0300 	mov.w	r3, #0
 8001f18:	e9c1 2300 	strd	r2, r3, [r1]
	for(int i = 0; i < 100; i++){
 8001f1c:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8001f20:	3301      	adds	r3, #1
 8001f22:	f8c7 3828 	str.w	r3, [r7, #2088]	; 0x828
 8001f26:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8001f2a:	2b63      	cmp	r3, #99	; 0x63
 8001f2c:	dde8      	ble.n	8001f00 <main+0x288>
	}
	LoRA_begin(868000000);
 8001f2e:	4845      	ldr	r0, [pc, #276]	; (8002044 <main+0x3cc>)
 8001f30:	f7fe ff5e 	bl	8000df0 <LoRA_begin>
	char msg[250];
	while (1) {
		updateStatus();
 8001f34:	f7ff fcbc 	bl	80018b0 <updateStatus>


		LoRA_sendPacket("hahaha");
 8001f38:	4843      	ldr	r0, [pc, #268]	; (8002048 <main+0x3d0>)
 8001f3a:	f7fe ffd2 	bl	8000ee2 <LoRA_sendPacket>
		sprintf(msg, "baro: %d, gyro-x: %f, gyro-y: %f, gyro-z: %f, acc-x: %f, acc-y: %f, acc-z: %f",
 8001f3e:	f7ff fe77 	bl	8001c30 <Baro2_Get_Pressure>
 8001f42:	4604      	mov	r4, r0
		Baro2_Get_Pressure(),
		LG_Get_Gyro_X(),
 8001f44:	f7ff fa98 	bl	8001478 <LG_Get_Gyro_X>
 8001f48:	eef0 7a40 	vmov.f32	s15, s0
		sprintf(msg, "baro: %d, gyro-x: %f, gyro-y: %f, gyro-z: %f, acc-x: %f, acc-y: %f, acc-z: %f",
 8001f4c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
		LG_Get_Gyro_Y(),
 8001f50:	f7ff faca 	bl	80014e8 <LG_Get_Gyro_Y>
 8001f54:	eef0 7a40 	vmov.f32	s15, s0
		sprintf(msg, "baro: %d, gyro-x: %f, gyro-y: %f, gyro-z: %f, acc-x: %f, acc-y: %f, acc-z: %f",
 8001f58:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
		LG_Get_Gyro_Z(),
 8001f5c:	f7ff fafc 	bl	8001558 <LG_Get_Gyro_Z>
 8001f60:	eef0 7a40 	vmov.f32	s15, s0
		sprintf(msg, "baro: %d, gyro-x: %f, gyro-y: %f, gyro-z: %f, acc-x: %f, acc-y: %f, acc-z: %f",
 8001f64:	eeb7 aae7 	vcvt.f64.f32	d10, s15
		LG_Get_Acc_X(),
 8001f68:	f7ff fb2e 	bl	80015c8 <LG_Get_Acc_X>
 8001f6c:	eef0 7a40 	vmov.f32	s15, s0
		sprintf(msg, "baro: %d, gyro-x: %f, gyro-y: %f, gyro-z: %f, acc-x: %f, acc-y: %f, acc-z: %f",
 8001f70:	eeb7 bae7 	vcvt.f64.f32	d11, s15
		LG_Get_Acc_Y(),
 8001f74:	f7ff fb64 	bl	8001640 <LG_Get_Acc_Y>
 8001f78:	eef0 7a40 	vmov.f32	s15, s0
		sprintf(msg, "baro: %d, gyro-x: %f, gyro-y: %f, gyro-z: %f, acc-x: %f, acc-y: %f, acc-z: %f",
 8001f7c:	eeb7 cae7 	vcvt.f64.f32	d12, s15
		LG_Get_Acc_Z()
 8001f80:	f7ff fb9a 	bl	80016b8 <LG_Get_Acc_Z>
 8001f84:	eef0 7a40 	vmov.f32	s15, s0
		sprintf(msg, "baro: %d, gyro-x: %f, gyro-y: %f, gyro-z: %f, acc-x: %f, acc-y: %f, acc-z: %f",
 8001f88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f8c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f90:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8001f94:	ed8d cb08 	vstr	d12, [sp, #32]
 8001f98:	ed8d bb06 	vstr	d11, [sp, #24]
 8001f9c:	ed8d ab04 	vstr	d10, [sp, #16]
 8001fa0:	ed8d 9b02 	vstr	d9, [sp, #8]
 8001fa4:	ed8d 8b00 	vstr	d8, [sp]
 8001fa8:	4622      	mov	r2, r4
 8001faa:	4928      	ldr	r1, [pc, #160]	; (800204c <main+0x3d4>)
 8001fac:	4618      	mov	r0, r3
 8001fae:	f016 fe6b 	bl	8018c88 <siprintf>
		);
		LoRA_sendPacket(msg);
 8001fb2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7fe ff93 	bl	8000ee2 <LoRA_sendPacket>
		HAL_Delay(100);
 8001fbc:	2064      	movs	r0, #100	; 0x64
 8001fbe:	f002 f98f 	bl	80042e0 <HAL_Delay>
		LoRA_sendPacket("whatthehell");
 8001fc2:	4823      	ldr	r0, [pc, #140]	; (8002050 <main+0x3d8>)
 8001fc4:	f7fe ff8d 	bl	8000ee2 <LoRA_sendPacket>
		int16_t hg2_data[6];
		HG2_Get_Acc(hg2_data);
 8001fc8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe fda1 	bl	8000b14 <HG2_Get_Acc>
		sprintf(msg, "hgacc-x: %d, hgacc-y: %d, hgacc-z: %d",
			(hg2_data[1]<<8) + hg2_data[0],
 8001fd2:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8001fd6:	f5a3 63f1 	sub.w	r3, r3, #1928	; 0x788
 8001fda:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001fde:	021b      	lsls	r3, r3, #8
 8001fe0:	f507 6203 	add.w	r2, r7, #2096	; 0x830
 8001fe4:	f5a2 62f1 	sub.w	r2, r2, #1928	; 0x788
 8001fe8:	f9b2 2000 	ldrsh.w	r2, [r2]
		sprintf(msg, "hgacc-x: %d, hgacc-y: %d, hgacc-z: %d",
 8001fec:	1899      	adds	r1, r3, r2
			(hg2_data[3]<<8) + hg2_data[2],
 8001fee:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8001ff2:	f5a3 63f1 	sub.w	r3, r3, #1928	; 0x788
 8001ff6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001ffa:	021b      	lsls	r3, r3, #8
 8001ffc:	f507 6203 	add.w	r2, r7, #2096	; 0x830
 8002000:	f5a2 62f1 	sub.w	r2, r2, #1928	; 0x788
 8002004:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
		sprintf(msg, "hgacc-x: %d, hgacc-y: %d, hgacc-z: %d",
 8002008:	189c      	adds	r4, r3, r2
			(hg2_data[5]<<8) + hg2_data[4]
 800200a:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 800200e:	f5a3 63f1 	sub.w	r3, r3, #1928	; 0x788
 8002012:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002016:	021b      	lsls	r3, r3, #8
 8002018:	f507 6203 	add.w	r2, r7, #2096	; 0x830
 800201c:	f5a2 62f1 	sub.w	r2, r2, #1928	; 0x788
 8002020:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
		sprintf(msg, "hgacc-x: %d, hgacc-y: %d, hgacc-z: %d",
 8002024:	4413      	add	r3, r2
 8002026:	f107 00b4 	add.w	r0, r7, #180	; 0xb4
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	4623      	mov	r3, r4
 800202e:	460a      	mov	r2, r1
 8002030:	4908      	ldr	r1, [pc, #32]	; (8002054 <main+0x3dc>)
 8002032:	f016 fe29 	bl	8018c88 <siprintf>
		);

		LoRA_sendPacket(msg);
 8002036:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800203a:	4618      	mov	r0, r3
 800203c:	f7fe ff51 	bl	8000ee2 <LoRA_sendPacket>
	while (1) {
 8002040:	e778      	b.n	8001f34 <main+0x2bc>
 8002042:	bf00      	nop
 8002044:	33bca100 	.word	0x33bca100
 8002048:	0801c4f4 	.word	0x0801c4f4
 800204c:	0801c4fc 	.word	0x0801c4fc
 8002050:	0801c54c 	.word	0x0801c54c
 8002054:	0801c558 	.word	0x0801c558

08002058 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b09c      	sub	sp, #112	; 0x70
 800205c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800205e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002062:	224c      	movs	r2, #76	; 0x4c
 8002064:	2100      	movs	r1, #0
 8002066:	4618      	mov	r0, r3
 8002068:	f016 fe71 	bl	8018d4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800206c:	1d3b      	adds	r3, r7, #4
 800206e:	2220      	movs	r2, #32
 8002070:	2100      	movs	r1, #0
 8002072:	4618      	mov	r0, r3
 8002074:	f016 fe6b 	bl	8018d4e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002078:	2002      	movs	r0, #2
 800207a:	f008 fc03 	bl	800a884 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800207e:	2300      	movs	r3, #0
 8002080:	603b      	str	r3, [r7, #0]
 8002082:	4b32      	ldr	r3, [pc, #200]	; (800214c <SystemClock_Config+0xf4>)
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800208a:	4a30      	ldr	r2, [pc, #192]	; (800214c <SystemClock_Config+0xf4>)
 800208c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002090:	6193      	str	r3, [r2, #24]
 8002092:	4b2e      	ldr	r3, [pc, #184]	; (800214c <SystemClock_Config+0xf4>)
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800209a:	603b      	str	r3, [r7, #0]
 800209c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800209e:	bf00      	nop
 80020a0:	4b2a      	ldr	r3, [pc, #168]	; (800214c <SystemClock_Config+0xf4>)
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020ac:	d1f8      	bne.n	80020a0 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80020ae:	2323      	movs	r3, #35	; 0x23
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80020b8:	2301      	movs	r3, #1
 80020ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80020bc:	2340      	movs	r3, #64	; 0x40
 80020be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80020c0:	2301      	movs	r3, #1
 80020c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020c4:	2302      	movs	r3, #2
 80020c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020c8:	2300      	movs	r3, #0
 80020ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80020cc:	2304      	movs	r3, #4
 80020ce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80020d0:	230c      	movs	r3, #12
 80020d2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80020d4:	2301      	movs	r3, #1
 80020d6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 80020d8:	230c      	movs	r3, #12
 80020da:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80020dc:	2302      	movs	r3, #2
 80020de:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80020e0:	230c      	movs	r3, #12
 80020e2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80020e4:	2300      	movs	r3, #0
 80020e6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80020e8:	2300      	movs	r3, #0
 80020ea:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020f0:	4618      	mov	r0, r3
 80020f2:	f008 fc11 	bl	800a918 <HAL_RCC_OscConfig>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80020fc:	f000 ff2a 	bl	8002f54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002100:	233f      	movs	r3, #63	; 0x3f
 8002102:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002104:	2303      	movs	r3, #3
 8002106:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002108:	2300      	movs	r3, #0
 800210a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800210c:	2308      	movs	r3, #8
 800210e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002110:	2340      	movs	r3, #64	; 0x40
 8002112:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002114:	2340      	movs	r3, #64	; 0x40
 8002116:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002118:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800211c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800211e:	2340      	movs	r3, #64	; 0x40
 8002120:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002122:	1d3b      	adds	r3, r7, #4
 8002124:	2101      	movs	r1, #1
 8002126:	4618      	mov	r0, r3
 8002128:	f008 ffd0 	bl	800b0cc <HAL_RCC_ClockConfig>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8002132:	f000 ff0f 	bl	8002f54 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8002136:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800213a:	2100      	movs	r1, #0
 800213c:	2000      	movs	r0, #0
 800213e:	f009 f97b 	bl	800b438 <HAL_RCC_MCOConfig>
}
 8002142:	bf00      	nop
 8002144:	3770      	adds	r7, #112	; 0x70
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	58024800 	.word	0x58024800

08002150 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b0ae      	sub	sp, #184	; 0xb8
 8002154:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002156:	463b      	mov	r3, r7
 8002158:	22b8      	movs	r2, #184	; 0xb8
 800215a:	2100      	movs	r1, #0
 800215c:	4618      	mov	r0, r3
 800215e:	f016 fdf6 	bl	8018d4e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 8002162:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8002166:	f04f 0300 	mov.w	r3, #0
 800216a:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800216e:	2304      	movs	r3, #4
 8002170:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8002172:	230c      	movs	r3, #12
 8002174:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8002176:	2304      	movs	r3, #4
 8002178:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800217a:	2302      	movs	r3, #2
 800217c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800217e:	2302      	movs	r3, #2
 8002180:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8002182:	23c0      	movs	r3, #192	; 0xc0
 8002184:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8002186:	2300      	movs	r3, #0
 8002188:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800218a:	2300      	movs	r3, #0
 800218c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800218e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002192:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002194:	2300      	movs	r3, #0
 8002196:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800219a:	463b      	mov	r3, r7
 800219c:	4618      	mov	r0, r3
 800219e:	f009 fb8b 	bl	800b8b8 <HAL_RCCEx_PeriphCLKConfig>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 80021a8:	f000 fed4 	bl	8002f54 <Error_Handler>
  }
}
 80021ac:	bf00      	nop
 80021ae:	37b8      	adds	r7, #184	; 0xb8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08c      	sub	sp, #48	; 0x30
 80021b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80021ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	605a      	str	r2, [r3, #4]
 80021c4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80021c6:	463b      	mov	r3, r7
 80021c8:	2224      	movs	r2, #36	; 0x24
 80021ca:	2100      	movs	r1, #0
 80021cc:	4618      	mov	r0, r3
 80021ce:	f016 fdbe 	bl	8018d4e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80021d2:	4b31      	ldr	r3, [pc, #196]	; (8002298 <MX_ADC1_Init+0xe4>)
 80021d4:	4a31      	ldr	r2, [pc, #196]	; (800229c <MX_ADC1_Init+0xe8>)
 80021d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80021d8:	4b2f      	ldr	r3, [pc, #188]	; (8002298 <MX_ADC1_Init+0xe4>)
 80021da:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 80021de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80021e0:	4b2d      	ldr	r3, [pc, #180]	; (8002298 <MX_ADC1_Init+0xe4>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80021e6:	4b2c      	ldr	r3, [pc, #176]	; (8002298 <MX_ADC1_Init+0xe4>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80021ec:	4b2a      	ldr	r3, [pc, #168]	; (8002298 <MX_ADC1_Init+0xe4>)
 80021ee:	2204      	movs	r2, #4
 80021f0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80021f2:	4b29      	ldr	r3, [pc, #164]	; (8002298 <MX_ADC1_Init+0xe4>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80021f8:	4b27      	ldr	r3, [pc, #156]	; (8002298 <MX_ADC1_Init+0xe4>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80021fe:	4b26      	ldr	r3, [pc, #152]	; (8002298 <MX_ADC1_Init+0xe4>)
 8002200:	2201      	movs	r2, #1
 8002202:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002204:	4b24      	ldr	r3, [pc, #144]	; (8002298 <MX_ADC1_Init+0xe4>)
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800220c:	4b22      	ldr	r3, [pc, #136]	; (8002298 <MX_ADC1_Init+0xe4>)
 800220e:	2200      	movs	r2, #0
 8002210:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002212:	4b21      	ldr	r3, [pc, #132]	; (8002298 <MX_ADC1_Init+0xe4>)
 8002214:	2200      	movs	r2, #0
 8002216:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8002218:	4b1f      	ldr	r3, [pc, #124]	; (8002298 <MX_ADC1_Init+0xe4>)
 800221a:	2200      	movs	r2, #0
 800221c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800221e:	4b1e      	ldr	r3, [pc, #120]	; (8002298 <MX_ADC1_Init+0xe4>)
 8002220:	2200      	movs	r2, #0
 8002222:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002224:	4b1c      	ldr	r3, [pc, #112]	; (8002298 <MX_ADC1_Init+0xe4>)
 8002226:	2200      	movs	r2, #0
 8002228:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800222a:	4b1b      	ldr	r3, [pc, #108]	; (8002298 <MX_ADC1_Init+0xe4>)
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002232:	4819      	ldr	r0, [pc, #100]	; (8002298 <MX_ADC1_Init+0xe4>)
 8002234:	f002 fad4 	bl	80047e0 <HAL_ADC_Init>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800223e:	f000 fe89 	bl	8002f54 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002242:	2300      	movs	r3, #0
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800224a:	4619      	mov	r1, r3
 800224c:	4812      	ldr	r0, [pc, #72]	; (8002298 <MX_ADC1_Init+0xe4>)
 800224e:	f003 fb0f 	bl	8005870 <HAL_ADCEx_MultiModeConfigChannel>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8002258:	f000 fe7c 	bl	8002f54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800225c:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <MX_ADC1_Init+0xec>)
 800225e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002260:	2306      	movs	r3, #6
 8002262:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8002264:	2303      	movs	r3, #3
 8002266:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002268:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800226c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800226e:	2304      	movs	r3, #4
 8002270:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002272:	2300      	movs	r3, #0
 8002274:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8002276:	2300      	movs	r3, #0
 8002278:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800227c:	463b      	mov	r3, r7
 800227e:	4619      	mov	r1, r3
 8002280:	4805      	ldr	r0, [pc, #20]	; (8002298 <MX_ADC1_Init+0xe4>)
 8002282:	f002 fcb5 	bl	8004bf0 <HAL_ADC_ConfigChannel>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 800228c:	f000 fe62 	bl	8002f54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002290:	bf00      	nop
 8002292:	3730      	adds	r7, #48	; 0x30
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	24000c00 	.word	0x24000c00
 800229c:	40022000 	.word	0x40022000
 80022a0:	2a000400 	.word	0x2a000400

080022a4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08a      	sub	sp, #40	; 0x28
 80022a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80022aa:	1d3b      	adds	r3, r7, #4
 80022ac:	2224      	movs	r2, #36	; 0x24
 80022ae:	2100      	movs	r1, #0
 80022b0:	4618      	mov	r0, r3
 80022b2:	f016 fd4c 	bl	8018d4e <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80022b6:	4b2f      	ldr	r3, [pc, #188]	; (8002374 <MX_ADC3_Init+0xd0>)
 80022b8:	4a2f      	ldr	r2, [pc, #188]	; (8002378 <MX_ADC3_Init+0xd4>)
 80022ba:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80022bc:	4b2d      	ldr	r3, [pc, #180]	; (8002374 <MX_ADC3_Init+0xd0>)
 80022be:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 80022c2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80022c4:	4b2b      	ldr	r3, [pc, #172]	; (8002374 <MX_ADC3_Init+0xd0>)
 80022c6:	2208      	movs	r2, #8
 80022c8:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80022ca:	4b2a      	ldr	r3, [pc, #168]	; (8002374 <MX_ADC3_Init+0xd0>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80022d0:	4b28      	ldr	r3, [pc, #160]	; (8002374 <MX_ADC3_Init+0xd0>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022d6:	4b27      	ldr	r3, [pc, #156]	; (8002374 <MX_ADC3_Init+0xd0>)
 80022d8:	2204      	movs	r2, #4
 80022da:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80022dc:	4b25      	ldr	r3, [pc, #148]	; (8002374 <MX_ADC3_Init+0xd0>)
 80022de:	2200      	movs	r2, #0
 80022e0:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80022e2:	4b24      	ldr	r3, [pc, #144]	; (8002374 <MX_ADC3_Init+0xd0>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80022e8:	4b22      	ldr	r3, [pc, #136]	; (8002374 <MX_ADC3_Init+0xd0>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80022ee:	4b21      	ldr	r3, [pc, #132]	; (8002374 <MX_ADC3_Init+0xd0>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022f6:	4b1f      	ldr	r3, [pc, #124]	; (8002374 <MX_ADC3_Init+0xd0>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022fc:	4b1d      	ldr	r3, [pc, #116]	; (8002374 <MX_ADC3_Init+0xd0>)
 80022fe:	2200      	movs	r2, #0
 8002300:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8002302:	4b1c      	ldr	r3, [pc, #112]	; (8002374 <MX_ADC3_Init+0xd0>)
 8002304:	2201      	movs	r2, #1
 8002306:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 800230a:	4b1a      	ldr	r3, [pc, #104]	; (8002374 <MX_ADC3_Init+0xd0>)
 800230c:	2200      	movs	r2, #0
 800230e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8002310:	4b18      	ldr	r3, [pc, #96]	; (8002374 <MX_ADC3_Init+0xd0>)
 8002312:	2200      	movs	r2, #0
 8002314:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002316:	4b17      	ldr	r3, [pc, #92]	; (8002374 <MX_ADC3_Init+0xd0>)
 8002318:	2200      	movs	r2, #0
 800231a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800231c:	4b15      	ldr	r3, [pc, #84]	; (8002374 <MX_ADC3_Init+0xd0>)
 800231e:	2200      	movs	r2, #0
 8002320:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8002322:	4b14      	ldr	r3, [pc, #80]	; (8002374 <MX_ADC3_Init+0xd0>)
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800232a:	4812      	ldr	r0, [pc, #72]	; (8002374 <MX_ADC3_Init+0xd0>)
 800232c:	f002 fa58 	bl	80047e0 <HAL_ADC_Init>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8002336:	f000 fe0d 	bl	8002f54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800233a:	4b10      	ldr	r3, [pc, #64]	; (800237c <MX_ADC3_Init+0xd8>)
 800233c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800233e:	2306      	movs	r3, #6
 8002340:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002346:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800234a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800234c:	2304      	movs	r3, #4
 800234e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002350:	2300      	movs	r3, #0
 8002352:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8002354:	2300      	movs	r3, #0
 8002356:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002358:	1d3b      	adds	r3, r7, #4
 800235a:	4619      	mov	r1, r3
 800235c:	4805      	ldr	r0, [pc, #20]	; (8002374 <MX_ADC3_Init+0xd0>)
 800235e:	f002 fc47 	bl	8004bf0 <HAL_ADC_ConfigChannel>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8002368:	f000 fdf4 	bl	8002f54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800236c:	bf00      	nop
 800236e:	3728      	adds	r7, #40	; 0x28
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	24000c70 	.word	0x24000c70
 8002378:	58026000 	.word	0x58026000
 800237c:	04300002 	.word	0x04300002

08002380 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8002384:	4b2e      	ldr	r3, [pc, #184]	; (8002440 <MX_FDCAN3_Init+0xc0>)
 8002386:	4a2f      	ldr	r2, [pc, #188]	; (8002444 <MX_FDCAN3_Init+0xc4>)
 8002388:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800238a:	4b2d      	ldr	r3, [pc, #180]	; (8002440 <MX_FDCAN3_Init+0xc0>)
 800238c:	2200      	movs	r2, #0
 800238e:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8002390:	4b2b      	ldr	r3, [pc, #172]	; (8002440 <MX_FDCAN3_Init+0xc0>)
 8002392:	2200      	movs	r2, #0
 8002394:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8002396:	4b2a      	ldr	r3, [pc, #168]	; (8002440 <MX_FDCAN3_Init+0xc0>)
 8002398:	2200      	movs	r2, #0
 800239a:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 800239c:	4b28      	ldr	r3, [pc, #160]	; (8002440 <MX_FDCAN3_Init+0xc0>)
 800239e:	2200      	movs	r2, #0
 80023a0:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 80023a2:	4b27      	ldr	r3, [pc, #156]	; (8002440 <MX_FDCAN3_Init+0xc0>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 80023a8:	4b25      	ldr	r3, [pc, #148]	; (8002440 <MX_FDCAN3_Init+0xc0>)
 80023aa:	2210      	movs	r2, #16
 80023ac:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 80023ae:	4b24      	ldr	r3, [pc, #144]	; (8002440 <MX_FDCAN3_Init+0xc0>)
 80023b0:	2201      	movs	r2, #1
 80023b2:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 80023b4:	4b22      	ldr	r3, [pc, #136]	; (8002440 <MX_FDCAN3_Init+0xc0>)
 80023b6:	2202      	movs	r2, #2
 80023b8:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 80023ba:	4b21      	ldr	r3, [pc, #132]	; (8002440 <MX_FDCAN3_Init+0xc0>)
 80023bc:	2202      	movs	r2, #2
 80023be:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 80023c0:	4b1f      	ldr	r3, [pc, #124]	; (8002440 <MX_FDCAN3_Init+0xc0>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 80023c6:	4b1e      	ldr	r3, [pc, #120]	; (8002440 <MX_FDCAN3_Init+0xc0>)
 80023c8:	2201      	movs	r2, #1
 80023ca:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 80023cc:	4b1c      	ldr	r3, [pc, #112]	; (8002440 <MX_FDCAN3_Init+0xc0>)
 80023ce:	2201      	movs	r2, #1
 80023d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 80023d2:	4b1b      	ldr	r3, [pc, #108]	; (8002440 <MX_FDCAN3_Init+0xc0>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 80023d8:	4b19      	ldr	r3, [pc, #100]	; (8002440 <MX_FDCAN3_Init+0xc0>)
 80023da:	2200      	movs	r2, #0
 80023dc:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 80023de:	4b18      	ldr	r3, [pc, #96]	; (8002440 <MX_FDCAN3_Init+0xc0>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 80023e4:	4b16      	ldr	r3, [pc, #88]	; (8002440 <MX_FDCAN3_Init+0xc0>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 80023ea:	4b15      	ldr	r3, [pc, #84]	; (8002440 <MX_FDCAN3_Init+0xc0>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80023f0:	4b13      	ldr	r3, [pc, #76]	; (8002440 <MX_FDCAN3_Init+0xc0>)
 80023f2:	2204      	movs	r2, #4
 80023f4:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 80023f6:	4b12      	ldr	r3, [pc, #72]	; (8002440 <MX_FDCAN3_Init+0xc0>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80023fc:	4b10      	ldr	r3, [pc, #64]	; (8002440 <MX_FDCAN3_Init+0xc0>)
 80023fe:	2204      	movs	r2, #4
 8002400:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8002402:	4b0f      	ldr	r3, [pc, #60]	; (8002440 <MX_FDCAN3_Init+0xc0>)
 8002404:	2200      	movs	r2, #0
 8002406:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8002408:	4b0d      	ldr	r3, [pc, #52]	; (8002440 <MX_FDCAN3_Init+0xc0>)
 800240a:	2204      	movs	r2, #4
 800240c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 800240e:	4b0c      	ldr	r3, [pc, #48]	; (8002440 <MX_FDCAN3_Init+0xc0>)
 8002410:	2200      	movs	r2, #0
 8002412:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8002414:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <MX_FDCAN3_Init+0xc0>)
 8002416:	2200      	movs	r2, #0
 8002418:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 800241a:	4b09      	ldr	r3, [pc, #36]	; (8002440 <MX_FDCAN3_Init+0xc0>)
 800241c:	2200      	movs	r2, #0
 800241e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002420:	4b07      	ldr	r3, [pc, #28]	; (8002440 <MX_FDCAN3_Init+0xc0>)
 8002422:	2200      	movs	r2, #0
 8002424:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8002426:	4b06      	ldr	r3, [pc, #24]	; (8002440 <MX_FDCAN3_Init+0xc0>)
 8002428:	2204      	movs	r2, #4
 800242a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 800242c:	4804      	ldr	r0, [pc, #16]	; (8002440 <MX_FDCAN3_Init+0xc0>)
 800242e:	f005 fce5 	bl	8007dfc <HAL_FDCAN_Init>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8002438:	f000 fd8c 	bl	8002f54 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 800243c:	bf00      	nop
 800243e:	bd80      	pop	{r7, pc}
 8002440:	24000dd0 	.word	0x24000dd0
 8002444:	4000d400 	.word	0x4000d400

08002448 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800244c:	4b1b      	ldr	r3, [pc, #108]	; (80024bc <MX_I2C2_Init+0x74>)
 800244e:	4a1c      	ldr	r2, [pc, #112]	; (80024c0 <MX_I2C2_Init+0x78>)
 8002450:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8002452:	4b1a      	ldr	r3, [pc, #104]	; (80024bc <MX_I2C2_Init+0x74>)
 8002454:	4a1b      	ldr	r2, [pc, #108]	; (80024c4 <MX_I2C2_Init+0x7c>)
 8002456:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002458:	4b18      	ldr	r3, [pc, #96]	; (80024bc <MX_I2C2_Init+0x74>)
 800245a:	2200      	movs	r2, #0
 800245c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800245e:	4b17      	ldr	r3, [pc, #92]	; (80024bc <MX_I2C2_Init+0x74>)
 8002460:	2201      	movs	r2, #1
 8002462:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002464:	4b15      	ldr	r3, [pc, #84]	; (80024bc <MX_I2C2_Init+0x74>)
 8002466:	2200      	movs	r2, #0
 8002468:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800246a:	4b14      	ldr	r3, [pc, #80]	; (80024bc <MX_I2C2_Init+0x74>)
 800246c:	2200      	movs	r2, #0
 800246e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002470:	4b12      	ldr	r3, [pc, #72]	; (80024bc <MX_I2C2_Init+0x74>)
 8002472:	2200      	movs	r2, #0
 8002474:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002476:	4b11      	ldr	r3, [pc, #68]	; (80024bc <MX_I2C2_Init+0x74>)
 8002478:	2200      	movs	r2, #0
 800247a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800247c:	4b0f      	ldr	r3, [pc, #60]	; (80024bc <MX_I2C2_Init+0x74>)
 800247e:	2200      	movs	r2, #0
 8002480:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002482:	480e      	ldr	r0, [pc, #56]	; (80024bc <MX_I2C2_Init+0x74>)
 8002484:	f006 f9f8 	bl	8008878 <HAL_I2C_Init>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800248e:	f000 fd61 	bl	8002f54 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002492:	2100      	movs	r1, #0
 8002494:	4809      	ldr	r0, [pc, #36]	; (80024bc <MX_I2C2_Init+0x74>)
 8002496:	f006 fea5 	bl	80091e4 <HAL_I2CEx_ConfigAnalogFilter>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80024a0:	f000 fd58 	bl	8002f54 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80024a4:	2100      	movs	r1, #0
 80024a6:	4805      	ldr	r0, [pc, #20]	; (80024bc <MX_I2C2_Init+0x74>)
 80024a8:	f006 fee7 	bl	800927a <HAL_I2CEx_ConfigDigitalFilter>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80024b2:	f000 fd4f 	bl	8002f54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	24000e70 	.word	0x24000e70
 80024c0:	40005800 	.word	0x40005800
 80024c4:	20303e5d 	.word	0x20303e5d

080024c8 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 80024cc:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <MX_SDMMC2_SD_Init+0x34>)
 80024ce:	4a0c      	ldr	r2, [pc, #48]	; (8002500 <MX_SDMMC2_SD_Init+0x38>)
 80024d0:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80024d2:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <MX_SDMMC2_SD_Init+0x34>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80024d8:	4b08      	ldr	r3, [pc, #32]	; (80024fc <MX_SDMMC2_SD_Init+0x34>)
 80024da:	2200      	movs	r2, #0
 80024dc:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80024de:	4b07      	ldr	r3, [pc, #28]	; (80024fc <MX_SDMMC2_SD_Init+0x34>)
 80024e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024e4:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80024e6:	4b05      	ldr	r3, [pc, #20]	; (80024fc <MX_SDMMC2_SD_Init+0x34>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 80024ec:	4b03      	ldr	r3, [pc, #12]	; (80024fc <MX_SDMMC2_SD_Init+0x34>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 80024f2:	bf00      	nop
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	24000ec4 	.word	0x24000ec4
 8002500:	48022400 	.word	0x48022400

08002504 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002508:	4b27      	ldr	r3, [pc, #156]	; (80025a8 <MX_SPI1_Init+0xa4>)
 800250a:	4a28      	ldr	r2, [pc, #160]	; (80025ac <MX_SPI1_Init+0xa8>)
 800250c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800250e:	4b26      	ldr	r3, [pc, #152]	; (80025a8 <MX_SPI1_Init+0xa4>)
 8002510:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002514:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002516:	4b24      	ldr	r3, [pc, #144]	; (80025a8 <MX_SPI1_Init+0xa4>)
 8002518:	2200      	movs	r2, #0
 800251a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800251c:	4b22      	ldr	r3, [pc, #136]	; (80025a8 <MX_SPI1_Init+0xa4>)
 800251e:	2207      	movs	r2, #7
 8002520:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002522:	4b21      	ldr	r3, [pc, #132]	; (80025a8 <MX_SPI1_Init+0xa4>)
 8002524:	2200      	movs	r2, #0
 8002526:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002528:	4b1f      	ldr	r3, [pc, #124]	; (80025a8 <MX_SPI1_Init+0xa4>)
 800252a:	2200      	movs	r2, #0
 800252c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800252e:	4b1e      	ldr	r3, [pc, #120]	; (80025a8 <MX_SPI1_Init+0xa4>)
 8002530:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002534:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002536:	4b1c      	ldr	r3, [pc, #112]	; (80025a8 <MX_SPI1_Init+0xa4>)
 8002538:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800253c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800253e:	4b1a      	ldr	r3, [pc, #104]	; (80025a8 <MX_SPI1_Init+0xa4>)
 8002540:	2200      	movs	r2, #0
 8002542:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002544:	4b18      	ldr	r3, [pc, #96]	; (80025a8 <MX_SPI1_Init+0xa4>)
 8002546:	2200      	movs	r2, #0
 8002548:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800254a:	4b17      	ldr	r3, [pc, #92]	; (80025a8 <MX_SPI1_Init+0xa4>)
 800254c:	2200      	movs	r2, #0
 800254e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002550:	4b15      	ldr	r3, [pc, #84]	; (80025a8 <MX_SPI1_Init+0xa4>)
 8002552:	2200      	movs	r2, #0
 8002554:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002556:	4b14      	ldr	r3, [pc, #80]	; (80025a8 <MX_SPI1_Init+0xa4>)
 8002558:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800255c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800255e:	4b12      	ldr	r3, [pc, #72]	; (80025a8 <MX_SPI1_Init+0xa4>)
 8002560:	2200      	movs	r2, #0
 8002562:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002564:	4b10      	ldr	r3, [pc, #64]	; (80025a8 <MX_SPI1_Init+0xa4>)
 8002566:	2200      	movs	r2, #0
 8002568:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800256a:	4b0f      	ldr	r3, [pc, #60]	; (80025a8 <MX_SPI1_Init+0xa4>)
 800256c:	2200      	movs	r2, #0
 800256e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002570:	4b0d      	ldr	r3, [pc, #52]	; (80025a8 <MX_SPI1_Init+0xa4>)
 8002572:	2200      	movs	r2, #0
 8002574:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002576:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <MX_SPI1_Init+0xa4>)
 8002578:	2200      	movs	r2, #0
 800257a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800257c:	4b0a      	ldr	r3, [pc, #40]	; (80025a8 <MX_SPI1_Init+0xa4>)
 800257e:	2200      	movs	r2, #0
 8002580:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002582:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <MX_SPI1_Init+0xa4>)
 8002584:	2200      	movs	r2, #0
 8002586:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002588:	4b07      	ldr	r3, [pc, #28]	; (80025a8 <MX_SPI1_Init+0xa4>)
 800258a:	2200      	movs	r2, #0
 800258c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800258e:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <MX_SPI1_Init+0xa4>)
 8002590:	2200      	movs	r2, #0
 8002592:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002594:	4804      	ldr	r0, [pc, #16]	; (80025a8 <MX_SPI1_Init+0xa4>)
 8002596:	f00d f9d9 	bl	800f94c <HAL_SPI_Init>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80025a0:	f000 fcd8 	bl	8002f54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80025a4:	bf00      	nop
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	24000f40 	.word	0x24000f40
 80025ac:	40013000 	.word	0x40013000

080025b0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80025b4:	4b27      	ldr	r3, [pc, #156]	; (8002654 <MX_SPI2_Init+0xa4>)
 80025b6:	4a28      	ldr	r2, [pc, #160]	; (8002658 <MX_SPI2_Init+0xa8>)
 80025b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80025ba:	4b26      	ldr	r3, [pc, #152]	; (8002654 <MX_SPI2_Init+0xa4>)
 80025bc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80025c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80025c2:	4b24      	ldr	r3, [pc, #144]	; (8002654 <MX_SPI2_Init+0xa4>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80025c8:	4b22      	ldr	r3, [pc, #136]	; (8002654 <MX_SPI2_Init+0xa4>)
 80025ca:	2207      	movs	r2, #7
 80025cc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025ce:	4b21      	ldr	r3, [pc, #132]	; (8002654 <MX_SPI2_Init+0xa4>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025d4:	4b1f      	ldr	r3, [pc, #124]	; (8002654 <MX_SPI2_Init+0xa4>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80025da:	4b1e      	ldr	r3, [pc, #120]	; (8002654 <MX_SPI2_Init+0xa4>)
 80025dc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80025e0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80025e2:	4b1c      	ldr	r3, [pc, #112]	; (8002654 <MX_SPI2_Init+0xa4>)
 80025e4:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80025e8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025ea:	4b1a      	ldr	r3, [pc, #104]	; (8002654 <MX_SPI2_Init+0xa4>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80025f0:	4b18      	ldr	r3, [pc, #96]	; (8002654 <MX_SPI2_Init+0xa4>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025f6:	4b17      	ldr	r3, [pc, #92]	; (8002654 <MX_SPI2_Init+0xa4>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80025fc:	4b15      	ldr	r3, [pc, #84]	; (8002654 <MX_SPI2_Init+0xa4>)
 80025fe:	2200      	movs	r2, #0
 8002600:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002602:	4b14      	ldr	r3, [pc, #80]	; (8002654 <MX_SPI2_Init+0xa4>)
 8002604:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002608:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800260a:	4b12      	ldr	r3, [pc, #72]	; (8002654 <MX_SPI2_Init+0xa4>)
 800260c:	2200      	movs	r2, #0
 800260e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002610:	4b10      	ldr	r3, [pc, #64]	; (8002654 <MX_SPI2_Init+0xa4>)
 8002612:	2200      	movs	r2, #0
 8002614:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002616:	4b0f      	ldr	r3, [pc, #60]	; (8002654 <MX_SPI2_Init+0xa4>)
 8002618:	2200      	movs	r2, #0
 800261a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800261c:	4b0d      	ldr	r3, [pc, #52]	; (8002654 <MX_SPI2_Init+0xa4>)
 800261e:	2200      	movs	r2, #0
 8002620:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002622:	4b0c      	ldr	r3, [pc, #48]	; (8002654 <MX_SPI2_Init+0xa4>)
 8002624:	2200      	movs	r2, #0
 8002626:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002628:	4b0a      	ldr	r3, [pc, #40]	; (8002654 <MX_SPI2_Init+0xa4>)
 800262a:	2200      	movs	r2, #0
 800262c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800262e:	4b09      	ldr	r3, [pc, #36]	; (8002654 <MX_SPI2_Init+0xa4>)
 8002630:	2200      	movs	r2, #0
 8002632:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002634:	4b07      	ldr	r3, [pc, #28]	; (8002654 <MX_SPI2_Init+0xa4>)
 8002636:	2200      	movs	r2, #0
 8002638:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800263a:	4b06      	ldr	r3, [pc, #24]	; (8002654 <MX_SPI2_Init+0xa4>)
 800263c:	2200      	movs	r2, #0
 800263e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002640:	4804      	ldr	r0, [pc, #16]	; (8002654 <MX_SPI2_Init+0xa4>)
 8002642:	f00d f983 	bl	800f94c <HAL_SPI_Init>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 800264c:	f000 fc82 	bl	8002f54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002650:	bf00      	nop
 8002652:	bd80      	pop	{r7, pc}
 8002654:	24000fc8 	.word	0x24000fc8
 8002658:	40003800 	.word	0x40003800

0800265c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002660:	4b27      	ldr	r3, [pc, #156]	; (8002700 <MX_SPI3_Init+0xa4>)
 8002662:	4a28      	ldr	r2, [pc, #160]	; (8002704 <MX_SPI3_Init+0xa8>)
 8002664:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002666:	4b26      	ldr	r3, [pc, #152]	; (8002700 <MX_SPI3_Init+0xa4>)
 8002668:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800266c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800266e:	4b24      	ldr	r3, [pc, #144]	; (8002700 <MX_SPI3_Init+0xa4>)
 8002670:	2200      	movs	r2, #0
 8002672:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002674:	4b22      	ldr	r3, [pc, #136]	; (8002700 <MX_SPI3_Init+0xa4>)
 8002676:	2207      	movs	r2, #7
 8002678:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800267a:	4b21      	ldr	r3, [pc, #132]	; (8002700 <MX_SPI3_Init+0xa4>)
 800267c:	2200      	movs	r2, #0
 800267e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002680:	4b1f      	ldr	r3, [pc, #124]	; (8002700 <MX_SPI3_Init+0xa4>)
 8002682:	2200      	movs	r2, #0
 8002684:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002686:	4b1e      	ldr	r3, [pc, #120]	; (8002700 <MX_SPI3_Init+0xa4>)
 8002688:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800268c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800268e:	4b1c      	ldr	r3, [pc, #112]	; (8002700 <MX_SPI3_Init+0xa4>)
 8002690:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002694:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002696:	4b1a      	ldr	r3, [pc, #104]	; (8002700 <MX_SPI3_Init+0xa4>)
 8002698:	2200      	movs	r2, #0
 800269a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800269c:	4b18      	ldr	r3, [pc, #96]	; (8002700 <MX_SPI3_Init+0xa4>)
 800269e:	2200      	movs	r2, #0
 80026a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026a2:	4b17      	ldr	r3, [pc, #92]	; (8002700 <MX_SPI3_Init+0xa4>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80026a8:	4b15      	ldr	r3, [pc, #84]	; (8002700 <MX_SPI3_Init+0xa4>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80026ae:	4b14      	ldr	r3, [pc, #80]	; (8002700 <MX_SPI3_Init+0xa4>)
 80026b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026b4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80026b6:	4b12      	ldr	r3, [pc, #72]	; (8002700 <MX_SPI3_Init+0xa4>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80026bc:	4b10      	ldr	r3, [pc, #64]	; (8002700 <MX_SPI3_Init+0xa4>)
 80026be:	2200      	movs	r2, #0
 80026c0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80026c2:	4b0f      	ldr	r3, [pc, #60]	; (8002700 <MX_SPI3_Init+0xa4>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80026c8:	4b0d      	ldr	r3, [pc, #52]	; (8002700 <MX_SPI3_Init+0xa4>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80026ce:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <MX_SPI3_Init+0xa4>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80026d4:	4b0a      	ldr	r3, [pc, #40]	; (8002700 <MX_SPI3_Init+0xa4>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80026da:	4b09      	ldr	r3, [pc, #36]	; (8002700 <MX_SPI3_Init+0xa4>)
 80026dc:	2200      	movs	r2, #0
 80026de:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80026e0:	4b07      	ldr	r3, [pc, #28]	; (8002700 <MX_SPI3_Init+0xa4>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80026e6:	4b06      	ldr	r3, [pc, #24]	; (8002700 <MX_SPI3_Init+0xa4>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80026ec:	4804      	ldr	r0, [pc, #16]	; (8002700 <MX_SPI3_Init+0xa4>)
 80026ee:	f00d f92d 	bl	800f94c <HAL_SPI_Init>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 80026f8:	f000 fc2c 	bl	8002f54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80026fc:	bf00      	nop
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	24001050 	.word	0x24001050
 8002704:	40003c00 	.word	0x40003c00

08002708 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b08a      	sub	sp, #40	; 0x28
 800270c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800270e:	f107 031c 	add.w	r3, r7, #28
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	605a      	str	r2, [r3, #4]
 8002718:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800271a:	463b      	mov	r3, r7
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	611a      	str	r2, [r3, #16]
 8002728:	615a      	str	r2, [r3, #20]
 800272a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800272c:	4b21      	ldr	r3, [pc, #132]	; (80027b4 <MX_TIM2_Init+0xac>)
 800272e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002732:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002734:	4b1f      	ldr	r3, [pc, #124]	; (80027b4 <MX_TIM2_Init+0xac>)
 8002736:	2200      	movs	r2, #0
 8002738:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800273a:	4b1e      	ldr	r3, [pc, #120]	; (80027b4 <MX_TIM2_Init+0xac>)
 800273c:	2200      	movs	r2, #0
 800273e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 8002740:	4b1c      	ldr	r3, [pc, #112]	; (80027b4 <MX_TIM2_Init+0xac>)
 8002742:	225a      	movs	r2, #90	; 0x5a
 8002744:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002746:	4b1b      	ldr	r3, [pc, #108]	; (80027b4 <MX_TIM2_Init+0xac>)
 8002748:	2200      	movs	r2, #0
 800274a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <MX_TIM2_Init+0xac>)
 800274e:	2200      	movs	r2, #0
 8002750:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002752:	4818      	ldr	r0, [pc, #96]	; (80027b4 <MX_TIM2_Init+0xac>)
 8002754:	f00d feea 	bl	801052c <HAL_TIM_PWM_Init>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800275e:	f000 fbf9 	bl	8002f54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002762:	2300      	movs	r3, #0
 8002764:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002766:	2300      	movs	r3, #0
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800276a:	f107 031c 	add.w	r3, r7, #28
 800276e:	4619      	mov	r1, r3
 8002770:	4810      	ldr	r0, [pc, #64]	; (80027b4 <MX_TIM2_Init+0xac>)
 8002772:	f00f f855 	bl	8011820 <HAL_TIMEx_MasterConfigSynchronization>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800277c:	f000 fbea 	bl	8002f54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002780:	2360      	movs	r3, #96	; 0x60
 8002782:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002784:	2300      	movs	r3, #0
 8002786:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002788:	2300      	movs	r3, #0
 800278a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800278c:	2300      	movs	r3, #0
 800278e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002790:	463b      	mov	r3, r7
 8002792:	2208      	movs	r2, #8
 8002794:	4619      	mov	r1, r3
 8002796:	4807      	ldr	r0, [pc, #28]	; (80027b4 <MX_TIM2_Init+0xac>)
 8002798:	f00e fa74 	bl	8010c84 <HAL_TIM_PWM_ConfigChannel>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80027a2:	f000 fbd7 	bl	8002f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80027a6:	4803      	ldr	r0, [pc, #12]	; (80027b4 <MX_TIM2_Init+0xac>)
 80027a8:	f001 f98a 	bl	8003ac0 <HAL_TIM_MspPostInit>

}
 80027ac:	bf00      	nop
 80027ae:	3728      	adds	r7, #40	; 0x28
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	240010d8 	.word	0x240010d8

080027b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b08a      	sub	sp, #40	; 0x28
 80027bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027be:	f107 031c 	add.w	r3, r7, #28
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	605a      	str	r2, [r3, #4]
 80027c8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027ca:	463b      	mov	r3, r7
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	605a      	str	r2, [r3, #4]
 80027d2:	609a      	str	r2, [r3, #8]
 80027d4:	60da      	str	r2, [r3, #12]
 80027d6:	611a      	str	r2, [r3, #16]
 80027d8:	615a      	str	r2, [r3, #20]
 80027da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80027dc:	4b26      	ldr	r3, [pc, #152]	; (8002878 <MX_TIM3_Init+0xc0>)
 80027de:	4a27      	ldr	r2, [pc, #156]	; (800287c <MX_TIM3_Init+0xc4>)
 80027e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80027e2:	4b25      	ldr	r3, [pc, #148]	; (8002878 <MX_TIM3_Init+0xc0>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027e8:	4b23      	ldr	r3, [pc, #140]	; (8002878 <MX_TIM3_Init+0xc0>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 80027ee:	4b22      	ldr	r3, [pc, #136]	; (8002878 <MX_TIM3_Init+0xc0>)
 80027f0:	225a      	movs	r2, #90	; 0x5a
 80027f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027f4:	4b20      	ldr	r3, [pc, #128]	; (8002878 <MX_TIM3_Init+0xc0>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027fa:	4b1f      	ldr	r3, [pc, #124]	; (8002878 <MX_TIM3_Init+0xc0>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002800:	481d      	ldr	r0, [pc, #116]	; (8002878 <MX_TIM3_Init+0xc0>)
 8002802:	f00d fe93 	bl	801052c <HAL_TIM_PWM_Init>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800280c:	f000 fba2 	bl	8002f54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002810:	2300      	movs	r3, #0
 8002812:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002814:	2300      	movs	r3, #0
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002818:	f107 031c 	add.w	r3, r7, #28
 800281c:	4619      	mov	r1, r3
 800281e:	4816      	ldr	r0, [pc, #88]	; (8002878 <MX_TIM3_Init+0xc0>)
 8002820:	f00e fffe 	bl	8011820 <HAL_TIMEx_MasterConfigSynchronization>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800282a:	f000 fb93 	bl	8002f54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800282e:	2360      	movs	r3, #96	; 0x60
 8002830:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002832:	2300      	movs	r3, #0
 8002834:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002836:	2300      	movs	r3, #0
 8002838:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800283a:	2300      	movs	r3, #0
 800283c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800283e:	463b      	mov	r3, r7
 8002840:	2200      	movs	r2, #0
 8002842:	4619      	mov	r1, r3
 8002844:	480c      	ldr	r0, [pc, #48]	; (8002878 <MX_TIM3_Init+0xc0>)
 8002846:	f00e fa1d 	bl	8010c84 <HAL_TIM_PWM_ConfigChannel>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002850:	f000 fb80 	bl	8002f54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002854:	463b      	mov	r3, r7
 8002856:	2204      	movs	r2, #4
 8002858:	4619      	mov	r1, r3
 800285a:	4807      	ldr	r0, [pc, #28]	; (8002878 <MX_TIM3_Init+0xc0>)
 800285c:	f00e fa12 	bl	8010c84 <HAL_TIM_PWM_ConfigChannel>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002866:	f000 fb75 	bl	8002f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800286a:	4803      	ldr	r0, [pc, #12]	; (8002878 <MX_TIM3_Init+0xc0>)
 800286c:	f001 f928 	bl	8003ac0 <HAL_TIM_MspPostInit>

}
 8002870:	bf00      	nop
 8002872:	3728      	adds	r7, #40	; 0x28
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	24001124 	.word	0x24001124
 800287c:	40000400 	.word	0x40000400

08002880 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b08a      	sub	sp, #40	; 0x28
 8002884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002886:	f107 031c 	add.w	r3, r7, #28
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	605a      	str	r2, [r3, #4]
 8002890:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002892:	463b      	mov	r3, r7
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	60da      	str	r2, [r3, #12]
 800289e:	611a      	str	r2, [r3, #16]
 80028a0:	615a      	str	r2, [r3, #20]
 80028a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80028a4:	4b32      	ldr	r3, [pc, #200]	; (8002970 <MX_TIM4_Init+0xf0>)
 80028a6:	4a33      	ldr	r2, [pc, #204]	; (8002974 <MX_TIM4_Init+0xf4>)
 80028a8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 28;
 80028aa:	4b31      	ldr	r3, [pc, #196]	; (8002970 <MX_TIM4_Init+0xf0>)
 80028ac:	221c      	movs	r2, #28
 80028ae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028b0:	4b2f      	ldr	r3, [pc, #188]	; (8002970 <MX_TIM4_Init+0xf0>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80028b6:	4b2e      	ldr	r3, [pc, #184]	; (8002970 <MX_TIM4_Init+0xf0>)
 80028b8:	f242 720f 	movw	r2, #9999	; 0x270f
 80028bc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028be:	4b2c      	ldr	r3, [pc, #176]	; (8002970 <MX_TIM4_Init+0xf0>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028c4:	4b2a      	ldr	r3, [pc, #168]	; (8002970 <MX_TIM4_Init+0xf0>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80028ca:	4829      	ldr	r0, [pc, #164]	; (8002970 <MX_TIM4_Init+0xf0>)
 80028cc:	f00d fe2e 	bl	801052c <HAL_TIM_PWM_Init>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80028d6:	f000 fb3d 	bl	8002f54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028da:	2300      	movs	r3, #0
 80028dc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028de:	2300      	movs	r3, #0
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80028e2:	f107 031c 	add.w	r3, r7, #28
 80028e6:	4619      	mov	r1, r3
 80028e8:	4821      	ldr	r0, [pc, #132]	; (8002970 <MX_TIM4_Init+0xf0>)
 80028ea:	f00e ff99 	bl	8011820 <HAL_TIMEx_MasterConfigSynchronization>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80028f4:	f000 fb2e 	bl	8002f54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028f8:	2360      	movs	r3, #96	; 0x60
 80028fa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80028fc:	2300      	movs	r3, #0
 80028fe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002900:	2300      	movs	r3, #0
 8002902:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002904:	2300      	movs	r3, #0
 8002906:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002908:	463b      	mov	r3, r7
 800290a:	2200      	movs	r2, #0
 800290c:	4619      	mov	r1, r3
 800290e:	4818      	ldr	r0, [pc, #96]	; (8002970 <MX_TIM4_Init+0xf0>)
 8002910:	f00e f9b8 	bl	8010c84 <HAL_TIM_PWM_ConfigChannel>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800291a:	f000 fb1b 	bl	8002f54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800291e:	463b      	mov	r3, r7
 8002920:	2204      	movs	r2, #4
 8002922:	4619      	mov	r1, r3
 8002924:	4812      	ldr	r0, [pc, #72]	; (8002970 <MX_TIM4_Init+0xf0>)
 8002926:	f00e f9ad 	bl	8010c84 <HAL_TIM_PWM_ConfigChannel>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002930:	f000 fb10 	bl	8002f54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002934:	463b      	mov	r3, r7
 8002936:	2208      	movs	r2, #8
 8002938:	4619      	mov	r1, r3
 800293a:	480d      	ldr	r0, [pc, #52]	; (8002970 <MX_TIM4_Init+0xf0>)
 800293c:	f00e f9a2 	bl	8010c84 <HAL_TIM_PWM_ConfigChannel>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8002946:	f000 fb05 	bl	8002f54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800294a:	463b      	mov	r3, r7
 800294c:	220c      	movs	r2, #12
 800294e:	4619      	mov	r1, r3
 8002950:	4807      	ldr	r0, [pc, #28]	; (8002970 <MX_TIM4_Init+0xf0>)
 8002952:	f00e f997 	bl	8010c84 <HAL_TIM_PWM_ConfigChannel>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 800295c:	f000 fafa 	bl	8002f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002960:	4803      	ldr	r0, [pc, #12]	; (8002970 <MX_TIM4_Init+0xf0>)
 8002962:	f001 f8ad 	bl	8003ac0 <HAL_TIM_MspPostInit>

}
 8002966:	bf00      	nop
 8002968:	3728      	adds	r7, #40	; 0x28
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	24001170 	.word	0x24001170
 8002974:	40000800 	.word	0x40000800

08002978 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b08a      	sub	sp, #40	; 0x28
 800297c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800297e:	f107 031c 	add.w	r3, r7, #28
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	605a      	str	r2, [r3, #4]
 8002988:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800298a:	463b      	mov	r3, r7
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	605a      	str	r2, [r3, #4]
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	60da      	str	r2, [r3, #12]
 8002996:	611a      	str	r2, [r3, #16]
 8002998:	615a      	str	r2, [r3, #20]
 800299a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800299c:	4b21      	ldr	r3, [pc, #132]	; (8002a24 <MX_TIM5_Init+0xac>)
 800299e:	4a22      	ldr	r2, [pc, #136]	; (8002a28 <MX_TIM5_Init+0xb0>)
 80029a0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80029a2:	4b20      	ldr	r3, [pc, #128]	; (8002a24 <MX_TIM5_Init+0xac>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029a8:	4b1e      	ldr	r3, [pc, #120]	; (8002a24 <MX_TIM5_Init+0xac>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 80029ae:	4b1d      	ldr	r3, [pc, #116]	; (8002a24 <MX_TIM5_Init+0xac>)
 80029b0:	225a      	movs	r2, #90	; 0x5a
 80029b2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029b4:	4b1b      	ldr	r3, [pc, #108]	; (8002a24 <MX_TIM5_Init+0xac>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029ba:	4b1a      	ldr	r3, [pc, #104]	; (8002a24 <MX_TIM5_Init+0xac>)
 80029bc:	2200      	movs	r2, #0
 80029be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80029c0:	4818      	ldr	r0, [pc, #96]	; (8002a24 <MX_TIM5_Init+0xac>)
 80029c2:	f00d fdb3 	bl	801052c <HAL_TIM_PWM_Init>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80029cc:	f000 fac2 	bl	8002f54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029d0:	2300      	movs	r3, #0
 80029d2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029d4:	2300      	movs	r3, #0
 80029d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80029d8:	f107 031c 	add.w	r3, r7, #28
 80029dc:	4619      	mov	r1, r3
 80029de:	4811      	ldr	r0, [pc, #68]	; (8002a24 <MX_TIM5_Init+0xac>)
 80029e0:	f00e ff1e 	bl	8011820 <HAL_TIMEx_MasterConfigSynchronization>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80029ea:	f000 fab3 	bl	8002f54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029ee:	2360      	movs	r3, #96	; 0x60
 80029f0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80029f2:	2300      	movs	r3, #0
 80029f4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029f6:	2300      	movs	r3, #0
 80029f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029fa:	2300      	movs	r3, #0
 80029fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80029fe:	463b      	mov	r3, r7
 8002a00:	220c      	movs	r2, #12
 8002a02:	4619      	mov	r1, r3
 8002a04:	4807      	ldr	r0, [pc, #28]	; (8002a24 <MX_TIM5_Init+0xac>)
 8002a06:	f00e f93d 	bl	8010c84 <HAL_TIM_PWM_ConfigChannel>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002a10:	f000 faa0 	bl	8002f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002a14:	4803      	ldr	r0, [pc, #12]	; (8002a24 <MX_TIM5_Init+0xac>)
 8002a16:	f001 f853 	bl	8003ac0 <HAL_TIM_MspPostInit>

}
 8002a1a:	bf00      	nop
 8002a1c:	3728      	adds	r7, #40	; 0x28
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	240011bc 	.word	0x240011bc
 8002a28:	40000c00 	.word	0x40000c00

08002a2c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002a30:	4b0e      	ldr	r3, [pc, #56]	; (8002a6c <MX_TIM13_Init+0x40>)
 8002a32:	4a0f      	ldr	r2, [pc, #60]	; (8002a70 <MX_TIM13_Init+0x44>)
 8002a34:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 95;
 8002a36:	4b0d      	ldr	r3, [pc, #52]	; (8002a6c <MX_TIM13_Init+0x40>)
 8002a38:	225f      	movs	r2, #95	; 0x5f
 8002a3a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a3c:	4b0b      	ldr	r3, [pc, #44]	; (8002a6c <MX_TIM13_Init+0x40>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8002a42:	4b0a      	ldr	r3, [pc, #40]	; (8002a6c <MX_TIM13_Init+0x40>)
 8002a44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a48:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a4a:	4b08      	ldr	r3, [pc, #32]	; (8002a6c <MX_TIM13_Init+0x40>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a50:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <MX_TIM13_Init+0x40>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002a56:	4805      	ldr	r0, [pc, #20]	; (8002a6c <MX_TIM13_Init+0x40>)
 8002a58:	f00d fd11 	bl	801047e <HAL_TIM_Base_Init>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8002a62:	f000 fa77 	bl	8002f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002a66:	bf00      	nop
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	24001208 	.word	0x24001208
 8002a70:	40001c00 	.word	0x40001c00

08002a74 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002a78:	4b22      	ldr	r3, [pc, #136]	; (8002b04 <MX_UART4_Init+0x90>)
 8002a7a:	4a23      	ldr	r2, [pc, #140]	; (8002b08 <MX_UART4_Init+0x94>)
 8002a7c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002a7e:	4b21      	ldr	r3, [pc, #132]	; (8002b04 <MX_UART4_Init+0x90>)
 8002a80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a84:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002a86:	4b1f      	ldr	r3, [pc, #124]	; (8002b04 <MX_UART4_Init+0x90>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002a8c:	4b1d      	ldr	r3, [pc, #116]	; (8002b04 <MX_UART4_Init+0x90>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002a92:	4b1c      	ldr	r3, [pc, #112]	; (8002b04 <MX_UART4_Init+0x90>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002a98:	4b1a      	ldr	r3, [pc, #104]	; (8002b04 <MX_UART4_Init+0x90>)
 8002a9a:	220c      	movs	r2, #12
 8002a9c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a9e:	4b19      	ldr	r3, [pc, #100]	; (8002b04 <MX_UART4_Init+0x90>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002aa4:	4b17      	ldr	r3, [pc, #92]	; (8002b04 <MX_UART4_Init+0x90>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002aaa:	4b16      	ldr	r3, [pc, #88]	; (8002b04 <MX_UART4_Init+0x90>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ab0:	4b14      	ldr	r3, [pc, #80]	; (8002b04 <MX_UART4_Init+0x90>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ab6:	4b13      	ldr	r3, [pc, #76]	; (8002b04 <MX_UART4_Init+0x90>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002abc:	4811      	ldr	r0, [pc, #68]	; (8002b04 <MX_UART4_Init+0x90>)
 8002abe:	f00e ff69 	bl	8011994 <HAL_UART_Init>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002ac8:	f000 fa44 	bl	8002f54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002acc:	2100      	movs	r1, #0
 8002ace:	480d      	ldr	r0, [pc, #52]	; (8002b04 <MX_UART4_Init+0x90>)
 8002ad0:	f010 f86f 	bl	8012bb2 <HAL_UARTEx_SetTxFifoThreshold>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002ada:	f000 fa3b 	bl	8002f54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ade:	2100      	movs	r1, #0
 8002ae0:	4808      	ldr	r0, [pc, #32]	; (8002b04 <MX_UART4_Init+0x90>)
 8002ae2:	f010 f8a4 	bl	8012c2e <HAL_UARTEx_SetRxFifoThreshold>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002aec:	f000 fa32 	bl	8002f54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002af0:	4804      	ldr	r0, [pc, #16]	; (8002b04 <MX_UART4_Init+0x90>)
 8002af2:	f010 f825 	bl	8012b40 <HAL_UARTEx_DisableFifoMode>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002afc:	f000 fa2a 	bl	8002f54 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002b00:	bf00      	nop
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	240014ac 	.word	0x240014ac
 8002b08:	40004c00 	.word	0x40004c00

08002b0c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002b10:	4b22      	ldr	r3, [pc, #136]	; (8002b9c <MX_USART6_UART_Init+0x90>)
 8002b12:	4a23      	ldr	r2, [pc, #140]	; (8002ba0 <MX_USART6_UART_Init+0x94>)
 8002b14:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002b16:	4b21      	ldr	r3, [pc, #132]	; (8002b9c <MX_USART6_UART_Init+0x90>)
 8002b18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b1c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002b1e:	4b1f      	ldr	r3, [pc, #124]	; (8002b9c <MX_USART6_UART_Init+0x90>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002b24:	4b1d      	ldr	r3, [pc, #116]	; (8002b9c <MX_USART6_UART_Init+0x90>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002b2a:	4b1c      	ldr	r3, [pc, #112]	; (8002b9c <MX_USART6_UART_Init+0x90>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002b30:	4b1a      	ldr	r3, [pc, #104]	; (8002b9c <MX_USART6_UART_Init+0x90>)
 8002b32:	220c      	movs	r2, #12
 8002b34:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b36:	4b19      	ldr	r3, [pc, #100]	; (8002b9c <MX_USART6_UART_Init+0x90>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b3c:	4b17      	ldr	r3, [pc, #92]	; (8002b9c <MX_USART6_UART_Init+0x90>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b42:	4b16      	ldr	r3, [pc, #88]	; (8002b9c <MX_USART6_UART_Init+0x90>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b48:	4b14      	ldr	r3, [pc, #80]	; (8002b9c <MX_USART6_UART_Init+0x90>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b4e:	4b13      	ldr	r3, [pc, #76]	; (8002b9c <MX_USART6_UART_Init+0x90>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002b54:	4811      	ldr	r0, [pc, #68]	; (8002b9c <MX_USART6_UART_Init+0x90>)
 8002b56:	f00e ff1d 	bl	8011994 <HAL_UART_Init>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002b60:	f000 f9f8 	bl	8002f54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b64:	2100      	movs	r1, #0
 8002b66:	480d      	ldr	r0, [pc, #52]	; (8002b9c <MX_USART6_UART_Init+0x90>)
 8002b68:	f010 f823 	bl	8012bb2 <HAL_UARTEx_SetTxFifoThreshold>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8002b72:	f000 f9ef 	bl	8002f54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b76:	2100      	movs	r1, #0
 8002b78:	4808      	ldr	r0, [pc, #32]	; (8002b9c <MX_USART6_UART_Init+0x90>)
 8002b7a:	f010 f858 	bl	8012c2e <HAL_UARTEx_SetRxFifoThreshold>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8002b84:	f000 f9e6 	bl	8002f54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8002b88:	4804      	ldr	r0, [pc, #16]	; (8002b9c <MX_USART6_UART_Init+0x90>)
 8002b8a:	f00f ffd9 	bl	8012b40 <HAL_UARTEx_DisableFifoMode>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002b94:	f000 f9de 	bl	8002f54 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002b98:	bf00      	nop
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	24001540 	.word	0x24001540
 8002ba0:	40011400 	.word	0x40011400

08002ba4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002baa:	4b2d      	ldr	r3, [pc, #180]	; (8002c60 <MX_DMA_Init+0xbc>)
 8002bac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002bb0:	4a2b      	ldr	r2, [pc, #172]	; (8002c60 <MX_DMA_Init+0xbc>)
 8002bb2:	f043 0301 	orr.w	r3, r3, #1
 8002bb6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002bba:	4b29      	ldr	r3, [pc, #164]	; (8002c60 <MX_DMA_Init+0xbc>)
 8002bbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	607b      	str	r3, [r7, #4]
 8002bc6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002bc8:	4b25      	ldr	r3, [pc, #148]	; (8002c60 <MX_DMA_Init+0xbc>)
 8002bca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002bce:	4a24      	ldr	r2, [pc, #144]	; (8002c60 <MX_DMA_Init+0xbc>)
 8002bd0:	f043 0302 	orr.w	r3, r3, #2
 8002bd4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002bd8:	4b21      	ldr	r3, [pc, #132]	; (8002c60 <MX_DMA_Init+0xbc>)
 8002bda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	603b      	str	r3, [r7, #0]
 8002be4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002be6:	2200      	movs	r2, #0
 8002be8:	2100      	movs	r1, #0
 8002bea:	200b      	movs	r0, #11
 8002bec:	f002 fffd 	bl	8005bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002bf0:	200b      	movs	r0, #11
 8002bf2:	f003 f814 	bl	8005c1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	200c      	movs	r0, #12
 8002bfc:	f002 fff5 	bl	8005bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002c00:	200c      	movs	r0, #12
 8002c02:	f003 f80c 	bl	8005c1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002c06:	2200      	movs	r2, #0
 8002c08:	2100      	movs	r1, #0
 8002c0a:	200d      	movs	r0, #13
 8002c0c:	f002 ffed 	bl	8005bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002c10:	200d      	movs	r0, #13
 8002c12:	f003 f804 	bl	8005c1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002c16:	2200      	movs	r2, #0
 8002c18:	2100      	movs	r1, #0
 8002c1a:	200e      	movs	r0, #14
 8002c1c:	f002 ffe5 	bl	8005bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002c20:	200e      	movs	r0, #14
 8002c22:	f002 fffc 	bl	8005c1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002c26:	2200      	movs	r2, #0
 8002c28:	2100      	movs	r1, #0
 8002c2a:	200f      	movs	r0, #15
 8002c2c:	f002 ffdd 	bl	8005bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002c30:	200f      	movs	r0, #15
 8002c32:	f002 fff4 	bl	8005c1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002c36:	2200      	movs	r2, #0
 8002c38:	2100      	movs	r1, #0
 8002c3a:	2010      	movs	r0, #16
 8002c3c:	f002 ffd5 	bl	8005bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002c40:	2010      	movs	r0, #16
 8002c42:	f002 ffec 	bl	8005c1e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002c46:	2200      	movs	r2, #0
 8002c48:	2100      	movs	r1, #0
 8002c4a:	2046      	movs	r0, #70	; 0x46
 8002c4c:	f002 ffcd 	bl	8005bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002c50:	2046      	movs	r0, #70	; 0x46
 8002c52:	f002 ffe4 	bl	8005c1e <HAL_NVIC_EnableIRQ>

}
 8002c56:	bf00      	nop
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	58024400 	.word	0x58024400

08002c64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08e      	sub	sp, #56	; 0x38
 8002c68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	605a      	str	r2, [r3, #4]
 8002c74:	609a      	str	r2, [r3, #8]
 8002c76:	60da      	str	r2, [r3, #12]
 8002c78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c7a:	4bae      	ldr	r3, [pc, #696]	; (8002f34 <MX_GPIO_Init+0x2d0>)
 8002c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c80:	4aac      	ldr	r2, [pc, #688]	; (8002f34 <MX_GPIO_Init+0x2d0>)
 8002c82:	f043 0310 	orr.w	r3, r3, #16
 8002c86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c8a:	4baa      	ldr	r3, [pc, #680]	; (8002f34 <MX_GPIO_Init+0x2d0>)
 8002c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c90:	f003 0310 	and.w	r3, r3, #16
 8002c94:	623b      	str	r3, [r7, #32]
 8002c96:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c98:	4ba6      	ldr	r3, [pc, #664]	; (8002f34 <MX_GPIO_Init+0x2d0>)
 8002c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c9e:	4aa5      	ldr	r2, [pc, #660]	; (8002f34 <MX_GPIO_Init+0x2d0>)
 8002ca0:	f043 0320 	orr.w	r3, r3, #32
 8002ca4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ca8:	4ba2      	ldr	r3, [pc, #648]	; (8002f34 <MX_GPIO_Init+0x2d0>)
 8002caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cae:	f003 0320 	and.w	r3, r3, #32
 8002cb2:	61fb      	str	r3, [r7, #28]
 8002cb4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cb6:	4b9f      	ldr	r3, [pc, #636]	; (8002f34 <MX_GPIO_Init+0x2d0>)
 8002cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cbc:	4a9d      	ldr	r2, [pc, #628]	; (8002f34 <MX_GPIO_Init+0x2d0>)
 8002cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cc6:	4b9b      	ldr	r3, [pc, #620]	; (8002f34 <MX_GPIO_Init+0x2d0>)
 8002cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd0:	61bb      	str	r3, [r7, #24]
 8002cd2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cd4:	4b97      	ldr	r3, [pc, #604]	; (8002f34 <MX_GPIO_Init+0x2d0>)
 8002cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cda:	4a96      	ldr	r2, [pc, #600]	; (8002f34 <MX_GPIO_Init+0x2d0>)
 8002cdc:	f043 0304 	orr.w	r3, r3, #4
 8002ce0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ce4:	4b93      	ldr	r3, [pc, #588]	; (8002f34 <MX_GPIO_Init+0x2d0>)
 8002ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cea:	f003 0304 	and.w	r3, r3, #4
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf2:	4b90      	ldr	r3, [pc, #576]	; (8002f34 <MX_GPIO_Init+0x2d0>)
 8002cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cf8:	4a8e      	ldr	r2, [pc, #568]	; (8002f34 <MX_GPIO_Init+0x2d0>)
 8002cfa:	f043 0301 	orr.w	r3, r3, #1
 8002cfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d02:	4b8c      	ldr	r3, [pc, #560]	; (8002f34 <MX_GPIO_Init+0x2d0>)
 8002d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	613b      	str	r3, [r7, #16]
 8002d0e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d10:	4b88      	ldr	r3, [pc, #544]	; (8002f34 <MX_GPIO_Init+0x2d0>)
 8002d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d16:	4a87      	ldr	r2, [pc, #540]	; (8002f34 <MX_GPIO_Init+0x2d0>)
 8002d18:	f043 0302 	orr.w	r3, r3, #2
 8002d1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d20:	4b84      	ldr	r3, [pc, #528]	; (8002f34 <MX_GPIO_Init+0x2d0>)
 8002d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d2e:	4b81      	ldr	r3, [pc, #516]	; (8002f34 <MX_GPIO_Init+0x2d0>)
 8002d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d34:	4a7f      	ldr	r2, [pc, #508]	; (8002f34 <MX_GPIO_Init+0x2d0>)
 8002d36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d3e:	4b7d      	ldr	r3, [pc, #500]	; (8002f34 <MX_GPIO_Init+0x2d0>)
 8002d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d48:	60bb      	str	r3, [r7, #8]
 8002d4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d4c:	4b79      	ldr	r3, [pc, #484]	; (8002f34 <MX_GPIO_Init+0x2d0>)
 8002d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d52:	4a78      	ldr	r2, [pc, #480]	; (8002f34 <MX_GPIO_Init+0x2d0>)
 8002d54:	f043 0308 	orr.w	r3, r3, #8
 8002d58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d5c:	4b75      	ldr	r3, [pc, #468]	; (8002f34 <MX_GPIO_Init+0x2d0>)
 8002d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d62:	f003 0308 	and.w	r3, r3, #8
 8002d66:	607b      	str	r3, [r7, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f241 5104 	movw	r1, #5380	; 0x1504
 8002d70:	4871      	ldr	r0, [pc, #452]	; (8002f38 <MX_GPIO_Init+0x2d4>)
 8002d72:	f005 fd67 	bl	8008844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|ARM2_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8002d76:	2200      	movs	r2, #0
 8002d78:	f248 0106 	movw	r1, #32774	; 0x8006
 8002d7c:	486f      	ldr	r0, [pc, #444]	; (8002f3c <MX_GPIO_Init+0x2d8>)
 8002d7e:	f005 fd61 	bl	8008844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002d82:	2200      	movs	r2, #0
 8002d84:	2130      	movs	r1, #48	; 0x30
 8002d86:	486e      	ldr	r0, [pc, #440]	; (8002f40 <MX_GPIO_Init+0x2dc>)
 8002d88:	f005 fd5c 	bl	8008844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|PYRO1_Pin, GPIO_PIN_RESET);
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	2103      	movs	r1, #3
 8002d90:	486c      	ldr	r0, [pc, #432]	; (8002f44 <MX_GPIO_Init+0x2e0>)
 8002d92:	f005 fd57 	bl	8008844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 8002d96:	2200      	movs	r2, #0
 8002d98:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8002d9c:	486a      	ldr	r0, [pc, #424]	; (8002f48 <MX_GPIO_Init+0x2e4>)
 8002d9e:	f005 fd51 	bl	8008844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8002da2:	2200      	movs	r2, #0
 8002da4:	210e      	movs	r1, #14
 8002da6:	4869      	ldr	r0, [pc, #420]	; (8002f4c <MX_GPIO_Init+0x2e8>)
 8002da8:	f005 fd4c 	bl	8008844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_SET);
 8002dac:	2201      	movs	r2, #1
 8002dae:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002db2:	4867      	ldr	r0, [pc, #412]	; (8002f50 <MX_GPIO_Init+0x2ec>)
 8002db4:	f005 fd46 	bl	8008844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8002db8:	2200      	movs	r2, #0
 8002dba:	2101      	movs	r1, #1
 8002dbc:	4864      	ldr	r0, [pc, #400]	; (8002f50 <MX_GPIO_Init+0x2ec>)
 8002dbe:	f005 fd41 	bl	8008844 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 8002dc2:	f241 5304 	movw	r3, #5380	; 0x1504
 8002dc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002dd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dd8:	4619      	mov	r1, r3
 8002dda:	4857      	ldr	r0, [pc, #348]	; (8002f38 <MX_GPIO_Init+0x2d4>)
 8002ddc:	f005 fb72 	bl	80084c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin ARM2_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|ARM2_Pin|GPIO_PIN_15;
 8002de0:	f248 0306 	movw	r3, #32774	; 0x8006
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002de6:	2301      	movs	r3, #1
 8002de8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dee:	2300      	movs	r3, #0
 8002df0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002df2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002df6:	4619      	mov	r1, r3
 8002df8:	4850      	ldr	r0, [pc, #320]	; (8002f3c <MX_GPIO_Init+0x2d8>)
 8002dfa:	f005 fb63 	bl	80084c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002dfe:	2330      	movs	r3, #48	; 0x30
 8002e00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e02:	2301      	movs	r3, #1
 8002e04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e06:	2300      	movs	r3, #0
 8002e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e12:	4619      	mov	r1, r3
 8002e14:	484a      	ldr	r0, [pc, #296]	; (8002f40 <MX_GPIO_Init+0x2dc>)
 8002e16:	f005 fb55 	bl	80084c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PYRO1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|PYRO1_Pin;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e22:	2300      	movs	r3, #0
 8002e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e26:	2300      	movs	r3, #0
 8002e28:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4844      	ldr	r0, [pc, #272]	; (8002f44 <MX_GPIO_Init+0x2e0>)
 8002e32:	f005 fb47 	bl	80084c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 8002e36:	2304      	movs	r3, #4
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 8002e42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e46:	4619      	mov	r1, r3
 8002e48:	483e      	ldr	r0, [pc, #248]	; (8002f44 <MX_GPIO_Init+0x2e0>)
 8002e4a:	f005 fb3b 	bl	80084c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 8002e4e:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8002e52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e54:	2301      	movs	r3, #1
 8002e56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e64:	4619      	mov	r1, r3
 8002e66:	4838      	ldr	r0, [pc, #224]	; (8002f48 <MX_GPIO_Init+0x2e4>)
 8002e68:	f005 fb2c 	bl	80084c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 8002e6c:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e72:	2300      	movs	r3, #0
 8002e74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e76:	2301      	movs	r3, #1
 8002e78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e7e:	4619      	mov	r1, r3
 8002e80:	4831      	ldr	r0, [pc, #196]	; (8002f48 <MX_GPIO_Init+0x2e4>)
 8002e82:	f005 fb1f 	bl	80084c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 8002e86:	2301      	movs	r3, #1
 8002e88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 8002e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e96:	4619      	mov	r1, r3
 8002e98:	482c      	ldr	r0, [pc, #176]	; (8002f4c <MX_GPIO_Init+0x2e8>)
 8002e9a:	f005 fb13 	bl	80084c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 8002e9e:	230e      	movs	r3, #14
 8002ea0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4825      	ldr	r0, [pc, #148]	; (8002f4c <MX_GPIO_Init+0x2e8>)
 8002eb6:	f005 fb05 	bl	80084c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 8002eba:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 8002ebe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ecc:	4619      	mov	r1, r3
 8002ece:	481a      	ldr	r0, [pc, #104]	; (8002f38 <MX_GPIO_Init+0x2d4>)
 8002ed0:	f005 faf8 	bl	80084c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0;
 8002ed4:	f240 7301 	movw	r3, #1793	; 0x701
 8002ed8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eda:	2301      	movs	r3, #1
 8002edc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eea:	4619      	mov	r1, r3
 8002eec:	4818      	ldr	r0, [pc, #96]	; (8002f50 <MX_GPIO_Init+0x2ec>)
 8002eee:	f005 fae9 	bl	80084c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 8002ef2:	2310      	movs	r3, #16
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efa:	2300      	movs	r3, #0
 8002efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f02:	4619      	mov	r1, r3
 8002f04:	4811      	ldr	r0, [pc, #68]	; (8002f4c <MX_GPIO_Init+0x2e8>)
 8002f06:	f005 fadd 	bl	80084c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002f0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f10:	2302      	movs	r3, #2
 8002f12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f14:	2300      	movs	r3, #0
 8002f16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f24:	4619      	mov	r1, r3
 8002f26:	4805      	ldr	r0, [pc, #20]	; (8002f3c <MX_GPIO_Init+0x2d8>)
 8002f28:	f005 facc 	bl	80084c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f2c:	bf00      	nop
 8002f2e:	3738      	adds	r7, #56	; 0x38
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	58024400 	.word	0x58024400
 8002f38:	58021000 	.word	0x58021000
 8002f3c:	58020000 	.word	0x58020000
 8002f40:	58020800 	.word	0x58020800
 8002f44:	58020400 	.word	0x58020400
 8002f48:	58021400 	.word	0x58021400
 8002f4c:	58021800 	.word	0x58021800
 8002f50:	58020c00 	.word	0x58020c00

08002f54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f58:	b672      	cpsid	i
}
 8002f5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 8002f5c:	e7fe      	b.n	8002f5c <Error_Handler+0x8>
	...

08002f60 <MAX_M10s_msgsOff>:
bool invalidPacket[2] = {false};
int writeHead = 0;

uint8_t byte = 0;

bool MAX_M10s_msgsOff(I2C_HandleTypeDef* i2c) {
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af02      	add	r7, sp, #8
 8002f66:	6078      	str	r0, [r7, #4]
    size_t i = 0;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]
    bool ok = false;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	74fb      	strb	r3, [r7, #19]
    do {
        const char* msg = msgsOff[i];
 8002f70:	4a14      	ldr	r2, [pc, #80]	; (8002fc4 <MAX_M10s_msgsOff+0x64>)
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f78:	60fb      	str	r3, [r7, #12]
        ok = HAL_OK == HAL_I2C_Master_Transmit(i2c, MAX_M10S_I2C_ADDR, (void*)msg, strlen(msg), 100000000);
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f7fd fa28 	bl	80003d0 <strlen>
 8002f80:	4603      	mov	r3, r0
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	4a10      	ldr	r2, [pc, #64]	; (8002fc8 <MAX_M10s_msgsOff+0x68>)
 8002f86:	9200      	str	r2, [sp, #0]
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	2184      	movs	r1, #132	; 0x84
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f005 fd03 	bl	8008998 <HAL_I2C_Master_Transmit>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	bf0c      	ite	eq
 8002f98:	2301      	moveq	r3, #1
 8002f9a:	2300      	movne	r3, #0
 8002f9c:	74fb      	strb	r3, [r7, #19]
        i++;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	617b      	str	r3, [r7, #20]
        if (!msgsOff[i]) break;
 8002fa4:	4a07      	ldr	r2, [pc, #28]	; (8002fc4 <MAX_M10s_msgsOff+0x64>)
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <MAX_M10s_msgsOff+0x58>
    } while(ok);
 8002fb0:	7cfb      	ldrb	r3, [r7, #19]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1dc      	bne.n	8002f70 <MAX_M10s_msgsOff+0x10>
 8002fb6:	e000      	b.n	8002fba <MAX_M10s_msgsOff+0x5a>
        if (!msgsOff[i]) break;
 8002fb8:	bf00      	nop
    return ok;
 8002fba:	7cfb      	ldrb	r3, [r7, #19]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3718      	adds	r7, #24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	24000004 	.word	0x24000004
 8002fc8:	05f5e100 	.word	0x05f5e100

08002fcc <MAX_M10s_init>:

bool MAX_M10s_init(I2C_HandleTypeDef* i2c) {
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af02      	add	r7, sp, #8
 8002fd2:	6078      	str	r0, [r7, #4]
    HAL_Delay(100);
 8002fd4:	2064      	movs	r0, #100	; 0x64
 8002fd6:	f001 f983 	bl	80042e0 <HAL_Delay>
    CDC_Transmit_HS("We are here\n", strlen("We are here\n"));
 8002fda:	210c      	movs	r1, #12
 8002fdc:	481c      	ldr	r0, [pc, #112]	; (8003050 <MAX_M10s_init+0x84>)
 8002fde:	f014 faff 	bl	80175e0 <CDC_Transmit_HS>
    if (!MAX_M10s_check_if_exists(i2c)) return false; // @INFO: We don't see the GPS.
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f83e 	bl	8003064 <MAX_M10s_check_if_exists>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	f083 0301 	eor.w	r3, r3, #1
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <MAX_M10s_init+0x2c>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	e026      	b.n	8003046 <MAX_M10s_init+0x7a>
    HAL_Delay(100);
 8002ff8:	2064      	movs	r0, #100	; 0x64
 8002ffa:	f001 f971 	bl	80042e0 <HAL_Delay>
    CDC_Transmit_HS("We see GPS\n", strlen("We see GPS\n"));
 8002ffe:	210b      	movs	r1, #11
 8003000:	4814      	ldr	r0, [pc, #80]	; (8003054 <MAX_M10s_init+0x88>)
 8003002:	f014 faed 	bl	80175e0 <CDC_Transmit_HS>
    if (MAX_M10s_msgsOff(i2c)) return false; // @INFO: We failed to send the messages.
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7ff ffaa 	bl	8002f60 <MAX_M10s_msgsOff>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <MAX_M10s_init+0x4a>
 8003012:	2300      	movs	r3, #0
 8003014:	e017      	b.n	8003046 <MAX_M10s_init+0x7a>
    HAL_Delay(100);
 8003016:	2064      	movs	r0, #100	; 0x64
 8003018:	f001 f962 	bl	80042e0 <HAL_Delay>
    CDC_Transmit_HS("We sent message GPS\n", strlen("We sent message GPS\n"));
 800301c:	2114      	movs	r1, #20
 800301e:	480e      	ldr	r0, [pc, #56]	; (8003058 <MAX_M10s_init+0x8c>)
 8003020:	f014 fade 	bl	80175e0 <CDC_Transmit_HS>
    HAL_Delay(100);
 8003024:	2064      	movs	r0, #100	; 0x64
 8003026:	f001 f95b 	bl	80042e0 <HAL_Delay>
    // @INFO: Enable the G*RMC NMEA message.
    return HAL_OK != HAL_I2C_Master_Transmit(i2c, MAX_M10S_I2C_ADDR, (void*)enRMCMsg, strlen(enRMCMsg), 100000000);
 800302a:	4b0c      	ldr	r3, [pc, #48]	; (800305c <MAX_M10s_init+0x90>)
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	2319      	movs	r3, #25
 8003030:	4a0b      	ldr	r2, [pc, #44]	; (8003060 <MAX_M10s_init+0x94>)
 8003032:	2184      	movs	r1, #132	; 0x84
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f005 fcaf 	bl	8008998 <HAL_I2C_Master_Transmit>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	bf14      	ite	ne
 8003040:	2301      	movne	r3, #1
 8003042:	2300      	moveq	r3, #0
 8003044:	b2db      	uxtb	r3, r3
}
 8003046:	4618      	mov	r0, r3
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	0801c69c 	.word	0x0801c69c
 8003054:	0801c6ac 	.word	0x0801c6ac
 8003058:	0801c6b8 	.word	0x0801c6b8
 800305c:	05f5e100 	.word	0x05f5e100
 8003060:	0801c7e8 	.word	0x0801c7e8

08003064 <MAX_M10s_check_if_exists>:

inline NMEA_RMC MAX_M10s_getRMC() { return grmc; }

// @NOTE: This checks if MAX M10s is on the I2C bus, and returs true if so.
//        It works on my(m1cha1s) dev board so...
bool MAX_M10s_check_if_exists(I2C_HandleTypeDef* i2c) {
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
    return HAL_I2C_IsDeviceReady (i2c, MAX_M10S_I2C_ADDR, 10, 10000) == HAL_OK;
 800306c:	f242 7310 	movw	r3, #10000	; 0x2710
 8003070:	220a      	movs	r2, #10
 8003072:	2184      	movs	r1, #132	; 0x84
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f005 fd83 	bl	8008b80 <HAL_I2C_IsDeviceReady>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	bf0c      	ite	eq
 8003080:	2301      	moveq	r3, #1
 8003082:	2300      	movne	r3, #0
 8003084:	b2db      	uxtb	r3, r3
}
 8003086:	4618      	mov	r0, r3
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
	...

08003090 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003096:	4b0a      	ldr	r3, [pc, #40]	; (80030c0 <HAL_MspInit+0x30>)
 8003098:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800309c:	4a08      	ldr	r2, [pc, #32]	; (80030c0 <HAL_MspInit+0x30>)
 800309e:	f043 0302 	orr.w	r3, r3, #2
 80030a2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80030a6:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <HAL_MspInit+0x30>)
 80030a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	607b      	str	r3, [r7, #4]
 80030b2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	58024400 	.word	0x58024400

080030c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b08c      	sub	sp, #48	; 0x30
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030cc:	f107 031c 	add.w	r3, r7, #28
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	605a      	str	r2, [r3, #4]
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	60da      	str	r2, [r3, #12]
 80030da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a5d      	ldr	r2, [pc, #372]	; (8003258 <HAL_ADC_MspInit+0x194>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d159      	bne.n	800319a <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80030e6:	4b5d      	ldr	r3, [pc, #372]	; (800325c <HAL_ADC_MspInit+0x198>)
 80030e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80030ec:	4a5b      	ldr	r2, [pc, #364]	; (800325c <HAL_ADC_MspInit+0x198>)
 80030ee:	f043 0320 	orr.w	r3, r3, #32
 80030f2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80030f6:	4b59      	ldr	r3, [pc, #356]	; (800325c <HAL_ADC_MspInit+0x198>)
 80030f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80030fc:	f003 0320 	and.w	r3, r3, #32
 8003100:	61bb      	str	r3, [r7, #24]
 8003102:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003104:	4b55      	ldr	r3, [pc, #340]	; (800325c <HAL_ADC_MspInit+0x198>)
 8003106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800310a:	4a54      	ldr	r2, [pc, #336]	; (800325c <HAL_ADC_MspInit+0x198>)
 800310c:	f043 0304 	orr.w	r3, r3, #4
 8003110:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003114:	4b51      	ldr	r3, [pc, #324]	; (800325c <HAL_ADC_MspInit+0x198>)
 8003116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800311a:	f003 0304 	and.w	r3, r3, #4
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = ARM_CHECK_Pin;
 8003122:	2301      	movs	r3, #1
 8003124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003126:	2303      	movs	r3, #3
 8003128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312a:	2300      	movs	r3, #0
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 800312e:	f107 031c 	add.w	r3, r7, #28
 8003132:	4619      	mov	r1, r3
 8003134:	484a      	ldr	r0, [pc, #296]	; (8003260 <HAL_ADC_MspInit+0x19c>)
 8003136:	f005 f9c5 	bl	80084c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 800313a:	4b4a      	ldr	r3, [pc, #296]	; (8003264 <HAL_ADC_MspInit+0x1a0>)
 800313c:	4a4a      	ldr	r2, [pc, #296]	; (8003268 <HAL_ADC_MspInit+0x1a4>)
 800313e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003140:	4b48      	ldr	r3, [pc, #288]	; (8003264 <HAL_ADC_MspInit+0x1a0>)
 8003142:	2209      	movs	r2, #9
 8003144:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003146:	4b47      	ldr	r3, [pc, #284]	; (8003264 <HAL_ADC_MspInit+0x1a0>)
 8003148:	2200      	movs	r2, #0
 800314a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800314c:	4b45      	ldr	r3, [pc, #276]	; (8003264 <HAL_ADC_MspInit+0x1a0>)
 800314e:	2200      	movs	r2, #0
 8003150:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003152:	4b44      	ldr	r3, [pc, #272]	; (8003264 <HAL_ADC_MspInit+0x1a0>)
 8003154:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003158:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800315a:	4b42      	ldr	r3, [pc, #264]	; (8003264 <HAL_ADC_MspInit+0x1a0>)
 800315c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003160:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003162:	4b40      	ldr	r3, [pc, #256]	; (8003264 <HAL_ADC_MspInit+0x1a0>)
 8003164:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003168:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800316a:	4b3e      	ldr	r3, [pc, #248]	; (8003264 <HAL_ADC_MspInit+0x1a0>)
 800316c:	2200      	movs	r2, #0
 800316e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003170:	4b3c      	ldr	r3, [pc, #240]	; (8003264 <HAL_ADC_MspInit+0x1a0>)
 8003172:	2200      	movs	r2, #0
 8003174:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003176:	4b3b      	ldr	r3, [pc, #236]	; (8003264 <HAL_ADC_MspInit+0x1a0>)
 8003178:	2200      	movs	r2, #0
 800317a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800317c:	4839      	ldr	r0, [pc, #228]	; (8003264 <HAL_ADC_MspInit+0x1a0>)
 800317e:	f002 fd69 	bl	8005c54 <HAL_DMA_Init>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8003188:	f7ff fee4 	bl	8002f54 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a35      	ldr	r2, [pc, #212]	; (8003264 <HAL_ADC_MspInit+0x1a0>)
 8003190:	659a      	str	r2, [r3, #88]	; 0x58
 8003192:	4a34      	ldr	r2, [pc, #208]	; (8003264 <HAL_ADC_MspInit+0x1a0>)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003198:	e059      	b.n	800324e <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a33      	ldr	r2, [pc, #204]	; (800326c <HAL_ADC_MspInit+0x1a8>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d154      	bne.n	800324e <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80031a4:	4b2d      	ldr	r3, [pc, #180]	; (800325c <HAL_ADC_MspInit+0x198>)
 80031a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031aa:	4a2c      	ldr	r2, [pc, #176]	; (800325c <HAL_ADC_MspInit+0x198>)
 80031ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031b4:	4b29      	ldr	r3, [pc, #164]	; (800325c <HAL_ADC_MspInit+0x198>)
 80031b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031be:	613b      	str	r3, [r7, #16]
 80031c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031c2:	4b26      	ldr	r3, [pc, #152]	; (800325c <HAL_ADC_MspInit+0x198>)
 80031c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031c8:	4a24      	ldr	r2, [pc, #144]	; (800325c <HAL_ADC_MspInit+0x198>)
 80031ca:	f043 0304 	orr.w	r3, r3, #4
 80031ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031d2:	4b22      	ldr	r3, [pc, #136]	; (800325c <HAL_ADC_MspInit+0x198>)
 80031d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80031e0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80031e4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80031e8:	f001 f89e 	bl	8004328 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 80031ec:	4b20      	ldr	r3, [pc, #128]	; (8003270 <HAL_ADC_MspInit+0x1ac>)
 80031ee:	4a21      	ldr	r2, [pc, #132]	; (8003274 <HAL_ADC_MspInit+0x1b0>)
 80031f0:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80031f2:	4b1f      	ldr	r3, [pc, #124]	; (8003270 <HAL_ADC_MspInit+0x1ac>)
 80031f4:	2273      	movs	r2, #115	; 0x73
 80031f6:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031f8:	4b1d      	ldr	r3, [pc, #116]	; (8003270 <HAL_ADC_MspInit+0x1ac>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80031fe:	4b1c      	ldr	r3, [pc, #112]	; (8003270 <HAL_ADC_MspInit+0x1ac>)
 8003200:	2200      	movs	r2, #0
 8003202:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003204:	4b1a      	ldr	r3, [pc, #104]	; (8003270 <HAL_ADC_MspInit+0x1ac>)
 8003206:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800320a:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800320c:	4b18      	ldr	r3, [pc, #96]	; (8003270 <HAL_ADC_MspInit+0x1ac>)
 800320e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003212:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003214:	4b16      	ldr	r3, [pc, #88]	; (8003270 <HAL_ADC_MspInit+0x1ac>)
 8003216:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800321a:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800321c:	4b14      	ldr	r3, [pc, #80]	; (8003270 <HAL_ADC_MspInit+0x1ac>)
 800321e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003222:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003224:	4b12      	ldr	r3, [pc, #72]	; (8003270 <HAL_ADC_MspInit+0x1ac>)
 8003226:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800322a:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800322c:	4b10      	ldr	r3, [pc, #64]	; (8003270 <HAL_ADC_MspInit+0x1ac>)
 800322e:	2200      	movs	r2, #0
 8003230:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8003232:	480f      	ldr	r0, [pc, #60]	; (8003270 <HAL_ADC_MspInit+0x1ac>)
 8003234:	f002 fd0e 	bl	8005c54 <HAL_DMA_Init>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 800323e:	f7ff fe89 	bl	8002f54 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a0a      	ldr	r2, [pc, #40]	; (8003270 <HAL_ADC_MspInit+0x1ac>)
 8003246:	659a      	str	r2, [r3, #88]	; 0x58
 8003248:	4a09      	ldr	r2, [pc, #36]	; (8003270 <HAL_ADC_MspInit+0x1ac>)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800324e:	bf00      	nop
 8003250:	3730      	adds	r7, #48	; 0x30
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40022000 	.word	0x40022000
 800325c:	58024400 	.word	0x58024400
 8003260:	58020800 	.word	0x58020800
 8003264:	24000ce0 	.word	0x24000ce0
 8003268:	40020088 	.word	0x40020088
 800326c:	58026000 	.word	0x58026000
 8003270:	24000d58 	.word	0x24000d58
 8003274:	400204b8 	.word	0x400204b8

08003278 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b0b8      	sub	sp, #224	; 0xe0
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003280:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	605a      	str	r2, [r3, #4]
 800328a:	609a      	str	r2, [r3, #8]
 800328c:	60da      	str	r2, [r3, #12]
 800328e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003290:	f107 0310 	add.w	r3, r7, #16
 8003294:	22b8      	movs	r2, #184	; 0xb8
 8003296:	2100      	movs	r1, #0
 8003298:	4618      	mov	r0, r3
 800329a:	f015 fd58 	bl	8018d4e <memset>
  if(hfdcan->Instance==FDCAN3)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a26      	ldr	r2, [pc, #152]	; (800333c <HAL_FDCAN_MspInit+0xc4>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d144      	bne.n	8003332 <HAL_FDCAN_MspInit+0xba>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80032a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80032ac:	f04f 0300 	mov.w	r3, #0
 80032b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80032b4:	2300      	movs	r3, #0
 80032b6:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032b8:	f107 0310 	add.w	r3, r7, #16
 80032bc:	4618      	mov	r0, r3
 80032be:	f008 fafb 	bl	800b8b8 <HAL_RCCEx_PeriphCLKConfig>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <HAL_FDCAN_MspInit+0x54>
    {
      Error_Handler();
 80032c8:	f7ff fe44 	bl	8002f54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80032cc:	4b1c      	ldr	r3, [pc, #112]	; (8003340 <HAL_FDCAN_MspInit+0xc8>)
 80032ce:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80032d2:	4a1b      	ldr	r2, [pc, #108]	; (8003340 <HAL_FDCAN_MspInit+0xc8>)
 80032d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80032dc:	4b18      	ldr	r3, [pc, #96]	; (8003340 <HAL_FDCAN_MspInit+0xc8>)
 80032de:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80032e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80032ea:	4b15      	ldr	r3, [pc, #84]	; (8003340 <HAL_FDCAN_MspInit+0xc8>)
 80032ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032f0:	4a13      	ldr	r2, [pc, #76]	; (8003340 <HAL_FDCAN_MspInit+0xc8>)
 80032f2:	f043 0320 	orr.w	r3, r3, #32
 80032f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032fa:	4b11      	ldr	r3, [pc, #68]	; (8003340 <HAL_FDCAN_MspInit+0xc8>)
 80032fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003300:	f003 0320 	and.w	r3, r3, #32
 8003304:	60bb      	str	r3, [r7, #8]
 8003306:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003308:	23c0      	movs	r3, #192	; 0xc0
 800330a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330e:	2302      	movs	r3, #2
 8003310:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003314:	2300      	movs	r3, #0
 8003316:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800331a:	2300      	movs	r3, #0
 800331c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8003320:	2302      	movs	r3, #2
 8003322:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003326:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800332a:	4619      	mov	r1, r3
 800332c:	4805      	ldr	r0, [pc, #20]	; (8003344 <HAL_FDCAN_MspInit+0xcc>)
 800332e:	f005 f8c9 	bl	80084c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8003332:	bf00      	nop
 8003334:	37e0      	adds	r7, #224	; 0xe0
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	4000d400 	.word	0x4000d400
 8003340:	58024400 	.word	0x58024400
 8003344:	58021400 	.word	0x58021400

08003348 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b0b8      	sub	sp, #224	; 0xe0
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003350:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	605a      	str	r2, [r3, #4]
 800335a:	609a      	str	r2, [r3, #8]
 800335c:	60da      	str	r2, [r3, #12]
 800335e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003360:	f107 0310 	add.w	r3, r7, #16
 8003364:	22b8      	movs	r2, #184	; 0xb8
 8003366:	2100      	movs	r1, #0
 8003368:	4618      	mov	r0, r3
 800336a:	f015 fcf0 	bl	8018d4e <memset>
  if(hi2c->Instance==I2C2)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a2a      	ldr	r2, [pc, #168]	; (800341c <HAL_I2C_MspInit+0xd4>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d14d      	bne.n	8003414 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003378:	f04f 0208 	mov.w	r2, #8
 800337c:	f04f 0300 	mov.w	r3, #0
 8003380:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8003384:	2300      	movs	r3, #0
 8003386:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800338a:	f107 0310 	add.w	r3, r7, #16
 800338e:	4618      	mov	r0, r3
 8003390:	f008 fa92 	bl	800b8b8 <HAL_RCCEx_PeriphCLKConfig>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800339a:	f7ff fddb 	bl	8002f54 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800339e:	4b20      	ldr	r3, [pc, #128]	; (8003420 <HAL_I2C_MspInit+0xd8>)
 80033a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033a4:	4a1e      	ldr	r2, [pc, #120]	; (8003420 <HAL_I2C_MspInit+0xd8>)
 80033a6:	f043 0320 	orr.w	r3, r3, #32
 80033aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033ae:	4b1c      	ldr	r3, [pc, #112]	; (8003420 <HAL_I2C_MspInit+0xd8>)
 80033b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033b4:	f003 0320 	and.w	r3, r3, #32
 80033b8:	60fb      	str	r3, [r7, #12]
 80033ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80033bc:	2303      	movs	r3, #3
 80033be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033c2:	2312      	movs	r3, #18
 80033c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c8:	2300      	movs	r3, #0
 80033ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ce:	2300      	movs	r3, #0
 80033d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80033d4:	2304      	movs	r3, #4
 80033d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80033da:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80033de:	4619      	mov	r1, r3
 80033e0:	4810      	ldr	r0, [pc, #64]	; (8003424 <HAL_I2C_MspInit+0xdc>)
 80033e2:	f005 f86f 	bl	80084c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80033e6:	4b0e      	ldr	r3, [pc, #56]	; (8003420 <HAL_I2C_MspInit+0xd8>)
 80033e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033ec:	4a0c      	ldr	r2, [pc, #48]	; (8003420 <HAL_I2C_MspInit+0xd8>)
 80033ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80033f6:	4b0a      	ldr	r3, [pc, #40]	; (8003420 <HAL_I2C_MspInit+0xd8>)
 80033f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003400:	60bb      	str	r3, [r7, #8]
 8003402:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8003404:	2200      	movs	r2, #0
 8003406:	2101      	movs	r1, #1
 8003408:	2021      	movs	r0, #33	; 0x21
 800340a:	f002 fbee 	bl	8005bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800340e:	2021      	movs	r0, #33	; 0x21
 8003410:	f002 fc05 	bl	8005c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003414:	bf00      	nop
 8003416:	37e0      	adds	r7, #224	; 0xe0
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40005800 	.word	0x40005800
 8003420:	58024400 	.word	0x58024400
 8003424:	58021400 	.word	0x58021400

08003428 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b0ba      	sub	sp, #232	; 0xe8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003430:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	605a      	str	r2, [r3, #4]
 800343a:	609a      	str	r2, [r3, #8]
 800343c:	60da      	str	r2, [r3, #12]
 800343e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003440:	f107 0318 	add.w	r3, r7, #24
 8003444:	22b8      	movs	r2, #184	; 0xb8
 8003446:	2100      	movs	r1, #0
 8003448:	4618      	mov	r0, r3
 800344a:	f015 fc80 	bl	8018d4e <memset>
  if(hsd->Instance==SDMMC2)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a5d      	ldr	r2, [pc, #372]	; (80035c8 <HAL_SD_MspInit+0x1a0>)
 8003454:	4293      	cmp	r3, r2
 8003456:	f040 80b3 	bne.w	80035c0 <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800345a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800345e:	f04f 0300 	mov.w	r3, #0
 8003462:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8003466:	2300      	movs	r3, #0
 8003468:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800346a:	f107 0318 	add.w	r3, r7, #24
 800346e:	4618      	mov	r0, r3
 8003470:	f008 fa22 	bl	800b8b8 <HAL_RCCEx_PeriphCLKConfig>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 800347a:	f7ff fd6b 	bl	8002f54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 800347e:	4b53      	ldr	r3, [pc, #332]	; (80035cc <HAL_SD_MspInit+0x1a4>)
 8003480:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003484:	4a51      	ldr	r2, [pc, #324]	; (80035cc <HAL_SD_MspInit+0x1a4>)
 8003486:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800348a:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800348e:	4b4f      	ldr	r3, [pc, #316]	; (80035cc <HAL_SD_MspInit+0x1a4>)
 8003490:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003494:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003498:	617b      	str	r3, [r7, #20]
 800349a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800349c:	4b4b      	ldr	r3, [pc, #300]	; (80035cc <HAL_SD_MspInit+0x1a4>)
 800349e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034a2:	4a4a      	ldr	r2, [pc, #296]	; (80035cc <HAL_SD_MspInit+0x1a4>)
 80034a4:	f043 0308 	orr.w	r3, r3, #8
 80034a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034ac:	4b47      	ldr	r3, [pc, #284]	; (80035cc <HAL_SD_MspInit+0x1a4>)
 80034ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	613b      	str	r3, [r7, #16]
 80034b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80034ba:	4b44      	ldr	r3, [pc, #272]	; (80035cc <HAL_SD_MspInit+0x1a4>)
 80034bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034c0:	4a42      	ldr	r2, [pc, #264]	; (80035cc <HAL_SD_MspInit+0x1a4>)
 80034c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034ca:	4b40      	ldr	r3, [pc, #256]	; (80035cc <HAL_SD_MspInit+0x1a4>)
 80034cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80034d8:	2340      	movs	r3, #64	; 0x40
 80034da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034de:	2302      	movs	r3, #2
 80034e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e4:	2300      	movs	r3, #0
 80034e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ea:	2303      	movs	r3, #3
 80034ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80034f0:	230b      	movs	r3, #11
 80034f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034f6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80034fa:	4619      	mov	r1, r3
 80034fc:	4834      	ldr	r0, [pc, #208]	; (80035d0 <HAL_SD_MspInit+0x1a8>)
 80034fe:	f004 ffe1 	bl	80084c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003502:	2380      	movs	r3, #128	; 0x80
 8003504:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003508:	2302      	movs	r3, #2
 800350a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800350e:	2301      	movs	r3, #1
 8003510:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003514:	2303      	movs	r3, #3
 8003516:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800351a:	230b      	movs	r3, #11
 800351c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003520:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003524:	4619      	mov	r1, r3
 8003526:	482a      	ldr	r0, [pc, #168]	; (80035d0 <HAL_SD_MspInit+0x1a8>)
 8003528:	f004 ffcc 	bl	80084c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800352c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003530:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003534:	2302      	movs	r3, #2
 8003536:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800353a:	2301      	movs	r3, #1
 800353c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003540:	2303      	movs	r3, #3
 8003542:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003546:	230b      	movs	r3, #11
 8003548:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800354c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003550:	4619      	mov	r1, r3
 8003552:	4820      	ldr	r0, [pc, #128]	; (80035d4 <HAL_SD_MspInit+0x1ac>)
 8003554:	f004 ffb6 	bl	80084c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003558:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800355c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003560:	2302      	movs	r3, #2
 8003562:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003566:	2300      	movs	r3, #0
 8003568:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800356c:	2303      	movs	r3, #3
 800356e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003572:	230b      	movs	r3, #11
 8003574:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003578:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800357c:	4619      	mov	r1, r3
 800357e:	4815      	ldr	r0, [pc, #84]	; (80035d4 <HAL_SD_MspInit+0x1ac>)
 8003580:	f004 ffa0 	bl	80084c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003584:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003588:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800358c:	2302      	movs	r3, #2
 800358e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003592:	2300      	movs	r3, #0
 8003594:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003598:	2303      	movs	r3, #3
 800359a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 800359e:	230a      	movs	r3, #10
 80035a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80035a4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80035a8:	4619      	mov	r1, r3
 80035aa:	480a      	ldr	r0, [pc, #40]	; (80035d4 <HAL_SD_MspInit+0x1ac>)
 80035ac:	f004 ff8a 	bl	80084c4 <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 80035b0:	2200      	movs	r2, #0
 80035b2:	2100      	movs	r1, #0
 80035b4:	207c      	movs	r0, #124	; 0x7c
 80035b6:	f002 fb18 	bl	8005bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 80035ba:	207c      	movs	r0, #124	; 0x7c
 80035bc:	f002 fb2f 	bl	8005c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 80035c0:	bf00      	nop
 80035c2:	37e8      	adds	r7, #232	; 0xe8
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	48022400 	.word	0x48022400
 80035cc:	58024400 	.word	0x58024400
 80035d0:	58020c00 	.word	0x58020c00
 80035d4:	58021800 	.word	0x58021800

080035d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b08e      	sub	sp, #56	; 0x38
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	605a      	str	r2, [r3, #4]
 80035ea:	609a      	str	r2, [r3, #8]
 80035ec:	60da      	str	r2, [r3, #12]
 80035ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a4f      	ldr	r2, [pc, #316]	; (8003734 <HAL_SPI_MspInit+0x15c>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d12e      	bne.n	8003658 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80035fa:	4b4f      	ldr	r3, [pc, #316]	; (8003738 <HAL_SPI_MspInit+0x160>)
 80035fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003600:	4a4d      	ldr	r2, [pc, #308]	; (8003738 <HAL_SPI_MspInit+0x160>)
 8003602:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003606:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800360a:	4b4b      	ldr	r3, [pc, #300]	; (8003738 <HAL_SPI_MspInit+0x160>)
 800360c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003610:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003614:	623b      	str	r3, [r7, #32]
 8003616:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003618:	4b47      	ldr	r3, [pc, #284]	; (8003738 <HAL_SPI_MspInit+0x160>)
 800361a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800361e:	4a46      	ldr	r2, [pc, #280]	; (8003738 <HAL_SPI_MspInit+0x160>)
 8003620:	f043 0301 	orr.w	r3, r3, #1
 8003624:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003628:	4b43      	ldr	r3, [pc, #268]	; (8003738 <HAL_SPI_MspInit+0x160>)
 800362a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	61fb      	str	r3, [r7, #28]
 8003634:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003636:	23e0      	movs	r3, #224	; 0xe0
 8003638:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800363a:	2302      	movs	r3, #2
 800363c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363e:	2300      	movs	r3, #0
 8003640:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003642:	2300      	movs	r3, #0
 8003644:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003646:	2305      	movs	r3, #5
 8003648:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800364a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800364e:	4619      	mov	r1, r3
 8003650:	483a      	ldr	r0, [pc, #232]	; (800373c <HAL_SPI_MspInit+0x164>)
 8003652:	f004 ff37 	bl	80084c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003656:	e068      	b.n	800372a <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a38      	ldr	r2, [pc, #224]	; (8003740 <HAL_SPI_MspInit+0x168>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d12f      	bne.n	80036c2 <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003662:	4b35      	ldr	r3, [pc, #212]	; (8003738 <HAL_SPI_MspInit+0x160>)
 8003664:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003668:	4a33      	ldr	r2, [pc, #204]	; (8003738 <HAL_SPI_MspInit+0x160>)
 800366a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800366e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003672:	4b31      	ldr	r3, [pc, #196]	; (8003738 <HAL_SPI_MspInit+0x160>)
 8003674:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003678:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800367c:	61bb      	str	r3, [r7, #24]
 800367e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003680:	4b2d      	ldr	r3, [pc, #180]	; (8003738 <HAL_SPI_MspInit+0x160>)
 8003682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003686:	4a2c      	ldr	r2, [pc, #176]	; (8003738 <HAL_SPI_MspInit+0x160>)
 8003688:	f043 0302 	orr.w	r3, r3, #2
 800368c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003690:	4b29      	ldr	r3, [pc, #164]	; (8003738 <HAL_SPI_MspInit+0x160>)
 8003692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	617b      	str	r3, [r7, #20]
 800369c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800369e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80036a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a4:	2302      	movs	r3, #2
 80036a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a8:	2300      	movs	r3, #0
 80036aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ac:	2300      	movs	r3, #0
 80036ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80036b0:	2305      	movs	r3, #5
 80036b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036b8:	4619      	mov	r1, r3
 80036ba:	4822      	ldr	r0, [pc, #136]	; (8003744 <HAL_SPI_MspInit+0x16c>)
 80036bc:	f004 ff02 	bl	80084c4 <HAL_GPIO_Init>
}
 80036c0:	e033      	b.n	800372a <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a20      	ldr	r2, [pc, #128]	; (8003748 <HAL_SPI_MspInit+0x170>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d12e      	bne.n	800372a <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80036cc:	4b1a      	ldr	r3, [pc, #104]	; (8003738 <HAL_SPI_MspInit+0x160>)
 80036ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036d2:	4a19      	ldr	r2, [pc, #100]	; (8003738 <HAL_SPI_MspInit+0x160>)
 80036d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036d8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80036dc:	4b16      	ldr	r3, [pc, #88]	; (8003738 <HAL_SPI_MspInit+0x160>)
 80036de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036e6:	613b      	str	r3, [r7, #16]
 80036e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036ea:	4b13      	ldr	r3, [pc, #76]	; (8003738 <HAL_SPI_MspInit+0x160>)
 80036ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036f0:	4a11      	ldr	r2, [pc, #68]	; (8003738 <HAL_SPI_MspInit+0x160>)
 80036f2:	f043 0304 	orr.w	r3, r3, #4
 80036f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036fa:	4b0f      	ldr	r3, [pc, #60]	; (8003738 <HAL_SPI_MspInit+0x160>)
 80036fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003708:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800370c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800370e:	2302      	movs	r3, #2
 8003710:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003712:	2300      	movs	r3, #0
 8003714:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003716:	2300      	movs	r3, #0
 8003718:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800371a:	2306      	movs	r3, #6
 800371c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800371e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003722:	4619      	mov	r1, r3
 8003724:	4809      	ldr	r0, [pc, #36]	; (800374c <HAL_SPI_MspInit+0x174>)
 8003726:	f004 fecd 	bl	80084c4 <HAL_GPIO_Init>
}
 800372a:	bf00      	nop
 800372c:	3738      	adds	r7, #56	; 0x38
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	40013000 	.word	0x40013000
 8003738:	58024400 	.word	0x58024400
 800373c:	58020000 	.word	0x58020000
 8003740:	40003800 	.word	0x40003800
 8003744:	58020400 	.word	0x58020400
 8003748:	40003c00 	.word	0x40003c00
 800374c:	58020800 	.word	0x58020800

08003750 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b08c      	sub	sp, #48	; 0x30
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003758:	f107 031c 	add.w	r3, r7, #28
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	605a      	str	r2, [r3, #4]
 8003762:	609a      	str	r2, [r3, #8]
 8003764:	60da      	str	r2, [r3, #12]
 8003766:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003770:	d15d      	bne.n	800382e <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003772:	4b8e      	ldr	r3, [pc, #568]	; (80039ac <HAL_TIM_PWM_MspInit+0x25c>)
 8003774:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003778:	4a8c      	ldr	r2, [pc, #560]	; (80039ac <HAL_TIM_PWM_MspInit+0x25c>)
 800377a:	f043 0301 	orr.w	r3, r3, #1
 800377e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003782:	4b8a      	ldr	r3, [pc, #552]	; (80039ac <HAL_TIM_PWM_MspInit+0x25c>)
 8003784:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	61bb      	str	r3, [r7, #24]
 800378e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003790:	4b86      	ldr	r3, [pc, #536]	; (80039ac <HAL_TIM_PWM_MspInit+0x25c>)
 8003792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003796:	4a85      	ldr	r2, [pc, #532]	; (80039ac <HAL_TIM_PWM_MspInit+0x25c>)
 8003798:	f043 0301 	orr.w	r3, r3, #1
 800379c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037a0:	4b82      	ldr	r3, [pc, #520]	; (80039ac <HAL_TIM_PWM_MspInit+0x25c>)
 80037a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	617b      	str	r3, [r7, #20]
 80037ac:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80037ae:	2301      	movs	r3, #1
 80037b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b2:	2302      	movs	r3, #2
 80037b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b6:	2300      	movs	r3, #0
 80037b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ba:	2300      	movs	r3, #0
 80037bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80037be:	2301      	movs	r3, #1
 80037c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037c2:	f107 031c 	add.w	r3, r7, #28
 80037c6:	4619      	mov	r1, r3
 80037c8:	4879      	ldr	r0, [pc, #484]	; (80039b0 <HAL_TIM_PWM_MspInit+0x260>)
 80037ca:	f004 fe7b 	bl	80084c4 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 80037ce:	4b79      	ldr	r3, [pc, #484]	; (80039b4 <HAL_TIM_PWM_MspInit+0x264>)
 80037d0:	4a79      	ldr	r2, [pc, #484]	; (80039b8 <HAL_TIM_PWM_MspInit+0x268>)
 80037d2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 80037d4:	4b77      	ldr	r3, [pc, #476]	; (80039b4 <HAL_TIM_PWM_MspInit+0x264>)
 80037d6:	2214      	movs	r2, #20
 80037d8:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037da:	4b76      	ldr	r3, [pc, #472]	; (80039b4 <HAL_TIM_PWM_MspInit+0x264>)
 80037dc:	2240      	movs	r2, #64	; 0x40
 80037de:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80037e0:	4b74      	ldr	r3, [pc, #464]	; (80039b4 <HAL_TIM_PWM_MspInit+0x264>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80037e6:	4b73      	ldr	r3, [pc, #460]	; (80039b4 <HAL_TIM_PWM_MspInit+0x264>)
 80037e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037ec:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80037ee:	4b71      	ldr	r3, [pc, #452]	; (80039b4 <HAL_TIM_PWM_MspInit+0x264>)
 80037f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037f4:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80037f6:	4b6f      	ldr	r3, [pc, #444]	; (80039b4 <HAL_TIM_PWM_MspInit+0x264>)
 80037f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80037fc:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 80037fe:	4b6d      	ldr	r3, [pc, #436]	; (80039b4 <HAL_TIM_PWM_MspInit+0x264>)
 8003800:	2200      	movs	r2, #0
 8003802:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003804:	4b6b      	ldr	r3, [pc, #428]	; (80039b4 <HAL_TIM_PWM_MspInit+0x264>)
 8003806:	2200      	movs	r2, #0
 8003808:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800380a:	4b6a      	ldr	r3, [pc, #424]	; (80039b4 <HAL_TIM_PWM_MspInit+0x264>)
 800380c:	2200      	movs	r2, #0
 800380e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8003810:	4868      	ldr	r0, [pc, #416]	; (80039b4 <HAL_TIM_PWM_MspInit+0x264>)
 8003812:	f002 fa1f 	bl	8005c54 <HAL_DMA_Init>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 800381c:	f7ff fb9a 	bl	8002f54 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a64      	ldr	r2, [pc, #400]	; (80039b4 <HAL_TIM_PWM_MspInit+0x264>)
 8003824:	62da      	str	r2, [r3, #44]	; 0x2c
 8003826:	4a63      	ldr	r2, [pc, #396]	; (80039b4 <HAL_TIM_PWM_MspInit+0x264>)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800382c:	e119      	b.n	8003a62 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a62      	ldr	r2, [pc, #392]	; (80039bc <HAL_TIM_PWM_MspInit+0x26c>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d16d      	bne.n	8003914 <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003838:	4b5c      	ldr	r3, [pc, #368]	; (80039ac <HAL_TIM_PWM_MspInit+0x25c>)
 800383a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800383e:	4a5b      	ldr	r2, [pc, #364]	; (80039ac <HAL_TIM_PWM_MspInit+0x25c>)
 8003840:	f043 0302 	orr.w	r3, r3, #2
 8003844:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003848:	4b58      	ldr	r3, [pc, #352]	; (80039ac <HAL_TIM_PWM_MspInit+0x25c>)
 800384a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	613b      	str	r3, [r7, #16]
 8003854:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 8003856:	4b5a      	ldr	r3, [pc, #360]	; (80039c0 <HAL_TIM_PWM_MspInit+0x270>)
 8003858:	4a5a      	ldr	r2, [pc, #360]	; (80039c4 <HAL_TIM_PWM_MspInit+0x274>)
 800385a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 800385c:	4b58      	ldr	r3, [pc, #352]	; (80039c0 <HAL_TIM_PWM_MspInit+0x270>)
 800385e:	2218      	movs	r2, #24
 8003860:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003862:	4b57      	ldr	r3, [pc, #348]	; (80039c0 <HAL_TIM_PWM_MspInit+0x270>)
 8003864:	2240      	movs	r2, #64	; 0x40
 8003866:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003868:	4b55      	ldr	r3, [pc, #340]	; (80039c0 <HAL_TIM_PWM_MspInit+0x270>)
 800386a:	2200      	movs	r2, #0
 800386c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800386e:	4b54      	ldr	r3, [pc, #336]	; (80039c0 <HAL_TIM_PWM_MspInit+0x270>)
 8003870:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003874:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003876:	4b52      	ldr	r3, [pc, #328]	; (80039c0 <HAL_TIM_PWM_MspInit+0x270>)
 8003878:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800387c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800387e:	4b50      	ldr	r3, [pc, #320]	; (80039c0 <HAL_TIM_PWM_MspInit+0x270>)
 8003880:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003884:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8003886:	4b4e      	ldr	r3, [pc, #312]	; (80039c0 <HAL_TIM_PWM_MspInit+0x270>)
 8003888:	2200      	movs	r2, #0
 800388a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800388c:	4b4c      	ldr	r3, [pc, #304]	; (80039c0 <HAL_TIM_PWM_MspInit+0x270>)
 800388e:	2200      	movs	r2, #0
 8003890:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003892:	4b4b      	ldr	r3, [pc, #300]	; (80039c0 <HAL_TIM_PWM_MspInit+0x270>)
 8003894:	2200      	movs	r2, #0
 8003896:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8003898:	4849      	ldr	r0, [pc, #292]	; (80039c0 <HAL_TIM_PWM_MspInit+0x270>)
 800389a:	f002 f9db 	bl	8005c54 <HAL_DMA_Init>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 80038a4:	f7ff fb56 	bl	8002f54 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a45      	ldr	r2, [pc, #276]	; (80039c0 <HAL_TIM_PWM_MspInit+0x270>)
 80038ac:	629a      	str	r2, [r3, #40]	; 0x28
 80038ae:	4a44      	ldr	r2, [pc, #272]	; (80039c0 <HAL_TIM_PWM_MspInit+0x270>)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 80038b4:	4b44      	ldr	r3, [pc, #272]	; (80039c8 <HAL_TIM_PWM_MspInit+0x278>)
 80038b6:	4a45      	ldr	r2, [pc, #276]	; (80039cc <HAL_TIM_PWM_MspInit+0x27c>)
 80038b8:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 80038ba:	4b43      	ldr	r3, [pc, #268]	; (80039c8 <HAL_TIM_PWM_MspInit+0x278>)
 80038bc:	2217      	movs	r2, #23
 80038be:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80038c0:	4b41      	ldr	r3, [pc, #260]	; (80039c8 <HAL_TIM_PWM_MspInit+0x278>)
 80038c2:	2240      	movs	r2, #64	; 0x40
 80038c4:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80038c6:	4b40      	ldr	r3, [pc, #256]	; (80039c8 <HAL_TIM_PWM_MspInit+0x278>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80038cc:	4b3e      	ldr	r3, [pc, #248]	; (80039c8 <HAL_TIM_PWM_MspInit+0x278>)
 80038ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038d2:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80038d4:	4b3c      	ldr	r3, [pc, #240]	; (80039c8 <HAL_TIM_PWM_MspInit+0x278>)
 80038d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80038da:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80038dc:	4b3a      	ldr	r3, [pc, #232]	; (80039c8 <HAL_TIM_PWM_MspInit+0x278>)
 80038de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80038e2:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 80038e4:	4b38      	ldr	r3, [pc, #224]	; (80039c8 <HAL_TIM_PWM_MspInit+0x278>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80038ea:	4b37      	ldr	r3, [pc, #220]	; (80039c8 <HAL_TIM_PWM_MspInit+0x278>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038f0:	4b35      	ldr	r3, [pc, #212]	; (80039c8 <HAL_TIM_PWM_MspInit+0x278>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 80038f6:	4834      	ldr	r0, [pc, #208]	; (80039c8 <HAL_TIM_PWM_MspInit+0x278>)
 80038f8:	f002 f9ac 	bl	8005c54 <HAL_DMA_Init>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 8003902:	f7ff fb27 	bl	8002f54 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a2f      	ldr	r2, [pc, #188]	; (80039c8 <HAL_TIM_PWM_MspInit+0x278>)
 800390a:	625a      	str	r2, [r3, #36]	; 0x24
 800390c:	4a2e      	ldr	r2, [pc, #184]	; (80039c8 <HAL_TIM_PWM_MspInit+0x278>)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003912:	e0a6      	b.n	8003a62 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a2d      	ldr	r2, [pc, #180]	; (80039d0 <HAL_TIM_PWM_MspInit+0x280>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d15e      	bne.n	80039dc <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800391e:	4b23      	ldr	r3, [pc, #140]	; (80039ac <HAL_TIM_PWM_MspInit+0x25c>)
 8003920:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003924:	4a21      	ldr	r2, [pc, #132]	; (80039ac <HAL_TIM_PWM_MspInit+0x25c>)
 8003926:	f043 0304 	orr.w	r3, r3, #4
 800392a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800392e:	4b1f      	ldr	r3, [pc, #124]	; (80039ac <HAL_TIM_PWM_MspInit+0x25c>)
 8003930:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 800393c:	4b25      	ldr	r3, [pc, #148]	; (80039d4 <HAL_TIM_PWM_MspInit+0x284>)
 800393e:	4a26      	ldr	r2, [pc, #152]	; (80039d8 <HAL_TIM_PWM_MspInit+0x288>)
 8003940:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 8003942:	4b24      	ldr	r3, [pc, #144]	; (80039d4 <HAL_TIM_PWM_MspInit+0x284>)
 8003944:	221f      	movs	r2, #31
 8003946:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003948:	4b22      	ldr	r3, [pc, #136]	; (80039d4 <HAL_TIM_PWM_MspInit+0x284>)
 800394a:	2240      	movs	r2, #64	; 0x40
 800394c:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800394e:	4b21      	ldr	r3, [pc, #132]	; (80039d4 <HAL_TIM_PWM_MspInit+0x284>)
 8003950:	2200      	movs	r2, #0
 8003952:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003954:	4b1f      	ldr	r3, [pc, #124]	; (80039d4 <HAL_TIM_PWM_MspInit+0x284>)
 8003956:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800395a:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800395c:	4b1d      	ldr	r3, [pc, #116]	; (80039d4 <HAL_TIM_PWM_MspInit+0x284>)
 800395e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003962:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003964:	4b1b      	ldr	r3, [pc, #108]	; (80039d4 <HAL_TIM_PWM_MspInit+0x284>)
 8003966:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800396a:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 800396c:	4b19      	ldr	r3, [pc, #100]	; (80039d4 <HAL_TIM_PWM_MspInit+0x284>)
 800396e:	2200      	movs	r2, #0
 8003970:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003972:	4b18      	ldr	r3, [pc, #96]	; (80039d4 <HAL_TIM_PWM_MspInit+0x284>)
 8003974:	2200      	movs	r2, #0
 8003976:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003978:	4b16      	ldr	r3, [pc, #88]	; (80039d4 <HAL_TIM_PWM_MspInit+0x284>)
 800397a:	2200      	movs	r2, #0
 800397c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 800397e:	4815      	ldr	r0, [pc, #84]	; (80039d4 <HAL_TIM_PWM_MspInit+0x284>)
 8003980:	f002 f968 	bl	8005c54 <HAL_DMA_Init>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 800398a:	f7ff fae3 	bl	8002f54 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a10      	ldr	r2, [pc, #64]	; (80039d4 <HAL_TIM_PWM_MspInit+0x284>)
 8003992:	62da      	str	r2, [r3, #44]	; 0x2c
 8003994:	4a0f      	ldr	r2, [pc, #60]	; (80039d4 <HAL_TIM_PWM_MspInit+0x284>)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800399a:	2200      	movs	r2, #0
 800399c:	2100      	movs	r1, #0
 800399e:	201e      	movs	r0, #30
 80039a0:	f002 f923 	bl	8005bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80039a4:	201e      	movs	r0, #30
 80039a6:	f002 f93a 	bl	8005c1e <HAL_NVIC_EnableIRQ>
}
 80039aa:	e05a      	b.n	8003a62 <HAL_TIM_PWM_MspInit+0x312>
 80039ac:	58024400 	.word	0x58024400
 80039b0:	58020000 	.word	0x58020000
 80039b4:	24001254 	.word	0x24001254
 80039b8:	40020028 	.word	0x40020028
 80039bc:	40000400 	.word	0x40000400
 80039c0:	240012cc 	.word	0x240012cc
 80039c4:	40020058 	.word	0x40020058
 80039c8:	24001344 	.word	0x24001344
 80039cc:	40020070 	.word	0x40020070
 80039d0:	40000800 	.word	0x40000800
 80039d4:	240013bc 	.word	0x240013bc
 80039d8:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a22      	ldr	r2, [pc, #136]	; (8003a6c <HAL_TIM_PWM_MspInit+0x31c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d13d      	bne.n	8003a62 <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80039e6:	4b22      	ldr	r3, [pc, #136]	; (8003a70 <HAL_TIM_PWM_MspInit+0x320>)
 80039e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039ec:	4a20      	ldr	r2, [pc, #128]	; (8003a70 <HAL_TIM_PWM_MspInit+0x320>)
 80039ee:	f043 0308 	orr.w	r3, r3, #8
 80039f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80039f6:	4b1e      	ldr	r3, [pc, #120]	; (8003a70 <HAL_TIM_PWM_MspInit+0x320>)
 80039f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039fc:	f003 0308 	and.w	r3, r3, #8
 8003a00:	60bb      	str	r3, [r7, #8]
 8003a02:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 8003a04:	4b1b      	ldr	r3, [pc, #108]	; (8003a74 <HAL_TIM_PWM_MspInit+0x324>)
 8003a06:	4a1c      	ldr	r2, [pc, #112]	; (8003a78 <HAL_TIM_PWM_MspInit+0x328>)
 8003a08:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 8003a0a:	4b1a      	ldr	r3, [pc, #104]	; (8003a74 <HAL_TIM_PWM_MspInit+0x324>)
 8003a0c:	223a      	movs	r2, #58	; 0x3a
 8003a0e:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a10:	4b18      	ldr	r3, [pc, #96]	; (8003a74 <HAL_TIM_PWM_MspInit+0x324>)
 8003a12:	2240      	movs	r2, #64	; 0x40
 8003a14:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a16:	4b17      	ldr	r3, [pc, #92]	; (8003a74 <HAL_TIM_PWM_MspInit+0x324>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8003a1c:	4b15      	ldr	r3, [pc, #84]	; (8003a74 <HAL_TIM_PWM_MspInit+0x324>)
 8003a1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a22:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003a24:	4b13      	ldr	r3, [pc, #76]	; (8003a74 <HAL_TIM_PWM_MspInit+0x324>)
 8003a26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a2a:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003a2c:	4b11      	ldr	r3, [pc, #68]	; (8003a74 <HAL_TIM_PWM_MspInit+0x324>)
 8003a2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a32:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 8003a34:	4b0f      	ldr	r3, [pc, #60]	; (8003a74 <HAL_TIM_PWM_MspInit+0x324>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8003a3a:	4b0e      	ldr	r3, [pc, #56]	; (8003a74 <HAL_TIM_PWM_MspInit+0x324>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a40:	4b0c      	ldr	r3, [pc, #48]	; (8003a74 <HAL_TIM_PWM_MspInit+0x324>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 8003a46:	480b      	ldr	r0, [pc, #44]	; (8003a74 <HAL_TIM_PWM_MspInit+0x324>)
 8003a48:	f002 f904 	bl	8005c54 <HAL_DMA_Init>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 8003a52:	f7ff fa7f 	bl	8002f54 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a06      	ldr	r2, [pc, #24]	; (8003a74 <HAL_TIM_PWM_MspInit+0x324>)
 8003a5a:	631a      	str	r2, [r3, #48]	; 0x30
 8003a5c:	4a05      	ldr	r2, [pc, #20]	; (8003a74 <HAL_TIM_PWM_MspInit+0x324>)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003a62:	bf00      	nop
 8003a64:	3730      	adds	r7, #48	; 0x30
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40000c00 	.word	0x40000c00
 8003a70:	58024400 	.word	0x58024400
 8003a74:	24001434 	.word	0x24001434
 8003a78:	40020040 	.word	0x40020040

08003a7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a0b      	ldr	r2, [pc, #44]	; (8003ab8 <HAL_TIM_Base_MspInit+0x3c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d10e      	bne.n	8003aac <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003a8e:	4b0b      	ldr	r3, [pc, #44]	; (8003abc <HAL_TIM_Base_MspInit+0x40>)
 8003a90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a94:	4a09      	ldr	r2, [pc, #36]	; (8003abc <HAL_TIM_Base_MspInit+0x40>)
 8003a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a9a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003a9e:	4b07      	ldr	r3, [pc, #28]	; (8003abc <HAL_TIM_Base_MspInit+0x40>)
 8003aa0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa8:	60fb      	str	r3, [r7, #12]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8003aac:	bf00      	nop
 8003aae:	3714      	adds	r7, #20
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	40001c00 	.word	0x40001c00
 8003abc:	58024400 	.word	0x58024400

08003ac0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b08c      	sub	sp, #48	; 0x30
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ac8:	f107 031c 	add.w	r3, r7, #28
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	605a      	str	r2, [r3, #4]
 8003ad2:	609a      	str	r2, [r3, #8]
 8003ad4:	60da      	str	r2, [r3, #12]
 8003ad6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae0:	d120      	bne.n	8003b24 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ae2:	4b52      	ldr	r3, [pc, #328]	; (8003c2c <HAL_TIM_MspPostInit+0x16c>)
 8003ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ae8:	4a50      	ldr	r2, [pc, #320]	; (8003c2c <HAL_TIM_MspPostInit+0x16c>)
 8003aea:	f043 0302 	orr.w	r3, r3, #2
 8003aee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003af2:	4b4e      	ldr	r3, [pc, #312]	; (8003c2c <HAL_TIM_MspPostInit+0x16c>)
 8003af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	61bb      	str	r3, [r7, #24]
 8003afe:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003b00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b06:	2302      	movs	r3, #2
 8003b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003b12:	2301      	movs	r3, #1
 8003b14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b16:	f107 031c 	add.w	r3, r7, #28
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	4844      	ldr	r0, [pc, #272]	; (8003c30 <HAL_TIM_MspPostInit+0x170>)
 8003b1e:	f004 fcd1 	bl	80084c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8003b22:	e07f      	b.n	8003c24 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a42      	ldr	r2, [pc, #264]	; (8003c34 <HAL_TIM_MspPostInit+0x174>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d11f      	bne.n	8003b6e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b2e:	4b3f      	ldr	r3, [pc, #252]	; (8003c2c <HAL_TIM_MspPostInit+0x16c>)
 8003b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b34:	4a3d      	ldr	r2, [pc, #244]	; (8003c2c <HAL_TIM_MspPostInit+0x16c>)
 8003b36:	f043 0302 	orr.w	r3, r3, #2
 8003b3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b3e:	4b3b      	ldr	r3, [pc, #236]	; (8003c2c <HAL_TIM_MspPostInit+0x16c>)
 8003b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	617b      	str	r3, [r7, #20]
 8003b4a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003b4c:	2330      	movs	r3, #48	; 0x30
 8003b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b50:	2302      	movs	r3, #2
 8003b52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003b54:	2302      	movs	r3, #2
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b60:	f107 031c 	add.w	r3, r7, #28
 8003b64:	4619      	mov	r1, r3
 8003b66:	4832      	ldr	r0, [pc, #200]	; (8003c30 <HAL_TIM_MspPostInit+0x170>)
 8003b68:	f004 fcac 	bl	80084c4 <HAL_GPIO_Init>
}
 8003b6c:	e05a      	b.n	8003c24 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a31      	ldr	r2, [pc, #196]	; (8003c38 <HAL_TIM_MspPostInit+0x178>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d131      	bne.n	8003bdc <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b78:	4b2c      	ldr	r3, [pc, #176]	; (8003c2c <HAL_TIM_MspPostInit+0x16c>)
 8003b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b7e:	4a2b      	ldr	r2, [pc, #172]	; (8003c2c <HAL_TIM_MspPostInit+0x16c>)
 8003b80:	f043 0308 	orr.w	r3, r3, #8
 8003b84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b88:	4b28      	ldr	r3, [pc, #160]	; (8003c2c <HAL_TIM_MspPostInit+0x16c>)
 8003b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b8e:	f003 0308 	and.w	r3, r3, #8
 8003b92:	613b      	str	r3, [r7, #16]
 8003b94:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8003b96:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8003b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003ba8:	2302      	movs	r3, #2
 8003baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003bac:	f107 031c 	add.w	r3, r7, #28
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4822      	ldr	r0, [pc, #136]	; (8003c3c <HAL_TIM_MspPostInit+0x17c>)
 8003bb4:	f004 fc86 	bl	80084c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003bb8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003bca:	2302      	movs	r3, #2
 8003bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003bce:	f107 031c 	add.w	r3, r7, #28
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	4819      	ldr	r0, [pc, #100]	; (8003c3c <HAL_TIM_MspPostInit+0x17c>)
 8003bd6:	f004 fc75 	bl	80084c4 <HAL_GPIO_Init>
}
 8003bda:	e023      	b.n	8003c24 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a17      	ldr	r2, [pc, #92]	; (8003c40 <HAL_TIM_MspPostInit+0x180>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d11e      	bne.n	8003c24 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003be6:	4b11      	ldr	r3, [pc, #68]	; (8003c2c <HAL_TIM_MspPostInit+0x16c>)
 8003be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bec:	4a0f      	ldr	r2, [pc, #60]	; (8003c2c <HAL_TIM_MspPostInit+0x16c>)
 8003bee:	f043 0301 	orr.w	r3, r3, #1
 8003bf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003bf6:	4b0d      	ldr	r3, [pc, #52]	; (8003c2c <HAL_TIM_MspPostInit+0x16c>)
 8003bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	60fb      	str	r3, [r7, #12]
 8003c02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003c04:	2308      	movs	r3, #8
 8003c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c08:	2302      	movs	r3, #2
 8003c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c10:	2300      	movs	r3, #0
 8003c12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003c14:	2302      	movs	r3, #2
 8003c16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c18:	f107 031c 	add.w	r3, r7, #28
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4809      	ldr	r0, [pc, #36]	; (8003c44 <HAL_TIM_MspPostInit+0x184>)
 8003c20:	f004 fc50 	bl	80084c4 <HAL_GPIO_Init>
}
 8003c24:	bf00      	nop
 8003c26:	3730      	adds	r7, #48	; 0x30
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	58024400 	.word	0x58024400
 8003c30:	58020400 	.word	0x58020400
 8003c34:	40000400 	.word	0x40000400
 8003c38:	40000800 	.word	0x40000800
 8003c3c:	58020c00 	.word	0x58020c00
 8003c40:	40000c00 	.word	0x40000c00
 8003c44:	58020000 	.word	0x58020000

08003c48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b0ba      	sub	sp, #232	; 0xe8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c50:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003c54:	2200      	movs	r2, #0
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	605a      	str	r2, [r3, #4]
 8003c5a:	609a      	str	r2, [r3, #8]
 8003c5c:	60da      	str	r2, [r3, #12]
 8003c5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003c60:	f107 0318 	add.w	r3, r7, #24
 8003c64:	22b8      	movs	r2, #184	; 0xb8
 8003c66:	2100      	movs	r1, #0
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f015 f870 	bl	8018d4e <memset>
  if(huart->Instance==UART4)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a4d      	ldr	r2, [pc, #308]	; (8003da8 <HAL_UART_MspInit+0x160>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d147      	bne.n	8003d08 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003c78:	f04f 0202 	mov.w	r2, #2
 8003c7c:	f04f 0300 	mov.w	r3, #0
 8003c80:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003c84:	2300      	movs	r3, #0
 8003c86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c8a:	f107 0318 	add.w	r3, r7, #24
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f007 fe12 	bl	800b8b8 <HAL_RCCEx_PeriphCLKConfig>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003c9a:	f7ff f95b 	bl	8002f54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003c9e:	4b43      	ldr	r3, [pc, #268]	; (8003dac <HAL_UART_MspInit+0x164>)
 8003ca0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ca4:	4a41      	ldr	r2, [pc, #260]	; (8003dac <HAL_UART_MspInit+0x164>)
 8003ca6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003caa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003cae:	4b3f      	ldr	r3, [pc, #252]	; (8003dac <HAL_UART_MspInit+0x164>)
 8003cb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003cb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cb8:	617b      	str	r3, [r7, #20]
 8003cba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cbc:	4b3b      	ldr	r3, [pc, #236]	; (8003dac <HAL_UART_MspInit+0x164>)
 8003cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cc2:	4a3a      	ldr	r2, [pc, #232]	; (8003dac <HAL_UART_MspInit+0x164>)
 8003cc4:	f043 0302 	orr.w	r3, r3, #2
 8003cc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ccc:	4b37      	ldr	r3, [pc, #220]	; (8003dac <HAL_UART_MspInit+0x164>)
 8003cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	613b      	str	r3, [r7, #16]
 8003cd8:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003cda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003cde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003cf4:	2308      	movs	r3, #8
 8003cf6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cfa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003cfe:	4619      	mov	r1, r3
 8003d00:	482b      	ldr	r0, [pc, #172]	; (8003db0 <HAL_UART_MspInit+0x168>)
 8003d02:	f004 fbdf 	bl	80084c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003d06:	e04a      	b.n	8003d9e <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a29      	ldr	r2, [pc, #164]	; (8003db4 <HAL_UART_MspInit+0x16c>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d145      	bne.n	8003d9e <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003d12:	f04f 0201 	mov.w	r2, #1
 8003d16:	f04f 0300 	mov.w	r3, #0
 8003d1a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d24:	f107 0318 	add.w	r3, r7, #24
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f007 fdc5 	bl	800b8b8 <HAL_RCCEx_PeriphCLKConfig>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8003d34:	f7ff f90e 	bl	8002f54 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003d38:	4b1c      	ldr	r3, [pc, #112]	; (8003dac <HAL_UART_MspInit+0x164>)
 8003d3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d3e:	4a1b      	ldr	r2, [pc, #108]	; (8003dac <HAL_UART_MspInit+0x164>)
 8003d40:	f043 0320 	orr.w	r3, r3, #32
 8003d44:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003d48:	4b18      	ldr	r3, [pc, #96]	; (8003dac <HAL_UART_MspInit+0x164>)
 8003d4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d4e:	f003 0320 	and.w	r3, r3, #32
 8003d52:	60fb      	str	r3, [r7, #12]
 8003d54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d56:	4b15      	ldr	r3, [pc, #84]	; (8003dac <HAL_UART_MspInit+0x164>)
 8003d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d5c:	4a13      	ldr	r2, [pc, #76]	; (8003dac <HAL_UART_MspInit+0x164>)
 8003d5e:	f043 0304 	orr.w	r3, r3, #4
 8003d62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d66:	4b11      	ldr	r3, [pc, #68]	; (8003dac <HAL_UART_MspInit+0x164>)
 8003d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	60bb      	str	r3, [r7, #8]
 8003d72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d74:	23c0      	movs	r3, #192	; 0xc0
 8003d76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d80:	2300      	movs	r3, #0
 8003d82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d86:	2300      	movs	r3, #0
 8003d88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8003d8c:	2307      	movs	r3, #7
 8003d8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d92:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003d96:	4619      	mov	r1, r3
 8003d98:	4807      	ldr	r0, [pc, #28]	; (8003db8 <HAL_UART_MspInit+0x170>)
 8003d9a:	f004 fb93 	bl	80084c4 <HAL_GPIO_Init>
}
 8003d9e:	bf00      	nop
 8003da0:	37e8      	adds	r7, #232	; 0xe8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	40004c00 	.word	0x40004c00
 8003dac:	58024400 	.word	0x58024400
 8003db0:	58020400 	.word	0x58020400
 8003db4:	40011400 	.word	0x40011400
 8003db8:	58020800 	.word	0x58020800

08003dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003dc0:	e7fe      	b.n	8003dc0 <NMI_Handler+0x4>

08003dc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003dc6:	e7fe      	b.n	8003dc6 <HardFault_Handler+0x4>

08003dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003dcc:	e7fe      	b.n	8003dcc <MemManage_Handler+0x4>

08003dce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003dd2:	e7fe      	b.n	8003dd2 <BusFault_Handler+0x4>

08003dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003dd8:	e7fe      	b.n	8003dd8 <UsageFault_Handler+0x4>

08003dda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003dde:	bf00      	nop
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003dec:	bf00      	nop
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003df6:	b480      	push	{r7}
 8003df8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003dfa:	bf00      	nop
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e08:	f000 fa4a 	bl	80042a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e0c:	bf00      	nop
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8003e14:	4802      	ldr	r0, [pc, #8]	; (8003e20 <DMA1_Stream0_IRQHandler+0x10>)
 8003e16:	f002 fcdf 	bl	80067d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003e1a:	bf00      	nop
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	240013bc 	.word	0x240013bc

08003e24 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8003e28:	4802      	ldr	r0, [pc, #8]	; (8003e34 <DMA1_Stream1_IRQHandler+0x10>)
 8003e2a:	f002 fcd5 	bl	80067d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003e2e:	bf00      	nop
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	24001254 	.word	0x24001254

08003e38 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8003e3c:	4802      	ldr	r0, [pc, #8]	; (8003e48 <DMA1_Stream2_IRQHandler+0x10>)
 8003e3e:	f002 fccb 	bl	80067d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003e42:	bf00      	nop
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	24001434 	.word	0x24001434

08003e4c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003e50:	4802      	ldr	r0, [pc, #8]	; (8003e5c <DMA1_Stream3_IRQHandler+0x10>)
 8003e52:	f002 fcc1 	bl	80067d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003e56:	bf00      	nop
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	240012cc 	.word	0x240012cc

08003e60 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8003e64:	4802      	ldr	r0, [pc, #8]	; (8003e70 <DMA1_Stream4_IRQHandler+0x10>)
 8003e66:	f002 fcb7 	bl	80067d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003e6a:	bf00      	nop
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	24001344 	.word	0x24001344

08003e74 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003e78:	4802      	ldr	r0, [pc, #8]	; (8003e84 <DMA1_Stream5_IRQHandler+0x10>)
 8003e7a:	f002 fcad 	bl	80067d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003e7e:	bf00      	nop
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	24000ce0 	.word	0x24000ce0

08003e88 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003e8c:	4802      	ldr	r0, [pc, #8]	; (8003e98 <TIM4_IRQHandler+0x10>)
 8003e8e:	f00c fdd9 	bl	8010a44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003e92:	bf00      	nop
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	24001170 	.word	0x24001170

08003e9c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003ea0:	4802      	ldr	r0, [pc, #8]	; (8003eac <I2C2_EV_IRQHandler+0x10>)
 8003ea2:	f004 ff75 	bl	8008d90 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003ea6:	bf00      	nop
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	24000e70 	.word	0x24000e70

08003eb0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003eb4:	4802      	ldr	r0, [pc, #8]	; (8003ec0 <DMA2_Stream7_IRQHandler+0x10>)
 8003eb6:	f002 fc8f 	bl	80067d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003eba:	bf00      	nop
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	24000d58 	.word	0x24000d58

08003ec4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003ec8:	4802      	ldr	r0, [pc, #8]	; (8003ed4 <OTG_HS_IRQHandler+0x10>)
 8003eca:	f005 fb7b 	bl	80095c4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8003ece:	bf00      	nop
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	24002b04 	.word	0x24002b04

08003ed8 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8003edc:	4802      	ldr	r0, [pc, #8]	; (8003ee8 <SDMMC2_IRQHandler+0x10>)
 8003ede:	f00a fb41 	bl	800e564 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 8003ee2:	bf00      	nop
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	24000ec4 	.word	0x24000ec4

08003eec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  return 1;
 8003ef0:	2301      	movs	r3, #1
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <_kill>:

int _kill(int pid, int sig)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003f06:	f014 ff75 	bl	8018df4 <__errno>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2216      	movs	r2, #22
 8003f0e:	601a      	str	r2, [r3, #0]
  return -1;
 8003f10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <_exit>:

void _exit (int status)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003f24:	f04f 31ff 	mov.w	r1, #4294967295
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7ff ffe7 	bl	8003efc <_kill>
  while (1) {}    /* Make sure we hang here */
 8003f2e:	e7fe      	b.n	8003f2e <_exit+0x12>

08003f30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	e00a      	b.n	8003f58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003f42:	f3af 8000 	nop.w
 8003f46:	4601      	mov	r1, r0
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	1c5a      	adds	r2, r3, #1
 8003f4c:	60ba      	str	r2, [r7, #8]
 8003f4e:	b2ca      	uxtb	r2, r1
 8003f50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	3301      	adds	r3, #1
 8003f56:	617b      	str	r3, [r7, #20]
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	dbf0      	blt.n	8003f42 <_read+0x12>
  }

  return len;
 8003f60:	687b      	ldr	r3, [r7, #4]
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3718      	adds	r7, #24
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b086      	sub	sp, #24
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	60f8      	str	r0, [r7, #12]
 8003f72:	60b9      	str	r1, [r7, #8]
 8003f74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f76:	2300      	movs	r3, #0
 8003f78:	617b      	str	r3, [r7, #20]
 8003f7a:	e009      	b.n	8003f90 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	1c5a      	adds	r2, r3, #1
 8003f80:	60ba      	str	r2, [r7, #8]
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	617b      	str	r3, [r7, #20]
 8003f90:	697a      	ldr	r2, [r7, #20]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	dbf1      	blt.n	8003f7c <_write+0x12>
  }
  return len;
 8003f98:	687b      	ldr	r3, [r7, #4]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3718      	adds	r7, #24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <_close>:

int _close(int file)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003faa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b083      	sub	sp, #12
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
 8003fc2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003fca:	605a      	str	r2, [r3, #4]
  return 0;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <_isatty>:

int _isatty(int file)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003fe2:	2301      	movs	r3, #1
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
	...

0800400c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004014:	4a14      	ldr	r2, [pc, #80]	; (8004068 <_sbrk+0x5c>)
 8004016:	4b15      	ldr	r3, [pc, #84]	; (800406c <_sbrk+0x60>)
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004020:	4b13      	ldr	r3, [pc, #76]	; (8004070 <_sbrk+0x64>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d102      	bne.n	800402e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004028:	4b11      	ldr	r3, [pc, #68]	; (8004070 <_sbrk+0x64>)
 800402a:	4a12      	ldr	r2, [pc, #72]	; (8004074 <_sbrk+0x68>)
 800402c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800402e:	4b10      	ldr	r3, [pc, #64]	; (8004070 <_sbrk+0x64>)
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4413      	add	r3, r2
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	429a      	cmp	r2, r3
 800403a:	d207      	bcs.n	800404c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800403c:	f014 feda 	bl	8018df4 <__errno>
 8004040:	4603      	mov	r3, r0
 8004042:	220c      	movs	r2, #12
 8004044:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004046:	f04f 33ff 	mov.w	r3, #4294967295
 800404a:	e009      	b.n	8004060 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800404c:	4b08      	ldr	r3, [pc, #32]	; (8004070 <_sbrk+0x64>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004052:	4b07      	ldr	r3, [pc, #28]	; (8004070 <_sbrk+0x64>)
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4413      	add	r3, r2
 800405a:	4a05      	ldr	r2, [pc, #20]	; (8004070 <_sbrk+0x64>)
 800405c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800405e:	68fb      	ldr	r3, [r7, #12]
}
 8004060:	4618      	mov	r0, r3
 8004062:	3718      	adds	r7, #24
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	24050000 	.word	0x24050000
 800406c:	00000800 	.word	0x00000800
 8004070:	24001600 	.word	0x24001600
 8004074:	24003380 	.word	0x24003380

08004078 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004078:	b480      	push	{r7}
 800407a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800407c:	4b32      	ldr	r3, [pc, #200]	; (8004148 <SystemInit+0xd0>)
 800407e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004082:	4a31      	ldr	r2, [pc, #196]	; (8004148 <SystemInit+0xd0>)
 8004084:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004088:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800408c:	4b2f      	ldr	r3, [pc, #188]	; (800414c <SystemInit+0xd4>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 030f 	and.w	r3, r3, #15
 8004094:	2b06      	cmp	r3, #6
 8004096:	d807      	bhi.n	80040a8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004098:	4b2c      	ldr	r3, [pc, #176]	; (800414c <SystemInit+0xd4>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f023 030f 	bic.w	r3, r3, #15
 80040a0:	4a2a      	ldr	r2, [pc, #168]	; (800414c <SystemInit+0xd4>)
 80040a2:	f043 0307 	orr.w	r3, r3, #7
 80040a6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80040a8:	4b29      	ldr	r3, [pc, #164]	; (8004150 <SystemInit+0xd8>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a28      	ldr	r2, [pc, #160]	; (8004150 <SystemInit+0xd8>)
 80040ae:	f043 0301 	orr.w	r3, r3, #1
 80040b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80040b4:	4b26      	ldr	r3, [pc, #152]	; (8004150 <SystemInit+0xd8>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80040ba:	4b25      	ldr	r3, [pc, #148]	; (8004150 <SystemInit+0xd8>)
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	4924      	ldr	r1, [pc, #144]	; (8004150 <SystemInit+0xd8>)
 80040c0:	4b24      	ldr	r3, [pc, #144]	; (8004154 <SystemInit+0xdc>)
 80040c2:	4013      	ands	r3, r2
 80040c4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80040c6:	4b21      	ldr	r3, [pc, #132]	; (800414c <SystemInit+0xd4>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d007      	beq.n	80040e2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80040d2:	4b1e      	ldr	r3, [pc, #120]	; (800414c <SystemInit+0xd4>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f023 030f 	bic.w	r3, r3, #15
 80040da:	4a1c      	ldr	r2, [pc, #112]	; (800414c <SystemInit+0xd4>)
 80040dc:	f043 0307 	orr.w	r3, r3, #7
 80040e0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80040e2:	4b1b      	ldr	r3, [pc, #108]	; (8004150 <SystemInit+0xd8>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80040e8:	4b19      	ldr	r3, [pc, #100]	; (8004150 <SystemInit+0xd8>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80040ee:	4b18      	ldr	r3, [pc, #96]	; (8004150 <SystemInit+0xd8>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80040f4:	4b16      	ldr	r3, [pc, #88]	; (8004150 <SystemInit+0xd8>)
 80040f6:	4a18      	ldr	r2, [pc, #96]	; (8004158 <SystemInit+0xe0>)
 80040f8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80040fa:	4b15      	ldr	r3, [pc, #84]	; (8004150 <SystemInit+0xd8>)
 80040fc:	4a17      	ldr	r2, [pc, #92]	; (800415c <SystemInit+0xe4>)
 80040fe:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004100:	4b13      	ldr	r3, [pc, #76]	; (8004150 <SystemInit+0xd8>)
 8004102:	4a17      	ldr	r2, [pc, #92]	; (8004160 <SystemInit+0xe8>)
 8004104:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004106:	4b12      	ldr	r3, [pc, #72]	; (8004150 <SystemInit+0xd8>)
 8004108:	2200      	movs	r2, #0
 800410a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800410c:	4b10      	ldr	r3, [pc, #64]	; (8004150 <SystemInit+0xd8>)
 800410e:	4a14      	ldr	r2, [pc, #80]	; (8004160 <SystemInit+0xe8>)
 8004110:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004112:	4b0f      	ldr	r3, [pc, #60]	; (8004150 <SystemInit+0xd8>)
 8004114:	2200      	movs	r2, #0
 8004116:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004118:	4b0d      	ldr	r3, [pc, #52]	; (8004150 <SystemInit+0xd8>)
 800411a:	4a11      	ldr	r2, [pc, #68]	; (8004160 <SystemInit+0xe8>)
 800411c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800411e:	4b0c      	ldr	r3, [pc, #48]	; (8004150 <SystemInit+0xd8>)
 8004120:	2200      	movs	r2, #0
 8004122:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004124:	4b0a      	ldr	r3, [pc, #40]	; (8004150 <SystemInit+0xd8>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a09      	ldr	r2, [pc, #36]	; (8004150 <SystemInit+0xd8>)
 800412a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800412e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004130:	4b07      	ldr	r3, [pc, #28]	; (8004150 <SystemInit+0xd8>)
 8004132:	2200      	movs	r2, #0
 8004134:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004136:	4b0b      	ldr	r3, [pc, #44]	; (8004164 <SystemInit+0xec>)
 8004138:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800413c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800413e:	bf00      	nop
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr
 8004148:	e000ed00 	.word	0xe000ed00
 800414c:	52002000 	.word	0x52002000
 8004150:	58024400 	.word	0x58024400
 8004154:	eaf6ed7f 	.word	0xeaf6ed7f
 8004158:	02020200 	.word	0x02020200
 800415c:	01ff0000 	.word	0x01ff0000
 8004160:	01010280 	.word	0x01010280
 8004164:	52004000 	.word	0x52004000

08004168 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004168:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800416c:	f7ff ff84 	bl	8004078 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004170:	480c      	ldr	r0, [pc, #48]	; (80041a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004172:	490d      	ldr	r1, [pc, #52]	; (80041a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004174:	4a0d      	ldr	r2, [pc, #52]	; (80041ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004178:	e002      	b.n	8004180 <LoopCopyDataInit>

0800417a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800417a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800417c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800417e:	3304      	adds	r3, #4

08004180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004184:	d3f9      	bcc.n	800417a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004186:	4a0a      	ldr	r2, [pc, #40]	; (80041b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004188:	4c0a      	ldr	r4, [pc, #40]	; (80041b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800418a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800418c:	e001      	b.n	8004192 <LoopFillZerobss>

0800418e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800418e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004190:	3204      	adds	r2, #4

08004192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004194:	d3fb      	bcc.n	800418e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004196:	f014 fe33 	bl	8018e00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800419a:	f7fd fd6d 	bl	8001c78 <main>
  bx  lr
 800419e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80041a0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80041a4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80041a8:	240002f4 	.word	0x240002f4
  ldr r2, =_sidata
 80041ac:	0801cc90 	.word	0x0801cc90
  ldr r2, =_sbss
 80041b0:	240002f4 	.word	0x240002f4
  ldr r4, =_ebss
 80041b4:	2400337c 	.word	0x2400337c

080041b8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80041b8:	e7fe      	b.n	80041b8 <ADC3_IRQHandler>
	...

080041bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041c2:	2003      	movs	r0, #3
 80041c4:	f001 fd06 	bl	8005bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80041c8:	f007 f9a0 	bl	800b50c <HAL_RCC_GetSysClockFreq>
 80041cc:	4602      	mov	r2, r0
 80041ce:	4b15      	ldr	r3, [pc, #84]	; (8004224 <HAL_Init+0x68>)
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	0a1b      	lsrs	r3, r3, #8
 80041d4:	f003 030f 	and.w	r3, r3, #15
 80041d8:	4913      	ldr	r1, [pc, #76]	; (8004228 <HAL_Init+0x6c>)
 80041da:	5ccb      	ldrb	r3, [r1, r3]
 80041dc:	f003 031f 	and.w	r3, r3, #31
 80041e0:	fa22 f303 	lsr.w	r3, r2, r3
 80041e4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041e6:	4b0f      	ldr	r3, [pc, #60]	; (8004224 <HAL_Init+0x68>)
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	f003 030f 	and.w	r3, r3, #15
 80041ee:	4a0e      	ldr	r2, [pc, #56]	; (8004228 <HAL_Init+0x6c>)
 80041f0:	5cd3      	ldrb	r3, [r2, r3]
 80041f2:	f003 031f 	and.w	r3, r3, #31
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	fa22 f303 	lsr.w	r3, r2, r3
 80041fc:	4a0b      	ldr	r2, [pc, #44]	; (800422c <HAL_Init+0x70>)
 80041fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004200:	4a0b      	ldr	r2, [pc, #44]	; (8004230 <HAL_Init+0x74>)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004206:	200f      	movs	r0, #15
 8004208:	f000 f814 	bl	8004234 <HAL_InitTick>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e002      	b.n	800421c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004216:	f7fe ff3b 	bl	8003090 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3708      	adds	r7, #8
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	58024400 	.word	0x58024400
 8004228:	0801c804 	.word	0x0801c804
 800422c:	24000030 	.word	0x24000030
 8004230:	2400002c 	.word	0x2400002c

08004234 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800423c:	4b15      	ldr	r3, [pc, #84]	; (8004294 <HAL_InitTick+0x60>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e021      	b.n	800428c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004248:	4b13      	ldr	r3, [pc, #76]	; (8004298 <HAL_InitTick+0x64>)
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	4b11      	ldr	r3, [pc, #68]	; (8004294 <HAL_InitTick+0x60>)
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	4619      	mov	r1, r3
 8004252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004256:	fbb3 f3f1 	udiv	r3, r3, r1
 800425a:	fbb2 f3f3 	udiv	r3, r2, r3
 800425e:	4618      	mov	r0, r3
 8004260:	f001 fceb 	bl	8005c3a <HAL_SYSTICK_Config>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e00e      	b.n	800428c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b0f      	cmp	r3, #15
 8004272:	d80a      	bhi.n	800428a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004274:	2200      	movs	r2, #0
 8004276:	6879      	ldr	r1, [r7, #4]
 8004278:	f04f 30ff 	mov.w	r0, #4294967295
 800427c:	f001 fcb5 	bl	8005bea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004280:	4a06      	ldr	r2, [pc, #24]	; (800429c <HAL_InitTick+0x68>)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004286:	2300      	movs	r3, #0
 8004288:	e000      	b.n	800428c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
}
 800428c:	4618      	mov	r0, r3
 800428e:	3708      	adds	r7, #8
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	24000038 	.word	0x24000038
 8004298:	2400002c 	.word	0x2400002c
 800429c:	24000034 	.word	0x24000034

080042a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80042a4:	4b06      	ldr	r3, [pc, #24]	; (80042c0 <HAL_IncTick+0x20>)
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	461a      	mov	r2, r3
 80042aa:	4b06      	ldr	r3, [pc, #24]	; (80042c4 <HAL_IncTick+0x24>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4413      	add	r3, r2
 80042b0:	4a04      	ldr	r2, [pc, #16]	; (80042c4 <HAL_IncTick+0x24>)
 80042b2:	6013      	str	r3, [r2, #0]
}
 80042b4:	bf00      	nop
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	24000038 	.word	0x24000038
 80042c4:	24001604 	.word	0x24001604

080042c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
  return uwTick;
 80042cc:	4b03      	ldr	r3, [pc, #12]	; (80042dc <HAL_GetTick+0x14>)
 80042ce:	681b      	ldr	r3, [r3, #0]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	24001604 	.word	0x24001604

080042e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042e8:	f7ff ffee 	bl	80042c8 <HAL_GetTick>
 80042ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f8:	d005      	beq.n	8004306 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042fa:	4b0a      	ldr	r3, [pc, #40]	; (8004324 <HAL_Delay+0x44>)
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	461a      	mov	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	4413      	add	r3, r2
 8004304:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004306:	bf00      	nop
 8004308:	f7ff ffde 	bl	80042c8 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	429a      	cmp	r2, r3
 8004316:	d8f7      	bhi.n	8004308 <HAL_Delay+0x28>
  {
  }
}
 8004318:	bf00      	nop
 800431a:	bf00      	nop
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	24000038 	.word	0x24000038

08004328 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8004332:	4b07      	ldr	r3, [pc, #28]	; (8004350 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	43db      	mvns	r3, r3
 800433a:	401a      	ands	r2, r3
 800433c:	4904      	ldr	r1, [pc, #16]	; (8004350 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	4313      	orrs	r3, r2
 8004342:	604b      	str	r3, [r1, #4]
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	58000400 	.word	0x58000400

08004354 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	431a      	orrs	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	609a      	str	r2, [r3, #8]
}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800437a:	b480      	push	{r7}
 800437c:	b083      	sub	sp, #12
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
 8004382:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	431a      	orrs	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	609a      	str	r2, [r3, #8]
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80043bc:	b480      	push	{r7}
 80043be:	b087      	sub	sp, #28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
 80043c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	3360      	adds	r3, #96	; 0x60
 80043ce:	461a      	mov	r2, r3
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4413      	add	r3, r2
 80043d6:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	4a10      	ldr	r2, [pc, #64]	; (800441c <LL_ADC_SetOffset+0x60>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d10b      	bne.n	80043f8 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80043f6:	e00b      	b.n	8004410 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	430b      	orrs	r3, r1
 800440a:	431a      	orrs	r2, r3
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	601a      	str	r2, [r3, #0]
}
 8004410:	bf00      	nop
 8004412:	371c      	adds	r7, #28
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr
 800441c:	58026000 	.word	0x58026000

08004420 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	3360      	adds	r3, #96	; 0x60
 800442e:	461a      	mov	r2, r3
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004440:	4618      	mov	r0, r3
 8004442:	3714      	adds	r7, #20
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f003 031f 	and.w	r3, r3, #31
 8004466:	6879      	ldr	r1, [r7, #4]
 8004468:	fa01 f303 	lsl.w	r3, r1, r3
 800446c:	431a      	orrs	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	611a      	str	r2, [r3, #16]
}
 8004472:	bf00      	nop
 8004474:	3714      	adds	r7, #20
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
	...

08004480 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004480:	b480      	push	{r7}
 8004482:	b087      	sub	sp, #28
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	4a0c      	ldr	r2, [pc, #48]	; (80044c0 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d00e      	beq.n	80044b2 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	3360      	adds	r3, #96	; 0x60
 8004498:	461a      	mov	r2, r3
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4413      	add	r3, r2
 80044a0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	431a      	orrs	r2, r3
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	601a      	str	r2, [r3, #0]
  }
}
 80044b2:	bf00      	nop
 80044b4:	371c      	adds	r7, #28
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	58026000 	.word	0x58026000

080044c4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4a0c      	ldr	r2, [pc, #48]	; (8004504 <LL_ADC_SetOffsetSaturation+0x40>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d10e      	bne.n	80044f6 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	3360      	adds	r3, #96	; 0x60
 80044dc:	461a      	mov	r2, r3
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4413      	add	r3, r2
 80044e4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	431a      	orrs	r2, r3
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80044f6:	bf00      	nop
 80044f8:	371c      	adds	r7, #28
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	58026000 	.word	0x58026000

08004508 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004508:	b480      	push	{r7}
 800450a:	b087      	sub	sp, #28
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	4a0c      	ldr	r2, [pc, #48]	; (8004548 <LL_ADC_SetOffsetSign+0x40>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d10e      	bne.n	800453a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	3360      	adds	r3, #96	; 0x60
 8004520:	461a      	mov	r2, r3
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4413      	add	r3, r2
 8004528:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	431a      	orrs	r2, r3
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800453a:	bf00      	nop
 800453c:	371c      	adds	r7, #28
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	58026000 	.word	0x58026000

0800454c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800454c:	b480      	push	{r7}
 800454e:	b087      	sub	sp, #28
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	3360      	adds	r3, #96	; 0x60
 800455c:	461a      	mov	r2, r3
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	4413      	add	r3, r2
 8004564:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	4a0c      	ldr	r2, [pc, #48]	; (800459c <LL_ADC_SetOffsetState+0x50>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d108      	bne.n	8004580 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	431a      	orrs	r2, r3
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800457e:	e007      	b.n	8004590 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	431a      	orrs	r2, r3
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	601a      	str	r2, [r3, #0]
}
 8004590:	bf00      	nop
 8004592:	371c      	adds	r7, #28
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr
 800459c:	58026000 	.word	0x58026000

080045a0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b087      	sub	sp, #28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	3330      	adds	r3, #48	; 0x30
 80045b0:	461a      	mov	r2, r3
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	0a1b      	lsrs	r3, r3, #8
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	f003 030c 	and.w	r3, r3, #12
 80045bc:	4413      	add	r3, r2
 80045be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	f003 031f 	and.w	r3, r3, #31
 80045ca:	211f      	movs	r1, #31
 80045cc:	fa01 f303 	lsl.w	r3, r1, r3
 80045d0:	43db      	mvns	r3, r3
 80045d2:	401a      	ands	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	0e9b      	lsrs	r3, r3, #26
 80045d8:	f003 011f 	and.w	r1, r3, #31
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f003 031f 	and.w	r3, r3, #31
 80045e2:	fa01 f303 	lsl.w	r3, r1, r3
 80045e6:	431a      	orrs	r2, r3
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80045ec:	bf00      	nop
 80045ee:	371c      	adds	r7, #28
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b087      	sub	sp, #28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	3314      	adds	r3, #20
 8004608:	461a      	mov	r2, r3
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	0e5b      	lsrs	r3, r3, #25
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	f003 0304 	and.w	r3, r3, #4
 8004614:	4413      	add	r3, r2
 8004616:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	0d1b      	lsrs	r3, r3, #20
 8004620:	f003 031f 	and.w	r3, r3, #31
 8004624:	2107      	movs	r1, #7
 8004626:	fa01 f303 	lsl.w	r3, r1, r3
 800462a:	43db      	mvns	r3, r3
 800462c:	401a      	ands	r2, r3
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	0d1b      	lsrs	r3, r3, #20
 8004632:	f003 031f 	and.w	r3, r3, #31
 8004636:	6879      	ldr	r1, [r7, #4]
 8004638:	fa01 f303 	lsl.w	r3, r1, r3
 800463c:	431a      	orrs	r2, r3
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004642:	bf00      	nop
 8004644:	371c      	adds	r7, #28
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
	...

08004650 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4a1a      	ldr	r2, [pc, #104]	; (80046c8 <LL_ADC_SetChannelSingleDiff+0x78>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d115      	bne.n	8004690 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004670:	43db      	mvns	r3, r3
 8004672:	401a      	ands	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f003 0318 	and.w	r3, r3, #24
 800467a:	4914      	ldr	r1, [pc, #80]	; (80046cc <LL_ADC_SetChannelSingleDiff+0x7c>)
 800467c:	40d9      	lsrs	r1, r3
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	400b      	ands	r3, r1
 8004682:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004686:	431a      	orrs	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800468e:	e014      	b.n	80046ba <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800469c:	43db      	mvns	r3, r3
 800469e:	401a      	ands	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f003 0318 	and.w	r3, r3, #24
 80046a6:	4909      	ldr	r1, [pc, #36]	; (80046cc <LL_ADC_SetChannelSingleDiff+0x7c>)
 80046a8:	40d9      	lsrs	r1, r3
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	400b      	ands	r3, r1
 80046ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046b2:	431a      	orrs	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80046ba:	bf00      	nop
 80046bc:	3714      	adds	r7, #20
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	58026000 	.word	0x58026000
 80046cc:	000fffff 	.word	0x000fffff

080046d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689a      	ldr	r2, [r3, #8]
 80046dc:	4b04      	ldr	r3, [pc, #16]	; (80046f0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80046de:	4013      	ands	r3, r2
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	6093      	str	r3, [r2, #8]
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	5fffffc0 	.word	0x5fffffc0

080046f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004704:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004708:	d101      	bne.n	800470e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800470a:	2301      	movs	r3, #1
 800470c:	e000      	b.n	8004710 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689a      	ldr	r2, [r3, #8]
 8004728:	4b05      	ldr	r3, [pc, #20]	; (8004740 <LL_ADC_EnableInternalRegulator+0x24>)
 800472a:	4013      	ands	r3, r2
 800472c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	6fffffc0 	.word	0x6fffffc0

08004744 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004754:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004758:	d101      	bne.n	800475e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800475a:	2301      	movs	r3, #1
 800475c:	e000      	b.n	8004760 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	2b01      	cmp	r3, #1
 800477e:	d101      	bne.n	8004784 <LL_ADC_IsEnabled+0x18>
 8004780:	2301      	movs	r3, #1
 8004782:	e000      	b.n	8004786 <LL_ADC_IsEnabled+0x1a>
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr

08004792 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004792:	b480      	push	{r7}
 8004794:	b083      	sub	sp, #12
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f003 0304 	and.w	r3, r3, #4
 80047a2:	2b04      	cmp	r3, #4
 80047a4:	d101      	bne.n	80047aa <LL_ADC_REG_IsConversionOngoing+0x18>
 80047a6:	2301      	movs	r3, #1
 80047a8:	e000      	b.n	80047ac <LL_ADC_REG_IsConversionOngoing+0x1a>
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f003 0308 	and.w	r3, r3, #8
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	d101      	bne.n	80047d0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80047cc:	2301      	movs	r3, #1
 80047ce:	e000      	b.n	80047d2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
	...

080047e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80047e0:	b590      	push	{r4, r7, lr}
 80047e2:	b089      	sub	sp, #36	; 0x24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047e8:	2300      	movs	r3, #0
 80047ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80047ec:	2300      	movs	r3, #0
 80047ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e1ee      	b.n	8004bd8 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004804:	2b00      	cmp	r3, #0
 8004806:	d109      	bne.n	800481c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f7fe fc5b 	bl	80030c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4618      	mov	r0, r3
 8004822:	f7ff ff67 	bl	80046f4 <LL_ADC_IsDeepPowerDownEnabled>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d004      	beq.n	8004836 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4618      	mov	r0, r3
 8004832:	f7ff ff4d 	bl	80046d0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4618      	mov	r0, r3
 800483c:	f7ff ff82 	bl	8004744 <LL_ADC_IsInternalRegulatorEnabled>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d114      	bne.n	8004870 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4618      	mov	r0, r3
 800484c:	f7ff ff66 	bl	800471c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004850:	4b8e      	ldr	r3, [pc, #568]	; (8004a8c <HAL_ADC_Init+0x2ac>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	099b      	lsrs	r3, r3, #6
 8004856:	4a8e      	ldr	r2, [pc, #568]	; (8004a90 <HAL_ADC_Init+0x2b0>)
 8004858:	fba2 2303 	umull	r2, r3, r2, r3
 800485c:	099b      	lsrs	r3, r3, #6
 800485e:	3301      	adds	r3, #1
 8004860:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004862:	e002      	b.n	800486a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	3b01      	subs	r3, #1
 8004868:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1f9      	bne.n	8004864 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4618      	mov	r0, r3
 8004876:	f7ff ff65 	bl	8004744 <LL_ADC_IsInternalRegulatorEnabled>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10d      	bne.n	800489c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004884:	f043 0210 	orr.w	r2, r3, #16
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004890:	f043 0201 	orr.w	r2, r3, #1
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7ff ff76 	bl	8004792 <LL_ADC_REG_IsConversionOngoing>
 80048a6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ac:	f003 0310 	and.w	r3, r3, #16
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f040 8188 	bne.w	8004bc6 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f040 8184 	bne.w	8004bc6 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048c2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80048c6:	f043 0202 	orr.w	r2, r3, #2
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7ff ff4a 	bl	800476c <LL_ADC_IsEnabled>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d136      	bne.n	800494c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a6c      	ldr	r2, [pc, #432]	; (8004a94 <HAL_ADC_Init+0x2b4>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d004      	beq.n	80048f2 <HAL_ADC_Init+0x112>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a6a      	ldr	r2, [pc, #424]	; (8004a98 <HAL_ADC_Init+0x2b8>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d10e      	bne.n	8004910 <HAL_ADC_Init+0x130>
 80048f2:	4868      	ldr	r0, [pc, #416]	; (8004a94 <HAL_ADC_Init+0x2b4>)
 80048f4:	f7ff ff3a 	bl	800476c <LL_ADC_IsEnabled>
 80048f8:	4604      	mov	r4, r0
 80048fa:	4867      	ldr	r0, [pc, #412]	; (8004a98 <HAL_ADC_Init+0x2b8>)
 80048fc:	f7ff ff36 	bl	800476c <LL_ADC_IsEnabled>
 8004900:	4603      	mov	r3, r0
 8004902:	4323      	orrs	r3, r4
 8004904:	2b00      	cmp	r3, #0
 8004906:	bf0c      	ite	eq
 8004908:	2301      	moveq	r3, #1
 800490a:	2300      	movne	r3, #0
 800490c:	b2db      	uxtb	r3, r3
 800490e:	e008      	b.n	8004922 <HAL_ADC_Init+0x142>
 8004910:	4862      	ldr	r0, [pc, #392]	; (8004a9c <HAL_ADC_Init+0x2bc>)
 8004912:	f7ff ff2b 	bl	800476c <LL_ADC_IsEnabled>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	bf0c      	ite	eq
 800491c:	2301      	moveq	r3, #1
 800491e:	2300      	movne	r3, #0
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d012      	beq.n	800494c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a5a      	ldr	r2, [pc, #360]	; (8004a94 <HAL_ADC_Init+0x2b4>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d004      	beq.n	800493a <HAL_ADC_Init+0x15a>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a58      	ldr	r2, [pc, #352]	; (8004a98 <HAL_ADC_Init+0x2b8>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d101      	bne.n	800493e <HAL_ADC_Init+0x15e>
 800493a:	4a59      	ldr	r2, [pc, #356]	; (8004aa0 <HAL_ADC_Init+0x2c0>)
 800493c:	e000      	b.n	8004940 <HAL_ADC_Init+0x160>
 800493e:	4a59      	ldr	r2, [pc, #356]	; (8004aa4 <HAL_ADC_Init+0x2c4>)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	4619      	mov	r1, r3
 8004946:	4610      	mov	r0, r2
 8004948:	f7ff fd04 	bl	8004354 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a52      	ldr	r2, [pc, #328]	; (8004a9c <HAL_ADC_Init+0x2bc>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d129      	bne.n	80049aa <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	7e5b      	ldrb	r3, [r3, #25]
 800495a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004960:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8004966:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	2b08      	cmp	r3, #8
 800496e:	d013      	beq.n	8004998 <HAL_ADC_Init+0x1b8>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	2b0c      	cmp	r3, #12
 8004976:	d00d      	beq.n	8004994 <HAL_ADC_Init+0x1b4>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	2b1c      	cmp	r3, #28
 800497e:	d007      	beq.n	8004990 <HAL_ADC_Init+0x1b0>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	2b18      	cmp	r3, #24
 8004986:	d101      	bne.n	800498c <HAL_ADC_Init+0x1ac>
 8004988:	2318      	movs	r3, #24
 800498a:	e006      	b.n	800499a <HAL_ADC_Init+0x1ba>
 800498c:	2300      	movs	r3, #0
 800498e:	e004      	b.n	800499a <HAL_ADC_Init+0x1ba>
 8004990:	2310      	movs	r3, #16
 8004992:	e002      	b.n	800499a <HAL_ADC_Init+0x1ba>
 8004994:	2308      	movs	r3, #8
 8004996:	e000      	b.n	800499a <HAL_ADC_Init+0x1ba>
 8004998:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800499a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049a2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80049a4:	4313      	orrs	r3, r2
 80049a6:	61bb      	str	r3, [r7, #24]
 80049a8:	e00e      	b.n	80049c8 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	7e5b      	ldrb	r3, [r3, #25]
 80049ae:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80049b4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80049ba:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049c2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80049c4:	4313      	orrs	r3, r2
 80049c6:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d106      	bne.n	80049e0 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d6:	3b01      	subs	r3, #1
 80049d8:	045b      	lsls	r3, r3, #17
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	4313      	orrs	r3, r2
 80049de:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d009      	beq.n	80049fc <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ec:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80049f6:	69ba      	ldr	r2, [r7, #24]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a26      	ldr	r2, [pc, #152]	; (8004a9c <HAL_ADC_Init+0x2bc>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d115      	bne.n	8004a32 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68da      	ldr	r2, [r3, #12]
 8004a0c:	4b26      	ldr	r3, [pc, #152]	; (8004aa8 <HAL_ADC_Init+0x2c8>)
 8004a0e:	4013      	ands	r3, r2
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	6812      	ldr	r2, [r2, #0]
 8004a14:	69b9      	ldr	r1, [r7, #24]
 8004a16:	430b      	orrs	r3, r1
 8004a18:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	611a      	str	r2, [r3, #16]
 8004a30:	e009      	b.n	8004a46 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68da      	ldr	r2, [r3, #12]
 8004a38:	4b1c      	ldr	r3, [pc, #112]	; (8004aac <HAL_ADC_Init+0x2cc>)
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	6812      	ldr	r2, [r2, #0]
 8004a40:	69b9      	ldr	r1, [r7, #24]
 8004a42:	430b      	orrs	r3, r1
 8004a44:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7ff fea1 	bl	8004792 <LL_ADC_REG_IsConversionOngoing>
 8004a50:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7ff feae 	bl	80047b8 <LL_ADC_INJ_IsConversionOngoing>
 8004a5c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f040 808e 	bne.w	8004b82 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f040 808a 	bne.w	8004b82 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a0a      	ldr	r2, [pc, #40]	; (8004a9c <HAL_ADC_Init+0x2bc>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d11b      	bne.n	8004ab0 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	7e1b      	ldrb	r3, [r3, #24]
 8004a7c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a84:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8004a86:	4313      	orrs	r3, r2
 8004a88:	61bb      	str	r3, [r7, #24]
 8004a8a:	e018      	b.n	8004abe <HAL_ADC_Init+0x2de>
 8004a8c:	2400002c 	.word	0x2400002c
 8004a90:	053e2d63 	.word	0x053e2d63
 8004a94:	40022000 	.word	0x40022000
 8004a98:	40022100 	.word	0x40022100
 8004a9c:	58026000 	.word	0x58026000
 8004aa0:	40022300 	.word	0x40022300
 8004aa4:	58026300 	.word	0x58026300
 8004aa8:	fff04007 	.word	0xfff04007
 8004aac:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	7e1b      	ldrb	r3, [r3, #24]
 8004ab4:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8004aba:	4313      	orrs	r3, r2
 8004abc:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68da      	ldr	r2, [r3, #12]
 8004ac4:	4b46      	ldr	r3, [pc, #280]	; (8004be0 <HAL_ADC_Init+0x400>)
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6812      	ldr	r2, [r2, #0]
 8004acc:	69b9      	ldr	r1, [r7, #24]
 8004ace:	430b      	orrs	r3, r1
 8004ad0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d137      	bne.n	8004b4c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae0:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a3f      	ldr	r2, [pc, #252]	; (8004be4 <HAL_ADC_Init+0x404>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d116      	bne.n	8004b1a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	691a      	ldr	r2, [r3, #16]
 8004af2:	4b3d      	ldr	r3, [pc, #244]	; (8004be8 <HAL_ADC_Init+0x408>)
 8004af4:	4013      	ands	r3, r2
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004afe:	4311      	orrs	r1, r2
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004b04:	4311      	orrs	r1, r2
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f042 0201 	orr.w	r2, r2, #1
 8004b16:	611a      	str	r2, [r3, #16]
 8004b18:	e020      	b.n	8004b5c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	691a      	ldr	r2, [r3, #16]
 8004b20:	4b32      	ldr	r3, [pc, #200]	; (8004bec <HAL_ADC_Init+0x40c>)
 8004b22:	4013      	ands	r3, r2
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004b28:	3a01      	subs	r2, #1
 8004b2a:	0411      	lsls	r1, r2, #16
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004b30:	4311      	orrs	r1, r2
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004b36:	4311      	orrs	r1, r2
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f042 0201 	orr.w	r2, r2, #1
 8004b48:	611a      	str	r2, [r3, #16]
 8004b4a:	e007      	b.n	8004b5c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	691a      	ldr	r2, [r3, #16]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 0201 	bic.w	r2, r2, #1
 8004b5a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a1b      	ldr	r2, [pc, #108]	; (8004be4 <HAL_ADC_Init+0x404>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d002      	beq.n	8004b82 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 fd63 	bl	8005648 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d10c      	bne.n	8004ba4 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b90:	f023 010f 	bic.w	r1, r3, #15
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	69db      	ldr	r3, [r3, #28]
 8004b98:	1e5a      	subs	r2, r3, #1
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	631a      	str	r2, [r3, #48]	; 0x30
 8004ba2:	e007      	b.n	8004bb4 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 020f 	bic.w	r2, r2, #15
 8004bb2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bb8:	f023 0303 	bic.w	r3, r3, #3
 8004bbc:	f043 0201 	orr.w	r2, r3, #1
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	661a      	str	r2, [r3, #96]	; 0x60
 8004bc4:	e007      	b.n	8004bd6 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bca:	f043 0210 	orr.w	r2, r3, #16
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004bd6:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3724      	adds	r7, #36	; 0x24
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd90      	pop	{r4, r7, pc}
 8004be0:	ffffbffc 	.word	0xffffbffc
 8004be4:	58026000 	.word	0x58026000
 8004be8:	fc00f81f 	.word	0xfc00f81f
 8004bec:	fc00f81e 	.word	0xfc00f81e

08004bf0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004bf0:	b590      	push	{r4, r7, lr}
 8004bf2:	b0b9      	sub	sp, #228	; 0xe4
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004c00:	2300      	movs	r3, #0
 8004c02:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c0a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	4aa9      	ldr	r2, [pc, #676]	; (8004eb8 <HAL_ADC_ConfigChannel+0x2c8>)
 8004c12:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d102      	bne.n	8004c24 <HAL_ADC_ConfigChannel+0x34>
 8004c1e:	2302      	movs	r3, #2
 8004c20:	f000 bcfa 	b.w	8005618 <HAL_ADC_ConfigChannel+0xa28>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7ff fdae 	bl	8004792 <LL_ADC_REG_IsConversionOngoing>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f040 84de 	bne.w	80055fa <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a9e      	ldr	r2, [pc, #632]	; (8004ebc <HAL_ADC_ConfigChannel+0x2cc>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d033      	beq.n	8004cb0 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d108      	bne.n	8004c66 <HAL_ADC_ConfigChannel+0x76>
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	0e9b      	lsrs	r3, r3, #26
 8004c5a:	f003 031f 	and.w	r3, r3, #31
 8004c5e:	2201      	movs	r2, #1
 8004c60:	fa02 f303 	lsl.w	r3, r2, r3
 8004c64:	e01d      	b.n	8004ca2 <HAL_ADC_ConfigChannel+0xb2>
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004c72:	fa93 f3a3 	rbit	r3, r3
 8004c76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004c7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004c82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8004c8a:	2320      	movs	r3, #32
 8004c8c:	e004      	b.n	8004c98 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8004c8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c92:	fab3 f383 	clz	r3, r3
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	f003 031f 	and.w	r3, r3, #31
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	6812      	ldr	r2, [r2, #0]
 8004ca6:	69d1      	ldr	r1, [r2, #28]
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	6812      	ldr	r2, [r2, #0]
 8004cac:	430b      	orrs	r3, r1
 8004cae:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6818      	ldr	r0, [r3, #0]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	6859      	ldr	r1, [r3, #4]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	f7ff fc6f 	bl	80045a0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7ff fd63 	bl	8004792 <LL_ADC_REG_IsConversionOngoing>
 8004ccc:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7ff fd6f 	bl	80047b8 <LL_ADC_INJ_IsConversionOngoing>
 8004cda:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004cde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f040 8270 	bne.w	80051c8 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004ce8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f040 826b 	bne.w	80051c8 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6818      	ldr	r0, [r3, #0]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	6819      	ldr	r1, [r3, #0]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	f7ff fc7a 	bl	80045f8 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a6c      	ldr	r2, [pc, #432]	; (8004ebc <HAL_ADC_ConfigChannel+0x2cc>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d10d      	bne.n	8004d2a <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	695a      	ldr	r2, [r3, #20]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	08db      	lsrs	r3, r3, #3
 8004d1a:	f003 0303 	and.w	r3, r3, #3
 8004d1e:	005b      	lsls	r3, r3, #1
 8004d20:	fa02 f303 	lsl.w	r3, r2, r3
 8004d24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d28:	e032      	b.n	8004d90 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004d2a:	4b65      	ldr	r3, [pc, #404]	; (8004ec0 <HAL_ADC_ConfigChannel+0x2d0>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004d32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d36:	d10b      	bne.n	8004d50 <HAL_ADC_ConfigChannel+0x160>
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	695a      	ldr	r2, [r3, #20]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	089b      	lsrs	r3, r3, #2
 8004d44:	f003 0307 	and.w	r3, r3, #7
 8004d48:	005b      	lsls	r3, r3, #1
 8004d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4e:	e01d      	b.n	8004d8c <HAL_ADC_ConfigChannel+0x19c>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	f003 0310 	and.w	r3, r3, #16
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10b      	bne.n	8004d76 <HAL_ADC_ConfigChannel+0x186>
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	695a      	ldr	r2, [r3, #20]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	089b      	lsrs	r3, r3, #2
 8004d6a:	f003 0307 	and.w	r3, r3, #7
 8004d6e:	005b      	lsls	r3, r3, #1
 8004d70:	fa02 f303 	lsl.w	r3, r2, r3
 8004d74:	e00a      	b.n	8004d8c <HAL_ADC_ConfigChannel+0x19c>
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	695a      	ldr	r2, [r3, #20]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	089b      	lsrs	r3, r3, #2
 8004d82:	f003 0304 	and.w	r3, r3, #4
 8004d86:	005b      	lsls	r3, r3, #1
 8004d88:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	2b04      	cmp	r3, #4
 8004d96:	d048      	beq.n	8004e2a <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6818      	ldr	r0, [r3, #0]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	6919      	ldr	r1, [r3, #16]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004da8:	f7ff fb08 	bl	80043bc <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a42      	ldr	r2, [pc, #264]	; (8004ebc <HAL_ADC_ConfigChannel+0x2cc>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d119      	bne.n	8004dea <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6818      	ldr	r0, [r3, #0]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	6919      	ldr	r1, [r3, #16]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	69db      	ldr	r3, [r3, #28]
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	f7ff fba0 	bl	8004508 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6818      	ldr	r0, [r3, #0]
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	6919      	ldr	r1, [r3, #16]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d102      	bne.n	8004de0 <HAL_ADC_ConfigChannel+0x1f0>
 8004dda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004dde:	e000      	b.n	8004de2 <HAL_ADC_ConfigChannel+0x1f2>
 8004de0:	2300      	movs	r3, #0
 8004de2:	461a      	mov	r2, r3
 8004de4:	f7ff fb6e 	bl	80044c4 <LL_ADC_SetOffsetSaturation>
 8004de8:	e1ee      	b.n	80051c8 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6818      	ldr	r0, [r3, #0]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	6919      	ldr	r1, [r3, #16]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d102      	bne.n	8004e02 <HAL_ADC_ConfigChannel+0x212>
 8004dfc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004e00:	e000      	b.n	8004e04 <HAL_ADC_ConfigChannel+0x214>
 8004e02:	2300      	movs	r3, #0
 8004e04:	461a      	mov	r2, r3
 8004e06:	f7ff fb3b 	bl	8004480 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6818      	ldr	r0, [r3, #0]
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	6919      	ldr	r1, [r3, #16]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	7e1b      	ldrb	r3, [r3, #24]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d102      	bne.n	8004e20 <HAL_ADC_ConfigChannel+0x230>
 8004e1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e1e:	e000      	b.n	8004e22 <HAL_ADC_ConfigChannel+0x232>
 8004e20:	2300      	movs	r3, #0
 8004e22:	461a      	mov	r2, r3
 8004e24:	f7ff fb12 	bl	800444c <LL_ADC_SetDataRightShift>
 8004e28:	e1ce      	b.n	80051c8 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a23      	ldr	r2, [pc, #140]	; (8004ebc <HAL_ADC_ConfigChannel+0x2cc>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	f040 8181 	bne.w	8005138 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7ff faef 	bl	8004420 <LL_ADC_GetOffsetChannel>
 8004e42:	4603      	mov	r3, r0
 8004e44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10a      	bne.n	8004e62 <HAL_ADC_ConfigChannel+0x272>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2100      	movs	r1, #0
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7ff fae4 	bl	8004420 <LL_ADC_GetOffsetChannel>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	0e9b      	lsrs	r3, r3, #26
 8004e5c:	f003 021f 	and.w	r2, r3, #31
 8004e60:	e01e      	b.n	8004ea0 <HAL_ADC_ConfigChannel+0x2b0>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2100      	movs	r1, #0
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7ff fad9 	bl	8004420 <LL_ADC_GetOffsetChannel>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004e78:	fa93 f3a3 	rbit	r3, r3
 8004e7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8004e80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004e84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8004e88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d101      	bne.n	8004e94 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8004e90:	2320      	movs	r3, #32
 8004e92:	e004      	b.n	8004e9e <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8004e94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004e98:	fab3 f383 	clz	r3, r3
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10b      	bne.n	8004ec4 <HAL_ADC_ConfigChannel+0x2d4>
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	0e9b      	lsrs	r3, r3, #26
 8004eb2:	f003 031f 	and.w	r3, r3, #31
 8004eb6:	e01e      	b.n	8004ef6 <HAL_ADC_ConfigChannel+0x306>
 8004eb8:	47ff0000 	.word	0x47ff0000
 8004ebc:	58026000 	.word	0x58026000
 8004ec0:	5c001000 	.word	0x5c001000
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ecc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ed0:	fa93 f3a3 	rbit	r3, r3
 8004ed4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004ed8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004edc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004ee0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d101      	bne.n	8004eec <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8004ee8:	2320      	movs	r3, #32
 8004eea:	e004      	b.n	8004ef6 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8004eec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004ef0:	fab3 f383 	clz	r3, r3
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d106      	bne.n	8004f08 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2200      	movs	r2, #0
 8004f00:	2100      	movs	r1, #0
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7ff fb22 	bl	800454c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2101      	movs	r1, #1
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7ff fa86 	bl	8004420 <LL_ADC_GetOffsetChannel>
 8004f14:	4603      	mov	r3, r0
 8004f16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10a      	bne.n	8004f34 <HAL_ADC_ConfigChannel+0x344>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2101      	movs	r1, #1
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7ff fa7b 	bl	8004420 <LL_ADC_GetOffsetChannel>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	0e9b      	lsrs	r3, r3, #26
 8004f2e:	f003 021f 	and.w	r2, r3, #31
 8004f32:	e01e      	b.n	8004f72 <HAL_ADC_ConfigChannel+0x382>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2101      	movs	r1, #1
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7ff fa70 	bl	8004420 <LL_ADC_GetOffsetChannel>
 8004f40:	4603      	mov	r3, r0
 8004f42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f4a:	fa93 f3a3 	rbit	r3, r3
 8004f4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004f52:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004f5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8004f62:	2320      	movs	r3, #32
 8004f64:	e004      	b.n	8004f70 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8004f66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004f6a:	fab3 f383 	clz	r3, r3
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	461a      	mov	r2, r3
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d105      	bne.n	8004f8a <HAL_ADC_ConfigChannel+0x39a>
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	0e9b      	lsrs	r3, r3, #26
 8004f84:	f003 031f 	and.w	r3, r3, #31
 8004f88:	e018      	b.n	8004fbc <HAL_ADC_ConfigChannel+0x3cc>
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f92:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004f96:	fa93 f3a3 	rbit	r3, r3
 8004f9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004f9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004fa2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004fa6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8004fae:	2320      	movs	r3, #32
 8004fb0:	e004      	b.n	8004fbc <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8004fb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004fb6:	fab3 f383 	clz	r3, r3
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d106      	bne.n	8004fce <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	2101      	movs	r1, #1
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7ff fabf 	bl	800454c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2102      	movs	r1, #2
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff fa23 	bl	8004420 <LL_ADC_GetOffsetChannel>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10a      	bne.n	8004ffa <HAL_ADC_ConfigChannel+0x40a>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2102      	movs	r1, #2
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7ff fa18 	bl	8004420 <LL_ADC_GetOffsetChannel>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	0e9b      	lsrs	r3, r3, #26
 8004ff4:	f003 021f 	and.w	r2, r3, #31
 8004ff8:	e01e      	b.n	8005038 <HAL_ADC_ConfigChannel+0x448>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2102      	movs	r1, #2
 8005000:	4618      	mov	r0, r3
 8005002:	f7ff fa0d 	bl	8004420 <LL_ADC_GetOffsetChannel>
 8005006:	4603      	mov	r3, r0
 8005008:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800500c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005010:	fa93 f3a3 	rbit	r3, r3
 8005014:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8005018:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800501c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8005020:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8005028:	2320      	movs	r3, #32
 800502a:	e004      	b.n	8005036 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 800502c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005030:	fab3 f383 	clz	r3, r3
 8005034:	b2db      	uxtb	r3, r3
 8005036:	461a      	mov	r2, r3
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005040:	2b00      	cmp	r3, #0
 8005042:	d105      	bne.n	8005050 <HAL_ADC_ConfigChannel+0x460>
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	0e9b      	lsrs	r3, r3, #26
 800504a:	f003 031f 	and.w	r3, r3, #31
 800504e:	e014      	b.n	800507a <HAL_ADC_ConfigChannel+0x48a>
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005056:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005058:	fa93 f3a3 	rbit	r3, r3
 800505c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800505e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005060:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8005064:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005068:	2b00      	cmp	r3, #0
 800506a:	d101      	bne.n	8005070 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 800506c:	2320      	movs	r3, #32
 800506e:	e004      	b.n	800507a <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8005070:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005074:	fab3 f383 	clz	r3, r3
 8005078:	b2db      	uxtb	r3, r3
 800507a:	429a      	cmp	r2, r3
 800507c:	d106      	bne.n	800508c <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2200      	movs	r2, #0
 8005084:	2102      	movs	r1, #2
 8005086:	4618      	mov	r0, r3
 8005088:	f7ff fa60 	bl	800454c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2103      	movs	r1, #3
 8005092:	4618      	mov	r0, r3
 8005094:	f7ff f9c4 	bl	8004420 <LL_ADC_GetOffsetChannel>
 8005098:	4603      	mov	r3, r0
 800509a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10a      	bne.n	80050b8 <HAL_ADC_ConfigChannel+0x4c8>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2103      	movs	r1, #3
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7ff f9b9 	bl	8004420 <LL_ADC_GetOffsetChannel>
 80050ae:	4603      	mov	r3, r0
 80050b0:	0e9b      	lsrs	r3, r3, #26
 80050b2:	f003 021f 	and.w	r2, r3, #31
 80050b6:	e017      	b.n	80050e8 <HAL_ADC_ConfigChannel+0x4f8>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2103      	movs	r1, #3
 80050be:	4618      	mov	r0, r3
 80050c0:	f7ff f9ae 	bl	8004420 <LL_ADC_GetOffsetChannel>
 80050c4:	4603      	mov	r3, r0
 80050c6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050ca:	fa93 f3a3 	rbit	r3, r3
 80050ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80050d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050d2:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80050d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80050da:	2320      	movs	r3, #32
 80050dc:	e003      	b.n	80050e6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80050de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050e0:	fab3 f383 	clz	r3, r3
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	461a      	mov	r2, r3
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d105      	bne.n	8005100 <HAL_ADC_ConfigChannel+0x510>
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	0e9b      	lsrs	r3, r3, #26
 80050fa:	f003 031f 	and.w	r3, r3, #31
 80050fe:	e011      	b.n	8005124 <HAL_ADC_ConfigChannel+0x534>
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005106:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005108:	fa93 f3a3 	rbit	r3, r3
 800510c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800510e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005110:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8005112:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005114:	2b00      	cmp	r3, #0
 8005116:	d101      	bne.n	800511c <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8005118:	2320      	movs	r3, #32
 800511a:	e003      	b.n	8005124 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 800511c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800511e:	fab3 f383 	clz	r3, r3
 8005122:	b2db      	uxtb	r3, r3
 8005124:	429a      	cmp	r2, r3
 8005126:	d14f      	bne.n	80051c8 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2200      	movs	r2, #0
 800512e:	2103      	movs	r1, #3
 8005130:	4618      	mov	r0, r3
 8005132:	f7ff fa0b 	bl	800454c <LL_ADC_SetOffsetState>
 8005136:	e047      	b.n	80051c8 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800513e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	069b      	lsls	r3, r3, #26
 8005148:	429a      	cmp	r2, r3
 800514a:	d107      	bne.n	800515c <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800515a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005162:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	069b      	lsls	r3, r3, #26
 800516c:	429a      	cmp	r2, r3
 800516e:	d107      	bne.n	8005180 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800517e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005186:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	069b      	lsls	r3, r3, #26
 8005190:	429a      	cmp	r2, r3
 8005192:	d107      	bne.n	80051a4 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80051a2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	069b      	lsls	r3, r3, #26
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d107      	bne.n	80051c8 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80051c6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7ff facd 	bl	800476c <LL_ADC_IsEnabled>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f040 8219 	bne.w	800560c <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6818      	ldr	r0, [r3, #0]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	6819      	ldr	r1, [r3, #0]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	461a      	mov	r2, r3
 80051e8:	f7ff fa32 	bl	8004650 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	4aa1      	ldr	r2, [pc, #644]	; (8005478 <HAL_ADC_ConfigChannel+0x888>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	f040 812e 	bne.w	8005454 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10b      	bne.n	8005220 <HAL_ADC_ConfigChannel+0x630>
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	0e9b      	lsrs	r3, r3, #26
 800520e:	3301      	adds	r3, #1
 8005210:	f003 031f 	and.w	r3, r3, #31
 8005214:	2b09      	cmp	r3, #9
 8005216:	bf94      	ite	ls
 8005218:	2301      	movls	r3, #1
 800521a:	2300      	movhi	r3, #0
 800521c:	b2db      	uxtb	r3, r3
 800521e:	e019      	b.n	8005254 <HAL_ADC_ConfigChannel+0x664>
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005226:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005228:	fa93 f3a3 	rbit	r3, r3
 800522c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800522e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005230:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8005232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8005238:	2320      	movs	r3, #32
 800523a:	e003      	b.n	8005244 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 800523c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800523e:	fab3 f383 	clz	r3, r3
 8005242:	b2db      	uxtb	r3, r3
 8005244:	3301      	adds	r3, #1
 8005246:	f003 031f 	and.w	r3, r3, #31
 800524a:	2b09      	cmp	r3, #9
 800524c:	bf94      	ite	ls
 800524e:	2301      	movls	r3, #1
 8005250:	2300      	movhi	r3, #0
 8005252:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005254:	2b00      	cmp	r3, #0
 8005256:	d079      	beq.n	800534c <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005260:	2b00      	cmp	r3, #0
 8005262:	d107      	bne.n	8005274 <HAL_ADC_ConfigChannel+0x684>
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	0e9b      	lsrs	r3, r3, #26
 800526a:	3301      	adds	r3, #1
 800526c:	069b      	lsls	r3, r3, #26
 800526e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005272:	e015      	b.n	80052a0 <HAL_ADC_ConfigChannel+0x6b0>
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800527a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800527c:	fa93 f3a3 	rbit	r3, r3
 8005280:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8005282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005284:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8005286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005288:	2b00      	cmp	r3, #0
 800528a:	d101      	bne.n	8005290 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 800528c:	2320      	movs	r3, #32
 800528e:	e003      	b.n	8005298 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8005290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005292:	fab3 f383 	clz	r3, r3
 8005296:	b2db      	uxtb	r3, r3
 8005298:	3301      	adds	r3, #1
 800529a:	069b      	lsls	r3, r3, #26
 800529c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d109      	bne.n	80052c0 <HAL_ADC_ConfigChannel+0x6d0>
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	0e9b      	lsrs	r3, r3, #26
 80052b2:	3301      	adds	r3, #1
 80052b4:	f003 031f 	and.w	r3, r3, #31
 80052b8:	2101      	movs	r1, #1
 80052ba:	fa01 f303 	lsl.w	r3, r1, r3
 80052be:	e017      	b.n	80052f0 <HAL_ADC_ConfigChannel+0x700>
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052c8:	fa93 f3a3 	rbit	r3, r3
 80052cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80052ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052d0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80052d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d101      	bne.n	80052dc <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 80052d8:	2320      	movs	r3, #32
 80052da:	e003      	b.n	80052e4 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 80052dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052de:	fab3 f383 	clz	r3, r3
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	3301      	adds	r3, #1
 80052e6:	f003 031f 	and.w	r3, r3, #31
 80052ea:	2101      	movs	r1, #1
 80052ec:	fa01 f303 	lsl.w	r3, r1, r3
 80052f0:	ea42 0103 	orr.w	r1, r2, r3
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d10a      	bne.n	8005316 <HAL_ADC_ConfigChannel+0x726>
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	0e9b      	lsrs	r3, r3, #26
 8005306:	3301      	adds	r3, #1
 8005308:	f003 021f 	and.w	r2, r3, #31
 800530c:	4613      	mov	r3, r2
 800530e:	005b      	lsls	r3, r3, #1
 8005310:	4413      	add	r3, r2
 8005312:	051b      	lsls	r3, r3, #20
 8005314:	e018      	b.n	8005348 <HAL_ADC_ConfigChannel+0x758>
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800531c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800531e:	fa93 f3a3 	rbit	r3, r3
 8005322:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005326:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 800532e:	2320      	movs	r3, #32
 8005330:	e003      	b.n	800533a <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8005332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005334:	fab3 f383 	clz	r3, r3
 8005338:	b2db      	uxtb	r3, r3
 800533a:	3301      	adds	r3, #1
 800533c:	f003 021f 	and.w	r2, r3, #31
 8005340:	4613      	mov	r3, r2
 8005342:	005b      	lsls	r3, r3, #1
 8005344:	4413      	add	r3, r2
 8005346:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005348:	430b      	orrs	r3, r1
 800534a:	e07e      	b.n	800544a <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005354:	2b00      	cmp	r3, #0
 8005356:	d107      	bne.n	8005368 <HAL_ADC_ConfigChannel+0x778>
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	0e9b      	lsrs	r3, r3, #26
 800535e:	3301      	adds	r3, #1
 8005360:	069b      	lsls	r3, r3, #26
 8005362:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005366:	e015      	b.n	8005394 <HAL_ADC_ConfigChannel+0x7a4>
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800536e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005370:	fa93 f3a3 	rbit	r3, r3
 8005374:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005378:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800537a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537c:	2b00      	cmp	r3, #0
 800537e:	d101      	bne.n	8005384 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8005380:	2320      	movs	r3, #32
 8005382:	e003      	b.n	800538c <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8005384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005386:	fab3 f383 	clz	r3, r3
 800538a:	b2db      	uxtb	r3, r3
 800538c:	3301      	adds	r3, #1
 800538e:	069b      	lsls	r3, r3, #26
 8005390:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800539c:	2b00      	cmp	r3, #0
 800539e:	d109      	bne.n	80053b4 <HAL_ADC_ConfigChannel+0x7c4>
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	0e9b      	lsrs	r3, r3, #26
 80053a6:	3301      	adds	r3, #1
 80053a8:	f003 031f 	and.w	r3, r3, #31
 80053ac:	2101      	movs	r1, #1
 80053ae:	fa01 f303 	lsl.w	r3, r1, r3
 80053b2:	e017      	b.n	80053e4 <HAL_ADC_ConfigChannel+0x7f4>
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	fa93 f3a3 	rbit	r3, r3
 80053c0:	61bb      	str	r3, [r7, #24]
  return result;
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80053c6:	6a3b      	ldr	r3, [r7, #32]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 80053cc:	2320      	movs	r3, #32
 80053ce:	e003      	b.n	80053d8 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 80053d0:	6a3b      	ldr	r3, [r7, #32]
 80053d2:	fab3 f383 	clz	r3, r3
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	3301      	adds	r3, #1
 80053da:	f003 031f 	and.w	r3, r3, #31
 80053de:	2101      	movs	r1, #1
 80053e0:	fa01 f303 	lsl.w	r3, r1, r3
 80053e4:	ea42 0103 	orr.w	r1, r2, r3
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10d      	bne.n	8005410 <HAL_ADC_ConfigChannel+0x820>
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	0e9b      	lsrs	r3, r3, #26
 80053fa:	3301      	adds	r3, #1
 80053fc:	f003 021f 	and.w	r2, r3, #31
 8005400:	4613      	mov	r3, r2
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	4413      	add	r3, r2
 8005406:	3b1e      	subs	r3, #30
 8005408:	051b      	lsls	r3, r3, #20
 800540a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800540e:	e01b      	b.n	8005448 <HAL_ADC_ConfigChannel+0x858>
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	fa93 f3a3 	rbit	r3, r3
 800541c:	60fb      	str	r3, [r7, #12]
  return result;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d101      	bne.n	800542c <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8005428:	2320      	movs	r3, #32
 800542a:	e003      	b.n	8005434 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	fab3 f383 	clz	r3, r3
 8005432:	b2db      	uxtb	r3, r3
 8005434:	3301      	adds	r3, #1
 8005436:	f003 021f 	and.w	r2, r3, #31
 800543a:	4613      	mov	r3, r2
 800543c:	005b      	lsls	r3, r3, #1
 800543e:	4413      	add	r3, r2
 8005440:	3b1e      	subs	r3, #30
 8005442:	051b      	lsls	r3, r3, #20
 8005444:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005448:	430b      	orrs	r3, r1
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	6892      	ldr	r2, [r2, #8]
 800544e:	4619      	mov	r1, r3
 8005450:	f7ff f8d2 	bl	80045f8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	f280 80d7 	bge.w	800560c <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a06      	ldr	r2, [pc, #24]	; (800547c <HAL_ADC_ConfigChannel+0x88c>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d004      	beq.n	8005472 <HAL_ADC_ConfigChannel+0x882>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a04      	ldr	r2, [pc, #16]	; (8005480 <HAL_ADC_ConfigChannel+0x890>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d10a      	bne.n	8005488 <HAL_ADC_ConfigChannel+0x898>
 8005472:	4b04      	ldr	r3, [pc, #16]	; (8005484 <HAL_ADC_ConfigChannel+0x894>)
 8005474:	e009      	b.n	800548a <HAL_ADC_ConfigChannel+0x89a>
 8005476:	bf00      	nop
 8005478:	47ff0000 	.word	0x47ff0000
 800547c:	40022000 	.word	0x40022000
 8005480:	40022100 	.word	0x40022100
 8005484:	40022300 	.word	0x40022300
 8005488:	4b65      	ldr	r3, [pc, #404]	; (8005620 <HAL_ADC_ConfigChannel+0xa30>)
 800548a:	4618      	mov	r0, r3
 800548c:	f7fe ff88 	bl	80043a0 <LL_ADC_GetCommonPathInternalCh>
 8005490:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a62      	ldr	r2, [pc, #392]	; (8005624 <HAL_ADC_ConfigChannel+0xa34>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d004      	beq.n	80054a8 <HAL_ADC_ConfigChannel+0x8b8>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a61      	ldr	r2, [pc, #388]	; (8005628 <HAL_ADC_ConfigChannel+0xa38>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d10e      	bne.n	80054c6 <HAL_ADC_ConfigChannel+0x8d6>
 80054a8:	485e      	ldr	r0, [pc, #376]	; (8005624 <HAL_ADC_ConfigChannel+0xa34>)
 80054aa:	f7ff f95f 	bl	800476c <LL_ADC_IsEnabled>
 80054ae:	4604      	mov	r4, r0
 80054b0:	485d      	ldr	r0, [pc, #372]	; (8005628 <HAL_ADC_ConfigChannel+0xa38>)
 80054b2:	f7ff f95b 	bl	800476c <LL_ADC_IsEnabled>
 80054b6:	4603      	mov	r3, r0
 80054b8:	4323      	orrs	r3, r4
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	bf0c      	ite	eq
 80054be:	2301      	moveq	r3, #1
 80054c0:	2300      	movne	r3, #0
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	e008      	b.n	80054d8 <HAL_ADC_ConfigChannel+0x8e8>
 80054c6:	4859      	ldr	r0, [pc, #356]	; (800562c <HAL_ADC_ConfigChannel+0xa3c>)
 80054c8:	f7ff f950 	bl	800476c <LL_ADC_IsEnabled>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	bf0c      	ite	eq
 80054d2:	2301      	moveq	r3, #1
 80054d4:	2300      	movne	r3, #0
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f000 8084 	beq.w	80055e6 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a53      	ldr	r2, [pc, #332]	; (8005630 <HAL_ADC_ConfigChannel+0xa40>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d132      	bne.n	800554e <HAL_ADC_ConfigChannel+0x95e>
 80054e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80054ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d12c      	bne.n	800554e <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a4c      	ldr	r2, [pc, #304]	; (800562c <HAL_ADC_ConfigChannel+0xa3c>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	f040 8086 	bne.w	800560c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a47      	ldr	r2, [pc, #284]	; (8005624 <HAL_ADC_ConfigChannel+0xa34>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d004      	beq.n	8005514 <HAL_ADC_ConfigChannel+0x924>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a46      	ldr	r2, [pc, #280]	; (8005628 <HAL_ADC_ConfigChannel+0xa38>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d101      	bne.n	8005518 <HAL_ADC_ConfigChannel+0x928>
 8005514:	4a47      	ldr	r2, [pc, #284]	; (8005634 <HAL_ADC_ConfigChannel+0xa44>)
 8005516:	e000      	b.n	800551a <HAL_ADC_ConfigChannel+0x92a>
 8005518:	4a41      	ldr	r2, [pc, #260]	; (8005620 <HAL_ADC_ConfigChannel+0xa30>)
 800551a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800551e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005522:	4619      	mov	r1, r3
 8005524:	4610      	mov	r0, r2
 8005526:	f7fe ff28 	bl	800437a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800552a:	4b43      	ldr	r3, [pc, #268]	; (8005638 <HAL_ADC_ConfigChannel+0xa48>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	099b      	lsrs	r3, r3, #6
 8005530:	4a42      	ldr	r2, [pc, #264]	; (800563c <HAL_ADC_ConfigChannel+0xa4c>)
 8005532:	fba2 2303 	umull	r2, r3, r2, r3
 8005536:	099b      	lsrs	r3, r3, #6
 8005538:	3301      	adds	r3, #1
 800553a:	005b      	lsls	r3, r3, #1
 800553c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800553e:	e002      	b.n	8005546 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	3b01      	subs	r3, #1
 8005544:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1f9      	bne.n	8005540 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800554c:	e05e      	b.n	800560c <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a3b      	ldr	r2, [pc, #236]	; (8005640 <HAL_ADC_ConfigChannel+0xa50>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d120      	bne.n	800559a <HAL_ADC_ConfigChannel+0x9aa>
 8005558:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800555c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d11a      	bne.n	800559a <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a30      	ldr	r2, [pc, #192]	; (800562c <HAL_ADC_ConfigChannel+0xa3c>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d14e      	bne.n	800560c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a2c      	ldr	r2, [pc, #176]	; (8005624 <HAL_ADC_ConfigChannel+0xa34>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d004      	beq.n	8005582 <HAL_ADC_ConfigChannel+0x992>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a2a      	ldr	r2, [pc, #168]	; (8005628 <HAL_ADC_ConfigChannel+0xa38>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d101      	bne.n	8005586 <HAL_ADC_ConfigChannel+0x996>
 8005582:	4a2c      	ldr	r2, [pc, #176]	; (8005634 <HAL_ADC_ConfigChannel+0xa44>)
 8005584:	e000      	b.n	8005588 <HAL_ADC_ConfigChannel+0x998>
 8005586:	4a26      	ldr	r2, [pc, #152]	; (8005620 <HAL_ADC_ConfigChannel+0xa30>)
 8005588:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800558c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005590:	4619      	mov	r1, r3
 8005592:	4610      	mov	r0, r2
 8005594:	f7fe fef1 	bl	800437a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005598:	e038      	b.n	800560c <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a29      	ldr	r2, [pc, #164]	; (8005644 <HAL_ADC_ConfigChannel+0xa54>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d133      	bne.n	800560c <HAL_ADC_ConfigChannel+0xa1c>
 80055a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80055a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d12d      	bne.n	800560c <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a1d      	ldr	r2, [pc, #116]	; (800562c <HAL_ADC_ConfigChannel+0xa3c>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d128      	bne.n	800560c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a19      	ldr	r2, [pc, #100]	; (8005624 <HAL_ADC_ConfigChannel+0xa34>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d004      	beq.n	80055ce <HAL_ADC_ConfigChannel+0x9de>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a17      	ldr	r2, [pc, #92]	; (8005628 <HAL_ADC_ConfigChannel+0xa38>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d101      	bne.n	80055d2 <HAL_ADC_ConfigChannel+0x9e2>
 80055ce:	4a19      	ldr	r2, [pc, #100]	; (8005634 <HAL_ADC_ConfigChannel+0xa44>)
 80055d0:	e000      	b.n	80055d4 <HAL_ADC_ConfigChannel+0x9e4>
 80055d2:	4a13      	ldr	r2, [pc, #76]	; (8005620 <HAL_ADC_ConfigChannel+0xa30>)
 80055d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80055d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80055dc:	4619      	mov	r1, r3
 80055de:	4610      	mov	r0, r2
 80055e0:	f7fe fecb 	bl	800437a <LL_ADC_SetCommonPathInternalCh>
 80055e4:	e012      	b.n	800560c <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ea:	f043 0220 	orr.w	r2, r3, #32
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80055f8:	e008      	b.n	800560c <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055fe:	f043 0220 	orr.w	r2, r3, #32
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005614:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8005618:	4618      	mov	r0, r3
 800561a:	37e4      	adds	r7, #228	; 0xe4
 800561c:	46bd      	mov	sp, r7
 800561e:	bd90      	pop	{r4, r7, pc}
 8005620:	58026300 	.word	0x58026300
 8005624:	40022000 	.word	0x40022000
 8005628:	40022100 	.word	0x40022100
 800562c:	58026000 	.word	0x58026000
 8005630:	c7520000 	.word	0xc7520000
 8005634:	40022300 	.word	0x40022300
 8005638:	2400002c 	.word	0x2400002c
 800563c:	053e2d63 	.word	0x053e2d63
 8005640:	c3210000 	.word	0xc3210000
 8005644:	cb840000 	.word	0xcb840000

08005648 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a6c      	ldr	r2, [pc, #432]	; (8005808 <ADC_ConfigureBoostMode+0x1c0>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d004      	beq.n	8005664 <ADC_ConfigureBoostMode+0x1c>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a6b      	ldr	r2, [pc, #428]	; (800580c <ADC_ConfigureBoostMode+0x1c4>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d109      	bne.n	8005678 <ADC_ConfigureBoostMode+0x30>
 8005664:	4b6a      	ldr	r3, [pc, #424]	; (8005810 <ADC_ConfigureBoostMode+0x1c8>)
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800566c:	2b00      	cmp	r3, #0
 800566e:	bf14      	ite	ne
 8005670:	2301      	movne	r3, #1
 8005672:	2300      	moveq	r3, #0
 8005674:	b2db      	uxtb	r3, r3
 8005676:	e008      	b.n	800568a <ADC_ConfigureBoostMode+0x42>
 8005678:	4b66      	ldr	r3, [pc, #408]	; (8005814 <ADC_ConfigureBoostMode+0x1cc>)
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005680:	2b00      	cmp	r3, #0
 8005682:	bf14      	ite	ne
 8005684:	2301      	movne	r3, #1
 8005686:	2300      	moveq	r3, #0
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d01c      	beq.n	80056c8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800568e:	f006 f8b7 	bl	800b800 <HAL_RCC_GetHCLKFreq>
 8005692:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800569c:	d010      	beq.n	80056c0 <ADC_ConfigureBoostMode+0x78>
 800569e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80056a2:	d873      	bhi.n	800578c <ADC_ConfigureBoostMode+0x144>
 80056a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056a8:	d002      	beq.n	80056b0 <ADC_ConfigureBoostMode+0x68>
 80056aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056ae:	d16d      	bne.n	800578c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	0c1b      	lsrs	r3, r3, #16
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056bc:	60fb      	str	r3, [r7, #12]
        break;
 80056be:	e068      	b.n	8005792 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	089b      	lsrs	r3, r3, #2
 80056c4:	60fb      	str	r3, [r7, #12]
        break;
 80056c6:	e064      	b.n	8005792 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80056c8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80056cc:	f04f 0100 	mov.w	r1, #0
 80056d0:	f007 fa92 	bl	800cbf8 <HAL_RCCEx_GetPeriphCLKFreq>
 80056d4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80056de:	d051      	beq.n	8005784 <ADC_ConfigureBoostMode+0x13c>
 80056e0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80056e4:	d854      	bhi.n	8005790 <ADC_ConfigureBoostMode+0x148>
 80056e6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80056ea:	d047      	beq.n	800577c <ADC_ConfigureBoostMode+0x134>
 80056ec:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80056f0:	d84e      	bhi.n	8005790 <ADC_ConfigureBoostMode+0x148>
 80056f2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80056f6:	d03d      	beq.n	8005774 <ADC_ConfigureBoostMode+0x12c>
 80056f8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80056fc:	d848      	bhi.n	8005790 <ADC_ConfigureBoostMode+0x148>
 80056fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005702:	d033      	beq.n	800576c <ADC_ConfigureBoostMode+0x124>
 8005704:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005708:	d842      	bhi.n	8005790 <ADC_ConfigureBoostMode+0x148>
 800570a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800570e:	d029      	beq.n	8005764 <ADC_ConfigureBoostMode+0x11c>
 8005710:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005714:	d83c      	bhi.n	8005790 <ADC_ConfigureBoostMode+0x148>
 8005716:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800571a:	d01a      	beq.n	8005752 <ADC_ConfigureBoostMode+0x10a>
 800571c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005720:	d836      	bhi.n	8005790 <ADC_ConfigureBoostMode+0x148>
 8005722:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005726:	d014      	beq.n	8005752 <ADC_ConfigureBoostMode+0x10a>
 8005728:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800572c:	d830      	bhi.n	8005790 <ADC_ConfigureBoostMode+0x148>
 800572e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005732:	d00e      	beq.n	8005752 <ADC_ConfigureBoostMode+0x10a>
 8005734:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005738:	d82a      	bhi.n	8005790 <ADC_ConfigureBoostMode+0x148>
 800573a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800573e:	d008      	beq.n	8005752 <ADC_ConfigureBoostMode+0x10a>
 8005740:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005744:	d824      	bhi.n	8005790 <ADC_ConfigureBoostMode+0x148>
 8005746:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800574a:	d002      	beq.n	8005752 <ADC_ConfigureBoostMode+0x10a>
 800574c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005750:	d11e      	bne.n	8005790 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	0c9b      	lsrs	r3, r3, #18
 8005758:	005b      	lsls	r3, r3, #1
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005760:	60fb      	str	r3, [r7, #12]
        break;
 8005762:	e016      	b.n	8005792 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	091b      	lsrs	r3, r3, #4
 8005768:	60fb      	str	r3, [r7, #12]
        break;
 800576a:	e012      	b.n	8005792 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	095b      	lsrs	r3, r3, #5
 8005770:	60fb      	str	r3, [r7, #12]
        break;
 8005772:	e00e      	b.n	8005792 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	099b      	lsrs	r3, r3, #6
 8005778:	60fb      	str	r3, [r7, #12]
        break;
 800577a:	e00a      	b.n	8005792 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	09db      	lsrs	r3, r3, #7
 8005780:	60fb      	str	r3, [r7, #12]
        break;
 8005782:	e006      	b.n	8005792 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	0a1b      	lsrs	r3, r3, #8
 8005788:	60fb      	str	r3, [r7, #12]
        break;
 800578a:	e002      	b.n	8005792 <ADC_ConfigureBoostMode+0x14a>
        break;
 800578c:	bf00      	nop
 800578e:	e000      	b.n	8005792 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005790:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	085b      	lsrs	r3, r3, #1
 8005796:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4a1f      	ldr	r2, [pc, #124]	; (8005818 <ADC_ConfigureBoostMode+0x1d0>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d808      	bhi.n	80057b2 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	689a      	ldr	r2, [r3, #8]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80057ae:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80057b0:	e025      	b.n	80057fe <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	4a19      	ldr	r2, [pc, #100]	; (800581c <ADC_ConfigureBoostMode+0x1d4>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d80a      	bhi.n	80057d0 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057cc:	609a      	str	r2, [r3, #8]
}
 80057ce:	e016      	b.n	80057fe <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	4a13      	ldr	r2, [pc, #76]	; (8005820 <ADC_ConfigureBoostMode+0x1d8>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d80a      	bhi.n	80057ee <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057ea:	609a      	str	r2, [r3, #8]
}
 80057ec:	e007      	b.n	80057fe <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	689a      	ldr	r2, [r3, #8]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80057fc:	609a      	str	r2, [r3, #8]
}
 80057fe:	bf00      	nop
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	40022000 	.word	0x40022000
 800580c:	40022100 	.word	0x40022100
 8005810:	40022300 	.word	0x40022300
 8005814:	58026300 	.word	0x58026300
 8005818:	005f5e10 	.word	0x005f5e10
 800581c:	00bebc20 	.word	0x00bebc20
 8005820:	017d7840 	.word	0x017d7840

08005824 <LL_ADC_IsEnabled>:
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f003 0301 	and.w	r3, r3, #1
 8005834:	2b01      	cmp	r3, #1
 8005836:	d101      	bne.n	800583c <LL_ADC_IsEnabled+0x18>
 8005838:	2301      	movs	r3, #1
 800583a:	e000      	b.n	800583e <LL_ADC_IsEnabled+0x1a>
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	370c      	adds	r7, #12
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <LL_ADC_REG_IsConversionOngoing>:
{
 800584a:	b480      	push	{r7}
 800584c:	b083      	sub	sp, #12
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f003 0304 	and.w	r3, r3, #4
 800585a:	2b04      	cmp	r3, #4
 800585c:	d101      	bne.n	8005862 <LL_ADC_REG_IsConversionOngoing+0x18>
 800585e:	2301      	movs	r3, #1
 8005860:	e000      	b.n	8005864 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005870:	b590      	push	{r4, r7, lr}
 8005872:	b0a3      	sub	sp, #140	; 0x8c
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800587a:	2300      	movs	r3, #0
 800587c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005886:	2b01      	cmp	r3, #1
 8005888:	d101      	bne.n	800588e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800588a:	2302      	movs	r3, #2
 800588c:	e0c1      	b.n	8005a12 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005896:	2300      	movs	r3, #0
 8005898:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800589a:	2300      	movs	r3, #0
 800589c:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a5e      	ldr	r2, [pc, #376]	; (8005a1c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d102      	bne.n	80058ae <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80058a8:	4b5d      	ldr	r3, [pc, #372]	; (8005a20 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80058aa:	60fb      	str	r3, [r7, #12]
 80058ac:	e001      	b.n	80058b2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80058ae:	2300      	movs	r3, #0
 80058b0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d10b      	bne.n	80058d0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058bc:	f043 0220 	orr.w	r2, r3, #32
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e0a0      	b.n	8005a12 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7ff ffb9 	bl	800584a <LL_ADC_REG_IsConversionOngoing>
 80058d8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4618      	mov	r0, r3
 80058e2:	f7ff ffb2 	bl	800584a <LL_ADC_REG_IsConversionOngoing>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f040 8081 	bne.w	80059f0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80058ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d17c      	bne.n	80059f0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a48      	ldr	r2, [pc, #288]	; (8005a1c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d004      	beq.n	800590a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a46      	ldr	r2, [pc, #280]	; (8005a20 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d101      	bne.n	800590e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800590a:	4b46      	ldr	r3, [pc, #280]	; (8005a24 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800590c:	e000      	b.n	8005910 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800590e:	4b46      	ldr	r3, [pc, #280]	; (8005a28 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005910:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d039      	beq.n	800598e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800591a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	431a      	orrs	r2, r3
 8005928:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800592a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a3a      	ldr	r2, [pc, #232]	; (8005a1c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d004      	beq.n	8005940 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a39      	ldr	r2, [pc, #228]	; (8005a20 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d10e      	bne.n	800595e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005940:	4836      	ldr	r0, [pc, #216]	; (8005a1c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005942:	f7ff ff6f 	bl	8005824 <LL_ADC_IsEnabled>
 8005946:	4604      	mov	r4, r0
 8005948:	4835      	ldr	r0, [pc, #212]	; (8005a20 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800594a:	f7ff ff6b 	bl	8005824 <LL_ADC_IsEnabled>
 800594e:	4603      	mov	r3, r0
 8005950:	4323      	orrs	r3, r4
 8005952:	2b00      	cmp	r3, #0
 8005954:	bf0c      	ite	eq
 8005956:	2301      	moveq	r3, #1
 8005958:	2300      	movne	r3, #0
 800595a:	b2db      	uxtb	r3, r3
 800595c:	e008      	b.n	8005970 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800595e:	4833      	ldr	r0, [pc, #204]	; (8005a2c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005960:	f7ff ff60 	bl	8005824 <LL_ADC_IsEnabled>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	bf0c      	ite	eq
 800596a:	2301      	moveq	r3, #1
 800596c:	2300      	movne	r3, #0
 800596e:	b2db      	uxtb	r3, r3
 8005970:	2b00      	cmp	r3, #0
 8005972:	d047      	beq.n	8005a04 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005974:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005976:	689a      	ldr	r2, [r3, #8]
 8005978:	4b2d      	ldr	r3, [pc, #180]	; (8005a30 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800597a:	4013      	ands	r3, r2
 800597c:	683a      	ldr	r2, [r7, #0]
 800597e:	6811      	ldr	r1, [r2, #0]
 8005980:	683a      	ldr	r2, [r7, #0]
 8005982:	6892      	ldr	r2, [r2, #8]
 8005984:	430a      	orrs	r2, r1
 8005986:	431a      	orrs	r2, r3
 8005988:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800598a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800598c:	e03a      	b.n	8005a04 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800598e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005996:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005998:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a1f      	ldr	r2, [pc, #124]	; (8005a1c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d004      	beq.n	80059ae <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a1d      	ldr	r2, [pc, #116]	; (8005a20 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d10e      	bne.n	80059cc <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80059ae:	481b      	ldr	r0, [pc, #108]	; (8005a1c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80059b0:	f7ff ff38 	bl	8005824 <LL_ADC_IsEnabled>
 80059b4:	4604      	mov	r4, r0
 80059b6:	481a      	ldr	r0, [pc, #104]	; (8005a20 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80059b8:	f7ff ff34 	bl	8005824 <LL_ADC_IsEnabled>
 80059bc:	4603      	mov	r3, r0
 80059be:	4323      	orrs	r3, r4
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	bf0c      	ite	eq
 80059c4:	2301      	moveq	r3, #1
 80059c6:	2300      	movne	r3, #0
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	e008      	b.n	80059de <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80059cc:	4817      	ldr	r0, [pc, #92]	; (8005a2c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80059ce:	f7ff ff29 	bl	8005824 <LL_ADC_IsEnabled>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	bf0c      	ite	eq
 80059d8:	2301      	moveq	r3, #1
 80059da:	2300      	movne	r3, #0
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d010      	beq.n	8005a04 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80059e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80059e4:	689a      	ldr	r2, [r3, #8]
 80059e6:	4b12      	ldr	r3, [pc, #72]	; (8005a30 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80059e8:	4013      	ands	r3, r2
 80059ea:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80059ec:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80059ee:	e009      	b.n	8005a04 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059f4:	f043 0220 	orr.w	r2, r3, #32
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8005a02:	e000      	b.n	8005a06 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005a04:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005a0e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	378c      	adds	r7, #140	; 0x8c
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd90      	pop	{r4, r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	40022000 	.word	0x40022000
 8005a20:	40022100 	.word	0x40022100
 8005a24:	40022300 	.word	0x40022300
 8005a28:	58026300 	.word	0x58026300
 8005a2c:	58026000 	.word	0x58026000
 8005a30:	fffff0e0 	.word	0xfffff0e0

08005a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f003 0307 	and.w	r3, r3, #7
 8005a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a44:	4b0b      	ldr	r3, [pc, #44]	; (8005a74 <__NVIC_SetPriorityGrouping+0x40>)
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a50:	4013      	ands	r3, r2
 8005a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005a5c:	4b06      	ldr	r3, [pc, #24]	; (8005a78 <__NVIC_SetPriorityGrouping+0x44>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a62:	4a04      	ldr	r2, [pc, #16]	; (8005a74 <__NVIC_SetPriorityGrouping+0x40>)
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	60d3      	str	r3, [r2, #12]
}
 8005a68:	bf00      	nop
 8005a6a:	3714      	adds	r7, #20
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr
 8005a74:	e000ed00 	.word	0xe000ed00
 8005a78:	05fa0000 	.word	0x05fa0000

08005a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a80:	4b04      	ldr	r3, [pc, #16]	; (8005a94 <__NVIC_GetPriorityGrouping+0x18>)
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	0a1b      	lsrs	r3, r3, #8
 8005a86:	f003 0307 	and.w	r3, r3, #7
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr
 8005a94:	e000ed00 	.word	0xe000ed00

08005a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005aa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	db0b      	blt.n	8005ac2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005aaa:	88fb      	ldrh	r3, [r7, #6]
 8005aac:	f003 021f 	and.w	r2, r3, #31
 8005ab0:	4907      	ldr	r1, [pc, #28]	; (8005ad0 <__NVIC_EnableIRQ+0x38>)
 8005ab2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ab6:	095b      	lsrs	r3, r3, #5
 8005ab8:	2001      	movs	r0, #1
 8005aba:	fa00 f202 	lsl.w	r2, r0, r2
 8005abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005ac2:	bf00      	nop
 8005ac4:	370c      	adds	r7, #12
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	e000e100 	.word	0xe000e100

08005ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	4603      	mov	r3, r0
 8005adc:	6039      	str	r1, [r7, #0]
 8005ade:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005ae0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	db0a      	blt.n	8005afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	b2da      	uxtb	r2, r3
 8005aec:	490c      	ldr	r1, [pc, #48]	; (8005b20 <__NVIC_SetPriority+0x4c>)
 8005aee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005af2:	0112      	lsls	r2, r2, #4
 8005af4:	b2d2      	uxtb	r2, r2
 8005af6:	440b      	add	r3, r1
 8005af8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005afc:	e00a      	b.n	8005b14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	b2da      	uxtb	r2, r3
 8005b02:	4908      	ldr	r1, [pc, #32]	; (8005b24 <__NVIC_SetPriority+0x50>)
 8005b04:	88fb      	ldrh	r3, [r7, #6]
 8005b06:	f003 030f 	and.w	r3, r3, #15
 8005b0a:	3b04      	subs	r3, #4
 8005b0c:	0112      	lsls	r2, r2, #4
 8005b0e:	b2d2      	uxtb	r2, r2
 8005b10:	440b      	add	r3, r1
 8005b12:	761a      	strb	r2, [r3, #24]
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr
 8005b20:	e000e100 	.word	0xe000e100
 8005b24:	e000ed00 	.word	0xe000ed00

08005b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b089      	sub	sp, #36	; 0x24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f003 0307 	and.w	r3, r3, #7
 8005b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	f1c3 0307 	rsb	r3, r3, #7
 8005b42:	2b04      	cmp	r3, #4
 8005b44:	bf28      	it	cs
 8005b46:	2304      	movcs	r3, #4
 8005b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	3304      	adds	r3, #4
 8005b4e:	2b06      	cmp	r3, #6
 8005b50:	d902      	bls.n	8005b58 <NVIC_EncodePriority+0x30>
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	3b03      	subs	r3, #3
 8005b56:	e000      	b.n	8005b5a <NVIC_EncodePriority+0x32>
 8005b58:	2300      	movs	r3, #0
 8005b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	fa02 f303 	lsl.w	r3, r2, r3
 8005b66:	43da      	mvns	r2, r3
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	401a      	ands	r2, r3
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b70:	f04f 31ff 	mov.w	r1, #4294967295
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	fa01 f303 	lsl.w	r3, r1, r3
 8005b7a:	43d9      	mvns	r1, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b80:	4313      	orrs	r3, r2
         );
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3724      	adds	r7, #36	; 0x24
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
	...

08005b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ba0:	d301      	bcc.n	8005ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e00f      	b.n	8005bc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005ba6:	4a0a      	ldr	r2, [pc, #40]	; (8005bd0 <SysTick_Config+0x40>)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	3b01      	subs	r3, #1
 8005bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005bae:	210f      	movs	r1, #15
 8005bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8005bb4:	f7ff ff8e 	bl	8005ad4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005bb8:	4b05      	ldr	r3, [pc, #20]	; (8005bd0 <SysTick_Config+0x40>)
 8005bba:	2200      	movs	r2, #0
 8005bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005bbe:	4b04      	ldr	r3, [pc, #16]	; (8005bd0 <SysTick_Config+0x40>)
 8005bc0:	2207      	movs	r2, #7
 8005bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	e000e010 	.word	0xe000e010

08005bd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f7ff ff29 	bl	8005a34 <__NVIC_SetPriorityGrouping>
}
 8005be2:	bf00      	nop
 8005be4:	3708      	adds	r7, #8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b086      	sub	sp, #24
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	60b9      	str	r1, [r7, #8]
 8005bf4:	607a      	str	r2, [r7, #4]
 8005bf6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005bf8:	f7ff ff40 	bl	8005a7c <__NVIC_GetPriorityGrouping>
 8005bfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	68b9      	ldr	r1, [r7, #8]
 8005c02:	6978      	ldr	r0, [r7, #20]
 8005c04:	f7ff ff90 	bl	8005b28 <NVIC_EncodePriority>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005c0e:	4611      	mov	r1, r2
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7ff ff5f 	bl	8005ad4 <__NVIC_SetPriority>
}
 8005c16:	bf00      	nop
 8005c18:	3718      	adds	r7, #24
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b082      	sub	sp, #8
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	4603      	mov	r3, r0
 8005c26:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7ff ff33 	bl	8005a98 <__NVIC_EnableIRQ>
}
 8005c32:	bf00      	nop
 8005c34:	3708      	adds	r7, #8
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b082      	sub	sp, #8
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f7ff ffa4 	bl	8005b90 <SysTick_Config>
 8005c48:	4603      	mov	r3, r0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3708      	adds	r7, #8
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
	...

08005c54 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b086      	sub	sp, #24
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005c5c:	f7fe fb34 	bl	80042c8 <HAL_GetTick>
 8005c60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d101      	bne.n	8005c6c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e312      	b.n	8006292 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a66      	ldr	r2, [pc, #408]	; (8005e0c <HAL_DMA_Init+0x1b8>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d04a      	beq.n	8005d0c <HAL_DMA_Init+0xb8>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a65      	ldr	r2, [pc, #404]	; (8005e10 <HAL_DMA_Init+0x1bc>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d045      	beq.n	8005d0c <HAL_DMA_Init+0xb8>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a63      	ldr	r2, [pc, #396]	; (8005e14 <HAL_DMA_Init+0x1c0>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d040      	beq.n	8005d0c <HAL_DMA_Init+0xb8>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a62      	ldr	r2, [pc, #392]	; (8005e18 <HAL_DMA_Init+0x1c4>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d03b      	beq.n	8005d0c <HAL_DMA_Init+0xb8>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a60      	ldr	r2, [pc, #384]	; (8005e1c <HAL_DMA_Init+0x1c8>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d036      	beq.n	8005d0c <HAL_DMA_Init+0xb8>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a5f      	ldr	r2, [pc, #380]	; (8005e20 <HAL_DMA_Init+0x1cc>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d031      	beq.n	8005d0c <HAL_DMA_Init+0xb8>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a5d      	ldr	r2, [pc, #372]	; (8005e24 <HAL_DMA_Init+0x1d0>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d02c      	beq.n	8005d0c <HAL_DMA_Init+0xb8>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a5c      	ldr	r2, [pc, #368]	; (8005e28 <HAL_DMA_Init+0x1d4>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d027      	beq.n	8005d0c <HAL_DMA_Init+0xb8>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a5a      	ldr	r2, [pc, #360]	; (8005e2c <HAL_DMA_Init+0x1d8>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d022      	beq.n	8005d0c <HAL_DMA_Init+0xb8>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a59      	ldr	r2, [pc, #356]	; (8005e30 <HAL_DMA_Init+0x1dc>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d01d      	beq.n	8005d0c <HAL_DMA_Init+0xb8>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a57      	ldr	r2, [pc, #348]	; (8005e34 <HAL_DMA_Init+0x1e0>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d018      	beq.n	8005d0c <HAL_DMA_Init+0xb8>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a56      	ldr	r2, [pc, #344]	; (8005e38 <HAL_DMA_Init+0x1e4>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d013      	beq.n	8005d0c <HAL_DMA_Init+0xb8>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a54      	ldr	r2, [pc, #336]	; (8005e3c <HAL_DMA_Init+0x1e8>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d00e      	beq.n	8005d0c <HAL_DMA_Init+0xb8>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a53      	ldr	r2, [pc, #332]	; (8005e40 <HAL_DMA_Init+0x1ec>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d009      	beq.n	8005d0c <HAL_DMA_Init+0xb8>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a51      	ldr	r2, [pc, #324]	; (8005e44 <HAL_DMA_Init+0x1f0>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d004      	beq.n	8005d0c <HAL_DMA_Init+0xb8>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a50      	ldr	r2, [pc, #320]	; (8005e48 <HAL_DMA_Init+0x1f4>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d101      	bne.n	8005d10 <HAL_DMA_Init+0xbc>
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e000      	b.n	8005d12 <HAL_DMA_Init+0xbe>
 8005d10:	2300      	movs	r3, #0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f000 813c 	beq.w	8005f90 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2202      	movs	r2, #2
 8005d1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a37      	ldr	r2, [pc, #220]	; (8005e0c <HAL_DMA_Init+0x1b8>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d04a      	beq.n	8005dc8 <HAL_DMA_Init+0x174>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a36      	ldr	r2, [pc, #216]	; (8005e10 <HAL_DMA_Init+0x1bc>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d045      	beq.n	8005dc8 <HAL_DMA_Init+0x174>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a34      	ldr	r2, [pc, #208]	; (8005e14 <HAL_DMA_Init+0x1c0>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d040      	beq.n	8005dc8 <HAL_DMA_Init+0x174>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a33      	ldr	r2, [pc, #204]	; (8005e18 <HAL_DMA_Init+0x1c4>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d03b      	beq.n	8005dc8 <HAL_DMA_Init+0x174>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a31      	ldr	r2, [pc, #196]	; (8005e1c <HAL_DMA_Init+0x1c8>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d036      	beq.n	8005dc8 <HAL_DMA_Init+0x174>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a30      	ldr	r2, [pc, #192]	; (8005e20 <HAL_DMA_Init+0x1cc>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d031      	beq.n	8005dc8 <HAL_DMA_Init+0x174>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a2e      	ldr	r2, [pc, #184]	; (8005e24 <HAL_DMA_Init+0x1d0>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d02c      	beq.n	8005dc8 <HAL_DMA_Init+0x174>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a2d      	ldr	r2, [pc, #180]	; (8005e28 <HAL_DMA_Init+0x1d4>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d027      	beq.n	8005dc8 <HAL_DMA_Init+0x174>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a2b      	ldr	r2, [pc, #172]	; (8005e2c <HAL_DMA_Init+0x1d8>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d022      	beq.n	8005dc8 <HAL_DMA_Init+0x174>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a2a      	ldr	r2, [pc, #168]	; (8005e30 <HAL_DMA_Init+0x1dc>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d01d      	beq.n	8005dc8 <HAL_DMA_Init+0x174>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a28      	ldr	r2, [pc, #160]	; (8005e34 <HAL_DMA_Init+0x1e0>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d018      	beq.n	8005dc8 <HAL_DMA_Init+0x174>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a27      	ldr	r2, [pc, #156]	; (8005e38 <HAL_DMA_Init+0x1e4>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d013      	beq.n	8005dc8 <HAL_DMA_Init+0x174>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a25      	ldr	r2, [pc, #148]	; (8005e3c <HAL_DMA_Init+0x1e8>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d00e      	beq.n	8005dc8 <HAL_DMA_Init+0x174>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a24      	ldr	r2, [pc, #144]	; (8005e40 <HAL_DMA_Init+0x1ec>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d009      	beq.n	8005dc8 <HAL_DMA_Init+0x174>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a22      	ldr	r2, [pc, #136]	; (8005e44 <HAL_DMA_Init+0x1f0>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d004      	beq.n	8005dc8 <HAL_DMA_Init+0x174>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a21      	ldr	r2, [pc, #132]	; (8005e48 <HAL_DMA_Init+0x1f4>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d108      	bne.n	8005dda <HAL_DMA_Init+0x186>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f022 0201 	bic.w	r2, r2, #1
 8005dd6:	601a      	str	r2, [r3, #0]
 8005dd8:	e007      	b.n	8005dea <HAL_DMA_Init+0x196>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 0201 	bic.w	r2, r2, #1
 8005de8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005dea:	e02f      	b.n	8005e4c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005dec:	f7fe fa6c 	bl	80042c8 <HAL_GetTick>
 8005df0:	4602      	mov	r2, r0
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	2b05      	cmp	r3, #5
 8005df8:	d928      	bls.n	8005e4c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2220      	movs	r2, #32
 8005dfe:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2203      	movs	r2, #3
 8005e04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e242      	b.n	8006292 <HAL_DMA_Init+0x63e>
 8005e0c:	40020010 	.word	0x40020010
 8005e10:	40020028 	.word	0x40020028
 8005e14:	40020040 	.word	0x40020040
 8005e18:	40020058 	.word	0x40020058
 8005e1c:	40020070 	.word	0x40020070
 8005e20:	40020088 	.word	0x40020088
 8005e24:	400200a0 	.word	0x400200a0
 8005e28:	400200b8 	.word	0x400200b8
 8005e2c:	40020410 	.word	0x40020410
 8005e30:	40020428 	.word	0x40020428
 8005e34:	40020440 	.word	0x40020440
 8005e38:	40020458 	.word	0x40020458
 8005e3c:	40020470 	.word	0x40020470
 8005e40:	40020488 	.word	0x40020488
 8005e44:	400204a0 	.word	0x400204a0
 8005e48:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1c8      	bne.n	8005dec <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	4b83      	ldr	r3, [pc, #524]	; (8006074 <HAL_DMA_Init+0x420>)
 8005e66:	4013      	ands	r3, r2
 8005e68:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005e72:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e7e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e8a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a1b      	ldr	r3, [r3, #32]
 8005e90:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005e92:	697a      	ldr	r2, [r7, #20]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9c:	2b04      	cmp	r3, #4
 8005e9e:	d107      	bne.n	8005eb0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	2b28      	cmp	r3, #40	; 0x28
 8005eb6:	d903      	bls.n	8005ec0 <HAL_DMA_Init+0x26c>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	2b2e      	cmp	r3, #46	; 0x2e
 8005ebe:	d91f      	bls.n	8005f00 <HAL_DMA_Init+0x2ac>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	2b3e      	cmp	r3, #62	; 0x3e
 8005ec6:	d903      	bls.n	8005ed0 <HAL_DMA_Init+0x27c>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	2b42      	cmp	r3, #66	; 0x42
 8005ece:	d917      	bls.n	8005f00 <HAL_DMA_Init+0x2ac>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	2b46      	cmp	r3, #70	; 0x46
 8005ed6:	d903      	bls.n	8005ee0 <HAL_DMA_Init+0x28c>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	2b48      	cmp	r3, #72	; 0x48
 8005ede:	d90f      	bls.n	8005f00 <HAL_DMA_Init+0x2ac>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	2b4e      	cmp	r3, #78	; 0x4e
 8005ee6:	d903      	bls.n	8005ef0 <HAL_DMA_Init+0x29c>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	2b52      	cmp	r3, #82	; 0x52
 8005eee:	d907      	bls.n	8005f00 <HAL_DMA_Init+0x2ac>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	2b73      	cmp	r3, #115	; 0x73
 8005ef6:	d905      	bls.n	8005f04 <HAL_DMA_Init+0x2b0>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	2b77      	cmp	r3, #119	; 0x77
 8005efe:	d801      	bhi.n	8005f04 <HAL_DMA_Init+0x2b0>
 8005f00:	2301      	movs	r3, #1
 8005f02:	e000      	b.n	8005f06 <HAL_DMA_Init+0x2b2>
 8005f04:	2300      	movs	r3, #0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d003      	beq.n	8005f12 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f10:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f023 0307 	bic.w	r3, r3, #7
 8005f28:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f38:	2b04      	cmp	r3, #4
 8005f3a:	d117      	bne.n	8005f6c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00e      	beq.n	8005f6c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f001 fdca 	bl	8007ae8 <DMA_CheckFifoParam>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d008      	beq.n	8005f6c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2240      	movs	r2, #64	; 0x40
 8005f5e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e192      	b.n	8006292 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	697a      	ldr	r2, [r7, #20]
 8005f72:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f001 fd05 	bl	8007984 <DMA_CalcBaseAndBitshift>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f82:	f003 031f 	and.w	r3, r3, #31
 8005f86:	223f      	movs	r2, #63	; 0x3f
 8005f88:	409a      	lsls	r2, r3
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	609a      	str	r2, [r3, #8]
 8005f8e:	e0c8      	b.n	8006122 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a38      	ldr	r2, [pc, #224]	; (8006078 <HAL_DMA_Init+0x424>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d022      	beq.n	8005fe0 <HAL_DMA_Init+0x38c>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a37      	ldr	r2, [pc, #220]	; (800607c <HAL_DMA_Init+0x428>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d01d      	beq.n	8005fe0 <HAL_DMA_Init+0x38c>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a35      	ldr	r2, [pc, #212]	; (8006080 <HAL_DMA_Init+0x42c>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d018      	beq.n	8005fe0 <HAL_DMA_Init+0x38c>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a34      	ldr	r2, [pc, #208]	; (8006084 <HAL_DMA_Init+0x430>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d013      	beq.n	8005fe0 <HAL_DMA_Init+0x38c>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a32      	ldr	r2, [pc, #200]	; (8006088 <HAL_DMA_Init+0x434>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d00e      	beq.n	8005fe0 <HAL_DMA_Init+0x38c>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a31      	ldr	r2, [pc, #196]	; (800608c <HAL_DMA_Init+0x438>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d009      	beq.n	8005fe0 <HAL_DMA_Init+0x38c>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a2f      	ldr	r2, [pc, #188]	; (8006090 <HAL_DMA_Init+0x43c>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d004      	beq.n	8005fe0 <HAL_DMA_Init+0x38c>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a2e      	ldr	r2, [pc, #184]	; (8006094 <HAL_DMA_Init+0x440>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d101      	bne.n	8005fe4 <HAL_DMA_Init+0x390>
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e000      	b.n	8005fe6 <HAL_DMA_Init+0x392>
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f000 8092 	beq.w	8006110 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a21      	ldr	r2, [pc, #132]	; (8006078 <HAL_DMA_Init+0x424>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d021      	beq.n	800603a <HAL_DMA_Init+0x3e6>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a20      	ldr	r2, [pc, #128]	; (800607c <HAL_DMA_Init+0x428>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d01c      	beq.n	800603a <HAL_DMA_Init+0x3e6>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a1e      	ldr	r2, [pc, #120]	; (8006080 <HAL_DMA_Init+0x42c>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d017      	beq.n	800603a <HAL_DMA_Init+0x3e6>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a1d      	ldr	r2, [pc, #116]	; (8006084 <HAL_DMA_Init+0x430>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d012      	beq.n	800603a <HAL_DMA_Init+0x3e6>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a1b      	ldr	r2, [pc, #108]	; (8006088 <HAL_DMA_Init+0x434>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d00d      	beq.n	800603a <HAL_DMA_Init+0x3e6>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a1a      	ldr	r2, [pc, #104]	; (800608c <HAL_DMA_Init+0x438>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d008      	beq.n	800603a <HAL_DMA_Init+0x3e6>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a18      	ldr	r2, [pc, #96]	; (8006090 <HAL_DMA_Init+0x43c>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d003      	beq.n	800603a <HAL_DMA_Init+0x3e6>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a17      	ldr	r2, [pc, #92]	; (8006094 <HAL_DMA_Init+0x440>)
 8006038:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2202      	movs	r2, #2
 800603e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006052:	697a      	ldr	r2, [r7, #20]
 8006054:	4b10      	ldr	r3, [pc, #64]	; (8006098 <HAL_DMA_Init+0x444>)
 8006056:	4013      	ands	r3, r2
 8006058:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	2b40      	cmp	r3, #64	; 0x40
 8006060:	d01c      	beq.n	800609c <HAL_DMA_Init+0x448>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	2b80      	cmp	r3, #128	; 0x80
 8006068:	d102      	bne.n	8006070 <HAL_DMA_Init+0x41c>
 800606a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800606e:	e016      	b.n	800609e <HAL_DMA_Init+0x44a>
 8006070:	2300      	movs	r3, #0
 8006072:	e014      	b.n	800609e <HAL_DMA_Init+0x44a>
 8006074:	fe10803f 	.word	0xfe10803f
 8006078:	58025408 	.word	0x58025408
 800607c:	5802541c 	.word	0x5802541c
 8006080:	58025430 	.word	0x58025430
 8006084:	58025444 	.word	0x58025444
 8006088:	58025458 	.word	0x58025458
 800608c:	5802546c 	.word	0x5802546c
 8006090:	58025480 	.word	0x58025480
 8006094:	58025494 	.word	0x58025494
 8006098:	fffe000f 	.word	0xfffe000f
 800609c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	68d2      	ldr	r2, [r2, #12]
 80060a2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80060a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80060ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80060b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80060bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	69db      	ldr	r3, [r3, #28]
 80060c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80060c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80060cc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	461a      	mov	r2, r3
 80060e2:	4b6e      	ldr	r3, [pc, #440]	; (800629c <HAL_DMA_Init+0x648>)
 80060e4:	4413      	add	r3, r2
 80060e6:	4a6e      	ldr	r2, [pc, #440]	; (80062a0 <HAL_DMA_Init+0x64c>)
 80060e8:	fba2 2303 	umull	r2, r3, r2, r3
 80060ec:	091b      	lsrs	r3, r3, #4
 80060ee:	009a      	lsls	r2, r3, #2
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f001 fc45 	bl	8007984 <DMA_CalcBaseAndBitshift>
 80060fa:	4603      	mov	r3, r0
 80060fc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006102:	f003 031f 	and.w	r3, r3, #31
 8006106:	2201      	movs	r2, #1
 8006108:	409a      	lsls	r2, r3
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	605a      	str	r2, [r3, #4]
 800610e:	e008      	b.n	8006122 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2240      	movs	r2, #64	; 0x40
 8006114:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2203      	movs	r2, #3
 800611a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e0b7      	b.n	8006292 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a5f      	ldr	r2, [pc, #380]	; (80062a4 <HAL_DMA_Init+0x650>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d072      	beq.n	8006212 <HAL_DMA_Init+0x5be>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a5d      	ldr	r2, [pc, #372]	; (80062a8 <HAL_DMA_Init+0x654>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d06d      	beq.n	8006212 <HAL_DMA_Init+0x5be>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a5c      	ldr	r2, [pc, #368]	; (80062ac <HAL_DMA_Init+0x658>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d068      	beq.n	8006212 <HAL_DMA_Init+0x5be>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a5a      	ldr	r2, [pc, #360]	; (80062b0 <HAL_DMA_Init+0x65c>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d063      	beq.n	8006212 <HAL_DMA_Init+0x5be>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a59      	ldr	r2, [pc, #356]	; (80062b4 <HAL_DMA_Init+0x660>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d05e      	beq.n	8006212 <HAL_DMA_Init+0x5be>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a57      	ldr	r2, [pc, #348]	; (80062b8 <HAL_DMA_Init+0x664>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d059      	beq.n	8006212 <HAL_DMA_Init+0x5be>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a56      	ldr	r2, [pc, #344]	; (80062bc <HAL_DMA_Init+0x668>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d054      	beq.n	8006212 <HAL_DMA_Init+0x5be>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a54      	ldr	r2, [pc, #336]	; (80062c0 <HAL_DMA_Init+0x66c>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d04f      	beq.n	8006212 <HAL_DMA_Init+0x5be>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a53      	ldr	r2, [pc, #332]	; (80062c4 <HAL_DMA_Init+0x670>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d04a      	beq.n	8006212 <HAL_DMA_Init+0x5be>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a51      	ldr	r2, [pc, #324]	; (80062c8 <HAL_DMA_Init+0x674>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d045      	beq.n	8006212 <HAL_DMA_Init+0x5be>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a50      	ldr	r2, [pc, #320]	; (80062cc <HAL_DMA_Init+0x678>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d040      	beq.n	8006212 <HAL_DMA_Init+0x5be>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a4e      	ldr	r2, [pc, #312]	; (80062d0 <HAL_DMA_Init+0x67c>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d03b      	beq.n	8006212 <HAL_DMA_Init+0x5be>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a4d      	ldr	r2, [pc, #308]	; (80062d4 <HAL_DMA_Init+0x680>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d036      	beq.n	8006212 <HAL_DMA_Init+0x5be>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a4b      	ldr	r2, [pc, #300]	; (80062d8 <HAL_DMA_Init+0x684>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d031      	beq.n	8006212 <HAL_DMA_Init+0x5be>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a4a      	ldr	r2, [pc, #296]	; (80062dc <HAL_DMA_Init+0x688>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d02c      	beq.n	8006212 <HAL_DMA_Init+0x5be>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a48      	ldr	r2, [pc, #288]	; (80062e0 <HAL_DMA_Init+0x68c>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d027      	beq.n	8006212 <HAL_DMA_Init+0x5be>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a47      	ldr	r2, [pc, #284]	; (80062e4 <HAL_DMA_Init+0x690>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d022      	beq.n	8006212 <HAL_DMA_Init+0x5be>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a45      	ldr	r2, [pc, #276]	; (80062e8 <HAL_DMA_Init+0x694>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d01d      	beq.n	8006212 <HAL_DMA_Init+0x5be>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a44      	ldr	r2, [pc, #272]	; (80062ec <HAL_DMA_Init+0x698>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d018      	beq.n	8006212 <HAL_DMA_Init+0x5be>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a42      	ldr	r2, [pc, #264]	; (80062f0 <HAL_DMA_Init+0x69c>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d013      	beq.n	8006212 <HAL_DMA_Init+0x5be>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a41      	ldr	r2, [pc, #260]	; (80062f4 <HAL_DMA_Init+0x6a0>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d00e      	beq.n	8006212 <HAL_DMA_Init+0x5be>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a3f      	ldr	r2, [pc, #252]	; (80062f8 <HAL_DMA_Init+0x6a4>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d009      	beq.n	8006212 <HAL_DMA_Init+0x5be>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a3e      	ldr	r2, [pc, #248]	; (80062fc <HAL_DMA_Init+0x6a8>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d004      	beq.n	8006212 <HAL_DMA_Init+0x5be>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a3c      	ldr	r2, [pc, #240]	; (8006300 <HAL_DMA_Init+0x6ac>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d101      	bne.n	8006216 <HAL_DMA_Init+0x5c2>
 8006212:	2301      	movs	r3, #1
 8006214:	e000      	b.n	8006218 <HAL_DMA_Init+0x5c4>
 8006216:	2300      	movs	r3, #0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d032      	beq.n	8006282 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f001 fcdf 	bl	8007be0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	2b80      	cmp	r3, #128	; 0x80
 8006228:	d102      	bne.n	8006230 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006238:	b2d2      	uxtb	r2, r2
 800623a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006244:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d010      	beq.n	8006270 <HAL_DMA_Init+0x61c>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	2b08      	cmp	r3, #8
 8006254:	d80c      	bhi.n	8006270 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f001 fd5c 	bl	8007d14 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006260:	2200      	movs	r2, #0
 8006262:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800626c:	605a      	str	r2, [r3, #4]
 800626e:	e008      	b.n	8006282 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3718      	adds	r7, #24
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	a7fdabf8 	.word	0xa7fdabf8
 80062a0:	cccccccd 	.word	0xcccccccd
 80062a4:	40020010 	.word	0x40020010
 80062a8:	40020028 	.word	0x40020028
 80062ac:	40020040 	.word	0x40020040
 80062b0:	40020058 	.word	0x40020058
 80062b4:	40020070 	.word	0x40020070
 80062b8:	40020088 	.word	0x40020088
 80062bc:	400200a0 	.word	0x400200a0
 80062c0:	400200b8 	.word	0x400200b8
 80062c4:	40020410 	.word	0x40020410
 80062c8:	40020428 	.word	0x40020428
 80062cc:	40020440 	.word	0x40020440
 80062d0:	40020458 	.word	0x40020458
 80062d4:	40020470 	.word	0x40020470
 80062d8:	40020488 	.word	0x40020488
 80062dc:	400204a0 	.word	0x400204a0
 80062e0:	400204b8 	.word	0x400204b8
 80062e4:	58025408 	.word	0x58025408
 80062e8:	5802541c 	.word	0x5802541c
 80062ec:	58025430 	.word	0x58025430
 80062f0:	58025444 	.word	0x58025444
 80062f4:	58025458 	.word	0x58025458
 80062f8:	5802546c 	.word	0x5802546c
 80062fc:	58025480 	.word	0x58025480
 8006300:	58025494 	.word	0x58025494

08006304 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b086      	sub	sp, #24
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
 8006310:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006312:	2300      	movs	r3, #0
 8006314:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d101      	bne.n	8006320 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e226      	b.n	800676e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006326:	2b01      	cmp	r3, #1
 8006328:	d101      	bne.n	800632e <HAL_DMA_Start_IT+0x2a>
 800632a:	2302      	movs	r3, #2
 800632c:	e21f      	b.n	800676e <HAL_DMA_Start_IT+0x46a>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2b01      	cmp	r3, #1
 8006340:	f040 820a 	bne.w	8006758 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2202      	movs	r2, #2
 8006348:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a68      	ldr	r2, [pc, #416]	; (80064f8 <HAL_DMA_Start_IT+0x1f4>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d04a      	beq.n	80063f2 <HAL_DMA_Start_IT+0xee>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a66      	ldr	r2, [pc, #408]	; (80064fc <HAL_DMA_Start_IT+0x1f8>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d045      	beq.n	80063f2 <HAL_DMA_Start_IT+0xee>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a65      	ldr	r2, [pc, #404]	; (8006500 <HAL_DMA_Start_IT+0x1fc>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d040      	beq.n	80063f2 <HAL_DMA_Start_IT+0xee>
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a63      	ldr	r2, [pc, #396]	; (8006504 <HAL_DMA_Start_IT+0x200>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d03b      	beq.n	80063f2 <HAL_DMA_Start_IT+0xee>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a62      	ldr	r2, [pc, #392]	; (8006508 <HAL_DMA_Start_IT+0x204>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d036      	beq.n	80063f2 <HAL_DMA_Start_IT+0xee>
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a60      	ldr	r2, [pc, #384]	; (800650c <HAL_DMA_Start_IT+0x208>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d031      	beq.n	80063f2 <HAL_DMA_Start_IT+0xee>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a5f      	ldr	r2, [pc, #380]	; (8006510 <HAL_DMA_Start_IT+0x20c>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d02c      	beq.n	80063f2 <HAL_DMA_Start_IT+0xee>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a5d      	ldr	r2, [pc, #372]	; (8006514 <HAL_DMA_Start_IT+0x210>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d027      	beq.n	80063f2 <HAL_DMA_Start_IT+0xee>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a5c      	ldr	r2, [pc, #368]	; (8006518 <HAL_DMA_Start_IT+0x214>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d022      	beq.n	80063f2 <HAL_DMA_Start_IT+0xee>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a5a      	ldr	r2, [pc, #360]	; (800651c <HAL_DMA_Start_IT+0x218>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d01d      	beq.n	80063f2 <HAL_DMA_Start_IT+0xee>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a59      	ldr	r2, [pc, #356]	; (8006520 <HAL_DMA_Start_IT+0x21c>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d018      	beq.n	80063f2 <HAL_DMA_Start_IT+0xee>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a57      	ldr	r2, [pc, #348]	; (8006524 <HAL_DMA_Start_IT+0x220>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d013      	beq.n	80063f2 <HAL_DMA_Start_IT+0xee>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a56      	ldr	r2, [pc, #344]	; (8006528 <HAL_DMA_Start_IT+0x224>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d00e      	beq.n	80063f2 <HAL_DMA_Start_IT+0xee>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a54      	ldr	r2, [pc, #336]	; (800652c <HAL_DMA_Start_IT+0x228>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d009      	beq.n	80063f2 <HAL_DMA_Start_IT+0xee>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a53      	ldr	r2, [pc, #332]	; (8006530 <HAL_DMA_Start_IT+0x22c>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d004      	beq.n	80063f2 <HAL_DMA_Start_IT+0xee>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a51      	ldr	r2, [pc, #324]	; (8006534 <HAL_DMA_Start_IT+0x230>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d108      	bne.n	8006404 <HAL_DMA_Start_IT+0x100>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f022 0201 	bic.w	r2, r2, #1
 8006400:	601a      	str	r2, [r3, #0]
 8006402:	e007      	b.n	8006414 <HAL_DMA_Start_IT+0x110>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f022 0201 	bic.w	r2, r2, #1
 8006412:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	68b9      	ldr	r1, [r7, #8]
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f001 f906 	bl	800762c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a34      	ldr	r2, [pc, #208]	; (80064f8 <HAL_DMA_Start_IT+0x1f4>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d04a      	beq.n	80064c0 <HAL_DMA_Start_IT+0x1bc>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a33      	ldr	r2, [pc, #204]	; (80064fc <HAL_DMA_Start_IT+0x1f8>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d045      	beq.n	80064c0 <HAL_DMA_Start_IT+0x1bc>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a31      	ldr	r2, [pc, #196]	; (8006500 <HAL_DMA_Start_IT+0x1fc>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d040      	beq.n	80064c0 <HAL_DMA_Start_IT+0x1bc>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a30      	ldr	r2, [pc, #192]	; (8006504 <HAL_DMA_Start_IT+0x200>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d03b      	beq.n	80064c0 <HAL_DMA_Start_IT+0x1bc>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a2e      	ldr	r2, [pc, #184]	; (8006508 <HAL_DMA_Start_IT+0x204>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d036      	beq.n	80064c0 <HAL_DMA_Start_IT+0x1bc>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a2d      	ldr	r2, [pc, #180]	; (800650c <HAL_DMA_Start_IT+0x208>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d031      	beq.n	80064c0 <HAL_DMA_Start_IT+0x1bc>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a2b      	ldr	r2, [pc, #172]	; (8006510 <HAL_DMA_Start_IT+0x20c>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d02c      	beq.n	80064c0 <HAL_DMA_Start_IT+0x1bc>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a2a      	ldr	r2, [pc, #168]	; (8006514 <HAL_DMA_Start_IT+0x210>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d027      	beq.n	80064c0 <HAL_DMA_Start_IT+0x1bc>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a28      	ldr	r2, [pc, #160]	; (8006518 <HAL_DMA_Start_IT+0x214>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d022      	beq.n	80064c0 <HAL_DMA_Start_IT+0x1bc>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a27      	ldr	r2, [pc, #156]	; (800651c <HAL_DMA_Start_IT+0x218>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d01d      	beq.n	80064c0 <HAL_DMA_Start_IT+0x1bc>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a25      	ldr	r2, [pc, #148]	; (8006520 <HAL_DMA_Start_IT+0x21c>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d018      	beq.n	80064c0 <HAL_DMA_Start_IT+0x1bc>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a24      	ldr	r2, [pc, #144]	; (8006524 <HAL_DMA_Start_IT+0x220>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d013      	beq.n	80064c0 <HAL_DMA_Start_IT+0x1bc>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a22      	ldr	r2, [pc, #136]	; (8006528 <HAL_DMA_Start_IT+0x224>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d00e      	beq.n	80064c0 <HAL_DMA_Start_IT+0x1bc>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a21      	ldr	r2, [pc, #132]	; (800652c <HAL_DMA_Start_IT+0x228>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d009      	beq.n	80064c0 <HAL_DMA_Start_IT+0x1bc>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a1f      	ldr	r2, [pc, #124]	; (8006530 <HAL_DMA_Start_IT+0x22c>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d004      	beq.n	80064c0 <HAL_DMA_Start_IT+0x1bc>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a1e      	ldr	r2, [pc, #120]	; (8006534 <HAL_DMA_Start_IT+0x230>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d101      	bne.n	80064c4 <HAL_DMA_Start_IT+0x1c0>
 80064c0:	2301      	movs	r3, #1
 80064c2:	e000      	b.n	80064c6 <HAL_DMA_Start_IT+0x1c2>
 80064c4:	2300      	movs	r3, #0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d036      	beq.n	8006538 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f023 021e 	bic.w	r2, r3, #30
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f042 0216 	orr.w	r2, r2, #22
 80064dc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d03e      	beq.n	8006564 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f042 0208 	orr.w	r2, r2, #8
 80064f4:	601a      	str	r2, [r3, #0]
 80064f6:	e035      	b.n	8006564 <HAL_DMA_Start_IT+0x260>
 80064f8:	40020010 	.word	0x40020010
 80064fc:	40020028 	.word	0x40020028
 8006500:	40020040 	.word	0x40020040
 8006504:	40020058 	.word	0x40020058
 8006508:	40020070 	.word	0x40020070
 800650c:	40020088 	.word	0x40020088
 8006510:	400200a0 	.word	0x400200a0
 8006514:	400200b8 	.word	0x400200b8
 8006518:	40020410 	.word	0x40020410
 800651c:	40020428 	.word	0x40020428
 8006520:	40020440 	.word	0x40020440
 8006524:	40020458 	.word	0x40020458
 8006528:	40020470 	.word	0x40020470
 800652c:	40020488 	.word	0x40020488
 8006530:	400204a0 	.word	0x400204a0
 8006534:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f023 020e 	bic.w	r2, r3, #14
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f042 020a 	orr.w	r2, r2, #10
 800654a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006550:	2b00      	cmp	r3, #0
 8006552:	d007      	beq.n	8006564 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f042 0204 	orr.w	r2, r2, #4
 8006562:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a83      	ldr	r2, [pc, #524]	; (8006778 <HAL_DMA_Start_IT+0x474>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d072      	beq.n	8006654 <HAL_DMA_Start_IT+0x350>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a82      	ldr	r2, [pc, #520]	; (800677c <HAL_DMA_Start_IT+0x478>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d06d      	beq.n	8006654 <HAL_DMA_Start_IT+0x350>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a80      	ldr	r2, [pc, #512]	; (8006780 <HAL_DMA_Start_IT+0x47c>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d068      	beq.n	8006654 <HAL_DMA_Start_IT+0x350>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a7f      	ldr	r2, [pc, #508]	; (8006784 <HAL_DMA_Start_IT+0x480>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d063      	beq.n	8006654 <HAL_DMA_Start_IT+0x350>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a7d      	ldr	r2, [pc, #500]	; (8006788 <HAL_DMA_Start_IT+0x484>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d05e      	beq.n	8006654 <HAL_DMA_Start_IT+0x350>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a7c      	ldr	r2, [pc, #496]	; (800678c <HAL_DMA_Start_IT+0x488>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d059      	beq.n	8006654 <HAL_DMA_Start_IT+0x350>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a7a      	ldr	r2, [pc, #488]	; (8006790 <HAL_DMA_Start_IT+0x48c>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d054      	beq.n	8006654 <HAL_DMA_Start_IT+0x350>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a79      	ldr	r2, [pc, #484]	; (8006794 <HAL_DMA_Start_IT+0x490>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d04f      	beq.n	8006654 <HAL_DMA_Start_IT+0x350>
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a77      	ldr	r2, [pc, #476]	; (8006798 <HAL_DMA_Start_IT+0x494>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d04a      	beq.n	8006654 <HAL_DMA_Start_IT+0x350>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a76      	ldr	r2, [pc, #472]	; (800679c <HAL_DMA_Start_IT+0x498>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d045      	beq.n	8006654 <HAL_DMA_Start_IT+0x350>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a74      	ldr	r2, [pc, #464]	; (80067a0 <HAL_DMA_Start_IT+0x49c>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d040      	beq.n	8006654 <HAL_DMA_Start_IT+0x350>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a73      	ldr	r2, [pc, #460]	; (80067a4 <HAL_DMA_Start_IT+0x4a0>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d03b      	beq.n	8006654 <HAL_DMA_Start_IT+0x350>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a71      	ldr	r2, [pc, #452]	; (80067a8 <HAL_DMA_Start_IT+0x4a4>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d036      	beq.n	8006654 <HAL_DMA_Start_IT+0x350>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a70      	ldr	r2, [pc, #448]	; (80067ac <HAL_DMA_Start_IT+0x4a8>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d031      	beq.n	8006654 <HAL_DMA_Start_IT+0x350>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a6e      	ldr	r2, [pc, #440]	; (80067b0 <HAL_DMA_Start_IT+0x4ac>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d02c      	beq.n	8006654 <HAL_DMA_Start_IT+0x350>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a6d      	ldr	r2, [pc, #436]	; (80067b4 <HAL_DMA_Start_IT+0x4b0>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d027      	beq.n	8006654 <HAL_DMA_Start_IT+0x350>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a6b      	ldr	r2, [pc, #428]	; (80067b8 <HAL_DMA_Start_IT+0x4b4>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d022      	beq.n	8006654 <HAL_DMA_Start_IT+0x350>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a6a      	ldr	r2, [pc, #424]	; (80067bc <HAL_DMA_Start_IT+0x4b8>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d01d      	beq.n	8006654 <HAL_DMA_Start_IT+0x350>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a68      	ldr	r2, [pc, #416]	; (80067c0 <HAL_DMA_Start_IT+0x4bc>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d018      	beq.n	8006654 <HAL_DMA_Start_IT+0x350>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a67      	ldr	r2, [pc, #412]	; (80067c4 <HAL_DMA_Start_IT+0x4c0>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d013      	beq.n	8006654 <HAL_DMA_Start_IT+0x350>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a65      	ldr	r2, [pc, #404]	; (80067c8 <HAL_DMA_Start_IT+0x4c4>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d00e      	beq.n	8006654 <HAL_DMA_Start_IT+0x350>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a64      	ldr	r2, [pc, #400]	; (80067cc <HAL_DMA_Start_IT+0x4c8>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d009      	beq.n	8006654 <HAL_DMA_Start_IT+0x350>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a62      	ldr	r2, [pc, #392]	; (80067d0 <HAL_DMA_Start_IT+0x4cc>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d004      	beq.n	8006654 <HAL_DMA_Start_IT+0x350>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a61      	ldr	r2, [pc, #388]	; (80067d4 <HAL_DMA_Start_IT+0x4d0>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d101      	bne.n	8006658 <HAL_DMA_Start_IT+0x354>
 8006654:	2301      	movs	r3, #1
 8006656:	e000      	b.n	800665a <HAL_DMA_Start_IT+0x356>
 8006658:	2300      	movs	r3, #0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d01a      	beq.n	8006694 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006668:	2b00      	cmp	r3, #0
 800666a:	d007      	beq.n	800667c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006676:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800667a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006680:	2b00      	cmp	r3, #0
 8006682:	d007      	beq.n	8006694 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800668e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006692:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a37      	ldr	r2, [pc, #220]	; (8006778 <HAL_DMA_Start_IT+0x474>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d04a      	beq.n	8006734 <HAL_DMA_Start_IT+0x430>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a36      	ldr	r2, [pc, #216]	; (800677c <HAL_DMA_Start_IT+0x478>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d045      	beq.n	8006734 <HAL_DMA_Start_IT+0x430>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a34      	ldr	r2, [pc, #208]	; (8006780 <HAL_DMA_Start_IT+0x47c>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d040      	beq.n	8006734 <HAL_DMA_Start_IT+0x430>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a33      	ldr	r2, [pc, #204]	; (8006784 <HAL_DMA_Start_IT+0x480>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d03b      	beq.n	8006734 <HAL_DMA_Start_IT+0x430>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a31      	ldr	r2, [pc, #196]	; (8006788 <HAL_DMA_Start_IT+0x484>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d036      	beq.n	8006734 <HAL_DMA_Start_IT+0x430>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a30      	ldr	r2, [pc, #192]	; (800678c <HAL_DMA_Start_IT+0x488>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d031      	beq.n	8006734 <HAL_DMA_Start_IT+0x430>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a2e      	ldr	r2, [pc, #184]	; (8006790 <HAL_DMA_Start_IT+0x48c>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d02c      	beq.n	8006734 <HAL_DMA_Start_IT+0x430>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a2d      	ldr	r2, [pc, #180]	; (8006794 <HAL_DMA_Start_IT+0x490>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d027      	beq.n	8006734 <HAL_DMA_Start_IT+0x430>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a2b      	ldr	r2, [pc, #172]	; (8006798 <HAL_DMA_Start_IT+0x494>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d022      	beq.n	8006734 <HAL_DMA_Start_IT+0x430>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a2a      	ldr	r2, [pc, #168]	; (800679c <HAL_DMA_Start_IT+0x498>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d01d      	beq.n	8006734 <HAL_DMA_Start_IT+0x430>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a28      	ldr	r2, [pc, #160]	; (80067a0 <HAL_DMA_Start_IT+0x49c>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d018      	beq.n	8006734 <HAL_DMA_Start_IT+0x430>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a27      	ldr	r2, [pc, #156]	; (80067a4 <HAL_DMA_Start_IT+0x4a0>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d013      	beq.n	8006734 <HAL_DMA_Start_IT+0x430>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a25      	ldr	r2, [pc, #148]	; (80067a8 <HAL_DMA_Start_IT+0x4a4>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d00e      	beq.n	8006734 <HAL_DMA_Start_IT+0x430>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a24      	ldr	r2, [pc, #144]	; (80067ac <HAL_DMA_Start_IT+0x4a8>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d009      	beq.n	8006734 <HAL_DMA_Start_IT+0x430>
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a22      	ldr	r2, [pc, #136]	; (80067b0 <HAL_DMA_Start_IT+0x4ac>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d004      	beq.n	8006734 <HAL_DMA_Start_IT+0x430>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a21      	ldr	r2, [pc, #132]	; (80067b4 <HAL_DMA_Start_IT+0x4b0>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d108      	bne.n	8006746 <HAL_DMA_Start_IT+0x442>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f042 0201 	orr.w	r2, r2, #1
 8006742:	601a      	str	r2, [r3, #0]
 8006744:	e012      	b.n	800676c <HAL_DMA_Start_IT+0x468>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f042 0201 	orr.w	r2, r2, #1
 8006754:	601a      	str	r2, [r3, #0]
 8006756:	e009      	b.n	800676c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800675e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800676c:	7dfb      	ldrb	r3, [r7, #23]
}
 800676e:	4618      	mov	r0, r3
 8006770:	3718      	adds	r7, #24
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	40020010 	.word	0x40020010
 800677c:	40020028 	.word	0x40020028
 8006780:	40020040 	.word	0x40020040
 8006784:	40020058 	.word	0x40020058
 8006788:	40020070 	.word	0x40020070
 800678c:	40020088 	.word	0x40020088
 8006790:	400200a0 	.word	0x400200a0
 8006794:	400200b8 	.word	0x400200b8
 8006798:	40020410 	.word	0x40020410
 800679c:	40020428 	.word	0x40020428
 80067a0:	40020440 	.word	0x40020440
 80067a4:	40020458 	.word	0x40020458
 80067a8:	40020470 	.word	0x40020470
 80067ac:	40020488 	.word	0x40020488
 80067b0:	400204a0 	.word	0x400204a0
 80067b4:	400204b8 	.word	0x400204b8
 80067b8:	58025408 	.word	0x58025408
 80067bc:	5802541c 	.word	0x5802541c
 80067c0:	58025430 	.word	0x58025430
 80067c4:	58025444 	.word	0x58025444
 80067c8:	58025458 	.word	0x58025458
 80067cc:	5802546c 	.word	0x5802546c
 80067d0:	58025480 	.word	0x58025480
 80067d4:	58025494 	.word	0x58025494

080067d8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b08a      	sub	sp, #40	; 0x28
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80067e0:	2300      	movs	r3, #0
 80067e2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80067e4:	4b67      	ldr	r3, [pc, #412]	; (8006984 <HAL_DMA_IRQHandler+0x1ac>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a67      	ldr	r2, [pc, #412]	; (8006988 <HAL_DMA_IRQHandler+0x1b0>)
 80067ea:	fba2 2303 	umull	r2, r3, r2, r3
 80067ee:	0a9b      	lsrs	r3, r3, #10
 80067f0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067fc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80067fe:	6a3b      	ldr	r3, [r7, #32]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a5f      	ldr	r2, [pc, #380]	; (800698c <HAL_DMA_IRQHandler+0x1b4>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d04a      	beq.n	80068aa <HAL_DMA_IRQHandler+0xd2>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a5d      	ldr	r2, [pc, #372]	; (8006990 <HAL_DMA_IRQHandler+0x1b8>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d045      	beq.n	80068aa <HAL_DMA_IRQHandler+0xd2>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a5c      	ldr	r2, [pc, #368]	; (8006994 <HAL_DMA_IRQHandler+0x1bc>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d040      	beq.n	80068aa <HAL_DMA_IRQHandler+0xd2>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a5a      	ldr	r2, [pc, #360]	; (8006998 <HAL_DMA_IRQHandler+0x1c0>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d03b      	beq.n	80068aa <HAL_DMA_IRQHandler+0xd2>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a59      	ldr	r2, [pc, #356]	; (800699c <HAL_DMA_IRQHandler+0x1c4>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d036      	beq.n	80068aa <HAL_DMA_IRQHandler+0xd2>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a57      	ldr	r2, [pc, #348]	; (80069a0 <HAL_DMA_IRQHandler+0x1c8>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d031      	beq.n	80068aa <HAL_DMA_IRQHandler+0xd2>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a56      	ldr	r2, [pc, #344]	; (80069a4 <HAL_DMA_IRQHandler+0x1cc>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d02c      	beq.n	80068aa <HAL_DMA_IRQHandler+0xd2>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a54      	ldr	r2, [pc, #336]	; (80069a8 <HAL_DMA_IRQHandler+0x1d0>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d027      	beq.n	80068aa <HAL_DMA_IRQHandler+0xd2>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a53      	ldr	r2, [pc, #332]	; (80069ac <HAL_DMA_IRQHandler+0x1d4>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d022      	beq.n	80068aa <HAL_DMA_IRQHandler+0xd2>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a51      	ldr	r2, [pc, #324]	; (80069b0 <HAL_DMA_IRQHandler+0x1d8>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d01d      	beq.n	80068aa <HAL_DMA_IRQHandler+0xd2>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a50      	ldr	r2, [pc, #320]	; (80069b4 <HAL_DMA_IRQHandler+0x1dc>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d018      	beq.n	80068aa <HAL_DMA_IRQHandler+0xd2>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a4e      	ldr	r2, [pc, #312]	; (80069b8 <HAL_DMA_IRQHandler+0x1e0>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d013      	beq.n	80068aa <HAL_DMA_IRQHandler+0xd2>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a4d      	ldr	r2, [pc, #308]	; (80069bc <HAL_DMA_IRQHandler+0x1e4>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d00e      	beq.n	80068aa <HAL_DMA_IRQHandler+0xd2>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a4b      	ldr	r2, [pc, #300]	; (80069c0 <HAL_DMA_IRQHandler+0x1e8>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d009      	beq.n	80068aa <HAL_DMA_IRQHandler+0xd2>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a4a      	ldr	r2, [pc, #296]	; (80069c4 <HAL_DMA_IRQHandler+0x1ec>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d004      	beq.n	80068aa <HAL_DMA_IRQHandler+0xd2>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a48      	ldr	r2, [pc, #288]	; (80069c8 <HAL_DMA_IRQHandler+0x1f0>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d101      	bne.n	80068ae <HAL_DMA_IRQHandler+0xd6>
 80068aa:	2301      	movs	r3, #1
 80068ac:	e000      	b.n	80068b0 <HAL_DMA_IRQHandler+0xd8>
 80068ae:	2300      	movs	r3, #0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f000 842b 	beq.w	800710c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ba:	f003 031f 	and.w	r3, r3, #31
 80068be:	2208      	movs	r2, #8
 80068c0:	409a      	lsls	r2, r3
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	4013      	ands	r3, r2
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	f000 80a2 	beq.w	8006a10 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a2e      	ldr	r2, [pc, #184]	; (800698c <HAL_DMA_IRQHandler+0x1b4>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d04a      	beq.n	800696c <HAL_DMA_IRQHandler+0x194>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a2d      	ldr	r2, [pc, #180]	; (8006990 <HAL_DMA_IRQHandler+0x1b8>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d045      	beq.n	800696c <HAL_DMA_IRQHandler+0x194>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a2b      	ldr	r2, [pc, #172]	; (8006994 <HAL_DMA_IRQHandler+0x1bc>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d040      	beq.n	800696c <HAL_DMA_IRQHandler+0x194>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a2a      	ldr	r2, [pc, #168]	; (8006998 <HAL_DMA_IRQHandler+0x1c0>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d03b      	beq.n	800696c <HAL_DMA_IRQHandler+0x194>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a28      	ldr	r2, [pc, #160]	; (800699c <HAL_DMA_IRQHandler+0x1c4>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d036      	beq.n	800696c <HAL_DMA_IRQHandler+0x194>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a27      	ldr	r2, [pc, #156]	; (80069a0 <HAL_DMA_IRQHandler+0x1c8>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d031      	beq.n	800696c <HAL_DMA_IRQHandler+0x194>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a25      	ldr	r2, [pc, #148]	; (80069a4 <HAL_DMA_IRQHandler+0x1cc>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d02c      	beq.n	800696c <HAL_DMA_IRQHandler+0x194>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a24      	ldr	r2, [pc, #144]	; (80069a8 <HAL_DMA_IRQHandler+0x1d0>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d027      	beq.n	800696c <HAL_DMA_IRQHandler+0x194>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a22      	ldr	r2, [pc, #136]	; (80069ac <HAL_DMA_IRQHandler+0x1d4>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d022      	beq.n	800696c <HAL_DMA_IRQHandler+0x194>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a21      	ldr	r2, [pc, #132]	; (80069b0 <HAL_DMA_IRQHandler+0x1d8>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d01d      	beq.n	800696c <HAL_DMA_IRQHandler+0x194>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a1f      	ldr	r2, [pc, #124]	; (80069b4 <HAL_DMA_IRQHandler+0x1dc>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d018      	beq.n	800696c <HAL_DMA_IRQHandler+0x194>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a1e      	ldr	r2, [pc, #120]	; (80069b8 <HAL_DMA_IRQHandler+0x1e0>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d013      	beq.n	800696c <HAL_DMA_IRQHandler+0x194>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a1c      	ldr	r2, [pc, #112]	; (80069bc <HAL_DMA_IRQHandler+0x1e4>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d00e      	beq.n	800696c <HAL_DMA_IRQHandler+0x194>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a1b      	ldr	r2, [pc, #108]	; (80069c0 <HAL_DMA_IRQHandler+0x1e8>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d009      	beq.n	800696c <HAL_DMA_IRQHandler+0x194>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a19      	ldr	r2, [pc, #100]	; (80069c4 <HAL_DMA_IRQHandler+0x1ec>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d004      	beq.n	800696c <HAL_DMA_IRQHandler+0x194>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a18      	ldr	r2, [pc, #96]	; (80069c8 <HAL_DMA_IRQHandler+0x1f0>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d12f      	bne.n	80069cc <HAL_DMA_IRQHandler+0x1f4>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 0304 	and.w	r3, r3, #4
 8006976:	2b00      	cmp	r3, #0
 8006978:	bf14      	ite	ne
 800697a:	2301      	movne	r3, #1
 800697c:	2300      	moveq	r3, #0
 800697e:	b2db      	uxtb	r3, r3
 8006980:	e02e      	b.n	80069e0 <HAL_DMA_IRQHandler+0x208>
 8006982:	bf00      	nop
 8006984:	2400002c 	.word	0x2400002c
 8006988:	1b4e81b5 	.word	0x1b4e81b5
 800698c:	40020010 	.word	0x40020010
 8006990:	40020028 	.word	0x40020028
 8006994:	40020040 	.word	0x40020040
 8006998:	40020058 	.word	0x40020058
 800699c:	40020070 	.word	0x40020070
 80069a0:	40020088 	.word	0x40020088
 80069a4:	400200a0 	.word	0x400200a0
 80069a8:	400200b8 	.word	0x400200b8
 80069ac:	40020410 	.word	0x40020410
 80069b0:	40020428 	.word	0x40020428
 80069b4:	40020440 	.word	0x40020440
 80069b8:	40020458 	.word	0x40020458
 80069bc:	40020470 	.word	0x40020470
 80069c0:	40020488 	.word	0x40020488
 80069c4:	400204a0 	.word	0x400204a0
 80069c8:	400204b8 	.word	0x400204b8
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0308 	and.w	r3, r3, #8
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	bf14      	ite	ne
 80069da:	2301      	movne	r3, #1
 80069dc:	2300      	moveq	r3, #0
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d015      	beq.n	8006a10 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f022 0204 	bic.w	r2, r2, #4
 80069f2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069f8:	f003 031f 	and.w	r3, r3, #31
 80069fc:	2208      	movs	r2, #8
 80069fe:	409a      	lsls	r2, r3
 8006a00:	6a3b      	ldr	r3, [r7, #32]
 8006a02:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a08:	f043 0201 	orr.w	r2, r3, #1
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a14:	f003 031f 	and.w	r3, r3, #31
 8006a18:	69ba      	ldr	r2, [r7, #24]
 8006a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a1e:	f003 0301 	and.w	r3, r3, #1
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d06e      	beq.n	8006b04 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a69      	ldr	r2, [pc, #420]	; (8006bd0 <HAL_DMA_IRQHandler+0x3f8>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d04a      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x2ee>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a67      	ldr	r2, [pc, #412]	; (8006bd4 <HAL_DMA_IRQHandler+0x3fc>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d045      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x2ee>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a66      	ldr	r2, [pc, #408]	; (8006bd8 <HAL_DMA_IRQHandler+0x400>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d040      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x2ee>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a64      	ldr	r2, [pc, #400]	; (8006bdc <HAL_DMA_IRQHandler+0x404>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d03b      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x2ee>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a63      	ldr	r2, [pc, #396]	; (8006be0 <HAL_DMA_IRQHandler+0x408>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d036      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x2ee>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a61      	ldr	r2, [pc, #388]	; (8006be4 <HAL_DMA_IRQHandler+0x40c>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d031      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x2ee>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a60      	ldr	r2, [pc, #384]	; (8006be8 <HAL_DMA_IRQHandler+0x410>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d02c      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x2ee>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a5e      	ldr	r2, [pc, #376]	; (8006bec <HAL_DMA_IRQHandler+0x414>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d027      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x2ee>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a5d      	ldr	r2, [pc, #372]	; (8006bf0 <HAL_DMA_IRQHandler+0x418>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d022      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x2ee>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a5b      	ldr	r2, [pc, #364]	; (8006bf4 <HAL_DMA_IRQHandler+0x41c>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d01d      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x2ee>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a5a      	ldr	r2, [pc, #360]	; (8006bf8 <HAL_DMA_IRQHandler+0x420>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d018      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x2ee>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a58      	ldr	r2, [pc, #352]	; (8006bfc <HAL_DMA_IRQHandler+0x424>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d013      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x2ee>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a57      	ldr	r2, [pc, #348]	; (8006c00 <HAL_DMA_IRQHandler+0x428>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d00e      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x2ee>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a55      	ldr	r2, [pc, #340]	; (8006c04 <HAL_DMA_IRQHandler+0x42c>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d009      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x2ee>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a54      	ldr	r2, [pc, #336]	; (8006c08 <HAL_DMA_IRQHandler+0x430>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d004      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x2ee>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a52      	ldr	r2, [pc, #328]	; (8006c0c <HAL_DMA_IRQHandler+0x434>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d10a      	bne.n	8006adc <HAL_DMA_IRQHandler+0x304>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	695b      	ldr	r3, [r3, #20]
 8006acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	bf14      	ite	ne
 8006ad4:	2301      	movne	r3, #1
 8006ad6:	2300      	moveq	r3, #0
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	e003      	b.n	8006ae4 <HAL_DMA_IRQHandler+0x30c>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d00d      	beq.n	8006b04 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aec:	f003 031f 	and.w	r3, r3, #31
 8006af0:	2201      	movs	r2, #1
 8006af2:	409a      	lsls	r2, r3
 8006af4:	6a3b      	ldr	r3, [r7, #32]
 8006af6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006afc:	f043 0202 	orr.w	r2, r3, #2
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b08:	f003 031f 	and.w	r3, r3, #31
 8006b0c:	2204      	movs	r2, #4
 8006b0e:	409a      	lsls	r2, r3
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	4013      	ands	r3, r2
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	f000 808f 	beq.w	8006c38 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a2c      	ldr	r2, [pc, #176]	; (8006bd0 <HAL_DMA_IRQHandler+0x3f8>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d04a      	beq.n	8006bba <HAL_DMA_IRQHandler+0x3e2>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a2a      	ldr	r2, [pc, #168]	; (8006bd4 <HAL_DMA_IRQHandler+0x3fc>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d045      	beq.n	8006bba <HAL_DMA_IRQHandler+0x3e2>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a29      	ldr	r2, [pc, #164]	; (8006bd8 <HAL_DMA_IRQHandler+0x400>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d040      	beq.n	8006bba <HAL_DMA_IRQHandler+0x3e2>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a27      	ldr	r2, [pc, #156]	; (8006bdc <HAL_DMA_IRQHandler+0x404>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d03b      	beq.n	8006bba <HAL_DMA_IRQHandler+0x3e2>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a26      	ldr	r2, [pc, #152]	; (8006be0 <HAL_DMA_IRQHandler+0x408>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d036      	beq.n	8006bba <HAL_DMA_IRQHandler+0x3e2>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a24      	ldr	r2, [pc, #144]	; (8006be4 <HAL_DMA_IRQHandler+0x40c>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d031      	beq.n	8006bba <HAL_DMA_IRQHandler+0x3e2>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a23      	ldr	r2, [pc, #140]	; (8006be8 <HAL_DMA_IRQHandler+0x410>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d02c      	beq.n	8006bba <HAL_DMA_IRQHandler+0x3e2>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a21      	ldr	r2, [pc, #132]	; (8006bec <HAL_DMA_IRQHandler+0x414>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d027      	beq.n	8006bba <HAL_DMA_IRQHandler+0x3e2>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a20      	ldr	r2, [pc, #128]	; (8006bf0 <HAL_DMA_IRQHandler+0x418>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d022      	beq.n	8006bba <HAL_DMA_IRQHandler+0x3e2>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a1e      	ldr	r2, [pc, #120]	; (8006bf4 <HAL_DMA_IRQHandler+0x41c>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d01d      	beq.n	8006bba <HAL_DMA_IRQHandler+0x3e2>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a1d      	ldr	r2, [pc, #116]	; (8006bf8 <HAL_DMA_IRQHandler+0x420>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d018      	beq.n	8006bba <HAL_DMA_IRQHandler+0x3e2>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a1b      	ldr	r2, [pc, #108]	; (8006bfc <HAL_DMA_IRQHandler+0x424>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d013      	beq.n	8006bba <HAL_DMA_IRQHandler+0x3e2>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a1a      	ldr	r2, [pc, #104]	; (8006c00 <HAL_DMA_IRQHandler+0x428>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d00e      	beq.n	8006bba <HAL_DMA_IRQHandler+0x3e2>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a18      	ldr	r2, [pc, #96]	; (8006c04 <HAL_DMA_IRQHandler+0x42c>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d009      	beq.n	8006bba <HAL_DMA_IRQHandler+0x3e2>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a17      	ldr	r2, [pc, #92]	; (8006c08 <HAL_DMA_IRQHandler+0x430>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d004      	beq.n	8006bba <HAL_DMA_IRQHandler+0x3e2>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a15      	ldr	r2, [pc, #84]	; (8006c0c <HAL_DMA_IRQHandler+0x434>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d12a      	bne.n	8006c10 <HAL_DMA_IRQHandler+0x438>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 0302 	and.w	r3, r3, #2
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	bf14      	ite	ne
 8006bc8:	2301      	movne	r3, #1
 8006bca:	2300      	moveq	r3, #0
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	e023      	b.n	8006c18 <HAL_DMA_IRQHandler+0x440>
 8006bd0:	40020010 	.word	0x40020010
 8006bd4:	40020028 	.word	0x40020028
 8006bd8:	40020040 	.word	0x40020040
 8006bdc:	40020058 	.word	0x40020058
 8006be0:	40020070 	.word	0x40020070
 8006be4:	40020088 	.word	0x40020088
 8006be8:	400200a0 	.word	0x400200a0
 8006bec:	400200b8 	.word	0x400200b8
 8006bf0:	40020410 	.word	0x40020410
 8006bf4:	40020428 	.word	0x40020428
 8006bf8:	40020440 	.word	0x40020440
 8006bfc:	40020458 	.word	0x40020458
 8006c00:	40020470 	.word	0x40020470
 8006c04:	40020488 	.word	0x40020488
 8006c08:	400204a0 	.word	0x400204a0
 8006c0c:	400204b8 	.word	0x400204b8
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2300      	movs	r3, #0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00d      	beq.n	8006c38 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c20:	f003 031f 	and.w	r3, r3, #31
 8006c24:	2204      	movs	r2, #4
 8006c26:	409a      	lsls	r2, r3
 8006c28:	6a3b      	ldr	r3, [r7, #32]
 8006c2a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c30:	f043 0204 	orr.w	r2, r3, #4
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c3c:	f003 031f 	and.w	r3, r3, #31
 8006c40:	2210      	movs	r2, #16
 8006c42:	409a      	lsls	r2, r3
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	4013      	ands	r3, r2
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f000 80a6 	beq.w	8006d9a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a85      	ldr	r2, [pc, #532]	; (8006e68 <HAL_DMA_IRQHandler+0x690>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d04a      	beq.n	8006cee <HAL_DMA_IRQHandler+0x516>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a83      	ldr	r2, [pc, #524]	; (8006e6c <HAL_DMA_IRQHandler+0x694>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d045      	beq.n	8006cee <HAL_DMA_IRQHandler+0x516>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a82      	ldr	r2, [pc, #520]	; (8006e70 <HAL_DMA_IRQHandler+0x698>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d040      	beq.n	8006cee <HAL_DMA_IRQHandler+0x516>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a80      	ldr	r2, [pc, #512]	; (8006e74 <HAL_DMA_IRQHandler+0x69c>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d03b      	beq.n	8006cee <HAL_DMA_IRQHandler+0x516>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a7f      	ldr	r2, [pc, #508]	; (8006e78 <HAL_DMA_IRQHandler+0x6a0>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d036      	beq.n	8006cee <HAL_DMA_IRQHandler+0x516>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a7d      	ldr	r2, [pc, #500]	; (8006e7c <HAL_DMA_IRQHandler+0x6a4>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d031      	beq.n	8006cee <HAL_DMA_IRQHandler+0x516>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a7c      	ldr	r2, [pc, #496]	; (8006e80 <HAL_DMA_IRQHandler+0x6a8>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d02c      	beq.n	8006cee <HAL_DMA_IRQHandler+0x516>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a7a      	ldr	r2, [pc, #488]	; (8006e84 <HAL_DMA_IRQHandler+0x6ac>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d027      	beq.n	8006cee <HAL_DMA_IRQHandler+0x516>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a79      	ldr	r2, [pc, #484]	; (8006e88 <HAL_DMA_IRQHandler+0x6b0>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d022      	beq.n	8006cee <HAL_DMA_IRQHandler+0x516>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a77      	ldr	r2, [pc, #476]	; (8006e8c <HAL_DMA_IRQHandler+0x6b4>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d01d      	beq.n	8006cee <HAL_DMA_IRQHandler+0x516>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a76      	ldr	r2, [pc, #472]	; (8006e90 <HAL_DMA_IRQHandler+0x6b8>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d018      	beq.n	8006cee <HAL_DMA_IRQHandler+0x516>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a74      	ldr	r2, [pc, #464]	; (8006e94 <HAL_DMA_IRQHandler+0x6bc>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d013      	beq.n	8006cee <HAL_DMA_IRQHandler+0x516>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a73      	ldr	r2, [pc, #460]	; (8006e98 <HAL_DMA_IRQHandler+0x6c0>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d00e      	beq.n	8006cee <HAL_DMA_IRQHandler+0x516>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a71      	ldr	r2, [pc, #452]	; (8006e9c <HAL_DMA_IRQHandler+0x6c4>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d009      	beq.n	8006cee <HAL_DMA_IRQHandler+0x516>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a70      	ldr	r2, [pc, #448]	; (8006ea0 <HAL_DMA_IRQHandler+0x6c8>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d004      	beq.n	8006cee <HAL_DMA_IRQHandler+0x516>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a6e      	ldr	r2, [pc, #440]	; (8006ea4 <HAL_DMA_IRQHandler+0x6cc>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d10a      	bne.n	8006d04 <HAL_DMA_IRQHandler+0x52c>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0308 	and.w	r3, r3, #8
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	bf14      	ite	ne
 8006cfc:	2301      	movne	r3, #1
 8006cfe:	2300      	moveq	r3, #0
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	e009      	b.n	8006d18 <HAL_DMA_IRQHandler+0x540>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 0304 	and.w	r3, r3, #4
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	bf14      	ite	ne
 8006d12:	2301      	movne	r3, #1
 8006d14:	2300      	moveq	r3, #0
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d03e      	beq.n	8006d9a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d20:	f003 031f 	and.w	r3, r3, #31
 8006d24:	2210      	movs	r2, #16
 8006d26:	409a      	lsls	r2, r3
 8006d28:	6a3b      	ldr	r3, [r7, #32]
 8006d2a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d018      	beq.n	8006d6c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d108      	bne.n	8006d5a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d024      	beq.n	8006d9a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	4798      	blx	r3
 8006d58:	e01f      	b.n	8006d9a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d01b      	beq.n	8006d9a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	4798      	blx	r3
 8006d6a:	e016      	b.n	8006d9a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d107      	bne.n	8006d8a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f022 0208 	bic.w	r2, r2, #8
 8006d88:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d003      	beq.n	8006d9a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d9e:	f003 031f 	and.w	r3, r3, #31
 8006da2:	2220      	movs	r2, #32
 8006da4:	409a      	lsls	r2, r3
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	4013      	ands	r3, r2
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f000 8110 	beq.w	8006fd0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a2c      	ldr	r2, [pc, #176]	; (8006e68 <HAL_DMA_IRQHandler+0x690>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d04a      	beq.n	8006e50 <HAL_DMA_IRQHandler+0x678>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a2b      	ldr	r2, [pc, #172]	; (8006e6c <HAL_DMA_IRQHandler+0x694>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d045      	beq.n	8006e50 <HAL_DMA_IRQHandler+0x678>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a29      	ldr	r2, [pc, #164]	; (8006e70 <HAL_DMA_IRQHandler+0x698>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d040      	beq.n	8006e50 <HAL_DMA_IRQHandler+0x678>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a28      	ldr	r2, [pc, #160]	; (8006e74 <HAL_DMA_IRQHandler+0x69c>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d03b      	beq.n	8006e50 <HAL_DMA_IRQHandler+0x678>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a26      	ldr	r2, [pc, #152]	; (8006e78 <HAL_DMA_IRQHandler+0x6a0>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d036      	beq.n	8006e50 <HAL_DMA_IRQHandler+0x678>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a25      	ldr	r2, [pc, #148]	; (8006e7c <HAL_DMA_IRQHandler+0x6a4>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d031      	beq.n	8006e50 <HAL_DMA_IRQHandler+0x678>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a23      	ldr	r2, [pc, #140]	; (8006e80 <HAL_DMA_IRQHandler+0x6a8>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d02c      	beq.n	8006e50 <HAL_DMA_IRQHandler+0x678>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a22      	ldr	r2, [pc, #136]	; (8006e84 <HAL_DMA_IRQHandler+0x6ac>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d027      	beq.n	8006e50 <HAL_DMA_IRQHandler+0x678>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a20      	ldr	r2, [pc, #128]	; (8006e88 <HAL_DMA_IRQHandler+0x6b0>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d022      	beq.n	8006e50 <HAL_DMA_IRQHandler+0x678>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a1f      	ldr	r2, [pc, #124]	; (8006e8c <HAL_DMA_IRQHandler+0x6b4>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d01d      	beq.n	8006e50 <HAL_DMA_IRQHandler+0x678>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a1d      	ldr	r2, [pc, #116]	; (8006e90 <HAL_DMA_IRQHandler+0x6b8>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d018      	beq.n	8006e50 <HAL_DMA_IRQHandler+0x678>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a1c      	ldr	r2, [pc, #112]	; (8006e94 <HAL_DMA_IRQHandler+0x6bc>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d013      	beq.n	8006e50 <HAL_DMA_IRQHandler+0x678>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a1a      	ldr	r2, [pc, #104]	; (8006e98 <HAL_DMA_IRQHandler+0x6c0>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d00e      	beq.n	8006e50 <HAL_DMA_IRQHandler+0x678>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a19      	ldr	r2, [pc, #100]	; (8006e9c <HAL_DMA_IRQHandler+0x6c4>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d009      	beq.n	8006e50 <HAL_DMA_IRQHandler+0x678>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a17      	ldr	r2, [pc, #92]	; (8006ea0 <HAL_DMA_IRQHandler+0x6c8>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d004      	beq.n	8006e50 <HAL_DMA_IRQHandler+0x678>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a16      	ldr	r2, [pc, #88]	; (8006ea4 <HAL_DMA_IRQHandler+0x6cc>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d12b      	bne.n	8006ea8 <HAL_DMA_IRQHandler+0x6d0>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0310 	and.w	r3, r3, #16
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	bf14      	ite	ne
 8006e5e:	2301      	movne	r3, #1
 8006e60:	2300      	moveq	r3, #0
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	e02a      	b.n	8006ebc <HAL_DMA_IRQHandler+0x6e4>
 8006e66:	bf00      	nop
 8006e68:	40020010 	.word	0x40020010
 8006e6c:	40020028 	.word	0x40020028
 8006e70:	40020040 	.word	0x40020040
 8006e74:	40020058 	.word	0x40020058
 8006e78:	40020070 	.word	0x40020070
 8006e7c:	40020088 	.word	0x40020088
 8006e80:	400200a0 	.word	0x400200a0
 8006e84:	400200b8 	.word	0x400200b8
 8006e88:	40020410 	.word	0x40020410
 8006e8c:	40020428 	.word	0x40020428
 8006e90:	40020440 	.word	0x40020440
 8006e94:	40020458 	.word	0x40020458
 8006e98:	40020470 	.word	0x40020470
 8006e9c:	40020488 	.word	0x40020488
 8006ea0:	400204a0 	.word	0x400204a0
 8006ea4:	400204b8 	.word	0x400204b8
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 0302 	and.w	r3, r3, #2
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	bf14      	ite	ne
 8006eb6:	2301      	movne	r3, #1
 8006eb8:	2300      	moveq	r3, #0
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	f000 8087 	beq.w	8006fd0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ec6:	f003 031f 	and.w	r3, r3, #31
 8006eca:	2220      	movs	r2, #32
 8006ecc:	409a      	lsls	r2, r3
 8006ece:	6a3b      	ldr	r3, [r7, #32]
 8006ed0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	2b04      	cmp	r3, #4
 8006edc:	d139      	bne.n	8006f52 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f022 0216 	bic.w	r2, r2, #22
 8006eec:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	695a      	ldr	r2, [r3, #20]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006efc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d103      	bne.n	8006f0e <HAL_DMA_IRQHandler+0x736>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d007      	beq.n	8006f1e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f022 0208 	bic.w	r2, r2, #8
 8006f1c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f22:	f003 031f 	and.w	r3, r3, #31
 8006f26:	223f      	movs	r2, #63	; 0x3f
 8006f28:	409a      	lsls	r2, r3
 8006f2a:	6a3b      	ldr	r3, [r7, #32]
 8006f2c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	f000 834a 	beq.w	80075dc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	4798      	blx	r3
          }
          return;
 8006f50:	e344      	b.n	80075dc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d018      	beq.n	8006f92 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d108      	bne.n	8006f80 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d02c      	beq.n	8006fd0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	4798      	blx	r3
 8006f7e:	e027      	b.n	8006fd0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d023      	beq.n	8006fd0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	4798      	blx	r3
 8006f90:	e01e      	b.n	8006fd0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d10f      	bne.n	8006fc0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f022 0210 	bic.w	r2, r2, #16
 8006fae:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d003      	beq.n	8006fd0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f000 8306 	beq.w	80075e6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fde:	f003 0301 	and.w	r3, r3, #1
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	f000 8088 	beq.w	80070f8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2204      	movs	r2, #4
 8006fec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a7a      	ldr	r2, [pc, #488]	; (80071e0 <HAL_DMA_IRQHandler+0xa08>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d04a      	beq.n	8007090 <HAL_DMA_IRQHandler+0x8b8>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a79      	ldr	r2, [pc, #484]	; (80071e4 <HAL_DMA_IRQHandler+0xa0c>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d045      	beq.n	8007090 <HAL_DMA_IRQHandler+0x8b8>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a77      	ldr	r2, [pc, #476]	; (80071e8 <HAL_DMA_IRQHandler+0xa10>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d040      	beq.n	8007090 <HAL_DMA_IRQHandler+0x8b8>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a76      	ldr	r2, [pc, #472]	; (80071ec <HAL_DMA_IRQHandler+0xa14>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d03b      	beq.n	8007090 <HAL_DMA_IRQHandler+0x8b8>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a74      	ldr	r2, [pc, #464]	; (80071f0 <HAL_DMA_IRQHandler+0xa18>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d036      	beq.n	8007090 <HAL_DMA_IRQHandler+0x8b8>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a73      	ldr	r2, [pc, #460]	; (80071f4 <HAL_DMA_IRQHandler+0xa1c>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d031      	beq.n	8007090 <HAL_DMA_IRQHandler+0x8b8>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a71      	ldr	r2, [pc, #452]	; (80071f8 <HAL_DMA_IRQHandler+0xa20>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d02c      	beq.n	8007090 <HAL_DMA_IRQHandler+0x8b8>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a70      	ldr	r2, [pc, #448]	; (80071fc <HAL_DMA_IRQHandler+0xa24>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d027      	beq.n	8007090 <HAL_DMA_IRQHandler+0x8b8>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a6e      	ldr	r2, [pc, #440]	; (8007200 <HAL_DMA_IRQHandler+0xa28>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d022      	beq.n	8007090 <HAL_DMA_IRQHandler+0x8b8>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a6d      	ldr	r2, [pc, #436]	; (8007204 <HAL_DMA_IRQHandler+0xa2c>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d01d      	beq.n	8007090 <HAL_DMA_IRQHandler+0x8b8>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a6b      	ldr	r2, [pc, #428]	; (8007208 <HAL_DMA_IRQHandler+0xa30>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d018      	beq.n	8007090 <HAL_DMA_IRQHandler+0x8b8>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a6a      	ldr	r2, [pc, #424]	; (800720c <HAL_DMA_IRQHandler+0xa34>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d013      	beq.n	8007090 <HAL_DMA_IRQHandler+0x8b8>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a68      	ldr	r2, [pc, #416]	; (8007210 <HAL_DMA_IRQHandler+0xa38>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d00e      	beq.n	8007090 <HAL_DMA_IRQHandler+0x8b8>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a67      	ldr	r2, [pc, #412]	; (8007214 <HAL_DMA_IRQHandler+0xa3c>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d009      	beq.n	8007090 <HAL_DMA_IRQHandler+0x8b8>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a65      	ldr	r2, [pc, #404]	; (8007218 <HAL_DMA_IRQHandler+0xa40>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d004      	beq.n	8007090 <HAL_DMA_IRQHandler+0x8b8>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a64      	ldr	r2, [pc, #400]	; (800721c <HAL_DMA_IRQHandler+0xa44>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d108      	bne.n	80070a2 <HAL_DMA_IRQHandler+0x8ca>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f022 0201 	bic.w	r2, r2, #1
 800709e:	601a      	str	r2, [r3, #0]
 80070a0:	e007      	b.n	80070b2 <HAL_DMA_IRQHandler+0x8da>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f022 0201 	bic.w	r2, r2, #1
 80070b0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	3301      	adds	r3, #1
 80070b6:	60fb      	str	r3, [r7, #12]
 80070b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d307      	bcc.n	80070ce <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 0301 	and.w	r3, r3, #1
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1f2      	bne.n	80070b2 <HAL_DMA_IRQHandler+0x8da>
 80070cc:	e000      	b.n	80070d0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80070ce:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 0301 	and.w	r3, r3, #1
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d004      	beq.n	80070e8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2203      	movs	r2, #3
 80070e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80070e6:	e003      	b.n	80070f0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f000 8272 	beq.w	80075e6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	4798      	blx	r3
 800710a:	e26c      	b.n	80075e6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a43      	ldr	r2, [pc, #268]	; (8007220 <HAL_DMA_IRQHandler+0xa48>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d022      	beq.n	800715c <HAL_DMA_IRQHandler+0x984>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a42      	ldr	r2, [pc, #264]	; (8007224 <HAL_DMA_IRQHandler+0xa4c>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d01d      	beq.n	800715c <HAL_DMA_IRQHandler+0x984>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a40      	ldr	r2, [pc, #256]	; (8007228 <HAL_DMA_IRQHandler+0xa50>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d018      	beq.n	800715c <HAL_DMA_IRQHandler+0x984>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a3f      	ldr	r2, [pc, #252]	; (800722c <HAL_DMA_IRQHandler+0xa54>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d013      	beq.n	800715c <HAL_DMA_IRQHandler+0x984>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a3d      	ldr	r2, [pc, #244]	; (8007230 <HAL_DMA_IRQHandler+0xa58>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d00e      	beq.n	800715c <HAL_DMA_IRQHandler+0x984>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a3c      	ldr	r2, [pc, #240]	; (8007234 <HAL_DMA_IRQHandler+0xa5c>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d009      	beq.n	800715c <HAL_DMA_IRQHandler+0x984>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a3a      	ldr	r2, [pc, #232]	; (8007238 <HAL_DMA_IRQHandler+0xa60>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d004      	beq.n	800715c <HAL_DMA_IRQHandler+0x984>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a39      	ldr	r2, [pc, #228]	; (800723c <HAL_DMA_IRQHandler+0xa64>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d101      	bne.n	8007160 <HAL_DMA_IRQHandler+0x988>
 800715c:	2301      	movs	r3, #1
 800715e:	e000      	b.n	8007162 <HAL_DMA_IRQHandler+0x98a>
 8007160:	2300      	movs	r3, #0
 8007162:	2b00      	cmp	r3, #0
 8007164:	f000 823f 	beq.w	80075e6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007174:	f003 031f 	and.w	r3, r3, #31
 8007178:	2204      	movs	r2, #4
 800717a:	409a      	lsls	r2, r3
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	4013      	ands	r3, r2
 8007180:	2b00      	cmp	r3, #0
 8007182:	f000 80cd 	beq.w	8007320 <HAL_DMA_IRQHandler+0xb48>
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	f003 0304 	and.w	r3, r3, #4
 800718c:	2b00      	cmp	r3, #0
 800718e:	f000 80c7 	beq.w	8007320 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007196:	f003 031f 	and.w	r3, r3, #31
 800719a:	2204      	movs	r2, #4
 800719c:	409a      	lsls	r2, r3
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d049      	beq.n	8007240 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d109      	bne.n	80071ca <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	f000 8210 	beq.w	80075e0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071c8:	e20a      	b.n	80075e0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	f000 8206 	beq.w	80075e0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071dc:	e200      	b.n	80075e0 <HAL_DMA_IRQHandler+0xe08>
 80071de:	bf00      	nop
 80071e0:	40020010 	.word	0x40020010
 80071e4:	40020028 	.word	0x40020028
 80071e8:	40020040 	.word	0x40020040
 80071ec:	40020058 	.word	0x40020058
 80071f0:	40020070 	.word	0x40020070
 80071f4:	40020088 	.word	0x40020088
 80071f8:	400200a0 	.word	0x400200a0
 80071fc:	400200b8 	.word	0x400200b8
 8007200:	40020410 	.word	0x40020410
 8007204:	40020428 	.word	0x40020428
 8007208:	40020440 	.word	0x40020440
 800720c:	40020458 	.word	0x40020458
 8007210:	40020470 	.word	0x40020470
 8007214:	40020488 	.word	0x40020488
 8007218:	400204a0 	.word	0x400204a0
 800721c:	400204b8 	.word	0x400204b8
 8007220:	58025408 	.word	0x58025408
 8007224:	5802541c 	.word	0x5802541c
 8007228:	58025430 	.word	0x58025430
 800722c:	58025444 	.word	0x58025444
 8007230:	58025458 	.word	0x58025458
 8007234:	5802546c 	.word	0x5802546c
 8007238:	58025480 	.word	0x58025480
 800723c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	f003 0320 	and.w	r3, r3, #32
 8007246:	2b00      	cmp	r3, #0
 8007248:	d160      	bne.n	800730c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a7f      	ldr	r2, [pc, #508]	; (800744c <HAL_DMA_IRQHandler+0xc74>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d04a      	beq.n	80072ea <HAL_DMA_IRQHandler+0xb12>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a7d      	ldr	r2, [pc, #500]	; (8007450 <HAL_DMA_IRQHandler+0xc78>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d045      	beq.n	80072ea <HAL_DMA_IRQHandler+0xb12>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a7c      	ldr	r2, [pc, #496]	; (8007454 <HAL_DMA_IRQHandler+0xc7c>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d040      	beq.n	80072ea <HAL_DMA_IRQHandler+0xb12>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a7a      	ldr	r2, [pc, #488]	; (8007458 <HAL_DMA_IRQHandler+0xc80>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d03b      	beq.n	80072ea <HAL_DMA_IRQHandler+0xb12>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a79      	ldr	r2, [pc, #484]	; (800745c <HAL_DMA_IRQHandler+0xc84>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d036      	beq.n	80072ea <HAL_DMA_IRQHandler+0xb12>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a77      	ldr	r2, [pc, #476]	; (8007460 <HAL_DMA_IRQHandler+0xc88>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d031      	beq.n	80072ea <HAL_DMA_IRQHandler+0xb12>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a76      	ldr	r2, [pc, #472]	; (8007464 <HAL_DMA_IRQHandler+0xc8c>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d02c      	beq.n	80072ea <HAL_DMA_IRQHandler+0xb12>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a74      	ldr	r2, [pc, #464]	; (8007468 <HAL_DMA_IRQHandler+0xc90>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d027      	beq.n	80072ea <HAL_DMA_IRQHandler+0xb12>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a73      	ldr	r2, [pc, #460]	; (800746c <HAL_DMA_IRQHandler+0xc94>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d022      	beq.n	80072ea <HAL_DMA_IRQHandler+0xb12>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a71      	ldr	r2, [pc, #452]	; (8007470 <HAL_DMA_IRQHandler+0xc98>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d01d      	beq.n	80072ea <HAL_DMA_IRQHandler+0xb12>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a70      	ldr	r2, [pc, #448]	; (8007474 <HAL_DMA_IRQHandler+0xc9c>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d018      	beq.n	80072ea <HAL_DMA_IRQHandler+0xb12>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a6e      	ldr	r2, [pc, #440]	; (8007478 <HAL_DMA_IRQHandler+0xca0>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d013      	beq.n	80072ea <HAL_DMA_IRQHandler+0xb12>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a6d      	ldr	r2, [pc, #436]	; (800747c <HAL_DMA_IRQHandler+0xca4>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d00e      	beq.n	80072ea <HAL_DMA_IRQHandler+0xb12>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a6b      	ldr	r2, [pc, #428]	; (8007480 <HAL_DMA_IRQHandler+0xca8>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d009      	beq.n	80072ea <HAL_DMA_IRQHandler+0xb12>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a6a      	ldr	r2, [pc, #424]	; (8007484 <HAL_DMA_IRQHandler+0xcac>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d004      	beq.n	80072ea <HAL_DMA_IRQHandler+0xb12>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a68      	ldr	r2, [pc, #416]	; (8007488 <HAL_DMA_IRQHandler+0xcb0>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d108      	bne.n	80072fc <HAL_DMA_IRQHandler+0xb24>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f022 0208 	bic.w	r2, r2, #8
 80072f8:	601a      	str	r2, [r3, #0]
 80072fa:	e007      	b.n	800730c <HAL_DMA_IRQHandler+0xb34>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f022 0204 	bic.w	r2, r2, #4
 800730a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007310:	2b00      	cmp	r3, #0
 8007312:	f000 8165 	beq.w	80075e0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800731e:	e15f      	b.n	80075e0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007324:	f003 031f 	and.w	r3, r3, #31
 8007328:	2202      	movs	r2, #2
 800732a:	409a      	lsls	r2, r3
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	4013      	ands	r3, r2
 8007330:	2b00      	cmp	r3, #0
 8007332:	f000 80c5 	beq.w	80074c0 <HAL_DMA_IRQHandler+0xce8>
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	f003 0302 	and.w	r3, r3, #2
 800733c:	2b00      	cmp	r3, #0
 800733e:	f000 80bf 	beq.w	80074c0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007346:	f003 031f 	and.w	r3, r3, #31
 800734a:	2202      	movs	r2, #2
 800734c:	409a      	lsls	r2, r3
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007358:	2b00      	cmp	r3, #0
 800735a:	d018      	beq.n	800738e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d109      	bne.n	800737a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800736a:	2b00      	cmp	r3, #0
 800736c:	f000 813a 	beq.w	80075e4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007378:	e134      	b.n	80075e4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800737e:	2b00      	cmp	r3, #0
 8007380:	f000 8130 	beq.w	80075e4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800738c:	e12a      	b.n	80075e4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	f003 0320 	and.w	r3, r3, #32
 8007394:	2b00      	cmp	r3, #0
 8007396:	f040 8089 	bne.w	80074ac <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a2b      	ldr	r2, [pc, #172]	; (800744c <HAL_DMA_IRQHandler+0xc74>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d04a      	beq.n	800743a <HAL_DMA_IRQHandler+0xc62>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a29      	ldr	r2, [pc, #164]	; (8007450 <HAL_DMA_IRQHandler+0xc78>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d045      	beq.n	800743a <HAL_DMA_IRQHandler+0xc62>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a28      	ldr	r2, [pc, #160]	; (8007454 <HAL_DMA_IRQHandler+0xc7c>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d040      	beq.n	800743a <HAL_DMA_IRQHandler+0xc62>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a26      	ldr	r2, [pc, #152]	; (8007458 <HAL_DMA_IRQHandler+0xc80>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d03b      	beq.n	800743a <HAL_DMA_IRQHandler+0xc62>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a25      	ldr	r2, [pc, #148]	; (800745c <HAL_DMA_IRQHandler+0xc84>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d036      	beq.n	800743a <HAL_DMA_IRQHandler+0xc62>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a23      	ldr	r2, [pc, #140]	; (8007460 <HAL_DMA_IRQHandler+0xc88>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d031      	beq.n	800743a <HAL_DMA_IRQHandler+0xc62>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a22      	ldr	r2, [pc, #136]	; (8007464 <HAL_DMA_IRQHandler+0xc8c>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d02c      	beq.n	800743a <HAL_DMA_IRQHandler+0xc62>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a20      	ldr	r2, [pc, #128]	; (8007468 <HAL_DMA_IRQHandler+0xc90>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d027      	beq.n	800743a <HAL_DMA_IRQHandler+0xc62>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a1f      	ldr	r2, [pc, #124]	; (800746c <HAL_DMA_IRQHandler+0xc94>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d022      	beq.n	800743a <HAL_DMA_IRQHandler+0xc62>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a1d      	ldr	r2, [pc, #116]	; (8007470 <HAL_DMA_IRQHandler+0xc98>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d01d      	beq.n	800743a <HAL_DMA_IRQHandler+0xc62>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a1c      	ldr	r2, [pc, #112]	; (8007474 <HAL_DMA_IRQHandler+0xc9c>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d018      	beq.n	800743a <HAL_DMA_IRQHandler+0xc62>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a1a      	ldr	r2, [pc, #104]	; (8007478 <HAL_DMA_IRQHandler+0xca0>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d013      	beq.n	800743a <HAL_DMA_IRQHandler+0xc62>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a19      	ldr	r2, [pc, #100]	; (800747c <HAL_DMA_IRQHandler+0xca4>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d00e      	beq.n	800743a <HAL_DMA_IRQHandler+0xc62>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a17      	ldr	r2, [pc, #92]	; (8007480 <HAL_DMA_IRQHandler+0xca8>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d009      	beq.n	800743a <HAL_DMA_IRQHandler+0xc62>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a16      	ldr	r2, [pc, #88]	; (8007484 <HAL_DMA_IRQHandler+0xcac>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d004      	beq.n	800743a <HAL_DMA_IRQHandler+0xc62>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a14      	ldr	r2, [pc, #80]	; (8007488 <HAL_DMA_IRQHandler+0xcb0>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d128      	bne.n	800748c <HAL_DMA_IRQHandler+0xcb4>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f022 0214 	bic.w	r2, r2, #20
 8007448:	601a      	str	r2, [r3, #0]
 800744a:	e027      	b.n	800749c <HAL_DMA_IRQHandler+0xcc4>
 800744c:	40020010 	.word	0x40020010
 8007450:	40020028 	.word	0x40020028
 8007454:	40020040 	.word	0x40020040
 8007458:	40020058 	.word	0x40020058
 800745c:	40020070 	.word	0x40020070
 8007460:	40020088 	.word	0x40020088
 8007464:	400200a0 	.word	0x400200a0
 8007468:	400200b8 	.word	0x400200b8
 800746c:	40020410 	.word	0x40020410
 8007470:	40020428 	.word	0x40020428
 8007474:	40020440 	.word	0x40020440
 8007478:	40020458 	.word	0x40020458
 800747c:	40020470 	.word	0x40020470
 8007480:	40020488 	.word	0x40020488
 8007484:	400204a0 	.word	0x400204a0
 8007488:	400204b8 	.word	0x400204b8
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f022 020a 	bic.w	r2, r2, #10
 800749a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f000 8097 	beq.w	80075e4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074be:	e091      	b.n	80075e4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074c4:	f003 031f 	and.w	r3, r3, #31
 80074c8:	2208      	movs	r2, #8
 80074ca:	409a      	lsls	r2, r3
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	4013      	ands	r3, r2
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	f000 8088 	beq.w	80075e6 <HAL_DMA_IRQHandler+0xe0e>
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	f003 0308 	and.w	r3, r3, #8
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f000 8082 	beq.w	80075e6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a41      	ldr	r2, [pc, #260]	; (80075ec <HAL_DMA_IRQHandler+0xe14>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d04a      	beq.n	8007582 <HAL_DMA_IRQHandler+0xdaa>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a3f      	ldr	r2, [pc, #252]	; (80075f0 <HAL_DMA_IRQHandler+0xe18>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d045      	beq.n	8007582 <HAL_DMA_IRQHandler+0xdaa>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a3e      	ldr	r2, [pc, #248]	; (80075f4 <HAL_DMA_IRQHandler+0xe1c>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d040      	beq.n	8007582 <HAL_DMA_IRQHandler+0xdaa>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a3c      	ldr	r2, [pc, #240]	; (80075f8 <HAL_DMA_IRQHandler+0xe20>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d03b      	beq.n	8007582 <HAL_DMA_IRQHandler+0xdaa>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a3b      	ldr	r2, [pc, #236]	; (80075fc <HAL_DMA_IRQHandler+0xe24>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d036      	beq.n	8007582 <HAL_DMA_IRQHandler+0xdaa>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a39      	ldr	r2, [pc, #228]	; (8007600 <HAL_DMA_IRQHandler+0xe28>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d031      	beq.n	8007582 <HAL_DMA_IRQHandler+0xdaa>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a38      	ldr	r2, [pc, #224]	; (8007604 <HAL_DMA_IRQHandler+0xe2c>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d02c      	beq.n	8007582 <HAL_DMA_IRQHandler+0xdaa>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a36      	ldr	r2, [pc, #216]	; (8007608 <HAL_DMA_IRQHandler+0xe30>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d027      	beq.n	8007582 <HAL_DMA_IRQHandler+0xdaa>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a35      	ldr	r2, [pc, #212]	; (800760c <HAL_DMA_IRQHandler+0xe34>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d022      	beq.n	8007582 <HAL_DMA_IRQHandler+0xdaa>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a33      	ldr	r2, [pc, #204]	; (8007610 <HAL_DMA_IRQHandler+0xe38>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d01d      	beq.n	8007582 <HAL_DMA_IRQHandler+0xdaa>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a32      	ldr	r2, [pc, #200]	; (8007614 <HAL_DMA_IRQHandler+0xe3c>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d018      	beq.n	8007582 <HAL_DMA_IRQHandler+0xdaa>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a30      	ldr	r2, [pc, #192]	; (8007618 <HAL_DMA_IRQHandler+0xe40>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d013      	beq.n	8007582 <HAL_DMA_IRQHandler+0xdaa>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a2f      	ldr	r2, [pc, #188]	; (800761c <HAL_DMA_IRQHandler+0xe44>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d00e      	beq.n	8007582 <HAL_DMA_IRQHandler+0xdaa>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a2d      	ldr	r2, [pc, #180]	; (8007620 <HAL_DMA_IRQHandler+0xe48>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d009      	beq.n	8007582 <HAL_DMA_IRQHandler+0xdaa>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a2c      	ldr	r2, [pc, #176]	; (8007624 <HAL_DMA_IRQHandler+0xe4c>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d004      	beq.n	8007582 <HAL_DMA_IRQHandler+0xdaa>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a2a      	ldr	r2, [pc, #168]	; (8007628 <HAL_DMA_IRQHandler+0xe50>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d108      	bne.n	8007594 <HAL_DMA_IRQHandler+0xdbc>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f022 021c 	bic.w	r2, r2, #28
 8007590:	601a      	str	r2, [r3, #0]
 8007592:	e007      	b.n	80075a4 <HAL_DMA_IRQHandler+0xdcc>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f022 020e 	bic.w	r2, r2, #14
 80075a2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075a8:	f003 031f 	and.w	r3, r3, #31
 80075ac:	2201      	movs	r2, #1
 80075ae:	409a      	lsls	r2, r3
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2201      	movs	r2, #1
 80075be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d009      	beq.n	80075e6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	4798      	blx	r3
 80075da:	e004      	b.n	80075e6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80075dc:	bf00      	nop
 80075de:	e002      	b.n	80075e6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075e0:	bf00      	nop
 80075e2:	e000      	b.n	80075e6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075e4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80075e6:	3728      	adds	r7, #40	; 0x28
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	40020010 	.word	0x40020010
 80075f0:	40020028 	.word	0x40020028
 80075f4:	40020040 	.word	0x40020040
 80075f8:	40020058 	.word	0x40020058
 80075fc:	40020070 	.word	0x40020070
 8007600:	40020088 	.word	0x40020088
 8007604:	400200a0 	.word	0x400200a0
 8007608:	400200b8 	.word	0x400200b8
 800760c:	40020410 	.word	0x40020410
 8007610:	40020428 	.word	0x40020428
 8007614:	40020440 	.word	0x40020440
 8007618:	40020458 	.word	0x40020458
 800761c:	40020470 	.word	0x40020470
 8007620:	40020488 	.word	0x40020488
 8007624:	400204a0 	.word	0x400204a0
 8007628:	400204b8 	.word	0x400204b8

0800762c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800762c:	b480      	push	{r7}
 800762e:	b087      	sub	sp, #28
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	607a      	str	r2, [r7, #4]
 8007638:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800763e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007644:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a7f      	ldr	r2, [pc, #508]	; (8007848 <DMA_SetConfig+0x21c>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d072      	beq.n	8007736 <DMA_SetConfig+0x10a>
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a7d      	ldr	r2, [pc, #500]	; (800784c <DMA_SetConfig+0x220>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d06d      	beq.n	8007736 <DMA_SetConfig+0x10a>
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a7c      	ldr	r2, [pc, #496]	; (8007850 <DMA_SetConfig+0x224>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d068      	beq.n	8007736 <DMA_SetConfig+0x10a>
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a7a      	ldr	r2, [pc, #488]	; (8007854 <DMA_SetConfig+0x228>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d063      	beq.n	8007736 <DMA_SetConfig+0x10a>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a79      	ldr	r2, [pc, #484]	; (8007858 <DMA_SetConfig+0x22c>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d05e      	beq.n	8007736 <DMA_SetConfig+0x10a>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a77      	ldr	r2, [pc, #476]	; (800785c <DMA_SetConfig+0x230>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d059      	beq.n	8007736 <DMA_SetConfig+0x10a>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a76      	ldr	r2, [pc, #472]	; (8007860 <DMA_SetConfig+0x234>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d054      	beq.n	8007736 <DMA_SetConfig+0x10a>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a74      	ldr	r2, [pc, #464]	; (8007864 <DMA_SetConfig+0x238>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d04f      	beq.n	8007736 <DMA_SetConfig+0x10a>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a73      	ldr	r2, [pc, #460]	; (8007868 <DMA_SetConfig+0x23c>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d04a      	beq.n	8007736 <DMA_SetConfig+0x10a>
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a71      	ldr	r2, [pc, #452]	; (800786c <DMA_SetConfig+0x240>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d045      	beq.n	8007736 <DMA_SetConfig+0x10a>
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a70      	ldr	r2, [pc, #448]	; (8007870 <DMA_SetConfig+0x244>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d040      	beq.n	8007736 <DMA_SetConfig+0x10a>
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a6e      	ldr	r2, [pc, #440]	; (8007874 <DMA_SetConfig+0x248>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d03b      	beq.n	8007736 <DMA_SetConfig+0x10a>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a6d      	ldr	r2, [pc, #436]	; (8007878 <DMA_SetConfig+0x24c>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d036      	beq.n	8007736 <DMA_SetConfig+0x10a>
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a6b      	ldr	r2, [pc, #428]	; (800787c <DMA_SetConfig+0x250>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d031      	beq.n	8007736 <DMA_SetConfig+0x10a>
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a6a      	ldr	r2, [pc, #424]	; (8007880 <DMA_SetConfig+0x254>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d02c      	beq.n	8007736 <DMA_SetConfig+0x10a>
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a68      	ldr	r2, [pc, #416]	; (8007884 <DMA_SetConfig+0x258>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d027      	beq.n	8007736 <DMA_SetConfig+0x10a>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a67      	ldr	r2, [pc, #412]	; (8007888 <DMA_SetConfig+0x25c>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d022      	beq.n	8007736 <DMA_SetConfig+0x10a>
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a65      	ldr	r2, [pc, #404]	; (800788c <DMA_SetConfig+0x260>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d01d      	beq.n	8007736 <DMA_SetConfig+0x10a>
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a64      	ldr	r2, [pc, #400]	; (8007890 <DMA_SetConfig+0x264>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d018      	beq.n	8007736 <DMA_SetConfig+0x10a>
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a62      	ldr	r2, [pc, #392]	; (8007894 <DMA_SetConfig+0x268>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d013      	beq.n	8007736 <DMA_SetConfig+0x10a>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a61      	ldr	r2, [pc, #388]	; (8007898 <DMA_SetConfig+0x26c>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d00e      	beq.n	8007736 <DMA_SetConfig+0x10a>
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a5f      	ldr	r2, [pc, #380]	; (800789c <DMA_SetConfig+0x270>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d009      	beq.n	8007736 <DMA_SetConfig+0x10a>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a5e      	ldr	r2, [pc, #376]	; (80078a0 <DMA_SetConfig+0x274>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d004      	beq.n	8007736 <DMA_SetConfig+0x10a>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a5c      	ldr	r2, [pc, #368]	; (80078a4 <DMA_SetConfig+0x278>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d101      	bne.n	800773a <DMA_SetConfig+0x10e>
 8007736:	2301      	movs	r3, #1
 8007738:	e000      	b.n	800773c <DMA_SetConfig+0x110>
 800773a:	2300      	movs	r3, #0
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00d      	beq.n	800775c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007748:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800774e:	2b00      	cmp	r3, #0
 8007750:	d004      	beq.n	800775c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800775a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a39      	ldr	r2, [pc, #228]	; (8007848 <DMA_SetConfig+0x21c>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d04a      	beq.n	80077fc <DMA_SetConfig+0x1d0>
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a38      	ldr	r2, [pc, #224]	; (800784c <DMA_SetConfig+0x220>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d045      	beq.n	80077fc <DMA_SetConfig+0x1d0>
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a36      	ldr	r2, [pc, #216]	; (8007850 <DMA_SetConfig+0x224>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d040      	beq.n	80077fc <DMA_SetConfig+0x1d0>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a35      	ldr	r2, [pc, #212]	; (8007854 <DMA_SetConfig+0x228>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d03b      	beq.n	80077fc <DMA_SetConfig+0x1d0>
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a33      	ldr	r2, [pc, #204]	; (8007858 <DMA_SetConfig+0x22c>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d036      	beq.n	80077fc <DMA_SetConfig+0x1d0>
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a32      	ldr	r2, [pc, #200]	; (800785c <DMA_SetConfig+0x230>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d031      	beq.n	80077fc <DMA_SetConfig+0x1d0>
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a30      	ldr	r2, [pc, #192]	; (8007860 <DMA_SetConfig+0x234>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d02c      	beq.n	80077fc <DMA_SetConfig+0x1d0>
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a2f      	ldr	r2, [pc, #188]	; (8007864 <DMA_SetConfig+0x238>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d027      	beq.n	80077fc <DMA_SetConfig+0x1d0>
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a2d      	ldr	r2, [pc, #180]	; (8007868 <DMA_SetConfig+0x23c>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d022      	beq.n	80077fc <DMA_SetConfig+0x1d0>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a2c      	ldr	r2, [pc, #176]	; (800786c <DMA_SetConfig+0x240>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d01d      	beq.n	80077fc <DMA_SetConfig+0x1d0>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a2a      	ldr	r2, [pc, #168]	; (8007870 <DMA_SetConfig+0x244>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d018      	beq.n	80077fc <DMA_SetConfig+0x1d0>
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a29      	ldr	r2, [pc, #164]	; (8007874 <DMA_SetConfig+0x248>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d013      	beq.n	80077fc <DMA_SetConfig+0x1d0>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a27      	ldr	r2, [pc, #156]	; (8007878 <DMA_SetConfig+0x24c>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d00e      	beq.n	80077fc <DMA_SetConfig+0x1d0>
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a26      	ldr	r2, [pc, #152]	; (800787c <DMA_SetConfig+0x250>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d009      	beq.n	80077fc <DMA_SetConfig+0x1d0>
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a24      	ldr	r2, [pc, #144]	; (8007880 <DMA_SetConfig+0x254>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d004      	beq.n	80077fc <DMA_SetConfig+0x1d0>
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a23      	ldr	r2, [pc, #140]	; (8007884 <DMA_SetConfig+0x258>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d101      	bne.n	8007800 <DMA_SetConfig+0x1d4>
 80077fc:	2301      	movs	r3, #1
 80077fe:	e000      	b.n	8007802 <DMA_SetConfig+0x1d6>
 8007800:	2300      	movs	r3, #0
 8007802:	2b00      	cmp	r3, #0
 8007804:	d059      	beq.n	80078ba <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800780a:	f003 031f 	and.w	r3, r3, #31
 800780e:	223f      	movs	r2, #63	; 0x3f
 8007810:	409a      	lsls	r2, r3
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007824:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	683a      	ldr	r2, [r7, #0]
 800782c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	2b40      	cmp	r3, #64	; 0x40
 8007834:	d138      	bne.n	80078a8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	68ba      	ldr	r2, [r7, #8]
 8007844:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007846:	e086      	b.n	8007956 <DMA_SetConfig+0x32a>
 8007848:	40020010 	.word	0x40020010
 800784c:	40020028 	.word	0x40020028
 8007850:	40020040 	.word	0x40020040
 8007854:	40020058 	.word	0x40020058
 8007858:	40020070 	.word	0x40020070
 800785c:	40020088 	.word	0x40020088
 8007860:	400200a0 	.word	0x400200a0
 8007864:	400200b8 	.word	0x400200b8
 8007868:	40020410 	.word	0x40020410
 800786c:	40020428 	.word	0x40020428
 8007870:	40020440 	.word	0x40020440
 8007874:	40020458 	.word	0x40020458
 8007878:	40020470 	.word	0x40020470
 800787c:	40020488 	.word	0x40020488
 8007880:	400204a0 	.word	0x400204a0
 8007884:	400204b8 	.word	0x400204b8
 8007888:	58025408 	.word	0x58025408
 800788c:	5802541c 	.word	0x5802541c
 8007890:	58025430 	.word	0x58025430
 8007894:	58025444 	.word	0x58025444
 8007898:	58025458 	.word	0x58025458
 800789c:	5802546c 	.word	0x5802546c
 80078a0:	58025480 	.word	0x58025480
 80078a4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	68ba      	ldr	r2, [r7, #8]
 80078ae:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	60da      	str	r2, [r3, #12]
}
 80078b8:	e04d      	b.n	8007956 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a29      	ldr	r2, [pc, #164]	; (8007964 <DMA_SetConfig+0x338>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d022      	beq.n	800790a <DMA_SetConfig+0x2de>
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a27      	ldr	r2, [pc, #156]	; (8007968 <DMA_SetConfig+0x33c>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d01d      	beq.n	800790a <DMA_SetConfig+0x2de>
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a26      	ldr	r2, [pc, #152]	; (800796c <DMA_SetConfig+0x340>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d018      	beq.n	800790a <DMA_SetConfig+0x2de>
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a24      	ldr	r2, [pc, #144]	; (8007970 <DMA_SetConfig+0x344>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d013      	beq.n	800790a <DMA_SetConfig+0x2de>
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a23      	ldr	r2, [pc, #140]	; (8007974 <DMA_SetConfig+0x348>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d00e      	beq.n	800790a <DMA_SetConfig+0x2de>
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a21      	ldr	r2, [pc, #132]	; (8007978 <DMA_SetConfig+0x34c>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d009      	beq.n	800790a <DMA_SetConfig+0x2de>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a20      	ldr	r2, [pc, #128]	; (800797c <DMA_SetConfig+0x350>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d004      	beq.n	800790a <DMA_SetConfig+0x2de>
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a1e      	ldr	r2, [pc, #120]	; (8007980 <DMA_SetConfig+0x354>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d101      	bne.n	800790e <DMA_SetConfig+0x2e2>
 800790a:	2301      	movs	r3, #1
 800790c:	e000      	b.n	8007910 <DMA_SetConfig+0x2e4>
 800790e:	2300      	movs	r3, #0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d020      	beq.n	8007956 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007918:	f003 031f 	and.w	r3, r3, #31
 800791c:	2201      	movs	r2, #1
 800791e:	409a      	lsls	r2, r3
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	683a      	ldr	r2, [r7, #0]
 800792a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	2b40      	cmp	r3, #64	; 0x40
 8007932:	d108      	bne.n	8007946 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68ba      	ldr	r2, [r7, #8]
 8007942:	60da      	str	r2, [r3, #12]
}
 8007944:	e007      	b.n	8007956 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	68ba      	ldr	r2, [r7, #8]
 800794c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	60da      	str	r2, [r3, #12]
}
 8007956:	bf00      	nop
 8007958:	371c      	adds	r7, #28
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	58025408 	.word	0x58025408
 8007968:	5802541c 	.word	0x5802541c
 800796c:	58025430 	.word	0x58025430
 8007970:	58025444 	.word	0x58025444
 8007974:	58025458 	.word	0x58025458
 8007978:	5802546c 	.word	0x5802546c
 800797c:	58025480 	.word	0x58025480
 8007980:	58025494 	.word	0x58025494

08007984 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007984:	b480      	push	{r7}
 8007986:	b085      	sub	sp, #20
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a42      	ldr	r2, [pc, #264]	; (8007a9c <DMA_CalcBaseAndBitshift+0x118>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d04a      	beq.n	8007a2c <DMA_CalcBaseAndBitshift+0xa8>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a41      	ldr	r2, [pc, #260]	; (8007aa0 <DMA_CalcBaseAndBitshift+0x11c>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d045      	beq.n	8007a2c <DMA_CalcBaseAndBitshift+0xa8>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a3f      	ldr	r2, [pc, #252]	; (8007aa4 <DMA_CalcBaseAndBitshift+0x120>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d040      	beq.n	8007a2c <DMA_CalcBaseAndBitshift+0xa8>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a3e      	ldr	r2, [pc, #248]	; (8007aa8 <DMA_CalcBaseAndBitshift+0x124>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d03b      	beq.n	8007a2c <DMA_CalcBaseAndBitshift+0xa8>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a3c      	ldr	r2, [pc, #240]	; (8007aac <DMA_CalcBaseAndBitshift+0x128>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d036      	beq.n	8007a2c <DMA_CalcBaseAndBitshift+0xa8>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a3b      	ldr	r2, [pc, #236]	; (8007ab0 <DMA_CalcBaseAndBitshift+0x12c>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d031      	beq.n	8007a2c <DMA_CalcBaseAndBitshift+0xa8>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a39      	ldr	r2, [pc, #228]	; (8007ab4 <DMA_CalcBaseAndBitshift+0x130>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d02c      	beq.n	8007a2c <DMA_CalcBaseAndBitshift+0xa8>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a38      	ldr	r2, [pc, #224]	; (8007ab8 <DMA_CalcBaseAndBitshift+0x134>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d027      	beq.n	8007a2c <DMA_CalcBaseAndBitshift+0xa8>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a36      	ldr	r2, [pc, #216]	; (8007abc <DMA_CalcBaseAndBitshift+0x138>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d022      	beq.n	8007a2c <DMA_CalcBaseAndBitshift+0xa8>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a35      	ldr	r2, [pc, #212]	; (8007ac0 <DMA_CalcBaseAndBitshift+0x13c>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d01d      	beq.n	8007a2c <DMA_CalcBaseAndBitshift+0xa8>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a33      	ldr	r2, [pc, #204]	; (8007ac4 <DMA_CalcBaseAndBitshift+0x140>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d018      	beq.n	8007a2c <DMA_CalcBaseAndBitshift+0xa8>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a32      	ldr	r2, [pc, #200]	; (8007ac8 <DMA_CalcBaseAndBitshift+0x144>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d013      	beq.n	8007a2c <DMA_CalcBaseAndBitshift+0xa8>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a30      	ldr	r2, [pc, #192]	; (8007acc <DMA_CalcBaseAndBitshift+0x148>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d00e      	beq.n	8007a2c <DMA_CalcBaseAndBitshift+0xa8>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a2f      	ldr	r2, [pc, #188]	; (8007ad0 <DMA_CalcBaseAndBitshift+0x14c>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d009      	beq.n	8007a2c <DMA_CalcBaseAndBitshift+0xa8>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a2d      	ldr	r2, [pc, #180]	; (8007ad4 <DMA_CalcBaseAndBitshift+0x150>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d004      	beq.n	8007a2c <DMA_CalcBaseAndBitshift+0xa8>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a2c      	ldr	r2, [pc, #176]	; (8007ad8 <DMA_CalcBaseAndBitshift+0x154>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d101      	bne.n	8007a30 <DMA_CalcBaseAndBitshift+0xac>
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e000      	b.n	8007a32 <DMA_CalcBaseAndBitshift+0xae>
 8007a30:	2300      	movs	r3, #0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d024      	beq.n	8007a80 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	3b10      	subs	r3, #16
 8007a3e:	4a27      	ldr	r2, [pc, #156]	; (8007adc <DMA_CalcBaseAndBitshift+0x158>)
 8007a40:	fba2 2303 	umull	r2, r3, r2, r3
 8007a44:	091b      	lsrs	r3, r3, #4
 8007a46:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f003 0307 	and.w	r3, r3, #7
 8007a4e:	4a24      	ldr	r2, [pc, #144]	; (8007ae0 <DMA_CalcBaseAndBitshift+0x15c>)
 8007a50:	5cd3      	ldrb	r3, [r2, r3]
 8007a52:	461a      	mov	r2, r3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2b03      	cmp	r3, #3
 8007a5c:	d908      	bls.n	8007a70 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	461a      	mov	r2, r3
 8007a64:	4b1f      	ldr	r3, [pc, #124]	; (8007ae4 <DMA_CalcBaseAndBitshift+0x160>)
 8007a66:	4013      	ands	r3, r2
 8007a68:	1d1a      	adds	r2, r3, #4
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	659a      	str	r2, [r3, #88]	; 0x58
 8007a6e:	e00d      	b.n	8007a8c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	461a      	mov	r2, r3
 8007a76:	4b1b      	ldr	r3, [pc, #108]	; (8007ae4 <DMA_CalcBaseAndBitshift+0x160>)
 8007a78:	4013      	ands	r3, r2
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	6593      	str	r3, [r2, #88]	; 0x58
 8007a7e:	e005      	b.n	8007a8c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3714      	adds	r7, #20
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr
 8007a9c:	40020010 	.word	0x40020010
 8007aa0:	40020028 	.word	0x40020028
 8007aa4:	40020040 	.word	0x40020040
 8007aa8:	40020058 	.word	0x40020058
 8007aac:	40020070 	.word	0x40020070
 8007ab0:	40020088 	.word	0x40020088
 8007ab4:	400200a0 	.word	0x400200a0
 8007ab8:	400200b8 	.word	0x400200b8
 8007abc:	40020410 	.word	0x40020410
 8007ac0:	40020428 	.word	0x40020428
 8007ac4:	40020440 	.word	0x40020440
 8007ac8:	40020458 	.word	0x40020458
 8007acc:	40020470 	.word	0x40020470
 8007ad0:	40020488 	.word	0x40020488
 8007ad4:	400204a0 	.word	0x400204a0
 8007ad8:	400204b8 	.word	0x400204b8
 8007adc:	aaaaaaab 	.word	0xaaaaaaab
 8007ae0:	0801c814 	.word	0x0801c814
 8007ae4:	fffffc00 	.word	0xfffffc00

08007ae8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b085      	sub	sp, #20
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007af0:	2300      	movs	r3, #0
 8007af2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	699b      	ldr	r3, [r3, #24]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d120      	bne.n	8007b3e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b00:	2b03      	cmp	r3, #3
 8007b02:	d858      	bhi.n	8007bb6 <DMA_CheckFifoParam+0xce>
 8007b04:	a201      	add	r2, pc, #4	; (adr r2, 8007b0c <DMA_CheckFifoParam+0x24>)
 8007b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b0a:	bf00      	nop
 8007b0c:	08007b1d 	.word	0x08007b1d
 8007b10:	08007b2f 	.word	0x08007b2f
 8007b14:	08007b1d 	.word	0x08007b1d
 8007b18:	08007bb7 	.word	0x08007bb7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d048      	beq.n	8007bba <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007b2c:	e045      	b.n	8007bba <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b32:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007b36:	d142      	bne.n	8007bbe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007b3c:	e03f      	b.n	8007bbe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b46:	d123      	bne.n	8007b90 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b4c:	2b03      	cmp	r3, #3
 8007b4e:	d838      	bhi.n	8007bc2 <DMA_CheckFifoParam+0xda>
 8007b50:	a201      	add	r2, pc, #4	; (adr r2, 8007b58 <DMA_CheckFifoParam+0x70>)
 8007b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b56:	bf00      	nop
 8007b58:	08007b69 	.word	0x08007b69
 8007b5c:	08007b6f 	.word	0x08007b6f
 8007b60:	08007b69 	.word	0x08007b69
 8007b64:	08007b81 	.word	0x08007b81
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	73fb      	strb	r3, [r7, #15]
        break;
 8007b6c:	e030      	b.n	8007bd0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d025      	beq.n	8007bc6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007b7e:	e022      	b.n	8007bc6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b84:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007b88:	d11f      	bne.n	8007bca <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007b8e:	e01c      	b.n	8007bca <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b94:	2b02      	cmp	r3, #2
 8007b96:	d902      	bls.n	8007b9e <DMA_CheckFifoParam+0xb6>
 8007b98:	2b03      	cmp	r3, #3
 8007b9a:	d003      	beq.n	8007ba4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007b9c:	e018      	b.n	8007bd0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	73fb      	strb	r3, [r7, #15]
        break;
 8007ba2:	e015      	b.n	8007bd0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00e      	beq.n	8007bce <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	73fb      	strb	r3, [r7, #15]
    break;
 8007bb4:	e00b      	b.n	8007bce <DMA_CheckFifoParam+0xe6>
        break;
 8007bb6:	bf00      	nop
 8007bb8:	e00a      	b.n	8007bd0 <DMA_CheckFifoParam+0xe8>
        break;
 8007bba:	bf00      	nop
 8007bbc:	e008      	b.n	8007bd0 <DMA_CheckFifoParam+0xe8>
        break;
 8007bbe:	bf00      	nop
 8007bc0:	e006      	b.n	8007bd0 <DMA_CheckFifoParam+0xe8>
        break;
 8007bc2:	bf00      	nop
 8007bc4:	e004      	b.n	8007bd0 <DMA_CheckFifoParam+0xe8>
        break;
 8007bc6:	bf00      	nop
 8007bc8:	e002      	b.n	8007bd0 <DMA_CheckFifoParam+0xe8>
        break;
 8007bca:	bf00      	nop
 8007bcc:	e000      	b.n	8007bd0 <DMA_CheckFifoParam+0xe8>
    break;
 8007bce:	bf00      	nop
    }
  }

  return status;
 8007bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3714      	adds	r7, #20
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop

08007be0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b085      	sub	sp, #20
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a38      	ldr	r2, [pc, #224]	; (8007cd4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d022      	beq.n	8007c3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a36      	ldr	r2, [pc, #216]	; (8007cd8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d01d      	beq.n	8007c3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a35      	ldr	r2, [pc, #212]	; (8007cdc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d018      	beq.n	8007c3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a33      	ldr	r2, [pc, #204]	; (8007ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d013      	beq.n	8007c3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a32      	ldr	r2, [pc, #200]	; (8007ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d00e      	beq.n	8007c3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a30      	ldr	r2, [pc, #192]	; (8007ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d009      	beq.n	8007c3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a2f      	ldr	r2, [pc, #188]	; (8007cec <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d004      	beq.n	8007c3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a2d      	ldr	r2, [pc, #180]	; (8007cf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d101      	bne.n	8007c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e000      	b.n	8007c44 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007c42:	2300      	movs	r3, #0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d01a      	beq.n	8007c7e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	3b08      	subs	r3, #8
 8007c50:	4a28      	ldr	r2, [pc, #160]	; (8007cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007c52:	fba2 2303 	umull	r2, r3, r2, r3
 8007c56:	091b      	lsrs	r3, r3, #4
 8007c58:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	4b26      	ldr	r3, [pc, #152]	; (8007cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007c5e:	4413      	add	r3, r2
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	461a      	mov	r2, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4a24      	ldr	r2, [pc, #144]	; (8007cfc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007c6c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f003 031f 	and.w	r3, r3, #31
 8007c74:	2201      	movs	r2, #1
 8007c76:	409a      	lsls	r2, r3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007c7c:	e024      	b.n	8007cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	3b10      	subs	r3, #16
 8007c86:	4a1e      	ldr	r2, [pc, #120]	; (8007d00 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007c88:	fba2 2303 	umull	r2, r3, r2, r3
 8007c8c:	091b      	lsrs	r3, r3, #4
 8007c8e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	4a1c      	ldr	r2, [pc, #112]	; (8007d04 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d806      	bhi.n	8007ca6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	4a1b      	ldr	r2, [pc, #108]	; (8007d08 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d902      	bls.n	8007ca6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	3308      	adds	r3, #8
 8007ca4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	4b18      	ldr	r3, [pc, #96]	; (8007d0c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007caa:	4413      	add	r3, r2
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	461a      	mov	r2, r3
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	4a16      	ldr	r2, [pc, #88]	; (8007d10 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007cb8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f003 031f 	and.w	r3, r3, #31
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	409a      	lsls	r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007cc8:	bf00      	nop
 8007cca:	3714      	adds	r7, #20
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr
 8007cd4:	58025408 	.word	0x58025408
 8007cd8:	5802541c 	.word	0x5802541c
 8007cdc:	58025430 	.word	0x58025430
 8007ce0:	58025444 	.word	0x58025444
 8007ce4:	58025458 	.word	0x58025458
 8007ce8:	5802546c 	.word	0x5802546c
 8007cec:	58025480 	.word	0x58025480
 8007cf0:	58025494 	.word	0x58025494
 8007cf4:	cccccccd 	.word	0xcccccccd
 8007cf8:	16009600 	.word	0x16009600
 8007cfc:	58025880 	.word	0x58025880
 8007d00:	aaaaaaab 	.word	0xaaaaaaab
 8007d04:	400204b8 	.word	0x400204b8
 8007d08:	4002040f 	.word	0x4002040f
 8007d0c:	10008200 	.word	0x10008200
 8007d10:	40020880 	.word	0x40020880

08007d14 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b085      	sub	sp, #20
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d04a      	beq.n	8007dc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2b08      	cmp	r3, #8
 8007d2e:	d847      	bhi.n	8007dc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a25      	ldr	r2, [pc, #148]	; (8007dcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d022      	beq.n	8007d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a24      	ldr	r2, [pc, #144]	; (8007dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d01d      	beq.n	8007d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a22      	ldr	r2, [pc, #136]	; (8007dd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d018      	beq.n	8007d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a21      	ldr	r2, [pc, #132]	; (8007dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d013      	beq.n	8007d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a1f      	ldr	r2, [pc, #124]	; (8007ddc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d00e      	beq.n	8007d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a1e      	ldr	r2, [pc, #120]	; (8007de0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d009      	beq.n	8007d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a1c      	ldr	r2, [pc, #112]	; (8007de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d004      	beq.n	8007d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a1b      	ldr	r2, [pc, #108]	; (8007de8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d101      	bne.n	8007d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007d80:	2301      	movs	r3, #1
 8007d82:	e000      	b.n	8007d86 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007d84:	2300      	movs	r3, #0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00a      	beq.n	8007da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007d8a:	68fa      	ldr	r2, [r7, #12]
 8007d8c:	4b17      	ldr	r3, [pc, #92]	; (8007dec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007d8e:	4413      	add	r3, r2
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	461a      	mov	r2, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4a15      	ldr	r2, [pc, #84]	; (8007df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007d9c:	671a      	str	r2, [r3, #112]	; 0x70
 8007d9e:	e009      	b.n	8007db4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007da0:	68fa      	ldr	r2, [r7, #12]
 8007da2:	4b14      	ldr	r3, [pc, #80]	; (8007df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007da4:	4413      	add	r3, r2
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	461a      	mov	r2, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a11      	ldr	r2, [pc, #68]	; (8007df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007db2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	3b01      	subs	r3, #1
 8007db8:	2201      	movs	r2, #1
 8007dba:	409a      	lsls	r2, r3
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007dc0:	bf00      	nop
 8007dc2:	3714      	adds	r7, #20
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr
 8007dcc:	58025408 	.word	0x58025408
 8007dd0:	5802541c 	.word	0x5802541c
 8007dd4:	58025430 	.word	0x58025430
 8007dd8:	58025444 	.word	0x58025444
 8007ddc:	58025458 	.word	0x58025458
 8007de0:	5802546c 	.word	0x5802546c
 8007de4:	58025480 	.word	0x58025480
 8007de8:	58025494 	.word	0x58025494
 8007dec:	1600963f 	.word	0x1600963f
 8007df0:	58025940 	.word	0x58025940
 8007df4:	1000823f 	.word	0x1000823f
 8007df8:	40020940 	.word	0x40020940

08007dfc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b098      	sub	sp, #96	; 0x60
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8007e04:	4a84      	ldr	r2, [pc, #528]	; (8008018 <HAL_FDCAN_Init+0x21c>)
 8007e06:	f107 030c 	add.w	r3, r7, #12
 8007e0a:	4611      	mov	r1, r2
 8007e0c:	224c      	movs	r2, #76	; 0x4c
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f011 f81d 	bl	8018e4e <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d101      	bne.n	8007e1e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e1c6      	b.n	80081ac <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a7e      	ldr	r2, [pc, #504]	; (800801c <HAL_FDCAN_Init+0x220>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d106      	bne.n	8007e36 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007e30:	461a      	mov	r2, r3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d106      	bne.n	8007e50 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f7fb fa14 	bl	8003278 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	699a      	ldr	r2, [r3, #24]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f022 0210 	bic.w	r2, r2, #16
 8007e5e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007e60:	f7fc fa32 	bl	80042c8 <HAL_GetTick>
 8007e64:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007e66:	e014      	b.n	8007e92 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007e68:	f7fc fa2e 	bl	80042c8 <HAL_GetTick>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	2b0a      	cmp	r3, #10
 8007e74:	d90d      	bls.n	8007e92 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e7c:	f043 0201 	orr.w	r2, r3, #1
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2203      	movs	r2, #3
 8007e8a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e18c      	b.n	80081ac <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	699b      	ldr	r3, [r3, #24]
 8007e98:	f003 0308 	and.w	r3, r3, #8
 8007e9c:	2b08      	cmp	r3, #8
 8007e9e:	d0e3      	beq.n	8007e68 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	699a      	ldr	r2, [r3, #24]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f042 0201 	orr.w	r2, r2, #1
 8007eae:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007eb0:	f7fc fa0a 	bl	80042c8 <HAL_GetTick>
 8007eb4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007eb6:	e014      	b.n	8007ee2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007eb8:	f7fc fa06 	bl	80042c8 <HAL_GetTick>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	2b0a      	cmp	r3, #10
 8007ec4:	d90d      	bls.n	8007ee2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ecc:	f043 0201 	orr.w	r2, r3, #1
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2203      	movs	r2, #3
 8007eda:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e164      	b.n	80081ac <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	699b      	ldr	r3, [r3, #24]
 8007ee8:	f003 0301 	and.w	r3, r3, #1
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d0e3      	beq.n	8007eb8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	699a      	ldr	r2, [r3, #24]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f042 0202 	orr.w	r2, r2, #2
 8007efe:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	7c1b      	ldrb	r3, [r3, #16]
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d108      	bne.n	8007f1a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	699a      	ldr	r2, [r3, #24]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f16:	619a      	str	r2, [r3, #24]
 8007f18:	e007      	b.n	8007f2a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	699a      	ldr	r2, [r3, #24]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f28:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	7c5b      	ldrb	r3, [r3, #17]
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d108      	bne.n	8007f44 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	699a      	ldr	r2, [r3, #24]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f40:	619a      	str	r2, [r3, #24]
 8007f42:	e007      	b.n	8007f54 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	699a      	ldr	r2, [r3, #24]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007f52:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	7c9b      	ldrb	r3, [r3, #18]
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d108      	bne.n	8007f6e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	699a      	ldr	r2, [r3, #24]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007f6a:	619a      	str	r2, [r3, #24]
 8007f6c:	e007      	b.n	8007f7e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	699a      	ldr	r2, [r3, #24]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007f7c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	699b      	ldr	r3, [r3, #24]
 8007f84:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	689a      	ldr	r2, [r3, #8]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	430a      	orrs	r2, r1
 8007f92:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	699a      	ldr	r2, [r3, #24]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8007fa2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	691a      	ldr	r2, [r3, #16]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f022 0210 	bic.w	r2, r2, #16
 8007fb2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d108      	bne.n	8007fce <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	699a      	ldr	r2, [r3, #24]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f042 0204 	orr.w	r2, r2, #4
 8007fca:	619a      	str	r2, [r3, #24]
 8007fcc:	e030      	b.n	8008030 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	68db      	ldr	r3, [r3, #12]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d02c      	beq.n	8008030 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	2b02      	cmp	r3, #2
 8007fdc:	d020      	beq.n	8008020 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	699a      	ldr	r2, [r3, #24]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007fec:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	691a      	ldr	r2, [r3, #16]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f042 0210 	orr.w	r2, r2, #16
 8007ffc:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	2b03      	cmp	r3, #3
 8008004:	d114      	bne.n	8008030 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	699a      	ldr	r2, [r3, #24]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f042 0220 	orr.w	r2, r2, #32
 8008014:	619a      	str	r2, [r3, #24]
 8008016:	e00b      	b.n	8008030 <HAL_FDCAN_Init+0x234>
 8008018:	0801c6f0 	.word	0x0801c6f0
 800801c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	699a      	ldr	r2, [r3, #24]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f042 0220 	orr.w	r2, r2, #32
 800802e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	699b      	ldr	r3, [r3, #24]
 8008034:	3b01      	subs	r3, #1
 8008036:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	69db      	ldr	r3, [r3, #28]
 800803c:	3b01      	subs	r3, #1
 800803e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008040:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a1b      	ldr	r3, [r3, #32]
 8008046:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008048:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	695b      	ldr	r3, [r3, #20]
 8008050:	3b01      	subs	r3, #1
 8008052:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008058:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800805a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008064:	d115      	bne.n	8008092 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800806a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008070:	3b01      	subs	r3, #1
 8008072:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8008074:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800807a:	3b01      	subs	r3, #1
 800807c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800807e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008086:	3b01      	subs	r3, #1
 8008088:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800808e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8008090:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00a      	beq.n	80080b0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	430a      	orrs	r2, r1
 80080ac:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080b8:	4413      	add	r3, r2
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d011      	beq.n	80080e2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80080c6:	f023 0107 	bic.w	r1, r3, #7
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	3360      	adds	r3, #96	; 0x60
 80080d2:	443b      	add	r3, r7
 80080d4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	430a      	orrs	r2, r1
 80080de:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d011      	beq.n	800810e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80080f2:	f023 0107 	bic.w	r1, r3, #7
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	3360      	adds	r3, #96	; 0x60
 80080fe:	443b      	add	r3, r7
 8008100:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	430a      	orrs	r2, r1
 800810a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008112:	2b00      	cmp	r3, #0
 8008114:	d012      	beq.n	800813c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800811e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	3360      	adds	r3, #96	; 0x60
 800812a:	443b      	add	r3, r7
 800812c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8008130:	011a      	lsls	r2, r3, #4
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	430a      	orrs	r2, r1
 8008138:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008140:	2b00      	cmp	r3, #0
 8008142:	d012      	beq.n	800816a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800814c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	3360      	adds	r3, #96	; 0x60
 8008158:	443b      	add	r3, r7
 800815a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800815e:	021a      	lsls	r2, r3, #8
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	430a      	orrs	r2, r1
 8008166:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a11      	ldr	r2, [pc, #68]	; (80081b4 <HAL_FDCAN_Init+0x3b8>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d107      	bne.n	8008184 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	689a      	ldr	r2, [r3, #8]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	f022 0203 	bic.w	r2, r2, #3
 8008182:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 f80b 	bl	80081b8 <FDCAN_CalcultateRamBlockAddresses>
 80081a2:	4603      	mov	r3, r0
 80081a4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80081a8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3760      	adds	r7, #96	; 0x60
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	4000a000 	.word	0x4000a000

080081b8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b085      	sub	sp, #20
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081c4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80081ce:	4ba7      	ldr	r3, [pc, #668]	; (800846c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80081d0:	4013      	ands	r3, r2
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	0091      	lsls	r1, r2, #2
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	6812      	ldr	r2, [r2, #0]
 80081da:	430b      	orrs	r3, r1
 80081dc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081e8:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f0:	041a      	lsls	r2, r3, #16
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	430a      	orrs	r2, r1
 80081f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008200:	68ba      	ldr	r2, [r7, #8]
 8008202:	4413      	add	r3, r2
 8008204:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800820e:	4b97      	ldr	r3, [pc, #604]	; (800846c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008210:	4013      	ands	r3, r2
 8008212:	68ba      	ldr	r2, [r7, #8]
 8008214:	0091      	lsls	r1, r2, #2
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	6812      	ldr	r2, [r2, #0]
 800821a:	430b      	orrs	r3, r1
 800821c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008228:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008230:	041a      	lsls	r2, r3, #16
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	430a      	orrs	r2, r1
 8008238:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008240:	005b      	lsls	r3, r3, #1
 8008242:	68ba      	ldr	r2, [r7, #8]
 8008244:	4413      	add	r3, r2
 8008246:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8008250:	4b86      	ldr	r3, [pc, #536]	; (800846c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008252:	4013      	ands	r3, r2
 8008254:	68ba      	ldr	r2, [r7, #8]
 8008256:	0091      	lsls	r1, r2, #2
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	6812      	ldr	r2, [r2, #0]
 800825c:	430b      	orrs	r3, r1
 800825e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800826a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008272:	041a      	lsls	r2, r3, #16
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	430a      	orrs	r2, r1
 800827a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008286:	fb02 f303 	mul.w	r3, r2, r3
 800828a:	68ba      	ldr	r2, [r7, #8]
 800828c:	4413      	add	r3, r2
 800828e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008298:	4b74      	ldr	r3, [pc, #464]	; (800846c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800829a:	4013      	ands	r3, r2
 800829c:	68ba      	ldr	r2, [r7, #8]
 800829e:	0091      	lsls	r1, r2, #2
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	6812      	ldr	r2, [r2, #0]
 80082a4:	430b      	orrs	r3, r1
 80082a6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80082b2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082ba:	041a      	lsls	r2, r3, #16
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	430a      	orrs	r2, r1
 80082c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80082ce:	fb02 f303 	mul.w	r3, r2, r3
 80082d2:	68ba      	ldr	r2, [r7, #8]
 80082d4:	4413      	add	r3, r2
 80082d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80082e0:	4b62      	ldr	r3, [pc, #392]	; (800846c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80082e2:	4013      	ands	r3, r2
 80082e4:	68ba      	ldr	r2, [r7, #8]
 80082e6:	0091      	lsls	r1, r2, #2
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	6812      	ldr	r2, [r2, #0]
 80082ec:	430b      	orrs	r3, r1
 80082ee:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80082fa:	fb02 f303 	mul.w	r3, r2, r3
 80082fe:	68ba      	ldr	r2, [r7, #8]
 8008300:	4413      	add	r3, r2
 8008302:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800830c:	4b57      	ldr	r3, [pc, #348]	; (800846c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800830e:	4013      	ands	r3, r2
 8008310:	68ba      	ldr	r2, [r7, #8]
 8008312:	0091      	lsls	r1, r2, #2
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	6812      	ldr	r2, [r2, #0]
 8008318:	430b      	orrs	r3, r1
 800831a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008326:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800832e:	041a      	lsls	r2, r3, #16
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	430a      	orrs	r2, r1
 8008336:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800833e:	005b      	lsls	r3, r3, #1
 8008340:	68ba      	ldr	r2, [r7, #8]
 8008342:	4413      	add	r3, r2
 8008344:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800834e:	4b47      	ldr	r3, [pc, #284]	; (800846c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008350:	4013      	ands	r3, r2
 8008352:	68ba      	ldr	r2, [r7, #8]
 8008354:	0091      	lsls	r1, r2, #2
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	6812      	ldr	r2, [r2, #0]
 800835a:	430b      	orrs	r3, r1
 800835c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008368:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008370:	041a      	lsls	r2, r3, #16
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	430a      	orrs	r2, r1
 8008378:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008384:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800838c:	061a      	lsls	r2, r3, #24
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	430a      	orrs	r2, r1
 8008394:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800839c:	4b34      	ldr	r3, [pc, #208]	; (8008470 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800839e:	4413      	add	r3, r2
 80083a0:	009a      	lsls	r2, r3, #2
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	441a      	add	r2, r3
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083be:	00db      	lsls	r3, r3, #3
 80083c0:	441a      	add	r2, r3
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ce:	6879      	ldr	r1, [r7, #4]
 80083d0:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80083d2:	fb01 f303 	mul.w	r3, r1, r3
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	441a      	add	r2, r3
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083e6:	6879      	ldr	r1, [r7, #4]
 80083e8:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80083ea:	fb01 f303 	mul.w	r3, r1, r3
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	441a      	add	r2, r3
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083fe:	6879      	ldr	r1, [r7, #4]
 8008400:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8008402:	fb01 f303 	mul.w	r3, r1, r3
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	441a      	add	r2, r3
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800841a:	00db      	lsls	r3, r3, #3
 800841c:	441a      	add	r2, r3
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800842e:	6879      	ldr	r1, [r7, #4]
 8008430:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8008432:	fb01 f303 	mul.w	r3, r1, r3
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	441a      	add	r2, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800844a:	6879      	ldr	r1, [r7, #4]
 800844c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800844e:	fb01 f303 	mul.w	r3, r1, r3
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	441a      	add	r2, r3
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008462:	4a04      	ldr	r2, [pc, #16]	; (8008474 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d915      	bls.n	8008494 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8008468:	e006      	b.n	8008478 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800846a:	bf00      	nop
 800846c:	ffff0003 	.word	0xffff0003
 8008470:	10002b00 	.word	0x10002b00
 8008474:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800847e:	f043 0220 	orr.w	r2, r3, #32
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2203      	movs	r2, #3
 800848c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	e010      	b.n	80084b6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008498:	60fb      	str	r3, [r7, #12]
 800849a:	e005      	b.n	80084a8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2200      	movs	r2, #0
 80084a0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	3304      	adds	r3, #4
 80084a6:	60fb      	str	r3, [r7, #12]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084ae:	68fa      	ldr	r2, [r7, #12]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d3f3      	bcc.n	800849c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3714      	adds	r7, #20
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr
 80084c2:	bf00      	nop

080084c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b089      	sub	sp, #36	; 0x24
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80084ce:	2300      	movs	r3, #0
 80084d0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80084d2:	4b86      	ldr	r3, [pc, #536]	; (80086ec <HAL_GPIO_Init+0x228>)
 80084d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80084d6:	e18c      	b.n	80087f2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	2101      	movs	r1, #1
 80084de:	69fb      	ldr	r3, [r7, #28]
 80084e0:	fa01 f303 	lsl.w	r3, r1, r3
 80084e4:	4013      	ands	r3, r2
 80084e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	f000 817e 	beq.w	80087ec <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	f003 0303 	and.w	r3, r3, #3
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d005      	beq.n	8008508 <HAL_GPIO_Init+0x44>
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	f003 0303 	and.w	r3, r3, #3
 8008504:	2b02      	cmp	r3, #2
 8008506:	d130      	bne.n	800856a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800850e:	69fb      	ldr	r3, [r7, #28]
 8008510:	005b      	lsls	r3, r3, #1
 8008512:	2203      	movs	r2, #3
 8008514:	fa02 f303 	lsl.w	r3, r2, r3
 8008518:	43db      	mvns	r3, r3
 800851a:	69ba      	ldr	r2, [r7, #24]
 800851c:	4013      	ands	r3, r2
 800851e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	68da      	ldr	r2, [r3, #12]
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	005b      	lsls	r3, r3, #1
 8008528:	fa02 f303 	lsl.w	r3, r2, r3
 800852c:	69ba      	ldr	r2, [r7, #24]
 800852e:	4313      	orrs	r3, r2
 8008530:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	69ba      	ldr	r2, [r7, #24]
 8008536:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800853e:	2201      	movs	r2, #1
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	fa02 f303 	lsl.w	r3, r2, r3
 8008546:	43db      	mvns	r3, r3
 8008548:	69ba      	ldr	r2, [r7, #24]
 800854a:	4013      	ands	r3, r2
 800854c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	091b      	lsrs	r3, r3, #4
 8008554:	f003 0201 	and.w	r2, r3, #1
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	fa02 f303 	lsl.w	r3, r2, r3
 800855e:	69ba      	ldr	r2, [r7, #24]
 8008560:	4313      	orrs	r3, r2
 8008562:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	69ba      	ldr	r2, [r7, #24]
 8008568:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	f003 0303 	and.w	r3, r3, #3
 8008572:	2b03      	cmp	r3, #3
 8008574:	d017      	beq.n	80085a6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	005b      	lsls	r3, r3, #1
 8008580:	2203      	movs	r2, #3
 8008582:	fa02 f303 	lsl.w	r3, r2, r3
 8008586:	43db      	mvns	r3, r3
 8008588:	69ba      	ldr	r2, [r7, #24]
 800858a:	4013      	ands	r3, r2
 800858c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	689a      	ldr	r2, [r3, #8]
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	005b      	lsls	r3, r3, #1
 8008596:	fa02 f303 	lsl.w	r3, r2, r3
 800859a:	69ba      	ldr	r2, [r7, #24]
 800859c:	4313      	orrs	r3, r2
 800859e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	69ba      	ldr	r2, [r7, #24]
 80085a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	f003 0303 	and.w	r3, r3, #3
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	d123      	bne.n	80085fa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	08da      	lsrs	r2, r3, #3
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	3208      	adds	r2, #8
 80085ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80085c0:	69fb      	ldr	r3, [r7, #28]
 80085c2:	f003 0307 	and.w	r3, r3, #7
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	220f      	movs	r2, #15
 80085ca:	fa02 f303 	lsl.w	r3, r2, r3
 80085ce:	43db      	mvns	r3, r3
 80085d0:	69ba      	ldr	r2, [r7, #24]
 80085d2:	4013      	ands	r3, r2
 80085d4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	691a      	ldr	r2, [r3, #16]
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	f003 0307 	and.w	r3, r3, #7
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	fa02 f303 	lsl.w	r3, r2, r3
 80085e6:	69ba      	ldr	r2, [r7, #24]
 80085e8:	4313      	orrs	r3, r2
 80085ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	08da      	lsrs	r2, r3, #3
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	3208      	adds	r2, #8
 80085f4:	69b9      	ldr	r1, [r7, #24]
 80085f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	005b      	lsls	r3, r3, #1
 8008604:	2203      	movs	r2, #3
 8008606:	fa02 f303 	lsl.w	r3, r2, r3
 800860a:	43db      	mvns	r3, r3
 800860c:	69ba      	ldr	r2, [r7, #24]
 800860e:	4013      	ands	r3, r2
 8008610:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	f003 0203 	and.w	r2, r3, #3
 800861a:	69fb      	ldr	r3, [r7, #28]
 800861c:	005b      	lsls	r3, r3, #1
 800861e:	fa02 f303 	lsl.w	r3, r2, r3
 8008622:	69ba      	ldr	r2, [r7, #24]
 8008624:	4313      	orrs	r3, r2
 8008626:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	69ba      	ldr	r2, [r7, #24]
 800862c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008636:	2b00      	cmp	r3, #0
 8008638:	f000 80d8 	beq.w	80087ec <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800863c:	4b2c      	ldr	r3, [pc, #176]	; (80086f0 <HAL_GPIO_Init+0x22c>)
 800863e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008642:	4a2b      	ldr	r2, [pc, #172]	; (80086f0 <HAL_GPIO_Init+0x22c>)
 8008644:	f043 0302 	orr.w	r3, r3, #2
 8008648:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800864c:	4b28      	ldr	r3, [pc, #160]	; (80086f0 <HAL_GPIO_Init+0x22c>)
 800864e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008652:	f003 0302 	and.w	r3, r3, #2
 8008656:	60fb      	str	r3, [r7, #12]
 8008658:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800865a:	4a26      	ldr	r2, [pc, #152]	; (80086f4 <HAL_GPIO_Init+0x230>)
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	089b      	lsrs	r3, r3, #2
 8008660:	3302      	adds	r3, #2
 8008662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008666:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	f003 0303 	and.w	r3, r3, #3
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	220f      	movs	r2, #15
 8008672:	fa02 f303 	lsl.w	r3, r2, r3
 8008676:	43db      	mvns	r3, r3
 8008678:	69ba      	ldr	r2, [r7, #24]
 800867a:	4013      	ands	r3, r2
 800867c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a1d      	ldr	r2, [pc, #116]	; (80086f8 <HAL_GPIO_Init+0x234>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d04a      	beq.n	800871c <HAL_GPIO_Init+0x258>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4a1c      	ldr	r2, [pc, #112]	; (80086fc <HAL_GPIO_Init+0x238>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d02b      	beq.n	80086e6 <HAL_GPIO_Init+0x222>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	4a1b      	ldr	r2, [pc, #108]	; (8008700 <HAL_GPIO_Init+0x23c>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d025      	beq.n	80086e2 <HAL_GPIO_Init+0x21e>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	4a1a      	ldr	r2, [pc, #104]	; (8008704 <HAL_GPIO_Init+0x240>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d01f      	beq.n	80086de <HAL_GPIO_Init+0x21a>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4a19      	ldr	r2, [pc, #100]	; (8008708 <HAL_GPIO_Init+0x244>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d019      	beq.n	80086da <HAL_GPIO_Init+0x216>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	4a18      	ldr	r2, [pc, #96]	; (800870c <HAL_GPIO_Init+0x248>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d013      	beq.n	80086d6 <HAL_GPIO_Init+0x212>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	4a17      	ldr	r2, [pc, #92]	; (8008710 <HAL_GPIO_Init+0x24c>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d00d      	beq.n	80086d2 <HAL_GPIO_Init+0x20e>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	4a16      	ldr	r2, [pc, #88]	; (8008714 <HAL_GPIO_Init+0x250>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d007      	beq.n	80086ce <HAL_GPIO_Init+0x20a>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	4a15      	ldr	r2, [pc, #84]	; (8008718 <HAL_GPIO_Init+0x254>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d101      	bne.n	80086ca <HAL_GPIO_Init+0x206>
 80086c6:	2309      	movs	r3, #9
 80086c8:	e029      	b.n	800871e <HAL_GPIO_Init+0x25a>
 80086ca:	230a      	movs	r3, #10
 80086cc:	e027      	b.n	800871e <HAL_GPIO_Init+0x25a>
 80086ce:	2307      	movs	r3, #7
 80086d0:	e025      	b.n	800871e <HAL_GPIO_Init+0x25a>
 80086d2:	2306      	movs	r3, #6
 80086d4:	e023      	b.n	800871e <HAL_GPIO_Init+0x25a>
 80086d6:	2305      	movs	r3, #5
 80086d8:	e021      	b.n	800871e <HAL_GPIO_Init+0x25a>
 80086da:	2304      	movs	r3, #4
 80086dc:	e01f      	b.n	800871e <HAL_GPIO_Init+0x25a>
 80086de:	2303      	movs	r3, #3
 80086e0:	e01d      	b.n	800871e <HAL_GPIO_Init+0x25a>
 80086e2:	2302      	movs	r3, #2
 80086e4:	e01b      	b.n	800871e <HAL_GPIO_Init+0x25a>
 80086e6:	2301      	movs	r3, #1
 80086e8:	e019      	b.n	800871e <HAL_GPIO_Init+0x25a>
 80086ea:	bf00      	nop
 80086ec:	58000080 	.word	0x58000080
 80086f0:	58024400 	.word	0x58024400
 80086f4:	58000400 	.word	0x58000400
 80086f8:	58020000 	.word	0x58020000
 80086fc:	58020400 	.word	0x58020400
 8008700:	58020800 	.word	0x58020800
 8008704:	58020c00 	.word	0x58020c00
 8008708:	58021000 	.word	0x58021000
 800870c:	58021400 	.word	0x58021400
 8008710:	58021800 	.word	0x58021800
 8008714:	58021c00 	.word	0x58021c00
 8008718:	58022400 	.word	0x58022400
 800871c:	2300      	movs	r3, #0
 800871e:	69fa      	ldr	r2, [r7, #28]
 8008720:	f002 0203 	and.w	r2, r2, #3
 8008724:	0092      	lsls	r2, r2, #2
 8008726:	4093      	lsls	r3, r2
 8008728:	69ba      	ldr	r2, [r7, #24]
 800872a:	4313      	orrs	r3, r2
 800872c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800872e:	4938      	ldr	r1, [pc, #224]	; (8008810 <HAL_GPIO_Init+0x34c>)
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	089b      	lsrs	r3, r3, #2
 8008734:	3302      	adds	r3, #2
 8008736:	69ba      	ldr	r2, [r7, #24]
 8008738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800873c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	43db      	mvns	r3, r3
 8008748:	69ba      	ldr	r2, [r7, #24]
 800874a:	4013      	ands	r3, r2
 800874c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008756:	2b00      	cmp	r3, #0
 8008758:	d003      	beq.n	8008762 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800875a:	69ba      	ldr	r2, [r7, #24]
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	4313      	orrs	r3, r2
 8008760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008762:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800876a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	43db      	mvns	r3, r3
 8008776:	69ba      	ldr	r2, [r7, #24]
 8008778:	4013      	ands	r3, r2
 800877a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008784:	2b00      	cmp	r3, #0
 8008786:	d003      	beq.n	8008790 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008788:	69ba      	ldr	r2, [r7, #24]
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	4313      	orrs	r3, r2
 800878e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008790:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	43db      	mvns	r3, r3
 80087a2:	69ba      	ldr	r2, [r7, #24]
 80087a4:	4013      	ands	r3, r2
 80087a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d003      	beq.n	80087bc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80087b4:	69ba      	ldr	r2, [r7, #24]
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	4313      	orrs	r3, r2
 80087ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	69ba      	ldr	r2, [r7, #24]
 80087c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	43db      	mvns	r3, r3
 80087cc:	69ba      	ldr	r2, [r7, #24]
 80087ce:	4013      	ands	r3, r2
 80087d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d003      	beq.n	80087e6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80087de:	69ba      	ldr	r2, [r7, #24]
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	4313      	orrs	r3, r2
 80087e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	69ba      	ldr	r2, [r7, #24]
 80087ea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	3301      	adds	r3, #1
 80087f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	69fb      	ldr	r3, [r7, #28]
 80087f8:	fa22 f303 	lsr.w	r3, r2, r3
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f47f ae6b 	bne.w	80084d8 <HAL_GPIO_Init+0x14>
  }
}
 8008802:	bf00      	nop
 8008804:	bf00      	nop
 8008806:	3724      	adds	r7, #36	; 0x24
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr
 8008810:	58000400 	.word	0x58000400

08008814 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008814:	b480      	push	{r7}
 8008816:	b085      	sub	sp, #20
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	460b      	mov	r3, r1
 800881e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	691a      	ldr	r2, [r3, #16]
 8008824:	887b      	ldrh	r3, [r7, #2]
 8008826:	4013      	ands	r3, r2
 8008828:	2b00      	cmp	r3, #0
 800882a:	d002      	beq.n	8008832 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800882c:	2301      	movs	r3, #1
 800882e:	73fb      	strb	r3, [r7, #15]
 8008830:	e001      	b.n	8008836 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008832:	2300      	movs	r3, #0
 8008834:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008836:	7bfb      	ldrb	r3, [r7, #15]
}
 8008838:	4618      	mov	r0, r3
 800883a:	3714      	adds	r7, #20
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	460b      	mov	r3, r1
 800884e:	807b      	strh	r3, [r7, #2]
 8008850:	4613      	mov	r3, r2
 8008852:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008854:	787b      	ldrb	r3, [r7, #1]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d003      	beq.n	8008862 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800885a:	887a      	ldrh	r2, [r7, #2]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008860:	e003      	b.n	800886a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008862:	887b      	ldrh	r3, [r7, #2]
 8008864:	041a      	lsls	r2, r3, #16
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	619a      	str	r2, [r3, #24]
}
 800886a:	bf00      	nop
 800886c:	370c      	adds	r7, #12
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr
	...

08008878 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d101      	bne.n	800888a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	e07f      	b.n	800898a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008890:	b2db      	uxtb	r3, r3
 8008892:	2b00      	cmp	r3, #0
 8008894:	d106      	bne.n	80088a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2200      	movs	r2, #0
 800889a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f7fa fd52 	bl	8003348 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2224      	movs	r2, #36	; 0x24
 80088a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f022 0201 	bic.w	r2, r2, #1
 80088ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	685a      	ldr	r2, [r3, #4]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80088c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	689a      	ldr	r2, [r3, #8]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80088d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d107      	bne.n	80088f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	689a      	ldr	r2, [r3, #8]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80088ee:	609a      	str	r2, [r3, #8]
 80088f0:	e006      	b.n	8008900 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	689a      	ldr	r2, [r3, #8]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80088fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	2b02      	cmp	r3, #2
 8008906:	d104      	bne.n	8008912 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008910:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	6859      	ldr	r1, [r3, #4]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	4b1d      	ldr	r3, [pc, #116]	; (8008994 <HAL_I2C_Init+0x11c>)
 800891e:	430b      	orrs	r3, r1
 8008920:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	68da      	ldr	r2, [r3, #12]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008930:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	691a      	ldr	r2, [r3, #16]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	695b      	ldr	r3, [r3, #20]
 800893a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	699b      	ldr	r3, [r3, #24]
 8008942:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	430a      	orrs	r2, r1
 800894a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	69d9      	ldr	r1, [r3, #28]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6a1a      	ldr	r2, [r3, #32]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	430a      	orrs	r2, r1
 800895a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f042 0201 	orr.w	r2, r2, #1
 800896a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2220      	movs	r2, #32
 8008976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2200      	movs	r2, #0
 8008984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008988:	2300      	movs	r3, #0
}
 800898a:	4618      	mov	r0, r3
 800898c:	3708      	adds	r7, #8
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	02008000 	.word	0x02008000

08008998 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b088      	sub	sp, #32
 800899c:	af02      	add	r7, sp, #8
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	607a      	str	r2, [r7, #4]
 80089a2:	461a      	mov	r2, r3
 80089a4:	460b      	mov	r3, r1
 80089a6:	817b      	strh	r3, [r7, #10]
 80089a8:	4613      	mov	r3, r2
 80089aa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089b2:	b2db      	uxtb	r3, r3
 80089b4:	2b20      	cmp	r3, #32
 80089b6:	f040 80da 	bne.w	8008b6e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d101      	bne.n	80089c8 <HAL_I2C_Master_Transmit+0x30>
 80089c4:	2302      	movs	r3, #2
 80089c6:	e0d3      	b.n	8008b70 <HAL_I2C_Master_Transmit+0x1d8>
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2201      	movs	r2, #1
 80089cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80089d0:	f7fb fc7a 	bl	80042c8 <HAL_GetTick>
 80089d4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	9300      	str	r3, [sp, #0]
 80089da:	2319      	movs	r3, #25
 80089dc:	2201      	movs	r2, #1
 80089de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80089e2:	68f8      	ldr	r0, [r7, #12]
 80089e4:	f000 fa12 	bl	8008e0c <I2C_WaitOnFlagUntilTimeout>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d001      	beq.n	80089f2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	e0be      	b.n	8008b70 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2221      	movs	r2, #33	; 0x21
 80089f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2210      	movs	r2, #16
 80089fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2200      	movs	r2, #0
 8008a06:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	893a      	ldrh	r2, [r7, #8]
 8008a12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2200      	movs	r2, #0
 8008a18:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a1e:	b29b      	uxth	r3, r3
 8008a20:	2bff      	cmp	r3, #255	; 0xff
 8008a22:	d90e      	bls.n	8008a42 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	22ff      	movs	r2, #255	; 0xff
 8008a28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a2e:	b2da      	uxtb	r2, r3
 8008a30:	8979      	ldrh	r1, [r7, #10]
 8008a32:	4b51      	ldr	r3, [pc, #324]	; (8008b78 <HAL_I2C_Master_Transmit+0x1e0>)
 8008a34:	9300      	str	r3, [sp, #0]
 8008a36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a3a:	68f8      	ldr	r0, [r7, #12]
 8008a3c:	f000 fba0 	bl	8009180 <I2C_TransferConfig>
 8008a40:	e06c      	b.n	8008b1c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a46:	b29a      	uxth	r2, r3
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a50:	b2da      	uxtb	r2, r3
 8008a52:	8979      	ldrh	r1, [r7, #10]
 8008a54:	4b48      	ldr	r3, [pc, #288]	; (8008b78 <HAL_I2C_Master_Transmit+0x1e0>)
 8008a56:	9300      	str	r3, [sp, #0]
 8008a58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a5c:	68f8      	ldr	r0, [r7, #12]
 8008a5e:	f000 fb8f 	bl	8009180 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008a62:	e05b      	b.n	8008b1c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a64:	697a      	ldr	r2, [r7, #20]
 8008a66:	6a39      	ldr	r1, [r7, #32]
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	f000 fa1e 	bl	8008eaa <I2C_WaitOnTXISFlagUntilTimeout>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d001      	beq.n	8008a78 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8008a74:	2301      	movs	r3, #1
 8008a76:	e07b      	b.n	8008b70 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a7c:	781a      	ldrb	r2, [r3, #0]
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a88:	1c5a      	adds	r2, r3, #1
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	3b01      	subs	r3, #1
 8008a96:	b29a      	uxth	r2, r3
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008aa0:	3b01      	subs	r3, #1
 8008aa2:	b29a      	uxth	r2, r3
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d034      	beq.n	8008b1c <HAL_I2C_Master_Transmit+0x184>
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d130      	bne.n	8008b1c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	9300      	str	r3, [sp, #0]
 8008abe:	6a3b      	ldr	r3, [r7, #32]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	2180      	movs	r1, #128	; 0x80
 8008ac4:	68f8      	ldr	r0, [r7, #12]
 8008ac6:	f000 f9a1 	bl	8008e0c <I2C_WaitOnFlagUntilTimeout>
 8008aca:	4603      	mov	r3, r0
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d001      	beq.n	8008ad4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	e04d      	b.n	8008b70 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	2bff      	cmp	r3, #255	; 0xff
 8008adc:	d90e      	bls.n	8008afc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	22ff      	movs	r2, #255	; 0xff
 8008ae2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ae8:	b2da      	uxtb	r2, r3
 8008aea:	8979      	ldrh	r1, [r7, #10]
 8008aec:	2300      	movs	r3, #0
 8008aee:	9300      	str	r3, [sp, #0]
 8008af0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008af4:	68f8      	ldr	r0, [r7, #12]
 8008af6:	f000 fb43 	bl	8009180 <I2C_TransferConfig>
 8008afa:	e00f      	b.n	8008b1c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b00:	b29a      	uxth	r2, r3
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b0a:	b2da      	uxtb	r2, r3
 8008b0c:	8979      	ldrh	r1, [r7, #10]
 8008b0e:	2300      	movs	r3, #0
 8008b10:	9300      	str	r3, [sp, #0]
 8008b12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008b16:	68f8      	ldr	r0, [r7, #12]
 8008b18:	f000 fb32 	bl	8009180 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d19e      	bne.n	8008a64 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b26:	697a      	ldr	r2, [r7, #20]
 8008b28:	6a39      	ldr	r1, [r7, #32]
 8008b2a:	68f8      	ldr	r0, [r7, #12]
 8008b2c:	f000 fa04 	bl	8008f38 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008b30:	4603      	mov	r3, r0
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d001      	beq.n	8008b3a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	e01a      	b.n	8008b70 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2220      	movs	r2, #32
 8008b40:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	6859      	ldr	r1, [r3, #4]
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	4b0b      	ldr	r3, [pc, #44]	; (8008b7c <HAL_I2C_Master_Transmit+0x1e4>)
 8008b4e:	400b      	ands	r3, r1
 8008b50:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2220      	movs	r2, #32
 8008b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2200      	movs	r2, #0
 8008b66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	e000      	b.n	8008b70 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8008b6e:	2302      	movs	r3, #2
  }
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3718      	adds	r7, #24
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	80002000 	.word	0x80002000
 8008b7c:	fe00e800 	.word	0xfe00e800

08008b80 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b08a      	sub	sp, #40	; 0x28
 8008b84:	af02      	add	r7, sp, #8
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	607a      	str	r2, [r7, #4]
 8008b8a:	603b      	str	r3, [r7, #0]
 8008b8c:	460b      	mov	r3, r1
 8008b8e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8008b90:	2300      	movs	r3, #0
 8008b92:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	2b20      	cmp	r3, #32
 8008b9e:	f040 80ef 	bne.w	8008d80 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	699b      	ldr	r3, [r3, #24]
 8008ba8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008bac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bb0:	d101      	bne.n	8008bb6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8008bb2:	2302      	movs	r3, #2
 8008bb4:	e0e5      	b.n	8008d82 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d101      	bne.n	8008bc4 <HAL_I2C_IsDeviceReady+0x44>
 8008bc0:	2302      	movs	r3, #2
 8008bc2:	e0de      	b.n	8008d82 <HAL_I2C_IsDeviceReady+0x202>
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2224      	movs	r2, #36	; 0x24
 8008bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d105      	bne.n	8008bee <HAL_I2C_IsDeviceReady+0x6e>
 8008be2:	897b      	ldrh	r3, [r7, #10]
 8008be4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008be8:	4b68      	ldr	r3, [pc, #416]	; (8008d8c <HAL_I2C_IsDeviceReady+0x20c>)
 8008bea:	4313      	orrs	r3, r2
 8008bec:	e004      	b.n	8008bf8 <HAL_I2C_IsDeviceReady+0x78>
 8008bee:	897b      	ldrh	r3, [r7, #10]
 8008bf0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008bf4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8008bf8:	68fa      	ldr	r2, [r7, #12]
 8008bfa:	6812      	ldr	r2, [r2, #0]
 8008bfc:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8008bfe:	f7fb fb63 	bl	80042c8 <HAL_GetTick>
 8008c02:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	699b      	ldr	r3, [r3, #24]
 8008c0a:	f003 0320 	and.w	r3, r3, #32
 8008c0e:	2b20      	cmp	r3, #32
 8008c10:	bf0c      	ite	eq
 8008c12:	2301      	moveq	r3, #1
 8008c14:	2300      	movne	r3, #0
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	699b      	ldr	r3, [r3, #24]
 8008c20:	f003 0310 	and.w	r3, r3, #16
 8008c24:	2b10      	cmp	r3, #16
 8008c26:	bf0c      	ite	eq
 8008c28:	2301      	moveq	r3, #1
 8008c2a:	2300      	movne	r3, #0
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8008c30:	e034      	b.n	8008c9c <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c38:	d01a      	beq.n	8008c70 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008c3a:	f7fb fb45 	bl	80042c8 <HAL_GetTick>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	69bb      	ldr	r3, [r7, #24]
 8008c42:	1ad3      	subs	r3, r2, r3
 8008c44:	683a      	ldr	r2, [r7, #0]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d302      	bcc.n	8008c50 <HAL_I2C_IsDeviceReady+0xd0>
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d10f      	bne.n	8008c70 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2220      	movs	r2, #32
 8008c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c5c:	f043 0220 	orr.w	r2, r3, #32
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2200      	movs	r2, #0
 8008c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e088      	b.n	8008d82 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	699b      	ldr	r3, [r3, #24]
 8008c76:	f003 0320 	and.w	r3, r3, #32
 8008c7a:	2b20      	cmp	r3, #32
 8008c7c:	bf0c      	ite	eq
 8008c7e:	2301      	moveq	r3, #1
 8008c80:	2300      	movne	r3, #0
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	699b      	ldr	r3, [r3, #24]
 8008c8c:	f003 0310 	and.w	r3, r3, #16
 8008c90:	2b10      	cmp	r3, #16
 8008c92:	bf0c      	ite	eq
 8008c94:	2301      	moveq	r3, #1
 8008c96:	2300      	movne	r3, #0
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8008c9c:	7ffb      	ldrb	r3, [r7, #31]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d102      	bne.n	8008ca8 <HAL_I2C_IsDeviceReady+0x128>
 8008ca2:	7fbb      	ldrb	r3, [r7, #30]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d0c4      	beq.n	8008c32 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	699b      	ldr	r3, [r3, #24]
 8008cae:	f003 0310 	and.w	r3, r3, #16
 8008cb2:	2b10      	cmp	r3, #16
 8008cb4:	d01a      	beq.n	8008cec <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	9300      	str	r3, [sp, #0]
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	2120      	movs	r1, #32
 8008cc0:	68f8      	ldr	r0, [r7, #12]
 8008cc2:	f000 f8a3 	bl	8008e0c <I2C_WaitOnFlagUntilTimeout>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d001      	beq.n	8008cd0 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	e058      	b.n	8008d82 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	2220      	movs	r2, #32
 8008cd6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2220      	movs	r2, #32
 8008cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	e04a      	b.n	8008d82 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8008cec:	69bb      	ldr	r3, [r7, #24]
 8008cee:	9300      	str	r3, [sp, #0]
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	2120      	movs	r1, #32
 8008cf6:	68f8      	ldr	r0, [r7, #12]
 8008cf8:	f000 f888 	bl	8008e0c <I2C_WaitOnFlagUntilTimeout>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d001      	beq.n	8008d06 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8008d02:	2301      	movs	r3, #1
 8008d04:	e03d      	b.n	8008d82 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	2210      	movs	r2, #16
 8008d0c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	2220      	movs	r2, #32
 8008d14:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d118      	bne.n	8008d50 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	685a      	ldr	r2, [r3, #4]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d2c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	9300      	str	r3, [sp, #0]
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	2200      	movs	r2, #0
 8008d36:	2120      	movs	r1, #32
 8008d38:	68f8      	ldr	r0, [r7, #12]
 8008d3a:	f000 f867 	bl	8008e0c <I2C_WaitOnFlagUntilTimeout>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d001      	beq.n	8008d48 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8008d44:	2301      	movs	r3, #1
 8008d46:	e01c      	b.n	8008d82 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2220      	movs	r2, #32
 8008d4e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	3301      	adds	r3, #1
 8008d54:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	f63f af3d 	bhi.w	8008bda <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2220      	movs	r2, #32
 8008d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d6c:	f043 0220 	orr.w	r2, r3, #32
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2200      	movs	r2, #0
 8008d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	e000      	b.n	8008d82 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8008d80:	2302      	movs	r3, #2
  }
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3720      	adds	r7, #32
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	02002000 	.word	0x02002000

08008d90 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	699b      	ldr	r3, [r3, #24]
 8008d9e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d005      	beq.n	8008dbc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008db4:	68ba      	ldr	r2, [r7, #8]
 8008db6:	68f9      	ldr	r1, [r7, #12]
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	4798      	blx	r3
  }
}
 8008dbc:	bf00      	nop
 8008dbe:	3710      	adds	r7, #16
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b083      	sub	sp, #12
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	699b      	ldr	r3, [r3, #24]
 8008dd2:	f003 0302 	and.w	r3, r3, #2
 8008dd6:	2b02      	cmp	r3, #2
 8008dd8:	d103      	bne.n	8008de2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2200      	movs	r2, #0
 8008de0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	699b      	ldr	r3, [r3, #24]
 8008de8:	f003 0301 	and.w	r3, r3, #1
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d007      	beq.n	8008e00 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	699a      	ldr	r2, [r3, #24]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f042 0201 	orr.w	r2, r2, #1
 8008dfe:	619a      	str	r2, [r3, #24]
  }
}
 8008e00:	bf00      	nop
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b084      	sub	sp, #16
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	603b      	str	r3, [r7, #0]
 8008e18:	4613      	mov	r3, r2
 8008e1a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008e1c:	e031      	b.n	8008e82 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e24:	d02d      	beq.n	8008e82 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e26:	f7fb fa4f 	bl	80042c8 <HAL_GetTick>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	69bb      	ldr	r3, [r7, #24]
 8008e2e:	1ad3      	subs	r3, r2, r3
 8008e30:	683a      	ldr	r2, [r7, #0]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d302      	bcc.n	8008e3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d122      	bne.n	8008e82 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	699a      	ldr	r2, [r3, #24]
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	4013      	ands	r3, r2
 8008e46:	68ba      	ldr	r2, [r7, #8]
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	bf0c      	ite	eq
 8008e4c:	2301      	moveq	r3, #1
 8008e4e:	2300      	movne	r3, #0
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	461a      	mov	r2, r3
 8008e54:	79fb      	ldrb	r3, [r7, #7]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d113      	bne.n	8008e82 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e5e:	f043 0220 	orr.w	r2, r3, #32
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2220      	movs	r2, #32
 8008e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2200      	movs	r2, #0
 8008e72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	e00f      	b.n	8008ea2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	699a      	ldr	r2, [r3, #24]
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	4013      	ands	r3, r2
 8008e8c:	68ba      	ldr	r2, [r7, #8]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	bf0c      	ite	eq
 8008e92:	2301      	moveq	r3, #1
 8008e94:	2300      	movne	r3, #0
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	461a      	mov	r2, r3
 8008e9a:	79fb      	ldrb	r3, [r7, #7]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d0be      	beq.n	8008e1e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ea0:	2300      	movs	r3, #0
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3710      	adds	r7, #16
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008eaa:	b580      	push	{r7, lr}
 8008eac:	b084      	sub	sp, #16
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	60f8      	str	r0, [r7, #12]
 8008eb2:	60b9      	str	r1, [r7, #8]
 8008eb4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008eb6:	e033      	b.n	8008f20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	68b9      	ldr	r1, [r7, #8]
 8008ebc:	68f8      	ldr	r0, [r7, #12]
 8008ebe:	f000 f87f 	bl	8008fc0 <I2C_IsErrorOccurred>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d001      	beq.n	8008ecc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e031      	b.n	8008f30 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ed2:	d025      	beq.n	8008f20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ed4:	f7fb f9f8 	bl	80042c8 <HAL_GetTick>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	1ad3      	subs	r3, r2, r3
 8008ede:	68ba      	ldr	r2, [r7, #8]
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d302      	bcc.n	8008eea <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d11a      	bne.n	8008f20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	699b      	ldr	r3, [r3, #24]
 8008ef0:	f003 0302 	and.w	r3, r3, #2
 8008ef4:	2b02      	cmp	r3, #2
 8008ef6:	d013      	beq.n	8008f20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008efc:	f043 0220 	orr.w	r2, r3, #32
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2220      	movs	r2, #32
 8008f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2200      	movs	r2, #0
 8008f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	e007      	b.n	8008f30 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	699b      	ldr	r3, [r3, #24]
 8008f26:	f003 0302 	and.w	r3, r3, #2
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d1c4      	bne.n	8008eb8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008f2e:	2300      	movs	r3, #0
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3710      	adds	r7, #16
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008f44:	e02f      	b.n	8008fa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	68b9      	ldr	r1, [r7, #8]
 8008f4a:	68f8      	ldr	r0, [r7, #12]
 8008f4c:	f000 f838 	bl	8008fc0 <I2C_IsErrorOccurred>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d001      	beq.n	8008f5a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008f56:	2301      	movs	r3, #1
 8008f58:	e02d      	b.n	8008fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f5a:	f7fb f9b5 	bl	80042c8 <HAL_GetTick>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	1ad3      	subs	r3, r2, r3
 8008f64:	68ba      	ldr	r2, [r7, #8]
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d302      	bcc.n	8008f70 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d11a      	bne.n	8008fa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	699b      	ldr	r3, [r3, #24]
 8008f76:	f003 0320 	and.w	r3, r3, #32
 8008f7a:	2b20      	cmp	r3, #32
 8008f7c:	d013      	beq.n	8008fa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f82:	f043 0220 	orr.w	r2, r3, #32
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2220      	movs	r2, #32
 8008f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2200      	movs	r2, #0
 8008f96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e007      	b.n	8008fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	699b      	ldr	r3, [r3, #24]
 8008fac:	f003 0320 	and.w	r3, r3, #32
 8008fb0:	2b20      	cmp	r3, #32
 8008fb2:	d1c8      	bne.n	8008f46 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
	...

08008fc0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b08a      	sub	sp, #40	; 0x28
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	699b      	ldr	r3, [r3, #24]
 8008fd8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008fe2:	69bb      	ldr	r3, [r7, #24]
 8008fe4:	f003 0310 	and.w	r3, r3, #16
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d068      	beq.n	80090be <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	2210      	movs	r2, #16
 8008ff2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008ff4:	e049      	b.n	800908a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ffc:	d045      	beq.n	800908a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008ffe:	f7fb f963 	bl	80042c8 <HAL_GetTick>
 8009002:	4602      	mov	r2, r0
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	1ad3      	subs	r3, r2, r3
 8009008:	68ba      	ldr	r2, [r7, #8]
 800900a:	429a      	cmp	r2, r3
 800900c:	d302      	bcc.n	8009014 <I2C_IsErrorOccurred+0x54>
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d13a      	bne.n	800908a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800901e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009026:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	699b      	ldr	r3, [r3, #24]
 800902e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009032:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009036:	d121      	bne.n	800907c <I2C_IsErrorOccurred+0xbc>
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800903e:	d01d      	beq.n	800907c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009040:	7cfb      	ldrb	r3, [r7, #19]
 8009042:	2b20      	cmp	r3, #32
 8009044:	d01a      	beq.n	800907c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	685a      	ldr	r2, [r3, #4]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009054:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009056:	f7fb f937 	bl	80042c8 <HAL_GetTick>
 800905a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800905c:	e00e      	b.n	800907c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800905e:	f7fb f933 	bl	80042c8 <HAL_GetTick>
 8009062:	4602      	mov	r2, r0
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	1ad3      	subs	r3, r2, r3
 8009068:	2b19      	cmp	r3, #25
 800906a:	d907      	bls.n	800907c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800906c:	6a3b      	ldr	r3, [r7, #32]
 800906e:	f043 0320 	orr.w	r3, r3, #32
 8009072:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009074:	2301      	movs	r3, #1
 8009076:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800907a:	e006      	b.n	800908a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	699b      	ldr	r3, [r3, #24]
 8009082:	f003 0320 	and.w	r3, r3, #32
 8009086:	2b20      	cmp	r3, #32
 8009088:	d1e9      	bne.n	800905e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	699b      	ldr	r3, [r3, #24]
 8009090:	f003 0320 	and.w	r3, r3, #32
 8009094:	2b20      	cmp	r3, #32
 8009096:	d003      	beq.n	80090a0 <I2C_IsErrorOccurred+0xe0>
 8009098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800909c:	2b00      	cmp	r3, #0
 800909e:	d0aa      	beq.n	8008ff6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80090a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d103      	bne.n	80090b0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	2220      	movs	r2, #32
 80090ae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80090b0:	6a3b      	ldr	r3, [r7, #32]
 80090b2:	f043 0304 	orr.w	r3, r3, #4
 80090b6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80090b8:	2301      	movs	r3, #1
 80090ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	699b      	ldr	r3, [r3, #24]
 80090c4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80090c6:	69bb      	ldr	r3, [r7, #24]
 80090c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d00b      	beq.n	80090e8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80090d0:	6a3b      	ldr	r3, [r7, #32]
 80090d2:	f043 0301 	orr.w	r3, r3, #1
 80090d6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80090e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80090e2:	2301      	movs	r3, #1
 80090e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80090e8:	69bb      	ldr	r3, [r7, #24]
 80090ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d00b      	beq.n	800910a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80090f2:	6a3b      	ldr	r3, [r7, #32]
 80090f4:	f043 0308 	orr.w	r3, r3, #8
 80090f8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009102:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009110:	2b00      	cmp	r3, #0
 8009112:	d00b      	beq.n	800912c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009114:	6a3b      	ldr	r3, [r7, #32]
 8009116:	f043 0302 	orr.w	r3, r3, #2
 800911a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009124:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009126:	2301      	movs	r3, #1
 8009128:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800912c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009130:	2b00      	cmp	r3, #0
 8009132:	d01c      	beq.n	800916e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009134:	68f8      	ldr	r0, [r7, #12]
 8009136:	f7ff fe45 	bl	8008dc4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	6859      	ldr	r1, [r3, #4]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	4b0d      	ldr	r3, [pc, #52]	; (800917c <I2C_IsErrorOccurred+0x1bc>)
 8009146:	400b      	ands	r3, r1
 8009148:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800914e:	6a3b      	ldr	r3, [r7, #32]
 8009150:	431a      	orrs	r2, r3
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2220      	movs	r2, #32
 800915a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2200      	movs	r2, #0
 8009162:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2200      	movs	r2, #0
 800916a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800916e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009172:	4618      	mov	r0, r3
 8009174:	3728      	adds	r7, #40	; 0x28
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	fe00e800 	.word	0xfe00e800

08009180 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009180:	b480      	push	{r7}
 8009182:	b087      	sub	sp, #28
 8009184:	af00      	add	r7, sp, #0
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	607b      	str	r3, [r7, #4]
 800918a:	460b      	mov	r3, r1
 800918c:	817b      	strh	r3, [r7, #10]
 800918e:	4613      	mov	r3, r2
 8009190:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009192:	897b      	ldrh	r3, [r7, #10]
 8009194:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009198:	7a7b      	ldrb	r3, [r7, #9]
 800919a:	041b      	lsls	r3, r3, #16
 800919c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80091a0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80091a6:	6a3b      	ldr	r3, [r7, #32]
 80091a8:	4313      	orrs	r3, r2
 80091aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80091ae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	685a      	ldr	r2, [r3, #4]
 80091b6:	6a3b      	ldr	r3, [r7, #32]
 80091b8:	0d5b      	lsrs	r3, r3, #21
 80091ba:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80091be:	4b08      	ldr	r3, [pc, #32]	; (80091e0 <I2C_TransferConfig+0x60>)
 80091c0:	430b      	orrs	r3, r1
 80091c2:	43db      	mvns	r3, r3
 80091c4:	ea02 0103 	and.w	r1, r2, r3
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	697a      	ldr	r2, [r7, #20]
 80091ce:	430a      	orrs	r2, r1
 80091d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80091d2:	bf00      	nop
 80091d4:	371c      	adds	r7, #28
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr
 80091de:	bf00      	nop
 80091e0:	03ff63ff 	.word	0x03ff63ff

080091e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b083      	sub	sp, #12
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091f4:	b2db      	uxtb	r3, r3
 80091f6:	2b20      	cmp	r3, #32
 80091f8:	d138      	bne.n	800926c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009200:	2b01      	cmp	r3, #1
 8009202:	d101      	bne.n	8009208 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009204:	2302      	movs	r3, #2
 8009206:	e032      	b.n	800926e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2201      	movs	r2, #1
 800920c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2224      	movs	r2, #36	; 0x24
 8009214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f022 0201 	bic.w	r2, r2, #1
 8009226:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009236:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	6819      	ldr	r1, [r3, #0]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	683a      	ldr	r2, [r7, #0]
 8009244:	430a      	orrs	r2, r1
 8009246:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	681a      	ldr	r2, [r3, #0]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f042 0201 	orr.w	r2, r2, #1
 8009256:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2220      	movs	r2, #32
 800925c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009268:	2300      	movs	r3, #0
 800926a:	e000      	b.n	800926e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800926c:	2302      	movs	r3, #2
  }
}
 800926e:	4618      	mov	r0, r3
 8009270:	370c      	adds	r7, #12
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr

0800927a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800927a:	b480      	push	{r7}
 800927c:	b085      	sub	sp, #20
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
 8009282:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800928a:	b2db      	uxtb	r3, r3
 800928c:	2b20      	cmp	r3, #32
 800928e:	d139      	bne.n	8009304 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009296:	2b01      	cmp	r3, #1
 8009298:	d101      	bne.n	800929e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800929a:	2302      	movs	r3, #2
 800929c:	e033      	b.n	8009306 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2201      	movs	r2, #1
 80092a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2224      	movs	r2, #36	; 0x24
 80092aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	681a      	ldr	r2, [r3, #0]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f022 0201 	bic.w	r2, r2, #1
 80092bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80092cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	021b      	lsls	r3, r3, #8
 80092d2:	68fa      	ldr	r2, [r7, #12]
 80092d4:	4313      	orrs	r3, r2
 80092d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	68fa      	ldr	r2, [r7, #12]
 80092de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f042 0201 	orr.w	r2, r2, #1
 80092ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2220      	movs	r2, #32
 80092f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009300:	2300      	movs	r3, #0
 8009302:	e000      	b.n	8009306 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009304:	2302      	movs	r3, #2
  }
}
 8009306:	4618      	mov	r0, r3
 8009308:	3714      	adds	r7, #20
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr

08009312 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009312:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009314:	b08f      	sub	sp, #60	; 0x3c
 8009316:	af0a      	add	r7, sp, #40	; 0x28
 8009318:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d101      	bne.n	8009324 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009320:	2301      	movs	r3, #1
 8009322:	e116      	b.n	8009552 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8009330:	b2db      	uxtb	r3, r3
 8009332:	2b00      	cmp	r3, #0
 8009334:	d106      	bne.n	8009344 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2200      	movs	r2, #0
 800933a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f00e fa96 	bl	8017870 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2203      	movs	r2, #3
 8009348:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009354:	2b00      	cmp	r3, #0
 8009356:	d102      	bne.n	800935e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2200      	movs	r2, #0
 800935c:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4618      	mov	r0, r3
 8009364:	f00a fbdb 	bl	8013b1e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	603b      	str	r3, [r7, #0]
 800936e:	687e      	ldr	r6, [r7, #4]
 8009370:	466d      	mov	r5, sp
 8009372:	f106 0410 	add.w	r4, r6, #16
 8009376:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009378:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800937a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800937c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800937e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009382:	e885 0003 	stmia.w	r5, {r0, r1}
 8009386:	1d33      	adds	r3, r6, #4
 8009388:	cb0e      	ldmia	r3, {r1, r2, r3}
 800938a:	6838      	ldr	r0, [r7, #0]
 800938c:	f00a faa6 	bl	80138dc <USB_CoreInit>
 8009390:	4603      	mov	r3, r0
 8009392:	2b00      	cmp	r3, #0
 8009394:	d005      	beq.n	80093a2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2202      	movs	r2, #2
 800939a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800939e:	2301      	movs	r3, #1
 80093a0:	e0d7      	b.n	8009552 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	2100      	movs	r1, #0
 80093a8:	4618      	mov	r0, r3
 80093aa:	f00a fbc9 	bl	8013b40 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80093ae:	2300      	movs	r3, #0
 80093b0:	73fb      	strb	r3, [r7, #15]
 80093b2:	e04a      	b.n	800944a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80093b4:	7bfa      	ldrb	r2, [r7, #15]
 80093b6:	6879      	ldr	r1, [r7, #4]
 80093b8:	4613      	mov	r3, r2
 80093ba:	00db      	lsls	r3, r3, #3
 80093bc:	4413      	add	r3, r2
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	440b      	add	r3, r1
 80093c2:	333d      	adds	r3, #61	; 0x3d
 80093c4:	2201      	movs	r2, #1
 80093c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80093c8:	7bfa      	ldrb	r2, [r7, #15]
 80093ca:	6879      	ldr	r1, [r7, #4]
 80093cc:	4613      	mov	r3, r2
 80093ce:	00db      	lsls	r3, r3, #3
 80093d0:	4413      	add	r3, r2
 80093d2:	009b      	lsls	r3, r3, #2
 80093d4:	440b      	add	r3, r1
 80093d6:	333c      	adds	r3, #60	; 0x3c
 80093d8:	7bfa      	ldrb	r2, [r7, #15]
 80093da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80093dc:	7bfa      	ldrb	r2, [r7, #15]
 80093de:	7bfb      	ldrb	r3, [r7, #15]
 80093e0:	b298      	uxth	r0, r3
 80093e2:	6879      	ldr	r1, [r7, #4]
 80093e4:	4613      	mov	r3, r2
 80093e6:	00db      	lsls	r3, r3, #3
 80093e8:	4413      	add	r3, r2
 80093ea:	009b      	lsls	r3, r3, #2
 80093ec:	440b      	add	r3, r1
 80093ee:	3356      	adds	r3, #86	; 0x56
 80093f0:	4602      	mov	r2, r0
 80093f2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80093f4:	7bfa      	ldrb	r2, [r7, #15]
 80093f6:	6879      	ldr	r1, [r7, #4]
 80093f8:	4613      	mov	r3, r2
 80093fa:	00db      	lsls	r3, r3, #3
 80093fc:	4413      	add	r3, r2
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	440b      	add	r3, r1
 8009402:	3340      	adds	r3, #64	; 0x40
 8009404:	2200      	movs	r2, #0
 8009406:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009408:	7bfa      	ldrb	r2, [r7, #15]
 800940a:	6879      	ldr	r1, [r7, #4]
 800940c:	4613      	mov	r3, r2
 800940e:	00db      	lsls	r3, r3, #3
 8009410:	4413      	add	r3, r2
 8009412:	009b      	lsls	r3, r3, #2
 8009414:	440b      	add	r3, r1
 8009416:	3344      	adds	r3, #68	; 0x44
 8009418:	2200      	movs	r2, #0
 800941a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800941c:	7bfa      	ldrb	r2, [r7, #15]
 800941e:	6879      	ldr	r1, [r7, #4]
 8009420:	4613      	mov	r3, r2
 8009422:	00db      	lsls	r3, r3, #3
 8009424:	4413      	add	r3, r2
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	440b      	add	r3, r1
 800942a:	3348      	adds	r3, #72	; 0x48
 800942c:	2200      	movs	r2, #0
 800942e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009430:	7bfa      	ldrb	r2, [r7, #15]
 8009432:	6879      	ldr	r1, [r7, #4]
 8009434:	4613      	mov	r3, r2
 8009436:	00db      	lsls	r3, r3, #3
 8009438:	4413      	add	r3, r2
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	440b      	add	r3, r1
 800943e:	334c      	adds	r3, #76	; 0x4c
 8009440:	2200      	movs	r2, #0
 8009442:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009444:	7bfb      	ldrb	r3, [r7, #15]
 8009446:	3301      	adds	r3, #1
 8009448:	73fb      	strb	r3, [r7, #15]
 800944a:	7bfa      	ldrb	r2, [r7, #15]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	429a      	cmp	r2, r3
 8009452:	d3af      	bcc.n	80093b4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009454:	2300      	movs	r3, #0
 8009456:	73fb      	strb	r3, [r7, #15]
 8009458:	e044      	b.n	80094e4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800945a:	7bfa      	ldrb	r2, [r7, #15]
 800945c:	6879      	ldr	r1, [r7, #4]
 800945e:	4613      	mov	r3, r2
 8009460:	00db      	lsls	r3, r3, #3
 8009462:	4413      	add	r3, r2
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	440b      	add	r3, r1
 8009468:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800946c:	2200      	movs	r2, #0
 800946e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009470:	7bfa      	ldrb	r2, [r7, #15]
 8009472:	6879      	ldr	r1, [r7, #4]
 8009474:	4613      	mov	r3, r2
 8009476:	00db      	lsls	r3, r3, #3
 8009478:	4413      	add	r3, r2
 800947a:	009b      	lsls	r3, r3, #2
 800947c:	440b      	add	r3, r1
 800947e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8009482:	7bfa      	ldrb	r2, [r7, #15]
 8009484:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009486:	7bfa      	ldrb	r2, [r7, #15]
 8009488:	6879      	ldr	r1, [r7, #4]
 800948a:	4613      	mov	r3, r2
 800948c:	00db      	lsls	r3, r3, #3
 800948e:	4413      	add	r3, r2
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	440b      	add	r3, r1
 8009494:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009498:	2200      	movs	r2, #0
 800949a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800949c:	7bfa      	ldrb	r2, [r7, #15]
 800949e:	6879      	ldr	r1, [r7, #4]
 80094a0:	4613      	mov	r3, r2
 80094a2:	00db      	lsls	r3, r3, #3
 80094a4:	4413      	add	r3, r2
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	440b      	add	r3, r1
 80094aa:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80094ae:	2200      	movs	r2, #0
 80094b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80094b2:	7bfa      	ldrb	r2, [r7, #15]
 80094b4:	6879      	ldr	r1, [r7, #4]
 80094b6:	4613      	mov	r3, r2
 80094b8:	00db      	lsls	r3, r3, #3
 80094ba:	4413      	add	r3, r2
 80094bc:	009b      	lsls	r3, r3, #2
 80094be:	440b      	add	r3, r1
 80094c0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80094c4:	2200      	movs	r2, #0
 80094c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80094c8:	7bfa      	ldrb	r2, [r7, #15]
 80094ca:	6879      	ldr	r1, [r7, #4]
 80094cc:	4613      	mov	r3, r2
 80094ce:	00db      	lsls	r3, r3, #3
 80094d0:	4413      	add	r3, r2
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	440b      	add	r3, r1
 80094d6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80094da:	2200      	movs	r2, #0
 80094dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80094de:	7bfb      	ldrb	r3, [r7, #15]
 80094e0:	3301      	adds	r3, #1
 80094e2:	73fb      	strb	r3, [r7, #15]
 80094e4:	7bfa      	ldrb	r2, [r7, #15]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d3b5      	bcc.n	800945a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	603b      	str	r3, [r7, #0]
 80094f4:	687e      	ldr	r6, [r7, #4]
 80094f6:	466d      	mov	r5, sp
 80094f8:	f106 0410 	add.w	r4, r6, #16
 80094fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80094fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009500:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009502:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009504:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009508:	e885 0003 	stmia.w	r5, {r0, r1}
 800950c:	1d33      	adds	r3, r6, #4
 800950e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009510:	6838      	ldr	r0, [r7, #0]
 8009512:	f00a fb61 	bl	8013bd8 <USB_DevInit>
 8009516:	4603      	mov	r3, r0
 8009518:	2b00      	cmp	r3, #0
 800951a:	d005      	beq.n	8009528 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2202      	movs	r2, #2
 8009520:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8009524:	2301      	movs	r3, #1
 8009526:	e014      	b.n	8009552 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800953c:	2b01      	cmp	r3, #1
 800953e:	d102      	bne.n	8009546 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f001 f96f 	bl	800a824 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4618      	mov	r0, r3
 800954c:	f00b fba3 	bl	8014c96 <USB_DevDisconnect>

  return HAL_OK;
 8009550:	2300      	movs	r3, #0
}
 8009552:	4618      	mov	r0, r3
 8009554:	3714      	adds	r7, #20
 8009556:	46bd      	mov	sp, r7
 8009558:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800955a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800955a:	b580      	push	{r7, lr}
 800955c:	b084      	sub	sp, #16
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800956e:	2b01      	cmp	r3, #1
 8009570:	d101      	bne.n	8009576 <HAL_PCD_Start+0x1c>
 8009572:	2302      	movs	r3, #2
 8009574:	e022      	b.n	80095bc <HAL_PCD_Start+0x62>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2201      	movs	r2, #1
 800957a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009586:	2b00      	cmp	r3, #0
 8009588:	d109      	bne.n	800959e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800958e:	2b01      	cmp	r3, #1
 8009590:	d105      	bne.n	800959e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009596:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4618      	mov	r0, r3
 80095a4:	f00a faaa 	bl	8013afc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4618      	mov	r0, r3
 80095ae:	f00b fb51 	bl	8014c54 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2200      	movs	r2, #0
 80095b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80095ba:	2300      	movs	r3, #0
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3710      	adds	r7, #16
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80095c4:	b590      	push	{r4, r7, lr}
 80095c6:	b08d      	sub	sp, #52	; 0x34
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095d2:	6a3b      	ldr	r3, [r7, #32]
 80095d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4618      	mov	r0, r3
 80095dc:	f00b fc0f 	bl	8014dfe <USB_GetMode>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	f040 84b7 	bne.w	8009f56 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4618      	mov	r0, r3
 80095ee:	f00b fb73 	bl	8014cd8 <USB_ReadInterrupts>
 80095f2:	4603      	mov	r3, r0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	f000 84ad 	beq.w	8009f54 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80095fa:	69fb      	ldr	r3, [r7, #28]
 80095fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	0a1b      	lsrs	r3, r3, #8
 8009604:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4618      	mov	r0, r3
 8009614:	f00b fb60 	bl	8014cd8 <USB_ReadInterrupts>
 8009618:	4603      	mov	r3, r0
 800961a:	f003 0302 	and.w	r3, r3, #2
 800961e:	2b02      	cmp	r3, #2
 8009620:	d107      	bne.n	8009632 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	695a      	ldr	r2, [r3, #20]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f002 0202 	and.w	r2, r2, #2
 8009630:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4618      	mov	r0, r3
 8009638:	f00b fb4e 	bl	8014cd8 <USB_ReadInterrupts>
 800963c:	4603      	mov	r3, r0
 800963e:	f003 0310 	and.w	r3, r3, #16
 8009642:	2b10      	cmp	r3, #16
 8009644:	d161      	bne.n	800970a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	699a      	ldr	r2, [r3, #24]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f022 0210 	bic.w	r2, r2, #16
 8009654:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8009656:	6a3b      	ldr	r3, [r7, #32]
 8009658:	6a1b      	ldr	r3, [r3, #32]
 800965a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800965c:	69bb      	ldr	r3, [r7, #24]
 800965e:	f003 020f 	and.w	r2, r3, #15
 8009662:	4613      	mov	r3, r2
 8009664:	00db      	lsls	r3, r3, #3
 8009666:	4413      	add	r3, r2
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	4413      	add	r3, r2
 8009672:	3304      	adds	r3, #4
 8009674:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009676:	69bb      	ldr	r3, [r7, #24]
 8009678:	0c5b      	lsrs	r3, r3, #17
 800967a:	f003 030f 	and.w	r3, r3, #15
 800967e:	2b02      	cmp	r3, #2
 8009680:	d124      	bne.n	80096cc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009682:	69ba      	ldr	r2, [r7, #24]
 8009684:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009688:	4013      	ands	r3, r2
 800968a:	2b00      	cmp	r3, #0
 800968c:	d035      	beq.n	80096fa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009692:	69bb      	ldr	r3, [r7, #24]
 8009694:	091b      	lsrs	r3, r3, #4
 8009696:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009698:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800969c:	b29b      	uxth	r3, r3
 800969e:	461a      	mov	r2, r3
 80096a0:	6a38      	ldr	r0, [r7, #32]
 80096a2:	f00b f985 	bl	80149b0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	68da      	ldr	r2, [r3, #12]
 80096aa:	69bb      	ldr	r3, [r7, #24]
 80096ac:	091b      	lsrs	r3, r3, #4
 80096ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80096b2:	441a      	add	r2, r3
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	695a      	ldr	r2, [r3, #20]
 80096bc:	69bb      	ldr	r3, [r7, #24]
 80096be:	091b      	lsrs	r3, r3, #4
 80096c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80096c4:	441a      	add	r2, r3
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	615a      	str	r2, [r3, #20]
 80096ca:	e016      	b.n	80096fa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80096cc:	69bb      	ldr	r3, [r7, #24]
 80096ce:	0c5b      	lsrs	r3, r3, #17
 80096d0:	f003 030f 	and.w	r3, r3, #15
 80096d4:	2b06      	cmp	r3, #6
 80096d6:	d110      	bne.n	80096fa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80096de:	2208      	movs	r2, #8
 80096e0:	4619      	mov	r1, r3
 80096e2:	6a38      	ldr	r0, [r7, #32]
 80096e4:	f00b f964 	bl	80149b0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	695a      	ldr	r2, [r3, #20]
 80096ec:	69bb      	ldr	r3, [r7, #24]
 80096ee:	091b      	lsrs	r3, r3, #4
 80096f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80096f4:	441a      	add	r2, r3
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	699a      	ldr	r2, [r3, #24]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f042 0210 	orr.w	r2, r2, #16
 8009708:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4618      	mov	r0, r3
 8009710:	f00b fae2 	bl	8014cd8 <USB_ReadInterrupts>
 8009714:	4603      	mov	r3, r0
 8009716:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800971a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800971e:	f040 80a7 	bne.w	8009870 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8009722:	2300      	movs	r3, #0
 8009724:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4618      	mov	r0, r3
 800972c:	f00b fae7 	bl	8014cfe <USB_ReadDevAllOutEpInterrupt>
 8009730:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8009732:	e099      	b.n	8009868 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009736:	f003 0301 	and.w	r3, r3, #1
 800973a:	2b00      	cmp	r3, #0
 800973c:	f000 808e 	beq.w	800985c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009746:	b2d2      	uxtb	r2, r2
 8009748:	4611      	mov	r1, r2
 800974a:	4618      	mov	r0, r3
 800974c:	f00b fb0b 	bl	8014d66 <USB_ReadDevOutEPInterrupt>
 8009750:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	f003 0301 	and.w	r3, r3, #1
 8009758:	2b00      	cmp	r3, #0
 800975a:	d00c      	beq.n	8009776 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800975c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975e:	015a      	lsls	r2, r3, #5
 8009760:	69fb      	ldr	r3, [r7, #28]
 8009762:	4413      	add	r3, r2
 8009764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009768:	461a      	mov	r2, r3
 800976a:	2301      	movs	r3, #1
 800976c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800976e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 fed1 	bl	800a518 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	f003 0308 	and.w	r3, r3, #8
 800977c:	2b00      	cmp	r3, #0
 800977e:	d00c      	beq.n	800979a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009782:	015a      	lsls	r2, r3, #5
 8009784:	69fb      	ldr	r3, [r7, #28]
 8009786:	4413      	add	r3, r2
 8009788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800978c:	461a      	mov	r2, r3
 800978e:	2308      	movs	r3, #8
 8009790:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009792:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f000 ffa7 	bl	800a6e8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	f003 0310 	and.w	r3, r3, #16
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d008      	beq.n	80097b6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80097a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a6:	015a      	lsls	r2, r3, #5
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	4413      	add	r3, r2
 80097ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097b0:	461a      	mov	r2, r3
 80097b2:	2310      	movs	r3, #16
 80097b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	f003 0302 	and.w	r3, r3, #2
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d030      	beq.n	8009822 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80097c0:	6a3b      	ldr	r3, [r7, #32]
 80097c2:	695b      	ldr	r3, [r3, #20]
 80097c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097c8:	2b80      	cmp	r3, #128	; 0x80
 80097ca:	d109      	bne.n	80097e0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80097cc:	69fb      	ldr	r3, [r7, #28]
 80097ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	69fa      	ldr	r2, [r7, #28]
 80097d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80097da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80097de:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80097e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097e2:	4613      	mov	r3, r2
 80097e4:	00db      	lsls	r3, r3, #3
 80097e6:	4413      	add	r3, r2
 80097e8:	009b      	lsls	r3, r3, #2
 80097ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	4413      	add	r3, r2
 80097f2:	3304      	adds	r3, #4
 80097f4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	78db      	ldrb	r3, [r3, #3]
 80097fa:	2b01      	cmp	r3, #1
 80097fc:	d108      	bne.n	8009810 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	2200      	movs	r2, #0
 8009802:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009806:	b2db      	uxtb	r3, r3
 8009808:	4619      	mov	r1, r3
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f00e f928 	bl	8017a60 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8009810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009812:	015a      	lsls	r2, r3, #5
 8009814:	69fb      	ldr	r3, [r7, #28]
 8009816:	4413      	add	r3, r2
 8009818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800981c:	461a      	mov	r2, r3
 800981e:	2302      	movs	r3, #2
 8009820:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	f003 0320 	and.w	r3, r3, #32
 8009828:	2b00      	cmp	r3, #0
 800982a:	d008      	beq.n	800983e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800982c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982e:	015a      	lsls	r2, r3, #5
 8009830:	69fb      	ldr	r3, [r7, #28]
 8009832:	4413      	add	r3, r2
 8009834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009838:	461a      	mov	r2, r3
 800983a:	2320      	movs	r3, #32
 800983c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009844:	2b00      	cmp	r3, #0
 8009846:	d009      	beq.n	800985c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984a:	015a      	lsls	r2, r3, #5
 800984c:	69fb      	ldr	r3, [r7, #28]
 800984e:	4413      	add	r3, r2
 8009850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009854:	461a      	mov	r2, r3
 8009856:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800985a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800985c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985e:	3301      	adds	r3, #1
 8009860:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009864:	085b      	lsrs	r3, r3, #1
 8009866:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800986a:	2b00      	cmp	r3, #0
 800986c:	f47f af62 	bne.w	8009734 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4618      	mov	r0, r3
 8009876:	f00b fa2f 	bl	8014cd8 <USB_ReadInterrupts>
 800987a:	4603      	mov	r3, r0
 800987c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009880:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009884:	f040 80db 	bne.w	8009a3e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4618      	mov	r0, r3
 800988e:	f00b fa50 	bl	8014d32 <USB_ReadDevAllInEpInterrupt>
 8009892:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009894:	2300      	movs	r3, #0
 8009896:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009898:	e0cd      	b.n	8009a36 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800989a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989c:	f003 0301 	and.w	r3, r3, #1
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	f000 80c2 	beq.w	8009a2a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098ac:	b2d2      	uxtb	r2, r2
 80098ae:	4611      	mov	r1, r2
 80098b0:	4618      	mov	r0, r3
 80098b2:	f00b fa76 	bl	8014da2 <USB_ReadDevInEPInterrupt>
 80098b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	f003 0301 	and.w	r3, r3, #1
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d057      	beq.n	8009972 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80098c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c4:	f003 030f 	and.w	r3, r3, #15
 80098c8:	2201      	movs	r2, #1
 80098ca:	fa02 f303 	lsl.w	r3, r2, r3
 80098ce:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80098d0:	69fb      	ldr	r3, [r7, #28]
 80098d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	43db      	mvns	r3, r3
 80098dc:	69f9      	ldr	r1, [r7, #28]
 80098de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098e2:	4013      	ands	r3, r2
 80098e4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80098e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e8:	015a      	lsls	r2, r3, #5
 80098ea:	69fb      	ldr	r3, [r7, #28]
 80098ec:	4413      	add	r3, r2
 80098ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098f2:	461a      	mov	r2, r3
 80098f4:	2301      	movs	r3, #1
 80098f6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	68db      	ldr	r3, [r3, #12]
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d132      	bne.n	8009966 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009900:	6879      	ldr	r1, [r7, #4]
 8009902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009904:	4613      	mov	r3, r2
 8009906:	00db      	lsls	r3, r3, #3
 8009908:	4413      	add	r3, r2
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	440b      	add	r3, r1
 800990e:	3348      	adds	r3, #72	; 0x48
 8009910:	6819      	ldr	r1, [r3, #0]
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009916:	4613      	mov	r3, r2
 8009918:	00db      	lsls	r3, r3, #3
 800991a:	4413      	add	r3, r2
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	4403      	add	r3, r0
 8009920:	3344      	adds	r3, #68	; 0x44
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4419      	add	r1, r3
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800992a:	4613      	mov	r3, r2
 800992c:	00db      	lsls	r3, r3, #3
 800992e:	4413      	add	r3, r2
 8009930:	009b      	lsls	r3, r3, #2
 8009932:	4403      	add	r3, r0
 8009934:	3348      	adds	r3, #72	; 0x48
 8009936:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993a:	2b00      	cmp	r3, #0
 800993c:	d113      	bne.n	8009966 <HAL_PCD_IRQHandler+0x3a2>
 800993e:	6879      	ldr	r1, [r7, #4]
 8009940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009942:	4613      	mov	r3, r2
 8009944:	00db      	lsls	r3, r3, #3
 8009946:	4413      	add	r3, r2
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	440b      	add	r3, r1
 800994c:	334c      	adds	r3, #76	; 0x4c
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d108      	bne.n	8009966 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6818      	ldr	r0, [r3, #0]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800995e:	461a      	mov	r2, r3
 8009960:	2101      	movs	r1, #1
 8009962:	f00b fa7f 	bl	8014e64 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009968:	b2db      	uxtb	r3, r3
 800996a:	4619      	mov	r1, r3
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f00d fff2 	bl	8017956 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	f003 0308 	and.w	r3, r3, #8
 8009978:	2b00      	cmp	r3, #0
 800997a:	d008      	beq.n	800998e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800997c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997e:	015a      	lsls	r2, r3, #5
 8009980:	69fb      	ldr	r3, [r7, #28]
 8009982:	4413      	add	r3, r2
 8009984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009988:	461a      	mov	r2, r3
 800998a:	2308      	movs	r3, #8
 800998c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	f003 0310 	and.w	r3, r3, #16
 8009994:	2b00      	cmp	r3, #0
 8009996:	d008      	beq.n	80099aa <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999a:	015a      	lsls	r2, r3, #5
 800999c:	69fb      	ldr	r3, [r7, #28]
 800999e:	4413      	add	r3, r2
 80099a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099a4:	461a      	mov	r2, r3
 80099a6:	2310      	movs	r3, #16
 80099a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d008      	beq.n	80099c6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80099b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b6:	015a      	lsls	r2, r3, #5
 80099b8:	69fb      	ldr	r3, [r7, #28]
 80099ba:	4413      	add	r3, r2
 80099bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099c0:	461a      	mov	r2, r3
 80099c2:	2340      	movs	r3, #64	; 0x40
 80099c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	f003 0302 	and.w	r3, r3, #2
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d023      	beq.n	8009a18 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80099d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099d2:	6a38      	ldr	r0, [r7, #32]
 80099d4:	f00a fa5e 	bl	8013e94 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80099d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099da:	4613      	mov	r3, r2
 80099dc:	00db      	lsls	r3, r3, #3
 80099de:	4413      	add	r3, r2
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	3338      	adds	r3, #56	; 0x38
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	4413      	add	r3, r2
 80099e8:	3304      	adds	r3, #4
 80099ea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	78db      	ldrb	r3, [r3, #3]
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d108      	bne.n	8009a06 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	2200      	movs	r2, #0
 80099f8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80099fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fc:	b2db      	uxtb	r3, r3
 80099fe:	4619      	mov	r1, r3
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f00e f83f 	bl	8017a84 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a08:	015a      	lsls	r2, r3, #5
 8009a0a:	69fb      	ldr	r3, [r7, #28]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a12:	461a      	mov	r2, r3
 8009a14:	2302      	movs	r3, #2
 8009a16:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d003      	beq.n	8009a2a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009a22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 fcea 	bl	800a3fe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a32:	085b      	lsrs	r3, r3, #1
 8009a34:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	f47f af2e 	bne.w	800989a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4618      	mov	r0, r3
 8009a44:	f00b f948 	bl	8014cd8 <USB_ReadInterrupts>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a52:	d122      	bne.n	8009a9a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009a54:	69fb      	ldr	r3, [r7, #28]
 8009a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	69fa      	ldr	r2, [r7, #28]
 8009a5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a62:	f023 0301 	bic.w	r3, r3, #1
 8009a66:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d108      	bne.n	8009a84 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2200      	movs	r2, #0
 8009a76:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009a7a:	2100      	movs	r1, #0
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f000 fef5 	bl	800a86c <HAL_PCDEx_LPM_Callback>
 8009a82:	e002      	b.n	8009a8a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f00d ffdd 	bl	8017a44 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	695a      	ldr	r2, [r3, #20]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009a98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f00b f91a 	bl	8014cd8 <USB_ReadInterrupts>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009aaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009aae:	d112      	bne.n	8009ad6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009ab0:	69fb      	ldr	r3, [r7, #28]
 8009ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	f003 0301 	and.w	r3, r3, #1
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d102      	bne.n	8009ac6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f00d ff99 	bl	80179f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	695a      	ldr	r2, [r3, #20]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009ad4:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4618      	mov	r0, r3
 8009adc:	f00b f8fc 	bl	8014cd8 <USB_ReadInterrupts>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ae6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009aea:	d121      	bne.n	8009b30 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	695a      	ldr	r2, [r3, #20]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8009afa:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d111      	bne.n	8009b2a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2201      	movs	r2, #1
 8009b0a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b14:	089b      	lsrs	r3, r3, #2
 8009b16:	f003 020f 	and.w	r2, r3, #15
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009b20:	2101      	movs	r1, #1
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 fea2 	bl	800a86c <HAL_PCDEx_LPM_Callback>
 8009b28:	e002      	b.n	8009b30 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f00d ff64 	bl	80179f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4618      	mov	r0, r3
 8009b36:	f00b f8cf 	bl	8014cd8 <USB_ReadInterrupts>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b44:	f040 80b7 	bne.w	8009cb6 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009b48:	69fb      	ldr	r3, [r7, #28]
 8009b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	69fa      	ldr	r2, [r7, #28]
 8009b52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b56:	f023 0301 	bic.w	r3, r3, #1
 8009b5a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	2110      	movs	r1, #16
 8009b62:	4618      	mov	r0, r3
 8009b64:	f00a f996 	bl	8013e94 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009b68:	2300      	movs	r3, #0
 8009b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b6c:	e046      	b.n	8009bfc <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b70:	015a      	lsls	r2, r3, #5
 8009b72:	69fb      	ldr	r3, [r7, #28]
 8009b74:	4413      	add	r3, r2
 8009b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009b80:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b84:	015a      	lsls	r2, r3, #5
 8009b86:	69fb      	ldr	r3, [r7, #28]
 8009b88:	4413      	add	r3, r2
 8009b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b92:	0151      	lsls	r1, r2, #5
 8009b94:	69fa      	ldr	r2, [r7, #28]
 8009b96:	440a      	add	r2, r1
 8009b98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009ba0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ba4:	015a      	lsls	r2, r3, #5
 8009ba6:	69fb      	ldr	r3, [r7, #28]
 8009ba8:	4413      	add	r3, r2
 8009baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bae:	461a      	mov	r2, r3
 8009bb0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009bb4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb8:	015a      	lsls	r2, r3, #5
 8009bba:	69fb      	ldr	r3, [r7, #28]
 8009bbc:	4413      	add	r3, r2
 8009bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009bc6:	0151      	lsls	r1, r2, #5
 8009bc8:	69fa      	ldr	r2, [r7, #28]
 8009bca:	440a      	add	r2, r1
 8009bcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bd0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009bd4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd8:	015a      	lsls	r2, r3, #5
 8009bda:	69fb      	ldr	r3, [r7, #28]
 8009bdc:	4413      	add	r3, r2
 8009bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009be6:	0151      	lsls	r1, r2, #5
 8009be8:	69fa      	ldr	r2, [r7, #28]
 8009bea:	440a      	add	r2, r1
 8009bec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bf0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009bf4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d3b3      	bcc.n	8009b6e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009c06:	69fb      	ldr	r3, [r7, #28]
 8009c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c0c:	69db      	ldr	r3, [r3, #28]
 8009c0e:	69fa      	ldr	r2, [r7, #28]
 8009c10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c14:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009c18:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d016      	beq.n	8009c50 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009c22:	69fb      	ldr	r3, [r7, #28]
 8009c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c2c:	69fa      	ldr	r2, [r7, #28]
 8009c2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c32:	f043 030b 	orr.w	r3, r3, #11
 8009c36:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009c3a:	69fb      	ldr	r3, [r7, #28]
 8009c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c42:	69fa      	ldr	r2, [r7, #28]
 8009c44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c48:	f043 030b 	orr.w	r3, r3, #11
 8009c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8009c4e:	e015      	b.n	8009c7c <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c56:	695a      	ldr	r2, [r3, #20]
 8009c58:	69fb      	ldr	r3, [r7, #28]
 8009c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c5e:	4619      	mov	r1, r3
 8009c60:	f242 032b 	movw	r3, #8235	; 0x202b
 8009c64:	4313      	orrs	r3, r2
 8009c66:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009c68:	69fb      	ldr	r3, [r7, #28]
 8009c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c6e:	691b      	ldr	r3, [r3, #16]
 8009c70:	69fa      	ldr	r2, [r7, #28]
 8009c72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c76:	f043 030b 	orr.w	r3, r3, #11
 8009c7a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009c7c:	69fb      	ldr	r3, [r7, #28]
 8009c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	69fa      	ldr	r2, [r7, #28]
 8009c86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c8a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009c8e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6818      	ldr	r0, [r3, #0]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	68db      	ldr	r3, [r3, #12]
 8009c98:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	f00b f8df 	bl	8014e64 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	695a      	ldr	r2, [r3, #20]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009cb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f00b f80c 	bl	8014cd8 <USB_ReadInterrupts>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009cc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cca:	d124      	bne.n	8009d16 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f00b f8a3 	bl	8014e1c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f00a f957 	bl	8013f8e <USB_GetDevSpeed>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681c      	ldr	r4, [r3, #0]
 8009cec:	f001 fd88 	bl	800b800 <HAL_RCC_GetHCLKFreq>
 8009cf0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	4620      	mov	r0, r4
 8009cfc:	f009 fe5c 	bl	80139b8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f00d fe50 	bl	80179a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	695a      	ldr	r2, [r3, #20]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009d14:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f00a ffdc 	bl	8014cd8 <USB_ReadInterrupts>
 8009d20:	4603      	mov	r3, r0
 8009d22:	f003 0308 	and.w	r3, r3, #8
 8009d26:	2b08      	cmp	r3, #8
 8009d28:	d10a      	bne.n	8009d40 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f00d fe2d 	bl	801798a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	695a      	ldr	r2, [r3, #20]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f002 0208 	and.w	r2, r2, #8
 8009d3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4618      	mov	r0, r3
 8009d46:	f00a ffc7 	bl	8014cd8 <USB_ReadInterrupts>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d50:	2b80      	cmp	r3, #128	; 0x80
 8009d52:	d122      	bne.n	8009d9a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8009d54:	6a3b      	ldr	r3, [r7, #32]
 8009d56:	699b      	ldr	r3, [r3, #24]
 8009d58:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009d5c:	6a3b      	ldr	r3, [r7, #32]
 8009d5e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009d60:	2301      	movs	r3, #1
 8009d62:	627b      	str	r3, [r7, #36]	; 0x24
 8009d64:	e014      	b.n	8009d90 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009d66:	6879      	ldr	r1, [r7, #4]
 8009d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d6a:	4613      	mov	r3, r2
 8009d6c:	00db      	lsls	r3, r3, #3
 8009d6e:	4413      	add	r3, r2
 8009d70:	009b      	lsls	r3, r3, #2
 8009d72:	440b      	add	r3, r1
 8009d74:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	2b01      	cmp	r3, #1
 8009d7c:	d105      	bne.n	8009d8a <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	4619      	mov	r1, r3
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 fb09 	bl	800a39c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d3e5      	bcc.n	8009d66 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f00a ff9a 	bl	8014cd8 <USB_ReadInterrupts>
 8009da4:	4603      	mov	r3, r0
 8009da6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009daa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009dae:	d13b      	bne.n	8009e28 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009db0:	2301      	movs	r3, #1
 8009db2:	627b      	str	r3, [r7, #36]	; 0x24
 8009db4:	e02b      	b.n	8009e0e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db8:	015a      	lsls	r2, r3, #5
 8009dba:	69fb      	ldr	r3, [r7, #28]
 8009dbc:	4413      	add	r3, r2
 8009dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009dc6:	6879      	ldr	r1, [r7, #4]
 8009dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dca:	4613      	mov	r3, r2
 8009dcc:	00db      	lsls	r3, r3, #3
 8009dce:	4413      	add	r3, r2
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	440b      	add	r3, r1
 8009dd4:	3340      	adds	r3, #64	; 0x40
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	2b01      	cmp	r3, #1
 8009dda:	d115      	bne.n	8009e08 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8009ddc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	da12      	bge.n	8009e08 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009de2:	6879      	ldr	r1, [r7, #4]
 8009de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009de6:	4613      	mov	r3, r2
 8009de8:	00db      	lsls	r3, r3, #3
 8009dea:	4413      	add	r3, r2
 8009dec:	009b      	lsls	r3, r3, #2
 8009dee:	440b      	add	r3, r1
 8009df0:	333f      	adds	r3, #63	; 0x3f
 8009df2:	2201      	movs	r2, #1
 8009df4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8009df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df8:	b2db      	uxtb	r3, r3
 8009dfa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009dfe:	b2db      	uxtb	r3, r3
 8009e00:	4619      	mov	r1, r3
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 faca 	bl	800a39c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d3ce      	bcc.n	8009db6 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	695a      	ldr	r2, [r3, #20]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8009e26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f00a ff53 	bl	8014cd8 <USB_ReadInterrupts>
 8009e32:	4603      	mov	r3, r0
 8009e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009e38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e3c:	d155      	bne.n	8009eea <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009e3e:	2301      	movs	r3, #1
 8009e40:	627b      	str	r3, [r7, #36]	; 0x24
 8009e42:	e045      	b.n	8009ed0 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8009e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e46:	015a      	lsls	r2, r3, #5
 8009e48:	69fb      	ldr	r3, [r7, #28]
 8009e4a:	4413      	add	r3, r2
 8009e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009e54:	6879      	ldr	r1, [r7, #4]
 8009e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e58:	4613      	mov	r3, r2
 8009e5a:	00db      	lsls	r3, r3, #3
 8009e5c:	4413      	add	r3, r2
 8009e5e:	009b      	lsls	r3, r3, #2
 8009e60:	440b      	add	r3, r1
 8009e62:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d12e      	bne.n	8009eca <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009e6c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	da2b      	bge.n	8009eca <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8009e72:	69bb      	ldr	r3, [r7, #24]
 8009e74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8009e7e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d121      	bne.n	8009eca <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8009e86:	6879      	ldr	r1, [r7, #4]
 8009e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e8a:	4613      	mov	r3, r2
 8009e8c:	00db      	lsls	r3, r3, #3
 8009e8e:	4413      	add	r3, r2
 8009e90:	009b      	lsls	r3, r3, #2
 8009e92:	440b      	add	r3, r1
 8009e94:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009e98:	2201      	movs	r2, #1
 8009e9a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009e9c:	6a3b      	ldr	r3, [r7, #32]
 8009e9e:	699b      	ldr	r3, [r3, #24]
 8009ea0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009ea4:	6a3b      	ldr	r3, [r7, #32]
 8009ea6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8009ea8:	6a3b      	ldr	r3, [r7, #32]
 8009eaa:	695b      	ldr	r3, [r3, #20]
 8009eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d10a      	bne.n	8009eca <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8009eb4:	69fb      	ldr	r3, [r7, #28]
 8009eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	69fa      	ldr	r2, [r7, #28]
 8009ebe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ec2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009ec6:	6053      	str	r3, [r2, #4]
            break;
 8009ec8:	e007      	b.n	8009eda <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ecc:	3301      	adds	r3, #1
 8009ece:	627b      	str	r3, [r7, #36]	; 0x24
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	d3b4      	bcc.n	8009e44 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	695a      	ldr	r2, [r3, #20]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8009ee8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f00a fef2 	bl	8014cd8 <USB_ReadInterrupts>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009efe:	d10a      	bne.n	8009f16 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f00d fdd1 	bl	8017aa8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	695a      	ldr	r2, [r3, #20]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009f14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f00a fedc 	bl	8014cd8 <USB_ReadInterrupts>
 8009f20:	4603      	mov	r3, r0
 8009f22:	f003 0304 	and.w	r3, r3, #4
 8009f26:	2b04      	cmp	r3, #4
 8009f28:	d115      	bne.n	8009f56 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009f32:	69bb      	ldr	r3, [r7, #24]
 8009f34:	f003 0304 	and.w	r3, r3, #4
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d002      	beq.n	8009f42 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f00d fdc1 	bl	8017ac4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	6859      	ldr	r1, [r3, #4]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	69ba      	ldr	r2, [r7, #24]
 8009f4e:	430a      	orrs	r2, r1
 8009f50:	605a      	str	r2, [r3, #4]
 8009f52:	e000      	b.n	8009f56 <HAL_PCD_IRQHandler+0x992>
      return;
 8009f54:	bf00      	nop
    }
  }
}
 8009f56:	3734      	adds	r7, #52	; 0x34
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd90      	pop	{r4, r7, pc}

08009f5c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	460b      	mov	r3, r1
 8009f66:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d101      	bne.n	8009f76 <HAL_PCD_SetAddress+0x1a>
 8009f72:	2302      	movs	r3, #2
 8009f74:	e013      	b.n	8009f9e <HAL_PCD_SetAddress+0x42>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2201      	movs	r2, #1
 8009f7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	78fa      	ldrb	r2, [r7, #3]
 8009f82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	78fa      	ldrb	r2, [r7, #3]
 8009f8c:	4611      	mov	r1, r2
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f00a fe3a 	bl	8014c08 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2200      	movs	r2, #0
 8009f98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009f9c:	2300      	movs	r3, #0
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3708      	adds	r7, #8
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}

08009fa6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009fa6:	b580      	push	{r7, lr}
 8009fa8:	b084      	sub	sp, #16
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	6078      	str	r0, [r7, #4]
 8009fae:	4608      	mov	r0, r1
 8009fb0:	4611      	mov	r1, r2
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	70fb      	strb	r3, [r7, #3]
 8009fb8:	460b      	mov	r3, r1
 8009fba:	803b      	strh	r3, [r7, #0]
 8009fbc:	4613      	mov	r3, r2
 8009fbe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009fc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	da0f      	bge.n	8009fec <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009fcc:	78fb      	ldrb	r3, [r7, #3]
 8009fce:	f003 020f 	and.w	r2, r3, #15
 8009fd2:	4613      	mov	r3, r2
 8009fd4:	00db      	lsls	r3, r3, #3
 8009fd6:	4413      	add	r3, r2
 8009fd8:	009b      	lsls	r3, r3, #2
 8009fda:	3338      	adds	r3, #56	; 0x38
 8009fdc:	687a      	ldr	r2, [r7, #4]
 8009fde:	4413      	add	r3, r2
 8009fe0:	3304      	adds	r3, #4
 8009fe2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	705a      	strb	r2, [r3, #1]
 8009fea:	e00f      	b.n	800a00c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009fec:	78fb      	ldrb	r3, [r7, #3]
 8009fee:	f003 020f 	and.w	r2, r3, #15
 8009ff2:	4613      	mov	r3, r2
 8009ff4:	00db      	lsls	r3, r3, #3
 8009ff6:	4413      	add	r3, r2
 8009ff8:	009b      	lsls	r3, r3, #2
 8009ffa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	4413      	add	r3, r2
 800a002:	3304      	adds	r3, #4
 800a004:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2200      	movs	r2, #0
 800a00a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a00c:	78fb      	ldrb	r3, [r7, #3]
 800a00e:	f003 030f 	and.w	r3, r3, #15
 800a012:	b2da      	uxtb	r2, r3
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a018:	883a      	ldrh	r2, [r7, #0]
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	78ba      	ldrb	r2, [r7, #2]
 800a022:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	785b      	ldrb	r3, [r3, #1]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d004      	beq.n	800a036 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	b29a      	uxth	r2, r3
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a036:	78bb      	ldrb	r3, [r7, #2]
 800a038:	2b02      	cmp	r3, #2
 800a03a:	d102      	bne.n	800a042 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2200      	movs	r2, #0
 800a040:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d101      	bne.n	800a050 <HAL_PCD_EP_Open+0xaa>
 800a04c:	2302      	movs	r3, #2
 800a04e:	e00e      	b.n	800a06e <HAL_PCD_EP_Open+0xc8>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2201      	movs	r2, #1
 800a054:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	68f9      	ldr	r1, [r7, #12]
 800a05e:	4618      	mov	r0, r3
 800a060:	f009 ffba 	bl	8013fd8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800a06c:	7afb      	ldrb	r3, [r7, #11]
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3710      	adds	r7, #16
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b084      	sub	sp, #16
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
 800a07e:	460b      	mov	r3, r1
 800a080:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a082:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a086:	2b00      	cmp	r3, #0
 800a088:	da0f      	bge.n	800a0aa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a08a:	78fb      	ldrb	r3, [r7, #3]
 800a08c:	f003 020f 	and.w	r2, r3, #15
 800a090:	4613      	mov	r3, r2
 800a092:	00db      	lsls	r3, r3, #3
 800a094:	4413      	add	r3, r2
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	3338      	adds	r3, #56	; 0x38
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	4413      	add	r3, r2
 800a09e:	3304      	adds	r3, #4
 800a0a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	705a      	strb	r2, [r3, #1]
 800a0a8:	e00f      	b.n	800a0ca <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a0aa:	78fb      	ldrb	r3, [r7, #3]
 800a0ac:	f003 020f 	and.w	r2, r3, #15
 800a0b0:	4613      	mov	r3, r2
 800a0b2:	00db      	lsls	r3, r3, #3
 800a0b4:	4413      	add	r3, r2
 800a0b6:	009b      	lsls	r3, r3, #2
 800a0b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a0bc:	687a      	ldr	r2, [r7, #4]
 800a0be:	4413      	add	r3, r2
 800a0c0:	3304      	adds	r3, #4
 800a0c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800a0ca:	78fb      	ldrb	r3, [r7, #3]
 800a0cc:	f003 030f 	and.w	r3, r3, #15
 800a0d0:	b2da      	uxtb	r2, r3
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	d101      	bne.n	800a0e4 <HAL_PCD_EP_Close+0x6e>
 800a0e0:	2302      	movs	r3, #2
 800a0e2:	e00e      	b.n	800a102 <HAL_PCD_EP_Close+0x8c>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	68f9      	ldr	r1, [r7, #12]
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f009 fff8 	bl	80140e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800a100:	2300      	movs	r3, #0
}
 800a102:	4618      	mov	r0, r3
 800a104:	3710      	adds	r7, #16
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}

0800a10a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a10a:	b580      	push	{r7, lr}
 800a10c:	b086      	sub	sp, #24
 800a10e:	af00      	add	r7, sp, #0
 800a110:	60f8      	str	r0, [r7, #12]
 800a112:	607a      	str	r2, [r7, #4]
 800a114:	603b      	str	r3, [r7, #0]
 800a116:	460b      	mov	r3, r1
 800a118:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a11a:	7afb      	ldrb	r3, [r7, #11]
 800a11c:	f003 020f 	and.w	r2, r3, #15
 800a120:	4613      	mov	r3, r2
 800a122:	00db      	lsls	r3, r3, #3
 800a124:	4413      	add	r3, r2
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a12c:	68fa      	ldr	r2, [r7, #12]
 800a12e:	4413      	add	r3, r2
 800a130:	3304      	adds	r3, #4
 800a132:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	687a      	ldr	r2, [r7, #4]
 800a138:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	683a      	ldr	r2, [r7, #0]
 800a13e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	2200      	movs	r2, #0
 800a144:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	2200      	movs	r2, #0
 800a14a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a14c:	7afb      	ldrb	r3, [r7, #11]
 800a14e:	f003 030f 	and.w	r3, r3, #15
 800a152:	b2da      	uxtb	r2, r3
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	68db      	ldr	r3, [r3, #12]
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	d102      	bne.n	800a166 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	6818      	ldr	r0, [r3, #0]
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	68db      	ldr	r3, [r3, #12]
 800a16e:	b2db      	uxtb	r3, r3
 800a170:	461a      	mov	r2, r3
 800a172:	6979      	ldr	r1, [r7, #20]
 800a174:	f00a f894 	bl	80142a0 <USB_EPStartXfer>

  return HAL_OK;
 800a178:	2300      	movs	r3, #0
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3718      	adds	r7, #24
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}

0800a182 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a182:	b480      	push	{r7}
 800a184:	b083      	sub	sp, #12
 800a186:	af00      	add	r7, sp, #0
 800a188:	6078      	str	r0, [r7, #4]
 800a18a:	460b      	mov	r3, r1
 800a18c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a18e:	78fb      	ldrb	r3, [r7, #3]
 800a190:	f003 020f 	and.w	r2, r3, #15
 800a194:	6879      	ldr	r1, [r7, #4]
 800a196:	4613      	mov	r3, r2
 800a198:	00db      	lsls	r3, r3, #3
 800a19a:	4413      	add	r3, r2
 800a19c:	009b      	lsls	r3, r3, #2
 800a19e:	440b      	add	r3, r1
 800a1a0:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800a1a4:	681b      	ldr	r3, [r3, #0]
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	370c      	adds	r7, #12
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b0:	4770      	bx	lr

0800a1b2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a1b2:	b580      	push	{r7, lr}
 800a1b4:	b086      	sub	sp, #24
 800a1b6:	af00      	add	r7, sp, #0
 800a1b8:	60f8      	str	r0, [r7, #12]
 800a1ba:	607a      	str	r2, [r7, #4]
 800a1bc:	603b      	str	r3, [r7, #0]
 800a1be:	460b      	mov	r3, r1
 800a1c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a1c2:	7afb      	ldrb	r3, [r7, #11]
 800a1c4:	f003 020f 	and.w	r2, r3, #15
 800a1c8:	4613      	mov	r3, r2
 800a1ca:	00db      	lsls	r3, r3, #3
 800a1cc:	4413      	add	r3, r2
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	3338      	adds	r3, #56	; 0x38
 800a1d2:	68fa      	ldr	r2, [r7, #12]
 800a1d4:	4413      	add	r3, r2
 800a1d6:	3304      	adds	r3, #4
 800a1d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	683a      	ldr	r2, [r7, #0]
 800a1e4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a1f2:	7afb      	ldrb	r3, [r7, #11]
 800a1f4:	f003 030f 	and.w	r3, r3, #15
 800a1f8:	b2da      	uxtb	r2, r3
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	68db      	ldr	r3, [r3, #12]
 800a202:	2b01      	cmp	r3, #1
 800a204:	d102      	bne.n	800a20c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a206:	687a      	ldr	r2, [r7, #4]
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	6818      	ldr	r0, [r3, #0]
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	68db      	ldr	r3, [r3, #12]
 800a214:	b2db      	uxtb	r3, r3
 800a216:	461a      	mov	r2, r3
 800a218:	6979      	ldr	r1, [r7, #20]
 800a21a:	f00a f841 	bl	80142a0 <USB_EPStartXfer>

  return HAL_OK;
 800a21e:	2300      	movs	r3, #0
}
 800a220:	4618      	mov	r0, r3
 800a222:	3718      	adds	r7, #24
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	460b      	mov	r3, r1
 800a232:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a234:	78fb      	ldrb	r3, [r7, #3]
 800a236:	f003 020f 	and.w	r2, r3, #15
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	685b      	ldr	r3, [r3, #4]
 800a23e:	429a      	cmp	r2, r3
 800a240:	d901      	bls.n	800a246 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a242:	2301      	movs	r3, #1
 800a244:	e050      	b.n	800a2e8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a246:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	da0f      	bge.n	800a26e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a24e:	78fb      	ldrb	r3, [r7, #3]
 800a250:	f003 020f 	and.w	r2, r3, #15
 800a254:	4613      	mov	r3, r2
 800a256:	00db      	lsls	r3, r3, #3
 800a258:	4413      	add	r3, r2
 800a25a:	009b      	lsls	r3, r3, #2
 800a25c:	3338      	adds	r3, #56	; 0x38
 800a25e:	687a      	ldr	r2, [r7, #4]
 800a260:	4413      	add	r3, r2
 800a262:	3304      	adds	r3, #4
 800a264:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2201      	movs	r2, #1
 800a26a:	705a      	strb	r2, [r3, #1]
 800a26c:	e00d      	b.n	800a28a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a26e:	78fa      	ldrb	r2, [r7, #3]
 800a270:	4613      	mov	r3, r2
 800a272:	00db      	lsls	r3, r3, #3
 800a274:	4413      	add	r3, r2
 800a276:	009b      	lsls	r3, r3, #2
 800a278:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	4413      	add	r3, r2
 800a280:	3304      	adds	r3, #4
 800a282:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2200      	movs	r2, #0
 800a288:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2201      	movs	r2, #1
 800a28e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a290:	78fb      	ldrb	r3, [r7, #3]
 800a292:	f003 030f 	and.w	r3, r3, #15
 800a296:	b2da      	uxtb	r2, r3
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	d101      	bne.n	800a2aa <HAL_PCD_EP_SetStall+0x82>
 800a2a6:	2302      	movs	r3, #2
 800a2a8:	e01e      	b.n	800a2e8 <HAL_PCD_EP_SetStall+0xc0>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	68f9      	ldr	r1, [r7, #12]
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f00a fbd1 	bl	8014a60 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a2be:	78fb      	ldrb	r3, [r7, #3]
 800a2c0:	f003 030f 	and.w	r3, r3, #15
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d10a      	bne.n	800a2de <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6818      	ldr	r0, [r3, #0]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	68db      	ldr	r3, [r3, #12]
 800a2d0:	b2d9      	uxtb	r1, r3
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a2d8:	461a      	mov	r2, r3
 800a2da:	f00a fdc3 	bl	8014e64 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a2e6:	2300      	movs	r3, #0
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3710      	adds	r7, #16
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b084      	sub	sp, #16
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a2fc:	78fb      	ldrb	r3, [r7, #3]
 800a2fe:	f003 020f 	and.w	r2, r3, #15
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	429a      	cmp	r2, r3
 800a308:	d901      	bls.n	800a30e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a30a:	2301      	movs	r3, #1
 800a30c:	e042      	b.n	800a394 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a30e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a312:	2b00      	cmp	r3, #0
 800a314:	da0f      	bge.n	800a336 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a316:	78fb      	ldrb	r3, [r7, #3]
 800a318:	f003 020f 	and.w	r2, r3, #15
 800a31c:	4613      	mov	r3, r2
 800a31e:	00db      	lsls	r3, r3, #3
 800a320:	4413      	add	r3, r2
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	3338      	adds	r3, #56	; 0x38
 800a326:	687a      	ldr	r2, [r7, #4]
 800a328:	4413      	add	r3, r2
 800a32a:	3304      	adds	r3, #4
 800a32c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2201      	movs	r2, #1
 800a332:	705a      	strb	r2, [r3, #1]
 800a334:	e00f      	b.n	800a356 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a336:	78fb      	ldrb	r3, [r7, #3]
 800a338:	f003 020f 	and.w	r2, r3, #15
 800a33c:	4613      	mov	r3, r2
 800a33e:	00db      	lsls	r3, r3, #3
 800a340:	4413      	add	r3, r2
 800a342:	009b      	lsls	r3, r3, #2
 800a344:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a348:	687a      	ldr	r2, [r7, #4]
 800a34a:	4413      	add	r3, r2
 800a34c:	3304      	adds	r3, #4
 800a34e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2200      	movs	r2, #0
 800a354:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2200      	movs	r2, #0
 800a35a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a35c:	78fb      	ldrb	r3, [r7, #3]
 800a35e:	f003 030f 	and.w	r3, r3, #15
 800a362:	b2da      	uxtb	r2, r3
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a36e:	2b01      	cmp	r3, #1
 800a370:	d101      	bne.n	800a376 <HAL_PCD_EP_ClrStall+0x86>
 800a372:	2302      	movs	r3, #2
 800a374:	e00e      	b.n	800a394 <HAL_PCD_EP_ClrStall+0xa4>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2201      	movs	r2, #1
 800a37a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	68f9      	ldr	r1, [r7, #12]
 800a384:	4618      	mov	r0, r3
 800a386:	f00a fbd9 	bl	8014b3c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a392:	2300      	movs	r3, #0
}
 800a394:	4618      	mov	r0, r3
 800a396:	3710      	adds	r7, #16
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b084      	sub	sp, #16
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	460b      	mov	r3, r1
 800a3a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800a3a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	da0c      	bge.n	800a3ca <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a3b0:	78fb      	ldrb	r3, [r7, #3]
 800a3b2:	f003 020f 	and.w	r2, r3, #15
 800a3b6:	4613      	mov	r3, r2
 800a3b8:	00db      	lsls	r3, r3, #3
 800a3ba:	4413      	add	r3, r2
 800a3bc:	009b      	lsls	r3, r3, #2
 800a3be:	3338      	adds	r3, #56	; 0x38
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	4413      	add	r3, r2
 800a3c4:	3304      	adds	r3, #4
 800a3c6:	60fb      	str	r3, [r7, #12]
 800a3c8:	e00c      	b.n	800a3e4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a3ca:	78fb      	ldrb	r3, [r7, #3]
 800a3cc:	f003 020f 	and.w	r2, r3, #15
 800a3d0:	4613      	mov	r3, r2
 800a3d2:	00db      	lsls	r3, r3, #3
 800a3d4:	4413      	add	r3, r2
 800a3d6:	009b      	lsls	r3, r3, #2
 800a3d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a3dc:	687a      	ldr	r2, [r7, #4]
 800a3de:	4413      	add	r3, r2
 800a3e0:	3304      	adds	r3, #4
 800a3e2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	68f9      	ldr	r1, [r7, #12]
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f00a f9f8 	bl	80147e0 <USB_EPStopXfer>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	72fb      	strb	r3, [r7, #11]

  return ret;
 800a3f4:	7afb      	ldrb	r3, [r7, #11]
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3710      	adds	r7, #16
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}

0800a3fe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a3fe:	b580      	push	{r7, lr}
 800a400:	b08a      	sub	sp, #40	; 0x28
 800a402:	af02      	add	r7, sp, #8
 800a404:	6078      	str	r0, [r7, #4]
 800a406:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a412:	683a      	ldr	r2, [r7, #0]
 800a414:	4613      	mov	r3, r2
 800a416:	00db      	lsls	r3, r3, #3
 800a418:	4413      	add	r3, r2
 800a41a:	009b      	lsls	r3, r3, #2
 800a41c:	3338      	adds	r3, #56	; 0x38
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	4413      	add	r3, r2
 800a422:	3304      	adds	r3, #4
 800a424:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	695a      	ldr	r2, [r3, #20]
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	691b      	ldr	r3, [r3, #16]
 800a42e:	429a      	cmp	r2, r3
 800a430:	d901      	bls.n	800a436 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a432:	2301      	movs	r3, #1
 800a434:	e06c      	b.n	800a510 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	691a      	ldr	r2, [r3, #16]
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	695b      	ldr	r3, [r3, #20]
 800a43e:	1ad3      	subs	r3, r2, r3
 800a440:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	689b      	ldr	r3, [r3, #8]
 800a446:	69fa      	ldr	r2, [r7, #28]
 800a448:	429a      	cmp	r2, r3
 800a44a:	d902      	bls.n	800a452 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	689b      	ldr	r3, [r3, #8]
 800a450:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a452:	69fb      	ldr	r3, [r7, #28]
 800a454:	3303      	adds	r3, #3
 800a456:	089b      	lsrs	r3, r3, #2
 800a458:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a45a:	e02b      	b.n	800a4b4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	691a      	ldr	r2, [r3, #16]
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	695b      	ldr	r3, [r3, #20]
 800a464:	1ad3      	subs	r3, r2, r3
 800a466:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	689b      	ldr	r3, [r3, #8]
 800a46c:	69fa      	ldr	r2, [r7, #28]
 800a46e:	429a      	cmp	r2, r3
 800a470:	d902      	bls.n	800a478 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	689b      	ldr	r3, [r3, #8]
 800a476:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a478:	69fb      	ldr	r3, [r7, #28]
 800a47a:	3303      	adds	r3, #3
 800a47c:	089b      	lsrs	r3, r3, #2
 800a47e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	68d9      	ldr	r1, [r3, #12]
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	b2da      	uxtb	r2, r3
 800a488:	69fb      	ldr	r3, [r7, #28]
 800a48a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a490:	b2db      	uxtb	r3, r3
 800a492:	9300      	str	r3, [sp, #0]
 800a494:	4603      	mov	r3, r0
 800a496:	6978      	ldr	r0, [r7, #20]
 800a498:	f00a fa4c 	bl	8014934 <USB_WritePacket>

    ep->xfer_buff  += len;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	68da      	ldr	r2, [r3, #12]
 800a4a0:	69fb      	ldr	r3, [r7, #28]
 800a4a2:	441a      	add	r2, r3
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	695a      	ldr	r2, [r3, #20]
 800a4ac:	69fb      	ldr	r3, [r7, #28]
 800a4ae:	441a      	add	r2, r3
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	015a      	lsls	r2, r3, #5
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	4413      	add	r3, r2
 800a4bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4c0:	699b      	ldr	r3, [r3, #24]
 800a4c2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a4c4:	69ba      	ldr	r2, [r7, #24]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d809      	bhi.n	800a4de <PCD_WriteEmptyTxFifo+0xe0>
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	695a      	ldr	r2, [r3, #20]
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d203      	bcs.n	800a4de <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	691b      	ldr	r3, [r3, #16]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d1be      	bne.n	800a45c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	691a      	ldr	r2, [r3, #16]
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	695b      	ldr	r3, [r3, #20]
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d811      	bhi.n	800a50e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	f003 030f 	and.w	r3, r3, #15
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a4f6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	43db      	mvns	r3, r3
 800a504:	6939      	ldr	r1, [r7, #16]
 800a506:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a50a:	4013      	ands	r3, r2
 800a50c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a50e:	2300      	movs	r3, #0
}
 800a510:	4618      	mov	r0, r3
 800a512:	3720      	adds	r7, #32
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b088      	sub	sp, #32
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a528:	69fb      	ldr	r3, [r7, #28]
 800a52a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a52c:	69fb      	ldr	r3, [r7, #28]
 800a52e:	333c      	adds	r3, #60	; 0x3c
 800a530:	3304      	adds	r3, #4
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	015a      	lsls	r2, r3, #5
 800a53a:	69bb      	ldr	r3, [r7, #24]
 800a53c:	4413      	add	r3, r2
 800a53e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a542:	689b      	ldr	r3, [r3, #8]
 800a544:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	68db      	ldr	r3, [r3, #12]
 800a54a:	2b01      	cmp	r3, #1
 800a54c:	d17b      	bne.n	800a646 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	f003 0308 	and.w	r3, r3, #8
 800a554:	2b00      	cmp	r3, #0
 800a556:	d015      	beq.n	800a584 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	4a61      	ldr	r2, [pc, #388]	; (800a6e0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	f240 80b9 	bls.w	800a6d4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a568:	2b00      	cmp	r3, #0
 800a56a:	f000 80b3 	beq.w	800a6d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	015a      	lsls	r2, r3, #5
 800a572:	69bb      	ldr	r3, [r7, #24]
 800a574:	4413      	add	r3, r2
 800a576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a57a:	461a      	mov	r2, r3
 800a57c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a580:	6093      	str	r3, [r2, #8]
 800a582:	e0a7      	b.n	800a6d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	f003 0320 	and.w	r3, r3, #32
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d009      	beq.n	800a5a2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	015a      	lsls	r2, r3, #5
 800a592:	69bb      	ldr	r3, [r7, #24]
 800a594:	4413      	add	r3, r2
 800a596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a59a:	461a      	mov	r2, r3
 800a59c:	2320      	movs	r3, #32
 800a59e:	6093      	str	r3, [r2, #8]
 800a5a0:	e098      	b.n	800a6d4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	f040 8093 	bne.w	800a6d4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	4a4b      	ldr	r2, [pc, #300]	; (800a6e0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d90f      	bls.n	800a5d6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d00a      	beq.n	800a5d6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	015a      	lsls	r2, r3, #5
 800a5c4:	69bb      	ldr	r3, [r7, #24]
 800a5c6:	4413      	add	r3, r2
 800a5c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5cc:	461a      	mov	r2, r3
 800a5ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5d2:	6093      	str	r3, [r2, #8]
 800a5d4:	e07e      	b.n	800a6d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800a5d6:	683a      	ldr	r2, [r7, #0]
 800a5d8:	4613      	mov	r3, r2
 800a5da:	00db      	lsls	r3, r3, #3
 800a5dc:	4413      	add	r3, r2
 800a5de:	009b      	lsls	r3, r3, #2
 800a5e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a5e4:	687a      	ldr	r2, [r7, #4]
 800a5e6:	4413      	add	r3, r2
 800a5e8:	3304      	adds	r3, #4
 800a5ea:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	6a1a      	ldr	r2, [r3, #32]
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	0159      	lsls	r1, r3, #5
 800a5f4:	69bb      	ldr	r3, [r7, #24]
 800a5f6:	440b      	add	r3, r1
 800a5f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5fc:	691b      	ldr	r3, [r3, #16]
 800a5fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a602:	1ad2      	subs	r2, r2, r3
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d114      	bne.n	800a638 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	691b      	ldr	r3, [r3, #16]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d109      	bne.n	800a62a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6818      	ldr	r0, [r3, #0]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a620:	461a      	mov	r2, r3
 800a622:	2101      	movs	r1, #1
 800a624:	f00a fc1e 	bl	8014e64 <USB_EP0_OutStart>
 800a628:	e006      	b.n	800a638 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	68da      	ldr	r2, [r3, #12]
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	695b      	ldr	r3, [r3, #20]
 800a632:	441a      	add	r2, r3
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	b2db      	uxtb	r3, r3
 800a63c:	4619      	mov	r1, r3
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f00d f96e 	bl	8017920 <HAL_PCD_DataOutStageCallback>
 800a644:	e046      	b.n	800a6d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	4a26      	ldr	r2, [pc, #152]	; (800a6e4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d124      	bne.n	800a698 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a654:	2b00      	cmp	r3, #0
 800a656:	d00a      	beq.n	800a66e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	015a      	lsls	r2, r3, #5
 800a65c:	69bb      	ldr	r3, [r7, #24]
 800a65e:	4413      	add	r3, r2
 800a660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a664:	461a      	mov	r2, r3
 800a666:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a66a:	6093      	str	r3, [r2, #8]
 800a66c:	e032      	b.n	800a6d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	f003 0320 	and.w	r3, r3, #32
 800a674:	2b00      	cmp	r3, #0
 800a676:	d008      	beq.n	800a68a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	015a      	lsls	r2, r3, #5
 800a67c:	69bb      	ldr	r3, [r7, #24]
 800a67e:	4413      	add	r3, r2
 800a680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a684:	461a      	mov	r2, r3
 800a686:	2320      	movs	r3, #32
 800a688:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	b2db      	uxtb	r3, r3
 800a68e:	4619      	mov	r1, r3
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f00d f945 	bl	8017920 <HAL_PCD_DataOutStageCallback>
 800a696:	e01d      	b.n	800a6d4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d114      	bne.n	800a6c8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800a69e:	6879      	ldr	r1, [r7, #4]
 800a6a0:	683a      	ldr	r2, [r7, #0]
 800a6a2:	4613      	mov	r3, r2
 800a6a4:	00db      	lsls	r3, r3, #3
 800a6a6:	4413      	add	r3, r2
 800a6a8:	009b      	lsls	r3, r3, #2
 800a6aa:	440b      	add	r3, r1
 800a6ac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d108      	bne.n	800a6c8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6818      	ldr	r0, [r3, #0]
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a6c0:	461a      	mov	r2, r3
 800a6c2:	2100      	movs	r1, #0
 800a6c4:	f00a fbce 	bl	8014e64 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	b2db      	uxtb	r3, r3
 800a6cc:	4619      	mov	r1, r3
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f00d f926 	bl	8017920 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a6d4:	2300      	movs	r3, #0
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3720      	adds	r7, #32
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
 800a6de:	bf00      	nop
 800a6e0:	4f54300a 	.word	0x4f54300a
 800a6e4:	4f54310a 	.word	0x4f54310a

0800a6e8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b086      	sub	sp, #24
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	333c      	adds	r3, #60	; 0x3c
 800a700:	3304      	adds	r3, #4
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	015a      	lsls	r2, r3, #5
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	4413      	add	r3, r2
 800a70e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a712:	689b      	ldr	r3, [r3, #8]
 800a714:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	4a15      	ldr	r2, [pc, #84]	; (800a770 <PCD_EP_OutSetupPacket_int+0x88>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d90e      	bls.n	800a73c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a724:	2b00      	cmp	r3, #0
 800a726:	d009      	beq.n	800a73c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	015a      	lsls	r2, r3, #5
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	4413      	add	r3, r2
 800a730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a734:	461a      	mov	r2, r3
 800a736:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a73a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f00d f8dd 	bl	80178fc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	4a0a      	ldr	r2, [pc, #40]	; (800a770 <PCD_EP_OutSetupPacket_int+0x88>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d90c      	bls.n	800a764 <PCD_EP_OutSetupPacket_int+0x7c>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	68db      	ldr	r3, [r3, #12]
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d108      	bne.n	800a764 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6818      	ldr	r0, [r3, #0]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a75c:	461a      	mov	r2, r3
 800a75e:	2101      	movs	r1, #1
 800a760:	f00a fb80 	bl	8014e64 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a764:	2300      	movs	r3, #0
}
 800a766:	4618      	mov	r0, r3
 800a768:	3718      	adds	r7, #24
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	bf00      	nop
 800a770:	4f54300a 	.word	0x4f54300a

0800a774 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a774:	b480      	push	{r7}
 800a776:	b085      	sub	sp, #20
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	460b      	mov	r3, r1
 800a77e:	70fb      	strb	r3, [r7, #3]
 800a780:	4613      	mov	r3, r2
 800a782:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a78a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a78c:	78fb      	ldrb	r3, [r7, #3]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d107      	bne.n	800a7a2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a792:	883b      	ldrh	r3, [r7, #0]
 800a794:	0419      	lsls	r1, r3, #16
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	68ba      	ldr	r2, [r7, #8]
 800a79c:	430a      	orrs	r2, r1
 800a79e:	629a      	str	r2, [r3, #40]	; 0x28
 800a7a0:	e028      	b.n	800a7f4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7a8:	0c1b      	lsrs	r3, r3, #16
 800a7aa:	68ba      	ldr	r2, [r7, #8]
 800a7ac:	4413      	add	r3, r2
 800a7ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	73fb      	strb	r3, [r7, #15]
 800a7b4:	e00d      	b.n	800a7d2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681a      	ldr	r2, [r3, #0]
 800a7ba:	7bfb      	ldrb	r3, [r7, #15]
 800a7bc:	3340      	adds	r3, #64	; 0x40
 800a7be:	009b      	lsls	r3, r3, #2
 800a7c0:	4413      	add	r3, r2
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	0c1b      	lsrs	r3, r3, #16
 800a7c6:	68ba      	ldr	r2, [r7, #8]
 800a7c8:	4413      	add	r3, r2
 800a7ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a7cc:	7bfb      	ldrb	r3, [r7, #15]
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	73fb      	strb	r3, [r7, #15]
 800a7d2:	7bfa      	ldrb	r2, [r7, #15]
 800a7d4:	78fb      	ldrb	r3, [r7, #3]
 800a7d6:	3b01      	subs	r3, #1
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d3ec      	bcc.n	800a7b6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a7dc:	883b      	ldrh	r3, [r7, #0]
 800a7de:	0418      	lsls	r0, r3, #16
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6819      	ldr	r1, [r3, #0]
 800a7e4:	78fb      	ldrb	r3, [r7, #3]
 800a7e6:	3b01      	subs	r3, #1
 800a7e8:	68ba      	ldr	r2, [r7, #8]
 800a7ea:	4302      	orrs	r2, r0
 800a7ec:	3340      	adds	r3, #64	; 0x40
 800a7ee:	009b      	lsls	r3, r3, #2
 800a7f0:	440b      	add	r3, r1
 800a7f2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3714      	adds	r7, #20
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr

0800a802 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a802:	b480      	push	{r7}
 800a804:	b083      	sub	sp, #12
 800a806:	af00      	add	r7, sp, #0
 800a808:	6078      	str	r0, [r7, #4]
 800a80a:	460b      	mov	r3, r1
 800a80c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	887a      	ldrh	r2, [r7, #2]
 800a814:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a816:	2300      	movs	r3, #0
}
 800a818:	4618      	mov	r0, r3
 800a81a:	370c      	adds	r7, #12
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a824:	b480      	push	{r7}
 800a826:	b085      	sub	sp, #20
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2201      	movs	r2, #1
 800a836:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2200      	movs	r2, #0
 800a83e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	699b      	ldr	r3, [r3, #24]
 800a846:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a852:	4b05      	ldr	r3, [pc, #20]	; (800a868 <HAL_PCDEx_ActivateLPM+0x44>)
 800a854:	4313      	orrs	r3, r2
 800a856:	68fa      	ldr	r2, [r7, #12]
 800a858:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800a85a:	2300      	movs	r3, #0
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3714      	adds	r7, #20
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr
 800a868:	10000003 	.word	0x10000003

0800a86c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a86c:	b480      	push	{r7}
 800a86e:	b083      	sub	sp, #12
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	460b      	mov	r3, r1
 800a876:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800a878:	bf00      	nop
 800a87a:	370c      	adds	r7, #12
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr

0800a884 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b084      	sub	sp, #16
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a88c:	4b19      	ldr	r3, [pc, #100]	; (800a8f4 <HAL_PWREx_ConfigSupply+0x70>)
 800a88e:	68db      	ldr	r3, [r3, #12]
 800a890:	f003 0304 	and.w	r3, r3, #4
 800a894:	2b04      	cmp	r3, #4
 800a896:	d00a      	beq.n	800a8ae <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a898:	4b16      	ldr	r3, [pc, #88]	; (800a8f4 <HAL_PWREx_ConfigSupply+0x70>)
 800a89a:	68db      	ldr	r3, [r3, #12]
 800a89c:	f003 0307 	and.w	r3, r3, #7
 800a8a0:	687a      	ldr	r2, [r7, #4]
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d001      	beq.n	800a8aa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	e01f      	b.n	800a8ea <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	e01d      	b.n	800a8ea <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a8ae:	4b11      	ldr	r3, [pc, #68]	; (800a8f4 <HAL_PWREx_ConfigSupply+0x70>)
 800a8b0:	68db      	ldr	r3, [r3, #12]
 800a8b2:	f023 0207 	bic.w	r2, r3, #7
 800a8b6:	490f      	ldr	r1, [pc, #60]	; (800a8f4 <HAL_PWREx_ConfigSupply+0x70>)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a8be:	f7f9 fd03 	bl	80042c8 <HAL_GetTick>
 800a8c2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a8c4:	e009      	b.n	800a8da <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a8c6:	f7f9 fcff 	bl	80042c8 <HAL_GetTick>
 800a8ca:	4602      	mov	r2, r0
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	1ad3      	subs	r3, r2, r3
 800a8d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a8d4:	d901      	bls.n	800a8da <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	e007      	b.n	800a8ea <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a8da:	4b06      	ldr	r3, [pc, #24]	; (800a8f4 <HAL_PWREx_ConfigSupply+0x70>)
 800a8dc:	685b      	ldr	r3, [r3, #4]
 800a8de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a8e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8e6:	d1ee      	bne.n	800a8c6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a8e8:	2300      	movs	r3, #0
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3710      	adds	r7, #16
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
 800a8f2:	bf00      	nop
 800a8f4:	58024800 	.word	0x58024800

0800a8f8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800a8fc:	4b05      	ldr	r3, [pc, #20]	; (800a914 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a8fe:	68db      	ldr	r3, [r3, #12]
 800a900:	4a04      	ldr	r2, [pc, #16]	; (800a914 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a902:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a906:	60d3      	str	r3, [r2, #12]
}
 800a908:	bf00      	nop
 800a90a:	46bd      	mov	sp, r7
 800a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a910:	4770      	bx	lr
 800a912:	bf00      	nop
 800a914:	58024800 	.word	0x58024800

0800a918 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b08c      	sub	sp, #48	; 0x30
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d101      	bne.n	800a92a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a926:	2301      	movs	r3, #1
 800a928:	e3c8      	b.n	800b0bc <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f003 0301 	and.w	r3, r3, #1
 800a932:	2b00      	cmp	r3, #0
 800a934:	f000 8087 	beq.w	800aa46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a938:	4b88      	ldr	r3, [pc, #544]	; (800ab5c <HAL_RCC_OscConfig+0x244>)
 800a93a:	691b      	ldr	r3, [r3, #16]
 800a93c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a940:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a942:	4b86      	ldr	r3, [pc, #536]	; (800ab5c <HAL_RCC_OscConfig+0x244>)
 800a944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a946:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a94a:	2b10      	cmp	r3, #16
 800a94c:	d007      	beq.n	800a95e <HAL_RCC_OscConfig+0x46>
 800a94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a950:	2b18      	cmp	r3, #24
 800a952:	d110      	bne.n	800a976 <HAL_RCC_OscConfig+0x5e>
 800a954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a956:	f003 0303 	and.w	r3, r3, #3
 800a95a:	2b02      	cmp	r3, #2
 800a95c:	d10b      	bne.n	800a976 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a95e:	4b7f      	ldr	r3, [pc, #508]	; (800ab5c <HAL_RCC_OscConfig+0x244>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a966:	2b00      	cmp	r3, #0
 800a968:	d06c      	beq.n	800aa44 <HAL_RCC_OscConfig+0x12c>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d168      	bne.n	800aa44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a972:	2301      	movs	r3, #1
 800a974:	e3a2      	b.n	800b0bc <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a97e:	d106      	bne.n	800a98e <HAL_RCC_OscConfig+0x76>
 800a980:	4b76      	ldr	r3, [pc, #472]	; (800ab5c <HAL_RCC_OscConfig+0x244>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	4a75      	ldr	r2, [pc, #468]	; (800ab5c <HAL_RCC_OscConfig+0x244>)
 800a986:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a98a:	6013      	str	r3, [r2, #0]
 800a98c:	e02e      	b.n	800a9ec <HAL_RCC_OscConfig+0xd4>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d10c      	bne.n	800a9b0 <HAL_RCC_OscConfig+0x98>
 800a996:	4b71      	ldr	r3, [pc, #452]	; (800ab5c <HAL_RCC_OscConfig+0x244>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	4a70      	ldr	r2, [pc, #448]	; (800ab5c <HAL_RCC_OscConfig+0x244>)
 800a99c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a9a0:	6013      	str	r3, [r2, #0]
 800a9a2:	4b6e      	ldr	r3, [pc, #440]	; (800ab5c <HAL_RCC_OscConfig+0x244>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	4a6d      	ldr	r2, [pc, #436]	; (800ab5c <HAL_RCC_OscConfig+0x244>)
 800a9a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a9ac:	6013      	str	r3, [r2, #0]
 800a9ae:	e01d      	b.n	800a9ec <HAL_RCC_OscConfig+0xd4>
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a9b8:	d10c      	bne.n	800a9d4 <HAL_RCC_OscConfig+0xbc>
 800a9ba:	4b68      	ldr	r3, [pc, #416]	; (800ab5c <HAL_RCC_OscConfig+0x244>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	4a67      	ldr	r2, [pc, #412]	; (800ab5c <HAL_RCC_OscConfig+0x244>)
 800a9c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a9c4:	6013      	str	r3, [r2, #0]
 800a9c6:	4b65      	ldr	r3, [pc, #404]	; (800ab5c <HAL_RCC_OscConfig+0x244>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	4a64      	ldr	r2, [pc, #400]	; (800ab5c <HAL_RCC_OscConfig+0x244>)
 800a9cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9d0:	6013      	str	r3, [r2, #0]
 800a9d2:	e00b      	b.n	800a9ec <HAL_RCC_OscConfig+0xd4>
 800a9d4:	4b61      	ldr	r3, [pc, #388]	; (800ab5c <HAL_RCC_OscConfig+0x244>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	4a60      	ldr	r2, [pc, #384]	; (800ab5c <HAL_RCC_OscConfig+0x244>)
 800a9da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a9de:	6013      	str	r3, [r2, #0]
 800a9e0:	4b5e      	ldr	r3, [pc, #376]	; (800ab5c <HAL_RCC_OscConfig+0x244>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4a5d      	ldr	r2, [pc, #372]	; (800ab5c <HAL_RCC_OscConfig+0x244>)
 800a9e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a9ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	685b      	ldr	r3, [r3, #4]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d013      	beq.n	800aa1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9f4:	f7f9 fc68 	bl	80042c8 <HAL_GetTick>
 800a9f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a9fa:	e008      	b.n	800aa0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a9fc:	f7f9 fc64 	bl	80042c8 <HAL_GetTick>
 800aa00:	4602      	mov	r2, r0
 800aa02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa04:	1ad3      	subs	r3, r2, r3
 800aa06:	2b64      	cmp	r3, #100	; 0x64
 800aa08:	d901      	bls.n	800aa0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800aa0a:	2303      	movs	r3, #3
 800aa0c:	e356      	b.n	800b0bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aa0e:	4b53      	ldr	r3, [pc, #332]	; (800ab5c <HAL_RCC_OscConfig+0x244>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d0f0      	beq.n	800a9fc <HAL_RCC_OscConfig+0xe4>
 800aa1a:	e014      	b.n	800aa46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa1c:	f7f9 fc54 	bl	80042c8 <HAL_GetTick>
 800aa20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800aa22:	e008      	b.n	800aa36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aa24:	f7f9 fc50 	bl	80042c8 <HAL_GetTick>
 800aa28:	4602      	mov	r2, r0
 800aa2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa2c:	1ad3      	subs	r3, r2, r3
 800aa2e:	2b64      	cmp	r3, #100	; 0x64
 800aa30:	d901      	bls.n	800aa36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800aa32:	2303      	movs	r3, #3
 800aa34:	e342      	b.n	800b0bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800aa36:	4b49      	ldr	r3, [pc, #292]	; (800ab5c <HAL_RCC_OscConfig+0x244>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d1f0      	bne.n	800aa24 <HAL_RCC_OscConfig+0x10c>
 800aa42:	e000      	b.n	800aa46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aa44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f003 0302 	and.w	r3, r3, #2
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	f000 808c 	beq.w	800ab6c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aa54:	4b41      	ldr	r3, [pc, #260]	; (800ab5c <HAL_RCC_OscConfig+0x244>)
 800aa56:	691b      	ldr	r3, [r3, #16]
 800aa58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aa5c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aa5e:	4b3f      	ldr	r3, [pc, #252]	; (800ab5c <HAL_RCC_OscConfig+0x244>)
 800aa60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa62:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800aa64:	6a3b      	ldr	r3, [r7, #32]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d007      	beq.n	800aa7a <HAL_RCC_OscConfig+0x162>
 800aa6a:	6a3b      	ldr	r3, [r7, #32]
 800aa6c:	2b18      	cmp	r3, #24
 800aa6e:	d137      	bne.n	800aae0 <HAL_RCC_OscConfig+0x1c8>
 800aa70:	69fb      	ldr	r3, [r7, #28]
 800aa72:	f003 0303 	and.w	r3, r3, #3
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d132      	bne.n	800aae0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aa7a:	4b38      	ldr	r3, [pc, #224]	; (800ab5c <HAL_RCC_OscConfig+0x244>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f003 0304 	and.w	r3, r3, #4
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d005      	beq.n	800aa92 <HAL_RCC_OscConfig+0x17a>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	68db      	ldr	r3, [r3, #12]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d101      	bne.n	800aa92 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800aa8e:	2301      	movs	r3, #1
 800aa90:	e314      	b.n	800b0bc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800aa92:	4b32      	ldr	r3, [pc, #200]	; (800ab5c <HAL_RCC_OscConfig+0x244>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f023 0219 	bic.w	r2, r3, #25
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	68db      	ldr	r3, [r3, #12]
 800aa9e:	492f      	ldr	r1, [pc, #188]	; (800ab5c <HAL_RCC_OscConfig+0x244>)
 800aaa0:	4313      	orrs	r3, r2
 800aaa2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aaa4:	f7f9 fc10 	bl	80042c8 <HAL_GetTick>
 800aaa8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aaaa:	e008      	b.n	800aabe <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aaac:	f7f9 fc0c 	bl	80042c8 <HAL_GetTick>
 800aab0:	4602      	mov	r2, r0
 800aab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab4:	1ad3      	subs	r3, r2, r3
 800aab6:	2b02      	cmp	r3, #2
 800aab8:	d901      	bls.n	800aabe <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800aaba:	2303      	movs	r3, #3
 800aabc:	e2fe      	b.n	800b0bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aabe:	4b27      	ldr	r3, [pc, #156]	; (800ab5c <HAL_RCC_OscConfig+0x244>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f003 0304 	and.w	r3, r3, #4
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d0f0      	beq.n	800aaac <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aaca:	4b24      	ldr	r3, [pc, #144]	; (800ab5c <HAL_RCC_OscConfig+0x244>)
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	691b      	ldr	r3, [r3, #16]
 800aad6:	061b      	lsls	r3, r3, #24
 800aad8:	4920      	ldr	r1, [pc, #128]	; (800ab5c <HAL_RCC_OscConfig+0x244>)
 800aada:	4313      	orrs	r3, r2
 800aadc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aade:	e045      	b.n	800ab6c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	68db      	ldr	r3, [r3, #12]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d026      	beq.n	800ab36 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800aae8:	4b1c      	ldr	r3, [pc, #112]	; (800ab5c <HAL_RCC_OscConfig+0x244>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f023 0219 	bic.w	r2, r3, #25
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	68db      	ldr	r3, [r3, #12]
 800aaf4:	4919      	ldr	r1, [pc, #100]	; (800ab5c <HAL_RCC_OscConfig+0x244>)
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aafa:	f7f9 fbe5 	bl	80042c8 <HAL_GetTick>
 800aafe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ab00:	e008      	b.n	800ab14 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ab02:	f7f9 fbe1 	bl	80042c8 <HAL_GetTick>
 800ab06:	4602      	mov	r2, r0
 800ab08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0a:	1ad3      	subs	r3, r2, r3
 800ab0c:	2b02      	cmp	r3, #2
 800ab0e:	d901      	bls.n	800ab14 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800ab10:	2303      	movs	r3, #3
 800ab12:	e2d3      	b.n	800b0bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ab14:	4b11      	ldr	r3, [pc, #68]	; (800ab5c <HAL_RCC_OscConfig+0x244>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f003 0304 	and.w	r3, r3, #4
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d0f0      	beq.n	800ab02 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab20:	4b0e      	ldr	r3, [pc, #56]	; (800ab5c <HAL_RCC_OscConfig+0x244>)
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	691b      	ldr	r3, [r3, #16]
 800ab2c:	061b      	lsls	r3, r3, #24
 800ab2e:	490b      	ldr	r1, [pc, #44]	; (800ab5c <HAL_RCC_OscConfig+0x244>)
 800ab30:	4313      	orrs	r3, r2
 800ab32:	604b      	str	r3, [r1, #4]
 800ab34:	e01a      	b.n	800ab6c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ab36:	4b09      	ldr	r3, [pc, #36]	; (800ab5c <HAL_RCC_OscConfig+0x244>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	4a08      	ldr	r2, [pc, #32]	; (800ab5c <HAL_RCC_OscConfig+0x244>)
 800ab3c:	f023 0301 	bic.w	r3, r3, #1
 800ab40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab42:	f7f9 fbc1 	bl	80042c8 <HAL_GetTick>
 800ab46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ab48:	e00a      	b.n	800ab60 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ab4a:	f7f9 fbbd 	bl	80042c8 <HAL_GetTick>
 800ab4e:	4602      	mov	r2, r0
 800ab50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab52:	1ad3      	subs	r3, r2, r3
 800ab54:	2b02      	cmp	r3, #2
 800ab56:	d903      	bls.n	800ab60 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800ab58:	2303      	movs	r3, #3
 800ab5a:	e2af      	b.n	800b0bc <HAL_RCC_OscConfig+0x7a4>
 800ab5c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ab60:	4b96      	ldr	r3, [pc, #600]	; (800adbc <HAL_RCC_OscConfig+0x4a4>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f003 0304 	and.w	r3, r3, #4
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d1ee      	bne.n	800ab4a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f003 0310 	and.w	r3, r3, #16
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d06a      	beq.n	800ac4e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ab78:	4b90      	ldr	r3, [pc, #576]	; (800adbc <HAL_RCC_OscConfig+0x4a4>)
 800ab7a:	691b      	ldr	r3, [r3, #16]
 800ab7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab80:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ab82:	4b8e      	ldr	r3, [pc, #568]	; (800adbc <HAL_RCC_OscConfig+0x4a4>)
 800ab84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab86:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ab88:	69bb      	ldr	r3, [r7, #24]
 800ab8a:	2b08      	cmp	r3, #8
 800ab8c:	d007      	beq.n	800ab9e <HAL_RCC_OscConfig+0x286>
 800ab8e:	69bb      	ldr	r3, [r7, #24]
 800ab90:	2b18      	cmp	r3, #24
 800ab92:	d11b      	bne.n	800abcc <HAL_RCC_OscConfig+0x2b4>
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	f003 0303 	and.w	r3, r3, #3
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	d116      	bne.n	800abcc <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ab9e:	4b87      	ldr	r3, [pc, #540]	; (800adbc <HAL_RCC_OscConfig+0x4a4>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d005      	beq.n	800abb6 <HAL_RCC_OscConfig+0x29e>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	69db      	ldr	r3, [r3, #28]
 800abae:	2b80      	cmp	r3, #128	; 0x80
 800abb0:	d001      	beq.n	800abb6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800abb2:	2301      	movs	r3, #1
 800abb4:	e282      	b.n	800b0bc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800abb6:	4b81      	ldr	r3, [pc, #516]	; (800adbc <HAL_RCC_OscConfig+0x4a4>)
 800abb8:	68db      	ldr	r3, [r3, #12]
 800abba:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6a1b      	ldr	r3, [r3, #32]
 800abc2:	061b      	lsls	r3, r3, #24
 800abc4:	497d      	ldr	r1, [pc, #500]	; (800adbc <HAL_RCC_OscConfig+0x4a4>)
 800abc6:	4313      	orrs	r3, r2
 800abc8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800abca:	e040      	b.n	800ac4e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	69db      	ldr	r3, [r3, #28]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d023      	beq.n	800ac1c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800abd4:	4b79      	ldr	r3, [pc, #484]	; (800adbc <HAL_RCC_OscConfig+0x4a4>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	4a78      	ldr	r2, [pc, #480]	; (800adbc <HAL_RCC_OscConfig+0x4a4>)
 800abda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abe0:	f7f9 fb72 	bl	80042c8 <HAL_GetTick>
 800abe4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800abe6:	e008      	b.n	800abfa <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800abe8:	f7f9 fb6e 	bl	80042c8 <HAL_GetTick>
 800abec:	4602      	mov	r2, r0
 800abee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf0:	1ad3      	subs	r3, r2, r3
 800abf2:	2b02      	cmp	r3, #2
 800abf4:	d901      	bls.n	800abfa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800abf6:	2303      	movs	r3, #3
 800abf8:	e260      	b.n	800b0bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800abfa:	4b70      	ldr	r3, [pc, #448]	; (800adbc <HAL_RCC_OscConfig+0x4a4>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d0f0      	beq.n	800abe8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ac06:	4b6d      	ldr	r3, [pc, #436]	; (800adbc <HAL_RCC_OscConfig+0x4a4>)
 800ac08:	68db      	ldr	r3, [r3, #12]
 800ac0a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6a1b      	ldr	r3, [r3, #32]
 800ac12:	061b      	lsls	r3, r3, #24
 800ac14:	4969      	ldr	r1, [pc, #420]	; (800adbc <HAL_RCC_OscConfig+0x4a4>)
 800ac16:	4313      	orrs	r3, r2
 800ac18:	60cb      	str	r3, [r1, #12]
 800ac1a:	e018      	b.n	800ac4e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800ac1c:	4b67      	ldr	r3, [pc, #412]	; (800adbc <HAL_RCC_OscConfig+0x4a4>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4a66      	ldr	r2, [pc, #408]	; (800adbc <HAL_RCC_OscConfig+0x4a4>)
 800ac22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac28:	f7f9 fb4e 	bl	80042c8 <HAL_GetTick>
 800ac2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ac2e:	e008      	b.n	800ac42 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ac30:	f7f9 fb4a 	bl	80042c8 <HAL_GetTick>
 800ac34:	4602      	mov	r2, r0
 800ac36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac38:	1ad3      	subs	r3, r2, r3
 800ac3a:	2b02      	cmp	r3, #2
 800ac3c:	d901      	bls.n	800ac42 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800ac3e:	2303      	movs	r3, #3
 800ac40:	e23c      	b.n	800b0bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ac42:	4b5e      	ldr	r3, [pc, #376]	; (800adbc <HAL_RCC_OscConfig+0x4a4>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d1f0      	bne.n	800ac30 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f003 0308 	and.w	r3, r3, #8
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d036      	beq.n	800acc8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	695b      	ldr	r3, [r3, #20]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d019      	beq.n	800ac96 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ac62:	4b56      	ldr	r3, [pc, #344]	; (800adbc <HAL_RCC_OscConfig+0x4a4>)
 800ac64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac66:	4a55      	ldr	r2, [pc, #340]	; (800adbc <HAL_RCC_OscConfig+0x4a4>)
 800ac68:	f043 0301 	orr.w	r3, r3, #1
 800ac6c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac6e:	f7f9 fb2b 	bl	80042c8 <HAL_GetTick>
 800ac72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ac74:	e008      	b.n	800ac88 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ac76:	f7f9 fb27 	bl	80042c8 <HAL_GetTick>
 800ac7a:	4602      	mov	r2, r0
 800ac7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7e:	1ad3      	subs	r3, r2, r3
 800ac80:	2b02      	cmp	r3, #2
 800ac82:	d901      	bls.n	800ac88 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800ac84:	2303      	movs	r3, #3
 800ac86:	e219      	b.n	800b0bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ac88:	4b4c      	ldr	r3, [pc, #304]	; (800adbc <HAL_RCC_OscConfig+0x4a4>)
 800ac8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac8c:	f003 0302 	and.w	r3, r3, #2
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d0f0      	beq.n	800ac76 <HAL_RCC_OscConfig+0x35e>
 800ac94:	e018      	b.n	800acc8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ac96:	4b49      	ldr	r3, [pc, #292]	; (800adbc <HAL_RCC_OscConfig+0x4a4>)
 800ac98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac9a:	4a48      	ldr	r2, [pc, #288]	; (800adbc <HAL_RCC_OscConfig+0x4a4>)
 800ac9c:	f023 0301 	bic.w	r3, r3, #1
 800aca0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aca2:	f7f9 fb11 	bl	80042c8 <HAL_GetTick>
 800aca6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aca8:	e008      	b.n	800acbc <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800acaa:	f7f9 fb0d 	bl	80042c8 <HAL_GetTick>
 800acae:	4602      	mov	r2, r0
 800acb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb2:	1ad3      	subs	r3, r2, r3
 800acb4:	2b02      	cmp	r3, #2
 800acb6:	d901      	bls.n	800acbc <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800acb8:	2303      	movs	r3, #3
 800acba:	e1ff      	b.n	800b0bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800acbc:	4b3f      	ldr	r3, [pc, #252]	; (800adbc <HAL_RCC_OscConfig+0x4a4>)
 800acbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acc0:	f003 0302 	and.w	r3, r3, #2
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d1f0      	bne.n	800acaa <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f003 0320 	and.w	r3, r3, #32
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d036      	beq.n	800ad42 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	699b      	ldr	r3, [r3, #24]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d019      	beq.n	800ad10 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800acdc:	4b37      	ldr	r3, [pc, #220]	; (800adbc <HAL_RCC_OscConfig+0x4a4>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4a36      	ldr	r2, [pc, #216]	; (800adbc <HAL_RCC_OscConfig+0x4a4>)
 800ace2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ace6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ace8:	f7f9 faee 	bl	80042c8 <HAL_GetTick>
 800acec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800acee:	e008      	b.n	800ad02 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800acf0:	f7f9 faea 	bl	80042c8 <HAL_GetTick>
 800acf4:	4602      	mov	r2, r0
 800acf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf8:	1ad3      	subs	r3, r2, r3
 800acfa:	2b02      	cmp	r3, #2
 800acfc:	d901      	bls.n	800ad02 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800acfe:	2303      	movs	r3, #3
 800ad00:	e1dc      	b.n	800b0bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ad02:	4b2e      	ldr	r3, [pc, #184]	; (800adbc <HAL_RCC_OscConfig+0x4a4>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d0f0      	beq.n	800acf0 <HAL_RCC_OscConfig+0x3d8>
 800ad0e:	e018      	b.n	800ad42 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ad10:	4b2a      	ldr	r3, [pc, #168]	; (800adbc <HAL_RCC_OscConfig+0x4a4>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4a29      	ldr	r2, [pc, #164]	; (800adbc <HAL_RCC_OscConfig+0x4a4>)
 800ad16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad1a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ad1c:	f7f9 fad4 	bl	80042c8 <HAL_GetTick>
 800ad20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ad22:	e008      	b.n	800ad36 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ad24:	f7f9 fad0 	bl	80042c8 <HAL_GetTick>
 800ad28:	4602      	mov	r2, r0
 800ad2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad2c:	1ad3      	subs	r3, r2, r3
 800ad2e:	2b02      	cmp	r3, #2
 800ad30:	d901      	bls.n	800ad36 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800ad32:	2303      	movs	r3, #3
 800ad34:	e1c2      	b.n	800b0bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ad36:	4b21      	ldr	r3, [pc, #132]	; (800adbc <HAL_RCC_OscConfig+0x4a4>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d1f0      	bne.n	800ad24 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f003 0304 	and.w	r3, r3, #4
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	f000 8086 	beq.w	800ae5c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ad50:	4b1b      	ldr	r3, [pc, #108]	; (800adc0 <HAL_RCC_OscConfig+0x4a8>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	4a1a      	ldr	r2, [pc, #104]	; (800adc0 <HAL_RCC_OscConfig+0x4a8>)
 800ad56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ad5c:	f7f9 fab4 	bl	80042c8 <HAL_GetTick>
 800ad60:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ad62:	e008      	b.n	800ad76 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ad64:	f7f9 fab0 	bl	80042c8 <HAL_GetTick>
 800ad68:	4602      	mov	r2, r0
 800ad6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6c:	1ad3      	subs	r3, r2, r3
 800ad6e:	2b64      	cmp	r3, #100	; 0x64
 800ad70:	d901      	bls.n	800ad76 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800ad72:	2303      	movs	r3, #3
 800ad74:	e1a2      	b.n	800b0bc <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ad76:	4b12      	ldr	r3, [pc, #72]	; (800adc0 <HAL_RCC_OscConfig+0x4a8>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d0f0      	beq.n	800ad64 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	689b      	ldr	r3, [r3, #8]
 800ad86:	2b01      	cmp	r3, #1
 800ad88:	d106      	bne.n	800ad98 <HAL_RCC_OscConfig+0x480>
 800ad8a:	4b0c      	ldr	r3, [pc, #48]	; (800adbc <HAL_RCC_OscConfig+0x4a4>)
 800ad8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad8e:	4a0b      	ldr	r2, [pc, #44]	; (800adbc <HAL_RCC_OscConfig+0x4a4>)
 800ad90:	f043 0301 	orr.w	r3, r3, #1
 800ad94:	6713      	str	r3, [r2, #112]	; 0x70
 800ad96:	e032      	b.n	800adfe <HAL_RCC_OscConfig+0x4e6>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	689b      	ldr	r3, [r3, #8]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d111      	bne.n	800adc4 <HAL_RCC_OscConfig+0x4ac>
 800ada0:	4b06      	ldr	r3, [pc, #24]	; (800adbc <HAL_RCC_OscConfig+0x4a4>)
 800ada2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ada4:	4a05      	ldr	r2, [pc, #20]	; (800adbc <HAL_RCC_OscConfig+0x4a4>)
 800ada6:	f023 0301 	bic.w	r3, r3, #1
 800adaa:	6713      	str	r3, [r2, #112]	; 0x70
 800adac:	4b03      	ldr	r3, [pc, #12]	; (800adbc <HAL_RCC_OscConfig+0x4a4>)
 800adae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adb0:	4a02      	ldr	r2, [pc, #8]	; (800adbc <HAL_RCC_OscConfig+0x4a4>)
 800adb2:	f023 0304 	bic.w	r3, r3, #4
 800adb6:	6713      	str	r3, [r2, #112]	; 0x70
 800adb8:	e021      	b.n	800adfe <HAL_RCC_OscConfig+0x4e6>
 800adba:	bf00      	nop
 800adbc:	58024400 	.word	0x58024400
 800adc0:	58024800 	.word	0x58024800
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	689b      	ldr	r3, [r3, #8]
 800adc8:	2b05      	cmp	r3, #5
 800adca:	d10c      	bne.n	800ade6 <HAL_RCC_OscConfig+0x4ce>
 800adcc:	4b83      	ldr	r3, [pc, #524]	; (800afdc <HAL_RCC_OscConfig+0x6c4>)
 800adce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800add0:	4a82      	ldr	r2, [pc, #520]	; (800afdc <HAL_RCC_OscConfig+0x6c4>)
 800add2:	f043 0304 	orr.w	r3, r3, #4
 800add6:	6713      	str	r3, [r2, #112]	; 0x70
 800add8:	4b80      	ldr	r3, [pc, #512]	; (800afdc <HAL_RCC_OscConfig+0x6c4>)
 800adda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800addc:	4a7f      	ldr	r2, [pc, #508]	; (800afdc <HAL_RCC_OscConfig+0x6c4>)
 800adde:	f043 0301 	orr.w	r3, r3, #1
 800ade2:	6713      	str	r3, [r2, #112]	; 0x70
 800ade4:	e00b      	b.n	800adfe <HAL_RCC_OscConfig+0x4e6>
 800ade6:	4b7d      	ldr	r3, [pc, #500]	; (800afdc <HAL_RCC_OscConfig+0x6c4>)
 800ade8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adea:	4a7c      	ldr	r2, [pc, #496]	; (800afdc <HAL_RCC_OscConfig+0x6c4>)
 800adec:	f023 0301 	bic.w	r3, r3, #1
 800adf0:	6713      	str	r3, [r2, #112]	; 0x70
 800adf2:	4b7a      	ldr	r3, [pc, #488]	; (800afdc <HAL_RCC_OscConfig+0x6c4>)
 800adf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adf6:	4a79      	ldr	r2, [pc, #484]	; (800afdc <HAL_RCC_OscConfig+0x6c4>)
 800adf8:	f023 0304 	bic.w	r3, r3, #4
 800adfc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	689b      	ldr	r3, [r3, #8]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d015      	beq.n	800ae32 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae06:	f7f9 fa5f 	bl	80042c8 <HAL_GetTick>
 800ae0a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ae0c:	e00a      	b.n	800ae24 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae0e:	f7f9 fa5b 	bl	80042c8 <HAL_GetTick>
 800ae12:	4602      	mov	r2, r0
 800ae14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae16:	1ad3      	subs	r3, r2, r3
 800ae18:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d901      	bls.n	800ae24 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800ae20:	2303      	movs	r3, #3
 800ae22:	e14b      	b.n	800b0bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ae24:	4b6d      	ldr	r3, [pc, #436]	; (800afdc <HAL_RCC_OscConfig+0x6c4>)
 800ae26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae28:	f003 0302 	and.w	r3, r3, #2
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d0ee      	beq.n	800ae0e <HAL_RCC_OscConfig+0x4f6>
 800ae30:	e014      	b.n	800ae5c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae32:	f7f9 fa49 	bl	80042c8 <HAL_GetTick>
 800ae36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ae38:	e00a      	b.n	800ae50 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae3a:	f7f9 fa45 	bl	80042c8 <HAL_GetTick>
 800ae3e:	4602      	mov	r2, r0
 800ae40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae42:	1ad3      	subs	r3, r2, r3
 800ae44:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d901      	bls.n	800ae50 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800ae4c:	2303      	movs	r3, #3
 800ae4e:	e135      	b.n	800b0bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ae50:	4b62      	ldr	r3, [pc, #392]	; (800afdc <HAL_RCC_OscConfig+0x6c4>)
 800ae52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae54:	f003 0302 	and.w	r3, r3, #2
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d1ee      	bne.n	800ae3a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	f000 812a 	beq.w	800b0ba <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ae66:	4b5d      	ldr	r3, [pc, #372]	; (800afdc <HAL_RCC_OscConfig+0x6c4>)
 800ae68:	691b      	ldr	r3, [r3, #16]
 800ae6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ae6e:	2b18      	cmp	r3, #24
 800ae70:	f000 80ba 	beq.w	800afe8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae78:	2b02      	cmp	r3, #2
 800ae7a:	f040 8095 	bne.w	800afa8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ae7e:	4b57      	ldr	r3, [pc, #348]	; (800afdc <HAL_RCC_OscConfig+0x6c4>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	4a56      	ldr	r2, [pc, #344]	; (800afdc <HAL_RCC_OscConfig+0x6c4>)
 800ae84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ae88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae8a:	f7f9 fa1d 	bl	80042c8 <HAL_GetTick>
 800ae8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ae90:	e008      	b.n	800aea4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae92:	f7f9 fa19 	bl	80042c8 <HAL_GetTick>
 800ae96:	4602      	mov	r2, r0
 800ae98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9a:	1ad3      	subs	r3, r2, r3
 800ae9c:	2b02      	cmp	r3, #2
 800ae9e:	d901      	bls.n	800aea4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800aea0:	2303      	movs	r3, #3
 800aea2:	e10b      	b.n	800b0bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aea4:	4b4d      	ldr	r3, [pc, #308]	; (800afdc <HAL_RCC_OscConfig+0x6c4>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d1f0      	bne.n	800ae92 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aeb0:	4b4a      	ldr	r3, [pc, #296]	; (800afdc <HAL_RCC_OscConfig+0x6c4>)
 800aeb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aeb4:	4b4a      	ldr	r3, [pc, #296]	; (800afe0 <HAL_RCC_OscConfig+0x6c8>)
 800aeb6:	4013      	ands	r3, r2
 800aeb8:	687a      	ldr	r2, [r7, #4]
 800aeba:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800aebc:	687a      	ldr	r2, [r7, #4]
 800aebe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800aec0:	0112      	lsls	r2, r2, #4
 800aec2:	430a      	orrs	r2, r1
 800aec4:	4945      	ldr	r1, [pc, #276]	; (800afdc <HAL_RCC_OscConfig+0x6c4>)
 800aec6:	4313      	orrs	r3, r2
 800aec8:	628b      	str	r3, [r1, #40]	; 0x28
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aece:	3b01      	subs	r3, #1
 800aed0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aed8:	3b01      	subs	r3, #1
 800aeda:	025b      	lsls	r3, r3, #9
 800aedc:	b29b      	uxth	r3, r3
 800aede:	431a      	orrs	r2, r3
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aee4:	3b01      	subs	r3, #1
 800aee6:	041b      	lsls	r3, r3, #16
 800aee8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800aeec:	431a      	orrs	r2, r3
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aef2:	3b01      	subs	r3, #1
 800aef4:	061b      	lsls	r3, r3, #24
 800aef6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800aefa:	4938      	ldr	r1, [pc, #224]	; (800afdc <HAL_RCC_OscConfig+0x6c4>)
 800aefc:	4313      	orrs	r3, r2
 800aefe:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800af00:	4b36      	ldr	r3, [pc, #216]	; (800afdc <HAL_RCC_OscConfig+0x6c4>)
 800af02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af04:	4a35      	ldr	r2, [pc, #212]	; (800afdc <HAL_RCC_OscConfig+0x6c4>)
 800af06:	f023 0301 	bic.w	r3, r3, #1
 800af0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800af0c:	4b33      	ldr	r3, [pc, #204]	; (800afdc <HAL_RCC_OscConfig+0x6c4>)
 800af0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af10:	4b34      	ldr	r3, [pc, #208]	; (800afe4 <HAL_RCC_OscConfig+0x6cc>)
 800af12:	4013      	ands	r3, r2
 800af14:	687a      	ldr	r2, [r7, #4]
 800af16:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800af18:	00d2      	lsls	r2, r2, #3
 800af1a:	4930      	ldr	r1, [pc, #192]	; (800afdc <HAL_RCC_OscConfig+0x6c4>)
 800af1c:	4313      	orrs	r3, r2
 800af1e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800af20:	4b2e      	ldr	r3, [pc, #184]	; (800afdc <HAL_RCC_OscConfig+0x6c4>)
 800af22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af24:	f023 020c 	bic.w	r2, r3, #12
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af2c:	492b      	ldr	r1, [pc, #172]	; (800afdc <HAL_RCC_OscConfig+0x6c4>)
 800af2e:	4313      	orrs	r3, r2
 800af30:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800af32:	4b2a      	ldr	r3, [pc, #168]	; (800afdc <HAL_RCC_OscConfig+0x6c4>)
 800af34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af36:	f023 0202 	bic.w	r2, r3, #2
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af3e:	4927      	ldr	r1, [pc, #156]	; (800afdc <HAL_RCC_OscConfig+0x6c4>)
 800af40:	4313      	orrs	r3, r2
 800af42:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800af44:	4b25      	ldr	r3, [pc, #148]	; (800afdc <HAL_RCC_OscConfig+0x6c4>)
 800af46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af48:	4a24      	ldr	r2, [pc, #144]	; (800afdc <HAL_RCC_OscConfig+0x6c4>)
 800af4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af50:	4b22      	ldr	r3, [pc, #136]	; (800afdc <HAL_RCC_OscConfig+0x6c4>)
 800af52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af54:	4a21      	ldr	r2, [pc, #132]	; (800afdc <HAL_RCC_OscConfig+0x6c4>)
 800af56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800af5c:	4b1f      	ldr	r3, [pc, #124]	; (800afdc <HAL_RCC_OscConfig+0x6c4>)
 800af5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af60:	4a1e      	ldr	r2, [pc, #120]	; (800afdc <HAL_RCC_OscConfig+0x6c4>)
 800af62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800af66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800af68:	4b1c      	ldr	r3, [pc, #112]	; (800afdc <HAL_RCC_OscConfig+0x6c4>)
 800af6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af6c:	4a1b      	ldr	r2, [pc, #108]	; (800afdc <HAL_RCC_OscConfig+0x6c4>)
 800af6e:	f043 0301 	orr.w	r3, r3, #1
 800af72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800af74:	4b19      	ldr	r3, [pc, #100]	; (800afdc <HAL_RCC_OscConfig+0x6c4>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	4a18      	ldr	r2, [pc, #96]	; (800afdc <HAL_RCC_OscConfig+0x6c4>)
 800af7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800af7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af80:	f7f9 f9a2 	bl	80042c8 <HAL_GetTick>
 800af84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800af86:	e008      	b.n	800af9a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af88:	f7f9 f99e 	bl	80042c8 <HAL_GetTick>
 800af8c:	4602      	mov	r2, r0
 800af8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af90:	1ad3      	subs	r3, r2, r3
 800af92:	2b02      	cmp	r3, #2
 800af94:	d901      	bls.n	800af9a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800af96:	2303      	movs	r3, #3
 800af98:	e090      	b.n	800b0bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800af9a:	4b10      	ldr	r3, [pc, #64]	; (800afdc <HAL_RCC_OscConfig+0x6c4>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d0f0      	beq.n	800af88 <HAL_RCC_OscConfig+0x670>
 800afa6:	e088      	b.n	800b0ba <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800afa8:	4b0c      	ldr	r3, [pc, #48]	; (800afdc <HAL_RCC_OscConfig+0x6c4>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	4a0b      	ldr	r2, [pc, #44]	; (800afdc <HAL_RCC_OscConfig+0x6c4>)
 800afae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800afb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afb4:	f7f9 f988 	bl	80042c8 <HAL_GetTick>
 800afb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800afba:	e008      	b.n	800afce <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800afbc:	f7f9 f984 	bl	80042c8 <HAL_GetTick>
 800afc0:	4602      	mov	r2, r0
 800afc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc4:	1ad3      	subs	r3, r2, r3
 800afc6:	2b02      	cmp	r3, #2
 800afc8:	d901      	bls.n	800afce <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800afca:	2303      	movs	r3, #3
 800afcc:	e076      	b.n	800b0bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800afce:	4b03      	ldr	r3, [pc, #12]	; (800afdc <HAL_RCC_OscConfig+0x6c4>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d1f0      	bne.n	800afbc <HAL_RCC_OscConfig+0x6a4>
 800afda:	e06e      	b.n	800b0ba <HAL_RCC_OscConfig+0x7a2>
 800afdc:	58024400 	.word	0x58024400
 800afe0:	fffffc0c 	.word	0xfffffc0c
 800afe4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800afe8:	4b36      	ldr	r3, [pc, #216]	; (800b0c4 <HAL_RCC_OscConfig+0x7ac>)
 800afea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800afee:	4b35      	ldr	r3, [pc, #212]	; (800b0c4 <HAL_RCC_OscConfig+0x7ac>)
 800aff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aff2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff8:	2b01      	cmp	r3, #1
 800affa:	d031      	beq.n	800b060 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800affc:	693b      	ldr	r3, [r7, #16]
 800affe:	f003 0203 	and.w	r2, r3, #3
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b006:	429a      	cmp	r2, r3
 800b008:	d12a      	bne.n	800b060 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	091b      	lsrs	r3, r3, #4
 800b00e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b016:	429a      	cmp	r2, r3
 800b018:	d122      	bne.n	800b060 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b024:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b026:	429a      	cmp	r2, r3
 800b028:	d11a      	bne.n	800b060 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	0a5b      	lsrs	r3, r3, #9
 800b02e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b036:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b038:	429a      	cmp	r2, r3
 800b03a:	d111      	bne.n	800b060 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	0c1b      	lsrs	r3, r3, #16
 800b040:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b048:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d108      	bne.n	800b060 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	0e1b      	lsrs	r3, r3, #24
 800b052:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b05a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d001      	beq.n	800b064 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800b060:	2301      	movs	r3, #1
 800b062:	e02b      	b.n	800b0bc <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b064:	4b17      	ldr	r3, [pc, #92]	; (800b0c4 <HAL_RCC_OscConfig+0x7ac>)
 800b066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b068:	08db      	lsrs	r3, r3, #3
 800b06a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b06e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b074:	693a      	ldr	r2, [r7, #16]
 800b076:	429a      	cmp	r2, r3
 800b078:	d01f      	beq.n	800b0ba <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800b07a:	4b12      	ldr	r3, [pc, #72]	; (800b0c4 <HAL_RCC_OscConfig+0x7ac>)
 800b07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b07e:	4a11      	ldr	r2, [pc, #68]	; (800b0c4 <HAL_RCC_OscConfig+0x7ac>)
 800b080:	f023 0301 	bic.w	r3, r3, #1
 800b084:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b086:	f7f9 f91f 	bl	80042c8 <HAL_GetTick>
 800b08a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800b08c:	bf00      	nop
 800b08e:	f7f9 f91b 	bl	80042c8 <HAL_GetTick>
 800b092:	4602      	mov	r2, r0
 800b094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b096:	4293      	cmp	r3, r2
 800b098:	d0f9      	beq.n	800b08e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b09a:	4b0a      	ldr	r3, [pc, #40]	; (800b0c4 <HAL_RCC_OscConfig+0x7ac>)
 800b09c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b09e:	4b0a      	ldr	r3, [pc, #40]	; (800b0c8 <HAL_RCC_OscConfig+0x7b0>)
 800b0a0:	4013      	ands	r3, r2
 800b0a2:	687a      	ldr	r2, [r7, #4]
 800b0a4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b0a6:	00d2      	lsls	r2, r2, #3
 800b0a8:	4906      	ldr	r1, [pc, #24]	; (800b0c4 <HAL_RCC_OscConfig+0x7ac>)
 800b0aa:	4313      	orrs	r3, r2
 800b0ac:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800b0ae:	4b05      	ldr	r3, [pc, #20]	; (800b0c4 <HAL_RCC_OscConfig+0x7ac>)
 800b0b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b2:	4a04      	ldr	r2, [pc, #16]	; (800b0c4 <HAL_RCC_OscConfig+0x7ac>)
 800b0b4:	f043 0301 	orr.w	r3, r3, #1
 800b0b8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800b0ba:	2300      	movs	r3, #0
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3730      	adds	r7, #48	; 0x30
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}
 800b0c4:	58024400 	.word	0x58024400
 800b0c8:	ffff0007 	.word	0xffff0007

0800b0cc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b086      	sub	sp, #24
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
 800b0d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d101      	bne.n	800b0e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b0dc:	2301      	movs	r3, #1
 800b0de:	e19c      	b.n	800b41a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b0e0:	4b8a      	ldr	r3, [pc, #552]	; (800b30c <HAL_RCC_ClockConfig+0x240>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f003 030f 	and.w	r3, r3, #15
 800b0e8:	683a      	ldr	r2, [r7, #0]
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d910      	bls.n	800b110 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b0ee:	4b87      	ldr	r3, [pc, #540]	; (800b30c <HAL_RCC_ClockConfig+0x240>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f023 020f 	bic.w	r2, r3, #15
 800b0f6:	4985      	ldr	r1, [pc, #532]	; (800b30c <HAL_RCC_ClockConfig+0x240>)
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	4313      	orrs	r3, r2
 800b0fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b0fe:	4b83      	ldr	r3, [pc, #524]	; (800b30c <HAL_RCC_ClockConfig+0x240>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f003 030f 	and.w	r3, r3, #15
 800b106:	683a      	ldr	r2, [r7, #0]
 800b108:	429a      	cmp	r2, r3
 800b10a:	d001      	beq.n	800b110 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b10c:	2301      	movs	r3, #1
 800b10e:	e184      	b.n	800b41a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f003 0304 	and.w	r3, r3, #4
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d010      	beq.n	800b13e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	691a      	ldr	r2, [r3, #16]
 800b120:	4b7b      	ldr	r3, [pc, #492]	; (800b310 <HAL_RCC_ClockConfig+0x244>)
 800b122:	699b      	ldr	r3, [r3, #24]
 800b124:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b128:	429a      	cmp	r2, r3
 800b12a:	d908      	bls.n	800b13e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b12c:	4b78      	ldr	r3, [pc, #480]	; (800b310 <HAL_RCC_ClockConfig+0x244>)
 800b12e:	699b      	ldr	r3, [r3, #24]
 800b130:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	691b      	ldr	r3, [r3, #16]
 800b138:	4975      	ldr	r1, [pc, #468]	; (800b310 <HAL_RCC_ClockConfig+0x244>)
 800b13a:	4313      	orrs	r3, r2
 800b13c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f003 0308 	and.w	r3, r3, #8
 800b146:	2b00      	cmp	r3, #0
 800b148:	d010      	beq.n	800b16c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	695a      	ldr	r2, [r3, #20]
 800b14e:	4b70      	ldr	r3, [pc, #448]	; (800b310 <HAL_RCC_ClockConfig+0x244>)
 800b150:	69db      	ldr	r3, [r3, #28]
 800b152:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b156:	429a      	cmp	r2, r3
 800b158:	d908      	bls.n	800b16c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b15a:	4b6d      	ldr	r3, [pc, #436]	; (800b310 <HAL_RCC_ClockConfig+0x244>)
 800b15c:	69db      	ldr	r3, [r3, #28]
 800b15e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	695b      	ldr	r3, [r3, #20]
 800b166:	496a      	ldr	r1, [pc, #424]	; (800b310 <HAL_RCC_ClockConfig+0x244>)
 800b168:	4313      	orrs	r3, r2
 800b16a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f003 0310 	and.w	r3, r3, #16
 800b174:	2b00      	cmp	r3, #0
 800b176:	d010      	beq.n	800b19a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	699a      	ldr	r2, [r3, #24]
 800b17c:	4b64      	ldr	r3, [pc, #400]	; (800b310 <HAL_RCC_ClockConfig+0x244>)
 800b17e:	69db      	ldr	r3, [r3, #28]
 800b180:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b184:	429a      	cmp	r2, r3
 800b186:	d908      	bls.n	800b19a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b188:	4b61      	ldr	r3, [pc, #388]	; (800b310 <HAL_RCC_ClockConfig+0x244>)
 800b18a:	69db      	ldr	r3, [r3, #28]
 800b18c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	699b      	ldr	r3, [r3, #24]
 800b194:	495e      	ldr	r1, [pc, #376]	; (800b310 <HAL_RCC_ClockConfig+0x244>)
 800b196:	4313      	orrs	r3, r2
 800b198:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f003 0320 	and.w	r3, r3, #32
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d010      	beq.n	800b1c8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	69da      	ldr	r2, [r3, #28]
 800b1aa:	4b59      	ldr	r3, [pc, #356]	; (800b310 <HAL_RCC_ClockConfig+0x244>)
 800b1ac:	6a1b      	ldr	r3, [r3, #32]
 800b1ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b1b2:	429a      	cmp	r2, r3
 800b1b4:	d908      	bls.n	800b1c8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b1b6:	4b56      	ldr	r3, [pc, #344]	; (800b310 <HAL_RCC_ClockConfig+0x244>)
 800b1b8:	6a1b      	ldr	r3, [r3, #32]
 800b1ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	69db      	ldr	r3, [r3, #28]
 800b1c2:	4953      	ldr	r1, [pc, #332]	; (800b310 <HAL_RCC_ClockConfig+0x244>)
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f003 0302 	and.w	r3, r3, #2
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d010      	beq.n	800b1f6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	68da      	ldr	r2, [r3, #12]
 800b1d8:	4b4d      	ldr	r3, [pc, #308]	; (800b310 <HAL_RCC_ClockConfig+0x244>)
 800b1da:	699b      	ldr	r3, [r3, #24]
 800b1dc:	f003 030f 	and.w	r3, r3, #15
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	d908      	bls.n	800b1f6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b1e4:	4b4a      	ldr	r3, [pc, #296]	; (800b310 <HAL_RCC_ClockConfig+0x244>)
 800b1e6:	699b      	ldr	r3, [r3, #24]
 800b1e8:	f023 020f 	bic.w	r2, r3, #15
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	68db      	ldr	r3, [r3, #12]
 800b1f0:	4947      	ldr	r1, [pc, #284]	; (800b310 <HAL_RCC_ClockConfig+0x244>)
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f003 0301 	and.w	r3, r3, #1
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d055      	beq.n	800b2ae <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b202:	4b43      	ldr	r3, [pc, #268]	; (800b310 <HAL_RCC_ClockConfig+0x244>)
 800b204:	699b      	ldr	r3, [r3, #24]
 800b206:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	689b      	ldr	r3, [r3, #8]
 800b20e:	4940      	ldr	r1, [pc, #256]	; (800b310 <HAL_RCC_ClockConfig+0x244>)
 800b210:	4313      	orrs	r3, r2
 800b212:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	2b02      	cmp	r3, #2
 800b21a:	d107      	bne.n	800b22c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b21c:	4b3c      	ldr	r3, [pc, #240]	; (800b310 <HAL_RCC_ClockConfig+0x244>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b224:	2b00      	cmp	r3, #0
 800b226:	d121      	bne.n	800b26c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b228:	2301      	movs	r3, #1
 800b22a:	e0f6      	b.n	800b41a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	685b      	ldr	r3, [r3, #4]
 800b230:	2b03      	cmp	r3, #3
 800b232:	d107      	bne.n	800b244 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b234:	4b36      	ldr	r3, [pc, #216]	; (800b310 <HAL_RCC_ClockConfig+0x244>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d115      	bne.n	800b26c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b240:	2301      	movs	r3, #1
 800b242:	e0ea      	b.n	800b41a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	2b01      	cmp	r3, #1
 800b24a:	d107      	bne.n	800b25c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b24c:	4b30      	ldr	r3, [pc, #192]	; (800b310 <HAL_RCC_ClockConfig+0x244>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b254:	2b00      	cmp	r3, #0
 800b256:	d109      	bne.n	800b26c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b258:	2301      	movs	r3, #1
 800b25a:	e0de      	b.n	800b41a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b25c:	4b2c      	ldr	r3, [pc, #176]	; (800b310 <HAL_RCC_ClockConfig+0x244>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f003 0304 	and.w	r3, r3, #4
 800b264:	2b00      	cmp	r3, #0
 800b266:	d101      	bne.n	800b26c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b268:	2301      	movs	r3, #1
 800b26a:	e0d6      	b.n	800b41a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b26c:	4b28      	ldr	r3, [pc, #160]	; (800b310 <HAL_RCC_ClockConfig+0x244>)
 800b26e:	691b      	ldr	r3, [r3, #16]
 800b270:	f023 0207 	bic.w	r2, r3, #7
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	685b      	ldr	r3, [r3, #4]
 800b278:	4925      	ldr	r1, [pc, #148]	; (800b310 <HAL_RCC_ClockConfig+0x244>)
 800b27a:	4313      	orrs	r3, r2
 800b27c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b27e:	f7f9 f823 	bl	80042c8 <HAL_GetTick>
 800b282:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b284:	e00a      	b.n	800b29c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b286:	f7f9 f81f 	bl	80042c8 <HAL_GetTick>
 800b28a:	4602      	mov	r2, r0
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	1ad3      	subs	r3, r2, r3
 800b290:	f241 3288 	movw	r2, #5000	; 0x1388
 800b294:	4293      	cmp	r3, r2
 800b296:	d901      	bls.n	800b29c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b298:	2303      	movs	r3, #3
 800b29a:	e0be      	b.n	800b41a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b29c:	4b1c      	ldr	r3, [pc, #112]	; (800b310 <HAL_RCC_ClockConfig+0x244>)
 800b29e:	691b      	ldr	r3, [r3, #16]
 800b2a0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	00db      	lsls	r3, r3, #3
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d1eb      	bne.n	800b286 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f003 0302 	and.w	r3, r3, #2
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d010      	beq.n	800b2dc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	68da      	ldr	r2, [r3, #12]
 800b2be:	4b14      	ldr	r3, [pc, #80]	; (800b310 <HAL_RCC_ClockConfig+0x244>)
 800b2c0:	699b      	ldr	r3, [r3, #24]
 800b2c2:	f003 030f 	and.w	r3, r3, #15
 800b2c6:	429a      	cmp	r2, r3
 800b2c8:	d208      	bcs.n	800b2dc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b2ca:	4b11      	ldr	r3, [pc, #68]	; (800b310 <HAL_RCC_ClockConfig+0x244>)
 800b2cc:	699b      	ldr	r3, [r3, #24]
 800b2ce:	f023 020f 	bic.w	r2, r3, #15
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	68db      	ldr	r3, [r3, #12]
 800b2d6:	490e      	ldr	r1, [pc, #56]	; (800b310 <HAL_RCC_ClockConfig+0x244>)
 800b2d8:	4313      	orrs	r3, r2
 800b2da:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b2dc:	4b0b      	ldr	r3, [pc, #44]	; (800b30c <HAL_RCC_ClockConfig+0x240>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f003 030f 	and.w	r3, r3, #15
 800b2e4:	683a      	ldr	r2, [r7, #0]
 800b2e6:	429a      	cmp	r2, r3
 800b2e8:	d214      	bcs.n	800b314 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b2ea:	4b08      	ldr	r3, [pc, #32]	; (800b30c <HAL_RCC_ClockConfig+0x240>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f023 020f 	bic.w	r2, r3, #15
 800b2f2:	4906      	ldr	r1, [pc, #24]	; (800b30c <HAL_RCC_ClockConfig+0x240>)
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	4313      	orrs	r3, r2
 800b2f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b2fa:	4b04      	ldr	r3, [pc, #16]	; (800b30c <HAL_RCC_ClockConfig+0x240>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f003 030f 	and.w	r3, r3, #15
 800b302:	683a      	ldr	r2, [r7, #0]
 800b304:	429a      	cmp	r2, r3
 800b306:	d005      	beq.n	800b314 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b308:	2301      	movs	r3, #1
 800b30a:	e086      	b.n	800b41a <HAL_RCC_ClockConfig+0x34e>
 800b30c:	52002000 	.word	0x52002000
 800b310:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f003 0304 	and.w	r3, r3, #4
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d010      	beq.n	800b342 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	691a      	ldr	r2, [r3, #16]
 800b324:	4b3f      	ldr	r3, [pc, #252]	; (800b424 <HAL_RCC_ClockConfig+0x358>)
 800b326:	699b      	ldr	r3, [r3, #24]
 800b328:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b32c:	429a      	cmp	r2, r3
 800b32e:	d208      	bcs.n	800b342 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b330:	4b3c      	ldr	r3, [pc, #240]	; (800b424 <HAL_RCC_ClockConfig+0x358>)
 800b332:	699b      	ldr	r3, [r3, #24]
 800b334:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	691b      	ldr	r3, [r3, #16]
 800b33c:	4939      	ldr	r1, [pc, #228]	; (800b424 <HAL_RCC_ClockConfig+0x358>)
 800b33e:	4313      	orrs	r3, r2
 800b340:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f003 0308 	and.w	r3, r3, #8
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d010      	beq.n	800b370 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	695a      	ldr	r2, [r3, #20]
 800b352:	4b34      	ldr	r3, [pc, #208]	; (800b424 <HAL_RCC_ClockConfig+0x358>)
 800b354:	69db      	ldr	r3, [r3, #28]
 800b356:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b35a:	429a      	cmp	r2, r3
 800b35c:	d208      	bcs.n	800b370 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b35e:	4b31      	ldr	r3, [pc, #196]	; (800b424 <HAL_RCC_ClockConfig+0x358>)
 800b360:	69db      	ldr	r3, [r3, #28]
 800b362:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	695b      	ldr	r3, [r3, #20]
 800b36a:	492e      	ldr	r1, [pc, #184]	; (800b424 <HAL_RCC_ClockConfig+0x358>)
 800b36c:	4313      	orrs	r3, r2
 800b36e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f003 0310 	and.w	r3, r3, #16
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d010      	beq.n	800b39e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	699a      	ldr	r2, [r3, #24]
 800b380:	4b28      	ldr	r3, [pc, #160]	; (800b424 <HAL_RCC_ClockConfig+0x358>)
 800b382:	69db      	ldr	r3, [r3, #28]
 800b384:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b388:	429a      	cmp	r2, r3
 800b38a:	d208      	bcs.n	800b39e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b38c:	4b25      	ldr	r3, [pc, #148]	; (800b424 <HAL_RCC_ClockConfig+0x358>)
 800b38e:	69db      	ldr	r3, [r3, #28]
 800b390:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	699b      	ldr	r3, [r3, #24]
 800b398:	4922      	ldr	r1, [pc, #136]	; (800b424 <HAL_RCC_ClockConfig+0x358>)
 800b39a:	4313      	orrs	r3, r2
 800b39c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f003 0320 	and.w	r3, r3, #32
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d010      	beq.n	800b3cc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	69da      	ldr	r2, [r3, #28]
 800b3ae:	4b1d      	ldr	r3, [pc, #116]	; (800b424 <HAL_RCC_ClockConfig+0x358>)
 800b3b0:	6a1b      	ldr	r3, [r3, #32]
 800b3b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d208      	bcs.n	800b3cc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b3ba:	4b1a      	ldr	r3, [pc, #104]	; (800b424 <HAL_RCC_ClockConfig+0x358>)
 800b3bc:	6a1b      	ldr	r3, [r3, #32]
 800b3be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	69db      	ldr	r3, [r3, #28]
 800b3c6:	4917      	ldr	r1, [pc, #92]	; (800b424 <HAL_RCC_ClockConfig+0x358>)
 800b3c8:	4313      	orrs	r3, r2
 800b3ca:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b3cc:	f000 f89e 	bl	800b50c <HAL_RCC_GetSysClockFreq>
 800b3d0:	4602      	mov	r2, r0
 800b3d2:	4b14      	ldr	r3, [pc, #80]	; (800b424 <HAL_RCC_ClockConfig+0x358>)
 800b3d4:	699b      	ldr	r3, [r3, #24]
 800b3d6:	0a1b      	lsrs	r3, r3, #8
 800b3d8:	f003 030f 	and.w	r3, r3, #15
 800b3dc:	4912      	ldr	r1, [pc, #72]	; (800b428 <HAL_RCC_ClockConfig+0x35c>)
 800b3de:	5ccb      	ldrb	r3, [r1, r3]
 800b3e0:	f003 031f 	and.w	r3, r3, #31
 800b3e4:	fa22 f303 	lsr.w	r3, r2, r3
 800b3e8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b3ea:	4b0e      	ldr	r3, [pc, #56]	; (800b424 <HAL_RCC_ClockConfig+0x358>)
 800b3ec:	699b      	ldr	r3, [r3, #24]
 800b3ee:	f003 030f 	and.w	r3, r3, #15
 800b3f2:	4a0d      	ldr	r2, [pc, #52]	; (800b428 <HAL_RCC_ClockConfig+0x35c>)
 800b3f4:	5cd3      	ldrb	r3, [r2, r3]
 800b3f6:	f003 031f 	and.w	r3, r3, #31
 800b3fa:	693a      	ldr	r2, [r7, #16]
 800b3fc:	fa22 f303 	lsr.w	r3, r2, r3
 800b400:	4a0a      	ldr	r2, [pc, #40]	; (800b42c <HAL_RCC_ClockConfig+0x360>)
 800b402:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b404:	4a0a      	ldr	r2, [pc, #40]	; (800b430 <HAL_RCC_ClockConfig+0x364>)
 800b406:	693b      	ldr	r3, [r7, #16]
 800b408:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b40a:	4b0a      	ldr	r3, [pc, #40]	; (800b434 <HAL_RCC_ClockConfig+0x368>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	4618      	mov	r0, r3
 800b410:	f7f8 ff10 	bl	8004234 <HAL_InitTick>
 800b414:	4603      	mov	r3, r0
 800b416:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b418:	7bfb      	ldrb	r3, [r7, #15]
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3718      	adds	r7, #24
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
 800b422:	bf00      	nop
 800b424:	58024400 	.word	0x58024400
 800b428:	0801c804 	.word	0x0801c804
 800b42c:	24000030 	.word	0x24000030
 800b430:	2400002c 	.word	0x2400002c
 800b434:	24000034 	.word	0x24000034

0800b438 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b08c      	sub	sp, #48	; 0x30
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	60f8      	str	r0, [r7, #12]
 800b440:	60b9      	str	r1, [r7, #8]
 800b442:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d12a      	bne.n	800b4a0 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800b44a:	4b2d      	ldr	r3, [pc, #180]	; (800b500 <HAL_RCC_MCOConfig+0xc8>)
 800b44c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b450:	4a2b      	ldr	r2, [pc, #172]	; (800b500 <HAL_RCC_MCOConfig+0xc8>)
 800b452:	f043 0301 	orr.w	r3, r3, #1
 800b456:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b45a:	4b29      	ldr	r3, [pc, #164]	; (800b500 <HAL_RCC_MCOConfig+0xc8>)
 800b45c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b460:	f003 0301 	and.w	r3, r3, #1
 800b464:	61bb      	str	r3, [r7, #24]
 800b466:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800b468:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b46c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b46e:	2302      	movs	r3, #2
 800b470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b472:	2303      	movs	r3, #3
 800b474:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b476:	2300      	movs	r3, #0
 800b478:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b47a:	2300      	movs	r3, #0
 800b47c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b47e:	f107 031c 	add.w	r3, r7, #28
 800b482:	4619      	mov	r1, r3
 800b484:	481f      	ldr	r0, [pc, #124]	; (800b504 <HAL_RCC_MCOConfig+0xcc>)
 800b486:	f7fd f81d 	bl	80084c4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800b48a:	4b1d      	ldr	r3, [pc, #116]	; (800b500 <HAL_RCC_MCOConfig+0xc8>)
 800b48c:	691b      	ldr	r3, [r3, #16]
 800b48e:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800b492:	68b9      	ldr	r1, [r7, #8]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	430b      	orrs	r3, r1
 800b498:	4919      	ldr	r1, [pc, #100]	; (800b500 <HAL_RCC_MCOConfig+0xc8>)
 800b49a:	4313      	orrs	r3, r2
 800b49c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800b49e:	e02a      	b.n	800b4f6 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800b4a0:	4b17      	ldr	r3, [pc, #92]	; (800b500 <HAL_RCC_MCOConfig+0xc8>)
 800b4a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b4a6:	4a16      	ldr	r2, [pc, #88]	; (800b500 <HAL_RCC_MCOConfig+0xc8>)
 800b4a8:	f043 0304 	orr.w	r3, r3, #4
 800b4ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b4b0:	4b13      	ldr	r3, [pc, #76]	; (800b500 <HAL_RCC_MCOConfig+0xc8>)
 800b4b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b4b6:	f003 0304 	and.w	r3, r3, #4
 800b4ba:	617b      	str	r3, [r7, #20]
 800b4bc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b4be:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b4c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b4c4:	2302      	movs	r3, #2
 800b4c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b4c8:	2303      	movs	r3, #3
 800b4ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b4d4:	f107 031c 	add.w	r3, r7, #28
 800b4d8:	4619      	mov	r1, r3
 800b4da:	480b      	ldr	r0, [pc, #44]	; (800b508 <HAL_RCC_MCOConfig+0xd0>)
 800b4dc:	f7fc fff2 	bl	80084c4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800b4e0:	4b07      	ldr	r3, [pc, #28]	; (800b500 <HAL_RCC_MCOConfig+0xc8>)
 800b4e2:	691b      	ldr	r3, [r3, #16]
 800b4e4:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	01d9      	lsls	r1, r3, #7
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	430b      	orrs	r3, r1
 800b4f0:	4903      	ldr	r1, [pc, #12]	; (800b500 <HAL_RCC_MCOConfig+0xc8>)
 800b4f2:	4313      	orrs	r3, r2
 800b4f4:	610b      	str	r3, [r1, #16]
}
 800b4f6:	bf00      	nop
 800b4f8:	3730      	adds	r7, #48	; 0x30
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}
 800b4fe:	bf00      	nop
 800b500:	58024400 	.word	0x58024400
 800b504:	58020000 	.word	0x58020000
 800b508:	58020800 	.word	0x58020800

0800b50c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b089      	sub	sp, #36	; 0x24
 800b510:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b512:	4bb3      	ldr	r3, [pc, #716]	; (800b7e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b514:	691b      	ldr	r3, [r3, #16]
 800b516:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b51a:	2b18      	cmp	r3, #24
 800b51c:	f200 8155 	bhi.w	800b7ca <HAL_RCC_GetSysClockFreq+0x2be>
 800b520:	a201      	add	r2, pc, #4	; (adr r2, 800b528 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b526:	bf00      	nop
 800b528:	0800b58d 	.word	0x0800b58d
 800b52c:	0800b7cb 	.word	0x0800b7cb
 800b530:	0800b7cb 	.word	0x0800b7cb
 800b534:	0800b7cb 	.word	0x0800b7cb
 800b538:	0800b7cb 	.word	0x0800b7cb
 800b53c:	0800b7cb 	.word	0x0800b7cb
 800b540:	0800b7cb 	.word	0x0800b7cb
 800b544:	0800b7cb 	.word	0x0800b7cb
 800b548:	0800b5b3 	.word	0x0800b5b3
 800b54c:	0800b7cb 	.word	0x0800b7cb
 800b550:	0800b7cb 	.word	0x0800b7cb
 800b554:	0800b7cb 	.word	0x0800b7cb
 800b558:	0800b7cb 	.word	0x0800b7cb
 800b55c:	0800b7cb 	.word	0x0800b7cb
 800b560:	0800b7cb 	.word	0x0800b7cb
 800b564:	0800b7cb 	.word	0x0800b7cb
 800b568:	0800b5b9 	.word	0x0800b5b9
 800b56c:	0800b7cb 	.word	0x0800b7cb
 800b570:	0800b7cb 	.word	0x0800b7cb
 800b574:	0800b7cb 	.word	0x0800b7cb
 800b578:	0800b7cb 	.word	0x0800b7cb
 800b57c:	0800b7cb 	.word	0x0800b7cb
 800b580:	0800b7cb 	.word	0x0800b7cb
 800b584:	0800b7cb 	.word	0x0800b7cb
 800b588:	0800b5bf 	.word	0x0800b5bf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b58c:	4b94      	ldr	r3, [pc, #592]	; (800b7e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f003 0320 	and.w	r3, r3, #32
 800b594:	2b00      	cmp	r3, #0
 800b596:	d009      	beq.n	800b5ac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b598:	4b91      	ldr	r3, [pc, #580]	; (800b7e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	08db      	lsrs	r3, r3, #3
 800b59e:	f003 0303 	and.w	r3, r3, #3
 800b5a2:	4a90      	ldr	r2, [pc, #576]	; (800b7e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b5a4:	fa22 f303 	lsr.w	r3, r2, r3
 800b5a8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b5aa:	e111      	b.n	800b7d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b5ac:	4b8d      	ldr	r3, [pc, #564]	; (800b7e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b5ae:	61bb      	str	r3, [r7, #24]
      break;
 800b5b0:	e10e      	b.n	800b7d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b5b2:	4b8d      	ldr	r3, [pc, #564]	; (800b7e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b5b4:	61bb      	str	r3, [r7, #24]
      break;
 800b5b6:	e10b      	b.n	800b7d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b5b8:	4b8c      	ldr	r3, [pc, #560]	; (800b7ec <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b5ba:	61bb      	str	r3, [r7, #24]
      break;
 800b5bc:	e108      	b.n	800b7d0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b5be:	4b88      	ldr	r3, [pc, #544]	; (800b7e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5c2:	f003 0303 	and.w	r3, r3, #3
 800b5c6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b5c8:	4b85      	ldr	r3, [pc, #532]	; (800b7e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5cc:	091b      	lsrs	r3, r3, #4
 800b5ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b5d2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b5d4:	4b82      	ldr	r3, [pc, #520]	; (800b7e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5d8:	f003 0301 	and.w	r3, r3, #1
 800b5dc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b5de:	4b80      	ldr	r3, [pc, #512]	; (800b7e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5e2:	08db      	lsrs	r3, r3, #3
 800b5e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b5e8:	68fa      	ldr	r2, [r7, #12]
 800b5ea:	fb02 f303 	mul.w	r3, r2, r3
 800b5ee:	ee07 3a90 	vmov	s15, r3
 800b5f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5f6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	f000 80e1 	beq.w	800b7c4 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	2b02      	cmp	r3, #2
 800b606:	f000 8083 	beq.w	800b710 <HAL_RCC_GetSysClockFreq+0x204>
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	2b02      	cmp	r3, #2
 800b60e:	f200 80a1 	bhi.w	800b754 <HAL_RCC_GetSysClockFreq+0x248>
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d003      	beq.n	800b620 <HAL_RCC_GetSysClockFreq+0x114>
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	2b01      	cmp	r3, #1
 800b61c:	d056      	beq.n	800b6cc <HAL_RCC_GetSysClockFreq+0x1c0>
 800b61e:	e099      	b.n	800b754 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b620:	4b6f      	ldr	r3, [pc, #444]	; (800b7e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f003 0320 	and.w	r3, r3, #32
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d02d      	beq.n	800b688 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b62c:	4b6c      	ldr	r3, [pc, #432]	; (800b7e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	08db      	lsrs	r3, r3, #3
 800b632:	f003 0303 	and.w	r3, r3, #3
 800b636:	4a6b      	ldr	r2, [pc, #428]	; (800b7e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b638:	fa22 f303 	lsr.w	r3, r2, r3
 800b63c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	ee07 3a90 	vmov	s15, r3
 800b644:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	ee07 3a90 	vmov	s15, r3
 800b64e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b656:	4b62      	ldr	r3, [pc, #392]	; (800b7e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b65a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b65e:	ee07 3a90 	vmov	s15, r3
 800b662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b666:	ed97 6a02 	vldr	s12, [r7, #8]
 800b66a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b7f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b66e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b676:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b67a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b67e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b682:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b686:	e087      	b.n	800b798 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	ee07 3a90 	vmov	s15, r3
 800b68e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b692:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b7f4 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b69a:	4b51      	ldr	r3, [pc, #324]	; (800b7e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b69c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b69e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6a2:	ee07 3a90 	vmov	s15, r3
 800b6a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6aa:	ed97 6a02 	vldr	s12, [r7, #8]
 800b6ae:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b7f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b6b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b6ca:	e065      	b.n	800b798 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	ee07 3a90 	vmov	s15, r3
 800b6d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6d6:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b7f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b6da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6de:	4b40      	ldr	r3, [pc, #256]	; (800b7e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6e6:	ee07 3a90 	vmov	s15, r3
 800b6ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6ee:	ed97 6a02 	vldr	s12, [r7, #8]
 800b6f2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b7f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b6f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b70a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b70e:	e043      	b.n	800b798 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	ee07 3a90 	vmov	s15, r3
 800b716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b71a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b7fc <HAL_RCC_GetSysClockFreq+0x2f0>
 800b71e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b722:	4b2f      	ldr	r3, [pc, #188]	; (800b7e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b72a:	ee07 3a90 	vmov	s15, r3
 800b72e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b732:	ed97 6a02 	vldr	s12, [r7, #8]
 800b736:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b7f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b73a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b73e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b742:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b74a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b74e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b752:	e021      	b.n	800b798 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	ee07 3a90 	vmov	s15, r3
 800b75a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b75e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b7f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b766:	4b1e      	ldr	r3, [pc, #120]	; (800b7e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b76a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b76e:	ee07 3a90 	vmov	s15, r3
 800b772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b776:	ed97 6a02 	vldr	s12, [r7, #8]
 800b77a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b7f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b77e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b786:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b78a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b78e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b792:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b796:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b798:	4b11      	ldr	r3, [pc, #68]	; (800b7e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b79a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b79c:	0a5b      	lsrs	r3, r3, #9
 800b79e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7a2:	3301      	adds	r3, #1
 800b7a4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	ee07 3a90 	vmov	s15, r3
 800b7ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b7b0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b7b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7bc:	ee17 3a90 	vmov	r3, s15
 800b7c0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b7c2:	e005      	b.n	800b7d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	61bb      	str	r3, [r7, #24]
      break;
 800b7c8:	e002      	b.n	800b7d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b7ca:	4b07      	ldr	r3, [pc, #28]	; (800b7e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b7cc:	61bb      	str	r3, [r7, #24]
      break;
 800b7ce:	bf00      	nop
  }

  return sysclockfreq;
 800b7d0:	69bb      	ldr	r3, [r7, #24]
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	3724      	adds	r7, #36	; 0x24
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7dc:	4770      	bx	lr
 800b7de:	bf00      	nop
 800b7e0:	58024400 	.word	0x58024400
 800b7e4:	03d09000 	.word	0x03d09000
 800b7e8:	003d0900 	.word	0x003d0900
 800b7ec:	02faf080 	.word	0x02faf080
 800b7f0:	46000000 	.word	0x46000000
 800b7f4:	4c742400 	.word	0x4c742400
 800b7f8:	4a742400 	.word	0x4a742400
 800b7fc:	4c3ebc20 	.word	0x4c3ebc20

0800b800 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b082      	sub	sp, #8
 800b804:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b806:	f7ff fe81 	bl	800b50c <HAL_RCC_GetSysClockFreq>
 800b80a:	4602      	mov	r2, r0
 800b80c:	4b10      	ldr	r3, [pc, #64]	; (800b850 <HAL_RCC_GetHCLKFreq+0x50>)
 800b80e:	699b      	ldr	r3, [r3, #24]
 800b810:	0a1b      	lsrs	r3, r3, #8
 800b812:	f003 030f 	and.w	r3, r3, #15
 800b816:	490f      	ldr	r1, [pc, #60]	; (800b854 <HAL_RCC_GetHCLKFreq+0x54>)
 800b818:	5ccb      	ldrb	r3, [r1, r3]
 800b81a:	f003 031f 	and.w	r3, r3, #31
 800b81e:	fa22 f303 	lsr.w	r3, r2, r3
 800b822:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b824:	4b0a      	ldr	r3, [pc, #40]	; (800b850 <HAL_RCC_GetHCLKFreq+0x50>)
 800b826:	699b      	ldr	r3, [r3, #24]
 800b828:	f003 030f 	and.w	r3, r3, #15
 800b82c:	4a09      	ldr	r2, [pc, #36]	; (800b854 <HAL_RCC_GetHCLKFreq+0x54>)
 800b82e:	5cd3      	ldrb	r3, [r2, r3]
 800b830:	f003 031f 	and.w	r3, r3, #31
 800b834:	687a      	ldr	r2, [r7, #4]
 800b836:	fa22 f303 	lsr.w	r3, r2, r3
 800b83a:	4a07      	ldr	r2, [pc, #28]	; (800b858 <HAL_RCC_GetHCLKFreq+0x58>)
 800b83c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b83e:	4a07      	ldr	r2, [pc, #28]	; (800b85c <HAL_RCC_GetHCLKFreq+0x5c>)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b844:	4b04      	ldr	r3, [pc, #16]	; (800b858 <HAL_RCC_GetHCLKFreq+0x58>)
 800b846:	681b      	ldr	r3, [r3, #0]
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3708      	adds	r7, #8
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}
 800b850:	58024400 	.word	0x58024400
 800b854:	0801c804 	.word	0x0801c804
 800b858:	24000030 	.word	0x24000030
 800b85c:	2400002c 	.word	0x2400002c

0800b860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b864:	f7ff ffcc 	bl	800b800 <HAL_RCC_GetHCLKFreq>
 800b868:	4602      	mov	r2, r0
 800b86a:	4b06      	ldr	r3, [pc, #24]	; (800b884 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b86c:	69db      	ldr	r3, [r3, #28]
 800b86e:	091b      	lsrs	r3, r3, #4
 800b870:	f003 0307 	and.w	r3, r3, #7
 800b874:	4904      	ldr	r1, [pc, #16]	; (800b888 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b876:	5ccb      	ldrb	r3, [r1, r3]
 800b878:	f003 031f 	and.w	r3, r3, #31
 800b87c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b880:	4618      	mov	r0, r3
 800b882:	bd80      	pop	{r7, pc}
 800b884:	58024400 	.word	0x58024400
 800b888:	0801c804 	.word	0x0801c804

0800b88c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b890:	f7ff ffb6 	bl	800b800 <HAL_RCC_GetHCLKFreq>
 800b894:	4602      	mov	r2, r0
 800b896:	4b06      	ldr	r3, [pc, #24]	; (800b8b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b898:	69db      	ldr	r3, [r3, #28]
 800b89a:	0a1b      	lsrs	r3, r3, #8
 800b89c:	f003 0307 	and.w	r3, r3, #7
 800b8a0:	4904      	ldr	r1, [pc, #16]	; (800b8b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b8a2:	5ccb      	ldrb	r3, [r1, r3]
 800b8a4:	f003 031f 	and.w	r3, r3, #31
 800b8a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	bd80      	pop	{r7, pc}
 800b8b0:	58024400 	.word	0x58024400
 800b8b4:	0801c804 	.word	0x0801c804

0800b8b8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b8b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b8bc:	b0c6      	sub	sp, #280	; 0x118
 800b8be:	af00      	add	r7, sp, #0
 800b8c0:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b8d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b8dc:	2500      	movs	r5, #0
 800b8de:	ea54 0305 	orrs.w	r3, r4, r5
 800b8e2:	d049      	beq.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b8e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b8ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b8ee:	d02f      	beq.n	800b950 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b8f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b8f4:	d828      	bhi.n	800b948 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b8f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b8fa:	d01a      	beq.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b8fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b900:	d822      	bhi.n	800b948 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b902:	2b00      	cmp	r3, #0
 800b904:	d003      	beq.n	800b90e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b906:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b90a:	d007      	beq.n	800b91c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b90c:	e01c      	b.n	800b948 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b90e:	4bab      	ldr	r3, [pc, #684]	; (800bbbc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b912:	4aaa      	ldr	r2, [pc, #680]	; (800bbbc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b918:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b91a:	e01a      	b.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b91c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b920:	3308      	adds	r3, #8
 800b922:	2102      	movs	r1, #2
 800b924:	4618      	mov	r0, r3
 800b926:	f002 fa49 	bl	800ddbc <RCCEx_PLL2_Config>
 800b92a:	4603      	mov	r3, r0
 800b92c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b930:	e00f      	b.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b932:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b936:	3328      	adds	r3, #40	; 0x28
 800b938:	2102      	movs	r1, #2
 800b93a:	4618      	mov	r0, r3
 800b93c:	f002 faf0 	bl	800df20 <RCCEx_PLL3_Config>
 800b940:	4603      	mov	r3, r0
 800b942:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b946:	e004      	b.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b948:	2301      	movs	r3, #1
 800b94a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b94e:	e000      	b.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b950:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b952:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b956:	2b00      	cmp	r3, #0
 800b958:	d10a      	bne.n	800b970 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b95a:	4b98      	ldr	r3, [pc, #608]	; (800bbbc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b95c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b95e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b962:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b966:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b968:	4a94      	ldr	r2, [pc, #592]	; (800bbbc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b96a:	430b      	orrs	r3, r1
 800b96c:	6513      	str	r3, [r2, #80]	; 0x50
 800b96e:	e003      	b.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b970:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b974:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b978:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b980:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b984:	f04f 0900 	mov.w	r9, #0
 800b988:	ea58 0309 	orrs.w	r3, r8, r9
 800b98c:	d047      	beq.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b98e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b994:	2b04      	cmp	r3, #4
 800b996:	d82a      	bhi.n	800b9ee <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b998:	a201      	add	r2, pc, #4	; (adr r2, 800b9a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b99a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b99e:	bf00      	nop
 800b9a0:	0800b9b5 	.word	0x0800b9b5
 800b9a4:	0800b9c3 	.word	0x0800b9c3
 800b9a8:	0800b9d9 	.word	0x0800b9d9
 800b9ac:	0800b9f7 	.word	0x0800b9f7
 800b9b0:	0800b9f7 	.word	0x0800b9f7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9b4:	4b81      	ldr	r3, [pc, #516]	; (800bbbc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b9b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b8:	4a80      	ldr	r2, [pc, #512]	; (800bbbc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b9ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b9c0:	e01a      	b.n	800b9f8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b9c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9c6:	3308      	adds	r3, #8
 800b9c8:	2100      	movs	r1, #0
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f002 f9f6 	bl	800ddbc <RCCEx_PLL2_Config>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b9d6:	e00f      	b.n	800b9f8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b9d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9dc:	3328      	adds	r3, #40	; 0x28
 800b9de:	2100      	movs	r1, #0
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f002 fa9d 	bl	800df20 <RCCEx_PLL3_Config>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b9ec:	e004      	b.n	800b9f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b9f4:	e000      	b.n	800b9f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b9f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d10a      	bne.n	800ba16 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ba00:	4b6e      	ldr	r3, [pc, #440]	; (800bbbc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba04:	f023 0107 	bic.w	r1, r3, #7
 800ba08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba0e:	4a6b      	ldr	r2, [pc, #428]	; (800bbbc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba10:	430b      	orrs	r3, r1
 800ba12:	6513      	str	r3, [r2, #80]	; 0x50
 800ba14:	e003      	b.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba16:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba1a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ba1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba26:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800ba2a:	f04f 0b00 	mov.w	fp, #0
 800ba2e:	ea5a 030b 	orrs.w	r3, sl, fp
 800ba32:	d05b      	beq.n	800baec <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800ba34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ba3c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800ba40:	d03b      	beq.n	800baba <HAL_RCCEx_PeriphCLKConfig+0x202>
 800ba42:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800ba46:	d834      	bhi.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ba48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ba4c:	d037      	beq.n	800babe <HAL_RCCEx_PeriphCLKConfig+0x206>
 800ba4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ba52:	d82e      	bhi.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ba54:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ba58:	d033      	beq.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800ba5a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ba5e:	d828      	bhi.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ba60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ba64:	d01a      	beq.n	800ba9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800ba66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ba6a:	d822      	bhi.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d003      	beq.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800ba70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ba74:	d007      	beq.n	800ba86 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800ba76:	e01c      	b.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba78:	4b50      	ldr	r3, [pc, #320]	; (800bbbc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba7c:	4a4f      	ldr	r2, [pc, #316]	; (800bbbc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ba84:	e01e      	b.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba8a:	3308      	adds	r3, #8
 800ba8c:	2100      	movs	r1, #0
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f002 f994 	bl	800ddbc <RCCEx_PLL2_Config>
 800ba94:	4603      	mov	r3, r0
 800ba96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ba9a:	e013      	b.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ba9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baa0:	3328      	adds	r3, #40	; 0x28
 800baa2:	2100      	movs	r1, #0
 800baa4:	4618      	mov	r0, r3
 800baa6:	f002 fa3b 	bl	800df20 <RCCEx_PLL3_Config>
 800baaa:	4603      	mov	r3, r0
 800baac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bab0:	e008      	b.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800bab2:	2301      	movs	r3, #1
 800bab4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bab8:	e004      	b.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800baba:	bf00      	nop
 800babc:	e002      	b.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800babe:	bf00      	nop
 800bac0:	e000      	b.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800bac2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bac4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d10b      	bne.n	800bae4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800bacc:	4b3b      	ldr	r3, [pc, #236]	; (800bbbc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bad0:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800bad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bad8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800badc:	4a37      	ldr	r2, [pc, #220]	; (800bbbc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bade:	430b      	orrs	r3, r1
 800bae0:	6593      	str	r3, [r2, #88]	; 0x58
 800bae2:	e003      	b.n	800baec <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bae4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bae8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800baec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf4:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800baf8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bafc:	2300      	movs	r3, #0
 800bafe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bb02:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800bb06:	460b      	mov	r3, r1
 800bb08:	4313      	orrs	r3, r2
 800bb0a:	d05d      	beq.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800bb0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb10:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bb14:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800bb18:	d03b      	beq.n	800bb92 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800bb1a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800bb1e:	d834      	bhi.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bb20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bb24:	d037      	beq.n	800bb96 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800bb26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bb2a:	d82e      	bhi.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bb2c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bb30:	d033      	beq.n	800bb9a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800bb32:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bb36:	d828      	bhi.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bb38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb3c:	d01a      	beq.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800bb3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb42:	d822      	bhi.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d003      	beq.n	800bb50 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800bb48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bb4c:	d007      	beq.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800bb4e:	e01c      	b.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb50:	4b1a      	ldr	r3, [pc, #104]	; (800bbbc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bb52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb54:	4a19      	ldr	r2, [pc, #100]	; (800bbbc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bb56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bb5c:	e01e      	b.n	800bb9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb62:	3308      	adds	r3, #8
 800bb64:	2100      	movs	r1, #0
 800bb66:	4618      	mov	r0, r3
 800bb68:	f002 f928 	bl	800ddbc <RCCEx_PLL2_Config>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800bb72:	e013      	b.n	800bb9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bb74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb78:	3328      	adds	r3, #40	; 0x28
 800bb7a:	2100      	movs	r1, #0
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f002 f9cf 	bl	800df20 <RCCEx_PLL3_Config>
 800bb82:	4603      	mov	r3, r0
 800bb84:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bb88:	e008      	b.n	800bb9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bb90:	e004      	b.n	800bb9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800bb92:	bf00      	nop
 800bb94:	e002      	b.n	800bb9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800bb96:	bf00      	nop
 800bb98:	e000      	b.n	800bb9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800bb9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d10d      	bne.n	800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800bba4:	4b05      	ldr	r3, [pc, #20]	; (800bbbc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bba8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800bbac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbb0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bbb4:	4a01      	ldr	r2, [pc, #4]	; (800bbbc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bbb6:	430b      	orrs	r3, r1
 800bbb8:	6593      	str	r3, [r2, #88]	; 0x58
 800bbba:	e005      	b.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800bbbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbc0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbc4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800bbc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800bbd4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bbd8:	2300      	movs	r3, #0
 800bbda:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bbde:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800bbe2:	460b      	mov	r3, r1
 800bbe4:	4313      	orrs	r3, r2
 800bbe6:	d03a      	beq.n	800bc5e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800bbe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbee:	2b30      	cmp	r3, #48	; 0x30
 800bbf0:	d01f      	beq.n	800bc32 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800bbf2:	2b30      	cmp	r3, #48	; 0x30
 800bbf4:	d819      	bhi.n	800bc2a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800bbf6:	2b20      	cmp	r3, #32
 800bbf8:	d00c      	beq.n	800bc14 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800bbfa:	2b20      	cmp	r3, #32
 800bbfc:	d815      	bhi.n	800bc2a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d019      	beq.n	800bc36 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800bc02:	2b10      	cmp	r3, #16
 800bc04:	d111      	bne.n	800bc2a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc06:	4baa      	ldr	r3, [pc, #680]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc0a:	4aa9      	ldr	r2, [pc, #676]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800bc12:	e011      	b.n	800bc38 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bc14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc18:	3308      	adds	r3, #8
 800bc1a:	2102      	movs	r1, #2
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f002 f8cd 	bl	800ddbc <RCCEx_PLL2_Config>
 800bc22:	4603      	mov	r3, r0
 800bc24:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800bc28:	e006      	b.n	800bc38 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bc30:	e002      	b.n	800bc38 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800bc32:	bf00      	nop
 800bc34:	e000      	b.n	800bc38 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800bc36:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc38:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d10a      	bne.n	800bc56 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800bc40:	4b9b      	ldr	r3, [pc, #620]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc44:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800bc48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc4e:	4a98      	ldr	r2, [pc, #608]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc50:	430b      	orrs	r3, r1
 800bc52:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bc54:	e003      	b.n	800bc5e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc56:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc5a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bc5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc66:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800bc6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bc6e:	2300      	movs	r3, #0
 800bc70:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bc74:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800bc78:	460b      	mov	r3, r1
 800bc7a:	4313      	orrs	r3, r2
 800bc7c:	d051      	beq.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800bc7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bc88:	d035      	beq.n	800bcf6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800bc8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bc8e:	d82e      	bhi.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bc90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bc94:	d031      	beq.n	800bcfa <HAL_RCCEx_PeriphCLKConfig+0x442>
 800bc96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bc9a:	d828      	bhi.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bc9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bca0:	d01a      	beq.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800bca2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bca6:	d822      	bhi.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d003      	beq.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800bcac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcb0:	d007      	beq.n	800bcc2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800bcb2:	e01c      	b.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bcb4:	4b7e      	ldr	r3, [pc, #504]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bcb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcb8:	4a7d      	ldr	r2, [pc, #500]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bcba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bcbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bcc0:	e01c      	b.n	800bcfc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bcc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcc6:	3308      	adds	r3, #8
 800bcc8:	2100      	movs	r1, #0
 800bcca:	4618      	mov	r0, r3
 800bccc:	f002 f876 	bl	800ddbc <RCCEx_PLL2_Config>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bcd6:	e011      	b.n	800bcfc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bcd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcdc:	3328      	adds	r3, #40	; 0x28
 800bcde:	2100      	movs	r1, #0
 800bce0:	4618      	mov	r0, r3
 800bce2:	f002 f91d 	bl	800df20 <RCCEx_PLL3_Config>
 800bce6:	4603      	mov	r3, r0
 800bce8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bcec:	e006      	b.n	800bcfc <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bcee:	2301      	movs	r3, #1
 800bcf0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bcf4:	e002      	b.n	800bcfc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800bcf6:	bf00      	nop
 800bcf8:	e000      	b.n	800bcfc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800bcfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcfc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d10a      	bne.n	800bd1a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bd04:	4b6a      	ldr	r3, [pc, #424]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd08:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800bd0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd12:	4a67      	ldr	r2, [pc, #412]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd14:	430b      	orrs	r3, r1
 800bd16:	6513      	str	r3, [r2, #80]	; 0x50
 800bd18:	e003      	b.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd1a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd1e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bd22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd2a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800bd2e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bd32:	2300      	movs	r3, #0
 800bd34:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bd38:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800bd3c:	460b      	mov	r3, r1
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	d053      	beq.n	800bdea <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800bd42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bd4c:	d033      	beq.n	800bdb6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800bd4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bd52:	d82c      	bhi.n	800bdae <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bd54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bd58:	d02f      	beq.n	800bdba <HAL_RCCEx_PeriphCLKConfig+0x502>
 800bd5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bd5e:	d826      	bhi.n	800bdae <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bd60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bd64:	d02b      	beq.n	800bdbe <HAL_RCCEx_PeriphCLKConfig+0x506>
 800bd66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bd6a:	d820      	bhi.n	800bdae <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bd6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd70:	d012      	beq.n	800bd98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800bd72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd76:	d81a      	bhi.n	800bdae <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d022      	beq.n	800bdc2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800bd7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd80:	d115      	bne.n	800bdae <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bd82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd86:	3308      	adds	r3, #8
 800bd88:	2101      	movs	r1, #1
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f002 f816 	bl	800ddbc <RCCEx_PLL2_Config>
 800bd90:	4603      	mov	r3, r0
 800bd92:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bd96:	e015      	b.n	800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bd98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd9c:	3328      	adds	r3, #40	; 0x28
 800bd9e:	2101      	movs	r1, #1
 800bda0:	4618      	mov	r0, r3
 800bda2:	f002 f8bd 	bl	800df20 <RCCEx_PLL3_Config>
 800bda6:	4603      	mov	r3, r0
 800bda8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bdac:	e00a      	b.n	800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bdae:	2301      	movs	r3, #1
 800bdb0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bdb4:	e006      	b.n	800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bdb6:	bf00      	nop
 800bdb8:	e004      	b.n	800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bdba:	bf00      	nop
 800bdbc:	e002      	b.n	800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bdbe:	bf00      	nop
 800bdc0:	e000      	b.n	800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bdc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bdc4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d10a      	bne.n	800bde2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bdcc:	4b38      	ldr	r3, [pc, #224]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bdce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdd0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800bdd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bdda:	4a35      	ldr	r2, [pc, #212]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bddc:	430b      	orrs	r3, r1
 800bdde:	6513      	str	r3, [r2, #80]	; 0x50
 800bde0:	e003      	b.n	800bdea <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bde2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bde6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bdea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800bdf6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800be00:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800be04:	460b      	mov	r3, r1
 800be06:	4313      	orrs	r3, r2
 800be08:	d058      	beq.n	800bebc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800be0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800be12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800be16:	d033      	beq.n	800be80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800be18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800be1c:	d82c      	bhi.n	800be78 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800be1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be22:	d02f      	beq.n	800be84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800be24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be28:	d826      	bhi.n	800be78 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800be2a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800be2e:	d02b      	beq.n	800be88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800be30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800be34:	d820      	bhi.n	800be78 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800be36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be3a:	d012      	beq.n	800be62 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800be3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be40:	d81a      	bhi.n	800be78 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800be42:	2b00      	cmp	r3, #0
 800be44:	d022      	beq.n	800be8c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800be46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be4a:	d115      	bne.n	800be78 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800be4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be50:	3308      	adds	r3, #8
 800be52:	2101      	movs	r1, #1
 800be54:	4618      	mov	r0, r3
 800be56:	f001 ffb1 	bl	800ddbc <RCCEx_PLL2_Config>
 800be5a:	4603      	mov	r3, r0
 800be5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800be60:	e015      	b.n	800be8e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800be62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be66:	3328      	adds	r3, #40	; 0x28
 800be68:	2101      	movs	r1, #1
 800be6a:	4618      	mov	r0, r3
 800be6c:	f002 f858 	bl	800df20 <RCCEx_PLL3_Config>
 800be70:	4603      	mov	r3, r0
 800be72:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800be76:	e00a      	b.n	800be8e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800be78:	2301      	movs	r3, #1
 800be7a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800be7e:	e006      	b.n	800be8e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800be80:	bf00      	nop
 800be82:	e004      	b.n	800be8e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800be84:	bf00      	nop
 800be86:	e002      	b.n	800be8e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800be88:	bf00      	nop
 800be8a:	e000      	b.n	800be8e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800be8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be8e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be92:	2b00      	cmp	r3, #0
 800be94:	d10e      	bne.n	800beb4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800be96:	4b06      	ldr	r3, [pc, #24]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800be98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be9a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800be9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bea2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bea6:	4a02      	ldr	r2, [pc, #8]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bea8:	430b      	orrs	r3, r1
 800beaa:	6593      	str	r3, [r2, #88]	; 0x58
 800beac:	e006      	b.n	800bebc <HAL_RCCEx_PeriphCLKConfig+0x604>
 800beae:	bf00      	nop
 800beb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800beb4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800beb8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800bec8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800becc:	2300      	movs	r3, #0
 800bece:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bed2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800bed6:	460b      	mov	r3, r1
 800bed8:	4313      	orrs	r3, r2
 800beda:	d037      	beq.n	800bf4c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800bedc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bee0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bee2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bee6:	d00e      	beq.n	800bf06 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800bee8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800beec:	d816      	bhi.n	800bf1c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d018      	beq.n	800bf24 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800bef2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bef6:	d111      	bne.n	800bf1c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bef8:	4bc4      	ldr	r3, [pc, #784]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800befa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800befc:	4ac3      	ldr	r2, [pc, #780]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800befe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bf04:	e00f      	b.n	800bf26 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bf06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf0a:	3308      	adds	r3, #8
 800bf0c:	2101      	movs	r1, #1
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f001 ff54 	bl	800ddbc <RCCEx_PLL2_Config>
 800bf14:	4603      	mov	r3, r0
 800bf16:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bf1a:	e004      	b.n	800bf26 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bf22:	e000      	b.n	800bf26 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800bf24:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf26:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d10a      	bne.n	800bf44 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bf2e:	4bb7      	ldr	r3, [pc, #732]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf32:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bf36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf3c:	4ab3      	ldr	r2, [pc, #716]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf3e:	430b      	orrs	r3, r1
 800bf40:	6513      	str	r3, [r2, #80]	; 0x50
 800bf42:	e003      	b.n	800bf4c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf44:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf48:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bf4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf54:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800bf58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bf62:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800bf66:	460b      	mov	r3, r1
 800bf68:	4313      	orrs	r3, r2
 800bf6a:	d039      	beq.n	800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800bf6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf72:	2b03      	cmp	r3, #3
 800bf74:	d81c      	bhi.n	800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800bf76:	a201      	add	r2, pc, #4	; (adr r2, 800bf7c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800bf78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf7c:	0800bfb9 	.word	0x0800bfb9
 800bf80:	0800bf8d 	.word	0x0800bf8d
 800bf84:	0800bf9b 	.word	0x0800bf9b
 800bf88:	0800bfb9 	.word	0x0800bfb9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf8c:	4b9f      	ldr	r3, [pc, #636]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf90:	4a9e      	ldr	r2, [pc, #632]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bf98:	e00f      	b.n	800bfba <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bf9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf9e:	3308      	adds	r3, #8
 800bfa0:	2102      	movs	r1, #2
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f001 ff0a 	bl	800ddbc <RCCEx_PLL2_Config>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bfae:	e004      	b.n	800bfba <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bfb6:	e000      	b.n	800bfba <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800bfb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bfba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d10a      	bne.n	800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bfc2:	4b92      	ldr	r3, [pc, #584]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfc6:	f023 0103 	bic.w	r1, r3, #3
 800bfca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bfd0:	4a8e      	ldr	r2, [pc, #568]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfd2:	430b      	orrs	r3, r1
 800bfd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bfd6:	e003      	b.n	800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfd8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bfdc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bfe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800bfec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bff0:	2300      	movs	r3, #0
 800bff2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bff6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bffa:	460b      	mov	r3, r1
 800bffc:	4313      	orrs	r3, r2
 800bffe:	f000 8099 	beq.w	800c134 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c002:	4b83      	ldr	r3, [pc, #524]	; (800c210 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	4a82      	ldr	r2, [pc, #520]	; (800c210 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c00c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c00e:	f7f8 f95b 	bl	80042c8 <HAL_GetTick>
 800c012:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c016:	e00b      	b.n	800c030 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c018:	f7f8 f956 	bl	80042c8 <HAL_GetTick>
 800c01c:	4602      	mov	r2, r0
 800c01e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c022:	1ad3      	subs	r3, r2, r3
 800c024:	2b64      	cmp	r3, #100	; 0x64
 800c026:	d903      	bls.n	800c030 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800c028:	2303      	movs	r3, #3
 800c02a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c02e:	e005      	b.n	800c03c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c030:	4b77      	ldr	r3, [pc, #476]	; (800c210 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d0ed      	beq.n	800c018 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800c03c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c040:	2b00      	cmp	r3, #0
 800c042:	d173      	bne.n	800c12c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c044:	4b71      	ldr	r3, [pc, #452]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c046:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c048:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c04c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c050:	4053      	eors	r3, r2
 800c052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c056:	2b00      	cmp	r3, #0
 800c058:	d015      	beq.n	800c086 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c05a:	4b6c      	ldr	r3, [pc, #432]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c05c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c05e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c062:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c066:	4b69      	ldr	r3, [pc, #420]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c06a:	4a68      	ldr	r2, [pc, #416]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c06c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c070:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c072:	4b66      	ldr	r3, [pc, #408]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c076:	4a65      	ldr	r2, [pc, #404]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c078:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c07c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c07e:	4a63      	ldr	r2, [pc, #396]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c080:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c084:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c086:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c08a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c08e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c092:	d118      	bne.n	800c0c6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c094:	f7f8 f918 	bl	80042c8 <HAL_GetTick>
 800c098:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c09c:	e00d      	b.n	800c0ba <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c09e:	f7f8 f913 	bl	80042c8 <HAL_GetTick>
 800c0a2:	4602      	mov	r2, r0
 800c0a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c0a8:	1ad2      	subs	r2, r2, r3
 800c0aa:	f241 3388 	movw	r3, #5000	; 0x1388
 800c0ae:	429a      	cmp	r2, r3
 800c0b0:	d903      	bls.n	800c0ba <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800c0b2:	2303      	movs	r3, #3
 800c0b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800c0b8:	e005      	b.n	800c0c6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c0ba:	4b54      	ldr	r3, [pc, #336]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0be:	f003 0302 	and.w	r3, r3, #2
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d0eb      	beq.n	800c09e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800c0c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d129      	bne.n	800c122 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c0ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c0d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c0da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c0de:	d10e      	bne.n	800c0fe <HAL_RCCEx_PeriphCLKConfig+0x846>
 800c0e0:	4b4a      	ldr	r3, [pc, #296]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0e2:	691b      	ldr	r3, [r3, #16]
 800c0e4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800c0e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c0f0:	091a      	lsrs	r2, r3, #4
 800c0f2:	4b48      	ldr	r3, [pc, #288]	; (800c214 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800c0f4:	4013      	ands	r3, r2
 800c0f6:	4a45      	ldr	r2, [pc, #276]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0f8:	430b      	orrs	r3, r1
 800c0fa:	6113      	str	r3, [r2, #16]
 800c0fc:	e005      	b.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800c0fe:	4b43      	ldr	r3, [pc, #268]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c100:	691b      	ldr	r3, [r3, #16]
 800c102:	4a42      	ldr	r2, [pc, #264]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c104:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c108:	6113      	str	r3, [r2, #16]
 800c10a:	4b40      	ldr	r3, [pc, #256]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c10c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800c10e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c112:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c11a:	4a3c      	ldr	r2, [pc, #240]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c11c:	430b      	orrs	r3, r1
 800c11e:	6713      	str	r3, [r2, #112]	; 0x70
 800c120:	e008      	b.n	800c134 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c122:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c126:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800c12a:	e003      	b.n	800c134 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c12c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c130:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c13c:	f002 0301 	and.w	r3, r2, #1
 800c140:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c144:	2300      	movs	r3, #0
 800c146:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c14a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800c14e:	460b      	mov	r3, r1
 800c150:	4313      	orrs	r3, r2
 800c152:	f000 808f 	beq.w	800c274 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800c156:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c15a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c15c:	2b28      	cmp	r3, #40	; 0x28
 800c15e:	d871      	bhi.n	800c244 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800c160:	a201      	add	r2, pc, #4	; (adr r2, 800c168 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800c162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c166:	bf00      	nop
 800c168:	0800c24d 	.word	0x0800c24d
 800c16c:	0800c245 	.word	0x0800c245
 800c170:	0800c245 	.word	0x0800c245
 800c174:	0800c245 	.word	0x0800c245
 800c178:	0800c245 	.word	0x0800c245
 800c17c:	0800c245 	.word	0x0800c245
 800c180:	0800c245 	.word	0x0800c245
 800c184:	0800c245 	.word	0x0800c245
 800c188:	0800c219 	.word	0x0800c219
 800c18c:	0800c245 	.word	0x0800c245
 800c190:	0800c245 	.word	0x0800c245
 800c194:	0800c245 	.word	0x0800c245
 800c198:	0800c245 	.word	0x0800c245
 800c19c:	0800c245 	.word	0x0800c245
 800c1a0:	0800c245 	.word	0x0800c245
 800c1a4:	0800c245 	.word	0x0800c245
 800c1a8:	0800c22f 	.word	0x0800c22f
 800c1ac:	0800c245 	.word	0x0800c245
 800c1b0:	0800c245 	.word	0x0800c245
 800c1b4:	0800c245 	.word	0x0800c245
 800c1b8:	0800c245 	.word	0x0800c245
 800c1bc:	0800c245 	.word	0x0800c245
 800c1c0:	0800c245 	.word	0x0800c245
 800c1c4:	0800c245 	.word	0x0800c245
 800c1c8:	0800c24d 	.word	0x0800c24d
 800c1cc:	0800c245 	.word	0x0800c245
 800c1d0:	0800c245 	.word	0x0800c245
 800c1d4:	0800c245 	.word	0x0800c245
 800c1d8:	0800c245 	.word	0x0800c245
 800c1dc:	0800c245 	.word	0x0800c245
 800c1e0:	0800c245 	.word	0x0800c245
 800c1e4:	0800c245 	.word	0x0800c245
 800c1e8:	0800c24d 	.word	0x0800c24d
 800c1ec:	0800c245 	.word	0x0800c245
 800c1f0:	0800c245 	.word	0x0800c245
 800c1f4:	0800c245 	.word	0x0800c245
 800c1f8:	0800c245 	.word	0x0800c245
 800c1fc:	0800c245 	.word	0x0800c245
 800c200:	0800c245 	.word	0x0800c245
 800c204:	0800c245 	.word	0x0800c245
 800c208:	0800c24d 	.word	0x0800c24d
 800c20c:	58024400 	.word	0x58024400
 800c210:	58024800 	.word	0x58024800
 800c214:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c218:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c21c:	3308      	adds	r3, #8
 800c21e:	2101      	movs	r1, #1
 800c220:	4618      	mov	r0, r3
 800c222:	f001 fdcb 	bl	800ddbc <RCCEx_PLL2_Config>
 800c226:	4603      	mov	r3, r0
 800c228:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c22c:	e00f      	b.n	800c24e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c22e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c232:	3328      	adds	r3, #40	; 0x28
 800c234:	2101      	movs	r1, #1
 800c236:	4618      	mov	r0, r3
 800c238:	f001 fe72 	bl	800df20 <RCCEx_PLL3_Config>
 800c23c:	4603      	mov	r3, r0
 800c23e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c242:	e004      	b.n	800c24e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c244:	2301      	movs	r3, #1
 800c246:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c24a:	e000      	b.n	800c24e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800c24c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c24e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c252:	2b00      	cmp	r3, #0
 800c254:	d10a      	bne.n	800c26c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c256:	4bbf      	ldr	r3, [pc, #764]	; (800c554 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c25a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800c25e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c262:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c264:	4abb      	ldr	r2, [pc, #748]	; (800c554 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c266:	430b      	orrs	r3, r1
 800c268:	6553      	str	r3, [r2, #84]	; 0x54
 800c26a:	e003      	b.n	800c274 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c26c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c270:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c274:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c27c:	f002 0302 	and.w	r3, r2, #2
 800c280:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c284:	2300      	movs	r3, #0
 800c286:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c28a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800c28e:	460b      	mov	r3, r1
 800c290:	4313      	orrs	r3, r2
 800c292:	d041      	beq.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c294:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c29a:	2b05      	cmp	r3, #5
 800c29c:	d824      	bhi.n	800c2e8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800c29e:	a201      	add	r2, pc, #4	; (adr r2, 800c2a4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800c2a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2a4:	0800c2f1 	.word	0x0800c2f1
 800c2a8:	0800c2bd 	.word	0x0800c2bd
 800c2ac:	0800c2d3 	.word	0x0800c2d3
 800c2b0:	0800c2f1 	.word	0x0800c2f1
 800c2b4:	0800c2f1 	.word	0x0800c2f1
 800c2b8:	0800c2f1 	.word	0x0800c2f1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c2bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2c0:	3308      	adds	r3, #8
 800c2c2:	2101      	movs	r1, #1
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	f001 fd79 	bl	800ddbc <RCCEx_PLL2_Config>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c2d0:	e00f      	b.n	800c2f2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c2d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2d6:	3328      	adds	r3, #40	; 0x28
 800c2d8:	2101      	movs	r1, #1
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f001 fe20 	bl	800df20 <RCCEx_PLL3_Config>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c2e6:	e004      	b.n	800c2f2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c2ee:	e000      	b.n	800c2f2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800c2f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c2f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d10a      	bne.n	800c310 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c2fa:	4b96      	ldr	r3, [pc, #600]	; (800c554 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c2fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2fe:	f023 0107 	bic.w	r1, r3, #7
 800c302:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c308:	4a92      	ldr	r2, [pc, #584]	; (800c554 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c30a:	430b      	orrs	r3, r1
 800c30c:	6553      	str	r3, [r2, #84]	; 0x54
 800c30e:	e003      	b.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c310:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c314:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c318:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c320:	f002 0304 	and.w	r3, r2, #4
 800c324:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c328:	2300      	movs	r3, #0
 800c32a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c32e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c332:	460b      	mov	r3, r1
 800c334:	4313      	orrs	r3, r2
 800c336:	d044      	beq.n	800c3c2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c33c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c340:	2b05      	cmp	r3, #5
 800c342:	d825      	bhi.n	800c390 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800c344:	a201      	add	r2, pc, #4	; (adr r2, 800c34c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800c346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c34a:	bf00      	nop
 800c34c:	0800c399 	.word	0x0800c399
 800c350:	0800c365 	.word	0x0800c365
 800c354:	0800c37b 	.word	0x0800c37b
 800c358:	0800c399 	.word	0x0800c399
 800c35c:	0800c399 	.word	0x0800c399
 800c360:	0800c399 	.word	0x0800c399
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c364:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c368:	3308      	adds	r3, #8
 800c36a:	2101      	movs	r1, #1
 800c36c:	4618      	mov	r0, r3
 800c36e:	f001 fd25 	bl	800ddbc <RCCEx_PLL2_Config>
 800c372:	4603      	mov	r3, r0
 800c374:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c378:	e00f      	b.n	800c39a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c37a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c37e:	3328      	adds	r3, #40	; 0x28
 800c380:	2101      	movs	r1, #1
 800c382:	4618      	mov	r0, r3
 800c384:	f001 fdcc 	bl	800df20 <RCCEx_PLL3_Config>
 800c388:	4603      	mov	r3, r0
 800c38a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c38e:	e004      	b.n	800c39a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c390:	2301      	movs	r3, #1
 800c392:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c396:	e000      	b.n	800c39a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800c398:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c39a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d10b      	bne.n	800c3ba <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c3a2:	4b6c      	ldr	r3, [pc, #432]	; (800c554 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c3a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3a6:	f023 0107 	bic.w	r1, r3, #7
 800c3aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3b2:	4a68      	ldr	r2, [pc, #416]	; (800c554 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c3b4:	430b      	orrs	r3, r1
 800c3b6:	6593      	str	r3, [r2, #88]	; 0x58
 800c3b8:	e003      	b.n	800c3c2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c3be:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c3c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ca:	f002 0320 	and.w	r3, r2, #32
 800c3ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c3d8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800c3dc:	460b      	mov	r3, r1
 800c3de:	4313      	orrs	r3, r2
 800c3e0:	d055      	beq.n	800c48e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c3e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c3ee:	d033      	beq.n	800c458 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800c3f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c3f4:	d82c      	bhi.n	800c450 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c3f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3fa:	d02f      	beq.n	800c45c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c3fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c400:	d826      	bhi.n	800c450 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c402:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c406:	d02b      	beq.n	800c460 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c408:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c40c:	d820      	bhi.n	800c450 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c40e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c412:	d012      	beq.n	800c43a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800c414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c418:	d81a      	bhi.n	800c450 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d022      	beq.n	800c464 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c41e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c422:	d115      	bne.n	800c450 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c424:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c428:	3308      	adds	r3, #8
 800c42a:	2100      	movs	r1, #0
 800c42c:	4618      	mov	r0, r3
 800c42e:	f001 fcc5 	bl	800ddbc <RCCEx_PLL2_Config>
 800c432:	4603      	mov	r3, r0
 800c434:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c438:	e015      	b.n	800c466 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c43a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c43e:	3328      	adds	r3, #40	; 0x28
 800c440:	2102      	movs	r1, #2
 800c442:	4618      	mov	r0, r3
 800c444:	f001 fd6c 	bl	800df20 <RCCEx_PLL3_Config>
 800c448:	4603      	mov	r3, r0
 800c44a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c44e:	e00a      	b.n	800c466 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c450:	2301      	movs	r3, #1
 800c452:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c456:	e006      	b.n	800c466 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c458:	bf00      	nop
 800c45a:	e004      	b.n	800c466 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c45c:	bf00      	nop
 800c45e:	e002      	b.n	800c466 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c460:	bf00      	nop
 800c462:	e000      	b.n	800c466 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c464:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c466:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d10b      	bne.n	800c486 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c46e:	4b39      	ldr	r3, [pc, #228]	; (800c554 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c472:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800c476:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c47a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c47e:	4a35      	ldr	r2, [pc, #212]	; (800c554 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c480:	430b      	orrs	r3, r1
 800c482:	6553      	str	r3, [r2, #84]	; 0x54
 800c484:	e003      	b.n	800c48e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c486:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c48a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c48e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c496:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800c49a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c49e:	2300      	movs	r3, #0
 800c4a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c4a4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800c4a8:	460b      	mov	r3, r1
 800c4aa:	4313      	orrs	r3, r2
 800c4ac:	d058      	beq.n	800c560 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c4ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c4b6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c4ba:	d033      	beq.n	800c524 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800c4bc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c4c0:	d82c      	bhi.n	800c51c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c4c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c4c6:	d02f      	beq.n	800c528 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c4c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c4cc:	d826      	bhi.n	800c51c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c4ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c4d2:	d02b      	beq.n	800c52c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c4d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c4d8:	d820      	bhi.n	800c51c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c4da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c4de:	d012      	beq.n	800c506 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800c4e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c4e4:	d81a      	bhi.n	800c51c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d022      	beq.n	800c530 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c4ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c4ee:	d115      	bne.n	800c51c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c4f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4f4:	3308      	adds	r3, #8
 800c4f6:	2100      	movs	r1, #0
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f001 fc5f 	bl	800ddbc <RCCEx_PLL2_Config>
 800c4fe:	4603      	mov	r3, r0
 800c500:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c504:	e015      	b.n	800c532 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c506:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c50a:	3328      	adds	r3, #40	; 0x28
 800c50c:	2102      	movs	r1, #2
 800c50e:	4618      	mov	r0, r3
 800c510:	f001 fd06 	bl	800df20 <RCCEx_PLL3_Config>
 800c514:	4603      	mov	r3, r0
 800c516:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c51a:	e00a      	b.n	800c532 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c51c:	2301      	movs	r3, #1
 800c51e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c522:	e006      	b.n	800c532 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c524:	bf00      	nop
 800c526:	e004      	b.n	800c532 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c528:	bf00      	nop
 800c52a:	e002      	b.n	800c532 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c52c:	bf00      	nop
 800c52e:	e000      	b.n	800c532 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c530:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c532:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c536:	2b00      	cmp	r3, #0
 800c538:	d10e      	bne.n	800c558 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c53a:	4b06      	ldr	r3, [pc, #24]	; (800c554 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c53c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c53e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800c542:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c546:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c54a:	4a02      	ldr	r2, [pc, #8]	; (800c554 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c54c:	430b      	orrs	r3, r1
 800c54e:	6593      	str	r3, [r2, #88]	; 0x58
 800c550:	e006      	b.n	800c560 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800c552:	bf00      	nop
 800c554:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c558:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c55c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c560:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c568:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800c56c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c570:	2300      	movs	r3, #0
 800c572:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c576:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800c57a:	460b      	mov	r3, r1
 800c57c:	4313      	orrs	r3, r2
 800c57e:	d055      	beq.n	800c62c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c580:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c584:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c588:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c58c:	d033      	beq.n	800c5f6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800c58e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c592:	d82c      	bhi.n	800c5ee <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c594:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c598:	d02f      	beq.n	800c5fa <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c59a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c59e:	d826      	bhi.n	800c5ee <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c5a0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c5a4:	d02b      	beq.n	800c5fe <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c5a6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c5aa:	d820      	bhi.n	800c5ee <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c5ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c5b0:	d012      	beq.n	800c5d8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800c5b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c5b6:	d81a      	bhi.n	800c5ee <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d022      	beq.n	800c602 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c5bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c5c0:	d115      	bne.n	800c5ee <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c5c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5c6:	3308      	adds	r3, #8
 800c5c8:	2100      	movs	r1, #0
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f001 fbf6 	bl	800ddbc <RCCEx_PLL2_Config>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c5d6:	e015      	b.n	800c604 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c5d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5dc:	3328      	adds	r3, #40	; 0x28
 800c5de:	2102      	movs	r1, #2
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f001 fc9d 	bl	800df20 <RCCEx_PLL3_Config>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c5ec:	e00a      	b.n	800c604 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c5f4:	e006      	b.n	800c604 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c5f6:	bf00      	nop
 800c5f8:	e004      	b.n	800c604 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c5fa:	bf00      	nop
 800c5fc:	e002      	b.n	800c604 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c5fe:	bf00      	nop
 800c600:	e000      	b.n	800c604 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c602:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c604:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d10b      	bne.n	800c624 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c60c:	4ba0      	ldr	r3, [pc, #640]	; (800c890 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c60e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c610:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800c614:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c618:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c61c:	4a9c      	ldr	r2, [pc, #624]	; (800c890 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c61e:	430b      	orrs	r3, r1
 800c620:	6593      	str	r3, [r2, #88]	; 0x58
 800c622:	e003      	b.n	800c62c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c624:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c628:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800c62c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c634:	f002 0308 	and.w	r3, r2, #8
 800c638:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c63c:	2300      	movs	r3, #0
 800c63e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c642:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c646:	460b      	mov	r3, r1
 800c648:	4313      	orrs	r3, r2
 800c64a:	d01e      	beq.n	800c68a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800c64c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c650:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c658:	d10c      	bne.n	800c674 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c65a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c65e:	3328      	adds	r3, #40	; 0x28
 800c660:	2102      	movs	r1, #2
 800c662:	4618      	mov	r0, r3
 800c664:	f001 fc5c 	bl	800df20 <RCCEx_PLL3_Config>
 800c668:	4603      	mov	r3, r0
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d002      	beq.n	800c674 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800c66e:	2301      	movs	r3, #1
 800c670:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800c674:	4b86      	ldr	r3, [pc, #536]	; (800c890 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c678:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c67c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c680:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c684:	4a82      	ldr	r2, [pc, #520]	; (800c890 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c686:	430b      	orrs	r3, r1
 800c688:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c68a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c692:	f002 0310 	and.w	r3, r2, #16
 800c696:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c69a:	2300      	movs	r3, #0
 800c69c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c6a0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c6a4:	460b      	mov	r3, r1
 800c6a6:	4313      	orrs	r3, r2
 800c6a8:	d01e      	beq.n	800c6e8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c6aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c6b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6b6:	d10c      	bne.n	800c6d2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c6b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6bc:	3328      	adds	r3, #40	; 0x28
 800c6be:	2102      	movs	r1, #2
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f001 fc2d 	bl	800df20 <RCCEx_PLL3_Config>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d002      	beq.n	800c6d2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c6d2:	4b6f      	ldr	r3, [pc, #444]	; (800c890 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c6d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c6da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c6e2:	4a6b      	ldr	r2, [pc, #428]	; (800c890 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c6e4:	430b      	orrs	r3, r1
 800c6e6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c6e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c6f4:	67bb      	str	r3, [r7, #120]	; 0x78
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c6fa:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c6fe:	460b      	mov	r3, r1
 800c700:	4313      	orrs	r3, r2
 800c702:	d03e      	beq.n	800c782 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c704:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c708:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c70c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c710:	d022      	beq.n	800c758 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c712:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c716:	d81b      	bhi.n	800c750 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d003      	beq.n	800c724 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800c71c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c720:	d00b      	beq.n	800c73a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800c722:	e015      	b.n	800c750 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c724:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c728:	3308      	adds	r3, #8
 800c72a:	2100      	movs	r1, #0
 800c72c:	4618      	mov	r0, r3
 800c72e:	f001 fb45 	bl	800ddbc <RCCEx_PLL2_Config>
 800c732:	4603      	mov	r3, r0
 800c734:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c738:	e00f      	b.n	800c75a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c73a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c73e:	3328      	adds	r3, #40	; 0x28
 800c740:	2102      	movs	r1, #2
 800c742:	4618      	mov	r0, r3
 800c744:	f001 fbec 	bl	800df20 <RCCEx_PLL3_Config>
 800c748:	4603      	mov	r3, r0
 800c74a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c74e:	e004      	b.n	800c75a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c750:	2301      	movs	r3, #1
 800c752:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c756:	e000      	b.n	800c75a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800c758:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c75a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d10b      	bne.n	800c77a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c762:	4b4b      	ldr	r3, [pc, #300]	; (800c890 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c766:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c76a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c76e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c772:	4a47      	ldr	r2, [pc, #284]	; (800c890 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c774:	430b      	orrs	r3, r1
 800c776:	6593      	str	r3, [r2, #88]	; 0x58
 800c778:	e003      	b.n	800c782 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c77a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c77e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c782:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c78a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c78e:	673b      	str	r3, [r7, #112]	; 0x70
 800c790:	2300      	movs	r3, #0
 800c792:	677b      	str	r3, [r7, #116]	; 0x74
 800c794:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c798:	460b      	mov	r3, r1
 800c79a:	4313      	orrs	r3, r2
 800c79c:	d03b      	beq.n	800c816 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c79e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c7a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c7aa:	d01f      	beq.n	800c7ec <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c7ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c7b0:	d818      	bhi.n	800c7e4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800c7b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c7b6:	d003      	beq.n	800c7c0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800c7b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c7bc:	d007      	beq.n	800c7ce <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800c7be:	e011      	b.n	800c7e4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c7c0:	4b33      	ldr	r3, [pc, #204]	; (800c890 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c7c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7c4:	4a32      	ldr	r2, [pc, #200]	; (800c890 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c7c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c7ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c7cc:	e00f      	b.n	800c7ee <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c7ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7d2:	3328      	adds	r3, #40	; 0x28
 800c7d4:	2101      	movs	r1, #1
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f001 fba2 	bl	800df20 <RCCEx_PLL3_Config>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800c7e2:	e004      	b.n	800c7ee <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c7ea:	e000      	b.n	800c7ee <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800c7ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c7ee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d10b      	bne.n	800c80e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c7f6:	4b26      	ldr	r3, [pc, #152]	; (800c890 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c7f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7fa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c7fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c802:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c806:	4a22      	ldr	r2, [pc, #136]	; (800c890 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c808:	430b      	orrs	r3, r1
 800c80a:	6553      	str	r3, [r2, #84]	; 0x54
 800c80c:	e003      	b.n	800c816 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c80e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c812:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c816:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c81e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c822:	66bb      	str	r3, [r7, #104]	; 0x68
 800c824:	2300      	movs	r3, #0
 800c826:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c828:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c82c:	460b      	mov	r3, r1
 800c82e:	4313      	orrs	r3, r2
 800c830:	d034      	beq.n	800c89c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c832:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d003      	beq.n	800c844 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800c83c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c840:	d007      	beq.n	800c852 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800c842:	e011      	b.n	800c868 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c844:	4b12      	ldr	r3, [pc, #72]	; (800c890 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c848:	4a11      	ldr	r2, [pc, #68]	; (800c890 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c84a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c84e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c850:	e00e      	b.n	800c870 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c852:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c856:	3308      	adds	r3, #8
 800c858:	2102      	movs	r1, #2
 800c85a:	4618      	mov	r0, r3
 800c85c:	f001 faae 	bl	800ddbc <RCCEx_PLL2_Config>
 800c860:	4603      	mov	r3, r0
 800c862:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c866:	e003      	b.n	800c870 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800c868:	2301      	movs	r3, #1
 800c86a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c86e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c870:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c874:	2b00      	cmp	r3, #0
 800c876:	d10d      	bne.n	800c894 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c878:	4b05      	ldr	r3, [pc, #20]	; (800c890 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c87a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c87c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c886:	4a02      	ldr	r2, [pc, #8]	; (800c890 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c888:	430b      	orrs	r3, r1
 800c88a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c88c:	e006      	b.n	800c89c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800c88e:	bf00      	nop
 800c890:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c894:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c898:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c89c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c8a8:	663b      	str	r3, [r7, #96]	; 0x60
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	667b      	str	r3, [r7, #100]	; 0x64
 800c8ae:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c8b2:	460b      	mov	r3, r1
 800c8b4:	4313      	orrs	r3, r2
 800c8b6:	d00c      	beq.n	800c8d2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c8b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8bc:	3328      	adds	r3, #40	; 0x28
 800c8be:	2102      	movs	r1, #2
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f001 fb2d 	bl	800df20 <RCCEx_PLL3_Config>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d002      	beq.n	800c8d2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c8d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8da:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c8de:	65bb      	str	r3, [r7, #88]	; 0x58
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c8e4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c8e8:	460b      	mov	r3, r1
 800c8ea:	4313      	orrs	r3, r2
 800c8ec:	d036      	beq.n	800c95c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c8ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c8f8:	d018      	beq.n	800c92c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800c8fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c8fe:	d811      	bhi.n	800c924 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c900:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c904:	d014      	beq.n	800c930 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800c906:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c90a:	d80b      	bhi.n	800c924 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d011      	beq.n	800c934 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800c910:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c914:	d106      	bne.n	800c924 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c916:	4bb7      	ldr	r3, [pc, #732]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c91a:	4ab6      	ldr	r2, [pc, #728]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c91c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c920:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c922:	e008      	b.n	800c936 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c924:	2301      	movs	r3, #1
 800c926:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c92a:	e004      	b.n	800c936 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c92c:	bf00      	nop
 800c92e:	e002      	b.n	800c936 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c930:	bf00      	nop
 800c932:	e000      	b.n	800c936 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c934:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c936:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d10a      	bne.n	800c954 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c93e:	4bad      	ldr	r3, [pc, #692]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c942:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c946:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c94a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c94c:	4aa9      	ldr	r2, [pc, #676]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c94e:	430b      	orrs	r3, r1
 800c950:	6553      	str	r3, [r2, #84]	; 0x54
 800c952:	e003      	b.n	800c95c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c954:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c958:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c95c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c964:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c968:	653b      	str	r3, [r7, #80]	; 0x50
 800c96a:	2300      	movs	r3, #0
 800c96c:	657b      	str	r3, [r7, #84]	; 0x54
 800c96e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c972:	460b      	mov	r3, r1
 800c974:	4313      	orrs	r3, r2
 800c976:	d009      	beq.n	800c98c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c978:	4b9e      	ldr	r3, [pc, #632]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c97a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c97c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c980:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c986:	4a9b      	ldr	r2, [pc, #620]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c988:	430b      	orrs	r3, r1
 800c98a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c98c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c994:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c998:	64bb      	str	r3, [r7, #72]	; 0x48
 800c99a:	2300      	movs	r3, #0
 800c99c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c99e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c9a2:	460b      	mov	r3, r1
 800c9a4:	4313      	orrs	r3, r2
 800c9a6:	d009      	beq.n	800c9bc <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c9a8:	4b92      	ldr	r3, [pc, #584]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c9aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9ac:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c9b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c9b6:	4a8f      	ldr	r2, [pc, #572]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c9b8:	430b      	orrs	r3, r1
 800c9ba:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c9bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c4:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c9c8:	643b      	str	r3, [r7, #64]	; 0x40
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	647b      	str	r3, [r7, #68]	; 0x44
 800c9ce:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c9d2:	460b      	mov	r3, r1
 800c9d4:	4313      	orrs	r3, r2
 800c9d6:	d00e      	beq.n	800c9f6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c9d8:	4b86      	ldr	r3, [pc, #536]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c9da:	691b      	ldr	r3, [r3, #16]
 800c9dc:	4a85      	ldr	r2, [pc, #532]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c9de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c9e2:	6113      	str	r3, [r2, #16]
 800c9e4:	4b83      	ldr	r3, [pc, #524]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c9e6:	6919      	ldr	r1, [r3, #16]
 800c9e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c9f0:	4a80      	ldr	r2, [pc, #512]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c9f2:	430b      	orrs	r3, r1
 800c9f4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c9f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9fe:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800ca02:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca04:	2300      	movs	r3, #0
 800ca06:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca08:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800ca0c:	460b      	mov	r3, r1
 800ca0e:	4313      	orrs	r3, r2
 800ca10:	d009      	beq.n	800ca26 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ca12:	4b78      	ldr	r3, [pc, #480]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca16:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800ca1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca20:	4a74      	ldr	r2, [pc, #464]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca22:	430b      	orrs	r3, r1
 800ca24:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ca26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca2e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800ca32:	633b      	str	r3, [r7, #48]	; 0x30
 800ca34:	2300      	movs	r3, #0
 800ca36:	637b      	str	r3, [r7, #52]	; 0x34
 800ca38:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800ca3c:	460b      	mov	r3, r1
 800ca3e:	4313      	orrs	r3, r2
 800ca40:	d00a      	beq.n	800ca58 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ca42:	4b6c      	ldr	r3, [pc, #432]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca46:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800ca4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca52:	4a68      	ldr	r2, [pc, #416]	; (800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca54:	430b      	orrs	r3, r1
 800ca56:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ca58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca60:	2100      	movs	r1, #0
 800ca62:	62b9      	str	r1, [r7, #40]	; 0x28
 800ca64:	f003 0301 	and.w	r3, r3, #1
 800ca68:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca6a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800ca6e:	460b      	mov	r3, r1
 800ca70:	4313      	orrs	r3, r2
 800ca72:	d011      	beq.n	800ca98 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ca74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca78:	3308      	adds	r3, #8
 800ca7a:	2100      	movs	r1, #0
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	f001 f99d 	bl	800ddbc <RCCEx_PLL2_Config>
 800ca82:	4603      	mov	r3, r0
 800ca84:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ca88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d003      	beq.n	800ca98 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ca94:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ca98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa0:	2100      	movs	r1, #0
 800caa2:	6239      	str	r1, [r7, #32]
 800caa4:	f003 0302 	and.w	r3, r3, #2
 800caa8:	627b      	str	r3, [r7, #36]	; 0x24
 800caaa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800caae:	460b      	mov	r3, r1
 800cab0:	4313      	orrs	r3, r2
 800cab2:	d011      	beq.n	800cad8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cab8:	3308      	adds	r3, #8
 800caba:	2101      	movs	r1, #1
 800cabc:	4618      	mov	r0, r3
 800cabe:	f001 f97d 	bl	800ddbc <RCCEx_PLL2_Config>
 800cac2:	4603      	mov	r3, r0
 800cac4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800cac8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d003      	beq.n	800cad8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cad0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cad4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800cad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae0:	2100      	movs	r1, #0
 800cae2:	61b9      	str	r1, [r7, #24]
 800cae4:	f003 0304 	and.w	r3, r3, #4
 800cae8:	61fb      	str	r3, [r7, #28]
 800caea:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800caee:	460b      	mov	r3, r1
 800caf0:	4313      	orrs	r3, r2
 800caf2:	d011      	beq.n	800cb18 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800caf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800caf8:	3308      	adds	r3, #8
 800cafa:	2102      	movs	r1, #2
 800cafc:	4618      	mov	r0, r3
 800cafe:	f001 f95d 	bl	800ddbc <RCCEx_PLL2_Config>
 800cb02:	4603      	mov	r3, r0
 800cb04:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800cb08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d003      	beq.n	800cb18 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb10:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cb14:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800cb18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb20:	2100      	movs	r1, #0
 800cb22:	6139      	str	r1, [r7, #16]
 800cb24:	f003 0308 	and.w	r3, r3, #8
 800cb28:	617b      	str	r3, [r7, #20]
 800cb2a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800cb2e:	460b      	mov	r3, r1
 800cb30:	4313      	orrs	r3, r2
 800cb32:	d011      	beq.n	800cb58 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cb34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb38:	3328      	adds	r3, #40	; 0x28
 800cb3a:	2100      	movs	r1, #0
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f001 f9ef 	bl	800df20 <RCCEx_PLL3_Config>
 800cb42:	4603      	mov	r3, r0
 800cb44:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800cb48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d003      	beq.n	800cb58 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cb54:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800cb58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb60:	2100      	movs	r1, #0
 800cb62:	60b9      	str	r1, [r7, #8]
 800cb64:	f003 0310 	and.w	r3, r3, #16
 800cb68:	60fb      	str	r3, [r7, #12]
 800cb6a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800cb6e:	460b      	mov	r3, r1
 800cb70:	4313      	orrs	r3, r2
 800cb72:	d011      	beq.n	800cb98 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cb74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb78:	3328      	adds	r3, #40	; 0x28
 800cb7a:	2101      	movs	r1, #1
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	f001 f9cf 	bl	800df20 <RCCEx_PLL3_Config>
 800cb82:	4603      	mov	r3, r0
 800cb84:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800cb88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d003      	beq.n	800cb98 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cb94:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800cb98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba0:	2100      	movs	r1, #0
 800cba2:	6039      	str	r1, [r7, #0]
 800cba4:	f003 0320 	and.w	r3, r3, #32
 800cba8:	607b      	str	r3, [r7, #4]
 800cbaa:	e9d7 1200 	ldrd	r1, r2, [r7]
 800cbae:	460b      	mov	r3, r1
 800cbb0:	4313      	orrs	r3, r2
 800cbb2:	d011      	beq.n	800cbd8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cbb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cbb8:	3328      	adds	r3, #40	; 0x28
 800cbba:	2102      	movs	r1, #2
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	f001 f9af 	bl	800df20 <RCCEx_PLL3_Config>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800cbc8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d003      	beq.n	800cbd8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cbd0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800cbd4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800cbd8:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d101      	bne.n	800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	e000      	b.n	800cbe6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800cbe4:	2301      	movs	r3, #1
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800cbec:	46bd      	mov	sp, r7
 800cbee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cbf2:	bf00      	nop
 800cbf4:	58024400 	.word	0x58024400

0800cbf8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b090      	sub	sp, #64	; 0x40
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800cc02:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc06:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800cc0a:	430b      	orrs	r3, r1
 800cc0c:	f040 8094 	bne.w	800cd38 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800cc10:	4b9b      	ldr	r3, [pc, #620]	; (800ce80 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cc12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc14:	f003 0307 	and.w	r3, r3, #7
 800cc18:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800cc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc1c:	2b04      	cmp	r3, #4
 800cc1e:	f200 8087 	bhi.w	800cd30 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800cc22:	a201      	add	r2, pc, #4	; (adr r2, 800cc28 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800cc24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc28:	0800cc3d 	.word	0x0800cc3d
 800cc2c:	0800cc65 	.word	0x0800cc65
 800cc30:	0800cc8d 	.word	0x0800cc8d
 800cc34:	0800cd29 	.word	0x0800cd29
 800cc38:	0800ccb5 	.word	0x0800ccb5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cc3c:	4b90      	ldr	r3, [pc, #576]	; (800ce80 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc48:	d108      	bne.n	800cc5c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cc4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f000 ff62 	bl	800db18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cc54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc58:	f000 bc93 	b.w	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc60:	f000 bc8f 	b.w	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cc64:	4b86      	ldr	r3, [pc, #536]	; (800ce80 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cc70:	d108      	bne.n	800cc84 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc72:	f107 0318 	add.w	r3, r7, #24
 800cc76:	4618      	mov	r0, r3
 800cc78:	f000 fca6 	bl	800d5c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cc7c:	69bb      	ldr	r3, [r7, #24]
 800cc7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc80:	f000 bc7f 	b.w	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc84:	2300      	movs	r3, #0
 800cc86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc88:	f000 bc7b 	b.w	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cc8c:	4b7c      	ldr	r3, [pc, #496]	; (800ce80 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc98:	d108      	bne.n	800ccac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc9a:	f107 030c 	add.w	r3, r7, #12
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f000 fde6 	bl	800d870 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cca8:	f000 bc6b 	b.w	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ccac:	2300      	movs	r3, #0
 800ccae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccb0:	f000 bc67 	b.w	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ccb4:	4b72      	ldr	r3, [pc, #456]	; (800ce80 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ccb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ccb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ccbc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ccbe:	4b70      	ldr	r3, [pc, #448]	; (800ce80 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	f003 0304 	and.w	r3, r3, #4
 800ccc6:	2b04      	cmp	r3, #4
 800ccc8:	d10c      	bne.n	800cce4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800ccca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d109      	bne.n	800cce4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ccd0:	4b6b      	ldr	r3, [pc, #428]	; (800ce80 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	08db      	lsrs	r3, r3, #3
 800ccd6:	f003 0303 	and.w	r3, r3, #3
 800ccda:	4a6a      	ldr	r2, [pc, #424]	; (800ce84 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800ccdc:	fa22 f303 	lsr.w	r3, r2, r3
 800cce0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cce2:	e01f      	b.n	800cd24 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cce4:	4b66      	ldr	r3, [pc, #408]	; (800ce80 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ccec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ccf0:	d106      	bne.n	800cd00 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800ccf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccf4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ccf8:	d102      	bne.n	800cd00 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ccfa:	4b63      	ldr	r3, [pc, #396]	; (800ce88 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800ccfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ccfe:	e011      	b.n	800cd24 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cd00:	4b5f      	ldr	r3, [pc, #380]	; (800ce80 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd0c:	d106      	bne.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800cd0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd14:	d102      	bne.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cd16:	4b5d      	ldr	r3, [pc, #372]	; (800ce8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cd18:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd1a:	e003      	b.n	800cd24 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cd20:	f000 bc2f 	b.w	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cd24:	f000 bc2d 	b.w	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cd28:	4b59      	ldr	r3, [pc, #356]	; (800ce90 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800cd2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd2c:	f000 bc29 	b.w	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800cd30:	2300      	movs	r3, #0
 800cd32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd34:	f000 bc25 	b.w	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800cd38:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd3c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800cd40:	430b      	orrs	r3, r1
 800cd42:	f040 80a7 	bne.w	800ce94 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800cd46:	4b4e      	ldr	r3, [pc, #312]	; (800ce80 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd4a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800cd4e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800cd50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cd56:	d054      	beq.n	800ce02 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800cd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cd5e:	f200 808b 	bhi.w	800ce78 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd64:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cd68:	f000 8083 	beq.w	800ce72 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800cd6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd6e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cd72:	f200 8081 	bhi.w	800ce78 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cd76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cd7c:	d02f      	beq.n	800cdde <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800cd7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cd84:	d878      	bhi.n	800ce78 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d004      	beq.n	800cd96 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800cd8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cd92:	d012      	beq.n	800cdba <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800cd94:	e070      	b.n	800ce78 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cd96:	4b3a      	ldr	r3, [pc, #232]	; (800ce80 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cda2:	d107      	bne.n	800cdb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cda4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f000 feb5 	bl	800db18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cdae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdb2:	e3e6      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdb8:	e3e3      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cdba:	4b31      	ldr	r3, [pc, #196]	; (800ce80 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cdc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cdc6:	d107      	bne.n	800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cdc8:	f107 0318 	add.w	r3, r7, #24
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f000 fbfb 	bl	800d5c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cdd2:	69bb      	ldr	r3, [r7, #24]
 800cdd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdd6:	e3d4      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cddc:	e3d1      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cdde:	4b28      	ldr	r3, [pc, #160]	; (800ce80 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cde6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cdea:	d107      	bne.n	800cdfc <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cdec:	f107 030c 	add.w	r3, r7, #12
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f000 fd3d 	bl	800d870 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdfa:	e3c2      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce00:	e3bf      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ce02:	4b1f      	ldr	r3, [pc, #124]	; (800ce80 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ce04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ce0a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ce0c:	4b1c      	ldr	r3, [pc, #112]	; (800ce80 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	f003 0304 	and.w	r3, r3, #4
 800ce14:	2b04      	cmp	r3, #4
 800ce16:	d10c      	bne.n	800ce32 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800ce18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d109      	bne.n	800ce32 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce1e:	4b18      	ldr	r3, [pc, #96]	; (800ce80 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	08db      	lsrs	r3, r3, #3
 800ce24:	f003 0303 	and.w	r3, r3, #3
 800ce28:	4a16      	ldr	r2, [pc, #88]	; (800ce84 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800ce2a:	fa22 f303 	lsr.w	r3, r2, r3
 800ce2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce30:	e01e      	b.n	800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ce32:	4b13      	ldr	r3, [pc, #76]	; (800ce80 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce3e:	d106      	bne.n	800ce4e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800ce40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ce46:	d102      	bne.n	800ce4e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ce48:	4b0f      	ldr	r3, [pc, #60]	; (800ce88 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800ce4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce4c:	e010      	b.n	800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ce4e:	4b0c      	ldr	r3, [pc, #48]	; (800ce80 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ce5a:	d106      	bne.n	800ce6a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800ce5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce62:	d102      	bne.n	800ce6a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ce64:	4b09      	ldr	r3, [pc, #36]	; (800ce8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ce66:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce68:	e002      	b.n	800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ce6e:	e388      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ce70:	e387      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ce72:	4b07      	ldr	r3, [pc, #28]	; (800ce90 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ce74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce76:	e384      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ce78:	2300      	movs	r3, #0
 800ce7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce7c:	e381      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ce7e:	bf00      	nop
 800ce80:	58024400 	.word	0x58024400
 800ce84:	03d09000 	.word	0x03d09000
 800ce88:	003d0900 	.word	0x003d0900
 800ce8c:	02faf080 	.word	0x02faf080
 800ce90:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ce94:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce98:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800ce9c:	430b      	orrs	r3, r1
 800ce9e:	f040 809c 	bne.w	800cfda <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800cea2:	4b9e      	ldr	r3, [pc, #632]	; (800d11c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cea6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800ceaa:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ceac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ceb2:	d054      	beq.n	800cf5e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800ceb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ceba:	f200 808b 	bhi.w	800cfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800cebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cec0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cec4:	f000 8083 	beq.w	800cfce <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800cec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cece:	f200 8081 	bhi.w	800cfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ced2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ced4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ced8:	d02f      	beq.n	800cf3a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800ceda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cedc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cee0:	d878      	bhi.n	800cfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800cee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d004      	beq.n	800cef2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800cee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ceee:	d012      	beq.n	800cf16 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800cef0:	e070      	b.n	800cfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cef2:	4b8a      	ldr	r3, [pc, #552]	; (800d11c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cefa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cefe:	d107      	bne.n	800cf10 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cf00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cf04:	4618      	mov	r0, r3
 800cf06:	f000 fe07 	bl	800db18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cf0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf0e:	e338      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf10:	2300      	movs	r3, #0
 800cf12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf14:	e335      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cf16:	4b81      	ldr	r3, [pc, #516]	; (800d11c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cf22:	d107      	bne.n	800cf34 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf24:	f107 0318 	add.w	r3, r7, #24
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f000 fb4d 	bl	800d5c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cf2e:	69bb      	ldr	r3, [r7, #24]
 800cf30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf32:	e326      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf34:	2300      	movs	r3, #0
 800cf36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf38:	e323      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cf3a:	4b78      	ldr	r3, [pc, #480]	; (800d11c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf46:	d107      	bne.n	800cf58 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf48:	f107 030c 	add.w	r3, r7, #12
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	f000 fc8f 	bl	800d870 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf56:	e314      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf58:	2300      	movs	r3, #0
 800cf5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf5c:	e311      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cf5e:	4b6f      	ldr	r3, [pc, #444]	; (800d11c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf62:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cf66:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cf68:	4b6c      	ldr	r3, [pc, #432]	; (800d11c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	f003 0304 	and.w	r3, r3, #4
 800cf70:	2b04      	cmp	r3, #4
 800cf72:	d10c      	bne.n	800cf8e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800cf74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d109      	bne.n	800cf8e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf7a:	4b68      	ldr	r3, [pc, #416]	; (800d11c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	08db      	lsrs	r3, r3, #3
 800cf80:	f003 0303 	and.w	r3, r3, #3
 800cf84:	4a66      	ldr	r2, [pc, #408]	; (800d120 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800cf86:	fa22 f303 	lsr.w	r3, r2, r3
 800cf8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf8c:	e01e      	b.n	800cfcc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cf8e:	4b63      	ldr	r3, [pc, #396]	; (800d11c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf9a:	d106      	bne.n	800cfaa <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800cf9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cfa2:	d102      	bne.n	800cfaa <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cfa4:	4b5f      	ldr	r3, [pc, #380]	; (800d124 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800cfa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cfa8:	e010      	b.n	800cfcc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cfaa:	4b5c      	ldr	r3, [pc, #368]	; (800d11c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cfb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cfb6:	d106      	bne.n	800cfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800cfb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cfbe:	d102      	bne.n	800cfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cfc0:	4b59      	ldr	r3, [pc, #356]	; (800d128 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cfc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cfc4:	e002      	b.n	800cfcc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cfca:	e2da      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cfcc:	e2d9      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cfce:	4b57      	ldr	r3, [pc, #348]	; (800d12c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800cfd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfd2:	e2d6      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfd8:	e2d3      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800cfda:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cfde:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800cfe2:	430b      	orrs	r3, r1
 800cfe4:	f040 80a7 	bne.w	800d136 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800cfe8:	4b4c      	ldr	r3, [pc, #304]	; (800d11c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cfea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfec:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800cff0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cff8:	d055      	beq.n	800d0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800cffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cffc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d000:	f200 8096 	bhi.w	800d130 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d006:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d00a:	f000 8084 	beq.w	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800d00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d010:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d014:	f200 808c 	bhi.w	800d130 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d01a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d01e:	d030      	beq.n	800d082 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800d020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d022:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d026:	f200 8083 	bhi.w	800d130 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d004      	beq.n	800d03a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800d030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d036:	d012      	beq.n	800d05e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800d038:	e07a      	b.n	800d130 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d03a:	4b38      	ldr	r3, [pc, #224]	; (800d11c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d042:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d046:	d107      	bne.n	800d058 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d048:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d04c:	4618      	mov	r0, r3
 800d04e:	f000 fd63 	bl	800db18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d054:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d056:	e294      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d058:	2300      	movs	r3, #0
 800d05a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d05c:	e291      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d05e:	4b2f      	ldr	r3, [pc, #188]	; (800d11c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d066:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d06a:	d107      	bne.n	800d07c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d06c:	f107 0318 	add.w	r3, r7, #24
 800d070:	4618      	mov	r0, r3
 800d072:	f000 faa9 	bl	800d5c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d076:	69bb      	ldr	r3, [r7, #24]
 800d078:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d07a:	e282      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d07c:	2300      	movs	r3, #0
 800d07e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d080:	e27f      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d082:	4b26      	ldr	r3, [pc, #152]	; (800d11c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d08a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d08e:	d107      	bne.n	800d0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d090:	f107 030c 	add.w	r3, r7, #12
 800d094:	4618      	mov	r0, r3
 800d096:	f000 fbeb 	bl	800d870 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d09e:	e270      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0a4:	e26d      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d0a6:	4b1d      	ldr	r3, [pc, #116]	; (800d11c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d0a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d0ae:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d0b0:	4b1a      	ldr	r3, [pc, #104]	; (800d11c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	f003 0304 	and.w	r3, r3, #4
 800d0b8:	2b04      	cmp	r3, #4
 800d0ba:	d10c      	bne.n	800d0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800d0bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d109      	bne.n	800d0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d0c2:	4b16      	ldr	r3, [pc, #88]	; (800d11c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	08db      	lsrs	r3, r3, #3
 800d0c8:	f003 0303 	and.w	r3, r3, #3
 800d0cc:	4a14      	ldr	r2, [pc, #80]	; (800d120 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800d0ce:	fa22 f303 	lsr.w	r3, r2, r3
 800d0d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d0d4:	e01e      	b.n	800d114 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d0d6:	4b11      	ldr	r3, [pc, #68]	; (800d11c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d0e2:	d106      	bne.n	800d0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800d0e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d0ea:	d102      	bne.n	800d0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d0ec:	4b0d      	ldr	r3, [pc, #52]	; (800d124 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800d0ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d0f0:	e010      	b.n	800d114 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d0f2:	4b0a      	ldr	r3, [pc, #40]	; (800d11c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d0fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d0fe:	d106      	bne.n	800d10e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800d100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d102:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d106:	d102      	bne.n	800d10e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d108:	4b07      	ldr	r3, [pc, #28]	; (800d128 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d10a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d10c:	e002      	b.n	800d114 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d10e:	2300      	movs	r3, #0
 800d110:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800d112:	e236      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d114:	e235      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d116:	4b05      	ldr	r3, [pc, #20]	; (800d12c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800d118:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d11a:	e232      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d11c:	58024400 	.word	0x58024400
 800d120:	03d09000 	.word	0x03d09000
 800d124:	003d0900 	.word	0x003d0900
 800d128:	02faf080 	.word	0x02faf080
 800d12c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800d130:	2300      	movs	r3, #0
 800d132:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d134:	e225      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800d136:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d13a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800d13e:	430b      	orrs	r3, r1
 800d140:	f040 8085 	bne.w	800d24e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800d144:	4b9c      	ldr	r3, [pc, #624]	; (800d3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d148:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800d14c:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800d14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d150:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d154:	d06b      	beq.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800d156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d158:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d15c:	d874      	bhi.n	800d248 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d160:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d164:	d056      	beq.n	800d214 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800d166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d168:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d16c:	d86c      	bhi.n	800d248 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d170:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d174:	d03b      	beq.n	800d1ee <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800d176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d178:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d17c:	d864      	bhi.n	800d248 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d180:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d184:	d021      	beq.n	800d1ca <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800d186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d188:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d18c:	d85c      	bhi.n	800d248 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d190:	2b00      	cmp	r3, #0
 800d192:	d004      	beq.n	800d19e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800d194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d19a:	d004      	beq.n	800d1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800d19c:	e054      	b.n	800d248 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800d19e:	f7fe fb5f 	bl	800b860 <HAL_RCC_GetPCLK1Freq>
 800d1a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d1a4:	e1ed      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d1a6:	4b84      	ldr	r3, [pc, #528]	; (800d3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d1ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d1b2:	d107      	bne.n	800d1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d1b4:	f107 0318 	add.w	r3, r7, #24
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f000 fa05 	bl	800d5c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d1be:	69fb      	ldr	r3, [r7, #28]
 800d1c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1c2:	e1de      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1c8:	e1db      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d1ca:	4b7b      	ldr	r3, [pc, #492]	; (800d3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d1d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d1d6:	d107      	bne.n	800d1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d1d8:	f107 030c 	add.w	r3, r7, #12
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f000 fb47 	bl	800d870 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d1e2:	693b      	ldr	r3, [r7, #16]
 800d1e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1e6:	e1cc      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1ec:	e1c9      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d1ee:	4b72      	ldr	r3, [pc, #456]	; (800d3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	f003 0304 	and.w	r3, r3, #4
 800d1f6:	2b04      	cmp	r3, #4
 800d1f8:	d109      	bne.n	800d20e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d1fa:	4b6f      	ldr	r3, [pc, #444]	; (800d3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	08db      	lsrs	r3, r3, #3
 800d200:	f003 0303 	and.w	r3, r3, #3
 800d204:	4a6d      	ldr	r2, [pc, #436]	; (800d3bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800d206:	fa22 f303 	lsr.w	r3, r2, r3
 800d20a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d20c:	e1b9      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d20e:	2300      	movs	r3, #0
 800d210:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d212:	e1b6      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d214:	4b68      	ldr	r3, [pc, #416]	; (800d3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d21c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d220:	d102      	bne.n	800d228 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800d222:	4b67      	ldr	r3, [pc, #412]	; (800d3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d224:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d226:	e1ac      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d228:	2300      	movs	r3, #0
 800d22a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d22c:	e1a9      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d22e:	4b62      	ldr	r3, [pc, #392]	; (800d3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d236:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d23a:	d102      	bne.n	800d242 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800d23c:	4b61      	ldr	r3, [pc, #388]	; (800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d23e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d240:	e19f      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d242:	2300      	movs	r3, #0
 800d244:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d246:	e19c      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d248:	2300      	movs	r3, #0
 800d24a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d24c:	e199      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800d24e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d252:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800d256:	430b      	orrs	r3, r1
 800d258:	d173      	bne.n	800d342 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800d25a:	4b57      	ldr	r3, [pc, #348]	; (800d3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d25c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d25e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d262:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d266:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d26a:	d02f      	beq.n	800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800d26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d26e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d272:	d863      	bhi.n	800d33c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800d274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d276:	2b00      	cmp	r3, #0
 800d278:	d004      	beq.n	800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800d27a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d27c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d280:	d012      	beq.n	800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800d282:	e05b      	b.n	800d33c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d284:	4b4c      	ldr	r3, [pc, #304]	; (800d3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d28c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d290:	d107      	bne.n	800d2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d292:	f107 0318 	add.w	r3, r7, #24
 800d296:	4618      	mov	r0, r3
 800d298:	f000 f996 	bl	800d5c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d29c:	69bb      	ldr	r3, [r7, #24]
 800d29e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d2a0:	e16f      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2a6:	e16c      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d2a8:	4b43      	ldr	r3, [pc, #268]	; (800d3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d2b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d2b4:	d107      	bne.n	800d2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d2b6:	f107 030c 	add.w	r3, r7, #12
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f000 fad8 	bl	800d870 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800d2c0:	697b      	ldr	r3, [r7, #20]
 800d2c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d2c4:	e15d      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2ca:	e15a      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d2cc:	4b3a      	ldr	r3, [pc, #232]	; (800d3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d2ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d2d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d2d4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d2d6:	4b38      	ldr	r3, [pc, #224]	; (800d3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	f003 0304 	and.w	r3, r3, #4
 800d2de:	2b04      	cmp	r3, #4
 800d2e0:	d10c      	bne.n	800d2fc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800d2e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d109      	bne.n	800d2fc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d2e8:	4b33      	ldr	r3, [pc, #204]	; (800d3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	08db      	lsrs	r3, r3, #3
 800d2ee:	f003 0303 	and.w	r3, r3, #3
 800d2f2:	4a32      	ldr	r2, [pc, #200]	; (800d3bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800d2f4:	fa22 f303 	lsr.w	r3, r2, r3
 800d2f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d2fa:	e01e      	b.n	800d33a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d2fc:	4b2e      	ldr	r3, [pc, #184]	; (800d3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d304:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d308:	d106      	bne.n	800d318 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800d30a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d30c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d310:	d102      	bne.n	800d318 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d312:	4b2b      	ldr	r3, [pc, #172]	; (800d3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d314:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d316:	e010      	b.n	800d33a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d318:	4b27      	ldr	r3, [pc, #156]	; (800d3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d320:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d324:	d106      	bne.n	800d334 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800d326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d328:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d32c:	d102      	bne.n	800d334 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d32e:	4b25      	ldr	r3, [pc, #148]	; (800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d330:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d332:	e002      	b.n	800d33a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d334:	2300      	movs	r3, #0
 800d336:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800d338:	e123      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d33a:	e122      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d33c:	2300      	movs	r3, #0
 800d33e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d340:	e11f      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d342:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d346:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800d34a:	430b      	orrs	r3, r1
 800d34c:	d13c      	bne.n	800d3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800d34e:	4b1a      	ldr	r3, [pc, #104]	; (800d3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d356:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d004      	beq.n	800d368 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800d35e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d364:	d012      	beq.n	800d38c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800d366:	e023      	b.n	800d3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d368:	4b13      	ldr	r3, [pc, #76]	; (800d3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d370:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d374:	d107      	bne.n	800d386 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d37a:	4618      	mov	r0, r3
 800d37c:	f000 fbcc 	bl	800db18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d382:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d384:	e0fd      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d386:	2300      	movs	r3, #0
 800d388:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d38a:	e0fa      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d38c:	4b0a      	ldr	r3, [pc, #40]	; (800d3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d394:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d398:	d107      	bne.n	800d3aa <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d39a:	f107 0318 	add.w	r3, r7, #24
 800d39e:	4618      	mov	r0, r3
 800d3a0:	f000 f912 	bl	800d5c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d3a4:	6a3b      	ldr	r3, [r7, #32]
 800d3a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d3a8:	e0eb      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3ae:	e0e8      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3b4:	e0e5      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d3b6:	bf00      	nop
 800d3b8:	58024400 	.word	0x58024400
 800d3bc:	03d09000 	.word	0x03d09000
 800d3c0:	003d0900 	.word	0x003d0900
 800d3c4:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d3c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d3cc:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800d3d0:	430b      	orrs	r3, r1
 800d3d2:	f040 8085 	bne.w	800d4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800d3d6:	4b6d      	ldr	r3, [pc, #436]	; (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d3d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d3da:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800d3de:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d3e6:	d06b      	beq.n	800d4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800d3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d3ee:	d874      	bhi.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d3f6:	d056      	beq.n	800d4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800d3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d3fe:	d86c      	bhi.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d402:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d406:	d03b      	beq.n	800d480 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800d408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d40a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d40e:	d864      	bhi.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d412:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d416:	d021      	beq.n	800d45c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800d418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d41a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d41e:	d85c      	bhi.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d422:	2b00      	cmp	r3, #0
 800d424:	d004      	beq.n	800d430 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800d426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d428:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d42c:	d004      	beq.n	800d438 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800d42e:	e054      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d430:	f000 f8b4 	bl	800d59c <HAL_RCCEx_GetD3PCLK1Freq>
 800d434:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d436:	e0a4      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d438:	4b54      	ldr	r3, [pc, #336]	; (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d440:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d444:	d107      	bne.n	800d456 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d446:	f107 0318 	add.w	r3, r7, #24
 800d44a:	4618      	mov	r0, r3
 800d44c:	f000 f8bc 	bl	800d5c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d450:	69fb      	ldr	r3, [r7, #28]
 800d452:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d454:	e095      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d456:	2300      	movs	r3, #0
 800d458:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d45a:	e092      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d45c:	4b4b      	ldr	r3, [pc, #300]	; (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d468:	d107      	bne.n	800d47a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d46a:	f107 030c 	add.w	r3, r7, #12
 800d46e:	4618      	mov	r0, r3
 800d470:	f000 f9fe 	bl	800d870 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d474:	693b      	ldr	r3, [r7, #16]
 800d476:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d478:	e083      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d47a:	2300      	movs	r3, #0
 800d47c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d47e:	e080      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d480:	4b42      	ldr	r3, [pc, #264]	; (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	f003 0304 	and.w	r3, r3, #4
 800d488:	2b04      	cmp	r3, #4
 800d48a:	d109      	bne.n	800d4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d48c:	4b3f      	ldr	r3, [pc, #252]	; (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	08db      	lsrs	r3, r3, #3
 800d492:	f003 0303 	and.w	r3, r3, #3
 800d496:	4a3e      	ldr	r2, [pc, #248]	; (800d590 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800d498:	fa22 f303 	lsr.w	r3, r2, r3
 800d49c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d49e:	e070      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d4a4:	e06d      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d4a6:	4b39      	ldr	r3, [pc, #228]	; (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d4b2:	d102      	bne.n	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800d4b4:	4b37      	ldr	r3, [pc, #220]	; (800d594 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d4b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d4b8:	e063      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d4be:	e060      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d4c0:	4b32      	ldr	r3, [pc, #200]	; (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d4c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d4cc:	d102      	bne.n	800d4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800d4ce:	4b32      	ldr	r3, [pc, #200]	; (800d598 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d4d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d4d2:	e056      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d4d8:	e053      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d4de:	e050      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d4e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4e4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800d4e8:	430b      	orrs	r3, r1
 800d4ea:	d148      	bne.n	800d57e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d4ec:	4b27      	ldr	r3, [pc, #156]	; (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d4ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d4f4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d4fc:	d02a      	beq.n	800d554 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800d4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d500:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d504:	d838      	bhi.n	800d578 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800d506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d004      	beq.n	800d516 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800d50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d50e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d512:	d00d      	beq.n	800d530 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800d514:	e030      	b.n	800d578 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d516:	4b1d      	ldr	r3, [pc, #116]	; (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d51e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d522:	d102      	bne.n	800d52a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800d524:	4b1c      	ldr	r3, [pc, #112]	; (800d598 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d526:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d528:	e02b      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d52a:	2300      	movs	r3, #0
 800d52c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d52e:	e028      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d530:	4b16      	ldr	r3, [pc, #88]	; (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d538:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d53c:	d107      	bne.n	800d54e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d53e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d542:	4618      	mov	r0, r3
 800d544:	f000 fae8 	bl	800db18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d54a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d54c:	e019      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d54e:	2300      	movs	r3, #0
 800d550:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d552:	e016      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d554:	4b0d      	ldr	r3, [pc, #52]	; (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d55c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d560:	d107      	bne.n	800d572 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d562:	f107 0318 	add.w	r3, r7, #24
 800d566:	4618      	mov	r0, r3
 800d568:	f000 f82e 	bl	800d5c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d56c:	69fb      	ldr	r3, [r7, #28]
 800d56e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d570:	e007      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d572:	2300      	movs	r3, #0
 800d574:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d576:	e004      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d578:	2300      	movs	r3, #0
 800d57a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d57c:	e001      	b.n	800d582 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800d57e:	2300      	movs	r3, #0
 800d580:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800d582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d584:	4618      	mov	r0, r3
 800d586:	3740      	adds	r7, #64	; 0x40
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}
 800d58c:	58024400 	.word	0x58024400
 800d590:	03d09000 	.word	0x03d09000
 800d594:	003d0900 	.word	0x003d0900
 800d598:	02faf080 	.word	0x02faf080

0800d59c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d5a0:	f7fe f92e 	bl	800b800 <HAL_RCC_GetHCLKFreq>
 800d5a4:	4602      	mov	r2, r0
 800d5a6:	4b06      	ldr	r3, [pc, #24]	; (800d5c0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d5a8:	6a1b      	ldr	r3, [r3, #32]
 800d5aa:	091b      	lsrs	r3, r3, #4
 800d5ac:	f003 0307 	and.w	r3, r3, #7
 800d5b0:	4904      	ldr	r1, [pc, #16]	; (800d5c4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d5b2:	5ccb      	ldrb	r3, [r1, r3]
 800d5b4:	f003 031f 	and.w	r3, r3, #31
 800d5b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	bd80      	pop	{r7, pc}
 800d5c0:	58024400 	.word	0x58024400
 800d5c4:	0801c804 	.word	0x0801c804

0800d5c8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d5c8:	b480      	push	{r7}
 800d5ca:	b089      	sub	sp, #36	; 0x24
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d5d0:	4ba1      	ldr	r3, [pc, #644]	; (800d858 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d5d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5d4:	f003 0303 	and.w	r3, r3, #3
 800d5d8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d5da:	4b9f      	ldr	r3, [pc, #636]	; (800d858 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d5dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5de:	0b1b      	lsrs	r3, r3, #12
 800d5e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d5e4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d5e6:	4b9c      	ldr	r3, [pc, #624]	; (800d858 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d5e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5ea:	091b      	lsrs	r3, r3, #4
 800d5ec:	f003 0301 	and.w	r3, r3, #1
 800d5f0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d5f2:	4b99      	ldr	r3, [pc, #612]	; (800d858 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d5f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5f6:	08db      	lsrs	r3, r3, #3
 800d5f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d5fc:	693a      	ldr	r2, [r7, #16]
 800d5fe:	fb02 f303 	mul.w	r3, r2, r3
 800d602:	ee07 3a90 	vmov	s15, r3
 800d606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d60a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	2b00      	cmp	r3, #0
 800d612:	f000 8111 	beq.w	800d838 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d616:	69bb      	ldr	r3, [r7, #24]
 800d618:	2b02      	cmp	r3, #2
 800d61a:	f000 8083 	beq.w	800d724 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d61e:	69bb      	ldr	r3, [r7, #24]
 800d620:	2b02      	cmp	r3, #2
 800d622:	f200 80a1 	bhi.w	800d768 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d626:	69bb      	ldr	r3, [r7, #24]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d003      	beq.n	800d634 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d62c:	69bb      	ldr	r3, [r7, #24]
 800d62e:	2b01      	cmp	r3, #1
 800d630:	d056      	beq.n	800d6e0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d632:	e099      	b.n	800d768 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d634:	4b88      	ldr	r3, [pc, #544]	; (800d858 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	f003 0320 	and.w	r3, r3, #32
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d02d      	beq.n	800d69c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d640:	4b85      	ldr	r3, [pc, #532]	; (800d858 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	08db      	lsrs	r3, r3, #3
 800d646:	f003 0303 	and.w	r3, r3, #3
 800d64a:	4a84      	ldr	r2, [pc, #528]	; (800d85c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d64c:	fa22 f303 	lsr.w	r3, r2, r3
 800d650:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d652:	68bb      	ldr	r3, [r7, #8]
 800d654:	ee07 3a90 	vmov	s15, r3
 800d658:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d65c:	697b      	ldr	r3, [r7, #20]
 800d65e:	ee07 3a90 	vmov	s15, r3
 800d662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d66a:	4b7b      	ldr	r3, [pc, #492]	; (800d858 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d66c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d66e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d672:	ee07 3a90 	vmov	s15, r3
 800d676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d67a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d67e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d860 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d68a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d68e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d692:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d696:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d69a:	e087      	b.n	800d7ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d69c:	697b      	ldr	r3, [r7, #20]
 800d69e:	ee07 3a90 	vmov	s15, r3
 800d6a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6a6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d864 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d6aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6ae:	4b6a      	ldr	r3, [pc, #424]	; (800d858 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d6b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6b6:	ee07 3a90 	vmov	s15, r3
 800d6ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6be:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6c2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d860 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d6c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d6d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d6de:	e065      	b.n	800d7ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d6e0:	697b      	ldr	r3, [r7, #20]
 800d6e2:	ee07 3a90 	vmov	s15, r3
 800d6e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6ea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d868 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d6ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6f2:	4b59      	ldr	r3, [pc, #356]	; (800d858 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d6f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6fa:	ee07 3a90 	vmov	s15, r3
 800d6fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d702:	ed97 6a03 	vldr	s12, [r7, #12]
 800d706:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d860 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d70a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d70e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d712:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d71a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d71e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d722:	e043      	b.n	800d7ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d724:	697b      	ldr	r3, [r7, #20]
 800d726:	ee07 3a90 	vmov	s15, r3
 800d72a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d72e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d86c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d736:	4b48      	ldr	r3, [pc, #288]	; (800d858 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d73a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d73e:	ee07 3a90 	vmov	s15, r3
 800d742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d746:	ed97 6a03 	vldr	s12, [r7, #12]
 800d74a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d860 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d74e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d756:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d75a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d75e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d762:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d766:	e021      	b.n	800d7ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d768:	697b      	ldr	r3, [r7, #20]
 800d76a:	ee07 3a90 	vmov	s15, r3
 800d76e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d772:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d868 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d77a:	4b37      	ldr	r3, [pc, #220]	; (800d858 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d77c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d77e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d782:	ee07 3a90 	vmov	s15, r3
 800d786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d78a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d78e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d860 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d79a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d79e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d7aa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d7ac:	4b2a      	ldr	r3, [pc, #168]	; (800d858 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d7ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7b0:	0a5b      	lsrs	r3, r3, #9
 800d7b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7b6:	ee07 3a90 	vmov	s15, r3
 800d7ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d7c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d7c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800d7ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7d2:	ee17 2a90 	vmov	r2, s15
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d7da:	4b1f      	ldr	r3, [pc, #124]	; (800d858 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d7dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7de:	0c1b      	lsrs	r3, r3, #16
 800d7e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7e4:	ee07 3a90 	vmov	s15, r3
 800d7e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d7f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d7f4:	edd7 6a07 	vldr	s13, [r7, #28]
 800d7f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d800:	ee17 2a90 	vmov	r2, s15
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d808:	4b13      	ldr	r3, [pc, #76]	; (800d858 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d80a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d80c:	0e1b      	lsrs	r3, r3, #24
 800d80e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d812:	ee07 3a90 	vmov	s15, r3
 800d816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d81a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d81e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d822:	edd7 6a07 	vldr	s13, [r7, #28]
 800d826:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d82a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d82e:	ee17 2a90 	vmov	r2, s15
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d836:	e008      	b.n	800d84a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2200      	movs	r2, #0
 800d83c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	2200      	movs	r2, #0
 800d842:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2200      	movs	r2, #0
 800d848:	609a      	str	r2, [r3, #8]
}
 800d84a:	bf00      	nop
 800d84c:	3724      	adds	r7, #36	; 0x24
 800d84e:	46bd      	mov	sp, r7
 800d850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d854:	4770      	bx	lr
 800d856:	bf00      	nop
 800d858:	58024400 	.word	0x58024400
 800d85c:	03d09000 	.word	0x03d09000
 800d860:	46000000 	.word	0x46000000
 800d864:	4c742400 	.word	0x4c742400
 800d868:	4a742400 	.word	0x4a742400
 800d86c:	4c3ebc20 	.word	0x4c3ebc20

0800d870 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d870:	b480      	push	{r7}
 800d872:	b089      	sub	sp, #36	; 0x24
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d878:	4ba1      	ldr	r3, [pc, #644]	; (800db00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d87a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d87c:	f003 0303 	and.w	r3, r3, #3
 800d880:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d882:	4b9f      	ldr	r3, [pc, #636]	; (800db00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d886:	0d1b      	lsrs	r3, r3, #20
 800d888:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d88c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d88e:	4b9c      	ldr	r3, [pc, #624]	; (800db00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d892:	0a1b      	lsrs	r3, r3, #8
 800d894:	f003 0301 	and.w	r3, r3, #1
 800d898:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d89a:	4b99      	ldr	r3, [pc, #612]	; (800db00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d89c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d89e:	08db      	lsrs	r3, r3, #3
 800d8a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d8a4:	693a      	ldr	r2, [r7, #16]
 800d8a6:	fb02 f303 	mul.w	r3, r2, r3
 800d8aa:	ee07 3a90 	vmov	s15, r3
 800d8ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d8b6:	697b      	ldr	r3, [r7, #20]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	f000 8111 	beq.w	800dae0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d8be:	69bb      	ldr	r3, [r7, #24]
 800d8c0:	2b02      	cmp	r3, #2
 800d8c2:	f000 8083 	beq.w	800d9cc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d8c6:	69bb      	ldr	r3, [r7, #24]
 800d8c8:	2b02      	cmp	r3, #2
 800d8ca:	f200 80a1 	bhi.w	800da10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d8ce:	69bb      	ldr	r3, [r7, #24]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d003      	beq.n	800d8dc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d8d4:	69bb      	ldr	r3, [r7, #24]
 800d8d6:	2b01      	cmp	r3, #1
 800d8d8:	d056      	beq.n	800d988 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d8da:	e099      	b.n	800da10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d8dc:	4b88      	ldr	r3, [pc, #544]	; (800db00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	f003 0320 	and.w	r3, r3, #32
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d02d      	beq.n	800d944 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d8e8:	4b85      	ldr	r3, [pc, #532]	; (800db00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	08db      	lsrs	r3, r3, #3
 800d8ee:	f003 0303 	and.w	r3, r3, #3
 800d8f2:	4a84      	ldr	r2, [pc, #528]	; (800db04 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d8f4:	fa22 f303 	lsr.w	r3, r2, r3
 800d8f8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	ee07 3a90 	vmov	s15, r3
 800d900:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d904:	697b      	ldr	r3, [r7, #20]
 800d906:	ee07 3a90 	vmov	s15, r3
 800d90a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d90e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d912:	4b7b      	ldr	r3, [pc, #492]	; (800db00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d91a:	ee07 3a90 	vmov	s15, r3
 800d91e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d922:	ed97 6a03 	vldr	s12, [r7, #12]
 800d926:	eddf 5a78 	vldr	s11, [pc, #480]	; 800db08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d92a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d92e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d932:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d93a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d93e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d942:	e087      	b.n	800da54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d944:	697b      	ldr	r3, [r7, #20]
 800d946:	ee07 3a90 	vmov	s15, r3
 800d94a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d94e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800db0c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d956:	4b6a      	ldr	r3, [pc, #424]	; (800db00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d95a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d95e:	ee07 3a90 	vmov	s15, r3
 800d962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d966:	ed97 6a03 	vldr	s12, [r7, #12]
 800d96a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800db08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d96e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d976:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d97a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d97e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d982:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d986:	e065      	b.n	800da54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d988:	697b      	ldr	r3, [r7, #20]
 800d98a:	ee07 3a90 	vmov	s15, r3
 800d98e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d992:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800db10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d99a:	4b59      	ldr	r3, [pc, #356]	; (800db00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d99c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d99e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9a2:	ee07 3a90 	vmov	s15, r3
 800d9a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800d9ae:	eddf 5a56 	vldr	s11, [pc, #344]	; 800db08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d9b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d9be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d9ca:	e043      	b.n	800da54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d9cc:	697b      	ldr	r3, [r7, #20]
 800d9ce:	ee07 3a90 	vmov	s15, r3
 800d9d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9d6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800db14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d9da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9de:	4b48      	ldr	r3, [pc, #288]	; (800db00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d9e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9e6:	ee07 3a90 	vmov	s15, r3
 800d9ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800d9f2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800db08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d9f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da0e:	e021      	b.n	800da54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800da10:	697b      	ldr	r3, [r7, #20]
 800da12:	ee07 3a90 	vmov	s15, r3
 800da16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da1a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800db10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800da1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da22:	4b37      	ldr	r3, [pc, #220]	; (800db00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800da24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da2a:	ee07 3a90 	vmov	s15, r3
 800da2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da32:	ed97 6a03 	vldr	s12, [r7, #12]
 800da36:	eddf 5a34 	vldr	s11, [pc, #208]	; 800db08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800da3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da52:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800da54:	4b2a      	ldr	r3, [pc, #168]	; (800db00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800da56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da58:	0a5b      	lsrs	r3, r3, #9
 800da5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da5e:	ee07 3a90 	vmov	s15, r3
 800da62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800da6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800da6e:	edd7 6a07 	vldr	s13, [r7, #28]
 800da72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da7a:	ee17 2a90 	vmov	r2, s15
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800da82:	4b1f      	ldr	r3, [pc, #124]	; (800db00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800da84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da86:	0c1b      	lsrs	r3, r3, #16
 800da88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da8c:	ee07 3a90 	vmov	s15, r3
 800da90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800da98:	ee37 7a87 	vadd.f32	s14, s15, s14
 800da9c:	edd7 6a07 	vldr	s13, [r7, #28]
 800daa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800daa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800daa8:	ee17 2a90 	vmov	r2, s15
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800dab0:	4b13      	ldr	r3, [pc, #76]	; (800db00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dab4:	0e1b      	lsrs	r3, r3, #24
 800dab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800daba:	ee07 3a90 	vmov	s15, r3
 800dabe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dac2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dac6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800daca:	edd7 6a07 	vldr	s13, [r7, #28]
 800dace:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dad2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dad6:	ee17 2a90 	vmov	r2, s15
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800dade:	e008      	b.n	800daf2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2200      	movs	r2, #0
 800dae4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2200      	movs	r2, #0
 800daea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2200      	movs	r2, #0
 800daf0:	609a      	str	r2, [r3, #8]
}
 800daf2:	bf00      	nop
 800daf4:	3724      	adds	r7, #36	; 0x24
 800daf6:	46bd      	mov	sp, r7
 800daf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafc:	4770      	bx	lr
 800dafe:	bf00      	nop
 800db00:	58024400 	.word	0x58024400
 800db04:	03d09000 	.word	0x03d09000
 800db08:	46000000 	.word	0x46000000
 800db0c:	4c742400 	.word	0x4c742400
 800db10:	4a742400 	.word	0x4a742400
 800db14:	4c3ebc20 	.word	0x4c3ebc20

0800db18 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800db18:	b480      	push	{r7}
 800db1a:	b089      	sub	sp, #36	; 0x24
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800db20:	4ba0      	ldr	r3, [pc, #640]	; (800dda4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db24:	f003 0303 	and.w	r3, r3, #3
 800db28:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800db2a:	4b9e      	ldr	r3, [pc, #632]	; (800dda4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db2e:	091b      	lsrs	r3, r3, #4
 800db30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800db34:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800db36:	4b9b      	ldr	r3, [pc, #620]	; (800dda4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db3a:	f003 0301 	and.w	r3, r3, #1
 800db3e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800db40:	4b98      	ldr	r3, [pc, #608]	; (800dda4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db44:	08db      	lsrs	r3, r3, #3
 800db46:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800db4a:	693a      	ldr	r2, [r7, #16]
 800db4c:	fb02 f303 	mul.w	r3, r2, r3
 800db50:	ee07 3a90 	vmov	s15, r3
 800db54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db58:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	f000 8111 	beq.w	800dd86 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800db64:	69bb      	ldr	r3, [r7, #24]
 800db66:	2b02      	cmp	r3, #2
 800db68:	f000 8083 	beq.w	800dc72 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800db6c:	69bb      	ldr	r3, [r7, #24]
 800db6e:	2b02      	cmp	r3, #2
 800db70:	f200 80a1 	bhi.w	800dcb6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800db74:	69bb      	ldr	r3, [r7, #24]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d003      	beq.n	800db82 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800db7a:	69bb      	ldr	r3, [r7, #24]
 800db7c:	2b01      	cmp	r3, #1
 800db7e:	d056      	beq.n	800dc2e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800db80:	e099      	b.n	800dcb6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800db82:	4b88      	ldr	r3, [pc, #544]	; (800dda4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	f003 0320 	and.w	r3, r3, #32
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d02d      	beq.n	800dbea <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800db8e:	4b85      	ldr	r3, [pc, #532]	; (800dda4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	08db      	lsrs	r3, r3, #3
 800db94:	f003 0303 	and.w	r3, r3, #3
 800db98:	4a83      	ldr	r2, [pc, #524]	; (800dda8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800db9a:	fa22 f303 	lsr.w	r3, r2, r3
 800db9e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dba0:	68bb      	ldr	r3, [r7, #8]
 800dba2:	ee07 3a90 	vmov	s15, r3
 800dba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dbaa:	697b      	ldr	r3, [r7, #20]
 800dbac:	ee07 3a90 	vmov	s15, r3
 800dbb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dbb8:	4b7a      	ldr	r3, [pc, #488]	; (800dda4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dbba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbc0:	ee07 3a90 	vmov	s15, r3
 800dbc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dbc8:	ed97 6a03 	vldr	s12, [r7, #12]
 800dbcc:	eddf 5a77 	vldr	s11, [pc, #476]	; 800ddac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dbd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dbd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dbd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dbdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dbe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dbe4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800dbe8:	e087      	b.n	800dcfa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dbea:	697b      	ldr	r3, [r7, #20]
 800dbec:	ee07 3a90 	vmov	s15, r3
 800dbf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbf4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800ddb0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800dbf8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dbfc:	4b69      	ldr	r3, [pc, #420]	; (800dda4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dbfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc04:	ee07 3a90 	vmov	s15, r3
 800dc08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc0c:	ed97 6a03 	vldr	s12, [r7, #12]
 800dc10:	eddf 5a66 	vldr	s11, [pc, #408]	; 800ddac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dc14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dc20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc24:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dc2c:	e065      	b.n	800dcfa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dc2e:	697b      	ldr	r3, [r7, #20]
 800dc30:	ee07 3a90 	vmov	s15, r3
 800dc34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc38:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800ddb4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800dc3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc40:	4b58      	ldr	r3, [pc, #352]	; (800dda4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dc42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc48:	ee07 3a90 	vmov	s15, r3
 800dc4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc50:	ed97 6a03 	vldr	s12, [r7, #12]
 800dc54:	eddf 5a55 	vldr	s11, [pc, #340]	; 800ddac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dc58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dc64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc68:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc6c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dc70:	e043      	b.n	800dcfa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dc72:	697b      	ldr	r3, [r7, #20]
 800dc74:	ee07 3a90 	vmov	s15, r3
 800dc78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc7c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800ddb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800dc80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc84:	4b47      	ldr	r3, [pc, #284]	; (800dda4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dc86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc8c:	ee07 3a90 	vmov	s15, r3
 800dc90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc94:	ed97 6a03 	vldr	s12, [r7, #12]
 800dc98:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ddac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dc9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dca0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dca4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dca8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dcac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dcb0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dcb4:	e021      	b.n	800dcfa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dcb6:	697b      	ldr	r3, [r7, #20]
 800dcb8:	ee07 3a90 	vmov	s15, r3
 800dcbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcc0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800ddb0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800dcc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dcc8:	4b36      	ldr	r3, [pc, #216]	; (800dda4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dcca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcd0:	ee07 3a90 	vmov	s15, r3
 800dcd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dcd8:	ed97 6a03 	vldr	s12, [r7, #12]
 800dcdc:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ddac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dce0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dce4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dce8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dcec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dcf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dcf4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dcf8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800dcfa:	4b2a      	ldr	r3, [pc, #168]	; (800dda4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dcfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcfe:	0a5b      	lsrs	r3, r3, #9
 800dd00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd04:	ee07 3a90 	vmov	s15, r3
 800dd08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dd10:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dd14:	edd7 6a07 	vldr	s13, [r7, #28]
 800dd18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dd1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dd20:	ee17 2a90 	vmov	r2, s15
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800dd28:	4b1e      	ldr	r3, [pc, #120]	; (800dda4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dd2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd2c:	0c1b      	lsrs	r3, r3, #16
 800dd2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd32:	ee07 3a90 	vmov	s15, r3
 800dd36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dd3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dd42:	edd7 6a07 	vldr	s13, [r7, #28]
 800dd46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dd4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dd4e:	ee17 2a90 	vmov	r2, s15
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800dd56:	4b13      	ldr	r3, [pc, #76]	; (800dda4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dd58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd5a:	0e1b      	lsrs	r3, r3, #24
 800dd5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd60:	ee07 3a90 	vmov	s15, r3
 800dd64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dd6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dd70:	edd7 6a07 	vldr	s13, [r7, #28]
 800dd74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dd78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dd7c:	ee17 2a90 	vmov	r2, s15
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800dd84:	e008      	b.n	800dd98 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	2200      	movs	r2, #0
 800dd8a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2200      	movs	r2, #0
 800dd90:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2200      	movs	r2, #0
 800dd96:	609a      	str	r2, [r3, #8]
}
 800dd98:	bf00      	nop
 800dd9a:	3724      	adds	r7, #36	; 0x24
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda2:	4770      	bx	lr
 800dda4:	58024400 	.word	0x58024400
 800dda8:	03d09000 	.word	0x03d09000
 800ddac:	46000000 	.word	0x46000000
 800ddb0:	4c742400 	.word	0x4c742400
 800ddb4:	4a742400 	.word	0x4a742400
 800ddb8:	4c3ebc20 	.word	0x4c3ebc20

0800ddbc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b084      	sub	sp, #16
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
 800ddc4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ddca:	4b53      	ldr	r3, [pc, #332]	; (800df18 <RCCEx_PLL2_Config+0x15c>)
 800ddcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddce:	f003 0303 	and.w	r3, r3, #3
 800ddd2:	2b03      	cmp	r3, #3
 800ddd4:	d101      	bne.n	800ddda <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ddd6:	2301      	movs	r3, #1
 800ddd8:	e099      	b.n	800df0e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ddda:	4b4f      	ldr	r3, [pc, #316]	; (800df18 <RCCEx_PLL2_Config+0x15c>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	4a4e      	ldr	r2, [pc, #312]	; (800df18 <RCCEx_PLL2_Config+0x15c>)
 800dde0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800dde4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dde6:	f7f6 fa6f 	bl	80042c8 <HAL_GetTick>
 800ddea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ddec:	e008      	b.n	800de00 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ddee:	f7f6 fa6b 	bl	80042c8 <HAL_GetTick>
 800ddf2:	4602      	mov	r2, r0
 800ddf4:	68bb      	ldr	r3, [r7, #8]
 800ddf6:	1ad3      	subs	r3, r2, r3
 800ddf8:	2b02      	cmp	r3, #2
 800ddfa:	d901      	bls.n	800de00 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ddfc:	2303      	movs	r3, #3
 800ddfe:	e086      	b.n	800df0e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800de00:	4b45      	ldr	r3, [pc, #276]	; (800df18 <RCCEx_PLL2_Config+0x15c>)
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d1f0      	bne.n	800ddee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800de0c:	4b42      	ldr	r3, [pc, #264]	; (800df18 <RCCEx_PLL2_Config+0x15c>)
 800de0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de10:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	031b      	lsls	r3, r3, #12
 800de1a:	493f      	ldr	r1, [pc, #252]	; (800df18 <RCCEx_PLL2_Config+0x15c>)
 800de1c:	4313      	orrs	r3, r2
 800de1e:	628b      	str	r3, [r1, #40]	; 0x28
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	685b      	ldr	r3, [r3, #4]
 800de24:	3b01      	subs	r3, #1
 800de26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	689b      	ldr	r3, [r3, #8]
 800de2e:	3b01      	subs	r3, #1
 800de30:	025b      	lsls	r3, r3, #9
 800de32:	b29b      	uxth	r3, r3
 800de34:	431a      	orrs	r2, r3
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	68db      	ldr	r3, [r3, #12]
 800de3a:	3b01      	subs	r3, #1
 800de3c:	041b      	lsls	r3, r3, #16
 800de3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800de42:	431a      	orrs	r2, r3
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	691b      	ldr	r3, [r3, #16]
 800de48:	3b01      	subs	r3, #1
 800de4a:	061b      	lsls	r3, r3, #24
 800de4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800de50:	4931      	ldr	r1, [pc, #196]	; (800df18 <RCCEx_PLL2_Config+0x15c>)
 800de52:	4313      	orrs	r3, r2
 800de54:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800de56:	4b30      	ldr	r3, [pc, #192]	; (800df18 <RCCEx_PLL2_Config+0x15c>)
 800de58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de5a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	695b      	ldr	r3, [r3, #20]
 800de62:	492d      	ldr	r1, [pc, #180]	; (800df18 <RCCEx_PLL2_Config+0x15c>)
 800de64:	4313      	orrs	r3, r2
 800de66:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800de68:	4b2b      	ldr	r3, [pc, #172]	; (800df18 <RCCEx_PLL2_Config+0x15c>)
 800de6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de6c:	f023 0220 	bic.w	r2, r3, #32
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	699b      	ldr	r3, [r3, #24]
 800de74:	4928      	ldr	r1, [pc, #160]	; (800df18 <RCCEx_PLL2_Config+0x15c>)
 800de76:	4313      	orrs	r3, r2
 800de78:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800de7a:	4b27      	ldr	r3, [pc, #156]	; (800df18 <RCCEx_PLL2_Config+0x15c>)
 800de7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de7e:	4a26      	ldr	r2, [pc, #152]	; (800df18 <RCCEx_PLL2_Config+0x15c>)
 800de80:	f023 0310 	bic.w	r3, r3, #16
 800de84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800de86:	4b24      	ldr	r3, [pc, #144]	; (800df18 <RCCEx_PLL2_Config+0x15c>)
 800de88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800de8a:	4b24      	ldr	r3, [pc, #144]	; (800df1c <RCCEx_PLL2_Config+0x160>)
 800de8c:	4013      	ands	r3, r2
 800de8e:	687a      	ldr	r2, [r7, #4]
 800de90:	69d2      	ldr	r2, [r2, #28]
 800de92:	00d2      	lsls	r2, r2, #3
 800de94:	4920      	ldr	r1, [pc, #128]	; (800df18 <RCCEx_PLL2_Config+0x15c>)
 800de96:	4313      	orrs	r3, r2
 800de98:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800de9a:	4b1f      	ldr	r3, [pc, #124]	; (800df18 <RCCEx_PLL2_Config+0x15c>)
 800de9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de9e:	4a1e      	ldr	r2, [pc, #120]	; (800df18 <RCCEx_PLL2_Config+0x15c>)
 800dea0:	f043 0310 	orr.w	r3, r3, #16
 800dea4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800dea6:	683b      	ldr	r3, [r7, #0]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d106      	bne.n	800deba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800deac:	4b1a      	ldr	r3, [pc, #104]	; (800df18 <RCCEx_PLL2_Config+0x15c>)
 800deae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deb0:	4a19      	ldr	r2, [pc, #100]	; (800df18 <RCCEx_PLL2_Config+0x15c>)
 800deb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800deb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800deb8:	e00f      	b.n	800deda <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	2b01      	cmp	r3, #1
 800debe:	d106      	bne.n	800dece <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800dec0:	4b15      	ldr	r3, [pc, #84]	; (800df18 <RCCEx_PLL2_Config+0x15c>)
 800dec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dec4:	4a14      	ldr	r2, [pc, #80]	; (800df18 <RCCEx_PLL2_Config+0x15c>)
 800dec6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800deca:	62d3      	str	r3, [r2, #44]	; 0x2c
 800decc:	e005      	b.n	800deda <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800dece:	4b12      	ldr	r3, [pc, #72]	; (800df18 <RCCEx_PLL2_Config+0x15c>)
 800ded0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ded2:	4a11      	ldr	r2, [pc, #68]	; (800df18 <RCCEx_PLL2_Config+0x15c>)
 800ded4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ded8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800deda:	4b0f      	ldr	r3, [pc, #60]	; (800df18 <RCCEx_PLL2_Config+0x15c>)
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	4a0e      	ldr	r2, [pc, #56]	; (800df18 <RCCEx_PLL2_Config+0x15c>)
 800dee0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dee4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dee6:	f7f6 f9ef 	bl	80042c8 <HAL_GetTick>
 800deea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800deec:	e008      	b.n	800df00 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800deee:	f7f6 f9eb 	bl	80042c8 <HAL_GetTick>
 800def2:	4602      	mov	r2, r0
 800def4:	68bb      	ldr	r3, [r7, #8]
 800def6:	1ad3      	subs	r3, r2, r3
 800def8:	2b02      	cmp	r3, #2
 800defa:	d901      	bls.n	800df00 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800defc:	2303      	movs	r3, #3
 800defe:	e006      	b.n	800df0e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800df00:	4b05      	ldr	r3, [pc, #20]	; (800df18 <RCCEx_PLL2_Config+0x15c>)
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d0f0      	beq.n	800deee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800df0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800df0e:	4618      	mov	r0, r3
 800df10:	3710      	adds	r7, #16
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}
 800df16:	bf00      	nop
 800df18:	58024400 	.word	0x58024400
 800df1c:	ffff0007 	.word	0xffff0007

0800df20 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b084      	sub	sp, #16
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
 800df28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800df2a:	2300      	movs	r3, #0
 800df2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800df2e:	4b53      	ldr	r3, [pc, #332]	; (800e07c <RCCEx_PLL3_Config+0x15c>)
 800df30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df32:	f003 0303 	and.w	r3, r3, #3
 800df36:	2b03      	cmp	r3, #3
 800df38:	d101      	bne.n	800df3e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800df3a:	2301      	movs	r3, #1
 800df3c:	e099      	b.n	800e072 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800df3e:	4b4f      	ldr	r3, [pc, #316]	; (800e07c <RCCEx_PLL3_Config+0x15c>)
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	4a4e      	ldr	r2, [pc, #312]	; (800e07c <RCCEx_PLL3_Config+0x15c>)
 800df44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800df48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800df4a:	f7f6 f9bd 	bl	80042c8 <HAL_GetTick>
 800df4e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800df50:	e008      	b.n	800df64 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800df52:	f7f6 f9b9 	bl	80042c8 <HAL_GetTick>
 800df56:	4602      	mov	r2, r0
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	1ad3      	subs	r3, r2, r3
 800df5c:	2b02      	cmp	r3, #2
 800df5e:	d901      	bls.n	800df64 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800df60:	2303      	movs	r3, #3
 800df62:	e086      	b.n	800e072 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800df64:	4b45      	ldr	r3, [pc, #276]	; (800e07c <RCCEx_PLL3_Config+0x15c>)
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d1f0      	bne.n	800df52 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800df70:	4b42      	ldr	r3, [pc, #264]	; (800e07c <RCCEx_PLL3_Config+0x15c>)
 800df72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df74:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	051b      	lsls	r3, r3, #20
 800df7e:	493f      	ldr	r1, [pc, #252]	; (800e07c <RCCEx_PLL3_Config+0x15c>)
 800df80:	4313      	orrs	r3, r2
 800df82:	628b      	str	r3, [r1, #40]	; 0x28
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	685b      	ldr	r3, [r3, #4]
 800df88:	3b01      	subs	r3, #1
 800df8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	689b      	ldr	r3, [r3, #8]
 800df92:	3b01      	subs	r3, #1
 800df94:	025b      	lsls	r3, r3, #9
 800df96:	b29b      	uxth	r3, r3
 800df98:	431a      	orrs	r2, r3
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	68db      	ldr	r3, [r3, #12]
 800df9e:	3b01      	subs	r3, #1
 800dfa0:	041b      	lsls	r3, r3, #16
 800dfa2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800dfa6:	431a      	orrs	r2, r3
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	691b      	ldr	r3, [r3, #16]
 800dfac:	3b01      	subs	r3, #1
 800dfae:	061b      	lsls	r3, r3, #24
 800dfb0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800dfb4:	4931      	ldr	r1, [pc, #196]	; (800e07c <RCCEx_PLL3_Config+0x15c>)
 800dfb6:	4313      	orrs	r3, r2
 800dfb8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800dfba:	4b30      	ldr	r3, [pc, #192]	; (800e07c <RCCEx_PLL3_Config+0x15c>)
 800dfbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfbe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	695b      	ldr	r3, [r3, #20]
 800dfc6:	492d      	ldr	r1, [pc, #180]	; (800e07c <RCCEx_PLL3_Config+0x15c>)
 800dfc8:	4313      	orrs	r3, r2
 800dfca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800dfcc:	4b2b      	ldr	r3, [pc, #172]	; (800e07c <RCCEx_PLL3_Config+0x15c>)
 800dfce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfd0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	699b      	ldr	r3, [r3, #24]
 800dfd8:	4928      	ldr	r1, [pc, #160]	; (800e07c <RCCEx_PLL3_Config+0x15c>)
 800dfda:	4313      	orrs	r3, r2
 800dfdc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800dfde:	4b27      	ldr	r3, [pc, #156]	; (800e07c <RCCEx_PLL3_Config+0x15c>)
 800dfe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfe2:	4a26      	ldr	r2, [pc, #152]	; (800e07c <RCCEx_PLL3_Config+0x15c>)
 800dfe4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dfe8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800dfea:	4b24      	ldr	r3, [pc, #144]	; (800e07c <RCCEx_PLL3_Config+0x15c>)
 800dfec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dfee:	4b24      	ldr	r3, [pc, #144]	; (800e080 <RCCEx_PLL3_Config+0x160>)
 800dff0:	4013      	ands	r3, r2
 800dff2:	687a      	ldr	r2, [r7, #4]
 800dff4:	69d2      	ldr	r2, [r2, #28]
 800dff6:	00d2      	lsls	r2, r2, #3
 800dff8:	4920      	ldr	r1, [pc, #128]	; (800e07c <RCCEx_PLL3_Config+0x15c>)
 800dffa:	4313      	orrs	r3, r2
 800dffc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800dffe:	4b1f      	ldr	r3, [pc, #124]	; (800e07c <RCCEx_PLL3_Config+0x15c>)
 800e000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e002:	4a1e      	ldr	r2, [pc, #120]	; (800e07c <RCCEx_PLL3_Config+0x15c>)
 800e004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e008:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d106      	bne.n	800e01e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800e010:	4b1a      	ldr	r3, [pc, #104]	; (800e07c <RCCEx_PLL3_Config+0x15c>)
 800e012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e014:	4a19      	ldr	r2, [pc, #100]	; (800e07c <RCCEx_PLL3_Config+0x15c>)
 800e016:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800e01a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e01c:	e00f      	b.n	800e03e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	2b01      	cmp	r3, #1
 800e022:	d106      	bne.n	800e032 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800e024:	4b15      	ldr	r3, [pc, #84]	; (800e07c <RCCEx_PLL3_Config+0x15c>)
 800e026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e028:	4a14      	ldr	r2, [pc, #80]	; (800e07c <RCCEx_PLL3_Config+0x15c>)
 800e02a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e02e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e030:	e005      	b.n	800e03e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800e032:	4b12      	ldr	r3, [pc, #72]	; (800e07c <RCCEx_PLL3_Config+0x15c>)
 800e034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e036:	4a11      	ldr	r2, [pc, #68]	; (800e07c <RCCEx_PLL3_Config+0x15c>)
 800e038:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e03c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800e03e:	4b0f      	ldr	r3, [pc, #60]	; (800e07c <RCCEx_PLL3_Config+0x15c>)
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	4a0e      	ldr	r2, [pc, #56]	; (800e07c <RCCEx_PLL3_Config+0x15c>)
 800e044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e048:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e04a:	f7f6 f93d 	bl	80042c8 <HAL_GetTick>
 800e04e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e050:	e008      	b.n	800e064 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e052:	f7f6 f939 	bl	80042c8 <HAL_GetTick>
 800e056:	4602      	mov	r2, r0
 800e058:	68bb      	ldr	r3, [r7, #8]
 800e05a:	1ad3      	subs	r3, r2, r3
 800e05c:	2b02      	cmp	r3, #2
 800e05e:	d901      	bls.n	800e064 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e060:	2303      	movs	r3, #3
 800e062:	e006      	b.n	800e072 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e064:	4b05      	ldr	r3, [pc, #20]	; (800e07c <RCCEx_PLL3_Config+0x15c>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d0f0      	beq.n	800e052 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800e070:	7bfb      	ldrb	r3, [r7, #15]
}
 800e072:	4618      	mov	r0, r3
 800e074:	3710      	adds	r7, #16
 800e076:	46bd      	mov	sp, r7
 800e078:	bd80      	pop	{r7, pc}
 800e07a:	bf00      	nop
 800e07c:	58024400 	.word	0x58024400
 800e080:	ffff0007 	.word	0xffff0007

0800e084 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b08a      	sub	sp, #40	; 0x28
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d101      	bne.n	800e096 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800e092:	2301      	movs	r3, #1
 800e094:	e075      	b.n	800e182 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e09c:	b2db      	uxtb	r3, r3
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d105      	bne.n	800e0ae <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f7f5 f9bd 	bl	8003428 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	2204      	movs	r2, #4
 800e0b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800e0b6:	6878      	ldr	r0, [r7, #4]
 800e0b8:	f000 f868 	bl	800e18c <HAL_SD_InitCard>
 800e0bc:	4603      	mov	r3, r0
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d001      	beq.n	800e0c6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800e0c2:	2301      	movs	r3, #1
 800e0c4:	e05d      	b.n	800e182 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800e0c6:	f107 0308 	add.w	r3, r7, #8
 800e0ca:	4619      	mov	r1, r3
 800e0cc:	6878      	ldr	r0, [r7, #4]
 800e0ce:	f000 fdaf 	bl	800ec30 <HAL_SD_GetCardStatus>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d001      	beq.n	800e0dc <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800e0d8:	2301      	movs	r3, #1
 800e0da:	e052      	b.n	800e182 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800e0dc:	7e3b      	ldrb	r3, [r7, #24]
 800e0de:	b2db      	uxtb	r3, r3
 800e0e0:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800e0e2:	7e7b      	ldrb	r3, [r7, #25]
 800e0e4:	b2db      	uxtb	r3, r3
 800e0e6:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0ec:	2b01      	cmp	r3, #1
 800e0ee:	d10a      	bne.n	800e106 <HAL_SD_Init+0x82>
 800e0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d102      	bne.n	800e0fc <HAL_SD_Init+0x78>
 800e0f6:	6a3b      	ldr	r3, [r7, #32]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d004      	beq.n	800e106 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e102:	659a      	str	r2, [r3, #88]	; 0x58
 800e104:	e00b      	b.n	800e11e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e10a:	2b01      	cmp	r3, #1
 800e10c:	d104      	bne.n	800e118 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e114:	659a      	str	r2, [r3, #88]	; 0x58
 800e116:	e002      	b.n	800e11e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2200      	movs	r2, #0
 800e11c:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	68db      	ldr	r3, [r3, #12]
 800e122:	4619      	mov	r1, r3
 800e124:	6878      	ldr	r0, [r7, #4]
 800e126:	f000 fe6d 	bl	800ee04 <HAL_SD_ConfigWideBusOperation>
 800e12a:	4603      	mov	r3, r0
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d001      	beq.n	800e134 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800e130:	2301      	movs	r3, #1
 800e132:	e026      	b.n	800e182 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800e134:	f7f6 f8c8 	bl	80042c8 <HAL_GetTick>
 800e138:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800e13a:	e011      	b.n	800e160 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e13c:	f7f6 f8c4 	bl	80042c8 <HAL_GetTick>
 800e140:	4602      	mov	r2, r0
 800e142:	69fb      	ldr	r3, [r7, #28]
 800e144:	1ad3      	subs	r3, r2, r3
 800e146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e14a:	d109      	bne.n	800e160 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e152:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	2201      	movs	r2, #1
 800e158:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800e15c:	2303      	movs	r3, #3
 800e15e:	e010      	b.n	800e182 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800e160:	6878      	ldr	r0, [r7, #4]
 800e162:	f000 ff61 	bl	800f028 <HAL_SD_GetCardState>
 800e166:	4603      	mov	r3, r0
 800e168:	2b04      	cmp	r3, #4
 800e16a:	d1e7      	bne.n	800e13c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2200      	movs	r2, #0
 800e170:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	2200      	movs	r2, #0
 800e176:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2201      	movs	r2, #1
 800e17c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800e180:	2300      	movs	r3, #0
}
 800e182:	4618      	mov	r0, r3
 800e184:	3728      	adds	r7, #40	; 0x28
 800e186:	46bd      	mov	sp, r7
 800e188:	bd80      	pop	{r7, pc}
	...

0800e18c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e18c:	b590      	push	{r4, r7, lr}
 800e18e:	b08d      	sub	sp, #52	; 0x34
 800e190:	af02      	add	r7, sp, #8
 800e192:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800e194:	2300      	movs	r3, #0
 800e196:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800e198:	2300      	movs	r3, #0
 800e19a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800e19c:	2300      	movs	r3, #0
 800e19e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800e1a4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800e1a8:	f04f 0100 	mov.w	r1, #0
 800e1ac:	f7fe fd24 	bl	800cbf8 <HAL_RCCEx_GetPeriphCLKFreq>
 800e1b0:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800e1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d109      	bne.n	800e1cc <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2201      	movs	r2, #1
 800e1bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e1c6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e1c8:	2301      	movs	r3, #1
 800e1ca:	e070      	b.n	800e2ae <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800e1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ce:	0a1b      	lsrs	r3, r3, #8
 800e1d0:	4a39      	ldr	r2, [pc, #228]	; (800e2b8 <HAL_SD_InitCard+0x12c>)
 800e1d2:	fba2 2303 	umull	r2, r3, r2, r3
 800e1d6:	091b      	lsrs	r3, r3, #4
 800e1d8:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681c      	ldr	r4, [r3, #0]
 800e1de:	466a      	mov	r2, sp
 800e1e0:	f107 0318 	add.w	r3, r7, #24
 800e1e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e1e8:	e882 0003 	stmia.w	r2, {r0, r1}
 800e1ec:	f107 030c 	add.w	r3, r7, #12
 800e1f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e1f2:	4620      	mov	r0, r4
 800e1f4:	f004 fda8 	bl	8012d48 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	f004 fdeb 	bl	8012dd8 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800e202:	69fb      	ldr	r3, [r7, #28]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d005      	beq.n	800e214 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800e208:	69fb      	ldr	r3, [r7, #28]
 800e20a:	005b      	lsls	r3, r3, #1
 800e20c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e20e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e212:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800e214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e216:	2b00      	cmp	r3, #0
 800e218:	d007      	beq.n	800e22a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800e21a:	4a28      	ldr	r2, [pc, #160]	; (800e2bc <HAL_SD_InitCard+0x130>)
 800e21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e21e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e222:	3301      	adds	r3, #1
 800e224:	4618      	mov	r0, r3
 800e226:	f7f6 f85b 	bl	80042e0 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	f000 ffea 	bl	800f204 <SD_PowerON>
 800e230:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e232:	6a3b      	ldr	r3, [r7, #32]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d00b      	beq.n	800e250 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2201      	movs	r2, #1
 800e23c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e244:	6a3b      	ldr	r3, [r7, #32]
 800e246:	431a      	orrs	r2, r3
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e24c:	2301      	movs	r3, #1
 800e24e:	e02e      	b.n	800e2ae <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800e250:	6878      	ldr	r0, [r7, #4]
 800e252:	f000 ff09 	bl	800f068 <SD_InitCard>
 800e256:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e258:	6a3b      	ldr	r3, [r7, #32]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d00b      	beq.n	800e276 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	2201      	movs	r2, #1
 800e262:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e26a:	6a3b      	ldr	r3, [r7, #32]
 800e26c:	431a      	orrs	r2, r3
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e272:	2301      	movs	r3, #1
 800e274:	e01b      	b.n	800e2ae <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e27e:	4618      	mov	r0, r3
 800e280:	f004 fe40 	bl	8012f04 <SDMMC_CmdBlockLength>
 800e284:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e286:	6a3b      	ldr	r3, [r7, #32]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d00f      	beq.n	800e2ac <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	4a0b      	ldr	r2, [pc, #44]	; (800e2c0 <HAL_SD_InitCard+0x134>)
 800e292:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e298:	6a3b      	ldr	r3, [r7, #32]
 800e29a:	431a      	orrs	r2, r3
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	2201      	movs	r2, #1
 800e2a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800e2a8:	2301      	movs	r3, #1
 800e2aa:	e000      	b.n	800e2ae <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800e2ac:	2300      	movs	r3, #0
}
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	372c      	adds	r7, #44	; 0x2c
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	bd90      	pop	{r4, r7, pc}
 800e2b6:	bf00      	nop
 800e2b8:	014f8b59 	.word	0x014f8b59
 800e2bc:	00012110 	.word	0x00012110
 800e2c0:	1fe00fff 	.word	0x1fe00fff

0800e2c4 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b08c      	sub	sp, #48	; 0x30
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	60f8      	str	r0, [r7, #12]
 800e2cc:	60b9      	str	r1, [r7, #8]
 800e2ce:	607a      	str	r2, [r7, #4]
 800e2d0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d107      	bne.n	800e2ec <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2e0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e2e8:	2301      	movs	r3, #1
 800e2ea:	e08d      	b.n	800e408 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e2f2:	b2db      	uxtb	r3, r3
 800e2f4:	2b01      	cmp	r3, #1
 800e2f6:	f040 8086 	bne.w	800e406 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e300:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	441a      	add	r2, r3
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e30a:	429a      	cmp	r2, r3
 800e30c:	d907      	bls.n	800e31e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e312:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e31a:	2301      	movs	r3, #1
 800e31c:	e074      	b.n	800e408 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	2203      	movs	r2, #3
 800e322:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	2200      	movs	r2, #0
 800e32c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	68ba      	ldr	r2, [r7, #8]
 800e332:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	025a      	lsls	r2, r3, #9
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e340:	2b01      	cmp	r3, #1
 800e342:	d002      	beq.n	800e34a <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800e344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e346:	025b      	lsls	r3, r3, #9
 800e348:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e34a:	f04f 33ff 	mov.w	r3, #4294967295
 800e34e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	025b      	lsls	r3, r3, #9
 800e354:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e356:	2390      	movs	r3, #144	; 0x90
 800e358:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e35a:	2302      	movs	r3, #2
 800e35c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e35e:	2300      	movs	r3, #0
 800e360:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800e362:	2300      	movs	r3, #0
 800e364:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	f107 0210 	add.w	r2, r7, #16
 800e36e:	4611      	mov	r1, r2
 800e370:	4618      	mov	r0, r3
 800e372:	f004 fd9b 	bl	8012eac <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	68da      	ldr	r2, [r3, #12]
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e384:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	68ba      	ldr	r2, [r7, #8]
 800e38c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	2201      	movs	r2, #1
 800e394:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800e396:	683b      	ldr	r3, [r7, #0]
 800e398:	2b01      	cmp	r3, #1
 800e39a:	d90a      	bls.n	800e3b2 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	2282      	movs	r2, #130	; 0x82
 800e3a0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	f004 fdf1 	bl	8012f90 <SDMMC_CmdReadMultiBlock>
 800e3ae:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e3b0:	e009      	b.n	800e3c6 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	2281      	movs	r2, #129	; 0x81
 800e3b6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e3be:	4618      	mov	r0, r3
 800e3c0:	f004 fdc3 	bl	8012f4a <SDMMC_CmdReadSingleBlock>
 800e3c4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800e3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d012      	beq.n	800e3f2 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	4a0f      	ldr	r2, [pc, #60]	; (800e410 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800e3d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3da:	431a      	orrs	r2, r3
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	2201      	movs	r2, #1
 800e3e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800e3ee:	2301      	movs	r3, #1
 800e3f0:	e00a      	b.n	800e408 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800e400:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800e402:	2300      	movs	r3, #0
 800e404:	e000      	b.n	800e408 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800e406:	2302      	movs	r3, #2
  }
}
 800e408:	4618      	mov	r0, r3
 800e40a:	3730      	adds	r7, #48	; 0x30
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}
 800e410:	1fe00fff 	.word	0x1fe00fff

0800e414 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b08c      	sub	sp, #48	; 0x30
 800e418:	af00      	add	r7, sp, #0
 800e41a:	60f8      	str	r0, [r7, #12]
 800e41c:	60b9      	str	r1, [r7, #8]
 800e41e:	607a      	str	r2, [r7, #4]
 800e420:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800e426:	68bb      	ldr	r3, [r7, #8]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d107      	bne.n	800e43c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e430:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e438:	2301      	movs	r3, #1
 800e43a:	e08d      	b.n	800e558 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e442:	b2db      	uxtb	r3, r3
 800e444:	2b01      	cmp	r3, #1
 800e446:	f040 8086 	bne.w	800e556 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	2200      	movs	r2, #0
 800e44e:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e450:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	441a      	add	r2, r3
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e45a:	429a      	cmp	r2, r3
 800e45c:	d907      	bls.n	800e46e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e462:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e46a:	2301      	movs	r3, #1
 800e46c:	e074      	b.n	800e558 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	2203      	movs	r2, #3
 800e472:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	2200      	movs	r2, #0
 800e47c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	68ba      	ldr	r2, [r7, #8]
 800e482:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	025a      	lsls	r2, r3, #9
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e490:	2b01      	cmp	r3, #1
 800e492:	d002      	beq.n	800e49a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800e494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e496:	025b      	lsls	r3, r3, #9
 800e498:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e49a:	f04f 33ff 	mov.w	r3, #4294967295
 800e49e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	025b      	lsls	r3, r3, #9
 800e4a4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e4a6:	2390      	movs	r3, #144	; 0x90
 800e4a8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	f107 0210 	add.w	r2, r7, #16
 800e4be:	4611      	mov	r1, r2
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	f004 fcf3 	bl	8012eac <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	68da      	ldr	r2, [r3, #12]
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e4d4:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	68ba      	ldr	r2, [r7, #8]
 800e4dc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	2201      	movs	r2, #1
 800e4e4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	2b01      	cmp	r3, #1
 800e4ea:	d90a      	bls.n	800e502 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	22a0      	movs	r2, #160	; 0xa0
 800e4f0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f004 fd8f 	bl	801301c <SDMMC_CmdWriteMultiBlock>
 800e4fe:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e500:	e009      	b.n	800e516 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	2290      	movs	r2, #144	; 0x90
 800e506:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e50e:	4618      	mov	r0, r3
 800e510:	f004 fd61 	bl	8012fd6 <SDMMC_CmdWriteSingleBlock>
 800e514:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800e516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d012      	beq.n	800e542 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	4a0f      	ldr	r2, [pc, #60]	; (800e560 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800e522:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e52a:	431a      	orrs	r2, r3
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	2201      	movs	r2, #1
 800e534:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	2200      	movs	r2, #0
 800e53c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800e53e:	2301      	movs	r3, #1
 800e540:	e00a      	b.n	800e558 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800e550:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800e552:	2300      	movs	r3, #0
 800e554:	e000      	b.n	800e558 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800e556:	2302      	movs	r3, #2
  }
}
 800e558:	4618      	mov	r0, r3
 800e55a:	3730      	adds	r7, #48	; 0x30
 800e55c:	46bd      	mov	sp, r7
 800e55e:	bd80      	pop	{r7, pc}
 800e560:	1fe00fff 	.word	0x1fe00fff

0800e564 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b084      	sub	sp, #16
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e570:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e578:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d008      	beq.n	800e592 <HAL_SD_IRQHandler+0x2e>
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	f003 0308 	and.w	r3, r3, #8
 800e586:	2b00      	cmp	r3, #0
 800e588:	d003      	beq.n	800e592 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800e58a:	6878      	ldr	r0, [r7, #4]
 800e58c:	f001 f926 	bl	800f7dc <SD_Read_IT>
 800e590:	e19a      	b.n	800e8c8 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	f000 80ac 	beq.w	800e6fa <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e5aa:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681a      	ldr	r2, [r3, #0]
 800e5b6:	4b59      	ldr	r3, [pc, #356]	; (800e71c <HAL_SD_IRQHandler+0x1b8>)
 800e5b8:	400b      	ands	r3, r1
 800e5ba:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e5ca:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	68da      	ldr	r2, [r3, #12]
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e5da:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	f003 0308 	and.w	r3, r3, #8
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d038      	beq.n	800e658 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	f003 0302 	and.w	r3, r3, #2
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d104      	bne.n	800e5fa <HAL_SD_IRQHandler+0x96>
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	f003 0320 	and.w	r3, r3, #32
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d011      	beq.n	800e61e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	4618      	mov	r0, r3
 800e600:	f004 fd30 	bl	8013064 <SDMMC_CmdStopTransfer>
 800e604:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800e606:	68bb      	ldr	r3, [r7, #8]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d008      	beq.n	800e61e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e610:	68bb      	ldr	r3, [r7, #8]
 800e612:	431a      	orrs	r2, r3
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800e618:	6878      	ldr	r0, [r7, #4]
 800e61a:	f000 f95b 	bl	800e8d4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	4a3f      	ldr	r2, [pc, #252]	; (800e720 <HAL_SD_IRQHandler+0x1bc>)
 800e624:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	2201      	movs	r2, #1
 800e62a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	2200      	movs	r2, #0
 800e632:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	f003 0301 	and.w	r3, r3, #1
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d104      	bne.n	800e648 <HAL_SD_IRQHandler+0xe4>
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	f003 0302 	and.w	r3, r3, #2
 800e644:	2b00      	cmp	r3, #0
 800e646:	d003      	beq.n	800e650 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f006 fd31 	bl	80150b0 <HAL_SD_RxCpltCallback>
 800e64e:	e13b      	b.n	800e8c8 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800e650:	6878      	ldr	r0, [r7, #4]
 800e652:	f006 fd23 	bl	801509c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800e656:	e137      	b.n	800e8c8 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e65e:	2b00      	cmp	r3, #0
 800e660:	f000 8132 	beq.w	800e8c8 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	2200      	movs	r2, #0
 800e66a:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	2200      	movs	r2, #0
 800e672:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	2200      	movs	r2, #0
 800e67a:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	f003 0302 	and.w	r3, r3, #2
 800e682:	2b00      	cmp	r3, #0
 800e684:	d104      	bne.n	800e690 <HAL_SD_IRQHandler+0x12c>
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	f003 0320 	and.w	r3, r3, #32
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d011      	beq.n	800e6b4 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	4618      	mov	r0, r3
 800e696:	f004 fce5 	bl	8013064 <SDMMC_CmdStopTransfer>
 800e69a:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800e69c:	68bb      	ldr	r3, [r7, #8]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d008      	beq.n	800e6b4 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e6a6:	68bb      	ldr	r3, [r7, #8]
 800e6a8:	431a      	orrs	r2, r3
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800e6ae:	6878      	ldr	r0, [r7, #4]
 800e6b0:	f000 f910 	bl	800e8d4 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2201      	movs	r2, #1
 800e6b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2200      	movs	r2, #0
 800e6c0:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	f003 0310 	and.w	r3, r3, #16
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d104      	bne.n	800e6d6 <HAL_SD_IRQHandler+0x172>
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	f003 0320 	and.w	r3, r3, #32
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d002      	beq.n	800e6dc <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800e6d6:	6878      	ldr	r0, [r7, #4]
 800e6d8:	f006 fce0 	bl	801509c <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	f003 0301 	and.w	r3, r3, #1
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d105      	bne.n	800e6f2 <HAL_SD_IRQHandler+0x18e>
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	f003 0302 	and.w	r3, r3, #2
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	f000 80eb 	beq.w	800e8c8 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	f006 fcdc 	bl	80150b0 <HAL_SD_RxCpltCallback>
}
 800e6f8:	e0e6      	b.n	800e8c8 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e704:	2b00      	cmp	r3, #0
 800e706:	d00d      	beq.n	800e724 <HAL_SD_IRQHandler+0x1c0>
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	f003 0308 	and.w	r3, r3, #8
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d008      	beq.n	800e724 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800e712:	6878      	ldr	r0, [r7, #4]
 800e714:	f001 f8a8 	bl	800f868 <SD_Write_IT>
 800e718:	e0d6      	b.n	800e8c8 <HAL_SD_IRQHandler+0x364>
 800e71a:	bf00      	nop
 800e71c:	ffff3ec5 	.word	0xffff3ec5
 800e720:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e72a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800e72e:	2b00      	cmp	r3, #0
 800e730:	f000 809d 	beq.w	800e86e <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e73a:	f003 0302 	and.w	r3, r3, #2
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d005      	beq.n	800e74e <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e746:	f043 0202 	orr.w	r2, r3, #2
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e754:	f003 0308 	and.w	r3, r3, #8
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d005      	beq.n	800e768 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e760:	f043 0208 	orr.w	r2, r3, #8
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e76e:	f003 0320 	and.w	r3, r3, #32
 800e772:	2b00      	cmp	r3, #0
 800e774:	d005      	beq.n	800e782 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e77a:	f043 0220 	orr.w	r2, r3, #32
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e788:	f003 0310 	and.w	r3, r3, #16
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d005      	beq.n	800e79c <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e794:	f043 0210 	orr.w	r2, r3, #16
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	4a4b      	ldr	r2, [pc, #300]	; (800e8d0 <HAL_SD_IRQHandler+0x36c>)
 800e7a2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800e7b2:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	68da      	ldr	r2, [r3, #12]
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e7c2:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e7d2:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	68da      	ldr	r2, [r3, #12]
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e7e2:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	f004 fc3b 	bl	8013064 <SDMMC_CmdStopTransfer>
 800e7ee:	4602      	mov	r2, r0
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7f4:	431a      	orrs	r2, r3
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	68da      	ldr	r2, [r3, #12]
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e808:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e812:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	f003 0308 	and.w	r3, r3, #8
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d00a      	beq.n	800e834 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	2201      	movs	r2, #1
 800e822:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	2200      	movs	r2, #0
 800e82a:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800e82c:	6878      	ldr	r0, [r7, #4]
 800e82e:	f000 f851 	bl	800e8d4 <HAL_SD_ErrorCallback>
}
 800e832:	e049      	b.n	800e8c8 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d044      	beq.n	800e8c8 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e842:	2b00      	cmp	r3, #0
 800e844:	d040      	beq.n	800e8c8 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e854:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	2200      	movs	r2, #0
 800e85c:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	2201      	movs	r2, #1
 800e862:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800e866:	6878      	ldr	r0, [r7, #4]
 800e868:	f000 f834 	bl	800e8d4 <HAL_SD_ErrorCallback>
}
 800e86c:	e02c      	b.n	800e8c8 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d025      	beq.n	800e8c8 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e884:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e88c:	f003 0304 	and.w	r3, r3, #4
 800e890:	2b00      	cmp	r3, #0
 800e892:	d10c      	bne.n	800e8ae <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	f003 0320 	and.w	r3, r3, #32
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d003      	beq.n	800e8a6 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	f001 f84a 	bl	800f938 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800e8a4:	e010      	b.n	800e8c8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800e8a6:	6878      	ldr	r0, [r7, #4]
 800e8a8:	f001 f832 	bl	800f910 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800e8ac:	e00c      	b.n	800e8c8 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	f003 0320 	and.w	r3, r3, #32
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d003      	beq.n	800e8c0 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800e8b8:	6878      	ldr	r0, [r7, #4]
 800e8ba:	f001 f833 	bl	800f924 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800e8be:	e003      	b.n	800e8c8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800e8c0:	6878      	ldr	r0, [r7, #4]
 800e8c2:	f001 f81b 	bl	800f8fc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800e8c6:	e7ff      	b.n	800e8c8 <HAL_SD_IRQHandler+0x364>
 800e8c8:	bf00      	nop
 800e8ca:	3710      	adds	r7, #16
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bd80      	pop	{r7, pc}
 800e8d0:	18000f3a 	.word	0x18000f3a

0800e8d4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800e8d4:	b480      	push	{r7}
 800e8d6:	b083      	sub	sp, #12
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800e8dc:	bf00      	nop
 800e8de:	370c      	adds	r7, #12
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e6:	4770      	bx	lr

0800e8e8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800e8e8:	b480      	push	{r7}
 800e8ea:	b083      	sub	sp, #12
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
 800e8f0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e8f6:	0f9b      	lsrs	r3, r3, #30
 800e8f8:	b2da      	uxtb	r2, r3
 800e8fa:	683b      	ldr	r3, [r7, #0]
 800e8fc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e902:	0e9b      	lsrs	r3, r3, #26
 800e904:	b2db      	uxtb	r3, r3
 800e906:	f003 030f 	and.w	r3, r3, #15
 800e90a:	b2da      	uxtb	r2, r3
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e914:	0e1b      	lsrs	r3, r3, #24
 800e916:	b2db      	uxtb	r3, r3
 800e918:	f003 0303 	and.w	r3, r3, #3
 800e91c:	b2da      	uxtb	r2, r3
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e926:	0c1b      	lsrs	r3, r3, #16
 800e928:	b2da      	uxtb	r2, r3
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e932:	0a1b      	lsrs	r3, r3, #8
 800e934:	b2da      	uxtb	r2, r3
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e93e:	b2da      	uxtb	r2, r3
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e948:	0d1b      	lsrs	r3, r3, #20
 800e94a:	b29a      	uxth	r2, r3
 800e94c:	683b      	ldr	r3, [r7, #0]
 800e94e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e954:	0c1b      	lsrs	r3, r3, #16
 800e956:	b2db      	uxtb	r3, r3
 800e958:	f003 030f 	and.w	r3, r3, #15
 800e95c:	b2da      	uxtb	r2, r3
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e966:	0bdb      	lsrs	r3, r3, #15
 800e968:	b2db      	uxtb	r3, r3
 800e96a:	f003 0301 	and.w	r3, r3, #1
 800e96e:	b2da      	uxtb	r2, r3
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e978:	0b9b      	lsrs	r3, r3, #14
 800e97a:	b2db      	uxtb	r3, r3
 800e97c:	f003 0301 	and.w	r3, r3, #1
 800e980:	b2da      	uxtb	r2, r3
 800e982:	683b      	ldr	r3, [r7, #0]
 800e984:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e98a:	0b5b      	lsrs	r3, r3, #13
 800e98c:	b2db      	uxtb	r3, r3
 800e98e:	f003 0301 	and.w	r3, r3, #1
 800e992:	b2da      	uxtb	r2, r3
 800e994:	683b      	ldr	r3, [r7, #0]
 800e996:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e99c:	0b1b      	lsrs	r3, r3, #12
 800e99e:	b2db      	uxtb	r3, r3
 800e9a0:	f003 0301 	and.w	r3, r3, #1
 800e9a4:	b2da      	uxtb	r2, r3
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d163      	bne.n	800ea80 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e9bc:	009a      	lsls	r2, r3, #2
 800e9be:	f640 73fc 	movw	r3, #4092	; 0xffc
 800e9c2:	4013      	ands	r3, r2
 800e9c4:	687a      	ldr	r2, [r7, #4]
 800e9c6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800e9c8:	0f92      	lsrs	r2, r2, #30
 800e9ca:	431a      	orrs	r2, r3
 800e9cc:	683b      	ldr	r3, [r7, #0]
 800e9ce:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e9d4:	0edb      	lsrs	r3, r3, #27
 800e9d6:	b2db      	uxtb	r3, r3
 800e9d8:	f003 0307 	and.w	r3, r3, #7
 800e9dc:	b2da      	uxtb	r2, r3
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e9e6:	0e1b      	lsrs	r3, r3, #24
 800e9e8:	b2db      	uxtb	r3, r3
 800e9ea:	f003 0307 	and.w	r3, r3, #7
 800e9ee:	b2da      	uxtb	r2, r3
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e9f8:	0d5b      	lsrs	r3, r3, #21
 800e9fa:	b2db      	uxtb	r3, r3
 800e9fc:	f003 0307 	and.w	r3, r3, #7
 800ea00:	b2da      	uxtb	r2, r3
 800ea02:	683b      	ldr	r3, [r7, #0]
 800ea04:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea0a:	0c9b      	lsrs	r3, r3, #18
 800ea0c:	b2db      	uxtb	r3, r3
 800ea0e:	f003 0307 	and.w	r3, r3, #7
 800ea12:	b2da      	uxtb	r2, r3
 800ea14:	683b      	ldr	r3, [r7, #0]
 800ea16:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea1c:	0bdb      	lsrs	r3, r3, #15
 800ea1e:	b2db      	uxtb	r3, r3
 800ea20:	f003 0307 	and.w	r3, r3, #7
 800ea24:	b2da      	uxtb	r2, r3
 800ea26:	683b      	ldr	r3, [r7, #0]
 800ea28:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	691b      	ldr	r3, [r3, #16]
 800ea2e:	1c5a      	adds	r2, r3, #1
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	7e1b      	ldrb	r3, [r3, #24]
 800ea38:	b2db      	uxtb	r3, r3
 800ea3a:	f003 0307 	and.w	r3, r3, #7
 800ea3e:	3302      	adds	r3, #2
 800ea40:	2201      	movs	r2, #1
 800ea42:	fa02 f303 	lsl.w	r3, r2, r3
 800ea46:	687a      	ldr	r2, [r7, #4]
 800ea48:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ea4a:	fb03 f202 	mul.w	r2, r3, r2
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ea52:	683b      	ldr	r3, [r7, #0]
 800ea54:	7a1b      	ldrb	r3, [r3, #8]
 800ea56:	b2db      	uxtb	r3, r3
 800ea58:	f003 030f 	and.w	r3, r3, #15
 800ea5c:	2201      	movs	r2, #1
 800ea5e:	409a      	lsls	r2, r3
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea68:	687a      	ldr	r2, [r7, #4]
 800ea6a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800ea6c:	0a52      	lsrs	r2, r2, #9
 800ea6e:	fb03 f202 	mul.w	r2, r3, r2
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ea7c:	655a      	str	r2, [r3, #84]	; 0x54
 800ea7e:	e031      	b.n	800eae4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea84:	2b01      	cmp	r3, #1
 800ea86:	d11d      	bne.n	800eac4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ea8c:	041b      	lsls	r3, r3, #16
 800ea8e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea96:	0c1b      	lsrs	r3, r3, #16
 800ea98:	431a      	orrs	r2, r3
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	691b      	ldr	r3, [r3, #16]
 800eaa2:	3301      	adds	r3, #1
 800eaa4:	029a      	lsls	r2, r3, #10
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eab8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	655a      	str	r2, [r3, #84]	; 0x54
 800eac2:	e00f      	b.n	800eae4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	4a58      	ldr	r2, [pc, #352]	; (800ec2c <HAL_SD_GetCardCSD+0x344>)
 800eaca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ead0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2201      	movs	r2, #1
 800eadc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800eae0:	2301      	movs	r3, #1
 800eae2:	e09d      	b.n	800ec20 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eae8:	0b9b      	lsrs	r3, r3, #14
 800eaea:	b2db      	uxtb	r3, r3
 800eaec:	f003 0301 	and.w	r3, r3, #1
 800eaf0:	b2da      	uxtb	r2, r3
 800eaf2:	683b      	ldr	r3, [r7, #0]
 800eaf4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eafa:	09db      	lsrs	r3, r3, #7
 800eafc:	b2db      	uxtb	r3, r3
 800eafe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb02:	b2da      	uxtb	r2, r3
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eb0c:	b2db      	uxtb	r3, r3
 800eb0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb12:	b2da      	uxtb	r2, r3
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb1c:	0fdb      	lsrs	r3, r3, #31
 800eb1e:	b2da      	uxtb	r2, r3
 800eb20:	683b      	ldr	r3, [r7, #0]
 800eb22:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb28:	0f5b      	lsrs	r3, r3, #29
 800eb2a:	b2db      	uxtb	r3, r3
 800eb2c:	f003 0303 	and.w	r3, r3, #3
 800eb30:	b2da      	uxtb	r2, r3
 800eb32:	683b      	ldr	r3, [r7, #0]
 800eb34:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb3a:	0e9b      	lsrs	r3, r3, #26
 800eb3c:	b2db      	uxtb	r3, r3
 800eb3e:	f003 0307 	and.w	r3, r3, #7
 800eb42:	b2da      	uxtb	r2, r3
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb4c:	0d9b      	lsrs	r3, r3, #22
 800eb4e:	b2db      	uxtb	r3, r3
 800eb50:	f003 030f 	and.w	r3, r3, #15
 800eb54:	b2da      	uxtb	r2, r3
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb5e:	0d5b      	lsrs	r3, r3, #21
 800eb60:	b2db      	uxtb	r3, r3
 800eb62:	f003 0301 	and.w	r3, r3, #1
 800eb66:	b2da      	uxtb	r2, r3
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800eb6e:	683b      	ldr	r3, [r7, #0]
 800eb70:	2200      	movs	r2, #0
 800eb72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb7a:	0c1b      	lsrs	r3, r3, #16
 800eb7c:	b2db      	uxtb	r3, r3
 800eb7e:	f003 0301 	and.w	r3, r3, #1
 800eb82:	b2da      	uxtb	r2, r3
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb8e:	0bdb      	lsrs	r3, r3, #15
 800eb90:	b2db      	uxtb	r3, r3
 800eb92:	f003 0301 	and.w	r3, r3, #1
 800eb96:	b2da      	uxtb	r2, r3
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eba2:	0b9b      	lsrs	r3, r3, #14
 800eba4:	b2db      	uxtb	r3, r3
 800eba6:	f003 0301 	and.w	r3, r3, #1
 800ebaa:	b2da      	uxtb	r2, r3
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ebb6:	0b5b      	lsrs	r3, r3, #13
 800ebb8:	b2db      	uxtb	r3, r3
 800ebba:	f003 0301 	and.w	r3, r3, #1
 800ebbe:	b2da      	uxtb	r2, r3
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ebca:	0b1b      	lsrs	r3, r3, #12
 800ebcc:	b2db      	uxtb	r3, r3
 800ebce:	f003 0301 	and.w	r3, r3, #1
 800ebd2:	b2da      	uxtb	r2, r3
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ebde:	0a9b      	lsrs	r3, r3, #10
 800ebe0:	b2db      	uxtb	r3, r3
 800ebe2:	f003 0303 	and.w	r3, r3, #3
 800ebe6:	b2da      	uxtb	r2, r3
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ebf2:	0a1b      	lsrs	r3, r3, #8
 800ebf4:	b2db      	uxtb	r3, r3
 800ebf6:	f003 0303 	and.w	r3, r3, #3
 800ebfa:	b2da      	uxtb	r2, r3
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ec06:	085b      	lsrs	r3, r3, #1
 800ec08:	b2db      	uxtb	r3, r3
 800ec0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec0e:	b2da      	uxtb	r2, r3
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	2201      	movs	r2, #1
 800ec1a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800ec1e:	2300      	movs	r3, #0
}
 800ec20:	4618      	mov	r0, r3
 800ec22:	370c      	adds	r7, #12
 800ec24:	46bd      	mov	sp, r7
 800ec26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2a:	4770      	bx	lr
 800ec2c:	1fe00fff 	.word	0x1fe00fff

0800ec30 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b094      	sub	sp, #80	; 0x50
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
 800ec38:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ec46:	b2db      	uxtb	r3, r3
 800ec48:	2b03      	cmp	r3, #3
 800ec4a:	d101      	bne.n	800ec50 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	e0a7      	b.n	800eda0 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800ec50:	f107 0308 	add.w	r3, r7, #8
 800ec54:	4619      	mov	r1, r3
 800ec56:	6878      	ldr	r0, [r7, #4]
 800ec58:	f000 fb62 	bl	800f320 <SD_SendSDStatus>
 800ec5c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800ec5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d011      	beq.n	800ec88 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	4a4f      	ldr	r2, [pc, #316]	; (800eda8 <HAL_SD_GetCardStatus+0x178>)
 800ec6a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ec70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec72:	431a      	orrs	r2, r3
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2201      	movs	r2, #1
 800ec7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800ec80:	2301      	movs	r3, #1
 800ec82:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ec86:	e070      	b.n	800ed6a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800ec88:	68bb      	ldr	r3, [r7, #8]
 800ec8a:	099b      	lsrs	r3, r3, #6
 800ec8c:	b2db      	uxtb	r3, r3
 800ec8e:	f003 0303 	and.w	r3, r3, #3
 800ec92:	b2da      	uxtb	r2, r3
 800ec94:	683b      	ldr	r3, [r7, #0]
 800ec96:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800ec98:	68bb      	ldr	r3, [r7, #8]
 800ec9a:	095b      	lsrs	r3, r3, #5
 800ec9c:	b2db      	uxtb	r3, r3
 800ec9e:	f003 0301 	and.w	r3, r3, #1
 800eca2:	b2da      	uxtb	r2, r3
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800eca8:	68bb      	ldr	r3, [r7, #8]
 800ecaa:	0a1b      	lsrs	r3, r3, #8
 800ecac:	b29b      	uxth	r3, r3
 800ecae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ecb2:	b29a      	uxth	r2, r3
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	0e1b      	lsrs	r3, r3, #24
 800ecb8:	b29b      	uxth	r3, r3
 800ecba:	4313      	orrs	r3, r2
 800ecbc:	b29a      	uxth	r2, r3
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	061a      	lsls	r2, r3, #24
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	021b      	lsls	r3, r3, #8
 800ecca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ecce:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	0a1b      	lsrs	r3, r3, #8
 800ecd4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ecd8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	0e1b      	lsrs	r3, r3, #24
 800ecde:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ece0:	683b      	ldr	r3, [r7, #0]
 800ece2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800ece4:	693b      	ldr	r3, [r7, #16]
 800ece6:	b2da      	uxtb	r2, r3
 800ece8:	683b      	ldr	r3, [r7, #0]
 800ecea:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800ecec:	693b      	ldr	r3, [r7, #16]
 800ecee:	0a1b      	lsrs	r3, r3, #8
 800ecf0:	b2da      	uxtb	r2, r3
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800ecf6:	693b      	ldr	r3, [r7, #16]
 800ecf8:	0d1b      	lsrs	r3, r3, #20
 800ecfa:	b2db      	uxtb	r3, r3
 800ecfc:	f003 030f 	and.w	r3, r3, #15
 800ed00:	b2da      	uxtb	r2, r3
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800ed06:	693b      	ldr	r3, [r7, #16]
 800ed08:	0c1b      	lsrs	r3, r3, #16
 800ed0a:	b29b      	uxth	r3, r3
 800ed0c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ed10:	b29a      	uxth	r2, r3
 800ed12:	697b      	ldr	r3, [r7, #20]
 800ed14:	b29b      	uxth	r3, r3
 800ed16:	b2db      	uxtb	r3, r3
 800ed18:	b29b      	uxth	r3, r3
 800ed1a:	4313      	orrs	r3, r2
 800ed1c:	b29a      	uxth	r2, r3
 800ed1e:	683b      	ldr	r3, [r7, #0]
 800ed20:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800ed22:	697b      	ldr	r3, [r7, #20]
 800ed24:	0a9b      	lsrs	r3, r3, #10
 800ed26:	b2db      	uxtb	r3, r3
 800ed28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ed2c:	b2da      	uxtb	r2, r3
 800ed2e:	683b      	ldr	r3, [r7, #0]
 800ed30:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800ed32:	697b      	ldr	r3, [r7, #20]
 800ed34:	0a1b      	lsrs	r3, r3, #8
 800ed36:	b2db      	uxtb	r3, r3
 800ed38:	f003 0303 	and.w	r3, r3, #3
 800ed3c:	b2da      	uxtb	r2, r3
 800ed3e:	683b      	ldr	r3, [r7, #0]
 800ed40:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800ed42:	697b      	ldr	r3, [r7, #20]
 800ed44:	091b      	lsrs	r3, r3, #4
 800ed46:	b2db      	uxtb	r3, r3
 800ed48:	f003 030f 	and.w	r3, r3, #15
 800ed4c:	b2da      	uxtb	r2, r3
 800ed4e:	683b      	ldr	r3, [r7, #0]
 800ed50:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800ed52:	697b      	ldr	r3, [r7, #20]
 800ed54:	b2db      	uxtb	r3, r3
 800ed56:	f003 030f 	and.w	r3, r3, #15
 800ed5a:	b2da      	uxtb	r2, r3
 800ed5c:	683b      	ldr	r3, [r7, #0]
 800ed5e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800ed60:	69bb      	ldr	r3, [r7, #24]
 800ed62:	0e1b      	lsrs	r3, r3, #24
 800ed64:	b2da      	uxtb	r2, r3
 800ed66:	683b      	ldr	r3, [r7, #0]
 800ed68:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ed72:	4618      	mov	r0, r3
 800ed74:	f004 f8c6 	bl	8012f04 <SDMMC_CmdBlockLength>
 800ed78:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800ed7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d00d      	beq.n	800ed9c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	4a08      	ldr	r2, [pc, #32]	; (800eda8 <HAL_SD_GetCardStatus+0x178>)
 800ed86:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ed8c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	2201      	movs	r2, #1
 800ed92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800ed96:	2301      	movs	r3, #1
 800ed98:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800ed9c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800eda0:	4618      	mov	r0, r3
 800eda2:	3750      	adds	r7, #80	; 0x50
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd80      	pop	{r7, pc}
 800eda8:	1fe00fff 	.word	0x1fe00fff

0800edac <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800edac:	b480      	push	{r7}
 800edae:	b083      	sub	sp, #12
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
 800edb4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800edba:	683b      	ldr	r3, [r7, #0]
 800edbc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800edc2:	683b      	ldr	r3, [r7, #0]
 800edc4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800edd2:	683b      	ldr	r3, [r7, #0]
 800edd4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800edda:	683b      	ldr	r3, [r7, #0]
 800eddc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800edea:	683b      	ldr	r3, [r7, #0]
 800edec:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800edf6:	2300      	movs	r3, #0
}
 800edf8:	4618      	mov	r0, r3
 800edfa:	370c      	adds	r7, #12
 800edfc:	46bd      	mov	sp, r7
 800edfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee02:	4770      	bx	lr

0800ee04 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ee04:	b590      	push	{r4, r7, lr}
 800ee06:	b08d      	sub	sp, #52	; 0x34
 800ee08:	af02      	add	r7, sp, #8
 800ee0a:	6078      	str	r0, [r7, #4]
 800ee0c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2203      	movs	r2, #3
 800ee18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee20:	2b03      	cmp	r3, #3
 800ee22:	d02e      	beq.n	800ee82 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800ee24:	683b      	ldr	r3, [r7, #0]
 800ee26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ee2a:	d106      	bne.n	800ee3a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee30:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	635a      	str	r2, [r3, #52]	; 0x34
 800ee38:	e029      	b.n	800ee8e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ee40:	d10a      	bne.n	800ee58 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ee42:	6878      	ldr	r0, [r7, #4]
 800ee44:	f000 fb64 	bl	800f510 <SD_WideBus_Enable>
 800ee48:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ee4e:	6a3b      	ldr	r3, [r7, #32]
 800ee50:	431a      	orrs	r2, r3
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	635a      	str	r2, [r3, #52]	; 0x34
 800ee56:	e01a      	b.n	800ee8e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800ee58:	683b      	ldr	r3, [r7, #0]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d10a      	bne.n	800ee74 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ee5e:	6878      	ldr	r0, [r7, #4]
 800ee60:	f000 fba1 	bl	800f5a6 <SD_WideBus_Disable>
 800ee64:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ee6a:	6a3b      	ldr	r3, [r7, #32]
 800ee6c:	431a      	orrs	r2, r3
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	635a      	str	r2, [r3, #52]	; 0x34
 800ee72:	e00c      	b.n	800ee8e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee78:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	635a      	str	r2, [r3, #52]	; 0x34
 800ee80:	e005      	b.n	800ee8e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee86:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d007      	beq.n	800eea6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	4a5f      	ldr	r2, [pc, #380]	; (800f018 <HAL_SD_ConfigWideBusOperation+0x214>)
 800ee9c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800ee9e:	2301      	movs	r3, #1
 800eea0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eea4:	e096      	b.n	800efd4 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800eea6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800eeaa:	f04f 0100 	mov.w	r1, #0
 800eeae:	f7fd fea3 	bl	800cbf8 <HAL_RCCEx_GetPeriphCLKFreq>
 800eeb2:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800eeb4:	69fb      	ldr	r3, [r7, #28]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	f000 8083 	beq.w	800efc2 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	685b      	ldr	r3, [r3, #4]
 800eec0:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	689b      	ldr	r3, [r3, #8]
 800eec6:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800eec8:	683b      	ldr	r3, [r7, #0]
 800eeca:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	691b      	ldr	r3, [r3, #16]
 800eed0:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	695a      	ldr	r2, [r3, #20]
 800eed6:	69fb      	ldr	r3, [r7, #28]
 800eed8:	4950      	ldr	r1, [pc, #320]	; (800f01c <HAL_SD_ConfigWideBusOperation+0x218>)
 800eeda:	fba1 1303 	umull	r1, r3, r1, r3
 800eede:	0e1b      	lsrs	r3, r3, #24
 800eee0:	429a      	cmp	r2, r3
 800eee2:	d303      	bcc.n	800eeec <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	695b      	ldr	r3, [r3, #20]
 800eee8:	61bb      	str	r3, [r7, #24]
 800eeea:	e05a      	b.n	800efa2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eef4:	d103      	bne.n	800eefe <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	695b      	ldr	r3, [r3, #20]
 800eefa:	61bb      	str	r3, [r7, #24]
 800eefc:	e051      	b.n	800efa2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ef06:	d126      	bne.n	800ef56 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	695b      	ldr	r3, [r3, #20]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d10e      	bne.n	800ef2e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800ef10:	69fb      	ldr	r3, [r7, #28]
 800ef12:	4a43      	ldr	r2, [pc, #268]	; (800f020 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ef14:	4293      	cmp	r3, r2
 800ef16:	d906      	bls.n	800ef26 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ef18:	69fb      	ldr	r3, [r7, #28]
 800ef1a:	4a40      	ldr	r2, [pc, #256]	; (800f01c <HAL_SD_ConfigWideBusOperation+0x218>)
 800ef1c:	fba2 2303 	umull	r2, r3, r2, r3
 800ef20:	0e5b      	lsrs	r3, r3, #25
 800ef22:	61bb      	str	r3, [r7, #24]
 800ef24:	e03d      	b.n	800efa2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	695b      	ldr	r3, [r3, #20]
 800ef2a:	61bb      	str	r3, [r7, #24]
 800ef2c:	e039      	b.n	800efa2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	695b      	ldr	r3, [r3, #20]
 800ef32:	005b      	lsls	r3, r3, #1
 800ef34:	69fa      	ldr	r2, [r7, #28]
 800ef36:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef3a:	4a39      	ldr	r2, [pc, #228]	; (800f020 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ef3c:	4293      	cmp	r3, r2
 800ef3e:	d906      	bls.n	800ef4e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ef40:	69fb      	ldr	r3, [r7, #28]
 800ef42:	4a36      	ldr	r2, [pc, #216]	; (800f01c <HAL_SD_ConfigWideBusOperation+0x218>)
 800ef44:	fba2 2303 	umull	r2, r3, r2, r3
 800ef48:	0e5b      	lsrs	r3, r3, #25
 800ef4a:	61bb      	str	r3, [r7, #24]
 800ef4c:	e029      	b.n	800efa2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	695b      	ldr	r3, [r3, #20]
 800ef52:	61bb      	str	r3, [r7, #24]
 800ef54:	e025      	b.n	800efa2 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	695b      	ldr	r3, [r3, #20]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d10e      	bne.n	800ef7c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800ef5e:	69fb      	ldr	r3, [r7, #28]
 800ef60:	4a30      	ldr	r2, [pc, #192]	; (800f024 <HAL_SD_ConfigWideBusOperation+0x220>)
 800ef62:	4293      	cmp	r3, r2
 800ef64:	d906      	bls.n	800ef74 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ef66:	69fb      	ldr	r3, [r7, #28]
 800ef68:	4a2c      	ldr	r2, [pc, #176]	; (800f01c <HAL_SD_ConfigWideBusOperation+0x218>)
 800ef6a:	fba2 2303 	umull	r2, r3, r2, r3
 800ef6e:	0e1b      	lsrs	r3, r3, #24
 800ef70:	61bb      	str	r3, [r7, #24]
 800ef72:	e016      	b.n	800efa2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	695b      	ldr	r3, [r3, #20]
 800ef78:	61bb      	str	r3, [r7, #24]
 800ef7a:	e012      	b.n	800efa2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	695b      	ldr	r3, [r3, #20]
 800ef80:	005b      	lsls	r3, r3, #1
 800ef82:	69fa      	ldr	r2, [r7, #28]
 800ef84:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef88:	4a26      	ldr	r2, [pc, #152]	; (800f024 <HAL_SD_ConfigWideBusOperation+0x220>)
 800ef8a:	4293      	cmp	r3, r2
 800ef8c:	d906      	bls.n	800ef9c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ef8e:	69fb      	ldr	r3, [r7, #28]
 800ef90:	4a22      	ldr	r2, [pc, #136]	; (800f01c <HAL_SD_ConfigWideBusOperation+0x218>)
 800ef92:	fba2 2303 	umull	r2, r3, r2, r3
 800ef96:	0e1b      	lsrs	r3, r3, #24
 800ef98:	61bb      	str	r3, [r7, #24]
 800ef9a:	e002      	b.n	800efa2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	695b      	ldr	r3, [r3, #20]
 800efa0:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	681c      	ldr	r4, [r3, #0]
 800efa6:	466a      	mov	r2, sp
 800efa8:	f107 0314 	add.w	r3, r7, #20
 800efac:	e893 0003 	ldmia.w	r3, {r0, r1}
 800efb0:	e882 0003 	stmia.w	r2, {r0, r1}
 800efb4:	f107 0308 	add.w	r3, r7, #8
 800efb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800efba:	4620      	mov	r0, r4
 800efbc:	f003 fec4 	bl	8012d48 <SDMMC_Init>
 800efc0:	e008      	b.n	800efd4 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efc6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800efce:	2301      	movs	r3, #1
 800efd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800efdc:	4618      	mov	r0, r3
 800efde:	f003 ff91 	bl	8012f04 <SDMMC_CmdBlockLength>
 800efe2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800efe4:	6a3b      	ldr	r3, [r7, #32]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d00c      	beq.n	800f004 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	4a0a      	ldr	r2, [pc, #40]	; (800f018 <HAL_SD_ConfigWideBusOperation+0x214>)
 800eff0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eff6:	6a3b      	ldr	r3, [r7, #32]
 800eff8:	431a      	orrs	r2, r3
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800effe:	2301      	movs	r3, #1
 800f000:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2201      	movs	r2, #1
 800f008:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800f00c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800f010:	4618      	mov	r0, r3
 800f012:	372c      	adds	r7, #44	; 0x2c
 800f014:	46bd      	mov	sp, r7
 800f016:	bd90      	pop	{r4, r7, pc}
 800f018:	1fe00fff 	.word	0x1fe00fff
 800f01c:	55e63b89 	.word	0x55e63b89
 800f020:	02faf080 	.word	0x02faf080
 800f024:	017d7840 	.word	0x017d7840

0800f028 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b086      	sub	sp, #24
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800f030:	2300      	movs	r3, #0
 800f032:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800f034:	f107 030c 	add.w	r3, r7, #12
 800f038:	4619      	mov	r1, r3
 800f03a:	6878      	ldr	r0, [r7, #4]
 800f03c:	f000 fa40 	bl	800f4c0 <SD_SendStatus>
 800f040:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f042:	697b      	ldr	r3, [r7, #20]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d005      	beq.n	800f054 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f04c:	697b      	ldr	r3, [r7, #20]
 800f04e:	431a      	orrs	r2, r3
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	0a5b      	lsrs	r3, r3, #9
 800f058:	f003 030f 	and.w	r3, r3, #15
 800f05c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800f05e:	693b      	ldr	r3, [r7, #16]
}
 800f060:	4618      	mov	r0, r3
 800f062:	3718      	adds	r7, #24
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}

0800f068 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b090      	sub	sp, #64	; 0x40
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800f070:	2300      	movs	r3, #0
 800f072:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800f074:	f7f5 f928 	bl	80042c8 <HAL_GetTick>
 800f078:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	4618      	mov	r0, r3
 800f080:	f003 febb 	bl	8012dfa <SDMMC_GetPowerState>
 800f084:	4603      	mov	r3, r0
 800f086:	2b00      	cmp	r3, #0
 800f088:	d102      	bne.n	800f090 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f08a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800f08e:	e0b5      	b.n	800f1fc <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f094:	2b03      	cmp	r3, #3
 800f096:	d02e      	beq.n	800f0f6 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	4618      	mov	r0, r3
 800f09e:	f004 f906 	bl	80132ae <SDMMC_CmdSendCID>
 800f0a2:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800f0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d001      	beq.n	800f0ae <SD_InitCard+0x46>
    {
      return errorstate;
 800f0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ac:	e0a6      	b.n	800f1fc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	2100      	movs	r1, #0
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	f003 fee6 	bl	8012e86 <SDMMC_GetResponse>
 800f0ba:	4602      	mov	r2, r0
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	2104      	movs	r1, #4
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f003 fedd 	bl	8012e86 <SDMMC_GetResponse>
 800f0cc:	4602      	mov	r2, r0
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	2108      	movs	r1, #8
 800f0d8:	4618      	mov	r0, r3
 800f0da:	f003 fed4 	bl	8012e86 <SDMMC_GetResponse>
 800f0de:	4602      	mov	r2, r0
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	210c      	movs	r1, #12
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	f003 fecb 	bl	8012e86 <SDMMC_GetResponse>
 800f0f0:	4602      	mov	r2, r0
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0fa:	2b03      	cmp	r3, #3
 800f0fc:	d01d      	beq.n	800f13a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800f0fe:	e019      	b.n	800f134 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	f107 020a 	add.w	r2, r7, #10
 800f108:	4611      	mov	r1, r2
 800f10a:	4618      	mov	r0, r3
 800f10c:	f004 f90e 	bl	801332c <SDMMC_CmdSetRelAdd>
 800f110:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800f112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f114:	2b00      	cmp	r3, #0
 800f116:	d001      	beq.n	800f11c <SD_InitCard+0xb4>
      {
        return errorstate;
 800f118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f11a:	e06f      	b.n	800f1fc <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800f11c:	f7f5 f8d4 	bl	80042c8 <HAL_GetTick>
 800f120:	4602      	mov	r2, r0
 800f122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f124:	1ad3      	subs	r3, r2, r3
 800f126:	f241 3287 	movw	r2, #4999	; 0x1387
 800f12a:	4293      	cmp	r3, r2
 800f12c:	d902      	bls.n	800f134 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800f12e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f132:	e063      	b.n	800f1fc <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800f134:	897b      	ldrh	r3, [r7, #10]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d0e2      	beq.n	800f100 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f13e:	2b03      	cmp	r3, #3
 800f140:	d036      	beq.n	800f1b0 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800f142:	897b      	ldrh	r3, [r7, #10]
 800f144:	461a      	mov	r2, r3
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	681a      	ldr	r2, [r3, #0]
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f152:	041b      	lsls	r3, r3, #16
 800f154:	4619      	mov	r1, r3
 800f156:	4610      	mov	r0, r2
 800f158:	f004 f8c8 	bl	80132ec <SDMMC_CmdSendCSD>
 800f15c:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800f15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f160:	2b00      	cmp	r3, #0
 800f162:	d001      	beq.n	800f168 <SD_InitCard+0x100>
    {
      return errorstate;
 800f164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f166:	e049      	b.n	800f1fc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	2100      	movs	r1, #0
 800f16e:	4618      	mov	r0, r3
 800f170:	f003 fe89 	bl	8012e86 <SDMMC_GetResponse>
 800f174:	4602      	mov	r2, r0
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	2104      	movs	r1, #4
 800f180:	4618      	mov	r0, r3
 800f182:	f003 fe80 	bl	8012e86 <SDMMC_GetResponse>
 800f186:	4602      	mov	r2, r0
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	2108      	movs	r1, #8
 800f192:	4618      	mov	r0, r3
 800f194:	f003 fe77 	bl	8012e86 <SDMMC_GetResponse>
 800f198:	4602      	mov	r2, r0
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	210c      	movs	r1, #12
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	f003 fe6e 	bl	8012e86 <SDMMC_GetResponse>
 800f1aa:	4602      	mov	r2, r0
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	2104      	movs	r1, #4
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	f003 fe65 	bl	8012e86 <SDMMC_GetResponse>
 800f1bc:	4603      	mov	r3, r0
 800f1be:	0d1a      	lsrs	r2, r3, #20
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800f1c4:	f107 030c 	add.w	r3, r7, #12
 800f1c8:	4619      	mov	r1, r3
 800f1ca:	6878      	ldr	r0, [r7, #4]
 800f1cc:	f7ff fb8c 	bl	800e8e8 <HAL_SD_GetCardCSD>
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d002      	beq.n	800f1dc <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f1d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f1da:	e00f      	b.n	800f1fc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	681a      	ldr	r2, [r3, #0]
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1e4:	041b      	lsls	r3, r3, #16
 800f1e6:	4619      	mov	r1, r3
 800f1e8:	4610      	mov	r0, r2
 800f1ea:	f003 ff77 	bl	80130dc <SDMMC_CmdSelDesel>
 800f1ee:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800f1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d001      	beq.n	800f1fa <SD_InitCard+0x192>
  {
    return errorstate;
 800f1f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1f8:	e000      	b.n	800f1fc <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800f1fa:	2300      	movs	r3, #0
}
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	3740      	adds	r7, #64	; 0x40
 800f200:	46bd      	mov	sp, r7
 800f202:	bd80      	pop	{r7, pc}

0800f204 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800f204:	b580      	push	{r7, lr}
 800f206:	b086      	sub	sp, #24
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f20c:	2300      	movs	r3, #0
 800f20e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800f210:	2300      	movs	r3, #0
 800f212:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800f214:	2300      	movs	r3, #0
 800f216:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	4618      	mov	r0, r3
 800f21e:	f003 ff80 	bl	8013122 <SDMMC_CmdGoIdleState>
 800f222:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d001      	beq.n	800f22e <SD_PowerON+0x2a>
  {
    return errorstate;
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	e072      	b.n	800f314 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	4618      	mov	r0, r3
 800f234:	f003 ff93 	bl	801315e <SDMMC_CmdOperCond>
 800f238:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f240:	d10d      	bne.n	800f25e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	2200      	movs	r2, #0
 800f246:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	4618      	mov	r0, r3
 800f24e:	f003 ff68 	bl	8013122 <SDMMC_CmdGoIdleState>
 800f252:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d004      	beq.n	800f264 <SD_PowerON+0x60>
    {
      return errorstate;
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	e05a      	b.n	800f314 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	2201      	movs	r2, #1
 800f262:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f268:	2b01      	cmp	r3, #1
 800f26a:	d137      	bne.n	800f2dc <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	2100      	movs	r1, #0
 800f272:	4618      	mov	r0, r3
 800f274:	f003 ff93 	bl	801319e <SDMMC_CmdAppCommand>
 800f278:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d02d      	beq.n	800f2dc <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f280:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f284:	e046      	b.n	800f314 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	2100      	movs	r1, #0
 800f28c:	4618      	mov	r0, r3
 800f28e:	f003 ff86 	bl	801319e <SDMMC_CmdAppCommand>
 800f292:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d001      	beq.n	800f29e <SD_PowerON+0x9a>
    {
      return errorstate;
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	e03a      	b.n	800f314 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	491e      	ldr	r1, [pc, #120]	; (800f31c <SD_PowerON+0x118>)
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	f003 ff9d 	bl	80131e4 <SDMMC_CmdAppOperCommand>
 800f2aa:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d002      	beq.n	800f2b8 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f2b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f2b6:	e02d      	b.n	800f314 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	2100      	movs	r1, #0
 800f2be:	4618      	mov	r0, r3
 800f2c0:	f003 fde1 	bl	8012e86 <SDMMC_GetResponse>
 800f2c4:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800f2c6:	697b      	ldr	r3, [r7, #20]
 800f2c8:	0fdb      	lsrs	r3, r3, #31
 800f2ca:	2b01      	cmp	r3, #1
 800f2cc:	d101      	bne.n	800f2d2 <SD_PowerON+0xce>
 800f2ce:	2301      	movs	r3, #1
 800f2d0:	e000      	b.n	800f2d4 <SD_PowerON+0xd0>
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	613b      	str	r3, [r7, #16]

    count++;
 800f2d6:	68bb      	ldr	r3, [r7, #8]
 800f2d8:	3301      	adds	r3, #1
 800f2da:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800f2dc:	68bb      	ldr	r3, [r7, #8]
 800f2de:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f2e2:	4293      	cmp	r3, r2
 800f2e4:	d802      	bhi.n	800f2ec <SD_PowerON+0xe8>
 800f2e6:	693b      	ldr	r3, [r7, #16]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d0cc      	beq.n	800f286 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f2f2:	4293      	cmp	r3, r2
 800f2f4:	d902      	bls.n	800f2fc <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800f2f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f2fa:	e00b      	b.n	800f314 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2200      	movs	r2, #0
 800f300:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800f302:	697b      	ldr	r3, [r7, #20]
 800f304:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d002      	beq.n	800f312 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	2201      	movs	r2, #1
 800f310:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800f312:	2300      	movs	r3, #0
}
 800f314:	4618      	mov	r0, r3
 800f316:	3718      	adds	r7, #24
 800f318:	46bd      	mov	sp, r7
 800f31a:	bd80      	pop	{r7, pc}
 800f31c:	c1100000 	.word	0xc1100000

0800f320 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b08c      	sub	sp, #48	; 0x30
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
 800f328:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f32a:	f7f4 ffcd 	bl	80042c8 <HAL_GetTick>
 800f32e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	2100      	movs	r1, #0
 800f33a:	4618      	mov	r0, r3
 800f33c:	f003 fda3 	bl	8012e86 <SDMMC_GetResponse>
 800f340:	4603      	mov	r3, r0
 800f342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f346:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f34a:	d102      	bne.n	800f352 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f34c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f350:	e0b0      	b.n	800f4b4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	2140      	movs	r1, #64	; 0x40
 800f358:	4618      	mov	r0, r3
 800f35a:	f003 fdd3 	bl	8012f04 <SDMMC_CmdBlockLength>
 800f35e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f360:	6a3b      	ldr	r3, [r7, #32]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d005      	beq.n	800f372 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800f36e:	6a3b      	ldr	r3, [r7, #32]
 800f370:	e0a0      	b.n	800f4b4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	681a      	ldr	r2, [r3, #0]
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f37a:	041b      	lsls	r3, r3, #16
 800f37c:	4619      	mov	r1, r3
 800f37e:	4610      	mov	r0, r2
 800f380:	f003 ff0d 	bl	801319e <SDMMC_CmdAppCommand>
 800f384:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f386:	6a3b      	ldr	r3, [r7, #32]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d005      	beq.n	800f398 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800f394:	6a3b      	ldr	r3, [r7, #32]
 800f396:	e08d      	b.n	800f4b4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f398:	f04f 33ff 	mov.w	r3, #4294967295
 800f39c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800f39e:	2340      	movs	r3, #64	; 0x40
 800f3a0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800f3a2:	2360      	movs	r3, #96	; 0x60
 800f3a4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f3a6:	2302      	movs	r3, #2
 800f3a8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f3ae:	2301      	movs	r3, #1
 800f3b0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	f107 0208 	add.w	r2, r7, #8
 800f3ba:	4611      	mov	r1, r2
 800f3bc:	4618      	mov	r0, r3
 800f3be:	f003 fd75 	bl	8012eac <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	f003 fff5 	bl	80133b6 <SDMMC_CmdStatusRegister>
 800f3cc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f3ce:	6a3b      	ldr	r3, [r7, #32]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d02b      	beq.n	800f42c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800f3dc:	6a3b      	ldr	r3, [r7, #32]
 800f3de:	e069      	b.n	800f4b4 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d013      	beq.n	800f416 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f3f2:	e00d      	b.n	800f410 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	f003 fccf 	bl	8012d9c <SDMMC_ReadFIFO>
 800f3fe:	4602      	mov	r2, r0
 800f400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f402:	601a      	str	r2, [r3, #0]
        pData++;
 800f404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f406:	3304      	adds	r3, #4
 800f408:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800f40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f40c:	3301      	adds	r3, #1
 800f40e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f412:	2b07      	cmp	r3, #7
 800f414:	d9ee      	bls.n	800f3f4 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f416:	f7f4 ff57 	bl	80042c8 <HAL_GetTick>
 800f41a:	4602      	mov	r2, r0
 800f41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f41e:	1ad3      	subs	r3, r2, r3
 800f420:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f424:	d102      	bne.n	800f42c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f426:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f42a:	e043      	b.n	800f4b4 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f432:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800f436:	2b00      	cmp	r3, #0
 800f438:	d0d2      	beq.n	800f3e0 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f440:	f003 0308 	and.w	r3, r3, #8
 800f444:	2b00      	cmp	r3, #0
 800f446:	d001      	beq.n	800f44c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f448:	2308      	movs	r3, #8
 800f44a:	e033      	b.n	800f4b4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f452:	f003 0302 	and.w	r3, r3, #2
 800f456:	2b00      	cmp	r3, #0
 800f458:	d001      	beq.n	800f45e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f45a:	2302      	movs	r3, #2
 800f45c:	e02a      	b.n	800f4b4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f464:	f003 0320 	and.w	r3, r3, #32
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d017      	beq.n	800f49c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800f46c:	2320      	movs	r3, #32
 800f46e:	e021      	b.n	800f4b4 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	4618      	mov	r0, r3
 800f476:	f003 fc91 	bl	8012d9c <SDMMC_ReadFIFO>
 800f47a:	4602      	mov	r2, r0
 800f47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f47e:	601a      	str	r2, [r3, #0]
    pData++;
 800f480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f482:	3304      	adds	r3, #4
 800f484:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f486:	f7f4 ff1f 	bl	80042c8 <HAL_GetTick>
 800f48a:	4602      	mov	r2, r0
 800f48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f48e:	1ad3      	subs	r3, r2, r3
 800f490:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f494:	d102      	bne.n	800f49c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f496:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f49a:	e00b      	b.n	800f4b4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d1e2      	bne.n	800f470 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	4a03      	ldr	r2, [pc, #12]	; (800f4bc <SD_SendSDStatus+0x19c>)
 800f4b0:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800f4b2:	2300      	movs	r3, #0
}
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	3730      	adds	r7, #48	; 0x30
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	bd80      	pop	{r7, pc}
 800f4bc:	18000f3a 	.word	0x18000f3a

0800f4c0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b084      	sub	sp, #16
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	6078      	str	r0, [r7, #4]
 800f4c8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d102      	bne.n	800f4d6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800f4d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f4d4:	e018      	b.n	800f508 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681a      	ldr	r2, [r3, #0]
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4de:	041b      	lsls	r3, r3, #16
 800f4e0:	4619      	mov	r1, r3
 800f4e2:	4610      	mov	r0, r2
 800f4e4:	f003 ff44 	bl	8013370 <SDMMC_CmdSendStatus>
 800f4e8:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d001      	beq.n	800f4f4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	e009      	b.n	800f508 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	2100      	movs	r1, #0
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	f003 fcc3 	bl	8012e86 <SDMMC_GetResponse>
 800f500:	4602      	mov	r2, r0
 800f502:	683b      	ldr	r3, [r7, #0]
 800f504:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800f506:	2300      	movs	r3, #0
}
 800f508:	4618      	mov	r0, r3
 800f50a:	3710      	adds	r7, #16
 800f50c:	46bd      	mov	sp, r7
 800f50e:	bd80      	pop	{r7, pc}

0800f510 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b086      	sub	sp, #24
 800f514:	af00      	add	r7, sp, #0
 800f516:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800f518:	2300      	movs	r3, #0
 800f51a:	60fb      	str	r3, [r7, #12]
 800f51c:	2300      	movs	r3, #0
 800f51e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	2100      	movs	r1, #0
 800f526:	4618      	mov	r0, r3
 800f528:	f003 fcad 	bl	8012e86 <SDMMC_GetResponse>
 800f52c:	4603      	mov	r3, r0
 800f52e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f532:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f536:	d102      	bne.n	800f53e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f538:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f53c:	e02f      	b.n	800f59e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f53e:	f107 030c 	add.w	r3, r7, #12
 800f542:	4619      	mov	r1, r3
 800f544:	6878      	ldr	r0, [r7, #4]
 800f546:	f000 f879 	bl	800f63c <SD_FindSCR>
 800f54a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f54c:	697b      	ldr	r3, [r7, #20]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d001      	beq.n	800f556 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800f552:	697b      	ldr	r3, [r7, #20]
 800f554:	e023      	b.n	800f59e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f556:	693b      	ldr	r3, [r7, #16]
 800f558:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d01c      	beq.n	800f59a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	681a      	ldr	r2, [r3, #0]
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f568:	041b      	lsls	r3, r3, #16
 800f56a:	4619      	mov	r1, r3
 800f56c:	4610      	mov	r0, r2
 800f56e:	f003 fe16 	bl	801319e <SDMMC_CmdAppCommand>
 800f572:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f574:	697b      	ldr	r3, [r7, #20]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d001      	beq.n	800f57e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800f57a:	697b      	ldr	r3, [r7, #20]
 800f57c:	e00f      	b.n	800f59e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	2102      	movs	r1, #2
 800f584:	4618      	mov	r0, r3
 800f586:	f003 fe4d 	bl	8013224 <SDMMC_CmdBusWidth>
 800f58a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f58c:	697b      	ldr	r3, [r7, #20]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d001      	beq.n	800f596 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800f592:	697b      	ldr	r3, [r7, #20]
 800f594:	e003      	b.n	800f59e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f596:	2300      	movs	r3, #0
 800f598:	e001      	b.n	800f59e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f59a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f59e:	4618      	mov	r0, r3
 800f5a0:	3718      	adds	r7, #24
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	bd80      	pop	{r7, pc}

0800f5a6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800f5a6:	b580      	push	{r7, lr}
 800f5a8:	b086      	sub	sp, #24
 800f5aa:	af00      	add	r7, sp, #0
 800f5ac:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	60fb      	str	r3, [r7, #12]
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	2100      	movs	r1, #0
 800f5bc:	4618      	mov	r0, r3
 800f5be:	f003 fc62 	bl	8012e86 <SDMMC_GetResponse>
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f5c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f5cc:	d102      	bne.n	800f5d4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f5ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f5d2:	e02f      	b.n	800f634 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f5d4:	f107 030c 	add.w	r3, r7, #12
 800f5d8:	4619      	mov	r1, r3
 800f5da:	6878      	ldr	r0, [r7, #4]
 800f5dc:	f000 f82e 	bl	800f63c <SD_FindSCR>
 800f5e0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f5e2:	697b      	ldr	r3, [r7, #20]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d001      	beq.n	800f5ec <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800f5e8:	697b      	ldr	r3, [r7, #20]
 800f5ea:	e023      	b.n	800f634 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f5ec:	693b      	ldr	r3, [r7, #16]
 800f5ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d01c      	beq.n	800f630 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	681a      	ldr	r2, [r3, #0]
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f5fe:	041b      	lsls	r3, r3, #16
 800f600:	4619      	mov	r1, r3
 800f602:	4610      	mov	r0, r2
 800f604:	f003 fdcb 	bl	801319e <SDMMC_CmdAppCommand>
 800f608:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f60a:	697b      	ldr	r3, [r7, #20]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d001      	beq.n	800f614 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800f610:	697b      	ldr	r3, [r7, #20]
 800f612:	e00f      	b.n	800f634 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	2100      	movs	r1, #0
 800f61a:	4618      	mov	r0, r3
 800f61c:	f003 fe02 	bl	8013224 <SDMMC_CmdBusWidth>
 800f620:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f622:	697b      	ldr	r3, [r7, #20]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d001      	beq.n	800f62c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800f628:	697b      	ldr	r3, [r7, #20]
 800f62a:	e003      	b.n	800f634 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f62c:	2300      	movs	r3, #0
 800f62e:	e001      	b.n	800f634 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f630:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f634:	4618      	mov	r0, r3
 800f636:	3718      	adds	r7, #24
 800f638:	46bd      	mov	sp, r7
 800f63a:	bd80      	pop	{r7, pc}

0800f63c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b08e      	sub	sp, #56	; 0x38
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
 800f644:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f646:	f7f4 fe3f 	bl	80042c8 <HAL_GetTick>
 800f64a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800f64c:	2300      	movs	r3, #0
 800f64e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800f650:	2300      	movs	r3, #0
 800f652:	60bb      	str	r3, [r7, #8]
 800f654:	2300      	movs	r3, #0
 800f656:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800f658:	683b      	ldr	r3, [r7, #0]
 800f65a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	2108      	movs	r1, #8
 800f662:	4618      	mov	r0, r3
 800f664:	f003 fc4e 	bl	8012f04 <SDMMC_CmdBlockLength>
 800f668:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d001      	beq.n	800f674 <SD_FindSCR+0x38>
  {
    return errorstate;
 800f670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f672:	e0ad      	b.n	800f7d0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	681a      	ldr	r2, [r3, #0]
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f67c:	041b      	lsls	r3, r3, #16
 800f67e:	4619      	mov	r1, r3
 800f680:	4610      	mov	r0, r2
 800f682:	f003 fd8c 	bl	801319e <SDMMC_CmdAppCommand>
 800f686:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d001      	beq.n	800f692 <SD_FindSCR+0x56>
  {
    return errorstate;
 800f68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f690:	e09e      	b.n	800f7d0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f692:	f04f 33ff 	mov.w	r3, #4294967295
 800f696:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800f698:	2308      	movs	r3, #8
 800f69a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800f69c:	2330      	movs	r3, #48	; 0x30
 800f69e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f6a0:	2302      	movs	r3, #2
 800f6a2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f6a8:	2301      	movs	r3, #1
 800f6aa:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	f107 0210 	add.w	r2, r7, #16
 800f6b4:	4611      	mov	r1, r2
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	f003 fbf8 	bl	8012eac <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	f003 fdd2 	bl	801326a <SDMMC_CmdSendSCR>
 800f6c6:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d027      	beq.n	800f71e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800f6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6d0:	e07e      	b.n	800f7d0 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d113      	bne.n	800f708 <SD_FindSCR+0xcc>
 800f6e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d110      	bne.n	800f708 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	f003 fb56 	bl	8012d9c <SDMMC_ReadFIFO>
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	f003 fb4f 	bl	8012d9c <SDMMC_ReadFIFO>
 800f6fe:	4603      	mov	r3, r0
 800f700:	60fb      	str	r3, [r7, #12]
      index++;
 800f702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f704:	3301      	adds	r3, #1
 800f706:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f708:	f7f4 fdde 	bl	80042c8 <HAL_GetTick>
 800f70c:	4602      	mov	r2, r0
 800f70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f710:	1ad3      	subs	r3, r2, r3
 800f712:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f716:	d102      	bne.n	800f71e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f718:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f71c:	e058      	b.n	800f7d0 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f724:	f240 532a 	movw	r3, #1322	; 0x52a
 800f728:	4013      	ands	r3, r2
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d0d1      	beq.n	800f6d2 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f734:	f003 0308 	and.w	r3, r3, #8
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d005      	beq.n	800f748 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	2208      	movs	r2, #8
 800f742:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f744:	2308      	movs	r3, #8
 800f746:	e043      	b.n	800f7d0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f74e:	f003 0302 	and.w	r3, r3, #2
 800f752:	2b00      	cmp	r3, #0
 800f754:	d005      	beq.n	800f762 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	2202      	movs	r2, #2
 800f75c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f75e:	2302      	movs	r3, #2
 800f760:	e036      	b.n	800f7d0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f768:	f003 0320 	and.w	r3, r3, #32
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d005      	beq.n	800f77c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	2220      	movs	r2, #32
 800f776:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800f778:	2320      	movs	r3, #32
 800f77a:	e029      	b.n	800f7d0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	4a15      	ldr	r2, [pc, #84]	; (800f7d8 <SD_FindSCR+0x19c>)
 800f782:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	061a      	lsls	r2, r3, #24
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	021b      	lsls	r3, r3, #8
 800f78c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f790:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	0a1b      	lsrs	r3, r3, #8
 800f796:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f79a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	0e1b      	lsrs	r3, r3, #24
 800f7a0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7a4:	601a      	str	r2, [r3, #0]
    scr++;
 800f7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7a8:	3304      	adds	r3, #4
 800f7aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f7ac:	68bb      	ldr	r3, [r7, #8]
 800f7ae:	061a      	lsls	r2, r3, #24
 800f7b0:	68bb      	ldr	r3, [r7, #8]
 800f7b2:	021b      	lsls	r3, r3, #8
 800f7b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f7b8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f7ba:	68bb      	ldr	r3, [r7, #8]
 800f7bc:	0a1b      	lsrs	r3, r3, #8
 800f7be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f7c2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f7c4:	68bb      	ldr	r3, [r7, #8]
 800f7c6:	0e1b      	lsrs	r3, r3, #24
 800f7c8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7cc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800f7ce:	2300      	movs	r3, #0
}
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	3738      	adds	r7, #56	; 0x38
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	bd80      	pop	{r7, pc}
 800f7d8:	18000f3a 	.word	0x18000f3a

0800f7dc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b086      	sub	sp, #24
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7e8:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7ee:	2b1f      	cmp	r3, #31
 800f7f0:	d936      	bls.n	800f860 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	617b      	str	r3, [r7, #20]
 800f7f6:	e027      	b.n	800f848 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	f003 facd 	bl	8012d9c <SDMMC_ReadFIFO>
 800f802:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	b2da      	uxtb	r2, r3
 800f808:	693b      	ldr	r3, [r7, #16]
 800f80a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f80c:	693b      	ldr	r3, [r7, #16]
 800f80e:	3301      	adds	r3, #1
 800f810:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	0a1b      	lsrs	r3, r3, #8
 800f816:	b2da      	uxtb	r2, r3
 800f818:	693b      	ldr	r3, [r7, #16]
 800f81a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f81c:	693b      	ldr	r3, [r7, #16]
 800f81e:	3301      	adds	r3, #1
 800f820:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	0c1b      	lsrs	r3, r3, #16
 800f826:	b2da      	uxtb	r2, r3
 800f828:	693b      	ldr	r3, [r7, #16]
 800f82a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f82c:	693b      	ldr	r3, [r7, #16]
 800f82e:	3301      	adds	r3, #1
 800f830:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	0e1b      	lsrs	r3, r3, #24
 800f836:	b2da      	uxtb	r2, r3
 800f838:	693b      	ldr	r3, [r7, #16]
 800f83a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f83c:	693b      	ldr	r3, [r7, #16]
 800f83e:	3301      	adds	r3, #1
 800f840:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800f842:	697b      	ldr	r3, [r7, #20]
 800f844:	3301      	adds	r3, #1
 800f846:	617b      	str	r3, [r7, #20]
 800f848:	697b      	ldr	r3, [r7, #20]
 800f84a:	2b07      	cmp	r3, #7
 800f84c:	d9d4      	bls.n	800f7f8 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	693a      	ldr	r2, [r7, #16]
 800f852:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f858:	f1a3 0220 	sub.w	r2, r3, #32
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800f860:	bf00      	nop
 800f862:	3718      	adds	r7, #24
 800f864:	46bd      	mov	sp, r7
 800f866:	bd80      	pop	{r7, pc}

0800f868 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b086      	sub	sp, #24
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	69db      	ldr	r3, [r3, #28]
 800f874:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	6a1b      	ldr	r3, [r3, #32]
 800f87a:	2b1f      	cmp	r3, #31
 800f87c:	d93a      	bls.n	800f8f4 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800f87e:	2300      	movs	r3, #0
 800f880:	617b      	str	r3, [r7, #20]
 800f882:	e02b      	b.n	800f8dc <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800f884:	693b      	ldr	r3, [r7, #16]
 800f886:	781b      	ldrb	r3, [r3, #0]
 800f888:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f88a:	693b      	ldr	r3, [r7, #16]
 800f88c:	3301      	adds	r3, #1
 800f88e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800f890:	693b      	ldr	r3, [r7, #16]
 800f892:	781b      	ldrb	r3, [r3, #0]
 800f894:	021a      	lsls	r2, r3, #8
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	4313      	orrs	r3, r2
 800f89a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f89c:	693b      	ldr	r3, [r7, #16]
 800f89e:	3301      	adds	r3, #1
 800f8a0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800f8a2:	693b      	ldr	r3, [r7, #16]
 800f8a4:	781b      	ldrb	r3, [r3, #0]
 800f8a6:	041a      	lsls	r2, r3, #16
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	4313      	orrs	r3, r2
 800f8ac:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f8ae:	693b      	ldr	r3, [r7, #16]
 800f8b0:	3301      	adds	r3, #1
 800f8b2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800f8b4:	693b      	ldr	r3, [r7, #16]
 800f8b6:	781b      	ldrb	r3, [r3, #0]
 800f8b8:	061a      	lsls	r2, r3, #24
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	4313      	orrs	r3, r2
 800f8be:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f8c0:	693b      	ldr	r3, [r7, #16]
 800f8c2:	3301      	adds	r3, #1
 800f8c4:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	f107 020c 	add.w	r2, r7, #12
 800f8ce:	4611      	mov	r1, r2
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	f003 fa70 	bl	8012db6 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800f8d6:	697b      	ldr	r3, [r7, #20]
 800f8d8:	3301      	adds	r3, #1
 800f8da:	617b      	str	r3, [r7, #20]
 800f8dc:	697b      	ldr	r3, [r7, #20]
 800f8de:	2b07      	cmp	r3, #7
 800f8e0:	d9d0      	bls.n	800f884 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	693a      	ldr	r2, [r7, #16]
 800f8e6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	6a1b      	ldr	r3, [r3, #32]
 800f8ec:	f1a3 0220 	sub.w	r2, r3, #32
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	621a      	str	r2, [r3, #32]
  }
}
 800f8f4:	bf00      	nop
 800f8f6:	3718      	adds	r7, #24
 800f8f8:	46bd      	mov	sp, r7
 800f8fa:	bd80      	pop	{r7, pc}

0800f8fc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800f8fc:	b480      	push	{r7}
 800f8fe:	b083      	sub	sp, #12
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800f904:	bf00      	nop
 800f906:	370c      	adds	r7, #12
 800f908:	46bd      	mov	sp, r7
 800f90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90e:	4770      	bx	lr

0800f910 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800f910:	b480      	push	{r7}
 800f912:	b083      	sub	sp, #12
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800f918:	bf00      	nop
 800f91a:	370c      	adds	r7, #12
 800f91c:	46bd      	mov	sp, r7
 800f91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f922:	4770      	bx	lr

0800f924 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800f924:	b480      	push	{r7}
 800f926:	b083      	sub	sp, #12
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800f92c:	bf00      	nop
 800f92e:	370c      	adds	r7, #12
 800f930:	46bd      	mov	sp, r7
 800f932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f936:	4770      	bx	lr

0800f938 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800f938:	b480      	push	{r7}
 800f93a:	b083      	sub	sp, #12
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800f940:	bf00      	nop
 800f942:	370c      	adds	r7, #12
 800f944:	46bd      	mov	sp, r7
 800f946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94a:	4770      	bx	lr

0800f94c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b084      	sub	sp, #16
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	2b00      	cmp	r3, #0
 800f958:	d101      	bne.n	800f95e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f95a:	2301      	movs	r3, #1
 800f95c:	e10f      	b.n	800fb7e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	2200      	movs	r2, #0
 800f962:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	4a87      	ldr	r2, [pc, #540]	; (800fb88 <HAL_SPI_Init+0x23c>)
 800f96a:	4293      	cmp	r3, r2
 800f96c:	d00f      	beq.n	800f98e <HAL_SPI_Init+0x42>
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	4a86      	ldr	r2, [pc, #536]	; (800fb8c <HAL_SPI_Init+0x240>)
 800f974:	4293      	cmp	r3, r2
 800f976:	d00a      	beq.n	800f98e <HAL_SPI_Init+0x42>
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	4a84      	ldr	r2, [pc, #528]	; (800fb90 <HAL_SPI_Init+0x244>)
 800f97e:	4293      	cmp	r3, r2
 800f980:	d005      	beq.n	800f98e <HAL_SPI_Init+0x42>
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	68db      	ldr	r3, [r3, #12]
 800f986:	2b0f      	cmp	r3, #15
 800f988:	d901      	bls.n	800f98e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800f98a:	2301      	movs	r3, #1
 800f98c:	e0f7      	b.n	800fb7e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800f98e:	6878      	ldr	r0, [r7, #4]
 800f990:	f000 fd5a 	bl	8010448 <SPI_GetPacketSize>
 800f994:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	4a7b      	ldr	r2, [pc, #492]	; (800fb88 <HAL_SPI_Init+0x23c>)
 800f99c:	4293      	cmp	r3, r2
 800f99e:	d00c      	beq.n	800f9ba <HAL_SPI_Init+0x6e>
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	4a79      	ldr	r2, [pc, #484]	; (800fb8c <HAL_SPI_Init+0x240>)
 800f9a6:	4293      	cmp	r3, r2
 800f9a8:	d007      	beq.n	800f9ba <HAL_SPI_Init+0x6e>
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	4a78      	ldr	r2, [pc, #480]	; (800fb90 <HAL_SPI_Init+0x244>)
 800f9b0:	4293      	cmp	r3, r2
 800f9b2:	d002      	beq.n	800f9ba <HAL_SPI_Init+0x6e>
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	2b08      	cmp	r3, #8
 800f9b8:	d811      	bhi.n	800f9de <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f9be:	4a72      	ldr	r2, [pc, #456]	; (800fb88 <HAL_SPI_Init+0x23c>)
 800f9c0:	4293      	cmp	r3, r2
 800f9c2:	d009      	beq.n	800f9d8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	4a70      	ldr	r2, [pc, #448]	; (800fb8c <HAL_SPI_Init+0x240>)
 800f9ca:	4293      	cmp	r3, r2
 800f9cc:	d004      	beq.n	800f9d8 <HAL_SPI_Init+0x8c>
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	4a6f      	ldr	r2, [pc, #444]	; (800fb90 <HAL_SPI_Init+0x244>)
 800f9d4:	4293      	cmp	r3, r2
 800f9d6:	d104      	bne.n	800f9e2 <HAL_SPI_Init+0x96>
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	2b10      	cmp	r3, #16
 800f9dc:	d901      	bls.n	800f9e2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800f9de:	2301      	movs	r3, #1
 800f9e0:	e0cd      	b.n	800fb7e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f9e8:	b2db      	uxtb	r3, r3
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d106      	bne.n	800f9fc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f9f6:	6878      	ldr	r0, [r7, #4]
 800f9f8:	f7f3 fdee 	bl	80035d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	2202      	movs	r2, #2
 800fa00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	681a      	ldr	r2, [r3, #0]
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	f022 0201 	bic.w	r2, r2, #1
 800fa12:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	689b      	ldr	r3, [r3, #8]
 800fa1a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800fa1e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	699b      	ldr	r3, [r3, #24]
 800fa24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800fa28:	d119      	bne.n	800fa5e <HAL_SPI_Init+0x112>
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	685b      	ldr	r3, [r3, #4]
 800fa2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fa32:	d103      	bne.n	800fa3c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d008      	beq.n	800fa4e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d10c      	bne.n	800fa5e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800fa48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fa4c:	d107      	bne.n	800fa5e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	681a      	ldr	r2, [r3, #0]
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fa5c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	685b      	ldr	r3, [r3, #4]
 800fa62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d00f      	beq.n	800fa8a <HAL_SPI_Init+0x13e>
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	68db      	ldr	r3, [r3, #12]
 800fa6e:	2b06      	cmp	r3, #6
 800fa70:	d90b      	bls.n	800fa8a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	430a      	orrs	r2, r1
 800fa86:	601a      	str	r2, [r3, #0]
 800fa88:	e007      	b.n	800fa9a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	681a      	ldr	r2, [r3, #0]
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fa98:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	69da      	ldr	r2, [r3, #28]
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800faa2:	431a      	orrs	r2, r3
 800faa4:	68bb      	ldr	r3, [r7, #8]
 800faa6:	431a      	orrs	r2, r3
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800faac:	ea42 0103 	orr.w	r1, r2, r3
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	68da      	ldr	r2, [r3, #12]
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	430a      	orrs	r2, r1
 800faba:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fac4:	431a      	orrs	r2, r3
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800faca:	431a      	orrs	r2, r3
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	699b      	ldr	r3, [r3, #24]
 800fad0:	431a      	orrs	r2, r3
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	691b      	ldr	r3, [r3, #16]
 800fad6:	431a      	orrs	r2, r3
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	695b      	ldr	r3, [r3, #20]
 800fadc:	431a      	orrs	r2, r3
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	6a1b      	ldr	r3, [r3, #32]
 800fae2:	431a      	orrs	r2, r3
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	685b      	ldr	r3, [r3, #4]
 800fae8:	431a      	orrs	r2, r3
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800faee:	431a      	orrs	r2, r3
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	689b      	ldr	r3, [r3, #8]
 800faf4:	431a      	orrs	r2, r3
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fafa:	ea42 0103 	orr.w	r1, r2, r3
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	430a      	orrs	r2, r1
 800fb08:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	685b      	ldr	r3, [r3, #4]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d113      	bne.n	800fb3a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	689b      	ldr	r3, [r3, #8]
 800fb18:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fb24:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	689b      	ldr	r3, [r3, #8]
 800fb2c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fb38:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	f022 0201 	bic.w	r2, r2, #1
 800fb48:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	685b      	ldr	r3, [r3, #4]
 800fb4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d00a      	beq.n	800fb6c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	68db      	ldr	r3, [r3, #12]
 800fb5c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	430a      	orrs	r2, r1
 800fb6a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	2200      	movs	r2, #0
 800fb70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	2201      	movs	r2, #1
 800fb78:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800fb7c:	2300      	movs	r3, #0
}
 800fb7e:	4618      	mov	r0, r3
 800fb80:	3710      	adds	r7, #16
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bd80      	pop	{r7, pc}
 800fb86:	bf00      	nop
 800fb88:	40013000 	.word	0x40013000
 800fb8c:	40003800 	.word	0x40003800
 800fb90:	40003c00 	.word	0x40003c00

0800fb94 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b08a      	sub	sp, #40	; 0x28
 800fb98:	af02      	add	r7, sp, #8
 800fb9a:	60f8      	str	r0, [r7, #12]
 800fb9c:	60b9      	str	r1, [r7, #8]
 800fb9e:	603b      	str	r3, [r7, #0]
 800fba0:	4613      	mov	r3, r2
 800fba2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	3320      	adds	r3, #32
 800fbaa:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800fbac:	2300      	movs	r3, #0
 800fbae:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fbb6:	2b01      	cmp	r3, #1
 800fbb8:	d101      	bne.n	800fbbe <HAL_SPI_Transmit+0x2a>
 800fbba:	2302      	movs	r3, #2
 800fbbc:	e1e1      	b.n	800ff82 <HAL_SPI_Transmit+0x3ee>
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	2201      	movs	r2, #1
 800fbc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fbc6:	f7f4 fb7f 	bl	80042c8 <HAL_GetTick>
 800fbca:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800fbd2:	b2db      	uxtb	r3, r3
 800fbd4:	2b01      	cmp	r3, #1
 800fbd6:	d007      	beq.n	800fbe8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800fbd8:	2302      	movs	r3, #2
 800fbda:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	2200      	movs	r2, #0
 800fbe0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800fbe4:	7efb      	ldrb	r3, [r7, #27]
 800fbe6:	e1cc      	b.n	800ff82 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800fbe8:	68bb      	ldr	r3, [r7, #8]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d002      	beq.n	800fbf4 <HAL_SPI_Transmit+0x60>
 800fbee:	88fb      	ldrh	r3, [r7, #6]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d107      	bne.n	800fc04 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800fbf4:	2301      	movs	r3, #1
 800fbf6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800fc00:	7efb      	ldrb	r3, [r7, #27]
 800fc02:	e1be      	b.n	800ff82 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	2203      	movs	r2, #3
 800fc08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	2200      	movs	r2, #0
 800fc10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	68ba      	ldr	r2, [r7, #8]
 800fc18:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	88fa      	ldrh	r2, [r7, #6]
 800fc1e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	88fa      	ldrh	r2, [r7, #6]
 800fc26:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	2200      	movs	r2, #0
 800fc34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	2200      	movs	r2, #0
 800fc44:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	2200      	movs	r2, #0
 800fc4a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	689b      	ldr	r3, [r3, #8]
 800fc50:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800fc54:	d108      	bne.n	800fc68 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	681a      	ldr	r2, [r3, #0]
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fc64:	601a      	str	r2, [r3, #0]
 800fc66:	e009      	b.n	800fc7c <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	68db      	ldr	r3, [r3, #12]
 800fc6e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800fc7a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	685a      	ldr	r2, [r3, #4]
 800fc82:	4b96      	ldr	r3, [pc, #600]	; (800fedc <HAL_SPI_Transmit+0x348>)
 800fc84:	4013      	ands	r3, r2
 800fc86:	88f9      	ldrh	r1, [r7, #6]
 800fc88:	68fa      	ldr	r2, [r7, #12]
 800fc8a:	6812      	ldr	r2, [r2, #0]
 800fc8c:	430b      	orrs	r3, r1
 800fc8e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	681a      	ldr	r2, [r3, #0]
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	f042 0201 	orr.w	r2, r2, #1
 800fc9e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	685b      	ldr	r3, [r3, #4]
 800fca4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fca8:	d107      	bne.n	800fcba <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	681a      	ldr	r2, [r3, #0]
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fcb8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	68db      	ldr	r3, [r3, #12]
 800fcbe:	2b0f      	cmp	r3, #15
 800fcc0:	d947      	bls.n	800fd52 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800fcc2:	e03f      	b.n	800fd44 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	695b      	ldr	r3, [r3, #20]
 800fcca:	f003 0302 	and.w	r3, r3, #2
 800fcce:	2b02      	cmp	r3, #2
 800fcd0:	d114      	bne.n	800fcfc <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	6812      	ldr	r2, [r2, #0]
 800fcdc:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fce2:	1d1a      	adds	r2, r3, #4
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fcee:	b29b      	uxth	r3, r3
 800fcf0:	3b01      	subs	r3, #1
 800fcf2:	b29a      	uxth	r2, r3
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fcfa:	e023      	b.n	800fd44 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fcfc:	f7f4 fae4 	bl	80042c8 <HAL_GetTick>
 800fd00:	4602      	mov	r2, r0
 800fd02:	697b      	ldr	r3, [r7, #20]
 800fd04:	1ad3      	subs	r3, r2, r3
 800fd06:	683a      	ldr	r2, [r7, #0]
 800fd08:	429a      	cmp	r2, r3
 800fd0a:	d803      	bhi.n	800fd14 <HAL_SPI_Transmit+0x180>
 800fd0c:	683b      	ldr	r3, [r7, #0]
 800fd0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd12:	d102      	bne.n	800fd1a <HAL_SPI_Transmit+0x186>
 800fd14:	683b      	ldr	r3, [r7, #0]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d114      	bne.n	800fd44 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fd1a:	68f8      	ldr	r0, [r7, #12]
 800fd1c:	f000 fac6 	bl	80102ac <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	2200      	movs	r2, #0
 800fd24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd2e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	2201      	movs	r2, #1
 800fd3c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800fd40:	2303      	movs	r3, #3
 800fd42:	e11e      	b.n	800ff82 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fd4a:	b29b      	uxth	r3, r3
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d1b9      	bne.n	800fcc4 <HAL_SPI_Transmit+0x130>
 800fd50:	e0f1      	b.n	800ff36 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	68db      	ldr	r3, [r3, #12]
 800fd56:	2b07      	cmp	r3, #7
 800fd58:	f240 80e6 	bls.w	800ff28 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800fd5c:	e05d      	b.n	800fe1a <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	695b      	ldr	r3, [r3, #20]
 800fd64:	f003 0302 	and.w	r3, r3, #2
 800fd68:	2b02      	cmp	r3, #2
 800fd6a:	d132      	bne.n	800fdd2 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fd72:	b29b      	uxth	r3, r3
 800fd74:	2b01      	cmp	r3, #1
 800fd76:	d918      	bls.n	800fdaa <HAL_SPI_Transmit+0x216>
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d014      	beq.n	800fdaa <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	6812      	ldr	r2, [r2, #0]
 800fd8a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fd90:	1d1a      	adds	r2, r3, #4
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fd9c:	b29b      	uxth	r3, r3
 800fd9e:	3b02      	subs	r3, #2
 800fda0:	b29a      	uxth	r2, r3
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fda8:	e037      	b.n	800fe1a <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fdae:	881a      	ldrh	r2, [r3, #0]
 800fdb0:	69fb      	ldr	r3, [r7, #28]
 800fdb2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fdb8:	1c9a      	adds	r2, r3, #2
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fdc4:	b29b      	uxth	r3, r3
 800fdc6:	3b01      	subs	r3, #1
 800fdc8:	b29a      	uxth	r2, r3
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fdd0:	e023      	b.n	800fe1a <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fdd2:	f7f4 fa79 	bl	80042c8 <HAL_GetTick>
 800fdd6:	4602      	mov	r2, r0
 800fdd8:	697b      	ldr	r3, [r7, #20]
 800fdda:	1ad3      	subs	r3, r2, r3
 800fddc:	683a      	ldr	r2, [r7, #0]
 800fdde:	429a      	cmp	r2, r3
 800fde0:	d803      	bhi.n	800fdea <HAL_SPI_Transmit+0x256>
 800fde2:	683b      	ldr	r3, [r7, #0]
 800fde4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fde8:	d102      	bne.n	800fdf0 <HAL_SPI_Transmit+0x25c>
 800fdea:	683b      	ldr	r3, [r7, #0]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d114      	bne.n	800fe1a <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fdf0:	68f8      	ldr	r0, [r7, #12]
 800fdf2:	f000 fa5b 	bl	80102ac <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fe04:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	2201      	movs	r2, #1
 800fe12:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800fe16:	2303      	movs	r3, #3
 800fe18:	e0b3      	b.n	800ff82 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fe20:	b29b      	uxth	r3, r3
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d19b      	bne.n	800fd5e <HAL_SPI_Transmit+0x1ca>
 800fe26:	e086      	b.n	800ff36 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	695b      	ldr	r3, [r3, #20]
 800fe2e:	f003 0302 	and.w	r3, r3, #2
 800fe32:	2b02      	cmp	r3, #2
 800fe34:	d154      	bne.n	800fee0 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fe3c:	b29b      	uxth	r3, r3
 800fe3e:	2b03      	cmp	r3, #3
 800fe40:	d918      	bls.n	800fe74 <HAL_SPI_Transmit+0x2e0>
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe46:	2b40      	cmp	r3, #64	; 0x40
 800fe48:	d914      	bls.n	800fe74 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	6812      	ldr	r2, [r2, #0]
 800fe54:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fe5a:	1d1a      	adds	r2, r3, #4
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fe66:	b29b      	uxth	r3, r3
 800fe68:	3b04      	subs	r3, #4
 800fe6a:	b29a      	uxth	r2, r3
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fe72:	e059      	b.n	800ff28 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fe7a:	b29b      	uxth	r3, r3
 800fe7c:	2b01      	cmp	r3, #1
 800fe7e:	d917      	bls.n	800feb0 <HAL_SPI_Transmit+0x31c>
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d013      	beq.n	800feb0 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fe8c:	881a      	ldrh	r2, [r3, #0]
 800fe8e:	69fb      	ldr	r3, [r7, #28]
 800fe90:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fe96:	1c9a      	adds	r2, r3, #2
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fea2:	b29b      	uxth	r3, r3
 800fea4:	3b02      	subs	r3, #2
 800fea6:	b29a      	uxth	r2, r3
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800feae:	e03b      	b.n	800ff28 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	3320      	adds	r3, #32
 800feba:	7812      	ldrb	r2, [r2, #0]
 800febc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fec2:	1c5a      	adds	r2, r3, #1
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fece:	b29b      	uxth	r3, r3
 800fed0:	3b01      	subs	r3, #1
 800fed2:	b29a      	uxth	r2, r3
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800feda:	e025      	b.n	800ff28 <HAL_SPI_Transmit+0x394>
 800fedc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fee0:	f7f4 f9f2 	bl	80042c8 <HAL_GetTick>
 800fee4:	4602      	mov	r2, r0
 800fee6:	697b      	ldr	r3, [r7, #20]
 800fee8:	1ad3      	subs	r3, r2, r3
 800feea:	683a      	ldr	r2, [r7, #0]
 800feec:	429a      	cmp	r2, r3
 800feee:	d803      	bhi.n	800fef8 <HAL_SPI_Transmit+0x364>
 800fef0:	683b      	ldr	r3, [r7, #0]
 800fef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fef6:	d102      	bne.n	800fefe <HAL_SPI_Transmit+0x36a>
 800fef8:	683b      	ldr	r3, [r7, #0]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d114      	bne.n	800ff28 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fefe:	68f8      	ldr	r0, [r7, #12]
 800ff00:	f000 f9d4 	bl	80102ac <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	2200      	movs	r2, #0
 800ff08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ff12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	2201      	movs	r2, #1
 800ff20:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ff24:	2303      	movs	r3, #3
 800ff26:	e02c      	b.n	800ff82 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ff2e:	b29b      	uxth	r3, r3
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	f47f af79 	bne.w	800fe28 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800ff36:	697b      	ldr	r3, [r7, #20]
 800ff38:	9300      	str	r3, [sp, #0]
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	2200      	movs	r2, #0
 800ff3e:	2108      	movs	r1, #8
 800ff40:	68f8      	ldr	r0, [r7, #12]
 800ff42:	f000 fa53 	bl	80103ec <SPI_WaitOnFlagUntilTimeout>
 800ff46:	4603      	mov	r3, r0
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d007      	beq.n	800ff5c <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ff52:	f043 0220 	orr.w	r2, r3, #32
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ff5c:	68f8      	ldr	r0, [r7, #12]
 800ff5e:	f000 f9a5 	bl	80102ac <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	2200      	movs	r2, #0
 800ff66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	2201      	movs	r2, #1
 800ff6e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d001      	beq.n	800ff80 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800ff7c:	2301      	movs	r3, #1
 800ff7e:	e000      	b.n	800ff82 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800ff80:	7efb      	ldrb	r3, [r7, #27]
}
 800ff82:	4618      	mov	r0, r3
 800ff84:	3720      	adds	r7, #32
 800ff86:	46bd      	mov	sp, r7
 800ff88:	bd80      	pop	{r7, pc}
 800ff8a:	bf00      	nop

0800ff8c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b088      	sub	sp, #32
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	60f8      	str	r0, [r7, #12]
 800ff94:	60b9      	str	r1, [r7, #8]
 800ff96:	603b      	str	r3, [r7, #0]
 800ff98:	4613      	mov	r3, r2
 800ff9a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	3330      	adds	r3, #48	; 0x30
 800ffa6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ffae:	2b01      	cmp	r3, #1
 800ffb0:	d101      	bne.n	800ffb6 <HAL_SPI_Receive+0x2a>
 800ffb2:	2302      	movs	r3, #2
 800ffb4:	e173      	b.n	801029e <HAL_SPI_Receive+0x312>
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	2201      	movs	r2, #1
 800ffba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ffbe:	f7f4 f983 	bl	80042c8 <HAL_GetTick>
 800ffc2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ffca:	b2db      	uxtb	r3, r3
 800ffcc:	2b01      	cmp	r3, #1
 800ffce:	d007      	beq.n	800ffe0 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800ffd0:	2302      	movs	r3, #2
 800ffd2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ffdc:	7ffb      	ldrb	r3, [r7, #31]
 800ffde:	e15e      	b.n	801029e <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ffe0:	68bb      	ldr	r3, [r7, #8]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d002      	beq.n	800ffec <HAL_SPI_Receive+0x60>
 800ffe6:	88fb      	ldrh	r3, [r7, #6]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d107      	bne.n	800fffc <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800ffec:	2301      	movs	r3, #1
 800ffee:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	2200      	movs	r2, #0
 800fff4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800fff8:	7ffb      	ldrb	r3, [r7, #31]
 800fffa:	e150      	b.n	801029e <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	2204      	movs	r2, #4
 8010000:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	2200      	movs	r2, #0
 8010008:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	68ba      	ldr	r2, [r7, #8]
 8010010:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	88fa      	ldrh	r2, [r7, #6]
 8010016:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	88fa      	ldrh	r2, [r7, #6]
 801001e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	2200      	movs	r2, #0
 8010026:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	2200      	movs	r2, #0
 801002c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	2200      	movs	r2, #0
 8010034:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	2200      	movs	r2, #0
 801003c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	2200      	movs	r2, #0
 8010042:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	689b      	ldr	r3, [r3, #8]
 8010048:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 801004c:	d108      	bne.n	8010060 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	681a      	ldr	r2, [r3, #0]
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801005c:	601a      	str	r2, [r3, #0]
 801005e:	e009      	b.n	8010074 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	68db      	ldr	r3, [r3, #12]
 8010066:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8010072:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	685a      	ldr	r2, [r3, #4]
 801007a:	4b8b      	ldr	r3, [pc, #556]	; (80102a8 <HAL_SPI_Receive+0x31c>)
 801007c:	4013      	ands	r3, r2
 801007e:	88f9      	ldrh	r1, [r7, #6]
 8010080:	68fa      	ldr	r2, [r7, #12]
 8010082:	6812      	ldr	r2, [r2, #0]
 8010084:	430b      	orrs	r3, r1
 8010086:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	681a      	ldr	r2, [r3, #0]
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	f042 0201 	orr.w	r2, r2, #1
 8010096:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	685b      	ldr	r3, [r3, #4]
 801009c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80100a0:	d107      	bne.n	80100b2 <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	681a      	ldr	r2, [r3, #0]
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80100b0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	68db      	ldr	r3, [r3, #12]
 80100b6:	2b0f      	cmp	r3, #15
 80100b8:	d948      	bls.n	801014c <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80100ba:	e040      	b.n	801013e <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	695a      	ldr	r2, [r3, #20]
 80100c2:	f248 0308 	movw	r3, #32776	; 0x8008
 80100c6:	4013      	ands	r3, r2
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d014      	beq.n	80100f6 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	681a      	ldr	r2, [r3, #0]
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80100d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80100d6:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80100dc:	1d1a      	adds	r2, r3, #4
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80100e8:	b29b      	uxth	r3, r3
 80100ea:	3b01      	subs	r3, #1
 80100ec:	b29a      	uxth	r2, r3
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80100f4:	e023      	b.n	801013e <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80100f6:	f7f4 f8e7 	bl	80042c8 <HAL_GetTick>
 80100fa:	4602      	mov	r2, r0
 80100fc:	697b      	ldr	r3, [r7, #20]
 80100fe:	1ad3      	subs	r3, r2, r3
 8010100:	683a      	ldr	r2, [r7, #0]
 8010102:	429a      	cmp	r2, r3
 8010104:	d803      	bhi.n	801010e <HAL_SPI_Receive+0x182>
 8010106:	683b      	ldr	r3, [r7, #0]
 8010108:	f1b3 3fff 	cmp.w	r3, #4294967295
 801010c:	d102      	bne.n	8010114 <HAL_SPI_Receive+0x188>
 801010e:	683b      	ldr	r3, [r7, #0]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d114      	bne.n	801013e <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010114:	68f8      	ldr	r0, [r7, #12]
 8010116:	f000 f8c9 	bl	80102ac <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	2200      	movs	r2, #0
 801011e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010128:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	2201      	movs	r2, #1
 8010136:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 801013a:	2303      	movs	r3, #3
 801013c:	e0af      	b.n	801029e <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010144:	b29b      	uxth	r3, r3
 8010146:	2b00      	cmp	r3, #0
 8010148:	d1b8      	bne.n	80100bc <HAL_SPI_Receive+0x130>
 801014a:	e095      	b.n	8010278 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	68db      	ldr	r3, [r3, #12]
 8010150:	2b07      	cmp	r3, #7
 8010152:	f240 808b 	bls.w	801026c <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8010156:	e03f      	b.n	80101d8 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	695b      	ldr	r3, [r3, #20]
 801015e:	f003 0301 	and.w	r3, r3, #1
 8010162:	2b01      	cmp	r3, #1
 8010164:	d114      	bne.n	8010190 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801016a:	69ba      	ldr	r2, [r7, #24]
 801016c:	8812      	ldrh	r2, [r2, #0]
 801016e:	b292      	uxth	r2, r2
 8010170:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010176:	1c9a      	adds	r2, r3, #2
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010182:	b29b      	uxth	r3, r3
 8010184:	3b01      	subs	r3, #1
 8010186:	b29a      	uxth	r2, r3
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801018e:	e023      	b.n	80101d8 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010190:	f7f4 f89a 	bl	80042c8 <HAL_GetTick>
 8010194:	4602      	mov	r2, r0
 8010196:	697b      	ldr	r3, [r7, #20]
 8010198:	1ad3      	subs	r3, r2, r3
 801019a:	683a      	ldr	r2, [r7, #0]
 801019c:	429a      	cmp	r2, r3
 801019e:	d803      	bhi.n	80101a8 <HAL_SPI_Receive+0x21c>
 80101a0:	683b      	ldr	r3, [r7, #0]
 80101a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101a6:	d102      	bne.n	80101ae <HAL_SPI_Receive+0x222>
 80101a8:	683b      	ldr	r3, [r7, #0]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d114      	bne.n	80101d8 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80101ae:	68f8      	ldr	r0, [r7, #12]
 80101b0:	f000 f87c 	bl	80102ac <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	2200      	movs	r2, #0
 80101b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80101c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	2201      	movs	r2, #1
 80101d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80101d4:	2303      	movs	r3, #3
 80101d6:	e062      	b.n	801029e <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80101de:	b29b      	uxth	r3, r3
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d1b9      	bne.n	8010158 <HAL_SPI_Receive+0x1cc>
 80101e4:	e048      	b.n	8010278 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	695b      	ldr	r3, [r3, #20]
 80101ec:	f003 0301 	and.w	r3, r3, #1
 80101f0:	2b01      	cmp	r3, #1
 80101f2:	d117      	bne.n	8010224 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010200:	7812      	ldrb	r2, [r2, #0]
 8010202:	b2d2      	uxtb	r2, r2
 8010204:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801020a:	1c5a      	adds	r2, r3, #1
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010216:	b29b      	uxth	r3, r3
 8010218:	3b01      	subs	r3, #1
 801021a:	b29a      	uxth	r2, r3
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010222:	e023      	b.n	801026c <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010224:	f7f4 f850 	bl	80042c8 <HAL_GetTick>
 8010228:	4602      	mov	r2, r0
 801022a:	697b      	ldr	r3, [r7, #20]
 801022c:	1ad3      	subs	r3, r2, r3
 801022e:	683a      	ldr	r2, [r7, #0]
 8010230:	429a      	cmp	r2, r3
 8010232:	d803      	bhi.n	801023c <HAL_SPI_Receive+0x2b0>
 8010234:	683b      	ldr	r3, [r7, #0]
 8010236:	f1b3 3fff 	cmp.w	r3, #4294967295
 801023a:	d102      	bne.n	8010242 <HAL_SPI_Receive+0x2b6>
 801023c:	683b      	ldr	r3, [r7, #0]
 801023e:	2b00      	cmp	r3, #0
 8010240:	d114      	bne.n	801026c <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010242:	68f8      	ldr	r0, [r7, #12]
 8010244:	f000 f832 	bl	80102ac <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	2200      	movs	r2, #0
 801024c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010256:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	2201      	movs	r2, #1
 8010264:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8010268:	2303      	movs	r3, #3
 801026a:	e018      	b.n	801029e <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010272:	b29b      	uxth	r3, r3
 8010274:	2b00      	cmp	r3, #0
 8010276:	d1b6      	bne.n	80101e6 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010278:	68f8      	ldr	r0, [r7, #12]
 801027a:	f000 f817 	bl	80102ac <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	2200      	movs	r2, #0
 8010282:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	2201      	movs	r2, #1
 801028a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010294:	2b00      	cmp	r3, #0
 8010296:	d001      	beq.n	801029c <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 8010298:	2301      	movs	r3, #1
 801029a:	e000      	b.n	801029e <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 801029c:	7ffb      	ldrb	r3, [r7, #31]
}
 801029e:	4618      	mov	r0, r3
 80102a0:	3720      	adds	r7, #32
 80102a2:	46bd      	mov	sp, r7
 80102a4:	bd80      	pop	{r7, pc}
 80102a6:	bf00      	nop
 80102a8:	ffff0000 	.word	0xffff0000

080102ac <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80102ac:	b480      	push	{r7}
 80102ae:	b085      	sub	sp, #20
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	695b      	ldr	r3, [r3, #20]
 80102ba:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	699a      	ldr	r2, [r3, #24]
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	f042 0208 	orr.w	r2, r2, #8
 80102ca:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	699a      	ldr	r2, [r3, #24]
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	f042 0210 	orr.w	r2, r2, #16
 80102da:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	681a      	ldr	r2, [r3, #0]
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	f022 0201 	bic.w	r2, r2, #1
 80102ea:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	6919      	ldr	r1, [r3, #16]
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	681a      	ldr	r2, [r3, #0]
 80102f6:	4b3c      	ldr	r3, [pc, #240]	; (80103e8 <SPI_CloseTransfer+0x13c>)
 80102f8:	400b      	ands	r3, r1
 80102fa:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	689a      	ldr	r2, [r3, #8]
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 801030a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010312:	b2db      	uxtb	r3, r3
 8010314:	2b04      	cmp	r3, #4
 8010316:	d014      	beq.n	8010342 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	f003 0320 	and.w	r3, r3, #32
 801031e:	2b00      	cmp	r3, #0
 8010320:	d00f      	beq.n	8010342 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010328:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	699a      	ldr	r2, [r3, #24]
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	f042 0220 	orr.w	r2, r2, #32
 8010340:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010348:	b2db      	uxtb	r3, r3
 801034a:	2b03      	cmp	r3, #3
 801034c:	d014      	beq.n	8010378 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010354:	2b00      	cmp	r3, #0
 8010356:	d00f      	beq.n	8010378 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801035e:	f043 0204 	orr.w	r2, r3, #4
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	699a      	ldr	r2, [r3, #24]
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010376:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801037e:	2b00      	cmp	r3, #0
 8010380:	d00f      	beq.n	80103a2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010388:	f043 0201 	orr.w	r2, r3, #1
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	699a      	ldr	r2, [r3, #24]
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80103a0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d00f      	beq.n	80103cc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80103b2:	f043 0208 	orr.w	r2, r3, #8
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	699a      	ldr	r2, [r3, #24]
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80103ca:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	2200      	movs	r2, #0
 80103d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	2200      	movs	r2, #0
 80103d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80103dc:	bf00      	nop
 80103de:	3714      	adds	r7, #20
 80103e0:	46bd      	mov	sp, r7
 80103e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e6:	4770      	bx	lr
 80103e8:	fffffc90 	.word	0xfffffc90

080103ec <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b084      	sub	sp, #16
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	60f8      	str	r0, [r7, #12]
 80103f4:	60b9      	str	r1, [r7, #8]
 80103f6:	603b      	str	r3, [r7, #0]
 80103f8:	4613      	mov	r3, r2
 80103fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80103fc:	e010      	b.n	8010420 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80103fe:	f7f3 ff63 	bl	80042c8 <HAL_GetTick>
 8010402:	4602      	mov	r2, r0
 8010404:	69bb      	ldr	r3, [r7, #24]
 8010406:	1ad3      	subs	r3, r2, r3
 8010408:	683a      	ldr	r2, [r7, #0]
 801040a:	429a      	cmp	r2, r3
 801040c:	d803      	bhi.n	8010416 <SPI_WaitOnFlagUntilTimeout+0x2a>
 801040e:	683b      	ldr	r3, [r7, #0]
 8010410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010414:	d102      	bne.n	801041c <SPI_WaitOnFlagUntilTimeout+0x30>
 8010416:	683b      	ldr	r3, [r7, #0]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d101      	bne.n	8010420 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 801041c:	2303      	movs	r3, #3
 801041e:	e00f      	b.n	8010440 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	695a      	ldr	r2, [r3, #20]
 8010426:	68bb      	ldr	r3, [r7, #8]
 8010428:	4013      	ands	r3, r2
 801042a:	68ba      	ldr	r2, [r7, #8]
 801042c:	429a      	cmp	r2, r3
 801042e:	bf0c      	ite	eq
 8010430:	2301      	moveq	r3, #1
 8010432:	2300      	movne	r3, #0
 8010434:	b2db      	uxtb	r3, r3
 8010436:	461a      	mov	r2, r3
 8010438:	79fb      	ldrb	r3, [r7, #7]
 801043a:	429a      	cmp	r2, r3
 801043c:	d0df      	beq.n	80103fe <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 801043e:	2300      	movs	r3, #0
}
 8010440:	4618      	mov	r0, r3
 8010442:	3710      	adds	r7, #16
 8010444:	46bd      	mov	sp, r7
 8010446:	bd80      	pop	{r7, pc}

08010448 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8010448:	b480      	push	{r7}
 801044a:	b085      	sub	sp, #20
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010454:	095b      	lsrs	r3, r3, #5
 8010456:	3301      	adds	r3, #1
 8010458:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	68db      	ldr	r3, [r3, #12]
 801045e:	3301      	adds	r3, #1
 8010460:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8010462:	68bb      	ldr	r3, [r7, #8]
 8010464:	3307      	adds	r3, #7
 8010466:	08db      	lsrs	r3, r3, #3
 8010468:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 801046a:	68bb      	ldr	r3, [r7, #8]
 801046c:	68fa      	ldr	r2, [r7, #12]
 801046e:	fb02 f303 	mul.w	r3, r2, r3
}
 8010472:	4618      	mov	r0, r3
 8010474:	3714      	adds	r7, #20
 8010476:	46bd      	mov	sp, r7
 8010478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047c:	4770      	bx	lr

0801047e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801047e:	b580      	push	{r7, lr}
 8010480:	b082      	sub	sp, #8
 8010482:	af00      	add	r7, sp, #0
 8010484:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d101      	bne.n	8010490 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801048c:	2301      	movs	r3, #1
 801048e:	e049      	b.n	8010524 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010496:	b2db      	uxtb	r3, r3
 8010498:	2b00      	cmp	r3, #0
 801049a:	d106      	bne.n	80104aa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	2200      	movs	r2, #0
 80104a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80104a4:	6878      	ldr	r0, [r7, #4]
 80104a6:	f7f3 fae9 	bl	8003a7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	2202      	movs	r2, #2
 80104ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	681a      	ldr	r2, [r3, #0]
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	3304      	adds	r3, #4
 80104ba:	4619      	mov	r1, r3
 80104bc:	4610      	mov	r0, r2
 80104be:	f000 fe0d 	bl	80110dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	2201      	movs	r2, #1
 80104c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	2201      	movs	r2, #1
 80104ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	2201      	movs	r2, #1
 80104d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	2201      	movs	r2, #1
 80104de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	2201      	movs	r2, #1
 80104e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	2201      	movs	r2, #1
 80104ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	2201      	movs	r2, #1
 80104f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	2201      	movs	r2, #1
 80104fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	2201      	movs	r2, #1
 8010506:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	2201      	movs	r2, #1
 801050e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	2201      	movs	r2, #1
 8010516:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	2201      	movs	r2, #1
 801051e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010522:	2300      	movs	r3, #0
}
 8010524:	4618      	mov	r0, r3
 8010526:	3708      	adds	r7, #8
 8010528:	46bd      	mov	sp, r7
 801052a:	bd80      	pop	{r7, pc}

0801052c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801052c:	b580      	push	{r7, lr}
 801052e:	b082      	sub	sp, #8
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d101      	bne.n	801053e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801053a:	2301      	movs	r3, #1
 801053c:	e049      	b.n	80105d2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010544:	b2db      	uxtb	r3, r3
 8010546:	2b00      	cmp	r3, #0
 8010548:	d106      	bne.n	8010558 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	2200      	movs	r2, #0
 801054e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010552:	6878      	ldr	r0, [r7, #4]
 8010554:	f7f3 f8fc 	bl	8003750 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	2202      	movs	r2, #2
 801055c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	681a      	ldr	r2, [r3, #0]
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	3304      	adds	r3, #4
 8010568:	4619      	mov	r1, r3
 801056a:	4610      	mov	r0, r2
 801056c:	f000 fdb6 	bl	80110dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	2201      	movs	r2, #1
 8010574:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	2201      	movs	r2, #1
 801057c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	2201      	movs	r2, #1
 8010584:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	2201      	movs	r2, #1
 801058c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	2201      	movs	r2, #1
 8010594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	2201      	movs	r2, #1
 801059c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	2201      	movs	r2, #1
 80105a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	2201      	movs	r2, #1
 80105ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	2201      	movs	r2, #1
 80105b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	2201      	movs	r2, #1
 80105bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	2201      	movs	r2, #1
 80105c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	2201      	movs	r2, #1
 80105cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80105d0:	2300      	movs	r3, #0
}
 80105d2:	4618      	mov	r0, r3
 80105d4:	3708      	adds	r7, #8
 80105d6:	46bd      	mov	sp, r7
 80105d8:	bd80      	pop	{r7, pc}
	...

080105dc <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80105dc:	b580      	push	{r7, lr}
 80105de:	b086      	sub	sp, #24
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	60f8      	str	r0, [r7, #12]
 80105e4:	60b9      	str	r1, [r7, #8]
 80105e6:	607a      	str	r2, [r7, #4]
 80105e8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80105ea:	2300      	movs	r3, #0
 80105ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80105ee:	68bb      	ldr	r3, [r7, #8]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d109      	bne.n	8010608 <HAL_TIM_PWM_Start_DMA+0x2c>
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80105fa:	b2db      	uxtb	r3, r3
 80105fc:	2b02      	cmp	r3, #2
 80105fe:	bf0c      	ite	eq
 8010600:	2301      	moveq	r3, #1
 8010602:	2300      	movne	r3, #0
 8010604:	b2db      	uxtb	r3, r3
 8010606:	e03c      	b.n	8010682 <HAL_TIM_PWM_Start_DMA+0xa6>
 8010608:	68bb      	ldr	r3, [r7, #8]
 801060a:	2b04      	cmp	r3, #4
 801060c:	d109      	bne.n	8010622 <HAL_TIM_PWM_Start_DMA+0x46>
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010614:	b2db      	uxtb	r3, r3
 8010616:	2b02      	cmp	r3, #2
 8010618:	bf0c      	ite	eq
 801061a:	2301      	moveq	r3, #1
 801061c:	2300      	movne	r3, #0
 801061e:	b2db      	uxtb	r3, r3
 8010620:	e02f      	b.n	8010682 <HAL_TIM_PWM_Start_DMA+0xa6>
 8010622:	68bb      	ldr	r3, [r7, #8]
 8010624:	2b08      	cmp	r3, #8
 8010626:	d109      	bne.n	801063c <HAL_TIM_PWM_Start_DMA+0x60>
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801062e:	b2db      	uxtb	r3, r3
 8010630:	2b02      	cmp	r3, #2
 8010632:	bf0c      	ite	eq
 8010634:	2301      	moveq	r3, #1
 8010636:	2300      	movne	r3, #0
 8010638:	b2db      	uxtb	r3, r3
 801063a:	e022      	b.n	8010682 <HAL_TIM_PWM_Start_DMA+0xa6>
 801063c:	68bb      	ldr	r3, [r7, #8]
 801063e:	2b0c      	cmp	r3, #12
 8010640:	d109      	bne.n	8010656 <HAL_TIM_PWM_Start_DMA+0x7a>
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010648:	b2db      	uxtb	r3, r3
 801064a:	2b02      	cmp	r3, #2
 801064c:	bf0c      	ite	eq
 801064e:	2301      	moveq	r3, #1
 8010650:	2300      	movne	r3, #0
 8010652:	b2db      	uxtb	r3, r3
 8010654:	e015      	b.n	8010682 <HAL_TIM_PWM_Start_DMA+0xa6>
 8010656:	68bb      	ldr	r3, [r7, #8]
 8010658:	2b10      	cmp	r3, #16
 801065a:	d109      	bne.n	8010670 <HAL_TIM_PWM_Start_DMA+0x94>
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010662:	b2db      	uxtb	r3, r3
 8010664:	2b02      	cmp	r3, #2
 8010666:	bf0c      	ite	eq
 8010668:	2301      	moveq	r3, #1
 801066a:	2300      	movne	r3, #0
 801066c:	b2db      	uxtb	r3, r3
 801066e:	e008      	b.n	8010682 <HAL_TIM_PWM_Start_DMA+0xa6>
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010676:	b2db      	uxtb	r3, r3
 8010678:	2b02      	cmp	r3, #2
 801067a:	bf0c      	ite	eq
 801067c:	2301      	moveq	r3, #1
 801067e:	2300      	movne	r3, #0
 8010680:	b2db      	uxtb	r3, r3
 8010682:	2b00      	cmp	r3, #0
 8010684:	d001      	beq.n	801068a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8010686:	2302      	movs	r3, #2
 8010688:	e1ba      	b.n	8010a00 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 801068a:	68bb      	ldr	r3, [r7, #8]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d109      	bne.n	80106a4 <HAL_TIM_PWM_Start_DMA+0xc8>
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010696:	b2db      	uxtb	r3, r3
 8010698:	2b01      	cmp	r3, #1
 801069a:	bf0c      	ite	eq
 801069c:	2301      	moveq	r3, #1
 801069e:	2300      	movne	r3, #0
 80106a0:	b2db      	uxtb	r3, r3
 80106a2:	e03c      	b.n	801071e <HAL_TIM_PWM_Start_DMA+0x142>
 80106a4:	68bb      	ldr	r3, [r7, #8]
 80106a6:	2b04      	cmp	r3, #4
 80106a8:	d109      	bne.n	80106be <HAL_TIM_PWM_Start_DMA+0xe2>
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80106b0:	b2db      	uxtb	r3, r3
 80106b2:	2b01      	cmp	r3, #1
 80106b4:	bf0c      	ite	eq
 80106b6:	2301      	moveq	r3, #1
 80106b8:	2300      	movne	r3, #0
 80106ba:	b2db      	uxtb	r3, r3
 80106bc:	e02f      	b.n	801071e <HAL_TIM_PWM_Start_DMA+0x142>
 80106be:	68bb      	ldr	r3, [r7, #8]
 80106c0:	2b08      	cmp	r3, #8
 80106c2:	d109      	bne.n	80106d8 <HAL_TIM_PWM_Start_DMA+0xfc>
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80106ca:	b2db      	uxtb	r3, r3
 80106cc:	2b01      	cmp	r3, #1
 80106ce:	bf0c      	ite	eq
 80106d0:	2301      	moveq	r3, #1
 80106d2:	2300      	movne	r3, #0
 80106d4:	b2db      	uxtb	r3, r3
 80106d6:	e022      	b.n	801071e <HAL_TIM_PWM_Start_DMA+0x142>
 80106d8:	68bb      	ldr	r3, [r7, #8]
 80106da:	2b0c      	cmp	r3, #12
 80106dc:	d109      	bne.n	80106f2 <HAL_TIM_PWM_Start_DMA+0x116>
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80106e4:	b2db      	uxtb	r3, r3
 80106e6:	2b01      	cmp	r3, #1
 80106e8:	bf0c      	ite	eq
 80106ea:	2301      	moveq	r3, #1
 80106ec:	2300      	movne	r3, #0
 80106ee:	b2db      	uxtb	r3, r3
 80106f0:	e015      	b.n	801071e <HAL_TIM_PWM_Start_DMA+0x142>
 80106f2:	68bb      	ldr	r3, [r7, #8]
 80106f4:	2b10      	cmp	r3, #16
 80106f6:	d109      	bne.n	801070c <HAL_TIM_PWM_Start_DMA+0x130>
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80106fe:	b2db      	uxtb	r3, r3
 8010700:	2b01      	cmp	r3, #1
 8010702:	bf0c      	ite	eq
 8010704:	2301      	moveq	r3, #1
 8010706:	2300      	movne	r3, #0
 8010708:	b2db      	uxtb	r3, r3
 801070a:	e008      	b.n	801071e <HAL_TIM_PWM_Start_DMA+0x142>
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010712:	b2db      	uxtb	r3, r3
 8010714:	2b01      	cmp	r3, #1
 8010716:	bf0c      	ite	eq
 8010718:	2301      	moveq	r3, #1
 801071a:	2300      	movne	r3, #0
 801071c:	b2db      	uxtb	r3, r3
 801071e:	2b00      	cmp	r3, #0
 8010720:	d034      	beq.n	801078c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d002      	beq.n	801072e <HAL_TIM_PWM_Start_DMA+0x152>
 8010728:	887b      	ldrh	r3, [r7, #2]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d101      	bne.n	8010732 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 801072e:	2301      	movs	r3, #1
 8010730:	e166      	b.n	8010a00 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010732:	68bb      	ldr	r3, [r7, #8]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d104      	bne.n	8010742 <HAL_TIM_PWM_Start_DMA+0x166>
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	2202      	movs	r2, #2
 801073c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010740:	e026      	b.n	8010790 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8010742:	68bb      	ldr	r3, [r7, #8]
 8010744:	2b04      	cmp	r3, #4
 8010746:	d104      	bne.n	8010752 <HAL_TIM_PWM_Start_DMA+0x176>
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	2202      	movs	r2, #2
 801074c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010750:	e01e      	b.n	8010790 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8010752:	68bb      	ldr	r3, [r7, #8]
 8010754:	2b08      	cmp	r3, #8
 8010756:	d104      	bne.n	8010762 <HAL_TIM_PWM_Start_DMA+0x186>
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	2202      	movs	r2, #2
 801075c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010760:	e016      	b.n	8010790 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8010762:	68bb      	ldr	r3, [r7, #8]
 8010764:	2b0c      	cmp	r3, #12
 8010766:	d104      	bne.n	8010772 <HAL_TIM_PWM_Start_DMA+0x196>
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	2202      	movs	r2, #2
 801076c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010770:	e00e      	b.n	8010790 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8010772:	68bb      	ldr	r3, [r7, #8]
 8010774:	2b10      	cmp	r3, #16
 8010776:	d104      	bne.n	8010782 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	2202      	movs	r2, #2
 801077c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010780:	e006      	b.n	8010790 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	2202      	movs	r2, #2
 8010786:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801078a:	e001      	b.n	8010790 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 801078c:	2301      	movs	r3, #1
 801078e:	e137      	b.n	8010a00 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 8010790:	68bb      	ldr	r3, [r7, #8]
 8010792:	2b0c      	cmp	r3, #12
 8010794:	f200 80ae 	bhi.w	80108f4 <HAL_TIM_PWM_Start_DMA+0x318>
 8010798:	a201      	add	r2, pc, #4	; (adr r2, 80107a0 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 801079a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801079e:	bf00      	nop
 80107a0:	080107d5 	.word	0x080107d5
 80107a4:	080108f5 	.word	0x080108f5
 80107a8:	080108f5 	.word	0x080108f5
 80107ac:	080108f5 	.word	0x080108f5
 80107b0:	0801081d 	.word	0x0801081d
 80107b4:	080108f5 	.word	0x080108f5
 80107b8:	080108f5 	.word	0x080108f5
 80107bc:	080108f5 	.word	0x080108f5
 80107c0:	08010865 	.word	0x08010865
 80107c4:	080108f5 	.word	0x080108f5
 80107c8:	080108f5 	.word	0x080108f5
 80107cc:	080108f5 	.word	0x080108f5
 80107d0:	080108ad 	.word	0x080108ad
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107d8:	4a8b      	ldr	r2, [pc, #556]	; (8010a08 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80107da:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107e0:	4a8a      	ldr	r2, [pc, #552]	; (8010a0c <HAL_TIM_PWM_Start_DMA+0x430>)
 80107e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107e8:	4a89      	ldr	r2, [pc, #548]	; (8010a10 <HAL_TIM_PWM_Start_DMA+0x434>)
 80107ea:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80107f0:	6879      	ldr	r1, [r7, #4]
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	3334      	adds	r3, #52	; 0x34
 80107f8:	461a      	mov	r2, r3
 80107fa:	887b      	ldrh	r3, [r7, #2]
 80107fc:	f7f5 fd82 	bl	8006304 <HAL_DMA_Start_IT>
 8010800:	4603      	mov	r3, r0
 8010802:	2b00      	cmp	r3, #0
 8010804:	d001      	beq.n	801080a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8010806:	2301      	movs	r3, #1
 8010808:	e0fa      	b.n	8010a00 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	68da      	ldr	r2, [r3, #12]
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010818:	60da      	str	r2, [r3, #12]
      break;
 801081a:	e06e      	b.n	80108fa <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010820:	4a79      	ldr	r2, [pc, #484]	; (8010a08 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8010822:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010828:	4a78      	ldr	r2, [pc, #480]	; (8010a0c <HAL_TIM_PWM_Start_DMA+0x430>)
 801082a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010830:	4a77      	ldr	r2, [pc, #476]	; (8010a10 <HAL_TIM_PWM_Start_DMA+0x434>)
 8010832:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8010838:	6879      	ldr	r1, [r7, #4]
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	3338      	adds	r3, #56	; 0x38
 8010840:	461a      	mov	r2, r3
 8010842:	887b      	ldrh	r3, [r7, #2]
 8010844:	f7f5 fd5e 	bl	8006304 <HAL_DMA_Start_IT>
 8010848:	4603      	mov	r3, r0
 801084a:	2b00      	cmp	r3, #0
 801084c:	d001      	beq.n	8010852 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 801084e:	2301      	movs	r3, #1
 8010850:	e0d6      	b.n	8010a00 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	68da      	ldr	r2, [r3, #12]
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010860:	60da      	str	r2, [r3, #12]
      break;
 8010862:	e04a      	b.n	80108fa <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010868:	4a67      	ldr	r2, [pc, #412]	; (8010a08 <HAL_TIM_PWM_Start_DMA+0x42c>)
 801086a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010870:	4a66      	ldr	r2, [pc, #408]	; (8010a0c <HAL_TIM_PWM_Start_DMA+0x430>)
 8010872:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010878:	4a65      	ldr	r2, [pc, #404]	; (8010a10 <HAL_TIM_PWM_Start_DMA+0x434>)
 801087a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8010880:	6879      	ldr	r1, [r7, #4]
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	333c      	adds	r3, #60	; 0x3c
 8010888:	461a      	mov	r2, r3
 801088a:	887b      	ldrh	r3, [r7, #2]
 801088c:	f7f5 fd3a 	bl	8006304 <HAL_DMA_Start_IT>
 8010890:	4603      	mov	r3, r0
 8010892:	2b00      	cmp	r3, #0
 8010894:	d001      	beq.n	801089a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8010896:	2301      	movs	r3, #1
 8010898:	e0b2      	b.n	8010a00 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	68da      	ldr	r2, [r3, #12]
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80108a8:	60da      	str	r2, [r3, #12]
      break;
 80108aa:	e026      	b.n	80108fa <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108b0:	4a55      	ldr	r2, [pc, #340]	; (8010a08 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80108b2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108b8:	4a54      	ldr	r2, [pc, #336]	; (8010a0c <HAL_TIM_PWM_Start_DMA+0x430>)
 80108ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108c0:	4a53      	ldr	r2, [pc, #332]	; (8010a10 <HAL_TIM_PWM_Start_DMA+0x434>)
 80108c2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80108c8:	6879      	ldr	r1, [r7, #4]
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	3340      	adds	r3, #64	; 0x40
 80108d0:	461a      	mov	r2, r3
 80108d2:	887b      	ldrh	r3, [r7, #2]
 80108d4:	f7f5 fd16 	bl	8006304 <HAL_DMA_Start_IT>
 80108d8:	4603      	mov	r3, r0
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d001      	beq.n	80108e2 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80108de:	2301      	movs	r3, #1
 80108e0:	e08e      	b.n	8010a00 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	68da      	ldr	r2, [r3, #12]
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80108f0:	60da      	str	r2, [r3, #12]
      break;
 80108f2:	e002      	b.n	80108fa <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80108f4:	2301      	movs	r3, #1
 80108f6:	75fb      	strb	r3, [r7, #23]
      break;
 80108f8:	bf00      	nop
  }

  if (status == HAL_OK)
 80108fa:	7dfb      	ldrb	r3, [r7, #23]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d17e      	bne.n	80109fe <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	2201      	movs	r2, #1
 8010906:	68b9      	ldr	r1, [r7, #8]
 8010908:	4618      	mov	r0, r3
 801090a:	f000 ff63 	bl	80117d4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	4a40      	ldr	r2, [pc, #256]	; (8010a14 <HAL_TIM_PWM_Start_DMA+0x438>)
 8010914:	4293      	cmp	r3, r2
 8010916:	d013      	beq.n	8010940 <HAL_TIM_PWM_Start_DMA+0x364>
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	4a3e      	ldr	r2, [pc, #248]	; (8010a18 <HAL_TIM_PWM_Start_DMA+0x43c>)
 801091e:	4293      	cmp	r3, r2
 8010920:	d00e      	beq.n	8010940 <HAL_TIM_PWM_Start_DMA+0x364>
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	4a3d      	ldr	r2, [pc, #244]	; (8010a1c <HAL_TIM_PWM_Start_DMA+0x440>)
 8010928:	4293      	cmp	r3, r2
 801092a:	d009      	beq.n	8010940 <HAL_TIM_PWM_Start_DMA+0x364>
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	4a3b      	ldr	r2, [pc, #236]	; (8010a20 <HAL_TIM_PWM_Start_DMA+0x444>)
 8010932:	4293      	cmp	r3, r2
 8010934:	d004      	beq.n	8010940 <HAL_TIM_PWM_Start_DMA+0x364>
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	4a3a      	ldr	r2, [pc, #232]	; (8010a24 <HAL_TIM_PWM_Start_DMA+0x448>)
 801093c:	4293      	cmp	r3, r2
 801093e:	d101      	bne.n	8010944 <HAL_TIM_PWM_Start_DMA+0x368>
 8010940:	2301      	movs	r3, #1
 8010942:	e000      	b.n	8010946 <HAL_TIM_PWM_Start_DMA+0x36a>
 8010944:	2300      	movs	r3, #0
 8010946:	2b00      	cmp	r3, #0
 8010948:	d007      	beq.n	801095a <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010958:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	4a2d      	ldr	r2, [pc, #180]	; (8010a14 <HAL_TIM_PWM_Start_DMA+0x438>)
 8010960:	4293      	cmp	r3, r2
 8010962:	d02c      	beq.n	80109be <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801096c:	d027      	beq.n	80109be <HAL_TIM_PWM_Start_DMA+0x3e2>
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	4a2d      	ldr	r2, [pc, #180]	; (8010a28 <HAL_TIM_PWM_Start_DMA+0x44c>)
 8010974:	4293      	cmp	r3, r2
 8010976:	d022      	beq.n	80109be <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	4a2b      	ldr	r2, [pc, #172]	; (8010a2c <HAL_TIM_PWM_Start_DMA+0x450>)
 801097e:	4293      	cmp	r3, r2
 8010980:	d01d      	beq.n	80109be <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	4a2a      	ldr	r2, [pc, #168]	; (8010a30 <HAL_TIM_PWM_Start_DMA+0x454>)
 8010988:	4293      	cmp	r3, r2
 801098a:	d018      	beq.n	80109be <HAL_TIM_PWM_Start_DMA+0x3e2>
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	4a21      	ldr	r2, [pc, #132]	; (8010a18 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8010992:	4293      	cmp	r3, r2
 8010994:	d013      	beq.n	80109be <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	4a26      	ldr	r2, [pc, #152]	; (8010a34 <HAL_TIM_PWM_Start_DMA+0x458>)
 801099c:	4293      	cmp	r3, r2
 801099e:	d00e      	beq.n	80109be <HAL_TIM_PWM_Start_DMA+0x3e2>
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	4a1d      	ldr	r2, [pc, #116]	; (8010a1c <HAL_TIM_PWM_Start_DMA+0x440>)
 80109a6:	4293      	cmp	r3, r2
 80109a8:	d009      	beq.n	80109be <HAL_TIM_PWM_Start_DMA+0x3e2>
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	4a22      	ldr	r2, [pc, #136]	; (8010a38 <HAL_TIM_PWM_Start_DMA+0x45c>)
 80109b0:	4293      	cmp	r3, r2
 80109b2:	d004      	beq.n	80109be <HAL_TIM_PWM_Start_DMA+0x3e2>
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	4a20      	ldr	r2, [pc, #128]	; (8010a3c <HAL_TIM_PWM_Start_DMA+0x460>)
 80109ba:	4293      	cmp	r3, r2
 80109bc:	d115      	bne.n	80109ea <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	689a      	ldr	r2, [r3, #8]
 80109c4:	4b1e      	ldr	r3, [pc, #120]	; (8010a40 <HAL_TIM_PWM_Start_DMA+0x464>)
 80109c6:	4013      	ands	r3, r2
 80109c8:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80109ca:	693b      	ldr	r3, [r7, #16]
 80109cc:	2b06      	cmp	r3, #6
 80109ce:	d015      	beq.n	80109fc <HAL_TIM_PWM_Start_DMA+0x420>
 80109d0:	693b      	ldr	r3, [r7, #16]
 80109d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80109d6:	d011      	beq.n	80109fc <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	681a      	ldr	r2, [r3, #0]
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	f042 0201 	orr.w	r2, r2, #1
 80109e6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80109e8:	e008      	b.n	80109fc <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	681a      	ldr	r2, [r3, #0]
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	f042 0201 	orr.w	r2, r2, #1
 80109f8:	601a      	str	r2, [r3, #0]
 80109fa:	e000      	b.n	80109fe <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80109fc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80109fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a00:	4618      	mov	r0, r3
 8010a02:	3718      	adds	r7, #24
 8010a04:	46bd      	mov	sp, r7
 8010a06:	bd80      	pop	{r7, pc}
 8010a08:	08010fcb 	.word	0x08010fcb
 8010a0c:	08011073 	.word	0x08011073
 8010a10:	08010f39 	.word	0x08010f39
 8010a14:	40010000 	.word	0x40010000
 8010a18:	40010400 	.word	0x40010400
 8010a1c:	40014000 	.word	0x40014000
 8010a20:	40014400 	.word	0x40014400
 8010a24:	40014800 	.word	0x40014800
 8010a28:	40000400 	.word	0x40000400
 8010a2c:	40000800 	.word	0x40000800
 8010a30:	40000c00 	.word	0x40000c00
 8010a34:	40001800 	.word	0x40001800
 8010a38:	4000e000 	.word	0x4000e000
 8010a3c:	4000e400 	.word	0x4000e400
 8010a40:	00010007 	.word	0x00010007

08010a44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b082      	sub	sp, #8
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	691b      	ldr	r3, [r3, #16]
 8010a52:	f003 0302 	and.w	r3, r3, #2
 8010a56:	2b02      	cmp	r3, #2
 8010a58:	d122      	bne.n	8010aa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	68db      	ldr	r3, [r3, #12]
 8010a60:	f003 0302 	and.w	r3, r3, #2
 8010a64:	2b02      	cmp	r3, #2
 8010a66:	d11b      	bne.n	8010aa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	f06f 0202 	mvn.w	r2, #2
 8010a70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	2201      	movs	r2, #1
 8010a76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	699b      	ldr	r3, [r3, #24]
 8010a7e:	f003 0303 	and.w	r3, r3, #3
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d003      	beq.n	8010a8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010a86:	6878      	ldr	r0, [r7, #4]
 8010a88:	f000 fa24 	bl	8010ed4 <HAL_TIM_IC_CaptureCallback>
 8010a8c:	e005      	b.n	8010a9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010a8e:	6878      	ldr	r0, [r7, #4]
 8010a90:	f000 fa16 	bl	8010ec0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010a94:	6878      	ldr	r0, [r7, #4]
 8010a96:	f000 fa27 	bl	8010ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	691b      	ldr	r3, [r3, #16]
 8010aa6:	f003 0304 	and.w	r3, r3, #4
 8010aaa:	2b04      	cmp	r3, #4
 8010aac:	d122      	bne.n	8010af4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	68db      	ldr	r3, [r3, #12]
 8010ab4:	f003 0304 	and.w	r3, r3, #4
 8010ab8:	2b04      	cmp	r3, #4
 8010aba:	d11b      	bne.n	8010af4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	f06f 0204 	mvn.w	r2, #4
 8010ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	2202      	movs	r2, #2
 8010aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	699b      	ldr	r3, [r3, #24]
 8010ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d003      	beq.n	8010ae2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010ada:	6878      	ldr	r0, [r7, #4]
 8010adc:	f000 f9fa 	bl	8010ed4 <HAL_TIM_IC_CaptureCallback>
 8010ae0:	e005      	b.n	8010aee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010ae2:	6878      	ldr	r0, [r7, #4]
 8010ae4:	f000 f9ec 	bl	8010ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010ae8:	6878      	ldr	r0, [r7, #4]
 8010aea:	f000 f9fd 	bl	8010ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	2200      	movs	r2, #0
 8010af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	691b      	ldr	r3, [r3, #16]
 8010afa:	f003 0308 	and.w	r3, r3, #8
 8010afe:	2b08      	cmp	r3, #8
 8010b00:	d122      	bne.n	8010b48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	68db      	ldr	r3, [r3, #12]
 8010b08:	f003 0308 	and.w	r3, r3, #8
 8010b0c:	2b08      	cmp	r3, #8
 8010b0e:	d11b      	bne.n	8010b48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	f06f 0208 	mvn.w	r2, #8
 8010b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	2204      	movs	r2, #4
 8010b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	69db      	ldr	r3, [r3, #28]
 8010b26:	f003 0303 	and.w	r3, r3, #3
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d003      	beq.n	8010b36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010b2e:	6878      	ldr	r0, [r7, #4]
 8010b30:	f000 f9d0 	bl	8010ed4 <HAL_TIM_IC_CaptureCallback>
 8010b34:	e005      	b.n	8010b42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010b36:	6878      	ldr	r0, [r7, #4]
 8010b38:	f000 f9c2 	bl	8010ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010b3c:	6878      	ldr	r0, [r7, #4]
 8010b3e:	f000 f9d3 	bl	8010ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	2200      	movs	r2, #0
 8010b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	691b      	ldr	r3, [r3, #16]
 8010b4e:	f003 0310 	and.w	r3, r3, #16
 8010b52:	2b10      	cmp	r3, #16
 8010b54:	d122      	bne.n	8010b9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	68db      	ldr	r3, [r3, #12]
 8010b5c:	f003 0310 	and.w	r3, r3, #16
 8010b60:	2b10      	cmp	r3, #16
 8010b62:	d11b      	bne.n	8010b9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	f06f 0210 	mvn.w	r2, #16
 8010b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	2208      	movs	r2, #8
 8010b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	69db      	ldr	r3, [r3, #28]
 8010b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d003      	beq.n	8010b8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010b82:	6878      	ldr	r0, [r7, #4]
 8010b84:	f000 f9a6 	bl	8010ed4 <HAL_TIM_IC_CaptureCallback>
 8010b88:	e005      	b.n	8010b96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010b8a:	6878      	ldr	r0, [r7, #4]
 8010b8c:	f000 f998 	bl	8010ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010b90:	6878      	ldr	r0, [r7, #4]
 8010b92:	f000 f9a9 	bl	8010ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	2200      	movs	r2, #0
 8010b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	691b      	ldr	r3, [r3, #16]
 8010ba2:	f003 0301 	and.w	r3, r3, #1
 8010ba6:	2b01      	cmp	r3, #1
 8010ba8:	d10e      	bne.n	8010bc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	68db      	ldr	r3, [r3, #12]
 8010bb0:	f003 0301 	and.w	r3, r3, #1
 8010bb4:	2b01      	cmp	r3, #1
 8010bb6:	d107      	bne.n	8010bc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	f06f 0201 	mvn.w	r2, #1
 8010bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010bc2:	6878      	ldr	r0, [r7, #4]
 8010bc4:	f000 f972 	bl	8010eac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	691b      	ldr	r3, [r3, #16]
 8010bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010bd2:	2b80      	cmp	r3, #128	; 0x80
 8010bd4:	d10e      	bne.n	8010bf4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	68db      	ldr	r3, [r3, #12]
 8010bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010be0:	2b80      	cmp	r3, #128	; 0x80
 8010be2:	d107      	bne.n	8010bf4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010bee:	6878      	ldr	r0, [r7, #4]
 8010bf0:	f000 febc 	bl	801196c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	691b      	ldr	r3, [r3, #16]
 8010bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010bfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010c02:	d10e      	bne.n	8010c22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	68db      	ldr	r3, [r3, #12]
 8010c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c0e:	2b80      	cmp	r3, #128	; 0x80
 8010c10:	d107      	bne.n	8010c22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8010c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010c1c:	6878      	ldr	r0, [r7, #4]
 8010c1e:	f000 feaf 	bl	8011980 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	691b      	ldr	r3, [r3, #16]
 8010c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c2c:	2b40      	cmp	r3, #64	; 0x40
 8010c2e:	d10e      	bne.n	8010c4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	68db      	ldr	r3, [r3, #12]
 8010c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c3a:	2b40      	cmp	r3, #64	; 0x40
 8010c3c:	d107      	bne.n	8010c4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010c46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010c48:	6878      	ldr	r0, [r7, #4]
 8010c4a:	f000 f961 	bl	8010f10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	691b      	ldr	r3, [r3, #16]
 8010c54:	f003 0320 	and.w	r3, r3, #32
 8010c58:	2b20      	cmp	r3, #32
 8010c5a:	d10e      	bne.n	8010c7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	68db      	ldr	r3, [r3, #12]
 8010c62:	f003 0320 	and.w	r3, r3, #32
 8010c66:	2b20      	cmp	r3, #32
 8010c68:	d107      	bne.n	8010c7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	f06f 0220 	mvn.w	r2, #32
 8010c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010c74:	6878      	ldr	r0, [r7, #4]
 8010c76:	f000 fe6f 	bl	8011958 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010c7a:	bf00      	nop
 8010c7c:	3708      	adds	r7, #8
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	bd80      	pop	{r7, pc}
	...

08010c84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b086      	sub	sp, #24
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	60f8      	str	r0, [r7, #12]
 8010c8c:	60b9      	str	r1, [r7, #8]
 8010c8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010c90:	2300      	movs	r3, #0
 8010c92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010c9a:	2b01      	cmp	r3, #1
 8010c9c:	d101      	bne.n	8010ca2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8010c9e:	2302      	movs	r3, #2
 8010ca0:	e0ff      	b.n	8010ea2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	2201      	movs	r2, #1
 8010ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	2b14      	cmp	r3, #20
 8010cae:	f200 80f0 	bhi.w	8010e92 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8010cb2:	a201      	add	r2, pc, #4	; (adr r2, 8010cb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8010cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cb8:	08010d0d 	.word	0x08010d0d
 8010cbc:	08010e93 	.word	0x08010e93
 8010cc0:	08010e93 	.word	0x08010e93
 8010cc4:	08010e93 	.word	0x08010e93
 8010cc8:	08010d4d 	.word	0x08010d4d
 8010ccc:	08010e93 	.word	0x08010e93
 8010cd0:	08010e93 	.word	0x08010e93
 8010cd4:	08010e93 	.word	0x08010e93
 8010cd8:	08010d8f 	.word	0x08010d8f
 8010cdc:	08010e93 	.word	0x08010e93
 8010ce0:	08010e93 	.word	0x08010e93
 8010ce4:	08010e93 	.word	0x08010e93
 8010ce8:	08010dcf 	.word	0x08010dcf
 8010cec:	08010e93 	.word	0x08010e93
 8010cf0:	08010e93 	.word	0x08010e93
 8010cf4:	08010e93 	.word	0x08010e93
 8010cf8:	08010e11 	.word	0x08010e11
 8010cfc:	08010e93 	.word	0x08010e93
 8010d00:	08010e93 	.word	0x08010e93
 8010d04:	08010e93 	.word	0x08010e93
 8010d08:	08010e51 	.word	0x08010e51
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	68b9      	ldr	r1, [r7, #8]
 8010d12:	4618      	mov	r0, r3
 8010d14:	f000 fa88 	bl	8011228 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	699a      	ldr	r2, [r3, #24]
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	f042 0208 	orr.w	r2, r2, #8
 8010d26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	699a      	ldr	r2, [r3, #24]
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	f022 0204 	bic.w	r2, r2, #4
 8010d36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	6999      	ldr	r1, [r3, #24]
 8010d3e:	68bb      	ldr	r3, [r7, #8]
 8010d40:	691a      	ldr	r2, [r3, #16]
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	430a      	orrs	r2, r1
 8010d48:	619a      	str	r2, [r3, #24]
      break;
 8010d4a:	e0a5      	b.n	8010e98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	68b9      	ldr	r1, [r7, #8]
 8010d52:	4618      	mov	r0, r3
 8010d54:	f000 faf8 	bl	8011348 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	699a      	ldr	r2, [r3, #24]
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010d66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	699a      	ldr	r2, [r3, #24]
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010d76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	6999      	ldr	r1, [r3, #24]
 8010d7e:	68bb      	ldr	r3, [r7, #8]
 8010d80:	691b      	ldr	r3, [r3, #16]
 8010d82:	021a      	lsls	r2, r3, #8
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	430a      	orrs	r2, r1
 8010d8a:	619a      	str	r2, [r3, #24]
      break;
 8010d8c:	e084      	b.n	8010e98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	68b9      	ldr	r1, [r7, #8]
 8010d94:	4618      	mov	r0, r3
 8010d96:	f000 fb61 	bl	801145c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	69da      	ldr	r2, [r3, #28]
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	f042 0208 	orr.w	r2, r2, #8
 8010da8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	69da      	ldr	r2, [r3, #28]
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	f022 0204 	bic.w	r2, r2, #4
 8010db8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	69d9      	ldr	r1, [r3, #28]
 8010dc0:	68bb      	ldr	r3, [r7, #8]
 8010dc2:	691a      	ldr	r2, [r3, #16]
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	430a      	orrs	r2, r1
 8010dca:	61da      	str	r2, [r3, #28]
      break;
 8010dcc:	e064      	b.n	8010e98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	68b9      	ldr	r1, [r7, #8]
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	f000 fbc9 	bl	801156c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	69da      	ldr	r2, [r3, #28]
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010de8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	69da      	ldr	r2, [r3, #28]
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010df8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	69d9      	ldr	r1, [r3, #28]
 8010e00:	68bb      	ldr	r3, [r7, #8]
 8010e02:	691b      	ldr	r3, [r3, #16]
 8010e04:	021a      	lsls	r2, r3, #8
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	430a      	orrs	r2, r1
 8010e0c:	61da      	str	r2, [r3, #28]
      break;
 8010e0e:	e043      	b.n	8010e98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	68b9      	ldr	r1, [r7, #8]
 8010e16:	4618      	mov	r0, r3
 8010e18:	f000 fc12 	bl	8011640 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	f042 0208 	orr.w	r2, r2, #8
 8010e2a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	f022 0204 	bic.w	r2, r2, #4
 8010e3a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010e42:	68bb      	ldr	r3, [r7, #8]
 8010e44:	691a      	ldr	r2, [r3, #16]
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	430a      	orrs	r2, r1
 8010e4c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010e4e:	e023      	b.n	8010e98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	68b9      	ldr	r1, [r7, #8]
 8010e56:	4618      	mov	r0, r3
 8010e58:	f000 fc56 	bl	8011708 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010e6a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010e7a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010e82:	68bb      	ldr	r3, [r7, #8]
 8010e84:	691b      	ldr	r3, [r3, #16]
 8010e86:	021a      	lsls	r2, r3, #8
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	430a      	orrs	r2, r1
 8010e8e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010e90:	e002      	b.n	8010e98 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8010e92:	2301      	movs	r3, #1
 8010e94:	75fb      	strb	r3, [r7, #23]
      break;
 8010e96:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	2200      	movs	r2, #0
 8010e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010ea0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	3718      	adds	r7, #24
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	bd80      	pop	{r7, pc}
 8010eaa:	bf00      	nop

08010eac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010eac:	b480      	push	{r7}
 8010eae:	b083      	sub	sp, #12
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8010eb4:	bf00      	nop
 8010eb6:	370c      	adds	r7, #12
 8010eb8:	46bd      	mov	sp, r7
 8010eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ebe:	4770      	bx	lr

08010ec0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010ec0:	b480      	push	{r7}
 8010ec2:	b083      	sub	sp, #12
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010ec8:	bf00      	nop
 8010eca:	370c      	adds	r7, #12
 8010ecc:	46bd      	mov	sp, r7
 8010ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed2:	4770      	bx	lr

08010ed4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010ed4:	b480      	push	{r7}
 8010ed6:	b083      	sub	sp, #12
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010edc:	bf00      	nop
 8010ede:	370c      	adds	r7, #12
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee6:	4770      	bx	lr

08010ee8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010ee8:	b480      	push	{r7}
 8010eea:	b083      	sub	sp, #12
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010ef0:	bf00      	nop
 8010ef2:	370c      	adds	r7, #12
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010efa:	4770      	bx	lr

08010efc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010efc:	b480      	push	{r7}
 8010efe:	b083      	sub	sp, #12
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8010f04:	bf00      	nop
 8010f06:	370c      	adds	r7, #12
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0e:	4770      	bx	lr

08010f10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010f10:	b480      	push	{r7}
 8010f12:	b083      	sub	sp, #12
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010f18:	bf00      	nop
 8010f1a:	370c      	adds	r7, #12
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f22:	4770      	bx	lr

08010f24 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8010f24:	b480      	push	{r7}
 8010f26:	b083      	sub	sp, #12
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8010f2c:	bf00      	nop
 8010f2e:	370c      	adds	r7, #12
 8010f30:	46bd      	mov	sp, r7
 8010f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f36:	4770      	bx	lr

08010f38 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	b084      	sub	sp, #16
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f44:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f4a:	687a      	ldr	r2, [r7, #4]
 8010f4c:	429a      	cmp	r2, r3
 8010f4e:	d107      	bne.n	8010f60 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	2201      	movs	r2, #1
 8010f54:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	2201      	movs	r2, #1
 8010f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010f5e:	e02a      	b.n	8010fb6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f64:	687a      	ldr	r2, [r7, #4]
 8010f66:	429a      	cmp	r2, r3
 8010f68:	d107      	bne.n	8010f7a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	2202      	movs	r2, #2
 8010f6e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	2201      	movs	r2, #1
 8010f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010f78:	e01d      	b.n	8010fb6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f7e:	687a      	ldr	r2, [r7, #4]
 8010f80:	429a      	cmp	r2, r3
 8010f82:	d107      	bne.n	8010f94 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	2204      	movs	r2, #4
 8010f88:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	2201      	movs	r2, #1
 8010f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010f92:	e010      	b.n	8010fb6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f98:	687a      	ldr	r2, [r7, #4]
 8010f9a:	429a      	cmp	r2, r3
 8010f9c:	d107      	bne.n	8010fae <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	2208      	movs	r2, #8
 8010fa2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	2201      	movs	r2, #1
 8010fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010fac:	e003      	b.n	8010fb6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	2201      	movs	r2, #1
 8010fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8010fb6:	68f8      	ldr	r0, [r7, #12]
 8010fb8:	f7ff ffb4 	bl	8010f24 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	771a      	strb	r2, [r3, #28]
}
 8010fc2:	bf00      	nop
 8010fc4:	3710      	adds	r7, #16
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	bd80      	pop	{r7, pc}

08010fca <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8010fca:	b580      	push	{r7, lr}
 8010fcc:	b084      	sub	sp, #16
 8010fce:	af00      	add	r7, sp, #0
 8010fd0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fd6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fdc:	687a      	ldr	r2, [r7, #4]
 8010fde:	429a      	cmp	r2, r3
 8010fe0:	d10b      	bne.n	8010ffa <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	2201      	movs	r2, #1
 8010fe6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	69db      	ldr	r3, [r3, #28]
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d136      	bne.n	801105e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	2201      	movs	r2, #1
 8010ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010ff8:	e031      	b.n	801105e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ffe:	687a      	ldr	r2, [r7, #4]
 8011000:	429a      	cmp	r2, r3
 8011002:	d10b      	bne.n	801101c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	2202      	movs	r2, #2
 8011008:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	69db      	ldr	r3, [r3, #28]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d125      	bne.n	801105e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	2201      	movs	r2, #1
 8011016:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801101a:	e020      	b.n	801105e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011020:	687a      	ldr	r2, [r7, #4]
 8011022:	429a      	cmp	r2, r3
 8011024:	d10b      	bne.n	801103e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	2204      	movs	r2, #4
 801102a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	69db      	ldr	r3, [r3, #28]
 8011030:	2b00      	cmp	r3, #0
 8011032:	d114      	bne.n	801105e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	2201      	movs	r2, #1
 8011038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801103c:	e00f      	b.n	801105e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011042:	687a      	ldr	r2, [r7, #4]
 8011044:	429a      	cmp	r2, r3
 8011046:	d10a      	bne.n	801105e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	2208      	movs	r2, #8
 801104c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	69db      	ldr	r3, [r3, #28]
 8011052:	2b00      	cmp	r3, #0
 8011054:	d103      	bne.n	801105e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	2201      	movs	r2, #1
 801105a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 801105e:	68f8      	ldr	r0, [r7, #12]
 8011060:	f7ff ff42 	bl	8010ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	2200      	movs	r2, #0
 8011068:	771a      	strb	r2, [r3, #28]
}
 801106a:	bf00      	nop
 801106c:	3710      	adds	r7, #16
 801106e:	46bd      	mov	sp, r7
 8011070:	bd80      	pop	{r7, pc}

08011072 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011072:	b580      	push	{r7, lr}
 8011074:	b084      	sub	sp, #16
 8011076:	af00      	add	r7, sp, #0
 8011078:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801107e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011084:	687a      	ldr	r2, [r7, #4]
 8011086:	429a      	cmp	r2, r3
 8011088:	d103      	bne.n	8011092 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	2201      	movs	r2, #1
 801108e:	771a      	strb	r2, [r3, #28]
 8011090:	e019      	b.n	80110c6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011096:	687a      	ldr	r2, [r7, #4]
 8011098:	429a      	cmp	r2, r3
 801109a:	d103      	bne.n	80110a4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	2202      	movs	r2, #2
 80110a0:	771a      	strb	r2, [r3, #28]
 80110a2:	e010      	b.n	80110c6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110a8:	687a      	ldr	r2, [r7, #4]
 80110aa:	429a      	cmp	r2, r3
 80110ac:	d103      	bne.n	80110b6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	2204      	movs	r2, #4
 80110b2:	771a      	strb	r2, [r3, #28]
 80110b4:	e007      	b.n	80110c6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110ba:	687a      	ldr	r2, [r7, #4]
 80110bc:	429a      	cmp	r2, r3
 80110be:	d102      	bne.n	80110c6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	2208      	movs	r2, #8
 80110c4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80110c6:	68f8      	ldr	r0, [r7, #12]
 80110c8:	f7ff ff18 	bl	8010efc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	2200      	movs	r2, #0
 80110d0:	771a      	strb	r2, [r3, #28]
}
 80110d2:	bf00      	nop
 80110d4:	3710      	adds	r7, #16
 80110d6:	46bd      	mov	sp, r7
 80110d8:	bd80      	pop	{r7, pc}
	...

080110dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80110dc:	b480      	push	{r7}
 80110de:	b085      	sub	sp, #20
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
 80110e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	4a44      	ldr	r2, [pc, #272]	; (8011200 <TIM_Base_SetConfig+0x124>)
 80110f0:	4293      	cmp	r3, r2
 80110f2:	d013      	beq.n	801111c <TIM_Base_SetConfig+0x40>
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80110fa:	d00f      	beq.n	801111c <TIM_Base_SetConfig+0x40>
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	4a41      	ldr	r2, [pc, #260]	; (8011204 <TIM_Base_SetConfig+0x128>)
 8011100:	4293      	cmp	r3, r2
 8011102:	d00b      	beq.n	801111c <TIM_Base_SetConfig+0x40>
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	4a40      	ldr	r2, [pc, #256]	; (8011208 <TIM_Base_SetConfig+0x12c>)
 8011108:	4293      	cmp	r3, r2
 801110a:	d007      	beq.n	801111c <TIM_Base_SetConfig+0x40>
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	4a3f      	ldr	r2, [pc, #252]	; (801120c <TIM_Base_SetConfig+0x130>)
 8011110:	4293      	cmp	r3, r2
 8011112:	d003      	beq.n	801111c <TIM_Base_SetConfig+0x40>
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	4a3e      	ldr	r2, [pc, #248]	; (8011210 <TIM_Base_SetConfig+0x134>)
 8011118:	4293      	cmp	r3, r2
 801111a:	d108      	bne.n	801112e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011122:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011124:	683b      	ldr	r3, [r7, #0]
 8011126:	685b      	ldr	r3, [r3, #4]
 8011128:	68fa      	ldr	r2, [r7, #12]
 801112a:	4313      	orrs	r3, r2
 801112c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	4a33      	ldr	r2, [pc, #204]	; (8011200 <TIM_Base_SetConfig+0x124>)
 8011132:	4293      	cmp	r3, r2
 8011134:	d027      	beq.n	8011186 <TIM_Base_SetConfig+0xaa>
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801113c:	d023      	beq.n	8011186 <TIM_Base_SetConfig+0xaa>
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	4a30      	ldr	r2, [pc, #192]	; (8011204 <TIM_Base_SetConfig+0x128>)
 8011142:	4293      	cmp	r3, r2
 8011144:	d01f      	beq.n	8011186 <TIM_Base_SetConfig+0xaa>
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	4a2f      	ldr	r2, [pc, #188]	; (8011208 <TIM_Base_SetConfig+0x12c>)
 801114a:	4293      	cmp	r3, r2
 801114c:	d01b      	beq.n	8011186 <TIM_Base_SetConfig+0xaa>
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	4a2e      	ldr	r2, [pc, #184]	; (801120c <TIM_Base_SetConfig+0x130>)
 8011152:	4293      	cmp	r3, r2
 8011154:	d017      	beq.n	8011186 <TIM_Base_SetConfig+0xaa>
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	4a2d      	ldr	r2, [pc, #180]	; (8011210 <TIM_Base_SetConfig+0x134>)
 801115a:	4293      	cmp	r3, r2
 801115c:	d013      	beq.n	8011186 <TIM_Base_SetConfig+0xaa>
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	4a2c      	ldr	r2, [pc, #176]	; (8011214 <TIM_Base_SetConfig+0x138>)
 8011162:	4293      	cmp	r3, r2
 8011164:	d00f      	beq.n	8011186 <TIM_Base_SetConfig+0xaa>
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	4a2b      	ldr	r2, [pc, #172]	; (8011218 <TIM_Base_SetConfig+0x13c>)
 801116a:	4293      	cmp	r3, r2
 801116c:	d00b      	beq.n	8011186 <TIM_Base_SetConfig+0xaa>
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	4a2a      	ldr	r2, [pc, #168]	; (801121c <TIM_Base_SetConfig+0x140>)
 8011172:	4293      	cmp	r3, r2
 8011174:	d007      	beq.n	8011186 <TIM_Base_SetConfig+0xaa>
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	4a29      	ldr	r2, [pc, #164]	; (8011220 <TIM_Base_SetConfig+0x144>)
 801117a:	4293      	cmp	r3, r2
 801117c:	d003      	beq.n	8011186 <TIM_Base_SetConfig+0xaa>
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	4a28      	ldr	r2, [pc, #160]	; (8011224 <TIM_Base_SetConfig+0x148>)
 8011182:	4293      	cmp	r3, r2
 8011184:	d108      	bne.n	8011198 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801118c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801118e:	683b      	ldr	r3, [r7, #0]
 8011190:	68db      	ldr	r3, [r3, #12]
 8011192:	68fa      	ldr	r2, [r7, #12]
 8011194:	4313      	orrs	r3, r2
 8011196:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801119e:	683b      	ldr	r3, [r7, #0]
 80111a0:	695b      	ldr	r3, [r3, #20]
 80111a2:	4313      	orrs	r3, r2
 80111a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	68fa      	ldr	r2, [r7, #12]
 80111aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80111ac:	683b      	ldr	r3, [r7, #0]
 80111ae:	689a      	ldr	r2, [r3, #8]
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80111b4:	683b      	ldr	r3, [r7, #0]
 80111b6:	681a      	ldr	r2, [r3, #0]
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	4a10      	ldr	r2, [pc, #64]	; (8011200 <TIM_Base_SetConfig+0x124>)
 80111c0:	4293      	cmp	r3, r2
 80111c2:	d00f      	beq.n	80111e4 <TIM_Base_SetConfig+0x108>
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	4a12      	ldr	r2, [pc, #72]	; (8011210 <TIM_Base_SetConfig+0x134>)
 80111c8:	4293      	cmp	r3, r2
 80111ca:	d00b      	beq.n	80111e4 <TIM_Base_SetConfig+0x108>
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	4a11      	ldr	r2, [pc, #68]	; (8011214 <TIM_Base_SetConfig+0x138>)
 80111d0:	4293      	cmp	r3, r2
 80111d2:	d007      	beq.n	80111e4 <TIM_Base_SetConfig+0x108>
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	4a10      	ldr	r2, [pc, #64]	; (8011218 <TIM_Base_SetConfig+0x13c>)
 80111d8:	4293      	cmp	r3, r2
 80111da:	d003      	beq.n	80111e4 <TIM_Base_SetConfig+0x108>
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	4a0f      	ldr	r2, [pc, #60]	; (801121c <TIM_Base_SetConfig+0x140>)
 80111e0:	4293      	cmp	r3, r2
 80111e2:	d103      	bne.n	80111ec <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80111e4:	683b      	ldr	r3, [r7, #0]
 80111e6:	691a      	ldr	r2, [r3, #16]
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	2201      	movs	r2, #1
 80111f0:	615a      	str	r2, [r3, #20]
}
 80111f2:	bf00      	nop
 80111f4:	3714      	adds	r7, #20
 80111f6:	46bd      	mov	sp, r7
 80111f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fc:	4770      	bx	lr
 80111fe:	bf00      	nop
 8011200:	40010000 	.word	0x40010000
 8011204:	40000400 	.word	0x40000400
 8011208:	40000800 	.word	0x40000800
 801120c:	40000c00 	.word	0x40000c00
 8011210:	40010400 	.word	0x40010400
 8011214:	40014000 	.word	0x40014000
 8011218:	40014400 	.word	0x40014400
 801121c:	40014800 	.word	0x40014800
 8011220:	4000e000 	.word	0x4000e000
 8011224:	4000e400 	.word	0x4000e400

08011228 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011228:	b480      	push	{r7}
 801122a:	b087      	sub	sp, #28
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
 8011230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	6a1b      	ldr	r3, [r3, #32]
 8011236:	f023 0201 	bic.w	r2, r3, #1
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	6a1b      	ldr	r3, [r3, #32]
 8011242:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	685b      	ldr	r3, [r3, #4]
 8011248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	699b      	ldr	r3, [r3, #24]
 801124e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8011250:	68fa      	ldr	r2, [r7, #12]
 8011252:	4b37      	ldr	r3, [pc, #220]	; (8011330 <TIM_OC1_SetConfig+0x108>)
 8011254:	4013      	ands	r3, r2
 8011256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	f023 0303 	bic.w	r3, r3, #3
 801125e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011260:	683b      	ldr	r3, [r7, #0]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	68fa      	ldr	r2, [r7, #12]
 8011266:	4313      	orrs	r3, r2
 8011268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801126a:	697b      	ldr	r3, [r7, #20]
 801126c:	f023 0302 	bic.w	r3, r3, #2
 8011270:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8011272:	683b      	ldr	r3, [r7, #0]
 8011274:	689b      	ldr	r3, [r3, #8]
 8011276:	697a      	ldr	r2, [r7, #20]
 8011278:	4313      	orrs	r3, r2
 801127a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	4a2d      	ldr	r2, [pc, #180]	; (8011334 <TIM_OC1_SetConfig+0x10c>)
 8011280:	4293      	cmp	r3, r2
 8011282:	d00f      	beq.n	80112a4 <TIM_OC1_SetConfig+0x7c>
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	4a2c      	ldr	r2, [pc, #176]	; (8011338 <TIM_OC1_SetConfig+0x110>)
 8011288:	4293      	cmp	r3, r2
 801128a:	d00b      	beq.n	80112a4 <TIM_OC1_SetConfig+0x7c>
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	4a2b      	ldr	r2, [pc, #172]	; (801133c <TIM_OC1_SetConfig+0x114>)
 8011290:	4293      	cmp	r3, r2
 8011292:	d007      	beq.n	80112a4 <TIM_OC1_SetConfig+0x7c>
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	4a2a      	ldr	r2, [pc, #168]	; (8011340 <TIM_OC1_SetConfig+0x118>)
 8011298:	4293      	cmp	r3, r2
 801129a:	d003      	beq.n	80112a4 <TIM_OC1_SetConfig+0x7c>
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	4a29      	ldr	r2, [pc, #164]	; (8011344 <TIM_OC1_SetConfig+0x11c>)
 80112a0:	4293      	cmp	r3, r2
 80112a2:	d10c      	bne.n	80112be <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80112a4:	697b      	ldr	r3, [r7, #20]
 80112a6:	f023 0308 	bic.w	r3, r3, #8
 80112aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80112ac:	683b      	ldr	r3, [r7, #0]
 80112ae:	68db      	ldr	r3, [r3, #12]
 80112b0:	697a      	ldr	r2, [r7, #20]
 80112b2:	4313      	orrs	r3, r2
 80112b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80112b6:	697b      	ldr	r3, [r7, #20]
 80112b8:	f023 0304 	bic.w	r3, r3, #4
 80112bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	4a1c      	ldr	r2, [pc, #112]	; (8011334 <TIM_OC1_SetConfig+0x10c>)
 80112c2:	4293      	cmp	r3, r2
 80112c4:	d00f      	beq.n	80112e6 <TIM_OC1_SetConfig+0xbe>
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	4a1b      	ldr	r2, [pc, #108]	; (8011338 <TIM_OC1_SetConfig+0x110>)
 80112ca:	4293      	cmp	r3, r2
 80112cc:	d00b      	beq.n	80112e6 <TIM_OC1_SetConfig+0xbe>
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	4a1a      	ldr	r2, [pc, #104]	; (801133c <TIM_OC1_SetConfig+0x114>)
 80112d2:	4293      	cmp	r3, r2
 80112d4:	d007      	beq.n	80112e6 <TIM_OC1_SetConfig+0xbe>
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	4a19      	ldr	r2, [pc, #100]	; (8011340 <TIM_OC1_SetConfig+0x118>)
 80112da:	4293      	cmp	r3, r2
 80112dc:	d003      	beq.n	80112e6 <TIM_OC1_SetConfig+0xbe>
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	4a18      	ldr	r2, [pc, #96]	; (8011344 <TIM_OC1_SetConfig+0x11c>)
 80112e2:	4293      	cmp	r3, r2
 80112e4:	d111      	bne.n	801130a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80112e6:	693b      	ldr	r3, [r7, #16]
 80112e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80112ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80112ee:	693b      	ldr	r3, [r7, #16]
 80112f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80112f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80112f6:	683b      	ldr	r3, [r7, #0]
 80112f8:	695b      	ldr	r3, [r3, #20]
 80112fa:	693a      	ldr	r2, [r7, #16]
 80112fc:	4313      	orrs	r3, r2
 80112fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8011300:	683b      	ldr	r3, [r7, #0]
 8011302:	699b      	ldr	r3, [r3, #24]
 8011304:	693a      	ldr	r2, [r7, #16]
 8011306:	4313      	orrs	r3, r2
 8011308:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	693a      	ldr	r2, [r7, #16]
 801130e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	68fa      	ldr	r2, [r7, #12]
 8011314:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8011316:	683b      	ldr	r3, [r7, #0]
 8011318:	685a      	ldr	r2, [r3, #4]
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	697a      	ldr	r2, [r7, #20]
 8011322:	621a      	str	r2, [r3, #32]
}
 8011324:	bf00      	nop
 8011326:	371c      	adds	r7, #28
 8011328:	46bd      	mov	sp, r7
 801132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801132e:	4770      	bx	lr
 8011330:	fffeff8f 	.word	0xfffeff8f
 8011334:	40010000 	.word	0x40010000
 8011338:	40010400 	.word	0x40010400
 801133c:	40014000 	.word	0x40014000
 8011340:	40014400 	.word	0x40014400
 8011344:	40014800 	.word	0x40014800

08011348 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011348:	b480      	push	{r7}
 801134a:	b087      	sub	sp, #28
 801134c:	af00      	add	r7, sp, #0
 801134e:	6078      	str	r0, [r7, #4]
 8011350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	6a1b      	ldr	r3, [r3, #32]
 8011356:	f023 0210 	bic.w	r2, r3, #16
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	6a1b      	ldr	r3, [r3, #32]
 8011362:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	685b      	ldr	r3, [r3, #4]
 8011368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	699b      	ldr	r3, [r3, #24]
 801136e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011370:	68fa      	ldr	r2, [r7, #12]
 8011372:	4b34      	ldr	r3, [pc, #208]	; (8011444 <TIM_OC2_SetConfig+0xfc>)
 8011374:	4013      	ands	r3, r2
 8011376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801137e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011380:	683b      	ldr	r3, [r7, #0]
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	021b      	lsls	r3, r3, #8
 8011386:	68fa      	ldr	r2, [r7, #12]
 8011388:	4313      	orrs	r3, r2
 801138a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801138c:	697b      	ldr	r3, [r7, #20]
 801138e:	f023 0320 	bic.w	r3, r3, #32
 8011392:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011394:	683b      	ldr	r3, [r7, #0]
 8011396:	689b      	ldr	r3, [r3, #8]
 8011398:	011b      	lsls	r3, r3, #4
 801139a:	697a      	ldr	r2, [r7, #20]
 801139c:	4313      	orrs	r3, r2
 801139e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	4a29      	ldr	r2, [pc, #164]	; (8011448 <TIM_OC2_SetConfig+0x100>)
 80113a4:	4293      	cmp	r3, r2
 80113a6:	d003      	beq.n	80113b0 <TIM_OC2_SetConfig+0x68>
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	4a28      	ldr	r2, [pc, #160]	; (801144c <TIM_OC2_SetConfig+0x104>)
 80113ac:	4293      	cmp	r3, r2
 80113ae:	d10d      	bne.n	80113cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80113b0:	697b      	ldr	r3, [r7, #20]
 80113b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80113b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80113b8:	683b      	ldr	r3, [r7, #0]
 80113ba:	68db      	ldr	r3, [r3, #12]
 80113bc:	011b      	lsls	r3, r3, #4
 80113be:	697a      	ldr	r2, [r7, #20]
 80113c0:	4313      	orrs	r3, r2
 80113c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80113c4:	697b      	ldr	r3, [r7, #20]
 80113c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80113ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	4a1e      	ldr	r2, [pc, #120]	; (8011448 <TIM_OC2_SetConfig+0x100>)
 80113d0:	4293      	cmp	r3, r2
 80113d2:	d00f      	beq.n	80113f4 <TIM_OC2_SetConfig+0xac>
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	4a1d      	ldr	r2, [pc, #116]	; (801144c <TIM_OC2_SetConfig+0x104>)
 80113d8:	4293      	cmp	r3, r2
 80113da:	d00b      	beq.n	80113f4 <TIM_OC2_SetConfig+0xac>
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	4a1c      	ldr	r2, [pc, #112]	; (8011450 <TIM_OC2_SetConfig+0x108>)
 80113e0:	4293      	cmp	r3, r2
 80113e2:	d007      	beq.n	80113f4 <TIM_OC2_SetConfig+0xac>
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	4a1b      	ldr	r2, [pc, #108]	; (8011454 <TIM_OC2_SetConfig+0x10c>)
 80113e8:	4293      	cmp	r3, r2
 80113ea:	d003      	beq.n	80113f4 <TIM_OC2_SetConfig+0xac>
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	4a1a      	ldr	r2, [pc, #104]	; (8011458 <TIM_OC2_SetConfig+0x110>)
 80113f0:	4293      	cmp	r3, r2
 80113f2:	d113      	bne.n	801141c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80113f4:	693b      	ldr	r3, [r7, #16]
 80113f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80113fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80113fc:	693b      	ldr	r3, [r7, #16]
 80113fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011402:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011404:	683b      	ldr	r3, [r7, #0]
 8011406:	695b      	ldr	r3, [r3, #20]
 8011408:	009b      	lsls	r3, r3, #2
 801140a:	693a      	ldr	r2, [r7, #16]
 801140c:	4313      	orrs	r3, r2
 801140e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011410:	683b      	ldr	r3, [r7, #0]
 8011412:	699b      	ldr	r3, [r3, #24]
 8011414:	009b      	lsls	r3, r3, #2
 8011416:	693a      	ldr	r2, [r7, #16]
 8011418:	4313      	orrs	r3, r2
 801141a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	693a      	ldr	r2, [r7, #16]
 8011420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	68fa      	ldr	r2, [r7, #12]
 8011426:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8011428:	683b      	ldr	r3, [r7, #0]
 801142a:	685a      	ldr	r2, [r3, #4]
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	697a      	ldr	r2, [r7, #20]
 8011434:	621a      	str	r2, [r3, #32]
}
 8011436:	bf00      	nop
 8011438:	371c      	adds	r7, #28
 801143a:	46bd      	mov	sp, r7
 801143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011440:	4770      	bx	lr
 8011442:	bf00      	nop
 8011444:	feff8fff 	.word	0xfeff8fff
 8011448:	40010000 	.word	0x40010000
 801144c:	40010400 	.word	0x40010400
 8011450:	40014000 	.word	0x40014000
 8011454:	40014400 	.word	0x40014400
 8011458:	40014800 	.word	0x40014800

0801145c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801145c:	b480      	push	{r7}
 801145e:	b087      	sub	sp, #28
 8011460:	af00      	add	r7, sp, #0
 8011462:	6078      	str	r0, [r7, #4]
 8011464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	6a1b      	ldr	r3, [r3, #32]
 801146a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	6a1b      	ldr	r3, [r3, #32]
 8011476:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	685b      	ldr	r3, [r3, #4]
 801147c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	69db      	ldr	r3, [r3, #28]
 8011482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011484:	68fa      	ldr	r2, [r7, #12]
 8011486:	4b33      	ldr	r3, [pc, #204]	; (8011554 <TIM_OC3_SetConfig+0xf8>)
 8011488:	4013      	ands	r3, r2
 801148a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	f023 0303 	bic.w	r3, r3, #3
 8011492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011494:	683b      	ldr	r3, [r7, #0]
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	68fa      	ldr	r2, [r7, #12]
 801149a:	4313      	orrs	r3, r2
 801149c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801149e:	697b      	ldr	r3, [r7, #20]
 80114a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80114a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80114a6:	683b      	ldr	r3, [r7, #0]
 80114a8:	689b      	ldr	r3, [r3, #8]
 80114aa:	021b      	lsls	r3, r3, #8
 80114ac:	697a      	ldr	r2, [r7, #20]
 80114ae:	4313      	orrs	r3, r2
 80114b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	4a28      	ldr	r2, [pc, #160]	; (8011558 <TIM_OC3_SetConfig+0xfc>)
 80114b6:	4293      	cmp	r3, r2
 80114b8:	d003      	beq.n	80114c2 <TIM_OC3_SetConfig+0x66>
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	4a27      	ldr	r2, [pc, #156]	; (801155c <TIM_OC3_SetConfig+0x100>)
 80114be:	4293      	cmp	r3, r2
 80114c0:	d10d      	bne.n	80114de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80114c2:	697b      	ldr	r3, [r7, #20]
 80114c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80114c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80114ca:	683b      	ldr	r3, [r7, #0]
 80114cc:	68db      	ldr	r3, [r3, #12]
 80114ce:	021b      	lsls	r3, r3, #8
 80114d0:	697a      	ldr	r2, [r7, #20]
 80114d2:	4313      	orrs	r3, r2
 80114d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80114d6:	697b      	ldr	r3, [r7, #20]
 80114d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80114dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	4a1d      	ldr	r2, [pc, #116]	; (8011558 <TIM_OC3_SetConfig+0xfc>)
 80114e2:	4293      	cmp	r3, r2
 80114e4:	d00f      	beq.n	8011506 <TIM_OC3_SetConfig+0xaa>
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	4a1c      	ldr	r2, [pc, #112]	; (801155c <TIM_OC3_SetConfig+0x100>)
 80114ea:	4293      	cmp	r3, r2
 80114ec:	d00b      	beq.n	8011506 <TIM_OC3_SetConfig+0xaa>
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	4a1b      	ldr	r2, [pc, #108]	; (8011560 <TIM_OC3_SetConfig+0x104>)
 80114f2:	4293      	cmp	r3, r2
 80114f4:	d007      	beq.n	8011506 <TIM_OC3_SetConfig+0xaa>
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	4a1a      	ldr	r2, [pc, #104]	; (8011564 <TIM_OC3_SetConfig+0x108>)
 80114fa:	4293      	cmp	r3, r2
 80114fc:	d003      	beq.n	8011506 <TIM_OC3_SetConfig+0xaa>
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	4a19      	ldr	r2, [pc, #100]	; (8011568 <TIM_OC3_SetConfig+0x10c>)
 8011502:	4293      	cmp	r3, r2
 8011504:	d113      	bne.n	801152e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011506:	693b      	ldr	r3, [r7, #16]
 8011508:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801150c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801150e:	693b      	ldr	r3, [r7, #16]
 8011510:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011514:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011516:	683b      	ldr	r3, [r7, #0]
 8011518:	695b      	ldr	r3, [r3, #20]
 801151a:	011b      	lsls	r3, r3, #4
 801151c:	693a      	ldr	r2, [r7, #16]
 801151e:	4313      	orrs	r3, r2
 8011520:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011522:	683b      	ldr	r3, [r7, #0]
 8011524:	699b      	ldr	r3, [r3, #24]
 8011526:	011b      	lsls	r3, r3, #4
 8011528:	693a      	ldr	r2, [r7, #16]
 801152a:	4313      	orrs	r3, r2
 801152c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	693a      	ldr	r2, [r7, #16]
 8011532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	68fa      	ldr	r2, [r7, #12]
 8011538:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801153a:	683b      	ldr	r3, [r7, #0]
 801153c:	685a      	ldr	r2, [r3, #4]
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	697a      	ldr	r2, [r7, #20]
 8011546:	621a      	str	r2, [r3, #32]
}
 8011548:	bf00      	nop
 801154a:	371c      	adds	r7, #28
 801154c:	46bd      	mov	sp, r7
 801154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011552:	4770      	bx	lr
 8011554:	fffeff8f 	.word	0xfffeff8f
 8011558:	40010000 	.word	0x40010000
 801155c:	40010400 	.word	0x40010400
 8011560:	40014000 	.word	0x40014000
 8011564:	40014400 	.word	0x40014400
 8011568:	40014800 	.word	0x40014800

0801156c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801156c:	b480      	push	{r7}
 801156e:	b087      	sub	sp, #28
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
 8011574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	6a1b      	ldr	r3, [r3, #32]
 801157a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	6a1b      	ldr	r3, [r3, #32]
 8011586:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	685b      	ldr	r3, [r3, #4]
 801158c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	69db      	ldr	r3, [r3, #28]
 8011592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011594:	68fa      	ldr	r2, [r7, #12]
 8011596:	4b24      	ldr	r3, [pc, #144]	; (8011628 <TIM_OC4_SetConfig+0xbc>)
 8011598:	4013      	ands	r3, r2
 801159a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80115a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80115a4:	683b      	ldr	r3, [r7, #0]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	021b      	lsls	r3, r3, #8
 80115aa:	68fa      	ldr	r2, [r7, #12]
 80115ac:	4313      	orrs	r3, r2
 80115ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80115b0:	693b      	ldr	r3, [r7, #16]
 80115b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80115b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80115b8:	683b      	ldr	r3, [r7, #0]
 80115ba:	689b      	ldr	r3, [r3, #8]
 80115bc:	031b      	lsls	r3, r3, #12
 80115be:	693a      	ldr	r2, [r7, #16]
 80115c0:	4313      	orrs	r3, r2
 80115c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	4a19      	ldr	r2, [pc, #100]	; (801162c <TIM_OC4_SetConfig+0xc0>)
 80115c8:	4293      	cmp	r3, r2
 80115ca:	d00f      	beq.n	80115ec <TIM_OC4_SetConfig+0x80>
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	4a18      	ldr	r2, [pc, #96]	; (8011630 <TIM_OC4_SetConfig+0xc4>)
 80115d0:	4293      	cmp	r3, r2
 80115d2:	d00b      	beq.n	80115ec <TIM_OC4_SetConfig+0x80>
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	4a17      	ldr	r2, [pc, #92]	; (8011634 <TIM_OC4_SetConfig+0xc8>)
 80115d8:	4293      	cmp	r3, r2
 80115da:	d007      	beq.n	80115ec <TIM_OC4_SetConfig+0x80>
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	4a16      	ldr	r2, [pc, #88]	; (8011638 <TIM_OC4_SetConfig+0xcc>)
 80115e0:	4293      	cmp	r3, r2
 80115e2:	d003      	beq.n	80115ec <TIM_OC4_SetConfig+0x80>
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	4a15      	ldr	r2, [pc, #84]	; (801163c <TIM_OC4_SetConfig+0xd0>)
 80115e8:	4293      	cmp	r3, r2
 80115ea:	d109      	bne.n	8011600 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80115ec:	697b      	ldr	r3, [r7, #20]
 80115ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80115f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80115f4:	683b      	ldr	r3, [r7, #0]
 80115f6:	695b      	ldr	r3, [r3, #20]
 80115f8:	019b      	lsls	r3, r3, #6
 80115fa:	697a      	ldr	r2, [r7, #20]
 80115fc:	4313      	orrs	r3, r2
 80115fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	697a      	ldr	r2, [r7, #20]
 8011604:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	68fa      	ldr	r2, [r7, #12]
 801160a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801160c:	683b      	ldr	r3, [r7, #0]
 801160e:	685a      	ldr	r2, [r3, #4]
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	693a      	ldr	r2, [r7, #16]
 8011618:	621a      	str	r2, [r3, #32]
}
 801161a:	bf00      	nop
 801161c:	371c      	adds	r7, #28
 801161e:	46bd      	mov	sp, r7
 8011620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011624:	4770      	bx	lr
 8011626:	bf00      	nop
 8011628:	feff8fff 	.word	0xfeff8fff
 801162c:	40010000 	.word	0x40010000
 8011630:	40010400 	.word	0x40010400
 8011634:	40014000 	.word	0x40014000
 8011638:	40014400 	.word	0x40014400
 801163c:	40014800 	.word	0x40014800

08011640 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011640:	b480      	push	{r7}
 8011642:	b087      	sub	sp, #28
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
 8011648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	6a1b      	ldr	r3, [r3, #32]
 801164e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	6a1b      	ldr	r3, [r3, #32]
 801165a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	685b      	ldr	r3, [r3, #4]
 8011660:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8011668:	68fa      	ldr	r2, [r7, #12]
 801166a:	4b21      	ldr	r3, [pc, #132]	; (80116f0 <TIM_OC5_SetConfig+0xb0>)
 801166c:	4013      	ands	r3, r2
 801166e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011670:	683b      	ldr	r3, [r7, #0]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	68fa      	ldr	r2, [r7, #12]
 8011676:	4313      	orrs	r3, r2
 8011678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801167a:	693b      	ldr	r3, [r7, #16]
 801167c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8011680:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8011682:	683b      	ldr	r3, [r7, #0]
 8011684:	689b      	ldr	r3, [r3, #8]
 8011686:	041b      	lsls	r3, r3, #16
 8011688:	693a      	ldr	r2, [r7, #16]
 801168a:	4313      	orrs	r3, r2
 801168c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	4a18      	ldr	r2, [pc, #96]	; (80116f4 <TIM_OC5_SetConfig+0xb4>)
 8011692:	4293      	cmp	r3, r2
 8011694:	d00f      	beq.n	80116b6 <TIM_OC5_SetConfig+0x76>
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	4a17      	ldr	r2, [pc, #92]	; (80116f8 <TIM_OC5_SetConfig+0xb8>)
 801169a:	4293      	cmp	r3, r2
 801169c:	d00b      	beq.n	80116b6 <TIM_OC5_SetConfig+0x76>
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	4a16      	ldr	r2, [pc, #88]	; (80116fc <TIM_OC5_SetConfig+0xbc>)
 80116a2:	4293      	cmp	r3, r2
 80116a4:	d007      	beq.n	80116b6 <TIM_OC5_SetConfig+0x76>
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	4a15      	ldr	r2, [pc, #84]	; (8011700 <TIM_OC5_SetConfig+0xc0>)
 80116aa:	4293      	cmp	r3, r2
 80116ac:	d003      	beq.n	80116b6 <TIM_OC5_SetConfig+0x76>
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	4a14      	ldr	r2, [pc, #80]	; (8011704 <TIM_OC5_SetConfig+0xc4>)
 80116b2:	4293      	cmp	r3, r2
 80116b4:	d109      	bne.n	80116ca <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80116b6:	697b      	ldr	r3, [r7, #20]
 80116b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80116bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80116be:	683b      	ldr	r3, [r7, #0]
 80116c0:	695b      	ldr	r3, [r3, #20]
 80116c2:	021b      	lsls	r3, r3, #8
 80116c4:	697a      	ldr	r2, [r7, #20]
 80116c6:	4313      	orrs	r3, r2
 80116c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	697a      	ldr	r2, [r7, #20]
 80116ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	68fa      	ldr	r2, [r7, #12]
 80116d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80116d6:	683b      	ldr	r3, [r7, #0]
 80116d8:	685a      	ldr	r2, [r3, #4]
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	693a      	ldr	r2, [r7, #16]
 80116e2:	621a      	str	r2, [r3, #32]
}
 80116e4:	bf00      	nop
 80116e6:	371c      	adds	r7, #28
 80116e8:	46bd      	mov	sp, r7
 80116ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ee:	4770      	bx	lr
 80116f0:	fffeff8f 	.word	0xfffeff8f
 80116f4:	40010000 	.word	0x40010000
 80116f8:	40010400 	.word	0x40010400
 80116fc:	40014000 	.word	0x40014000
 8011700:	40014400 	.word	0x40014400
 8011704:	40014800 	.word	0x40014800

08011708 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011708:	b480      	push	{r7}
 801170a:	b087      	sub	sp, #28
 801170c:	af00      	add	r7, sp, #0
 801170e:	6078      	str	r0, [r7, #4]
 8011710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	6a1b      	ldr	r3, [r3, #32]
 8011716:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	6a1b      	ldr	r3, [r3, #32]
 8011722:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	685b      	ldr	r3, [r3, #4]
 8011728:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801172e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011730:	68fa      	ldr	r2, [r7, #12]
 8011732:	4b22      	ldr	r3, [pc, #136]	; (80117bc <TIM_OC6_SetConfig+0xb4>)
 8011734:	4013      	ands	r3, r2
 8011736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011738:	683b      	ldr	r3, [r7, #0]
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	021b      	lsls	r3, r3, #8
 801173e:	68fa      	ldr	r2, [r7, #12]
 8011740:	4313      	orrs	r3, r2
 8011742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011744:	693b      	ldr	r3, [r7, #16]
 8011746:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801174a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801174c:	683b      	ldr	r3, [r7, #0]
 801174e:	689b      	ldr	r3, [r3, #8]
 8011750:	051b      	lsls	r3, r3, #20
 8011752:	693a      	ldr	r2, [r7, #16]
 8011754:	4313      	orrs	r3, r2
 8011756:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	4a19      	ldr	r2, [pc, #100]	; (80117c0 <TIM_OC6_SetConfig+0xb8>)
 801175c:	4293      	cmp	r3, r2
 801175e:	d00f      	beq.n	8011780 <TIM_OC6_SetConfig+0x78>
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	4a18      	ldr	r2, [pc, #96]	; (80117c4 <TIM_OC6_SetConfig+0xbc>)
 8011764:	4293      	cmp	r3, r2
 8011766:	d00b      	beq.n	8011780 <TIM_OC6_SetConfig+0x78>
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	4a17      	ldr	r2, [pc, #92]	; (80117c8 <TIM_OC6_SetConfig+0xc0>)
 801176c:	4293      	cmp	r3, r2
 801176e:	d007      	beq.n	8011780 <TIM_OC6_SetConfig+0x78>
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	4a16      	ldr	r2, [pc, #88]	; (80117cc <TIM_OC6_SetConfig+0xc4>)
 8011774:	4293      	cmp	r3, r2
 8011776:	d003      	beq.n	8011780 <TIM_OC6_SetConfig+0x78>
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	4a15      	ldr	r2, [pc, #84]	; (80117d0 <TIM_OC6_SetConfig+0xc8>)
 801177c:	4293      	cmp	r3, r2
 801177e:	d109      	bne.n	8011794 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8011780:	697b      	ldr	r3, [r7, #20]
 8011782:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011786:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011788:	683b      	ldr	r3, [r7, #0]
 801178a:	695b      	ldr	r3, [r3, #20]
 801178c:	029b      	lsls	r3, r3, #10
 801178e:	697a      	ldr	r2, [r7, #20]
 8011790:	4313      	orrs	r3, r2
 8011792:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	697a      	ldr	r2, [r7, #20]
 8011798:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	68fa      	ldr	r2, [r7, #12]
 801179e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80117a0:	683b      	ldr	r3, [r7, #0]
 80117a2:	685a      	ldr	r2, [r3, #4]
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	693a      	ldr	r2, [r7, #16]
 80117ac:	621a      	str	r2, [r3, #32]
}
 80117ae:	bf00      	nop
 80117b0:	371c      	adds	r7, #28
 80117b2:	46bd      	mov	sp, r7
 80117b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b8:	4770      	bx	lr
 80117ba:	bf00      	nop
 80117bc:	feff8fff 	.word	0xfeff8fff
 80117c0:	40010000 	.word	0x40010000
 80117c4:	40010400 	.word	0x40010400
 80117c8:	40014000 	.word	0x40014000
 80117cc:	40014400 	.word	0x40014400
 80117d0:	40014800 	.word	0x40014800

080117d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80117d4:	b480      	push	{r7}
 80117d6:	b087      	sub	sp, #28
 80117d8:	af00      	add	r7, sp, #0
 80117da:	60f8      	str	r0, [r7, #12]
 80117dc:	60b9      	str	r1, [r7, #8]
 80117de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80117e0:	68bb      	ldr	r3, [r7, #8]
 80117e2:	f003 031f 	and.w	r3, r3, #31
 80117e6:	2201      	movs	r2, #1
 80117e8:	fa02 f303 	lsl.w	r3, r2, r3
 80117ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	6a1a      	ldr	r2, [r3, #32]
 80117f2:	697b      	ldr	r3, [r7, #20]
 80117f4:	43db      	mvns	r3, r3
 80117f6:	401a      	ands	r2, r3
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	6a1a      	ldr	r2, [r3, #32]
 8011800:	68bb      	ldr	r3, [r7, #8]
 8011802:	f003 031f 	and.w	r3, r3, #31
 8011806:	6879      	ldr	r1, [r7, #4]
 8011808:	fa01 f303 	lsl.w	r3, r1, r3
 801180c:	431a      	orrs	r2, r3
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	621a      	str	r2, [r3, #32]
}
 8011812:	bf00      	nop
 8011814:	371c      	adds	r7, #28
 8011816:	46bd      	mov	sp, r7
 8011818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801181c:	4770      	bx	lr
	...

08011820 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011820:	b480      	push	{r7}
 8011822:	b085      	sub	sp, #20
 8011824:	af00      	add	r7, sp, #0
 8011826:	6078      	str	r0, [r7, #4]
 8011828:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011830:	2b01      	cmp	r3, #1
 8011832:	d101      	bne.n	8011838 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011834:	2302      	movs	r3, #2
 8011836:	e077      	b.n	8011928 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	2201      	movs	r2, #1
 801183c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	2202      	movs	r2, #2
 8011844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	685b      	ldr	r3, [r3, #4]
 801184e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	689b      	ldr	r3, [r3, #8]
 8011856:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	4a35      	ldr	r2, [pc, #212]	; (8011934 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801185e:	4293      	cmp	r3, r2
 8011860:	d004      	beq.n	801186c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	4a34      	ldr	r2, [pc, #208]	; (8011938 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011868:	4293      	cmp	r3, r2
 801186a:	d108      	bne.n	801187e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8011872:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011874:	683b      	ldr	r3, [r7, #0]
 8011876:	685b      	ldr	r3, [r3, #4]
 8011878:	68fa      	ldr	r2, [r7, #12]
 801187a:	4313      	orrs	r3, r2
 801187c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011884:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011886:	683b      	ldr	r3, [r7, #0]
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	68fa      	ldr	r2, [r7, #12]
 801188c:	4313      	orrs	r3, r2
 801188e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	68fa      	ldr	r2, [r7, #12]
 8011896:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	4a25      	ldr	r2, [pc, #148]	; (8011934 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801189e:	4293      	cmp	r3, r2
 80118a0:	d02c      	beq.n	80118fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80118aa:	d027      	beq.n	80118fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	4a22      	ldr	r2, [pc, #136]	; (801193c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80118b2:	4293      	cmp	r3, r2
 80118b4:	d022      	beq.n	80118fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	4a21      	ldr	r2, [pc, #132]	; (8011940 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80118bc:	4293      	cmp	r3, r2
 80118be:	d01d      	beq.n	80118fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	4a1f      	ldr	r2, [pc, #124]	; (8011944 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80118c6:	4293      	cmp	r3, r2
 80118c8:	d018      	beq.n	80118fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	4a1a      	ldr	r2, [pc, #104]	; (8011938 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80118d0:	4293      	cmp	r3, r2
 80118d2:	d013      	beq.n	80118fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	4a1b      	ldr	r2, [pc, #108]	; (8011948 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80118da:	4293      	cmp	r3, r2
 80118dc:	d00e      	beq.n	80118fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	4a1a      	ldr	r2, [pc, #104]	; (801194c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80118e4:	4293      	cmp	r3, r2
 80118e6:	d009      	beq.n	80118fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	4a18      	ldr	r2, [pc, #96]	; (8011950 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80118ee:	4293      	cmp	r3, r2
 80118f0:	d004      	beq.n	80118fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	4a17      	ldr	r2, [pc, #92]	; (8011954 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80118f8:	4293      	cmp	r3, r2
 80118fa:	d10c      	bne.n	8011916 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80118fc:	68bb      	ldr	r3, [r7, #8]
 80118fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011902:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011904:	683b      	ldr	r3, [r7, #0]
 8011906:	689b      	ldr	r3, [r3, #8]
 8011908:	68ba      	ldr	r2, [r7, #8]
 801190a:	4313      	orrs	r3, r2
 801190c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	68ba      	ldr	r2, [r7, #8]
 8011914:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	2201      	movs	r2, #1
 801191a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	2200      	movs	r2, #0
 8011922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011926:	2300      	movs	r3, #0
}
 8011928:	4618      	mov	r0, r3
 801192a:	3714      	adds	r7, #20
 801192c:	46bd      	mov	sp, r7
 801192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011932:	4770      	bx	lr
 8011934:	40010000 	.word	0x40010000
 8011938:	40010400 	.word	0x40010400
 801193c:	40000400 	.word	0x40000400
 8011940:	40000800 	.word	0x40000800
 8011944:	40000c00 	.word	0x40000c00
 8011948:	40001800 	.word	0x40001800
 801194c:	40014000 	.word	0x40014000
 8011950:	4000e000 	.word	0x4000e000
 8011954:	4000e400 	.word	0x4000e400

08011958 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011958:	b480      	push	{r7}
 801195a:	b083      	sub	sp, #12
 801195c:	af00      	add	r7, sp, #0
 801195e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011960:	bf00      	nop
 8011962:	370c      	adds	r7, #12
 8011964:	46bd      	mov	sp, r7
 8011966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801196a:	4770      	bx	lr

0801196c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801196c:	b480      	push	{r7}
 801196e:	b083      	sub	sp, #12
 8011970:	af00      	add	r7, sp, #0
 8011972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011974:	bf00      	nop
 8011976:	370c      	adds	r7, #12
 8011978:	46bd      	mov	sp, r7
 801197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197e:	4770      	bx	lr

08011980 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8011980:	b480      	push	{r7}
 8011982:	b083      	sub	sp, #12
 8011984:	af00      	add	r7, sp, #0
 8011986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011988:	bf00      	nop
 801198a:	370c      	adds	r7, #12
 801198c:	46bd      	mov	sp, r7
 801198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011992:	4770      	bx	lr

08011994 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011994:	b580      	push	{r7, lr}
 8011996:	b082      	sub	sp, #8
 8011998:	af00      	add	r7, sp, #0
 801199a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d101      	bne.n	80119a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80119a2:	2301      	movs	r3, #1
 80119a4:	e042      	b.n	8011a2c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d106      	bne.n	80119be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	2200      	movs	r2, #0
 80119b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80119b8:	6878      	ldr	r0, [r7, #4]
 80119ba:	f7f2 f945 	bl	8003c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	2224      	movs	r2, #36	; 0x24
 80119c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	681a      	ldr	r2, [r3, #0]
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	f022 0201 	bic.w	r2, r2, #1
 80119d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80119d6:	6878      	ldr	r0, [r7, #4]
 80119d8:	f000 f82c 	bl	8011a34 <UART_SetConfig>
 80119dc:	4603      	mov	r3, r0
 80119de:	2b01      	cmp	r3, #1
 80119e0:	d101      	bne.n	80119e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80119e2:	2301      	movs	r3, #1
 80119e4:	e022      	b.n	8011a2c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d002      	beq.n	80119f4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80119ee:	6878      	ldr	r0, [r7, #4]
 80119f0:	f000 fe8c 	bl	801270c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	685a      	ldr	r2, [r3, #4]
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011a02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	689a      	ldr	r2, [r3, #8]
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011a12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	681a      	ldr	r2, [r3, #0]
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	f042 0201 	orr.w	r2, r2, #1
 8011a22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011a24:	6878      	ldr	r0, [r7, #4]
 8011a26:	f000 ff13 	bl	8012850 <UART_CheckIdleState>
 8011a2a:	4603      	mov	r3, r0
}
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	3708      	adds	r7, #8
 8011a30:	46bd      	mov	sp, r7
 8011a32:	bd80      	pop	{r7, pc}

08011a34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011a34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011a38:	b092      	sub	sp, #72	; 0x48
 8011a3a:	af00      	add	r7, sp, #0
 8011a3c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011a3e:	2300      	movs	r3, #0
 8011a40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011a44:	697b      	ldr	r3, [r7, #20]
 8011a46:	689a      	ldr	r2, [r3, #8]
 8011a48:	697b      	ldr	r3, [r7, #20]
 8011a4a:	691b      	ldr	r3, [r3, #16]
 8011a4c:	431a      	orrs	r2, r3
 8011a4e:	697b      	ldr	r3, [r7, #20]
 8011a50:	695b      	ldr	r3, [r3, #20]
 8011a52:	431a      	orrs	r2, r3
 8011a54:	697b      	ldr	r3, [r7, #20]
 8011a56:	69db      	ldr	r3, [r3, #28]
 8011a58:	4313      	orrs	r3, r2
 8011a5a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011a5c:	697b      	ldr	r3, [r7, #20]
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	681a      	ldr	r2, [r3, #0]
 8011a62:	4bbe      	ldr	r3, [pc, #760]	; (8011d5c <UART_SetConfig+0x328>)
 8011a64:	4013      	ands	r3, r2
 8011a66:	697a      	ldr	r2, [r7, #20]
 8011a68:	6812      	ldr	r2, [r2, #0]
 8011a6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011a6c:	430b      	orrs	r3, r1
 8011a6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011a70:	697b      	ldr	r3, [r7, #20]
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	685b      	ldr	r3, [r3, #4]
 8011a76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011a7a:	697b      	ldr	r3, [r7, #20]
 8011a7c:	68da      	ldr	r2, [r3, #12]
 8011a7e:	697b      	ldr	r3, [r7, #20]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	430a      	orrs	r2, r1
 8011a84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011a86:	697b      	ldr	r3, [r7, #20]
 8011a88:	699b      	ldr	r3, [r3, #24]
 8011a8a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011a8c:	697b      	ldr	r3, [r7, #20]
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	4ab3      	ldr	r2, [pc, #716]	; (8011d60 <UART_SetConfig+0x32c>)
 8011a92:	4293      	cmp	r3, r2
 8011a94:	d004      	beq.n	8011aa0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011a96:	697b      	ldr	r3, [r7, #20]
 8011a98:	6a1b      	ldr	r3, [r3, #32]
 8011a9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011a9c:	4313      	orrs	r3, r2
 8011a9e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011aa0:	697b      	ldr	r3, [r7, #20]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	689a      	ldr	r2, [r3, #8]
 8011aa6:	4baf      	ldr	r3, [pc, #700]	; (8011d64 <UART_SetConfig+0x330>)
 8011aa8:	4013      	ands	r3, r2
 8011aaa:	697a      	ldr	r2, [r7, #20]
 8011aac:	6812      	ldr	r2, [r2, #0]
 8011aae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011ab0:	430b      	orrs	r3, r1
 8011ab2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011ab4:	697b      	ldr	r3, [r7, #20]
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011aba:	f023 010f 	bic.w	r1, r3, #15
 8011abe:	697b      	ldr	r3, [r7, #20]
 8011ac0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011ac2:	697b      	ldr	r3, [r7, #20]
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	430a      	orrs	r2, r1
 8011ac8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011aca:	697b      	ldr	r3, [r7, #20]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	4aa6      	ldr	r2, [pc, #664]	; (8011d68 <UART_SetConfig+0x334>)
 8011ad0:	4293      	cmp	r3, r2
 8011ad2:	d177      	bne.n	8011bc4 <UART_SetConfig+0x190>
 8011ad4:	4ba5      	ldr	r3, [pc, #660]	; (8011d6c <UART_SetConfig+0x338>)
 8011ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ad8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011adc:	2b28      	cmp	r3, #40	; 0x28
 8011ade:	d86d      	bhi.n	8011bbc <UART_SetConfig+0x188>
 8011ae0:	a201      	add	r2, pc, #4	; (adr r2, 8011ae8 <UART_SetConfig+0xb4>)
 8011ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ae6:	bf00      	nop
 8011ae8:	08011b8d 	.word	0x08011b8d
 8011aec:	08011bbd 	.word	0x08011bbd
 8011af0:	08011bbd 	.word	0x08011bbd
 8011af4:	08011bbd 	.word	0x08011bbd
 8011af8:	08011bbd 	.word	0x08011bbd
 8011afc:	08011bbd 	.word	0x08011bbd
 8011b00:	08011bbd 	.word	0x08011bbd
 8011b04:	08011bbd 	.word	0x08011bbd
 8011b08:	08011b95 	.word	0x08011b95
 8011b0c:	08011bbd 	.word	0x08011bbd
 8011b10:	08011bbd 	.word	0x08011bbd
 8011b14:	08011bbd 	.word	0x08011bbd
 8011b18:	08011bbd 	.word	0x08011bbd
 8011b1c:	08011bbd 	.word	0x08011bbd
 8011b20:	08011bbd 	.word	0x08011bbd
 8011b24:	08011bbd 	.word	0x08011bbd
 8011b28:	08011b9d 	.word	0x08011b9d
 8011b2c:	08011bbd 	.word	0x08011bbd
 8011b30:	08011bbd 	.word	0x08011bbd
 8011b34:	08011bbd 	.word	0x08011bbd
 8011b38:	08011bbd 	.word	0x08011bbd
 8011b3c:	08011bbd 	.word	0x08011bbd
 8011b40:	08011bbd 	.word	0x08011bbd
 8011b44:	08011bbd 	.word	0x08011bbd
 8011b48:	08011ba5 	.word	0x08011ba5
 8011b4c:	08011bbd 	.word	0x08011bbd
 8011b50:	08011bbd 	.word	0x08011bbd
 8011b54:	08011bbd 	.word	0x08011bbd
 8011b58:	08011bbd 	.word	0x08011bbd
 8011b5c:	08011bbd 	.word	0x08011bbd
 8011b60:	08011bbd 	.word	0x08011bbd
 8011b64:	08011bbd 	.word	0x08011bbd
 8011b68:	08011bad 	.word	0x08011bad
 8011b6c:	08011bbd 	.word	0x08011bbd
 8011b70:	08011bbd 	.word	0x08011bbd
 8011b74:	08011bbd 	.word	0x08011bbd
 8011b78:	08011bbd 	.word	0x08011bbd
 8011b7c:	08011bbd 	.word	0x08011bbd
 8011b80:	08011bbd 	.word	0x08011bbd
 8011b84:	08011bbd 	.word	0x08011bbd
 8011b88:	08011bb5 	.word	0x08011bb5
 8011b8c:	2301      	movs	r3, #1
 8011b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b92:	e326      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011b94:	2304      	movs	r3, #4
 8011b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b9a:	e322      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011b9c:	2308      	movs	r3, #8
 8011b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ba2:	e31e      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011ba4:	2310      	movs	r3, #16
 8011ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011baa:	e31a      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011bac:	2320      	movs	r3, #32
 8011bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bb2:	e316      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011bb4:	2340      	movs	r3, #64	; 0x40
 8011bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bba:	e312      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011bbc:	2380      	movs	r3, #128	; 0x80
 8011bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bc2:	e30e      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011bc4:	697b      	ldr	r3, [r7, #20]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	4a69      	ldr	r2, [pc, #420]	; (8011d70 <UART_SetConfig+0x33c>)
 8011bca:	4293      	cmp	r3, r2
 8011bcc:	d130      	bne.n	8011c30 <UART_SetConfig+0x1fc>
 8011bce:	4b67      	ldr	r3, [pc, #412]	; (8011d6c <UART_SetConfig+0x338>)
 8011bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011bd2:	f003 0307 	and.w	r3, r3, #7
 8011bd6:	2b05      	cmp	r3, #5
 8011bd8:	d826      	bhi.n	8011c28 <UART_SetConfig+0x1f4>
 8011bda:	a201      	add	r2, pc, #4	; (adr r2, 8011be0 <UART_SetConfig+0x1ac>)
 8011bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011be0:	08011bf9 	.word	0x08011bf9
 8011be4:	08011c01 	.word	0x08011c01
 8011be8:	08011c09 	.word	0x08011c09
 8011bec:	08011c11 	.word	0x08011c11
 8011bf0:	08011c19 	.word	0x08011c19
 8011bf4:	08011c21 	.word	0x08011c21
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bfe:	e2f0      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011c00:	2304      	movs	r3, #4
 8011c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c06:	e2ec      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011c08:	2308      	movs	r3, #8
 8011c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c0e:	e2e8      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011c10:	2310      	movs	r3, #16
 8011c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c16:	e2e4      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011c18:	2320      	movs	r3, #32
 8011c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c1e:	e2e0      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011c20:	2340      	movs	r3, #64	; 0x40
 8011c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c26:	e2dc      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011c28:	2380      	movs	r3, #128	; 0x80
 8011c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c2e:	e2d8      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011c30:	697b      	ldr	r3, [r7, #20]
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	4a4f      	ldr	r2, [pc, #316]	; (8011d74 <UART_SetConfig+0x340>)
 8011c36:	4293      	cmp	r3, r2
 8011c38:	d130      	bne.n	8011c9c <UART_SetConfig+0x268>
 8011c3a:	4b4c      	ldr	r3, [pc, #304]	; (8011d6c <UART_SetConfig+0x338>)
 8011c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011c3e:	f003 0307 	and.w	r3, r3, #7
 8011c42:	2b05      	cmp	r3, #5
 8011c44:	d826      	bhi.n	8011c94 <UART_SetConfig+0x260>
 8011c46:	a201      	add	r2, pc, #4	; (adr r2, 8011c4c <UART_SetConfig+0x218>)
 8011c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c4c:	08011c65 	.word	0x08011c65
 8011c50:	08011c6d 	.word	0x08011c6d
 8011c54:	08011c75 	.word	0x08011c75
 8011c58:	08011c7d 	.word	0x08011c7d
 8011c5c:	08011c85 	.word	0x08011c85
 8011c60:	08011c8d 	.word	0x08011c8d
 8011c64:	2300      	movs	r3, #0
 8011c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c6a:	e2ba      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011c6c:	2304      	movs	r3, #4
 8011c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c72:	e2b6      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011c74:	2308      	movs	r3, #8
 8011c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c7a:	e2b2      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011c7c:	2310      	movs	r3, #16
 8011c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c82:	e2ae      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011c84:	2320      	movs	r3, #32
 8011c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c8a:	e2aa      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011c8c:	2340      	movs	r3, #64	; 0x40
 8011c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c92:	e2a6      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011c94:	2380      	movs	r3, #128	; 0x80
 8011c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c9a:	e2a2      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011c9c:	697b      	ldr	r3, [r7, #20]
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	4a35      	ldr	r2, [pc, #212]	; (8011d78 <UART_SetConfig+0x344>)
 8011ca2:	4293      	cmp	r3, r2
 8011ca4:	d130      	bne.n	8011d08 <UART_SetConfig+0x2d4>
 8011ca6:	4b31      	ldr	r3, [pc, #196]	; (8011d6c <UART_SetConfig+0x338>)
 8011ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011caa:	f003 0307 	and.w	r3, r3, #7
 8011cae:	2b05      	cmp	r3, #5
 8011cb0:	d826      	bhi.n	8011d00 <UART_SetConfig+0x2cc>
 8011cb2:	a201      	add	r2, pc, #4	; (adr r2, 8011cb8 <UART_SetConfig+0x284>)
 8011cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cb8:	08011cd1 	.word	0x08011cd1
 8011cbc:	08011cd9 	.word	0x08011cd9
 8011cc0:	08011ce1 	.word	0x08011ce1
 8011cc4:	08011ce9 	.word	0x08011ce9
 8011cc8:	08011cf1 	.word	0x08011cf1
 8011ccc:	08011cf9 	.word	0x08011cf9
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cd6:	e284      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011cd8:	2304      	movs	r3, #4
 8011cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cde:	e280      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011ce0:	2308      	movs	r3, #8
 8011ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ce6:	e27c      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011ce8:	2310      	movs	r3, #16
 8011cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cee:	e278      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011cf0:	2320      	movs	r3, #32
 8011cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cf6:	e274      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011cf8:	2340      	movs	r3, #64	; 0x40
 8011cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cfe:	e270      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011d00:	2380      	movs	r3, #128	; 0x80
 8011d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d06:	e26c      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011d08:	697b      	ldr	r3, [r7, #20]
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	4a1b      	ldr	r2, [pc, #108]	; (8011d7c <UART_SetConfig+0x348>)
 8011d0e:	4293      	cmp	r3, r2
 8011d10:	d142      	bne.n	8011d98 <UART_SetConfig+0x364>
 8011d12:	4b16      	ldr	r3, [pc, #88]	; (8011d6c <UART_SetConfig+0x338>)
 8011d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011d16:	f003 0307 	and.w	r3, r3, #7
 8011d1a:	2b05      	cmp	r3, #5
 8011d1c:	d838      	bhi.n	8011d90 <UART_SetConfig+0x35c>
 8011d1e:	a201      	add	r2, pc, #4	; (adr r2, 8011d24 <UART_SetConfig+0x2f0>)
 8011d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d24:	08011d3d 	.word	0x08011d3d
 8011d28:	08011d45 	.word	0x08011d45
 8011d2c:	08011d4d 	.word	0x08011d4d
 8011d30:	08011d55 	.word	0x08011d55
 8011d34:	08011d81 	.word	0x08011d81
 8011d38:	08011d89 	.word	0x08011d89
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d42:	e24e      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011d44:	2304      	movs	r3, #4
 8011d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d4a:	e24a      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011d4c:	2308      	movs	r3, #8
 8011d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d52:	e246      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011d54:	2310      	movs	r3, #16
 8011d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d5a:	e242      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011d5c:	cfff69f3 	.word	0xcfff69f3
 8011d60:	58000c00 	.word	0x58000c00
 8011d64:	11fff4ff 	.word	0x11fff4ff
 8011d68:	40011000 	.word	0x40011000
 8011d6c:	58024400 	.word	0x58024400
 8011d70:	40004400 	.word	0x40004400
 8011d74:	40004800 	.word	0x40004800
 8011d78:	40004c00 	.word	0x40004c00
 8011d7c:	40005000 	.word	0x40005000
 8011d80:	2320      	movs	r3, #32
 8011d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d86:	e22c      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011d88:	2340      	movs	r3, #64	; 0x40
 8011d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d8e:	e228      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011d90:	2380      	movs	r3, #128	; 0x80
 8011d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d96:	e224      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011d98:	697b      	ldr	r3, [r7, #20]
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	4ab1      	ldr	r2, [pc, #708]	; (8012064 <UART_SetConfig+0x630>)
 8011d9e:	4293      	cmp	r3, r2
 8011da0:	d176      	bne.n	8011e90 <UART_SetConfig+0x45c>
 8011da2:	4bb1      	ldr	r3, [pc, #708]	; (8012068 <UART_SetConfig+0x634>)
 8011da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011da6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011daa:	2b28      	cmp	r3, #40	; 0x28
 8011dac:	d86c      	bhi.n	8011e88 <UART_SetConfig+0x454>
 8011dae:	a201      	add	r2, pc, #4	; (adr r2, 8011db4 <UART_SetConfig+0x380>)
 8011db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011db4:	08011e59 	.word	0x08011e59
 8011db8:	08011e89 	.word	0x08011e89
 8011dbc:	08011e89 	.word	0x08011e89
 8011dc0:	08011e89 	.word	0x08011e89
 8011dc4:	08011e89 	.word	0x08011e89
 8011dc8:	08011e89 	.word	0x08011e89
 8011dcc:	08011e89 	.word	0x08011e89
 8011dd0:	08011e89 	.word	0x08011e89
 8011dd4:	08011e61 	.word	0x08011e61
 8011dd8:	08011e89 	.word	0x08011e89
 8011ddc:	08011e89 	.word	0x08011e89
 8011de0:	08011e89 	.word	0x08011e89
 8011de4:	08011e89 	.word	0x08011e89
 8011de8:	08011e89 	.word	0x08011e89
 8011dec:	08011e89 	.word	0x08011e89
 8011df0:	08011e89 	.word	0x08011e89
 8011df4:	08011e69 	.word	0x08011e69
 8011df8:	08011e89 	.word	0x08011e89
 8011dfc:	08011e89 	.word	0x08011e89
 8011e00:	08011e89 	.word	0x08011e89
 8011e04:	08011e89 	.word	0x08011e89
 8011e08:	08011e89 	.word	0x08011e89
 8011e0c:	08011e89 	.word	0x08011e89
 8011e10:	08011e89 	.word	0x08011e89
 8011e14:	08011e71 	.word	0x08011e71
 8011e18:	08011e89 	.word	0x08011e89
 8011e1c:	08011e89 	.word	0x08011e89
 8011e20:	08011e89 	.word	0x08011e89
 8011e24:	08011e89 	.word	0x08011e89
 8011e28:	08011e89 	.word	0x08011e89
 8011e2c:	08011e89 	.word	0x08011e89
 8011e30:	08011e89 	.word	0x08011e89
 8011e34:	08011e79 	.word	0x08011e79
 8011e38:	08011e89 	.word	0x08011e89
 8011e3c:	08011e89 	.word	0x08011e89
 8011e40:	08011e89 	.word	0x08011e89
 8011e44:	08011e89 	.word	0x08011e89
 8011e48:	08011e89 	.word	0x08011e89
 8011e4c:	08011e89 	.word	0x08011e89
 8011e50:	08011e89 	.word	0x08011e89
 8011e54:	08011e81 	.word	0x08011e81
 8011e58:	2301      	movs	r3, #1
 8011e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e5e:	e1c0      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011e60:	2304      	movs	r3, #4
 8011e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e66:	e1bc      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011e68:	2308      	movs	r3, #8
 8011e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e6e:	e1b8      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011e70:	2310      	movs	r3, #16
 8011e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e76:	e1b4      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011e78:	2320      	movs	r3, #32
 8011e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e7e:	e1b0      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011e80:	2340      	movs	r3, #64	; 0x40
 8011e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e86:	e1ac      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011e88:	2380      	movs	r3, #128	; 0x80
 8011e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e8e:	e1a8      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011e90:	697b      	ldr	r3, [r7, #20]
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	4a75      	ldr	r2, [pc, #468]	; (801206c <UART_SetConfig+0x638>)
 8011e96:	4293      	cmp	r3, r2
 8011e98:	d130      	bne.n	8011efc <UART_SetConfig+0x4c8>
 8011e9a:	4b73      	ldr	r3, [pc, #460]	; (8012068 <UART_SetConfig+0x634>)
 8011e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011e9e:	f003 0307 	and.w	r3, r3, #7
 8011ea2:	2b05      	cmp	r3, #5
 8011ea4:	d826      	bhi.n	8011ef4 <UART_SetConfig+0x4c0>
 8011ea6:	a201      	add	r2, pc, #4	; (adr r2, 8011eac <UART_SetConfig+0x478>)
 8011ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011eac:	08011ec5 	.word	0x08011ec5
 8011eb0:	08011ecd 	.word	0x08011ecd
 8011eb4:	08011ed5 	.word	0x08011ed5
 8011eb8:	08011edd 	.word	0x08011edd
 8011ebc:	08011ee5 	.word	0x08011ee5
 8011ec0:	08011eed 	.word	0x08011eed
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011eca:	e18a      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011ecc:	2304      	movs	r3, #4
 8011ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ed2:	e186      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011ed4:	2308      	movs	r3, #8
 8011ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011eda:	e182      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011edc:	2310      	movs	r3, #16
 8011ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ee2:	e17e      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011ee4:	2320      	movs	r3, #32
 8011ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011eea:	e17a      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011eec:	2340      	movs	r3, #64	; 0x40
 8011eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ef2:	e176      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011ef4:	2380      	movs	r3, #128	; 0x80
 8011ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011efa:	e172      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011efc:	697b      	ldr	r3, [r7, #20]
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	4a5b      	ldr	r2, [pc, #364]	; (8012070 <UART_SetConfig+0x63c>)
 8011f02:	4293      	cmp	r3, r2
 8011f04:	d130      	bne.n	8011f68 <UART_SetConfig+0x534>
 8011f06:	4b58      	ldr	r3, [pc, #352]	; (8012068 <UART_SetConfig+0x634>)
 8011f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011f0a:	f003 0307 	and.w	r3, r3, #7
 8011f0e:	2b05      	cmp	r3, #5
 8011f10:	d826      	bhi.n	8011f60 <UART_SetConfig+0x52c>
 8011f12:	a201      	add	r2, pc, #4	; (adr r2, 8011f18 <UART_SetConfig+0x4e4>)
 8011f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f18:	08011f31 	.word	0x08011f31
 8011f1c:	08011f39 	.word	0x08011f39
 8011f20:	08011f41 	.word	0x08011f41
 8011f24:	08011f49 	.word	0x08011f49
 8011f28:	08011f51 	.word	0x08011f51
 8011f2c:	08011f59 	.word	0x08011f59
 8011f30:	2300      	movs	r3, #0
 8011f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f36:	e154      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011f38:	2304      	movs	r3, #4
 8011f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f3e:	e150      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011f40:	2308      	movs	r3, #8
 8011f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f46:	e14c      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011f48:	2310      	movs	r3, #16
 8011f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f4e:	e148      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011f50:	2320      	movs	r3, #32
 8011f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f56:	e144      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011f58:	2340      	movs	r3, #64	; 0x40
 8011f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f5e:	e140      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011f60:	2380      	movs	r3, #128	; 0x80
 8011f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f66:	e13c      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8011f68:	697b      	ldr	r3, [r7, #20]
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	4a41      	ldr	r2, [pc, #260]	; (8012074 <UART_SetConfig+0x640>)
 8011f6e:	4293      	cmp	r3, r2
 8011f70:	f040 8082 	bne.w	8012078 <UART_SetConfig+0x644>
 8011f74:	4b3c      	ldr	r3, [pc, #240]	; (8012068 <UART_SetConfig+0x634>)
 8011f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011f78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011f7c:	2b28      	cmp	r3, #40	; 0x28
 8011f7e:	d86d      	bhi.n	801205c <UART_SetConfig+0x628>
 8011f80:	a201      	add	r2, pc, #4	; (adr r2, 8011f88 <UART_SetConfig+0x554>)
 8011f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f86:	bf00      	nop
 8011f88:	0801202d 	.word	0x0801202d
 8011f8c:	0801205d 	.word	0x0801205d
 8011f90:	0801205d 	.word	0x0801205d
 8011f94:	0801205d 	.word	0x0801205d
 8011f98:	0801205d 	.word	0x0801205d
 8011f9c:	0801205d 	.word	0x0801205d
 8011fa0:	0801205d 	.word	0x0801205d
 8011fa4:	0801205d 	.word	0x0801205d
 8011fa8:	08012035 	.word	0x08012035
 8011fac:	0801205d 	.word	0x0801205d
 8011fb0:	0801205d 	.word	0x0801205d
 8011fb4:	0801205d 	.word	0x0801205d
 8011fb8:	0801205d 	.word	0x0801205d
 8011fbc:	0801205d 	.word	0x0801205d
 8011fc0:	0801205d 	.word	0x0801205d
 8011fc4:	0801205d 	.word	0x0801205d
 8011fc8:	0801203d 	.word	0x0801203d
 8011fcc:	0801205d 	.word	0x0801205d
 8011fd0:	0801205d 	.word	0x0801205d
 8011fd4:	0801205d 	.word	0x0801205d
 8011fd8:	0801205d 	.word	0x0801205d
 8011fdc:	0801205d 	.word	0x0801205d
 8011fe0:	0801205d 	.word	0x0801205d
 8011fe4:	0801205d 	.word	0x0801205d
 8011fe8:	08012045 	.word	0x08012045
 8011fec:	0801205d 	.word	0x0801205d
 8011ff0:	0801205d 	.word	0x0801205d
 8011ff4:	0801205d 	.word	0x0801205d
 8011ff8:	0801205d 	.word	0x0801205d
 8011ffc:	0801205d 	.word	0x0801205d
 8012000:	0801205d 	.word	0x0801205d
 8012004:	0801205d 	.word	0x0801205d
 8012008:	0801204d 	.word	0x0801204d
 801200c:	0801205d 	.word	0x0801205d
 8012010:	0801205d 	.word	0x0801205d
 8012014:	0801205d 	.word	0x0801205d
 8012018:	0801205d 	.word	0x0801205d
 801201c:	0801205d 	.word	0x0801205d
 8012020:	0801205d 	.word	0x0801205d
 8012024:	0801205d 	.word	0x0801205d
 8012028:	08012055 	.word	0x08012055
 801202c:	2301      	movs	r3, #1
 801202e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012032:	e0d6      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8012034:	2304      	movs	r3, #4
 8012036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801203a:	e0d2      	b.n	80121e2 <UART_SetConfig+0x7ae>
 801203c:	2308      	movs	r3, #8
 801203e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012042:	e0ce      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8012044:	2310      	movs	r3, #16
 8012046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801204a:	e0ca      	b.n	80121e2 <UART_SetConfig+0x7ae>
 801204c:	2320      	movs	r3, #32
 801204e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012052:	e0c6      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8012054:	2340      	movs	r3, #64	; 0x40
 8012056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801205a:	e0c2      	b.n	80121e2 <UART_SetConfig+0x7ae>
 801205c:	2380      	movs	r3, #128	; 0x80
 801205e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012062:	e0be      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8012064:	40011400 	.word	0x40011400
 8012068:	58024400 	.word	0x58024400
 801206c:	40007800 	.word	0x40007800
 8012070:	40007c00 	.word	0x40007c00
 8012074:	40011800 	.word	0x40011800
 8012078:	697b      	ldr	r3, [r7, #20]
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	4aad      	ldr	r2, [pc, #692]	; (8012334 <UART_SetConfig+0x900>)
 801207e:	4293      	cmp	r3, r2
 8012080:	d176      	bne.n	8012170 <UART_SetConfig+0x73c>
 8012082:	4bad      	ldr	r3, [pc, #692]	; (8012338 <UART_SetConfig+0x904>)
 8012084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012086:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801208a:	2b28      	cmp	r3, #40	; 0x28
 801208c:	d86c      	bhi.n	8012168 <UART_SetConfig+0x734>
 801208e:	a201      	add	r2, pc, #4	; (adr r2, 8012094 <UART_SetConfig+0x660>)
 8012090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012094:	08012139 	.word	0x08012139
 8012098:	08012169 	.word	0x08012169
 801209c:	08012169 	.word	0x08012169
 80120a0:	08012169 	.word	0x08012169
 80120a4:	08012169 	.word	0x08012169
 80120a8:	08012169 	.word	0x08012169
 80120ac:	08012169 	.word	0x08012169
 80120b0:	08012169 	.word	0x08012169
 80120b4:	08012141 	.word	0x08012141
 80120b8:	08012169 	.word	0x08012169
 80120bc:	08012169 	.word	0x08012169
 80120c0:	08012169 	.word	0x08012169
 80120c4:	08012169 	.word	0x08012169
 80120c8:	08012169 	.word	0x08012169
 80120cc:	08012169 	.word	0x08012169
 80120d0:	08012169 	.word	0x08012169
 80120d4:	08012149 	.word	0x08012149
 80120d8:	08012169 	.word	0x08012169
 80120dc:	08012169 	.word	0x08012169
 80120e0:	08012169 	.word	0x08012169
 80120e4:	08012169 	.word	0x08012169
 80120e8:	08012169 	.word	0x08012169
 80120ec:	08012169 	.word	0x08012169
 80120f0:	08012169 	.word	0x08012169
 80120f4:	08012151 	.word	0x08012151
 80120f8:	08012169 	.word	0x08012169
 80120fc:	08012169 	.word	0x08012169
 8012100:	08012169 	.word	0x08012169
 8012104:	08012169 	.word	0x08012169
 8012108:	08012169 	.word	0x08012169
 801210c:	08012169 	.word	0x08012169
 8012110:	08012169 	.word	0x08012169
 8012114:	08012159 	.word	0x08012159
 8012118:	08012169 	.word	0x08012169
 801211c:	08012169 	.word	0x08012169
 8012120:	08012169 	.word	0x08012169
 8012124:	08012169 	.word	0x08012169
 8012128:	08012169 	.word	0x08012169
 801212c:	08012169 	.word	0x08012169
 8012130:	08012169 	.word	0x08012169
 8012134:	08012161 	.word	0x08012161
 8012138:	2301      	movs	r3, #1
 801213a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801213e:	e050      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8012140:	2304      	movs	r3, #4
 8012142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012146:	e04c      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8012148:	2308      	movs	r3, #8
 801214a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801214e:	e048      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8012150:	2310      	movs	r3, #16
 8012152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012156:	e044      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8012158:	2320      	movs	r3, #32
 801215a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801215e:	e040      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8012160:	2340      	movs	r3, #64	; 0x40
 8012162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012166:	e03c      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8012168:	2380      	movs	r3, #128	; 0x80
 801216a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801216e:	e038      	b.n	80121e2 <UART_SetConfig+0x7ae>
 8012170:	697b      	ldr	r3, [r7, #20]
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	4a71      	ldr	r2, [pc, #452]	; (801233c <UART_SetConfig+0x908>)
 8012176:	4293      	cmp	r3, r2
 8012178:	d130      	bne.n	80121dc <UART_SetConfig+0x7a8>
 801217a:	4b6f      	ldr	r3, [pc, #444]	; (8012338 <UART_SetConfig+0x904>)
 801217c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801217e:	f003 0307 	and.w	r3, r3, #7
 8012182:	2b05      	cmp	r3, #5
 8012184:	d826      	bhi.n	80121d4 <UART_SetConfig+0x7a0>
 8012186:	a201      	add	r2, pc, #4	; (adr r2, 801218c <UART_SetConfig+0x758>)
 8012188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801218c:	080121a5 	.word	0x080121a5
 8012190:	080121ad 	.word	0x080121ad
 8012194:	080121b5 	.word	0x080121b5
 8012198:	080121bd 	.word	0x080121bd
 801219c:	080121c5 	.word	0x080121c5
 80121a0:	080121cd 	.word	0x080121cd
 80121a4:	2302      	movs	r3, #2
 80121a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80121aa:	e01a      	b.n	80121e2 <UART_SetConfig+0x7ae>
 80121ac:	2304      	movs	r3, #4
 80121ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80121b2:	e016      	b.n	80121e2 <UART_SetConfig+0x7ae>
 80121b4:	2308      	movs	r3, #8
 80121b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80121ba:	e012      	b.n	80121e2 <UART_SetConfig+0x7ae>
 80121bc:	2310      	movs	r3, #16
 80121be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80121c2:	e00e      	b.n	80121e2 <UART_SetConfig+0x7ae>
 80121c4:	2320      	movs	r3, #32
 80121c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80121ca:	e00a      	b.n	80121e2 <UART_SetConfig+0x7ae>
 80121cc:	2340      	movs	r3, #64	; 0x40
 80121ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80121d2:	e006      	b.n	80121e2 <UART_SetConfig+0x7ae>
 80121d4:	2380      	movs	r3, #128	; 0x80
 80121d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80121da:	e002      	b.n	80121e2 <UART_SetConfig+0x7ae>
 80121dc:	2380      	movs	r3, #128	; 0x80
 80121de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80121e2:	697b      	ldr	r3, [r7, #20]
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	4a55      	ldr	r2, [pc, #340]	; (801233c <UART_SetConfig+0x908>)
 80121e8:	4293      	cmp	r3, r2
 80121ea:	f040 80f8 	bne.w	80123de <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80121ee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80121f2:	2b20      	cmp	r3, #32
 80121f4:	dc46      	bgt.n	8012284 <UART_SetConfig+0x850>
 80121f6:	2b02      	cmp	r3, #2
 80121f8:	db75      	blt.n	80122e6 <UART_SetConfig+0x8b2>
 80121fa:	3b02      	subs	r3, #2
 80121fc:	2b1e      	cmp	r3, #30
 80121fe:	d872      	bhi.n	80122e6 <UART_SetConfig+0x8b2>
 8012200:	a201      	add	r2, pc, #4	; (adr r2, 8012208 <UART_SetConfig+0x7d4>)
 8012202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012206:	bf00      	nop
 8012208:	0801228b 	.word	0x0801228b
 801220c:	080122e7 	.word	0x080122e7
 8012210:	08012293 	.word	0x08012293
 8012214:	080122e7 	.word	0x080122e7
 8012218:	080122e7 	.word	0x080122e7
 801221c:	080122e7 	.word	0x080122e7
 8012220:	080122a3 	.word	0x080122a3
 8012224:	080122e7 	.word	0x080122e7
 8012228:	080122e7 	.word	0x080122e7
 801222c:	080122e7 	.word	0x080122e7
 8012230:	080122e7 	.word	0x080122e7
 8012234:	080122e7 	.word	0x080122e7
 8012238:	080122e7 	.word	0x080122e7
 801223c:	080122e7 	.word	0x080122e7
 8012240:	080122b3 	.word	0x080122b3
 8012244:	080122e7 	.word	0x080122e7
 8012248:	080122e7 	.word	0x080122e7
 801224c:	080122e7 	.word	0x080122e7
 8012250:	080122e7 	.word	0x080122e7
 8012254:	080122e7 	.word	0x080122e7
 8012258:	080122e7 	.word	0x080122e7
 801225c:	080122e7 	.word	0x080122e7
 8012260:	080122e7 	.word	0x080122e7
 8012264:	080122e7 	.word	0x080122e7
 8012268:	080122e7 	.word	0x080122e7
 801226c:	080122e7 	.word	0x080122e7
 8012270:	080122e7 	.word	0x080122e7
 8012274:	080122e7 	.word	0x080122e7
 8012278:	080122e7 	.word	0x080122e7
 801227c:	080122e7 	.word	0x080122e7
 8012280:	080122d9 	.word	0x080122d9
 8012284:	2b40      	cmp	r3, #64	; 0x40
 8012286:	d02a      	beq.n	80122de <UART_SetConfig+0x8aa>
 8012288:	e02d      	b.n	80122e6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801228a:	f7fb f987 	bl	800d59c <HAL_RCCEx_GetD3PCLK1Freq>
 801228e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012290:	e02f      	b.n	80122f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012296:	4618      	mov	r0, r3
 8012298:	f7fb f996 	bl	800d5c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801229c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801229e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80122a0:	e027      	b.n	80122f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80122a2:	f107 0318 	add.w	r3, r7, #24
 80122a6:	4618      	mov	r0, r3
 80122a8:	f7fb fae2 	bl	800d870 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80122ac:	69fb      	ldr	r3, [r7, #28]
 80122ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80122b0:	e01f      	b.n	80122f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80122b2:	4b21      	ldr	r3, [pc, #132]	; (8012338 <UART_SetConfig+0x904>)
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	f003 0320 	and.w	r3, r3, #32
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d009      	beq.n	80122d2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80122be:	4b1e      	ldr	r3, [pc, #120]	; (8012338 <UART_SetConfig+0x904>)
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	08db      	lsrs	r3, r3, #3
 80122c4:	f003 0303 	and.w	r3, r3, #3
 80122c8:	4a1d      	ldr	r2, [pc, #116]	; (8012340 <UART_SetConfig+0x90c>)
 80122ca:	fa22 f303 	lsr.w	r3, r2, r3
 80122ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80122d0:	e00f      	b.n	80122f2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80122d2:	4b1b      	ldr	r3, [pc, #108]	; (8012340 <UART_SetConfig+0x90c>)
 80122d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80122d6:	e00c      	b.n	80122f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80122d8:	4b1a      	ldr	r3, [pc, #104]	; (8012344 <UART_SetConfig+0x910>)
 80122da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80122dc:	e009      	b.n	80122f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80122de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80122e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80122e4:	e005      	b.n	80122f2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80122e6:	2300      	movs	r3, #0
 80122e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80122ea:	2301      	movs	r3, #1
 80122ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80122f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80122f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	f000 81ee 	beq.w	80126d6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80122fa:	697b      	ldr	r3, [r7, #20]
 80122fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122fe:	4a12      	ldr	r2, [pc, #72]	; (8012348 <UART_SetConfig+0x914>)
 8012300:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012304:	461a      	mov	r2, r3
 8012306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012308:	fbb3 f3f2 	udiv	r3, r3, r2
 801230c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801230e:	697b      	ldr	r3, [r7, #20]
 8012310:	685a      	ldr	r2, [r3, #4]
 8012312:	4613      	mov	r3, r2
 8012314:	005b      	lsls	r3, r3, #1
 8012316:	4413      	add	r3, r2
 8012318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801231a:	429a      	cmp	r2, r3
 801231c:	d305      	bcc.n	801232a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801231e:	697b      	ldr	r3, [r7, #20]
 8012320:	685b      	ldr	r3, [r3, #4]
 8012322:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012326:	429a      	cmp	r2, r3
 8012328:	d910      	bls.n	801234c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 801232a:	2301      	movs	r3, #1
 801232c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8012330:	e1d1      	b.n	80126d6 <UART_SetConfig+0xca2>
 8012332:	bf00      	nop
 8012334:	40011c00 	.word	0x40011c00
 8012338:	58024400 	.word	0x58024400
 801233c:	58000c00 	.word	0x58000c00
 8012340:	03d09000 	.word	0x03d09000
 8012344:	003d0900 	.word	0x003d0900
 8012348:	0801c81c 	.word	0x0801c81c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801234c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801234e:	2200      	movs	r2, #0
 8012350:	60bb      	str	r3, [r7, #8]
 8012352:	60fa      	str	r2, [r7, #12]
 8012354:	697b      	ldr	r3, [r7, #20]
 8012356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012358:	4ac0      	ldr	r2, [pc, #768]	; (801265c <UART_SetConfig+0xc28>)
 801235a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801235e:	b29b      	uxth	r3, r3
 8012360:	2200      	movs	r2, #0
 8012362:	603b      	str	r3, [r7, #0]
 8012364:	607a      	str	r2, [r7, #4]
 8012366:	e9d7 2300 	ldrd	r2, r3, [r7]
 801236a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801236e:	f7ee f9f3 	bl	8000758 <__aeabi_uldivmod>
 8012372:	4602      	mov	r2, r0
 8012374:	460b      	mov	r3, r1
 8012376:	4610      	mov	r0, r2
 8012378:	4619      	mov	r1, r3
 801237a:	f04f 0200 	mov.w	r2, #0
 801237e:	f04f 0300 	mov.w	r3, #0
 8012382:	020b      	lsls	r3, r1, #8
 8012384:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8012388:	0202      	lsls	r2, r0, #8
 801238a:	6979      	ldr	r1, [r7, #20]
 801238c:	6849      	ldr	r1, [r1, #4]
 801238e:	0849      	lsrs	r1, r1, #1
 8012390:	2000      	movs	r0, #0
 8012392:	460c      	mov	r4, r1
 8012394:	4605      	mov	r5, r0
 8012396:	eb12 0804 	adds.w	r8, r2, r4
 801239a:	eb43 0905 	adc.w	r9, r3, r5
 801239e:	697b      	ldr	r3, [r7, #20]
 80123a0:	685b      	ldr	r3, [r3, #4]
 80123a2:	2200      	movs	r2, #0
 80123a4:	469a      	mov	sl, r3
 80123a6:	4693      	mov	fp, r2
 80123a8:	4652      	mov	r2, sl
 80123aa:	465b      	mov	r3, fp
 80123ac:	4640      	mov	r0, r8
 80123ae:	4649      	mov	r1, r9
 80123b0:	f7ee f9d2 	bl	8000758 <__aeabi_uldivmod>
 80123b4:	4602      	mov	r2, r0
 80123b6:	460b      	mov	r3, r1
 80123b8:	4613      	mov	r3, r2
 80123ba:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80123bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80123c2:	d308      	bcc.n	80123d6 <UART_SetConfig+0x9a2>
 80123c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80123ca:	d204      	bcs.n	80123d6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80123cc:	697b      	ldr	r3, [r7, #20]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80123d2:	60da      	str	r2, [r3, #12]
 80123d4:	e17f      	b.n	80126d6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80123d6:	2301      	movs	r3, #1
 80123d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80123dc:	e17b      	b.n	80126d6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80123de:	697b      	ldr	r3, [r7, #20]
 80123e0:	69db      	ldr	r3, [r3, #28]
 80123e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80123e6:	f040 80bd 	bne.w	8012564 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80123ea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80123ee:	2b20      	cmp	r3, #32
 80123f0:	dc48      	bgt.n	8012484 <UART_SetConfig+0xa50>
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	db7b      	blt.n	80124ee <UART_SetConfig+0xaba>
 80123f6:	2b20      	cmp	r3, #32
 80123f8:	d879      	bhi.n	80124ee <UART_SetConfig+0xaba>
 80123fa:	a201      	add	r2, pc, #4	; (adr r2, 8012400 <UART_SetConfig+0x9cc>)
 80123fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012400:	0801248b 	.word	0x0801248b
 8012404:	08012493 	.word	0x08012493
 8012408:	080124ef 	.word	0x080124ef
 801240c:	080124ef 	.word	0x080124ef
 8012410:	0801249b 	.word	0x0801249b
 8012414:	080124ef 	.word	0x080124ef
 8012418:	080124ef 	.word	0x080124ef
 801241c:	080124ef 	.word	0x080124ef
 8012420:	080124ab 	.word	0x080124ab
 8012424:	080124ef 	.word	0x080124ef
 8012428:	080124ef 	.word	0x080124ef
 801242c:	080124ef 	.word	0x080124ef
 8012430:	080124ef 	.word	0x080124ef
 8012434:	080124ef 	.word	0x080124ef
 8012438:	080124ef 	.word	0x080124ef
 801243c:	080124ef 	.word	0x080124ef
 8012440:	080124bb 	.word	0x080124bb
 8012444:	080124ef 	.word	0x080124ef
 8012448:	080124ef 	.word	0x080124ef
 801244c:	080124ef 	.word	0x080124ef
 8012450:	080124ef 	.word	0x080124ef
 8012454:	080124ef 	.word	0x080124ef
 8012458:	080124ef 	.word	0x080124ef
 801245c:	080124ef 	.word	0x080124ef
 8012460:	080124ef 	.word	0x080124ef
 8012464:	080124ef 	.word	0x080124ef
 8012468:	080124ef 	.word	0x080124ef
 801246c:	080124ef 	.word	0x080124ef
 8012470:	080124ef 	.word	0x080124ef
 8012474:	080124ef 	.word	0x080124ef
 8012478:	080124ef 	.word	0x080124ef
 801247c:	080124ef 	.word	0x080124ef
 8012480:	080124e1 	.word	0x080124e1
 8012484:	2b40      	cmp	r3, #64	; 0x40
 8012486:	d02e      	beq.n	80124e6 <UART_SetConfig+0xab2>
 8012488:	e031      	b.n	80124ee <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801248a:	f7f9 f9e9 	bl	800b860 <HAL_RCC_GetPCLK1Freq>
 801248e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012490:	e033      	b.n	80124fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012492:	f7f9 f9fb 	bl	800b88c <HAL_RCC_GetPCLK2Freq>
 8012496:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012498:	e02f      	b.n	80124fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801249a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801249e:	4618      	mov	r0, r3
 80124a0:	f7fb f892 	bl	800d5c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80124a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80124a8:	e027      	b.n	80124fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80124aa:	f107 0318 	add.w	r3, r7, #24
 80124ae:	4618      	mov	r0, r3
 80124b0:	f7fb f9de 	bl	800d870 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80124b4:	69fb      	ldr	r3, [r7, #28]
 80124b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80124b8:	e01f      	b.n	80124fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80124ba:	4b69      	ldr	r3, [pc, #420]	; (8012660 <UART_SetConfig+0xc2c>)
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	f003 0320 	and.w	r3, r3, #32
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d009      	beq.n	80124da <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80124c6:	4b66      	ldr	r3, [pc, #408]	; (8012660 <UART_SetConfig+0xc2c>)
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	08db      	lsrs	r3, r3, #3
 80124cc:	f003 0303 	and.w	r3, r3, #3
 80124d0:	4a64      	ldr	r2, [pc, #400]	; (8012664 <UART_SetConfig+0xc30>)
 80124d2:	fa22 f303 	lsr.w	r3, r2, r3
 80124d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80124d8:	e00f      	b.n	80124fa <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80124da:	4b62      	ldr	r3, [pc, #392]	; (8012664 <UART_SetConfig+0xc30>)
 80124dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80124de:	e00c      	b.n	80124fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80124e0:	4b61      	ldr	r3, [pc, #388]	; (8012668 <UART_SetConfig+0xc34>)
 80124e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80124e4:	e009      	b.n	80124fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80124e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80124ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80124ec:	e005      	b.n	80124fa <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80124ee:	2300      	movs	r3, #0
 80124f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80124f2:	2301      	movs	r3, #1
 80124f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80124f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80124fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	f000 80ea 	beq.w	80126d6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012502:	697b      	ldr	r3, [r7, #20]
 8012504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012506:	4a55      	ldr	r2, [pc, #340]	; (801265c <UART_SetConfig+0xc28>)
 8012508:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801250c:	461a      	mov	r2, r3
 801250e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012510:	fbb3 f3f2 	udiv	r3, r3, r2
 8012514:	005a      	lsls	r2, r3, #1
 8012516:	697b      	ldr	r3, [r7, #20]
 8012518:	685b      	ldr	r3, [r3, #4]
 801251a:	085b      	lsrs	r3, r3, #1
 801251c:	441a      	add	r2, r3
 801251e:	697b      	ldr	r3, [r7, #20]
 8012520:	685b      	ldr	r3, [r3, #4]
 8012522:	fbb2 f3f3 	udiv	r3, r2, r3
 8012526:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801252a:	2b0f      	cmp	r3, #15
 801252c:	d916      	bls.n	801255c <UART_SetConfig+0xb28>
 801252e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012534:	d212      	bcs.n	801255c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012538:	b29b      	uxth	r3, r3
 801253a:	f023 030f 	bic.w	r3, r3, #15
 801253e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012542:	085b      	lsrs	r3, r3, #1
 8012544:	b29b      	uxth	r3, r3
 8012546:	f003 0307 	and.w	r3, r3, #7
 801254a:	b29a      	uxth	r2, r3
 801254c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801254e:	4313      	orrs	r3, r2
 8012550:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8012552:	697b      	ldr	r3, [r7, #20]
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8012558:	60da      	str	r2, [r3, #12]
 801255a:	e0bc      	b.n	80126d6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 801255c:	2301      	movs	r3, #1
 801255e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8012562:	e0b8      	b.n	80126d6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8012564:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012568:	2b20      	cmp	r3, #32
 801256a:	dc4b      	bgt.n	8012604 <UART_SetConfig+0xbd0>
 801256c:	2b00      	cmp	r3, #0
 801256e:	f2c0 8087 	blt.w	8012680 <UART_SetConfig+0xc4c>
 8012572:	2b20      	cmp	r3, #32
 8012574:	f200 8084 	bhi.w	8012680 <UART_SetConfig+0xc4c>
 8012578:	a201      	add	r2, pc, #4	; (adr r2, 8012580 <UART_SetConfig+0xb4c>)
 801257a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801257e:	bf00      	nop
 8012580:	0801260b 	.word	0x0801260b
 8012584:	08012613 	.word	0x08012613
 8012588:	08012681 	.word	0x08012681
 801258c:	08012681 	.word	0x08012681
 8012590:	0801261b 	.word	0x0801261b
 8012594:	08012681 	.word	0x08012681
 8012598:	08012681 	.word	0x08012681
 801259c:	08012681 	.word	0x08012681
 80125a0:	0801262b 	.word	0x0801262b
 80125a4:	08012681 	.word	0x08012681
 80125a8:	08012681 	.word	0x08012681
 80125ac:	08012681 	.word	0x08012681
 80125b0:	08012681 	.word	0x08012681
 80125b4:	08012681 	.word	0x08012681
 80125b8:	08012681 	.word	0x08012681
 80125bc:	08012681 	.word	0x08012681
 80125c0:	0801263b 	.word	0x0801263b
 80125c4:	08012681 	.word	0x08012681
 80125c8:	08012681 	.word	0x08012681
 80125cc:	08012681 	.word	0x08012681
 80125d0:	08012681 	.word	0x08012681
 80125d4:	08012681 	.word	0x08012681
 80125d8:	08012681 	.word	0x08012681
 80125dc:	08012681 	.word	0x08012681
 80125e0:	08012681 	.word	0x08012681
 80125e4:	08012681 	.word	0x08012681
 80125e8:	08012681 	.word	0x08012681
 80125ec:	08012681 	.word	0x08012681
 80125f0:	08012681 	.word	0x08012681
 80125f4:	08012681 	.word	0x08012681
 80125f8:	08012681 	.word	0x08012681
 80125fc:	08012681 	.word	0x08012681
 8012600:	08012673 	.word	0x08012673
 8012604:	2b40      	cmp	r3, #64	; 0x40
 8012606:	d037      	beq.n	8012678 <UART_SetConfig+0xc44>
 8012608:	e03a      	b.n	8012680 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801260a:	f7f9 f929 	bl	800b860 <HAL_RCC_GetPCLK1Freq>
 801260e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012610:	e03c      	b.n	801268c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012612:	f7f9 f93b 	bl	800b88c <HAL_RCC_GetPCLK2Freq>
 8012616:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012618:	e038      	b.n	801268c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801261a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801261e:	4618      	mov	r0, r3
 8012620:	f7fa ffd2 	bl	800d5c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012626:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012628:	e030      	b.n	801268c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801262a:	f107 0318 	add.w	r3, r7, #24
 801262e:	4618      	mov	r0, r3
 8012630:	f7fb f91e 	bl	800d870 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012634:	69fb      	ldr	r3, [r7, #28]
 8012636:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012638:	e028      	b.n	801268c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801263a:	4b09      	ldr	r3, [pc, #36]	; (8012660 <UART_SetConfig+0xc2c>)
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	f003 0320 	and.w	r3, r3, #32
 8012642:	2b00      	cmp	r3, #0
 8012644:	d012      	beq.n	801266c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012646:	4b06      	ldr	r3, [pc, #24]	; (8012660 <UART_SetConfig+0xc2c>)
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	08db      	lsrs	r3, r3, #3
 801264c:	f003 0303 	and.w	r3, r3, #3
 8012650:	4a04      	ldr	r2, [pc, #16]	; (8012664 <UART_SetConfig+0xc30>)
 8012652:	fa22 f303 	lsr.w	r3, r2, r3
 8012656:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012658:	e018      	b.n	801268c <UART_SetConfig+0xc58>
 801265a:	bf00      	nop
 801265c:	0801c81c 	.word	0x0801c81c
 8012660:	58024400 	.word	0x58024400
 8012664:	03d09000 	.word	0x03d09000
 8012668:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 801266c:	4b24      	ldr	r3, [pc, #144]	; (8012700 <UART_SetConfig+0xccc>)
 801266e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012670:	e00c      	b.n	801268c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012672:	4b24      	ldr	r3, [pc, #144]	; (8012704 <UART_SetConfig+0xcd0>)
 8012674:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012676:	e009      	b.n	801268c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012678:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801267c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801267e:	e005      	b.n	801268c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8012680:	2300      	movs	r3, #0
 8012682:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8012684:	2301      	movs	r3, #1
 8012686:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801268a:	bf00      	nop
    }

    if (pclk != 0U)
 801268c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801268e:	2b00      	cmp	r3, #0
 8012690:	d021      	beq.n	80126d6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012692:	697b      	ldr	r3, [r7, #20]
 8012694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012696:	4a1c      	ldr	r2, [pc, #112]	; (8012708 <UART_SetConfig+0xcd4>)
 8012698:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801269c:	461a      	mov	r2, r3
 801269e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126a0:	fbb3 f2f2 	udiv	r2, r3, r2
 80126a4:	697b      	ldr	r3, [r7, #20]
 80126a6:	685b      	ldr	r3, [r3, #4]
 80126a8:	085b      	lsrs	r3, r3, #1
 80126aa:	441a      	add	r2, r3
 80126ac:	697b      	ldr	r3, [r7, #20]
 80126ae:	685b      	ldr	r3, [r3, #4]
 80126b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80126b4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80126b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126b8:	2b0f      	cmp	r3, #15
 80126ba:	d909      	bls.n	80126d0 <UART_SetConfig+0xc9c>
 80126bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80126c2:	d205      	bcs.n	80126d0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80126c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126c6:	b29a      	uxth	r2, r3
 80126c8:	697b      	ldr	r3, [r7, #20]
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	60da      	str	r2, [r3, #12]
 80126ce:	e002      	b.n	80126d6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80126d0:	2301      	movs	r3, #1
 80126d2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80126d6:	697b      	ldr	r3, [r7, #20]
 80126d8:	2201      	movs	r2, #1
 80126da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80126de:	697b      	ldr	r3, [r7, #20]
 80126e0:	2201      	movs	r2, #1
 80126e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80126e6:	697b      	ldr	r3, [r7, #20]
 80126e8:	2200      	movs	r2, #0
 80126ea:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80126ec:	697b      	ldr	r3, [r7, #20]
 80126ee:	2200      	movs	r2, #0
 80126f0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80126f2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80126f6:	4618      	mov	r0, r3
 80126f8:	3748      	adds	r7, #72	; 0x48
 80126fa:	46bd      	mov	sp, r7
 80126fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012700:	03d09000 	.word	0x03d09000
 8012704:	003d0900 	.word	0x003d0900
 8012708:	0801c81c 	.word	0x0801c81c

0801270c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801270c:	b480      	push	{r7}
 801270e:	b083      	sub	sp, #12
 8012710:	af00      	add	r7, sp, #0
 8012712:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012718:	f003 0301 	and.w	r3, r3, #1
 801271c:	2b00      	cmp	r3, #0
 801271e:	d00a      	beq.n	8012736 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	685b      	ldr	r3, [r3, #4]
 8012726:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	430a      	orrs	r2, r1
 8012734:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801273a:	f003 0302 	and.w	r3, r3, #2
 801273e:	2b00      	cmp	r3, #0
 8012740:	d00a      	beq.n	8012758 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	685b      	ldr	r3, [r3, #4]
 8012748:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	430a      	orrs	r2, r1
 8012756:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801275c:	f003 0304 	and.w	r3, r3, #4
 8012760:	2b00      	cmp	r3, #0
 8012762:	d00a      	beq.n	801277a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	685b      	ldr	r3, [r3, #4]
 801276a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	430a      	orrs	r2, r1
 8012778:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801277e:	f003 0308 	and.w	r3, r3, #8
 8012782:	2b00      	cmp	r3, #0
 8012784:	d00a      	beq.n	801279c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	685b      	ldr	r3, [r3, #4]
 801278c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	430a      	orrs	r2, r1
 801279a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127a0:	f003 0310 	and.w	r3, r3, #16
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d00a      	beq.n	80127be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	689b      	ldr	r3, [r3, #8]
 80127ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	430a      	orrs	r2, r1
 80127bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127c2:	f003 0320 	and.w	r3, r3, #32
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d00a      	beq.n	80127e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	689b      	ldr	r3, [r3, #8]
 80127d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	430a      	orrs	r2, r1
 80127de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d01a      	beq.n	8012822 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	685b      	ldr	r3, [r3, #4]
 80127f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	430a      	orrs	r2, r1
 8012800:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012806:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801280a:	d10a      	bne.n	8012822 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	685b      	ldr	r3, [r3, #4]
 8012812:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	430a      	orrs	r2, r1
 8012820:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801282a:	2b00      	cmp	r3, #0
 801282c:	d00a      	beq.n	8012844 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	685b      	ldr	r3, [r3, #4]
 8012834:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	430a      	orrs	r2, r1
 8012842:	605a      	str	r2, [r3, #4]
  }
}
 8012844:	bf00      	nop
 8012846:	370c      	adds	r7, #12
 8012848:	46bd      	mov	sp, r7
 801284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801284e:	4770      	bx	lr

08012850 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012850:	b580      	push	{r7, lr}
 8012852:	b098      	sub	sp, #96	; 0x60
 8012854:	af02      	add	r7, sp, #8
 8012856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	2200      	movs	r2, #0
 801285c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012860:	f7f1 fd32 	bl	80042c8 <HAL_GetTick>
 8012864:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	f003 0308 	and.w	r3, r3, #8
 8012870:	2b08      	cmp	r3, #8
 8012872:	d12f      	bne.n	80128d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012874:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012878:	9300      	str	r3, [sp, #0]
 801287a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801287c:	2200      	movs	r2, #0
 801287e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012882:	6878      	ldr	r0, [r7, #4]
 8012884:	f000 f88e 	bl	80129a4 <UART_WaitOnFlagUntilTimeout>
 8012888:	4603      	mov	r3, r0
 801288a:	2b00      	cmp	r3, #0
 801288c:	d022      	beq.n	80128d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012896:	e853 3f00 	ldrex	r3, [r3]
 801289a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801289c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801289e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80128a2:	653b      	str	r3, [r7, #80]	; 0x50
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	461a      	mov	r2, r3
 80128aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80128ac:	647b      	str	r3, [r7, #68]	; 0x44
 80128ae:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80128b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80128b4:	e841 2300 	strex	r3, r2, [r1]
 80128b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80128ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d1e6      	bne.n	801288e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	2220      	movs	r2, #32
 80128c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	2200      	movs	r2, #0
 80128cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80128d0:	2303      	movs	r3, #3
 80128d2:	e063      	b.n	801299c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	f003 0304 	and.w	r3, r3, #4
 80128de:	2b04      	cmp	r3, #4
 80128e0:	d149      	bne.n	8012976 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80128e2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80128e6:	9300      	str	r3, [sp, #0]
 80128e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80128ea:	2200      	movs	r2, #0
 80128ec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80128f0:	6878      	ldr	r0, [r7, #4]
 80128f2:	f000 f857 	bl	80129a4 <UART_WaitOnFlagUntilTimeout>
 80128f6:	4603      	mov	r3, r0
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d03c      	beq.n	8012976 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012904:	e853 3f00 	ldrex	r3, [r3]
 8012908:	623b      	str	r3, [r7, #32]
   return(result);
 801290a:	6a3b      	ldr	r3, [r7, #32]
 801290c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012910:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	461a      	mov	r2, r3
 8012918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801291a:	633b      	str	r3, [r7, #48]	; 0x30
 801291c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801291e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012922:	e841 2300 	strex	r3, r2, [r1]
 8012926:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801292a:	2b00      	cmp	r3, #0
 801292c:	d1e6      	bne.n	80128fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	3308      	adds	r3, #8
 8012934:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012936:	693b      	ldr	r3, [r7, #16]
 8012938:	e853 3f00 	ldrex	r3, [r3]
 801293c:	60fb      	str	r3, [r7, #12]
   return(result);
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	f023 0301 	bic.w	r3, r3, #1
 8012944:	64bb      	str	r3, [r7, #72]	; 0x48
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	3308      	adds	r3, #8
 801294c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801294e:	61fa      	str	r2, [r7, #28]
 8012950:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012952:	69b9      	ldr	r1, [r7, #24]
 8012954:	69fa      	ldr	r2, [r7, #28]
 8012956:	e841 2300 	strex	r3, r2, [r1]
 801295a:	617b      	str	r3, [r7, #20]
   return(result);
 801295c:	697b      	ldr	r3, [r7, #20]
 801295e:	2b00      	cmp	r3, #0
 8012960:	d1e5      	bne.n	801292e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	2220      	movs	r2, #32
 8012966:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	2200      	movs	r2, #0
 801296e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012972:	2303      	movs	r3, #3
 8012974:	e012      	b.n	801299c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	2220      	movs	r2, #32
 801297a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	2220      	movs	r2, #32
 8012982:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	2200      	movs	r2, #0
 801298a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	2200      	movs	r2, #0
 8012990:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	2200      	movs	r2, #0
 8012996:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801299a:	2300      	movs	r3, #0
}
 801299c:	4618      	mov	r0, r3
 801299e:	3758      	adds	r7, #88	; 0x58
 80129a0:	46bd      	mov	sp, r7
 80129a2:	bd80      	pop	{r7, pc}

080129a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80129a4:	b580      	push	{r7, lr}
 80129a6:	b084      	sub	sp, #16
 80129a8:	af00      	add	r7, sp, #0
 80129aa:	60f8      	str	r0, [r7, #12]
 80129ac:	60b9      	str	r1, [r7, #8]
 80129ae:	603b      	str	r3, [r7, #0]
 80129b0:	4613      	mov	r3, r2
 80129b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80129b4:	e049      	b.n	8012a4a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80129b6:	69bb      	ldr	r3, [r7, #24]
 80129b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129bc:	d045      	beq.n	8012a4a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80129be:	f7f1 fc83 	bl	80042c8 <HAL_GetTick>
 80129c2:	4602      	mov	r2, r0
 80129c4:	683b      	ldr	r3, [r7, #0]
 80129c6:	1ad3      	subs	r3, r2, r3
 80129c8:	69ba      	ldr	r2, [r7, #24]
 80129ca:	429a      	cmp	r2, r3
 80129cc:	d302      	bcc.n	80129d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80129ce:	69bb      	ldr	r3, [r7, #24]
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d101      	bne.n	80129d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80129d4:	2303      	movs	r3, #3
 80129d6:	e048      	b.n	8012a6a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	f003 0304 	and.w	r3, r3, #4
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d031      	beq.n	8012a4a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	69db      	ldr	r3, [r3, #28]
 80129ec:	f003 0308 	and.w	r3, r3, #8
 80129f0:	2b08      	cmp	r3, #8
 80129f2:	d110      	bne.n	8012a16 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	2208      	movs	r2, #8
 80129fa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80129fc:	68f8      	ldr	r0, [r7, #12]
 80129fe:	f000 f839 	bl	8012a74 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	2208      	movs	r2, #8
 8012a06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	2200      	movs	r2, #0
 8012a0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8012a12:	2301      	movs	r3, #1
 8012a14:	e029      	b.n	8012a6a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	69db      	ldr	r3, [r3, #28]
 8012a1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012a20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012a24:	d111      	bne.n	8012a4a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	681b      	ldr	r3, [r3, #0]
 8012a2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012a2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012a30:	68f8      	ldr	r0, [r7, #12]
 8012a32:	f000 f81f 	bl	8012a74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	2220      	movs	r2, #32
 8012a3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	2200      	movs	r2, #0
 8012a42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8012a46:	2303      	movs	r3, #3
 8012a48:	e00f      	b.n	8012a6a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	69da      	ldr	r2, [r3, #28]
 8012a50:	68bb      	ldr	r3, [r7, #8]
 8012a52:	4013      	ands	r3, r2
 8012a54:	68ba      	ldr	r2, [r7, #8]
 8012a56:	429a      	cmp	r2, r3
 8012a58:	bf0c      	ite	eq
 8012a5a:	2301      	moveq	r3, #1
 8012a5c:	2300      	movne	r3, #0
 8012a5e:	b2db      	uxtb	r3, r3
 8012a60:	461a      	mov	r2, r3
 8012a62:	79fb      	ldrb	r3, [r7, #7]
 8012a64:	429a      	cmp	r2, r3
 8012a66:	d0a6      	beq.n	80129b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012a68:	2300      	movs	r3, #0
}
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	3710      	adds	r7, #16
 8012a6e:	46bd      	mov	sp, r7
 8012a70:	bd80      	pop	{r7, pc}
	...

08012a74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012a74:	b480      	push	{r7}
 8012a76:	b095      	sub	sp, #84	; 0x54
 8012a78:	af00      	add	r7, sp, #0
 8012a7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a84:	e853 3f00 	ldrex	r3, [r3]
 8012a88:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012a90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	461a      	mov	r2, r3
 8012a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a9a:	643b      	str	r3, [r7, #64]	; 0x40
 8012a9c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012aa0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012aa2:	e841 2300 	strex	r3, r2, [r1]
 8012aa6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d1e6      	bne.n	8012a7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	3308      	adds	r3, #8
 8012ab4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ab6:	6a3b      	ldr	r3, [r7, #32]
 8012ab8:	e853 3f00 	ldrex	r3, [r3]
 8012abc:	61fb      	str	r3, [r7, #28]
   return(result);
 8012abe:	69fa      	ldr	r2, [r7, #28]
 8012ac0:	4b1e      	ldr	r3, [pc, #120]	; (8012b3c <UART_EndRxTransfer+0xc8>)
 8012ac2:	4013      	ands	r3, r2
 8012ac4:	64bb      	str	r3, [r7, #72]	; 0x48
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	3308      	adds	r3, #8
 8012acc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012ace:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012ad0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ad2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012ad4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012ad6:	e841 2300 	strex	r3, r2, [r1]
 8012ada:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d1e5      	bne.n	8012aae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ae6:	2b01      	cmp	r3, #1
 8012ae8:	d118      	bne.n	8012b1c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	e853 3f00 	ldrex	r3, [r3]
 8012af6:	60bb      	str	r3, [r7, #8]
   return(result);
 8012af8:	68bb      	ldr	r3, [r7, #8]
 8012afa:	f023 0310 	bic.w	r3, r3, #16
 8012afe:	647b      	str	r3, [r7, #68]	; 0x44
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	461a      	mov	r2, r3
 8012b06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012b08:	61bb      	str	r3, [r7, #24]
 8012b0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b0c:	6979      	ldr	r1, [r7, #20]
 8012b0e:	69ba      	ldr	r2, [r7, #24]
 8012b10:	e841 2300 	strex	r3, r2, [r1]
 8012b14:	613b      	str	r3, [r7, #16]
   return(result);
 8012b16:	693b      	ldr	r3, [r7, #16]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d1e6      	bne.n	8012aea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	2220      	movs	r2, #32
 8012b20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	2200      	movs	r2, #0
 8012b28:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	2200      	movs	r2, #0
 8012b2e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8012b30:	bf00      	nop
 8012b32:	3754      	adds	r7, #84	; 0x54
 8012b34:	46bd      	mov	sp, r7
 8012b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b3a:	4770      	bx	lr
 8012b3c:	effffffe 	.word	0xeffffffe

08012b40 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012b40:	b480      	push	{r7}
 8012b42:	b085      	sub	sp, #20
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012b4e:	2b01      	cmp	r3, #1
 8012b50:	d101      	bne.n	8012b56 <HAL_UARTEx_DisableFifoMode+0x16>
 8012b52:	2302      	movs	r3, #2
 8012b54:	e027      	b.n	8012ba6 <HAL_UARTEx_DisableFifoMode+0x66>
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	2201      	movs	r2, #1
 8012b5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	2224      	movs	r2, #36	; 0x24
 8012b62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	681a      	ldr	r2, [r3, #0]
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	f022 0201 	bic.w	r2, r2, #1
 8012b7c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012b84:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	2200      	movs	r2, #0
 8012b8a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	68fa      	ldr	r2, [r7, #12]
 8012b92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	2220      	movs	r2, #32
 8012b98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	2200      	movs	r2, #0
 8012ba0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012ba4:	2300      	movs	r3, #0
}
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	3714      	adds	r7, #20
 8012baa:	46bd      	mov	sp, r7
 8012bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bb0:	4770      	bx	lr

08012bb2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012bb2:	b580      	push	{r7, lr}
 8012bb4:	b084      	sub	sp, #16
 8012bb6:	af00      	add	r7, sp, #0
 8012bb8:	6078      	str	r0, [r7, #4]
 8012bba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012bc2:	2b01      	cmp	r3, #1
 8012bc4:	d101      	bne.n	8012bca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012bc6:	2302      	movs	r3, #2
 8012bc8:	e02d      	b.n	8012c26 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	2201      	movs	r2, #1
 8012bce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	2224      	movs	r2, #36	; 0x24
 8012bd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	681a      	ldr	r2, [r3, #0]
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	f022 0201 	bic.w	r2, r2, #1
 8012bf0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	689b      	ldr	r3, [r3, #8]
 8012bf8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	683a      	ldr	r2, [r7, #0]
 8012c02:	430a      	orrs	r2, r1
 8012c04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012c06:	6878      	ldr	r0, [r7, #4]
 8012c08:	f000 f850 	bl	8012cac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	68fa      	ldr	r2, [r7, #12]
 8012c12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	2220      	movs	r2, #32
 8012c18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	2200      	movs	r2, #0
 8012c20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012c24:	2300      	movs	r3, #0
}
 8012c26:	4618      	mov	r0, r3
 8012c28:	3710      	adds	r7, #16
 8012c2a:	46bd      	mov	sp, r7
 8012c2c:	bd80      	pop	{r7, pc}

08012c2e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012c2e:	b580      	push	{r7, lr}
 8012c30:	b084      	sub	sp, #16
 8012c32:	af00      	add	r7, sp, #0
 8012c34:	6078      	str	r0, [r7, #4]
 8012c36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012c3e:	2b01      	cmp	r3, #1
 8012c40:	d101      	bne.n	8012c46 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012c42:	2302      	movs	r3, #2
 8012c44:	e02d      	b.n	8012ca2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	2201      	movs	r2, #1
 8012c4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	2224      	movs	r2, #36	; 0x24
 8012c52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	681a      	ldr	r2, [r3, #0]
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	f022 0201 	bic.w	r2, r2, #1
 8012c6c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	689b      	ldr	r3, [r3, #8]
 8012c74:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	683a      	ldr	r2, [r7, #0]
 8012c7e:	430a      	orrs	r2, r1
 8012c80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012c82:	6878      	ldr	r0, [r7, #4]
 8012c84:	f000 f812 	bl	8012cac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	68fa      	ldr	r2, [r7, #12]
 8012c8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	2220      	movs	r2, #32
 8012c94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	2200      	movs	r2, #0
 8012c9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012ca0:	2300      	movs	r3, #0
}
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	3710      	adds	r7, #16
 8012ca6:	46bd      	mov	sp, r7
 8012ca8:	bd80      	pop	{r7, pc}
	...

08012cac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012cac:	b480      	push	{r7}
 8012cae:	b085      	sub	sp, #20
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d108      	bne.n	8012cce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	2201      	movs	r2, #1
 8012cc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	2201      	movs	r2, #1
 8012cc8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012ccc:	e031      	b.n	8012d32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012cce:	2310      	movs	r3, #16
 8012cd0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012cd2:	2310      	movs	r3, #16
 8012cd4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	689b      	ldr	r3, [r3, #8]
 8012cdc:	0e5b      	lsrs	r3, r3, #25
 8012cde:	b2db      	uxtb	r3, r3
 8012ce0:	f003 0307 	and.w	r3, r3, #7
 8012ce4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	689b      	ldr	r3, [r3, #8]
 8012cec:	0f5b      	lsrs	r3, r3, #29
 8012cee:	b2db      	uxtb	r3, r3
 8012cf0:	f003 0307 	and.w	r3, r3, #7
 8012cf4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012cf6:	7bbb      	ldrb	r3, [r7, #14]
 8012cf8:	7b3a      	ldrb	r2, [r7, #12]
 8012cfa:	4911      	ldr	r1, [pc, #68]	; (8012d40 <UARTEx_SetNbDataToProcess+0x94>)
 8012cfc:	5c8a      	ldrb	r2, [r1, r2]
 8012cfe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012d02:	7b3a      	ldrb	r2, [r7, #12]
 8012d04:	490f      	ldr	r1, [pc, #60]	; (8012d44 <UARTEx_SetNbDataToProcess+0x98>)
 8012d06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012d08:	fb93 f3f2 	sdiv	r3, r3, r2
 8012d0c:	b29a      	uxth	r2, r3
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012d14:	7bfb      	ldrb	r3, [r7, #15]
 8012d16:	7b7a      	ldrb	r2, [r7, #13]
 8012d18:	4909      	ldr	r1, [pc, #36]	; (8012d40 <UARTEx_SetNbDataToProcess+0x94>)
 8012d1a:	5c8a      	ldrb	r2, [r1, r2]
 8012d1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012d20:	7b7a      	ldrb	r2, [r7, #13]
 8012d22:	4908      	ldr	r1, [pc, #32]	; (8012d44 <UARTEx_SetNbDataToProcess+0x98>)
 8012d24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012d26:	fb93 f3f2 	sdiv	r3, r3, r2
 8012d2a:	b29a      	uxth	r2, r3
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012d32:	bf00      	nop
 8012d34:	3714      	adds	r7, #20
 8012d36:	46bd      	mov	sp, r7
 8012d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d3c:	4770      	bx	lr
 8012d3e:	bf00      	nop
 8012d40:	0801c834 	.word	0x0801c834
 8012d44:	0801c83c 	.word	0x0801c83c

08012d48 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8012d48:	b084      	sub	sp, #16
 8012d4a:	b480      	push	{r7}
 8012d4c:	b085      	sub	sp, #20
 8012d4e:	af00      	add	r7, sp, #0
 8012d50:	6078      	str	r0, [r7, #4]
 8012d52:	f107 001c 	add.w	r0, r7, #28
 8012d56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8012d5e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8012d60:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8012d62:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8012d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8012d66:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8012d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8012d6a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8012d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8012d6e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8012d70:	68fa      	ldr	r2, [r7, #12]
 8012d72:	4313      	orrs	r3, r2
 8012d74:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	685a      	ldr	r2, [r3, #4]
 8012d7a:	4b07      	ldr	r3, [pc, #28]	; (8012d98 <SDMMC_Init+0x50>)
 8012d7c:	4013      	ands	r3, r2
 8012d7e:	68fa      	ldr	r2, [r7, #12]
 8012d80:	431a      	orrs	r2, r3
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8012d86:	2300      	movs	r3, #0
}
 8012d88:	4618      	mov	r0, r3
 8012d8a:	3714      	adds	r7, #20
 8012d8c:	46bd      	mov	sp, r7
 8012d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d92:	b004      	add	sp, #16
 8012d94:	4770      	bx	lr
 8012d96:	bf00      	nop
 8012d98:	ffc02c00 	.word	0xffc02c00

08012d9c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8012d9c:	b480      	push	{r7}
 8012d9e:	b083      	sub	sp, #12
 8012da0:	af00      	add	r7, sp, #0
 8012da2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8012daa:	4618      	mov	r0, r3
 8012dac:	370c      	adds	r7, #12
 8012dae:	46bd      	mov	sp, r7
 8012db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012db4:	4770      	bx	lr

08012db6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8012db6:	b480      	push	{r7}
 8012db8:	b083      	sub	sp, #12
 8012dba:	af00      	add	r7, sp, #0
 8012dbc:	6078      	str	r0, [r7, #4]
 8012dbe:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8012dc0:	683b      	ldr	r3, [r7, #0]
 8012dc2:	681a      	ldr	r2, [r3, #0]
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8012dca:	2300      	movs	r3, #0
}
 8012dcc:	4618      	mov	r0, r3
 8012dce:	370c      	adds	r7, #12
 8012dd0:	46bd      	mov	sp, r7
 8012dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dd6:	4770      	bx	lr

08012dd8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8012dd8:	b480      	push	{r7}
 8012dda:	b083      	sub	sp, #12
 8012ddc:	af00      	add	r7, sp, #0
 8012dde:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	f043 0203 	orr.w	r2, r3, #3
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8012dec:	2300      	movs	r3, #0
}
 8012dee:	4618      	mov	r0, r3
 8012df0:	370c      	adds	r7, #12
 8012df2:	46bd      	mov	sp, r7
 8012df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df8:	4770      	bx	lr

08012dfa <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8012dfa:	b480      	push	{r7}
 8012dfc:	b083      	sub	sp, #12
 8012dfe:	af00      	add	r7, sp, #0
 8012e00:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	f003 0303 	and.w	r3, r3, #3
}
 8012e0a:	4618      	mov	r0, r3
 8012e0c:	370c      	adds	r7, #12
 8012e0e:	46bd      	mov	sp, r7
 8012e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e14:	4770      	bx	lr
	...

08012e18 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8012e18:	b480      	push	{r7}
 8012e1a:	b085      	sub	sp, #20
 8012e1c:	af00      	add	r7, sp, #0
 8012e1e:	6078      	str	r0, [r7, #4]
 8012e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012e22:	2300      	movs	r3, #0
 8012e24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8012e26:	683b      	ldr	r3, [r7, #0]
 8012e28:	681a      	ldr	r2, [r3, #0]
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012e2e:	683b      	ldr	r3, [r7, #0]
 8012e30:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8012e32:	683b      	ldr	r3, [r7, #0]
 8012e34:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012e36:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8012e38:	683b      	ldr	r3, [r7, #0]
 8012e3a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8012e3c:	431a      	orrs	r2, r3
                       Command->CPSM);
 8012e3e:	683b      	ldr	r3, [r7, #0]
 8012e40:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8012e42:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012e44:	68fa      	ldr	r2, [r7, #12]
 8012e46:	4313      	orrs	r3, r2
 8012e48:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	68da      	ldr	r2, [r3, #12]
 8012e4e:	4b06      	ldr	r3, [pc, #24]	; (8012e68 <SDMMC_SendCommand+0x50>)
 8012e50:	4013      	ands	r3, r2
 8012e52:	68fa      	ldr	r2, [r7, #12]
 8012e54:	431a      	orrs	r2, r3
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012e5a:	2300      	movs	r3, #0
}
 8012e5c:	4618      	mov	r0, r3
 8012e5e:	3714      	adds	r7, #20
 8012e60:	46bd      	mov	sp, r7
 8012e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e66:	4770      	bx	lr
 8012e68:	fffee0c0 	.word	0xfffee0c0

08012e6c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8012e6c:	b480      	push	{r7}
 8012e6e:	b083      	sub	sp, #12
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	691b      	ldr	r3, [r3, #16]
 8012e78:	b2db      	uxtb	r3, r3
}
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	370c      	adds	r7, #12
 8012e7e:	46bd      	mov	sp, r7
 8012e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e84:	4770      	bx	lr

08012e86 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8012e86:	b480      	push	{r7}
 8012e88:	b085      	sub	sp, #20
 8012e8a:	af00      	add	r7, sp, #0
 8012e8c:	6078      	str	r0, [r7, #4]
 8012e8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	3314      	adds	r3, #20
 8012e94:	461a      	mov	r2, r3
 8012e96:	683b      	ldr	r3, [r7, #0]
 8012e98:	4413      	add	r3, r2
 8012e9a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	681b      	ldr	r3, [r3, #0]
}
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	3714      	adds	r7, #20
 8012ea4:	46bd      	mov	sp, r7
 8012ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eaa:	4770      	bx	lr

08012eac <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8012eac:	b480      	push	{r7}
 8012eae:	b085      	sub	sp, #20
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	6078      	str	r0, [r7, #4]
 8012eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012eb6:	2300      	movs	r3, #0
 8012eb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8012eba:	683b      	ldr	r3, [r7, #0]
 8012ebc:	681a      	ldr	r2, [r3, #0]
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8012ec2:	683b      	ldr	r3, [r7, #0]
 8012ec4:	685a      	ldr	r2, [r3, #4]
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012eca:	683b      	ldr	r3, [r7, #0]
 8012ecc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8012ece:	683b      	ldr	r3, [r7, #0]
 8012ed0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012ed2:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8012ed4:	683b      	ldr	r3, [r7, #0]
 8012ed6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8012ed8:	431a      	orrs	r2, r3
                       Data->DPSM);
 8012eda:	683b      	ldr	r3, [r7, #0]
 8012edc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8012ede:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012ee0:	68fa      	ldr	r2, [r7, #12]
 8012ee2:	4313      	orrs	r3, r2
 8012ee4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012eea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	431a      	orrs	r2, r3
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8012ef6:	2300      	movs	r3, #0

}
 8012ef8:	4618      	mov	r0, r3
 8012efa:	3714      	adds	r7, #20
 8012efc:	46bd      	mov	sp, r7
 8012efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f02:	4770      	bx	lr

08012f04 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8012f04:	b580      	push	{r7, lr}
 8012f06:	b088      	sub	sp, #32
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	6078      	str	r0, [r7, #4]
 8012f0c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8012f0e:	683b      	ldr	r3, [r7, #0]
 8012f10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8012f12:	2310      	movs	r3, #16
 8012f14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012f16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012f1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012f1c:	2300      	movs	r3, #0
 8012f1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012f20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012f24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012f26:	f107 0308 	add.w	r3, r7, #8
 8012f2a:	4619      	mov	r1, r3
 8012f2c:	6878      	ldr	r0, [r7, #4]
 8012f2e:	f7ff ff73 	bl	8012e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8012f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8012f36:	2110      	movs	r1, #16
 8012f38:	6878      	ldr	r0, [r7, #4]
 8012f3a:	f000 fa5f 	bl	80133fc <SDMMC_GetCmdResp1>
 8012f3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012f40:	69fb      	ldr	r3, [r7, #28]
}
 8012f42:	4618      	mov	r0, r3
 8012f44:	3720      	adds	r7, #32
 8012f46:	46bd      	mov	sp, r7
 8012f48:	bd80      	pop	{r7, pc}

08012f4a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012f4a:	b580      	push	{r7, lr}
 8012f4c:	b088      	sub	sp, #32
 8012f4e:	af00      	add	r7, sp, #0
 8012f50:	6078      	str	r0, [r7, #4]
 8012f52:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012f54:	683b      	ldr	r3, [r7, #0]
 8012f56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8012f58:	2311      	movs	r3, #17
 8012f5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012f5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012f60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012f62:	2300      	movs	r3, #0
 8012f64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012f66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012f6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012f6c:	f107 0308 	add.w	r3, r7, #8
 8012f70:	4619      	mov	r1, r3
 8012f72:	6878      	ldr	r0, [r7, #4]
 8012f74:	f7ff ff50 	bl	8012e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8012f7c:	2111      	movs	r1, #17
 8012f7e:	6878      	ldr	r0, [r7, #4]
 8012f80:	f000 fa3c 	bl	80133fc <SDMMC_GetCmdResp1>
 8012f84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012f86:	69fb      	ldr	r3, [r7, #28]
}
 8012f88:	4618      	mov	r0, r3
 8012f8a:	3720      	adds	r7, #32
 8012f8c:	46bd      	mov	sp, r7
 8012f8e:	bd80      	pop	{r7, pc}

08012f90 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012f90:	b580      	push	{r7, lr}
 8012f92:	b088      	sub	sp, #32
 8012f94:	af00      	add	r7, sp, #0
 8012f96:	6078      	str	r0, [r7, #4]
 8012f98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012f9a:	683b      	ldr	r3, [r7, #0]
 8012f9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8012f9e:	2312      	movs	r3, #18
 8012fa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012fa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012fa6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012fa8:	2300      	movs	r3, #0
 8012faa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012fb0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012fb2:	f107 0308 	add.w	r3, r7, #8
 8012fb6:	4619      	mov	r1, r3
 8012fb8:	6878      	ldr	r0, [r7, #4]
 8012fba:	f7ff ff2d 	bl	8012e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8012fc2:	2112      	movs	r1, #18
 8012fc4:	6878      	ldr	r0, [r7, #4]
 8012fc6:	f000 fa19 	bl	80133fc <SDMMC_GetCmdResp1>
 8012fca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012fcc:	69fb      	ldr	r3, [r7, #28]
}
 8012fce:	4618      	mov	r0, r3
 8012fd0:	3720      	adds	r7, #32
 8012fd2:	46bd      	mov	sp, r7
 8012fd4:	bd80      	pop	{r7, pc}

08012fd6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012fd6:	b580      	push	{r7, lr}
 8012fd8:	b088      	sub	sp, #32
 8012fda:	af00      	add	r7, sp, #0
 8012fdc:	6078      	str	r0, [r7, #4]
 8012fde:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012fe0:	683b      	ldr	r3, [r7, #0]
 8012fe2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8012fe4:	2318      	movs	r3, #24
 8012fe6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012fe8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012fec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012fee:	2300      	movs	r3, #0
 8012ff0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012ff2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012ff6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012ff8:	f107 0308 	add.w	r3, r7, #8
 8012ffc:	4619      	mov	r1, r3
 8012ffe:	6878      	ldr	r0, [r7, #4]
 8013000:	f7ff ff0a 	bl	8012e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8013004:	f241 3288 	movw	r2, #5000	; 0x1388
 8013008:	2118      	movs	r1, #24
 801300a:	6878      	ldr	r0, [r7, #4]
 801300c:	f000 f9f6 	bl	80133fc <SDMMC_GetCmdResp1>
 8013010:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013012:	69fb      	ldr	r3, [r7, #28]
}
 8013014:	4618      	mov	r0, r3
 8013016:	3720      	adds	r7, #32
 8013018:	46bd      	mov	sp, r7
 801301a:	bd80      	pop	{r7, pc}

0801301c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801301c:	b580      	push	{r7, lr}
 801301e:	b088      	sub	sp, #32
 8013020:	af00      	add	r7, sp, #0
 8013022:	6078      	str	r0, [r7, #4]
 8013024:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8013026:	683b      	ldr	r3, [r7, #0]
 8013028:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801302a:	2319      	movs	r3, #25
 801302c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801302e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013032:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013034:	2300      	movs	r3, #0
 8013036:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801303c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801303e:	f107 0308 	add.w	r3, r7, #8
 8013042:	4619      	mov	r1, r3
 8013044:	6878      	ldr	r0, [r7, #4]
 8013046:	f7ff fee7 	bl	8012e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801304a:	f241 3288 	movw	r2, #5000	; 0x1388
 801304e:	2119      	movs	r1, #25
 8013050:	6878      	ldr	r0, [r7, #4]
 8013052:	f000 f9d3 	bl	80133fc <SDMMC_GetCmdResp1>
 8013056:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013058:	69fb      	ldr	r3, [r7, #28]
}
 801305a:	4618      	mov	r0, r3
 801305c:	3720      	adds	r7, #32
 801305e:	46bd      	mov	sp, r7
 8013060:	bd80      	pop	{r7, pc}
	...

08013064 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8013064:	b580      	push	{r7, lr}
 8013066:	b088      	sub	sp, #32
 8013068:	af00      	add	r7, sp, #0
 801306a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 801306c:	2300      	movs	r3, #0
 801306e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8013070:	230c      	movs	r3, #12
 8013072:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013074:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013078:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801307a:	2300      	movs	r3, #0
 801307c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801307e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013082:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	68db      	ldr	r3, [r3, #12]
 8013088:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	68db      	ldr	r3, [r3, #12]
 8013094:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801309c:	f107 0308 	add.w	r3, r7, #8
 80130a0:	4619      	mov	r1, r3
 80130a2:	6878      	ldr	r0, [r7, #4]
 80130a4:	f7ff feb8 	bl	8012e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80130a8:	4a0b      	ldr	r2, [pc, #44]	; (80130d8 <SDMMC_CmdStopTransfer+0x74>)
 80130aa:	210c      	movs	r1, #12
 80130ac:	6878      	ldr	r0, [r7, #4]
 80130ae:	f000 f9a5 	bl	80133fc <SDMMC_GetCmdResp1>
 80130b2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	68db      	ldr	r3, [r3, #12]
 80130b8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80130c0:	69fb      	ldr	r3, [r7, #28]
 80130c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80130c6:	d101      	bne.n	80130cc <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80130c8:	2300      	movs	r3, #0
 80130ca:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80130cc:	69fb      	ldr	r3, [r7, #28]
}
 80130ce:	4618      	mov	r0, r3
 80130d0:	3720      	adds	r7, #32
 80130d2:	46bd      	mov	sp, r7
 80130d4:	bd80      	pop	{r7, pc}
 80130d6:	bf00      	nop
 80130d8:	05f5e100 	.word	0x05f5e100

080130dc <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80130dc:	b580      	push	{r7, lr}
 80130de:	b088      	sub	sp, #32
 80130e0:	af00      	add	r7, sp, #0
 80130e2:	6078      	str	r0, [r7, #4]
 80130e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80130e6:	683b      	ldr	r3, [r7, #0]
 80130e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80130ea:	2307      	movs	r3, #7
 80130ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80130ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80130f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80130f4:	2300      	movs	r3, #0
 80130f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80130f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80130fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80130fe:	f107 0308 	add.w	r3, r7, #8
 8013102:	4619      	mov	r1, r3
 8013104:	6878      	ldr	r0, [r7, #4]
 8013106:	f7ff fe87 	bl	8012e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 801310a:	f241 3288 	movw	r2, #5000	; 0x1388
 801310e:	2107      	movs	r1, #7
 8013110:	6878      	ldr	r0, [r7, #4]
 8013112:	f000 f973 	bl	80133fc <SDMMC_GetCmdResp1>
 8013116:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013118:	69fb      	ldr	r3, [r7, #28]
}
 801311a:	4618      	mov	r0, r3
 801311c:	3720      	adds	r7, #32
 801311e:	46bd      	mov	sp, r7
 8013120:	bd80      	pop	{r7, pc}

08013122 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8013122:	b580      	push	{r7, lr}
 8013124:	b088      	sub	sp, #32
 8013126:	af00      	add	r7, sp, #0
 8013128:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801312a:	2300      	movs	r3, #0
 801312c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801312e:	2300      	movs	r3, #0
 8013130:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8013132:	2300      	movs	r3, #0
 8013134:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013136:	2300      	movs	r3, #0
 8013138:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801313a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801313e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013140:	f107 0308 	add.w	r3, r7, #8
 8013144:	4619      	mov	r1, r3
 8013146:	6878      	ldr	r0, [r7, #4]
 8013148:	f7ff fe66 	bl	8012e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 801314c:	6878      	ldr	r0, [r7, #4]
 801314e:	f000 fb97 	bl	8013880 <SDMMC_GetCmdError>
 8013152:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013154:	69fb      	ldr	r3, [r7, #28]
}
 8013156:	4618      	mov	r0, r3
 8013158:	3720      	adds	r7, #32
 801315a:	46bd      	mov	sp, r7
 801315c:	bd80      	pop	{r7, pc}

0801315e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801315e:	b580      	push	{r7, lr}
 8013160:	b088      	sub	sp, #32
 8013162:	af00      	add	r7, sp, #0
 8013164:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8013166:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801316a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 801316c:	2308      	movs	r3, #8
 801316e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013170:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013174:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013176:	2300      	movs	r3, #0
 8013178:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801317a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801317e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013180:	f107 0308 	add.w	r3, r7, #8
 8013184:	4619      	mov	r1, r3
 8013186:	6878      	ldr	r0, [r7, #4]
 8013188:	f7ff fe46 	bl	8012e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 801318c:	6878      	ldr	r0, [r7, #4]
 801318e:	f000 fb29 	bl	80137e4 <SDMMC_GetCmdResp7>
 8013192:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013194:	69fb      	ldr	r3, [r7, #28]
}
 8013196:	4618      	mov	r0, r3
 8013198:	3720      	adds	r7, #32
 801319a:	46bd      	mov	sp, r7
 801319c:	bd80      	pop	{r7, pc}

0801319e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801319e:	b580      	push	{r7, lr}
 80131a0:	b088      	sub	sp, #32
 80131a2:	af00      	add	r7, sp, #0
 80131a4:	6078      	str	r0, [r7, #4]
 80131a6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80131a8:	683b      	ldr	r3, [r7, #0]
 80131aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80131ac:	2337      	movs	r3, #55	; 0x37
 80131ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80131b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80131b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80131b6:	2300      	movs	r3, #0
 80131b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80131ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80131be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80131c0:	f107 0308 	add.w	r3, r7, #8
 80131c4:	4619      	mov	r1, r3
 80131c6:	6878      	ldr	r0, [r7, #4]
 80131c8:	f7ff fe26 	bl	8012e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80131cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80131d0:	2137      	movs	r1, #55	; 0x37
 80131d2:	6878      	ldr	r0, [r7, #4]
 80131d4:	f000 f912 	bl	80133fc <SDMMC_GetCmdResp1>
 80131d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80131da:	69fb      	ldr	r3, [r7, #28]
}
 80131dc:	4618      	mov	r0, r3
 80131de:	3720      	adds	r7, #32
 80131e0:	46bd      	mov	sp, r7
 80131e2:	bd80      	pop	{r7, pc}

080131e4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80131e4:	b580      	push	{r7, lr}
 80131e6:	b088      	sub	sp, #32
 80131e8:	af00      	add	r7, sp, #0
 80131ea:	6078      	str	r0, [r7, #4]
 80131ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80131ee:	683b      	ldr	r3, [r7, #0]
 80131f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80131f2:	2329      	movs	r3, #41	; 0x29
 80131f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80131f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80131fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80131fc:	2300      	movs	r3, #0
 80131fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013200:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013204:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013206:	f107 0308 	add.w	r3, r7, #8
 801320a:	4619      	mov	r1, r3
 801320c:	6878      	ldr	r0, [r7, #4]
 801320e:	f7ff fe03 	bl	8012e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8013212:	6878      	ldr	r0, [r7, #4]
 8013214:	f000 fa2e 	bl	8013674 <SDMMC_GetCmdResp3>
 8013218:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801321a:	69fb      	ldr	r3, [r7, #28]
}
 801321c:	4618      	mov	r0, r3
 801321e:	3720      	adds	r7, #32
 8013220:	46bd      	mov	sp, r7
 8013222:	bd80      	pop	{r7, pc}

08013224 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8013224:	b580      	push	{r7, lr}
 8013226:	b088      	sub	sp, #32
 8013228:	af00      	add	r7, sp, #0
 801322a:	6078      	str	r0, [r7, #4]
 801322c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801322e:	683b      	ldr	r3, [r7, #0]
 8013230:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8013232:	2306      	movs	r3, #6
 8013234:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013236:	f44f 7380 	mov.w	r3, #256	; 0x100
 801323a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801323c:	2300      	movs	r3, #0
 801323e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013240:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013244:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013246:	f107 0308 	add.w	r3, r7, #8
 801324a:	4619      	mov	r1, r3
 801324c:	6878      	ldr	r0, [r7, #4]
 801324e:	f7ff fde3 	bl	8012e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8013252:	f241 3288 	movw	r2, #5000	; 0x1388
 8013256:	2106      	movs	r1, #6
 8013258:	6878      	ldr	r0, [r7, #4]
 801325a:	f000 f8cf 	bl	80133fc <SDMMC_GetCmdResp1>
 801325e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013260:	69fb      	ldr	r3, [r7, #28]
}
 8013262:	4618      	mov	r0, r3
 8013264:	3720      	adds	r7, #32
 8013266:	46bd      	mov	sp, r7
 8013268:	bd80      	pop	{r7, pc}

0801326a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801326a:	b580      	push	{r7, lr}
 801326c:	b088      	sub	sp, #32
 801326e:	af00      	add	r7, sp, #0
 8013270:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8013272:	2300      	movs	r3, #0
 8013274:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8013276:	2333      	movs	r3, #51	; 0x33
 8013278:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801327a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801327e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013280:	2300      	movs	r3, #0
 8013282:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013284:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013288:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801328a:	f107 0308 	add.w	r3, r7, #8
 801328e:	4619      	mov	r1, r3
 8013290:	6878      	ldr	r0, [r7, #4]
 8013292:	f7ff fdc1 	bl	8012e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8013296:	f241 3288 	movw	r2, #5000	; 0x1388
 801329a:	2133      	movs	r1, #51	; 0x33
 801329c:	6878      	ldr	r0, [r7, #4]
 801329e:	f000 f8ad 	bl	80133fc <SDMMC_GetCmdResp1>
 80132a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80132a4:	69fb      	ldr	r3, [r7, #28]
}
 80132a6:	4618      	mov	r0, r3
 80132a8:	3720      	adds	r7, #32
 80132aa:	46bd      	mov	sp, r7
 80132ac:	bd80      	pop	{r7, pc}

080132ae <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80132ae:	b580      	push	{r7, lr}
 80132b0:	b088      	sub	sp, #32
 80132b2:	af00      	add	r7, sp, #0
 80132b4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80132b6:	2300      	movs	r3, #0
 80132b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80132ba:	2302      	movs	r3, #2
 80132bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80132be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80132c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80132c4:	2300      	movs	r3, #0
 80132c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80132c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80132cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80132ce:	f107 0308 	add.w	r3, r7, #8
 80132d2:	4619      	mov	r1, r3
 80132d4:	6878      	ldr	r0, [r7, #4]
 80132d6:	f7ff fd9f 	bl	8012e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80132da:	6878      	ldr	r0, [r7, #4]
 80132dc:	f000 f980 	bl	80135e0 <SDMMC_GetCmdResp2>
 80132e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80132e2:	69fb      	ldr	r3, [r7, #28]
}
 80132e4:	4618      	mov	r0, r3
 80132e6:	3720      	adds	r7, #32
 80132e8:	46bd      	mov	sp, r7
 80132ea:	bd80      	pop	{r7, pc}

080132ec <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80132ec:	b580      	push	{r7, lr}
 80132ee:	b088      	sub	sp, #32
 80132f0:	af00      	add	r7, sp, #0
 80132f2:	6078      	str	r0, [r7, #4]
 80132f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80132f6:	683b      	ldr	r3, [r7, #0]
 80132f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80132fa:	2309      	movs	r3, #9
 80132fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80132fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8013302:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013304:	2300      	movs	r3, #0
 8013306:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801330c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801330e:	f107 0308 	add.w	r3, r7, #8
 8013312:	4619      	mov	r1, r3
 8013314:	6878      	ldr	r0, [r7, #4]
 8013316:	f7ff fd7f 	bl	8012e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801331a:	6878      	ldr	r0, [r7, #4]
 801331c:	f000 f960 	bl	80135e0 <SDMMC_GetCmdResp2>
 8013320:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013322:	69fb      	ldr	r3, [r7, #28]
}
 8013324:	4618      	mov	r0, r3
 8013326:	3720      	adds	r7, #32
 8013328:	46bd      	mov	sp, r7
 801332a:	bd80      	pop	{r7, pc}

0801332c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 801332c:	b580      	push	{r7, lr}
 801332e:	b088      	sub	sp, #32
 8013330:	af00      	add	r7, sp, #0
 8013332:	6078      	str	r0, [r7, #4]
 8013334:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8013336:	2300      	movs	r3, #0
 8013338:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801333a:	2303      	movs	r3, #3
 801333c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801333e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013342:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013344:	2300      	movs	r3, #0
 8013346:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801334c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801334e:	f107 0308 	add.w	r3, r7, #8
 8013352:	4619      	mov	r1, r3
 8013354:	6878      	ldr	r0, [r7, #4]
 8013356:	f7ff fd5f 	bl	8012e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801335a:	683a      	ldr	r2, [r7, #0]
 801335c:	2103      	movs	r1, #3
 801335e:	6878      	ldr	r0, [r7, #4]
 8013360:	f000 f9c8 	bl	80136f4 <SDMMC_GetCmdResp6>
 8013364:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013366:	69fb      	ldr	r3, [r7, #28]
}
 8013368:	4618      	mov	r0, r3
 801336a:	3720      	adds	r7, #32
 801336c:	46bd      	mov	sp, r7
 801336e:	bd80      	pop	{r7, pc}

08013370 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013370:	b580      	push	{r7, lr}
 8013372:	b088      	sub	sp, #32
 8013374:	af00      	add	r7, sp, #0
 8013376:	6078      	str	r0, [r7, #4]
 8013378:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801337a:	683b      	ldr	r3, [r7, #0]
 801337c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801337e:	230d      	movs	r3, #13
 8013380:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013382:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013386:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013388:	2300      	movs	r3, #0
 801338a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801338c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013390:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013392:	f107 0308 	add.w	r3, r7, #8
 8013396:	4619      	mov	r1, r3
 8013398:	6878      	ldr	r0, [r7, #4]
 801339a:	f7ff fd3d 	bl	8012e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801339e:	f241 3288 	movw	r2, #5000	; 0x1388
 80133a2:	210d      	movs	r1, #13
 80133a4:	6878      	ldr	r0, [r7, #4]
 80133a6:	f000 f829 	bl	80133fc <SDMMC_GetCmdResp1>
 80133aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80133ac:	69fb      	ldr	r3, [r7, #28]
}
 80133ae:	4618      	mov	r0, r3
 80133b0:	3720      	adds	r7, #32
 80133b2:	46bd      	mov	sp, r7
 80133b4:	bd80      	pop	{r7, pc}

080133b6 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80133b6:	b580      	push	{r7, lr}
 80133b8:	b088      	sub	sp, #32
 80133ba:	af00      	add	r7, sp, #0
 80133bc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80133be:	2300      	movs	r3, #0
 80133c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80133c2:	230d      	movs	r3, #13
 80133c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80133c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80133ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80133cc:	2300      	movs	r3, #0
 80133ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80133d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80133d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80133d6:	f107 0308 	add.w	r3, r7, #8
 80133da:	4619      	mov	r1, r3
 80133dc:	6878      	ldr	r0, [r7, #4]
 80133de:	f7ff fd1b 	bl	8012e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80133e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80133e6:	210d      	movs	r1, #13
 80133e8:	6878      	ldr	r0, [r7, #4]
 80133ea:	f000 f807 	bl	80133fc <SDMMC_GetCmdResp1>
 80133ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80133f0:	69fb      	ldr	r3, [r7, #28]
}
 80133f2:	4618      	mov	r0, r3
 80133f4:	3720      	adds	r7, #32
 80133f6:	46bd      	mov	sp, r7
 80133f8:	bd80      	pop	{r7, pc}
	...

080133fc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80133fc:	b580      	push	{r7, lr}
 80133fe:	b088      	sub	sp, #32
 8013400:	af00      	add	r7, sp, #0
 8013402:	60f8      	str	r0, [r7, #12]
 8013404:	460b      	mov	r3, r1
 8013406:	607a      	str	r2, [r7, #4]
 8013408:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801340a:	4b70      	ldr	r3, [pc, #448]	; (80135cc <SDMMC_GetCmdResp1+0x1d0>)
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	4a70      	ldr	r2, [pc, #448]	; (80135d0 <SDMMC_GetCmdResp1+0x1d4>)
 8013410:	fba2 2303 	umull	r2, r3, r2, r3
 8013414:	0a5a      	lsrs	r2, r3, #9
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	fb02 f303 	mul.w	r3, r2, r3
 801341c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801341e:	69fb      	ldr	r3, [r7, #28]
 8013420:	1e5a      	subs	r2, r3, #1
 8013422:	61fa      	str	r2, [r7, #28]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d102      	bne.n	801342e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013428:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801342c:	e0c9      	b.n	80135c2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013432:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8013434:	69ba      	ldr	r2, [r7, #24]
 8013436:	4b67      	ldr	r3, [pc, #412]	; (80135d4 <SDMMC_GetCmdResp1+0x1d8>)
 8013438:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801343a:	2b00      	cmp	r3, #0
 801343c:	d0ef      	beq.n	801341e <SDMMC_GetCmdResp1+0x22>
 801343e:	69bb      	ldr	r3, [r7, #24]
 8013440:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013444:	2b00      	cmp	r3, #0
 8013446:	d1ea      	bne.n	801341e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801344c:	f003 0304 	and.w	r3, r3, #4
 8013450:	2b00      	cmp	r3, #0
 8013452:	d004      	beq.n	801345e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013454:	68fb      	ldr	r3, [r7, #12]
 8013456:	2204      	movs	r2, #4
 8013458:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801345a:	2304      	movs	r3, #4
 801345c:	e0b1      	b.n	80135c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013462:	f003 0301 	and.w	r3, r3, #1
 8013466:	2b00      	cmp	r3, #0
 8013468:	d004      	beq.n	8013474 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	2201      	movs	r2, #1
 801346e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013470:	2301      	movs	r3, #1
 8013472:	e0a6      	b.n	80135c2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	4a58      	ldr	r2, [pc, #352]	; (80135d8 <SDMMC_GetCmdResp1+0x1dc>)
 8013478:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801347a:	68f8      	ldr	r0, [r7, #12]
 801347c:	f7ff fcf6 	bl	8012e6c <SDMMC_GetCommandResponse>
 8013480:	4603      	mov	r3, r0
 8013482:	461a      	mov	r2, r3
 8013484:	7afb      	ldrb	r3, [r7, #11]
 8013486:	4293      	cmp	r3, r2
 8013488:	d001      	beq.n	801348e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801348a:	2301      	movs	r3, #1
 801348c:	e099      	b.n	80135c2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801348e:	2100      	movs	r1, #0
 8013490:	68f8      	ldr	r0, [r7, #12]
 8013492:	f7ff fcf8 	bl	8012e86 <SDMMC_GetResponse>
 8013496:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8013498:	697a      	ldr	r2, [r7, #20]
 801349a:	4b50      	ldr	r3, [pc, #320]	; (80135dc <SDMMC_GetCmdResp1+0x1e0>)
 801349c:	4013      	ands	r3, r2
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d101      	bne.n	80134a6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80134a2:	2300      	movs	r3, #0
 80134a4:	e08d      	b.n	80135c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80134a6:	697b      	ldr	r3, [r7, #20]
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	da02      	bge.n	80134b2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80134ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80134b0:	e087      	b.n	80135c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80134b2:	697b      	ldr	r3, [r7, #20]
 80134b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d001      	beq.n	80134c0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80134bc:	2340      	movs	r3, #64	; 0x40
 80134be:	e080      	b.n	80135c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80134c0:	697b      	ldr	r3, [r7, #20]
 80134c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d001      	beq.n	80134ce <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80134ca:	2380      	movs	r3, #128	; 0x80
 80134cc:	e079      	b.n	80135c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80134ce:	697b      	ldr	r3, [r7, #20]
 80134d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d002      	beq.n	80134de <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80134d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80134dc:	e071      	b.n	80135c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80134de:	697b      	ldr	r3, [r7, #20]
 80134e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d002      	beq.n	80134ee <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80134e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80134ec:	e069      	b.n	80135c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80134ee:	697b      	ldr	r3, [r7, #20]
 80134f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d002      	beq.n	80134fe <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80134f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80134fc:	e061      	b.n	80135c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80134fe:	697b      	ldr	r3, [r7, #20]
 8013500:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013504:	2b00      	cmp	r3, #0
 8013506:	d002      	beq.n	801350e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8013508:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801350c:	e059      	b.n	80135c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801350e:	697b      	ldr	r3, [r7, #20]
 8013510:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013514:	2b00      	cmp	r3, #0
 8013516:	d002      	beq.n	801351e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801351c:	e051      	b.n	80135c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801351e:	697b      	ldr	r3, [r7, #20]
 8013520:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013524:	2b00      	cmp	r3, #0
 8013526:	d002      	beq.n	801352e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013528:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801352c:	e049      	b.n	80135c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801352e:	697b      	ldr	r3, [r7, #20]
 8013530:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013534:	2b00      	cmp	r3, #0
 8013536:	d002      	beq.n	801353e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8013538:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801353c:	e041      	b.n	80135c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801353e:	697b      	ldr	r3, [r7, #20]
 8013540:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013544:	2b00      	cmp	r3, #0
 8013546:	d002      	beq.n	801354e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8013548:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801354c:	e039      	b.n	80135c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801354e:	697b      	ldr	r3, [r7, #20]
 8013550:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8013554:	2b00      	cmp	r3, #0
 8013556:	d002      	beq.n	801355e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8013558:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801355c:	e031      	b.n	80135c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801355e:	697b      	ldr	r3, [r7, #20]
 8013560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013564:	2b00      	cmp	r3, #0
 8013566:	d002      	beq.n	801356e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8013568:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801356c:	e029      	b.n	80135c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801356e:	697b      	ldr	r3, [r7, #20]
 8013570:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013574:	2b00      	cmp	r3, #0
 8013576:	d002      	beq.n	801357e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8013578:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801357c:	e021      	b.n	80135c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801357e:	697b      	ldr	r3, [r7, #20]
 8013580:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013584:	2b00      	cmp	r3, #0
 8013586:	d002      	beq.n	801358e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8013588:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801358c:	e019      	b.n	80135c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801358e:	697b      	ldr	r3, [r7, #20]
 8013590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013594:	2b00      	cmp	r3, #0
 8013596:	d002      	beq.n	801359e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8013598:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801359c:	e011      	b.n	80135c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801359e:	697b      	ldr	r3, [r7, #20]
 80135a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d002      	beq.n	80135ae <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80135a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80135ac:	e009      	b.n	80135c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80135ae:	697b      	ldr	r3, [r7, #20]
 80135b0:	f003 0308 	and.w	r3, r3, #8
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d002      	beq.n	80135be <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80135b8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80135bc:	e001      	b.n	80135c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80135be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80135c2:	4618      	mov	r0, r3
 80135c4:	3720      	adds	r7, #32
 80135c6:	46bd      	mov	sp, r7
 80135c8:	bd80      	pop	{r7, pc}
 80135ca:	bf00      	nop
 80135cc:	2400002c 	.word	0x2400002c
 80135d0:	10624dd3 	.word	0x10624dd3
 80135d4:	00200045 	.word	0x00200045
 80135d8:	002000c5 	.word	0x002000c5
 80135dc:	fdffe008 	.word	0xfdffe008

080135e0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80135e0:	b480      	push	{r7}
 80135e2:	b085      	sub	sp, #20
 80135e4:	af00      	add	r7, sp, #0
 80135e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80135e8:	4b1f      	ldr	r3, [pc, #124]	; (8013668 <SDMMC_GetCmdResp2+0x88>)
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	4a1f      	ldr	r2, [pc, #124]	; (801366c <SDMMC_GetCmdResp2+0x8c>)
 80135ee:	fba2 2303 	umull	r2, r3, r2, r3
 80135f2:	0a5b      	lsrs	r3, r3, #9
 80135f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80135f8:	fb02 f303 	mul.w	r3, r2, r3
 80135fc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	1e5a      	subs	r2, r3, #1
 8013602:	60fa      	str	r2, [r7, #12]
 8013604:	2b00      	cmp	r3, #0
 8013606:	d102      	bne.n	801360e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013608:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801360c:	e026      	b.n	801365c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013612:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013614:	68bb      	ldr	r3, [r7, #8]
 8013616:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801361a:	2b00      	cmp	r3, #0
 801361c:	d0ef      	beq.n	80135fe <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801361e:	68bb      	ldr	r3, [r7, #8]
 8013620:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013624:	2b00      	cmp	r3, #0
 8013626:	d1ea      	bne.n	80135fe <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801362c:	f003 0304 	and.w	r3, r3, #4
 8013630:	2b00      	cmp	r3, #0
 8013632:	d004      	beq.n	801363e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	2204      	movs	r2, #4
 8013638:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801363a:	2304      	movs	r3, #4
 801363c:	e00e      	b.n	801365c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013642:	f003 0301 	and.w	r3, r3, #1
 8013646:	2b00      	cmp	r3, #0
 8013648:	d004      	beq.n	8013654 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	2201      	movs	r2, #1
 801364e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013650:	2301      	movs	r3, #1
 8013652:	e003      	b.n	801365c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	4a06      	ldr	r2, [pc, #24]	; (8013670 <SDMMC_GetCmdResp2+0x90>)
 8013658:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801365a:	2300      	movs	r3, #0
}
 801365c:	4618      	mov	r0, r3
 801365e:	3714      	adds	r7, #20
 8013660:	46bd      	mov	sp, r7
 8013662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013666:	4770      	bx	lr
 8013668:	2400002c 	.word	0x2400002c
 801366c:	10624dd3 	.word	0x10624dd3
 8013670:	002000c5 	.word	0x002000c5

08013674 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8013674:	b480      	push	{r7}
 8013676:	b085      	sub	sp, #20
 8013678:	af00      	add	r7, sp, #0
 801367a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801367c:	4b1a      	ldr	r3, [pc, #104]	; (80136e8 <SDMMC_GetCmdResp3+0x74>)
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	4a1a      	ldr	r2, [pc, #104]	; (80136ec <SDMMC_GetCmdResp3+0x78>)
 8013682:	fba2 2303 	umull	r2, r3, r2, r3
 8013686:	0a5b      	lsrs	r3, r3, #9
 8013688:	f241 3288 	movw	r2, #5000	; 0x1388
 801368c:	fb02 f303 	mul.w	r3, r2, r3
 8013690:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	1e5a      	subs	r2, r3, #1
 8013696:	60fa      	str	r2, [r7, #12]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d102      	bne.n	80136a2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801369c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80136a0:	e01b      	b.n	80136da <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80136a6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80136a8:	68bb      	ldr	r3, [r7, #8]
 80136aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d0ef      	beq.n	8013692 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80136b2:	68bb      	ldr	r3, [r7, #8]
 80136b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d1ea      	bne.n	8013692 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80136c0:	f003 0304 	and.w	r3, r3, #4
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d004      	beq.n	80136d2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	2204      	movs	r2, #4
 80136cc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80136ce:	2304      	movs	r3, #4
 80136d0:	e003      	b.n	80136da <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	4a06      	ldr	r2, [pc, #24]	; (80136f0 <SDMMC_GetCmdResp3+0x7c>)
 80136d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80136d8:	2300      	movs	r3, #0
}
 80136da:	4618      	mov	r0, r3
 80136dc:	3714      	adds	r7, #20
 80136de:	46bd      	mov	sp, r7
 80136e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136e4:	4770      	bx	lr
 80136e6:	bf00      	nop
 80136e8:	2400002c 	.word	0x2400002c
 80136ec:	10624dd3 	.word	0x10624dd3
 80136f0:	002000c5 	.word	0x002000c5

080136f4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80136f4:	b580      	push	{r7, lr}
 80136f6:	b088      	sub	sp, #32
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	60f8      	str	r0, [r7, #12]
 80136fc:	460b      	mov	r3, r1
 80136fe:	607a      	str	r2, [r7, #4]
 8013700:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013702:	4b35      	ldr	r3, [pc, #212]	; (80137d8 <SDMMC_GetCmdResp6+0xe4>)
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	4a35      	ldr	r2, [pc, #212]	; (80137dc <SDMMC_GetCmdResp6+0xe8>)
 8013708:	fba2 2303 	umull	r2, r3, r2, r3
 801370c:	0a5b      	lsrs	r3, r3, #9
 801370e:	f241 3288 	movw	r2, #5000	; 0x1388
 8013712:	fb02 f303 	mul.w	r3, r2, r3
 8013716:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8013718:	69fb      	ldr	r3, [r7, #28]
 801371a:	1e5a      	subs	r2, r3, #1
 801371c:	61fa      	str	r2, [r7, #28]
 801371e:	2b00      	cmp	r3, #0
 8013720:	d102      	bne.n	8013728 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013722:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013726:	e052      	b.n	80137ce <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8013728:	68fb      	ldr	r3, [r7, #12]
 801372a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801372c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801372e:	69bb      	ldr	r3, [r7, #24]
 8013730:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8013734:	2b00      	cmp	r3, #0
 8013736:	d0ef      	beq.n	8013718 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013738:	69bb      	ldr	r3, [r7, #24]
 801373a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801373e:	2b00      	cmp	r3, #0
 8013740:	d1ea      	bne.n	8013718 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013746:	f003 0304 	and.w	r3, r3, #4
 801374a:	2b00      	cmp	r3, #0
 801374c:	d004      	beq.n	8013758 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	2204      	movs	r2, #4
 8013752:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013754:	2304      	movs	r3, #4
 8013756:	e03a      	b.n	80137ce <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801375c:	f003 0301 	and.w	r3, r3, #1
 8013760:	2b00      	cmp	r3, #0
 8013762:	d004      	beq.n	801376e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	2201      	movs	r2, #1
 8013768:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801376a:	2301      	movs	r3, #1
 801376c:	e02f      	b.n	80137ce <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801376e:	68f8      	ldr	r0, [r7, #12]
 8013770:	f7ff fb7c 	bl	8012e6c <SDMMC_GetCommandResponse>
 8013774:	4603      	mov	r3, r0
 8013776:	461a      	mov	r2, r3
 8013778:	7afb      	ldrb	r3, [r7, #11]
 801377a:	4293      	cmp	r3, r2
 801377c:	d001      	beq.n	8013782 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801377e:	2301      	movs	r3, #1
 8013780:	e025      	b.n	80137ce <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	4a16      	ldr	r2, [pc, #88]	; (80137e0 <SDMMC_GetCmdResp6+0xec>)
 8013786:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8013788:	2100      	movs	r1, #0
 801378a:	68f8      	ldr	r0, [r7, #12]
 801378c:	f7ff fb7b 	bl	8012e86 <SDMMC_GetResponse>
 8013790:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8013792:	697b      	ldr	r3, [r7, #20]
 8013794:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8013798:	2b00      	cmp	r3, #0
 801379a:	d106      	bne.n	80137aa <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 801379c:	697b      	ldr	r3, [r7, #20]
 801379e:	0c1b      	lsrs	r3, r3, #16
 80137a0:	b29a      	uxth	r2, r3
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80137a6:	2300      	movs	r3, #0
 80137a8:	e011      	b.n	80137ce <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80137aa:	697b      	ldr	r3, [r7, #20]
 80137ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d002      	beq.n	80137ba <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80137b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80137b8:	e009      	b.n	80137ce <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80137ba:	697b      	ldr	r3, [r7, #20]
 80137bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d002      	beq.n	80137ca <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80137c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80137c8:	e001      	b.n	80137ce <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80137ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80137ce:	4618      	mov	r0, r3
 80137d0:	3720      	adds	r7, #32
 80137d2:	46bd      	mov	sp, r7
 80137d4:	bd80      	pop	{r7, pc}
 80137d6:	bf00      	nop
 80137d8:	2400002c 	.word	0x2400002c
 80137dc:	10624dd3 	.word	0x10624dd3
 80137e0:	002000c5 	.word	0x002000c5

080137e4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80137e4:	b480      	push	{r7}
 80137e6:	b085      	sub	sp, #20
 80137e8:	af00      	add	r7, sp, #0
 80137ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80137ec:	4b22      	ldr	r3, [pc, #136]	; (8013878 <SDMMC_GetCmdResp7+0x94>)
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	4a22      	ldr	r2, [pc, #136]	; (801387c <SDMMC_GetCmdResp7+0x98>)
 80137f2:	fba2 2303 	umull	r2, r3, r2, r3
 80137f6:	0a5b      	lsrs	r3, r3, #9
 80137f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80137fc:	fb02 f303 	mul.w	r3, r2, r3
 8013800:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	1e5a      	subs	r2, r3, #1
 8013806:	60fa      	str	r2, [r7, #12]
 8013808:	2b00      	cmp	r3, #0
 801380a:	d102      	bne.n	8013812 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801380c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013810:	e02c      	b.n	801386c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013816:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013818:	68bb      	ldr	r3, [r7, #8]
 801381a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801381e:	2b00      	cmp	r3, #0
 8013820:	d0ef      	beq.n	8013802 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013822:	68bb      	ldr	r3, [r7, #8]
 8013824:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013828:	2b00      	cmp	r3, #0
 801382a:	d1ea      	bne.n	8013802 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013830:	f003 0304 	and.w	r3, r3, #4
 8013834:	2b00      	cmp	r3, #0
 8013836:	d004      	beq.n	8013842 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	2204      	movs	r2, #4
 801383c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801383e:	2304      	movs	r3, #4
 8013840:	e014      	b.n	801386c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013846:	f003 0301 	and.w	r3, r3, #1
 801384a:	2b00      	cmp	r3, #0
 801384c:	d004      	beq.n	8013858 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	2201      	movs	r2, #1
 8013852:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013854:	2301      	movs	r3, #1
 8013856:	e009      	b.n	801386c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801385c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013860:	2b00      	cmp	r3, #0
 8013862:	d002      	beq.n	801386a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	2240      	movs	r2, #64	; 0x40
 8013868:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801386a:	2300      	movs	r3, #0

}
 801386c:	4618      	mov	r0, r3
 801386e:	3714      	adds	r7, #20
 8013870:	46bd      	mov	sp, r7
 8013872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013876:	4770      	bx	lr
 8013878:	2400002c 	.word	0x2400002c
 801387c:	10624dd3 	.word	0x10624dd3

08013880 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8013880:	b480      	push	{r7}
 8013882:	b085      	sub	sp, #20
 8013884:	af00      	add	r7, sp, #0
 8013886:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013888:	4b11      	ldr	r3, [pc, #68]	; (80138d0 <SDMMC_GetCmdError+0x50>)
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	4a11      	ldr	r2, [pc, #68]	; (80138d4 <SDMMC_GetCmdError+0x54>)
 801388e:	fba2 2303 	umull	r2, r3, r2, r3
 8013892:	0a5b      	lsrs	r3, r3, #9
 8013894:	f241 3288 	movw	r2, #5000	; 0x1388
 8013898:	fb02 f303 	mul.w	r3, r2, r3
 801389c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	1e5a      	subs	r2, r3, #1
 80138a2:	60fa      	str	r2, [r7, #12]
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d102      	bne.n	80138ae <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80138a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80138ac:	e009      	b.n	80138c2 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80138b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d0f1      	beq.n	801389e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	4a06      	ldr	r2, [pc, #24]	; (80138d8 <SDMMC_GetCmdError+0x58>)
 80138be:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80138c0:	2300      	movs	r3, #0
}
 80138c2:	4618      	mov	r0, r3
 80138c4:	3714      	adds	r7, #20
 80138c6:	46bd      	mov	sp, r7
 80138c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138cc:	4770      	bx	lr
 80138ce:	bf00      	nop
 80138d0:	2400002c 	.word	0x2400002c
 80138d4:	10624dd3 	.word	0x10624dd3
 80138d8:	002000c5 	.word	0x002000c5

080138dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80138dc:	b084      	sub	sp, #16
 80138de:	b580      	push	{r7, lr}
 80138e0:	b084      	sub	sp, #16
 80138e2:	af00      	add	r7, sp, #0
 80138e4:	6078      	str	r0, [r7, #4]
 80138e6:	f107 001c 	add.w	r0, r7, #28
 80138ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80138ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138f0:	2b01      	cmp	r3, #1
 80138f2:	d120      	bne.n	8013936 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80138f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	68da      	ldr	r2, [r3, #12]
 8013904:	4b2a      	ldr	r3, [pc, #168]	; (80139b0 <USB_CoreInit+0xd4>)
 8013906:	4013      	ands	r3, r2
 8013908:	687a      	ldr	r2, [r7, #4]
 801390a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	68db      	ldr	r3, [r3, #12]
 8013910:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8013918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801391a:	2b01      	cmp	r3, #1
 801391c:	d105      	bne.n	801392a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	68db      	ldr	r3, [r3, #12]
 8013922:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801392a:	6878      	ldr	r0, [r7, #4]
 801392c:	f001 faf8 	bl	8014f20 <USB_CoreReset>
 8013930:	4603      	mov	r3, r0
 8013932:	73fb      	strb	r3, [r7, #15]
 8013934:	e01a      	b.n	801396c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	68db      	ldr	r3, [r3, #12]
 801393a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8013942:	6878      	ldr	r0, [r7, #4]
 8013944:	f001 faec 	bl	8014f20 <USB_CoreReset>
 8013948:	4603      	mov	r3, r0
 801394a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801394c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801394e:	2b00      	cmp	r3, #0
 8013950:	d106      	bne.n	8013960 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013956:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	639a      	str	r2, [r3, #56]	; 0x38
 801395e:	e005      	b.n	801396c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013964:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801396e:	2b01      	cmp	r3, #1
 8013970:	d116      	bne.n	80139a0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013976:	b29a      	uxth	r2, r3
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013980:	4b0c      	ldr	r3, [pc, #48]	; (80139b4 <USB_CoreInit+0xd8>)
 8013982:	4313      	orrs	r3, r2
 8013984:	687a      	ldr	r2, [r7, #4]
 8013986:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	689b      	ldr	r3, [r3, #8]
 801398c:	f043 0206 	orr.w	r2, r3, #6
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	689b      	ldr	r3, [r3, #8]
 8013998:	f043 0220 	orr.w	r2, r3, #32
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80139a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80139a2:	4618      	mov	r0, r3
 80139a4:	3710      	adds	r7, #16
 80139a6:	46bd      	mov	sp, r7
 80139a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80139ac:	b004      	add	sp, #16
 80139ae:	4770      	bx	lr
 80139b0:	ffbdffbf 	.word	0xffbdffbf
 80139b4:	03ee0000 	.word	0x03ee0000

080139b8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80139b8:	b480      	push	{r7}
 80139ba:	b087      	sub	sp, #28
 80139bc:	af00      	add	r7, sp, #0
 80139be:	60f8      	str	r0, [r7, #12]
 80139c0:	60b9      	str	r1, [r7, #8]
 80139c2:	4613      	mov	r3, r2
 80139c4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80139c6:	79fb      	ldrb	r3, [r7, #7]
 80139c8:	2b02      	cmp	r3, #2
 80139ca:	d165      	bne.n	8013a98 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80139cc:	68bb      	ldr	r3, [r7, #8]
 80139ce:	4a41      	ldr	r2, [pc, #260]	; (8013ad4 <USB_SetTurnaroundTime+0x11c>)
 80139d0:	4293      	cmp	r3, r2
 80139d2:	d906      	bls.n	80139e2 <USB_SetTurnaroundTime+0x2a>
 80139d4:	68bb      	ldr	r3, [r7, #8]
 80139d6:	4a40      	ldr	r2, [pc, #256]	; (8013ad8 <USB_SetTurnaroundTime+0x120>)
 80139d8:	4293      	cmp	r3, r2
 80139da:	d202      	bcs.n	80139e2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80139dc:	230f      	movs	r3, #15
 80139de:	617b      	str	r3, [r7, #20]
 80139e0:	e062      	b.n	8013aa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80139e2:	68bb      	ldr	r3, [r7, #8]
 80139e4:	4a3c      	ldr	r2, [pc, #240]	; (8013ad8 <USB_SetTurnaroundTime+0x120>)
 80139e6:	4293      	cmp	r3, r2
 80139e8:	d306      	bcc.n	80139f8 <USB_SetTurnaroundTime+0x40>
 80139ea:	68bb      	ldr	r3, [r7, #8]
 80139ec:	4a3b      	ldr	r2, [pc, #236]	; (8013adc <USB_SetTurnaroundTime+0x124>)
 80139ee:	4293      	cmp	r3, r2
 80139f0:	d202      	bcs.n	80139f8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80139f2:	230e      	movs	r3, #14
 80139f4:	617b      	str	r3, [r7, #20]
 80139f6:	e057      	b.n	8013aa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80139f8:	68bb      	ldr	r3, [r7, #8]
 80139fa:	4a38      	ldr	r2, [pc, #224]	; (8013adc <USB_SetTurnaroundTime+0x124>)
 80139fc:	4293      	cmp	r3, r2
 80139fe:	d306      	bcc.n	8013a0e <USB_SetTurnaroundTime+0x56>
 8013a00:	68bb      	ldr	r3, [r7, #8]
 8013a02:	4a37      	ldr	r2, [pc, #220]	; (8013ae0 <USB_SetTurnaroundTime+0x128>)
 8013a04:	4293      	cmp	r3, r2
 8013a06:	d202      	bcs.n	8013a0e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8013a08:	230d      	movs	r3, #13
 8013a0a:	617b      	str	r3, [r7, #20]
 8013a0c:	e04c      	b.n	8013aa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8013a0e:	68bb      	ldr	r3, [r7, #8]
 8013a10:	4a33      	ldr	r2, [pc, #204]	; (8013ae0 <USB_SetTurnaroundTime+0x128>)
 8013a12:	4293      	cmp	r3, r2
 8013a14:	d306      	bcc.n	8013a24 <USB_SetTurnaroundTime+0x6c>
 8013a16:	68bb      	ldr	r3, [r7, #8]
 8013a18:	4a32      	ldr	r2, [pc, #200]	; (8013ae4 <USB_SetTurnaroundTime+0x12c>)
 8013a1a:	4293      	cmp	r3, r2
 8013a1c:	d802      	bhi.n	8013a24 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8013a1e:	230c      	movs	r3, #12
 8013a20:	617b      	str	r3, [r7, #20]
 8013a22:	e041      	b.n	8013aa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8013a24:	68bb      	ldr	r3, [r7, #8]
 8013a26:	4a2f      	ldr	r2, [pc, #188]	; (8013ae4 <USB_SetTurnaroundTime+0x12c>)
 8013a28:	4293      	cmp	r3, r2
 8013a2a:	d906      	bls.n	8013a3a <USB_SetTurnaroundTime+0x82>
 8013a2c:	68bb      	ldr	r3, [r7, #8]
 8013a2e:	4a2e      	ldr	r2, [pc, #184]	; (8013ae8 <USB_SetTurnaroundTime+0x130>)
 8013a30:	4293      	cmp	r3, r2
 8013a32:	d802      	bhi.n	8013a3a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8013a34:	230b      	movs	r3, #11
 8013a36:	617b      	str	r3, [r7, #20]
 8013a38:	e036      	b.n	8013aa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8013a3a:	68bb      	ldr	r3, [r7, #8]
 8013a3c:	4a2a      	ldr	r2, [pc, #168]	; (8013ae8 <USB_SetTurnaroundTime+0x130>)
 8013a3e:	4293      	cmp	r3, r2
 8013a40:	d906      	bls.n	8013a50 <USB_SetTurnaroundTime+0x98>
 8013a42:	68bb      	ldr	r3, [r7, #8]
 8013a44:	4a29      	ldr	r2, [pc, #164]	; (8013aec <USB_SetTurnaroundTime+0x134>)
 8013a46:	4293      	cmp	r3, r2
 8013a48:	d802      	bhi.n	8013a50 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8013a4a:	230a      	movs	r3, #10
 8013a4c:	617b      	str	r3, [r7, #20]
 8013a4e:	e02b      	b.n	8013aa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8013a50:	68bb      	ldr	r3, [r7, #8]
 8013a52:	4a26      	ldr	r2, [pc, #152]	; (8013aec <USB_SetTurnaroundTime+0x134>)
 8013a54:	4293      	cmp	r3, r2
 8013a56:	d906      	bls.n	8013a66 <USB_SetTurnaroundTime+0xae>
 8013a58:	68bb      	ldr	r3, [r7, #8]
 8013a5a:	4a25      	ldr	r2, [pc, #148]	; (8013af0 <USB_SetTurnaroundTime+0x138>)
 8013a5c:	4293      	cmp	r3, r2
 8013a5e:	d202      	bcs.n	8013a66 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8013a60:	2309      	movs	r3, #9
 8013a62:	617b      	str	r3, [r7, #20]
 8013a64:	e020      	b.n	8013aa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8013a66:	68bb      	ldr	r3, [r7, #8]
 8013a68:	4a21      	ldr	r2, [pc, #132]	; (8013af0 <USB_SetTurnaroundTime+0x138>)
 8013a6a:	4293      	cmp	r3, r2
 8013a6c:	d306      	bcc.n	8013a7c <USB_SetTurnaroundTime+0xc4>
 8013a6e:	68bb      	ldr	r3, [r7, #8]
 8013a70:	4a20      	ldr	r2, [pc, #128]	; (8013af4 <USB_SetTurnaroundTime+0x13c>)
 8013a72:	4293      	cmp	r3, r2
 8013a74:	d802      	bhi.n	8013a7c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8013a76:	2308      	movs	r3, #8
 8013a78:	617b      	str	r3, [r7, #20]
 8013a7a:	e015      	b.n	8013aa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8013a7c:	68bb      	ldr	r3, [r7, #8]
 8013a7e:	4a1d      	ldr	r2, [pc, #116]	; (8013af4 <USB_SetTurnaroundTime+0x13c>)
 8013a80:	4293      	cmp	r3, r2
 8013a82:	d906      	bls.n	8013a92 <USB_SetTurnaroundTime+0xda>
 8013a84:	68bb      	ldr	r3, [r7, #8]
 8013a86:	4a1c      	ldr	r2, [pc, #112]	; (8013af8 <USB_SetTurnaroundTime+0x140>)
 8013a88:	4293      	cmp	r3, r2
 8013a8a:	d202      	bcs.n	8013a92 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8013a8c:	2307      	movs	r3, #7
 8013a8e:	617b      	str	r3, [r7, #20]
 8013a90:	e00a      	b.n	8013aa8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8013a92:	2306      	movs	r3, #6
 8013a94:	617b      	str	r3, [r7, #20]
 8013a96:	e007      	b.n	8013aa8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8013a98:	79fb      	ldrb	r3, [r7, #7]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d102      	bne.n	8013aa4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8013a9e:	2309      	movs	r3, #9
 8013aa0:	617b      	str	r3, [r7, #20]
 8013aa2:	e001      	b.n	8013aa8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8013aa4:	2309      	movs	r3, #9
 8013aa6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	68db      	ldr	r3, [r3, #12]
 8013aac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8013ab0:	68fb      	ldr	r3, [r7, #12]
 8013ab2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	68da      	ldr	r2, [r3, #12]
 8013ab8:	697b      	ldr	r3, [r7, #20]
 8013aba:	029b      	lsls	r3, r3, #10
 8013abc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8013ac0:	431a      	orrs	r2, r3
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8013ac6:	2300      	movs	r3, #0
}
 8013ac8:	4618      	mov	r0, r3
 8013aca:	371c      	adds	r7, #28
 8013acc:	46bd      	mov	sp, r7
 8013ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ad2:	4770      	bx	lr
 8013ad4:	00d8acbf 	.word	0x00d8acbf
 8013ad8:	00e4e1c0 	.word	0x00e4e1c0
 8013adc:	00f42400 	.word	0x00f42400
 8013ae0:	01067380 	.word	0x01067380
 8013ae4:	011a499f 	.word	0x011a499f
 8013ae8:	01312cff 	.word	0x01312cff
 8013aec:	014ca43f 	.word	0x014ca43f
 8013af0:	016e3600 	.word	0x016e3600
 8013af4:	01a6ab1f 	.word	0x01a6ab1f
 8013af8:	01e84800 	.word	0x01e84800

08013afc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013afc:	b480      	push	{r7}
 8013afe:	b083      	sub	sp, #12
 8013b00:	af00      	add	r7, sp, #0
 8013b02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	689b      	ldr	r3, [r3, #8]
 8013b08:	f043 0201 	orr.w	r2, r3, #1
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013b10:	2300      	movs	r3, #0
}
 8013b12:	4618      	mov	r0, r3
 8013b14:	370c      	adds	r7, #12
 8013b16:	46bd      	mov	sp, r7
 8013b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b1c:	4770      	bx	lr

08013b1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013b1e:	b480      	push	{r7}
 8013b20:	b083      	sub	sp, #12
 8013b22:	af00      	add	r7, sp, #0
 8013b24:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	689b      	ldr	r3, [r3, #8]
 8013b2a:	f023 0201 	bic.w	r2, r3, #1
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013b32:	2300      	movs	r3, #0
}
 8013b34:	4618      	mov	r0, r3
 8013b36:	370c      	adds	r7, #12
 8013b38:	46bd      	mov	sp, r7
 8013b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b3e:	4770      	bx	lr

08013b40 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8013b40:	b580      	push	{r7, lr}
 8013b42:	b084      	sub	sp, #16
 8013b44:	af00      	add	r7, sp, #0
 8013b46:	6078      	str	r0, [r7, #4]
 8013b48:	460b      	mov	r3, r1
 8013b4a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	68db      	ldr	r3, [r3, #12]
 8013b54:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8013b5c:	78fb      	ldrb	r3, [r7, #3]
 8013b5e:	2b01      	cmp	r3, #1
 8013b60:	d115      	bne.n	8013b8e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	68db      	ldr	r3, [r3, #12]
 8013b66:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8013b6e:	2001      	movs	r0, #1
 8013b70:	f7f0 fbb6 	bl	80042e0 <HAL_Delay>
      ms++;
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	3301      	adds	r3, #1
 8013b78:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8013b7a:	6878      	ldr	r0, [r7, #4]
 8013b7c:	f001 f93f 	bl	8014dfe <USB_GetMode>
 8013b80:	4603      	mov	r3, r0
 8013b82:	2b01      	cmp	r3, #1
 8013b84:	d01e      	beq.n	8013bc4 <USB_SetCurrentMode+0x84>
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	2b31      	cmp	r3, #49	; 0x31
 8013b8a:	d9f0      	bls.n	8013b6e <USB_SetCurrentMode+0x2e>
 8013b8c:	e01a      	b.n	8013bc4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8013b8e:	78fb      	ldrb	r3, [r7, #3]
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d115      	bne.n	8013bc0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	68db      	ldr	r3, [r3, #12]
 8013b98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8013ba0:	2001      	movs	r0, #1
 8013ba2:	f7f0 fb9d 	bl	80042e0 <HAL_Delay>
      ms++;
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	3301      	adds	r3, #1
 8013baa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8013bac:	6878      	ldr	r0, [r7, #4]
 8013bae:	f001 f926 	bl	8014dfe <USB_GetMode>
 8013bb2:	4603      	mov	r3, r0
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d005      	beq.n	8013bc4 <USB_SetCurrentMode+0x84>
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	2b31      	cmp	r3, #49	; 0x31
 8013bbc:	d9f0      	bls.n	8013ba0 <USB_SetCurrentMode+0x60>
 8013bbe:	e001      	b.n	8013bc4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8013bc0:	2301      	movs	r3, #1
 8013bc2:	e005      	b.n	8013bd0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	2b32      	cmp	r3, #50	; 0x32
 8013bc8:	d101      	bne.n	8013bce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8013bca:	2301      	movs	r3, #1
 8013bcc:	e000      	b.n	8013bd0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8013bce:	2300      	movs	r3, #0
}
 8013bd0:	4618      	mov	r0, r3
 8013bd2:	3710      	adds	r7, #16
 8013bd4:	46bd      	mov	sp, r7
 8013bd6:	bd80      	pop	{r7, pc}

08013bd8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013bd8:	b084      	sub	sp, #16
 8013bda:	b580      	push	{r7, lr}
 8013bdc:	b086      	sub	sp, #24
 8013bde:	af00      	add	r7, sp, #0
 8013be0:	6078      	str	r0, [r7, #4]
 8013be2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8013be6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8013bea:	2300      	movs	r3, #0
 8013bec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8013bf2:	2300      	movs	r3, #0
 8013bf4:	613b      	str	r3, [r7, #16]
 8013bf6:	e009      	b.n	8013c0c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8013bf8:	687a      	ldr	r2, [r7, #4]
 8013bfa:	693b      	ldr	r3, [r7, #16]
 8013bfc:	3340      	adds	r3, #64	; 0x40
 8013bfe:	009b      	lsls	r3, r3, #2
 8013c00:	4413      	add	r3, r2
 8013c02:	2200      	movs	r2, #0
 8013c04:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8013c06:	693b      	ldr	r3, [r7, #16]
 8013c08:	3301      	adds	r3, #1
 8013c0a:	613b      	str	r3, [r7, #16]
 8013c0c:	693b      	ldr	r3, [r7, #16]
 8013c0e:	2b0e      	cmp	r3, #14
 8013c10:	d9f2      	bls.n	8013bf8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8013c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d11c      	bne.n	8013c52 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c1e:	685b      	ldr	r3, [r3, #4]
 8013c20:	68fa      	ldr	r2, [r7, #12]
 8013c22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013c26:	f043 0302 	orr.w	r3, r3, #2
 8013c2a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c30:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	601a      	str	r2, [r3, #0]
 8013c50:	e005      	b.n	8013c5e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c56:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013c64:	461a      	mov	r2, r3
 8013c66:	2300      	movs	r3, #0
 8013c68:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c70:	4619      	mov	r1, r3
 8013c72:	68fb      	ldr	r3, [r7, #12]
 8013c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c78:	461a      	mov	r2, r3
 8013c7a:	680b      	ldr	r3, [r1, #0]
 8013c7c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c80:	2b01      	cmp	r3, #1
 8013c82:	d10c      	bne.n	8013c9e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8013c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d104      	bne.n	8013c94 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8013c8a:	2100      	movs	r1, #0
 8013c8c:	6878      	ldr	r0, [r7, #4]
 8013c8e:	f000 f965 	bl	8013f5c <USB_SetDevSpeed>
 8013c92:	e008      	b.n	8013ca6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8013c94:	2101      	movs	r1, #1
 8013c96:	6878      	ldr	r0, [r7, #4]
 8013c98:	f000 f960 	bl	8013f5c <USB_SetDevSpeed>
 8013c9c:	e003      	b.n	8013ca6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8013c9e:	2103      	movs	r1, #3
 8013ca0:	6878      	ldr	r0, [r7, #4]
 8013ca2:	f000 f95b 	bl	8013f5c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8013ca6:	2110      	movs	r1, #16
 8013ca8:	6878      	ldr	r0, [r7, #4]
 8013caa:	f000 f8f3 	bl	8013e94 <USB_FlushTxFifo>
 8013cae:	4603      	mov	r3, r0
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d001      	beq.n	8013cb8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8013cb4:	2301      	movs	r3, #1
 8013cb6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8013cb8:	6878      	ldr	r0, [r7, #4]
 8013cba:	f000 f91f 	bl	8013efc <USB_FlushRxFifo>
 8013cbe:	4603      	mov	r3, r0
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d001      	beq.n	8013cc8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8013cc4:	2301      	movs	r3, #1
 8013cc6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013cce:	461a      	mov	r2, r3
 8013cd0:	2300      	movs	r3, #0
 8013cd2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013cda:	461a      	mov	r2, r3
 8013cdc:	2300      	movs	r3, #0
 8013cde:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ce6:	461a      	mov	r2, r3
 8013ce8:	2300      	movs	r3, #0
 8013cea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013cec:	2300      	movs	r3, #0
 8013cee:	613b      	str	r3, [r7, #16]
 8013cf0:	e043      	b.n	8013d7a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013cf2:	693b      	ldr	r3, [r7, #16]
 8013cf4:	015a      	lsls	r2, r3, #5
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	4413      	add	r3, r2
 8013cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013d04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013d08:	d118      	bne.n	8013d3c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8013d0a:	693b      	ldr	r3, [r7, #16]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d10a      	bne.n	8013d26 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8013d10:	693b      	ldr	r3, [r7, #16]
 8013d12:	015a      	lsls	r2, r3, #5
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	4413      	add	r3, r2
 8013d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d1c:	461a      	mov	r2, r3
 8013d1e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013d22:	6013      	str	r3, [r2, #0]
 8013d24:	e013      	b.n	8013d4e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8013d26:	693b      	ldr	r3, [r7, #16]
 8013d28:	015a      	lsls	r2, r3, #5
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	4413      	add	r3, r2
 8013d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d32:	461a      	mov	r2, r3
 8013d34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013d38:	6013      	str	r3, [r2, #0]
 8013d3a:	e008      	b.n	8013d4e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8013d3c:	693b      	ldr	r3, [r7, #16]
 8013d3e:	015a      	lsls	r2, r3, #5
 8013d40:	68fb      	ldr	r3, [r7, #12]
 8013d42:	4413      	add	r3, r2
 8013d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d48:	461a      	mov	r2, r3
 8013d4a:	2300      	movs	r3, #0
 8013d4c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8013d4e:	693b      	ldr	r3, [r7, #16]
 8013d50:	015a      	lsls	r2, r3, #5
 8013d52:	68fb      	ldr	r3, [r7, #12]
 8013d54:	4413      	add	r3, r2
 8013d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d5a:	461a      	mov	r2, r3
 8013d5c:	2300      	movs	r3, #0
 8013d5e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8013d60:	693b      	ldr	r3, [r7, #16]
 8013d62:	015a      	lsls	r2, r3, #5
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	4413      	add	r3, r2
 8013d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d6c:	461a      	mov	r2, r3
 8013d6e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013d72:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013d74:	693b      	ldr	r3, [r7, #16]
 8013d76:	3301      	adds	r3, #1
 8013d78:	613b      	str	r3, [r7, #16]
 8013d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d7c:	693a      	ldr	r2, [r7, #16]
 8013d7e:	429a      	cmp	r2, r3
 8013d80:	d3b7      	bcc.n	8013cf2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013d82:	2300      	movs	r3, #0
 8013d84:	613b      	str	r3, [r7, #16]
 8013d86:	e043      	b.n	8013e10 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013d88:	693b      	ldr	r3, [r7, #16]
 8013d8a:	015a      	lsls	r2, r3, #5
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	4413      	add	r3, r2
 8013d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013d9e:	d118      	bne.n	8013dd2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8013da0:	693b      	ldr	r3, [r7, #16]
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d10a      	bne.n	8013dbc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8013da6:	693b      	ldr	r3, [r7, #16]
 8013da8:	015a      	lsls	r2, r3, #5
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	4413      	add	r3, r2
 8013dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013db2:	461a      	mov	r2, r3
 8013db4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013db8:	6013      	str	r3, [r2, #0]
 8013dba:	e013      	b.n	8013de4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8013dbc:	693b      	ldr	r3, [r7, #16]
 8013dbe:	015a      	lsls	r2, r3, #5
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	4413      	add	r3, r2
 8013dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013dc8:	461a      	mov	r2, r3
 8013dca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013dce:	6013      	str	r3, [r2, #0]
 8013dd0:	e008      	b.n	8013de4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8013dd2:	693b      	ldr	r3, [r7, #16]
 8013dd4:	015a      	lsls	r2, r3, #5
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	4413      	add	r3, r2
 8013dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013dde:	461a      	mov	r2, r3
 8013de0:	2300      	movs	r3, #0
 8013de2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8013de4:	693b      	ldr	r3, [r7, #16]
 8013de6:	015a      	lsls	r2, r3, #5
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	4413      	add	r3, r2
 8013dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013df0:	461a      	mov	r2, r3
 8013df2:	2300      	movs	r3, #0
 8013df4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8013df6:	693b      	ldr	r3, [r7, #16]
 8013df8:	015a      	lsls	r2, r3, #5
 8013dfa:	68fb      	ldr	r3, [r7, #12]
 8013dfc:	4413      	add	r3, r2
 8013dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e02:	461a      	mov	r2, r3
 8013e04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013e08:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013e0a:	693b      	ldr	r3, [r7, #16]
 8013e0c:	3301      	adds	r3, #1
 8013e0e:	613b      	str	r3, [r7, #16]
 8013e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e12:	693a      	ldr	r2, [r7, #16]
 8013e14:	429a      	cmp	r2, r3
 8013e16:	d3b7      	bcc.n	8013d88 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e1e:	691b      	ldr	r3, [r3, #16]
 8013e20:	68fa      	ldr	r2, [r7, #12]
 8013e22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013e26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013e2a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	2200      	movs	r2, #0
 8013e30:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8013e38:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8013e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d105      	bne.n	8013e4c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	699b      	ldr	r3, [r3, #24]
 8013e44:	f043 0210 	orr.w	r2, r3, #16
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	699a      	ldr	r2, [r3, #24]
 8013e50:	4b0e      	ldr	r3, [pc, #56]	; (8013e8c <USB_DevInit+0x2b4>)
 8013e52:	4313      	orrs	r3, r2
 8013e54:	687a      	ldr	r2, [r7, #4]
 8013e56:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8013e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d005      	beq.n	8013e6a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	699b      	ldr	r3, [r3, #24]
 8013e62:	f043 0208 	orr.w	r2, r3, #8
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8013e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e6c:	2b01      	cmp	r3, #1
 8013e6e:	d105      	bne.n	8013e7c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	699a      	ldr	r2, [r3, #24]
 8013e74:	4b06      	ldr	r3, [pc, #24]	; (8013e90 <USB_DevInit+0x2b8>)
 8013e76:	4313      	orrs	r3, r2
 8013e78:	687a      	ldr	r2, [r7, #4]
 8013e7a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8013e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8013e7e:	4618      	mov	r0, r3
 8013e80:	3718      	adds	r7, #24
 8013e82:	46bd      	mov	sp, r7
 8013e84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013e88:	b004      	add	sp, #16
 8013e8a:	4770      	bx	lr
 8013e8c:	803c3800 	.word	0x803c3800
 8013e90:	40000004 	.word	0x40000004

08013e94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8013e94:	b480      	push	{r7}
 8013e96:	b085      	sub	sp, #20
 8013e98:	af00      	add	r7, sp, #0
 8013e9a:	6078      	str	r0, [r7, #4]
 8013e9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013e9e:	2300      	movs	r3, #0
 8013ea0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	3301      	adds	r3, #1
 8013ea6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	4a13      	ldr	r2, [pc, #76]	; (8013ef8 <USB_FlushTxFifo+0x64>)
 8013eac:	4293      	cmp	r3, r2
 8013eae:	d901      	bls.n	8013eb4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8013eb0:	2303      	movs	r3, #3
 8013eb2:	e01b      	b.n	8013eec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	691b      	ldr	r3, [r3, #16]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	daf2      	bge.n	8013ea2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8013ebc:	2300      	movs	r3, #0
 8013ebe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013ec0:	683b      	ldr	r3, [r7, #0]
 8013ec2:	019b      	lsls	r3, r3, #6
 8013ec4:	f043 0220 	orr.w	r2, r3, #32
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	3301      	adds	r3, #1
 8013ed0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	4a08      	ldr	r2, [pc, #32]	; (8013ef8 <USB_FlushTxFifo+0x64>)
 8013ed6:	4293      	cmp	r3, r2
 8013ed8:	d901      	bls.n	8013ede <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8013eda:	2303      	movs	r3, #3
 8013edc:	e006      	b.n	8013eec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	691b      	ldr	r3, [r3, #16]
 8013ee2:	f003 0320 	and.w	r3, r3, #32
 8013ee6:	2b20      	cmp	r3, #32
 8013ee8:	d0f0      	beq.n	8013ecc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8013eea:	2300      	movs	r3, #0
}
 8013eec:	4618      	mov	r0, r3
 8013eee:	3714      	adds	r7, #20
 8013ef0:	46bd      	mov	sp, r7
 8013ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ef6:	4770      	bx	lr
 8013ef8:	00030d40 	.word	0x00030d40

08013efc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8013efc:	b480      	push	{r7}
 8013efe:	b085      	sub	sp, #20
 8013f00:	af00      	add	r7, sp, #0
 8013f02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013f04:	2300      	movs	r3, #0
 8013f06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	3301      	adds	r3, #1
 8013f0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	4a11      	ldr	r2, [pc, #68]	; (8013f58 <USB_FlushRxFifo+0x5c>)
 8013f12:	4293      	cmp	r3, r2
 8013f14:	d901      	bls.n	8013f1a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8013f16:	2303      	movs	r3, #3
 8013f18:	e018      	b.n	8013f4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	691b      	ldr	r3, [r3, #16]
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	daf2      	bge.n	8013f08 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8013f22:	2300      	movs	r3, #0
 8013f24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	2210      	movs	r2, #16
 8013f2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	3301      	adds	r3, #1
 8013f30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	4a08      	ldr	r2, [pc, #32]	; (8013f58 <USB_FlushRxFifo+0x5c>)
 8013f36:	4293      	cmp	r3, r2
 8013f38:	d901      	bls.n	8013f3e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8013f3a:	2303      	movs	r3, #3
 8013f3c:	e006      	b.n	8013f4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	691b      	ldr	r3, [r3, #16]
 8013f42:	f003 0310 	and.w	r3, r3, #16
 8013f46:	2b10      	cmp	r3, #16
 8013f48:	d0f0      	beq.n	8013f2c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8013f4a:	2300      	movs	r3, #0
}
 8013f4c:	4618      	mov	r0, r3
 8013f4e:	3714      	adds	r7, #20
 8013f50:	46bd      	mov	sp, r7
 8013f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f56:	4770      	bx	lr
 8013f58:	00030d40 	.word	0x00030d40

08013f5c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8013f5c:	b480      	push	{r7}
 8013f5e:	b085      	sub	sp, #20
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	6078      	str	r0, [r7, #4]
 8013f64:	460b      	mov	r3, r1
 8013f66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8013f6c:	68fb      	ldr	r3, [r7, #12]
 8013f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f72:	681a      	ldr	r2, [r3, #0]
 8013f74:	78fb      	ldrb	r3, [r7, #3]
 8013f76:	68f9      	ldr	r1, [r7, #12]
 8013f78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013f7c:	4313      	orrs	r3, r2
 8013f7e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8013f80:	2300      	movs	r3, #0
}
 8013f82:	4618      	mov	r0, r3
 8013f84:	3714      	adds	r7, #20
 8013f86:	46bd      	mov	sp, r7
 8013f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f8c:	4770      	bx	lr

08013f8e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8013f8e:	b480      	push	{r7}
 8013f90:	b087      	sub	sp, #28
 8013f92:	af00      	add	r7, sp, #0
 8013f94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8013f9a:	693b      	ldr	r3, [r7, #16]
 8013f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013fa0:	689b      	ldr	r3, [r3, #8]
 8013fa2:	f003 0306 	and.w	r3, r3, #6
 8013fa6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d102      	bne.n	8013fb4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8013fae:	2300      	movs	r3, #0
 8013fb0:	75fb      	strb	r3, [r7, #23]
 8013fb2:	e00a      	b.n	8013fca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8013fb4:	68fb      	ldr	r3, [r7, #12]
 8013fb6:	2b02      	cmp	r3, #2
 8013fb8:	d002      	beq.n	8013fc0 <USB_GetDevSpeed+0x32>
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	2b06      	cmp	r3, #6
 8013fbe:	d102      	bne.n	8013fc6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8013fc0:	2302      	movs	r3, #2
 8013fc2:	75fb      	strb	r3, [r7, #23]
 8013fc4:	e001      	b.n	8013fca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8013fc6:	230f      	movs	r3, #15
 8013fc8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8013fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8013fcc:	4618      	mov	r0, r3
 8013fce:	371c      	adds	r7, #28
 8013fd0:	46bd      	mov	sp, r7
 8013fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fd6:	4770      	bx	lr

08013fd8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013fd8:	b480      	push	{r7}
 8013fda:	b085      	sub	sp, #20
 8013fdc:	af00      	add	r7, sp, #0
 8013fde:	6078      	str	r0, [r7, #4]
 8013fe0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013fe6:	683b      	ldr	r3, [r7, #0]
 8013fe8:	781b      	ldrb	r3, [r3, #0]
 8013fea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013fec:	683b      	ldr	r3, [r7, #0]
 8013fee:	785b      	ldrb	r3, [r3, #1]
 8013ff0:	2b01      	cmp	r3, #1
 8013ff2:	d139      	bne.n	8014068 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ffa:	69da      	ldr	r2, [r3, #28]
 8013ffc:	683b      	ldr	r3, [r7, #0]
 8013ffe:	781b      	ldrb	r3, [r3, #0]
 8014000:	f003 030f 	and.w	r3, r3, #15
 8014004:	2101      	movs	r1, #1
 8014006:	fa01 f303 	lsl.w	r3, r1, r3
 801400a:	b29b      	uxth	r3, r3
 801400c:	68f9      	ldr	r1, [r7, #12]
 801400e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014012:	4313      	orrs	r3, r2
 8014014:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8014016:	68bb      	ldr	r3, [r7, #8]
 8014018:	015a      	lsls	r2, r3, #5
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	4413      	add	r3, r2
 801401e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014028:	2b00      	cmp	r3, #0
 801402a:	d153      	bne.n	80140d4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801402c:	68bb      	ldr	r3, [r7, #8]
 801402e:	015a      	lsls	r2, r3, #5
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	4413      	add	r3, r2
 8014034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014038:	681a      	ldr	r2, [r3, #0]
 801403a:	683b      	ldr	r3, [r7, #0]
 801403c:	689b      	ldr	r3, [r3, #8]
 801403e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8014042:	683b      	ldr	r3, [r7, #0]
 8014044:	791b      	ldrb	r3, [r3, #4]
 8014046:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014048:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801404a:	68bb      	ldr	r3, [r7, #8]
 801404c:	059b      	lsls	r3, r3, #22
 801404e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014050:	431a      	orrs	r2, r3
 8014052:	68bb      	ldr	r3, [r7, #8]
 8014054:	0159      	lsls	r1, r3, #5
 8014056:	68fb      	ldr	r3, [r7, #12]
 8014058:	440b      	add	r3, r1
 801405a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801405e:	4619      	mov	r1, r3
 8014060:	4b20      	ldr	r3, [pc, #128]	; (80140e4 <USB_ActivateEndpoint+0x10c>)
 8014062:	4313      	orrs	r3, r2
 8014064:	600b      	str	r3, [r1, #0]
 8014066:	e035      	b.n	80140d4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8014068:	68fb      	ldr	r3, [r7, #12]
 801406a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801406e:	69da      	ldr	r2, [r3, #28]
 8014070:	683b      	ldr	r3, [r7, #0]
 8014072:	781b      	ldrb	r3, [r3, #0]
 8014074:	f003 030f 	and.w	r3, r3, #15
 8014078:	2101      	movs	r1, #1
 801407a:	fa01 f303 	lsl.w	r3, r1, r3
 801407e:	041b      	lsls	r3, r3, #16
 8014080:	68f9      	ldr	r1, [r7, #12]
 8014082:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014086:	4313      	orrs	r3, r2
 8014088:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801408a:	68bb      	ldr	r3, [r7, #8]
 801408c:	015a      	lsls	r2, r3, #5
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	4413      	add	r3, r2
 8014092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801409c:	2b00      	cmp	r3, #0
 801409e:	d119      	bne.n	80140d4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80140a0:	68bb      	ldr	r3, [r7, #8]
 80140a2:	015a      	lsls	r2, r3, #5
 80140a4:	68fb      	ldr	r3, [r7, #12]
 80140a6:	4413      	add	r3, r2
 80140a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140ac:	681a      	ldr	r2, [r3, #0]
 80140ae:	683b      	ldr	r3, [r7, #0]
 80140b0:	689b      	ldr	r3, [r3, #8]
 80140b2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80140b6:	683b      	ldr	r3, [r7, #0]
 80140b8:	791b      	ldrb	r3, [r3, #4]
 80140ba:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80140bc:	430b      	orrs	r3, r1
 80140be:	431a      	orrs	r2, r3
 80140c0:	68bb      	ldr	r3, [r7, #8]
 80140c2:	0159      	lsls	r1, r3, #5
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	440b      	add	r3, r1
 80140c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140cc:	4619      	mov	r1, r3
 80140ce:	4b05      	ldr	r3, [pc, #20]	; (80140e4 <USB_ActivateEndpoint+0x10c>)
 80140d0:	4313      	orrs	r3, r2
 80140d2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80140d4:	2300      	movs	r3, #0
}
 80140d6:	4618      	mov	r0, r3
 80140d8:	3714      	adds	r7, #20
 80140da:	46bd      	mov	sp, r7
 80140dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e0:	4770      	bx	lr
 80140e2:	bf00      	nop
 80140e4:	10008000 	.word	0x10008000

080140e8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80140e8:	b480      	push	{r7}
 80140ea:	b085      	sub	sp, #20
 80140ec:	af00      	add	r7, sp, #0
 80140ee:	6078      	str	r0, [r7, #4]
 80140f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80140f6:	683b      	ldr	r3, [r7, #0]
 80140f8:	781b      	ldrb	r3, [r3, #0]
 80140fa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80140fc:	683b      	ldr	r3, [r7, #0]
 80140fe:	785b      	ldrb	r3, [r3, #1]
 8014100:	2b01      	cmp	r3, #1
 8014102:	d161      	bne.n	80141c8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014104:	68bb      	ldr	r3, [r7, #8]
 8014106:	015a      	lsls	r2, r3, #5
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	4413      	add	r3, r2
 801410c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014116:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801411a:	d11f      	bne.n	801415c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801411c:	68bb      	ldr	r3, [r7, #8]
 801411e:	015a      	lsls	r2, r3, #5
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	4413      	add	r3, r2
 8014124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	68ba      	ldr	r2, [r7, #8]
 801412c:	0151      	lsls	r1, r2, #5
 801412e:	68fa      	ldr	r2, [r7, #12]
 8014130:	440a      	add	r2, r1
 8014132:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014136:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801413a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801413c:	68bb      	ldr	r3, [r7, #8]
 801413e:	015a      	lsls	r2, r3, #5
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	4413      	add	r3, r2
 8014144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014148:	681b      	ldr	r3, [r3, #0]
 801414a:	68ba      	ldr	r2, [r7, #8]
 801414c:	0151      	lsls	r1, r2, #5
 801414e:	68fa      	ldr	r2, [r7, #12]
 8014150:	440a      	add	r2, r1
 8014152:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014156:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801415a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014162:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014164:	683b      	ldr	r3, [r7, #0]
 8014166:	781b      	ldrb	r3, [r3, #0]
 8014168:	f003 030f 	and.w	r3, r3, #15
 801416c:	2101      	movs	r1, #1
 801416e:	fa01 f303 	lsl.w	r3, r1, r3
 8014172:	b29b      	uxth	r3, r3
 8014174:	43db      	mvns	r3, r3
 8014176:	68f9      	ldr	r1, [r7, #12]
 8014178:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801417c:	4013      	ands	r3, r2
 801417e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014180:	68fb      	ldr	r3, [r7, #12]
 8014182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014186:	69da      	ldr	r2, [r3, #28]
 8014188:	683b      	ldr	r3, [r7, #0]
 801418a:	781b      	ldrb	r3, [r3, #0]
 801418c:	f003 030f 	and.w	r3, r3, #15
 8014190:	2101      	movs	r1, #1
 8014192:	fa01 f303 	lsl.w	r3, r1, r3
 8014196:	b29b      	uxth	r3, r3
 8014198:	43db      	mvns	r3, r3
 801419a:	68f9      	ldr	r1, [r7, #12]
 801419c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80141a0:	4013      	ands	r3, r2
 80141a2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80141a4:	68bb      	ldr	r3, [r7, #8]
 80141a6:	015a      	lsls	r2, r3, #5
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	4413      	add	r3, r2
 80141ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80141b0:	681a      	ldr	r2, [r3, #0]
 80141b2:	68bb      	ldr	r3, [r7, #8]
 80141b4:	0159      	lsls	r1, r3, #5
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	440b      	add	r3, r1
 80141ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80141be:	4619      	mov	r1, r3
 80141c0:	4b35      	ldr	r3, [pc, #212]	; (8014298 <USB_DeactivateEndpoint+0x1b0>)
 80141c2:	4013      	ands	r3, r2
 80141c4:	600b      	str	r3, [r1, #0]
 80141c6:	e060      	b.n	801428a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80141c8:	68bb      	ldr	r3, [r7, #8]
 80141ca:	015a      	lsls	r2, r3, #5
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	4413      	add	r3, r2
 80141d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80141da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80141de:	d11f      	bne.n	8014220 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80141e0:	68bb      	ldr	r3, [r7, #8]
 80141e2:	015a      	lsls	r2, r3, #5
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	4413      	add	r3, r2
 80141e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	68ba      	ldr	r2, [r7, #8]
 80141f0:	0151      	lsls	r1, r2, #5
 80141f2:	68fa      	ldr	r2, [r7, #12]
 80141f4:	440a      	add	r2, r1
 80141f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80141fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80141fe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8014200:	68bb      	ldr	r3, [r7, #8]
 8014202:	015a      	lsls	r2, r3, #5
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	4413      	add	r3, r2
 8014208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	68ba      	ldr	r2, [r7, #8]
 8014210:	0151      	lsls	r1, r2, #5
 8014212:	68fa      	ldr	r2, [r7, #12]
 8014214:	440a      	add	r2, r1
 8014216:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801421a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801421e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014226:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014228:	683b      	ldr	r3, [r7, #0]
 801422a:	781b      	ldrb	r3, [r3, #0]
 801422c:	f003 030f 	and.w	r3, r3, #15
 8014230:	2101      	movs	r1, #1
 8014232:	fa01 f303 	lsl.w	r3, r1, r3
 8014236:	041b      	lsls	r3, r3, #16
 8014238:	43db      	mvns	r3, r3
 801423a:	68f9      	ldr	r1, [r7, #12]
 801423c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014240:	4013      	ands	r3, r2
 8014242:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801424a:	69da      	ldr	r2, [r3, #28]
 801424c:	683b      	ldr	r3, [r7, #0]
 801424e:	781b      	ldrb	r3, [r3, #0]
 8014250:	f003 030f 	and.w	r3, r3, #15
 8014254:	2101      	movs	r1, #1
 8014256:	fa01 f303 	lsl.w	r3, r1, r3
 801425a:	041b      	lsls	r3, r3, #16
 801425c:	43db      	mvns	r3, r3
 801425e:	68f9      	ldr	r1, [r7, #12]
 8014260:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014264:	4013      	ands	r3, r2
 8014266:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8014268:	68bb      	ldr	r3, [r7, #8]
 801426a:	015a      	lsls	r2, r3, #5
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	4413      	add	r3, r2
 8014270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014274:	681a      	ldr	r2, [r3, #0]
 8014276:	68bb      	ldr	r3, [r7, #8]
 8014278:	0159      	lsls	r1, r3, #5
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	440b      	add	r3, r1
 801427e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014282:	4619      	mov	r1, r3
 8014284:	4b05      	ldr	r3, [pc, #20]	; (801429c <USB_DeactivateEndpoint+0x1b4>)
 8014286:	4013      	ands	r3, r2
 8014288:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801428a:	2300      	movs	r3, #0
}
 801428c:	4618      	mov	r0, r3
 801428e:	3714      	adds	r7, #20
 8014290:	46bd      	mov	sp, r7
 8014292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014296:	4770      	bx	lr
 8014298:	ec337800 	.word	0xec337800
 801429c:	eff37800 	.word	0xeff37800

080142a0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80142a0:	b580      	push	{r7, lr}
 80142a2:	b08a      	sub	sp, #40	; 0x28
 80142a4:	af02      	add	r7, sp, #8
 80142a6:	60f8      	str	r0, [r7, #12]
 80142a8:	60b9      	str	r1, [r7, #8]
 80142aa:	4613      	mov	r3, r2
 80142ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80142b2:	68bb      	ldr	r3, [r7, #8]
 80142b4:	781b      	ldrb	r3, [r3, #0]
 80142b6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80142b8:	68bb      	ldr	r3, [r7, #8]
 80142ba:	785b      	ldrb	r3, [r3, #1]
 80142bc:	2b01      	cmp	r3, #1
 80142be:	f040 8181 	bne.w	80145c4 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80142c2:	68bb      	ldr	r3, [r7, #8]
 80142c4:	691b      	ldr	r3, [r3, #16]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d132      	bne.n	8014330 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80142ca:	69bb      	ldr	r3, [r7, #24]
 80142cc:	015a      	lsls	r2, r3, #5
 80142ce:	69fb      	ldr	r3, [r7, #28]
 80142d0:	4413      	add	r3, r2
 80142d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142d6:	691a      	ldr	r2, [r3, #16]
 80142d8:	69bb      	ldr	r3, [r7, #24]
 80142da:	0159      	lsls	r1, r3, #5
 80142dc:	69fb      	ldr	r3, [r7, #28]
 80142de:	440b      	add	r3, r1
 80142e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142e4:	4619      	mov	r1, r3
 80142e6:	4ba5      	ldr	r3, [pc, #660]	; (801457c <USB_EPStartXfer+0x2dc>)
 80142e8:	4013      	ands	r3, r2
 80142ea:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80142ec:	69bb      	ldr	r3, [r7, #24]
 80142ee:	015a      	lsls	r2, r3, #5
 80142f0:	69fb      	ldr	r3, [r7, #28]
 80142f2:	4413      	add	r3, r2
 80142f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142f8:	691b      	ldr	r3, [r3, #16]
 80142fa:	69ba      	ldr	r2, [r7, #24]
 80142fc:	0151      	lsls	r1, r2, #5
 80142fe:	69fa      	ldr	r2, [r7, #28]
 8014300:	440a      	add	r2, r1
 8014302:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014306:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801430a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801430c:	69bb      	ldr	r3, [r7, #24]
 801430e:	015a      	lsls	r2, r3, #5
 8014310:	69fb      	ldr	r3, [r7, #28]
 8014312:	4413      	add	r3, r2
 8014314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014318:	691a      	ldr	r2, [r3, #16]
 801431a:	69bb      	ldr	r3, [r7, #24]
 801431c:	0159      	lsls	r1, r3, #5
 801431e:	69fb      	ldr	r3, [r7, #28]
 8014320:	440b      	add	r3, r1
 8014322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014326:	4619      	mov	r1, r3
 8014328:	4b95      	ldr	r3, [pc, #596]	; (8014580 <USB_EPStartXfer+0x2e0>)
 801432a:	4013      	ands	r3, r2
 801432c:	610b      	str	r3, [r1, #16]
 801432e:	e092      	b.n	8014456 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014330:	69bb      	ldr	r3, [r7, #24]
 8014332:	015a      	lsls	r2, r3, #5
 8014334:	69fb      	ldr	r3, [r7, #28]
 8014336:	4413      	add	r3, r2
 8014338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801433c:	691a      	ldr	r2, [r3, #16]
 801433e:	69bb      	ldr	r3, [r7, #24]
 8014340:	0159      	lsls	r1, r3, #5
 8014342:	69fb      	ldr	r3, [r7, #28]
 8014344:	440b      	add	r3, r1
 8014346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801434a:	4619      	mov	r1, r3
 801434c:	4b8c      	ldr	r3, [pc, #560]	; (8014580 <USB_EPStartXfer+0x2e0>)
 801434e:	4013      	ands	r3, r2
 8014350:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014352:	69bb      	ldr	r3, [r7, #24]
 8014354:	015a      	lsls	r2, r3, #5
 8014356:	69fb      	ldr	r3, [r7, #28]
 8014358:	4413      	add	r3, r2
 801435a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801435e:	691a      	ldr	r2, [r3, #16]
 8014360:	69bb      	ldr	r3, [r7, #24]
 8014362:	0159      	lsls	r1, r3, #5
 8014364:	69fb      	ldr	r3, [r7, #28]
 8014366:	440b      	add	r3, r1
 8014368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801436c:	4619      	mov	r1, r3
 801436e:	4b83      	ldr	r3, [pc, #524]	; (801457c <USB_EPStartXfer+0x2dc>)
 8014370:	4013      	ands	r3, r2
 8014372:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8014374:	69bb      	ldr	r3, [r7, #24]
 8014376:	2b00      	cmp	r3, #0
 8014378:	d11a      	bne.n	80143b0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 801437a:	68bb      	ldr	r3, [r7, #8]
 801437c:	691a      	ldr	r2, [r3, #16]
 801437e:	68bb      	ldr	r3, [r7, #8]
 8014380:	689b      	ldr	r3, [r3, #8]
 8014382:	429a      	cmp	r2, r3
 8014384:	d903      	bls.n	801438e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8014386:	68bb      	ldr	r3, [r7, #8]
 8014388:	689a      	ldr	r2, [r3, #8]
 801438a:	68bb      	ldr	r3, [r7, #8]
 801438c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801438e:	69bb      	ldr	r3, [r7, #24]
 8014390:	015a      	lsls	r2, r3, #5
 8014392:	69fb      	ldr	r3, [r7, #28]
 8014394:	4413      	add	r3, r2
 8014396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801439a:	691b      	ldr	r3, [r3, #16]
 801439c:	69ba      	ldr	r2, [r7, #24]
 801439e:	0151      	lsls	r1, r2, #5
 80143a0:	69fa      	ldr	r2, [r7, #28]
 80143a2:	440a      	add	r2, r1
 80143a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80143a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80143ac:	6113      	str	r3, [r2, #16]
 80143ae:	e01b      	b.n	80143e8 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80143b0:	69bb      	ldr	r3, [r7, #24]
 80143b2:	015a      	lsls	r2, r3, #5
 80143b4:	69fb      	ldr	r3, [r7, #28]
 80143b6:	4413      	add	r3, r2
 80143b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143bc:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80143be:	68bb      	ldr	r3, [r7, #8]
 80143c0:	6919      	ldr	r1, [r3, #16]
 80143c2:	68bb      	ldr	r3, [r7, #8]
 80143c4:	689b      	ldr	r3, [r3, #8]
 80143c6:	440b      	add	r3, r1
 80143c8:	1e59      	subs	r1, r3, #1
 80143ca:	68bb      	ldr	r3, [r7, #8]
 80143cc:	689b      	ldr	r3, [r3, #8]
 80143ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80143d2:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80143d4:	4b6b      	ldr	r3, [pc, #428]	; (8014584 <USB_EPStartXfer+0x2e4>)
 80143d6:	400b      	ands	r3, r1
 80143d8:	69b9      	ldr	r1, [r7, #24]
 80143da:	0148      	lsls	r0, r1, #5
 80143dc:	69f9      	ldr	r1, [r7, #28]
 80143de:	4401      	add	r1, r0
 80143e0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80143e4:	4313      	orrs	r3, r2
 80143e6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80143e8:	69bb      	ldr	r3, [r7, #24]
 80143ea:	015a      	lsls	r2, r3, #5
 80143ec:	69fb      	ldr	r3, [r7, #28]
 80143ee:	4413      	add	r3, r2
 80143f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143f4:	691a      	ldr	r2, [r3, #16]
 80143f6:	68bb      	ldr	r3, [r7, #8]
 80143f8:	691b      	ldr	r3, [r3, #16]
 80143fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80143fe:	69b9      	ldr	r1, [r7, #24]
 8014400:	0148      	lsls	r0, r1, #5
 8014402:	69f9      	ldr	r1, [r7, #28]
 8014404:	4401      	add	r1, r0
 8014406:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801440a:	4313      	orrs	r3, r2
 801440c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801440e:	68bb      	ldr	r3, [r7, #8]
 8014410:	791b      	ldrb	r3, [r3, #4]
 8014412:	2b01      	cmp	r3, #1
 8014414:	d11f      	bne.n	8014456 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8014416:	69bb      	ldr	r3, [r7, #24]
 8014418:	015a      	lsls	r2, r3, #5
 801441a:	69fb      	ldr	r3, [r7, #28]
 801441c:	4413      	add	r3, r2
 801441e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014422:	691b      	ldr	r3, [r3, #16]
 8014424:	69ba      	ldr	r2, [r7, #24]
 8014426:	0151      	lsls	r1, r2, #5
 8014428:	69fa      	ldr	r2, [r7, #28]
 801442a:	440a      	add	r2, r1
 801442c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014430:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8014434:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8014436:	69bb      	ldr	r3, [r7, #24]
 8014438:	015a      	lsls	r2, r3, #5
 801443a:	69fb      	ldr	r3, [r7, #28]
 801443c:	4413      	add	r3, r2
 801443e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014442:	691b      	ldr	r3, [r3, #16]
 8014444:	69ba      	ldr	r2, [r7, #24]
 8014446:	0151      	lsls	r1, r2, #5
 8014448:	69fa      	ldr	r2, [r7, #28]
 801444a:	440a      	add	r2, r1
 801444c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014450:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014454:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8014456:	79fb      	ldrb	r3, [r7, #7]
 8014458:	2b01      	cmp	r3, #1
 801445a:	d14b      	bne.n	80144f4 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801445c:	68bb      	ldr	r3, [r7, #8]
 801445e:	69db      	ldr	r3, [r3, #28]
 8014460:	2b00      	cmp	r3, #0
 8014462:	d009      	beq.n	8014478 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8014464:	69bb      	ldr	r3, [r7, #24]
 8014466:	015a      	lsls	r2, r3, #5
 8014468:	69fb      	ldr	r3, [r7, #28]
 801446a:	4413      	add	r3, r2
 801446c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014470:	461a      	mov	r2, r3
 8014472:	68bb      	ldr	r3, [r7, #8]
 8014474:	69db      	ldr	r3, [r3, #28]
 8014476:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8014478:	68bb      	ldr	r3, [r7, #8]
 801447a:	791b      	ldrb	r3, [r3, #4]
 801447c:	2b01      	cmp	r3, #1
 801447e:	d128      	bne.n	80144d2 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014480:	69fb      	ldr	r3, [r7, #28]
 8014482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014486:	689b      	ldr	r3, [r3, #8]
 8014488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801448c:	2b00      	cmp	r3, #0
 801448e:	d110      	bne.n	80144b2 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014490:	69bb      	ldr	r3, [r7, #24]
 8014492:	015a      	lsls	r2, r3, #5
 8014494:	69fb      	ldr	r3, [r7, #28]
 8014496:	4413      	add	r3, r2
 8014498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	69ba      	ldr	r2, [r7, #24]
 80144a0:	0151      	lsls	r1, r2, #5
 80144a2:	69fa      	ldr	r2, [r7, #28]
 80144a4:	440a      	add	r2, r1
 80144a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80144aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80144ae:	6013      	str	r3, [r2, #0]
 80144b0:	e00f      	b.n	80144d2 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80144b2:	69bb      	ldr	r3, [r7, #24]
 80144b4:	015a      	lsls	r2, r3, #5
 80144b6:	69fb      	ldr	r3, [r7, #28]
 80144b8:	4413      	add	r3, r2
 80144ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	69ba      	ldr	r2, [r7, #24]
 80144c2:	0151      	lsls	r1, r2, #5
 80144c4:	69fa      	ldr	r2, [r7, #28]
 80144c6:	440a      	add	r2, r1
 80144c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80144cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80144d0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80144d2:	69bb      	ldr	r3, [r7, #24]
 80144d4:	015a      	lsls	r2, r3, #5
 80144d6:	69fb      	ldr	r3, [r7, #28]
 80144d8:	4413      	add	r3, r2
 80144da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	69ba      	ldr	r2, [r7, #24]
 80144e2:	0151      	lsls	r1, r2, #5
 80144e4:	69fa      	ldr	r2, [r7, #28]
 80144e6:	440a      	add	r2, r1
 80144e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80144ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80144f0:	6013      	str	r3, [r2, #0]
 80144f2:	e16a      	b.n	80147ca <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80144f4:	69bb      	ldr	r3, [r7, #24]
 80144f6:	015a      	lsls	r2, r3, #5
 80144f8:	69fb      	ldr	r3, [r7, #28]
 80144fa:	4413      	add	r3, r2
 80144fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	69ba      	ldr	r2, [r7, #24]
 8014504:	0151      	lsls	r1, r2, #5
 8014506:	69fa      	ldr	r2, [r7, #28]
 8014508:	440a      	add	r2, r1
 801450a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801450e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014512:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8014514:	68bb      	ldr	r3, [r7, #8]
 8014516:	791b      	ldrb	r3, [r3, #4]
 8014518:	2b01      	cmp	r3, #1
 801451a:	d015      	beq.n	8014548 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801451c:	68bb      	ldr	r3, [r7, #8]
 801451e:	691b      	ldr	r3, [r3, #16]
 8014520:	2b00      	cmp	r3, #0
 8014522:	f000 8152 	beq.w	80147ca <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014526:	69fb      	ldr	r3, [r7, #28]
 8014528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801452c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801452e:	68bb      	ldr	r3, [r7, #8]
 8014530:	781b      	ldrb	r3, [r3, #0]
 8014532:	f003 030f 	and.w	r3, r3, #15
 8014536:	2101      	movs	r1, #1
 8014538:	fa01 f303 	lsl.w	r3, r1, r3
 801453c:	69f9      	ldr	r1, [r7, #28]
 801453e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014542:	4313      	orrs	r3, r2
 8014544:	634b      	str	r3, [r1, #52]	; 0x34
 8014546:	e140      	b.n	80147ca <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014548:	69fb      	ldr	r3, [r7, #28]
 801454a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801454e:	689b      	ldr	r3, [r3, #8]
 8014550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014554:	2b00      	cmp	r3, #0
 8014556:	d117      	bne.n	8014588 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014558:	69bb      	ldr	r3, [r7, #24]
 801455a:	015a      	lsls	r2, r3, #5
 801455c:	69fb      	ldr	r3, [r7, #28]
 801455e:	4413      	add	r3, r2
 8014560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014564:	681b      	ldr	r3, [r3, #0]
 8014566:	69ba      	ldr	r2, [r7, #24]
 8014568:	0151      	lsls	r1, r2, #5
 801456a:	69fa      	ldr	r2, [r7, #28]
 801456c:	440a      	add	r2, r1
 801456e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014572:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014576:	6013      	str	r3, [r2, #0]
 8014578:	e016      	b.n	80145a8 <USB_EPStartXfer+0x308>
 801457a:	bf00      	nop
 801457c:	e007ffff 	.word	0xe007ffff
 8014580:	fff80000 	.word	0xfff80000
 8014584:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014588:	69bb      	ldr	r3, [r7, #24]
 801458a:	015a      	lsls	r2, r3, #5
 801458c:	69fb      	ldr	r3, [r7, #28]
 801458e:	4413      	add	r3, r2
 8014590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	69ba      	ldr	r2, [r7, #24]
 8014598:	0151      	lsls	r1, r2, #5
 801459a:	69fa      	ldr	r2, [r7, #28]
 801459c:	440a      	add	r2, r1
 801459e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80145a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80145a6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80145a8:	68bb      	ldr	r3, [r7, #8]
 80145aa:	68d9      	ldr	r1, [r3, #12]
 80145ac:	68bb      	ldr	r3, [r7, #8]
 80145ae:	781a      	ldrb	r2, [r3, #0]
 80145b0:	68bb      	ldr	r3, [r7, #8]
 80145b2:	691b      	ldr	r3, [r3, #16]
 80145b4:	b298      	uxth	r0, r3
 80145b6:	79fb      	ldrb	r3, [r7, #7]
 80145b8:	9300      	str	r3, [sp, #0]
 80145ba:	4603      	mov	r3, r0
 80145bc:	68f8      	ldr	r0, [r7, #12]
 80145be:	f000 f9b9 	bl	8014934 <USB_WritePacket>
 80145c2:	e102      	b.n	80147ca <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80145c4:	69bb      	ldr	r3, [r7, #24]
 80145c6:	015a      	lsls	r2, r3, #5
 80145c8:	69fb      	ldr	r3, [r7, #28]
 80145ca:	4413      	add	r3, r2
 80145cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145d0:	691a      	ldr	r2, [r3, #16]
 80145d2:	69bb      	ldr	r3, [r7, #24]
 80145d4:	0159      	lsls	r1, r3, #5
 80145d6:	69fb      	ldr	r3, [r7, #28]
 80145d8:	440b      	add	r3, r1
 80145da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145de:	4619      	mov	r1, r3
 80145e0:	4b7c      	ldr	r3, [pc, #496]	; (80147d4 <USB_EPStartXfer+0x534>)
 80145e2:	4013      	ands	r3, r2
 80145e4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80145e6:	69bb      	ldr	r3, [r7, #24]
 80145e8:	015a      	lsls	r2, r3, #5
 80145ea:	69fb      	ldr	r3, [r7, #28]
 80145ec:	4413      	add	r3, r2
 80145ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145f2:	691a      	ldr	r2, [r3, #16]
 80145f4:	69bb      	ldr	r3, [r7, #24]
 80145f6:	0159      	lsls	r1, r3, #5
 80145f8:	69fb      	ldr	r3, [r7, #28]
 80145fa:	440b      	add	r3, r1
 80145fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014600:	4619      	mov	r1, r3
 8014602:	4b75      	ldr	r3, [pc, #468]	; (80147d8 <USB_EPStartXfer+0x538>)
 8014604:	4013      	ands	r3, r2
 8014606:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8014608:	69bb      	ldr	r3, [r7, #24]
 801460a:	2b00      	cmp	r3, #0
 801460c:	d12f      	bne.n	801466e <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 801460e:	68bb      	ldr	r3, [r7, #8]
 8014610:	691b      	ldr	r3, [r3, #16]
 8014612:	2b00      	cmp	r3, #0
 8014614:	d003      	beq.n	801461e <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8014616:	68bb      	ldr	r3, [r7, #8]
 8014618:	689a      	ldr	r2, [r3, #8]
 801461a:	68bb      	ldr	r3, [r7, #8]
 801461c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 801461e:	68bb      	ldr	r3, [r7, #8]
 8014620:	689a      	ldr	r2, [r3, #8]
 8014622:	68bb      	ldr	r3, [r7, #8]
 8014624:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8014626:	69bb      	ldr	r3, [r7, #24]
 8014628:	015a      	lsls	r2, r3, #5
 801462a:	69fb      	ldr	r3, [r7, #28]
 801462c:	4413      	add	r3, r2
 801462e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014632:	691a      	ldr	r2, [r3, #16]
 8014634:	68bb      	ldr	r3, [r7, #8]
 8014636:	6a1b      	ldr	r3, [r3, #32]
 8014638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801463c:	69b9      	ldr	r1, [r7, #24]
 801463e:	0148      	lsls	r0, r1, #5
 8014640:	69f9      	ldr	r1, [r7, #28]
 8014642:	4401      	add	r1, r0
 8014644:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014648:	4313      	orrs	r3, r2
 801464a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801464c:	69bb      	ldr	r3, [r7, #24]
 801464e:	015a      	lsls	r2, r3, #5
 8014650:	69fb      	ldr	r3, [r7, #28]
 8014652:	4413      	add	r3, r2
 8014654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014658:	691b      	ldr	r3, [r3, #16]
 801465a:	69ba      	ldr	r2, [r7, #24]
 801465c:	0151      	lsls	r1, r2, #5
 801465e:	69fa      	ldr	r2, [r7, #28]
 8014660:	440a      	add	r2, r1
 8014662:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014666:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801466a:	6113      	str	r3, [r2, #16]
 801466c:	e05f      	b.n	801472e <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 801466e:	68bb      	ldr	r3, [r7, #8]
 8014670:	691b      	ldr	r3, [r3, #16]
 8014672:	2b00      	cmp	r3, #0
 8014674:	d123      	bne.n	80146be <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8014676:	69bb      	ldr	r3, [r7, #24]
 8014678:	015a      	lsls	r2, r3, #5
 801467a:	69fb      	ldr	r3, [r7, #28]
 801467c:	4413      	add	r3, r2
 801467e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014682:	691a      	ldr	r2, [r3, #16]
 8014684:	68bb      	ldr	r3, [r7, #8]
 8014686:	689b      	ldr	r3, [r3, #8]
 8014688:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801468c:	69b9      	ldr	r1, [r7, #24]
 801468e:	0148      	lsls	r0, r1, #5
 8014690:	69f9      	ldr	r1, [r7, #28]
 8014692:	4401      	add	r1, r0
 8014694:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014698:	4313      	orrs	r3, r2
 801469a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801469c:	69bb      	ldr	r3, [r7, #24]
 801469e:	015a      	lsls	r2, r3, #5
 80146a0:	69fb      	ldr	r3, [r7, #28]
 80146a2:	4413      	add	r3, r2
 80146a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80146a8:	691b      	ldr	r3, [r3, #16]
 80146aa:	69ba      	ldr	r2, [r7, #24]
 80146ac:	0151      	lsls	r1, r2, #5
 80146ae:	69fa      	ldr	r2, [r7, #28]
 80146b0:	440a      	add	r2, r1
 80146b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80146b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80146ba:	6113      	str	r3, [r2, #16]
 80146bc:	e037      	b.n	801472e <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80146be:	68bb      	ldr	r3, [r7, #8]
 80146c0:	691a      	ldr	r2, [r3, #16]
 80146c2:	68bb      	ldr	r3, [r7, #8]
 80146c4:	689b      	ldr	r3, [r3, #8]
 80146c6:	4413      	add	r3, r2
 80146c8:	1e5a      	subs	r2, r3, #1
 80146ca:	68bb      	ldr	r3, [r7, #8]
 80146cc:	689b      	ldr	r3, [r3, #8]
 80146ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80146d2:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80146d4:	68bb      	ldr	r3, [r7, #8]
 80146d6:	689b      	ldr	r3, [r3, #8]
 80146d8:	8afa      	ldrh	r2, [r7, #22]
 80146da:	fb03 f202 	mul.w	r2, r3, r2
 80146de:	68bb      	ldr	r3, [r7, #8]
 80146e0:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80146e2:	69bb      	ldr	r3, [r7, #24]
 80146e4:	015a      	lsls	r2, r3, #5
 80146e6:	69fb      	ldr	r3, [r7, #28]
 80146e8:	4413      	add	r3, r2
 80146ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80146ee:	691a      	ldr	r2, [r3, #16]
 80146f0:	8afb      	ldrh	r3, [r7, #22]
 80146f2:	04d9      	lsls	r1, r3, #19
 80146f4:	4b39      	ldr	r3, [pc, #228]	; (80147dc <USB_EPStartXfer+0x53c>)
 80146f6:	400b      	ands	r3, r1
 80146f8:	69b9      	ldr	r1, [r7, #24]
 80146fa:	0148      	lsls	r0, r1, #5
 80146fc:	69f9      	ldr	r1, [r7, #28]
 80146fe:	4401      	add	r1, r0
 8014700:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014704:	4313      	orrs	r3, r2
 8014706:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8014708:	69bb      	ldr	r3, [r7, #24]
 801470a:	015a      	lsls	r2, r3, #5
 801470c:	69fb      	ldr	r3, [r7, #28]
 801470e:	4413      	add	r3, r2
 8014710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014714:	691a      	ldr	r2, [r3, #16]
 8014716:	68bb      	ldr	r3, [r7, #8]
 8014718:	6a1b      	ldr	r3, [r3, #32]
 801471a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801471e:	69b9      	ldr	r1, [r7, #24]
 8014720:	0148      	lsls	r0, r1, #5
 8014722:	69f9      	ldr	r1, [r7, #28]
 8014724:	4401      	add	r1, r0
 8014726:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801472a:	4313      	orrs	r3, r2
 801472c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 801472e:	79fb      	ldrb	r3, [r7, #7]
 8014730:	2b01      	cmp	r3, #1
 8014732:	d10d      	bne.n	8014750 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8014734:	68bb      	ldr	r3, [r7, #8]
 8014736:	68db      	ldr	r3, [r3, #12]
 8014738:	2b00      	cmp	r3, #0
 801473a:	d009      	beq.n	8014750 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801473c:	68bb      	ldr	r3, [r7, #8]
 801473e:	68d9      	ldr	r1, [r3, #12]
 8014740:	69bb      	ldr	r3, [r7, #24]
 8014742:	015a      	lsls	r2, r3, #5
 8014744:	69fb      	ldr	r3, [r7, #28]
 8014746:	4413      	add	r3, r2
 8014748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801474c:	460a      	mov	r2, r1
 801474e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8014750:	68bb      	ldr	r3, [r7, #8]
 8014752:	791b      	ldrb	r3, [r3, #4]
 8014754:	2b01      	cmp	r3, #1
 8014756:	d128      	bne.n	80147aa <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014758:	69fb      	ldr	r3, [r7, #28]
 801475a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801475e:	689b      	ldr	r3, [r3, #8]
 8014760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014764:	2b00      	cmp	r3, #0
 8014766:	d110      	bne.n	801478a <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8014768:	69bb      	ldr	r3, [r7, #24]
 801476a:	015a      	lsls	r2, r3, #5
 801476c:	69fb      	ldr	r3, [r7, #28]
 801476e:	4413      	add	r3, r2
 8014770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	69ba      	ldr	r2, [r7, #24]
 8014778:	0151      	lsls	r1, r2, #5
 801477a:	69fa      	ldr	r2, [r7, #28]
 801477c:	440a      	add	r2, r1
 801477e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014782:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014786:	6013      	str	r3, [r2, #0]
 8014788:	e00f      	b.n	80147aa <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801478a:	69bb      	ldr	r3, [r7, #24]
 801478c:	015a      	lsls	r2, r3, #5
 801478e:	69fb      	ldr	r3, [r7, #28]
 8014790:	4413      	add	r3, r2
 8014792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	69ba      	ldr	r2, [r7, #24]
 801479a:	0151      	lsls	r1, r2, #5
 801479c:	69fa      	ldr	r2, [r7, #28]
 801479e:	440a      	add	r2, r1
 80147a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80147a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80147a8:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80147aa:	69bb      	ldr	r3, [r7, #24]
 80147ac:	015a      	lsls	r2, r3, #5
 80147ae:	69fb      	ldr	r3, [r7, #28]
 80147b0:	4413      	add	r3, r2
 80147b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80147b6:	681b      	ldr	r3, [r3, #0]
 80147b8:	69ba      	ldr	r2, [r7, #24]
 80147ba:	0151      	lsls	r1, r2, #5
 80147bc:	69fa      	ldr	r2, [r7, #28]
 80147be:	440a      	add	r2, r1
 80147c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80147c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80147c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80147ca:	2300      	movs	r3, #0
}
 80147cc:	4618      	mov	r0, r3
 80147ce:	3720      	adds	r7, #32
 80147d0:	46bd      	mov	sp, r7
 80147d2:	bd80      	pop	{r7, pc}
 80147d4:	fff80000 	.word	0xfff80000
 80147d8:	e007ffff 	.word	0xe007ffff
 80147dc:	1ff80000 	.word	0x1ff80000

080147e0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80147e0:	b480      	push	{r7}
 80147e2:	b087      	sub	sp, #28
 80147e4:	af00      	add	r7, sp, #0
 80147e6:	6078      	str	r0, [r7, #4]
 80147e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80147ea:	2300      	movs	r3, #0
 80147ec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80147ee:	2300      	movs	r3, #0
 80147f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80147f6:	683b      	ldr	r3, [r7, #0]
 80147f8:	785b      	ldrb	r3, [r3, #1]
 80147fa:	2b01      	cmp	r3, #1
 80147fc:	d14a      	bne.n	8014894 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80147fe:	683b      	ldr	r3, [r7, #0]
 8014800:	781b      	ldrb	r3, [r3, #0]
 8014802:	015a      	lsls	r2, r3, #5
 8014804:	693b      	ldr	r3, [r7, #16]
 8014806:	4413      	add	r3, r2
 8014808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014812:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014816:	f040 8086 	bne.w	8014926 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801481a:	683b      	ldr	r3, [r7, #0]
 801481c:	781b      	ldrb	r3, [r3, #0]
 801481e:	015a      	lsls	r2, r3, #5
 8014820:	693b      	ldr	r3, [r7, #16]
 8014822:	4413      	add	r3, r2
 8014824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	683a      	ldr	r2, [r7, #0]
 801482c:	7812      	ldrb	r2, [r2, #0]
 801482e:	0151      	lsls	r1, r2, #5
 8014830:	693a      	ldr	r2, [r7, #16]
 8014832:	440a      	add	r2, r1
 8014834:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014838:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801483c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801483e:	683b      	ldr	r3, [r7, #0]
 8014840:	781b      	ldrb	r3, [r3, #0]
 8014842:	015a      	lsls	r2, r3, #5
 8014844:	693b      	ldr	r3, [r7, #16]
 8014846:	4413      	add	r3, r2
 8014848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	683a      	ldr	r2, [r7, #0]
 8014850:	7812      	ldrb	r2, [r2, #0]
 8014852:	0151      	lsls	r1, r2, #5
 8014854:	693a      	ldr	r2, [r7, #16]
 8014856:	440a      	add	r2, r1
 8014858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801485c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014860:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	3301      	adds	r3, #1
 8014866:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	f242 7210 	movw	r2, #10000	; 0x2710
 801486e:	4293      	cmp	r3, r2
 8014870:	d902      	bls.n	8014878 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8014872:	2301      	movs	r3, #1
 8014874:	75fb      	strb	r3, [r7, #23]
          break;
 8014876:	e056      	b.n	8014926 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8014878:	683b      	ldr	r3, [r7, #0]
 801487a:	781b      	ldrb	r3, [r3, #0]
 801487c:	015a      	lsls	r2, r3, #5
 801487e:	693b      	ldr	r3, [r7, #16]
 8014880:	4413      	add	r3, r2
 8014882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014886:	681b      	ldr	r3, [r3, #0]
 8014888:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801488c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014890:	d0e7      	beq.n	8014862 <USB_EPStopXfer+0x82>
 8014892:	e048      	b.n	8014926 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014894:	683b      	ldr	r3, [r7, #0]
 8014896:	781b      	ldrb	r3, [r3, #0]
 8014898:	015a      	lsls	r2, r3, #5
 801489a:	693b      	ldr	r3, [r7, #16]
 801489c:	4413      	add	r3, r2
 801489e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80148a2:	681b      	ldr	r3, [r3, #0]
 80148a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80148a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80148ac:	d13b      	bne.n	8014926 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80148ae:	683b      	ldr	r3, [r7, #0]
 80148b0:	781b      	ldrb	r3, [r3, #0]
 80148b2:	015a      	lsls	r2, r3, #5
 80148b4:	693b      	ldr	r3, [r7, #16]
 80148b6:	4413      	add	r3, r2
 80148b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	683a      	ldr	r2, [r7, #0]
 80148c0:	7812      	ldrb	r2, [r2, #0]
 80148c2:	0151      	lsls	r1, r2, #5
 80148c4:	693a      	ldr	r2, [r7, #16]
 80148c6:	440a      	add	r2, r1
 80148c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80148cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80148d0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80148d2:	683b      	ldr	r3, [r7, #0]
 80148d4:	781b      	ldrb	r3, [r3, #0]
 80148d6:	015a      	lsls	r2, r3, #5
 80148d8:	693b      	ldr	r3, [r7, #16]
 80148da:	4413      	add	r3, r2
 80148dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	683a      	ldr	r2, [r7, #0]
 80148e4:	7812      	ldrb	r2, [r2, #0]
 80148e6:	0151      	lsls	r1, r2, #5
 80148e8:	693a      	ldr	r2, [r7, #16]
 80148ea:	440a      	add	r2, r1
 80148ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80148f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80148f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	3301      	adds	r3, #1
 80148fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8014902:	4293      	cmp	r3, r2
 8014904:	d902      	bls.n	801490c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8014906:	2301      	movs	r3, #1
 8014908:	75fb      	strb	r3, [r7, #23]
          break;
 801490a:	e00c      	b.n	8014926 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 801490c:	683b      	ldr	r3, [r7, #0]
 801490e:	781b      	ldrb	r3, [r3, #0]
 8014910:	015a      	lsls	r2, r3, #5
 8014912:	693b      	ldr	r3, [r7, #16]
 8014914:	4413      	add	r3, r2
 8014916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014920:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014924:	d0e7      	beq.n	80148f6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8014926:	7dfb      	ldrb	r3, [r7, #23]
}
 8014928:	4618      	mov	r0, r3
 801492a:	371c      	adds	r7, #28
 801492c:	46bd      	mov	sp, r7
 801492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014932:	4770      	bx	lr

08014934 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8014934:	b480      	push	{r7}
 8014936:	b089      	sub	sp, #36	; 0x24
 8014938:	af00      	add	r7, sp, #0
 801493a:	60f8      	str	r0, [r7, #12]
 801493c:	60b9      	str	r1, [r7, #8]
 801493e:	4611      	mov	r1, r2
 8014940:	461a      	mov	r2, r3
 8014942:	460b      	mov	r3, r1
 8014944:	71fb      	strb	r3, [r7, #7]
 8014946:	4613      	mov	r3, r2
 8014948:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801494e:	68bb      	ldr	r3, [r7, #8]
 8014950:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8014952:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014956:	2b00      	cmp	r3, #0
 8014958:	d123      	bne.n	80149a2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801495a:	88bb      	ldrh	r3, [r7, #4]
 801495c:	3303      	adds	r3, #3
 801495e:	089b      	lsrs	r3, r3, #2
 8014960:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8014962:	2300      	movs	r3, #0
 8014964:	61bb      	str	r3, [r7, #24]
 8014966:	e018      	b.n	801499a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014968:	79fb      	ldrb	r3, [r7, #7]
 801496a:	031a      	lsls	r2, r3, #12
 801496c:	697b      	ldr	r3, [r7, #20]
 801496e:	4413      	add	r3, r2
 8014970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014974:	461a      	mov	r2, r3
 8014976:	69fb      	ldr	r3, [r7, #28]
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	6013      	str	r3, [r2, #0]
      pSrc++;
 801497c:	69fb      	ldr	r3, [r7, #28]
 801497e:	3301      	adds	r3, #1
 8014980:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014982:	69fb      	ldr	r3, [r7, #28]
 8014984:	3301      	adds	r3, #1
 8014986:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014988:	69fb      	ldr	r3, [r7, #28]
 801498a:	3301      	adds	r3, #1
 801498c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801498e:	69fb      	ldr	r3, [r7, #28]
 8014990:	3301      	adds	r3, #1
 8014992:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8014994:	69bb      	ldr	r3, [r7, #24]
 8014996:	3301      	adds	r3, #1
 8014998:	61bb      	str	r3, [r7, #24]
 801499a:	69ba      	ldr	r2, [r7, #24]
 801499c:	693b      	ldr	r3, [r7, #16]
 801499e:	429a      	cmp	r2, r3
 80149a0:	d3e2      	bcc.n	8014968 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80149a2:	2300      	movs	r3, #0
}
 80149a4:	4618      	mov	r0, r3
 80149a6:	3724      	adds	r7, #36	; 0x24
 80149a8:	46bd      	mov	sp, r7
 80149aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ae:	4770      	bx	lr

080149b0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80149b0:	b480      	push	{r7}
 80149b2:	b08b      	sub	sp, #44	; 0x2c
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	60f8      	str	r0, [r7, #12]
 80149b8:	60b9      	str	r1, [r7, #8]
 80149ba:	4613      	mov	r3, r2
 80149bc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80149c2:	68bb      	ldr	r3, [r7, #8]
 80149c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80149c6:	88fb      	ldrh	r3, [r7, #6]
 80149c8:	089b      	lsrs	r3, r3, #2
 80149ca:	b29b      	uxth	r3, r3
 80149cc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80149ce:	88fb      	ldrh	r3, [r7, #6]
 80149d0:	f003 0303 	and.w	r3, r3, #3
 80149d4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80149d6:	2300      	movs	r3, #0
 80149d8:	623b      	str	r3, [r7, #32]
 80149da:	e014      	b.n	8014a06 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80149dc:	69bb      	ldr	r3, [r7, #24]
 80149de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80149e2:	681a      	ldr	r2, [r3, #0]
 80149e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149e6:	601a      	str	r2, [r3, #0]
    pDest++;
 80149e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149ea:	3301      	adds	r3, #1
 80149ec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80149ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149f0:	3301      	adds	r3, #1
 80149f2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80149f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149f6:	3301      	adds	r3, #1
 80149f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80149fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149fc:	3301      	adds	r3, #1
 80149fe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8014a00:	6a3b      	ldr	r3, [r7, #32]
 8014a02:	3301      	adds	r3, #1
 8014a04:	623b      	str	r3, [r7, #32]
 8014a06:	6a3a      	ldr	r2, [r7, #32]
 8014a08:	697b      	ldr	r3, [r7, #20]
 8014a0a:	429a      	cmp	r2, r3
 8014a0c:	d3e6      	bcc.n	80149dc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8014a0e:	8bfb      	ldrh	r3, [r7, #30]
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d01e      	beq.n	8014a52 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8014a14:	2300      	movs	r3, #0
 8014a16:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8014a18:	69bb      	ldr	r3, [r7, #24]
 8014a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014a1e:	461a      	mov	r2, r3
 8014a20:	f107 0310 	add.w	r3, r7, #16
 8014a24:	6812      	ldr	r2, [r2, #0]
 8014a26:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8014a28:	693a      	ldr	r2, [r7, #16]
 8014a2a:	6a3b      	ldr	r3, [r7, #32]
 8014a2c:	b2db      	uxtb	r3, r3
 8014a2e:	00db      	lsls	r3, r3, #3
 8014a30:	fa22 f303 	lsr.w	r3, r2, r3
 8014a34:	b2da      	uxtb	r2, r3
 8014a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a38:	701a      	strb	r2, [r3, #0]
      i++;
 8014a3a:	6a3b      	ldr	r3, [r7, #32]
 8014a3c:	3301      	adds	r3, #1
 8014a3e:	623b      	str	r3, [r7, #32]
      pDest++;
 8014a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a42:	3301      	adds	r3, #1
 8014a44:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8014a46:	8bfb      	ldrh	r3, [r7, #30]
 8014a48:	3b01      	subs	r3, #1
 8014a4a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8014a4c:	8bfb      	ldrh	r3, [r7, #30]
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d1ea      	bne.n	8014a28 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8014a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014a54:	4618      	mov	r0, r3
 8014a56:	372c      	adds	r7, #44	; 0x2c
 8014a58:	46bd      	mov	sp, r7
 8014a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a5e:	4770      	bx	lr

08014a60 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014a60:	b480      	push	{r7}
 8014a62:	b085      	sub	sp, #20
 8014a64:	af00      	add	r7, sp, #0
 8014a66:	6078      	str	r0, [r7, #4]
 8014a68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014a6e:	683b      	ldr	r3, [r7, #0]
 8014a70:	781b      	ldrb	r3, [r3, #0]
 8014a72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014a74:	683b      	ldr	r3, [r7, #0]
 8014a76:	785b      	ldrb	r3, [r3, #1]
 8014a78:	2b01      	cmp	r3, #1
 8014a7a:	d12c      	bne.n	8014ad6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014a7c:	68bb      	ldr	r3, [r7, #8]
 8014a7e:	015a      	lsls	r2, r3, #5
 8014a80:	68fb      	ldr	r3, [r7, #12]
 8014a82:	4413      	add	r3, r2
 8014a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	db12      	blt.n	8014ab4 <USB_EPSetStall+0x54>
 8014a8e:	68bb      	ldr	r3, [r7, #8]
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d00f      	beq.n	8014ab4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8014a94:	68bb      	ldr	r3, [r7, #8]
 8014a96:	015a      	lsls	r2, r3, #5
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	4413      	add	r3, r2
 8014a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014aa0:	681b      	ldr	r3, [r3, #0]
 8014aa2:	68ba      	ldr	r2, [r7, #8]
 8014aa4:	0151      	lsls	r1, r2, #5
 8014aa6:	68fa      	ldr	r2, [r7, #12]
 8014aa8:	440a      	add	r2, r1
 8014aaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014aae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014ab2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8014ab4:	68bb      	ldr	r3, [r7, #8]
 8014ab6:	015a      	lsls	r2, r3, #5
 8014ab8:	68fb      	ldr	r3, [r7, #12]
 8014aba:	4413      	add	r3, r2
 8014abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014ac0:	681b      	ldr	r3, [r3, #0]
 8014ac2:	68ba      	ldr	r2, [r7, #8]
 8014ac4:	0151      	lsls	r1, r2, #5
 8014ac6:	68fa      	ldr	r2, [r7, #12]
 8014ac8:	440a      	add	r2, r1
 8014aca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014ace:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014ad2:	6013      	str	r3, [r2, #0]
 8014ad4:	e02b      	b.n	8014b2e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014ad6:	68bb      	ldr	r3, [r7, #8]
 8014ad8:	015a      	lsls	r2, r3, #5
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	4413      	add	r3, r2
 8014ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	db12      	blt.n	8014b0e <USB_EPSetStall+0xae>
 8014ae8:	68bb      	ldr	r3, [r7, #8]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d00f      	beq.n	8014b0e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8014aee:	68bb      	ldr	r3, [r7, #8]
 8014af0:	015a      	lsls	r2, r3, #5
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	4413      	add	r3, r2
 8014af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014afa:	681b      	ldr	r3, [r3, #0]
 8014afc:	68ba      	ldr	r2, [r7, #8]
 8014afe:	0151      	lsls	r1, r2, #5
 8014b00:	68fa      	ldr	r2, [r7, #12]
 8014b02:	440a      	add	r2, r1
 8014b04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014b08:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014b0c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8014b0e:	68bb      	ldr	r3, [r7, #8]
 8014b10:	015a      	lsls	r2, r3, #5
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	4413      	add	r3, r2
 8014b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	68ba      	ldr	r2, [r7, #8]
 8014b1e:	0151      	lsls	r1, r2, #5
 8014b20:	68fa      	ldr	r2, [r7, #12]
 8014b22:	440a      	add	r2, r1
 8014b24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014b28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014b2c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014b2e:	2300      	movs	r3, #0
}
 8014b30:	4618      	mov	r0, r3
 8014b32:	3714      	adds	r7, #20
 8014b34:	46bd      	mov	sp, r7
 8014b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b3a:	4770      	bx	lr

08014b3c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014b3c:	b480      	push	{r7}
 8014b3e:	b085      	sub	sp, #20
 8014b40:	af00      	add	r7, sp, #0
 8014b42:	6078      	str	r0, [r7, #4]
 8014b44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014b4a:	683b      	ldr	r3, [r7, #0]
 8014b4c:	781b      	ldrb	r3, [r3, #0]
 8014b4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014b50:	683b      	ldr	r3, [r7, #0]
 8014b52:	785b      	ldrb	r3, [r3, #1]
 8014b54:	2b01      	cmp	r3, #1
 8014b56:	d128      	bne.n	8014baa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8014b58:	68bb      	ldr	r3, [r7, #8]
 8014b5a:	015a      	lsls	r2, r3, #5
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	4413      	add	r3, r2
 8014b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	68ba      	ldr	r2, [r7, #8]
 8014b68:	0151      	lsls	r1, r2, #5
 8014b6a:	68fa      	ldr	r2, [r7, #12]
 8014b6c:	440a      	add	r2, r1
 8014b6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014b72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014b76:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014b78:	683b      	ldr	r3, [r7, #0]
 8014b7a:	791b      	ldrb	r3, [r3, #4]
 8014b7c:	2b03      	cmp	r3, #3
 8014b7e:	d003      	beq.n	8014b88 <USB_EPClearStall+0x4c>
 8014b80:	683b      	ldr	r3, [r7, #0]
 8014b82:	791b      	ldrb	r3, [r3, #4]
 8014b84:	2b02      	cmp	r3, #2
 8014b86:	d138      	bne.n	8014bfa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014b88:	68bb      	ldr	r3, [r7, #8]
 8014b8a:	015a      	lsls	r2, r3, #5
 8014b8c:	68fb      	ldr	r3, [r7, #12]
 8014b8e:	4413      	add	r3, r2
 8014b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	68ba      	ldr	r2, [r7, #8]
 8014b98:	0151      	lsls	r1, r2, #5
 8014b9a:	68fa      	ldr	r2, [r7, #12]
 8014b9c:	440a      	add	r2, r1
 8014b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014ba6:	6013      	str	r3, [r2, #0]
 8014ba8:	e027      	b.n	8014bfa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8014baa:	68bb      	ldr	r3, [r7, #8]
 8014bac:	015a      	lsls	r2, r3, #5
 8014bae:	68fb      	ldr	r3, [r7, #12]
 8014bb0:	4413      	add	r3, r2
 8014bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014bb6:	681b      	ldr	r3, [r3, #0]
 8014bb8:	68ba      	ldr	r2, [r7, #8]
 8014bba:	0151      	lsls	r1, r2, #5
 8014bbc:	68fa      	ldr	r2, [r7, #12]
 8014bbe:	440a      	add	r2, r1
 8014bc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014bc4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014bc8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014bca:	683b      	ldr	r3, [r7, #0]
 8014bcc:	791b      	ldrb	r3, [r3, #4]
 8014bce:	2b03      	cmp	r3, #3
 8014bd0:	d003      	beq.n	8014bda <USB_EPClearStall+0x9e>
 8014bd2:	683b      	ldr	r3, [r7, #0]
 8014bd4:	791b      	ldrb	r3, [r3, #4]
 8014bd6:	2b02      	cmp	r3, #2
 8014bd8:	d10f      	bne.n	8014bfa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014bda:	68bb      	ldr	r3, [r7, #8]
 8014bdc:	015a      	lsls	r2, r3, #5
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	4413      	add	r3, r2
 8014be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014be6:	681b      	ldr	r3, [r3, #0]
 8014be8:	68ba      	ldr	r2, [r7, #8]
 8014bea:	0151      	lsls	r1, r2, #5
 8014bec:	68fa      	ldr	r2, [r7, #12]
 8014bee:	440a      	add	r2, r1
 8014bf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014bf8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8014bfa:	2300      	movs	r3, #0
}
 8014bfc:	4618      	mov	r0, r3
 8014bfe:	3714      	adds	r7, #20
 8014c00:	46bd      	mov	sp, r7
 8014c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c06:	4770      	bx	lr

08014c08 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8014c08:	b480      	push	{r7}
 8014c0a:	b085      	sub	sp, #20
 8014c0c:	af00      	add	r7, sp, #0
 8014c0e:	6078      	str	r0, [r7, #4]
 8014c10:	460b      	mov	r3, r1
 8014c12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014c1e:	681b      	ldr	r3, [r3, #0]
 8014c20:	68fa      	ldr	r2, [r7, #12]
 8014c22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014c26:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8014c2a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014c32:	681a      	ldr	r2, [r3, #0]
 8014c34:	78fb      	ldrb	r3, [r7, #3]
 8014c36:	011b      	lsls	r3, r3, #4
 8014c38:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8014c3c:	68f9      	ldr	r1, [r7, #12]
 8014c3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014c42:	4313      	orrs	r3, r2
 8014c44:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8014c46:	2300      	movs	r3, #0
}
 8014c48:	4618      	mov	r0, r3
 8014c4a:	3714      	adds	r7, #20
 8014c4c:	46bd      	mov	sp, r7
 8014c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c52:	4770      	bx	lr

08014c54 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014c54:	b480      	push	{r7}
 8014c56:	b085      	sub	sp, #20
 8014c58:	af00      	add	r7, sp, #0
 8014c5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	68fa      	ldr	r2, [r7, #12]
 8014c6a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014c6e:	f023 0303 	bic.w	r3, r3, #3
 8014c72:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014c7a:	685b      	ldr	r3, [r3, #4]
 8014c7c:	68fa      	ldr	r2, [r7, #12]
 8014c7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014c82:	f023 0302 	bic.w	r3, r3, #2
 8014c86:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014c88:	2300      	movs	r3, #0
}
 8014c8a:	4618      	mov	r0, r3
 8014c8c:	3714      	adds	r7, #20
 8014c8e:	46bd      	mov	sp, r7
 8014c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c94:	4770      	bx	lr

08014c96 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014c96:	b480      	push	{r7}
 8014c98:	b085      	sub	sp, #20
 8014c9a:	af00      	add	r7, sp, #0
 8014c9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014ca8:	681b      	ldr	r3, [r3, #0]
 8014caa:	68fa      	ldr	r2, [r7, #12]
 8014cac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014cb0:	f023 0303 	bic.w	r3, r3, #3
 8014cb4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014cbc:	685b      	ldr	r3, [r3, #4]
 8014cbe:	68fa      	ldr	r2, [r7, #12]
 8014cc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014cc4:	f043 0302 	orr.w	r3, r3, #2
 8014cc8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014cca:	2300      	movs	r3, #0
}
 8014ccc:	4618      	mov	r0, r3
 8014cce:	3714      	adds	r7, #20
 8014cd0:	46bd      	mov	sp, r7
 8014cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cd6:	4770      	bx	lr

08014cd8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8014cd8:	b480      	push	{r7}
 8014cda:	b085      	sub	sp, #20
 8014cdc:	af00      	add	r7, sp, #0
 8014cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	695b      	ldr	r3, [r3, #20]
 8014ce4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	699b      	ldr	r3, [r3, #24]
 8014cea:	68fa      	ldr	r2, [r7, #12]
 8014cec:	4013      	ands	r3, r2
 8014cee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8014cf0:	68fb      	ldr	r3, [r7, #12]
}
 8014cf2:	4618      	mov	r0, r3
 8014cf4:	3714      	adds	r7, #20
 8014cf6:	46bd      	mov	sp, r7
 8014cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cfc:	4770      	bx	lr

08014cfe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014cfe:	b480      	push	{r7}
 8014d00:	b085      	sub	sp, #20
 8014d02:	af00      	add	r7, sp, #0
 8014d04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014d10:	699b      	ldr	r3, [r3, #24]
 8014d12:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014d1a:	69db      	ldr	r3, [r3, #28]
 8014d1c:	68ba      	ldr	r2, [r7, #8]
 8014d1e:	4013      	ands	r3, r2
 8014d20:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8014d22:	68bb      	ldr	r3, [r7, #8]
 8014d24:	0c1b      	lsrs	r3, r3, #16
}
 8014d26:	4618      	mov	r0, r3
 8014d28:	3714      	adds	r7, #20
 8014d2a:	46bd      	mov	sp, r7
 8014d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d30:	4770      	bx	lr

08014d32 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014d32:	b480      	push	{r7}
 8014d34:	b085      	sub	sp, #20
 8014d36:	af00      	add	r7, sp, #0
 8014d38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014d3e:	68fb      	ldr	r3, [r7, #12]
 8014d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014d44:	699b      	ldr	r3, [r3, #24]
 8014d46:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014d48:	68fb      	ldr	r3, [r7, #12]
 8014d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014d4e:	69db      	ldr	r3, [r3, #28]
 8014d50:	68ba      	ldr	r2, [r7, #8]
 8014d52:	4013      	ands	r3, r2
 8014d54:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8014d56:	68bb      	ldr	r3, [r7, #8]
 8014d58:	b29b      	uxth	r3, r3
}
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	3714      	adds	r7, #20
 8014d5e:	46bd      	mov	sp, r7
 8014d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d64:	4770      	bx	lr

08014d66 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014d66:	b480      	push	{r7}
 8014d68:	b085      	sub	sp, #20
 8014d6a:	af00      	add	r7, sp, #0
 8014d6c:	6078      	str	r0, [r7, #4]
 8014d6e:	460b      	mov	r3, r1
 8014d70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8014d76:	78fb      	ldrb	r3, [r7, #3]
 8014d78:	015a      	lsls	r2, r3, #5
 8014d7a:	68fb      	ldr	r3, [r7, #12]
 8014d7c:	4413      	add	r3, r2
 8014d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014d82:	689b      	ldr	r3, [r3, #8]
 8014d84:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8014d86:	68fb      	ldr	r3, [r7, #12]
 8014d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014d8c:	695b      	ldr	r3, [r3, #20]
 8014d8e:	68ba      	ldr	r2, [r7, #8]
 8014d90:	4013      	ands	r3, r2
 8014d92:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014d94:	68bb      	ldr	r3, [r7, #8]
}
 8014d96:	4618      	mov	r0, r3
 8014d98:	3714      	adds	r7, #20
 8014d9a:	46bd      	mov	sp, r7
 8014d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014da0:	4770      	bx	lr

08014da2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014da2:	b480      	push	{r7}
 8014da4:	b087      	sub	sp, #28
 8014da6:	af00      	add	r7, sp, #0
 8014da8:	6078      	str	r0, [r7, #4]
 8014daa:	460b      	mov	r3, r1
 8014dac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8014db2:	697b      	ldr	r3, [r7, #20]
 8014db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014db8:	691b      	ldr	r3, [r3, #16]
 8014dba:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8014dbc:	697b      	ldr	r3, [r7, #20]
 8014dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014dc4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8014dc6:	78fb      	ldrb	r3, [r7, #3]
 8014dc8:	f003 030f 	and.w	r3, r3, #15
 8014dcc:	68fa      	ldr	r2, [r7, #12]
 8014dce:	fa22 f303 	lsr.w	r3, r2, r3
 8014dd2:	01db      	lsls	r3, r3, #7
 8014dd4:	b2db      	uxtb	r3, r3
 8014dd6:	693a      	ldr	r2, [r7, #16]
 8014dd8:	4313      	orrs	r3, r2
 8014dda:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8014ddc:	78fb      	ldrb	r3, [r7, #3]
 8014dde:	015a      	lsls	r2, r3, #5
 8014de0:	697b      	ldr	r3, [r7, #20]
 8014de2:	4413      	add	r3, r2
 8014de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014de8:	689b      	ldr	r3, [r3, #8]
 8014dea:	693a      	ldr	r2, [r7, #16]
 8014dec:	4013      	ands	r3, r2
 8014dee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014df0:	68bb      	ldr	r3, [r7, #8]
}
 8014df2:	4618      	mov	r0, r3
 8014df4:	371c      	adds	r7, #28
 8014df6:	46bd      	mov	sp, r7
 8014df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dfc:	4770      	bx	lr

08014dfe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8014dfe:	b480      	push	{r7}
 8014e00:	b083      	sub	sp, #12
 8014e02:	af00      	add	r7, sp, #0
 8014e04:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	695b      	ldr	r3, [r3, #20]
 8014e0a:	f003 0301 	and.w	r3, r3, #1
}
 8014e0e:	4618      	mov	r0, r3
 8014e10:	370c      	adds	r7, #12
 8014e12:	46bd      	mov	sp, r7
 8014e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e18:	4770      	bx	lr
	...

08014e1c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8014e1c:	b480      	push	{r7}
 8014e1e:	b085      	sub	sp, #20
 8014e20:	af00      	add	r7, sp, #0
 8014e22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014e2e:	681a      	ldr	r2, [r3, #0]
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014e36:	4619      	mov	r1, r3
 8014e38:	4b09      	ldr	r3, [pc, #36]	; (8014e60 <USB_ActivateSetup+0x44>)
 8014e3a:	4013      	ands	r3, r2
 8014e3c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8014e3e:	68fb      	ldr	r3, [r7, #12]
 8014e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014e44:	685b      	ldr	r3, [r3, #4]
 8014e46:	68fa      	ldr	r2, [r7, #12]
 8014e48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014e50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014e52:	2300      	movs	r3, #0
}
 8014e54:	4618      	mov	r0, r3
 8014e56:	3714      	adds	r7, #20
 8014e58:	46bd      	mov	sp, r7
 8014e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e5e:	4770      	bx	lr
 8014e60:	fffff800 	.word	0xfffff800

08014e64 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8014e64:	b480      	push	{r7}
 8014e66:	b087      	sub	sp, #28
 8014e68:	af00      	add	r7, sp, #0
 8014e6a:	60f8      	str	r0, [r7, #12]
 8014e6c:	460b      	mov	r3, r1
 8014e6e:	607a      	str	r2, [r7, #4]
 8014e70:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8014e76:	68fb      	ldr	r3, [r7, #12]
 8014e78:	333c      	adds	r3, #60	; 0x3c
 8014e7a:	3304      	adds	r3, #4
 8014e7c:	681b      	ldr	r3, [r3, #0]
 8014e7e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8014e80:	693b      	ldr	r3, [r7, #16]
 8014e82:	4a26      	ldr	r2, [pc, #152]	; (8014f1c <USB_EP0_OutStart+0xb8>)
 8014e84:	4293      	cmp	r3, r2
 8014e86:	d90a      	bls.n	8014e9e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014e88:	697b      	ldr	r3, [r7, #20]
 8014e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014e8e:	681b      	ldr	r3, [r3, #0]
 8014e90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014e94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014e98:	d101      	bne.n	8014e9e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8014e9a:	2300      	movs	r3, #0
 8014e9c:	e037      	b.n	8014f0e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8014e9e:	697b      	ldr	r3, [r7, #20]
 8014ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014ea4:	461a      	mov	r2, r3
 8014ea6:	2300      	movs	r3, #0
 8014ea8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014eaa:	697b      	ldr	r3, [r7, #20]
 8014eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014eb0:	691b      	ldr	r3, [r3, #16]
 8014eb2:	697a      	ldr	r2, [r7, #20]
 8014eb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014eb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014ebc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8014ebe:	697b      	ldr	r3, [r7, #20]
 8014ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014ec4:	691b      	ldr	r3, [r3, #16]
 8014ec6:	697a      	ldr	r2, [r7, #20]
 8014ec8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014ecc:	f043 0318 	orr.w	r3, r3, #24
 8014ed0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8014ed2:	697b      	ldr	r3, [r7, #20]
 8014ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014ed8:	691b      	ldr	r3, [r3, #16]
 8014eda:	697a      	ldr	r2, [r7, #20]
 8014edc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014ee0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8014ee4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8014ee6:	7afb      	ldrb	r3, [r7, #11]
 8014ee8:	2b01      	cmp	r3, #1
 8014eea:	d10f      	bne.n	8014f0c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8014eec:	697b      	ldr	r3, [r7, #20]
 8014eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014ef2:	461a      	mov	r2, r3
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8014ef8:	697b      	ldr	r3, [r7, #20]
 8014efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	697a      	ldr	r2, [r7, #20]
 8014f02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014f06:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8014f0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014f0c:	2300      	movs	r3, #0
}
 8014f0e:	4618      	mov	r0, r3
 8014f10:	371c      	adds	r7, #28
 8014f12:	46bd      	mov	sp, r7
 8014f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f18:	4770      	bx	lr
 8014f1a:	bf00      	nop
 8014f1c:	4f54300a 	.word	0x4f54300a

08014f20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8014f20:	b480      	push	{r7}
 8014f22:	b085      	sub	sp, #20
 8014f24:	af00      	add	r7, sp, #0
 8014f26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014f28:	2300      	movs	r3, #0
 8014f2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	3301      	adds	r3, #1
 8014f30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	4a13      	ldr	r2, [pc, #76]	; (8014f84 <USB_CoreReset+0x64>)
 8014f36:	4293      	cmp	r3, r2
 8014f38:	d901      	bls.n	8014f3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8014f3a:	2303      	movs	r3, #3
 8014f3c:	e01b      	b.n	8014f76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	691b      	ldr	r3, [r3, #16]
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	daf2      	bge.n	8014f2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8014f46:	2300      	movs	r3, #0
 8014f48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	691b      	ldr	r3, [r3, #16]
 8014f4e:	f043 0201 	orr.w	r2, r3, #1
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	3301      	adds	r3, #1
 8014f5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014f5c:	68fb      	ldr	r3, [r7, #12]
 8014f5e:	4a09      	ldr	r2, [pc, #36]	; (8014f84 <USB_CoreReset+0x64>)
 8014f60:	4293      	cmp	r3, r2
 8014f62:	d901      	bls.n	8014f68 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8014f64:	2303      	movs	r3, #3
 8014f66:	e006      	b.n	8014f76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	691b      	ldr	r3, [r3, #16]
 8014f6c:	f003 0301 	and.w	r3, r3, #1
 8014f70:	2b01      	cmp	r3, #1
 8014f72:	d0f0      	beq.n	8014f56 <USB_CoreReset+0x36>

  return HAL_OK;
 8014f74:	2300      	movs	r3, #0
}
 8014f76:	4618      	mov	r0, r3
 8014f78:	3714      	adds	r7, #20
 8014f7a:	46bd      	mov	sp, r7
 8014f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f80:	4770      	bx	lr
 8014f82:	bf00      	nop
 8014f84:	00030d40 	.word	0x00030d40

08014f88 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8014f88:	b580      	push	{r7, lr}
 8014f8a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8014f8c:	4904      	ldr	r1, [pc, #16]	; (8014fa0 <MX_FATFS_Init+0x18>)
 8014f8e:	4805      	ldr	r0, [pc, #20]	; (8014fa4 <MX_FATFS_Init+0x1c>)
 8014f90:	f002 fa56 	bl	8017440 <FATFS_LinkDriver>
 8014f94:	4603      	mov	r3, r0
 8014f96:	461a      	mov	r2, r3
 8014f98:	4b03      	ldr	r3, [pc, #12]	; (8014fa8 <MX_FATFS_Init+0x20>)
 8014f9a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8014f9c:	bf00      	nop
 8014f9e:	bd80      	pop	{r7, pc}
 8014fa0:	2400160c 	.word	0x2400160c
 8014fa4:	0801c844 	.word	0x0801c844
 8014fa8:	24001608 	.word	0x24001608

08014fac <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8014fac:	b580      	push	{r7, lr}
 8014fae:	b082      	sub	sp, #8
 8014fb0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8014fb2:	2300      	movs	r3, #0
 8014fb4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8014fb6:	f000 f885 	bl	80150c4 <BSP_SD_IsDetected>
 8014fba:	4603      	mov	r3, r0
 8014fbc:	2b01      	cmp	r3, #1
 8014fbe:	d001      	beq.n	8014fc4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8014fc0:	2302      	movs	r3, #2
 8014fc2:	e012      	b.n	8014fea <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 8014fc4:	480b      	ldr	r0, [pc, #44]	; (8014ff4 <BSP_SD_Init+0x48>)
 8014fc6:	f7f9 f85d 	bl	800e084 <HAL_SD_Init>
 8014fca:	4603      	mov	r3, r0
 8014fcc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8014fce:	79fb      	ldrb	r3, [r7, #7]
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d109      	bne.n	8014fe8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8014fd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8014fd8:	4806      	ldr	r0, [pc, #24]	; (8014ff4 <BSP_SD_Init+0x48>)
 8014fda:	f7f9 ff13 	bl	800ee04 <HAL_SD_ConfigWideBusOperation>
 8014fde:	4603      	mov	r3, r0
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d001      	beq.n	8014fe8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8014fe4:	2301      	movs	r3, #1
 8014fe6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8014fe8:	79fb      	ldrb	r3, [r7, #7]
}
 8014fea:	4618      	mov	r0, r3
 8014fec:	3708      	adds	r7, #8
 8014fee:	46bd      	mov	sp, r7
 8014ff0:	bd80      	pop	{r7, pc}
 8014ff2:	bf00      	nop
 8014ff4:	24000ec4 	.word	0x24000ec4

08014ff8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8014ff8:	b580      	push	{r7, lr}
 8014ffa:	b086      	sub	sp, #24
 8014ffc:	af00      	add	r7, sp, #0
 8014ffe:	60f8      	str	r0, [r7, #12]
 8015000:	60b9      	str	r1, [r7, #8]
 8015002:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8015004:	2300      	movs	r3, #0
 8015006:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	68ba      	ldr	r2, [r7, #8]
 801500c:	68f9      	ldr	r1, [r7, #12]
 801500e:	4806      	ldr	r0, [pc, #24]	; (8015028 <BSP_SD_ReadBlocks_DMA+0x30>)
 8015010:	f7f9 f958 	bl	800e2c4 <HAL_SD_ReadBlocks_DMA>
 8015014:	4603      	mov	r3, r0
 8015016:	2b00      	cmp	r3, #0
 8015018:	d001      	beq.n	801501e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801501a:	2301      	movs	r3, #1
 801501c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801501e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015020:	4618      	mov	r0, r3
 8015022:	3718      	adds	r7, #24
 8015024:	46bd      	mov	sp, r7
 8015026:	bd80      	pop	{r7, pc}
 8015028:	24000ec4 	.word	0x24000ec4

0801502c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 801502c:	b580      	push	{r7, lr}
 801502e:	b086      	sub	sp, #24
 8015030:	af00      	add	r7, sp, #0
 8015032:	60f8      	str	r0, [r7, #12]
 8015034:	60b9      	str	r1, [r7, #8]
 8015036:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8015038:	2300      	movs	r3, #0
 801503a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	68ba      	ldr	r2, [r7, #8]
 8015040:	68f9      	ldr	r1, [r7, #12]
 8015042:	4806      	ldr	r0, [pc, #24]	; (801505c <BSP_SD_WriteBlocks_DMA+0x30>)
 8015044:	f7f9 f9e6 	bl	800e414 <HAL_SD_WriteBlocks_DMA>
 8015048:	4603      	mov	r3, r0
 801504a:	2b00      	cmp	r3, #0
 801504c:	d001      	beq.n	8015052 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801504e:	2301      	movs	r3, #1
 8015050:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8015052:	7dfb      	ldrb	r3, [r7, #23]
}
 8015054:	4618      	mov	r0, r3
 8015056:	3718      	adds	r7, #24
 8015058:	46bd      	mov	sp, r7
 801505a:	bd80      	pop	{r7, pc}
 801505c:	24000ec4 	.word	0x24000ec4

08015060 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8015060:	b580      	push	{r7, lr}
 8015062:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8015064:	4805      	ldr	r0, [pc, #20]	; (801507c <BSP_SD_GetCardState+0x1c>)
 8015066:	f7f9 ffdf 	bl	800f028 <HAL_SD_GetCardState>
 801506a:	4603      	mov	r3, r0
 801506c:	2b04      	cmp	r3, #4
 801506e:	bf14      	ite	ne
 8015070:	2301      	movne	r3, #1
 8015072:	2300      	moveq	r3, #0
 8015074:	b2db      	uxtb	r3, r3
}
 8015076:	4618      	mov	r0, r3
 8015078:	bd80      	pop	{r7, pc}
 801507a:	bf00      	nop
 801507c:	24000ec4 	.word	0x24000ec4

08015080 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8015080:	b580      	push	{r7, lr}
 8015082:	b082      	sub	sp, #8
 8015084:	af00      	add	r7, sp, #0
 8015086:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 8015088:	6879      	ldr	r1, [r7, #4]
 801508a:	4803      	ldr	r0, [pc, #12]	; (8015098 <BSP_SD_GetCardInfo+0x18>)
 801508c:	f7f9 fe8e 	bl	800edac <HAL_SD_GetCardInfo>
}
 8015090:	bf00      	nop
 8015092:	3708      	adds	r7, #8
 8015094:	46bd      	mov	sp, r7
 8015096:	bd80      	pop	{r7, pc}
 8015098:	24000ec4 	.word	0x24000ec4

0801509c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 801509c:	b580      	push	{r7, lr}
 801509e:	b082      	sub	sp, #8
 80150a0:	af00      	add	r7, sp, #0
 80150a2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80150a4:	f000 f9a0 	bl	80153e8 <BSP_SD_WriteCpltCallback>
}
 80150a8:	bf00      	nop
 80150aa:	3708      	adds	r7, #8
 80150ac:	46bd      	mov	sp, r7
 80150ae:	bd80      	pop	{r7, pc}

080150b0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80150b0:	b580      	push	{r7, lr}
 80150b2:	b082      	sub	sp, #8
 80150b4:	af00      	add	r7, sp, #0
 80150b6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80150b8:	f000 f9a2 	bl	8015400 <BSP_SD_ReadCpltCallback>
}
 80150bc:	bf00      	nop
 80150be:	3708      	adds	r7, #8
 80150c0:	46bd      	mov	sp, r7
 80150c2:	bd80      	pop	{r7, pc}

080150c4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80150c4:	b580      	push	{r7, lr}
 80150c6:	b082      	sub	sp, #8
 80150c8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80150ca:	2301      	movs	r3, #1
 80150cc:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80150ce:	f000 f80b 	bl	80150e8 <BSP_PlatformIsDetected>
 80150d2:	4603      	mov	r3, r0
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d101      	bne.n	80150dc <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80150d8:	2300      	movs	r3, #0
 80150da:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80150dc:	79fb      	ldrb	r3, [r7, #7]
 80150de:	b2db      	uxtb	r3, r3
}
 80150e0:	4618      	mov	r0, r3
 80150e2:	3708      	adds	r7, #8
 80150e4:	46bd      	mov	sp, r7
 80150e6:	bd80      	pop	{r7, pc}

080150e8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80150e8:	b580      	push	{r7, lr}
 80150ea:	b082      	sub	sp, #8
 80150ec:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80150ee:	2301      	movs	r3, #1
 80150f0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80150f2:	2104      	movs	r1, #4
 80150f4:	4806      	ldr	r0, [pc, #24]	; (8015110 <BSP_PlatformIsDetected+0x28>)
 80150f6:	f7f3 fb8d 	bl	8008814 <HAL_GPIO_ReadPin>
 80150fa:	4603      	mov	r3, r0
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d001      	beq.n	8015104 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8015100:	2300      	movs	r3, #0
 8015102:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8015104:	79fb      	ldrb	r3, [r7, #7]
}
 8015106:	4618      	mov	r0, r3
 8015108:	3708      	adds	r7, #8
 801510a:	46bd      	mov	sp, r7
 801510c:	bd80      	pop	{r7, pc}
 801510e:	bf00      	nop
 8015110:	58020400 	.word	0x58020400

08015114 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8015114:	b580      	push	{r7, lr}
 8015116:	b084      	sub	sp, #16
 8015118:	af00      	add	r7, sp, #0
 801511a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 801511c:	f7ef f8d4 	bl	80042c8 <HAL_GetTick>
 8015120:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8015122:	e006      	b.n	8015132 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015124:	f7ff ff9c 	bl	8015060 <BSP_SD_GetCardState>
 8015128:	4603      	mov	r3, r0
 801512a:	2b00      	cmp	r3, #0
 801512c:	d101      	bne.n	8015132 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801512e:	2300      	movs	r3, #0
 8015130:	e009      	b.n	8015146 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8015132:	f7ef f8c9 	bl	80042c8 <HAL_GetTick>
 8015136:	4602      	mov	r2, r0
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	1ad3      	subs	r3, r2, r3
 801513c:	687a      	ldr	r2, [r7, #4]
 801513e:	429a      	cmp	r2, r3
 8015140:	d8f0      	bhi.n	8015124 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8015142:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015146:	4618      	mov	r0, r3
 8015148:	3710      	adds	r7, #16
 801514a:	46bd      	mov	sp, r7
 801514c:	bd80      	pop	{r7, pc}
	...

08015150 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8015150:	b580      	push	{r7, lr}
 8015152:	b082      	sub	sp, #8
 8015154:	af00      	add	r7, sp, #0
 8015156:	4603      	mov	r3, r0
 8015158:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801515a:	4b0b      	ldr	r3, [pc, #44]	; (8015188 <SD_CheckStatus+0x38>)
 801515c:	2201      	movs	r2, #1
 801515e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8015160:	f7ff ff7e 	bl	8015060 <BSP_SD_GetCardState>
 8015164:	4603      	mov	r3, r0
 8015166:	2b00      	cmp	r3, #0
 8015168:	d107      	bne.n	801517a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801516a:	4b07      	ldr	r3, [pc, #28]	; (8015188 <SD_CheckStatus+0x38>)
 801516c:	781b      	ldrb	r3, [r3, #0]
 801516e:	b2db      	uxtb	r3, r3
 8015170:	f023 0301 	bic.w	r3, r3, #1
 8015174:	b2da      	uxtb	r2, r3
 8015176:	4b04      	ldr	r3, [pc, #16]	; (8015188 <SD_CheckStatus+0x38>)
 8015178:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801517a:	4b03      	ldr	r3, [pc, #12]	; (8015188 <SD_CheckStatus+0x38>)
 801517c:	781b      	ldrb	r3, [r3, #0]
 801517e:	b2db      	uxtb	r3, r3
}
 8015180:	4618      	mov	r0, r3
 8015182:	3708      	adds	r7, #8
 8015184:	46bd      	mov	sp, r7
 8015186:	bd80      	pop	{r7, pc}
 8015188:	24000039 	.word	0x24000039

0801518c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801518c:	b580      	push	{r7, lr}
 801518e:	b082      	sub	sp, #8
 8015190:	af00      	add	r7, sp, #0
 8015192:	4603      	mov	r3, r0
 8015194:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8015196:	f7ff ff09 	bl	8014fac <BSP_SD_Init>
 801519a:	4603      	mov	r3, r0
 801519c:	2b00      	cmp	r3, #0
 801519e:	d107      	bne.n	80151b0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80151a0:	79fb      	ldrb	r3, [r7, #7]
 80151a2:	4618      	mov	r0, r3
 80151a4:	f7ff ffd4 	bl	8015150 <SD_CheckStatus>
 80151a8:	4603      	mov	r3, r0
 80151aa:	461a      	mov	r2, r3
 80151ac:	4b04      	ldr	r3, [pc, #16]	; (80151c0 <SD_initialize+0x34>)
 80151ae:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80151b0:	4b03      	ldr	r3, [pc, #12]	; (80151c0 <SD_initialize+0x34>)
 80151b2:	781b      	ldrb	r3, [r3, #0]
 80151b4:	b2db      	uxtb	r3, r3
}
 80151b6:	4618      	mov	r0, r3
 80151b8:	3708      	adds	r7, #8
 80151ba:	46bd      	mov	sp, r7
 80151bc:	bd80      	pop	{r7, pc}
 80151be:	bf00      	nop
 80151c0:	24000039 	.word	0x24000039

080151c4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80151c4:	b580      	push	{r7, lr}
 80151c6:	b082      	sub	sp, #8
 80151c8:	af00      	add	r7, sp, #0
 80151ca:	4603      	mov	r3, r0
 80151cc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80151ce:	79fb      	ldrb	r3, [r7, #7]
 80151d0:	4618      	mov	r0, r3
 80151d2:	f7ff ffbd 	bl	8015150 <SD_CheckStatus>
 80151d6:	4603      	mov	r3, r0
}
 80151d8:	4618      	mov	r0, r3
 80151da:	3708      	adds	r7, #8
 80151dc:	46bd      	mov	sp, r7
 80151de:	bd80      	pop	{r7, pc}

080151e0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80151e0:	b580      	push	{r7, lr}
 80151e2:	b086      	sub	sp, #24
 80151e4:	af00      	add	r7, sp, #0
 80151e6:	60b9      	str	r1, [r7, #8]
 80151e8:	607a      	str	r2, [r7, #4]
 80151ea:	603b      	str	r3, [r7, #0]
 80151ec:	4603      	mov	r3, r0
 80151ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80151f0:	2301      	movs	r3, #1
 80151f2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80151f4:	f247 5030 	movw	r0, #30000	; 0x7530
 80151f8:	f7ff ff8c 	bl	8015114 <SD_CheckStatusWithTimeout>
 80151fc:	4603      	mov	r3, r0
 80151fe:	2b00      	cmp	r3, #0
 8015200:	da01      	bge.n	8015206 <SD_read+0x26>
  {
    return res;
 8015202:	7dfb      	ldrb	r3, [r7, #23]
 8015204:	e03b      	b.n	801527e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8015206:	683a      	ldr	r2, [r7, #0]
 8015208:	6879      	ldr	r1, [r7, #4]
 801520a:	68b8      	ldr	r0, [r7, #8]
 801520c:	f7ff fef4 	bl	8014ff8 <BSP_SD_ReadBlocks_DMA>
 8015210:	4603      	mov	r3, r0
 8015212:	2b00      	cmp	r3, #0
 8015214:	d132      	bne.n	801527c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8015216:	4b1c      	ldr	r3, [pc, #112]	; (8015288 <SD_read+0xa8>)
 8015218:	2200      	movs	r2, #0
 801521a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 801521c:	f7ef f854 	bl	80042c8 <HAL_GetTick>
 8015220:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8015222:	bf00      	nop
 8015224:	4b18      	ldr	r3, [pc, #96]	; (8015288 <SD_read+0xa8>)
 8015226:	681b      	ldr	r3, [r3, #0]
 8015228:	2b00      	cmp	r3, #0
 801522a:	d108      	bne.n	801523e <SD_read+0x5e>
 801522c:	f7ef f84c 	bl	80042c8 <HAL_GetTick>
 8015230:	4602      	mov	r2, r0
 8015232:	693b      	ldr	r3, [r7, #16]
 8015234:	1ad3      	subs	r3, r2, r3
 8015236:	f247 522f 	movw	r2, #29999	; 0x752f
 801523a:	4293      	cmp	r3, r2
 801523c:	d9f2      	bls.n	8015224 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 801523e:	4b12      	ldr	r3, [pc, #72]	; (8015288 <SD_read+0xa8>)
 8015240:	681b      	ldr	r3, [r3, #0]
 8015242:	2b00      	cmp	r3, #0
 8015244:	d102      	bne.n	801524c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8015246:	2301      	movs	r3, #1
 8015248:	75fb      	strb	r3, [r7, #23]
 801524a:	e017      	b.n	801527c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 801524c:	4b0e      	ldr	r3, [pc, #56]	; (8015288 <SD_read+0xa8>)
 801524e:	2200      	movs	r2, #0
 8015250:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8015252:	f7ef f839 	bl	80042c8 <HAL_GetTick>
 8015256:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015258:	e007      	b.n	801526a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801525a:	f7ff ff01 	bl	8015060 <BSP_SD_GetCardState>
 801525e:	4603      	mov	r3, r0
 8015260:	2b00      	cmp	r3, #0
 8015262:	d102      	bne.n	801526a <SD_read+0x8a>
          {
            res = RES_OK;
 8015264:	2300      	movs	r3, #0
 8015266:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8015268:	e008      	b.n	801527c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801526a:	f7ef f82d 	bl	80042c8 <HAL_GetTick>
 801526e:	4602      	mov	r2, r0
 8015270:	693b      	ldr	r3, [r7, #16]
 8015272:	1ad3      	subs	r3, r2, r3
 8015274:	f247 522f 	movw	r2, #29999	; 0x752f
 8015278:	4293      	cmp	r3, r2
 801527a:	d9ee      	bls.n	801525a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 801527c:	7dfb      	ldrb	r3, [r7, #23]
}
 801527e:	4618      	mov	r0, r3
 8015280:	3718      	adds	r7, #24
 8015282:	46bd      	mov	sp, r7
 8015284:	bd80      	pop	{r7, pc}
 8015286:	bf00      	nop
 8015288:	24001614 	.word	0x24001614

0801528c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801528c:	b580      	push	{r7, lr}
 801528e:	b086      	sub	sp, #24
 8015290:	af00      	add	r7, sp, #0
 8015292:	60b9      	str	r1, [r7, #8]
 8015294:	607a      	str	r2, [r7, #4]
 8015296:	603b      	str	r3, [r7, #0]
 8015298:	4603      	mov	r3, r0
 801529a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801529c:	2301      	movs	r3, #1
 801529e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80152a0:	4b24      	ldr	r3, [pc, #144]	; (8015334 <SD_write+0xa8>)
 80152a2:	2200      	movs	r2, #0
 80152a4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80152a6:	f247 5030 	movw	r0, #30000	; 0x7530
 80152aa:	f7ff ff33 	bl	8015114 <SD_CheckStatusWithTimeout>
 80152ae:	4603      	mov	r3, r0
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	da01      	bge.n	80152b8 <SD_write+0x2c>
  {
    return res;
 80152b4:	7dfb      	ldrb	r3, [r7, #23]
 80152b6:	e038      	b.n	801532a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80152b8:	683a      	ldr	r2, [r7, #0]
 80152ba:	6879      	ldr	r1, [r7, #4]
 80152bc:	68b8      	ldr	r0, [r7, #8]
 80152be:	f7ff feb5 	bl	801502c <BSP_SD_WriteBlocks_DMA>
 80152c2:	4603      	mov	r3, r0
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d12f      	bne.n	8015328 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80152c8:	f7ee fffe 	bl	80042c8 <HAL_GetTick>
 80152cc:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80152ce:	bf00      	nop
 80152d0:	4b18      	ldr	r3, [pc, #96]	; (8015334 <SD_write+0xa8>)
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d108      	bne.n	80152ea <SD_write+0x5e>
 80152d8:	f7ee fff6 	bl	80042c8 <HAL_GetTick>
 80152dc:	4602      	mov	r2, r0
 80152de:	693b      	ldr	r3, [r7, #16]
 80152e0:	1ad3      	subs	r3, r2, r3
 80152e2:	f247 522f 	movw	r2, #29999	; 0x752f
 80152e6:	4293      	cmp	r3, r2
 80152e8:	d9f2      	bls.n	80152d0 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80152ea:	4b12      	ldr	r3, [pc, #72]	; (8015334 <SD_write+0xa8>)
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d102      	bne.n	80152f8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80152f2:	2301      	movs	r3, #1
 80152f4:	75fb      	strb	r3, [r7, #23]
 80152f6:	e017      	b.n	8015328 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80152f8:	4b0e      	ldr	r3, [pc, #56]	; (8015334 <SD_write+0xa8>)
 80152fa:	2200      	movs	r2, #0
 80152fc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80152fe:	f7ee ffe3 	bl	80042c8 <HAL_GetTick>
 8015302:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015304:	e007      	b.n	8015316 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015306:	f7ff feab 	bl	8015060 <BSP_SD_GetCardState>
 801530a:	4603      	mov	r3, r0
 801530c:	2b00      	cmp	r3, #0
 801530e:	d102      	bne.n	8015316 <SD_write+0x8a>
          {
            res = RES_OK;
 8015310:	2300      	movs	r3, #0
 8015312:	75fb      	strb	r3, [r7, #23]
            break;
 8015314:	e008      	b.n	8015328 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015316:	f7ee ffd7 	bl	80042c8 <HAL_GetTick>
 801531a:	4602      	mov	r2, r0
 801531c:	693b      	ldr	r3, [r7, #16]
 801531e:	1ad3      	subs	r3, r2, r3
 8015320:	f247 522f 	movw	r2, #29999	; 0x752f
 8015324:	4293      	cmp	r3, r2
 8015326:	d9ee      	bls.n	8015306 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8015328:	7dfb      	ldrb	r3, [r7, #23]
}
 801532a:	4618      	mov	r0, r3
 801532c:	3718      	adds	r7, #24
 801532e:	46bd      	mov	sp, r7
 8015330:	bd80      	pop	{r7, pc}
 8015332:	bf00      	nop
 8015334:	24001610 	.word	0x24001610

08015338 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8015338:	b580      	push	{r7, lr}
 801533a:	b08c      	sub	sp, #48	; 0x30
 801533c:	af00      	add	r7, sp, #0
 801533e:	4603      	mov	r3, r0
 8015340:	603a      	str	r2, [r7, #0]
 8015342:	71fb      	strb	r3, [r7, #7]
 8015344:	460b      	mov	r3, r1
 8015346:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8015348:	2301      	movs	r3, #1
 801534a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801534e:	4b25      	ldr	r3, [pc, #148]	; (80153e4 <SD_ioctl+0xac>)
 8015350:	781b      	ldrb	r3, [r3, #0]
 8015352:	b2db      	uxtb	r3, r3
 8015354:	f003 0301 	and.w	r3, r3, #1
 8015358:	2b00      	cmp	r3, #0
 801535a:	d001      	beq.n	8015360 <SD_ioctl+0x28>
 801535c:	2303      	movs	r3, #3
 801535e:	e03c      	b.n	80153da <SD_ioctl+0xa2>

  switch (cmd)
 8015360:	79bb      	ldrb	r3, [r7, #6]
 8015362:	2b03      	cmp	r3, #3
 8015364:	d834      	bhi.n	80153d0 <SD_ioctl+0x98>
 8015366:	a201      	add	r2, pc, #4	; (adr r2, 801536c <SD_ioctl+0x34>)
 8015368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801536c:	0801537d 	.word	0x0801537d
 8015370:	08015385 	.word	0x08015385
 8015374:	0801539d 	.word	0x0801539d
 8015378:	080153b7 	.word	0x080153b7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801537c:	2300      	movs	r3, #0
 801537e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015382:	e028      	b.n	80153d6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8015384:	f107 0308 	add.w	r3, r7, #8
 8015388:	4618      	mov	r0, r3
 801538a:	f7ff fe79 	bl	8015080 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801538e:	6a3a      	ldr	r2, [r7, #32]
 8015390:	683b      	ldr	r3, [r7, #0]
 8015392:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8015394:	2300      	movs	r3, #0
 8015396:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801539a:	e01c      	b.n	80153d6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801539c:	f107 0308 	add.w	r3, r7, #8
 80153a0:	4618      	mov	r0, r3
 80153a2:	f7ff fe6d 	bl	8015080 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80153a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153a8:	b29a      	uxth	r2, r3
 80153aa:	683b      	ldr	r3, [r7, #0]
 80153ac:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80153ae:	2300      	movs	r3, #0
 80153b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80153b4:	e00f      	b.n	80153d6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80153b6:	f107 0308 	add.w	r3, r7, #8
 80153ba:	4618      	mov	r0, r3
 80153bc:	f7ff fe60 	bl	8015080 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80153c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153c2:	0a5a      	lsrs	r2, r3, #9
 80153c4:	683b      	ldr	r3, [r7, #0]
 80153c6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80153c8:	2300      	movs	r3, #0
 80153ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80153ce:	e002      	b.n	80153d6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80153d0:	2304      	movs	r3, #4
 80153d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80153d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80153da:	4618      	mov	r0, r3
 80153dc:	3730      	adds	r7, #48	; 0x30
 80153de:	46bd      	mov	sp, r7
 80153e0:	bd80      	pop	{r7, pc}
 80153e2:	bf00      	nop
 80153e4:	24000039 	.word	0x24000039

080153e8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80153e8:	b480      	push	{r7}
 80153ea:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80153ec:	4b03      	ldr	r3, [pc, #12]	; (80153fc <BSP_SD_WriteCpltCallback+0x14>)
 80153ee:	2201      	movs	r2, #1
 80153f0:	601a      	str	r2, [r3, #0]
}
 80153f2:	bf00      	nop
 80153f4:	46bd      	mov	sp, r7
 80153f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153fa:	4770      	bx	lr
 80153fc:	24001610 	.word	0x24001610

08015400 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8015400:	b480      	push	{r7}
 8015402:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8015404:	4b03      	ldr	r3, [pc, #12]	; (8015414 <BSP_SD_ReadCpltCallback+0x14>)
 8015406:	2201      	movs	r2, #1
 8015408:	601a      	str	r2, [r3, #0]
}
 801540a:	bf00      	nop
 801540c:	46bd      	mov	sp, r7
 801540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015412:	4770      	bx	lr
 8015414:	24001614 	.word	0x24001614

08015418 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015418:	b580      	push	{r7, lr}
 801541a:	b084      	sub	sp, #16
 801541c:	af00      	add	r7, sp, #0
 801541e:	6078      	str	r0, [r7, #4]
 8015420:	460b      	mov	r3, r1
 8015422:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8015424:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8015428:	f002 fcea 	bl	8017e00 <USBD_static_malloc>
 801542c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801542e:	68fb      	ldr	r3, [r7, #12]
 8015430:	2b00      	cmp	r3, #0
 8015432:	d109      	bne.n	8015448 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	32b0      	adds	r2, #176	; 0xb0
 801543e:	2100      	movs	r1, #0
 8015440:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8015444:	2302      	movs	r3, #2
 8015446:	e0d4      	b.n	80155f2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8015448:	f44f 7207 	mov.w	r2, #540	; 0x21c
 801544c:	2100      	movs	r1, #0
 801544e:	68f8      	ldr	r0, [r7, #12]
 8015450:	f003 fc7d 	bl	8018d4e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	32b0      	adds	r2, #176	; 0xb0
 801545e:	68f9      	ldr	r1, [r7, #12]
 8015460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	32b0      	adds	r2, #176	; 0xb0
 801546e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	7c1b      	ldrb	r3, [r3, #16]
 801547c:	2b00      	cmp	r3, #0
 801547e:	d138      	bne.n	80154f2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015480:	4b5e      	ldr	r3, [pc, #376]	; (80155fc <USBD_CDC_Init+0x1e4>)
 8015482:	7819      	ldrb	r1, [r3, #0]
 8015484:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015488:	2202      	movs	r2, #2
 801548a:	6878      	ldr	r0, [r7, #4]
 801548c:	f002 fb95 	bl	8017bba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015490:	4b5a      	ldr	r3, [pc, #360]	; (80155fc <USBD_CDC_Init+0x1e4>)
 8015492:	781b      	ldrb	r3, [r3, #0]
 8015494:	f003 020f 	and.w	r2, r3, #15
 8015498:	6879      	ldr	r1, [r7, #4]
 801549a:	4613      	mov	r3, r2
 801549c:	009b      	lsls	r3, r3, #2
 801549e:	4413      	add	r3, r2
 80154a0:	009b      	lsls	r3, r3, #2
 80154a2:	440b      	add	r3, r1
 80154a4:	3324      	adds	r3, #36	; 0x24
 80154a6:	2201      	movs	r2, #1
 80154a8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80154aa:	4b55      	ldr	r3, [pc, #340]	; (8015600 <USBD_CDC_Init+0x1e8>)
 80154ac:	7819      	ldrb	r1, [r3, #0]
 80154ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80154b2:	2202      	movs	r2, #2
 80154b4:	6878      	ldr	r0, [r7, #4]
 80154b6:	f002 fb80 	bl	8017bba <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80154ba:	4b51      	ldr	r3, [pc, #324]	; (8015600 <USBD_CDC_Init+0x1e8>)
 80154bc:	781b      	ldrb	r3, [r3, #0]
 80154be:	f003 020f 	and.w	r2, r3, #15
 80154c2:	6879      	ldr	r1, [r7, #4]
 80154c4:	4613      	mov	r3, r2
 80154c6:	009b      	lsls	r3, r3, #2
 80154c8:	4413      	add	r3, r2
 80154ca:	009b      	lsls	r3, r3, #2
 80154cc:	440b      	add	r3, r1
 80154ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80154d2:	2201      	movs	r2, #1
 80154d4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80154d6:	4b4b      	ldr	r3, [pc, #300]	; (8015604 <USBD_CDC_Init+0x1ec>)
 80154d8:	781b      	ldrb	r3, [r3, #0]
 80154da:	f003 020f 	and.w	r2, r3, #15
 80154de:	6879      	ldr	r1, [r7, #4]
 80154e0:	4613      	mov	r3, r2
 80154e2:	009b      	lsls	r3, r3, #2
 80154e4:	4413      	add	r3, r2
 80154e6:	009b      	lsls	r3, r3, #2
 80154e8:	440b      	add	r3, r1
 80154ea:	3326      	adds	r3, #38	; 0x26
 80154ec:	2210      	movs	r2, #16
 80154ee:	801a      	strh	r2, [r3, #0]
 80154f0:	e035      	b.n	801555e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80154f2:	4b42      	ldr	r3, [pc, #264]	; (80155fc <USBD_CDC_Init+0x1e4>)
 80154f4:	7819      	ldrb	r1, [r3, #0]
 80154f6:	2340      	movs	r3, #64	; 0x40
 80154f8:	2202      	movs	r2, #2
 80154fa:	6878      	ldr	r0, [r7, #4]
 80154fc:	f002 fb5d 	bl	8017bba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015500:	4b3e      	ldr	r3, [pc, #248]	; (80155fc <USBD_CDC_Init+0x1e4>)
 8015502:	781b      	ldrb	r3, [r3, #0]
 8015504:	f003 020f 	and.w	r2, r3, #15
 8015508:	6879      	ldr	r1, [r7, #4]
 801550a:	4613      	mov	r3, r2
 801550c:	009b      	lsls	r3, r3, #2
 801550e:	4413      	add	r3, r2
 8015510:	009b      	lsls	r3, r3, #2
 8015512:	440b      	add	r3, r1
 8015514:	3324      	adds	r3, #36	; 0x24
 8015516:	2201      	movs	r2, #1
 8015518:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801551a:	4b39      	ldr	r3, [pc, #228]	; (8015600 <USBD_CDC_Init+0x1e8>)
 801551c:	7819      	ldrb	r1, [r3, #0]
 801551e:	2340      	movs	r3, #64	; 0x40
 8015520:	2202      	movs	r2, #2
 8015522:	6878      	ldr	r0, [r7, #4]
 8015524:	f002 fb49 	bl	8017bba <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8015528:	4b35      	ldr	r3, [pc, #212]	; (8015600 <USBD_CDC_Init+0x1e8>)
 801552a:	781b      	ldrb	r3, [r3, #0]
 801552c:	f003 020f 	and.w	r2, r3, #15
 8015530:	6879      	ldr	r1, [r7, #4]
 8015532:	4613      	mov	r3, r2
 8015534:	009b      	lsls	r3, r3, #2
 8015536:	4413      	add	r3, r2
 8015538:	009b      	lsls	r3, r3, #2
 801553a:	440b      	add	r3, r1
 801553c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015540:	2201      	movs	r2, #1
 8015542:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8015544:	4b2f      	ldr	r3, [pc, #188]	; (8015604 <USBD_CDC_Init+0x1ec>)
 8015546:	781b      	ldrb	r3, [r3, #0]
 8015548:	f003 020f 	and.w	r2, r3, #15
 801554c:	6879      	ldr	r1, [r7, #4]
 801554e:	4613      	mov	r3, r2
 8015550:	009b      	lsls	r3, r3, #2
 8015552:	4413      	add	r3, r2
 8015554:	009b      	lsls	r3, r3, #2
 8015556:	440b      	add	r3, r1
 8015558:	3326      	adds	r3, #38	; 0x26
 801555a:	2210      	movs	r2, #16
 801555c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801555e:	4b29      	ldr	r3, [pc, #164]	; (8015604 <USBD_CDC_Init+0x1ec>)
 8015560:	7819      	ldrb	r1, [r3, #0]
 8015562:	2308      	movs	r3, #8
 8015564:	2203      	movs	r2, #3
 8015566:	6878      	ldr	r0, [r7, #4]
 8015568:	f002 fb27 	bl	8017bba <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801556c:	4b25      	ldr	r3, [pc, #148]	; (8015604 <USBD_CDC_Init+0x1ec>)
 801556e:	781b      	ldrb	r3, [r3, #0]
 8015570:	f003 020f 	and.w	r2, r3, #15
 8015574:	6879      	ldr	r1, [r7, #4]
 8015576:	4613      	mov	r3, r2
 8015578:	009b      	lsls	r3, r3, #2
 801557a:	4413      	add	r3, r2
 801557c:	009b      	lsls	r3, r3, #2
 801557e:	440b      	add	r3, r1
 8015580:	3324      	adds	r3, #36	; 0x24
 8015582:	2201      	movs	r2, #1
 8015584:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8015586:	68fb      	ldr	r3, [r7, #12]
 8015588:	2200      	movs	r2, #0
 801558a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015594:	687a      	ldr	r2, [r7, #4]
 8015596:	33b0      	adds	r3, #176	; 0xb0
 8015598:	009b      	lsls	r3, r3, #2
 801559a:	4413      	add	r3, r2
 801559c:	685b      	ldr	r3, [r3, #4]
 801559e:	681b      	ldr	r3, [r3, #0]
 80155a0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80155a2:	68fb      	ldr	r3, [r7, #12]
 80155a4:	2200      	movs	r2, #0
 80155a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80155aa:	68fb      	ldr	r3, [r7, #12]
 80155ac:	2200      	movs	r2, #0
 80155ae:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80155b2:	68fb      	ldr	r3, [r7, #12]
 80155b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d101      	bne.n	80155c0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80155bc:	2302      	movs	r3, #2
 80155be:	e018      	b.n	80155f2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	7c1b      	ldrb	r3, [r3, #16]
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d10a      	bne.n	80155de <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80155c8:	4b0d      	ldr	r3, [pc, #52]	; (8015600 <USBD_CDC_Init+0x1e8>)
 80155ca:	7819      	ldrb	r1, [r3, #0]
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80155d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80155d6:	6878      	ldr	r0, [r7, #4]
 80155d8:	f002 fbde 	bl	8017d98 <USBD_LL_PrepareReceive>
 80155dc:	e008      	b.n	80155f0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80155de:	4b08      	ldr	r3, [pc, #32]	; (8015600 <USBD_CDC_Init+0x1e8>)
 80155e0:	7819      	ldrb	r1, [r3, #0]
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80155e8:	2340      	movs	r3, #64	; 0x40
 80155ea:	6878      	ldr	r0, [r7, #4]
 80155ec:	f002 fbd4 	bl	8017d98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80155f0:	2300      	movs	r3, #0
}
 80155f2:	4618      	mov	r0, r3
 80155f4:	3710      	adds	r7, #16
 80155f6:	46bd      	mov	sp, r7
 80155f8:	bd80      	pop	{r7, pc}
 80155fa:	bf00      	nop
 80155fc:	240000c3 	.word	0x240000c3
 8015600:	240000c4 	.word	0x240000c4
 8015604:	240000c5 	.word	0x240000c5

08015608 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015608:	b580      	push	{r7, lr}
 801560a:	b082      	sub	sp, #8
 801560c:	af00      	add	r7, sp, #0
 801560e:	6078      	str	r0, [r7, #4]
 8015610:	460b      	mov	r3, r1
 8015612:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8015614:	4b3a      	ldr	r3, [pc, #232]	; (8015700 <USBD_CDC_DeInit+0xf8>)
 8015616:	781b      	ldrb	r3, [r3, #0]
 8015618:	4619      	mov	r1, r3
 801561a:	6878      	ldr	r0, [r7, #4]
 801561c:	f002 faf3 	bl	8017c06 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8015620:	4b37      	ldr	r3, [pc, #220]	; (8015700 <USBD_CDC_DeInit+0xf8>)
 8015622:	781b      	ldrb	r3, [r3, #0]
 8015624:	f003 020f 	and.w	r2, r3, #15
 8015628:	6879      	ldr	r1, [r7, #4]
 801562a:	4613      	mov	r3, r2
 801562c:	009b      	lsls	r3, r3, #2
 801562e:	4413      	add	r3, r2
 8015630:	009b      	lsls	r3, r3, #2
 8015632:	440b      	add	r3, r1
 8015634:	3324      	adds	r3, #36	; 0x24
 8015636:	2200      	movs	r2, #0
 8015638:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801563a:	4b32      	ldr	r3, [pc, #200]	; (8015704 <USBD_CDC_DeInit+0xfc>)
 801563c:	781b      	ldrb	r3, [r3, #0]
 801563e:	4619      	mov	r1, r3
 8015640:	6878      	ldr	r0, [r7, #4]
 8015642:	f002 fae0 	bl	8017c06 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8015646:	4b2f      	ldr	r3, [pc, #188]	; (8015704 <USBD_CDC_DeInit+0xfc>)
 8015648:	781b      	ldrb	r3, [r3, #0]
 801564a:	f003 020f 	and.w	r2, r3, #15
 801564e:	6879      	ldr	r1, [r7, #4]
 8015650:	4613      	mov	r3, r2
 8015652:	009b      	lsls	r3, r3, #2
 8015654:	4413      	add	r3, r2
 8015656:	009b      	lsls	r3, r3, #2
 8015658:	440b      	add	r3, r1
 801565a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801565e:	2200      	movs	r2, #0
 8015660:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8015662:	4b29      	ldr	r3, [pc, #164]	; (8015708 <USBD_CDC_DeInit+0x100>)
 8015664:	781b      	ldrb	r3, [r3, #0]
 8015666:	4619      	mov	r1, r3
 8015668:	6878      	ldr	r0, [r7, #4]
 801566a:	f002 facc 	bl	8017c06 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801566e:	4b26      	ldr	r3, [pc, #152]	; (8015708 <USBD_CDC_DeInit+0x100>)
 8015670:	781b      	ldrb	r3, [r3, #0]
 8015672:	f003 020f 	and.w	r2, r3, #15
 8015676:	6879      	ldr	r1, [r7, #4]
 8015678:	4613      	mov	r3, r2
 801567a:	009b      	lsls	r3, r3, #2
 801567c:	4413      	add	r3, r2
 801567e:	009b      	lsls	r3, r3, #2
 8015680:	440b      	add	r3, r1
 8015682:	3324      	adds	r3, #36	; 0x24
 8015684:	2200      	movs	r2, #0
 8015686:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8015688:	4b1f      	ldr	r3, [pc, #124]	; (8015708 <USBD_CDC_DeInit+0x100>)
 801568a:	781b      	ldrb	r3, [r3, #0]
 801568c:	f003 020f 	and.w	r2, r3, #15
 8015690:	6879      	ldr	r1, [r7, #4]
 8015692:	4613      	mov	r3, r2
 8015694:	009b      	lsls	r3, r3, #2
 8015696:	4413      	add	r3, r2
 8015698:	009b      	lsls	r3, r3, #2
 801569a:	440b      	add	r3, r1
 801569c:	3326      	adds	r3, #38	; 0x26
 801569e:	2200      	movs	r2, #0
 80156a0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	32b0      	adds	r2, #176	; 0xb0
 80156ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	d01f      	beq.n	80156f4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80156ba:	687a      	ldr	r2, [r7, #4]
 80156bc:	33b0      	adds	r3, #176	; 0xb0
 80156be:	009b      	lsls	r3, r3, #2
 80156c0:	4413      	add	r3, r2
 80156c2:	685b      	ldr	r3, [r3, #4]
 80156c4:	685b      	ldr	r3, [r3, #4]
 80156c6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	32b0      	adds	r2, #176	; 0xb0
 80156d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156d6:	4618      	mov	r0, r3
 80156d8:	f002 fba0 	bl	8017e1c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	32b0      	adds	r2, #176	; 0xb0
 80156e6:	2100      	movs	r1, #0
 80156e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	2200      	movs	r2, #0
 80156f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80156f4:	2300      	movs	r3, #0
}
 80156f6:	4618      	mov	r0, r3
 80156f8:	3708      	adds	r7, #8
 80156fa:	46bd      	mov	sp, r7
 80156fc:	bd80      	pop	{r7, pc}
 80156fe:	bf00      	nop
 8015700:	240000c3 	.word	0x240000c3
 8015704:	240000c4 	.word	0x240000c4
 8015708:	240000c5 	.word	0x240000c5

0801570c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801570c:	b580      	push	{r7, lr}
 801570e:	b086      	sub	sp, #24
 8015710:	af00      	add	r7, sp, #0
 8015712:	6078      	str	r0, [r7, #4]
 8015714:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	32b0      	adds	r2, #176	; 0xb0
 8015720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015724:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8015726:	2300      	movs	r3, #0
 8015728:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801572a:	2300      	movs	r3, #0
 801572c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801572e:	2300      	movs	r3, #0
 8015730:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8015732:	693b      	ldr	r3, [r7, #16]
 8015734:	2b00      	cmp	r3, #0
 8015736:	d101      	bne.n	801573c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8015738:	2303      	movs	r3, #3
 801573a:	e0bf      	b.n	80158bc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801573c:	683b      	ldr	r3, [r7, #0]
 801573e:	781b      	ldrb	r3, [r3, #0]
 8015740:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015744:	2b00      	cmp	r3, #0
 8015746:	d050      	beq.n	80157ea <USBD_CDC_Setup+0xde>
 8015748:	2b20      	cmp	r3, #32
 801574a:	f040 80af 	bne.w	80158ac <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801574e:	683b      	ldr	r3, [r7, #0]
 8015750:	88db      	ldrh	r3, [r3, #6]
 8015752:	2b00      	cmp	r3, #0
 8015754:	d03a      	beq.n	80157cc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8015756:	683b      	ldr	r3, [r7, #0]
 8015758:	781b      	ldrb	r3, [r3, #0]
 801575a:	b25b      	sxtb	r3, r3
 801575c:	2b00      	cmp	r3, #0
 801575e:	da1b      	bge.n	8015798 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015766:	687a      	ldr	r2, [r7, #4]
 8015768:	33b0      	adds	r3, #176	; 0xb0
 801576a:	009b      	lsls	r3, r3, #2
 801576c:	4413      	add	r3, r2
 801576e:	685b      	ldr	r3, [r3, #4]
 8015770:	689b      	ldr	r3, [r3, #8]
 8015772:	683a      	ldr	r2, [r7, #0]
 8015774:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8015776:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015778:	683a      	ldr	r2, [r7, #0]
 801577a:	88d2      	ldrh	r2, [r2, #6]
 801577c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801577e:	683b      	ldr	r3, [r7, #0]
 8015780:	88db      	ldrh	r3, [r3, #6]
 8015782:	2b07      	cmp	r3, #7
 8015784:	bf28      	it	cs
 8015786:	2307      	movcs	r3, #7
 8015788:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801578a:	693b      	ldr	r3, [r7, #16]
 801578c:	89fa      	ldrh	r2, [r7, #14]
 801578e:	4619      	mov	r1, r3
 8015790:	6878      	ldr	r0, [r7, #4]
 8015792:	f001 fd89 	bl	80172a8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8015796:	e090      	b.n	80158ba <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8015798:	683b      	ldr	r3, [r7, #0]
 801579a:	785a      	ldrb	r2, [r3, #1]
 801579c:	693b      	ldr	r3, [r7, #16]
 801579e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80157a2:	683b      	ldr	r3, [r7, #0]
 80157a4:	88db      	ldrh	r3, [r3, #6]
 80157a6:	2b3f      	cmp	r3, #63	; 0x3f
 80157a8:	d803      	bhi.n	80157b2 <USBD_CDC_Setup+0xa6>
 80157aa:	683b      	ldr	r3, [r7, #0]
 80157ac:	88db      	ldrh	r3, [r3, #6]
 80157ae:	b2da      	uxtb	r2, r3
 80157b0:	e000      	b.n	80157b4 <USBD_CDC_Setup+0xa8>
 80157b2:	2240      	movs	r2, #64	; 0x40
 80157b4:	693b      	ldr	r3, [r7, #16]
 80157b6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80157ba:	6939      	ldr	r1, [r7, #16]
 80157bc:	693b      	ldr	r3, [r7, #16]
 80157be:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80157c2:	461a      	mov	r2, r3
 80157c4:	6878      	ldr	r0, [r7, #4]
 80157c6:	f001 fd9b 	bl	8017300 <USBD_CtlPrepareRx>
      break;
 80157ca:	e076      	b.n	80158ba <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80157d2:	687a      	ldr	r2, [r7, #4]
 80157d4:	33b0      	adds	r3, #176	; 0xb0
 80157d6:	009b      	lsls	r3, r3, #2
 80157d8:	4413      	add	r3, r2
 80157da:	685b      	ldr	r3, [r3, #4]
 80157dc:	689b      	ldr	r3, [r3, #8]
 80157de:	683a      	ldr	r2, [r7, #0]
 80157e0:	7850      	ldrb	r0, [r2, #1]
 80157e2:	2200      	movs	r2, #0
 80157e4:	6839      	ldr	r1, [r7, #0]
 80157e6:	4798      	blx	r3
      break;
 80157e8:	e067      	b.n	80158ba <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80157ea:	683b      	ldr	r3, [r7, #0]
 80157ec:	785b      	ldrb	r3, [r3, #1]
 80157ee:	2b0b      	cmp	r3, #11
 80157f0:	d851      	bhi.n	8015896 <USBD_CDC_Setup+0x18a>
 80157f2:	a201      	add	r2, pc, #4	; (adr r2, 80157f8 <USBD_CDC_Setup+0xec>)
 80157f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157f8:	08015829 	.word	0x08015829
 80157fc:	080158a5 	.word	0x080158a5
 8015800:	08015897 	.word	0x08015897
 8015804:	08015897 	.word	0x08015897
 8015808:	08015897 	.word	0x08015897
 801580c:	08015897 	.word	0x08015897
 8015810:	08015897 	.word	0x08015897
 8015814:	08015897 	.word	0x08015897
 8015818:	08015897 	.word	0x08015897
 801581c:	08015897 	.word	0x08015897
 8015820:	08015853 	.word	0x08015853
 8015824:	0801587d 	.word	0x0801587d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801582e:	b2db      	uxtb	r3, r3
 8015830:	2b03      	cmp	r3, #3
 8015832:	d107      	bne.n	8015844 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015834:	f107 030a 	add.w	r3, r7, #10
 8015838:	2202      	movs	r2, #2
 801583a:	4619      	mov	r1, r3
 801583c:	6878      	ldr	r0, [r7, #4]
 801583e:	f001 fd33 	bl	80172a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015842:	e032      	b.n	80158aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015844:	6839      	ldr	r1, [r7, #0]
 8015846:	6878      	ldr	r0, [r7, #4]
 8015848:	f001 fcbd 	bl	80171c6 <USBD_CtlError>
            ret = USBD_FAIL;
 801584c:	2303      	movs	r3, #3
 801584e:	75fb      	strb	r3, [r7, #23]
          break;
 8015850:	e02b      	b.n	80158aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015858:	b2db      	uxtb	r3, r3
 801585a:	2b03      	cmp	r3, #3
 801585c:	d107      	bne.n	801586e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801585e:	f107 030d 	add.w	r3, r7, #13
 8015862:	2201      	movs	r2, #1
 8015864:	4619      	mov	r1, r3
 8015866:	6878      	ldr	r0, [r7, #4]
 8015868:	f001 fd1e 	bl	80172a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801586c:	e01d      	b.n	80158aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801586e:	6839      	ldr	r1, [r7, #0]
 8015870:	6878      	ldr	r0, [r7, #4]
 8015872:	f001 fca8 	bl	80171c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8015876:	2303      	movs	r3, #3
 8015878:	75fb      	strb	r3, [r7, #23]
          break;
 801587a:	e016      	b.n	80158aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015882:	b2db      	uxtb	r3, r3
 8015884:	2b03      	cmp	r3, #3
 8015886:	d00f      	beq.n	80158a8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8015888:	6839      	ldr	r1, [r7, #0]
 801588a:	6878      	ldr	r0, [r7, #4]
 801588c:	f001 fc9b 	bl	80171c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8015890:	2303      	movs	r3, #3
 8015892:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8015894:	e008      	b.n	80158a8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8015896:	6839      	ldr	r1, [r7, #0]
 8015898:	6878      	ldr	r0, [r7, #4]
 801589a:	f001 fc94 	bl	80171c6 <USBD_CtlError>
          ret = USBD_FAIL;
 801589e:	2303      	movs	r3, #3
 80158a0:	75fb      	strb	r3, [r7, #23]
          break;
 80158a2:	e002      	b.n	80158aa <USBD_CDC_Setup+0x19e>
          break;
 80158a4:	bf00      	nop
 80158a6:	e008      	b.n	80158ba <USBD_CDC_Setup+0x1ae>
          break;
 80158a8:	bf00      	nop
      }
      break;
 80158aa:	e006      	b.n	80158ba <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80158ac:	6839      	ldr	r1, [r7, #0]
 80158ae:	6878      	ldr	r0, [r7, #4]
 80158b0:	f001 fc89 	bl	80171c6 <USBD_CtlError>
      ret = USBD_FAIL;
 80158b4:	2303      	movs	r3, #3
 80158b6:	75fb      	strb	r3, [r7, #23]
      break;
 80158b8:	bf00      	nop
  }

  return (uint8_t)ret;
 80158ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80158bc:	4618      	mov	r0, r3
 80158be:	3718      	adds	r7, #24
 80158c0:	46bd      	mov	sp, r7
 80158c2:	bd80      	pop	{r7, pc}

080158c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80158c4:	b580      	push	{r7, lr}
 80158c6:	b084      	sub	sp, #16
 80158c8:	af00      	add	r7, sp, #0
 80158ca:	6078      	str	r0, [r7, #4]
 80158cc:	460b      	mov	r3, r1
 80158ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80158d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	32b0      	adds	r2, #176	; 0xb0
 80158e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d101      	bne.n	80158ee <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80158ea:	2303      	movs	r3, #3
 80158ec:	e065      	b.n	80159ba <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	32b0      	adds	r2, #176	; 0xb0
 80158f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158fc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80158fe:	78fb      	ldrb	r3, [r7, #3]
 8015900:	f003 020f 	and.w	r2, r3, #15
 8015904:	6879      	ldr	r1, [r7, #4]
 8015906:	4613      	mov	r3, r2
 8015908:	009b      	lsls	r3, r3, #2
 801590a:	4413      	add	r3, r2
 801590c:	009b      	lsls	r3, r3, #2
 801590e:	440b      	add	r3, r1
 8015910:	3318      	adds	r3, #24
 8015912:	681b      	ldr	r3, [r3, #0]
 8015914:	2b00      	cmp	r3, #0
 8015916:	d02f      	beq.n	8015978 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8015918:	78fb      	ldrb	r3, [r7, #3]
 801591a:	f003 020f 	and.w	r2, r3, #15
 801591e:	6879      	ldr	r1, [r7, #4]
 8015920:	4613      	mov	r3, r2
 8015922:	009b      	lsls	r3, r3, #2
 8015924:	4413      	add	r3, r2
 8015926:	009b      	lsls	r3, r3, #2
 8015928:	440b      	add	r3, r1
 801592a:	3318      	adds	r3, #24
 801592c:	681a      	ldr	r2, [r3, #0]
 801592e:	78fb      	ldrb	r3, [r7, #3]
 8015930:	f003 010f 	and.w	r1, r3, #15
 8015934:	68f8      	ldr	r0, [r7, #12]
 8015936:	460b      	mov	r3, r1
 8015938:	00db      	lsls	r3, r3, #3
 801593a:	440b      	add	r3, r1
 801593c:	009b      	lsls	r3, r3, #2
 801593e:	4403      	add	r3, r0
 8015940:	3344      	adds	r3, #68	; 0x44
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	fbb2 f1f3 	udiv	r1, r2, r3
 8015948:	fb01 f303 	mul.w	r3, r1, r3
 801594c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801594e:	2b00      	cmp	r3, #0
 8015950:	d112      	bne.n	8015978 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8015952:	78fb      	ldrb	r3, [r7, #3]
 8015954:	f003 020f 	and.w	r2, r3, #15
 8015958:	6879      	ldr	r1, [r7, #4]
 801595a:	4613      	mov	r3, r2
 801595c:	009b      	lsls	r3, r3, #2
 801595e:	4413      	add	r3, r2
 8015960:	009b      	lsls	r3, r3, #2
 8015962:	440b      	add	r3, r1
 8015964:	3318      	adds	r3, #24
 8015966:	2200      	movs	r2, #0
 8015968:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801596a:	78f9      	ldrb	r1, [r7, #3]
 801596c:	2300      	movs	r3, #0
 801596e:	2200      	movs	r2, #0
 8015970:	6878      	ldr	r0, [r7, #4]
 8015972:	f002 f9f0 	bl	8017d56 <USBD_LL_Transmit>
 8015976:	e01f      	b.n	80159b8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8015978:	68bb      	ldr	r3, [r7, #8]
 801597a:	2200      	movs	r2, #0
 801597c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015986:	687a      	ldr	r2, [r7, #4]
 8015988:	33b0      	adds	r3, #176	; 0xb0
 801598a:	009b      	lsls	r3, r3, #2
 801598c:	4413      	add	r3, r2
 801598e:	685b      	ldr	r3, [r3, #4]
 8015990:	691b      	ldr	r3, [r3, #16]
 8015992:	2b00      	cmp	r3, #0
 8015994:	d010      	beq.n	80159b8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801599c:	687a      	ldr	r2, [r7, #4]
 801599e:	33b0      	adds	r3, #176	; 0xb0
 80159a0:	009b      	lsls	r3, r3, #2
 80159a2:	4413      	add	r3, r2
 80159a4:	685b      	ldr	r3, [r3, #4]
 80159a6:	691b      	ldr	r3, [r3, #16]
 80159a8:	68ba      	ldr	r2, [r7, #8]
 80159aa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80159ae:	68ba      	ldr	r2, [r7, #8]
 80159b0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80159b4:	78fa      	ldrb	r2, [r7, #3]
 80159b6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80159b8:	2300      	movs	r3, #0
}
 80159ba:	4618      	mov	r0, r3
 80159bc:	3710      	adds	r7, #16
 80159be:	46bd      	mov	sp, r7
 80159c0:	bd80      	pop	{r7, pc}

080159c2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80159c2:	b580      	push	{r7, lr}
 80159c4:	b084      	sub	sp, #16
 80159c6:	af00      	add	r7, sp, #0
 80159c8:	6078      	str	r0, [r7, #4]
 80159ca:	460b      	mov	r3, r1
 80159cc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	32b0      	adds	r2, #176	; 0xb0
 80159d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159dc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	32b0      	adds	r2, #176	; 0xb0
 80159e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d101      	bne.n	80159f4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80159f0:	2303      	movs	r3, #3
 80159f2:	e01a      	b.n	8015a2a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80159f4:	78fb      	ldrb	r3, [r7, #3]
 80159f6:	4619      	mov	r1, r3
 80159f8:	6878      	ldr	r0, [r7, #4]
 80159fa:	f002 f9ee 	bl	8017dda <USBD_LL_GetRxDataSize>
 80159fe:	4602      	mov	r2, r0
 8015a00:	68fb      	ldr	r3, [r7, #12]
 8015a02:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015a0c:	687a      	ldr	r2, [r7, #4]
 8015a0e:	33b0      	adds	r3, #176	; 0xb0
 8015a10:	009b      	lsls	r3, r3, #2
 8015a12:	4413      	add	r3, r2
 8015a14:	685b      	ldr	r3, [r3, #4]
 8015a16:	68db      	ldr	r3, [r3, #12]
 8015a18:	68fa      	ldr	r2, [r7, #12]
 8015a1a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8015a1e:	68fa      	ldr	r2, [r7, #12]
 8015a20:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8015a24:	4611      	mov	r1, r2
 8015a26:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8015a28:	2300      	movs	r3, #0
}
 8015a2a:	4618      	mov	r0, r3
 8015a2c:	3710      	adds	r7, #16
 8015a2e:	46bd      	mov	sp, r7
 8015a30:	bd80      	pop	{r7, pc}

08015a32 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8015a32:	b580      	push	{r7, lr}
 8015a34:	b084      	sub	sp, #16
 8015a36:	af00      	add	r7, sp, #0
 8015a38:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	32b0      	adds	r2, #176	; 0xb0
 8015a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a48:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015a4a:	68fb      	ldr	r3, [r7, #12]
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d101      	bne.n	8015a54 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8015a50:	2303      	movs	r3, #3
 8015a52:	e025      	b.n	8015aa0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015a5a:	687a      	ldr	r2, [r7, #4]
 8015a5c:	33b0      	adds	r3, #176	; 0xb0
 8015a5e:	009b      	lsls	r3, r3, #2
 8015a60:	4413      	add	r3, r2
 8015a62:	685b      	ldr	r3, [r3, #4]
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	d01a      	beq.n	8015a9e <USBD_CDC_EP0_RxReady+0x6c>
 8015a68:	68fb      	ldr	r3, [r7, #12]
 8015a6a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8015a6e:	2bff      	cmp	r3, #255	; 0xff
 8015a70:	d015      	beq.n	8015a9e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015a78:	687a      	ldr	r2, [r7, #4]
 8015a7a:	33b0      	adds	r3, #176	; 0xb0
 8015a7c:	009b      	lsls	r3, r3, #2
 8015a7e:	4413      	add	r3, r2
 8015a80:	685b      	ldr	r3, [r3, #4]
 8015a82:	689b      	ldr	r3, [r3, #8]
 8015a84:	68fa      	ldr	r2, [r7, #12]
 8015a86:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8015a8a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8015a8c:	68fa      	ldr	r2, [r7, #12]
 8015a8e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015a92:	b292      	uxth	r2, r2
 8015a94:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8015a96:	68fb      	ldr	r3, [r7, #12]
 8015a98:	22ff      	movs	r2, #255	; 0xff
 8015a9a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8015a9e:	2300      	movs	r3, #0
}
 8015aa0:	4618      	mov	r0, r3
 8015aa2:	3710      	adds	r7, #16
 8015aa4:	46bd      	mov	sp, r7
 8015aa6:	bd80      	pop	{r7, pc}

08015aa8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8015aa8:	b580      	push	{r7, lr}
 8015aaa:	b086      	sub	sp, #24
 8015aac:	af00      	add	r7, sp, #0
 8015aae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015ab0:	2182      	movs	r1, #130	; 0x82
 8015ab2:	4818      	ldr	r0, [pc, #96]	; (8015b14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015ab4:	f000 fd4f 	bl	8016556 <USBD_GetEpDesc>
 8015ab8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015aba:	2101      	movs	r1, #1
 8015abc:	4815      	ldr	r0, [pc, #84]	; (8015b14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015abe:	f000 fd4a 	bl	8016556 <USBD_GetEpDesc>
 8015ac2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015ac4:	2181      	movs	r1, #129	; 0x81
 8015ac6:	4813      	ldr	r0, [pc, #76]	; (8015b14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015ac8:	f000 fd45 	bl	8016556 <USBD_GetEpDesc>
 8015acc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015ace:	697b      	ldr	r3, [r7, #20]
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	d002      	beq.n	8015ada <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015ad4:	697b      	ldr	r3, [r7, #20]
 8015ad6:	2210      	movs	r2, #16
 8015ad8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015ada:	693b      	ldr	r3, [r7, #16]
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d006      	beq.n	8015aee <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015ae0:	693b      	ldr	r3, [r7, #16]
 8015ae2:	2200      	movs	r2, #0
 8015ae4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015ae8:	711a      	strb	r2, [r3, #4]
 8015aea:	2200      	movs	r2, #0
 8015aec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015aee:	68fb      	ldr	r3, [r7, #12]
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d006      	beq.n	8015b02 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015af4:	68fb      	ldr	r3, [r7, #12]
 8015af6:	2200      	movs	r2, #0
 8015af8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015afc:	711a      	strb	r2, [r3, #4]
 8015afe:	2200      	movs	r2, #0
 8015b00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	2243      	movs	r2, #67	; 0x43
 8015b06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015b08:	4b02      	ldr	r3, [pc, #8]	; (8015b14 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8015b0a:	4618      	mov	r0, r3
 8015b0c:	3718      	adds	r7, #24
 8015b0e:	46bd      	mov	sp, r7
 8015b10:	bd80      	pop	{r7, pc}
 8015b12:	bf00      	nop
 8015b14:	24000080 	.word	0x24000080

08015b18 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8015b18:	b580      	push	{r7, lr}
 8015b1a:	b086      	sub	sp, #24
 8015b1c:	af00      	add	r7, sp, #0
 8015b1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015b20:	2182      	movs	r1, #130	; 0x82
 8015b22:	4818      	ldr	r0, [pc, #96]	; (8015b84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015b24:	f000 fd17 	bl	8016556 <USBD_GetEpDesc>
 8015b28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015b2a:	2101      	movs	r1, #1
 8015b2c:	4815      	ldr	r0, [pc, #84]	; (8015b84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015b2e:	f000 fd12 	bl	8016556 <USBD_GetEpDesc>
 8015b32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015b34:	2181      	movs	r1, #129	; 0x81
 8015b36:	4813      	ldr	r0, [pc, #76]	; (8015b84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015b38:	f000 fd0d 	bl	8016556 <USBD_GetEpDesc>
 8015b3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015b3e:	697b      	ldr	r3, [r7, #20]
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d002      	beq.n	8015b4a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8015b44:	697b      	ldr	r3, [r7, #20]
 8015b46:	2210      	movs	r2, #16
 8015b48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015b4a:	693b      	ldr	r3, [r7, #16]
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d006      	beq.n	8015b5e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015b50:	693b      	ldr	r3, [r7, #16]
 8015b52:	2200      	movs	r2, #0
 8015b54:	711a      	strb	r2, [r3, #4]
 8015b56:	2200      	movs	r2, #0
 8015b58:	f042 0202 	orr.w	r2, r2, #2
 8015b5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d006      	beq.n	8015b72 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015b64:	68fb      	ldr	r3, [r7, #12]
 8015b66:	2200      	movs	r2, #0
 8015b68:	711a      	strb	r2, [r3, #4]
 8015b6a:	2200      	movs	r2, #0
 8015b6c:	f042 0202 	orr.w	r2, r2, #2
 8015b70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	2243      	movs	r2, #67	; 0x43
 8015b76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015b78:	4b02      	ldr	r3, [pc, #8]	; (8015b84 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8015b7a:	4618      	mov	r0, r3
 8015b7c:	3718      	adds	r7, #24
 8015b7e:	46bd      	mov	sp, r7
 8015b80:	bd80      	pop	{r7, pc}
 8015b82:	bf00      	nop
 8015b84:	24000080 	.word	0x24000080

08015b88 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8015b88:	b580      	push	{r7, lr}
 8015b8a:	b086      	sub	sp, #24
 8015b8c:	af00      	add	r7, sp, #0
 8015b8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015b90:	2182      	movs	r1, #130	; 0x82
 8015b92:	4818      	ldr	r0, [pc, #96]	; (8015bf4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015b94:	f000 fcdf 	bl	8016556 <USBD_GetEpDesc>
 8015b98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015b9a:	2101      	movs	r1, #1
 8015b9c:	4815      	ldr	r0, [pc, #84]	; (8015bf4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015b9e:	f000 fcda 	bl	8016556 <USBD_GetEpDesc>
 8015ba2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015ba4:	2181      	movs	r1, #129	; 0x81
 8015ba6:	4813      	ldr	r0, [pc, #76]	; (8015bf4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015ba8:	f000 fcd5 	bl	8016556 <USBD_GetEpDesc>
 8015bac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015bae:	697b      	ldr	r3, [r7, #20]
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d002      	beq.n	8015bba <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015bb4:	697b      	ldr	r3, [r7, #20]
 8015bb6:	2210      	movs	r2, #16
 8015bb8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015bba:	693b      	ldr	r3, [r7, #16]
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	d006      	beq.n	8015bce <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015bc0:	693b      	ldr	r3, [r7, #16]
 8015bc2:	2200      	movs	r2, #0
 8015bc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015bc8:	711a      	strb	r2, [r3, #4]
 8015bca:	2200      	movs	r2, #0
 8015bcc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015bce:	68fb      	ldr	r3, [r7, #12]
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d006      	beq.n	8015be2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015bd4:	68fb      	ldr	r3, [r7, #12]
 8015bd6:	2200      	movs	r2, #0
 8015bd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015bdc:	711a      	strb	r2, [r3, #4]
 8015bde:	2200      	movs	r2, #0
 8015be0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	2243      	movs	r2, #67	; 0x43
 8015be6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015be8:	4b02      	ldr	r3, [pc, #8]	; (8015bf4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8015bea:	4618      	mov	r0, r3
 8015bec:	3718      	adds	r7, #24
 8015bee:	46bd      	mov	sp, r7
 8015bf0:	bd80      	pop	{r7, pc}
 8015bf2:	bf00      	nop
 8015bf4:	24000080 	.word	0x24000080

08015bf8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8015bf8:	b480      	push	{r7}
 8015bfa:	b083      	sub	sp, #12
 8015bfc:	af00      	add	r7, sp, #0
 8015bfe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	220a      	movs	r2, #10
 8015c04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8015c06:	4b03      	ldr	r3, [pc, #12]	; (8015c14 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8015c08:	4618      	mov	r0, r3
 8015c0a:	370c      	adds	r7, #12
 8015c0c:	46bd      	mov	sp, r7
 8015c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c12:	4770      	bx	lr
 8015c14:	2400003c 	.word	0x2400003c

08015c18 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8015c18:	b480      	push	{r7}
 8015c1a:	b083      	sub	sp, #12
 8015c1c:	af00      	add	r7, sp, #0
 8015c1e:	6078      	str	r0, [r7, #4]
 8015c20:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8015c22:	683b      	ldr	r3, [r7, #0]
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d101      	bne.n	8015c2c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8015c28:	2303      	movs	r3, #3
 8015c2a:	e009      	b.n	8015c40 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015c32:	687a      	ldr	r2, [r7, #4]
 8015c34:	33b0      	adds	r3, #176	; 0xb0
 8015c36:	009b      	lsls	r3, r3, #2
 8015c38:	4413      	add	r3, r2
 8015c3a:	683a      	ldr	r2, [r7, #0]
 8015c3c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8015c3e:	2300      	movs	r3, #0
}
 8015c40:	4618      	mov	r0, r3
 8015c42:	370c      	adds	r7, #12
 8015c44:	46bd      	mov	sp, r7
 8015c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c4a:	4770      	bx	lr

08015c4c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8015c4c:	b480      	push	{r7}
 8015c4e:	b087      	sub	sp, #28
 8015c50:	af00      	add	r7, sp, #0
 8015c52:	60f8      	str	r0, [r7, #12]
 8015c54:	60b9      	str	r1, [r7, #8]
 8015c56:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015c58:	68fb      	ldr	r3, [r7, #12]
 8015c5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015c5e:	68fb      	ldr	r3, [r7, #12]
 8015c60:	32b0      	adds	r2, #176	; 0xb0
 8015c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c66:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015c68:	697b      	ldr	r3, [r7, #20]
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	d101      	bne.n	8015c72 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8015c6e:	2303      	movs	r3, #3
 8015c70:	e008      	b.n	8015c84 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8015c72:	697b      	ldr	r3, [r7, #20]
 8015c74:	68ba      	ldr	r2, [r7, #8]
 8015c76:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8015c7a:	697b      	ldr	r3, [r7, #20]
 8015c7c:	687a      	ldr	r2, [r7, #4]
 8015c7e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8015c82:	2300      	movs	r3, #0
}
 8015c84:	4618      	mov	r0, r3
 8015c86:	371c      	adds	r7, #28
 8015c88:	46bd      	mov	sp, r7
 8015c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c8e:	4770      	bx	lr

08015c90 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8015c90:	b480      	push	{r7}
 8015c92:	b085      	sub	sp, #20
 8015c94:	af00      	add	r7, sp, #0
 8015c96:	6078      	str	r0, [r7, #4]
 8015c98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	32b0      	adds	r2, #176	; 0xb0
 8015ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ca8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015caa:	68fb      	ldr	r3, [r7, #12]
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d101      	bne.n	8015cb4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8015cb0:	2303      	movs	r3, #3
 8015cb2:	e004      	b.n	8015cbe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8015cb4:	68fb      	ldr	r3, [r7, #12]
 8015cb6:	683a      	ldr	r2, [r7, #0]
 8015cb8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8015cbc:	2300      	movs	r3, #0
}
 8015cbe:	4618      	mov	r0, r3
 8015cc0:	3714      	adds	r7, #20
 8015cc2:	46bd      	mov	sp, r7
 8015cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cc8:	4770      	bx	lr
	...

08015ccc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8015ccc:	b580      	push	{r7, lr}
 8015cce:	b084      	sub	sp, #16
 8015cd0:	af00      	add	r7, sp, #0
 8015cd2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	32b0      	adds	r2, #176	; 0xb0
 8015cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ce2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8015ce4:	2301      	movs	r3, #1
 8015ce6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015ce8:	68bb      	ldr	r3, [r7, #8]
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d101      	bne.n	8015cf2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8015cee:	2303      	movs	r3, #3
 8015cf0:	e025      	b.n	8015d3e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8015cf2:	68bb      	ldr	r3, [r7, #8]
 8015cf4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d11f      	bne.n	8015d3c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8015cfc:	68bb      	ldr	r3, [r7, #8]
 8015cfe:	2201      	movs	r2, #1
 8015d00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8015d04:	4b10      	ldr	r3, [pc, #64]	; (8015d48 <USBD_CDC_TransmitPacket+0x7c>)
 8015d06:	781b      	ldrb	r3, [r3, #0]
 8015d08:	f003 020f 	and.w	r2, r3, #15
 8015d0c:	68bb      	ldr	r3, [r7, #8]
 8015d0e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8015d12:	6878      	ldr	r0, [r7, #4]
 8015d14:	4613      	mov	r3, r2
 8015d16:	009b      	lsls	r3, r3, #2
 8015d18:	4413      	add	r3, r2
 8015d1a:	009b      	lsls	r3, r3, #2
 8015d1c:	4403      	add	r3, r0
 8015d1e:	3318      	adds	r3, #24
 8015d20:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8015d22:	4b09      	ldr	r3, [pc, #36]	; (8015d48 <USBD_CDC_TransmitPacket+0x7c>)
 8015d24:	7819      	ldrb	r1, [r3, #0]
 8015d26:	68bb      	ldr	r3, [r7, #8]
 8015d28:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8015d2c:	68bb      	ldr	r3, [r7, #8]
 8015d2e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8015d32:	6878      	ldr	r0, [r7, #4]
 8015d34:	f002 f80f 	bl	8017d56 <USBD_LL_Transmit>

    ret = USBD_OK;
 8015d38:	2300      	movs	r3, #0
 8015d3a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8015d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d3e:	4618      	mov	r0, r3
 8015d40:	3710      	adds	r7, #16
 8015d42:	46bd      	mov	sp, r7
 8015d44:	bd80      	pop	{r7, pc}
 8015d46:	bf00      	nop
 8015d48:	240000c3 	.word	0x240000c3

08015d4c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8015d4c:	b580      	push	{r7, lr}
 8015d4e:	b084      	sub	sp, #16
 8015d50:	af00      	add	r7, sp, #0
 8015d52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	32b0      	adds	r2, #176	; 0xb0
 8015d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d62:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	32b0      	adds	r2, #176	; 0xb0
 8015d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d101      	bne.n	8015d7a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8015d76:	2303      	movs	r3, #3
 8015d78:	e018      	b.n	8015dac <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	7c1b      	ldrb	r3, [r3, #16]
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d10a      	bne.n	8015d98 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015d82:	4b0c      	ldr	r3, [pc, #48]	; (8015db4 <USBD_CDC_ReceivePacket+0x68>)
 8015d84:	7819      	ldrb	r1, [r3, #0]
 8015d86:	68fb      	ldr	r3, [r7, #12]
 8015d88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015d8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015d90:	6878      	ldr	r0, [r7, #4]
 8015d92:	f002 f801 	bl	8017d98 <USBD_LL_PrepareReceive>
 8015d96:	e008      	b.n	8015daa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015d98:	4b06      	ldr	r3, [pc, #24]	; (8015db4 <USBD_CDC_ReceivePacket+0x68>)
 8015d9a:	7819      	ldrb	r1, [r3, #0]
 8015d9c:	68fb      	ldr	r3, [r7, #12]
 8015d9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015da2:	2340      	movs	r3, #64	; 0x40
 8015da4:	6878      	ldr	r0, [r7, #4]
 8015da6:	f001 fff7 	bl	8017d98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015daa:	2300      	movs	r3, #0
}
 8015dac:	4618      	mov	r0, r3
 8015dae:	3710      	adds	r7, #16
 8015db0:	46bd      	mov	sp, r7
 8015db2:	bd80      	pop	{r7, pc}
 8015db4:	240000c4 	.word	0x240000c4

08015db8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8015db8:	b580      	push	{r7, lr}
 8015dba:	b086      	sub	sp, #24
 8015dbc:	af00      	add	r7, sp, #0
 8015dbe:	60f8      	str	r0, [r7, #12]
 8015dc0:	60b9      	str	r1, [r7, #8]
 8015dc2:	4613      	mov	r3, r2
 8015dc4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8015dc6:	68fb      	ldr	r3, [r7, #12]
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d101      	bne.n	8015dd0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015dcc:	2303      	movs	r3, #3
 8015dce:	e01f      	b.n	8015e10 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8015dd0:	68fb      	ldr	r3, [r7, #12]
 8015dd2:	2200      	movs	r2, #0
 8015dd4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	2200      	movs	r2, #0
 8015ddc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8015de0:	68fb      	ldr	r3, [r7, #12]
 8015de2:	2200      	movs	r2, #0
 8015de4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015de8:	68bb      	ldr	r3, [r7, #8]
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d003      	beq.n	8015df6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	68ba      	ldr	r2, [r7, #8]
 8015df2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015df6:	68fb      	ldr	r3, [r7, #12]
 8015df8:	2201      	movs	r2, #1
 8015dfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8015dfe:	68fb      	ldr	r3, [r7, #12]
 8015e00:	79fa      	ldrb	r2, [r7, #7]
 8015e02:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8015e04:	68f8      	ldr	r0, [r7, #12]
 8015e06:	f001 fe6b 	bl	8017ae0 <USBD_LL_Init>
 8015e0a:	4603      	mov	r3, r0
 8015e0c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8015e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015e10:	4618      	mov	r0, r3
 8015e12:	3718      	adds	r7, #24
 8015e14:	46bd      	mov	sp, r7
 8015e16:	bd80      	pop	{r7, pc}

08015e18 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015e18:	b580      	push	{r7, lr}
 8015e1a:	b084      	sub	sp, #16
 8015e1c:	af00      	add	r7, sp, #0
 8015e1e:	6078      	str	r0, [r7, #4]
 8015e20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015e22:	2300      	movs	r3, #0
 8015e24:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8015e26:	683b      	ldr	r3, [r7, #0]
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d101      	bne.n	8015e30 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015e2c:	2303      	movs	r3, #3
 8015e2e:	e025      	b.n	8015e7c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	683a      	ldr	r2, [r7, #0]
 8015e34:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	32ae      	adds	r2, #174	; 0xae
 8015e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d00f      	beq.n	8015e6c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	32ae      	adds	r2, #174	; 0xae
 8015e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e5c:	f107 020e 	add.w	r2, r7, #14
 8015e60:	4610      	mov	r0, r2
 8015e62:	4798      	blx	r3
 8015e64:	4602      	mov	r2, r0
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015e72:	1c5a      	adds	r2, r3, #1
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8015e7a:	2300      	movs	r3, #0
}
 8015e7c:	4618      	mov	r0, r3
 8015e7e:	3710      	adds	r7, #16
 8015e80:	46bd      	mov	sp, r7
 8015e82:	bd80      	pop	{r7, pc}

08015e84 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8015e84:	b580      	push	{r7, lr}
 8015e86:	b082      	sub	sp, #8
 8015e88:	af00      	add	r7, sp, #0
 8015e8a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8015e8c:	6878      	ldr	r0, [r7, #4]
 8015e8e:	f001 fe79 	bl	8017b84 <USBD_LL_Start>
 8015e92:	4603      	mov	r3, r0
}
 8015e94:	4618      	mov	r0, r3
 8015e96:	3708      	adds	r7, #8
 8015e98:	46bd      	mov	sp, r7
 8015e9a:	bd80      	pop	{r7, pc}

08015e9c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8015e9c:	b480      	push	{r7}
 8015e9e:	b083      	sub	sp, #12
 8015ea0:	af00      	add	r7, sp, #0
 8015ea2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015ea4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8015ea6:	4618      	mov	r0, r3
 8015ea8:	370c      	adds	r7, #12
 8015eaa:	46bd      	mov	sp, r7
 8015eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eb0:	4770      	bx	lr

08015eb2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015eb2:	b580      	push	{r7, lr}
 8015eb4:	b084      	sub	sp, #16
 8015eb6:	af00      	add	r7, sp, #0
 8015eb8:	6078      	str	r0, [r7, #4]
 8015eba:	460b      	mov	r3, r1
 8015ebc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015ebe:	2300      	movs	r3, #0
 8015ec0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d009      	beq.n	8015ee0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	78fa      	ldrb	r2, [r7, #3]
 8015ed6:	4611      	mov	r1, r2
 8015ed8:	6878      	ldr	r0, [r7, #4]
 8015eda:	4798      	blx	r3
 8015edc:	4603      	mov	r3, r0
 8015ede:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ee2:	4618      	mov	r0, r3
 8015ee4:	3710      	adds	r7, #16
 8015ee6:	46bd      	mov	sp, r7
 8015ee8:	bd80      	pop	{r7, pc}

08015eea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015eea:	b580      	push	{r7, lr}
 8015eec:	b084      	sub	sp, #16
 8015eee:	af00      	add	r7, sp, #0
 8015ef0:	6078      	str	r0, [r7, #4]
 8015ef2:	460b      	mov	r3, r1
 8015ef4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015ef6:	2300      	movs	r3, #0
 8015ef8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f00:	685b      	ldr	r3, [r3, #4]
 8015f02:	78fa      	ldrb	r2, [r7, #3]
 8015f04:	4611      	mov	r1, r2
 8015f06:	6878      	ldr	r0, [r7, #4]
 8015f08:	4798      	blx	r3
 8015f0a:	4603      	mov	r3, r0
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d001      	beq.n	8015f14 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8015f10:	2303      	movs	r3, #3
 8015f12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f16:	4618      	mov	r0, r3
 8015f18:	3710      	adds	r7, #16
 8015f1a:	46bd      	mov	sp, r7
 8015f1c:	bd80      	pop	{r7, pc}

08015f1e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015f1e:	b580      	push	{r7, lr}
 8015f20:	b084      	sub	sp, #16
 8015f22:	af00      	add	r7, sp, #0
 8015f24:	6078      	str	r0, [r7, #4]
 8015f26:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015f2e:	6839      	ldr	r1, [r7, #0]
 8015f30:	4618      	mov	r0, r3
 8015f32:	f001 f90e 	bl	8017152 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	2201      	movs	r2, #1
 8015f3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8015f44:	461a      	mov	r2, r3
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015f52:	f003 031f 	and.w	r3, r3, #31
 8015f56:	2b02      	cmp	r3, #2
 8015f58:	d01a      	beq.n	8015f90 <USBD_LL_SetupStage+0x72>
 8015f5a:	2b02      	cmp	r3, #2
 8015f5c:	d822      	bhi.n	8015fa4 <USBD_LL_SetupStage+0x86>
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d002      	beq.n	8015f68 <USBD_LL_SetupStage+0x4a>
 8015f62:	2b01      	cmp	r3, #1
 8015f64:	d00a      	beq.n	8015f7c <USBD_LL_SetupStage+0x5e>
 8015f66:	e01d      	b.n	8015fa4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015f6e:	4619      	mov	r1, r3
 8015f70:	6878      	ldr	r0, [r7, #4]
 8015f72:	f000 fb65 	bl	8016640 <USBD_StdDevReq>
 8015f76:	4603      	mov	r3, r0
 8015f78:	73fb      	strb	r3, [r7, #15]
      break;
 8015f7a:	e020      	b.n	8015fbe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015f82:	4619      	mov	r1, r3
 8015f84:	6878      	ldr	r0, [r7, #4]
 8015f86:	f000 fbcd 	bl	8016724 <USBD_StdItfReq>
 8015f8a:	4603      	mov	r3, r0
 8015f8c:	73fb      	strb	r3, [r7, #15]
      break;
 8015f8e:	e016      	b.n	8015fbe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015f96:	4619      	mov	r1, r3
 8015f98:	6878      	ldr	r0, [r7, #4]
 8015f9a:	f000 fc2f 	bl	80167fc <USBD_StdEPReq>
 8015f9e:	4603      	mov	r3, r0
 8015fa0:	73fb      	strb	r3, [r7, #15]
      break;
 8015fa2:	e00c      	b.n	8015fbe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015faa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015fae:	b2db      	uxtb	r3, r3
 8015fb0:	4619      	mov	r1, r3
 8015fb2:	6878      	ldr	r0, [r7, #4]
 8015fb4:	f001 fe46 	bl	8017c44 <USBD_LL_StallEP>
 8015fb8:	4603      	mov	r3, r0
 8015fba:	73fb      	strb	r3, [r7, #15]
      break;
 8015fbc:	bf00      	nop
  }

  return ret;
 8015fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8015fc0:	4618      	mov	r0, r3
 8015fc2:	3710      	adds	r7, #16
 8015fc4:	46bd      	mov	sp, r7
 8015fc6:	bd80      	pop	{r7, pc}

08015fc8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015fc8:	b580      	push	{r7, lr}
 8015fca:	b086      	sub	sp, #24
 8015fcc:	af00      	add	r7, sp, #0
 8015fce:	60f8      	str	r0, [r7, #12]
 8015fd0:	460b      	mov	r3, r1
 8015fd2:	607a      	str	r2, [r7, #4]
 8015fd4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8015fd6:	2300      	movs	r3, #0
 8015fd8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8015fda:	7afb      	ldrb	r3, [r7, #11]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d16e      	bne.n	80160be <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8015fe0:	68fb      	ldr	r3, [r7, #12]
 8015fe2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015fe6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015fe8:	68fb      	ldr	r3, [r7, #12]
 8015fea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015fee:	2b03      	cmp	r3, #3
 8015ff0:	f040 8098 	bne.w	8016124 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8015ff4:	693b      	ldr	r3, [r7, #16]
 8015ff6:	689a      	ldr	r2, [r3, #8]
 8015ff8:	693b      	ldr	r3, [r7, #16]
 8015ffa:	68db      	ldr	r3, [r3, #12]
 8015ffc:	429a      	cmp	r2, r3
 8015ffe:	d913      	bls.n	8016028 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8016000:	693b      	ldr	r3, [r7, #16]
 8016002:	689a      	ldr	r2, [r3, #8]
 8016004:	693b      	ldr	r3, [r7, #16]
 8016006:	68db      	ldr	r3, [r3, #12]
 8016008:	1ad2      	subs	r2, r2, r3
 801600a:	693b      	ldr	r3, [r7, #16]
 801600c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801600e:	693b      	ldr	r3, [r7, #16]
 8016010:	68da      	ldr	r2, [r3, #12]
 8016012:	693b      	ldr	r3, [r7, #16]
 8016014:	689b      	ldr	r3, [r3, #8]
 8016016:	4293      	cmp	r3, r2
 8016018:	bf28      	it	cs
 801601a:	4613      	movcs	r3, r2
 801601c:	461a      	mov	r2, r3
 801601e:	6879      	ldr	r1, [r7, #4]
 8016020:	68f8      	ldr	r0, [r7, #12]
 8016022:	f001 f98a 	bl	801733a <USBD_CtlContinueRx>
 8016026:	e07d      	b.n	8016124 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8016028:	68fb      	ldr	r3, [r7, #12]
 801602a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801602e:	f003 031f 	and.w	r3, r3, #31
 8016032:	2b02      	cmp	r3, #2
 8016034:	d014      	beq.n	8016060 <USBD_LL_DataOutStage+0x98>
 8016036:	2b02      	cmp	r3, #2
 8016038:	d81d      	bhi.n	8016076 <USBD_LL_DataOutStage+0xae>
 801603a:	2b00      	cmp	r3, #0
 801603c:	d002      	beq.n	8016044 <USBD_LL_DataOutStage+0x7c>
 801603e:	2b01      	cmp	r3, #1
 8016040:	d003      	beq.n	801604a <USBD_LL_DataOutStage+0x82>
 8016042:	e018      	b.n	8016076 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8016044:	2300      	movs	r3, #0
 8016046:	75bb      	strb	r3, [r7, #22]
            break;
 8016048:	e018      	b.n	801607c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8016050:	b2db      	uxtb	r3, r3
 8016052:	4619      	mov	r1, r3
 8016054:	68f8      	ldr	r0, [r7, #12]
 8016056:	f000 fa64 	bl	8016522 <USBD_CoreFindIF>
 801605a:	4603      	mov	r3, r0
 801605c:	75bb      	strb	r3, [r7, #22]
            break;
 801605e:	e00d      	b.n	801607c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8016060:	68fb      	ldr	r3, [r7, #12]
 8016062:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8016066:	b2db      	uxtb	r3, r3
 8016068:	4619      	mov	r1, r3
 801606a:	68f8      	ldr	r0, [r7, #12]
 801606c:	f000 fa66 	bl	801653c <USBD_CoreFindEP>
 8016070:	4603      	mov	r3, r0
 8016072:	75bb      	strb	r3, [r7, #22]
            break;
 8016074:	e002      	b.n	801607c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8016076:	2300      	movs	r3, #0
 8016078:	75bb      	strb	r3, [r7, #22]
            break;
 801607a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 801607c:	7dbb      	ldrb	r3, [r7, #22]
 801607e:	2b00      	cmp	r3, #0
 8016080:	d119      	bne.n	80160b6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016082:	68fb      	ldr	r3, [r7, #12]
 8016084:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016088:	b2db      	uxtb	r3, r3
 801608a:	2b03      	cmp	r3, #3
 801608c:	d113      	bne.n	80160b6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801608e:	7dba      	ldrb	r2, [r7, #22]
 8016090:	68fb      	ldr	r3, [r7, #12]
 8016092:	32ae      	adds	r2, #174	; 0xae
 8016094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016098:	691b      	ldr	r3, [r3, #16]
 801609a:	2b00      	cmp	r3, #0
 801609c:	d00b      	beq.n	80160b6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801609e:	7dba      	ldrb	r2, [r7, #22]
 80160a0:	68fb      	ldr	r3, [r7, #12]
 80160a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80160a6:	7dba      	ldrb	r2, [r7, #22]
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	32ae      	adds	r2, #174	; 0xae
 80160ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160b0:	691b      	ldr	r3, [r3, #16]
 80160b2:	68f8      	ldr	r0, [r7, #12]
 80160b4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80160b6:	68f8      	ldr	r0, [r7, #12]
 80160b8:	f001 f950 	bl	801735c <USBD_CtlSendStatus>
 80160bc:	e032      	b.n	8016124 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80160be:	7afb      	ldrb	r3, [r7, #11]
 80160c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80160c4:	b2db      	uxtb	r3, r3
 80160c6:	4619      	mov	r1, r3
 80160c8:	68f8      	ldr	r0, [r7, #12]
 80160ca:	f000 fa37 	bl	801653c <USBD_CoreFindEP>
 80160ce:	4603      	mov	r3, r0
 80160d0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80160d2:	7dbb      	ldrb	r3, [r7, #22]
 80160d4:	2bff      	cmp	r3, #255	; 0xff
 80160d6:	d025      	beq.n	8016124 <USBD_LL_DataOutStage+0x15c>
 80160d8:	7dbb      	ldrb	r3, [r7, #22]
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d122      	bne.n	8016124 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80160de:	68fb      	ldr	r3, [r7, #12]
 80160e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80160e4:	b2db      	uxtb	r3, r3
 80160e6:	2b03      	cmp	r3, #3
 80160e8:	d117      	bne.n	801611a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80160ea:	7dba      	ldrb	r2, [r7, #22]
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	32ae      	adds	r2, #174	; 0xae
 80160f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160f4:	699b      	ldr	r3, [r3, #24]
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d00f      	beq.n	801611a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80160fa:	7dba      	ldrb	r2, [r7, #22]
 80160fc:	68fb      	ldr	r3, [r7, #12]
 80160fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8016102:	7dba      	ldrb	r2, [r7, #22]
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	32ae      	adds	r2, #174	; 0xae
 8016108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801610c:	699b      	ldr	r3, [r3, #24]
 801610e:	7afa      	ldrb	r2, [r7, #11]
 8016110:	4611      	mov	r1, r2
 8016112:	68f8      	ldr	r0, [r7, #12]
 8016114:	4798      	blx	r3
 8016116:	4603      	mov	r3, r0
 8016118:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801611a:	7dfb      	ldrb	r3, [r7, #23]
 801611c:	2b00      	cmp	r3, #0
 801611e:	d001      	beq.n	8016124 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8016120:	7dfb      	ldrb	r3, [r7, #23]
 8016122:	e000      	b.n	8016126 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8016124:	2300      	movs	r3, #0
}
 8016126:	4618      	mov	r0, r3
 8016128:	3718      	adds	r7, #24
 801612a:	46bd      	mov	sp, r7
 801612c:	bd80      	pop	{r7, pc}

0801612e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801612e:	b580      	push	{r7, lr}
 8016130:	b086      	sub	sp, #24
 8016132:	af00      	add	r7, sp, #0
 8016134:	60f8      	str	r0, [r7, #12]
 8016136:	460b      	mov	r3, r1
 8016138:	607a      	str	r2, [r7, #4]
 801613a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801613c:	7afb      	ldrb	r3, [r7, #11]
 801613e:	2b00      	cmp	r3, #0
 8016140:	d16f      	bne.n	8016222 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	3314      	adds	r3, #20
 8016146:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801614e:	2b02      	cmp	r3, #2
 8016150:	d15a      	bne.n	8016208 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8016152:	693b      	ldr	r3, [r7, #16]
 8016154:	689a      	ldr	r2, [r3, #8]
 8016156:	693b      	ldr	r3, [r7, #16]
 8016158:	68db      	ldr	r3, [r3, #12]
 801615a:	429a      	cmp	r2, r3
 801615c:	d914      	bls.n	8016188 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801615e:	693b      	ldr	r3, [r7, #16]
 8016160:	689a      	ldr	r2, [r3, #8]
 8016162:	693b      	ldr	r3, [r7, #16]
 8016164:	68db      	ldr	r3, [r3, #12]
 8016166:	1ad2      	subs	r2, r2, r3
 8016168:	693b      	ldr	r3, [r7, #16]
 801616a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801616c:	693b      	ldr	r3, [r7, #16]
 801616e:	689b      	ldr	r3, [r3, #8]
 8016170:	461a      	mov	r2, r3
 8016172:	6879      	ldr	r1, [r7, #4]
 8016174:	68f8      	ldr	r0, [r7, #12]
 8016176:	f001 f8b2 	bl	80172de <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801617a:	2300      	movs	r3, #0
 801617c:	2200      	movs	r2, #0
 801617e:	2100      	movs	r1, #0
 8016180:	68f8      	ldr	r0, [r7, #12]
 8016182:	f001 fe09 	bl	8017d98 <USBD_LL_PrepareReceive>
 8016186:	e03f      	b.n	8016208 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8016188:	693b      	ldr	r3, [r7, #16]
 801618a:	68da      	ldr	r2, [r3, #12]
 801618c:	693b      	ldr	r3, [r7, #16]
 801618e:	689b      	ldr	r3, [r3, #8]
 8016190:	429a      	cmp	r2, r3
 8016192:	d11c      	bne.n	80161ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8016194:	693b      	ldr	r3, [r7, #16]
 8016196:	685a      	ldr	r2, [r3, #4]
 8016198:	693b      	ldr	r3, [r7, #16]
 801619a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801619c:	429a      	cmp	r2, r3
 801619e:	d316      	bcc.n	80161ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80161a0:	693b      	ldr	r3, [r7, #16]
 80161a2:	685a      	ldr	r2, [r3, #4]
 80161a4:	68fb      	ldr	r3, [r7, #12]
 80161a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80161aa:	429a      	cmp	r2, r3
 80161ac:	d20f      	bcs.n	80161ce <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80161ae:	2200      	movs	r2, #0
 80161b0:	2100      	movs	r1, #0
 80161b2:	68f8      	ldr	r0, [r7, #12]
 80161b4:	f001 f893 	bl	80172de <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80161b8:	68fb      	ldr	r3, [r7, #12]
 80161ba:	2200      	movs	r2, #0
 80161bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80161c0:	2300      	movs	r3, #0
 80161c2:	2200      	movs	r2, #0
 80161c4:	2100      	movs	r1, #0
 80161c6:	68f8      	ldr	r0, [r7, #12]
 80161c8:	f001 fde6 	bl	8017d98 <USBD_LL_PrepareReceive>
 80161cc:	e01c      	b.n	8016208 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80161ce:	68fb      	ldr	r3, [r7, #12]
 80161d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80161d4:	b2db      	uxtb	r3, r3
 80161d6:	2b03      	cmp	r3, #3
 80161d8:	d10f      	bne.n	80161fa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80161e0:	68db      	ldr	r3, [r3, #12]
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d009      	beq.n	80161fa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	2200      	movs	r2, #0
 80161ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80161ee:	68fb      	ldr	r3, [r7, #12]
 80161f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80161f4:	68db      	ldr	r3, [r3, #12]
 80161f6:	68f8      	ldr	r0, [r7, #12]
 80161f8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80161fa:	2180      	movs	r1, #128	; 0x80
 80161fc:	68f8      	ldr	r0, [r7, #12]
 80161fe:	f001 fd21 	bl	8017c44 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8016202:	68f8      	ldr	r0, [r7, #12]
 8016204:	f001 f8bd 	bl	8017382 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8016208:	68fb      	ldr	r3, [r7, #12]
 801620a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801620e:	2b00      	cmp	r3, #0
 8016210:	d03a      	beq.n	8016288 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8016212:	68f8      	ldr	r0, [r7, #12]
 8016214:	f7ff fe42 	bl	8015e9c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8016218:	68fb      	ldr	r3, [r7, #12]
 801621a:	2200      	movs	r2, #0
 801621c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8016220:	e032      	b.n	8016288 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8016222:	7afb      	ldrb	r3, [r7, #11]
 8016224:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8016228:	b2db      	uxtb	r3, r3
 801622a:	4619      	mov	r1, r3
 801622c:	68f8      	ldr	r0, [r7, #12]
 801622e:	f000 f985 	bl	801653c <USBD_CoreFindEP>
 8016232:	4603      	mov	r3, r0
 8016234:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016236:	7dfb      	ldrb	r3, [r7, #23]
 8016238:	2bff      	cmp	r3, #255	; 0xff
 801623a:	d025      	beq.n	8016288 <USBD_LL_DataInStage+0x15a>
 801623c:	7dfb      	ldrb	r3, [r7, #23]
 801623e:	2b00      	cmp	r3, #0
 8016240:	d122      	bne.n	8016288 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016242:	68fb      	ldr	r3, [r7, #12]
 8016244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016248:	b2db      	uxtb	r3, r3
 801624a:	2b03      	cmp	r3, #3
 801624c:	d11c      	bne.n	8016288 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801624e:	7dfa      	ldrb	r2, [r7, #23]
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	32ae      	adds	r2, #174	; 0xae
 8016254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016258:	695b      	ldr	r3, [r3, #20]
 801625a:	2b00      	cmp	r3, #0
 801625c:	d014      	beq.n	8016288 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801625e:	7dfa      	ldrb	r2, [r7, #23]
 8016260:	68fb      	ldr	r3, [r7, #12]
 8016262:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8016266:	7dfa      	ldrb	r2, [r7, #23]
 8016268:	68fb      	ldr	r3, [r7, #12]
 801626a:	32ae      	adds	r2, #174	; 0xae
 801626c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016270:	695b      	ldr	r3, [r3, #20]
 8016272:	7afa      	ldrb	r2, [r7, #11]
 8016274:	4611      	mov	r1, r2
 8016276:	68f8      	ldr	r0, [r7, #12]
 8016278:	4798      	blx	r3
 801627a:	4603      	mov	r3, r0
 801627c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801627e:	7dbb      	ldrb	r3, [r7, #22]
 8016280:	2b00      	cmp	r3, #0
 8016282:	d001      	beq.n	8016288 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8016284:	7dbb      	ldrb	r3, [r7, #22]
 8016286:	e000      	b.n	801628a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8016288:	2300      	movs	r3, #0
}
 801628a:	4618      	mov	r0, r3
 801628c:	3718      	adds	r7, #24
 801628e:	46bd      	mov	sp, r7
 8016290:	bd80      	pop	{r7, pc}

08016292 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8016292:	b580      	push	{r7, lr}
 8016294:	b084      	sub	sp, #16
 8016296:	af00      	add	r7, sp, #0
 8016298:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801629a:	2300      	movs	r3, #0
 801629c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	2201      	movs	r2, #1
 80162a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	2200      	movs	r2, #0
 80162aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	2200      	movs	r2, #0
 80162b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	2200      	movs	r2, #0
 80162b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	2200      	movs	r2, #0
 80162c0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d014      	beq.n	80162f8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80162d4:	685b      	ldr	r3, [r3, #4]
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	d00e      	beq.n	80162f8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80162e0:	685b      	ldr	r3, [r3, #4]
 80162e2:	687a      	ldr	r2, [r7, #4]
 80162e4:	6852      	ldr	r2, [r2, #4]
 80162e6:	b2d2      	uxtb	r2, r2
 80162e8:	4611      	mov	r1, r2
 80162ea:	6878      	ldr	r0, [r7, #4]
 80162ec:	4798      	blx	r3
 80162ee:	4603      	mov	r3, r0
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d001      	beq.n	80162f8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80162f4:	2303      	movs	r3, #3
 80162f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80162f8:	2340      	movs	r3, #64	; 0x40
 80162fa:	2200      	movs	r2, #0
 80162fc:	2100      	movs	r1, #0
 80162fe:	6878      	ldr	r0, [r7, #4]
 8016300:	f001 fc5b 	bl	8017bba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	2201      	movs	r2, #1
 8016308:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	2240      	movs	r2, #64	; 0x40
 8016310:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016314:	2340      	movs	r3, #64	; 0x40
 8016316:	2200      	movs	r2, #0
 8016318:	2180      	movs	r1, #128	; 0x80
 801631a:	6878      	ldr	r0, [r7, #4]
 801631c:	f001 fc4d 	bl	8017bba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	2201      	movs	r2, #1
 8016324:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	2240      	movs	r2, #64	; 0x40
 801632a:	621a      	str	r2, [r3, #32]

  return ret;
 801632c:	7bfb      	ldrb	r3, [r7, #15]
}
 801632e:	4618      	mov	r0, r3
 8016330:	3710      	adds	r7, #16
 8016332:	46bd      	mov	sp, r7
 8016334:	bd80      	pop	{r7, pc}

08016336 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8016336:	b480      	push	{r7}
 8016338:	b083      	sub	sp, #12
 801633a:	af00      	add	r7, sp, #0
 801633c:	6078      	str	r0, [r7, #4]
 801633e:	460b      	mov	r3, r1
 8016340:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	78fa      	ldrb	r2, [r7, #3]
 8016346:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8016348:	2300      	movs	r3, #0
}
 801634a:	4618      	mov	r0, r3
 801634c:	370c      	adds	r7, #12
 801634e:	46bd      	mov	sp, r7
 8016350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016354:	4770      	bx	lr

08016356 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8016356:	b480      	push	{r7}
 8016358:	b083      	sub	sp, #12
 801635a:	af00      	add	r7, sp, #0
 801635c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016364:	b2db      	uxtb	r3, r3
 8016366:	2b04      	cmp	r3, #4
 8016368:	d006      	beq.n	8016378 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016370:	b2da      	uxtb	r2, r3
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	2204      	movs	r2, #4
 801637c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8016380:	2300      	movs	r3, #0
}
 8016382:	4618      	mov	r0, r3
 8016384:	370c      	adds	r7, #12
 8016386:	46bd      	mov	sp, r7
 8016388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801638c:	4770      	bx	lr

0801638e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801638e:	b480      	push	{r7}
 8016390:	b083      	sub	sp, #12
 8016392:	af00      	add	r7, sp, #0
 8016394:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801639c:	b2db      	uxtb	r3, r3
 801639e:	2b04      	cmp	r3, #4
 80163a0:	d106      	bne.n	80163b0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80163a8:	b2da      	uxtb	r2, r3
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80163b0:	2300      	movs	r3, #0
}
 80163b2:	4618      	mov	r0, r3
 80163b4:	370c      	adds	r7, #12
 80163b6:	46bd      	mov	sp, r7
 80163b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163bc:	4770      	bx	lr

080163be <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80163be:	b580      	push	{r7, lr}
 80163c0:	b082      	sub	sp, #8
 80163c2:	af00      	add	r7, sp, #0
 80163c4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80163cc:	b2db      	uxtb	r3, r3
 80163ce:	2b03      	cmp	r3, #3
 80163d0:	d110      	bne.n	80163f4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d00b      	beq.n	80163f4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80163e2:	69db      	ldr	r3, [r3, #28]
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d005      	beq.n	80163f4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80163ee:	69db      	ldr	r3, [r3, #28]
 80163f0:	6878      	ldr	r0, [r7, #4]
 80163f2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80163f4:	2300      	movs	r3, #0
}
 80163f6:	4618      	mov	r0, r3
 80163f8:	3708      	adds	r7, #8
 80163fa:	46bd      	mov	sp, r7
 80163fc:	bd80      	pop	{r7, pc}

080163fe <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80163fe:	b580      	push	{r7, lr}
 8016400:	b082      	sub	sp, #8
 8016402:	af00      	add	r7, sp, #0
 8016404:	6078      	str	r0, [r7, #4]
 8016406:	460b      	mov	r3, r1
 8016408:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	32ae      	adds	r2, #174	; 0xae
 8016414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016418:	2b00      	cmp	r3, #0
 801641a:	d101      	bne.n	8016420 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801641c:	2303      	movs	r3, #3
 801641e:	e01c      	b.n	801645a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016426:	b2db      	uxtb	r3, r3
 8016428:	2b03      	cmp	r3, #3
 801642a:	d115      	bne.n	8016458 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	32ae      	adds	r2, #174	; 0xae
 8016436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801643a:	6a1b      	ldr	r3, [r3, #32]
 801643c:	2b00      	cmp	r3, #0
 801643e:	d00b      	beq.n	8016458 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	32ae      	adds	r2, #174	; 0xae
 801644a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801644e:	6a1b      	ldr	r3, [r3, #32]
 8016450:	78fa      	ldrb	r2, [r7, #3]
 8016452:	4611      	mov	r1, r2
 8016454:	6878      	ldr	r0, [r7, #4]
 8016456:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016458:	2300      	movs	r3, #0
}
 801645a:	4618      	mov	r0, r3
 801645c:	3708      	adds	r7, #8
 801645e:	46bd      	mov	sp, r7
 8016460:	bd80      	pop	{r7, pc}

08016462 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8016462:	b580      	push	{r7, lr}
 8016464:	b082      	sub	sp, #8
 8016466:	af00      	add	r7, sp, #0
 8016468:	6078      	str	r0, [r7, #4]
 801646a:	460b      	mov	r3, r1
 801646c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	32ae      	adds	r2, #174	; 0xae
 8016478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801647c:	2b00      	cmp	r3, #0
 801647e:	d101      	bne.n	8016484 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8016480:	2303      	movs	r3, #3
 8016482:	e01c      	b.n	80164be <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801648a:	b2db      	uxtb	r3, r3
 801648c:	2b03      	cmp	r3, #3
 801648e:	d115      	bne.n	80164bc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	32ae      	adds	r2, #174	; 0xae
 801649a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801649e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d00b      	beq.n	80164bc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	32ae      	adds	r2, #174	; 0xae
 80164ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80164b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164b4:	78fa      	ldrb	r2, [r7, #3]
 80164b6:	4611      	mov	r1, r2
 80164b8:	6878      	ldr	r0, [r7, #4]
 80164ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80164bc:	2300      	movs	r3, #0
}
 80164be:	4618      	mov	r0, r3
 80164c0:	3708      	adds	r7, #8
 80164c2:	46bd      	mov	sp, r7
 80164c4:	bd80      	pop	{r7, pc}

080164c6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80164c6:	b480      	push	{r7}
 80164c8:	b083      	sub	sp, #12
 80164ca:	af00      	add	r7, sp, #0
 80164cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80164ce:	2300      	movs	r3, #0
}
 80164d0:	4618      	mov	r0, r3
 80164d2:	370c      	adds	r7, #12
 80164d4:	46bd      	mov	sp, r7
 80164d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164da:	4770      	bx	lr

080164dc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80164dc:	b580      	push	{r7, lr}
 80164de:	b084      	sub	sp, #16
 80164e0:	af00      	add	r7, sp, #0
 80164e2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80164e4:	2300      	movs	r3, #0
 80164e6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	2201      	movs	r2, #1
 80164ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d00e      	beq.n	8016518 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016500:	685b      	ldr	r3, [r3, #4]
 8016502:	687a      	ldr	r2, [r7, #4]
 8016504:	6852      	ldr	r2, [r2, #4]
 8016506:	b2d2      	uxtb	r2, r2
 8016508:	4611      	mov	r1, r2
 801650a:	6878      	ldr	r0, [r7, #4]
 801650c:	4798      	blx	r3
 801650e:	4603      	mov	r3, r0
 8016510:	2b00      	cmp	r3, #0
 8016512:	d001      	beq.n	8016518 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8016514:	2303      	movs	r3, #3
 8016516:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016518:	7bfb      	ldrb	r3, [r7, #15]
}
 801651a:	4618      	mov	r0, r3
 801651c:	3710      	adds	r7, #16
 801651e:	46bd      	mov	sp, r7
 8016520:	bd80      	pop	{r7, pc}

08016522 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016522:	b480      	push	{r7}
 8016524:	b083      	sub	sp, #12
 8016526:	af00      	add	r7, sp, #0
 8016528:	6078      	str	r0, [r7, #4]
 801652a:	460b      	mov	r3, r1
 801652c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801652e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016530:	4618      	mov	r0, r3
 8016532:	370c      	adds	r7, #12
 8016534:	46bd      	mov	sp, r7
 8016536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801653a:	4770      	bx	lr

0801653c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801653c:	b480      	push	{r7}
 801653e:	b083      	sub	sp, #12
 8016540:	af00      	add	r7, sp, #0
 8016542:	6078      	str	r0, [r7, #4]
 8016544:	460b      	mov	r3, r1
 8016546:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016548:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801654a:	4618      	mov	r0, r3
 801654c:	370c      	adds	r7, #12
 801654e:	46bd      	mov	sp, r7
 8016550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016554:	4770      	bx	lr

08016556 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8016556:	b580      	push	{r7, lr}
 8016558:	b086      	sub	sp, #24
 801655a:	af00      	add	r7, sp, #0
 801655c:	6078      	str	r0, [r7, #4]
 801655e:	460b      	mov	r3, r1
 8016560:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801656a:	2300      	movs	r3, #0
 801656c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801656e:	68fb      	ldr	r3, [r7, #12]
 8016570:	885b      	ldrh	r3, [r3, #2]
 8016572:	b29a      	uxth	r2, r3
 8016574:	68fb      	ldr	r3, [r7, #12]
 8016576:	781b      	ldrb	r3, [r3, #0]
 8016578:	b29b      	uxth	r3, r3
 801657a:	429a      	cmp	r2, r3
 801657c:	d920      	bls.n	80165c0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 801657e:	68fb      	ldr	r3, [r7, #12]
 8016580:	781b      	ldrb	r3, [r3, #0]
 8016582:	b29b      	uxth	r3, r3
 8016584:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8016586:	e013      	b.n	80165b0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8016588:	f107 030a 	add.w	r3, r7, #10
 801658c:	4619      	mov	r1, r3
 801658e:	6978      	ldr	r0, [r7, #20]
 8016590:	f000 f81b 	bl	80165ca <USBD_GetNextDesc>
 8016594:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8016596:	697b      	ldr	r3, [r7, #20]
 8016598:	785b      	ldrb	r3, [r3, #1]
 801659a:	2b05      	cmp	r3, #5
 801659c:	d108      	bne.n	80165b0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801659e:	697b      	ldr	r3, [r7, #20]
 80165a0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80165a2:	693b      	ldr	r3, [r7, #16]
 80165a4:	789b      	ldrb	r3, [r3, #2]
 80165a6:	78fa      	ldrb	r2, [r7, #3]
 80165a8:	429a      	cmp	r2, r3
 80165aa:	d008      	beq.n	80165be <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80165ac:	2300      	movs	r3, #0
 80165ae:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80165b0:	68fb      	ldr	r3, [r7, #12]
 80165b2:	885b      	ldrh	r3, [r3, #2]
 80165b4:	b29a      	uxth	r2, r3
 80165b6:	897b      	ldrh	r3, [r7, #10]
 80165b8:	429a      	cmp	r2, r3
 80165ba:	d8e5      	bhi.n	8016588 <USBD_GetEpDesc+0x32>
 80165bc:	e000      	b.n	80165c0 <USBD_GetEpDesc+0x6a>
          break;
 80165be:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80165c0:	693b      	ldr	r3, [r7, #16]
}
 80165c2:	4618      	mov	r0, r3
 80165c4:	3718      	adds	r7, #24
 80165c6:	46bd      	mov	sp, r7
 80165c8:	bd80      	pop	{r7, pc}

080165ca <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80165ca:	b480      	push	{r7}
 80165cc:	b085      	sub	sp, #20
 80165ce:	af00      	add	r7, sp, #0
 80165d0:	6078      	str	r0, [r7, #4]
 80165d2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80165d8:	683b      	ldr	r3, [r7, #0]
 80165da:	881a      	ldrh	r2, [r3, #0]
 80165dc:	68fb      	ldr	r3, [r7, #12]
 80165de:	781b      	ldrb	r3, [r3, #0]
 80165e0:	b29b      	uxth	r3, r3
 80165e2:	4413      	add	r3, r2
 80165e4:	b29a      	uxth	r2, r3
 80165e6:	683b      	ldr	r3, [r7, #0]
 80165e8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80165ea:	68fb      	ldr	r3, [r7, #12]
 80165ec:	781b      	ldrb	r3, [r3, #0]
 80165ee:	461a      	mov	r2, r3
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	4413      	add	r3, r2
 80165f4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80165f6:	68fb      	ldr	r3, [r7, #12]
}
 80165f8:	4618      	mov	r0, r3
 80165fa:	3714      	adds	r7, #20
 80165fc:	46bd      	mov	sp, r7
 80165fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016602:	4770      	bx	lr

08016604 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8016604:	b480      	push	{r7}
 8016606:	b087      	sub	sp, #28
 8016608:	af00      	add	r7, sp, #0
 801660a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8016610:	697b      	ldr	r3, [r7, #20]
 8016612:	781b      	ldrb	r3, [r3, #0]
 8016614:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8016616:	697b      	ldr	r3, [r7, #20]
 8016618:	3301      	adds	r3, #1
 801661a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801661c:	697b      	ldr	r3, [r7, #20]
 801661e:	781b      	ldrb	r3, [r3, #0]
 8016620:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8016622:	8a3b      	ldrh	r3, [r7, #16]
 8016624:	021b      	lsls	r3, r3, #8
 8016626:	b21a      	sxth	r2, r3
 8016628:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801662c:	4313      	orrs	r3, r2
 801662e:	b21b      	sxth	r3, r3
 8016630:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8016632:	89fb      	ldrh	r3, [r7, #14]
}
 8016634:	4618      	mov	r0, r3
 8016636:	371c      	adds	r7, #28
 8016638:	46bd      	mov	sp, r7
 801663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801663e:	4770      	bx	lr

08016640 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016640:	b580      	push	{r7, lr}
 8016642:	b084      	sub	sp, #16
 8016644:	af00      	add	r7, sp, #0
 8016646:	6078      	str	r0, [r7, #4]
 8016648:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801664a:	2300      	movs	r3, #0
 801664c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801664e:	683b      	ldr	r3, [r7, #0]
 8016650:	781b      	ldrb	r3, [r3, #0]
 8016652:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016656:	2b40      	cmp	r3, #64	; 0x40
 8016658:	d005      	beq.n	8016666 <USBD_StdDevReq+0x26>
 801665a:	2b40      	cmp	r3, #64	; 0x40
 801665c:	d857      	bhi.n	801670e <USBD_StdDevReq+0xce>
 801665e:	2b00      	cmp	r3, #0
 8016660:	d00f      	beq.n	8016682 <USBD_StdDevReq+0x42>
 8016662:	2b20      	cmp	r3, #32
 8016664:	d153      	bne.n	801670e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	32ae      	adds	r2, #174	; 0xae
 8016670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016674:	689b      	ldr	r3, [r3, #8]
 8016676:	6839      	ldr	r1, [r7, #0]
 8016678:	6878      	ldr	r0, [r7, #4]
 801667a:	4798      	blx	r3
 801667c:	4603      	mov	r3, r0
 801667e:	73fb      	strb	r3, [r7, #15]
      break;
 8016680:	e04a      	b.n	8016718 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016682:	683b      	ldr	r3, [r7, #0]
 8016684:	785b      	ldrb	r3, [r3, #1]
 8016686:	2b09      	cmp	r3, #9
 8016688:	d83b      	bhi.n	8016702 <USBD_StdDevReq+0xc2>
 801668a:	a201      	add	r2, pc, #4	; (adr r2, 8016690 <USBD_StdDevReq+0x50>)
 801668c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016690:	080166e5 	.word	0x080166e5
 8016694:	080166f9 	.word	0x080166f9
 8016698:	08016703 	.word	0x08016703
 801669c:	080166ef 	.word	0x080166ef
 80166a0:	08016703 	.word	0x08016703
 80166a4:	080166c3 	.word	0x080166c3
 80166a8:	080166b9 	.word	0x080166b9
 80166ac:	08016703 	.word	0x08016703
 80166b0:	080166db 	.word	0x080166db
 80166b4:	080166cd 	.word	0x080166cd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80166b8:	6839      	ldr	r1, [r7, #0]
 80166ba:	6878      	ldr	r0, [r7, #4]
 80166bc:	f000 fa3c 	bl	8016b38 <USBD_GetDescriptor>
          break;
 80166c0:	e024      	b.n	801670c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80166c2:	6839      	ldr	r1, [r7, #0]
 80166c4:	6878      	ldr	r0, [r7, #4]
 80166c6:	f000 fba1 	bl	8016e0c <USBD_SetAddress>
          break;
 80166ca:	e01f      	b.n	801670c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80166cc:	6839      	ldr	r1, [r7, #0]
 80166ce:	6878      	ldr	r0, [r7, #4]
 80166d0:	f000 fbe0 	bl	8016e94 <USBD_SetConfig>
 80166d4:	4603      	mov	r3, r0
 80166d6:	73fb      	strb	r3, [r7, #15]
          break;
 80166d8:	e018      	b.n	801670c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80166da:	6839      	ldr	r1, [r7, #0]
 80166dc:	6878      	ldr	r0, [r7, #4]
 80166de:	f000 fc83 	bl	8016fe8 <USBD_GetConfig>
          break;
 80166e2:	e013      	b.n	801670c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80166e4:	6839      	ldr	r1, [r7, #0]
 80166e6:	6878      	ldr	r0, [r7, #4]
 80166e8:	f000 fcb4 	bl	8017054 <USBD_GetStatus>
          break;
 80166ec:	e00e      	b.n	801670c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80166ee:	6839      	ldr	r1, [r7, #0]
 80166f0:	6878      	ldr	r0, [r7, #4]
 80166f2:	f000 fce3 	bl	80170bc <USBD_SetFeature>
          break;
 80166f6:	e009      	b.n	801670c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80166f8:	6839      	ldr	r1, [r7, #0]
 80166fa:	6878      	ldr	r0, [r7, #4]
 80166fc:	f000 fd07 	bl	801710e <USBD_ClrFeature>
          break;
 8016700:	e004      	b.n	801670c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8016702:	6839      	ldr	r1, [r7, #0]
 8016704:	6878      	ldr	r0, [r7, #4]
 8016706:	f000 fd5e 	bl	80171c6 <USBD_CtlError>
          break;
 801670a:	bf00      	nop
      }
      break;
 801670c:	e004      	b.n	8016718 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801670e:	6839      	ldr	r1, [r7, #0]
 8016710:	6878      	ldr	r0, [r7, #4]
 8016712:	f000 fd58 	bl	80171c6 <USBD_CtlError>
      break;
 8016716:	bf00      	nop
  }

  return ret;
 8016718:	7bfb      	ldrb	r3, [r7, #15]
}
 801671a:	4618      	mov	r0, r3
 801671c:	3710      	adds	r7, #16
 801671e:	46bd      	mov	sp, r7
 8016720:	bd80      	pop	{r7, pc}
 8016722:	bf00      	nop

08016724 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016724:	b580      	push	{r7, lr}
 8016726:	b084      	sub	sp, #16
 8016728:	af00      	add	r7, sp, #0
 801672a:	6078      	str	r0, [r7, #4]
 801672c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801672e:	2300      	movs	r3, #0
 8016730:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016732:	683b      	ldr	r3, [r7, #0]
 8016734:	781b      	ldrb	r3, [r3, #0]
 8016736:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801673a:	2b40      	cmp	r3, #64	; 0x40
 801673c:	d005      	beq.n	801674a <USBD_StdItfReq+0x26>
 801673e:	2b40      	cmp	r3, #64	; 0x40
 8016740:	d852      	bhi.n	80167e8 <USBD_StdItfReq+0xc4>
 8016742:	2b00      	cmp	r3, #0
 8016744:	d001      	beq.n	801674a <USBD_StdItfReq+0x26>
 8016746:	2b20      	cmp	r3, #32
 8016748:	d14e      	bne.n	80167e8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016750:	b2db      	uxtb	r3, r3
 8016752:	3b01      	subs	r3, #1
 8016754:	2b02      	cmp	r3, #2
 8016756:	d840      	bhi.n	80167da <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8016758:	683b      	ldr	r3, [r7, #0]
 801675a:	889b      	ldrh	r3, [r3, #4]
 801675c:	b2db      	uxtb	r3, r3
 801675e:	2b01      	cmp	r3, #1
 8016760:	d836      	bhi.n	80167d0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8016762:	683b      	ldr	r3, [r7, #0]
 8016764:	889b      	ldrh	r3, [r3, #4]
 8016766:	b2db      	uxtb	r3, r3
 8016768:	4619      	mov	r1, r3
 801676a:	6878      	ldr	r0, [r7, #4]
 801676c:	f7ff fed9 	bl	8016522 <USBD_CoreFindIF>
 8016770:	4603      	mov	r3, r0
 8016772:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016774:	7bbb      	ldrb	r3, [r7, #14]
 8016776:	2bff      	cmp	r3, #255	; 0xff
 8016778:	d01d      	beq.n	80167b6 <USBD_StdItfReq+0x92>
 801677a:	7bbb      	ldrb	r3, [r7, #14]
 801677c:	2b00      	cmp	r3, #0
 801677e:	d11a      	bne.n	80167b6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8016780:	7bba      	ldrb	r2, [r7, #14]
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	32ae      	adds	r2, #174	; 0xae
 8016786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801678a:	689b      	ldr	r3, [r3, #8]
 801678c:	2b00      	cmp	r3, #0
 801678e:	d00f      	beq.n	80167b0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8016790:	7bba      	ldrb	r2, [r7, #14]
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016798:	7bba      	ldrb	r2, [r7, #14]
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	32ae      	adds	r2, #174	; 0xae
 801679e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80167a2:	689b      	ldr	r3, [r3, #8]
 80167a4:	6839      	ldr	r1, [r7, #0]
 80167a6:	6878      	ldr	r0, [r7, #4]
 80167a8:	4798      	blx	r3
 80167aa:	4603      	mov	r3, r0
 80167ac:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80167ae:	e004      	b.n	80167ba <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80167b0:	2303      	movs	r3, #3
 80167b2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80167b4:	e001      	b.n	80167ba <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80167b6:	2303      	movs	r3, #3
 80167b8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80167ba:	683b      	ldr	r3, [r7, #0]
 80167bc:	88db      	ldrh	r3, [r3, #6]
 80167be:	2b00      	cmp	r3, #0
 80167c0:	d110      	bne.n	80167e4 <USBD_StdItfReq+0xc0>
 80167c2:	7bfb      	ldrb	r3, [r7, #15]
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	d10d      	bne.n	80167e4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80167c8:	6878      	ldr	r0, [r7, #4]
 80167ca:	f000 fdc7 	bl	801735c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80167ce:	e009      	b.n	80167e4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80167d0:	6839      	ldr	r1, [r7, #0]
 80167d2:	6878      	ldr	r0, [r7, #4]
 80167d4:	f000 fcf7 	bl	80171c6 <USBD_CtlError>
          break;
 80167d8:	e004      	b.n	80167e4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80167da:	6839      	ldr	r1, [r7, #0]
 80167dc:	6878      	ldr	r0, [r7, #4]
 80167de:	f000 fcf2 	bl	80171c6 <USBD_CtlError>
          break;
 80167e2:	e000      	b.n	80167e6 <USBD_StdItfReq+0xc2>
          break;
 80167e4:	bf00      	nop
      }
      break;
 80167e6:	e004      	b.n	80167f2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80167e8:	6839      	ldr	r1, [r7, #0]
 80167ea:	6878      	ldr	r0, [r7, #4]
 80167ec:	f000 fceb 	bl	80171c6 <USBD_CtlError>
      break;
 80167f0:	bf00      	nop
  }

  return ret;
 80167f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80167f4:	4618      	mov	r0, r3
 80167f6:	3710      	adds	r7, #16
 80167f8:	46bd      	mov	sp, r7
 80167fa:	bd80      	pop	{r7, pc}

080167fc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80167fc:	b580      	push	{r7, lr}
 80167fe:	b084      	sub	sp, #16
 8016800:	af00      	add	r7, sp, #0
 8016802:	6078      	str	r0, [r7, #4]
 8016804:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8016806:	2300      	movs	r3, #0
 8016808:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801680a:	683b      	ldr	r3, [r7, #0]
 801680c:	889b      	ldrh	r3, [r3, #4]
 801680e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016810:	683b      	ldr	r3, [r7, #0]
 8016812:	781b      	ldrb	r3, [r3, #0]
 8016814:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016818:	2b40      	cmp	r3, #64	; 0x40
 801681a:	d007      	beq.n	801682c <USBD_StdEPReq+0x30>
 801681c:	2b40      	cmp	r3, #64	; 0x40
 801681e:	f200 817f 	bhi.w	8016b20 <USBD_StdEPReq+0x324>
 8016822:	2b00      	cmp	r3, #0
 8016824:	d02a      	beq.n	801687c <USBD_StdEPReq+0x80>
 8016826:	2b20      	cmp	r3, #32
 8016828:	f040 817a 	bne.w	8016b20 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801682c:	7bbb      	ldrb	r3, [r7, #14]
 801682e:	4619      	mov	r1, r3
 8016830:	6878      	ldr	r0, [r7, #4]
 8016832:	f7ff fe83 	bl	801653c <USBD_CoreFindEP>
 8016836:	4603      	mov	r3, r0
 8016838:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801683a:	7b7b      	ldrb	r3, [r7, #13]
 801683c:	2bff      	cmp	r3, #255	; 0xff
 801683e:	f000 8174 	beq.w	8016b2a <USBD_StdEPReq+0x32e>
 8016842:	7b7b      	ldrb	r3, [r7, #13]
 8016844:	2b00      	cmp	r3, #0
 8016846:	f040 8170 	bne.w	8016b2a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801684a:	7b7a      	ldrb	r2, [r7, #13]
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8016852:	7b7a      	ldrb	r2, [r7, #13]
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	32ae      	adds	r2, #174	; 0xae
 8016858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801685c:	689b      	ldr	r3, [r3, #8]
 801685e:	2b00      	cmp	r3, #0
 8016860:	f000 8163 	beq.w	8016b2a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8016864:	7b7a      	ldrb	r2, [r7, #13]
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	32ae      	adds	r2, #174	; 0xae
 801686a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801686e:	689b      	ldr	r3, [r3, #8]
 8016870:	6839      	ldr	r1, [r7, #0]
 8016872:	6878      	ldr	r0, [r7, #4]
 8016874:	4798      	blx	r3
 8016876:	4603      	mov	r3, r0
 8016878:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801687a:	e156      	b.n	8016b2a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801687c:	683b      	ldr	r3, [r7, #0]
 801687e:	785b      	ldrb	r3, [r3, #1]
 8016880:	2b03      	cmp	r3, #3
 8016882:	d008      	beq.n	8016896 <USBD_StdEPReq+0x9a>
 8016884:	2b03      	cmp	r3, #3
 8016886:	f300 8145 	bgt.w	8016b14 <USBD_StdEPReq+0x318>
 801688a:	2b00      	cmp	r3, #0
 801688c:	f000 809b 	beq.w	80169c6 <USBD_StdEPReq+0x1ca>
 8016890:	2b01      	cmp	r3, #1
 8016892:	d03c      	beq.n	801690e <USBD_StdEPReq+0x112>
 8016894:	e13e      	b.n	8016b14 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801689c:	b2db      	uxtb	r3, r3
 801689e:	2b02      	cmp	r3, #2
 80168a0:	d002      	beq.n	80168a8 <USBD_StdEPReq+0xac>
 80168a2:	2b03      	cmp	r3, #3
 80168a4:	d016      	beq.n	80168d4 <USBD_StdEPReq+0xd8>
 80168a6:	e02c      	b.n	8016902 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80168a8:	7bbb      	ldrb	r3, [r7, #14]
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d00d      	beq.n	80168ca <USBD_StdEPReq+0xce>
 80168ae:	7bbb      	ldrb	r3, [r7, #14]
 80168b0:	2b80      	cmp	r3, #128	; 0x80
 80168b2:	d00a      	beq.n	80168ca <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80168b4:	7bbb      	ldrb	r3, [r7, #14]
 80168b6:	4619      	mov	r1, r3
 80168b8:	6878      	ldr	r0, [r7, #4]
 80168ba:	f001 f9c3 	bl	8017c44 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80168be:	2180      	movs	r1, #128	; 0x80
 80168c0:	6878      	ldr	r0, [r7, #4]
 80168c2:	f001 f9bf 	bl	8017c44 <USBD_LL_StallEP>
 80168c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80168c8:	e020      	b.n	801690c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80168ca:	6839      	ldr	r1, [r7, #0]
 80168cc:	6878      	ldr	r0, [r7, #4]
 80168ce:	f000 fc7a 	bl	80171c6 <USBD_CtlError>
              break;
 80168d2:	e01b      	b.n	801690c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80168d4:	683b      	ldr	r3, [r7, #0]
 80168d6:	885b      	ldrh	r3, [r3, #2]
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d10e      	bne.n	80168fa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80168dc:	7bbb      	ldrb	r3, [r7, #14]
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d00b      	beq.n	80168fa <USBD_StdEPReq+0xfe>
 80168e2:	7bbb      	ldrb	r3, [r7, #14]
 80168e4:	2b80      	cmp	r3, #128	; 0x80
 80168e6:	d008      	beq.n	80168fa <USBD_StdEPReq+0xfe>
 80168e8:	683b      	ldr	r3, [r7, #0]
 80168ea:	88db      	ldrh	r3, [r3, #6]
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	d104      	bne.n	80168fa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80168f0:	7bbb      	ldrb	r3, [r7, #14]
 80168f2:	4619      	mov	r1, r3
 80168f4:	6878      	ldr	r0, [r7, #4]
 80168f6:	f001 f9a5 	bl	8017c44 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80168fa:	6878      	ldr	r0, [r7, #4]
 80168fc:	f000 fd2e 	bl	801735c <USBD_CtlSendStatus>

              break;
 8016900:	e004      	b.n	801690c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8016902:	6839      	ldr	r1, [r7, #0]
 8016904:	6878      	ldr	r0, [r7, #4]
 8016906:	f000 fc5e 	bl	80171c6 <USBD_CtlError>
              break;
 801690a:	bf00      	nop
          }
          break;
 801690c:	e107      	b.n	8016b1e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016914:	b2db      	uxtb	r3, r3
 8016916:	2b02      	cmp	r3, #2
 8016918:	d002      	beq.n	8016920 <USBD_StdEPReq+0x124>
 801691a:	2b03      	cmp	r3, #3
 801691c:	d016      	beq.n	801694c <USBD_StdEPReq+0x150>
 801691e:	e04b      	b.n	80169b8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016920:	7bbb      	ldrb	r3, [r7, #14]
 8016922:	2b00      	cmp	r3, #0
 8016924:	d00d      	beq.n	8016942 <USBD_StdEPReq+0x146>
 8016926:	7bbb      	ldrb	r3, [r7, #14]
 8016928:	2b80      	cmp	r3, #128	; 0x80
 801692a:	d00a      	beq.n	8016942 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801692c:	7bbb      	ldrb	r3, [r7, #14]
 801692e:	4619      	mov	r1, r3
 8016930:	6878      	ldr	r0, [r7, #4]
 8016932:	f001 f987 	bl	8017c44 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016936:	2180      	movs	r1, #128	; 0x80
 8016938:	6878      	ldr	r0, [r7, #4]
 801693a:	f001 f983 	bl	8017c44 <USBD_LL_StallEP>
 801693e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016940:	e040      	b.n	80169c4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8016942:	6839      	ldr	r1, [r7, #0]
 8016944:	6878      	ldr	r0, [r7, #4]
 8016946:	f000 fc3e 	bl	80171c6 <USBD_CtlError>
              break;
 801694a:	e03b      	b.n	80169c4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801694c:	683b      	ldr	r3, [r7, #0]
 801694e:	885b      	ldrh	r3, [r3, #2]
 8016950:	2b00      	cmp	r3, #0
 8016952:	d136      	bne.n	80169c2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8016954:	7bbb      	ldrb	r3, [r7, #14]
 8016956:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801695a:	2b00      	cmp	r3, #0
 801695c:	d004      	beq.n	8016968 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801695e:	7bbb      	ldrb	r3, [r7, #14]
 8016960:	4619      	mov	r1, r3
 8016962:	6878      	ldr	r0, [r7, #4]
 8016964:	f001 f98d 	bl	8017c82 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8016968:	6878      	ldr	r0, [r7, #4]
 801696a:	f000 fcf7 	bl	801735c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801696e:	7bbb      	ldrb	r3, [r7, #14]
 8016970:	4619      	mov	r1, r3
 8016972:	6878      	ldr	r0, [r7, #4]
 8016974:	f7ff fde2 	bl	801653c <USBD_CoreFindEP>
 8016978:	4603      	mov	r3, r0
 801697a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801697c:	7b7b      	ldrb	r3, [r7, #13]
 801697e:	2bff      	cmp	r3, #255	; 0xff
 8016980:	d01f      	beq.n	80169c2 <USBD_StdEPReq+0x1c6>
 8016982:	7b7b      	ldrb	r3, [r7, #13]
 8016984:	2b00      	cmp	r3, #0
 8016986:	d11c      	bne.n	80169c2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8016988:	7b7a      	ldrb	r2, [r7, #13]
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8016990:	7b7a      	ldrb	r2, [r7, #13]
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	32ae      	adds	r2, #174	; 0xae
 8016996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801699a:	689b      	ldr	r3, [r3, #8]
 801699c:	2b00      	cmp	r3, #0
 801699e:	d010      	beq.n	80169c2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80169a0:	7b7a      	ldrb	r2, [r7, #13]
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	32ae      	adds	r2, #174	; 0xae
 80169a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80169aa:	689b      	ldr	r3, [r3, #8]
 80169ac:	6839      	ldr	r1, [r7, #0]
 80169ae:	6878      	ldr	r0, [r7, #4]
 80169b0:	4798      	blx	r3
 80169b2:	4603      	mov	r3, r0
 80169b4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80169b6:	e004      	b.n	80169c2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80169b8:	6839      	ldr	r1, [r7, #0]
 80169ba:	6878      	ldr	r0, [r7, #4]
 80169bc:	f000 fc03 	bl	80171c6 <USBD_CtlError>
              break;
 80169c0:	e000      	b.n	80169c4 <USBD_StdEPReq+0x1c8>
              break;
 80169c2:	bf00      	nop
          }
          break;
 80169c4:	e0ab      	b.n	8016b1e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80169cc:	b2db      	uxtb	r3, r3
 80169ce:	2b02      	cmp	r3, #2
 80169d0:	d002      	beq.n	80169d8 <USBD_StdEPReq+0x1dc>
 80169d2:	2b03      	cmp	r3, #3
 80169d4:	d032      	beq.n	8016a3c <USBD_StdEPReq+0x240>
 80169d6:	e097      	b.n	8016b08 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80169d8:	7bbb      	ldrb	r3, [r7, #14]
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d007      	beq.n	80169ee <USBD_StdEPReq+0x1f2>
 80169de:	7bbb      	ldrb	r3, [r7, #14]
 80169e0:	2b80      	cmp	r3, #128	; 0x80
 80169e2:	d004      	beq.n	80169ee <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80169e4:	6839      	ldr	r1, [r7, #0]
 80169e6:	6878      	ldr	r0, [r7, #4]
 80169e8:	f000 fbed 	bl	80171c6 <USBD_CtlError>
                break;
 80169ec:	e091      	b.n	8016b12 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80169ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	da0b      	bge.n	8016a0e <USBD_StdEPReq+0x212>
 80169f6:	7bbb      	ldrb	r3, [r7, #14]
 80169f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80169fc:	4613      	mov	r3, r2
 80169fe:	009b      	lsls	r3, r3, #2
 8016a00:	4413      	add	r3, r2
 8016a02:	009b      	lsls	r3, r3, #2
 8016a04:	3310      	adds	r3, #16
 8016a06:	687a      	ldr	r2, [r7, #4]
 8016a08:	4413      	add	r3, r2
 8016a0a:	3304      	adds	r3, #4
 8016a0c:	e00b      	b.n	8016a26 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016a0e:	7bbb      	ldrb	r3, [r7, #14]
 8016a10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016a14:	4613      	mov	r3, r2
 8016a16:	009b      	lsls	r3, r3, #2
 8016a18:	4413      	add	r3, r2
 8016a1a:	009b      	lsls	r3, r3, #2
 8016a1c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016a20:	687a      	ldr	r2, [r7, #4]
 8016a22:	4413      	add	r3, r2
 8016a24:	3304      	adds	r3, #4
 8016a26:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8016a28:	68bb      	ldr	r3, [r7, #8]
 8016a2a:	2200      	movs	r2, #0
 8016a2c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016a2e:	68bb      	ldr	r3, [r7, #8]
 8016a30:	2202      	movs	r2, #2
 8016a32:	4619      	mov	r1, r3
 8016a34:	6878      	ldr	r0, [r7, #4]
 8016a36:	f000 fc37 	bl	80172a8 <USBD_CtlSendData>
              break;
 8016a3a:	e06a      	b.n	8016b12 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016a3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	da11      	bge.n	8016a68 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016a44:	7bbb      	ldrb	r3, [r7, #14]
 8016a46:	f003 020f 	and.w	r2, r3, #15
 8016a4a:	6879      	ldr	r1, [r7, #4]
 8016a4c:	4613      	mov	r3, r2
 8016a4e:	009b      	lsls	r3, r3, #2
 8016a50:	4413      	add	r3, r2
 8016a52:	009b      	lsls	r3, r3, #2
 8016a54:	440b      	add	r3, r1
 8016a56:	3324      	adds	r3, #36	; 0x24
 8016a58:	881b      	ldrh	r3, [r3, #0]
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d117      	bne.n	8016a8e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016a5e:	6839      	ldr	r1, [r7, #0]
 8016a60:	6878      	ldr	r0, [r7, #4]
 8016a62:	f000 fbb0 	bl	80171c6 <USBD_CtlError>
                  break;
 8016a66:	e054      	b.n	8016b12 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8016a68:	7bbb      	ldrb	r3, [r7, #14]
 8016a6a:	f003 020f 	and.w	r2, r3, #15
 8016a6e:	6879      	ldr	r1, [r7, #4]
 8016a70:	4613      	mov	r3, r2
 8016a72:	009b      	lsls	r3, r3, #2
 8016a74:	4413      	add	r3, r2
 8016a76:	009b      	lsls	r3, r3, #2
 8016a78:	440b      	add	r3, r1
 8016a7a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8016a7e:	881b      	ldrh	r3, [r3, #0]
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	d104      	bne.n	8016a8e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016a84:	6839      	ldr	r1, [r7, #0]
 8016a86:	6878      	ldr	r0, [r7, #4]
 8016a88:	f000 fb9d 	bl	80171c6 <USBD_CtlError>
                  break;
 8016a8c:	e041      	b.n	8016b12 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016a8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	da0b      	bge.n	8016aae <USBD_StdEPReq+0x2b2>
 8016a96:	7bbb      	ldrb	r3, [r7, #14]
 8016a98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016a9c:	4613      	mov	r3, r2
 8016a9e:	009b      	lsls	r3, r3, #2
 8016aa0:	4413      	add	r3, r2
 8016aa2:	009b      	lsls	r3, r3, #2
 8016aa4:	3310      	adds	r3, #16
 8016aa6:	687a      	ldr	r2, [r7, #4]
 8016aa8:	4413      	add	r3, r2
 8016aaa:	3304      	adds	r3, #4
 8016aac:	e00b      	b.n	8016ac6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016aae:	7bbb      	ldrb	r3, [r7, #14]
 8016ab0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016ab4:	4613      	mov	r3, r2
 8016ab6:	009b      	lsls	r3, r3, #2
 8016ab8:	4413      	add	r3, r2
 8016aba:	009b      	lsls	r3, r3, #2
 8016abc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016ac0:	687a      	ldr	r2, [r7, #4]
 8016ac2:	4413      	add	r3, r2
 8016ac4:	3304      	adds	r3, #4
 8016ac6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8016ac8:	7bbb      	ldrb	r3, [r7, #14]
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d002      	beq.n	8016ad4 <USBD_StdEPReq+0x2d8>
 8016ace:	7bbb      	ldrb	r3, [r7, #14]
 8016ad0:	2b80      	cmp	r3, #128	; 0x80
 8016ad2:	d103      	bne.n	8016adc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8016ad4:	68bb      	ldr	r3, [r7, #8]
 8016ad6:	2200      	movs	r2, #0
 8016ad8:	601a      	str	r2, [r3, #0]
 8016ada:	e00e      	b.n	8016afa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016adc:	7bbb      	ldrb	r3, [r7, #14]
 8016ade:	4619      	mov	r1, r3
 8016ae0:	6878      	ldr	r0, [r7, #4]
 8016ae2:	f001 f8ed 	bl	8017cc0 <USBD_LL_IsStallEP>
 8016ae6:	4603      	mov	r3, r0
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	d003      	beq.n	8016af4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8016aec:	68bb      	ldr	r3, [r7, #8]
 8016aee:	2201      	movs	r2, #1
 8016af0:	601a      	str	r2, [r3, #0]
 8016af2:	e002      	b.n	8016afa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8016af4:	68bb      	ldr	r3, [r7, #8]
 8016af6:	2200      	movs	r2, #0
 8016af8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016afa:	68bb      	ldr	r3, [r7, #8]
 8016afc:	2202      	movs	r2, #2
 8016afe:	4619      	mov	r1, r3
 8016b00:	6878      	ldr	r0, [r7, #4]
 8016b02:	f000 fbd1 	bl	80172a8 <USBD_CtlSendData>
              break;
 8016b06:	e004      	b.n	8016b12 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8016b08:	6839      	ldr	r1, [r7, #0]
 8016b0a:	6878      	ldr	r0, [r7, #4]
 8016b0c:	f000 fb5b 	bl	80171c6 <USBD_CtlError>
              break;
 8016b10:	bf00      	nop
          }
          break;
 8016b12:	e004      	b.n	8016b1e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8016b14:	6839      	ldr	r1, [r7, #0]
 8016b16:	6878      	ldr	r0, [r7, #4]
 8016b18:	f000 fb55 	bl	80171c6 <USBD_CtlError>
          break;
 8016b1c:	bf00      	nop
      }
      break;
 8016b1e:	e005      	b.n	8016b2c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8016b20:	6839      	ldr	r1, [r7, #0]
 8016b22:	6878      	ldr	r0, [r7, #4]
 8016b24:	f000 fb4f 	bl	80171c6 <USBD_CtlError>
      break;
 8016b28:	e000      	b.n	8016b2c <USBD_StdEPReq+0x330>
      break;
 8016b2a:	bf00      	nop
  }

  return ret;
 8016b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b2e:	4618      	mov	r0, r3
 8016b30:	3710      	adds	r7, #16
 8016b32:	46bd      	mov	sp, r7
 8016b34:	bd80      	pop	{r7, pc}
	...

08016b38 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016b38:	b580      	push	{r7, lr}
 8016b3a:	b084      	sub	sp, #16
 8016b3c:	af00      	add	r7, sp, #0
 8016b3e:	6078      	str	r0, [r7, #4]
 8016b40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016b42:	2300      	movs	r3, #0
 8016b44:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8016b46:	2300      	movs	r3, #0
 8016b48:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8016b4a:	2300      	movs	r3, #0
 8016b4c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8016b4e:	683b      	ldr	r3, [r7, #0]
 8016b50:	885b      	ldrh	r3, [r3, #2]
 8016b52:	0a1b      	lsrs	r3, r3, #8
 8016b54:	b29b      	uxth	r3, r3
 8016b56:	3b01      	subs	r3, #1
 8016b58:	2b06      	cmp	r3, #6
 8016b5a:	f200 8128 	bhi.w	8016dae <USBD_GetDescriptor+0x276>
 8016b5e:	a201      	add	r2, pc, #4	; (adr r2, 8016b64 <USBD_GetDescriptor+0x2c>)
 8016b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b64:	08016b81 	.word	0x08016b81
 8016b68:	08016b99 	.word	0x08016b99
 8016b6c:	08016bd9 	.word	0x08016bd9
 8016b70:	08016daf 	.word	0x08016daf
 8016b74:	08016daf 	.word	0x08016daf
 8016b78:	08016d4f 	.word	0x08016d4f
 8016b7c:	08016d7b 	.word	0x08016d7b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016b86:	681b      	ldr	r3, [r3, #0]
 8016b88:	687a      	ldr	r2, [r7, #4]
 8016b8a:	7c12      	ldrb	r2, [r2, #16]
 8016b8c:	f107 0108 	add.w	r1, r7, #8
 8016b90:	4610      	mov	r0, r2
 8016b92:	4798      	blx	r3
 8016b94:	60f8      	str	r0, [r7, #12]
      break;
 8016b96:	e112      	b.n	8016dbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	7c1b      	ldrb	r3, [r3, #16]
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	d10d      	bne.n	8016bbc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016ba8:	f107 0208 	add.w	r2, r7, #8
 8016bac:	4610      	mov	r0, r2
 8016bae:	4798      	blx	r3
 8016bb0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016bb2:	68fb      	ldr	r3, [r7, #12]
 8016bb4:	3301      	adds	r3, #1
 8016bb6:	2202      	movs	r2, #2
 8016bb8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8016bba:	e100      	b.n	8016dbe <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016bc4:	f107 0208 	add.w	r2, r7, #8
 8016bc8:	4610      	mov	r0, r2
 8016bca:	4798      	blx	r3
 8016bcc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	3301      	adds	r3, #1
 8016bd2:	2202      	movs	r2, #2
 8016bd4:	701a      	strb	r2, [r3, #0]
      break;
 8016bd6:	e0f2      	b.n	8016dbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8016bd8:	683b      	ldr	r3, [r7, #0]
 8016bda:	885b      	ldrh	r3, [r3, #2]
 8016bdc:	b2db      	uxtb	r3, r3
 8016bde:	2b05      	cmp	r3, #5
 8016be0:	f200 80ac 	bhi.w	8016d3c <USBD_GetDescriptor+0x204>
 8016be4:	a201      	add	r2, pc, #4	; (adr r2, 8016bec <USBD_GetDescriptor+0xb4>)
 8016be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016bea:	bf00      	nop
 8016bec:	08016c05 	.word	0x08016c05
 8016bf0:	08016c39 	.word	0x08016c39
 8016bf4:	08016c6d 	.word	0x08016c6d
 8016bf8:	08016ca1 	.word	0x08016ca1
 8016bfc:	08016cd5 	.word	0x08016cd5
 8016c00:	08016d09 	.word	0x08016d09
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016c0a:	685b      	ldr	r3, [r3, #4]
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d00b      	beq.n	8016c28 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016c16:	685b      	ldr	r3, [r3, #4]
 8016c18:	687a      	ldr	r2, [r7, #4]
 8016c1a:	7c12      	ldrb	r2, [r2, #16]
 8016c1c:	f107 0108 	add.w	r1, r7, #8
 8016c20:	4610      	mov	r0, r2
 8016c22:	4798      	blx	r3
 8016c24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016c26:	e091      	b.n	8016d4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016c28:	6839      	ldr	r1, [r7, #0]
 8016c2a:	6878      	ldr	r0, [r7, #4]
 8016c2c:	f000 facb 	bl	80171c6 <USBD_CtlError>
            err++;
 8016c30:	7afb      	ldrb	r3, [r7, #11]
 8016c32:	3301      	adds	r3, #1
 8016c34:	72fb      	strb	r3, [r7, #11]
          break;
 8016c36:	e089      	b.n	8016d4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016c3e:	689b      	ldr	r3, [r3, #8]
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d00b      	beq.n	8016c5c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016c4a:	689b      	ldr	r3, [r3, #8]
 8016c4c:	687a      	ldr	r2, [r7, #4]
 8016c4e:	7c12      	ldrb	r2, [r2, #16]
 8016c50:	f107 0108 	add.w	r1, r7, #8
 8016c54:	4610      	mov	r0, r2
 8016c56:	4798      	blx	r3
 8016c58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016c5a:	e077      	b.n	8016d4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016c5c:	6839      	ldr	r1, [r7, #0]
 8016c5e:	6878      	ldr	r0, [r7, #4]
 8016c60:	f000 fab1 	bl	80171c6 <USBD_CtlError>
            err++;
 8016c64:	7afb      	ldrb	r3, [r7, #11]
 8016c66:	3301      	adds	r3, #1
 8016c68:	72fb      	strb	r3, [r7, #11]
          break;
 8016c6a:	e06f      	b.n	8016d4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016c72:	68db      	ldr	r3, [r3, #12]
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	d00b      	beq.n	8016c90 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016c7e:	68db      	ldr	r3, [r3, #12]
 8016c80:	687a      	ldr	r2, [r7, #4]
 8016c82:	7c12      	ldrb	r2, [r2, #16]
 8016c84:	f107 0108 	add.w	r1, r7, #8
 8016c88:	4610      	mov	r0, r2
 8016c8a:	4798      	blx	r3
 8016c8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016c8e:	e05d      	b.n	8016d4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016c90:	6839      	ldr	r1, [r7, #0]
 8016c92:	6878      	ldr	r0, [r7, #4]
 8016c94:	f000 fa97 	bl	80171c6 <USBD_CtlError>
            err++;
 8016c98:	7afb      	ldrb	r3, [r7, #11]
 8016c9a:	3301      	adds	r3, #1
 8016c9c:	72fb      	strb	r3, [r7, #11]
          break;
 8016c9e:	e055      	b.n	8016d4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016ca6:	691b      	ldr	r3, [r3, #16]
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d00b      	beq.n	8016cc4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016cb2:	691b      	ldr	r3, [r3, #16]
 8016cb4:	687a      	ldr	r2, [r7, #4]
 8016cb6:	7c12      	ldrb	r2, [r2, #16]
 8016cb8:	f107 0108 	add.w	r1, r7, #8
 8016cbc:	4610      	mov	r0, r2
 8016cbe:	4798      	blx	r3
 8016cc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016cc2:	e043      	b.n	8016d4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016cc4:	6839      	ldr	r1, [r7, #0]
 8016cc6:	6878      	ldr	r0, [r7, #4]
 8016cc8:	f000 fa7d 	bl	80171c6 <USBD_CtlError>
            err++;
 8016ccc:	7afb      	ldrb	r3, [r7, #11]
 8016cce:	3301      	adds	r3, #1
 8016cd0:	72fb      	strb	r3, [r7, #11]
          break;
 8016cd2:	e03b      	b.n	8016d4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016cda:	695b      	ldr	r3, [r3, #20]
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d00b      	beq.n	8016cf8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016ce6:	695b      	ldr	r3, [r3, #20]
 8016ce8:	687a      	ldr	r2, [r7, #4]
 8016cea:	7c12      	ldrb	r2, [r2, #16]
 8016cec:	f107 0108 	add.w	r1, r7, #8
 8016cf0:	4610      	mov	r0, r2
 8016cf2:	4798      	blx	r3
 8016cf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016cf6:	e029      	b.n	8016d4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016cf8:	6839      	ldr	r1, [r7, #0]
 8016cfa:	6878      	ldr	r0, [r7, #4]
 8016cfc:	f000 fa63 	bl	80171c6 <USBD_CtlError>
            err++;
 8016d00:	7afb      	ldrb	r3, [r7, #11]
 8016d02:	3301      	adds	r3, #1
 8016d04:	72fb      	strb	r3, [r7, #11]
          break;
 8016d06:	e021      	b.n	8016d4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016d0e:	699b      	ldr	r3, [r3, #24]
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d00b      	beq.n	8016d2c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016d1a:	699b      	ldr	r3, [r3, #24]
 8016d1c:	687a      	ldr	r2, [r7, #4]
 8016d1e:	7c12      	ldrb	r2, [r2, #16]
 8016d20:	f107 0108 	add.w	r1, r7, #8
 8016d24:	4610      	mov	r0, r2
 8016d26:	4798      	blx	r3
 8016d28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016d2a:	e00f      	b.n	8016d4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016d2c:	6839      	ldr	r1, [r7, #0]
 8016d2e:	6878      	ldr	r0, [r7, #4]
 8016d30:	f000 fa49 	bl	80171c6 <USBD_CtlError>
            err++;
 8016d34:	7afb      	ldrb	r3, [r7, #11]
 8016d36:	3301      	adds	r3, #1
 8016d38:	72fb      	strb	r3, [r7, #11]
          break;
 8016d3a:	e007      	b.n	8016d4c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8016d3c:	6839      	ldr	r1, [r7, #0]
 8016d3e:	6878      	ldr	r0, [r7, #4]
 8016d40:	f000 fa41 	bl	80171c6 <USBD_CtlError>
          err++;
 8016d44:	7afb      	ldrb	r3, [r7, #11]
 8016d46:	3301      	adds	r3, #1
 8016d48:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8016d4a:	bf00      	nop
      }
      break;
 8016d4c:	e037      	b.n	8016dbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	7c1b      	ldrb	r3, [r3, #16]
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	d109      	bne.n	8016d6a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8016d56:	687b      	ldr	r3, [r7, #4]
 8016d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016d5e:	f107 0208 	add.w	r2, r7, #8
 8016d62:	4610      	mov	r0, r2
 8016d64:	4798      	blx	r3
 8016d66:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016d68:	e029      	b.n	8016dbe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8016d6a:	6839      	ldr	r1, [r7, #0]
 8016d6c:	6878      	ldr	r0, [r7, #4]
 8016d6e:	f000 fa2a 	bl	80171c6 <USBD_CtlError>
        err++;
 8016d72:	7afb      	ldrb	r3, [r7, #11]
 8016d74:	3301      	adds	r3, #1
 8016d76:	72fb      	strb	r3, [r7, #11]
      break;
 8016d78:	e021      	b.n	8016dbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	7c1b      	ldrb	r3, [r3, #16]
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d10d      	bne.n	8016d9e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016d8a:	f107 0208 	add.w	r2, r7, #8
 8016d8e:	4610      	mov	r0, r2
 8016d90:	4798      	blx	r3
 8016d92:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8016d94:	68fb      	ldr	r3, [r7, #12]
 8016d96:	3301      	adds	r3, #1
 8016d98:	2207      	movs	r2, #7
 8016d9a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016d9c:	e00f      	b.n	8016dbe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8016d9e:	6839      	ldr	r1, [r7, #0]
 8016da0:	6878      	ldr	r0, [r7, #4]
 8016da2:	f000 fa10 	bl	80171c6 <USBD_CtlError>
        err++;
 8016da6:	7afb      	ldrb	r3, [r7, #11]
 8016da8:	3301      	adds	r3, #1
 8016daa:	72fb      	strb	r3, [r7, #11]
      break;
 8016dac:	e007      	b.n	8016dbe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8016dae:	6839      	ldr	r1, [r7, #0]
 8016db0:	6878      	ldr	r0, [r7, #4]
 8016db2:	f000 fa08 	bl	80171c6 <USBD_CtlError>
      err++;
 8016db6:	7afb      	ldrb	r3, [r7, #11]
 8016db8:	3301      	adds	r3, #1
 8016dba:	72fb      	strb	r3, [r7, #11]
      break;
 8016dbc:	bf00      	nop
  }

  if (err != 0U)
 8016dbe:	7afb      	ldrb	r3, [r7, #11]
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	d11e      	bne.n	8016e02 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8016dc4:	683b      	ldr	r3, [r7, #0]
 8016dc6:	88db      	ldrh	r3, [r3, #6]
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d016      	beq.n	8016dfa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8016dcc:	893b      	ldrh	r3, [r7, #8]
 8016dce:	2b00      	cmp	r3, #0
 8016dd0:	d00e      	beq.n	8016df0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8016dd2:	683b      	ldr	r3, [r7, #0]
 8016dd4:	88da      	ldrh	r2, [r3, #6]
 8016dd6:	893b      	ldrh	r3, [r7, #8]
 8016dd8:	4293      	cmp	r3, r2
 8016dda:	bf28      	it	cs
 8016ddc:	4613      	movcs	r3, r2
 8016dde:	b29b      	uxth	r3, r3
 8016de0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8016de2:	893b      	ldrh	r3, [r7, #8]
 8016de4:	461a      	mov	r2, r3
 8016de6:	68f9      	ldr	r1, [r7, #12]
 8016de8:	6878      	ldr	r0, [r7, #4]
 8016dea:	f000 fa5d 	bl	80172a8 <USBD_CtlSendData>
 8016dee:	e009      	b.n	8016e04 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8016df0:	6839      	ldr	r1, [r7, #0]
 8016df2:	6878      	ldr	r0, [r7, #4]
 8016df4:	f000 f9e7 	bl	80171c6 <USBD_CtlError>
 8016df8:	e004      	b.n	8016e04 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8016dfa:	6878      	ldr	r0, [r7, #4]
 8016dfc:	f000 faae 	bl	801735c <USBD_CtlSendStatus>
 8016e00:	e000      	b.n	8016e04 <USBD_GetDescriptor+0x2cc>
    return;
 8016e02:	bf00      	nop
  }
}
 8016e04:	3710      	adds	r7, #16
 8016e06:	46bd      	mov	sp, r7
 8016e08:	bd80      	pop	{r7, pc}
 8016e0a:	bf00      	nop

08016e0c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016e0c:	b580      	push	{r7, lr}
 8016e0e:	b084      	sub	sp, #16
 8016e10:	af00      	add	r7, sp, #0
 8016e12:	6078      	str	r0, [r7, #4]
 8016e14:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8016e16:	683b      	ldr	r3, [r7, #0]
 8016e18:	889b      	ldrh	r3, [r3, #4]
 8016e1a:	2b00      	cmp	r3, #0
 8016e1c:	d131      	bne.n	8016e82 <USBD_SetAddress+0x76>
 8016e1e:	683b      	ldr	r3, [r7, #0]
 8016e20:	88db      	ldrh	r3, [r3, #6]
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	d12d      	bne.n	8016e82 <USBD_SetAddress+0x76>
 8016e26:	683b      	ldr	r3, [r7, #0]
 8016e28:	885b      	ldrh	r3, [r3, #2]
 8016e2a:	2b7f      	cmp	r3, #127	; 0x7f
 8016e2c:	d829      	bhi.n	8016e82 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8016e2e:	683b      	ldr	r3, [r7, #0]
 8016e30:	885b      	ldrh	r3, [r3, #2]
 8016e32:	b2db      	uxtb	r3, r3
 8016e34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016e38:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016e40:	b2db      	uxtb	r3, r3
 8016e42:	2b03      	cmp	r3, #3
 8016e44:	d104      	bne.n	8016e50 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8016e46:	6839      	ldr	r1, [r7, #0]
 8016e48:	6878      	ldr	r0, [r7, #4]
 8016e4a:	f000 f9bc 	bl	80171c6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016e4e:	e01d      	b.n	8016e8c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	7bfa      	ldrb	r2, [r7, #15]
 8016e54:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016e58:	7bfb      	ldrb	r3, [r7, #15]
 8016e5a:	4619      	mov	r1, r3
 8016e5c:	6878      	ldr	r0, [r7, #4]
 8016e5e:	f000 ff5b 	bl	8017d18 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8016e62:	6878      	ldr	r0, [r7, #4]
 8016e64:	f000 fa7a 	bl	801735c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8016e68:	7bfb      	ldrb	r3, [r7, #15]
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d004      	beq.n	8016e78 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	2202      	movs	r2, #2
 8016e72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016e76:	e009      	b.n	8016e8c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	2201      	movs	r2, #1
 8016e7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016e80:	e004      	b.n	8016e8c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8016e82:	6839      	ldr	r1, [r7, #0]
 8016e84:	6878      	ldr	r0, [r7, #4]
 8016e86:	f000 f99e 	bl	80171c6 <USBD_CtlError>
  }
}
 8016e8a:	bf00      	nop
 8016e8c:	bf00      	nop
 8016e8e:	3710      	adds	r7, #16
 8016e90:	46bd      	mov	sp, r7
 8016e92:	bd80      	pop	{r7, pc}

08016e94 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016e94:	b580      	push	{r7, lr}
 8016e96:	b084      	sub	sp, #16
 8016e98:	af00      	add	r7, sp, #0
 8016e9a:	6078      	str	r0, [r7, #4]
 8016e9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016e9e:	2300      	movs	r3, #0
 8016ea0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8016ea2:	683b      	ldr	r3, [r7, #0]
 8016ea4:	885b      	ldrh	r3, [r3, #2]
 8016ea6:	b2da      	uxtb	r2, r3
 8016ea8:	4b4e      	ldr	r3, [pc, #312]	; (8016fe4 <USBD_SetConfig+0x150>)
 8016eaa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8016eac:	4b4d      	ldr	r3, [pc, #308]	; (8016fe4 <USBD_SetConfig+0x150>)
 8016eae:	781b      	ldrb	r3, [r3, #0]
 8016eb0:	2b01      	cmp	r3, #1
 8016eb2:	d905      	bls.n	8016ec0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8016eb4:	6839      	ldr	r1, [r7, #0]
 8016eb6:	6878      	ldr	r0, [r7, #4]
 8016eb8:	f000 f985 	bl	80171c6 <USBD_CtlError>
    return USBD_FAIL;
 8016ebc:	2303      	movs	r3, #3
 8016ebe:	e08c      	b.n	8016fda <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016ec6:	b2db      	uxtb	r3, r3
 8016ec8:	2b02      	cmp	r3, #2
 8016eca:	d002      	beq.n	8016ed2 <USBD_SetConfig+0x3e>
 8016ecc:	2b03      	cmp	r3, #3
 8016ece:	d029      	beq.n	8016f24 <USBD_SetConfig+0x90>
 8016ed0:	e075      	b.n	8016fbe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8016ed2:	4b44      	ldr	r3, [pc, #272]	; (8016fe4 <USBD_SetConfig+0x150>)
 8016ed4:	781b      	ldrb	r3, [r3, #0]
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d020      	beq.n	8016f1c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8016eda:	4b42      	ldr	r3, [pc, #264]	; (8016fe4 <USBD_SetConfig+0x150>)
 8016edc:	781b      	ldrb	r3, [r3, #0]
 8016ede:	461a      	mov	r2, r3
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016ee4:	4b3f      	ldr	r3, [pc, #252]	; (8016fe4 <USBD_SetConfig+0x150>)
 8016ee6:	781b      	ldrb	r3, [r3, #0]
 8016ee8:	4619      	mov	r1, r3
 8016eea:	6878      	ldr	r0, [r7, #4]
 8016eec:	f7fe ffe1 	bl	8015eb2 <USBD_SetClassConfig>
 8016ef0:	4603      	mov	r3, r0
 8016ef2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8016ef4:	7bfb      	ldrb	r3, [r7, #15]
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	d008      	beq.n	8016f0c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8016efa:	6839      	ldr	r1, [r7, #0]
 8016efc:	6878      	ldr	r0, [r7, #4]
 8016efe:	f000 f962 	bl	80171c6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	2202      	movs	r2, #2
 8016f06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016f0a:	e065      	b.n	8016fd8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016f0c:	6878      	ldr	r0, [r7, #4]
 8016f0e:	f000 fa25 	bl	801735c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	2203      	movs	r2, #3
 8016f16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016f1a:	e05d      	b.n	8016fd8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016f1c:	6878      	ldr	r0, [r7, #4]
 8016f1e:	f000 fa1d 	bl	801735c <USBD_CtlSendStatus>
      break;
 8016f22:	e059      	b.n	8016fd8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8016f24:	4b2f      	ldr	r3, [pc, #188]	; (8016fe4 <USBD_SetConfig+0x150>)
 8016f26:	781b      	ldrb	r3, [r3, #0]
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	d112      	bne.n	8016f52 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	2202      	movs	r2, #2
 8016f30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8016f34:	4b2b      	ldr	r3, [pc, #172]	; (8016fe4 <USBD_SetConfig+0x150>)
 8016f36:	781b      	ldrb	r3, [r3, #0]
 8016f38:	461a      	mov	r2, r3
 8016f3a:	687b      	ldr	r3, [r7, #4]
 8016f3c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016f3e:	4b29      	ldr	r3, [pc, #164]	; (8016fe4 <USBD_SetConfig+0x150>)
 8016f40:	781b      	ldrb	r3, [r3, #0]
 8016f42:	4619      	mov	r1, r3
 8016f44:	6878      	ldr	r0, [r7, #4]
 8016f46:	f7fe ffd0 	bl	8015eea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8016f4a:	6878      	ldr	r0, [r7, #4]
 8016f4c:	f000 fa06 	bl	801735c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016f50:	e042      	b.n	8016fd8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8016f52:	4b24      	ldr	r3, [pc, #144]	; (8016fe4 <USBD_SetConfig+0x150>)
 8016f54:	781b      	ldrb	r3, [r3, #0]
 8016f56:	461a      	mov	r2, r3
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	685b      	ldr	r3, [r3, #4]
 8016f5c:	429a      	cmp	r2, r3
 8016f5e:	d02a      	beq.n	8016fb6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	685b      	ldr	r3, [r3, #4]
 8016f64:	b2db      	uxtb	r3, r3
 8016f66:	4619      	mov	r1, r3
 8016f68:	6878      	ldr	r0, [r7, #4]
 8016f6a:	f7fe ffbe 	bl	8015eea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8016f6e:	4b1d      	ldr	r3, [pc, #116]	; (8016fe4 <USBD_SetConfig+0x150>)
 8016f70:	781b      	ldrb	r3, [r3, #0]
 8016f72:	461a      	mov	r2, r3
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016f78:	4b1a      	ldr	r3, [pc, #104]	; (8016fe4 <USBD_SetConfig+0x150>)
 8016f7a:	781b      	ldrb	r3, [r3, #0]
 8016f7c:	4619      	mov	r1, r3
 8016f7e:	6878      	ldr	r0, [r7, #4]
 8016f80:	f7fe ff97 	bl	8015eb2 <USBD_SetClassConfig>
 8016f84:	4603      	mov	r3, r0
 8016f86:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8016f88:	7bfb      	ldrb	r3, [r7, #15]
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d00f      	beq.n	8016fae <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8016f8e:	6839      	ldr	r1, [r7, #0]
 8016f90:	6878      	ldr	r0, [r7, #4]
 8016f92:	f000 f918 	bl	80171c6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	685b      	ldr	r3, [r3, #4]
 8016f9a:	b2db      	uxtb	r3, r3
 8016f9c:	4619      	mov	r1, r3
 8016f9e:	6878      	ldr	r0, [r7, #4]
 8016fa0:	f7fe ffa3 	bl	8015eea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	2202      	movs	r2, #2
 8016fa8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016fac:	e014      	b.n	8016fd8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016fae:	6878      	ldr	r0, [r7, #4]
 8016fb0:	f000 f9d4 	bl	801735c <USBD_CtlSendStatus>
      break;
 8016fb4:	e010      	b.n	8016fd8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016fb6:	6878      	ldr	r0, [r7, #4]
 8016fb8:	f000 f9d0 	bl	801735c <USBD_CtlSendStatus>
      break;
 8016fbc:	e00c      	b.n	8016fd8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8016fbe:	6839      	ldr	r1, [r7, #0]
 8016fc0:	6878      	ldr	r0, [r7, #4]
 8016fc2:	f000 f900 	bl	80171c6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016fc6:	4b07      	ldr	r3, [pc, #28]	; (8016fe4 <USBD_SetConfig+0x150>)
 8016fc8:	781b      	ldrb	r3, [r3, #0]
 8016fca:	4619      	mov	r1, r3
 8016fcc:	6878      	ldr	r0, [r7, #4]
 8016fce:	f7fe ff8c 	bl	8015eea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8016fd2:	2303      	movs	r3, #3
 8016fd4:	73fb      	strb	r3, [r7, #15]
      break;
 8016fd6:	bf00      	nop
  }

  return ret;
 8016fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8016fda:	4618      	mov	r0, r3
 8016fdc:	3710      	adds	r7, #16
 8016fde:	46bd      	mov	sp, r7
 8016fe0:	bd80      	pop	{r7, pc}
 8016fe2:	bf00      	nop
 8016fe4:	24001618 	.word	0x24001618

08016fe8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016fe8:	b580      	push	{r7, lr}
 8016fea:	b082      	sub	sp, #8
 8016fec:	af00      	add	r7, sp, #0
 8016fee:	6078      	str	r0, [r7, #4]
 8016ff0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8016ff2:	683b      	ldr	r3, [r7, #0]
 8016ff4:	88db      	ldrh	r3, [r3, #6]
 8016ff6:	2b01      	cmp	r3, #1
 8016ff8:	d004      	beq.n	8017004 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8016ffa:	6839      	ldr	r1, [r7, #0]
 8016ffc:	6878      	ldr	r0, [r7, #4]
 8016ffe:	f000 f8e2 	bl	80171c6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8017002:	e023      	b.n	801704c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801700a:	b2db      	uxtb	r3, r3
 801700c:	2b02      	cmp	r3, #2
 801700e:	dc02      	bgt.n	8017016 <USBD_GetConfig+0x2e>
 8017010:	2b00      	cmp	r3, #0
 8017012:	dc03      	bgt.n	801701c <USBD_GetConfig+0x34>
 8017014:	e015      	b.n	8017042 <USBD_GetConfig+0x5a>
 8017016:	2b03      	cmp	r3, #3
 8017018:	d00b      	beq.n	8017032 <USBD_GetConfig+0x4a>
 801701a:	e012      	b.n	8017042 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	2200      	movs	r2, #0
 8017020:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	3308      	adds	r3, #8
 8017026:	2201      	movs	r2, #1
 8017028:	4619      	mov	r1, r3
 801702a:	6878      	ldr	r0, [r7, #4]
 801702c:	f000 f93c 	bl	80172a8 <USBD_CtlSendData>
        break;
 8017030:	e00c      	b.n	801704c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	3304      	adds	r3, #4
 8017036:	2201      	movs	r2, #1
 8017038:	4619      	mov	r1, r3
 801703a:	6878      	ldr	r0, [r7, #4]
 801703c:	f000 f934 	bl	80172a8 <USBD_CtlSendData>
        break;
 8017040:	e004      	b.n	801704c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8017042:	6839      	ldr	r1, [r7, #0]
 8017044:	6878      	ldr	r0, [r7, #4]
 8017046:	f000 f8be 	bl	80171c6 <USBD_CtlError>
        break;
 801704a:	bf00      	nop
}
 801704c:	bf00      	nop
 801704e:	3708      	adds	r7, #8
 8017050:	46bd      	mov	sp, r7
 8017052:	bd80      	pop	{r7, pc}

08017054 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017054:	b580      	push	{r7, lr}
 8017056:	b082      	sub	sp, #8
 8017058:	af00      	add	r7, sp, #0
 801705a:	6078      	str	r0, [r7, #4]
 801705c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017064:	b2db      	uxtb	r3, r3
 8017066:	3b01      	subs	r3, #1
 8017068:	2b02      	cmp	r3, #2
 801706a:	d81e      	bhi.n	80170aa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801706c:	683b      	ldr	r3, [r7, #0]
 801706e:	88db      	ldrh	r3, [r3, #6]
 8017070:	2b02      	cmp	r3, #2
 8017072:	d004      	beq.n	801707e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8017074:	6839      	ldr	r1, [r7, #0]
 8017076:	6878      	ldr	r0, [r7, #4]
 8017078:	f000 f8a5 	bl	80171c6 <USBD_CtlError>
        break;
 801707c:	e01a      	b.n	80170b4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	2201      	movs	r2, #1
 8017082:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801708a:	2b00      	cmp	r3, #0
 801708c:	d005      	beq.n	801709a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	68db      	ldr	r3, [r3, #12]
 8017092:	f043 0202 	orr.w	r2, r3, #2
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	330c      	adds	r3, #12
 801709e:	2202      	movs	r2, #2
 80170a0:	4619      	mov	r1, r3
 80170a2:	6878      	ldr	r0, [r7, #4]
 80170a4:	f000 f900 	bl	80172a8 <USBD_CtlSendData>
      break;
 80170a8:	e004      	b.n	80170b4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80170aa:	6839      	ldr	r1, [r7, #0]
 80170ac:	6878      	ldr	r0, [r7, #4]
 80170ae:	f000 f88a 	bl	80171c6 <USBD_CtlError>
      break;
 80170b2:	bf00      	nop
  }
}
 80170b4:	bf00      	nop
 80170b6:	3708      	adds	r7, #8
 80170b8:	46bd      	mov	sp, r7
 80170ba:	bd80      	pop	{r7, pc}

080170bc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80170bc:	b580      	push	{r7, lr}
 80170be:	b082      	sub	sp, #8
 80170c0:	af00      	add	r7, sp, #0
 80170c2:	6078      	str	r0, [r7, #4]
 80170c4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80170c6:	683b      	ldr	r3, [r7, #0]
 80170c8:	885b      	ldrh	r3, [r3, #2]
 80170ca:	2b01      	cmp	r3, #1
 80170cc:	d107      	bne.n	80170de <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	2201      	movs	r2, #1
 80170d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80170d6:	6878      	ldr	r0, [r7, #4]
 80170d8:	f000 f940 	bl	801735c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80170dc:	e013      	b.n	8017106 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80170de:	683b      	ldr	r3, [r7, #0]
 80170e0:	885b      	ldrh	r3, [r3, #2]
 80170e2:	2b02      	cmp	r3, #2
 80170e4:	d10b      	bne.n	80170fe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80170e6:	683b      	ldr	r3, [r7, #0]
 80170e8:	889b      	ldrh	r3, [r3, #4]
 80170ea:	0a1b      	lsrs	r3, r3, #8
 80170ec:	b29b      	uxth	r3, r3
 80170ee:	b2da      	uxtb	r2, r3
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80170f6:	6878      	ldr	r0, [r7, #4]
 80170f8:	f000 f930 	bl	801735c <USBD_CtlSendStatus>
}
 80170fc:	e003      	b.n	8017106 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80170fe:	6839      	ldr	r1, [r7, #0]
 8017100:	6878      	ldr	r0, [r7, #4]
 8017102:	f000 f860 	bl	80171c6 <USBD_CtlError>
}
 8017106:	bf00      	nop
 8017108:	3708      	adds	r7, #8
 801710a:	46bd      	mov	sp, r7
 801710c:	bd80      	pop	{r7, pc}

0801710e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801710e:	b580      	push	{r7, lr}
 8017110:	b082      	sub	sp, #8
 8017112:	af00      	add	r7, sp, #0
 8017114:	6078      	str	r0, [r7, #4]
 8017116:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017118:	687b      	ldr	r3, [r7, #4]
 801711a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801711e:	b2db      	uxtb	r3, r3
 8017120:	3b01      	subs	r3, #1
 8017122:	2b02      	cmp	r3, #2
 8017124:	d80b      	bhi.n	801713e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017126:	683b      	ldr	r3, [r7, #0]
 8017128:	885b      	ldrh	r3, [r3, #2]
 801712a:	2b01      	cmp	r3, #1
 801712c:	d10c      	bne.n	8017148 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	2200      	movs	r2, #0
 8017132:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8017136:	6878      	ldr	r0, [r7, #4]
 8017138:	f000 f910 	bl	801735c <USBD_CtlSendStatus>
      }
      break;
 801713c:	e004      	b.n	8017148 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801713e:	6839      	ldr	r1, [r7, #0]
 8017140:	6878      	ldr	r0, [r7, #4]
 8017142:	f000 f840 	bl	80171c6 <USBD_CtlError>
      break;
 8017146:	e000      	b.n	801714a <USBD_ClrFeature+0x3c>
      break;
 8017148:	bf00      	nop
  }
}
 801714a:	bf00      	nop
 801714c:	3708      	adds	r7, #8
 801714e:	46bd      	mov	sp, r7
 8017150:	bd80      	pop	{r7, pc}

08017152 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8017152:	b580      	push	{r7, lr}
 8017154:	b084      	sub	sp, #16
 8017156:	af00      	add	r7, sp, #0
 8017158:	6078      	str	r0, [r7, #4]
 801715a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801715c:	683b      	ldr	r3, [r7, #0]
 801715e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8017160:	68fb      	ldr	r3, [r7, #12]
 8017162:	781a      	ldrb	r2, [r3, #0]
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8017168:	68fb      	ldr	r3, [r7, #12]
 801716a:	3301      	adds	r3, #1
 801716c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801716e:	68fb      	ldr	r3, [r7, #12]
 8017170:	781a      	ldrb	r2, [r3, #0]
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8017176:	68fb      	ldr	r3, [r7, #12]
 8017178:	3301      	adds	r3, #1
 801717a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801717c:	68f8      	ldr	r0, [r7, #12]
 801717e:	f7ff fa41 	bl	8016604 <SWAPBYTE>
 8017182:	4603      	mov	r3, r0
 8017184:	461a      	mov	r2, r3
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801718a:	68fb      	ldr	r3, [r7, #12]
 801718c:	3301      	adds	r3, #1
 801718e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017190:	68fb      	ldr	r3, [r7, #12]
 8017192:	3301      	adds	r3, #1
 8017194:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8017196:	68f8      	ldr	r0, [r7, #12]
 8017198:	f7ff fa34 	bl	8016604 <SWAPBYTE>
 801719c:	4603      	mov	r3, r0
 801719e:	461a      	mov	r2, r3
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	3301      	adds	r3, #1
 80171a8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80171aa:	68fb      	ldr	r3, [r7, #12]
 80171ac:	3301      	adds	r3, #1
 80171ae:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80171b0:	68f8      	ldr	r0, [r7, #12]
 80171b2:	f7ff fa27 	bl	8016604 <SWAPBYTE>
 80171b6:	4603      	mov	r3, r0
 80171b8:	461a      	mov	r2, r3
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	80da      	strh	r2, [r3, #6]
}
 80171be:	bf00      	nop
 80171c0:	3710      	adds	r7, #16
 80171c2:	46bd      	mov	sp, r7
 80171c4:	bd80      	pop	{r7, pc}

080171c6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80171c6:	b580      	push	{r7, lr}
 80171c8:	b082      	sub	sp, #8
 80171ca:	af00      	add	r7, sp, #0
 80171cc:	6078      	str	r0, [r7, #4]
 80171ce:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80171d0:	2180      	movs	r1, #128	; 0x80
 80171d2:	6878      	ldr	r0, [r7, #4]
 80171d4:	f000 fd36 	bl	8017c44 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80171d8:	2100      	movs	r1, #0
 80171da:	6878      	ldr	r0, [r7, #4]
 80171dc:	f000 fd32 	bl	8017c44 <USBD_LL_StallEP>
}
 80171e0:	bf00      	nop
 80171e2:	3708      	adds	r7, #8
 80171e4:	46bd      	mov	sp, r7
 80171e6:	bd80      	pop	{r7, pc}

080171e8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80171e8:	b580      	push	{r7, lr}
 80171ea:	b086      	sub	sp, #24
 80171ec:	af00      	add	r7, sp, #0
 80171ee:	60f8      	str	r0, [r7, #12]
 80171f0:	60b9      	str	r1, [r7, #8]
 80171f2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80171f4:	2300      	movs	r3, #0
 80171f6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80171f8:	68fb      	ldr	r3, [r7, #12]
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	d036      	beq.n	801726c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80171fe:	68fb      	ldr	r3, [r7, #12]
 8017200:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8017202:	6938      	ldr	r0, [r7, #16]
 8017204:	f000 f836 	bl	8017274 <USBD_GetLen>
 8017208:	4603      	mov	r3, r0
 801720a:	3301      	adds	r3, #1
 801720c:	b29b      	uxth	r3, r3
 801720e:	005b      	lsls	r3, r3, #1
 8017210:	b29a      	uxth	r2, r3
 8017212:	687b      	ldr	r3, [r7, #4]
 8017214:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8017216:	7dfb      	ldrb	r3, [r7, #23]
 8017218:	68ba      	ldr	r2, [r7, #8]
 801721a:	4413      	add	r3, r2
 801721c:	687a      	ldr	r2, [r7, #4]
 801721e:	7812      	ldrb	r2, [r2, #0]
 8017220:	701a      	strb	r2, [r3, #0]
  idx++;
 8017222:	7dfb      	ldrb	r3, [r7, #23]
 8017224:	3301      	adds	r3, #1
 8017226:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8017228:	7dfb      	ldrb	r3, [r7, #23]
 801722a:	68ba      	ldr	r2, [r7, #8]
 801722c:	4413      	add	r3, r2
 801722e:	2203      	movs	r2, #3
 8017230:	701a      	strb	r2, [r3, #0]
  idx++;
 8017232:	7dfb      	ldrb	r3, [r7, #23]
 8017234:	3301      	adds	r3, #1
 8017236:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8017238:	e013      	b.n	8017262 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801723a:	7dfb      	ldrb	r3, [r7, #23]
 801723c:	68ba      	ldr	r2, [r7, #8]
 801723e:	4413      	add	r3, r2
 8017240:	693a      	ldr	r2, [r7, #16]
 8017242:	7812      	ldrb	r2, [r2, #0]
 8017244:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8017246:	693b      	ldr	r3, [r7, #16]
 8017248:	3301      	adds	r3, #1
 801724a:	613b      	str	r3, [r7, #16]
    idx++;
 801724c:	7dfb      	ldrb	r3, [r7, #23]
 801724e:	3301      	adds	r3, #1
 8017250:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8017252:	7dfb      	ldrb	r3, [r7, #23]
 8017254:	68ba      	ldr	r2, [r7, #8]
 8017256:	4413      	add	r3, r2
 8017258:	2200      	movs	r2, #0
 801725a:	701a      	strb	r2, [r3, #0]
    idx++;
 801725c:	7dfb      	ldrb	r3, [r7, #23]
 801725e:	3301      	adds	r3, #1
 8017260:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8017262:	693b      	ldr	r3, [r7, #16]
 8017264:	781b      	ldrb	r3, [r3, #0]
 8017266:	2b00      	cmp	r3, #0
 8017268:	d1e7      	bne.n	801723a <USBD_GetString+0x52>
 801726a:	e000      	b.n	801726e <USBD_GetString+0x86>
    return;
 801726c:	bf00      	nop
  }
}
 801726e:	3718      	adds	r7, #24
 8017270:	46bd      	mov	sp, r7
 8017272:	bd80      	pop	{r7, pc}

08017274 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8017274:	b480      	push	{r7}
 8017276:	b085      	sub	sp, #20
 8017278:	af00      	add	r7, sp, #0
 801727a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801727c:	2300      	movs	r3, #0
 801727e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8017284:	e005      	b.n	8017292 <USBD_GetLen+0x1e>
  {
    len++;
 8017286:	7bfb      	ldrb	r3, [r7, #15]
 8017288:	3301      	adds	r3, #1
 801728a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801728c:	68bb      	ldr	r3, [r7, #8]
 801728e:	3301      	adds	r3, #1
 8017290:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8017292:	68bb      	ldr	r3, [r7, #8]
 8017294:	781b      	ldrb	r3, [r3, #0]
 8017296:	2b00      	cmp	r3, #0
 8017298:	d1f5      	bne.n	8017286 <USBD_GetLen+0x12>
  }

  return len;
 801729a:	7bfb      	ldrb	r3, [r7, #15]
}
 801729c:	4618      	mov	r0, r3
 801729e:	3714      	adds	r7, #20
 80172a0:	46bd      	mov	sp, r7
 80172a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172a6:	4770      	bx	lr

080172a8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80172a8:	b580      	push	{r7, lr}
 80172aa:	b084      	sub	sp, #16
 80172ac:	af00      	add	r7, sp, #0
 80172ae:	60f8      	str	r0, [r7, #12]
 80172b0:	60b9      	str	r1, [r7, #8]
 80172b2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80172b4:	68fb      	ldr	r3, [r7, #12]
 80172b6:	2202      	movs	r2, #2
 80172b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80172bc:	68fb      	ldr	r3, [r7, #12]
 80172be:	687a      	ldr	r2, [r7, #4]
 80172c0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80172c2:	68fb      	ldr	r3, [r7, #12]
 80172c4:	687a      	ldr	r2, [r7, #4]
 80172c6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80172c8:	687b      	ldr	r3, [r7, #4]
 80172ca:	68ba      	ldr	r2, [r7, #8]
 80172cc:	2100      	movs	r1, #0
 80172ce:	68f8      	ldr	r0, [r7, #12]
 80172d0:	f000 fd41 	bl	8017d56 <USBD_LL_Transmit>

  return USBD_OK;
 80172d4:	2300      	movs	r3, #0
}
 80172d6:	4618      	mov	r0, r3
 80172d8:	3710      	adds	r7, #16
 80172da:	46bd      	mov	sp, r7
 80172dc:	bd80      	pop	{r7, pc}

080172de <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80172de:	b580      	push	{r7, lr}
 80172e0:	b084      	sub	sp, #16
 80172e2:	af00      	add	r7, sp, #0
 80172e4:	60f8      	str	r0, [r7, #12]
 80172e6:	60b9      	str	r1, [r7, #8]
 80172e8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	68ba      	ldr	r2, [r7, #8]
 80172ee:	2100      	movs	r1, #0
 80172f0:	68f8      	ldr	r0, [r7, #12]
 80172f2:	f000 fd30 	bl	8017d56 <USBD_LL_Transmit>

  return USBD_OK;
 80172f6:	2300      	movs	r3, #0
}
 80172f8:	4618      	mov	r0, r3
 80172fa:	3710      	adds	r7, #16
 80172fc:	46bd      	mov	sp, r7
 80172fe:	bd80      	pop	{r7, pc}

08017300 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8017300:	b580      	push	{r7, lr}
 8017302:	b084      	sub	sp, #16
 8017304:	af00      	add	r7, sp, #0
 8017306:	60f8      	str	r0, [r7, #12]
 8017308:	60b9      	str	r1, [r7, #8]
 801730a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801730c:	68fb      	ldr	r3, [r7, #12]
 801730e:	2203      	movs	r2, #3
 8017310:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8017314:	68fb      	ldr	r3, [r7, #12]
 8017316:	687a      	ldr	r2, [r7, #4]
 8017318:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801731c:	68fb      	ldr	r3, [r7, #12]
 801731e:	687a      	ldr	r2, [r7, #4]
 8017320:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	68ba      	ldr	r2, [r7, #8]
 8017328:	2100      	movs	r1, #0
 801732a:	68f8      	ldr	r0, [r7, #12]
 801732c:	f000 fd34 	bl	8017d98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017330:	2300      	movs	r3, #0
}
 8017332:	4618      	mov	r0, r3
 8017334:	3710      	adds	r7, #16
 8017336:	46bd      	mov	sp, r7
 8017338:	bd80      	pop	{r7, pc}

0801733a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801733a:	b580      	push	{r7, lr}
 801733c:	b084      	sub	sp, #16
 801733e:	af00      	add	r7, sp, #0
 8017340:	60f8      	str	r0, [r7, #12]
 8017342:	60b9      	str	r1, [r7, #8]
 8017344:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	68ba      	ldr	r2, [r7, #8]
 801734a:	2100      	movs	r1, #0
 801734c:	68f8      	ldr	r0, [r7, #12]
 801734e:	f000 fd23 	bl	8017d98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017352:	2300      	movs	r3, #0
}
 8017354:	4618      	mov	r0, r3
 8017356:	3710      	adds	r7, #16
 8017358:	46bd      	mov	sp, r7
 801735a:	bd80      	pop	{r7, pc}

0801735c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801735c:	b580      	push	{r7, lr}
 801735e:	b082      	sub	sp, #8
 8017360:	af00      	add	r7, sp, #0
 8017362:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	2204      	movs	r2, #4
 8017368:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801736c:	2300      	movs	r3, #0
 801736e:	2200      	movs	r2, #0
 8017370:	2100      	movs	r1, #0
 8017372:	6878      	ldr	r0, [r7, #4]
 8017374:	f000 fcef 	bl	8017d56 <USBD_LL_Transmit>

  return USBD_OK;
 8017378:	2300      	movs	r3, #0
}
 801737a:	4618      	mov	r0, r3
 801737c:	3708      	adds	r7, #8
 801737e:	46bd      	mov	sp, r7
 8017380:	bd80      	pop	{r7, pc}

08017382 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8017382:	b580      	push	{r7, lr}
 8017384:	b082      	sub	sp, #8
 8017386:	af00      	add	r7, sp, #0
 8017388:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	2205      	movs	r2, #5
 801738e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017392:	2300      	movs	r3, #0
 8017394:	2200      	movs	r2, #0
 8017396:	2100      	movs	r1, #0
 8017398:	6878      	ldr	r0, [r7, #4]
 801739a:	f000 fcfd 	bl	8017d98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801739e:	2300      	movs	r3, #0
}
 80173a0:	4618      	mov	r0, r3
 80173a2:	3708      	adds	r7, #8
 80173a4:	46bd      	mov	sp, r7
 80173a6:	bd80      	pop	{r7, pc}

080173a8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80173a8:	b480      	push	{r7}
 80173aa:	b087      	sub	sp, #28
 80173ac:	af00      	add	r7, sp, #0
 80173ae:	60f8      	str	r0, [r7, #12]
 80173b0:	60b9      	str	r1, [r7, #8]
 80173b2:	4613      	mov	r3, r2
 80173b4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80173b6:	2301      	movs	r3, #1
 80173b8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80173ba:	2300      	movs	r3, #0
 80173bc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80173be:	4b1f      	ldr	r3, [pc, #124]	; (801743c <FATFS_LinkDriverEx+0x94>)
 80173c0:	7a5b      	ldrb	r3, [r3, #9]
 80173c2:	b2db      	uxtb	r3, r3
 80173c4:	2b00      	cmp	r3, #0
 80173c6:	d131      	bne.n	801742c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80173c8:	4b1c      	ldr	r3, [pc, #112]	; (801743c <FATFS_LinkDriverEx+0x94>)
 80173ca:	7a5b      	ldrb	r3, [r3, #9]
 80173cc:	b2db      	uxtb	r3, r3
 80173ce:	461a      	mov	r2, r3
 80173d0:	4b1a      	ldr	r3, [pc, #104]	; (801743c <FATFS_LinkDriverEx+0x94>)
 80173d2:	2100      	movs	r1, #0
 80173d4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80173d6:	4b19      	ldr	r3, [pc, #100]	; (801743c <FATFS_LinkDriverEx+0x94>)
 80173d8:	7a5b      	ldrb	r3, [r3, #9]
 80173da:	b2db      	uxtb	r3, r3
 80173dc:	4a17      	ldr	r2, [pc, #92]	; (801743c <FATFS_LinkDriverEx+0x94>)
 80173de:	009b      	lsls	r3, r3, #2
 80173e0:	4413      	add	r3, r2
 80173e2:	68fa      	ldr	r2, [r7, #12]
 80173e4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80173e6:	4b15      	ldr	r3, [pc, #84]	; (801743c <FATFS_LinkDriverEx+0x94>)
 80173e8:	7a5b      	ldrb	r3, [r3, #9]
 80173ea:	b2db      	uxtb	r3, r3
 80173ec:	461a      	mov	r2, r3
 80173ee:	4b13      	ldr	r3, [pc, #76]	; (801743c <FATFS_LinkDriverEx+0x94>)
 80173f0:	4413      	add	r3, r2
 80173f2:	79fa      	ldrb	r2, [r7, #7]
 80173f4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80173f6:	4b11      	ldr	r3, [pc, #68]	; (801743c <FATFS_LinkDriverEx+0x94>)
 80173f8:	7a5b      	ldrb	r3, [r3, #9]
 80173fa:	b2db      	uxtb	r3, r3
 80173fc:	1c5a      	adds	r2, r3, #1
 80173fe:	b2d1      	uxtb	r1, r2
 8017400:	4a0e      	ldr	r2, [pc, #56]	; (801743c <FATFS_LinkDriverEx+0x94>)
 8017402:	7251      	strb	r1, [r2, #9]
 8017404:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8017406:	7dbb      	ldrb	r3, [r7, #22]
 8017408:	3330      	adds	r3, #48	; 0x30
 801740a:	b2da      	uxtb	r2, r3
 801740c:	68bb      	ldr	r3, [r7, #8]
 801740e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8017410:	68bb      	ldr	r3, [r7, #8]
 8017412:	3301      	adds	r3, #1
 8017414:	223a      	movs	r2, #58	; 0x3a
 8017416:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8017418:	68bb      	ldr	r3, [r7, #8]
 801741a:	3302      	adds	r3, #2
 801741c:	222f      	movs	r2, #47	; 0x2f
 801741e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8017420:	68bb      	ldr	r3, [r7, #8]
 8017422:	3303      	adds	r3, #3
 8017424:	2200      	movs	r2, #0
 8017426:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8017428:	2300      	movs	r3, #0
 801742a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801742c:	7dfb      	ldrb	r3, [r7, #23]
}
 801742e:	4618      	mov	r0, r3
 8017430:	371c      	adds	r7, #28
 8017432:	46bd      	mov	sp, r7
 8017434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017438:	4770      	bx	lr
 801743a:	bf00      	nop
 801743c:	2400161c 	.word	0x2400161c

08017440 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8017440:	b580      	push	{r7, lr}
 8017442:	b082      	sub	sp, #8
 8017444:	af00      	add	r7, sp, #0
 8017446:	6078      	str	r0, [r7, #4]
 8017448:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801744a:	2200      	movs	r2, #0
 801744c:	6839      	ldr	r1, [r7, #0]
 801744e:	6878      	ldr	r0, [r7, #4]
 8017450:	f7ff ffaa 	bl	80173a8 <FATFS_LinkDriverEx>
 8017454:	4603      	mov	r3, r0
}
 8017456:	4618      	mov	r0, r3
 8017458:	3708      	adds	r7, #8
 801745a:	46bd      	mov	sp, r7
 801745c:	bd80      	pop	{r7, pc}
	...

08017460 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8017460:	b580      	push	{r7, lr}
 8017462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8017464:	2201      	movs	r2, #1
 8017466:	4913      	ldr	r1, [pc, #76]	; (80174b4 <MX_USB_DEVICE_Init+0x54>)
 8017468:	4813      	ldr	r0, [pc, #76]	; (80174b8 <MX_USB_DEVICE_Init+0x58>)
 801746a:	f7fe fca5 	bl	8015db8 <USBD_Init>
 801746e:	4603      	mov	r3, r0
 8017470:	2b00      	cmp	r3, #0
 8017472:	d001      	beq.n	8017478 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017474:	f7eb fd6e 	bl	8002f54 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8017478:	4910      	ldr	r1, [pc, #64]	; (80174bc <MX_USB_DEVICE_Init+0x5c>)
 801747a:	480f      	ldr	r0, [pc, #60]	; (80174b8 <MX_USB_DEVICE_Init+0x58>)
 801747c:	f7fe fccc 	bl	8015e18 <USBD_RegisterClass>
 8017480:	4603      	mov	r3, r0
 8017482:	2b00      	cmp	r3, #0
 8017484:	d001      	beq.n	801748a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017486:	f7eb fd65 	bl	8002f54 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 801748a:	490d      	ldr	r1, [pc, #52]	; (80174c0 <MX_USB_DEVICE_Init+0x60>)
 801748c:	480a      	ldr	r0, [pc, #40]	; (80174b8 <MX_USB_DEVICE_Init+0x58>)
 801748e:	f7fe fbc3 	bl	8015c18 <USBD_CDC_RegisterInterface>
 8017492:	4603      	mov	r3, r0
 8017494:	2b00      	cmp	r3, #0
 8017496:	d001      	beq.n	801749c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017498:	f7eb fd5c 	bl	8002f54 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 801749c:	4806      	ldr	r0, [pc, #24]	; (80174b8 <MX_USB_DEVICE_Init+0x58>)
 801749e:	f7fe fcf1 	bl	8015e84 <USBD_Start>
 80174a2:	4603      	mov	r3, r0
 80174a4:	2b00      	cmp	r3, #0
 80174a6:	d001      	beq.n	80174ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80174a8:	f7eb fd54 	bl	8002f54 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80174ac:	f7f3 fa24 	bl	800a8f8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80174b0:	bf00      	nop
 80174b2:	bd80      	pop	{r7, pc}
 80174b4:	240000dc 	.word	0x240000dc
 80174b8:	24001628 	.word	0x24001628
 80174bc:	24000048 	.word	0x24000048
 80174c0:	240000c8 	.word	0x240000c8

080174c4 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80174c4:	b580      	push	{r7, lr}
 80174c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80174c8:	2200      	movs	r2, #0
 80174ca:	4905      	ldr	r1, [pc, #20]	; (80174e0 <CDC_Init_HS+0x1c>)
 80174cc:	4805      	ldr	r0, [pc, #20]	; (80174e4 <CDC_Init_HS+0x20>)
 80174ce:	f7fe fbbd 	bl	8015c4c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80174d2:	4905      	ldr	r1, [pc, #20]	; (80174e8 <CDC_Init_HS+0x24>)
 80174d4:	4803      	ldr	r0, [pc, #12]	; (80174e4 <CDC_Init_HS+0x20>)
 80174d6:	f7fe fbdb 	bl	8015c90 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80174da:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80174dc:	4618      	mov	r0, r3
 80174de:	bd80      	pop	{r7, pc}
 80174e0:	24002104 	.word	0x24002104
 80174e4:	24001628 	.word	0x24001628
 80174e8:	24001904 	.word	0x24001904

080174ec <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 80174ec:	b480      	push	{r7}
 80174ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 80174f0:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80174f2:	4618      	mov	r0, r3
 80174f4:	46bd      	mov	sp, r7
 80174f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174fa:	4770      	bx	lr

080174fc <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80174fc:	b480      	push	{r7}
 80174fe:	b083      	sub	sp, #12
 8017500:	af00      	add	r7, sp, #0
 8017502:	4603      	mov	r3, r0
 8017504:	6039      	str	r1, [r7, #0]
 8017506:	71fb      	strb	r3, [r7, #7]
 8017508:	4613      	mov	r3, r2
 801750a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 801750c:	79fb      	ldrb	r3, [r7, #7]
 801750e:	2b23      	cmp	r3, #35	; 0x23
 8017510:	d84a      	bhi.n	80175a8 <CDC_Control_HS+0xac>
 8017512:	a201      	add	r2, pc, #4	; (adr r2, 8017518 <CDC_Control_HS+0x1c>)
 8017514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017518:	080175a9 	.word	0x080175a9
 801751c:	080175a9 	.word	0x080175a9
 8017520:	080175a9 	.word	0x080175a9
 8017524:	080175a9 	.word	0x080175a9
 8017528:	080175a9 	.word	0x080175a9
 801752c:	080175a9 	.word	0x080175a9
 8017530:	080175a9 	.word	0x080175a9
 8017534:	080175a9 	.word	0x080175a9
 8017538:	080175a9 	.word	0x080175a9
 801753c:	080175a9 	.word	0x080175a9
 8017540:	080175a9 	.word	0x080175a9
 8017544:	080175a9 	.word	0x080175a9
 8017548:	080175a9 	.word	0x080175a9
 801754c:	080175a9 	.word	0x080175a9
 8017550:	080175a9 	.word	0x080175a9
 8017554:	080175a9 	.word	0x080175a9
 8017558:	080175a9 	.word	0x080175a9
 801755c:	080175a9 	.word	0x080175a9
 8017560:	080175a9 	.word	0x080175a9
 8017564:	080175a9 	.word	0x080175a9
 8017568:	080175a9 	.word	0x080175a9
 801756c:	080175a9 	.word	0x080175a9
 8017570:	080175a9 	.word	0x080175a9
 8017574:	080175a9 	.word	0x080175a9
 8017578:	080175a9 	.word	0x080175a9
 801757c:	080175a9 	.word	0x080175a9
 8017580:	080175a9 	.word	0x080175a9
 8017584:	080175a9 	.word	0x080175a9
 8017588:	080175a9 	.word	0x080175a9
 801758c:	080175a9 	.word	0x080175a9
 8017590:	080175a9 	.word	0x080175a9
 8017594:	080175a9 	.word	0x080175a9
 8017598:	080175a9 	.word	0x080175a9
 801759c:	080175a9 	.word	0x080175a9
 80175a0:	080175a9 	.word	0x080175a9
 80175a4:	080175a9 	.word	0x080175a9
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80175a8:	bf00      	nop
  }

  return (USBD_OK);
 80175aa:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 80175ac:	4618      	mov	r0, r3
 80175ae:	370c      	adds	r7, #12
 80175b0:	46bd      	mov	sp, r7
 80175b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175b6:	4770      	bx	lr

080175b8 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 80175b8:	b580      	push	{r7, lr}
 80175ba:	b082      	sub	sp, #8
 80175bc:	af00      	add	r7, sp, #0
 80175be:	6078      	str	r0, [r7, #4]
 80175c0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80175c2:	6879      	ldr	r1, [r7, #4]
 80175c4:	4805      	ldr	r0, [pc, #20]	; (80175dc <CDC_Receive_HS+0x24>)
 80175c6:	f7fe fb63 	bl	8015c90 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80175ca:	4804      	ldr	r0, [pc, #16]	; (80175dc <CDC_Receive_HS+0x24>)
 80175cc:	f7fe fbbe 	bl	8015d4c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80175d0:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80175d2:	4618      	mov	r0, r3
 80175d4:	3708      	adds	r7, #8
 80175d6:	46bd      	mov	sp, r7
 80175d8:	bd80      	pop	{r7, pc}
 80175da:	bf00      	nop
 80175dc:	24001628 	.word	0x24001628

080175e0 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 80175e0:	b580      	push	{r7, lr}
 80175e2:	b084      	sub	sp, #16
 80175e4:	af00      	add	r7, sp, #0
 80175e6:	6078      	str	r0, [r7, #4]
 80175e8:	460b      	mov	r3, r1
 80175ea:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80175ec:	2300      	movs	r3, #0
 80175ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 80175f0:	4b0d      	ldr	r3, [pc, #52]	; (8017628 <CDC_Transmit_HS+0x48>)
 80175f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80175f6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80175f8:	68bb      	ldr	r3, [r7, #8]
 80175fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d001      	beq.n	8017606 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8017602:	2301      	movs	r3, #1
 8017604:	e00b      	b.n	801761e <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8017606:	887b      	ldrh	r3, [r7, #2]
 8017608:	461a      	mov	r2, r3
 801760a:	6879      	ldr	r1, [r7, #4]
 801760c:	4806      	ldr	r0, [pc, #24]	; (8017628 <CDC_Transmit_HS+0x48>)
 801760e:	f7fe fb1d 	bl	8015c4c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8017612:	4805      	ldr	r0, [pc, #20]	; (8017628 <CDC_Transmit_HS+0x48>)
 8017614:	f7fe fb5a 	bl	8015ccc <USBD_CDC_TransmitPacket>
 8017618:	4603      	mov	r3, r0
 801761a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 801761c:	7bfb      	ldrb	r3, [r7, #15]
}
 801761e:	4618      	mov	r0, r3
 8017620:	3710      	adds	r7, #16
 8017622:	46bd      	mov	sp, r7
 8017624:	bd80      	pop	{r7, pc}
 8017626:	bf00      	nop
 8017628:	24001628 	.word	0x24001628

0801762c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801762c:	b480      	push	{r7}
 801762e:	b087      	sub	sp, #28
 8017630:	af00      	add	r7, sp, #0
 8017632:	60f8      	str	r0, [r7, #12]
 8017634:	60b9      	str	r1, [r7, #8]
 8017636:	4613      	mov	r3, r2
 8017638:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801763a:	2300      	movs	r3, #0
 801763c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801763e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017642:	4618      	mov	r0, r3
 8017644:	371c      	adds	r7, #28
 8017646:	46bd      	mov	sp, r7
 8017648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801764c:	4770      	bx	lr
	...

08017650 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017650:	b480      	push	{r7}
 8017652:	b083      	sub	sp, #12
 8017654:	af00      	add	r7, sp, #0
 8017656:	4603      	mov	r3, r0
 8017658:	6039      	str	r1, [r7, #0]
 801765a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 801765c:	683b      	ldr	r3, [r7, #0]
 801765e:	2212      	movs	r2, #18
 8017660:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8017662:	4b03      	ldr	r3, [pc, #12]	; (8017670 <USBD_HS_DeviceDescriptor+0x20>)
}
 8017664:	4618      	mov	r0, r3
 8017666:	370c      	adds	r7, #12
 8017668:	46bd      	mov	sp, r7
 801766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801766e:	4770      	bx	lr
 8017670:	240000f8 	.word	0x240000f8

08017674 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017674:	b480      	push	{r7}
 8017676:	b083      	sub	sp, #12
 8017678:	af00      	add	r7, sp, #0
 801767a:	4603      	mov	r3, r0
 801767c:	6039      	str	r1, [r7, #0]
 801767e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017680:	683b      	ldr	r3, [r7, #0]
 8017682:	2204      	movs	r2, #4
 8017684:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017686:	4b03      	ldr	r3, [pc, #12]	; (8017694 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8017688:	4618      	mov	r0, r3
 801768a:	370c      	adds	r7, #12
 801768c:	46bd      	mov	sp, r7
 801768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017692:	4770      	bx	lr
 8017694:	2400010c 	.word	0x2400010c

08017698 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017698:	b580      	push	{r7, lr}
 801769a:	b082      	sub	sp, #8
 801769c:	af00      	add	r7, sp, #0
 801769e:	4603      	mov	r3, r0
 80176a0:	6039      	str	r1, [r7, #0]
 80176a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80176a4:	79fb      	ldrb	r3, [r7, #7]
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	d105      	bne.n	80176b6 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80176aa:	683a      	ldr	r2, [r7, #0]
 80176ac:	4907      	ldr	r1, [pc, #28]	; (80176cc <USBD_HS_ProductStrDescriptor+0x34>)
 80176ae:	4808      	ldr	r0, [pc, #32]	; (80176d0 <USBD_HS_ProductStrDescriptor+0x38>)
 80176b0:	f7ff fd9a 	bl	80171e8 <USBD_GetString>
 80176b4:	e004      	b.n	80176c0 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80176b6:	683a      	ldr	r2, [r7, #0]
 80176b8:	4904      	ldr	r1, [pc, #16]	; (80176cc <USBD_HS_ProductStrDescriptor+0x34>)
 80176ba:	4805      	ldr	r0, [pc, #20]	; (80176d0 <USBD_HS_ProductStrDescriptor+0x38>)
 80176bc:	f7ff fd94 	bl	80171e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80176c0:	4b02      	ldr	r3, [pc, #8]	; (80176cc <USBD_HS_ProductStrDescriptor+0x34>)
}
 80176c2:	4618      	mov	r0, r3
 80176c4:	3708      	adds	r7, #8
 80176c6:	46bd      	mov	sp, r7
 80176c8:	bd80      	pop	{r7, pc}
 80176ca:	bf00      	nop
 80176cc:	24002904 	.word	0x24002904
 80176d0:	0801c73c 	.word	0x0801c73c

080176d4 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80176d4:	b580      	push	{r7, lr}
 80176d6:	b082      	sub	sp, #8
 80176d8:	af00      	add	r7, sp, #0
 80176da:	4603      	mov	r3, r0
 80176dc:	6039      	str	r1, [r7, #0]
 80176de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80176e0:	683a      	ldr	r2, [r7, #0]
 80176e2:	4904      	ldr	r1, [pc, #16]	; (80176f4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 80176e4:	4804      	ldr	r0, [pc, #16]	; (80176f8 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 80176e6:	f7ff fd7f 	bl	80171e8 <USBD_GetString>
  return USBD_StrDesc;
 80176ea:	4b02      	ldr	r3, [pc, #8]	; (80176f4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 80176ec:	4618      	mov	r0, r3
 80176ee:	3708      	adds	r7, #8
 80176f0:	46bd      	mov	sp, r7
 80176f2:	bd80      	pop	{r7, pc}
 80176f4:	24002904 	.word	0x24002904
 80176f8:	0801c758 	.word	0x0801c758

080176fc <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80176fc:	b580      	push	{r7, lr}
 80176fe:	b082      	sub	sp, #8
 8017700:	af00      	add	r7, sp, #0
 8017702:	4603      	mov	r3, r0
 8017704:	6039      	str	r1, [r7, #0]
 8017706:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017708:	683b      	ldr	r3, [r7, #0]
 801770a:	221a      	movs	r2, #26
 801770c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801770e:	f000 f843 	bl	8017798 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8017712:	4b02      	ldr	r3, [pc, #8]	; (801771c <USBD_HS_SerialStrDescriptor+0x20>)
}
 8017714:	4618      	mov	r0, r3
 8017716:	3708      	adds	r7, #8
 8017718:	46bd      	mov	sp, r7
 801771a:	bd80      	pop	{r7, pc}
 801771c:	24000110 	.word	0x24000110

08017720 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017720:	b580      	push	{r7, lr}
 8017722:	b082      	sub	sp, #8
 8017724:	af00      	add	r7, sp, #0
 8017726:	4603      	mov	r3, r0
 8017728:	6039      	str	r1, [r7, #0]
 801772a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801772c:	79fb      	ldrb	r3, [r7, #7]
 801772e:	2b00      	cmp	r3, #0
 8017730:	d105      	bne.n	801773e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8017732:	683a      	ldr	r2, [r7, #0]
 8017734:	4907      	ldr	r1, [pc, #28]	; (8017754 <USBD_HS_ConfigStrDescriptor+0x34>)
 8017736:	4808      	ldr	r0, [pc, #32]	; (8017758 <USBD_HS_ConfigStrDescriptor+0x38>)
 8017738:	f7ff fd56 	bl	80171e8 <USBD_GetString>
 801773c:	e004      	b.n	8017748 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801773e:	683a      	ldr	r2, [r7, #0]
 8017740:	4904      	ldr	r1, [pc, #16]	; (8017754 <USBD_HS_ConfigStrDescriptor+0x34>)
 8017742:	4805      	ldr	r0, [pc, #20]	; (8017758 <USBD_HS_ConfigStrDescriptor+0x38>)
 8017744:	f7ff fd50 	bl	80171e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017748:	4b02      	ldr	r3, [pc, #8]	; (8017754 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801774a:	4618      	mov	r0, r3
 801774c:	3708      	adds	r7, #8
 801774e:	46bd      	mov	sp, r7
 8017750:	bd80      	pop	{r7, pc}
 8017752:	bf00      	nop
 8017754:	24002904 	.word	0x24002904
 8017758:	0801c75c 	.word	0x0801c75c

0801775c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801775c:	b580      	push	{r7, lr}
 801775e:	b082      	sub	sp, #8
 8017760:	af00      	add	r7, sp, #0
 8017762:	4603      	mov	r3, r0
 8017764:	6039      	str	r1, [r7, #0]
 8017766:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017768:	79fb      	ldrb	r3, [r7, #7]
 801776a:	2b00      	cmp	r3, #0
 801776c:	d105      	bne.n	801777a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801776e:	683a      	ldr	r2, [r7, #0]
 8017770:	4907      	ldr	r1, [pc, #28]	; (8017790 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8017772:	4808      	ldr	r0, [pc, #32]	; (8017794 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8017774:	f7ff fd38 	bl	80171e8 <USBD_GetString>
 8017778:	e004      	b.n	8017784 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801777a:	683a      	ldr	r2, [r7, #0]
 801777c:	4904      	ldr	r1, [pc, #16]	; (8017790 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801777e:	4805      	ldr	r0, [pc, #20]	; (8017794 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8017780:	f7ff fd32 	bl	80171e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017784:	4b02      	ldr	r3, [pc, #8]	; (8017790 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8017786:	4618      	mov	r0, r3
 8017788:	3708      	adds	r7, #8
 801778a:	46bd      	mov	sp, r7
 801778c:	bd80      	pop	{r7, pc}
 801778e:	bf00      	nop
 8017790:	24002904 	.word	0x24002904
 8017794:	0801c768 	.word	0x0801c768

08017798 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017798:	b580      	push	{r7, lr}
 801779a:	b084      	sub	sp, #16
 801779c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801779e:	4b0f      	ldr	r3, [pc, #60]	; (80177dc <Get_SerialNum+0x44>)
 80177a0:	681b      	ldr	r3, [r3, #0]
 80177a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80177a4:	4b0e      	ldr	r3, [pc, #56]	; (80177e0 <Get_SerialNum+0x48>)
 80177a6:	681b      	ldr	r3, [r3, #0]
 80177a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80177aa:	4b0e      	ldr	r3, [pc, #56]	; (80177e4 <Get_SerialNum+0x4c>)
 80177ac:	681b      	ldr	r3, [r3, #0]
 80177ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80177b0:	68fa      	ldr	r2, [r7, #12]
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	4413      	add	r3, r2
 80177b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80177b8:	68fb      	ldr	r3, [r7, #12]
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d009      	beq.n	80177d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80177be:	2208      	movs	r2, #8
 80177c0:	4909      	ldr	r1, [pc, #36]	; (80177e8 <Get_SerialNum+0x50>)
 80177c2:	68f8      	ldr	r0, [r7, #12]
 80177c4:	f000 f814 	bl	80177f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80177c8:	2204      	movs	r2, #4
 80177ca:	4908      	ldr	r1, [pc, #32]	; (80177ec <Get_SerialNum+0x54>)
 80177cc:	68b8      	ldr	r0, [r7, #8]
 80177ce:	f000 f80f 	bl	80177f0 <IntToUnicode>
  }
}
 80177d2:	bf00      	nop
 80177d4:	3710      	adds	r7, #16
 80177d6:	46bd      	mov	sp, r7
 80177d8:	bd80      	pop	{r7, pc}
 80177da:	bf00      	nop
 80177dc:	1ff1e800 	.word	0x1ff1e800
 80177e0:	1ff1e804 	.word	0x1ff1e804
 80177e4:	1ff1e808 	.word	0x1ff1e808
 80177e8:	24000112 	.word	0x24000112
 80177ec:	24000122 	.word	0x24000122

080177f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80177f0:	b480      	push	{r7}
 80177f2:	b087      	sub	sp, #28
 80177f4:	af00      	add	r7, sp, #0
 80177f6:	60f8      	str	r0, [r7, #12]
 80177f8:	60b9      	str	r1, [r7, #8]
 80177fa:	4613      	mov	r3, r2
 80177fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80177fe:	2300      	movs	r3, #0
 8017800:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017802:	2300      	movs	r3, #0
 8017804:	75fb      	strb	r3, [r7, #23]
 8017806:	e027      	b.n	8017858 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017808:	68fb      	ldr	r3, [r7, #12]
 801780a:	0f1b      	lsrs	r3, r3, #28
 801780c:	2b09      	cmp	r3, #9
 801780e:	d80b      	bhi.n	8017828 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017810:	68fb      	ldr	r3, [r7, #12]
 8017812:	0f1b      	lsrs	r3, r3, #28
 8017814:	b2da      	uxtb	r2, r3
 8017816:	7dfb      	ldrb	r3, [r7, #23]
 8017818:	005b      	lsls	r3, r3, #1
 801781a:	4619      	mov	r1, r3
 801781c:	68bb      	ldr	r3, [r7, #8]
 801781e:	440b      	add	r3, r1
 8017820:	3230      	adds	r2, #48	; 0x30
 8017822:	b2d2      	uxtb	r2, r2
 8017824:	701a      	strb	r2, [r3, #0]
 8017826:	e00a      	b.n	801783e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017828:	68fb      	ldr	r3, [r7, #12]
 801782a:	0f1b      	lsrs	r3, r3, #28
 801782c:	b2da      	uxtb	r2, r3
 801782e:	7dfb      	ldrb	r3, [r7, #23]
 8017830:	005b      	lsls	r3, r3, #1
 8017832:	4619      	mov	r1, r3
 8017834:	68bb      	ldr	r3, [r7, #8]
 8017836:	440b      	add	r3, r1
 8017838:	3237      	adds	r2, #55	; 0x37
 801783a:	b2d2      	uxtb	r2, r2
 801783c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801783e:	68fb      	ldr	r3, [r7, #12]
 8017840:	011b      	lsls	r3, r3, #4
 8017842:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017844:	7dfb      	ldrb	r3, [r7, #23]
 8017846:	005b      	lsls	r3, r3, #1
 8017848:	3301      	adds	r3, #1
 801784a:	68ba      	ldr	r2, [r7, #8]
 801784c:	4413      	add	r3, r2
 801784e:	2200      	movs	r2, #0
 8017850:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017852:	7dfb      	ldrb	r3, [r7, #23]
 8017854:	3301      	adds	r3, #1
 8017856:	75fb      	strb	r3, [r7, #23]
 8017858:	7dfa      	ldrb	r2, [r7, #23]
 801785a:	79fb      	ldrb	r3, [r7, #7]
 801785c:	429a      	cmp	r2, r3
 801785e:	d3d3      	bcc.n	8017808 <IntToUnicode+0x18>
  }
}
 8017860:	bf00      	nop
 8017862:	bf00      	nop
 8017864:	371c      	adds	r7, #28
 8017866:	46bd      	mov	sp, r7
 8017868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801786c:	4770      	bx	lr
	...

08017870 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017870:	b580      	push	{r7, lr}
 8017872:	b0b2      	sub	sp, #200	; 0xc8
 8017874:	af00      	add	r7, sp, #0
 8017876:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8017878:	f107 0310 	add.w	r3, r7, #16
 801787c:	22b8      	movs	r2, #184	; 0xb8
 801787e:	2100      	movs	r1, #0
 8017880:	4618      	mov	r0, r3
 8017882:	f001 fa64 	bl	8018d4e <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	681b      	ldr	r3, [r3, #0]
 801788a:	4a1a      	ldr	r2, [pc, #104]	; (80178f4 <HAL_PCD_MspInit+0x84>)
 801788c:	4293      	cmp	r3, r2
 801788e:	d12c      	bne.n	80178ea <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8017890:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8017894:	f04f 0300 	mov.w	r3, #0
 8017898:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801789c:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80178a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80178a4:	f107 0310 	add.w	r3, r7, #16
 80178a8:	4618      	mov	r0, r3
 80178aa:	f7f4 f805 	bl	800b8b8 <HAL_RCCEx_PeriphCLKConfig>
 80178ae:	4603      	mov	r3, r0
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	d001      	beq.n	80178b8 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 80178b4:	f7eb fb4e 	bl	8002f54 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80178b8:	f7f3 f81e 	bl	800a8f8 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80178bc:	4b0e      	ldr	r3, [pc, #56]	; (80178f8 <HAL_PCD_MspInit+0x88>)
 80178be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80178c2:	4a0d      	ldr	r2, [pc, #52]	; (80178f8 <HAL_PCD_MspInit+0x88>)
 80178c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80178c8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80178cc:	4b0a      	ldr	r3, [pc, #40]	; (80178f8 <HAL_PCD_MspInit+0x88>)
 80178ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80178d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80178d6:	60fb      	str	r3, [r7, #12]
 80178d8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80178da:	2200      	movs	r2, #0
 80178dc:	2100      	movs	r1, #0
 80178de:	204d      	movs	r0, #77	; 0x4d
 80178e0:	f7ee f983 	bl	8005bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80178e4:	204d      	movs	r0, #77	; 0x4d
 80178e6:	f7ee f99a 	bl	8005c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80178ea:	bf00      	nop
 80178ec:	37c8      	adds	r7, #200	; 0xc8
 80178ee:	46bd      	mov	sp, r7
 80178f0:	bd80      	pop	{r7, pc}
 80178f2:	bf00      	nop
 80178f4:	40040000 	.word	0x40040000
 80178f8:	58024400 	.word	0x58024400

080178fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80178fc:	b580      	push	{r7, lr}
 80178fe:	b082      	sub	sp, #8
 8017900:	af00      	add	r7, sp, #0
 8017902:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8017910:	4619      	mov	r1, r3
 8017912:	4610      	mov	r0, r2
 8017914:	f7fe fb03 	bl	8015f1e <USBD_LL_SetupStage>
}
 8017918:	bf00      	nop
 801791a:	3708      	adds	r7, #8
 801791c:	46bd      	mov	sp, r7
 801791e:	bd80      	pop	{r7, pc}

08017920 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017920:	b580      	push	{r7, lr}
 8017922:	b082      	sub	sp, #8
 8017924:	af00      	add	r7, sp, #0
 8017926:	6078      	str	r0, [r7, #4]
 8017928:	460b      	mov	r3, r1
 801792a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8017932:	78fa      	ldrb	r2, [r7, #3]
 8017934:	6879      	ldr	r1, [r7, #4]
 8017936:	4613      	mov	r3, r2
 8017938:	00db      	lsls	r3, r3, #3
 801793a:	4413      	add	r3, r2
 801793c:	009b      	lsls	r3, r3, #2
 801793e:	440b      	add	r3, r1
 8017940:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8017944:	681a      	ldr	r2, [r3, #0]
 8017946:	78fb      	ldrb	r3, [r7, #3]
 8017948:	4619      	mov	r1, r3
 801794a:	f7fe fb3d 	bl	8015fc8 <USBD_LL_DataOutStage>
}
 801794e:	bf00      	nop
 8017950:	3708      	adds	r7, #8
 8017952:	46bd      	mov	sp, r7
 8017954:	bd80      	pop	{r7, pc}

08017956 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017956:	b580      	push	{r7, lr}
 8017958:	b082      	sub	sp, #8
 801795a:	af00      	add	r7, sp, #0
 801795c:	6078      	str	r0, [r7, #4]
 801795e:	460b      	mov	r3, r1
 8017960:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8017968:	78fa      	ldrb	r2, [r7, #3]
 801796a:	6879      	ldr	r1, [r7, #4]
 801796c:	4613      	mov	r3, r2
 801796e:	00db      	lsls	r3, r3, #3
 8017970:	4413      	add	r3, r2
 8017972:	009b      	lsls	r3, r3, #2
 8017974:	440b      	add	r3, r1
 8017976:	3348      	adds	r3, #72	; 0x48
 8017978:	681a      	ldr	r2, [r3, #0]
 801797a:	78fb      	ldrb	r3, [r7, #3]
 801797c:	4619      	mov	r1, r3
 801797e:	f7fe fbd6 	bl	801612e <USBD_LL_DataInStage>
}
 8017982:	bf00      	nop
 8017984:	3708      	adds	r7, #8
 8017986:	46bd      	mov	sp, r7
 8017988:	bd80      	pop	{r7, pc}

0801798a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801798a:	b580      	push	{r7, lr}
 801798c:	b082      	sub	sp, #8
 801798e:	af00      	add	r7, sp, #0
 8017990:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017998:	4618      	mov	r0, r3
 801799a:	f7fe fd10 	bl	80163be <USBD_LL_SOF>
}
 801799e:	bf00      	nop
 80179a0:	3708      	adds	r7, #8
 80179a2:	46bd      	mov	sp, r7
 80179a4:	bd80      	pop	{r7, pc}

080179a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80179a6:	b580      	push	{r7, lr}
 80179a8:	b084      	sub	sp, #16
 80179aa:	af00      	add	r7, sp, #0
 80179ac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80179ae:	2301      	movs	r3, #1
 80179b0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	691b      	ldr	r3, [r3, #16]
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	d102      	bne.n	80179c0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80179ba:	2300      	movs	r3, #0
 80179bc:	73fb      	strb	r3, [r7, #15]
 80179be:	e008      	b.n	80179d2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	691b      	ldr	r3, [r3, #16]
 80179c4:	2b02      	cmp	r3, #2
 80179c6:	d102      	bne.n	80179ce <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80179c8:	2301      	movs	r3, #1
 80179ca:	73fb      	strb	r3, [r7, #15]
 80179cc:	e001      	b.n	80179d2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80179ce:	f7eb fac1 	bl	8002f54 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80179d8:	7bfa      	ldrb	r2, [r7, #15]
 80179da:	4611      	mov	r1, r2
 80179dc:	4618      	mov	r0, r3
 80179de:	f7fe fcaa 	bl	8016336 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80179e8:	4618      	mov	r0, r3
 80179ea:	f7fe fc52 	bl	8016292 <USBD_LL_Reset>
}
 80179ee:	bf00      	nop
 80179f0:	3710      	adds	r7, #16
 80179f2:	46bd      	mov	sp, r7
 80179f4:	bd80      	pop	{r7, pc}
	...

080179f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80179f8:	b580      	push	{r7, lr}
 80179fa:	b082      	sub	sp, #8
 80179fc:	af00      	add	r7, sp, #0
 80179fe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017a06:	4618      	mov	r0, r3
 8017a08:	f7fe fca5 	bl	8016356 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	681b      	ldr	r3, [r3, #0]
 8017a10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017a14:	681b      	ldr	r3, [r3, #0]
 8017a16:	687a      	ldr	r2, [r7, #4]
 8017a18:	6812      	ldr	r2, [r2, #0]
 8017a1a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017a1e:	f043 0301 	orr.w	r3, r3, #1
 8017a22:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	6a1b      	ldr	r3, [r3, #32]
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	d005      	beq.n	8017a38 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017a2c:	4b04      	ldr	r3, [pc, #16]	; (8017a40 <HAL_PCD_SuspendCallback+0x48>)
 8017a2e:	691b      	ldr	r3, [r3, #16]
 8017a30:	4a03      	ldr	r2, [pc, #12]	; (8017a40 <HAL_PCD_SuspendCallback+0x48>)
 8017a32:	f043 0306 	orr.w	r3, r3, #6
 8017a36:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8017a38:	bf00      	nop
 8017a3a:	3708      	adds	r7, #8
 8017a3c:	46bd      	mov	sp, r7
 8017a3e:	bd80      	pop	{r7, pc}
 8017a40:	e000ed00 	.word	0xe000ed00

08017a44 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017a44:	b580      	push	{r7, lr}
 8017a46:	b082      	sub	sp, #8
 8017a48:	af00      	add	r7, sp, #0
 8017a4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017a52:	4618      	mov	r0, r3
 8017a54:	f7fe fc9b 	bl	801638e <USBD_LL_Resume>
}
 8017a58:	bf00      	nop
 8017a5a:	3708      	adds	r7, #8
 8017a5c:	46bd      	mov	sp, r7
 8017a5e:	bd80      	pop	{r7, pc}

08017a60 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017a60:	b580      	push	{r7, lr}
 8017a62:	b082      	sub	sp, #8
 8017a64:	af00      	add	r7, sp, #0
 8017a66:	6078      	str	r0, [r7, #4]
 8017a68:	460b      	mov	r3, r1
 8017a6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017a72:	78fa      	ldrb	r2, [r7, #3]
 8017a74:	4611      	mov	r1, r2
 8017a76:	4618      	mov	r0, r3
 8017a78:	f7fe fcf3 	bl	8016462 <USBD_LL_IsoOUTIncomplete>
}
 8017a7c:	bf00      	nop
 8017a7e:	3708      	adds	r7, #8
 8017a80:	46bd      	mov	sp, r7
 8017a82:	bd80      	pop	{r7, pc}

08017a84 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017a84:	b580      	push	{r7, lr}
 8017a86:	b082      	sub	sp, #8
 8017a88:	af00      	add	r7, sp, #0
 8017a8a:	6078      	str	r0, [r7, #4]
 8017a8c:	460b      	mov	r3, r1
 8017a8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017a96:	78fa      	ldrb	r2, [r7, #3]
 8017a98:	4611      	mov	r1, r2
 8017a9a:	4618      	mov	r0, r3
 8017a9c:	f7fe fcaf 	bl	80163fe <USBD_LL_IsoINIncomplete>
}
 8017aa0:	bf00      	nop
 8017aa2:	3708      	adds	r7, #8
 8017aa4:	46bd      	mov	sp, r7
 8017aa6:	bd80      	pop	{r7, pc}

08017aa8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017aa8:	b580      	push	{r7, lr}
 8017aaa:	b082      	sub	sp, #8
 8017aac:	af00      	add	r7, sp, #0
 8017aae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017ab6:	4618      	mov	r0, r3
 8017ab8:	f7fe fd05 	bl	80164c6 <USBD_LL_DevConnected>
}
 8017abc:	bf00      	nop
 8017abe:	3708      	adds	r7, #8
 8017ac0:	46bd      	mov	sp, r7
 8017ac2:	bd80      	pop	{r7, pc}

08017ac4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017ac4:	b580      	push	{r7, lr}
 8017ac6:	b082      	sub	sp, #8
 8017ac8:	af00      	add	r7, sp, #0
 8017aca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017ad2:	4618      	mov	r0, r3
 8017ad4:	f7fe fd02 	bl	80164dc <USBD_LL_DevDisconnected>
}
 8017ad8:	bf00      	nop
 8017ada:	3708      	adds	r7, #8
 8017adc:	46bd      	mov	sp, r7
 8017ade:	bd80      	pop	{r7, pc}

08017ae0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017ae0:	b580      	push	{r7, lr}
 8017ae2:	b082      	sub	sp, #8
 8017ae4:	af00      	add	r7, sp, #0
 8017ae6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	781b      	ldrb	r3, [r3, #0]
 8017aec:	2b01      	cmp	r3, #1
 8017aee:	d140      	bne.n	8017b72 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8017af0:	4a22      	ldr	r2, [pc, #136]	; (8017b7c <USBD_LL_Init+0x9c>)
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	4a20      	ldr	r2, [pc, #128]	; (8017b7c <USBD_LL_Init+0x9c>)
 8017afc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8017b00:	4b1e      	ldr	r3, [pc, #120]	; (8017b7c <USBD_LL_Init+0x9c>)
 8017b02:	4a1f      	ldr	r2, [pc, #124]	; (8017b80 <USBD_LL_Init+0xa0>)
 8017b04:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8017b06:	4b1d      	ldr	r3, [pc, #116]	; (8017b7c <USBD_LL_Init+0x9c>)
 8017b08:	2209      	movs	r2, #9
 8017b0a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8017b0c:	4b1b      	ldr	r3, [pc, #108]	; (8017b7c <USBD_LL_Init+0x9c>)
 8017b0e:	2202      	movs	r2, #2
 8017b10:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8017b12:	4b1a      	ldr	r3, [pc, #104]	; (8017b7c <USBD_LL_Init+0x9c>)
 8017b14:	2200      	movs	r2, #0
 8017b16:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8017b18:	4b18      	ldr	r3, [pc, #96]	; (8017b7c <USBD_LL_Init+0x9c>)
 8017b1a:	2202      	movs	r2, #2
 8017b1c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8017b1e:	4b17      	ldr	r3, [pc, #92]	; (8017b7c <USBD_LL_Init+0x9c>)
 8017b20:	2200      	movs	r2, #0
 8017b22:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8017b24:	4b15      	ldr	r3, [pc, #84]	; (8017b7c <USBD_LL_Init+0x9c>)
 8017b26:	2200      	movs	r2, #0
 8017b28:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8017b2a:	4b14      	ldr	r3, [pc, #80]	; (8017b7c <USBD_LL_Init+0x9c>)
 8017b2c:	2200      	movs	r2, #0
 8017b2e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8017b30:	4b12      	ldr	r3, [pc, #72]	; (8017b7c <USBD_LL_Init+0x9c>)
 8017b32:	2200      	movs	r2, #0
 8017b34:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8017b36:	4b11      	ldr	r3, [pc, #68]	; (8017b7c <USBD_LL_Init+0x9c>)
 8017b38:	2200      	movs	r2, #0
 8017b3a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8017b3c:	4b0f      	ldr	r3, [pc, #60]	; (8017b7c <USBD_LL_Init+0x9c>)
 8017b3e:	2200      	movs	r2, #0
 8017b40:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8017b42:	480e      	ldr	r0, [pc, #56]	; (8017b7c <USBD_LL_Init+0x9c>)
 8017b44:	f7f1 fbe5 	bl	8009312 <HAL_PCD_Init>
 8017b48:	4603      	mov	r3, r0
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d001      	beq.n	8017b52 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8017b4e:	f7eb fa01 	bl	8002f54 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8017b52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8017b56:	4809      	ldr	r0, [pc, #36]	; (8017b7c <USBD_LL_Init+0x9c>)
 8017b58:	f7f2 fe53 	bl	800a802 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8017b5c:	2280      	movs	r2, #128	; 0x80
 8017b5e:	2100      	movs	r1, #0
 8017b60:	4806      	ldr	r0, [pc, #24]	; (8017b7c <USBD_LL_Init+0x9c>)
 8017b62:	f7f2 fe07 	bl	800a774 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8017b66:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8017b6a:	2101      	movs	r1, #1
 8017b6c:	4803      	ldr	r0, [pc, #12]	; (8017b7c <USBD_LL_Init+0x9c>)
 8017b6e:	f7f2 fe01 	bl	800a774 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8017b72:	2300      	movs	r3, #0
}
 8017b74:	4618      	mov	r0, r3
 8017b76:	3708      	adds	r7, #8
 8017b78:	46bd      	mov	sp, r7
 8017b7a:	bd80      	pop	{r7, pc}
 8017b7c:	24002b04 	.word	0x24002b04
 8017b80:	40040000 	.word	0x40040000

08017b84 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017b84:	b580      	push	{r7, lr}
 8017b86:	b084      	sub	sp, #16
 8017b88:	af00      	add	r7, sp, #0
 8017b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017b8c:	2300      	movs	r3, #0
 8017b8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017b90:	2300      	movs	r3, #0
 8017b92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017b9a:	4618      	mov	r0, r3
 8017b9c:	f7f1 fcdd 	bl	800955a <HAL_PCD_Start>
 8017ba0:	4603      	mov	r3, r0
 8017ba2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017ba4:	7bfb      	ldrb	r3, [r7, #15]
 8017ba6:	4618      	mov	r0, r3
 8017ba8:	f000 f942 	bl	8017e30 <USBD_Get_USB_Status>
 8017bac:	4603      	mov	r3, r0
 8017bae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017bb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8017bb2:	4618      	mov	r0, r3
 8017bb4:	3710      	adds	r7, #16
 8017bb6:	46bd      	mov	sp, r7
 8017bb8:	bd80      	pop	{r7, pc}

08017bba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017bba:	b580      	push	{r7, lr}
 8017bbc:	b084      	sub	sp, #16
 8017bbe:	af00      	add	r7, sp, #0
 8017bc0:	6078      	str	r0, [r7, #4]
 8017bc2:	4608      	mov	r0, r1
 8017bc4:	4611      	mov	r1, r2
 8017bc6:	461a      	mov	r2, r3
 8017bc8:	4603      	mov	r3, r0
 8017bca:	70fb      	strb	r3, [r7, #3]
 8017bcc:	460b      	mov	r3, r1
 8017bce:	70bb      	strb	r3, [r7, #2]
 8017bd0:	4613      	mov	r3, r2
 8017bd2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017bd4:	2300      	movs	r3, #0
 8017bd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017bd8:	2300      	movs	r3, #0
 8017bda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017be2:	78bb      	ldrb	r3, [r7, #2]
 8017be4:	883a      	ldrh	r2, [r7, #0]
 8017be6:	78f9      	ldrb	r1, [r7, #3]
 8017be8:	f7f2 f9dd 	bl	8009fa6 <HAL_PCD_EP_Open>
 8017bec:	4603      	mov	r3, r0
 8017bee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017bf0:	7bfb      	ldrb	r3, [r7, #15]
 8017bf2:	4618      	mov	r0, r3
 8017bf4:	f000 f91c 	bl	8017e30 <USBD_Get_USB_Status>
 8017bf8:	4603      	mov	r3, r0
 8017bfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017bfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8017bfe:	4618      	mov	r0, r3
 8017c00:	3710      	adds	r7, #16
 8017c02:	46bd      	mov	sp, r7
 8017c04:	bd80      	pop	{r7, pc}

08017c06 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017c06:	b580      	push	{r7, lr}
 8017c08:	b084      	sub	sp, #16
 8017c0a:	af00      	add	r7, sp, #0
 8017c0c:	6078      	str	r0, [r7, #4]
 8017c0e:	460b      	mov	r3, r1
 8017c10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017c12:	2300      	movs	r3, #0
 8017c14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017c16:	2300      	movs	r3, #0
 8017c18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017c1a:	687b      	ldr	r3, [r7, #4]
 8017c1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017c20:	78fa      	ldrb	r2, [r7, #3]
 8017c22:	4611      	mov	r1, r2
 8017c24:	4618      	mov	r0, r3
 8017c26:	f7f2 fa26 	bl	800a076 <HAL_PCD_EP_Close>
 8017c2a:	4603      	mov	r3, r0
 8017c2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017c2e:	7bfb      	ldrb	r3, [r7, #15]
 8017c30:	4618      	mov	r0, r3
 8017c32:	f000 f8fd 	bl	8017e30 <USBD_Get_USB_Status>
 8017c36:	4603      	mov	r3, r0
 8017c38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017c3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8017c3c:	4618      	mov	r0, r3
 8017c3e:	3710      	adds	r7, #16
 8017c40:	46bd      	mov	sp, r7
 8017c42:	bd80      	pop	{r7, pc}

08017c44 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017c44:	b580      	push	{r7, lr}
 8017c46:	b084      	sub	sp, #16
 8017c48:	af00      	add	r7, sp, #0
 8017c4a:	6078      	str	r0, [r7, #4]
 8017c4c:	460b      	mov	r3, r1
 8017c4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017c50:	2300      	movs	r3, #0
 8017c52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017c54:	2300      	movs	r3, #0
 8017c56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017c5e:	78fa      	ldrb	r2, [r7, #3]
 8017c60:	4611      	mov	r1, r2
 8017c62:	4618      	mov	r0, r3
 8017c64:	f7f2 fae0 	bl	800a228 <HAL_PCD_EP_SetStall>
 8017c68:	4603      	mov	r3, r0
 8017c6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017c6c:	7bfb      	ldrb	r3, [r7, #15]
 8017c6e:	4618      	mov	r0, r3
 8017c70:	f000 f8de 	bl	8017e30 <USBD_Get_USB_Status>
 8017c74:	4603      	mov	r3, r0
 8017c76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017c78:	7bbb      	ldrb	r3, [r7, #14]
}
 8017c7a:	4618      	mov	r0, r3
 8017c7c:	3710      	adds	r7, #16
 8017c7e:	46bd      	mov	sp, r7
 8017c80:	bd80      	pop	{r7, pc}

08017c82 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017c82:	b580      	push	{r7, lr}
 8017c84:	b084      	sub	sp, #16
 8017c86:	af00      	add	r7, sp, #0
 8017c88:	6078      	str	r0, [r7, #4]
 8017c8a:	460b      	mov	r3, r1
 8017c8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017c8e:	2300      	movs	r3, #0
 8017c90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017c92:	2300      	movs	r3, #0
 8017c94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017c9c:	78fa      	ldrb	r2, [r7, #3]
 8017c9e:	4611      	mov	r1, r2
 8017ca0:	4618      	mov	r0, r3
 8017ca2:	f7f2 fb25 	bl	800a2f0 <HAL_PCD_EP_ClrStall>
 8017ca6:	4603      	mov	r3, r0
 8017ca8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017caa:	7bfb      	ldrb	r3, [r7, #15]
 8017cac:	4618      	mov	r0, r3
 8017cae:	f000 f8bf 	bl	8017e30 <USBD_Get_USB_Status>
 8017cb2:	4603      	mov	r3, r0
 8017cb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017cb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8017cb8:	4618      	mov	r0, r3
 8017cba:	3710      	adds	r7, #16
 8017cbc:	46bd      	mov	sp, r7
 8017cbe:	bd80      	pop	{r7, pc}

08017cc0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017cc0:	b480      	push	{r7}
 8017cc2:	b085      	sub	sp, #20
 8017cc4:	af00      	add	r7, sp, #0
 8017cc6:	6078      	str	r0, [r7, #4]
 8017cc8:	460b      	mov	r3, r1
 8017cca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017cd2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017cd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	da0b      	bge.n	8017cf4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017cdc:	78fb      	ldrb	r3, [r7, #3]
 8017cde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017ce2:	68f9      	ldr	r1, [r7, #12]
 8017ce4:	4613      	mov	r3, r2
 8017ce6:	00db      	lsls	r3, r3, #3
 8017ce8:	4413      	add	r3, r2
 8017cea:	009b      	lsls	r3, r3, #2
 8017cec:	440b      	add	r3, r1
 8017cee:	333e      	adds	r3, #62	; 0x3e
 8017cf0:	781b      	ldrb	r3, [r3, #0]
 8017cf2:	e00b      	b.n	8017d0c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017cf4:	78fb      	ldrb	r3, [r7, #3]
 8017cf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017cfa:	68f9      	ldr	r1, [r7, #12]
 8017cfc:	4613      	mov	r3, r2
 8017cfe:	00db      	lsls	r3, r3, #3
 8017d00:	4413      	add	r3, r2
 8017d02:	009b      	lsls	r3, r3, #2
 8017d04:	440b      	add	r3, r1
 8017d06:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8017d0a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017d0c:	4618      	mov	r0, r3
 8017d0e:	3714      	adds	r7, #20
 8017d10:	46bd      	mov	sp, r7
 8017d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d16:	4770      	bx	lr

08017d18 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017d18:	b580      	push	{r7, lr}
 8017d1a:	b084      	sub	sp, #16
 8017d1c:	af00      	add	r7, sp, #0
 8017d1e:	6078      	str	r0, [r7, #4]
 8017d20:	460b      	mov	r3, r1
 8017d22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017d24:	2300      	movs	r3, #0
 8017d26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017d28:	2300      	movs	r3, #0
 8017d2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017d32:	78fa      	ldrb	r2, [r7, #3]
 8017d34:	4611      	mov	r1, r2
 8017d36:	4618      	mov	r0, r3
 8017d38:	f7f2 f910 	bl	8009f5c <HAL_PCD_SetAddress>
 8017d3c:	4603      	mov	r3, r0
 8017d3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017d40:	7bfb      	ldrb	r3, [r7, #15]
 8017d42:	4618      	mov	r0, r3
 8017d44:	f000 f874 	bl	8017e30 <USBD_Get_USB_Status>
 8017d48:	4603      	mov	r3, r0
 8017d4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017d4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8017d4e:	4618      	mov	r0, r3
 8017d50:	3710      	adds	r7, #16
 8017d52:	46bd      	mov	sp, r7
 8017d54:	bd80      	pop	{r7, pc}

08017d56 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017d56:	b580      	push	{r7, lr}
 8017d58:	b086      	sub	sp, #24
 8017d5a:	af00      	add	r7, sp, #0
 8017d5c:	60f8      	str	r0, [r7, #12]
 8017d5e:	607a      	str	r2, [r7, #4]
 8017d60:	603b      	str	r3, [r7, #0]
 8017d62:	460b      	mov	r3, r1
 8017d64:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017d66:	2300      	movs	r3, #0
 8017d68:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017d6a:	2300      	movs	r3, #0
 8017d6c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017d6e:	68fb      	ldr	r3, [r7, #12]
 8017d70:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017d74:	7af9      	ldrb	r1, [r7, #11]
 8017d76:	683b      	ldr	r3, [r7, #0]
 8017d78:	687a      	ldr	r2, [r7, #4]
 8017d7a:	f7f2 fa1a 	bl	800a1b2 <HAL_PCD_EP_Transmit>
 8017d7e:	4603      	mov	r3, r0
 8017d80:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017d82:	7dfb      	ldrb	r3, [r7, #23]
 8017d84:	4618      	mov	r0, r3
 8017d86:	f000 f853 	bl	8017e30 <USBD_Get_USB_Status>
 8017d8a:	4603      	mov	r3, r0
 8017d8c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017d8e:	7dbb      	ldrb	r3, [r7, #22]
}
 8017d90:	4618      	mov	r0, r3
 8017d92:	3718      	adds	r7, #24
 8017d94:	46bd      	mov	sp, r7
 8017d96:	bd80      	pop	{r7, pc}

08017d98 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017d98:	b580      	push	{r7, lr}
 8017d9a:	b086      	sub	sp, #24
 8017d9c:	af00      	add	r7, sp, #0
 8017d9e:	60f8      	str	r0, [r7, #12]
 8017da0:	607a      	str	r2, [r7, #4]
 8017da2:	603b      	str	r3, [r7, #0]
 8017da4:	460b      	mov	r3, r1
 8017da6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017da8:	2300      	movs	r3, #0
 8017daa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017dac:	2300      	movs	r3, #0
 8017dae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017db0:	68fb      	ldr	r3, [r7, #12]
 8017db2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017db6:	7af9      	ldrb	r1, [r7, #11]
 8017db8:	683b      	ldr	r3, [r7, #0]
 8017dba:	687a      	ldr	r2, [r7, #4]
 8017dbc:	f7f2 f9a5 	bl	800a10a <HAL_PCD_EP_Receive>
 8017dc0:	4603      	mov	r3, r0
 8017dc2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017dc4:	7dfb      	ldrb	r3, [r7, #23]
 8017dc6:	4618      	mov	r0, r3
 8017dc8:	f000 f832 	bl	8017e30 <USBD_Get_USB_Status>
 8017dcc:	4603      	mov	r3, r0
 8017dce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017dd0:	7dbb      	ldrb	r3, [r7, #22]
}
 8017dd2:	4618      	mov	r0, r3
 8017dd4:	3718      	adds	r7, #24
 8017dd6:	46bd      	mov	sp, r7
 8017dd8:	bd80      	pop	{r7, pc}

08017dda <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017dda:	b580      	push	{r7, lr}
 8017ddc:	b082      	sub	sp, #8
 8017dde:	af00      	add	r7, sp, #0
 8017de0:	6078      	str	r0, [r7, #4]
 8017de2:	460b      	mov	r3, r1
 8017de4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017de6:	687b      	ldr	r3, [r7, #4]
 8017de8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017dec:	78fa      	ldrb	r2, [r7, #3]
 8017dee:	4611      	mov	r1, r2
 8017df0:	4618      	mov	r0, r3
 8017df2:	f7f2 f9c6 	bl	800a182 <HAL_PCD_EP_GetRxCount>
 8017df6:	4603      	mov	r3, r0
}
 8017df8:	4618      	mov	r0, r3
 8017dfa:	3708      	adds	r7, #8
 8017dfc:	46bd      	mov	sp, r7
 8017dfe:	bd80      	pop	{r7, pc}

08017e00 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8017e00:	b480      	push	{r7}
 8017e02:	b083      	sub	sp, #12
 8017e04:	af00      	add	r7, sp, #0
 8017e06:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017e08:	4b03      	ldr	r3, [pc, #12]	; (8017e18 <USBD_static_malloc+0x18>)
}
 8017e0a:	4618      	mov	r0, r3
 8017e0c:	370c      	adds	r7, #12
 8017e0e:	46bd      	mov	sp, r7
 8017e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e14:	4770      	bx	lr
 8017e16:	bf00      	nop
 8017e18:	24003010 	.word	0x24003010

08017e1c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017e1c:	b480      	push	{r7}
 8017e1e:	b083      	sub	sp, #12
 8017e20:	af00      	add	r7, sp, #0
 8017e22:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8017e24:	bf00      	nop
 8017e26:	370c      	adds	r7, #12
 8017e28:	46bd      	mov	sp, r7
 8017e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e2e:	4770      	bx	lr

08017e30 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017e30:	b480      	push	{r7}
 8017e32:	b085      	sub	sp, #20
 8017e34:	af00      	add	r7, sp, #0
 8017e36:	4603      	mov	r3, r0
 8017e38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017e3a:	2300      	movs	r3, #0
 8017e3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017e3e:	79fb      	ldrb	r3, [r7, #7]
 8017e40:	2b03      	cmp	r3, #3
 8017e42:	d817      	bhi.n	8017e74 <USBD_Get_USB_Status+0x44>
 8017e44:	a201      	add	r2, pc, #4	; (adr r2, 8017e4c <USBD_Get_USB_Status+0x1c>)
 8017e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017e4a:	bf00      	nop
 8017e4c:	08017e5d 	.word	0x08017e5d
 8017e50:	08017e63 	.word	0x08017e63
 8017e54:	08017e69 	.word	0x08017e69
 8017e58:	08017e6f 	.word	0x08017e6f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017e5c:	2300      	movs	r3, #0
 8017e5e:	73fb      	strb	r3, [r7, #15]
    break;
 8017e60:	e00b      	b.n	8017e7a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017e62:	2303      	movs	r3, #3
 8017e64:	73fb      	strb	r3, [r7, #15]
    break;
 8017e66:	e008      	b.n	8017e7a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017e68:	2301      	movs	r3, #1
 8017e6a:	73fb      	strb	r3, [r7, #15]
    break;
 8017e6c:	e005      	b.n	8017e7a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017e6e:	2303      	movs	r3, #3
 8017e70:	73fb      	strb	r3, [r7, #15]
    break;
 8017e72:	e002      	b.n	8017e7a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017e74:	2303      	movs	r3, #3
 8017e76:	73fb      	strb	r3, [r7, #15]
    break;
 8017e78:	bf00      	nop
  }
  return usb_status;
 8017e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8017e7c:	4618      	mov	r0, r3
 8017e7e:	3714      	adds	r7, #20
 8017e80:	46bd      	mov	sp, r7
 8017e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e86:	4770      	bx	lr

08017e88 <__cvt>:
 8017e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017e8a:	ed2d 8b02 	vpush	{d8}
 8017e8e:	eeb0 8b40 	vmov.f64	d8, d0
 8017e92:	b085      	sub	sp, #20
 8017e94:	4617      	mov	r7, r2
 8017e96:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8017e98:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8017e9a:	ee18 2a90 	vmov	r2, s17
 8017e9e:	f025 0520 	bic.w	r5, r5, #32
 8017ea2:	2a00      	cmp	r2, #0
 8017ea4:	bfb6      	itet	lt
 8017ea6:	222d      	movlt	r2, #45	; 0x2d
 8017ea8:	2200      	movge	r2, #0
 8017eaa:	eeb1 8b40 	vneglt.f64	d8, d0
 8017eae:	2d46      	cmp	r5, #70	; 0x46
 8017eb0:	460c      	mov	r4, r1
 8017eb2:	701a      	strb	r2, [r3, #0]
 8017eb4:	d004      	beq.n	8017ec0 <__cvt+0x38>
 8017eb6:	2d45      	cmp	r5, #69	; 0x45
 8017eb8:	d100      	bne.n	8017ebc <__cvt+0x34>
 8017eba:	3401      	adds	r4, #1
 8017ebc:	2102      	movs	r1, #2
 8017ebe:	e000      	b.n	8017ec2 <__cvt+0x3a>
 8017ec0:	2103      	movs	r1, #3
 8017ec2:	ab03      	add	r3, sp, #12
 8017ec4:	9301      	str	r3, [sp, #4]
 8017ec6:	ab02      	add	r3, sp, #8
 8017ec8:	9300      	str	r3, [sp, #0]
 8017eca:	4622      	mov	r2, r4
 8017ecc:	4633      	mov	r3, r6
 8017ece:	eeb0 0b48 	vmov.f64	d0, d8
 8017ed2:	f001 f859 	bl	8018f88 <_dtoa_r>
 8017ed6:	2d47      	cmp	r5, #71	; 0x47
 8017ed8:	d101      	bne.n	8017ede <__cvt+0x56>
 8017eda:	07fb      	lsls	r3, r7, #31
 8017edc:	d51a      	bpl.n	8017f14 <__cvt+0x8c>
 8017ede:	2d46      	cmp	r5, #70	; 0x46
 8017ee0:	eb00 0204 	add.w	r2, r0, r4
 8017ee4:	d10c      	bne.n	8017f00 <__cvt+0x78>
 8017ee6:	7803      	ldrb	r3, [r0, #0]
 8017ee8:	2b30      	cmp	r3, #48	; 0x30
 8017eea:	d107      	bne.n	8017efc <__cvt+0x74>
 8017eec:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8017ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ef4:	bf1c      	itt	ne
 8017ef6:	f1c4 0401 	rsbne	r4, r4, #1
 8017efa:	6034      	strne	r4, [r6, #0]
 8017efc:	6833      	ldr	r3, [r6, #0]
 8017efe:	441a      	add	r2, r3
 8017f00:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8017f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f08:	bf08      	it	eq
 8017f0a:	9203      	streq	r2, [sp, #12]
 8017f0c:	2130      	movs	r1, #48	; 0x30
 8017f0e:	9b03      	ldr	r3, [sp, #12]
 8017f10:	4293      	cmp	r3, r2
 8017f12:	d307      	bcc.n	8017f24 <__cvt+0x9c>
 8017f14:	9b03      	ldr	r3, [sp, #12]
 8017f16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017f18:	1a1b      	subs	r3, r3, r0
 8017f1a:	6013      	str	r3, [r2, #0]
 8017f1c:	b005      	add	sp, #20
 8017f1e:	ecbd 8b02 	vpop	{d8}
 8017f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017f24:	1c5c      	adds	r4, r3, #1
 8017f26:	9403      	str	r4, [sp, #12]
 8017f28:	7019      	strb	r1, [r3, #0]
 8017f2a:	e7f0      	b.n	8017f0e <__cvt+0x86>

08017f2c <__exponent>:
 8017f2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017f2e:	4603      	mov	r3, r0
 8017f30:	2900      	cmp	r1, #0
 8017f32:	bfb8      	it	lt
 8017f34:	4249      	neglt	r1, r1
 8017f36:	f803 2b02 	strb.w	r2, [r3], #2
 8017f3a:	bfb4      	ite	lt
 8017f3c:	222d      	movlt	r2, #45	; 0x2d
 8017f3e:	222b      	movge	r2, #43	; 0x2b
 8017f40:	2909      	cmp	r1, #9
 8017f42:	7042      	strb	r2, [r0, #1]
 8017f44:	dd2a      	ble.n	8017f9c <__exponent+0x70>
 8017f46:	f10d 0207 	add.w	r2, sp, #7
 8017f4a:	4617      	mov	r7, r2
 8017f4c:	260a      	movs	r6, #10
 8017f4e:	4694      	mov	ip, r2
 8017f50:	fb91 f5f6 	sdiv	r5, r1, r6
 8017f54:	fb06 1415 	mls	r4, r6, r5, r1
 8017f58:	3430      	adds	r4, #48	; 0x30
 8017f5a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8017f5e:	460c      	mov	r4, r1
 8017f60:	2c63      	cmp	r4, #99	; 0x63
 8017f62:	f102 32ff 	add.w	r2, r2, #4294967295
 8017f66:	4629      	mov	r1, r5
 8017f68:	dcf1      	bgt.n	8017f4e <__exponent+0x22>
 8017f6a:	3130      	adds	r1, #48	; 0x30
 8017f6c:	f1ac 0402 	sub.w	r4, ip, #2
 8017f70:	f802 1c01 	strb.w	r1, [r2, #-1]
 8017f74:	1c41      	adds	r1, r0, #1
 8017f76:	4622      	mov	r2, r4
 8017f78:	42ba      	cmp	r2, r7
 8017f7a:	d30a      	bcc.n	8017f92 <__exponent+0x66>
 8017f7c:	f10d 0209 	add.w	r2, sp, #9
 8017f80:	eba2 020c 	sub.w	r2, r2, ip
 8017f84:	42bc      	cmp	r4, r7
 8017f86:	bf88      	it	hi
 8017f88:	2200      	movhi	r2, #0
 8017f8a:	4413      	add	r3, r2
 8017f8c:	1a18      	subs	r0, r3, r0
 8017f8e:	b003      	add	sp, #12
 8017f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017f92:	f812 5b01 	ldrb.w	r5, [r2], #1
 8017f96:	f801 5f01 	strb.w	r5, [r1, #1]!
 8017f9a:	e7ed      	b.n	8017f78 <__exponent+0x4c>
 8017f9c:	2330      	movs	r3, #48	; 0x30
 8017f9e:	3130      	adds	r1, #48	; 0x30
 8017fa0:	7083      	strb	r3, [r0, #2]
 8017fa2:	70c1      	strb	r1, [r0, #3]
 8017fa4:	1d03      	adds	r3, r0, #4
 8017fa6:	e7f1      	b.n	8017f8c <__exponent+0x60>

08017fa8 <_printf_float>:
 8017fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fac:	b08b      	sub	sp, #44	; 0x2c
 8017fae:	460c      	mov	r4, r1
 8017fb0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8017fb4:	4616      	mov	r6, r2
 8017fb6:	461f      	mov	r7, r3
 8017fb8:	4605      	mov	r5, r0
 8017fba:	f000 fed1 	bl	8018d60 <_localeconv_r>
 8017fbe:	f8d0 b000 	ldr.w	fp, [r0]
 8017fc2:	4658      	mov	r0, fp
 8017fc4:	f7e8 fa04 	bl	80003d0 <strlen>
 8017fc8:	2300      	movs	r3, #0
 8017fca:	9308      	str	r3, [sp, #32]
 8017fcc:	f8d8 3000 	ldr.w	r3, [r8]
 8017fd0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8017fd4:	6822      	ldr	r2, [r4, #0]
 8017fd6:	3307      	adds	r3, #7
 8017fd8:	f023 0307 	bic.w	r3, r3, #7
 8017fdc:	f103 0108 	add.w	r1, r3, #8
 8017fe0:	f8c8 1000 	str.w	r1, [r8]
 8017fe4:	ed93 0b00 	vldr	d0, [r3]
 8017fe8:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8018248 <_printf_float+0x2a0>
 8017fec:	eeb0 7bc0 	vabs.f64	d7, d0
 8017ff0:	eeb4 7b46 	vcmp.f64	d7, d6
 8017ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ff8:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8017ffc:	4682      	mov	sl, r0
 8017ffe:	dd24      	ble.n	801804a <_printf_float+0xa2>
 8018000:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8018004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018008:	d502      	bpl.n	8018010 <_printf_float+0x68>
 801800a:	232d      	movs	r3, #45	; 0x2d
 801800c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018010:	498f      	ldr	r1, [pc, #572]	; (8018250 <_printf_float+0x2a8>)
 8018012:	4b90      	ldr	r3, [pc, #576]	; (8018254 <_printf_float+0x2ac>)
 8018014:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8018018:	bf94      	ite	ls
 801801a:	4688      	movls	r8, r1
 801801c:	4698      	movhi	r8, r3
 801801e:	2303      	movs	r3, #3
 8018020:	6123      	str	r3, [r4, #16]
 8018022:	f022 0204 	bic.w	r2, r2, #4
 8018026:	2300      	movs	r3, #0
 8018028:	6022      	str	r2, [r4, #0]
 801802a:	9304      	str	r3, [sp, #16]
 801802c:	9700      	str	r7, [sp, #0]
 801802e:	4633      	mov	r3, r6
 8018030:	aa09      	add	r2, sp, #36	; 0x24
 8018032:	4621      	mov	r1, r4
 8018034:	4628      	mov	r0, r5
 8018036:	f000 f9d1 	bl	80183dc <_printf_common>
 801803a:	3001      	adds	r0, #1
 801803c:	f040 808a 	bne.w	8018154 <_printf_float+0x1ac>
 8018040:	f04f 30ff 	mov.w	r0, #4294967295
 8018044:	b00b      	add	sp, #44	; 0x2c
 8018046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801804a:	eeb4 0b40 	vcmp.f64	d0, d0
 801804e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018052:	d709      	bvc.n	8018068 <_printf_float+0xc0>
 8018054:	ee10 3a90 	vmov	r3, s1
 8018058:	2b00      	cmp	r3, #0
 801805a:	bfbc      	itt	lt
 801805c:	232d      	movlt	r3, #45	; 0x2d
 801805e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8018062:	497d      	ldr	r1, [pc, #500]	; (8018258 <_printf_float+0x2b0>)
 8018064:	4b7d      	ldr	r3, [pc, #500]	; (801825c <_printf_float+0x2b4>)
 8018066:	e7d5      	b.n	8018014 <_printf_float+0x6c>
 8018068:	6863      	ldr	r3, [r4, #4]
 801806a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801806e:	9104      	str	r1, [sp, #16]
 8018070:	1c59      	adds	r1, r3, #1
 8018072:	d13c      	bne.n	80180ee <_printf_float+0x146>
 8018074:	2306      	movs	r3, #6
 8018076:	6063      	str	r3, [r4, #4]
 8018078:	2300      	movs	r3, #0
 801807a:	9303      	str	r3, [sp, #12]
 801807c:	ab08      	add	r3, sp, #32
 801807e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8018082:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018086:	ab07      	add	r3, sp, #28
 8018088:	6861      	ldr	r1, [r4, #4]
 801808a:	9300      	str	r3, [sp, #0]
 801808c:	6022      	str	r2, [r4, #0]
 801808e:	f10d 031b 	add.w	r3, sp, #27
 8018092:	4628      	mov	r0, r5
 8018094:	f7ff fef8 	bl	8017e88 <__cvt>
 8018098:	9b04      	ldr	r3, [sp, #16]
 801809a:	9907      	ldr	r1, [sp, #28]
 801809c:	2b47      	cmp	r3, #71	; 0x47
 801809e:	4680      	mov	r8, r0
 80180a0:	d108      	bne.n	80180b4 <_printf_float+0x10c>
 80180a2:	1cc8      	adds	r0, r1, #3
 80180a4:	db02      	blt.n	80180ac <_printf_float+0x104>
 80180a6:	6863      	ldr	r3, [r4, #4]
 80180a8:	4299      	cmp	r1, r3
 80180aa:	dd41      	ble.n	8018130 <_printf_float+0x188>
 80180ac:	f1a9 0902 	sub.w	r9, r9, #2
 80180b0:	fa5f f989 	uxtb.w	r9, r9
 80180b4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80180b8:	d820      	bhi.n	80180fc <_printf_float+0x154>
 80180ba:	3901      	subs	r1, #1
 80180bc:	464a      	mov	r2, r9
 80180be:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80180c2:	9107      	str	r1, [sp, #28]
 80180c4:	f7ff ff32 	bl	8017f2c <__exponent>
 80180c8:	9a08      	ldr	r2, [sp, #32]
 80180ca:	9004      	str	r0, [sp, #16]
 80180cc:	1813      	adds	r3, r2, r0
 80180ce:	2a01      	cmp	r2, #1
 80180d0:	6123      	str	r3, [r4, #16]
 80180d2:	dc02      	bgt.n	80180da <_printf_float+0x132>
 80180d4:	6822      	ldr	r2, [r4, #0]
 80180d6:	07d2      	lsls	r2, r2, #31
 80180d8:	d501      	bpl.n	80180de <_printf_float+0x136>
 80180da:	3301      	adds	r3, #1
 80180dc:	6123      	str	r3, [r4, #16]
 80180de:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	d0a2      	beq.n	801802c <_printf_float+0x84>
 80180e6:	232d      	movs	r3, #45	; 0x2d
 80180e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80180ec:	e79e      	b.n	801802c <_printf_float+0x84>
 80180ee:	9904      	ldr	r1, [sp, #16]
 80180f0:	2947      	cmp	r1, #71	; 0x47
 80180f2:	d1c1      	bne.n	8018078 <_printf_float+0xd0>
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	d1bf      	bne.n	8018078 <_printf_float+0xd0>
 80180f8:	2301      	movs	r3, #1
 80180fa:	e7bc      	b.n	8018076 <_printf_float+0xce>
 80180fc:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8018100:	d118      	bne.n	8018134 <_printf_float+0x18c>
 8018102:	2900      	cmp	r1, #0
 8018104:	6863      	ldr	r3, [r4, #4]
 8018106:	dd0b      	ble.n	8018120 <_printf_float+0x178>
 8018108:	6121      	str	r1, [r4, #16]
 801810a:	b913      	cbnz	r3, 8018112 <_printf_float+0x16a>
 801810c:	6822      	ldr	r2, [r4, #0]
 801810e:	07d0      	lsls	r0, r2, #31
 8018110:	d502      	bpl.n	8018118 <_printf_float+0x170>
 8018112:	3301      	adds	r3, #1
 8018114:	440b      	add	r3, r1
 8018116:	6123      	str	r3, [r4, #16]
 8018118:	2300      	movs	r3, #0
 801811a:	65a1      	str	r1, [r4, #88]	; 0x58
 801811c:	9304      	str	r3, [sp, #16]
 801811e:	e7de      	b.n	80180de <_printf_float+0x136>
 8018120:	b913      	cbnz	r3, 8018128 <_printf_float+0x180>
 8018122:	6822      	ldr	r2, [r4, #0]
 8018124:	07d2      	lsls	r2, r2, #31
 8018126:	d501      	bpl.n	801812c <_printf_float+0x184>
 8018128:	3302      	adds	r3, #2
 801812a:	e7f4      	b.n	8018116 <_printf_float+0x16e>
 801812c:	2301      	movs	r3, #1
 801812e:	e7f2      	b.n	8018116 <_printf_float+0x16e>
 8018130:	f04f 0967 	mov.w	r9, #103	; 0x67
 8018134:	9b08      	ldr	r3, [sp, #32]
 8018136:	4299      	cmp	r1, r3
 8018138:	db05      	blt.n	8018146 <_printf_float+0x19e>
 801813a:	6823      	ldr	r3, [r4, #0]
 801813c:	6121      	str	r1, [r4, #16]
 801813e:	07d8      	lsls	r0, r3, #31
 8018140:	d5ea      	bpl.n	8018118 <_printf_float+0x170>
 8018142:	1c4b      	adds	r3, r1, #1
 8018144:	e7e7      	b.n	8018116 <_printf_float+0x16e>
 8018146:	2900      	cmp	r1, #0
 8018148:	bfd4      	ite	le
 801814a:	f1c1 0202 	rsble	r2, r1, #2
 801814e:	2201      	movgt	r2, #1
 8018150:	4413      	add	r3, r2
 8018152:	e7e0      	b.n	8018116 <_printf_float+0x16e>
 8018154:	6823      	ldr	r3, [r4, #0]
 8018156:	055a      	lsls	r2, r3, #21
 8018158:	d407      	bmi.n	801816a <_printf_float+0x1c2>
 801815a:	6923      	ldr	r3, [r4, #16]
 801815c:	4642      	mov	r2, r8
 801815e:	4631      	mov	r1, r6
 8018160:	4628      	mov	r0, r5
 8018162:	47b8      	blx	r7
 8018164:	3001      	adds	r0, #1
 8018166:	d12a      	bne.n	80181be <_printf_float+0x216>
 8018168:	e76a      	b.n	8018040 <_printf_float+0x98>
 801816a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801816e:	f240 80e0 	bls.w	8018332 <_printf_float+0x38a>
 8018172:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8018176:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801817a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801817e:	d133      	bne.n	80181e8 <_printf_float+0x240>
 8018180:	4a37      	ldr	r2, [pc, #220]	; (8018260 <_printf_float+0x2b8>)
 8018182:	2301      	movs	r3, #1
 8018184:	4631      	mov	r1, r6
 8018186:	4628      	mov	r0, r5
 8018188:	47b8      	blx	r7
 801818a:	3001      	adds	r0, #1
 801818c:	f43f af58 	beq.w	8018040 <_printf_float+0x98>
 8018190:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8018194:	429a      	cmp	r2, r3
 8018196:	db02      	blt.n	801819e <_printf_float+0x1f6>
 8018198:	6823      	ldr	r3, [r4, #0]
 801819a:	07d8      	lsls	r0, r3, #31
 801819c:	d50f      	bpl.n	80181be <_printf_float+0x216>
 801819e:	4653      	mov	r3, sl
 80181a0:	465a      	mov	r2, fp
 80181a2:	4631      	mov	r1, r6
 80181a4:	4628      	mov	r0, r5
 80181a6:	47b8      	blx	r7
 80181a8:	3001      	adds	r0, #1
 80181aa:	f43f af49 	beq.w	8018040 <_printf_float+0x98>
 80181ae:	f04f 0800 	mov.w	r8, #0
 80181b2:	f104 091a 	add.w	r9, r4, #26
 80181b6:	9b08      	ldr	r3, [sp, #32]
 80181b8:	3b01      	subs	r3, #1
 80181ba:	4543      	cmp	r3, r8
 80181bc:	dc09      	bgt.n	80181d2 <_printf_float+0x22a>
 80181be:	6823      	ldr	r3, [r4, #0]
 80181c0:	079b      	lsls	r3, r3, #30
 80181c2:	f100 8106 	bmi.w	80183d2 <_printf_float+0x42a>
 80181c6:	68e0      	ldr	r0, [r4, #12]
 80181c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80181ca:	4298      	cmp	r0, r3
 80181cc:	bfb8      	it	lt
 80181ce:	4618      	movlt	r0, r3
 80181d0:	e738      	b.n	8018044 <_printf_float+0x9c>
 80181d2:	2301      	movs	r3, #1
 80181d4:	464a      	mov	r2, r9
 80181d6:	4631      	mov	r1, r6
 80181d8:	4628      	mov	r0, r5
 80181da:	47b8      	blx	r7
 80181dc:	3001      	adds	r0, #1
 80181de:	f43f af2f 	beq.w	8018040 <_printf_float+0x98>
 80181e2:	f108 0801 	add.w	r8, r8, #1
 80181e6:	e7e6      	b.n	80181b6 <_printf_float+0x20e>
 80181e8:	9b07      	ldr	r3, [sp, #28]
 80181ea:	2b00      	cmp	r3, #0
 80181ec:	dc3a      	bgt.n	8018264 <_printf_float+0x2bc>
 80181ee:	4a1c      	ldr	r2, [pc, #112]	; (8018260 <_printf_float+0x2b8>)
 80181f0:	2301      	movs	r3, #1
 80181f2:	4631      	mov	r1, r6
 80181f4:	4628      	mov	r0, r5
 80181f6:	47b8      	blx	r7
 80181f8:	3001      	adds	r0, #1
 80181fa:	f43f af21 	beq.w	8018040 <_printf_float+0x98>
 80181fe:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8018202:	4313      	orrs	r3, r2
 8018204:	d102      	bne.n	801820c <_printf_float+0x264>
 8018206:	6823      	ldr	r3, [r4, #0]
 8018208:	07d9      	lsls	r1, r3, #31
 801820a:	d5d8      	bpl.n	80181be <_printf_float+0x216>
 801820c:	4653      	mov	r3, sl
 801820e:	465a      	mov	r2, fp
 8018210:	4631      	mov	r1, r6
 8018212:	4628      	mov	r0, r5
 8018214:	47b8      	blx	r7
 8018216:	3001      	adds	r0, #1
 8018218:	f43f af12 	beq.w	8018040 <_printf_float+0x98>
 801821c:	f04f 0900 	mov.w	r9, #0
 8018220:	f104 0a1a 	add.w	sl, r4, #26
 8018224:	9b07      	ldr	r3, [sp, #28]
 8018226:	425b      	negs	r3, r3
 8018228:	454b      	cmp	r3, r9
 801822a:	dc01      	bgt.n	8018230 <_printf_float+0x288>
 801822c:	9b08      	ldr	r3, [sp, #32]
 801822e:	e795      	b.n	801815c <_printf_float+0x1b4>
 8018230:	2301      	movs	r3, #1
 8018232:	4652      	mov	r2, sl
 8018234:	4631      	mov	r1, r6
 8018236:	4628      	mov	r0, r5
 8018238:	47b8      	blx	r7
 801823a:	3001      	adds	r0, #1
 801823c:	f43f af00 	beq.w	8018040 <_printf_float+0x98>
 8018240:	f109 0901 	add.w	r9, r9, #1
 8018244:	e7ee      	b.n	8018224 <_printf_float+0x27c>
 8018246:	bf00      	nop
 8018248:	ffffffff 	.word	0xffffffff
 801824c:	7fefffff 	.word	0x7fefffff
 8018250:	0801c858 	.word	0x0801c858
 8018254:	0801c85c 	.word	0x0801c85c
 8018258:	0801c860 	.word	0x0801c860
 801825c:	0801c864 	.word	0x0801c864
 8018260:	0801c868 	.word	0x0801c868
 8018264:	9a08      	ldr	r2, [sp, #32]
 8018266:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8018268:	429a      	cmp	r2, r3
 801826a:	bfa8      	it	ge
 801826c:	461a      	movge	r2, r3
 801826e:	2a00      	cmp	r2, #0
 8018270:	4691      	mov	r9, r2
 8018272:	dc38      	bgt.n	80182e6 <_printf_float+0x33e>
 8018274:	2300      	movs	r3, #0
 8018276:	9305      	str	r3, [sp, #20]
 8018278:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801827c:	f104 021a 	add.w	r2, r4, #26
 8018280:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8018282:	9905      	ldr	r1, [sp, #20]
 8018284:	9304      	str	r3, [sp, #16]
 8018286:	eba3 0309 	sub.w	r3, r3, r9
 801828a:	428b      	cmp	r3, r1
 801828c:	dc33      	bgt.n	80182f6 <_printf_float+0x34e>
 801828e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8018292:	429a      	cmp	r2, r3
 8018294:	db3c      	blt.n	8018310 <_printf_float+0x368>
 8018296:	6823      	ldr	r3, [r4, #0]
 8018298:	07da      	lsls	r2, r3, #31
 801829a:	d439      	bmi.n	8018310 <_printf_float+0x368>
 801829c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80182a0:	eba2 0903 	sub.w	r9, r2, r3
 80182a4:	9b04      	ldr	r3, [sp, #16]
 80182a6:	1ad2      	subs	r2, r2, r3
 80182a8:	4591      	cmp	r9, r2
 80182aa:	bfa8      	it	ge
 80182ac:	4691      	movge	r9, r2
 80182ae:	f1b9 0f00 	cmp.w	r9, #0
 80182b2:	dc35      	bgt.n	8018320 <_printf_float+0x378>
 80182b4:	f04f 0800 	mov.w	r8, #0
 80182b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80182bc:	f104 0a1a 	add.w	sl, r4, #26
 80182c0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80182c4:	1a9b      	subs	r3, r3, r2
 80182c6:	eba3 0309 	sub.w	r3, r3, r9
 80182ca:	4543      	cmp	r3, r8
 80182cc:	f77f af77 	ble.w	80181be <_printf_float+0x216>
 80182d0:	2301      	movs	r3, #1
 80182d2:	4652      	mov	r2, sl
 80182d4:	4631      	mov	r1, r6
 80182d6:	4628      	mov	r0, r5
 80182d8:	47b8      	blx	r7
 80182da:	3001      	adds	r0, #1
 80182dc:	f43f aeb0 	beq.w	8018040 <_printf_float+0x98>
 80182e0:	f108 0801 	add.w	r8, r8, #1
 80182e4:	e7ec      	b.n	80182c0 <_printf_float+0x318>
 80182e6:	4613      	mov	r3, r2
 80182e8:	4631      	mov	r1, r6
 80182ea:	4642      	mov	r2, r8
 80182ec:	4628      	mov	r0, r5
 80182ee:	47b8      	blx	r7
 80182f0:	3001      	adds	r0, #1
 80182f2:	d1bf      	bne.n	8018274 <_printf_float+0x2cc>
 80182f4:	e6a4      	b.n	8018040 <_printf_float+0x98>
 80182f6:	2301      	movs	r3, #1
 80182f8:	4631      	mov	r1, r6
 80182fa:	4628      	mov	r0, r5
 80182fc:	9204      	str	r2, [sp, #16]
 80182fe:	47b8      	blx	r7
 8018300:	3001      	adds	r0, #1
 8018302:	f43f ae9d 	beq.w	8018040 <_printf_float+0x98>
 8018306:	9b05      	ldr	r3, [sp, #20]
 8018308:	9a04      	ldr	r2, [sp, #16]
 801830a:	3301      	adds	r3, #1
 801830c:	9305      	str	r3, [sp, #20]
 801830e:	e7b7      	b.n	8018280 <_printf_float+0x2d8>
 8018310:	4653      	mov	r3, sl
 8018312:	465a      	mov	r2, fp
 8018314:	4631      	mov	r1, r6
 8018316:	4628      	mov	r0, r5
 8018318:	47b8      	blx	r7
 801831a:	3001      	adds	r0, #1
 801831c:	d1be      	bne.n	801829c <_printf_float+0x2f4>
 801831e:	e68f      	b.n	8018040 <_printf_float+0x98>
 8018320:	9a04      	ldr	r2, [sp, #16]
 8018322:	464b      	mov	r3, r9
 8018324:	4442      	add	r2, r8
 8018326:	4631      	mov	r1, r6
 8018328:	4628      	mov	r0, r5
 801832a:	47b8      	blx	r7
 801832c:	3001      	adds	r0, #1
 801832e:	d1c1      	bne.n	80182b4 <_printf_float+0x30c>
 8018330:	e686      	b.n	8018040 <_printf_float+0x98>
 8018332:	9a08      	ldr	r2, [sp, #32]
 8018334:	2a01      	cmp	r2, #1
 8018336:	dc01      	bgt.n	801833c <_printf_float+0x394>
 8018338:	07db      	lsls	r3, r3, #31
 801833a:	d537      	bpl.n	80183ac <_printf_float+0x404>
 801833c:	2301      	movs	r3, #1
 801833e:	4642      	mov	r2, r8
 8018340:	4631      	mov	r1, r6
 8018342:	4628      	mov	r0, r5
 8018344:	47b8      	blx	r7
 8018346:	3001      	adds	r0, #1
 8018348:	f43f ae7a 	beq.w	8018040 <_printf_float+0x98>
 801834c:	4653      	mov	r3, sl
 801834e:	465a      	mov	r2, fp
 8018350:	4631      	mov	r1, r6
 8018352:	4628      	mov	r0, r5
 8018354:	47b8      	blx	r7
 8018356:	3001      	adds	r0, #1
 8018358:	f43f ae72 	beq.w	8018040 <_printf_float+0x98>
 801835c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8018360:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018368:	9b08      	ldr	r3, [sp, #32]
 801836a:	d01a      	beq.n	80183a2 <_printf_float+0x3fa>
 801836c:	3b01      	subs	r3, #1
 801836e:	f108 0201 	add.w	r2, r8, #1
 8018372:	4631      	mov	r1, r6
 8018374:	4628      	mov	r0, r5
 8018376:	47b8      	blx	r7
 8018378:	3001      	adds	r0, #1
 801837a:	d10e      	bne.n	801839a <_printf_float+0x3f2>
 801837c:	e660      	b.n	8018040 <_printf_float+0x98>
 801837e:	2301      	movs	r3, #1
 8018380:	464a      	mov	r2, r9
 8018382:	4631      	mov	r1, r6
 8018384:	4628      	mov	r0, r5
 8018386:	47b8      	blx	r7
 8018388:	3001      	adds	r0, #1
 801838a:	f43f ae59 	beq.w	8018040 <_printf_float+0x98>
 801838e:	f108 0801 	add.w	r8, r8, #1
 8018392:	9b08      	ldr	r3, [sp, #32]
 8018394:	3b01      	subs	r3, #1
 8018396:	4543      	cmp	r3, r8
 8018398:	dcf1      	bgt.n	801837e <_printf_float+0x3d6>
 801839a:	9b04      	ldr	r3, [sp, #16]
 801839c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80183a0:	e6dd      	b.n	801815e <_printf_float+0x1b6>
 80183a2:	f04f 0800 	mov.w	r8, #0
 80183a6:	f104 091a 	add.w	r9, r4, #26
 80183aa:	e7f2      	b.n	8018392 <_printf_float+0x3ea>
 80183ac:	2301      	movs	r3, #1
 80183ae:	4642      	mov	r2, r8
 80183b0:	e7df      	b.n	8018372 <_printf_float+0x3ca>
 80183b2:	2301      	movs	r3, #1
 80183b4:	464a      	mov	r2, r9
 80183b6:	4631      	mov	r1, r6
 80183b8:	4628      	mov	r0, r5
 80183ba:	47b8      	blx	r7
 80183bc:	3001      	adds	r0, #1
 80183be:	f43f ae3f 	beq.w	8018040 <_printf_float+0x98>
 80183c2:	f108 0801 	add.w	r8, r8, #1
 80183c6:	68e3      	ldr	r3, [r4, #12]
 80183c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80183ca:	1a5b      	subs	r3, r3, r1
 80183cc:	4543      	cmp	r3, r8
 80183ce:	dcf0      	bgt.n	80183b2 <_printf_float+0x40a>
 80183d0:	e6f9      	b.n	80181c6 <_printf_float+0x21e>
 80183d2:	f04f 0800 	mov.w	r8, #0
 80183d6:	f104 0919 	add.w	r9, r4, #25
 80183da:	e7f4      	b.n	80183c6 <_printf_float+0x41e>

080183dc <_printf_common>:
 80183dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80183e0:	4616      	mov	r6, r2
 80183e2:	4699      	mov	r9, r3
 80183e4:	688a      	ldr	r2, [r1, #8]
 80183e6:	690b      	ldr	r3, [r1, #16]
 80183e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80183ec:	4293      	cmp	r3, r2
 80183ee:	bfb8      	it	lt
 80183f0:	4613      	movlt	r3, r2
 80183f2:	6033      	str	r3, [r6, #0]
 80183f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80183f8:	4607      	mov	r7, r0
 80183fa:	460c      	mov	r4, r1
 80183fc:	b10a      	cbz	r2, 8018402 <_printf_common+0x26>
 80183fe:	3301      	adds	r3, #1
 8018400:	6033      	str	r3, [r6, #0]
 8018402:	6823      	ldr	r3, [r4, #0]
 8018404:	0699      	lsls	r1, r3, #26
 8018406:	bf42      	ittt	mi
 8018408:	6833      	ldrmi	r3, [r6, #0]
 801840a:	3302      	addmi	r3, #2
 801840c:	6033      	strmi	r3, [r6, #0]
 801840e:	6825      	ldr	r5, [r4, #0]
 8018410:	f015 0506 	ands.w	r5, r5, #6
 8018414:	d106      	bne.n	8018424 <_printf_common+0x48>
 8018416:	f104 0a19 	add.w	sl, r4, #25
 801841a:	68e3      	ldr	r3, [r4, #12]
 801841c:	6832      	ldr	r2, [r6, #0]
 801841e:	1a9b      	subs	r3, r3, r2
 8018420:	42ab      	cmp	r3, r5
 8018422:	dc26      	bgt.n	8018472 <_printf_common+0x96>
 8018424:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018428:	1e13      	subs	r3, r2, #0
 801842a:	6822      	ldr	r2, [r4, #0]
 801842c:	bf18      	it	ne
 801842e:	2301      	movne	r3, #1
 8018430:	0692      	lsls	r2, r2, #26
 8018432:	d42b      	bmi.n	801848c <_printf_common+0xb0>
 8018434:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018438:	4649      	mov	r1, r9
 801843a:	4638      	mov	r0, r7
 801843c:	47c0      	blx	r8
 801843e:	3001      	adds	r0, #1
 8018440:	d01e      	beq.n	8018480 <_printf_common+0xa4>
 8018442:	6823      	ldr	r3, [r4, #0]
 8018444:	6922      	ldr	r2, [r4, #16]
 8018446:	f003 0306 	and.w	r3, r3, #6
 801844a:	2b04      	cmp	r3, #4
 801844c:	bf02      	ittt	eq
 801844e:	68e5      	ldreq	r5, [r4, #12]
 8018450:	6833      	ldreq	r3, [r6, #0]
 8018452:	1aed      	subeq	r5, r5, r3
 8018454:	68a3      	ldr	r3, [r4, #8]
 8018456:	bf0c      	ite	eq
 8018458:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801845c:	2500      	movne	r5, #0
 801845e:	4293      	cmp	r3, r2
 8018460:	bfc4      	itt	gt
 8018462:	1a9b      	subgt	r3, r3, r2
 8018464:	18ed      	addgt	r5, r5, r3
 8018466:	2600      	movs	r6, #0
 8018468:	341a      	adds	r4, #26
 801846a:	42b5      	cmp	r5, r6
 801846c:	d11a      	bne.n	80184a4 <_printf_common+0xc8>
 801846e:	2000      	movs	r0, #0
 8018470:	e008      	b.n	8018484 <_printf_common+0xa8>
 8018472:	2301      	movs	r3, #1
 8018474:	4652      	mov	r2, sl
 8018476:	4649      	mov	r1, r9
 8018478:	4638      	mov	r0, r7
 801847a:	47c0      	blx	r8
 801847c:	3001      	adds	r0, #1
 801847e:	d103      	bne.n	8018488 <_printf_common+0xac>
 8018480:	f04f 30ff 	mov.w	r0, #4294967295
 8018484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018488:	3501      	adds	r5, #1
 801848a:	e7c6      	b.n	801841a <_printf_common+0x3e>
 801848c:	18e1      	adds	r1, r4, r3
 801848e:	1c5a      	adds	r2, r3, #1
 8018490:	2030      	movs	r0, #48	; 0x30
 8018492:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018496:	4422      	add	r2, r4
 8018498:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801849c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80184a0:	3302      	adds	r3, #2
 80184a2:	e7c7      	b.n	8018434 <_printf_common+0x58>
 80184a4:	2301      	movs	r3, #1
 80184a6:	4622      	mov	r2, r4
 80184a8:	4649      	mov	r1, r9
 80184aa:	4638      	mov	r0, r7
 80184ac:	47c0      	blx	r8
 80184ae:	3001      	adds	r0, #1
 80184b0:	d0e6      	beq.n	8018480 <_printf_common+0xa4>
 80184b2:	3601      	adds	r6, #1
 80184b4:	e7d9      	b.n	801846a <_printf_common+0x8e>
	...

080184b8 <_printf_i>:
 80184b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80184bc:	7e0f      	ldrb	r7, [r1, #24]
 80184be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80184c0:	2f78      	cmp	r7, #120	; 0x78
 80184c2:	4691      	mov	r9, r2
 80184c4:	4680      	mov	r8, r0
 80184c6:	460c      	mov	r4, r1
 80184c8:	469a      	mov	sl, r3
 80184ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80184ce:	d807      	bhi.n	80184e0 <_printf_i+0x28>
 80184d0:	2f62      	cmp	r7, #98	; 0x62
 80184d2:	d80a      	bhi.n	80184ea <_printf_i+0x32>
 80184d4:	2f00      	cmp	r7, #0
 80184d6:	f000 80d4 	beq.w	8018682 <_printf_i+0x1ca>
 80184da:	2f58      	cmp	r7, #88	; 0x58
 80184dc:	f000 80c0 	beq.w	8018660 <_printf_i+0x1a8>
 80184e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80184e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80184e8:	e03a      	b.n	8018560 <_printf_i+0xa8>
 80184ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80184ee:	2b15      	cmp	r3, #21
 80184f0:	d8f6      	bhi.n	80184e0 <_printf_i+0x28>
 80184f2:	a101      	add	r1, pc, #4	; (adr r1, 80184f8 <_printf_i+0x40>)
 80184f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80184f8:	08018551 	.word	0x08018551
 80184fc:	08018565 	.word	0x08018565
 8018500:	080184e1 	.word	0x080184e1
 8018504:	080184e1 	.word	0x080184e1
 8018508:	080184e1 	.word	0x080184e1
 801850c:	080184e1 	.word	0x080184e1
 8018510:	08018565 	.word	0x08018565
 8018514:	080184e1 	.word	0x080184e1
 8018518:	080184e1 	.word	0x080184e1
 801851c:	080184e1 	.word	0x080184e1
 8018520:	080184e1 	.word	0x080184e1
 8018524:	08018669 	.word	0x08018669
 8018528:	08018591 	.word	0x08018591
 801852c:	08018623 	.word	0x08018623
 8018530:	080184e1 	.word	0x080184e1
 8018534:	080184e1 	.word	0x080184e1
 8018538:	0801868b 	.word	0x0801868b
 801853c:	080184e1 	.word	0x080184e1
 8018540:	08018591 	.word	0x08018591
 8018544:	080184e1 	.word	0x080184e1
 8018548:	080184e1 	.word	0x080184e1
 801854c:	0801862b 	.word	0x0801862b
 8018550:	682b      	ldr	r3, [r5, #0]
 8018552:	1d1a      	adds	r2, r3, #4
 8018554:	681b      	ldr	r3, [r3, #0]
 8018556:	602a      	str	r2, [r5, #0]
 8018558:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801855c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018560:	2301      	movs	r3, #1
 8018562:	e09f      	b.n	80186a4 <_printf_i+0x1ec>
 8018564:	6820      	ldr	r0, [r4, #0]
 8018566:	682b      	ldr	r3, [r5, #0]
 8018568:	0607      	lsls	r7, r0, #24
 801856a:	f103 0104 	add.w	r1, r3, #4
 801856e:	6029      	str	r1, [r5, #0]
 8018570:	d501      	bpl.n	8018576 <_printf_i+0xbe>
 8018572:	681e      	ldr	r6, [r3, #0]
 8018574:	e003      	b.n	801857e <_printf_i+0xc6>
 8018576:	0646      	lsls	r6, r0, #25
 8018578:	d5fb      	bpl.n	8018572 <_printf_i+0xba>
 801857a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801857e:	2e00      	cmp	r6, #0
 8018580:	da03      	bge.n	801858a <_printf_i+0xd2>
 8018582:	232d      	movs	r3, #45	; 0x2d
 8018584:	4276      	negs	r6, r6
 8018586:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801858a:	485a      	ldr	r0, [pc, #360]	; (80186f4 <_printf_i+0x23c>)
 801858c:	230a      	movs	r3, #10
 801858e:	e012      	b.n	80185b6 <_printf_i+0xfe>
 8018590:	682b      	ldr	r3, [r5, #0]
 8018592:	6820      	ldr	r0, [r4, #0]
 8018594:	1d19      	adds	r1, r3, #4
 8018596:	6029      	str	r1, [r5, #0]
 8018598:	0605      	lsls	r5, r0, #24
 801859a:	d501      	bpl.n	80185a0 <_printf_i+0xe8>
 801859c:	681e      	ldr	r6, [r3, #0]
 801859e:	e002      	b.n	80185a6 <_printf_i+0xee>
 80185a0:	0641      	lsls	r1, r0, #25
 80185a2:	d5fb      	bpl.n	801859c <_printf_i+0xe4>
 80185a4:	881e      	ldrh	r6, [r3, #0]
 80185a6:	4853      	ldr	r0, [pc, #332]	; (80186f4 <_printf_i+0x23c>)
 80185a8:	2f6f      	cmp	r7, #111	; 0x6f
 80185aa:	bf0c      	ite	eq
 80185ac:	2308      	moveq	r3, #8
 80185ae:	230a      	movne	r3, #10
 80185b0:	2100      	movs	r1, #0
 80185b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80185b6:	6865      	ldr	r5, [r4, #4]
 80185b8:	60a5      	str	r5, [r4, #8]
 80185ba:	2d00      	cmp	r5, #0
 80185bc:	bfa2      	ittt	ge
 80185be:	6821      	ldrge	r1, [r4, #0]
 80185c0:	f021 0104 	bicge.w	r1, r1, #4
 80185c4:	6021      	strge	r1, [r4, #0]
 80185c6:	b90e      	cbnz	r6, 80185cc <_printf_i+0x114>
 80185c8:	2d00      	cmp	r5, #0
 80185ca:	d04b      	beq.n	8018664 <_printf_i+0x1ac>
 80185cc:	4615      	mov	r5, r2
 80185ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80185d2:	fb03 6711 	mls	r7, r3, r1, r6
 80185d6:	5dc7      	ldrb	r7, [r0, r7]
 80185d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80185dc:	4637      	mov	r7, r6
 80185de:	42bb      	cmp	r3, r7
 80185e0:	460e      	mov	r6, r1
 80185e2:	d9f4      	bls.n	80185ce <_printf_i+0x116>
 80185e4:	2b08      	cmp	r3, #8
 80185e6:	d10b      	bne.n	8018600 <_printf_i+0x148>
 80185e8:	6823      	ldr	r3, [r4, #0]
 80185ea:	07de      	lsls	r6, r3, #31
 80185ec:	d508      	bpl.n	8018600 <_printf_i+0x148>
 80185ee:	6923      	ldr	r3, [r4, #16]
 80185f0:	6861      	ldr	r1, [r4, #4]
 80185f2:	4299      	cmp	r1, r3
 80185f4:	bfde      	ittt	le
 80185f6:	2330      	movle	r3, #48	; 0x30
 80185f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80185fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8018600:	1b52      	subs	r2, r2, r5
 8018602:	6122      	str	r2, [r4, #16]
 8018604:	f8cd a000 	str.w	sl, [sp]
 8018608:	464b      	mov	r3, r9
 801860a:	aa03      	add	r2, sp, #12
 801860c:	4621      	mov	r1, r4
 801860e:	4640      	mov	r0, r8
 8018610:	f7ff fee4 	bl	80183dc <_printf_common>
 8018614:	3001      	adds	r0, #1
 8018616:	d14a      	bne.n	80186ae <_printf_i+0x1f6>
 8018618:	f04f 30ff 	mov.w	r0, #4294967295
 801861c:	b004      	add	sp, #16
 801861e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018622:	6823      	ldr	r3, [r4, #0]
 8018624:	f043 0320 	orr.w	r3, r3, #32
 8018628:	6023      	str	r3, [r4, #0]
 801862a:	4833      	ldr	r0, [pc, #204]	; (80186f8 <_printf_i+0x240>)
 801862c:	2778      	movs	r7, #120	; 0x78
 801862e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8018632:	6823      	ldr	r3, [r4, #0]
 8018634:	6829      	ldr	r1, [r5, #0]
 8018636:	061f      	lsls	r7, r3, #24
 8018638:	f851 6b04 	ldr.w	r6, [r1], #4
 801863c:	d402      	bmi.n	8018644 <_printf_i+0x18c>
 801863e:	065f      	lsls	r7, r3, #25
 8018640:	bf48      	it	mi
 8018642:	b2b6      	uxthmi	r6, r6
 8018644:	07df      	lsls	r7, r3, #31
 8018646:	bf48      	it	mi
 8018648:	f043 0320 	orrmi.w	r3, r3, #32
 801864c:	6029      	str	r1, [r5, #0]
 801864e:	bf48      	it	mi
 8018650:	6023      	strmi	r3, [r4, #0]
 8018652:	b91e      	cbnz	r6, 801865c <_printf_i+0x1a4>
 8018654:	6823      	ldr	r3, [r4, #0]
 8018656:	f023 0320 	bic.w	r3, r3, #32
 801865a:	6023      	str	r3, [r4, #0]
 801865c:	2310      	movs	r3, #16
 801865e:	e7a7      	b.n	80185b0 <_printf_i+0xf8>
 8018660:	4824      	ldr	r0, [pc, #144]	; (80186f4 <_printf_i+0x23c>)
 8018662:	e7e4      	b.n	801862e <_printf_i+0x176>
 8018664:	4615      	mov	r5, r2
 8018666:	e7bd      	b.n	80185e4 <_printf_i+0x12c>
 8018668:	682b      	ldr	r3, [r5, #0]
 801866a:	6826      	ldr	r6, [r4, #0]
 801866c:	6961      	ldr	r1, [r4, #20]
 801866e:	1d18      	adds	r0, r3, #4
 8018670:	6028      	str	r0, [r5, #0]
 8018672:	0635      	lsls	r5, r6, #24
 8018674:	681b      	ldr	r3, [r3, #0]
 8018676:	d501      	bpl.n	801867c <_printf_i+0x1c4>
 8018678:	6019      	str	r1, [r3, #0]
 801867a:	e002      	b.n	8018682 <_printf_i+0x1ca>
 801867c:	0670      	lsls	r0, r6, #25
 801867e:	d5fb      	bpl.n	8018678 <_printf_i+0x1c0>
 8018680:	8019      	strh	r1, [r3, #0]
 8018682:	2300      	movs	r3, #0
 8018684:	6123      	str	r3, [r4, #16]
 8018686:	4615      	mov	r5, r2
 8018688:	e7bc      	b.n	8018604 <_printf_i+0x14c>
 801868a:	682b      	ldr	r3, [r5, #0]
 801868c:	1d1a      	adds	r2, r3, #4
 801868e:	602a      	str	r2, [r5, #0]
 8018690:	681d      	ldr	r5, [r3, #0]
 8018692:	6862      	ldr	r2, [r4, #4]
 8018694:	2100      	movs	r1, #0
 8018696:	4628      	mov	r0, r5
 8018698:	f7e7 fe4a 	bl	8000330 <memchr>
 801869c:	b108      	cbz	r0, 80186a2 <_printf_i+0x1ea>
 801869e:	1b40      	subs	r0, r0, r5
 80186a0:	6060      	str	r0, [r4, #4]
 80186a2:	6863      	ldr	r3, [r4, #4]
 80186a4:	6123      	str	r3, [r4, #16]
 80186a6:	2300      	movs	r3, #0
 80186a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80186ac:	e7aa      	b.n	8018604 <_printf_i+0x14c>
 80186ae:	6923      	ldr	r3, [r4, #16]
 80186b0:	462a      	mov	r2, r5
 80186b2:	4649      	mov	r1, r9
 80186b4:	4640      	mov	r0, r8
 80186b6:	47d0      	blx	sl
 80186b8:	3001      	adds	r0, #1
 80186ba:	d0ad      	beq.n	8018618 <_printf_i+0x160>
 80186bc:	6823      	ldr	r3, [r4, #0]
 80186be:	079b      	lsls	r3, r3, #30
 80186c0:	d413      	bmi.n	80186ea <_printf_i+0x232>
 80186c2:	68e0      	ldr	r0, [r4, #12]
 80186c4:	9b03      	ldr	r3, [sp, #12]
 80186c6:	4298      	cmp	r0, r3
 80186c8:	bfb8      	it	lt
 80186ca:	4618      	movlt	r0, r3
 80186cc:	e7a6      	b.n	801861c <_printf_i+0x164>
 80186ce:	2301      	movs	r3, #1
 80186d0:	4632      	mov	r2, r6
 80186d2:	4649      	mov	r1, r9
 80186d4:	4640      	mov	r0, r8
 80186d6:	47d0      	blx	sl
 80186d8:	3001      	adds	r0, #1
 80186da:	d09d      	beq.n	8018618 <_printf_i+0x160>
 80186dc:	3501      	adds	r5, #1
 80186de:	68e3      	ldr	r3, [r4, #12]
 80186e0:	9903      	ldr	r1, [sp, #12]
 80186e2:	1a5b      	subs	r3, r3, r1
 80186e4:	42ab      	cmp	r3, r5
 80186e6:	dcf2      	bgt.n	80186ce <_printf_i+0x216>
 80186e8:	e7eb      	b.n	80186c2 <_printf_i+0x20a>
 80186ea:	2500      	movs	r5, #0
 80186ec:	f104 0619 	add.w	r6, r4, #25
 80186f0:	e7f5      	b.n	80186de <_printf_i+0x226>
 80186f2:	bf00      	nop
 80186f4:	0801c86a 	.word	0x0801c86a
 80186f8:	0801c87b 	.word	0x0801c87b

080186fc <_scanf_float>:
 80186fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018700:	b087      	sub	sp, #28
 8018702:	4617      	mov	r7, r2
 8018704:	9303      	str	r3, [sp, #12]
 8018706:	688b      	ldr	r3, [r1, #8]
 8018708:	1e5a      	subs	r2, r3, #1
 801870a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801870e:	bf83      	ittte	hi
 8018710:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8018714:	195b      	addhi	r3, r3, r5
 8018716:	9302      	strhi	r3, [sp, #8]
 8018718:	2300      	movls	r3, #0
 801871a:	bf86      	itte	hi
 801871c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8018720:	608b      	strhi	r3, [r1, #8]
 8018722:	9302      	strls	r3, [sp, #8]
 8018724:	680b      	ldr	r3, [r1, #0]
 8018726:	468b      	mov	fp, r1
 8018728:	2500      	movs	r5, #0
 801872a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801872e:	f84b 3b1c 	str.w	r3, [fp], #28
 8018732:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8018736:	4680      	mov	r8, r0
 8018738:	460c      	mov	r4, r1
 801873a:	465e      	mov	r6, fp
 801873c:	46aa      	mov	sl, r5
 801873e:	46a9      	mov	r9, r5
 8018740:	9501      	str	r5, [sp, #4]
 8018742:	68a2      	ldr	r2, [r4, #8]
 8018744:	b152      	cbz	r2, 801875c <_scanf_float+0x60>
 8018746:	683b      	ldr	r3, [r7, #0]
 8018748:	781b      	ldrb	r3, [r3, #0]
 801874a:	2b4e      	cmp	r3, #78	; 0x4e
 801874c:	d864      	bhi.n	8018818 <_scanf_float+0x11c>
 801874e:	2b40      	cmp	r3, #64	; 0x40
 8018750:	d83c      	bhi.n	80187cc <_scanf_float+0xd0>
 8018752:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8018756:	b2c8      	uxtb	r0, r1
 8018758:	280e      	cmp	r0, #14
 801875a:	d93a      	bls.n	80187d2 <_scanf_float+0xd6>
 801875c:	f1b9 0f00 	cmp.w	r9, #0
 8018760:	d003      	beq.n	801876a <_scanf_float+0x6e>
 8018762:	6823      	ldr	r3, [r4, #0]
 8018764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8018768:	6023      	str	r3, [r4, #0]
 801876a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801876e:	f1ba 0f01 	cmp.w	sl, #1
 8018772:	f200 8113 	bhi.w	801899c <_scanf_float+0x2a0>
 8018776:	455e      	cmp	r6, fp
 8018778:	f200 8105 	bhi.w	8018986 <_scanf_float+0x28a>
 801877c:	2501      	movs	r5, #1
 801877e:	4628      	mov	r0, r5
 8018780:	b007      	add	sp, #28
 8018782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018786:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801878a:	2a0d      	cmp	r2, #13
 801878c:	d8e6      	bhi.n	801875c <_scanf_float+0x60>
 801878e:	a101      	add	r1, pc, #4	; (adr r1, 8018794 <_scanf_float+0x98>)
 8018790:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8018794:	080188d3 	.word	0x080188d3
 8018798:	0801875d 	.word	0x0801875d
 801879c:	0801875d 	.word	0x0801875d
 80187a0:	0801875d 	.word	0x0801875d
 80187a4:	08018933 	.word	0x08018933
 80187a8:	0801890b 	.word	0x0801890b
 80187ac:	0801875d 	.word	0x0801875d
 80187b0:	0801875d 	.word	0x0801875d
 80187b4:	080188e1 	.word	0x080188e1
 80187b8:	0801875d 	.word	0x0801875d
 80187bc:	0801875d 	.word	0x0801875d
 80187c0:	0801875d 	.word	0x0801875d
 80187c4:	0801875d 	.word	0x0801875d
 80187c8:	08018899 	.word	0x08018899
 80187cc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80187d0:	e7db      	b.n	801878a <_scanf_float+0x8e>
 80187d2:	290e      	cmp	r1, #14
 80187d4:	d8c2      	bhi.n	801875c <_scanf_float+0x60>
 80187d6:	a001      	add	r0, pc, #4	; (adr r0, 80187dc <_scanf_float+0xe0>)
 80187d8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80187dc:	0801888b 	.word	0x0801888b
 80187e0:	0801875d 	.word	0x0801875d
 80187e4:	0801888b 	.word	0x0801888b
 80187e8:	0801891f 	.word	0x0801891f
 80187ec:	0801875d 	.word	0x0801875d
 80187f0:	08018839 	.word	0x08018839
 80187f4:	08018875 	.word	0x08018875
 80187f8:	08018875 	.word	0x08018875
 80187fc:	08018875 	.word	0x08018875
 8018800:	08018875 	.word	0x08018875
 8018804:	08018875 	.word	0x08018875
 8018808:	08018875 	.word	0x08018875
 801880c:	08018875 	.word	0x08018875
 8018810:	08018875 	.word	0x08018875
 8018814:	08018875 	.word	0x08018875
 8018818:	2b6e      	cmp	r3, #110	; 0x6e
 801881a:	d809      	bhi.n	8018830 <_scanf_float+0x134>
 801881c:	2b60      	cmp	r3, #96	; 0x60
 801881e:	d8b2      	bhi.n	8018786 <_scanf_float+0x8a>
 8018820:	2b54      	cmp	r3, #84	; 0x54
 8018822:	d077      	beq.n	8018914 <_scanf_float+0x218>
 8018824:	2b59      	cmp	r3, #89	; 0x59
 8018826:	d199      	bne.n	801875c <_scanf_float+0x60>
 8018828:	2d07      	cmp	r5, #7
 801882a:	d197      	bne.n	801875c <_scanf_float+0x60>
 801882c:	2508      	movs	r5, #8
 801882e:	e029      	b.n	8018884 <_scanf_float+0x188>
 8018830:	2b74      	cmp	r3, #116	; 0x74
 8018832:	d06f      	beq.n	8018914 <_scanf_float+0x218>
 8018834:	2b79      	cmp	r3, #121	; 0x79
 8018836:	e7f6      	b.n	8018826 <_scanf_float+0x12a>
 8018838:	6821      	ldr	r1, [r4, #0]
 801883a:	05c8      	lsls	r0, r1, #23
 801883c:	d51a      	bpl.n	8018874 <_scanf_float+0x178>
 801883e:	9b02      	ldr	r3, [sp, #8]
 8018840:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8018844:	6021      	str	r1, [r4, #0]
 8018846:	f109 0901 	add.w	r9, r9, #1
 801884a:	b11b      	cbz	r3, 8018854 <_scanf_float+0x158>
 801884c:	3b01      	subs	r3, #1
 801884e:	3201      	adds	r2, #1
 8018850:	9302      	str	r3, [sp, #8]
 8018852:	60a2      	str	r2, [r4, #8]
 8018854:	68a3      	ldr	r3, [r4, #8]
 8018856:	3b01      	subs	r3, #1
 8018858:	60a3      	str	r3, [r4, #8]
 801885a:	6923      	ldr	r3, [r4, #16]
 801885c:	3301      	adds	r3, #1
 801885e:	6123      	str	r3, [r4, #16]
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	3b01      	subs	r3, #1
 8018864:	2b00      	cmp	r3, #0
 8018866:	607b      	str	r3, [r7, #4]
 8018868:	f340 8084 	ble.w	8018974 <_scanf_float+0x278>
 801886c:	683b      	ldr	r3, [r7, #0]
 801886e:	3301      	adds	r3, #1
 8018870:	603b      	str	r3, [r7, #0]
 8018872:	e766      	b.n	8018742 <_scanf_float+0x46>
 8018874:	eb1a 0f05 	cmn.w	sl, r5
 8018878:	f47f af70 	bne.w	801875c <_scanf_float+0x60>
 801887c:	6822      	ldr	r2, [r4, #0]
 801887e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8018882:	6022      	str	r2, [r4, #0]
 8018884:	f806 3b01 	strb.w	r3, [r6], #1
 8018888:	e7e4      	b.n	8018854 <_scanf_float+0x158>
 801888a:	6822      	ldr	r2, [r4, #0]
 801888c:	0610      	lsls	r0, r2, #24
 801888e:	f57f af65 	bpl.w	801875c <_scanf_float+0x60>
 8018892:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8018896:	e7f4      	b.n	8018882 <_scanf_float+0x186>
 8018898:	f1ba 0f00 	cmp.w	sl, #0
 801889c:	d10e      	bne.n	80188bc <_scanf_float+0x1c0>
 801889e:	f1b9 0f00 	cmp.w	r9, #0
 80188a2:	d10e      	bne.n	80188c2 <_scanf_float+0x1c6>
 80188a4:	6822      	ldr	r2, [r4, #0]
 80188a6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80188aa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80188ae:	d108      	bne.n	80188c2 <_scanf_float+0x1c6>
 80188b0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80188b4:	6022      	str	r2, [r4, #0]
 80188b6:	f04f 0a01 	mov.w	sl, #1
 80188ba:	e7e3      	b.n	8018884 <_scanf_float+0x188>
 80188bc:	f1ba 0f02 	cmp.w	sl, #2
 80188c0:	d055      	beq.n	801896e <_scanf_float+0x272>
 80188c2:	2d01      	cmp	r5, #1
 80188c4:	d002      	beq.n	80188cc <_scanf_float+0x1d0>
 80188c6:	2d04      	cmp	r5, #4
 80188c8:	f47f af48 	bne.w	801875c <_scanf_float+0x60>
 80188cc:	3501      	adds	r5, #1
 80188ce:	b2ed      	uxtb	r5, r5
 80188d0:	e7d8      	b.n	8018884 <_scanf_float+0x188>
 80188d2:	f1ba 0f01 	cmp.w	sl, #1
 80188d6:	f47f af41 	bne.w	801875c <_scanf_float+0x60>
 80188da:	f04f 0a02 	mov.w	sl, #2
 80188de:	e7d1      	b.n	8018884 <_scanf_float+0x188>
 80188e0:	b97d      	cbnz	r5, 8018902 <_scanf_float+0x206>
 80188e2:	f1b9 0f00 	cmp.w	r9, #0
 80188e6:	f47f af3c 	bne.w	8018762 <_scanf_float+0x66>
 80188ea:	6822      	ldr	r2, [r4, #0]
 80188ec:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80188f0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80188f4:	f47f af39 	bne.w	801876a <_scanf_float+0x6e>
 80188f8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80188fc:	6022      	str	r2, [r4, #0]
 80188fe:	2501      	movs	r5, #1
 8018900:	e7c0      	b.n	8018884 <_scanf_float+0x188>
 8018902:	2d03      	cmp	r5, #3
 8018904:	d0e2      	beq.n	80188cc <_scanf_float+0x1d0>
 8018906:	2d05      	cmp	r5, #5
 8018908:	e7de      	b.n	80188c8 <_scanf_float+0x1cc>
 801890a:	2d02      	cmp	r5, #2
 801890c:	f47f af26 	bne.w	801875c <_scanf_float+0x60>
 8018910:	2503      	movs	r5, #3
 8018912:	e7b7      	b.n	8018884 <_scanf_float+0x188>
 8018914:	2d06      	cmp	r5, #6
 8018916:	f47f af21 	bne.w	801875c <_scanf_float+0x60>
 801891a:	2507      	movs	r5, #7
 801891c:	e7b2      	b.n	8018884 <_scanf_float+0x188>
 801891e:	6822      	ldr	r2, [r4, #0]
 8018920:	0591      	lsls	r1, r2, #22
 8018922:	f57f af1b 	bpl.w	801875c <_scanf_float+0x60>
 8018926:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801892a:	6022      	str	r2, [r4, #0]
 801892c:	f8cd 9004 	str.w	r9, [sp, #4]
 8018930:	e7a8      	b.n	8018884 <_scanf_float+0x188>
 8018932:	6822      	ldr	r2, [r4, #0]
 8018934:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8018938:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801893c:	d006      	beq.n	801894c <_scanf_float+0x250>
 801893e:	0550      	lsls	r0, r2, #21
 8018940:	f57f af0c 	bpl.w	801875c <_scanf_float+0x60>
 8018944:	f1b9 0f00 	cmp.w	r9, #0
 8018948:	f43f af0f 	beq.w	801876a <_scanf_float+0x6e>
 801894c:	0591      	lsls	r1, r2, #22
 801894e:	bf58      	it	pl
 8018950:	9901      	ldrpl	r1, [sp, #4]
 8018952:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8018956:	bf58      	it	pl
 8018958:	eba9 0101 	subpl.w	r1, r9, r1
 801895c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8018960:	bf58      	it	pl
 8018962:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8018966:	6022      	str	r2, [r4, #0]
 8018968:	f04f 0900 	mov.w	r9, #0
 801896c:	e78a      	b.n	8018884 <_scanf_float+0x188>
 801896e:	f04f 0a03 	mov.w	sl, #3
 8018972:	e787      	b.n	8018884 <_scanf_float+0x188>
 8018974:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018978:	4639      	mov	r1, r7
 801897a:	4640      	mov	r0, r8
 801897c:	4798      	blx	r3
 801897e:	2800      	cmp	r0, #0
 8018980:	f43f aedf 	beq.w	8018742 <_scanf_float+0x46>
 8018984:	e6ea      	b.n	801875c <_scanf_float+0x60>
 8018986:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801898a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801898e:	463a      	mov	r2, r7
 8018990:	4640      	mov	r0, r8
 8018992:	4798      	blx	r3
 8018994:	6923      	ldr	r3, [r4, #16]
 8018996:	3b01      	subs	r3, #1
 8018998:	6123      	str	r3, [r4, #16]
 801899a:	e6ec      	b.n	8018776 <_scanf_float+0x7a>
 801899c:	1e6b      	subs	r3, r5, #1
 801899e:	2b06      	cmp	r3, #6
 80189a0:	d825      	bhi.n	80189ee <_scanf_float+0x2f2>
 80189a2:	2d02      	cmp	r5, #2
 80189a4:	d836      	bhi.n	8018a14 <_scanf_float+0x318>
 80189a6:	455e      	cmp	r6, fp
 80189a8:	f67f aee8 	bls.w	801877c <_scanf_float+0x80>
 80189ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80189b0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80189b4:	463a      	mov	r2, r7
 80189b6:	4640      	mov	r0, r8
 80189b8:	4798      	blx	r3
 80189ba:	6923      	ldr	r3, [r4, #16]
 80189bc:	3b01      	subs	r3, #1
 80189be:	6123      	str	r3, [r4, #16]
 80189c0:	e7f1      	b.n	80189a6 <_scanf_float+0x2aa>
 80189c2:	9802      	ldr	r0, [sp, #8]
 80189c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80189c8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80189cc:	9002      	str	r0, [sp, #8]
 80189ce:	463a      	mov	r2, r7
 80189d0:	4640      	mov	r0, r8
 80189d2:	4798      	blx	r3
 80189d4:	6923      	ldr	r3, [r4, #16]
 80189d6:	3b01      	subs	r3, #1
 80189d8:	6123      	str	r3, [r4, #16]
 80189da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80189de:	fa5f fa8a 	uxtb.w	sl, sl
 80189e2:	f1ba 0f02 	cmp.w	sl, #2
 80189e6:	d1ec      	bne.n	80189c2 <_scanf_float+0x2c6>
 80189e8:	3d03      	subs	r5, #3
 80189ea:	b2ed      	uxtb	r5, r5
 80189ec:	1b76      	subs	r6, r6, r5
 80189ee:	6823      	ldr	r3, [r4, #0]
 80189f0:	05da      	lsls	r2, r3, #23
 80189f2:	d52f      	bpl.n	8018a54 <_scanf_float+0x358>
 80189f4:	055b      	lsls	r3, r3, #21
 80189f6:	d510      	bpl.n	8018a1a <_scanf_float+0x31e>
 80189f8:	455e      	cmp	r6, fp
 80189fa:	f67f aebf 	bls.w	801877c <_scanf_float+0x80>
 80189fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018a02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8018a06:	463a      	mov	r2, r7
 8018a08:	4640      	mov	r0, r8
 8018a0a:	4798      	blx	r3
 8018a0c:	6923      	ldr	r3, [r4, #16]
 8018a0e:	3b01      	subs	r3, #1
 8018a10:	6123      	str	r3, [r4, #16]
 8018a12:	e7f1      	b.n	80189f8 <_scanf_float+0x2fc>
 8018a14:	46aa      	mov	sl, r5
 8018a16:	9602      	str	r6, [sp, #8]
 8018a18:	e7df      	b.n	80189da <_scanf_float+0x2de>
 8018a1a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8018a1e:	6923      	ldr	r3, [r4, #16]
 8018a20:	2965      	cmp	r1, #101	; 0x65
 8018a22:	f103 33ff 	add.w	r3, r3, #4294967295
 8018a26:	f106 35ff 	add.w	r5, r6, #4294967295
 8018a2a:	6123      	str	r3, [r4, #16]
 8018a2c:	d00c      	beq.n	8018a48 <_scanf_float+0x34c>
 8018a2e:	2945      	cmp	r1, #69	; 0x45
 8018a30:	d00a      	beq.n	8018a48 <_scanf_float+0x34c>
 8018a32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018a36:	463a      	mov	r2, r7
 8018a38:	4640      	mov	r0, r8
 8018a3a:	4798      	blx	r3
 8018a3c:	6923      	ldr	r3, [r4, #16]
 8018a3e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8018a42:	3b01      	subs	r3, #1
 8018a44:	1eb5      	subs	r5, r6, #2
 8018a46:	6123      	str	r3, [r4, #16]
 8018a48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018a4c:	463a      	mov	r2, r7
 8018a4e:	4640      	mov	r0, r8
 8018a50:	4798      	blx	r3
 8018a52:	462e      	mov	r6, r5
 8018a54:	6825      	ldr	r5, [r4, #0]
 8018a56:	f015 0510 	ands.w	r5, r5, #16
 8018a5a:	d14d      	bne.n	8018af8 <_scanf_float+0x3fc>
 8018a5c:	7035      	strb	r5, [r6, #0]
 8018a5e:	6823      	ldr	r3, [r4, #0]
 8018a60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8018a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018a68:	d11a      	bne.n	8018aa0 <_scanf_float+0x3a4>
 8018a6a:	9b01      	ldr	r3, [sp, #4]
 8018a6c:	454b      	cmp	r3, r9
 8018a6e:	eba3 0209 	sub.w	r2, r3, r9
 8018a72:	d122      	bne.n	8018aba <_scanf_float+0x3be>
 8018a74:	2200      	movs	r2, #0
 8018a76:	4659      	mov	r1, fp
 8018a78:	4640      	mov	r0, r8
 8018a7a:	f002 fb67 	bl	801b14c <_strtod_r>
 8018a7e:	9b03      	ldr	r3, [sp, #12]
 8018a80:	6821      	ldr	r1, [r4, #0]
 8018a82:	681b      	ldr	r3, [r3, #0]
 8018a84:	f011 0f02 	tst.w	r1, #2
 8018a88:	f103 0204 	add.w	r2, r3, #4
 8018a8c:	d020      	beq.n	8018ad0 <_scanf_float+0x3d4>
 8018a8e:	9903      	ldr	r1, [sp, #12]
 8018a90:	600a      	str	r2, [r1, #0]
 8018a92:	681b      	ldr	r3, [r3, #0]
 8018a94:	ed83 0b00 	vstr	d0, [r3]
 8018a98:	68e3      	ldr	r3, [r4, #12]
 8018a9a:	3301      	adds	r3, #1
 8018a9c:	60e3      	str	r3, [r4, #12]
 8018a9e:	e66e      	b.n	801877e <_scanf_float+0x82>
 8018aa0:	9b04      	ldr	r3, [sp, #16]
 8018aa2:	2b00      	cmp	r3, #0
 8018aa4:	d0e6      	beq.n	8018a74 <_scanf_float+0x378>
 8018aa6:	9905      	ldr	r1, [sp, #20]
 8018aa8:	230a      	movs	r3, #10
 8018aaa:	462a      	mov	r2, r5
 8018aac:	3101      	adds	r1, #1
 8018aae:	4640      	mov	r0, r8
 8018ab0:	f002 fbd4 	bl	801b25c <_strtol_r>
 8018ab4:	9b04      	ldr	r3, [sp, #16]
 8018ab6:	9e05      	ldr	r6, [sp, #20]
 8018ab8:	1ac2      	subs	r2, r0, r3
 8018aba:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8018abe:	429e      	cmp	r6, r3
 8018ac0:	bf28      	it	cs
 8018ac2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8018ac6:	490d      	ldr	r1, [pc, #52]	; (8018afc <_scanf_float+0x400>)
 8018ac8:	4630      	mov	r0, r6
 8018aca:	f000 f8dd 	bl	8018c88 <siprintf>
 8018ace:	e7d1      	b.n	8018a74 <_scanf_float+0x378>
 8018ad0:	f011 0f04 	tst.w	r1, #4
 8018ad4:	9903      	ldr	r1, [sp, #12]
 8018ad6:	600a      	str	r2, [r1, #0]
 8018ad8:	d1db      	bne.n	8018a92 <_scanf_float+0x396>
 8018ada:	eeb4 0b40 	vcmp.f64	d0, d0
 8018ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ae2:	681e      	ldr	r6, [r3, #0]
 8018ae4:	d705      	bvc.n	8018af2 <_scanf_float+0x3f6>
 8018ae6:	4806      	ldr	r0, [pc, #24]	; (8018b00 <_scanf_float+0x404>)
 8018ae8:	f000 f9c0 	bl	8018e6c <nanf>
 8018aec:	ed86 0a00 	vstr	s0, [r6]
 8018af0:	e7d2      	b.n	8018a98 <_scanf_float+0x39c>
 8018af2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8018af6:	e7f9      	b.n	8018aec <_scanf_float+0x3f0>
 8018af8:	2500      	movs	r5, #0
 8018afa:	e640      	b.n	801877e <_scanf_float+0x82>
 8018afc:	0801c88c 	.word	0x0801c88c
 8018b00:	0801cc1d 	.word	0x0801cc1d

08018b04 <std>:
 8018b04:	2300      	movs	r3, #0
 8018b06:	b510      	push	{r4, lr}
 8018b08:	4604      	mov	r4, r0
 8018b0a:	e9c0 3300 	strd	r3, r3, [r0]
 8018b0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018b12:	6083      	str	r3, [r0, #8]
 8018b14:	8181      	strh	r1, [r0, #12]
 8018b16:	6643      	str	r3, [r0, #100]	; 0x64
 8018b18:	81c2      	strh	r2, [r0, #14]
 8018b1a:	6183      	str	r3, [r0, #24]
 8018b1c:	4619      	mov	r1, r3
 8018b1e:	2208      	movs	r2, #8
 8018b20:	305c      	adds	r0, #92	; 0x5c
 8018b22:	f000 f914 	bl	8018d4e <memset>
 8018b26:	4b0d      	ldr	r3, [pc, #52]	; (8018b5c <std+0x58>)
 8018b28:	6263      	str	r3, [r4, #36]	; 0x24
 8018b2a:	4b0d      	ldr	r3, [pc, #52]	; (8018b60 <std+0x5c>)
 8018b2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8018b2e:	4b0d      	ldr	r3, [pc, #52]	; (8018b64 <std+0x60>)
 8018b30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018b32:	4b0d      	ldr	r3, [pc, #52]	; (8018b68 <std+0x64>)
 8018b34:	6323      	str	r3, [r4, #48]	; 0x30
 8018b36:	4b0d      	ldr	r3, [pc, #52]	; (8018b6c <std+0x68>)
 8018b38:	6224      	str	r4, [r4, #32]
 8018b3a:	429c      	cmp	r4, r3
 8018b3c:	d006      	beq.n	8018b4c <std+0x48>
 8018b3e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8018b42:	4294      	cmp	r4, r2
 8018b44:	d002      	beq.n	8018b4c <std+0x48>
 8018b46:	33d0      	adds	r3, #208	; 0xd0
 8018b48:	429c      	cmp	r4, r3
 8018b4a:	d105      	bne.n	8018b58 <std+0x54>
 8018b4c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018b54:	f000 b978 	b.w	8018e48 <__retarget_lock_init_recursive>
 8018b58:	bd10      	pop	{r4, pc}
 8018b5a:	bf00      	nop
 8018b5c:	08018cc9 	.word	0x08018cc9
 8018b60:	08018ceb 	.word	0x08018ceb
 8018b64:	08018d23 	.word	0x08018d23
 8018b68:	08018d47 	.word	0x08018d47
 8018b6c:	24003230 	.word	0x24003230

08018b70 <stdio_exit_handler>:
 8018b70:	4a02      	ldr	r2, [pc, #8]	; (8018b7c <stdio_exit_handler+0xc>)
 8018b72:	4903      	ldr	r1, [pc, #12]	; (8018b80 <stdio_exit_handler+0x10>)
 8018b74:	4803      	ldr	r0, [pc, #12]	; (8018b84 <stdio_exit_handler+0x14>)
 8018b76:	f000 b869 	b.w	8018c4c <_fwalk_sglue>
 8018b7a:	bf00      	nop
 8018b7c:	2400012c 	.word	0x2400012c
 8018b80:	0801b61d 	.word	0x0801b61d
 8018b84:	24000138 	.word	0x24000138

08018b88 <cleanup_stdio>:
 8018b88:	6841      	ldr	r1, [r0, #4]
 8018b8a:	4b0c      	ldr	r3, [pc, #48]	; (8018bbc <cleanup_stdio+0x34>)
 8018b8c:	4299      	cmp	r1, r3
 8018b8e:	b510      	push	{r4, lr}
 8018b90:	4604      	mov	r4, r0
 8018b92:	d001      	beq.n	8018b98 <cleanup_stdio+0x10>
 8018b94:	f002 fd42 	bl	801b61c <_fflush_r>
 8018b98:	68a1      	ldr	r1, [r4, #8]
 8018b9a:	4b09      	ldr	r3, [pc, #36]	; (8018bc0 <cleanup_stdio+0x38>)
 8018b9c:	4299      	cmp	r1, r3
 8018b9e:	d002      	beq.n	8018ba6 <cleanup_stdio+0x1e>
 8018ba0:	4620      	mov	r0, r4
 8018ba2:	f002 fd3b 	bl	801b61c <_fflush_r>
 8018ba6:	68e1      	ldr	r1, [r4, #12]
 8018ba8:	4b06      	ldr	r3, [pc, #24]	; (8018bc4 <cleanup_stdio+0x3c>)
 8018baa:	4299      	cmp	r1, r3
 8018bac:	d004      	beq.n	8018bb8 <cleanup_stdio+0x30>
 8018bae:	4620      	mov	r0, r4
 8018bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018bb4:	f002 bd32 	b.w	801b61c <_fflush_r>
 8018bb8:	bd10      	pop	{r4, pc}
 8018bba:	bf00      	nop
 8018bbc:	24003230 	.word	0x24003230
 8018bc0:	24003298 	.word	0x24003298
 8018bc4:	24003300 	.word	0x24003300

08018bc8 <global_stdio_init.part.0>:
 8018bc8:	b510      	push	{r4, lr}
 8018bca:	4b0b      	ldr	r3, [pc, #44]	; (8018bf8 <global_stdio_init.part.0+0x30>)
 8018bcc:	4c0b      	ldr	r4, [pc, #44]	; (8018bfc <global_stdio_init.part.0+0x34>)
 8018bce:	4a0c      	ldr	r2, [pc, #48]	; (8018c00 <global_stdio_init.part.0+0x38>)
 8018bd0:	601a      	str	r2, [r3, #0]
 8018bd2:	4620      	mov	r0, r4
 8018bd4:	2200      	movs	r2, #0
 8018bd6:	2104      	movs	r1, #4
 8018bd8:	f7ff ff94 	bl	8018b04 <std>
 8018bdc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8018be0:	2201      	movs	r2, #1
 8018be2:	2109      	movs	r1, #9
 8018be4:	f7ff ff8e 	bl	8018b04 <std>
 8018be8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8018bec:	2202      	movs	r2, #2
 8018bee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018bf2:	2112      	movs	r1, #18
 8018bf4:	f7ff bf86 	b.w	8018b04 <std>
 8018bf8:	24003368 	.word	0x24003368
 8018bfc:	24003230 	.word	0x24003230
 8018c00:	08018b71 	.word	0x08018b71

08018c04 <__sfp_lock_acquire>:
 8018c04:	4801      	ldr	r0, [pc, #4]	; (8018c0c <__sfp_lock_acquire+0x8>)
 8018c06:	f000 b920 	b.w	8018e4a <__retarget_lock_acquire_recursive>
 8018c0a:	bf00      	nop
 8018c0c:	24003371 	.word	0x24003371

08018c10 <__sfp_lock_release>:
 8018c10:	4801      	ldr	r0, [pc, #4]	; (8018c18 <__sfp_lock_release+0x8>)
 8018c12:	f000 b91b 	b.w	8018e4c <__retarget_lock_release_recursive>
 8018c16:	bf00      	nop
 8018c18:	24003371 	.word	0x24003371

08018c1c <__sinit>:
 8018c1c:	b510      	push	{r4, lr}
 8018c1e:	4604      	mov	r4, r0
 8018c20:	f7ff fff0 	bl	8018c04 <__sfp_lock_acquire>
 8018c24:	6a23      	ldr	r3, [r4, #32]
 8018c26:	b11b      	cbz	r3, 8018c30 <__sinit+0x14>
 8018c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018c2c:	f7ff bff0 	b.w	8018c10 <__sfp_lock_release>
 8018c30:	4b04      	ldr	r3, [pc, #16]	; (8018c44 <__sinit+0x28>)
 8018c32:	6223      	str	r3, [r4, #32]
 8018c34:	4b04      	ldr	r3, [pc, #16]	; (8018c48 <__sinit+0x2c>)
 8018c36:	681b      	ldr	r3, [r3, #0]
 8018c38:	2b00      	cmp	r3, #0
 8018c3a:	d1f5      	bne.n	8018c28 <__sinit+0xc>
 8018c3c:	f7ff ffc4 	bl	8018bc8 <global_stdio_init.part.0>
 8018c40:	e7f2      	b.n	8018c28 <__sinit+0xc>
 8018c42:	bf00      	nop
 8018c44:	08018b89 	.word	0x08018b89
 8018c48:	24003368 	.word	0x24003368

08018c4c <_fwalk_sglue>:
 8018c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018c50:	4607      	mov	r7, r0
 8018c52:	4688      	mov	r8, r1
 8018c54:	4614      	mov	r4, r2
 8018c56:	2600      	movs	r6, #0
 8018c58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018c5c:	f1b9 0901 	subs.w	r9, r9, #1
 8018c60:	d505      	bpl.n	8018c6e <_fwalk_sglue+0x22>
 8018c62:	6824      	ldr	r4, [r4, #0]
 8018c64:	2c00      	cmp	r4, #0
 8018c66:	d1f7      	bne.n	8018c58 <_fwalk_sglue+0xc>
 8018c68:	4630      	mov	r0, r6
 8018c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018c6e:	89ab      	ldrh	r3, [r5, #12]
 8018c70:	2b01      	cmp	r3, #1
 8018c72:	d907      	bls.n	8018c84 <_fwalk_sglue+0x38>
 8018c74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018c78:	3301      	adds	r3, #1
 8018c7a:	d003      	beq.n	8018c84 <_fwalk_sglue+0x38>
 8018c7c:	4629      	mov	r1, r5
 8018c7e:	4638      	mov	r0, r7
 8018c80:	47c0      	blx	r8
 8018c82:	4306      	orrs	r6, r0
 8018c84:	3568      	adds	r5, #104	; 0x68
 8018c86:	e7e9      	b.n	8018c5c <_fwalk_sglue+0x10>

08018c88 <siprintf>:
 8018c88:	b40e      	push	{r1, r2, r3}
 8018c8a:	b500      	push	{lr}
 8018c8c:	b09c      	sub	sp, #112	; 0x70
 8018c8e:	ab1d      	add	r3, sp, #116	; 0x74
 8018c90:	9002      	str	r0, [sp, #8]
 8018c92:	9006      	str	r0, [sp, #24]
 8018c94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018c98:	4809      	ldr	r0, [pc, #36]	; (8018cc0 <siprintf+0x38>)
 8018c9a:	9107      	str	r1, [sp, #28]
 8018c9c:	9104      	str	r1, [sp, #16]
 8018c9e:	4909      	ldr	r1, [pc, #36]	; (8018cc4 <siprintf+0x3c>)
 8018ca0:	f853 2b04 	ldr.w	r2, [r3], #4
 8018ca4:	9105      	str	r1, [sp, #20]
 8018ca6:	6800      	ldr	r0, [r0, #0]
 8018ca8:	9301      	str	r3, [sp, #4]
 8018caa:	a902      	add	r1, sp, #8
 8018cac:	f002 fb32 	bl	801b314 <_svfiprintf_r>
 8018cb0:	9b02      	ldr	r3, [sp, #8]
 8018cb2:	2200      	movs	r2, #0
 8018cb4:	701a      	strb	r2, [r3, #0]
 8018cb6:	b01c      	add	sp, #112	; 0x70
 8018cb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8018cbc:	b003      	add	sp, #12
 8018cbe:	4770      	bx	lr
 8018cc0:	24000184 	.word	0x24000184
 8018cc4:	ffff0208 	.word	0xffff0208

08018cc8 <__sread>:
 8018cc8:	b510      	push	{r4, lr}
 8018cca:	460c      	mov	r4, r1
 8018ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018cd0:	f000 f86c 	bl	8018dac <_read_r>
 8018cd4:	2800      	cmp	r0, #0
 8018cd6:	bfab      	itete	ge
 8018cd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018cda:	89a3      	ldrhlt	r3, [r4, #12]
 8018cdc:	181b      	addge	r3, r3, r0
 8018cde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018ce2:	bfac      	ite	ge
 8018ce4:	6563      	strge	r3, [r4, #84]	; 0x54
 8018ce6:	81a3      	strhlt	r3, [r4, #12]
 8018ce8:	bd10      	pop	{r4, pc}

08018cea <__swrite>:
 8018cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018cee:	461f      	mov	r7, r3
 8018cf0:	898b      	ldrh	r3, [r1, #12]
 8018cf2:	05db      	lsls	r3, r3, #23
 8018cf4:	4605      	mov	r5, r0
 8018cf6:	460c      	mov	r4, r1
 8018cf8:	4616      	mov	r6, r2
 8018cfa:	d505      	bpl.n	8018d08 <__swrite+0x1e>
 8018cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018d00:	2302      	movs	r3, #2
 8018d02:	2200      	movs	r2, #0
 8018d04:	f000 f840 	bl	8018d88 <_lseek_r>
 8018d08:	89a3      	ldrh	r3, [r4, #12]
 8018d0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018d0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018d12:	81a3      	strh	r3, [r4, #12]
 8018d14:	4632      	mov	r2, r6
 8018d16:	463b      	mov	r3, r7
 8018d18:	4628      	mov	r0, r5
 8018d1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018d1e:	f000 b857 	b.w	8018dd0 <_write_r>

08018d22 <__sseek>:
 8018d22:	b510      	push	{r4, lr}
 8018d24:	460c      	mov	r4, r1
 8018d26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018d2a:	f000 f82d 	bl	8018d88 <_lseek_r>
 8018d2e:	1c43      	adds	r3, r0, #1
 8018d30:	89a3      	ldrh	r3, [r4, #12]
 8018d32:	bf15      	itete	ne
 8018d34:	6560      	strne	r0, [r4, #84]	; 0x54
 8018d36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018d3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018d3e:	81a3      	strheq	r3, [r4, #12]
 8018d40:	bf18      	it	ne
 8018d42:	81a3      	strhne	r3, [r4, #12]
 8018d44:	bd10      	pop	{r4, pc}

08018d46 <__sclose>:
 8018d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018d4a:	f000 b80d 	b.w	8018d68 <_close_r>

08018d4e <memset>:
 8018d4e:	4402      	add	r2, r0
 8018d50:	4603      	mov	r3, r0
 8018d52:	4293      	cmp	r3, r2
 8018d54:	d100      	bne.n	8018d58 <memset+0xa>
 8018d56:	4770      	bx	lr
 8018d58:	f803 1b01 	strb.w	r1, [r3], #1
 8018d5c:	e7f9      	b.n	8018d52 <memset+0x4>
	...

08018d60 <_localeconv_r>:
 8018d60:	4800      	ldr	r0, [pc, #0]	; (8018d64 <_localeconv_r+0x4>)
 8018d62:	4770      	bx	lr
 8018d64:	24000278 	.word	0x24000278

08018d68 <_close_r>:
 8018d68:	b538      	push	{r3, r4, r5, lr}
 8018d6a:	4d06      	ldr	r5, [pc, #24]	; (8018d84 <_close_r+0x1c>)
 8018d6c:	2300      	movs	r3, #0
 8018d6e:	4604      	mov	r4, r0
 8018d70:	4608      	mov	r0, r1
 8018d72:	602b      	str	r3, [r5, #0]
 8018d74:	f7eb f915 	bl	8003fa2 <_close>
 8018d78:	1c43      	adds	r3, r0, #1
 8018d7a:	d102      	bne.n	8018d82 <_close_r+0x1a>
 8018d7c:	682b      	ldr	r3, [r5, #0]
 8018d7e:	b103      	cbz	r3, 8018d82 <_close_r+0x1a>
 8018d80:	6023      	str	r3, [r4, #0]
 8018d82:	bd38      	pop	{r3, r4, r5, pc}
 8018d84:	2400336c 	.word	0x2400336c

08018d88 <_lseek_r>:
 8018d88:	b538      	push	{r3, r4, r5, lr}
 8018d8a:	4d07      	ldr	r5, [pc, #28]	; (8018da8 <_lseek_r+0x20>)
 8018d8c:	4604      	mov	r4, r0
 8018d8e:	4608      	mov	r0, r1
 8018d90:	4611      	mov	r1, r2
 8018d92:	2200      	movs	r2, #0
 8018d94:	602a      	str	r2, [r5, #0]
 8018d96:	461a      	mov	r2, r3
 8018d98:	f7eb f92a 	bl	8003ff0 <_lseek>
 8018d9c:	1c43      	adds	r3, r0, #1
 8018d9e:	d102      	bne.n	8018da6 <_lseek_r+0x1e>
 8018da0:	682b      	ldr	r3, [r5, #0]
 8018da2:	b103      	cbz	r3, 8018da6 <_lseek_r+0x1e>
 8018da4:	6023      	str	r3, [r4, #0]
 8018da6:	bd38      	pop	{r3, r4, r5, pc}
 8018da8:	2400336c 	.word	0x2400336c

08018dac <_read_r>:
 8018dac:	b538      	push	{r3, r4, r5, lr}
 8018dae:	4d07      	ldr	r5, [pc, #28]	; (8018dcc <_read_r+0x20>)
 8018db0:	4604      	mov	r4, r0
 8018db2:	4608      	mov	r0, r1
 8018db4:	4611      	mov	r1, r2
 8018db6:	2200      	movs	r2, #0
 8018db8:	602a      	str	r2, [r5, #0]
 8018dba:	461a      	mov	r2, r3
 8018dbc:	f7eb f8b8 	bl	8003f30 <_read>
 8018dc0:	1c43      	adds	r3, r0, #1
 8018dc2:	d102      	bne.n	8018dca <_read_r+0x1e>
 8018dc4:	682b      	ldr	r3, [r5, #0]
 8018dc6:	b103      	cbz	r3, 8018dca <_read_r+0x1e>
 8018dc8:	6023      	str	r3, [r4, #0]
 8018dca:	bd38      	pop	{r3, r4, r5, pc}
 8018dcc:	2400336c 	.word	0x2400336c

08018dd0 <_write_r>:
 8018dd0:	b538      	push	{r3, r4, r5, lr}
 8018dd2:	4d07      	ldr	r5, [pc, #28]	; (8018df0 <_write_r+0x20>)
 8018dd4:	4604      	mov	r4, r0
 8018dd6:	4608      	mov	r0, r1
 8018dd8:	4611      	mov	r1, r2
 8018dda:	2200      	movs	r2, #0
 8018ddc:	602a      	str	r2, [r5, #0]
 8018dde:	461a      	mov	r2, r3
 8018de0:	f7eb f8c3 	bl	8003f6a <_write>
 8018de4:	1c43      	adds	r3, r0, #1
 8018de6:	d102      	bne.n	8018dee <_write_r+0x1e>
 8018de8:	682b      	ldr	r3, [r5, #0]
 8018dea:	b103      	cbz	r3, 8018dee <_write_r+0x1e>
 8018dec:	6023      	str	r3, [r4, #0]
 8018dee:	bd38      	pop	{r3, r4, r5, pc}
 8018df0:	2400336c 	.word	0x2400336c

08018df4 <__errno>:
 8018df4:	4b01      	ldr	r3, [pc, #4]	; (8018dfc <__errno+0x8>)
 8018df6:	6818      	ldr	r0, [r3, #0]
 8018df8:	4770      	bx	lr
 8018dfa:	bf00      	nop
 8018dfc:	24000184 	.word	0x24000184

08018e00 <__libc_init_array>:
 8018e00:	b570      	push	{r4, r5, r6, lr}
 8018e02:	4d0d      	ldr	r5, [pc, #52]	; (8018e38 <__libc_init_array+0x38>)
 8018e04:	4c0d      	ldr	r4, [pc, #52]	; (8018e3c <__libc_init_array+0x3c>)
 8018e06:	1b64      	subs	r4, r4, r5
 8018e08:	10a4      	asrs	r4, r4, #2
 8018e0a:	2600      	movs	r6, #0
 8018e0c:	42a6      	cmp	r6, r4
 8018e0e:	d109      	bne.n	8018e24 <__libc_init_array+0x24>
 8018e10:	4d0b      	ldr	r5, [pc, #44]	; (8018e40 <__libc_init_array+0x40>)
 8018e12:	4c0c      	ldr	r4, [pc, #48]	; (8018e44 <__libc_init_array+0x44>)
 8018e14:	f003 fb0c 	bl	801c430 <_init>
 8018e18:	1b64      	subs	r4, r4, r5
 8018e1a:	10a4      	asrs	r4, r4, #2
 8018e1c:	2600      	movs	r6, #0
 8018e1e:	42a6      	cmp	r6, r4
 8018e20:	d105      	bne.n	8018e2e <__libc_init_array+0x2e>
 8018e22:	bd70      	pop	{r4, r5, r6, pc}
 8018e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8018e28:	4798      	blx	r3
 8018e2a:	3601      	adds	r6, #1
 8018e2c:	e7ee      	b.n	8018e0c <__libc_init_array+0xc>
 8018e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8018e32:	4798      	blx	r3
 8018e34:	3601      	adds	r6, #1
 8018e36:	e7f2      	b.n	8018e1e <__libc_init_array+0x1e>
 8018e38:	0801cc88 	.word	0x0801cc88
 8018e3c:	0801cc88 	.word	0x0801cc88
 8018e40:	0801cc88 	.word	0x0801cc88
 8018e44:	0801cc8c 	.word	0x0801cc8c

08018e48 <__retarget_lock_init_recursive>:
 8018e48:	4770      	bx	lr

08018e4a <__retarget_lock_acquire_recursive>:
 8018e4a:	4770      	bx	lr

08018e4c <__retarget_lock_release_recursive>:
 8018e4c:	4770      	bx	lr

08018e4e <memcpy>:
 8018e4e:	440a      	add	r2, r1
 8018e50:	4291      	cmp	r1, r2
 8018e52:	f100 33ff 	add.w	r3, r0, #4294967295
 8018e56:	d100      	bne.n	8018e5a <memcpy+0xc>
 8018e58:	4770      	bx	lr
 8018e5a:	b510      	push	{r4, lr}
 8018e5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018e60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018e64:	4291      	cmp	r1, r2
 8018e66:	d1f9      	bne.n	8018e5c <memcpy+0xe>
 8018e68:	bd10      	pop	{r4, pc}
	...

08018e6c <nanf>:
 8018e6c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8018e74 <nanf+0x8>
 8018e70:	4770      	bx	lr
 8018e72:	bf00      	nop
 8018e74:	7fc00000 	.word	0x7fc00000

08018e78 <quorem>:
 8018e78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e7c:	6903      	ldr	r3, [r0, #16]
 8018e7e:	690c      	ldr	r4, [r1, #16]
 8018e80:	42a3      	cmp	r3, r4
 8018e82:	4607      	mov	r7, r0
 8018e84:	db7e      	blt.n	8018f84 <quorem+0x10c>
 8018e86:	3c01      	subs	r4, #1
 8018e88:	f101 0814 	add.w	r8, r1, #20
 8018e8c:	f100 0514 	add.w	r5, r0, #20
 8018e90:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018e94:	9301      	str	r3, [sp, #4]
 8018e96:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8018e9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018e9e:	3301      	adds	r3, #1
 8018ea0:	429a      	cmp	r2, r3
 8018ea2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8018ea6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8018eaa:	fbb2 f6f3 	udiv	r6, r2, r3
 8018eae:	d331      	bcc.n	8018f14 <quorem+0x9c>
 8018eb0:	f04f 0e00 	mov.w	lr, #0
 8018eb4:	4640      	mov	r0, r8
 8018eb6:	46ac      	mov	ip, r5
 8018eb8:	46f2      	mov	sl, lr
 8018eba:	f850 2b04 	ldr.w	r2, [r0], #4
 8018ebe:	b293      	uxth	r3, r2
 8018ec0:	fb06 e303 	mla	r3, r6, r3, lr
 8018ec4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8018ec8:	0c1a      	lsrs	r2, r3, #16
 8018eca:	b29b      	uxth	r3, r3
 8018ecc:	ebaa 0303 	sub.w	r3, sl, r3
 8018ed0:	f8dc a000 	ldr.w	sl, [ip]
 8018ed4:	fa13 f38a 	uxtah	r3, r3, sl
 8018ed8:	fb06 220e 	mla	r2, r6, lr, r2
 8018edc:	9300      	str	r3, [sp, #0]
 8018ede:	9b00      	ldr	r3, [sp, #0]
 8018ee0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8018ee4:	b292      	uxth	r2, r2
 8018ee6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8018eea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018eee:	f8bd 3000 	ldrh.w	r3, [sp]
 8018ef2:	4581      	cmp	r9, r0
 8018ef4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018ef8:	f84c 3b04 	str.w	r3, [ip], #4
 8018efc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8018f00:	d2db      	bcs.n	8018eba <quorem+0x42>
 8018f02:	f855 300b 	ldr.w	r3, [r5, fp]
 8018f06:	b92b      	cbnz	r3, 8018f14 <quorem+0x9c>
 8018f08:	9b01      	ldr	r3, [sp, #4]
 8018f0a:	3b04      	subs	r3, #4
 8018f0c:	429d      	cmp	r5, r3
 8018f0e:	461a      	mov	r2, r3
 8018f10:	d32c      	bcc.n	8018f6c <quorem+0xf4>
 8018f12:	613c      	str	r4, [r7, #16]
 8018f14:	4638      	mov	r0, r7
 8018f16:	f001 f969 	bl	801a1ec <__mcmp>
 8018f1a:	2800      	cmp	r0, #0
 8018f1c:	db22      	blt.n	8018f64 <quorem+0xec>
 8018f1e:	3601      	adds	r6, #1
 8018f20:	4629      	mov	r1, r5
 8018f22:	2000      	movs	r0, #0
 8018f24:	f858 2b04 	ldr.w	r2, [r8], #4
 8018f28:	f8d1 c000 	ldr.w	ip, [r1]
 8018f2c:	b293      	uxth	r3, r2
 8018f2e:	1ac3      	subs	r3, r0, r3
 8018f30:	0c12      	lsrs	r2, r2, #16
 8018f32:	fa13 f38c 	uxtah	r3, r3, ip
 8018f36:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8018f3a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018f3e:	b29b      	uxth	r3, r3
 8018f40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018f44:	45c1      	cmp	r9, r8
 8018f46:	f841 3b04 	str.w	r3, [r1], #4
 8018f4a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8018f4e:	d2e9      	bcs.n	8018f24 <quorem+0xac>
 8018f50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018f54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018f58:	b922      	cbnz	r2, 8018f64 <quorem+0xec>
 8018f5a:	3b04      	subs	r3, #4
 8018f5c:	429d      	cmp	r5, r3
 8018f5e:	461a      	mov	r2, r3
 8018f60:	d30a      	bcc.n	8018f78 <quorem+0x100>
 8018f62:	613c      	str	r4, [r7, #16]
 8018f64:	4630      	mov	r0, r6
 8018f66:	b003      	add	sp, #12
 8018f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f6c:	6812      	ldr	r2, [r2, #0]
 8018f6e:	3b04      	subs	r3, #4
 8018f70:	2a00      	cmp	r2, #0
 8018f72:	d1ce      	bne.n	8018f12 <quorem+0x9a>
 8018f74:	3c01      	subs	r4, #1
 8018f76:	e7c9      	b.n	8018f0c <quorem+0x94>
 8018f78:	6812      	ldr	r2, [r2, #0]
 8018f7a:	3b04      	subs	r3, #4
 8018f7c:	2a00      	cmp	r2, #0
 8018f7e:	d1f0      	bne.n	8018f62 <quorem+0xea>
 8018f80:	3c01      	subs	r4, #1
 8018f82:	e7eb      	b.n	8018f5c <quorem+0xe4>
 8018f84:	2000      	movs	r0, #0
 8018f86:	e7ee      	b.n	8018f66 <quorem+0xee>

08018f88 <_dtoa_r>:
 8018f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f8c:	ed2d 8b02 	vpush	{d8}
 8018f90:	69c5      	ldr	r5, [r0, #28]
 8018f92:	b091      	sub	sp, #68	; 0x44
 8018f94:	ed8d 0b02 	vstr	d0, [sp, #8]
 8018f98:	ec59 8b10 	vmov	r8, r9, d0
 8018f9c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8018f9e:	9106      	str	r1, [sp, #24]
 8018fa0:	4606      	mov	r6, r0
 8018fa2:	9208      	str	r2, [sp, #32]
 8018fa4:	930c      	str	r3, [sp, #48]	; 0x30
 8018fa6:	b975      	cbnz	r5, 8018fc6 <_dtoa_r+0x3e>
 8018fa8:	2010      	movs	r0, #16
 8018faa:	f000 fda5 	bl	8019af8 <malloc>
 8018fae:	4602      	mov	r2, r0
 8018fb0:	61f0      	str	r0, [r6, #28]
 8018fb2:	b920      	cbnz	r0, 8018fbe <_dtoa_r+0x36>
 8018fb4:	4ba6      	ldr	r3, [pc, #664]	; (8019250 <_dtoa_r+0x2c8>)
 8018fb6:	21ef      	movs	r1, #239	; 0xef
 8018fb8:	48a6      	ldr	r0, [pc, #664]	; (8019254 <_dtoa_r+0x2cc>)
 8018fba:	f002 fb9d 	bl	801b6f8 <__assert_func>
 8018fbe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018fc2:	6005      	str	r5, [r0, #0]
 8018fc4:	60c5      	str	r5, [r0, #12]
 8018fc6:	69f3      	ldr	r3, [r6, #28]
 8018fc8:	6819      	ldr	r1, [r3, #0]
 8018fca:	b151      	cbz	r1, 8018fe2 <_dtoa_r+0x5a>
 8018fcc:	685a      	ldr	r2, [r3, #4]
 8018fce:	604a      	str	r2, [r1, #4]
 8018fd0:	2301      	movs	r3, #1
 8018fd2:	4093      	lsls	r3, r2
 8018fd4:	608b      	str	r3, [r1, #8]
 8018fd6:	4630      	mov	r0, r6
 8018fd8:	f000 fe82 	bl	8019ce0 <_Bfree>
 8018fdc:	69f3      	ldr	r3, [r6, #28]
 8018fde:	2200      	movs	r2, #0
 8018fe0:	601a      	str	r2, [r3, #0]
 8018fe2:	f1b9 0300 	subs.w	r3, r9, #0
 8018fe6:	bfbb      	ittet	lt
 8018fe8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8018fec:	9303      	strlt	r3, [sp, #12]
 8018fee:	2300      	movge	r3, #0
 8018ff0:	2201      	movlt	r2, #1
 8018ff2:	bfac      	ite	ge
 8018ff4:	6023      	strge	r3, [r4, #0]
 8018ff6:	6022      	strlt	r2, [r4, #0]
 8018ff8:	4b97      	ldr	r3, [pc, #604]	; (8019258 <_dtoa_r+0x2d0>)
 8018ffa:	9c03      	ldr	r4, [sp, #12]
 8018ffc:	43a3      	bics	r3, r4
 8018ffe:	d11c      	bne.n	801903a <_dtoa_r+0xb2>
 8019000:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019002:	f242 730f 	movw	r3, #9999	; 0x270f
 8019006:	6013      	str	r3, [r2, #0]
 8019008:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801900c:	ea53 0308 	orrs.w	r3, r3, r8
 8019010:	f000 84fb 	beq.w	8019a0a <_dtoa_r+0xa82>
 8019014:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019016:	b963      	cbnz	r3, 8019032 <_dtoa_r+0xaa>
 8019018:	4b90      	ldr	r3, [pc, #576]	; (801925c <_dtoa_r+0x2d4>)
 801901a:	e020      	b.n	801905e <_dtoa_r+0xd6>
 801901c:	4b90      	ldr	r3, [pc, #576]	; (8019260 <_dtoa_r+0x2d8>)
 801901e:	9301      	str	r3, [sp, #4]
 8019020:	3308      	adds	r3, #8
 8019022:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8019024:	6013      	str	r3, [r2, #0]
 8019026:	9801      	ldr	r0, [sp, #4]
 8019028:	b011      	add	sp, #68	; 0x44
 801902a:	ecbd 8b02 	vpop	{d8}
 801902e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019032:	4b8a      	ldr	r3, [pc, #552]	; (801925c <_dtoa_r+0x2d4>)
 8019034:	9301      	str	r3, [sp, #4]
 8019036:	3303      	adds	r3, #3
 8019038:	e7f3      	b.n	8019022 <_dtoa_r+0x9a>
 801903a:	ed9d 8b02 	vldr	d8, [sp, #8]
 801903e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019046:	d10c      	bne.n	8019062 <_dtoa_r+0xda>
 8019048:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801904a:	2301      	movs	r3, #1
 801904c:	6013      	str	r3, [r2, #0]
 801904e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019050:	2b00      	cmp	r3, #0
 8019052:	f000 84d7 	beq.w	8019a04 <_dtoa_r+0xa7c>
 8019056:	4b83      	ldr	r3, [pc, #524]	; (8019264 <_dtoa_r+0x2dc>)
 8019058:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801905a:	6013      	str	r3, [r2, #0]
 801905c:	3b01      	subs	r3, #1
 801905e:	9301      	str	r3, [sp, #4]
 8019060:	e7e1      	b.n	8019026 <_dtoa_r+0x9e>
 8019062:	aa0e      	add	r2, sp, #56	; 0x38
 8019064:	a90f      	add	r1, sp, #60	; 0x3c
 8019066:	4630      	mov	r0, r6
 8019068:	eeb0 0b48 	vmov.f64	d0, d8
 801906c:	f001 f9d4 	bl	801a418 <__d2b>
 8019070:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8019074:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019076:	4605      	mov	r5, r0
 8019078:	2b00      	cmp	r3, #0
 801907a:	d046      	beq.n	801910a <_dtoa_r+0x182>
 801907c:	eeb0 7b48 	vmov.f64	d7, d8
 8019080:	ee18 1a90 	vmov	r1, s17
 8019084:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8019088:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801908c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8019090:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019094:	2000      	movs	r0, #0
 8019096:	ee07 1a90 	vmov	s15, r1
 801909a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 801909e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8019238 <_dtoa_r+0x2b0>
 80190a2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80190a6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8019240 <_dtoa_r+0x2b8>
 80190aa:	eea7 6b05 	vfma.f64	d6, d7, d5
 80190ae:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8019248 <_dtoa_r+0x2c0>
 80190b2:	ee07 3a90 	vmov	s15, r3
 80190b6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80190ba:	eeb0 7b46 	vmov.f64	d7, d6
 80190be:	eea4 7b05 	vfma.f64	d7, d4, d5
 80190c2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80190c6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80190ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190ce:	ee16 ba90 	vmov	fp, s13
 80190d2:	9009      	str	r0, [sp, #36]	; 0x24
 80190d4:	d508      	bpl.n	80190e8 <_dtoa_r+0x160>
 80190d6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80190da:	eeb4 6b47 	vcmp.f64	d6, d7
 80190de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190e2:	bf18      	it	ne
 80190e4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80190e8:	f1bb 0f16 	cmp.w	fp, #22
 80190ec:	d82b      	bhi.n	8019146 <_dtoa_r+0x1be>
 80190ee:	495e      	ldr	r1, [pc, #376]	; (8019268 <_dtoa_r+0x2e0>)
 80190f0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80190f4:	ed91 7b00 	vldr	d7, [r1]
 80190f8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80190fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019100:	d501      	bpl.n	8019106 <_dtoa_r+0x17e>
 8019102:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019106:	2100      	movs	r1, #0
 8019108:	e01e      	b.n	8019148 <_dtoa_r+0x1c0>
 801910a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801910c:	4413      	add	r3, r2
 801910e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8019112:	2920      	cmp	r1, #32
 8019114:	bfc1      	itttt	gt
 8019116:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 801911a:	408c      	lslgt	r4, r1
 801911c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8019120:	fa28 f101 	lsrgt.w	r1, r8, r1
 8019124:	bfd6      	itet	le
 8019126:	f1c1 0120 	rsble	r1, r1, #32
 801912a:	4321      	orrgt	r1, r4
 801912c:	fa08 f101 	lslle.w	r1, r8, r1
 8019130:	ee07 1a90 	vmov	s15, r1
 8019134:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8019138:	3b01      	subs	r3, #1
 801913a:	ee17 1a90 	vmov	r1, s15
 801913e:	2001      	movs	r0, #1
 8019140:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8019144:	e7a7      	b.n	8019096 <_dtoa_r+0x10e>
 8019146:	2101      	movs	r1, #1
 8019148:	1ad2      	subs	r2, r2, r3
 801914a:	1e53      	subs	r3, r2, #1
 801914c:	9305      	str	r3, [sp, #20]
 801914e:	bf45      	ittet	mi
 8019150:	f1c2 0301 	rsbmi	r3, r2, #1
 8019154:	9304      	strmi	r3, [sp, #16]
 8019156:	2300      	movpl	r3, #0
 8019158:	2300      	movmi	r3, #0
 801915a:	bf4c      	ite	mi
 801915c:	9305      	strmi	r3, [sp, #20]
 801915e:	9304      	strpl	r3, [sp, #16]
 8019160:	f1bb 0f00 	cmp.w	fp, #0
 8019164:	910b      	str	r1, [sp, #44]	; 0x2c
 8019166:	db18      	blt.n	801919a <_dtoa_r+0x212>
 8019168:	9b05      	ldr	r3, [sp, #20]
 801916a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801916e:	445b      	add	r3, fp
 8019170:	9305      	str	r3, [sp, #20]
 8019172:	2300      	movs	r3, #0
 8019174:	9a06      	ldr	r2, [sp, #24]
 8019176:	2a09      	cmp	r2, #9
 8019178:	d848      	bhi.n	801920c <_dtoa_r+0x284>
 801917a:	2a05      	cmp	r2, #5
 801917c:	bfc4      	itt	gt
 801917e:	3a04      	subgt	r2, #4
 8019180:	9206      	strgt	r2, [sp, #24]
 8019182:	9a06      	ldr	r2, [sp, #24]
 8019184:	f1a2 0202 	sub.w	r2, r2, #2
 8019188:	bfcc      	ite	gt
 801918a:	2400      	movgt	r4, #0
 801918c:	2401      	movle	r4, #1
 801918e:	2a03      	cmp	r2, #3
 8019190:	d847      	bhi.n	8019222 <_dtoa_r+0x29a>
 8019192:	e8df f002 	tbb	[pc, r2]
 8019196:	2d0b      	.short	0x2d0b
 8019198:	392b      	.short	0x392b
 801919a:	9b04      	ldr	r3, [sp, #16]
 801919c:	2200      	movs	r2, #0
 801919e:	eba3 030b 	sub.w	r3, r3, fp
 80191a2:	9304      	str	r3, [sp, #16]
 80191a4:	920a      	str	r2, [sp, #40]	; 0x28
 80191a6:	f1cb 0300 	rsb	r3, fp, #0
 80191aa:	e7e3      	b.n	8019174 <_dtoa_r+0x1ec>
 80191ac:	2200      	movs	r2, #0
 80191ae:	9207      	str	r2, [sp, #28]
 80191b0:	9a08      	ldr	r2, [sp, #32]
 80191b2:	2a00      	cmp	r2, #0
 80191b4:	dc38      	bgt.n	8019228 <_dtoa_r+0x2a0>
 80191b6:	f04f 0a01 	mov.w	sl, #1
 80191ba:	46d1      	mov	r9, sl
 80191bc:	4652      	mov	r2, sl
 80191be:	f8cd a020 	str.w	sl, [sp, #32]
 80191c2:	69f7      	ldr	r7, [r6, #28]
 80191c4:	2100      	movs	r1, #0
 80191c6:	2004      	movs	r0, #4
 80191c8:	f100 0c14 	add.w	ip, r0, #20
 80191cc:	4594      	cmp	ip, r2
 80191ce:	d930      	bls.n	8019232 <_dtoa_r+0x2aa>
 80191d0:	6079      	str	r1, [r7, #4]
 80191d2:	4630      	mov	r0, r6
 80191d4:	930d      	str	r3, [sp, #52]	; 0x34
 80191d6:	f000 fd43 	bl	8019c60 <_Balloc>
 80191da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80191dc:	9001      	str	r0, [sp, #4]
 80191de:	4602      	mov	r2, r0
 80191e0:	2800      	cmp	r0, #0
 80191e2:	d145      	bne.n	8019270 <_dtoa_r+0x2e8>
 80191e4:	4b21      	ldr	r3, [pc, #132]	; (801926c <_dtoa_r+0x2e4>)
 80191e6:	f240 11af 	movw	r1, #431	; 0x1af
 80191ea:	e6e5      	b.n	8018fb8 <_dtoa_r+0x30>
 80191ec:	2201      	movs	r2, #1
 80191ee:	e7de      	b.n	80191ae <_dtoa_r+0x226>
 80191f0:	2200      	movs	r2, #0
 80191f2:	9207      	str	r2, [sp, #28]
 80191f4:	9a08      	ldr	r2, [sp, #32]
 80191f6:	eb0b 0a02 	add.w	sl, fp, r2
 80191fa:	f10a 0901 	add.w	r9, sl, #1
 80191fe:	464a      	mov	r2, r9
 8019200:	2a01      	cmp	r2, #1
 8019202:	bfb8      	it	lt
 8019204:	2201      	movlt	r2, #1
 8019206:	e7dc      	b.n	80191c2 <_dtoa_r+0x23a>
 8019208:	2201      	movs	r2, #1
 801920a:	e7f2      	b.n	80191f2 <_dtoa_r+0x26a>
 801920c:	2401      	movs	r4, #1
 801920e:	2200      	movs	r2, #0
 8019210:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8019214:	f04f 3aff 	mov.w	sl, #4294967295
 8019218:	2100      	movs	r1, #0
 801921a:	46d1      	mov	r9, sl
 801921c:	2212      	movs	r2, #18
 801921e:	9108      	str	r1, [sp, #32]
 8019220:	e7cf      	b.n	80191c2 <_dtoa_r+0x23a>
 8019222:	2201      	movs	r2, #1
 8019224:	9207      	str	r2, [sp, #28]
 8019226:	e7f5      	b.n	8019214 <_dtoa_r+0x28c>
 8019228:	f8dd a020 	ldr.w	sl, [sp, #32]
 801922c:	46d1      	mov	r9, sl
 801922e:	4652      	mov	r2, sl
 8019230:	e7c7      	b.n	80191c2 <_dtoa_r+0x23a>
 8019232:	3101      	adds	r1, #1
 8019234:	0040      	lsls	r0, r0, #1
 8019236:	e7c7      	b.n	80191c8 <_dtoa_r+0x240>
 8019238:	636f4361 	.word	0x636f4361
 801923c:	3fd287a7 	.word	0x3fd287a7
 8019240:	8b60c8b3 	.word	0x8b60c8b3
 8019244:	3fc68a28 	.word	0x3fc68a28
 8019248:	509f79fb 	.word	0x509f79fb
 801924c:	3fd34413 	.word	0x3fd34413
 8019250:	0801c89e 	.word	0x0801c89e
 8019254:	0801c8b5 	.word	0x0801c8b5
 8019258:	7ff00000 	.word	0x7ff00000
 801925c:	0801c89a 	.word	0x0801c89a
 8019260:	0801c891 	.word	0x0801c891
 8019264:	0801c869 	.word	0x0801c869
 8019268:	0801c9a0 	.word	0x0801c9a0
 801926c:	0801c90d 	.word	0x0801c90d
 8019270:	69f2      	ldr	r2, [r6, #28]
 8019272:	9901      	ldr	r1, [sp, #4]
 8019274:	6011      	str	r1, [r2, #0]
 8019276:	f1b9 0f0e 	cmp.w	r9, #14
 801927a:	d86c      	bhi.n	8019356 <_dtoa_r+0x3ce>
 801927c:	2c00      	cmp	r4, #0
 801927e:	d06a      	beq.n	8019356 <_dtoa_r+0x3ce>
 8019280:	f1bb 0f00 	cmp.w	fp, #0
 8019284:	f340 80a0 	ble.w	80193c8 <_dtoa_r+0x440>
 8019288:	4ac1      	ldr	r2, [pc, #772]	; (8019590 <_dtoa_r+0x608>)
 801928a:	f00b 010f 	and.w	r1, fp, #15
 801928e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8019292:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8019296:	ed92 7b00 	vldr	d7, [r2]
 801929a:	ea4f 122b 	mov.w	r2, fp, asr #4
 801929e:	f000 8087 	beq.w	80193b0 <_dtoa_r+0x428>
 80192a2:	49bc      	ldr	r1, [pc, #752]	; (8019594 <_dtoa_r+0x60c>)
 80192a4:	ed91 6b08 	vldr	d6, [r1, #32]
 80192a8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80192ac:	ed8d 6b02 	vstr	d6, [sp, #8]
 80192b0:	f002 020f 	and.w	r2, r2, #15
 80192b4:	2103      	movs	r1, #3
 80192b6:	48b7      	ldr	r0, [pc, #732]	; (8019594 <_dtoa_r+0x60c>)
 80192b8:	2a00      	cmp	r2, #0
 80192ba:	d17b      	bne.n	80193b4 <_dtoa_r+0x42c>
 80192bc:	ed9d 6b02 	vldr	d6, [sp, #8]
 80192c0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80192c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80192c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80192ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 80192ce:	2a00      	cmp	r2, #0
 80192d0:	f000 80a0 	beq.w	8019414 <_dtoa_r+0x48c>
 80192d4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80192d8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80192dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192e0:	f140 8098 	bpl.w	8019414 <_dtoa_r+0x48c>
 80192e4:	f1b9 0f00 	cmp.w	r9, #0
 80192e8:	f000 8094 	beq.w	8019414 <_dtoa_r+0x48c>
 80192ec:	f1ba 0f00 	cmp.w	sl, #0
 80192f0:	dd2f      	ble.n	8019352 <_dtoa_r+0x3ca>
 80192f2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80192f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80192fa:	ed8d 7b02 	vstr	d7, [sp, #8]
 80192fe:	f10b 32ff 	add.w	r2, fp, #4294967295
 8019302:	3101      	adds	r1, #1
 8019304:	4654      	mov	r4, sl
 8019306:	ed9d 6b02 	vldr	d6, [sp, #8]
 801930a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801930e:	ee07 1a90 	vmov	s15, r1
 8019312:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8019316:	eea7 5b06 	vfma.f64	d5, d7, d6
 801931a:	ee15 7a90 	vmov	r7, s11
 801931e:	ec51 0b15 	vmov	r0, r1, d5
 8019322:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8019326:	2c00      	cmp	r4, #0
 8019328:	d177      	bne.n	801941a <_dtoa_r+0x492>
 801932a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801932e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8019332:	ec41 0b17 	vmov	d7, r0, r1
 8019336:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801933a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801933e:	f300 826a 	bgt.w	8019816 <_dtoa_r+0x88e>
 8019342:	eeb1 7b47 	vneg.f64	d7, d7
 8019346:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801934a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801934e:	f100 8260 	bmi.w	8019812 <_dtoa_r+0x88a>
 8019352:	ed8d 8b02 	vstr	d8, [sp, #8]
 8019356:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019358:	2a00      	cmp	r2, #0
 801935a:	f2c0 811d 	blt.w	8019598 <_dtoa_r+0x610>
 801935e:	f1bb 0f0e 	cmp.w	fp, #14
 8019362:	f300 8119 	bgt.w	8019598 <_dtoa_r+0x610>
 8019366:	4b8a      	ldr	r3, [pc, #552]	; (8019590 <_dtoa_r+0x608>)
 8019368:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801936c:	ed93 6b00 	vldr	d6, [r3]
 8019370:	9b08      	ldr	r3, [sp, #32]
 8019372:	2b00      	cmp	r3, #0
 8019374:	f280 80b7 	bge.w	80194e6 <_dtoa_r+0x55e>
 8019378:	f1b9 0f00 	cmp.w	r9, #0
 801937c:	f300 80b3 	bgt.w	80194e6 <_dtoa_r+0x55e>
 8019380:	f040 8246 	bne.w	8019810 <_dtoa_r+0x888>
 8019384:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8019388:	ee26 6b07 	vmul.f64	d6, d6, d7
 801938c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019390:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019398:	464c      	mov	r4, r9
 801939a:	464f      	mov	r7, r9
 801939c:	f280 821c 	bge.w	80197d8 <_dtoa_r+0x850>
 80193a0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80193a4:	2331      	movs	r3, #49	; 0x31
 80193a6:	f808 3b01 	strb.w	r3, [r8], #1
 80193aa:	f10b 0b01 	add.w	fp, fp, #1
 80193ae:	e218      	b.n	80197e2 <_dtoa_r+0x85a>
 80193b0:	2102      	movs	r1, #2
 80193b2:	e780      	b.n	80192b6 <_dtoa_r+0x32e>
 80193b4:	07d4      	lsls	r4, r2, #31
 80193b6:	d504      	bpl.n	80193c2 <_dtoa_r+0x43a>
 80193b8:	ed90 6b00 	vldr	d6, [r0]
 80193bc:	3101      	adds	r1, #1
 80193be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80193c2:	1052      	asrs	r2, r2, #1
 80193c4:	3008      	adds	r0, #8
 80193c6:	e777      	b.n	80192b8 <_dtoa_r+0x330>
 80193c8:	d022      	beq.n	8019410 <_dtoa_r+0x488>
 80193ca:	f1cb 0200 	rsb	r2, fp, #0
 80193ce:	4970      	ldr	r1, [pc, #448]	; (8019590 <_dtoa_r+0x608>)
 80193d0:	f002 000f 	and.w	r0, r2, #15
 80193d4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80193d8:	ed91 7b00 	vldr	d7, [r1]
 80193dc:	ee28 7b07 	vmul.f64	d7, d8, d7
 80193e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80193e4:	486b      	ldr	r0, [pc, #428]	; (8019594 <_dtoa_r+0x60c>)
 80193e6:	1112      	asrs	r2, r2, #4
 80193e8:	2400      	movs	r4, #0
 80193ea:	2102      	movs	r1, #2
 80193ec:	b92a      	cbnz	r2, 80193fa <_dtoa_r+0x472>
 80193ee:	2c00      	cmp	r4, #0
 80193f0:	f43f af6a 	beq.w	80192c8 <_dtoa_r+0x340>
 80193f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80193f8:	e766      	b.n	80192c8 <_dtoa_r+0x340>
 80193fa:	07d7      	lsls	r7, r2, #31
 80193fc:	d505      	bpl.n	801940a <_dtoa_r+0x482>
 80193fe:	ed90 6b00 	vldr	d6, [r0]
 8019402:	3101      	adds	r1, #1
 8019404:	2401      	movs	r4, #1
 8019406:	ee27 7b06 	vmul.f64	d7, d7, d6
 801940a:	1052      	asrs	r2, r2, #1
 801940c:	3008      	adds	r0, #8
 801940e:	e7ed      	b.n	80193ec <_dtoa_r+0x464>
 8019410:	2102      	movs	r1, #2
 8019412:	e759      	b.n	80192c8 <_dtoa_r+0x340>
 8019414:	465a      	mov	r2, fp
 8019416:	464c      	mov	r4, r9
 8019418:	e775      	b.n	8019306 <_dtoa_r+0x37e>
 801941a:	ec41 0b17 	vmov	d7, r0, r1
 801941e:	495c      	ldr	r1, [pc, #368]	; (8019590 <_dtoa_r+0x608>)
 8019420:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8019424:	ed11 4b02 	vldr	d4, [r1, #-8]
 8019428:	9901      	ldr	r1, [sp, #4]
 801942a:	440c      	add	r4, r1
 801942c:	9907      	ldr	r1, [sp, #28]
 801942e:	b351      	cbz	r1, 8019486 <_dtoa_r+0x4fe>
 8019430:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8019434:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8019438:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801943c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8019440:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8019444:	ee35 7b47 	vsub.f64	d7, d5, d7
 8019448:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801944c:	ee14 1a90 	vmov	r1, s9
 8019450:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8019454:	3130      	adds	r1, #48	; 0x30
 8019456:	ee36 6b45 	vsub.f64	d6, d6, d5
 801945a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801945e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019462:	f808 1b01 	strb.w	r1, [r8], #1
 8019466:	d439      	bmi.n	80194dc <_dtoa_r+0x554>
 8019468:	ee32 5b46 	vsub.f64	d5, d2, d6
 801946c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8019470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019474:	d472      	bmi.n	801955c <_dtoa_r+0x5d4>
 8019476:	45a0      	cmp	r8, r4
 8019478:	f43f af6b 	beq.w	8019352 <_dtoa_r+0x3ca>
 801947c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8019480:	ee26 6b03 	vmul.f64	d6, d6, d3
 8019484:	e7e0      	b.n	8019448 <_dtoa_r+0x4c0>
 8019486:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801948a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801948e:	4620      	mov	r0, r4
 8019490:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8019494:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8019498:	ee14 1a90 	vmov	r1, s9
 801949c:	3130      	adds	r1, #48	; 0x30
 801949e:	f808 1b01 	strb.w	r1, [r8], #1
 80194a2:	45a0      	cmp	r8, r4
 80194a4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80194a8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80194ac:	d118      	bne.n	80194e0 <_dtoa_r+0x558>
 80194ae:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80194b2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80194b6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80194ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194be:	dc4d      	bgt.n	801955c <_dtoa_r+0x5d4>
 80194c0:	ee35 5b47 	vsub.f64	d5, d5, d7
 80194c4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80194c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194cc:	f57f af41 	bpl.w	8019352 <_dtoa_r+0x3ca>
 80194d0:	4680      	mov	r8, r0
 80194d2:	3801      	subs	r0, #1
 80194d4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80194d8:	2b30      	cmp	r3, #48	; 0x30
 80194da:	d0f9      	beq.n	80194d0 <_dtoa_r+0x548>
 80194dc:	4693      	mov	fp, r2
 80194de:	e02a      	b.n	8019536 <_dtoa_r+0x5ae>
 80194e0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80194e4:	e7d6      	b.n	8019494 <_dtoa_r+0x50c>
 80194e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80194ea:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80194ee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80194f2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80194f6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80194fa:	ee15 3a10 	vmov	r3, s10
 80194fe:	3330      	adds	r3, #48	; 0x30
 8019500:	f808 3b01 	strb.w	r3, [r8], #1
 8019504:	9b01      	ldr	r3, [sp, #4]
 8019506:	eba8 0303 	sub.w	r3, r8, r3
 801950a:	4599      	cmp	r9, r3
 801950c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8019510:	eea3 7b46 	vfms.f64	d7, d3, d6
 8019514:	d133      	bne.n	801957e <_dtoa_r+0x5f6>
 8019516:	ee37 7b07 	vadd.f64	d7, d7, d7
 801951a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801951e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019522:	dc1a      	bgt.n	801955a <_dtoa_r+0x5d2>
 8019524:	eeb4 7b46 	vcmp.f64	d7, d6
 8019528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801952c:	d103      	bne.n	8019536 <_dtoa_r+0x5ae>
 801952e:	ee15 3a10 	vmov	r3, s10
 8019532:	07d9      	lsls	r1, r3, #31
 8019534:	d411      	bmi.n	801955a <_dtoa_r+0x5d2>
 8019536:	4629      	mov	r1, r5
 8019538:	4630      	mov	r0, r6
 801953a:	f000 fbd1 	bl	8019ce0 <_Bfree>
 801953e:	2300      	movs	r3, #0
 8019540:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019542:	f888 3000 	strb.w	r3, [r8]
 8019546:	f10b 0301 	add.w	r3, fp, #1
 801954a:	6013      	str	r3, [r2, #0]
 801954c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801954e:	2b00      	cmp	r3, #0
 8019550:	f43f ad69 	beq.w	8019026 <_dtoa_r+0x9e>
 8019554:	f8c3 8000 	str.w	r8, [r3]
 8019558:	e565      	b.n	8019026 <_dtoa_r+0x9e>
 801955a:	465a      	mov	r2, fp
 801955c:	4643      	mov	r3, r8
 801955e:	4698      	mov	r8, r3
 8019560:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8019564:	2939      	cmp	r1, #57	; 0x39
 8019566:	d106      	bne.n	8019576 <_dtoa_r+0x5ee>
 8019568:	9901      	ldr	r1, [sp, #4]
 801956a:	4299      	cmp	r1, r3
 801956c:	d1f7      	bne.n	801955e <_dtoa_r+0x5d6>
 801956e:	9801      	ldr	r0, [sp, #4]
 8019570:	2130      	movs	r1, #48	; 0x30
 8019572:	3201      	adds	r2, #1
 8019574:	7001      	strb	r1, [r0, #0]
 8019576:	7819      	ldrb	r1, [r3, #0]
 8019578:	3101      	adds	r1, #1
 801957a:	7019      	strb	r1, [r3, #0]
 801957c:	e7ae      	b.n	80194dc <_dtoa_r+0x554>
 801957e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8019582:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801958a:	d1b2      	bne.n	80194f2 <_dtoa_r+0x56a>
 801958c:	e7d3      	b.n	8019536 <_dtoa_r+0x5ae>
 801958e:	bf00      	nop
 8019590:	0801c9a0 	.word	0x0801c9a0
 8019594:	0801c978 	.word	0x0801c978
 8019598:	9907      	ldr	r1, [sp, #28]
 801959a:	2900      	cmp	r1, #0
 801959c:	f000 80d0 	beq.w	8019740 <_dtoa_r+0x7b8>
 80195a0:	9906      	ldr	r1, [sp, #24]
 80195a2:	2901      	cmp	r1, #1
 80195a4:	f300 80b4 	bgt.w	8019710 <_dtoa_r+0x788>
 80195a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80195aa:	2900      	cmp	r1, #0
 80195ac:	f000 80ac 	beq.w	8019708 <_dtoa_r+0x780>
 80195b0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80195b4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80195b8:	461c      	mov	r4, r3
 80195ba:	9309      	str	r3, [sp, #36]	; 0x24
 80195bc:	9b04      	ldr	r3, [sp, #16]
 80195be:	4413      	add	r3, r2
 80195c0:	9304      	str	r3, [sp, #16]
 80195c2:	9b05      	ldr	r3, [sp, #20]
 80195c4:	2101      	movs	r1, #1
 80195c6:	4413      	add	r3, r2
 80195c8:	4630      	mov	r0, r6
 80195ca:	9305      	str	r3, [sp, #20]
 80195cc:	f000 fc88 	bl	8019ee0 <__i2b>
 80195d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80195d2:	4607      	mov	r7, r0
 80195d4:	f1b8 0f00 	cmp.w	r8, #0
 80195d8:	d00d      	beq.n	80195f6 <_dtoa_r+0x66e>
 80195da:	9a05      	ldr	r2, [sp, #20]
 80195dc:	2a00      	cmp	r2, #0
 80195de:	dd0a      	ble.n	80195f6 <_dtoa_r+0x66e>
 80195e0:	4542      	cmp	r2, r8
 80195e2:	9904      	ldr	r1, [sp, #16]
 80195e4:	bfa8      	it	ge
 80195e6:	4642      	movge	r2, r8
 80195e8:	1a89      	subs	r1, r1, r2
 80195ea:	9104      	str	r1, [sp, #16]
 80195ec:	9905      	ldr	r1, [sp, #20]
 80195ee:	eba8 0802 	sub.w	r8, r8, r2
 80195f2:	1a8a      	subs	r2, r1, r2
 80195f4:	9205      	str	r2, [sp, #20]
 80195f6:	b303      	cbz	r3, 801963a <_dtoa_r+0x6b2>
 80195f8:	9a07      	ldr	r2, [sp, #28]
 80195fa:	2a00      	cmp	r2, #0
 80195fc:	f000 80a5 	beq.w	801974a <_dtoa_r+0x7c2>
 8019600:	2c00      	cmp	r4, #0
 8019602:	dd13      	ble.n	801962c <_dtoa_r+0x6a4>
 8019604:	4639      	mov	r1, r7
 8019606:	4622      	mov	r2, r4
 8019608:	4630      	mov	r0, r6
 801960a:	930d      	str	r3, [sp, #52]	; 0x34
 801960c:	f000 fd28 	bl	801a060 <__pow5mult>
 8019610:	462a      	mov	r2, r5
 8019612:	4601      	mov	r1, r0
 8019614:	4607      	mov	r7, r0
 8019616:	4630      	mov	r0, r6
 8019618:	f000 fc78 	bl	8019f0c <__multiply>
 801961c:	4629      	mov	r1, r5
 801961e:	9009      	str	r0, [sp, #36]	; 0x24
 8019620:	4630      	mov	r0, r6
 8019622:	f000 fb5d 	bl	8019ce0 <_Bfree>
 8019626:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019628:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801962a:	4615      	mov	r5, r2
 801962c:	1b1a      	subs	r2, r3, r4
 801962e:	d004      	beq.n	801963a <_dtoa_r+0x6b2>
 8019630:	4629      	mov	r1, r5
 8019632:	4630      	mov	r0, r6
 8019634:	f000 fd14 	bl	801a060 <__pow5mult>
 8019638:	4605      	mov	r5, r0
 801963a:	2101      	movs	r1, #1
 801963c:	4630      	mov	r0, r6
 801963e:	f000 fc4f 	bl	8019ee0 <__i2b>
 8019642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019644:	2b00      	cmp	r3, #0
 8019646:	4604      	mov	r4, r0
 8019648:	f340 8081 	ble.w	801974e <_dtoa_r+0x7c6>
 801964c:	461a      	mov	r2, r3
 801964e:	4601      	mov	r1, r0
 8019650:	4630      	mov	r0, r6
 8019652:	f000 fd05 	bl	801a060 <__pow5mult>
 8019656:	9b06      	ldr	r3, [sp, #24]
 8019658:	2b01      	cmp	r3, #1
 801965a:	4604      	mov	r4, r0
 801965c:	dd7a      	ble.n	8019754 <_dtoa_r+0x7cc>
 801965e:	2300      	movs	r3, #0
 8019660:	9309      	str	r3, [sp, #36]	; 0x24
 8019662:	6922      	ldr	r2, [r4, #16]
 8019664:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8019668:	6910      	ldr	r0, [r2, #16]
 801966a:	f000 fbeb 	bl	8019e44 <__hi0bits>
 801966e:	f1c0 0020 	rsb	r0, r0, #32
 8019672:	9b05      	ldr	r3, [sp, #20]
 8019674:	4418      	add	r0, r3
 8019676:	f010 001f 	ands.w	r0, r0, #31
 801967a:	f000 8093 	beq.w	80197a4 <_dtoa_r+0x81c>
 801967e:	f1c0 0220 	rsb	r2, r0, #32
 8019682:	2a04      	cmp	r2, #4
 8019684:	f340 8085 	ble.w	8019792 <_dtoa_r+0x80a>
 8019688:	9b04      	ldr	r3, [sp, #16]
 801968a:	f1c0 001c 	rsb	r0, r0, #28
 801968e:	4403      	add	r3, r0
 8019690:	9304      	str	r3, [sp, #16]
 8019692:	9b05      	ldr	r3, [sp, #20]
 8019694:	4480      	add	r8, r0
 8019696:	4403      	add	r3, r0
 8019698:	9305      	str	r3, [sp, #20]
 801969a:	9b04      	ldr	r3, [sp, #16]
 801969c:	2b00      	cmp	r3, #0
 801969e:	dd05      	ble.n	80196ac <_dtoa_r+0x724>
 80196a0:	4629      	mov	r1, r5
 80196a2:	461a      	mov	r2, r3
 80196a4:	4630      	mov	r0, r6
 80196a6:	f000 fd35 	bl	801a114 <__lshift>
 80196aa:	4605      	mov	r5, r0
 80196ac:	9b05      	ldr	r3, [sp, #20]
 80196ae:	2b00      	cmp	r3, #0
 80196b0:	dd05      	ble.n	80196be <_dtoa_r+0x736>
 80196b2:	4621      	mov	r1, r4
 80196b4:	461a      	mov	r2, r3
 80196b6:	4630      	mov	r0, r6
 80196b8:	f000 fd2c 	bl	801a114 <__lshift>
 80196bc:	4604      	mov	r4, r0
 80196be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	d071      	beq.n	80197a8 <_dtoa_r+0x820>
 80196c4:	4621      	mov	r1, r4
 80196c6:	4628      	mov	r0, r5
 80196c8:	f000 fd90 	bl	801a1ec <__mcmp>
 80196cc:	2800      	cmp	r0, #0
 80196ce:	da6b      	bge.n	80197a8 <_dtoa_r+0x820>
 80196d0:	2300      	movs	r3, #0
 80196d2:	4629      	mov	r1, r5
 80196d4:	220a      	movs	r2, #10
 80196d6:	4630      	mov	r0, r6
 80196d8:	f000 fb24 	bl	8019d24 <__multadd>
 80196dc:	9b07      	ldr	r3, [sp, #28]
 80196de:	f10b 3bff 	add.w	fp, fp, #4294967295
 80196e2:	4605      	mov	r5, r0
 80196e4:	2b00      	cmp	r3, #0
 80196e6:	f000 8197 	beq.w	8019a18 <_dtoa_r+0xa90>
 80196ea:	4639      	mov	r1, r7
 80196ec:	2300      	movs	r3, #0
 80196ee:	220a      	movs	r2, #10
 80196f0:	4630      	mov	r0, r6
 80196f2:	f000 fb17 	bl	8019d24 <__multadd>
 80196f6:	f1ba 0f00 	cmp.w	sl, #0
 80196fa:	4607      	mov	r7, r0
 80196fc:	f300 8093 	bgt.w	8019826 <_dtoa_r+0x89e>
 8019700:	9b06      	ldr	r3, [sp, #24]
 8019702:	2b02      	cmp	r3, #2
 8019704:	dc57      	bgt.n	80197b6 <_dtoa_r+0x82e>
 8019706:	e08e      	b.n	8019826 <_dtoa_r+0x89e>
 8019708:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801970a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801970e:	e751      	b.n	80195b4 <_dtoa_r+0x62c>
 8019710:	f109 34ff 	add.w	r4, r9, #4294967295
 8019714:	42a3      	cmp	r3, r4
 8019716:	bfbf      	itttt	lt
 8019718:	1ae2      	sublt	r2, r4, r3
 801971a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801971c:	189b      	addlt	r3, r3, r2
 801971e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8019720:	bfae      	itee	ge
 8019722:	1b1c      	subge	r4, r3, r4
 8019724:	4623      	movlt	r3, r4
 8019726:	2400      	movlt	r4, #0
 8019728:	f1b9 0f00 	cmp.w	r9, #0
 801972c:	bfb5      	itete	lt
 801972e:	9a04      	ldrlt	r2, [sp, #16]
 8019730:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8019734:	eba2 0809 	sublt.w	r8, r2, r9
 8019738:	464a      	movge	r2, r9
 801973a:	bfb8      	it	lt
 801973c:	2200      	movlt	r2, #0
 801973e:	e73c      	b.n	80195ba <_dtoa_r+0x632>
 8019740:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8019744:	9f07      	ldr	r7, [sp, #28]
 8019746:	461c      	mov	r4, r3
 8019748:	e744      	b.n	80195d4 <_dtoa_r+0x64c>
 801974a:	461a      	mov	r2, r3
 801974c:	e770      	b.n	8019630 <_dtoa_r+0x6a8>
 801974e:	9b06      	ldr	r3, [sp, #24]
 8019750:	2b01      	cmp	r3, #1
 8019752:	dc18      	bgt.n	8019786 <_dtoa_r+0x7fe>
 8019754:	9b02      	ldr	r3, [sp, #8]
 8019756:	b9b3      	cbnz	r3, 8019786 <_dtoa_r+0x7fe>
 8019758:	9b03      	ldr	r3, [sp, #12]
 801975a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801975e:	b9a2      	cbnz	r2, 801978a <_dtoa_r+0x802>
 8019760:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8019764:	0d12      	lsrs	r2, r2, #20
 8019766:	0512      	lsls	r2, r2, #20
 8019768:	b18a      	cbz	r2, 801978e <_dtoa_r+0x806>
 801976a:	9b04      	ldr	r3, [sp, #16]
 801976c:	3301      	adds	r3, #1
 801976e:	9304      	str	r3, [sp, #16]
 8019770:	9b05      	ldr	r3, [sp, #20]
 8019772:	3301      	adds	r3, #1
 8019774:	9305      	str	r3, [sp, #20]
 8019776:	2301      	movs	r3, #1
 8019778:	9309      	str	r3, [sp, #36]	; 0x24
 801977a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801977c:	2b00      	cmp	r3, #0
 801977e:	f47f af70 	bne.w	8019662 <_dtoa_r+0x6da>
 8019782:	2001      	movs	r0, #1
 8019784:	e775      	b.n	8019672 <_dtoa_r+0x6ea>
 8019786:	2300      	movs	r3, #0
 8019788:	e7f6      	b.n	8019778 <_dtoa_r+0x7f0>
 801978a:	9b02      	ldr	r3, [sp, #8]
 801978c:	e7f4      	b.n	8019778 <_dtoa_r+0x7f0>
 801978e:	9209      	str	r2, [sp, #36]	; 0x24
 8019790:	e7f3      	b.n	801977a <_dtoa_r+0x7f2>
 8019792:	d082      	beq.n	801969a <_dtoa_r+0x712>
 8019794:	9b04      	ldr	r3, [sp, #16]
 8019796:	321c      	adds	r2, #28
 8019798:	4413      	add	r3, r2
 801979a:	9304      	str	r3, [sp, #16]
 801979c:	9b05      	ldr	r3, [sp, #20]
 801979e:	4490      	add	r8, r2
 80197a0:	4413      	add	r3, r2
 80197a2:	e779      	b.n	8019698 <_dtoa_r+0x710>
 80197a4:	4602      	mov	r2, r0
 80197a6:	e7f5      	b.n	8019794 <_dtoa_r+0x80c>
 80197a8:	f1b9 0f00 	cmp.w	r9, #0
 80197ac:	dc36      	bgt.n	801981c <_dtoa_r+0x894>
 80197ae:	9b06      	ldr	r3, [sp, #24]
 80197b0:	2b02      	cmp	r3, #2
 80197b2:	dd33      	ble.n	801981c <_dtoa_r+0x894>
 80197b4:	46ca      	mov	sl, r9
 80197b6:	f1ba 0f00 	cmp.w	sl, #0
 80197ba:	d10d      	bne.n	80197d8 <_dtoa_r+0x850>
 80197bc:	4621      	mov	r1, r4
 80197be:	4653      	mov	r3, sl
 80197c0:	2205      	movs	r2, #5
 80197c2:	4630      	mov	r0, r6
 80197c4:	f000 faae 	bl	8019d24 <__multadd>
 80197c8:	4601      	mov	r1, r0
 80197ca:	4604      	mov	r4, r0
 80197cc:	4628      	mov	r0, r5
 80197ce:	f000 fd0d 	bl	801a1ec <__mcmp>
 80197d2:	2800      	cmp	r0, #0
 80197d4:	f73f ade4 	bgt.w	80193a0 <_dtoa_r+0x418>
 80197d8:	9b08      	ldr	r3, [sp, #32]
 80197da:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80197de:	ea6f 0b03 	mvn.w	fp, r3
 80197e2:	f04f 0900 	mov.w	r9, #0
 80197e6:	4621      	mov	r1, r4
 80197e8:	4630      	mov	r0, r6
 80197ea:	f000 fa79 	bl	8019ce0 <_Bfree>
 80197ee:	2f00      	cmp	r7, #0
 80197f0:	f43f aea1 	beq.w	8019536 <_dtoa_r+0x5ae>
 80197f4:	f1b9 0f00 	cmp.w	r9, #0
 80197f8:	d005      	beq.n	8019806 <_dtoa_r+0x87e>
 80197fa:	45b9      	cmp	r9, r7
 80197fc:	d003      	beq.n	8019806 <_dtoa_r+0x87e>
 80197fe:	4649      	mov	r1, r9
 8019800:	4630      	mov	r0, r6
 8019802:	f000 fa6d 	bl	8019ce0 <_Bfree>
 8019806:	4639      	mov	r1, r7
 8019808:	4630      	mov	r0, r6
 801980a:	f000 fa69 	bl	8019ce0 <_Bfree>
 801980e:	e692      	b.n	8019536 <_dtoa_r+0x5ae>
 8019810:	2400      	movs	r4, #0
 8019812:	4627      	mov	r7, r4
 8019814:	e7e0      	b.n	80197d8 <_dtoa_r+0x850>
 8019816:	4693      	mov	fp, r2
 8019818:	4627      	mov	r7, r4
 801981a:	e5c1      	b.n	80193a0 <_dtoa_r+0x418>
 801981c:	9b07      	ldr	r3, [sp, #28]
 801981e:	46ca      	mov	sl, r9
 8019820:	2b00      	cmp	r3, #0
 8019822:	f000 8100 	beq.w	8019a26 <_dtoa_r+0xa9e>
 8019826:	f1b8 0f00 	cmp.w	r8, #0
 801982a:	dd05      	ble.n	8019838 <_dtoa_r+0x8b0>
 801982c:	4639      	mov	r1, r7
 801982e:	4642      	mov	r2, r8
 8019830:	4630      	mov	r0, r6
 8019832:	f000 fc6f 	bl	801a114 <__lshift>
 8019836:	4607      	mov	r7, r0
 8019838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801983a:	2b00      	cmp	r3, #0
 801983c:	d05d      	beq.n	80198fa <_dtoa_r+0x972>
 801983e:	6879      	ldr	r1, [r7, #4]
 8019840:	4630      	mov	r0, r6
 8019842:	f000 fa0d 	bl	8019c60 <_Balloc>
 8019846:	4680      	mov	r8, r0
 8019848:	b928      	cbnz	r0, 8019856 <_dtoa_r+0x8ce>
 801984a:	4b82      	ldr	r3, [pc, #520]	; (8019a54 <_dtoa_r+0xacc>)
 801984c:	4602      	mov	r2, r0
 801984e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8019852:	f7ff bbb1 	b.w	8018fb8 <_dtoa_r+0x30>
 8019856:	693a      	ldr	r2, [r7, #16]
 8019858:	3202      	adds	r2, #2
 801985a:	0092      	lsls	r2, r2, #2
 801985c:	f107 010c 	add.w	r1, r7, #12
 8019860:	300c      	adds	r0, #12
 8019862:	f7ff faf4 	bl	8018e4e <memcpy>
 8019866:	2201      	movs	r2, #1
 8019868:	4641      	mov	r1, r8
 801986a:	4630      	mov	r0, r6
 801986c:	f000 fc52 	bl	801a114 <__lshift>
 8019870:	9b01      	ldr	r3, [sp, #4]
 8019872:	3301      	adds	r3, #1
 8019874:	9304      	str	r3, [sp, #16]
 8019876:	9b01      	ldr	r3, [sp, #4]
 8019878:	4453      	add	r3, sl
 801987a:	9308      	str	r3, [sp, #32]
 801987c:	9b02      	ldr	r3, [sp, #8]
 801987e:	f003 0301 	and.w	r3, r3, #1
 8019882:	46b9      	mov	r9, r7
 8019884:	9307      	str	r3, [sp, #28]
 8019886:	4607      	mov	r7, r0
 8019888:	9b04      	ldr	r3, [sp, #16]
 801988a:	4621      	mov	r1, r4
 801988c:	3b01      	subs	r3, #1
 801988e:	4628      	mov	r0, r5
 8019890:	9302      	str	r3, [sp, #8]
 8019892:	f7ff faf1 	bl	8018e78 <quorem>
 8019896:	4603      	mov	r3, r0
 8019898:	3330      	adds	r3, #48	; 0x30
 801989a:	9005      	str	r0, [sp, #20]
 801989c:	4649      	mov	r1, r9
 801989e:	4628      	mov	r0, r5
 80198a0:	9309      	str	r3, [sp, #36]	; 0x24
 80198a2:	f000 fca3 	bl	801a1ec <__mcmp>
 80198a6:	463a      	mov	r2, r7
 80198a8:	4682      	mov	sl, r0
 80198aa:	4621      	mov	r1, r4
 80198ac:	4630      	mov	r0, r6
 80198ae:	f000 fcb9 	bl	801a224 <__mdiff>
 80198b2:	68c2      	ldr	r2, [r0, #12]
 80198b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80198b6:	4680      	mov	r8, r0
 80198b8:	bb0a      	cbnz	r2, 80198fe <_dtoa_r+0x976>
 80198ba:	4601      	mov	r1, r0
 80198bc:	4628      	mov	r0, r5
 80198be:	f000 fc95 	bl	801a1ec <__mcmp>
 80198c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80198c4:	4602      	mov	r2, r0
 80198c6:	4641      	mov	r1, r8
 80198c8:	4630      	mov	r0, r6
 80198ca:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80198ce:	f000 fa07 	bl	8019ce0 <_Bfree>
 80198d2:	9b06      	ldr	r3, [sp, #24]
 80198d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80198d6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80198da:	ea43 0102 	orr.w	r1, r3, r2
 80198de:	9b07      	ldr	r3, [sp, #28]
 80198e0:	4319      	orrs	r1, r3
 80198e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80198e4:	d10d      	bne.n	8019902 <_dtoa_r+0x97a>
 80198e6:	2b39      	cmp	r3, #57	; 0x39
 80198e8:	d029      	beq.n	801993e <_dtoa_r+0x9b6>
 80198ea:	f1ba 0f00 	cmp.w	sl, #0
 80198ee:	dd01      	ble.n	80198f4 <_dtoa_r+0x96c>
 80198f0:	9b05      	ldr	r3, [sp, #20]
 80198f2:	3331      	adds	r3, #49	; 0x31
 80198f4:	9a02      	ldr	r2, [sp, #8]
 80198f6:	7013      	strb	r3, [r2, #0]
 80198f8:	e775      	b.n	80197e6 <_dtoa_r+0x85e>
 80198fa:	4638      	mov	r0, r7
 80198fc:	e7b8      	b.n	8019870 <_dtoa_r+0x8e8>
 80198fe:	2201      	movs	r2, #1
 8019900:	e7e1      	b.n	80198c6 <_dtoa_r+0x93e>
 8019902:	f1ba 0f00 	cmp.w	sl, #0
 8019906:	db06      	blt.n	8019916 <_dtoa_r+0x98e>
 8019908:	9906      	ldr	r1, [sp, #24]
 801990a:	ea41 0a0a 	orr.w	sl, r1, sl
 801990e:	9907      	ldr	r1, [sp, #28]
 8019910:	ea5a 0a01 	orrs.w	sl, sl, r1
 8019914:	d120      	bne.n	8019958 <_dtoa_r+0x9d0>
 8019916:	2a00      	cmp	r2, #0
 8019918:	ddec      	ble.n	80198f4 <_dtoa_r+0x96c>
 801991a:	4629      	mov	r1, r5
 801991c:	2201      	movs	r2, #1
 801991e:	4630      	mov	r0, r6
 8019920:	9304      	str	r3, [sp, #16]
 8019922:	f000 fbf7 	bl	801a114 <__lshift>
 8019926:	4621      	mov	r1, r4
 8019928:	4605      	mov	r5, r0
 801992a:	f000 fc5f 	bl	801a1ec <__mcmp>
 801992e:	2800      	cmp	r0, #0
 8019930:	9b04      	ldr	r3, [sp, #16]
 8019932:	dc02      	bgt.n	801993a <_dtoa_r+0x9b2>
 8019934:	d1de      	bne.n	80198f4 <_dtoa_r+0x96c>
 8019936:	07da      	lsls	r2, r3, #31
 8019938:	d5dc      	bpl.n	80198f4 <_dtoa_r+0x96c>
 801993a:	2b39      	cmp	r3, #57	; 0x39
 801993c:	d1d8      	bne.n	80198f0 <_dtoa_r+0x968>
 801993e:	9a02      	ldr	r2, [sp, #8]
 8019940:	2339      	movs	r3, #57	; 0x39
 8019942:	7013      	strb	r3, [r2, #0]
 8019944:	4643      	mov	r3, r8
 8019946:	4698      	mov	r8, r3
 8019948:	3b01      	subs	r3, #1
 801994a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801994e:	2a39      	cmp	r2, #57	; 0x39
 8019950:	d051      	beq.n	80199f6 <_dtoa_r+0xa6e>
 8019952:	3201      	adds	r2, #1
 8019954:	701a      	strb	r2, [r3, #0]
 8019956:	e746      	b.n	80197e6 <_dtoa_r+0x85e>
 8019958:	2a00      	cmp	r2, #0
 801995a:	dd03      	ble.n	8019964 <_dtoa_r+0x9dc>
 801995c:	2b39      	cmp	r3, #57	; 0x39
 801995e:	d0ee      	beq.n	801993e <_dtoa_r+0x9b6>
 8019960:	3301      	adds	r3, #1
 8019962:	e7c7      	b.n	80198f4 <_dtoa_r+0x96c>
 8019964:	9a04      	ldr	r2, [sp, #16]
 8019966:	9908      	ldr	r1, [sp, #32]
 8019968:	f802 3c01 	strb.w	r3, [r2, #-1]
 801996c:	428a      	cmp	r2, r1
 801996e:	d02b      	beq.n	80199c8 <_dtoa_r+0xa40>
 8019970:	4629      	mov	r1, r5
 8019972:	2300      	movs	r3, #0
 8019974:	220a      	movs	r2, #10
 8019976:	4630      	mov	r0, r6
 8019978:	f000 f9d4 	bl	8019d24 <__multadd>
 801997c:	45b9      	cmp	r9, r7
 801997e:	4605      	mov	r5, r0
 8019980:	f04f 0300 	mov.w	r3, #0
 8019984:	f04f 020a 	mov.w	r2, #10
 8019988:	4649      	mov	r1, r9
 801998a:	4630      	mov	r0, r6
 801998c:	d107      	bne.n	801999e <_dtoa_r+0xa16>
 801998e:	f000 f9c9 	bl	8019d24 <__multadd>
 8019992:	4681      	mov	r9, r0
 8019994:	4607      	mov	r7, r0
 8019996:	9b04      	ldr	r3, [sp, #16]
 8019998:	3301      	adds	r3, #1
 801999a:	9304      	str	r3, [sp, #16]
 801999c:	e774      	b.n	8019888 <_dtoa_r+0x900>
 801999e:	f000 f9c1 	bl	8019d24 <__multadd>
 80199a2:	4639      	mov	r1, r7
 80199a4:	4681      	mov	r9, r0
 80199a6:	2300      	movs	r3, #0
 80199a8:	220a      	movs	r2, #10
 80199aa:	4630      	mov	r0, r6
 80199ac:	f000 f9ba 	bl	8019d24 <__multadd>
 80199b0:	4607      	mov	r7, r0
 80199b2:	e7f0      	b.n	8019996 <_dtoa_r+0xa0e>
 80199b4:	f1ba 0f00 	cmp.w	sl, #0
 80199b8:	9a01      	ldr	r2, [sp, #4]
 80199ba:	bfcc      	ite	gt
 80199bc:	46d0      	movgt	r8, sl
 80199be:	f04f 0801 	movle.w	r8, #1
 80199c2:	4490      	add	r8, r2
 80199c4:	f04f 0900 	mov.w	r9, #0
 80199c8:	4629      	mov	r1, r5
 80199ca:	2201      	movs	r2, #1
 80199cc:	4630      	mov	r0, r6
 80199ce:	9302      	str	r3, [sp, #8]
 80199d0:	f000 fba0 	bl	801a114 <__lshift>
 80199d4:	4621      	mov	r1, r4
 80199d6:	4605      	mov	r5, r0
 80199d8:	f000 fc08 	bl	801a1ec <__mcmp>
 80199dc:	2800      	cmp	r0, #0
 80199de:	dcb1      	bgt.n	8019944 <_dtoa_r+0x9bc>
 80199e0:	d102      	bne.n	80199e8 <_dtoa_r+0xa60>
 80199e2:	9b02      	ldr	r3, [sp, #8]
 80199e4:	07db      	lsls	r3, r3, #31
 80199e6:	d4ad      	bmi.n	8019944 <_dtoa_r+0x9bc>
 80199e8:	4643      	mov	r3, r8
 80199ea:	4698      	mov	r8, r3
 80199ec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80199f0:	2a30      	cmp	r2, #48	; 0x30
 80199f2:	d0fa      	beq.n	80199ea <_dtoa_r+0xa62>
 80199f4:	e6f7      	b.n	80197e6 <_dtoa_r+0x85e>
 80199f6:	9a01      	ldr	r2, [sp, #4]
 80199f8:	429a      	cmp	r2, r3
 80199fa:	d1a4      	bne.n	8019946 <_dtoa_r+0x9be>
 80199fc:	f10b 0b01 	add.w	fp, fp, #1
 8019a00:	2331      	movs	r3, #49	; 0x31
 8019a02:	e778      	b.n	80198f6 <_dtoa_r+0x96e>
 8019a04:	4b14      	ldr	r3, [pc, #80]	; (8019a58 <_dtoa_r+0xad0>)
 8019a06:	f7ff bb2a 	b.w	801905e <_dtoa_r+0xd6>
 8019a0a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019a0c:	2b00      	cmp	r3, #0
 8019a0e:	f47f ab05 	bne.w	801901c <_dtoa_r+0x94>
 8019a12:	4b12      	ldr	r3, [pc, #72]	; (8019a5c <_dtoa_r+0xad4>)
 8019a14:	f7ff bb23 	b.w	801905e <_dtoa_r+0xd6>
 8019a18:	f1ba 0f00 	cmp.w	sl, #0
 8019a1c:	dc03      	bgt.n	8019a26 <_dtoa_r+0xa9e>
 8019a1e:	9b06      	ldr	r3, [sp, #24]
 8019a20:	2b02      	cmp	r3, #2
 8019a22:	f73f aec8 	bgt.w	80197b6 <_dtoa_r+0x82e>
 8019a26:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8019a2a:	4621      	mov	r1, r4
 8019a2c:	4628      	mov	r0, r5
 8019a2e:	f7ff fa23 	bl	8018e78 <quorem>
 8019a32:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8019a36:	f808 3b01 	strb.w	r3, [r8], #1
 8019a3a:	9a01      	ldr	r2, [sp, #4]
 8019a3c:	eba8 0202 	sub.w	r2, r8, r2
 8019a40:	4592      	cmp	sl, r2
 8019a42:	ddb7      	ble.n	80199b4 <_dtoa_r+0xa2c>
 8019a44:	4629      	mov	r1, r5
 8019a46:	2300      	movs	r3, #0
 8019a48:	220a      	movs	r2, #10
 8019a4a:	4630      	mov	r0, r6
 8019a4c:	f000 f96a 	bl	8019d24 <__multadd>
 8019a50:	4605      	mov	r5, r0
 8019a52:	e7ea      	b.n	8019a2a <_dtoa_r+0xaa2>
 8019a54:	0801c90d 	.word	0x0801c90d
 8019a58:	0801c868 	.word	0x0801c868
 8019a5c:	0801c891 	.word	0x0801c891

08019a60 <_free_r>:
 8019a60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019a62:	2900      	cmp	r1, #0
 8019a64:	d044      	beq.n	8019af0 <_free_r+0x90>
 8019a66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019a6a:	9001      	str	r0, [sp, #4]
 8019a6c:	2b00      	cmp	r3, #0
 8019a6e:	f1a1 0404 	sub.w	r4, r1, #4
 8019a72:	bfb8      	it	lt
 8019a74:	18e4      	addlt	r4, r4, r3
 8019a76:	f000 f8e7 	bl	8019c48 <__malloc_lock>
 8019a7a:	4a1e      	ldr	r2, [pc, #120]	; (8019af4 <_free_r+0x94>)
 8019a7c:	9801      	ldr	r0, [sp, #4]
 8019a7e:	6813      	ldr	r3, [r2, #0]
 8019a80:	b933      	cbnz	r3, 8019a90 <_free_r+0x30>
 8019a82:	6063      	str	r3, [r4, #4]
 8019a84:	6014      	str	r4, [r2, #0]
 8019a86:	b003      	add	sp, #12
 8019a88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019a8c:	f000 b8e2 	b.w	8019c54 <__malloc_unlock>
 8019a90:	42a3      	cmp	r3, r4
 8019a92:	d908      	bls.n	8019aa6 <_free_r+0x46>
 8019a94:	6825      	ldr	r5, [r4, #0]
 8019a96:	1961      	adds	r1, r4, r5
 8019a98:	428b      	cmp	r3, r1
 8019a9a:	bf01      	itttt	eq
 8019a9c:	6819      	ldreq	r1, [r3, #0]
 8019a9e:	685b      	ldreq	r3, [r3, #4]
 8019aa0:	1949      	addeq	r1, r1, r5
 8019aa2:	6021      	streq	r1, [r4, #0]
 8019aa4:	e7ed      	b.n	8019a82 <_free_r+0x22>
 8019aa6:	461a      	mov	r2, r3
 8019aa8:	685b      	ldr	r3, [r3, #4]
 8019aaa:	b10b      	cbz	r3, 8019ab0 <_free_r+0x50>
 8019aac:	42a3      	cmp	r3, r4
 8019aae:	d9fa      	bls.n	8019aa6 <_free_r+0x46>
 8019ab0:	6811      	ldr	r1, [r2, #0]
 8019ab2:	1855      	adds	r5, r2, r1
 8019ab4:	42a5      	cmp	r5, r4
 8019ab6:	d10b      	bne.n	8019ad0 <_free_r+0x70>
 8019ab8:	6824      	ldr	r4, [r4, #0]
 8019aba:	4421      	add	r1, r4
 8019abc:	1854      	adds	r4, r2, r1
 8019abe:	42a3      	cmp	r3, r4
 8019ac0:	6011      	str	r1, [r2, #0]
 8019ac2:	d1e0      	bne.n	8019a86 <_free_r+0x26>
 8019ac4:	681c      	ldr	r4, [r3, #0]
 8019ac6:	685b      	ldr	r3, [r3, #4]
 8019ac8:	6053      	str	r3, [r2, #4]
 8019aca:	440c      	add	r4, r1
 8019acc:	6014      	str	r4, [r2, #0]
 8019ace:	e7da      	b.n	8019a86 <_free_r+0x26>
 8019ad0:	d902      	bls.n	8019ad8 <_free_r+0x78>
 8019ad2:	230c      	movs	r3, #12
 8019ad4:	6003      	str	r3, [r0, #0]
 8019ad6:	e7d6      	b.n	8019a86 <_free_r+0x26>
 8019ad8:	6825      	ldr	r5, [r4, #0]
 8019ada:	1961      	adds	r1, r4, r5
 8019adc:	428b      	cmp	r3, r1
 8019ade:	bf04      	itt	eq
 8019ae0:	6819      	ldreq	r1, [r3, #0]
 8019ae2:	685b      	ldreq	r3, [r3, #4]
 8019ae4:	6063      	str	r3, [r4, #4]
 8019ae6:	bf04      	itt	eq
 8019ae8:	1949      	addeq	r1, r1, r5
 8019aea:	6021      	streq	r1, [r4, #0]
 8019aec:	6054      	str	r4, [r2, #4]
 8019aee:	e7ca      	b.n	8019a86 <_free_r+0x26>
 8019af0:	b003      	add	sp, #12
 8019af2:	bd30      	pop	{r4, r5, pc}
 8019af4:	24003374 	.word	0x24003374

08019af8 <malloc>:
 8019af8:	4b02      	ldr	r3, [pc, #8]	; (8019b04 <malloc+0xc>)
 8019afa:	4601      	mov	r1, r0
 8019afc:	6818      	ldr	r0, [r3, #0]
 8019afe:	f000 b823 	b.w	8019b48 <_malloc_r>
 8019b02:	bf00      	nop
 8019b04:	24000184 	.word	0x24000184

08019b08 <sbrk_aligned>:
 8019b08:	b570      	push	{r4, r5, r6, lr}
 8019b0a:	4e0e      	ldr	r6, [pc, #56]	; (8019b44 <sbrk_aligned+0x3c>)
 8019b0c:	460c      	mov	r4, r1
 8019b0e:	6831      	ldr	r1, [r6, #0]
 8019b10:	4605      	mov	r5, r0
 8019b12:	b911      	cbnz	r1, 8019b1a <sbrk_aligned+0x12>
 8019b14:	f001 fdd6 	bl	801b6c4 <_sbrk_r>
 8019b18:	6030      	str	r0, [r6, #0]
 8019b1a:	4621      	mov	r1, r4
 8019b1c:	4628      	mov	r0, r5
 8019b1e:	f001 fdd1 	bl	801b6c4 <_sbrk_r>
 8019b22:	1c43      	adds	r3, r0, #1
 8019b24:	d00a      	beq.n	8019b3c <sbrk_aligned+0x34>
 8019b26:	1cc4      	adds	r4, r0, #3
 8019b28:	f024 0403 	bic.w	r4, r4, #3
 8019b2c:	42a0      	cmp	r0, r4
 8019b2e:	d007      	beq.n	8019b40 <sbrk_aligned+0x38>
 8019b30:	1a21      	subs	r1, r4, r0
 8019b32:	4628      	mov	r0, r5
 8019b34:	f001 fdc6 	bl	801b6c4 <_sbrk_r>
 8019b38:	3001      	adds	r0, #1
 8019b3a:	d101      	bne.n	8019b40 <sbrk_aligned+0x38>
 8019b3c:	f04f 34ff 	mov.w	r4, #4294967295
 8019b40:	4620      	mov	r0, r4
 8019b42:	bd70      	pop	{r4, r5, r6, pc}
 8019b44:	24003378 	.word	0x24003378

08019b48 <_malloc_r>:
 8019b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019b4c:	1ccd      	adds	r5, r1, #3
 8019b4e:	f025 0503 	bic.w	r5, r5, #3
 8019b52:	3508      	adds	r5, #8
 8019b54:	2d0c      	cmp	r5, #12
 8019b56:	bf38      	it	cc
 8019b58:	250c      	movcc	r5, #12
 8019b5a:	2d00      	cmp	r5, #0
 8019b5c:	4607      	mov	r7, r0
 8019b5e:	db01      	blt.n	8019b64 <_malloc_r+0x1c>
 8019b60:	42a9      	cmp	r1, r5
 8019b62:	d905      	bls.n	8019b70 <_malloc_r+0x28>
 8019b64:	230c      	movs	r3, #12
 8019b66:	603b      	str	r3, [r7, #0]
 8019b68:	2600      	movs	r6, #0
 8019b6a:	4630      	mov	r0, r6
 8019b6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019b70:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8019c44 <_malloc_r+0xfc>
 8019b74:	f000 f868 	bl	8019c48 <__malloc_lock>
 8019b78:	f8d8 3000 	ldr.w	r3, [r8]
 8019b7c:	461c      	mov	r4, r3
 8019b7e:	bb5c      	cbnz	r4, 8019bd8 <_malloc_r+0x90>
 8019b80:	4629      	mov	r1, r5
 8019b82:	4638      	mov	r0, r7
 8019b84:	f7ff ffc0 	bl	8019b08 <sbrk_aligned>
 8019b88:	1c43      	adds	r3, r0, #1
 8019b8a:	4604      	mov	r4, r0
 8019b8c:	d155      	bne.n	8019c3a <_malloc_r+0xf2>
 8019b8e:	f8d8 4000 	ldr.w	r4, [r8]
 8019b92:	4626      	mov	r6, r4
 8019b94:	2e00      	cmp	r6, #0
 8019b96:	d145      	bne.n	8019c24 <_malloc_r+0xdc>
 8019b98:	2c00      	cmp	r4, #0
 8019b9a:	d048      	beq.n	8019c2e <_malloc_r+0xe6>
 8019b9c:	6823      	ldr	r3, [r4, #0]
 8019b9e:	4631      	mov	r1, r6
 8019ba0:	4638      	mov	r0, r7
 8019ba2:	eb04 0903 	add.w	r9, r4, r3
 8019ba6:	f001 fd8d 	bl	801b6c4 <_sbrk_r>
 8019baa:	4581      	cmp	r9, r0
 8019bac:	d13f      	bne.n	8019c2e <_malloc_r+0xe6>
 8019bae:	6821      	ldr	r1, [r4, #0]
 8019bb0:	1a6d      	subs	r5, r5, r1
 8019bb2:	4629      	mov	r1, r5
 8019bb4:	4638      	mov	r0, r7
 8019bb6:	f7ff ffa7 	bl	8019b08 <sbrk_aligned>
 8019bba:	3001      	adds	r0, #1
 8019bbc:	d037      	beq.n	8019c2e <_malloc_r+0xe6>
 8019bbe:	6823      	ldr	r3, [r4, #0]
 8019bc0:	442b      	add	r3, r5
 8019bc2:	6023      	str	r3, [r4, #0]
 8019bc4:	f8d8 3000 	ldr.w	r3, [r8]
 8019bc8:	2b00      	cmp	r3, #0
 8019bca:	d038      	beq.n	8019c3e <_malloc_r+0xf6>
 8019bcc:	685a      	ldr	r2, [r3, #4]
 8019bce:	42a2      	cmp	r2, r4
 8019bd0:	d12b      	bne.n	8019c2a <_malloc_r+0xe2>
 8019bd2:	2200      	movs	r2, #0
 8019bd4:	605a      	str	r2, [r3, #4]
 8019bd6:	e00f      	b.n	8019bf8 <_malloc_r+0xb0>
 8019bd8:	6822      	ldr	r2, [r4, #0]
 8019bda:	1b52      	subs	r2, r2, r5
 8019bdc:	d41f      	bmi.n	8019c1e <_malloc_r+0xd6>
 8019bde:	2a0b      	cmp	r2, #11
 8019be0:	d917      	bls.n	8019c12 <_malloc_r+0xca>
 8019be2:	1961      	adds	r1, r4, r5
 8019be4:	42a3      	cmp	r3, r4
 8019be6:	6025      	str	r5, [r4, #0]
 8019be8:	bf18      	it	ne
 8019bea:	6059      	strne	r1, [r3, #4]
 8019bec:	6863      	ldr	r3, [r4, #4]
 8019bee:	bf08      	it	eq
 8019bf0:	f8c8 1000 	streq.w	r1, [r8]
 8019bf4:	5162      	str	r2, [r4, r5]
 8019bf6:	604b      	str	r3, [r1, #4]
 8019bf8:	4638      	mov	r0, r7
 8019bfa:	f104 060b 	add.w	r6, r4, #11
 8019bfe:	f000 f829 	bl	8019c54 <__malloc_unlock>
 8019c02:	f026 0607 	bic.w	r6, r6, #7
 8019c06:	1d23      	adds	r3, r4, #4
 8019c08:	1af2      	subs	r2, r6, r3
 8019c0a:	d0ae      	beq.n	8019b6a <_malloc_r+0x22>
 8019c0c:	1b9b      	subs	r3, r3, r6
 8019c0e:	50a3      	str	r3, [r4, r2]
 8019c10:	e7ab      	b.n	8019b6a <_malloc_r+0x22>
 8019c12:	42a3      	cmp	r3, r4
 8019c14:	6862      	ldr	r2, [r4, #4]
 8019c16:	d1dd      	bne.n	8019bd4 <_malloc_r+0x8c>
 8019c18:	f8c8 2000 	str.w	r2, [r8]
 8019c1c:	e7ec      	b.n	8019bf8 <_malloc_r+0xb0>
 8019c1e:	4623      	mov	r3, r4
 8019c20:	6864      	ldr	r4, [r4, #4]
 8019c22:	e7ac      	b.n	8019b7e <_malloc_r+0x36>
 8019c24:	4634      	mov	r4, r6
 8019c26:	6876      	ldr	r6, [r6, #4]
 8019c28:	e7b4      	b.n	8019b94 <_malloc_r+0x4c>
 8019c2a:	4613      	mov	r3, r2
 8019c2c:	e7cc      	b.n	8019bc8 <_malloc_r+0x80>
 8019c2e:	230c      	movs	r3, #12
 8019c30:	603b      	str	r3, [r7, #0]
 8019c32:	4638      	mov	r0, r7
 8019c34:	f000 f80e 	bl	8019c54 <__malloc_unlock>
 8019c38:	e797      	b.n	8019b6a <_malloc_r+0x22>
 8019c3a:	6025      	str	r5, [r4, #0]
 8019c3c:	e7dc      	b.n	8019bf8 <_malloc_r+0xb0>
 8019c3e:	605b      	str	r3, [r3, #4]
 8019c40:	deff      	udf	#255	; 0xff
 8019c42:	bf00      	nop
 8019c44:	24003374 	.word	0x24003374

08019c48 <__malloc_lock>:
 8019c48:	4801      	ldr	r0, [pc, #4]	; (8019c50 <__malloc_lock+0x8>)
 8019c4a:	f7ff b8fe 	b.w	8018e4a <__retarget_lock_acquire_recursive>
 8019c4e:	bf00      	nop
 8019c50:	24003370 	.word	0x24003370

08019c54 <__malloc_unlock>:
 8019c54:	4801      	ldr	r0, [pc, #4]	; (8019c5c <__malloc_unlock+0x8>)
 8019c56:	f7ff b8f9 	b.w	8018e4c <__retarget_lock_release_recursive>
 8019c5a:	bf00      	nop
 8019c5c:	24003370 	.word	0x24003370

08019c60 <_Balloc>:
 8019c60:	b570      	push	{r4, r5, r6, lr}
 8019c62:	69c6      	ldr	r6, [r0, #28]
 8019c64:	4604      	mov	r4, r0
 8019c66:	460d      	mov	r5, r1
 8019c68:	b976      	cbnz	r6, 8019c88 <_Balloc+0x28>
 8019c6a:	2010      	movs	r0, #16
 8019c6c:	f7ff ff44 	bl	8019af8 <malloc>
 8019c70:	4602      	mov	r2, r0
 8019c72:	61e0      	str	r0, [r4, #28]
 8019c74:	b920      	cbnz	r0, 8019c80 <_Balloc+0x20>
 8019c76:	4b18      	ldr	r3, [pc, #96]	; (8019cd8 <_Balloc+0x78>)
 8019c78:	4818      	ldr	r0, [pc, #96]	; (8019cdc <_Balloc+0x7c>)
 8019c7a:	216b      	movs	r1, #107	; 0x6b
 8019c7c:	f001 fd3c 	bl	801b6f8 <__assert_func>
 8019c80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019c84:	6006      	str	r6, [r0, #0]
 8019c86:	60c6      	str	r6, [r0, #12]
 8019c88:	69e6      	ldr	r6, [r4, #28]
 8019c8a:	68f3      	ldr	r3, [r6, #12]
 8019c8c:	b183      	cbz	r3, 8019cb0 <_Balloc+0x50>
 8019c8e:	69e3      	ldr	r3, [r4, #28]
 8019c90:	68db      	ldr	r3, [r3, #12]
 8019c92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019c96:	b9b8      	cbnz	r0, 8019cc8 <_Balloc+0x68>
 8019c98:	2101      	movs	r1, #1
 8019c9a:	fa01 f605 	lsl.w	r6, r1, r5
 8019c9e:	1d72      	adds	r2, r6, #5
 8019ca0:	0092      	lsls	r2, r2, #2
 8019ca2:	4620      	mov	r0, r4
 8019ca4:	f001 fd46 	bl	801b734 <_calloc_r>
 8019ca8:	b160      	cbz	r0, 8019cc4 <_Balloc+0x64>
 8019caa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8019cae:	e00e      	b.n	8019cce <_Balloc+0x6e>
 8019cb0:	2221      	movs	r2, #33	; 0x21
 8019cb2:	2104      	movs	r1, #4
 8019cb4:	4620      	mov	r0, r4
 8019cb6:	f001 fd3d 	bl	801b734 <_calloc_r>
 8019cba:	69e3      	ldr	r3, [r4, #28]
 8019cbc:	60f0      	str	r0, [r6, #12]
 8019cbe:	68db      	ldr	r3, [r3, #12]
 8019cc0:	2b00      	cmp	r3, #0
 8019cc2:	d1e4      	bne.n	8019c8e <_Balloc+0x2e>
 8019cc4:	2000      	movs	r0, #0
 8019cc6:	bd70      	pop	{r4, r5, r6, pc}
 8019cc8:	6802      	ldr	r2, [r0, #0]
 8019cca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019cce:	2300      	movs	r3, #0
 8019cd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019cd4:	e7f7      	b.n	8019cc6 <_Balloc+0x66>
 8019cd6:	bf00      	nop
 8019cd8:	0801c89e 	.word	0x0801c89e
 8019cdc:	0801c91e 	.word	0x0801c91e

08019ce0 <_Bfree>:
 8019ce0:	b570      	push	{r4, r5, r6, lr}
 8019ce2:	69c6      	ldr	r6, [r0, #28]
 8019ce4:	4605      	mov	r5, r0
 8019ce6:	460c      	mov	r4, r1
 8019ce8:	b976      	cbnz	r6, 8019d08 <_Bfree+0x28>
 8019cea:	2010      	movs	r0, #16
 8019cec:	f7ff ff04 	bl	8019af8 <malloc>
 8019cf0:	4602      	mov	r2, r0
 8019cf2:	61e8      	str	r0, [r5, #28]
 8019cf4:	b920      	cbnz	r0, 8019d00 <_Bfree+0x20>
 8019cf6:	4b09      	ldr	r3, [pc, #36]	; (8019d1c <_Bfree+0x3c>)
 8019cf8:	4809      	ldr	r0, [pc, #36]	; (8019d20 <_Bfree+0x40>)
 8019cfa:	218f      	movs	r1, #143	; 0x8f
 8019cfc:	f001 fcfc 	bl	801b6f8 <__assert_func>
 8019d00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019d04:	6006      	str	r6, [r0, #0]
 8019d06:	60c6      	str	r6, [r0, #12]
 8019d08:	b13c      	cbz	r4, 8019d1a <_Bfree+0x3a>
 8019d0a:	69eb      	ldr	r3, [r5, #28]
 8019d0c:	6862      	ldr	r2, [r4, #4]
 8019d0e:	68db      	ldr	r3, [r3, #12]
 8019d10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019d14:	6021      	str	r1, [r4, #0]
 8019d16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8019d1a:	bd70      	pop	{r4, r5, r6, pc}
 8019d1c:	0801c89e 	.word	0x0801c89e
 8019d20:	0801c91e 	.word	0x0801c91e

08019d24 <__multadd>:
 8019d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d28:	690d      	ldr	r5, [r1, #16]
 8019d2a:	4607      	mov	r7, r0
 8019d2c:	460c      	mov	r4, r1
 8019d2e:	461e      	mov	r6, r3
 8019d30:	f101 0c14 	add.w	ip, r1, #20
 8019d34:	2000      	movs	r0, #0
 8019d36:	f8dc 3000 	ldr.w	r3, [ip]
 8019d3a:	b299      	uxth	r1, r3
 8019d3c:	fb02 6101 	mla	r1, r2, r1, r6
 8019d40:	0c1e      	lsrs	r6, r3, #16
 8019d42:	0c0b      	lsrs	r3, r1, #16
 8019d44:	fb02 3306 	mla	r3, r2, r6, r3
 8019d48:	b289      	uxth	r1, r1
 8019d4a:	3001      	adds	r0, #1
 8019d4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8019d50:	4285      	cmp	r5, r0
 8019d52:	f84c 1b04 	str.w	r1, [ip], #4
 8019d56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8019d5a:	dcec      	bgt.n	8019d36 <__multadd+0x12>
 8019d5c:	b30e      	cbz	r6, 8019da2 <__multadd+0x7e>
 8019d5e:	68a3      	ldr	r3, [r4, #8]
 8019d60:	42ab      	cmp	r3, r5
 8019d62:	dc19      	bgt.n	8019d98 <__multadd+0x74>
 8019d64:	6861      	ldr	r1, [r4, #4]
 8019d66:	4638      	mov	r0, r7
 8019d68:	3101      	adds	r1, #1
 8019d6a:	f7ff ff79 	bl	8019c60 <_Balloc>
 8019d6e:	4680      	mov	r8, r0
 8019d70:	b928      	cbnz	r0, 8019d7e <__multadd+0x5a>
 8019d72:	4602      	mov	r2, r0
 8019d74:	4b0c      	ldr	r3, [pc, #48]	; (8019da8 <__multadd+0x84>)
 8019d76:	480d      	ldr	r0, [pc, #52]	; (8019dac <__multadd+0x88>)
 8019d78:	21ba      	movs	r1, #186	; 0xba
 8019d7a:	f001 fcbd 	bl	801b6f8 <__assert_func>
 8019d7e:	6922      	ldr	r2, [r4, #16]
 8019d80:	3202      	adds	r2, #2
 8019d82:	f104 010c 	add.w	r1, r4, #12
 8019d86:	0092      	lsls	r2, r2, #2
 8019d88:	300c      	adds	r0, #12
 8019d8a:	f7ff f860 	bl	8018e4e <memcpy>
 8019d8e:	4621      	mov	r1, r4
 8019d90:	4638      	mov	r0, r7
 8019d92:	f7ff ffa5 	bl	8019ce0 <_Bfree>
 8019d96:	4644      	mov	r4, r8
 8019d98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8019d9c:	3501      	adds	r5, #1
 8019d9e:	615e      	str	r6, [r3, #20]
 8019da0:	6125      	str	r5, [r4, #16]
 8019da2:	4620      	mov	r0, r4
 8019da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019da8:	0801c90d 	.word	0x0801c90d
 8019dac:	0801c91e 	.word	0x0801c91e

08019db0 <__s2b>:
 8019db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019db4:	460c      	mov	r4, r1
 8019db6:	4615      	mov	r5, r2
 8019db8:	461f      	mov	r7, r3
 8019dba:	2209      	movs	r2, #9
 8019dbc:	3308      	adds	r3, #8
 8019dbe:	4606      	mov	r6, r0
 8019dc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8019dc4:	2100      	movs	r1, #0
 8019dc6:	2201      	movs	r2, #1
 8019dc8:	429a      	cmp	r2, r3
 8019dca:	db09      	blt.n	8019de0 <__s2b+0x30>
 8019dcc:	4630      	mov	r0, r6
 8019dce:	f7ff ff47 	bl	8019c60 <_Balloc>
 8019dd2:	b940      	cbnz	r0, 8019de6 <__s2b+0x36>
 8019dd4:	4602      	mov	r2, r0
 8019dd6:	4b19      	ldr	r3, [pc, #100]	; (8019e3c <__s2b+0x8c>)
 8019dd8:	4819      	ldr	r0, [pc, #100]	; (8019e40 <__s2b+0x90>)
 8019dda:	21d3      	movs	r1, #211	; 0xd3
 8019ddc:	f001 fc8c 	bl	801b6f8 <__assert_func>
 8019de0:	0052      	lsls	r2, r2, #1
 8019de2:	3101      	adds	r1, #1
 8019de4:	e7f0      	b.n	8019dc8 <__s2b+0x18>
 8019de6:	9b08      	ldr	r3, [sp, #32]
 8019de8:	6143      	str	r3, [r0, #20]
 8019dea:	2d09      	cmp	r5, #9
 8019dec:	f04f 0301 	mov.w	r3, #1
 8019df0:	6103      	str	r3, [r0, #16]
 8019df2:	dd16      	ble.n	8019e22 <__s2b+0x72>
 8019df4:	f104 0909 	add.w	r9, r4, #9
 8019df8:	46c8      	mov	r8, r9
 8019dfa:	442c      	add	r4, r5
 8019dfc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8019e00:	4601      	mov	r1, r0
 8019e02:	3b30      	subs	r3, #48	; 0x30
 8019e04:	220a      	movs	r2, #10
 8019e06:	4630      	mov	r0, r6
 8019e08:	f7ff ff8c 	bl	8019d24 <__multadd>
 8019e0c:	45a0      	cmp	r8, r4
 8019e0e:	d1f5      	bne.n	8019dfc <__s2b+0x4c>
 8019e10:	f1a5 0408 	sub.w	r4, r5, #8
 8019e14:	444c      	add	r4, r9
 8019e16:	1b2d      	subs	r5, r5, r4
 8019e18:	1963      	adds	r3, r4, r5
 8019e1a:	42bb      	cmp	r3, r7
 8019e1c:	db04      	blt.n	8019e28 <__s2b+0x78>
 8019e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019e22:	340a      	adds	r4, #10
 8019e24:	2509      	movs	r5, #9
 8019e26:	e7f6      	b.n	8019e16 <__s2b+0x66>
 8019e28:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019e2c:	4601      	mov	r1, r0
 8019e2e:	3b30      	subs	r3, #48	; 0x30
 8019e30:	220a      	movs	r2, #10
 8019e32:	4630      	mov	r0, r6
 8019e34:	f7ff ff76 	bl	8019d24 <__multadd>
 8019e38:	e7ee      	b.n	8019e18 <__s2b+0x68>
 8019e3a:	bf00      	nop
 8019e3c:	0801c90d 	.word	0x0801c90d
 8019e40:	0801c91e 	.word	0x0801c91e

08019e44 <__hi0bits>:
 8019e44:	0c03      	lsrs	r3, r0, #16
 8019e46:	041b      	lsls	r3, r3, #16
 8019e48:	b9d3      	cbnz	r3, 8019e80 <__hi0bits+0x3c>
 8019e4a:	0400      	lsls	r0, r0, #16
 8019e4c:	2310      	movs	r3, #16
 8019e4e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8019e52:	bf04      	itt	eq
 8019e54:	0200      	lsleq	r0, r0, #8
 8019e56:	3308      	addeq	r3, #8
 8019e58:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019e5c:	bf04      	itt	eq
 8019e5e:	0100      	lsleq	r0, r0, #4
 8019e60:	3304      	addeq	r3, #4
 8019e62:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8019e66:	bf04      	itt	eq
 8019e68:	0080      	lsleq	r0, r0, #2
 8019e6a:	3302      	addeq	r3, #2
 8019e6c:	2800      	cmp	r0, #0
 8019e6e:	db05      	blt.n	8019e7c <__hi0bits+0x38>
 8019e70:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8019e74:	f103 0301 	add.w	r3, r3, #1
 8019e78:	bf08      	it	eq
 8019e7a:	2320      	moveq	r3, #32
 8019e7c:	4618      	mov	r0, r3
 8019e7e:	4770      	bx	lr
 8019e80:	2300      	movs	r3, #0
 8019e82:	e7e4      	b.n	8019e4e <__hi0bits+0xa>

08019e84 <__lo0bits>:
 8019e84:	6803      	ldr	r3, [r0, #0]
 8019e86:	f013 0207 	ands.w	r2, r3, #7
 8019e8a:	d00c      	beq.n	8019ea6 <__lo0bits+0x22>
 8019e8c:	07d9      	lsls	r1, r3, #31
 8019e8e:	d422      	bmi.n	8019ed6 <__lo0bits+0x52>
 8019e90:	079a      	lsls	r2, r3, #30
 8019e92:	bf49      	itett	mi
 8019e94:	085b      	lsrmi	r3, r3, #1
 8019e96:	089b      	lsrpl	r3, r3, #2
 8019e98:	6003      	strmi	r3, [r0, #0]
 8019e9a:	2201      	movmi	r2, #1
 8019e9c:	bf5c      	itt	pl
 8019e9e:	6003      	strpl	r3, [r0, #0]
 8019ea0:	2202      	movpl	r2, #2
 8019ea2:	4610      	mov	r0, r2
 8019ea4:	4770      	bx	lr
 8019ea6:	b299      	uxth	r1, r3
 8019ea8:	b909      	cbnz	r1, 8019eae <__lo0bits+0x2a>
 8019eaa:	0c1b      	lsrs	r3, r3, #16
 8019eac:	2210      	movs	r2, #16
 8019eae:	b2d9      	uxtb	r1, r3
 8019eb0:	b909      	cbnz	r1, 8019eb6 <__lo0bits+0x32>
 8019eb2:	3208      	adds	r2, #8
 8019eb4:	0a1b      	lsrs	r3, r3, #8
 8019eb6:	0719      	lsls	r1, r3, #28
 8019eb8:	bf04      	itt	eq
 8019eba:	091b      	lsreq	r3, r3, #4
 8019ebc:	3204      	addeq	r2, #4
 8019ebe:	0799      	lsls	r1, r3, #30
 8019ec0:	bf04      	itt	eq
 8019ec2:	089b      	lsreq	r3, r3, #2
 8019ec4:	3202      	addeq	r2, #2
 8019ec6:	07d9      	lsls	r1, r3, #31
 8019ec8:	d403      	bmi.n	8019ed2 <__lo0bits+0x4e>
 8019eca:	085b      	lsrs	r3, r3, #1
 8019ecc:	f102 0201 	add.w	r2, r2, #1
 8019ed0:	d003      	beq.n	8019eda <__lo0bits+0x56>
 8019ed2:	6003      	str	r3, [r0, #0]
 8019ed4:	e7e5      	b.n	8019ea2 <__lo0bits+0x1e>
 8019ed6:	2200      	movs	r2, #0
 8019ed8:	e7e3      	b.n	8019ea2 <__lo0bits+0x1e>
 8019eda:	2220      	movs	r2, #32
 8019edc:	e7e1      	b.n	8019ea2 <__lo0bits+0x1e>
	...

08019ee0 <__i2b>:
 8019ee0:	b510      	push	{r4, lr}
 8019ee2:	460c      	mov	r4, r1
 8019ee4:	2101      	movs	r1, #1
 8019ee6:	f7ff febb 	bl	8019c60 <_Balloc>
 8019eea:	4602      	mov	r2, r0
 8019eec:	b928      	cbnz	r0, 8019efa <__i2b+0x1a>
 8019eee:	4b05      	ldr	r3, [pc, #20]	; (8019f04 <__i2b+0x24>)
 8019ef0:	4805      	ldr	r0, [pc, #20]	; (8019f08 <__i2b+0x28>)
 8019ef2:	f240 1145 	movw	r1, #325	; 0x145
 8019ef6:	f001 fbff 	bl	801b6f8 <__assert_func>
 8019efa:	2301      	movs	r3, #1
 8019efc:	6144      	str	r4, [r0, #20]
 8019efe:	6103      	str	r3, [r0, #16]
 8019f00:	bd10      	pop	{r4, pc}
 8019f02:	bf00      	nop
 8019f04:	0801c90d 	.word	0x0801c90d
 8019f08:	0801c91e 	.word	0x0801c91e

08019f0c <__multiply>:
 8019f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f10:	4691      	mov	r9, r2
 8019f12:	690a      	ldr	r2, [r1, #16]
 8019f14:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019f18:	429a      	cmp	r2, r3
 8019f1a:	bfb8      	it	lt
 8019f1c:	460b      	movlt	r3, r1
 8019f1e:	460c      	mov	r4, r1
 8019f20:	bfbc      	itt	lt
 8019f22:	464c      	movlt	r4, r9
 8019f24:	4699      	movlt	r9, r3
 8019f26:	6927      	ldr	r7, [r4, #16]
 8019f28:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8019f2c:	68a3      	ldr	r3, [r4, #8]
 8019f2e:	6861      	ldr	r1, [r4, #4]
 8019f30:	eb07 060a 	add.w	r6, r7, sl
 8019f34:	42b3      	cmp	r3, r6
 8019f36:	b085      	sub	sp, #20
 8019f38:	bfb8      	it	lt
 8019f3a:	3101      	addlt	r1, #1
 8019f3c:	f7ff fe90 	bl	8019c60 <_Balloc>
 8019f40:	b930      	cbnz	r0, 8019f50 <__multiply+0x44>
 8019f42:	4602      	mov	r2, r0
 8019f44:	4b44      	ldr	r3, [pc, #272]	; (801a058 <__multiply+0x14c>)
 8019f46:	4845      	ldr	r0, [pc, #276]	; (801a05c <__multiply+0x150>)
 8019f48:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8019f4c:	f001 fbd4 	bl	801b6f8 <__assert_func>
 8019f50:	f100 0514 	add.w	r5, r0, #20
 8019f54:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8019f58:	462b      	mov	r3, r5
 8019f5a:	2200      	movs	r2, #0
 8019f5c:	4543      	cmp	r3, r8
 8019f5e:	d321      	bcc.n	8019fa4 <__multiply+0x98>
 8019f60:	f104 0314 	add.w	r3, r4, #20
 8019f64:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8019f68:	f109 0314 	add.w	r3, r9, #20
 8019f6c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8019f70:	9202      	str	r2, [sp, #8]
 8019f72:	1b3a      	subs	r2, r7, r4
 8019f74:	3a15      	subs	r2, #21
 8019f76:	f022 0203 	bic.w	r2, r2, #3
 8019f7a:	3204      	adds	r2, #4
 8019f7c:	f104 0115 	add.w	r1, r4, #21
 8019f80:	428f      	cmp	r7, r1
 8019f82:	bf38      	it	cc
 8019f84:	2204      	movcc	r2, #4
 8019f86:	9201      	str	r2, [sp, #4]
 8019f88:	9a02      	ldr	r2, [sp, #8]
 8019f8a:	9303      	str	r3, [sp, #12]
 8019f8c:	429a      	cmp	r2, r3
 8019f8e:	d80c      	bhi.n	8019faa <__multiply+0x9e>
 8019f90:	2e00      	cmp	r6, #0
 8019f92:	dd03      	ble.n	8019f9c <__multiply+0x90>
 8019f94:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8019f98:	2b00      	cmp	r3, #0
 8019f9a:	d05b      	beq.n	801a054 <__multiply+0x148>
 8019f9c:	6106      	str	r6, [r0, #16]
 8019f9e:	b005      	add	sp, #20
 8019fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fa4:	f843 2b04 	str.w	r2, [r3], #4
 8019fa8:	e7d8      	b.n	8019f5c <__multiply+0x50>
 8019faa:	f8b3 a000 	ldrh.w	sl, [r3]
 8019fae:	f1ba 0f00 	cmp.w	sl, #0
 8019fb2:	d024      	beq.n	8019ffe <__multiply+0xf2>
 8019fb4:	f104 0e14 	add.w	lr, r4, #20
 8019fb8:	46a9      	mov	r9, r5
 8019fba:	f04f 0c00 	mov.w	ip, #0
 8019fbe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8019fc2:	f8d9 1000 	ldr.w	r1, [r9]
 8019fc6:	fa1f fb82 	uxth.w	fp, r2
 8019fca:	b289      	uxth	r1, r1
 8019fcc:	fb0a 110b 	mla	r1, sl, fp, r1
 8019fd0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8019fd4:	f8d9 2000 	ldr.w	r2, [r9]
 8019fd8:	4461      	add	r1, ip
 8019fda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8019fde:	fb0a c20b 	mla	r2, sl, fp, ip
 8019fe2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8019fe6:	b289      	uxth	r1, r1
 8019fe8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8019fec:	4577      	cmp	r7, lr
 8019fee:	f849 1b04 	str.w	r1, [r9], #4
 8019ff2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8019ff6:	d8e2      	bhi.n	8019fbe <__multiply+0xb2>
 8019ff8:	9a01      	ldr	r2, [sp, #4]
 8019ffa:	f845 c002 	str.w	ip, [r5, r2]
 8019ffe:	9a03      	ldr	r2, [sp, #12]
 801a000:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801a004:	3304      	adds	r3, #4
 801a006:	f1b9 0f00 	cmp.w	r9, #0
 801a00a:	d021      	beq.n	801a050 <__multiply+0x144>
 801a00c:	6829      	ldr	r1, [r5, #0]
 801a00e:	f104 0c14 	add.w	ip, r4, #20
 801a012:	46ae      	mov	lr, r5
 801a014:	f04f 0a00 	mov.w	sl, #0
 801a018:	f8bc b000 	ldrh.w	fp, [ip]
 801a01c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801a020:	fb09 220b 	mla	r2, r9, fp, r2
 801a024:	4452      	add	r2, sl
 801a026:	b289      	uxth	r1, r1
 801a028:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801a02c:	f84e 1b04 	str.w	r1, [lr], #4
 801a030:	f85c 1b04 	ldr.w	r1, [ip], #4
 801a034:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801a038:	f8be 1000 	ldrh.w	r1, [lr]
 801a03c:	fb09 110a 	mla	r1, r9, sl, r1
 801a040:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801a044:	4567      	cmp	r7, ip
 801a046:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801a04a:	d8e5      	bhi.n	801a018 <__multiply+0x10c>
 801a04c:	9a01      	ldr	r2, [sp, #4]
 801a04e:	50a9      	str	r1, [r5, r2]
 801a050:	3504      	adds	r5, #4
 801a052:	e799      	b.n	8019f88 <__multiply+0x7c>
 801a054:	3e01      	subs	r6, #1
 801a056:	e79b      	b.n	8019f90 <__multiply+0x84>
 801a058:	0801c90d 	.word	0x0801c90d
 801a05c:	0801c91e 	.word	0x0801c91e

0801a060 <__pow5mult>:
 801a060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a064:	4615      	mov	r5, r2
 801a066:	f012 0203 	ands.w	r2, r2, #3
 801a06a:	4606      	mov	r6, r0
 801a06c:	460f      	mov	r7, r1
 801a06e:	d007      	beq.n	801a080 <__pow5mult+0x20>
 801a070:	4c25      	ldr	r4, [pc, #148]	; (801a108 <__pow5mult+0xa8>)
 801a072:	3a01      	subs	r2, #1
 801a074:	2300      	movs	r3, #0
 801a076:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a07a:	f7ff fe53 	bl	8019d24 <__multadd>
 801a07e:	4607      	mov	r7, r0
 801a080:	10ad      	asrs	r5, r5, #2
 801a082:	d03d      	beq.n	801a100 <__pow5mult+0xa0>
 801a084:	69f4      	ldr	r4, [r6, #28]
 801a086:	b97c      	cbnz	r4, 801a0a8 <__pow5mult+0x48>
 801a088:	2010      	movs	r0, #16
 801a08a:	f7ff fd35 	bl	8019af8 <malloc>
 801a08e:	4602      	mov	r2, r0
 801a090:	61f0      	str	r0, [r6, #28]
 801a092:	b928      	cbnz	r0, 801a0a0 <__pow5mult+0x40>
 801a094:	4b1d      	ldr	r3, [pc, #116]	; (801a10c <__pow5mult+0xac>)
 801a096:	481e      	ldr	r0, [pc, #120]	; (801a110 <__pow5mult+0xb0>)
 801a098:	f240 11b3 	movw	r1, #435	; 0x1b3
 801a09c:	f001 fb2c 	bl	801b6f8 <__assert_func>
 801a0a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a0a4:	6004      	str	r4, [r0, #0]
 801a0a6:	60c4      	str	r4, [r0, #12]
 801a0a8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801a0ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801a0b0:	b94c      	cbnz	r4, 801a0c6 <__pow5mult+0x66>
 801a0b2:	f240 2171 	movw	r1, #625	; 0x271
 801a0b6:	4630      	mov	r0, r6
 801a0b8:	f7ff ff12 	bl	8019ee0 <__i2b>
 801a0bc:	2300      	movs	r3, #0
 801a0be:	f8c8 0008 	str.w	r0, [r8, #8]
 801a0c2:	4604      	mov	r4, r0
 801a0c4:	6003      	str	r3, [r0, #0]
 801a0c6:	f04f 0900 	mov.w	r9, #0
 801a0ca:	07eb      	lsls	r3, r5, #31
 801a0cc:	d50a      	bpl.n	801a0e4 <__pow5mult+0x84>
 801a0ce:	4639      	mov	r1, r7
 801a0d0:	4622      	mov	r2, r4
 801a0d2:	4630      	mov	r0, r6
 801a0d4:	f7ff ff1a 	bl	8019f0c <__multiply>
 801a0d8:	4639      	mov	r1, r7
 801a0da:	4680      	mov	r8, r0
 801a0dc:	4630      	mov	r0, r6
 801a0de:	f7ff fdff 	bl	8019ce0 <_Bfree>
 801a0e2:	4647      	mov	r7, r8
 801a0e4:	106d      	asrs	r5, r5, #1
 801a0e6:	d00b      	beq.n	801a100 <__pow5mult+0xa0>
 801a0e8:	6820      	ldr	r0, [r4, #0]
 801a0ea:	b938      	cbnz	r0, 801a0fc <__pow5mult+0x9c>
 801a0ec:	4622      	mov	r2, r4
 801a0ee:	4621      	mov	r1, r4
 801a0f0:	4630      	mov	r0, r6
 801a0f2:	f7ff ff0b 	bl	8019f0c <__multiply>
 801a0f6:	6020      	str	r0, [r4, #0]
 801a0f8:	f8c0 9000 	str.w	r9, [r0]
 801a0fc:	4604      	mov	r4, r0
 801a0fe:	e7e4      	b.n	801a0ca <__pow5mult+0x6a>
 801a100:	4638      	mov	r0, r7
 801a102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a106:	bf00      	nop
 801a108:	0801ca68 	.word	0x0801ca68
 801a10c:	0801c89e 	.word	0x0801c89e
 801a110:	0801c91e 	.word	0x0801c91e

0801a114 <__lshift>:
 801a114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a118:	460c      	mov	r4, r1
 801a11a:	6849      	ldr	r1, [r1, #4]
 801a11c:	6923      	ldr	r3, [r4, #16]
 801a11e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801a122:	68a3      	ldr	r3, [r4, #8]
 801a124:	4607      	mov	r7, r0
 801a126:	4691      	mov	r9, r2
 801a128:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a12c:	f108 0601 	add.w	r6, r8, #1
 801a130:	42b3      	cmp	r3, r6
 801a132:	db0b      	blt.n	801a14c <__lshift+0x38>
 801a134:	4638      	mov	r0, r7
 801a136:	f7ff fd93 	bl	8019c60 <_Balloc>
 801a13a:	4605      	mov	r5, r0
 801a13c:	b948      	cbnz	r0, 801a152 <__lshift+0x3e>
 801a13e:	4602      	mov	r2, r0
 801a140:	4b28      	ldr	r3, [pc, #160]	; (801a1e4 <__lshift+0xd0>)
 801a142:	4829      	ldr	r0, [pc, #164]	; (801a1e8 <__lshift+0xd4>)
 801a144:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801a148:	f001 fad6 	bl	801b6f8 <__assert_func>
 801a14c:	3101      	adds	r1, #1
 801a14e:	005b      	lsls	r3, r3, #1
 801a150:	e7ee      	b.n	801a130 <__lshift+0x1c>
 801a152:	2300      	movs	r3, #0
 801a154:	f100 0114 	add.w	r1, r0, #20
 801a158:	f100 0210 	add.w	r2, r0, #16
 801a15c:	4618      	mov	r0, r3
 801a15e:	4553      	cmp	r3, sl
 801a160:	db33      	blt.n	801a1ca <__lshift+0xb6>
 801a162:	6920      	ldr	r0, [r4, #16]
 801a164:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a168:	f104 0314 	add.w	r3, r4, #20
 801a16c:	f019 091f 	ands.w	r9, r9, #31
 801a170:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a174:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801a178:	d02b      	beq.n	801a1d2 <__lshift+0xbe>
 801a17a:	f1c9 0e20 	rsb	lr, r9, #32
 801a17e:	468a      	mov	sl, r1
 801a180:	2200      	movs	r2, #0
 801a182:	6818      	ldr	r0, [r3, #0]
 801a184:	fa00 f009 	lsl.w	r0, r0, r9
 801a188:	4310      	orrs	r0, r2
 801a18a:	f84a 0b04 	str.w	r0, [sl], #4
 801a18e:	f853 2b04 	ldr.w	r2, [r3], #4
 801a192:	459c      	cmp	ip, r3
 801a194:	fa22 f20e 	lsr.w	r2, r2, lr
 801a198:	d8f3      	bhi.n	801a182 <__lshift+0x6e>
 801a19a:	ebac 0304 	sub.w	r3, ip, r4
 801a19e:	3b15      	subs	r3, #21
 801a1a0:	f023 0303 	bic.w	r3, r3, #3
 801a1a4:	3304      	adds	r3, #4
 801a1a6:	f104 0015 	add.w	r0, r4, #21
 801a1aa:	4584      	cmp	ip, r0
 801a1ac:	bf38      	it	cc
 801a1ae:	2304      	movcc	r3, #4
 801a1b0:	50ca      	str	r2, [r1, r3]
 801a1b2:	b10a      	cbz	r2, 801a1b8 <__lshift+0xa4>
 801a1b4:	f108 0602 	add.w	r6, r8, #2
 801a1b8:	3e01      	subs	r6, #1
 801a1ba:	4638      	mov	r0, r7
 801a1bc:	612e      	str	r6, [r5, #16]
 801a1be:	4621      	mov	r1, r4
 801a1c0:	f7ff fd8e 	bl	8019ce0 <_Bfree>
 801a1c4:	4628      	mov	r0, r5
 801a1c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a1ca:	f842 0f04 	str.w	r0, [r2, #4]!
 801a1ce:	3301      	adds	r3, #1
 801a1d0:	e7c5      	b.n	801a15e <__lshift+0x4a>
 801a1d2:	3904      	subs	r1, #4
 801a1d4:	f853 2b04 	ldr.w	r2, [r3], #4
 801a1d8:	f841 2f04 	str.w	r2, [r1, #4]!
 801a1dc:	459c      	cmp	ip, r3
 801a1de:	d8f9      	bhi.n	801a1d4 <__lshift+0xc0>
 801a1e0:	e7ea      	b.n	801a1b8 <__lshift+0xa4>
 801a1e2:	bf00      	nop
 801a1e4:	0801c90d 	.word	0x0801c90d
 801a1e8:	0801c91e 	.word	0x0801c91e

0801a1ec <__mcmp>:
 801a1ec:	b530      	push	{r4, r5, lr}
 801a1ee:	6902      	ldr	r2, [r0, #16]
 801a1f0:	690c      	ldr	r4, [r1, #16]
 801a1f2:	1b12      	subs	r2, r2, r4
 801a1f4:	d10e      	bne.n	801a214 <__mcmp+0x28>
 801a1f6:	f100 0314 	add.w	r3, r0, #20
 801a1fa:	3114      	adds	r1, #20
 801a1fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801a200:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801a204:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801a208:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801a20c:	42a5      	cmp	r5, r4
 801a20e:	d003      	beq.n	801a218 <__mcmp+0x2c>
 801a210:	d305      	bcc.n	801a21e <__mcmp+0x32>
 801a212:	2201      	movs	r2, #1
 801a214:	4610      	mov	r0, r2
 801a216:	bd30      	pop	{r4, r5, pc}
 801a218:	4283      	cmp	r3, r0
 801a21a:	d3f3      	bcc.n	801a204 <__mcmp+0x18>
 801a21c:	e7fa      	b.n	801a214 <__mcmp+0x28>
 801a21e:	f04f 32ff 	mov.w	r2, #4294967295
 801a222:	e7f7      	b.n	801a214 <__mcmp+0x28>

0801a224 <__mdiff>:
 801a224:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a228:	460c      	mov	r4, r1
 801a22a:	4606      	mov	r6, r0
 801a22c:	4611      	mov	r1, r2
 801a22e:	4620      	mov	r0, r4
 801a230:	4690      	mov	r8, r2
 801a232:	f7ff ffdb 	bl	801a1ec <__mcmp>
 801a236:	1e05      	subs	r5, r0, #0
 801a238:	d110      	bne.n	801a25c <__mdiff+0x38>
 801a23a:	4629      	mov	r1, r5
 801a23c:	4630      	mov	r0, r6
 801a23e:	f7ff fd0f 	bl	8019c60 <_Balloc>
 801a242:	b930      	cbnz	r0, 801a252 <__mdiff+0x2e>
 801a244:	4b3a      	ldr	r3, [pc, #232]	; (801a330 <__mdiff+0x10c>)
 801a246:	4602      	mov	r2, r0
 801a248:	f240 2137 	movw	r1, #567	; 0x237
 801a24c:	4839      	ldr	r0, [pc, #228]	; (801a334 <__mdiff+0x110>)
 801a24e:	f001 fa53 	bl	801b6f8 <__assert_func>
 801a252:	2301      	movs	r3, #1
 801a254:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801a258:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a25c:	bfa4      	itt	ge
 801a25e:	4643      	movge	r3, r8
 801a260:	46a0      	movge	r8, r4
 801a262:	4630      	mov	r0, r6
 801a264:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801a268:	bfa6      	itte	ge
 801a26a:	461c      	movge	r4, r3
 801a26c:	2500      	movge	r5, #0
 801a26e:	2501      	movlt	r5, #1
 801a270:	f7ff fcf6 	bl	8019c60 <_Balloc>
 801a274:	b920      	cbnz	r0, 801a280 <__mdiff+0x5c>
 801a276:	4b2e      	ldr	r3, [pc, #184]	; (801a330 <__mdiff+0x10c>)
 801a278:	4602      	mov	r2, r0
 801a27a:	f240 2145 	movw	r1, #581	; 0x245
 801a27e:	e7e5      	b.n	801a24c <__mdiff+0x28>
 801a280:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801a284:	6926      	ldr	r6, [r4, #16]
 801a286:	60c5      	str	r5, [r0, #12]
 801a288:	f104 0914 	add.w	r9, r4, #20
 801a28c:	f108 0514 	add.w	r5, r8, #20
 801a290:	f100 0e14 	add.w	lr, r0, #20
 801a294:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801a298:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801a29c:	f108 0210 	add.w	r2, r8, #16
 801a2a0:	46f2      	mov	sl, lr
 801a2a2:	2100      	movs	r1, #0
 801a2a4:	f859 3b04 	ldr.w	r3, [r9], #4
 801a2a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801a2ac:	fa11 f88b 	uxtah	r8, r1, fp
 801a2b0:	b299      	uxth	r1, r3
 801a2b2:	0c1b      	lsrs	r3, r3, #16
 801a2b4:	eba8 0801 	sub.w	r8, r8, r1
 801a2b8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801a2bc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801a2c0:	fa1f f888 	uxth.w	r8, r8
 801a2c4:	1419      	asrs	r1, r3, #16
 801a2c6:	454e      	cmp	r6, r9
 801a2c8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801a2cc:	f84a 3b04 	str.w	r3, [sl], #4
 801a2d0:	d8e8      	bhi.n	801a2a4 <__mdiff+0x80>
 801a2d2:	1b33      	subs	r3, r6, r4
 801a2d4:	3b15      	subs	r3, #21
 801a2d6:	f023 0303 	bic.w	r3, r3, #3
 801a2da:	3304      	adds	r3, #4
 801a2dc:	3415      	adds	r4, #21
 801a2de:	42a6      	cmp	r6, r4
 801a2e0:	bf38      	it	cc
 801a2e2:	2304      	movcc	r3, #4
 801a2e4:	441d      	add	r5, r3
 801a2e6:	4473      	add	r3, lr
 801a2e8:	469e      	mov	lr, r3
 801a2ea:	462e      	mov	r6, r5
 801a2ec:	4566      	cmp	r6, ip
 801a2ee:	d30e      	bcc.n	801a30e <__mdiff+0xea>
 801a2f0:	f10c 0203 	add.w	r2, ip, #3
 801a2f4:	1b52      	subs	r2, r2, r5
 801a2f6:	f022 0203 	bic.w	r2, r2, #3
 801a2fa:	3d03      	subs	r5, #3
 801a2fc:	45ac      	cmp	ip, r5
 801a2fe:	bf38      	it	cc
 801a300:	2200      	movcc	r2, #0
 801a302:	4413      	add	r3, r2
 801a304:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801a308:	b17a      	cbz	r2, 801a32a <__mdiff+0x106>
 801a30a:	6107      	str	r7, [r0, #16]
 801a30c:	e7a4      	b.n	801a258 <__mdiff+0x34>
 801a30e:	f856 8b04 	ldr.w	r8, [r6], #4
 801a312:	fa11 f288 	uxtah	r2, r1, r8
 801a316:	1414      	asrs	r4, r2, #16
 801a318:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801a31c:	b292      	uxth	r2, r2
 801a31e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801a322:	f84e 2b04 	str.w	r2, [lr], #4
 801a326:	1421      	asrs	r1, r4, #16
 801a328:	e7e0      	b.n	801a2ec <__mdiff+0xc8>
 801a32a:	3f01      	subs	r7, #1
 801a32c:	e7ea      	b.n	801a304 <__mdiff+0xe0>
 801a32e:	bf00      	nop
 801a330:	0801c90d 	.word	0x0801c90d
 801a334:	0801c91e 	.word	0x0801c91e

0801a338 <__ulp>:
 801a338:	b082      	sub	sp, #8
 801a33a:	ed8d 0b00 	vstr	d0, [sp]
 801a33e:	9a01      	ldr	r2, [sp, #4]
 801a340:	4b0f      	ldr	r3, [pc, #60]	; (801a380 <__ulp+0x48>)
 801a342:	4013      	ands	r3, r2
 801a344:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801a348:	2b00      	cmp	r3, #0
 801a34a:	dc08      	bgt.n	801a35e <__ulp+0x26>
 801a34c:	425b      	negs	r3, r3
 801a34e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801a352:	ea4f 5223 	mov.w	r2, r3, asr #20
 801a356:	da04      	bge.n	801a362 <__ulp+0x2a>
 801a358:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801a35c:	4113      	asrs	r3, r2
 801a35e:	2200      	movs	r2, #0
 801a360:	e008      	b.n	801a374 <__ulp+0x3c>
 801a362:	f1a2 0314 	sub.w	r3, r2, #20
 801a366:	2b1e      	cmp	r3, #30
 801a368:	bfda      	itte	le
 801a36a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801a36e:	40da      	lsrle	r2, r3
 801a370:	2201      	movgt	r2, #1
 801a372:	2300      	movs	r3, #0
 801a374:	4619      	mov	r1, r3
 801a376:	4610      	mov	r0, r2
 801a378:	ec41 0b10 	vmov	d0, r0, r1
 801a37c:	b002      	add	sp, #8
 801a37e:	4770      	bx	lr
 801a380:	7ff00000 	.word	0x7ff00000

0801a384 <__b2d>:
 801a384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a388:	6906      	ldr	r6, [r0, #16]
 801a38a:	f100 0814 	add.w	r8, r0, #20
 801a38e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801a392:	1f37      	subs	r7, r6, #4
 801a394:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801a398:	4610      	mov	r0, r2
 801a39a:	f7ff fd53 	bl	8019e44 <__hi0bits>
 801a39e:	f1c0 0320 	rsb	r3, r0, #32
 801a3a2:	280a      	cmp	r0, #10
 801a3a4:	600b      	str	r3, [r1, #0]
 801a3a6:	491b      	ldr	r1, [pc, #108]	; (801a414 <__b2d+0x90>)
 801a3a8:	dc15      	bgt.n	801a3d6 <__b2d+0x52>
 801a3aa:	f1c0 0c0b 	rsb	ip, r0, #11
 801a3ae:	fa22 f30c 	lsr.w	r3, r2, ip
 801a3b2:	45b8      	cmp	r8, r7
 801a3b4:	ea43 0501 	orr.w	r5, r3, r1
 801a3b8:	bf34      	ite	cc
 801a3ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801a3be:	2300      	movcs	r3, #0
 801a3c0:	3015      	adds	r0, #21
 801a3c2:	fa02 f000 	lsl.w	r0, r2, r0
 801a3c6:	fa23 f30c 	lsr.w	r3, r3, ip
 801a3ca:	4303      	orrs	r3, r0
 801a3cc:	461c      	mov	r4, r3
 801a3ce:	ec45 4b10 	vmov	d0, r4, r5
 801a3d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a3d6:	45b8      	cmp	r8, r7
 801a3d8:	bf3a      	itte	cc
 801a3da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801a3de:	f1a6 0708 	subcc.w	r7, r6, #8
 801a3e2:	2300      	movcs	r3, #0
 801a3e4:	380b      	subs	r0, #11
 801a3e6:	d012      	beq.n	801a40e <__b2d+0x8a>
 801a3e8:	f1c0 0120 	rsb	r1, r0, #32
 801a3ec:	fa23 f401 	lsr.w	r4, r3, r1
 801a3f0:	4082      	lsls	r2, r0
 801a3f2:	4322      	orrs	r2, r4
 801a3f4:	4547      	cmp	r7, r8
 801a3f6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801a3fa:	bf8c      	ite	hi
 801a3fc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801a400:	2200      	movls	r2, #0
 801a402:	4083      	lsls	r3, r0
 801a404:	40ca      	lsrs	r2, r1
 801a406:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801a40a:	4313      	orrs	r3, r2
 801a40c:	e7de      	b.n	801a3cc <__b2d+0x48>
 801a40e:	ea42 0501 	orr.w	r5, r2, r1
 801a412:	e7db      	b.n	801a3cc <__b2d+0x48>
 801a414:	3ff00000 	.word	0x3ff00000

0801a418 <__d2b>:
 801a418:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a41c:	460f      	mov	r7, r1
 801a41e:	2101      	movs	r1, #1
 801a420:	ec59 8b10 	vmov	r8, r9, d0
 801a424:	4616      	mov	r6, r2
 801a426:	f7ff fc1b 	bl	8019c60 <_Balloc>
 801a42a:	4604      	mov	r4, r0
 801a42c:	b930      	cbnz	r0, 801a43c <__d2b+0x24>
 801a42e:	4602      	mov	r2, r0
 801a430:	4b24      	ldr	r3, [pc, #144]	; (801a4c4 <__d2b+0xac>)
 801a432:	4825      	ldr	r0, [pc, #148]	; (801a4c8 <__d2b+0xb0>)
 801a434:	f240 310f 	movw	r1, #783	; 0x30f
 801a438:	f001 f95e 	bl	801b6f8 <__assert_func>
 801a43c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801a440:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a444:	bb2d      	cbnz	r5, 801a492 <__d2b+0x7a>
 801a446:	9301      	str	r3, [sp, #4]
 801a448:	f1b8 0300 	subs.w	r3, r8, #0
 801a44c:	d026      	beq.n	801a49c <__d2b+0x84>
 801a44e:	4668      	mov	r0, sp
 801a450:	9300      	str	r3, [sp, #0]
 801a452:	f7ff fd17 	bl	8019e84 <__lo0bits>
 801a456:	e9dd 1200 	ldrd	r1, r2, [sp]
 801a45a:	b1e8      	cbz	r0, 801a498 <__d2b+0x80>
 801a45c:	f1c0 0320 	rsb	r3, r0, #32
 801a460:	fa02 f303 	lsl.w	r3, r2, r3
 801a464:	430b      	orrs	r3, r1
 801a466:	40c2      	lsrs	r2, r0
 801a468:	6163      	str	r3, [r4, #20]
 801a46a:	9201      	str	r2, [sp, #4]
 801a46c:	9b01      	ldr	r3, [sp, #4]
 801a46e:	61a3      	str	r3, [r4, #24]
 801a470:	2b00      	cmp	r3, #0
 801a472:	bf14      	ite	ne
 801a474:	2202      	movne	r2, #2
 801a476:	2201      	moveq	r2, #1
 801a478:	6122      	str	r2, [r4, #16]
 801a47a:	b1bd      	cbz	r5, 801a4ac <__d2b+0x94>
 801a47c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801a480:	4405      	add	r5, r0
 801a482:	603d      	str	r5, [r7, #0]
 801a484:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801a488:	6030      	str	r0, [r6, #0]
 801a48a:	4620      	mov	r0, r4
 801a48c:	b003      	add	sp, #12
 801a48e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a492:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a496:	e7d6      	b.n	801a446 <__d2b+0x2e>
 801a498:	6161      	str	r1, [r4, #20]
 801a49a:	e7e7      	b.n	801a46c <__d2b+0x54>
 801a49c:	a801      	add	r0, sp, #4
 801a49e:	f7ff fcf1 	bl	8019e84 <__lo0bits>
 801a4a2:	9b01      	ldr	r3, [sp, #4]
 801a4a4:	6163      	str	r3, [r4, #20]
 801a4a6:	3020      	adds	r0, #32
 801a4a8:	2201      	movs	r2, #1
 801a4aa:	e7e5      	b.n	801a478 <__d2b+0x60>
 801a4ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801a4b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801a4b4:	6038      	str	r0, [r7, #0]
 801a4b6:	6918      	ldr	r0, [r3, #16]
 801a4b8:	f7ff fcc4 	bl	8019e44 <__hi0bits>
 801a4bc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801a4c0:	e7e2      	b.n	801a488 <__d2b+0x70>
 801a4c2:	bf00      	nop
 801a4c4:	0801c90d 	.word	0x0801c90d
 801a4c8:	0801c91e 	.word	0x0801c91e

0801a4cc <__ratio>:
 801a4cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4d0:	4688      	mov	r8, r1
 801a4d2:	4669      	mov	r1, sp
 801a4d4:	4681      	mov	r9, r0
 801a4d6:	f7ff ff55 	bl	801a384 <__b2d>
 801a4da:	a901      	add	r1, sp, #4
 801a4dc:	4640      	mov	r0, r8
 801a4de:	ec55 4b10 	vmov	r4, r5, d0
 801a4e2:	ee10 aa10 	vmov	sl, s0
 801a4e6:	f7ff ff4d 	bl	801a384 <__b2d>
 801a4ea:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801a4ee:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801a4f2:	1ad2      	subs	r2, r2, r3
 801a4f4:	e9dd 3100 	ldrd	r3, r1, [sp]
 801a4f8:	1a5b      	subs	r3, r3, r1
 801a4fa:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801a4fe:	ec57 6b10 	vmov	r6, r7, d0
 801a502:	2b00      	cmp	r3, #0
 801a504:	bfd6      	itet	le
 801a506:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801a50a:	462a      	movgt	r2, r5
 801a50c:	463a      	movle	r2, r7
 801a50e:	46ab      	mov	fp, r5
 801a510:	bfd6      	itet	le
 801a512:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801a516:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801a51a:	ee00 3a90 	vmovle	s1, r3
 801a51e:	ec4b ab17 	vmov	d7, sl, fp
 801a522:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801a526:	b003      	add	sp, #12
 801a528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a52c <__copybits>:
 801a52c:	3901      	subs	r1, #1
 801a52e:	b570      	push	{r4, r5, r6, lr}
 801a530:	1149      	asrs	r1, r1, #5
 801a532:	6914      	ldr	r4, [r2, #16]
 801a534:	3101      	adds	r1, #1
 801a536:	f102 0314 	add.w	r3, r2, #20
 801a53a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801a53e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801a542:	1f05      	subs	r5, r0, #4
 801a544:	42a3      	cmp	r3, r4
 801a546:	d30c      	bcc.n	801a562 <__copybits+0x36>
 801a548:	1aa3      	subs	r3, r4, r2
 801a54a:	3b11      	subs	r3, #17
 801a54c:	f023 0303 	bic.w	r3, r3, #3
 801a550:	3211      	adds	r2, #17
 801a552:	42a2      	cmp	r2, r4
 801a554:	bf88      	it	hi
 801a556:	2300      	movhi	r3, #0
 801a558:	4418      	add	r0, r3
 801a55a:	2300      	movs	r3, #0
 801a55c:	4288      	cmp	r0, r1
 801a55e:	d305      	bcc.n	801a56c <__copybits+0x40>
 801a560:	bd70      	pop	{r4, r5, r6, pc}
 801a562:	f853 6b04 	ldr.w	r6, [r3], #4
 801a566:	f845 6f04 	str.w	r6, [r5, #4]!
 801a56a:	e7eb      	b.n	801a544 <__copybits+0x18>
 801a56c:	f840 3b04 	str.w	r3, [r0], #4
 801a570:	e7f4      	b.n	801a55c <__copybits+0x30>

0801a572 <__any_on>:
 801a572:	f100 0214 	add.w	r2, r0, #20
 801a576:	6900      	ldr	r0, [r0, #16]
 801a578:	114b      	asrs	r3, r1, #5
 801a57a:	4298      	cmp	r0, r3
 801a57c:	b510      	push	{r4, lr}
 801a57e:	db11      	blt.n	801a5a4 <__any_on+0x32>
 801a580:	dd0a      	ble.n	801a598 <__any_on+0x26>
 801a582:	f011 011f 	ands.w	r1, r1, #31
 801a586:	d007      	beq.n	801a598 <__any_on+0x26>
 801a588:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801a58c:	fa24 f001 	lsr.w	r0, r4, r1
 801a590:	fa00 f101 	lsl.w	r1, r0, r1
 801a594:	428c      	cmp	r4, r1
 801a596:	d10b      	bne.n	801a5b0 <__any_on+0x3e>
 801a598:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a59c:	4293      	cmp	r3, r2
 801a59e:	d803      	bhi.n	801a5a8 <__any_on+0x36>
 801a5a0:	2000      	movs	r0, #0
 801a5a2:	bd10      	pop	{r4, pc}
 801a5a4:	4603      	mov	r3, r0
 801a5a6:	e7f7      	b.n	801a598 <__any_on+0x26>
 801a5a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801a5ac:	2900      	cmp	r1, #0
 801a5ae:	d0f5      	beq.n	801a59c <__any_on+0x2a>
 801a5b0:	2001      	movs	r0, #1
 801a5b2:	e7f6      	b.n	801a5a2 <__any_on+0x30>

0801a5b4 <sulp>:
 801a5b4:	b570      	push	{r4, r5, r6, lr}
 801a5b6:	4604      	mov	r4, r0
 801a5b8:	460d      	mov	r5, r1
 801a5ba:	4616      	mov	r6, r2
 801a5bc:	ec45 4b10 	vmov	d0, r4, r5
 801a5c0:	f7ff feba 	bl	801a338 <__ulp>
 801a5c4:	b17e      	cbz	r6, 801a5e6 <sulp+0x32>
 801a5c6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801a5ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a5ce:	2b00      	cmp	r3, #0
 801a5d0:	dd09      	ble.n	801a5e6 <sulp+0x32>
 801a5d2:	051b      	lsls	r3, r3, #20
 801a5d4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801a5d8:	2000      	movs	r0, #0
 801a5da:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 801a5de:	ec41 0b17 	vmov	d7, r0, r1
 801a5e2:	ee20 0b07 	vmul.f64	d0, d0, d7
 801a5e6:	bd70      	pop	{r4, r5, r6, pc}

0801a5e8 <_strtod_l>:
 801a5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5ec:	ed2d 8b0e 	vpush	{d8-d14}
 801a5f0:	b097      	sub	sp, #92	; 0x5c
 801a5f2:	4604      	mov	r4, r0
 801a5f4:	920d      	str	r2, [sp, #52]	; 0x34
 801a5f6:	2200      	movs	r2, #0
 801a5f8:	9212      	str	r2, [sp, #72]	; 0x48
 801a5fa:	468a      	mov	sl, r1
 801a5fc:	f04f 0800 	mov.w	r8, #0
 801a600:	f04f 0900 	mov.w	r9, #0
 801a604:	460a      	mov	r2, r1
 801a606:	9211      	str	r2, [sp, #68]	; 0x44
 801a608:	7811      	ldrb	r1, [r2, #0]
 801a60a:	292b      	cmp	r1, #43	; 0x2b
 801a60c:	d04c      	beq.n	801a6a8 <_strtod_l+0xc0>
 801a60e:	d839      	bhi.n	801a684 <_strtod_l+0x9c>
 801a610:	290d      	cmp	r1, #13
 801a612:	d833      	bhi.n	801a67c <_strtod_l+0x94>
 801a614:	2908      	cmp	r1, #8
 801a616:	d833      	bhi.n	801a680 <_strtod_l+0x98>
 801a618:	2900      	cmp	r1, #0
 801a61a:	d03c      	beq.n	801a696 <_strtod_l+0xae>
 801a61c:	2200      	movs	r2, #0
 801a61e:	9208      	str	r2, [sp, #32]
 801a620:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801a622:	7832      	ldrb	r2, [r6, #0]
 801a624:	2a30      	cmp	r2, #48	; 0x30
 801a626:	f040 80b8 	bne.w	801a79a <_strtod_l+0x1b2>
 801a62a:	7872      	ldrb	r2, [r6, #1]
 801a62c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 801a630:	2a58      	cmp	r2, #88	; 0x58
 801a632:	d170      	bne.n	801a716 <_strtod_l+0x12e>
 801a634:	9302      	str	r3, [sp, #8]
 801a636:	9b08      	ldr	r3, [sp, #32]
 801a638:	9301      	str	r3, [sp, #4]
 801a63a:	ab12      	add	r3, sp, #72	; 0x48
 801a63c:	9300      	str	r3, [sp, #0]
 801a63e:	4a91      	ldr	r2, [pc, #580]	; (801a884 <_strtod_l+0x29c>)
 801a640:	ab13      	add	r3, sp, #76	; 0x4c
 801a642:	a911      	add	r1, sp, #68	; 0x44
 801a644:	4620      	mov	r0, r4
 801a646:	f001 f8f3 	bl	801b830 <__gethex>
 801a64a:	f010 070f 	ands.w	r7, r0, #15
 801a64e:	4605      	mov	r5, r0
 801a650:	d005      	beq.n	801a65e <_strtod_l+0x76>
 801a652:	2f06      	cmp	r7, #6
 801a654:	d12a      	bne.n	801a6ac <_strtod_l+0xc4>
 801a656:	3601      	adds	r6, #1
 801a658:	2300      	movs	r3, #0
 801a65a:	9611      	str	r6, [sp, #68]	; 0x44
 801a65c:	9308      	str	r3, [sp, #32]
 801a65e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a660:	2b00      	cmp	r3, #0
 801a662:	f040 8555 	bne.w	801b110 <_strtod_l+0xb28>
 801a666:	9b08      	ldr	r3, [sp, #32]
 801a668:	ec49 8b10 	vmov	d0, r8, r9
 801a66c:	b1cb      	cbz	r3, 801a6a2 <_strtod_l+0xba>
 801a66e:	eeb1 0b40 	vneg.f64	d0, d0
 801a672:	b017      	add	sp, #92	; 0x5c
 801a674:	ecbd 8b0e 	vpop	{d8-d14}
 801a678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a67c:	2920      	cmp	r1, #32
 801a67e:	d1cd      	bne.n	801a61c <_strtod_l+0x34>
 801a680:	3201      	adds	r2, #1
 801a682:	e7c0      	b.n	801a606 <_strtod_l+0x1e>
 801a684:	292d      	cmp	r1, #45	; 0x2d
 801a686:	d1c9      	bne.n	801a61c <_strtod_l+0x34>
 801a688:	2101      	movs	r1, #1
 801a68a:	9108      	str	r1, [sp, #32]
 801a68c:	1c51      	adds	r1, r2, #1
 801a68e:	9111      	str	r1, [sp, #68]	; 0x44
 801a690:	7852      	ldrb	r2, [r2, #1]
 801a692:	2a00      	cmp	r2, #0
 801a694:	d1c4      	bne.n	801a620 <_strtod_l+0x38>
 801a696:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a698:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 801a69c:	2b00      	cmp	r3, #0
 801a69e:	f040 8535 	bne.w	801b10c <_strtod_l+0xb24>
 801a6a2:	ec49 8b10 	vmov	d0, r8, r9
 801a6a6:	e7e4      	b.n	801a672 <_strtod_l+0x8a>
 801a6a8:	2100      	movs	r1, #0
 801a6aa:	e7ee      	b.n	801a68a <_strtod_l+0xa2>
 801a6ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a6ae:	b13a      	cbz	r2, 801a6c0 <_strtod_l+0xd8>
 801a6b0:	2135      	movs	r1, #53	; 0x35
 801a6b2:	a814      	add	r0, sp, #80	; 0x50
 801a6b4:	f7ff ff3a 	bl	801a52c <__copybits>
 801a6b8:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a6ba:	4620      	mov	r0, r4
 801a6bc:	f7ff fb10 	bl	8019ce0 <_Bfree>
 801a6c0:	1e7b      	subs	r3, r7, #1
 801a6c2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a6c4:	2b04      	cmp	r3, #4
 801a6c6:	d806      	bhi.n	801a6d6 <_strtod_l+0xee>
 801a6c8:	e8df f003 	tbb	[pc, r3]
 801a6cc:	201d0314 	.word	0x201d0314
 801a6d0:	14          	.byte	0x14
 801a6d1:	00          	.byte	0x00
 801a6d2:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 801a6d6:	05eb      	lsls	r3, r5, #23
 801a6d8:	bf48      	it	mi
 801a6da:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801a6de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801a6e2:	0d1b      	lsrs	r3, r3, #20
 801a6e4:	051b      	lsls	r3, r3, #20
 801a6e6:	2b00      	cmp	r3, #0
 801a6e8:	d1b9      	bne.n	801a65e <_strtod_l+0x76>
 801a6ea:	f7fe fb83 	bl	8018df4 <__errno>
 801a6ee:	2322      	movs	r3, #34	; 0x22
 801a6f0:	6003      	str	r3, [r0, #0]
 801a6f2:	e7b4      	b.n	801a65e <_strtod_l+0x76>
 801a6f4:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 801a6f8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801a6fc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801a700:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801a704:	e7e7      	b.n	801a6d6 <_strtod_l+0xee>
 801a706:	f8df 9184 	ldr.w	r9, [pc, #388]	; 801a88c <_strtod_l+0x2a4>
 801a70a:	e7e4      	b.n	801a6d6 <_strtod_l+0xee>
 801a70c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801a710:	f04f 38ff 	mov.w	r8, #4294967295
 801a714:	e7df      	b.n	801a6d6 <_strtod_l+0xee>
 801a716:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a718:	1c5a      	adds	r2, r3, #1
 801a71a:	9211      	str	r2, [sp, #68]	; 0x44
 801a71c:	785b      	ldrb	r3, [r3, #1]
 801a71e:	2b30      	cmp	r3, #48	; 0x30
 801a720:	d0f9      	beq.n	801a716 <_strtod_l+0x12e>
 801a722:	2b00      	cmp	r3, #0
 801a724:	d09b      	beq.n	801a65e <_strtod_l+0x76>
 801a726:	2301      	movs	r3, #1
 801a728:	9306      	str	r3, [sp, #24]
 801a72a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a72c:	9309      	str	r3, [sp, #36]	; 0x24
 801a72e:	2300      	movs	r3, #0
 801a730:	9305      	str	r3, [sp, #20]
 801a732:	9307      	str	r3, [sp, #28]
 801a734:	461e      	mov	r6, r3
 801a736:	220a      	movs	r2, #10
 801a738:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a73a:	7805      	ldrb	r5, [r0, #0]
 801a73c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 801a740:	b2d9      	uxtb	r1, r3
 801a742:	2909      	cmp	r1, #9
 801a744:	d92b      	bls.n	801a79e <_strtod_l+0x1b6>
 801a746:	4950      	ldr	r1, [pc, #320]	; (801a888 <_strtod_l+0x2a0>)
 801a748:	2201      	movs	r2, #1
 801a74a:	f000 ffa9 	bl	801b6a0 <strncmp>
 801a74e:	2800      	cmp	r0, #0
 801a750:	d035      	beq.n	801a7be <_strtod_l+0x1d6>
 801a752:	2000      	movs	r0, #0
 801a754:	462a      	mov	r2, r5
 801a756:	4633      	mov	r3, r6
 801a758:	4683      	mov	fp, r0
 801a75a:	4601      	mov	r1, r0
 801a75c:	2a65      	cmp	r2, #101	; 0x65
 801a75e:	d001      	beq.n	801a764 <_strtod_l+0x17c>
 801a760:	2a45      	cmp	r2, #69	; 0x45
 801a762:	d118      	bne.n	801a796 <_strtod_l+0x1ae>
 801a764:	b91b      	cbnz	r3, 801a76e <_strtod_l+0x186>
 801a766:	9b06      	ldr	r3, [sp, #24]
 801a768:	4303      	orrs	r3, r0
 801a76a:	d094      	beq.n	801a696 <_strtod_l+0xae>
 801a76c:	2300      	movs	r3, #0
 801a76e:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 801a772:	f10a 0201 	add.w	r2, sl, #1
 801a776:	9211      	str	r2, [sp, #68]	; 0x44
 801a778:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801a77c:	2a2b      	cmp	r2, #43	; 0x2b
 801a77e:	d075      	beq.n	801a86c <_strtod_l+0x284>
 801a780:	2a2d      	cmp	r2, #45	; 0x2d
 801a782:	d07b      	beq.n	801a87c <_strtod_l+0x294>
 801a784:	f04f 0e00 	mov.w	lr, #0
 801a788:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 801a78c:	2d09      	cmp	r5, #9
 801a78e:	f240 8083 	bls.w	801a898 <_strtod_l+0x2b0>
 801a792:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 801a796:	2500      	movs	r5, #0
 801a798:	e09e      	b.n	801a8d8 <_strtod_l+0x2f0>
 801a79a:	2300      	movs	r3, #0
 801a79c:	e7c4      	b.n	801a728 <_strtod_l+0x140>
 801a79e:	2e08      	cmp	r6, #8
 801a7a0:	bfd5      	itete	le
 801a7a2:	9907      	ldrle	r1, [sp, #28]
 801a7a4:	9905      	ldrgt	r1, [sp, #20]
 801a7a6:	fb02 3301 	mlale	r3, r2, r1, r3
 801a7aa:	fb02 3301 	mlagt	r3, r2, r1, r3
 801a7ae:	f100 0001 	add.w	r0, r0, #1
 801a7b2:	bfd4      	ite	le
 801a7b4:	9307      	strle	r3, [sp, #28]
 801a7b6:	9305      	strgt	r3, [sp, #20]
 801a7b8:	3601      	adds	r6, #1
 801a7ba:	9011      	str	r0, [sp, #68]	; 0x44
 801a7bc:	e7bc      	b.n	801a738 <_strtod_l+0x150>
 801a7be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a7c0:	1c5a      	adds	r2, r3, #1
 801a7c2:	9211      	str	r2, [sp, #68]	; 0x44
 801a7c4:	785a      	ldrb	r2, [r3, #1]
 801a7c6:	b3ae      	cbz	r6, 801a834 <_strtod_l+0x24c>
 801a7c8:	4683      	mov	fp, r0
 801a7ca:	4633      	mov	r3, r6
 801a7cc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801a7d0:	2909      	cmp	r1, #9
 801a7d2:	d912      	bls.n	801a7fa <_strtod_l+0x212>
 801a7d4:	2101      	movs	r1, #1
 801a7d6:	e7c1      	b.n	801a75c <_strtod_l+0x174>
 801a7d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a7da:	1c5a      	adds	r2, r3, #1
 801a7dc:	9211      	str	r2, [sp, #68]	; 0x44
 801a7de:	785a      	ldrb	r2, [r3, #1]
 801a7e0:	3001      	adds	r0, #1
 801a7e2:	2a30      	cmp	r2, #48	; 0x30
 801a7e4:	d0f8      	beq.n	801a7d8 <_strtod_l+0x1f0>
 801a7e6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801a7ea:	2b08      	cmp	r3, #8
 801a7ec:	f200 8495 	bhi.w	801b11a <_strtod_l+0xb32>
 801a7f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a7f2:	9309      	str	r3, [sp, #36]	; 0x24
 801a7f4:	4683      	mov	fp, r0
 801a7f6:	2000      	movs	r0, #0
 801a7f8:	4603      	mov	r3, r0
 801a7fa:	3a30      	subs	r2, #48	; 0x30
 801a7fc:	f100 0101 	add.w	r1, r0, #1
 801a800:	d012      	beq.n	801a828 <_strtod_l+0x240>
 801a802:	448b      	add	fp, r1
 801a804:	eb00 0c03 	add.w	ip, r0, r3
 801a808:	4619      	mov	r1, r3
 801a80a:	250a      	movs	r5, #10
 801a80c:	4561      	cmp	r1, ip
 801a80e:	d113      	bne.n	801a838 <_strtod_l+0x250>
 801a810:	1819      	adds	r1, r3, r0
 801a812:	2908      	cmp	r1, #8
 801a814:	f103 0301 	add.w	r3, r3, #1
 801a818:	4403      	add	r3, r0
 801a81a:	dc1b      	bgt.n	801a854 <_strtod_l+0x26c>
 801a81c:	9807      	ldr	r0, [sp, #28]
 801a81e:	210a      	movs	r1, #10
 801a820:	fb01 2200 	mla	r2, r1, r0, r2
 801a824:	9207      	str	r2, [sp, #28]
 801a826:	2100      	movs	r1, #0
 801a828:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a82a:	1c50      	adds	r0, r2, #1
 801a82c:	9011      	str	r0, [sp, #68]	; 0x44
 801a82e:	7852      	ldrb	r2, [r2, #1]
 801a830:	4608      	mov	r0, r1
 801a832:	e7cb      	b.n	801a7cc <_strtod_l+0x1e4>
 801a834:	4630      	mov	r0, r6
 801a836:	e7d4      	b.n	801a7e2 <_strtod_l+0x1fa>
 801a838:	2908      	cmp	r1, #8
 801a83a:	f101 0101 	add.w	r1, r1, #1
 801a83e:	dc03      	bgt.n	801a848 <_strtod_l+0x260>
 801a840:	9f07      	ldr	r7, [sp, #28]
 801a842:	436f      	muls	r7, r5
 801a844:	9707      	str	r7, [sp, #28]
 801a846:	e7e1      	b.n	801a80c <_strtod_l+0x224>
 801a848:	2910      	cmp	r1, #16
 801a84a:	bfde      	ittt	le
 801a84c:	9f05      	ldrle	r7, [sp, #20]
 801a84e:	436f      	mulle	r7, r5
 801a850:	9705      	strle	r7, [sp, #20]
 801a852:	e7db      	b.n	801a80c <_strtod_l+0x224>
 801a854:	2b10      	cmp	r3, #16
 801a856:	bfdf      	itttt	le
 801a858:	9805      	ldrle	r0, [sp, #20]
 801a85a:	210a      	movle	r1, #10
 801a85c:	fb01 2200 	mlale	r2, r1, r0, r2
 801a860:	9205      	strle	r2, [sp, #20]
 801a862:	e7e0      	b.n	801a826 <_strtod_l+0x23e>
 801a864:	f04f 0b00 	mov.w	fp, #0
 801a868:	2101      	movs	r1, #1
 801a86a:	e77c      	b.n	801a766 <_strtod_l+0x17e>
 801a86c:	f04f 0e00 	mov.w	lr, #0
 801a870:	f10a 0202 	add.w	r2, sl, #2
 801a874:	9211      	str	r2, [sp, #68]	; 0x44
 801a876:	f89a 2002 	ldrb.w	r2, [sl, #2]
 801a87a:	e785      	b.n	801a788 <_strtod_l+0x1a0>
 801a87c:	f04f 0e01 	mov.w	lr, #1
 801a880:	e7f6      	b.n	801a870 <_strtod_l+0x288>
 801a882:	bf00      	nop
 801a884:	0801ca78 	.word	0x0801ca78
 801a888:	0801ca74 	.word	0x0801ca74
 801a88c:	7ff00000 	.word	0x7ff00000
 801a890:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a892:	1c55      	adds	r5, r2, #1
 801a894:	9511      	str	r5, [sp, #68]	; 0x44
 801a896:	7852      	ldrb	r2, [r2, #1]
 801a898:	2a30      	cmp	r2, #48	; 0x30
 801a89a:	d0f9      	beq.n	801a890 <_strtod_l+0x2a8>
 801a89c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 801a8a0:	2d08      	cmp	r5, #8
 801a8a2:	f63f af78 	bhi.w	801a796 <_strtod_l+0x1ae>
 801a8a6:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 801a8aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a8ac:	920a      	str	r2, [sp, #40]	; 0x28
 801a8ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a8b0:	1c55      	adds	r5, r2, #1
 801a8b2:	9511      	str	r5, [sp, #68]	; 0x44
 801a8b4:	7852      	ldrb	r2, [r2, #1]
 801a8b6:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 801a8ba:	2f09      	cmp	r7, #9
 801a8bc:	d937      	bls.n	801a92e <_strtod_l+0x346>
 801a8be:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801a8c0:	1bed      	subs	r5, r5, r7
 801a8c2:	2d08      	cmp	r5, #8
 801a8c4:	f644 651f 	movw	r5, #19999	; 0x4e1f
 801a8c8:	dc02      	bgt.n	801a8d0 <_strtod_l+0x2e8>
 801a8ca:	4565      	cmp	r5, ip
 801a8cc:	bfa8      	it	ge
 801a8ce:	4665      	movge	r5, ip
 801a8d0:	f1be 0f00 	cmp.w	lr, #0
 801a8d4:	d000      	beq.n	801a8d8 <_strtod_l+0x2f0>
 801a8d6:	426d      	negs	r5, r5
 801a8d8:	2b00      	cmp	r3, #0
 801a8da:	d14d      	bne.n	801a978 <_strtod_l+0x390>
 801a8dc:	9b06      	ldr	r3, [sp, #24]
 801a8de:	4303      	orrs	r3, r0
 801a8e0:	f47f aebd 	bne.w	801a65e <_strtod_l+0x76>
 801a8e4:	2900      	cmp	r1, #0
 801a8e6:	f47f aed6 	bne.w	801a696 <_strtod_l+0xae>
 801a8ea:	2a69      	cmp	r2, #105	; 0x69
 801a8ec:	d027      	beq.n	801a93e <_strtod_l+0x356>
 801a8ee:	dc24      	bgt.n	801a93a <_strtod_l+0x352>
 801a8f0:	2a49      	cmp	r2, #73	; 0x49
 801a8f2:	d024      	beq.n	801a93e <_strtod_l+0x356>
 801a8f4:	2a4e      	cmp	r2, #78	; 0x4e
 801a8f6:	f47f aece 	bne.w	801a696 <_strtod_l+0xae>
 801a8fa:	4995      	ldr	r1, [pc, #596]	; (801ab50 <_strtod_l+0x568>)
 801a8fc:	a811      	add	r0, sp, #68	; 0x44
 801a8fe:	f001 f9d7 	bl	801bcb0 <__match>
 801a902:	2800      	cmp	r0, #0
 801a904:	f43f aec7 	beq.w	801a696 <_strtod_l+0xae>
 801a908:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a90a:	781b      	ldrb	r3, [r3, #0]
 801a90c:	2b28      	cmp	r3, #40	; 0x28
 801a90e:	d12d      	bne.n	801a96c <_strtod_l+0x384>
 801a910:	4990      	ldr	r1, [pc, #576]	; (801ab54 <_strtod_l+0x56c>)
 801a912:	aa14      	add	r2, sp, #80	; 0x50
 801a914:	a811      	add	r0, sp, #68	; 0x44
 801a916:	f001 f9df 	bl	801bcd8 <__hexnan>
 801a91a:	2805      	cmp	r0, #5
 801a91c:	d126      	bne.n	801a96c <_strtod_l+0x384>
 801a91e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a920:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801a924:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801a928:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801a92c:	e697      	b.n	801a65e <_strtod_l+0x76>
 801a92e:	250a      	movs	r5, #10
 801a930:	fb05 2c0c 	mla	ip, r5, ip, r2
 801a934:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 801a938:	e7b9      	b.n	801a8ae <_strtod_l+0x2c6>
 801a93a:	2a6e      	cmp	r2, #110	; 0x6e
 801a93c:	e7db      	b.n	801a8f6 <_strtod_l+0x30e>
 801a93e:	4986      	ldr	r1, [pc, #536]	; (801ab58 <_strtod_l+0x570>)
 801a940:	a811      	add	r0, sp, #68	; 0x44
 801a942:	f001 f9b5 	bl	801bcb0 <__match>
 801a946:	2800      	cmp	r0, #0
 801a948:	f43f aea5 	beq.w	801a696 <_strtod_l+0xae>
 801a94c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a94e:	4983      	ldr	r1, [pc, #524]	; (801ab5c <_strtod_l+0x574>)
 801a950:	3b01      	subs	r3, #1
 801a952:	a811      	add	r0, sp, #68	; 0x44
 801a954:	9311      	str	r3, [sp, #68]	; 0x44
 801a956:	f001 f9ab 	bl	801bcb0 <__match>
 801a95a:	b910      	cbnz	r0, 801a962 <_strtod_l+0x37a>
 801a95c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a95e:	3301      	adds	r3, #1
 801a960:	9311      	str	r3, [sp, #68]	; 0x44
 801a962:	f8df 920c 	ldr.w	r9, [pc, #524]	; 801ab70 <_strtod_l+0x588>
 801a966:	f04f 0800 	mov.w	r8, #0
 801a96a:	e678      	b.n	801a65e <_strtod_l+0x76>
 801a96c:	487c      	ldr	r0, [pc, #496]	; (801ab60 <_strtod_l+0x578>)
 801a96e:	f000 febb 	bl	801b6e8 <nan>
 801a972:	ec59 8b10 	vmov	r8, r9, d0
 801a976:	e672      	b.n	801a65e <_strtod_l+0x76>
 801a978:	eddd 7a07 	vldr	s15, [sp, #28]
 801a97c:	eba5 020b 	sub.w	r2, r5, fp
 801a980:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801a984:	2e00      	cmp	r6, #0
 801a986:	bf08      	it	eq
 801a988:	461e      	moveq	r6, r3
 801a98a:	2b10      	cmp	r3, #16
 801a98c:	9206      	str	r2, [sp, #24]
 801a98e:	461a      	mov	r2, r3
 801a990:	bfa8      	it	ge
 801a992:	2210      	movge	r2, #16
 801a994:	2b09      	cmp	r3, #9
 801a996:	ec59 8b17 	vmov	r8, r9, d7
 801a99a:	dd0c      	ble.n	801a9b6 <_strtod_l+0x3ce>
 801a99c:	4971      	ldr	r1, [pc, #452]	; (801ab64 <_strtod_l+0x57c>)
 801a99e:	eddd 6a05 	vldr	s13, [sp, #20]
 801a9a2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801a9a6:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 801a9aa:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801a9ae:	eea7 6b05 	vfma.f64	d6, d7, d5
 801a9b2:	ec59 8b16 	vmov	r8, r9, d6
 801a9b6:	2b0f      	cmp	r3, #15
 801a9b8:	dc37      	bgt.n	801aa2a <_strtod_l+0x442>
 801a9ba:	9906      	ldr	r1, [sp, #24]
 801a9bc:	2900      	cmp	r1, #0
 801a9be:	f43f ae4e 	beq.w	801a65e <_strtod_l+0x76>
 801a9c2:	dd23      	ble.n	801aa0c <_strtod_l+0x424>
 801a9c4:	2916      	cmp	r1, #22
 801a9c6:	dc0b      	bgt.n	801a9e0 <_strtod_l+0x3f8>
 801a9c8:	4b66      	ldr	r3, [pc, #408]	; (801ab64 <_strtod_l+0x57c>)
 801a9ca:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801a9ce:	ed93 7b00 	vldr	d7, [r3]
 801a9d2:	ec49 8b16 	vmov	d6, r8, r9
 801a9d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a9da:	ec59 8b17 	vmov	r8, r9, d7
 801a9de:	e63e      	b.n	801a65e <_strtod_l+0x76>
 801a9e0:	9806      	ldr	r0, [sp, #24]
 801a9e2:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801a9e6:	4281      	cmp	r1, r0
 801a9e8:	db1f      	blt.n	801aa2a <_strtod_l+0x442>
 801a9ea:	4a5e      	ldr	r2, [pc, #376]	; (801ab64 <_strtod_l+0x57c>)
 801a9ec:	f1c3 030f 	rsb	r3, r3, #15
 801a9f0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801a9f4:	ed91 7b00 	vldr	d7, [r1]
 801a9f8:	ec49 8b16 	vmov	d6, r8, r9
 801a9fc:	1ac3      	subs	r3, r0, r3
 801a9fe:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801aa02:	ee27 7b06 	vmul.f64	d7, d7, d6
 801aa06:	ed92 6b00 	vldr	d6, [r2]
 801aa0a:	e7e4      	b.n	801a9d6 <_strtod_l+0x3ee>
 801aa0c:	9906      	ldr	r1, [sp, #24]
 801aa0e:	3116      	adds	r1, #22
 801aa10:	db0b      	blt.n	801aa2a <_strtod_l+0x442>
 801aa12:	4b54      	ldr	r3, [pc, #336]	; (801ab64 <_strtod_l+0x57c>)
 801aa14:	ebab 0505 	sub.w	r5, fp, r5
 801aa18:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801aa1c:	ed95 7b00 	vldr	d7, [r5]
 801aa20:	ec49 8b16 	vmov	d6, r8, r9
 801aa24:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801aa28:	e7d7      	b.n	801a9da <_strtod_l+0x3f2>
 801aa2a:	9906      	ldr	r1, [sp, #24]
 801aa2c:	1a9a      	subs	r2, r3, r2
 801aa2e:	440a      	add	r2, r1
 801aa30:	2a00      	cmp	r2, #0
 801aa32:	dd6e      	ble.n	801ab12 <_strtod_l+0x52a>
 801aa34:	f012 000f 	ands.w	r0, r2, #15
 801aa38:	d00a      	beq.n	801aa50 <_strtod_l+0x468>
 801aa3a:	494a      	ldr	r1, [pc, #296]	; (801ab64 <_strtod_l+0x57c>)
 801aa3c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801aa40:	ed91 7b00 	vldr	d7, [r1]
 801aa44:	ec49 8b16 	vmov	d6, r8, r9
 801aa48:	ee27 7b06 	vmul.f64	d7, d7, d6
 801aa4c:	ec59 8b17 	vmov	r8, r9, d7
 801aa50:	f032 020f 	bics.w	r2, r2, #15
 801aa54:	d04e      	beq.n	801aaf4 <_strtod_l+0x50c>
 801aa56:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801aa5a:	dd22      	ble.n	801aaa2 <_strtod_l+0x4ba>
 801aa5c:	2500      	movs	r5, #0
 801aa5e:	462e      	mov	r6, r5
 801aa60:	9507      	str	r5, [sp, #28]
 801aa62:	462f      	mov	r7, r5
 801aa64:	2322      	movs	r3, #34	; 0x22
 801aa66:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801ab70 <_strtod_l+0x588>
 801aa6a:	6023      	str	r3, [r4, #0]
 801aa6c:	f04f 0800 	mov.w	r8, #0
 801aa70:	9b07      	ldr	r3, [sp, #28]
 801aa72:	2b00      	cmp	r3, #0
 801aa74:	f43f adf3 	beq.w	801a65e <_strtod_l+0x76>
 801aa78:	9912      	ldr	r1, [sp, #72]	; 0x48
 801aa7a:	4620      	mov	r0, r4
 801aa7c:	f7ff f930 	bl	8019ce0 <_Bfree>
 801aa80:	4639      	mov	r1, r7
 801aa82:	4620      	mov	r0, r4
 801aa84:	f7ff f92c 	bl	8019ce0 <_Bfree>
 801aa88:	4631      	mov	r1, r6
 801aa8a:	4620      	mov	r0, r4
 801aa8c:	f7ff f928 	bl	8019ce0 <_Bfree>
 801aa90:	9907      	ldr	r1, [sp, #28]
 801aa92:	4620      	mov	r0, r4
 801aa94:	f7ff f924 	bl	8019ce0 <_Bfree>
 801aa98:	4629      	mov	r1, r5
 801aa9a:	4620      	mov	r0, r4
 801aa9c:	f7ff f920 	bl	8019ce0 <_Bfree>
 801aaa0:	e5dd      	b.n	801a65e <_strtod_l+0x76>
 801aaa2:	2000      	movs	r0, #0
 801aaa4:	ec49 8b17 	vmov	d7, r8, r9
 801aaa8:	4f2f      	ldr	r7, [pc, #188]	; (801ab68 <_strtod_l+0x580>)
 801aaaa:	1112      	asrs	r2, r2, #4
 801aaac:	4601      	mov	r1, r0
 801aaae:	2a01      	cmp	r2, #1
 801aab0:	dc23      	bgt.n	801aafa <_strtod_l+0x512>
 801aab2:	b108      	cbz	r0, 801aab8 <_strtod_l+0x4d0>
 801aab4:	ec59 8b17 	vmov	r8, r9, d7
 801aab8:	4a2b      	ldr	r2, [pc, #172]	; (801ab68 <_strtod_l+0x580>)
 801aaba:	482c      	ldr	r0, [pc, #176]	; (801ab6c <_strtod_l+0x584>)
 801aabc:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801aac0:	ed92 7b00 	vldr	d7, [r2]
 801aac4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801aac8:	ec49 8b16 	vmov	d6, r8, r9
 801aacc:	4a28      	ldr	r2, [pc, #160]	; (801ab70 <_strtod_l+0x588>)
 801aace:	ee27 7b06 	vmul.f64	d7, d7, d6
 801aad2:	ee17 1a90 	vmov	r1, s15
 801aad6:	400a      	ands	r2, r1
 801aad8:	4282      	cmp	r2, r0
 801aada:	ec59 8b17 	vmov	r8, r9, d7
 801aade:	d8bd      	bhi.n	801aa5c <_strtod_l+0x474>
 801aae0:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801aae4:	4282      	cmp	r2, r0
 801aae6:	bf86      	itte	hi
 801aae8:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 801ab74 <_strtod_l+0x58c>
 801aaec:	f04f 38ff 	movhi.w	r8, #4294967295
 801aaf0:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801aaf4:	2200      	movs	r2, #0
 801aaf6:	9205      	str	r2, [sp, #20]
 801aaf8:	e076      	b.n	801abe8 <_strtod_l+0x600>
 801aafa:	f012 0f01 	tst.w	r2, #1
 801aafe:	d004      	beq.n	801ab0a <_strtod_l+0x522>
 801ab00:	ed97 6b00 	vldr	d6, [r7]
 801ab04:	2001      	movs	r0, #1
 801ab06:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ab0a:	3101      	adds	r1, #1
 801ab0c:	1052      	asrs	r2, r2, #1
 801ab0e:	3708      	adds	r7, #8
 801ab10:	e7cd      	b.n	801aaae <_strtod_l+0x4c6>
 801ab12:	d0ef      	beq.n	801aaf4 <_strtod_l+0x50c>
 801ab14:	4252      	negs	r2, r2
 801ab16:	f012 000f 	ands.w	r0, r2, #15
 801ab1a:	d00a      	beq.n	801ab32 <_strtod_l+0x54a>
 801ab1c:	4911      	ldr	r1, [pc, #68]	; (801ab64 <_strtod_l+0x57c>)
 801ab1e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801ab22:	ed91 7b00 	vldr	d7, [r1]
 801ab26:	ec49 8b16 	vmov	d6, r8, r9
 801ab2a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801ab2e:	ec59 8b17 	vmov	r8, r9, d7
 801ab32:	1112      	asrs	r2, r2, #4
 801ab34:	d0de      	beq.n	801aaf4 <_strtod_l+0x50c>
 801ab36:	2a1f      	cmp	r2, #31
 801ab38:	dd1e      	ble.n	801ab78 <_strtod_l+0x590>
 801ab3a:	2500      	movs	r5, #0
 801ab3c:	462e      	mov	r6, r5
 801ab3e:	9507      	str	r5, [sp, #28]
 801ab40:	462f      	mov	r7, r5
 801ab42:	2322      	movs	r3, #34	; 0x22
 801ab44:	f04f 0800 	mov.w	r8, #0
 801ab48:	f04f 0900 	mov.w	r9, #0
 801ab4c:	6023      	str	r3, [r4, #0]
 801ab4e:	e78f      	b.n	801aa70 <_strtod_l+0x488>
 801ab50:	0801c865 	.word	0x0801c865
 801ab54:	0801ca8c 	.word	0x0801ca8c
 801ab58:	0801c85d 	.word	0x0801c85d
 801ab5c:	0801c894 	.word	0x0801c894
 801ab60:	0801cc1d 	.word	0x0801cc1d
 801ab64:	0801c9a0 	.word	0x0801c9a0
 801ab68:	0801c978 	.word	0x0801c978
 801ab6c:	7ca00000 	.word	0x7ca00000
 801ab70:	7ff00000 	.word	0x7ff00000
 801ab74:	7fefffff 	.word	0x7fefffff
 801ab78:	f012 0110 	ands.w	r1, r2, #16
 801ab7c:	bf18      	it	ne
 801ab7e:	216a      	movne	r1, #106	; 0x6a
 801ab80:	9105      	str	r1, [sp, #20]
 801ab82:	ec49 8b17 	vmov	d7, r8, r9
 801ab86:	49be      	ldr	r1, [pc, #760]	; (801ae80 <_strtod_l+0x898>)
 801ab88:	2000      	movs	r0, #0
 801ab8a:	07d7      	lsls	r7, r2, #31
 801ab8c:	d504      	bpl.n	801ab98 <_strtod_l+0x5b0>
 801ab8e:	ed91 6b00 	vldr	d6, [r1]
 801ab92:	2001      	movs	r0, #1
 801ab94:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ab98:	1052      	asrs	r2, r2, #1
 801ab9a:	f101 0108 	add.w	r1, r1, #8
 801ab9e:	d1f4      	bne.n	801ab8a <_strtod_l+0x5a2>
 801aba0:	b108      	cbz	r0, 801aba6 <_strtod_l+0x5be>
 801aba2:	ec59 8b17 	vmov	r8, r9, d7
 801aba6:	9a05      	ldr	r2, [sp, #20]
 801aba8:	b1ba      	cbz	r2, 801abda <_strtod_l+0x5f2>
 801abaa:	f3c9 510a 	ubfx	r1, r9, #20, #11
 801abae:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 801abb2:	2a00      	cmp	r2, #0
 801abb4:	4648      	mov	r0, r9
 801abb6:	dd10      	ble.n	801abda <_strtod_l+0x5f2>
 801abb8:	2a1f      	cmp	r2, #31
 801abba:	f340 812c 	ble.w	801ae16 <_strtod_l+0x82e>
 801abbe:	2a34      	cmp	r2, #52	; 0x34
 801abc0:	bfde      	ittt	le
 801abc2:	f04f 32ff 	movle.w	r2, #4294967295
 801abc6:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 801abca:	408a      	lslle	r2, r1
 801abcc:	f04f 0800 	mov.w	r8, #0
 801abd0:	bfcc      	ite	gt
 801abd2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801abd6:	ea02 0900 	andle.w	r9, r2, r0
 801abda:	ec49 8b17 	vmov	d7, r8, r9
 801abde:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801abe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801abe6:	d0a8      	beq.n	801ab3a <_strtod_l+0x552>
 801abe8:	9a07      	ldr	r2, [sp, #28]
 801abea:	9200      	str	r2, [sp, #0]
 801abec:	9909      	ldr	r1, [sp, #36]	; 0x24
 801abee:	4632      	mov	r2, r6
 801abf0:	4620      	mov	r0, r4
 801abf2:	f7ff f8dd 	bl	8019db0 <__s2b>
 801abf6:	9007      	str	r0, [sp, #28]
 801abf8:	2800      	cmp	r0, #0
 801abfa:	f43f af2f 	beq.w	801aa5c <_strtod_l+0x474>
 801abfe:	9a06      	ldr	r2, [sp, #24]
 801ac00:	2a00      	cmp	r2, #0
 801ac02:	ebab 0305 	sub.w	r3, fp, r5
 801ac06:	ed9f 9b96 	vldr	d9, [pc, #600]	; 801ae60 <_strtod_l+0x878>
 801ac0a:	bfa8      	it	ge
 801ac0c:	2300      	movge	r3, #0
 801ac0e:	ed9f ab96 	vldr	d10, [pc, #600]	; 801ae68 <_strtod_l+0x880>
 801ac12:	ed9f bb97 	vldr	d11, [pc, #604]	; 801ae70 <_strtod_l+0x888>
 801ac16:	9309      	str	r3, [sp, #36]	; 0x24
 801ac18:	2500      	movs	r5, #0
 801ac1a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801ac1e:	930c      	str	r3, [sp, #48]	; 0x30
 801ac20:	462e      	mov	r6, r5
 801ac22:	9b07      	ldr	r3, [sp, #28]
 801ac24:	4620      	mov	r0, r4
 801ac26:	6859      	ldr	r1, [r3, #4]
 801ac28:	f7ff f81a 	bl	8019c60 <_Balloc>
 801ac2c:	4607      	mov	r7, r0
 801ac2e:	2800      	cmp	r0, #0
 801ac30:	f43f af18 	beq.w	801aa64 <_strtod_l+0x47c>
 801ac34:	9b07      	ldr	r3, [sp, #28]
 801ac36:	691a      	ldr	r2, [r3, #16]
 801ac38:	3202      	adds	r2, #2
 801ac3a:	f103 010c 	add.w	r1, r3, #12
 801ac3e:	0092      	lsls	r2, r2, #2
 801ac40:	300c      	adds	r0, #12
 801ac42:	f7fe f904 	bl	8018e4e <memcpy>
 801ac46:	ec49 8b10 	vmov	d0, r8, r9
 801ac4a:	aa14      	add	r2, sp, #80	; 0x50
 801ac4c:	a913      	add	r1, sp, #76	; 0x4c
 801ac4e:	4620      	mov	r0, r4
 801ac50:	f7ff fbe2 	bl	801a418 <__d2b>
 801ac54:	ec49 8b18 	vmov	d8, r8, r9
 801ac58:	9012      	str	r0, [sp, #72]	; 0x48
 801ac5a:	2800      	cmp	r0, #0
 801ac5c:	f43f af02 	beq.w	801aa64 <_strtod_l+0x47c>
 801ac60:	2101      	movs	r1, #1
 801ac62:	4620      	mov	r0, r4
 801ac64:	f7ff f93c 	bl	8019ee0 <__i2b>
 801ac68:	4606      	mov	r6, r0
 801ac6a:	2800      	cmp	r0, #0
 801ac6c:	f43f aefa 	beq.w	801aa64 <_strtod_l+0x47c>
 801ac70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ac72:	9914      	ldr	r1, [sp, #80]	; 0x50
 801ac74:	2b00      	cmp	r3, #0
 801ac76:	bfab      	itete	ge
 801ac78:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 801ac7a:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 801ac7c:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 801ac80:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 801ac84:	bfac      	ite	ge
 801ac86:	eb03 0b02 	addge.w	fp, r3, r2
 801ac8a:	eba2 0a03 	sublt.w	sl, r2, r3
 801ac8e:	9a05      	ldr	r2, [sp, #20]
 801ac90:	1a9b      	subs	r3, r3, r2
 801ac92:	440b      	add	r3, r1
 801ac94:	4a7b      	ldr	r2, [pc, #492]	; (801ae84 <_strtod_l+0x89c>)
 801ac96:	3b01      	subs	r3, #1
 801ac98:	4293      	cmp	r3, r2
 801ac9a:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 801ac9e:	f280 80cd 	bge.w	801ae3c <_strtod_l+0x854>
 801aca2:	1ad2      	subs	r2, r2, r3
 801aca4:	2a1f      	cmp	r2, #31
 801aca6:	eba1 0102 	sub.w	r1, r1, r2
 801acaa:	f04f 0001 	mov.w	r0, #1
 801acae:	f300 80b9 	bgt.w	801ae24 <_strtod_l+0x83c>
 801acb2:	fa00 f302 	lsl.w	r3, r0, r2
 801acb6:	930b      	str	r3, [sp, #44]	; 0x2c
 801acb8:	2300      	movs	r3, #0
 801acba:	930a      	str	r3, [sp, #40]	; 0x28
 801acbc:	eb0b 0301 	add.w	r3, fp, r1
 801acc0:	9a05      	ldr	r2, [sp, #20]
 801acc2:	459b      	cmp	fp, r3
 801acc4:	448a      	add	sl, r1
 801acc6:	4492      	add	sl, r2
 801acc8:	465a      	mov	r2, fp
 801acca:	bfa8      	it	ge
 801accc:	461a      	movge	r2, r3
 801acce:	4552      	cmp	r2, sl
 801acd0:	bfa8      	it	ge
 801acd2:	4652      	movge	r2, sl
 801acd4:	2a00      	cmp	r2, #0
 801acd6:	bfc2      	ittt	gt
 801acd8:	1a9b      	subgt	r3, r3, r2
 801acda:	ebaa 0a02 	subgt.w	sl, sl, r2
 801acde:	ebab 0b02 	subgt.w	fp, fp, r2
 801ace2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ace4:	2a00      	cmp	r2, #0
 801ace6:	dd18      	ble.n	801ad1a <_strtod_l+0x732>
 801ace8:	4631      	mov	r1, r6
 801acea:	4620      	mov	r0, r4
 801acec:	930f      	str	r3, [sp, #60]	; 0x3c
 801acee:	f7ff f9b7 	bl	801a060 <__pow5mult>
 801acf2:	4606      	mov	r6, r0
 801acf4:	2800      	cmp	r0, #0
 801acf6:	f43f aeb5 	beq.w	801aa64 <_strtod_l+0x47c>
 801acfa:	4601      	mov	r1, r0
 801acfc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801acfe:	4620      	mov	r0, r4
 801ad00:	f7ff f904 	bl	8019f0c <__multiply>
 801ad04:	900e      	str	r0, [sp, #56]	; 0x38
 801ad06:	2800      	cmp	r0, #0
 801ad08:	f43f aeac 	beq.w	801aa64 <_strtod_l+0x47c>
 801ad0c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ad0e:	4620      	mov	r0, r4
 801ad10:	f7fe ffe6 	bl	8019ce0 <_Bfree>
 801ad14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ad16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ad18:	9212      	str	r2, [sp, #72]	; 0x48
 801ad1a:	2b00      	cmp	r3, #0
 801ad1c:	f300 8093 	bgt.w	801ae46 <_strtod_l+0x85e>
 801ad20:	9b06      	ldr	r3, [sp, #24]
 801ad22:	2b00      	cmp	r3, #0
 801ad24:	dd08      	ble.n	801ad38 <_strtod_l+0x750>
 801ad26:	4639      	mov	r1, r7
 801ad28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ad2a:	4620      	mov	r0, r4
 801ad2c:	f7ff f998 	bl	801a060 <__pow5mult>
 801ad30:	4607      	mov	r7, r0
 801ad32:	2800      	cmp	r0, #0
 801ad34:	f43f ae96 	beq.w	801aa64 <_strtod_l+0x47c>
 801ad38:	f1ba 0f00 	cmp.w	sl, #0
 801ad3c:	dd08      	ble.n	801ad50 <_strtod_l+0x768>
 801ad3e:	4639      	mov	r1, r7
 801ad40:	4652      	mov	r2, sl
 801ad42:	4620      	mov	r0, r4
 801ad44:	f7ff f9e6 	bl	801a114 <__lshift>
 801ad48:	4607      	mov	r7, r0
 801ad4a:	2800      	cmp	r0, #0
 801ad4c:	f43f ae8a 	beq.w	801aa64 <_strtod_l+0x47c>
 801ad50:	f1bb 0f00 	cmp.w	fp, #0
 801ad54:	dd08      	ble.n	801ad68 <_strtod_l+0x780>
 801ad56:	4631      	mov	r1, r6
 801ad58:	465a      	mov	r2, fp
 801ad5a:	4620      	mov	r0, r4
 801ad5c:	f7ff f9da 	bl	801a114 <__lshift>
 801ad60:	4606      	mov	r6, r0
 801ad62:	2800      	cmp	r0, #0
 801ad64:	f43f ae7e 	beq.w	801aa64 <_strtod_l+0x47c>
 801ad68:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ad6a:	463a      	mov	r2, r7
 801ad6c:	4620      	mov	r0, r4
 801ad6e:	f7ff fa59 	bl	801a224 <__mdiff>
 801ad72:	4605      	mov	r5, r0
 801ad74:	2800      	cmp	r0, #0
 801ad76:	f43f ae75 	beq.w	801aa64 <_strtod_l+0x47c>
 801ad7a:	2300      	movs	r3, #0
 801ad7c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 801ad80:	60c3      	str	r3, [r0, #12]
 801ad82:	4631      	mov	r1, r6
 801ad84:	f7ff fa32 	bl	801a1ec <__mcmp>
 801ad88:	2800      	cmp	r0, #0
 801ad8a:	da7f      	bge.n	801ae8c <_strtod_l+0x8a4>
 801ad8c:	ea5a 0a08 	orrs.w	sl, sl, r8
 801ad90:	f040 80a5 	bne.w	801aede <_strtod_l+0x8f6>
 801ad94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801ad98:	2b00      	cmp	r3, #0
 801ad9a:	f040 80a0 	bne.w	801aede <_strtod_l+0x8f6>
 801ad9e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801ada2:	0d1b      	lsrs	r3, r3, #20
 801ada4:	051b      	lsls	r3, r3, #20
 801ada6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801adaa:	f240 8098 	bls.w	801aede <_strtod_l+0x8f6>
 801adae:	696b      	ldr	r3, [r5, #20]
 801adb0:	b91b      	cbnz	r3, 801adba <_strtod_l+0x7d2>
 801adb2:	692b      	ldr	r3, [r5, #16]
 801adb4:	2b01      	cmp	r3, #1
 801adb6:	f340 8092 	ble.w	801aede <_strtod_l+0x8f6>
 801adba:	4629      	mov	r1, r5
 801adbc:	2201      	movs	r2, #1
 801adbe:	4620      	mov	r0, r4
 801adc0:	f7ff f9a8 	bl	801a114 <__lshift>
 801adc4:	4631      	mov	r1, r6
 801adc6:	4605      	mov	r5, r0
 801adc8:	f7ff fa10 	bl	801a1ec <__mcmp>
 801adcc:	2800      	cmp	r0, #0
 801adce:	f340 8086 	ble.w	801aede <_strtod_l+0x8f6>
 801add2:	9905      	ldr	r1, [sp, #20]
 801add4:	4a2c      	ldr	r2, [pc, #176]	; (801ae88 <_strtod_l+0x8a0>)
 801add6:	464b      	mov	r3, r9
 801add8:	2900      	cmp	r1, #0
 801adda:	f000 809f 	beq.w	801af1c <_strtod_l+0x934>
 801adde:	ea02 0109 	and.w	r1, r2, r9
 801ade2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801ade6:	f300 8099 	bgt.w	801af1c <_strtod_l+0x934>
 801adea:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801adee:	f77f aea8 	ble.w	801ab42 <_strtod_l+0x55a>
 801adf2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 801ae78 <_strtod_l+0x890>
 801adf6:	ec49 8b16 	vmov	d6, r8, r9
 801adfa:	4b23      	ldr	r3, [pc, #140]	; (801ae88 <_strtod_l+0x8a0>)
 801adfc:	ee26 7b07 	vmul.f64	d7, d6, d7
 801ae00:	ee17 2a90 	vmov	r2, s15
 801ae04:	4013      	ands	r3, r2
 801ae06:	ec59 8b17 	vmov	r8, r9, d7
 801ae0a:	2b00      	cmp	r3, #0
 801ae0c:	f47f ae34 	bne.w	801aa78 <_strtod_l+0x490>
 801ae10:	2322      	movs	r3, #34	; 0x22
 801ae12:	6023      	str	r3, [r4, #0]
 801ae14:	e630      	b.n	801aa78 <_strtod_l+0x490>
 801ae16:	f04f 31ff 	mov.w	r1, #4294967295
 801ae1a:	fa01 f202 	lsl.w	r2, r1, r2
 801ae1e:	ea02 0808 	and.w	r8, r2, r8
 801ae22:	e6da      	b.n	801abda <_strtod_l+0x5f2>
 801ae24:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 801ae28:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801ae2c:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801ae30:	33e2      	adds	r3, #226	; 0xe2
 801ae32:	fa00 f303 	lsl.w	r3, r0, r3
 801ae36:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 801ae3a:	e73f      	b.n	801acbc <_strtod_l+0x6d4>
 801ae3c:	2200      	movs	r2, #0
 801ae3e:	2301      	movs	r3, #1
 801ae40:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801ae44:	e73a      	b.n	801acbc <_strtod_l+0x6d4>
 801ae46:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ae48:	461a      	mov	r2, r3
 801ae4a:	4620      	mov	r0, r4
 801ae4c:	f7ff f962 	bl	801a114 <__lshift>
 801ae50:	9012      	str	r0, [sp, #72]	; 0x48
 801ae52:	2800      	cmp	r0, #0
 801ae54:	f47f af64 	bne.w	801ad20 <_strtod_l+0x738>
 801ae58:	e604      	b.n	801aa64 <_strtod_l+0x47c>
 801ae5a:	bf00      	nop
 801ae5c:	f3af 8000 	nop.w
 801ae60:	94a03595 	.word	0x94a03595
 801ae64:	3fcfffff 	.word	0x3fcfffff
 801ae68:	94a03595 	.word	0x94a03595
 801ae6c:	3fdfffff 	.word	0x3fdfffff
 801ae70:	35afe535 	.word	0x35afe535
 801ae74:	3fe00000 	.word	0x3fe00000
 801ae78:	00000000 	.word	0x00000000
 801ae7c:	39500000 	.word	0x39500000
 801ae80:	0801caa0 	.word	0x0801caa0
 801ae84:	fffffc02 	.word	0xfffffc02
 801ae88:	7ff00000 	.word	0x7ff00000
 801ae8c:	46cb      	mov	fp, r9
 801ae8e:	d15f      	bne.n	801af50 <_strtod_l+0x968>
 801ae90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801ae94:	f1ba 0f00 	cmp.w	sl, #0
 801ae98:	d02a      	beq.n	801aef0 <_strtod_l+0x908>
 801ae9a:	4aa7      	ldr	r2, [pc, #668]	; (801b138 <_strtod_l+0xb50>)
 801ae9c:	4293      	cmp	r3, r2
 801ae9e:	d12b      	bne.n	801aef8 <_strtod_l+0x910>
 801aea0:	9b05      	ldr	r3, [sp, #20]
 801aea2:	4642      	mov	r2, r8
 801aea4:	b1fb      	cbz	r3, 801aee6 <_strtod_l+0x8fe>
 801aea6:	4ba5      	ldr	r3, [pc, #660]	; (801b13c <_strtod_l+0xb54>)
 801aea8:	ea09 0303 	and.w	r3, r9, r3
 801aeac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801aeb0:	f04f 31ff 	mov.w	r1, #4294967295
 801aeb4:	d81a      	bhi.n	801aeec <_strtod_l+0x904>
 801aeb6:	0d1b      	lsrs	r3, r3, #20
 801aeb8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801aebc:	fa01 f303 	lsl.w	r3, r1, r3
 801aec0:	429a      	cmp	r2, r3
 801aec2:	d119      	bne.n	801aef8 <_strtod_l+0x910>
 801aec4:	4b9e      	ldr	r3, [pc, #632]	; (801b140 <_strtod_l+0xb58>)
 801aec6:	459b      	cmp	fp, r3
 801aec8:	d102      	bne.n	801aed0 <_strtod_l+0x8e8>
 801aeca:	3201      	adds	r2, #1
 801aecc:	f43f adca 	beq.w	801aa64 <_strtod_l+0x47c>
 801aed0:	4b9a      	ldr	r3, [pc, #616]	; (801b13c <_strtod_l+0xb54>)
 801aed2:	ea0b 0303 	and.w	r3, fp, r3
 801aed6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801aeda:	f04f 0800 	mov.w	r8, #0
 801aede:	9b05      	ldr	r3, [sp, #20]
 801aee0:	2b00      	cmp	r3, #0
 801aee2:	d186      	bne.n	801adf2 <_strtod_l+0x80a>
 801aee4:	e5c8      	b.n	801aa78 <_strtod_l+0x490>
 801aee6:	f04f 33ff 	mov.w	r3, #4294967295
 801aeea:	e7e9      	b.n	801aec0 <_strtod_l+0x8d8>
 801aeec:	460b      	mov	r3, r1
 801aeee:	e7e7      	b.n	801aec0 <_strtod_l+0x8d8>
 801aef0:	ea53 0308 	orrs.w	r3, r3, r8
 801aef4:	f43f af6d 	beq.w	801add2 <_strtod_l+0x7ea>
 801aef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aefa:	b1cb      	cbz	r3, 801af30 <_strtod_l+0x948>
 801aefc:	ea13 0f0b 	tst.w	r3, fp
 801af00:	d0ed      	beq.n	801aede <_strtod_l+0x8f6>
 801af02:	9a05      	ldr	r2, [sp, #20]
 801af04:	4640      	mov	r0, r8
 801af06:	4649      	mov	r1, r9
 801af08:	f1ba 0f00 	cmp.w	sl, #0
 801af0c:	d014      	beq.n	801af38 <_strtod_l+0x950>
 801af0e:	f7ff fb51 	bl	801a5b4 <sulp>
 801af12:	ee38 7b00 	vadd.f64	d7, d8, d0
 801af16:	ec59 8b17 	vmov	r8, r9, d7
 801af1a:	e7e0      	b.n	801aede <_strtod_l+0x8f6>
 801af1c:	4013      	ands	r3, r2
 801af1e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801af22:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801af26:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801af2a:	f04f 38ff 	mov.w	r8, #4294967295
 801af2e:	e7d6      	b.n	801aede <_strtod_l+0x8f6>
 801af30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801af32:	ea13 0f08 	tst.w	r3, r8
 801af36:	e7e3      	b.n	801af00 <_strtod_l+0x918>
 801af38:	f7ff fb3c 	bl	801a5b4 <sulp>
 801af3c:	ee38 0b40 	vsub.f64	d0, d8, d0
 801af40:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801af44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af48:	ec59 8b10 	vmov	r8, r9, d0
 801af4c:	d1c7      	bne.n	801aede <_strtod_l+0x8f6>
 801af4e:	e5f8      	b.n	801ab42 <_strtod_l+0x55a>
 801af50:	4631      	mov	r1, r6
 801af52:	4628      	mov	r0, r5
 801af54:	f7ff faba 	bl	801a4cc <__ratio>
 801af58:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801af5c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801af60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af64:	d85f      	bhi.n	801b026 <_strtod_l+0xa3e>
 801af66:	f1ba 0f00 	cmp.w	sl, #0
 801af6a:	d166      	bne.n	801b03a <_strtod_l+0xa52>
 801af6c:	f1b8 0f00 	cmp.w	r8, #0
 801af70:	d14d      	bne.n	801b00e <_strtod_l+0xa26>
 801af72:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801af76:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801af7a:	2b00      	cmp	r3, #0
 801af7c:	d162      	bne.n	801b044 <_strtod_l+0xa5c>
 801af7e:	eeb4 0bcd 	vcmpe.f64	d0, d13
 801af82:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801af86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af8a:	d401      	bmi.n	801af90 <_strtod_l+0x9a8>
 801af8c:	ee20 db0d 	vmul.f64	d13, d0, d13
 801af90:	eeb1 cb4d 	vneg.f64	d12, d13
 801af94:	4869      	ldr	r0, [pc, #420]	; (801b13c <_strtod_l+0xb54>)
 801af96:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 801b148 <_strtod_l+0xb60>
 801af9a:	ea0b 0100 	and.w	r1, fp, r0
 801af9e:	4561      	cmp	r1, ip
 801afa0:	ec53 2b1c 	vmov	r2, r3, d12
 801afa4:	d17a      	bne.n	801b09c <_strtod_l+0xab4>
 801afa6:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 801afaa:	ec49 8b10 	vmov	d0, r8, r9
 801afae:	910a      	str	r1, [sp, #40]	; 0x28
 801afb0:	f7ff f9c2 	bl	801a338 <__ulp>
 801afb4:	ec49 8b1e 	vmov	d14, r8, r9
 801afb8:	4860      	ldr	r0, [pc, #384]	; (801b13c <_strtod_l+0xb54>)
 801afba:	eea0 eb0c 	vfma.f64	d14, d0, d12
 801afbe:	ee1e 3a90 	vmov	r3, s29
 801afc2:	4a60      	ldr	r2, [pc, #384]	; (801b144 <_strtod_l+0xb5c>)
 801afc4:	990a      	ldr	r1, [sp, #40]	; 0x28
 801afc6:	4018      	ands	r0, r3
 801afc8:	4290      	cmp	r0, r2
 801afca:	ec59 8b1e 	vmov	r8, r9, d14
 801afce:	d93c      	bls.n	801b04a <_strtod_l+0xa62>
 801afd0:	ee18 2a90 	vmov	r2, s17
 801afd4:	4b5a      	ldr	r3, [pc, #360]	; (801b140 <_strtod_l+0xb58>)
 801afd6:	429a      	cmp	r2, r3
 801afd8:	d104      	bne.n	801afe4 <_strtod_l+0x9fc>
 801afda:	ee18 3a10 	vmov	r3, s16
 801afde:	3301      	adds	r3, #1
 801afe0:	f43f ad40 	beq.w	801aa64 <_strtod_l+0x47c>
 801afe4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 801b140 <_strtod_l+0xb58>
 801afe8:	f04f 38ff 	mov.w	r8, #4294967295
 801afec:	9912      	ldr	r1, [sp, #72]	; 0x48
 801afee:	4620      	mov	r0, r4
 801aff0:	f7fe fe76 	bl	8019ce0 <_Bfree>
 801aff4:	4639      	mov	r1, r7
 801aff6:	4620      	mov	r0, r4
 801aff8:	f7fe fe72 	bl	8019ce0 <_Bfree>
 801affc:	4631      	mov	r1, r6
 801affe:	4620      	mov	r0, r4
 801b000:	f7fe fe6e 	bl	8019ce0 <_Bfree>
 801b004:	4629      	mov	r1, r5
 801b006:	4620      	mov	r0, r4
 801b008:	f7fe fe6a 	bl	8019ce0 <_Bfree>
 801b00c:	e609      	b.n	801ac22 <_strtod_l+0x63a>
 801b00e:	f1b8 0f01 	cmp.w	r8, #1
 801b012:	d103      	bne.n	801b01c <_strtod_l+0xa34>
 801b014:	f1b9 0f00 	cmp.w	r9, #0
 801b018:	f43f ad93 	beq.w	801ab42 <_strtod_l+0x55a>
 801b01c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 801b020:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801b024:	e7b6      	b.n	801af94 <_strtod_l+0x9ac>
 801b026:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801b02a:	ee20 db0d 	vmul.f64	d13, d0, d13
 801b02e:	f1ba 0f00 	cmp.w	sl, #0
 801b032:	d0ad      	beq.n	801af90 <_strtod_l+0x9a8>
 801b034:	eeb0 cb4d 	vmov.f64	d12, d13
 801b038:	e7ac      	b.n	801af94 <_strtod_l+0x9ac>
 801b03a:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 801b03e:	eeb0 db4c 	vmov.f64	d13, d12
 801b042:	e7a7      	b.n	801af94 <_strtod_l+0x9ac>
 801b044:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 801b048:	e7a4      	b.n	801af94 <_strtod_l+0x9ac>
 801b04a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801b04e:	9b05      	ldr	r3, [sp, #20]
 801b050:	46cb      	mov	fp, r9
 801b052:	2b00      	cmp	r3, #0
 801b054:	d1ca      	bne.n	801afec <_strtod_l+0xa04>
 801b056:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801b05a:	0d1b      	lsrs	r3, r3, #20
 801b05c:	051b      	lsls	r3, r3, #20
 801b05e:	4299      	cmp	r1, r3
 801b060:	d1c4      	bne.n	801afec <_strtod_l+0xa04>
 801b062:	ec51 0b1d 	vmov	r0, r1, d13
 801b066:	f7e5 fb8f 	bl	8000788 <__aeabi_d2lz>
 801b06a:	f7e5 fb47 	bl	80006fc <__aeabi_l2d>
 801b06e:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 801b072:	ec41 0b17 	vmov	d7, r0, r1
 801b076:	ea4b 0b08 	orr.w	fp, fp, r8
 801b07a:	ea5b 0b0a 	orrs.w	fp, fp, sl
 801b07e:	ee3d db47 	vsub.f64	d13, d13, d7
 801b082:	d03c      	beq.n	801b0fe <_strtod_l+0xb16>
 801b084:	eeb4 dbca 	vcmpe.f64	d13, d10
 801b088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b08c:	f53f acf4 	bmi.w	801aa78 <_strtod_l+0x490>
 801b090:	eeb4 dbcb 	vcmpe.f64	d13, d11
 801b094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b098:	dda8      	ble.n	801afec <_strtod_l+0xa04>
 801b09a:	e4ed      	b.n	801aa78 <_strtod_l+0x490>
 801b09c:	9805      	ldr	r0, [sp, #20]
 801b09e:	b1f0      	cbz	r0, 801b0de <_strtod_l+0xaf6>
 801b0a0:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 801b0a4:	d81b      	bhi.n	801b0de <_strtod_l+0xaf6>
 801b0a6:	ed9f 7b22 	vldr	d7, [pc, #136]	; 801b130 <_strtod_l+0xb48>
 801b0aa:	eeb4 dbc7 	vcmpe.f64	d13, d7
 801b0ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b0b2:	d811      	bhi.n	801b0d8 <_strtod_l+0xaf0>
 801b0b4:	eebc dbcd 	vcvt.u32.f64	s26, d13
 801b0b8:	ee1d 3a10 	vmov	r3, s26
 801b0bc:	2b01      	cmp	r3, #1
 801b0be:	bf38      	it	cc
 801b0c0:	2301      	movcc	r3, #1
 801b0c2:	ee0d 3a10 	vmov	s26, r3
 801b0c6:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 801b0ca:	f1ba 0f00 	cmp.w	sl, #0
 801b0ce:	d113      	bne.n	801b0f8 <_strtod_l+0xb10>
 801b0d0:	eeb1 7b4d 	vneg.f64	d7, d13
 801b0d4:	ec53 2b17 	vmov	r2, r3, d7
 801b0d8:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 801b0dc:	1a43      	subs	r3, r0, r1
 801b0de:	eeb0 0b48 	vmov.f64	d0, d8
 801b0e2:	ec43 2b1c 	vmov	d12, r2, r3
 801b0e6:	910a      	str	r1, [sp, #40]	; 0x28
 801b0e8:	f7ff f926 	bl	801a338 <__ulp>
 801b0ec:	990a      	ldr	r1, [sp, #40]	; 0x28
 801b0ee:	eeac 8b00 	vfma.f64	d8, d12, d0
 801b0f2:	ec59 8b18 	vmov	r8, r9, d8
 801b0f6:	e7aa      	b.n	801b04e <_strtod_l+0xa66>
 801b0f8:	eeb0 7b4d 	vmov.f64	d7, d13
 801b0fc:	e7ea      	b.n	801b0d4 <_strtod_l+0xaec>
 801b0fe:	eeb4 dbc9 	vcmpe.f64	d13, d9
 801b102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b106:	f57f af71 	bpl.w	801afec <_strtod_l+0xa04>
 801b10a:	e4b5      	b.n	801aa78 <_strtod_l+0x490>
 801b10c:	2300      	movs	r3, #0
 801b10e:	9308      	str	r3, [sp, #32]
 801b110:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b112:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b114:	6013      	str	r3, [r2, #0]
 801b116:	f7ff baa6 	b.w	801a666 <_strtod_l+0x7e>
 801b11a:	2a65      	cmp	r2, #101	; 0x65
 801b11c:	f43f aba2 	beq.w	801a864 <_strtod_l+0x27c>
 801b120:	2a45      	cmp	r2, #69	; 0x45
 801b122:	f43f ab9f 	beq.w	801a864 <_strtod_l+0x27c>
 801b126:	2101      	movs	r1, #1
 801b128:	f7ff bbd8 	b.w	801a8dc <_strtod_l+0x2f4>
 801b12c:	f3af 8000 	nop.w
 801b130:	ffc00000 	.word	0xffc00000
 801b134:	41dfffff 	.word	0x41dfffff
 801b138:	000fffff 	.word	0x000fffff
 801b13c:	7ff00000 	.word	0x7ff00000
 801b140:	7fefffff 	.word	0x7fefffff
 801b144:	7c9fffff 	.word	0x7c9fffff
 801b148:	7fe00000 	.word	0x7fe00000

0801b14c <_strtod_r>:
 801b14c:	4b01      	ldr	r3, [pc, #4]	; (801b154 <_strtod_r+0x8>)
 801b14e:	f7ff ba4b 	b.w	801a5e8 <_strtod_l>
 801b152:	bf00      	nop
 801b154:	24000188 	.word	0x24000188

0801b158 <_strtol_l.constprop.0>:
 801b158:	2b01      	cmp	r3, #1
 801b15a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b15e:	d001      	beq.n	801b164 <_strtol_l.constprop.0+0xc>
 801b160:	2b24      	cmp	r3, #36	; 0x24
 801b162:	d906      	bls.n	801b172 <_strtol_l.constprop.0+0x1a>
 801b164:	f7fd fe46 	bl	8018df4 <__errno>
 801b168:	2316      	movs	r3, #22
 801b16a:	6003      	str	r3, [r0, #0]
 801b16c:	2000      	movs	r0, #0
 801b16e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b172:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801b258 <_strtol_l.constprop.0+0x100>
 801b176:	460d      	mov	r5, r1
 801b178:	462e      	mov	r6, r5
 801b17a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b17e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801b182:	f017 0708 	ands.w	r7, r7, #8
 801b186:	d1f7      	bne.n	801b178 <_strtol_l.constprop.0+0x20>
 801b188:	2c2d      	cmp	r4, #45	; 0x2d
 801b18a:	d132      	bne.n	801b1f2 <_strtol_l.constprop.0+0x9a>
 801b18c:	782c      	ldrb	r4, [r5, #0]
 801b18e:	2701      	movs	r7, #1
 801b190:	1cb5      	adds	r5, r6, #2
 801b192:	2b00      	cmp	r3, #0
 801b194:	d05b      	beq.n	801b24e <_strtol_l.constprop.0+0xf6>
 801b196:	2b10      	cmp	r3, #16
 801b198:	d109      	bne.n	801b1ae <_strtol_l.constprop.0+0x56>
 801b19a:	2c30      	cmp	r4, #48	; 0x30
 801b19c:	d107      	bne.n	801b1ae <_strtol_l.constprop.0+0x56>
 801b19e:	782c      	ldrb	r4, [r5, #0]
 801b1a0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801b1a4:	2c58      	cmp	r4, #88	; 0x58
 801b1a6:	d14d      	bne.n	801b244 <_strtol_l.constprop.0+0xec>
 801b1a8:	786c      	ldrb	r4, [r5, #1]
 801b1aa:	2310      	movs	r3, #16
 801b1ac:	3502      	adds	r5, #2
 801b1ae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801b1b2:	f108 38ff 	add.w	r8, r8, #4294967295
 801b1b6:	f04f 0e00 	mov.w	lr, #0
 801b1ba:	fbb8 f9f3 	udiv	r9, r8, r3
 801b1be:	4676      	mov	r6, lr
 801b1c0:	fb03 8a19 	mls	sl, r3, r9, r8
 801b1c4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801b1c8:	f1bc 0f09 	cmp.w	ip, #9
 801b1cc:	d816      	bhi.n	801b1fc <_strtol_l.constprop.0+0xa4>
 801b1ce:	4664      	mov	r4, ip
 801b1d0:	42a3      	cmp	r3, r4
 801b1d2:	dd24      	ble.n	801b21e <_strtol_l.constprop.0+0xc6>
 801b1d4:	f1be 3fff 	cmp.w	lr, #4294967295
 801b1d8:	d008      	beq.n	801b1ec <_strtol_l.constprop.0+0x94>
 801b1da:	45b1      	cmp	r9, r6
 801b1dc:	d31c      	bcc.n	801b218 <_strtol_l.constprop.0+0xc0>
 801b1de:	d101      	bne.n	801b1e4 <_strtol_l.constprop.0+0x8c>
 801b1e0:	45a2      	cmp	sl, r4
 801b1e2:	db19      	blt.n	801b218 <_strtol_l.constprop.0+0xc0>
 801b1e4:	fb06 4603 	mla	r6, r6, r3, r4
 801b1e8:	f04f 0e01 	mov.w	lr, #1
 801b1ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b1f0:	e7e8      	b.n	801b1c4 <_strtol_l.constprop.0+0x6c>
 801b1f2:	2c2b      	cmp	r4, #43	; 0x2b
 801b1f4:	bf04      	itt	eq
 801b1f6:	782c      	ldrbeq	r4, [r5, #0]
 801b1f8:	1cb5      	addeq	r5, r6, #2
 801b1fa:	e7ca      	b.n	801b192 <_strtol_l.constprop.0+0x3a>
 801b1fc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801b200:	f1bc 0f19 	cmp.w	ip, #25
 801b204:	d801      	bhi.n	801b20a <_strtol_l.constprop.0+0xb2>
 801b206:	3c37      	subs	r4, #55	; 0x37
 801b208:	e7e2      	b.n	801b1d0 <_strtol_l.constprop.0+0x78>
 801b20a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801b20e:	f1bc 0f19 	cmp.w	ip, #25
 801b212:	d804      	bhi.n	801b21e <_strtol_l.constprop.0+0xc6>
 801b214:	3c57      	subs	r4, #87	; 0x57
 801b216:	e7db      	b.n	801b1d0 <_strtol_l.constprop.0+0x78>
 801b218:	f04f 3eff 	mov.w	lr, #4294967295
 801b21c:	e7e6      	b.n	801b1ec <_strtol_l.constprop.0+0x94>
 801b21e:	f1be 3fff 	cmp.w	lr, #4294967295
 801b222:	d105      	bne.n	801b230 <_strtol_l.constprop.0+0xd8>
 801b224:	2322      	movs	r3, #34	; 0x22
 801b226:	6003      	str	r3, [r0, #0]
 801b228:	4646      	mov	r6, r8
 801b22a:	b942      	cbnz	r2, 801b23e <_strtol_l.constprop.0+0xe6>
 801b22c:	4630      	mov	r0, r6
 801b22e:	e79e      	b.n	801b16e <_strtol_l.constprop.0+0x16>
 801b230:	b107      	cbz	r7, 801b234 <_strtol_l.constprop.0+0xdc>
 801b232:	4276      	negs	r6, r6
 801b234:	2a00      	cmp	r2, #0
 801b236:	d0f9      	beq.n	801b22c <_strtol_l.constprop.0+0xd4>
 801b238:	f1be 0f00 	cmp.w	lr, #0
 801b23c:	d000      	beq.n	801b240 <_strtol_l.constprop.0+0xe8>
 801b23e:	1e69      	subs	r1, r5, #1
 801b240:	6011      	str	r1, [r2, #0]
 801b242:	e7f3      	b.n	801b22c <_strtol_l.constprop.0+0xd4>
 801b244:	2430      	movs	r4, #48	; 0x30
 801b246:	2b00      	cmp	r3, #0
 801b248:	d1b1      	bne.n	801b1ae <_strtol_l.constprop.0+0x56>
 801b24a:	2308      	movs	r3, #8
 801b24c:	e7af      	b.n	801b1ae <_strtol_l.constprop.0+0x56>
 801b24e:	2c30      	cmp	r4, #48	; 0x30
 801b250:	d0a5      	beq.n	801b19e <_strtol_l.constprop.0+0x46>
 801b252:	230a      	movs	r3, #10
 801b254:	e7ab      	b.n	801b1ae <_strtol_l.constprop.0+0x56>
 801b256:	bf00      	nop
 801b258:	0801cac9 	.word	0x0801cac9

0801b25c <_strtol_r>:
 801b25c:	f7ff bf7c 	b.w	801b158 <_strtol_l.constprop.0>

0801b260 <__ssputs_r>:
 801b260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b264:	688e      	ldr	r6, [r1, #8]
 801b266:	461f      	mov	r7, r3
 801b268:	42be      	cmp	r6, r7
 801b26a:	680b      	ldr	r3, [r1, #0]
 801b26c:	4682      	mov	sl, r0
 801b26e:	460c      	mov	r4, r1
 801b270:	4690      	mov	r8, r2
 801b272:	d82c      	bhi.n	801b2ce <__ssputs_r+0x6e>
 801b274:	898a      	ldrh	r2, [r1, #12]
 801b276:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801b27a:	d026      	beq.n	801b2ca <__ssputs_r+0x6a>
 801b27c:	6965      	ldr	r5, [r4, #20]
 801b27e:	6909      	ldr	r1, [r1, #16]
 801b280:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b284:	eba3 0901 	sub.w	r9, r3, r1
 801b288:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b28c:	1c7b      	adds	r3, r7, #1
 801b28e:	444b      	add	r3, r9
 801b290:	106d      	asrs	r5, r5, #1
 801b292:	429d      	cmp	r5, r3
 801b294:	bf38      	it	cc
 801b296:	461d      	movcc	r5, r3
 801b298:	0553      	lsls	r3, r2, #21
 801b29a:	d527      	bpl.n	801b2ec <__ssputs_r+0x8c>
 801b29c:	4629      	mov	r1, r5
 801b29e:	f7fe fc53 	bl	8019b48 <_malloc_r>
 801b2a2:	4606      	mov	r6, r0
 801b2a4:	b360      	cbz	r0, 801b300 <__ssputs_r+0xa0>
 801b2a6:	6921      	ldr	r1, [r4, #16]
 801b2a8:	464a      	mov	r2, r9
 801b2aa:	f7fd fdd0 	bl	8018e4e <memcpy>
 801b2ae:	89a3      	ldrh	r3, [r4, #12]
 801b2b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801b2b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b2b8:	81a3      	strh	r3, [r4, #12]
 801b2ba:	6126      	str	r6, [r4, #16]
 801b2bc:	6165      	str	r5, [r4, #20]
 801b2be:	444e      	add	r6, r9
 801b2c0:	eba5 0509 	sub.w	r5, r5, r9
 801b2c4:	6026      	str	r6, [r4, #0]
 801b2c6:	60a5      	str	r5, [r4, #8]
 801b2c8:	463e      	mov	r6, r7
 801b2ca:	42be      	cmp	r6, r7
 801b2cc:	d900      	bls.n	801b2d0 <__ssputs_r+0x70>
 801b2ce:	463e      	mov	r6, r7
 801b2d0:	6820      	ldr	r0, [r4, #0]
 801b2d2:	4632      	mov	r2, r6
 801b2d4:	4641      	mov	r1, r8
 801b2d6:	f000 f9c9 	bl	801b66c <memmove>
 801b2da:	68a3      	ldr	r3, [r4, #8]
 801b2dc:	1b9b      	subs	r3, r3, r6
 801b2de:	60a3      	str	r3, [r4, #8]
 801b2e0:	6823      	ldr	r3, [r4, #0]
 801b2e2:	4433      	add	r3, r6
 801b2e4:	6023      	str	r3, [r4, #0]
 801b2e6:	2000      	movs	r0, #0
 801b2e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b2ec:	462a      	mov	r2, r5
 801b2ee:	f000 fda0 	bl	801be32 <_realloc_r>
 801b2f2:	4606      	mov	r6, r0
 801b2f4:	2800      	cmp	r0, #0
 801b2f6:	d1e0      	bne.n	801b2ba <__ssputs_r+0x5a>
 801b2f8:	6921      	ldr	r1, [r4, #16]
 801b2fa:	4650      	mov	r0, sl
 801b2fc:	f7fe fbb0 	bl	8019a60 <_free_r>
 801b300:	230c      	movs	r3, #12
 801b302:	f8ca 3000 	str.w	r3, [sl]
 801b306:	89a3      	ldrh	r3, [r4, #12]
 801b308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b30c:	81a3      	strh	r3, [r4, #12]
 801b30e:	f04f 30ff 	mov.w	r0, #4294967295
 801b312:	e7e9      	b.n	801b2e8 <__ssputs_r+0x88>

0801b314 <_svfiprintf_r>:
 801b314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b318:	4698      	mov	r8, r3
 801b31a:	898b      	ldrh	r3, [r1, #12]
 801b31c:	061b      	lsls	r3, r3, #24
 801b31e:	b09d      	sub	sp, #116	; 0x74
 801b320:	4607      	mov	r7, r0
 801b322:	460d      	mov	r5, r1
 801b324:	4614      	mov	r4, r2
 801b326:	d50e      	bpl.n	801b346 <_svfiprintf_r+0x32>
 801b328:	690b      	ldr	r3, [r1, #16]
 801b32a:	b963      	cbnz	r3, 801b346 <_svfiprintf_r+0x32>
 801b32c:	2140      	movs	r1, #64	; 0x40
 801b32e:	f7fe fc0b 	bl	8019b48 <_malloc_r>
 801b332:	6028      	str	r0, [r5, #0]
 801b334:	6128      	str	r0, [r5, #16]
 801b336:	b920      	cbnz	r0, 801b342 <_svfiprintf_r+0x2e>
 801b338:	230c      	movs	r3, #12
 801b33a:	603b      	str	r3, [r7, #0]
 801b33c:	f04f 30ff 	mov.w	r0, #4294967295
 801b340:	e0d0      	b.n	801b4e4 <_svfiprintf_r+0x1d0>
 801b342:	2340      	movs	r3, #64	; 0x40
 801b344:	616b      	str	r3, [r5, #20]
 801b346:	2300      	movs	r3, #0
 801b348:	9309      	str	r3, [sp, #36]	; 0x24
 801b34a:	2320      	movs	r3, #32
 801b34c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b350:	f8cd 800c 	str.w	r8, [sp, #12]
 801b354:	2330      	movs	r3, #48	; 0x30
 801b356:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801b4fc <_svfiprintf_r+0x1e8>
 801b35a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b35e:	f04f 0901 	mov.w	r9, #1
 801b362:	4623      	mov	r3, r4
 801b364:	469a      	mov	sl, r3
 801b366:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b36a:	b10a      	cbz	r2, 801b370 <_svfiprintf_r+0x5c>
 801b36c:	2a25      	cmp	r2, #37	; 0x25
 801b36e:	d1f9      	bne.n	801b364 <_svfiprintf_r+0x50>
 801b370:	ebba 0b04 	subs.w	fp, sl, r4
 801b374:	d00b      	beq.n	801b38e <_svfiprintf_r+0x7a>
 801b376:	465b      	mov	r3, fp
 801b378:	4622      	mov	r2, r4
 801b37a:	4629      	mov	r1, r5
 801b37c:	4638      	mov	r0, r7
 801b37e:	f7ff ff6f 	bl	801b260 <__ssputs_r>
 801b382:	3001      	adds	r0, #1
 801b384:	f000 80a9 	beq.w	801b4da <_svfiprintf_r+0x1c6>
 801b388:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b38a:	445a      	add	r2, fp
 801b38c:	9209      	str	r2, [sp, #36]	; 0x24
 801b38e:	f89a 3000 	ldrb.w	r3, [sl]
 801b392:	2b00      	cmp	r3, #0
 801b394:	f000 80a1 	beq.w	801b4da <_svfiprintf_r+0x1c6>
 801b398:	2300      	movs	r3, #0
 801b39a:	f04f 32ff 	mov.w	r2, #4294967295
 801b39e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b3a2:	f10a 0a01 	add.w	sl, sl, #1
 801b3a6:	9304      	str	r3, [sp, #16]
 801b3a8:	9307      	str	r3, [sp, #28]
 801b3aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b3ae:	931a      	str	r3, [sp, #104]	; 0x68
 801b3b0:	4654      	mov	r4, sl
 801b3b2:	2205      	movs	r2, #5
 801b3b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b3b8:	4850      	ldr	r0, [pc, #320]	; (801b4fc <_svfiprintf_r+0x1e8>)
 801b3ba:	f7e4 ffb9 	bl	8000330 <memchr>
 801b3be:	9a04      	ldr	r2, [sp, #16]
 801b3c0:	b9d8      	cbnz	r0, 801b3fa <_svfiprintf_r+0xe6>
 801b3c2:	06d0      	lsls	r0, r2, #27
 801b3c4:	bf44      	itt	mi
 801b3c6:	2320      	movmi	r3, #32
 801b3c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b3cc:	0711      	lsls	r1, r2, #28
 801b3ce:	bf44      	itt	mi
 801b3d0:	232b      	movmi	r3, #43	; 0x2b
 801b3d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b3d6:	f89a 3000 	ldrb.w	r3, [sl]
 801b3da:	2b2a      	cmp	r3, #42	; 0x2a
 801b3dc:	d015      	beq.n	801b40a <_svfiprintf_r+0xf6>
 801b3de:	9a07      	ldr	r2, [sp, #28]
 801b3e0:	4654      	mov	r4, sl
 801b3e2:	2000      	movs	r0, #0
 801b3e4:	f04f 0c0a 	mov.w	ip, #10
 801b3e8:	4621      	mov	r1, r4
 801b3ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b3ee:	3b30      	subs	r3, #48	; 0x30
 801b3f0:	2b09      	cmp	r3, #9
 801b3f2:	d94d      	bls.n	801b490 <_svfiprintf_r+0x17c>
 801b3f4:	b1b0      	cbz	r0, 801b424 <_svfiprintf_r+0x110>
 801b3f6:	9207      	str	r2, [sp, #28]
 801b3f8:	e014      	b.n	801b424 <_svfiprintf_r+0x110>
 801b3fa:	eba0 0308 	sub.w	r3, r0, r8
 801b3fe:	fa09 f303 	lsl.w	r3, r9, r3
 801b402:	4313      	orrs	r3, r2
 801b404:	9304      	str	r3, [sp, #16]
 801b406:	46a2      	mov	sl, r4
 801b408:	e7d2      	b.n	801b3b0 <_svfiprintf_r+0x9c>
 801b40a:	9b03      	ldr	r3, [sp, #12]
 801b40c:	1d19      	adds	r1, r3, #4
 801b40e:	681b      	ldr	r3, [r3, #0]
 801b410:	9103      	str	r1, [sp, #12]
 801b412:	2b00      	cmp	r3, #0
 801b414:	bfbb      	ittet	lt
 801b416:	425b      	neglt	r3, r3
 801b418:	f042 0202 	orrlt.w	r2, r2, #2
 801b41c:	9307      	strge	r3, [sp, #28]
 801b41e:	9307      	strlt	r3, [sp, #28]
 801b420:	bfb8      	it	lt
 801b422:	9204      	strlt	r2, [sp, #16]
 801b424:	7823      	ldrb	r3, [r4, #0]
 801b426:	2b2e      	cmp	r3, #46	; 0x2e
 801b428:	d10c      	bne.n	801b444 <_svfiprintf_r+0x130>
 801b42a:	7863      	ldrb	r3, [r4, #1]
 801b42c:	2b2a      	cmp	r3, #42	; 0x2a
 801b42e:	d134      	bne.n	801b49a <_svfiprintf_r+0x186>
 801b430:	9b03      	ldr	r3, [sp, #12]
 801b432:	1d1a      	adds	r2, r3, #4
 801b434:	681b      	ldr	r3, [r3, #0]
 801b436:	9203      	str	r2, [sp, #12]
 801b438:	2b00      	cmp	r3, #0
 801b43a:	bfb8      	it	lt
 801b43c:	f04f 33ff 	movlt.w	r3, #4294967295
 801b440:	3402      	adds	r4, #2
 801b442:	9305      	str	r3, [sp, #20]
 801b444:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801b50c <_svfiprintf_r+0x1f8>
 801b448:	7821      	ldrb	r1, [r4, #0]
 801b44a:	2203      	movs	r2, #3
 801b44c:	4650      	mov	r0, sl
 801b44e:	f7e4 ff6f 	bl	8000330 <memchr>
 801b452:	b138      	cbz	r0, 801b464 <_svfiprintf_r+0x150>
 801b454:	9b04      	ldr	r3, [sp, #16]
 801b456:	eba0 000a 	sub.w	r0, r0, sl
 801b45a:	2240      	movs	r2, #64	; 0x40
 801b45c:	4082      	lsls	r2, r0
 801b45e:	4313      	orrs	r3, r2
 801b460:	3401      	adds	r4, #1
 801b462:	9304      	str	r3, [sp, #16]
 801b464:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b468:	4825      	ldr	r0, [pc, #148]	; (801b500 <_svfiprintf_r+0x1ec>)
 801b46a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b46e:	2206      	movs	r2, #6
 801b470:	f7e4 ff5e 	bl	8000330 <memchr>
 801b474:	2800      	cmp	r0, #0
 801b476:	d038      	beq.n	801b4ea <_svfiprintf_r+0x1d6>
 801b478:	4b22      	ldr	r3, [pc, #136]	; (801b504 <_svfiprintf_r+0x1f0>)
 801b47a:	bb1b      	cbnz	r3, 801b4c4 <_svfiprintf_r+0x1b0>
 801b47c:	9b03      	ldr	r3, [sp, #12]
 801b47e:	3307      	adds	r3, #7
 801b480:	f023 0307 	bic.w	r3, r3, #7
 801b484:	3308      	adds	r3, #8
 801b486:	9303      	str	r3, [sp, #12]
 801b488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b48a:	4433      	add	r3, r6
 801b48c:	9309      	str	r3, [sp, #36]	; 0x24
 801b48e:	e768      	b.n	801b362 <_svfiprintf_r+0x4e>
 801b490:	fb0c 3202 	mla	r2, ip, r2, r3
 801b494:	460c      	mov	r4, r1
 801b496:	2001      	movs	r0, #1
 801b498:	e7a6      	b.n	801b3e8 <_svfiprintf_r+0xd4>
 801b49a:	2300      	movs	r3, #0
 801b49c:	3401      	adds	r4, #1
 801b49e:	9305      	str	r3, [sp, #20]
 801b4a0:	4619      	mov	r1, r3
 801b4a2:	f04f 0c0a 	mov.w	ip, #10
 801b4a6:	4620      	mov	r0, r4
 801b4a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b4ac:	3a30      	subs	r2, #48	; 0x30
 801b4ae:	2a09      	cmp	r2, #9
 801b4b0:	d903      	bls.n	801b4ba <_svfiprintf_r+0x1a6>
 801b4b2:	2b00      	cmp	r3, #0
 801b4b4:	d0c6      	beq.n	801b444 <_svfiprintf_r+0x130>
 801b4b6:	9105      	str	r1, [sp, #20]
 801b4b8:	e7c4      	b.n	801b444 <_svfiprintf_r+0x130>
 801b4ba:	fb0c 2101 	mla	r1, ip, r1, r2
 801b4be:	4604      	mov	r4, r0
 801b4c0:	2301      	movs	r3, #1
 801b4c2:	e7f0      	b.n	801b4a6 <_svfiprintf_r+0x192>
 801b4c4:	ab03      	add	r3, sp, #12
 801b4c6:	9300      	str	r3, [sp, #0]
 801b4c8:	462a      	mov	r2, r5
 801b4ca:	4b0f      	ldr	r3, [pc, #60]	; (801b508 <_svfiprintf_r+0x1f4>)
 801b4cc:	a904      	add	r1, sp, #16
 801b4ce:	4638      	mov	r0, r7
 801b4d0:	f7fc fd6a 	bl	8017fa8 <_printf_float>
 801b4d4:	1c42      	adds	r2, r0, #1
 801b4d6:	4606      	mov	r6, r0
 801b4d8:	d1d6      	bne.n	801b488 <_svfiprintf_r+0x174>
 801b4da:	89ab      	ldrh	r3, [r5, #12]
 801b4dc:	065b      	lsls	r3, r3, #25
 801b4de:	f53f af2d 	bmi.w	801b33c <_svfiprintf_r+0x28>
 801b4e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b4e4:	b01d      	add	sp, #116	; 0x74
 801b4e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4ea:	ab03      	add	r3, sp, #12
 801b4ec:	9300      	str	r3, [sp, #0]
 801b4ee:	462a      	mov	r2, r5
 801b4f0:	4b05      	ldr	r3, [pc, #20]	; (801b508 <_svfiprintf_r+0x1f4>)
 801b4f2:	a904      	add	r1, sp, #16
 801b4f4:	4638      	mov	r0, r7
 801b4f6:	f7fc ffdf 	bl	80184b8 <_printf_i>
 801b4fa:	e7eb      	b.n	801b4d4 <_svfiprintf_r+0x1c0>
 801b4fc:	0801cbc9 	.word	0x0801cbc9
 801b500:	0801cbd3 	.word	0x0801cbd3
 801b504:	08017fa9 	.word	0x08017fa9
 801b508:	0801b261 	.word	0x0801b261
 801b50c:	0801cbcf 	.word	0x0801cbcf

0801b510 <__sflush_r>:
 801b510:	898a      	ldrh	r2, [r1, #12]
 801b512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b516:	4605      	mov	r5, r0
 801b518:	0710      	lsls	r0, r2, #28
 801b51a:	460c      	mov	r4, r1
 801b51c:	d458      	bmi.n	801b5d0 <__sflush_r+0xc0>
 801b51e:	684b      	ldr	r3, [r1, #4]
 801b520:	2b00      	cmp	r3, #0
 801b522:	dc05      	bgt.n	801b530 <__sflush_r+0x20>
 801b524:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b526:	2b00      	cmp	r3, #0
 801b528:	dc02      	bgt.n	801b530 <__sflush_r+0x20>
 801b52a:	2000      	movs	r0, #0
 801b52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b530:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b532:	2e00      	cmp	r6, #0
 801b534:	d0f9      	beq.n	801b52a <__sflush_r+0x1a>
 801b536:	2300      	movs	r3, #0
 801b538:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b53c:	682f      	ldr	r7, [r5, #0]
 801b53e:	6a21      	ldr	r1, [r4, #32]
 801b540:	602b      	str	r3, [r5, #0]
 801b542:	d032      	beq.n	801b5aa <__sflush_r+0x9a>
 801b544:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b546:	89a3      	ldrh	r3, [r4, #12]
 801b548:	075a      	lsls	r2, r3, #29
 801b54a:	d505      	bpl.n	801b558 <__sflush_r+0x48>
 801b54c:	6863      	ldr	r3, [r4, #4]
 801b54e:	1ac0      	subs	r0, r0, r3
 801b550:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b552:	b10b      	cbz	r3, 801b558 <__sflush_r+0x48>
 801b554:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b556:	1ac0      	subs	r0, r0, r3
 801b558:	2300      	movs	r3, #0
 801b55a:	4602      	mov	r2, r0
 801b55c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b55e:	6a21      	ldr	r1, [r4, #32]
 801b560:	4628      	mov	r0, r5
 801b562:	47b0      	blx	r6
 801b564:	1c43      	adds	r3, r0, #1
 801b566:	89a3      	ldrh	r3, [r4, #12]
 801b568:	d106      	bne.n	801b578 <__sflush_r+0x68>
 801b56a:	6829      	ldr	r1, [r5, #0]
 801b56c:	291d      	cmp	r1, #29
 801b56e:	d82b      	bhi.n	801b5c8 <__sflush_r+0xb8>
 801b570:	4a29      	ldr	r2, [pc, #164]	; (801b618 <__sflush_r+0x108>)
 801b572:	410a      	asrs	r2, r1
 801b574:	07d6      	lsls	r6, r2, #31
 801b576:	d427      	bmi.n	801b5c8 <__sflush_r+0xb8>
 801b578:	2200      	movs	r2, #0
 801b57a:	6062      	str	r2, [r4, #4]
 801b57c:	04d9      	lsls	r1, r3, #19
 801b57e:	6922      	ldr	r2, [r4, #16]
 801b580:	6022      	str	r2, [r4, #0]
 801b582:	d504      	bpl.n	801b58e <__sflush_r+0x7e>
 801b584:	1c42      	adds	r2, r0, #1
 801b586:	d101      	bne.n	801b58c <__sflush_r+0x7c>
 801b588:	682b      	ldr	r3, [r5, #0]
 801b58a:	b903      	cbnz	r3, 801b58e <__sflush_r+0x7e>
 801b58c:	6560      	str	r0, [r4, #84]	; 0x54
 801b58e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b590:	602f      	str	r7, [r5, #0]
 801b592:	2900      	cmp	r1, #0
 801b594:	d0c9      	beq.n	801b52a <__sflush_r+0x1a>
 801b596:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b59a:	4299      	cmp	r1, r3
 801b59c:	d002      	beq.n	801b5a4 <__sflush_r+0x94>
 801b59e:	4628      	mov	r0, r5
 801b5a0:	f7fe fa5e 	bl	8019a60 <_free_r>
 801b5a4:	2000      	movs	r0, #0
 801b5a6:	6360      	str	r0, [r4, #52]	; 0x34
 801b5a8:	e7c0      	b.n	801b52c <__sflush_r+0x1c>
 801b5aa:	2301      	movs	r3, #1
 801b5ac:	4628      	mov	r0, r5
 801b5ae:	47b0      	blx	r6
 801b5b0:	1c41      	adds	r1, r0, #1
 801b5b2:	d1c8      	bne.n	801b546 <__sflush_r+0x36>
 801b5b4:	682b      	ldr	r3, [r5, #0]
 801b5b6:	2b00      	cmp	r3, #0
 801b5b8:	d0c5      	beq.n	801b546 <__sflush_r+0x36>
 801b5ba:	2b1d      	cmp	r3, #29
 801b5bc:	d001      	beq.n	801b5c2 <__sflush_r+0xb2>
 801b5be:	2b16      	cmp	r3, #22
 801b5c0:	d101      	bne.n	801b5c6 <__sflush_r+0xb6>
 801b5c2:	602f      	str	r7, [r5, #0]
 801b5c4:	e7b1      	b.n	801b52a <__sflush_r+0x1a>
 801b5c6:	89a3      	ldrh	r3, [r4, #12]
 801b5c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b5cc:	81a3      	strh	r3, [r4, #12]
 801b5ce:	e7ad      	b.n	801b52c <__sflush_r+0x1c>
 801b5d0:	690f      	ldr	r7, [r1, #16]
 801b5d2:	2f00      	cmp	r7, #0
 801b5d4:	d0a9      	beq.n	801b52a <__sflush_r+0x1a>
 801b5d6:	0793      	lsls	r3, r2, #30
 801b5d8:	680e      	ldr	r6, [r1, #0]
 801b5da:	bf08      	it	eq
 801b5dc:	694b      	ldreq	r3, [r1, #20]
 801b5de:	600f      	str	r7, [r1, #0]
 801b5e0:	bf18      	it	ne
 801b5e2:	2300      	movne	r3, #0
 801b5e4:	eba6 0807 	sub.w	r8, r6, r7
 801b5e8:	608b      	str	r3, [r1, #8]
 801b5ea:	f1b8 0f00 	cmp.w	r8, #0
 801b5ee:	dd9c      	ble.n	801b52a <__sflush_r+0x1a>
 801b5f0:	6a21      	ldr	r1, [r4, #32]
 801b5f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b5f4:	4643      	mov	r3, r8
 801b5f6:	463a      	mov	r2, r7
 801b5f8:	4628      	mov	r0, r5
 801b5fa:	47b0      	blx	r6
 801b5fc:	2800      	cmp	r0, #0
 801b5fe:	dc06      	bgt.n	801b60e <__sflush_r+0xfe>
 801b600:	89a3      	ldrh	r3, [r4, #12]
 801b602:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b606:	81a3      	strh	r3, [r4, #12]
 801b608:	f04f 30ff 	mov.w	r0, #4294967295
 801b60c:	e78e      	b.n	801b52c <__sflush_r+0x1c>
 801b60e:	4407      	add	r7, r0
 801b610:	eba8 0800 	sub.w	r8, r8, r0
 801b614:	e7e9      	b.n	801b5ea <__sflush_r+0xda>
 801b616:	bf00      	nop
 801b618:	dfbffffe 	.word	0xdfbffffe

0801b61c <_fflush_r>:
 801b61c:	b538      	push	{r3, r4, r5, lr}
 801b61e:	690b      	ldr	r3, [r1, #16]
 801b620:	4605      	mov	r5, r0
 801b622:	460c      	mov	r4, r1
 801b624:	b913      	cbnz	r3, 801b62c <_fflush_r+0x10>
 801b626:	2500      	movs	r5, #0
 801b628:	4628      	mov	r0, r5
 801b62a:	bd38      	pop	{r3, r4, r5, pc}
 801b62c:	b118      	cbz	r0, 801b636 <_fflush_r+0x1a>
 801b62e:	6a03      	ldr	r3, [r0, #32]
 801b630:	b90b      	cbnz	r3, 801b636 <_fflush_r+0x1a>
 801b632:	f7fd faf3 	bl	8018c1c <__sinit>
 801b636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b63a:	2b00      	cmp	r3, #0
 801b63c:	d0f3      	beq.n	801b626 <_fflush_r+0xa>
 801b63e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b640:	07d0      	lsls	r0, r2, #31
 801b642:	d404      	bmi.n	801b64e <_fflush_r+0x32>
 801b644:	0599      	lsls	r1, r3, #22
 801b646:	d402      	bmi.n	801b64e <_fflush_r+0x32>
 801b648:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b64a:	f7fd fbfe 	bl	8018e4a <__retarget_lock_acquire_recursive>
 801b64e:	4628      	mov	r0, r5
 801b650:	4621      	mov	r1, r4
 801b652:	f7ff ff5d 	bl	801b510 <__sflush_r>
 801b656:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b658:	07da      	lsls	r2, r3, #31
 801b65a:	4605      	mov	r5, r0
 801b65c:	d4e4      	bmi.n	801b628 <_fflush_r+0xc>
 801b65e:	89a3      	ldrh	r3, [r4, #12]
 801b660:	059b      	lsls	r3, r3, #22
 801b662:	d4e1      	bmi.n	801b628 <_fflush_r+0xc>
 801b664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b666:	f7fd fbf1 	bl	8018e4c <__retarget_lock_release_recursive>
 801b66a:	e7dd      	b.n	801b628 <_fflush_r+0xc>

0801b66c <memmove>:
 801b66c:	4288      	cmp	r0, r1
 801b66e:	b510      	push	{r4, lr}
 801b670:	eb01 0402 	add.w	r4, r1, r2
 801b674:	d902      	bls.n	801b67c <memmove+0x10>
 801b676:	4284      	cmp	r4, r0
 801b678:	4623      	mov	r3, r4
 801b67a:	d807      	bhi.n	801b68c <memmove+0x20>
 801b67c:	1e43      	subs	r3, r0, #1
 801b67e:	42a1      	cmp	r1, r4
 801b680:	d008      	beq.n	801b694 <memmove+0x28>
 801b682:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b686:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b68a:	e7f8      	b.n	801b67e <memmove+0x12>
 801b68c:	4402      	add	r2, r0
 801b68e:	4601      	mov	r1, r0
 801b690:	428a      	cmp	r2, r1
 801b692:	d100      	bne.n	801b696 <memmove+0x2a>
 801b694:	bd10      	pop	{r4, pc}
 801b696:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b69a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b69e:	e7f7      	b.n	801b690 <memmove+0x24>

0801b6a0 <strncmp>:
 801b6a0:	b510      	push	{r4, lr}
 801b6a2:	b16a      	cbz	r2, 801b6c0 <strncmp+0x20>
 801b6a4:	3901      	subs	r1, #1
 801b6a6:	1884      	adds	r4, r0, r2
 801b6a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b6ac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801b6b0:	429a      	cmp	r2, r3
 801b6b2:	d103      	bne.n	801b6bc <strncmp+0x1c>
 801b6b4:	42a0      	cmp	r0, r4
 801b6b6:	d001      	beq.n	801b6bc <strncmp+0x1c>
 801b6b8:	2a00      	cmp	r2, #0
 801b6ba:	d1f5      	bne.n	801b6a8 <strncmp+0x8>
 801b6bc:	1ad0      	subs	r0, r2, r3
 801b6be:	bd10      	pop	{r4, pc}
 801b6c0:	4610      	mov	r0, r2
 801b6c2:	e7fc      	b.n	801b6be <strncmp+0x1e>

0801b6c4 <_sbrk_r>:
 801b6c4:	b538      	push	{r3, r4, r5, lr}
 801b6c6:	4d06      	ldr	r5, [pc, #24]	; (801b6e0 <_sbrk_r+0x1c>)
 801b6c8:	2300      	movs	r3, #0
 801b6ca:	4604      	mov	r4, r0
 801b6cc:	4608      	mov	r0, r1
 801b6ce:	602b      	str	r3, [r5, #0]
 801b6d0:	f7e8 fc9c 	bl	800400c <_sbrk>
 801b6d4:	1c43      	adds	r3, r0, #1
 801b6d6:	d102      	bne.n	801b6de <_sbrk_r+0x1a>
 801b6d8:	682b      	ldr	r3, [r5, #0]
 801b6da:	b103      	cbz	r3, 801b6de <_sbrk_r+0x1a>
 801b6dc:	6023      	str	r3, [r4, #0]
 801b6de:	bd38      	pop	{r3, r4, r5, pc}
 801b6e0:	2400336c 	.word	0x2400336c
 801b6e4:	00000000 	.word	0x00000000

0801b6e8 <nan>:
 801b6e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801b6f0 <nan+0x8>
 801b6ec:	4770      	bx	lr
 801b6ee:	bf00      	nop
 801b6f0:	00000000 	.word	0x00000000
 801b6f4:	7ff80000 	.word	0x7ff80000

0801b6f8 <__assert_func>:
 801b6f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b6fa:	4614      	mov	r4, r2
 801b6fc:	461a      	mov	r2, r3
 801b6fe:	4b09      	ldr	r3, [pc, #36]	; (801b724 <__assert_func+0x2c>)
 801b700:	681b      	ldr	r3, [r3, #0]
 801b702:	4605      	mov	r5, r0
 801b704:	68d8      	ldr	r0, [r3, #12]
 801b706:	b14c      	cbz	r4, 801b71c <__assert_func+0x24>
 801b708:	4b07      	ldr	r3, [pc, #28]	; (801b728 <__assert_func+0x30>)
 801b70a:	9100      	str	r1, [sp, #0]
 801b70c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b710:	4906      	ldr	r1, [pc, #24]	; (801b72c <__assert_func+0x34>)
 801b712:	462b      	mov	r3, r5
 801b714:	f000 fbca 	bl	801beac <fiprintf>
 801b718:	f000 fbda 	bl	801bed0 <abort>
 801b71c:	4b04      	ldr	r3, [pc, #16]	; (801b730 <__assert_func+0x38>)
 801b71e:	461c      	mov	r4, r3
 801b720:	e7f3      	b.n	801b70a <__assert_func+0x12>
 801b722:	bf00      	nop
 801b724:	24000184 	.word	0x24000184
 801b728:	0801cbe2 	.word	0x0801cbe2
 801b72c:	0801cbef 	.word	0x0801cbef
 801b730:	0801cc1d 	.word	0x0801cc1d

0801b734 <_calloc_r>:
 801b734:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b736:	fba1 2402 	umull	r2, r4, r1, r2
 801b73a:	b94c      	cbnz	r4, 801b750 <_calloc_r+0x1c>
 801b73c:	4611      	mov	r1, r2
 801b73e:	9201      	str	r2, [sp, #4]
 801b740:	f7fe fa02 	bl	8019b48 <_malloc_r>
 801b744:	9a01      	ldr	r2, [sp, #4]
 801b746:	4605      	mov	r5, r0
 801b748:	b930      	cbnz	r0, 801b758 <_calloc_r+0x24>
 801b74a:	4628      	mov	r0, r5
 801b74c:	b003      	add	sp, #12
 801b74e:	bd30      	pop	{r4, r5, pc}
 801b750:	220c      	movs	r2, #12
 801b752:	6002      	str	r2, [r0, #0]
 801b754:	2500      	movs	r5, #0
 801b756:	e7f8      	b.n	801b74a <_calloc_r+0x16>
 801b758:	4621      	mov	r1, r4
 801b75a:	f7fd faf8 	bl	8018d4e <memset>
 801b75e:	e7f4      	b.n	801b74a <_calloc_r+0x16>

0801b760 <rshift>:
 801b760:	6903      	ldr	r3, [r0, #16]
 801b762:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801b766:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b76a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801b76e:	f100 0414 	add.w	r4, r0, #20
 801b772:	dd45      	ble.n	801b800 <rshift+0xa0>
 801b774:	f011 011f 	ands.w	r1, r1, #31
 801b778:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801b77c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801b780:	d10c      	bne.n	801b79c <rshift+0x3c>
 801b782:	f100 0710 	add.w	r7, r0, #16
 801b786:	4629      	mov	r1, r5
 801b788:	42b1      	cmp	r1, r6
 801b78a:	d334      	bcc.n	801b7f6 <rshift+0x96>
 801b78c:	1a9b      	subs	r3, r3, r2
 801b78e:	009b      	lsls	r3, r3, #2
 801b790:	1eea      	subs	r2, r5, #3
 801b792:	4296      	cmp	r6, r2
 801b794:	bf38      	it	cc
 801b796:	2300      	movcc	r3, #0
 801b798:	4423      	add	r3, r4
 801b79a:	e015      	b.n	801b7c8 <rshift+0x68>
 801b79c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801b7a0:	f1c1 0820 	rsb	r8, r1, #32
 801b7a4:	40cf      	lsrs	r7, r1
 801b7a6:	f105 0e04 	add.w	lr, r5, #4
 801b7aa:	46a1      	mov	r9, r4
 801b7ac:	4576      	cmp	r6, lr
 801b7ae:	46f4      	mov	ip, lr
 801b7b0:	d815      	bhi.n	801b7de <rshift+0x7e>
 801b7b2:	1a9a      	subs	r2, r3, r2
 801b7b4:	0092      	lsls	r2, r2, #2
 801b7b6:	3a04      	subs	r2, #4
 801b7b8:	3501      	adds	r5, #1
 801b7ba:	42ae      	cmp	r6, r5
 801b7bc:	bf38      	it	cc
 801b7be:	2200      	movcc	r2, #0
 801b7c0:	18a3      	adds	r3, r4, r2
 801b7c2:	50a7      	str	r7, [r4, r2]
 801b7c4:	b107      	cbz	r7, 801b7c8 <rshift+0x68>
 801b7c6:	3304      	adds	r3, #4
 801b7c8:	1b1a      	subs	r2, r3, r4
 801b7ca:	42a3      	cmp	r3, r4
 801b7cc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801b7d0:	bf08      	it	eq
 801b7d2:	2300      	moveq	r3, #0
 801b7d4:	6102      	str	r2, [r0, #16]
 801b7d6:	bf08      	it	eq
 801b7d8:	6143      	streq	r3, [r0, #20]
 801b7da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b7de:	f8dc c000 	ldr.w	ip, [ip]
 801b7e2:	fa0c fc08 	lsl.w	ip, ip, r8
 801b7e6:	ea4c 0707 	orr.w	r7, ip, r7
 801b7ea:	f849 7b04 	str.w	r7, [r9], #4
 801b7ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 801b7f2:	40cf      	lsrs	r7, r1
 801b7f4:	e7da      	b.n	801b7ac <rshift+0x4c>
 801b7f6:	f851 cb04 	ldr.w	ip, [r1], #4
 801b7fa:	f847 cf04 	str.w	ip, [r7, #4]!
 801b7fe:	e7c3      	b.n	801b788 <rshift+0x28>
 801b800:	4623      	mov	r3, r4
 801b802:	e7e1      	b.n	801b7c8 <rshift+0x68>

0801b804 <__hexdig_fun>:
 801b804:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801b808:	2b09      	cmp	r3, #9
 801b80a:	d802      	bhi.n	801b812 <__hexdig_fun+0xe>
 801b80c:	3820      	subs	r0, #32
 801b80e:	b2c0      	uxtb	r0, r0
 801b810:	4770      	bx	lr
 801b812:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801b816:	2b05      	cmp	r3, #5
 801b818:	d801      	bhi.n	801b81e <__hexdig_fun+0x1a>
 801b81a:	3847      	subs	r0, #71	; 0x47
 801b81c:	e7f7      	b.n	801b80e <__hexdig_fun+0xa>
 801b81e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801b822:	2b05      	cmp	r3, #5
 801b824:	d801      	bhi.n	801b82a <__hexdig_fun+0x26>
 801b826:	3827      	subs	r0, #39	; 0x27
 801b828:	e7f1      	b.n	801b80e <__hexdig_fun+0xa>
 801b82a:	2000      	movs	r0, #0
 801b82c:	4770      	bx	lr
	...

0801b830 <__gethex>:
 801b830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b834:	4617      	mov	r7, r2
 801b836:	680a      	ldr	r2, [r1, #0]
 801b838:	b085      	sub	sp, #20
 801b83a:	f102 0b02 	add.w	fp, r2, #2
 801b83e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801b842:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801b846:	4681      	mov	r9, r0
 801b848:	468a      	mov	sl, r1
 801b84a:	9302      	str	r3, [sp, #8]
 801b84c:	32fe      	adds	r2, #254	; 0xfe
 801b84e:	eb02 030b 	add.w	r3, r2, fp
 801b852:	46d8      	mov	r8, fp
 801b854:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801b858:	9301      	str	r3, [sp, #4]
 801b85a:	2830      	cmp	r0, #48	; 0x30
 801b85c:	d0f7      	beq.n	801b84e <__gethex+0x1e>
 801b85e:	f7ff ffd1 	bl	801b804 <__hexdig_fun>
 801b862:	4604      	mov	r4, r0
 801b864:	2800      	cmp	r0, #0
 801b866:	d138      	bne.n	801b8da <__gethex+0xaa>
 801b868:	49a7      	ldr	r1, [pc, #668]	; (801bb08 <__gethex+0x2d8>)
 801b86a:	2201      	movs	r2, #1
 801b86c:	4640      	mov	r0, r8
 801b86e:	f7ff ff17 	bl	801b6a0 <strncmp>
 801b872:	4606      	mov	r6, r0
 801b874:	2800      	cmp	r0, #0
 801b876:	d169      	bne.n	801b94c <__gethex+0x11c>
 801b878:	f898 0001 	ldrb.w	r0, [r8, #1]
 801b87c:	465d      	mov	r5, fp
 801b87e:	f7ff ffc1 	bl	801b804 <__hexdig_fun>
 801b882:	2800      	cmp	r0, #0
 801b884:	d064      	beq.n	801b950 <__gethex+0x120>
 801b886:	465a      	mov	r2, fp
 801b888:	7810      	ldrb	r0, [r2, #0]
 801b88a:	2830      	cmp	r0, #48	; 0x30
 801b88c:	4690      	mov	r8, r2
 801b88e:	f102 0201 	add.w	r2, r2, #1
 801b892:	d0f9      	beq.n	801b888 <__gethex+0x58>
 801b894:	f7ff ffb6 	bl	801b804 <__hexdig_fun>
 801b898:	2301      	movs	r3, #1
 801b89a:	fab0 f480 	clz	r4, r0
 801b89e:	0964      	lsrs	r4, r4, #5
 801b8a0:	465e      	mov	r6, fp
 801b8a2:	9301      	str	r3, [sp, #4]
 801b8a4:	4642      	mov	r2, r8
 801b8a6:	4615      	mov	r5, r2
 801b8a8:	3201      	adds	r2, #1
 801b8aa:	7828      	ldrb	r0, [r5, #0]
 801b8ac:	f7ff ffaa 	bl	801b804 <__hexdig_fun>
 801b8b0:	2800      	cmp	r0, #0
 801b8b2:	d1f8      	bne.n	801b8a6 <__gethex+0x76>
 801b8b4:	4994      	ldr	r1, [pc, #592]	; (801bb08 <__gethex+0x2d8>)
 801b8b6:	2201      	movs	r2, #1
 801b8b8:	4628      	mov	r0, r5
 801b8ba:	f7ff fef1 	bl	801b6a0 <strncmp>
 801b8be:	b978      	cbnz	r0, 801b8e0 <__gethex+0xb0>
 801b8c0:	b946      	cbnz	r6, 801b8d4 <__gethex+0xa4>
 801b8c2:	1c6e      	adds	r6, r5, #1
 801b8c4:	4632      	mov	r2, r6
 801b8c6:	4615      	mov	r5, r2
 801b8c8:	3201      	adds	r2, #1
 801b8ca:	7828      	ldrb	r0, [r5, #0]
 801b8cc:	f7ff ff9a 	bl	801b804 <__hexdig_fun>
 801b8d0:	2800      	cmp	r0, #0
 801b8d2:	d1f8      	bne.n	801b8c6 <__gethex+0x96>
 801b8d4:	1b73      	subs	r3, r6, r5
 801b8d6:	009e      	lsls	r6, r3, #2
 801b8d8:	e004      	b.n	801b8e4 <__gethex+0xb4>
 801b8da:	2400      	movs	r4, #0
 801b8dc:	4626      	mov	r6, r4
 801b8de:	e7e1      	b.n	801b8a4 <__gethex+0x74>
 801b8e0:	2e00      	cmp	r6, #0
 801b8e2:	d1f7      	bne.n	801b8d4 <__gethex+0xa4>
 801b8e4:	782b      	ldrb	r3, [r5, #0]
 801b8e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801b8ea:	2b50      	cmp	r3, #80	; 0x50
 801b8ec:	d13d      	bne.n	801b96a <__gethex+0x13a>
 801b8ee:	786b      	ldrb	r3, [r5, #1]
 801b8f0:	2b2b      	cmp	r3, #43	; 0x2b
 801b8f2:	d02f      	beq.n	801b954 <__gethex+0x124>
 801b8f4:	2b2d      	cmp	r3, #45	; 0x2d
 801b8f6:	d031      	beq.n	801b95c <__gethex+0x12c>
 801b8f8:	1c69      	adds	r1, r5, #1
 801b8fa:	f04f 0b00 	mov.w	fp, #0
 801b8fe:	7808      	ldrb	r0, [r1, #0]
 801b900:	f7ff ff80 	bl	801b804 <__hexdig_fun>
 801b904:	1e42      	subs	r2, r0, #1
 801b906:	b2d2      	uxtb	r2, r2
 801b908:	2a18      	cmp	r2, #24
 801b90a:	d82e      	bhi.n	801b96a <__gethex+0x13a>
 801b90c:	f1a0 0210 	sub.w	r2, r0, #16
 801b910:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801b914:	f7ff ff76 	bl	801b804 <__hexdig_fun>
 801b918:	f100 3cff 	add.w	ip, r0, #4294967295
 801b91c:	fa5f fc8c 	uxtb.w	ip, ip
 801b920:	f1bc 0f18 	cmp.w	ip, #24
 801b924:	d91d      	bls.n	801b962 <__gethex+0x132>
 801b926:	f1bb 0f00 	cmp.w	fp, #0
 801b92a:	d000      	beq.n	801b92e <__gethex+0xfe>
 801b92c:	4252      	negs	r2, r2
 801b92e:	4416      	add	r6, r2
 801b930:	f8ca 1000 	str.w	r1, [sl]
 801b934:	b1dc      	cbz	r4, 801b96e <__gethex+0x13e>
 801b936:	9b01      	ldr	r3, [sp, #4]
 801b938:	2b00      	cmp	r3, #0
 801b93a:	bf14      	ite	ne
 801b93c:	f04f 0800 	movne.w	r8, #0
 801b940:	f04f 0806 	moveq.w	r8, #6
 801b944:	4640      	mov	r0, r8
 801b946:	b005      	add	sp, #20
 801b948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b94c:	4645      	mov	r5, r8
 801b94e:	4626      	mov	r6, r4
 801b950:	2401      	movs	r4, #1
 801b952:	e7c7      	b.n	801b8e4 <__gethex+0xb4>
 801b954:	f04f 0b00 	mov.w	fp, #0
 801b958:	1ca9      	adds	r1, r5, #2
 801b95a:	e7d0      	b.n	801b8fe <__gethex+0xce>
 801b95c:	f04f 0b01 	mov.w	fp, #1
 801b960:	e7fa      	b.n	801b958 <__gethex+0x128>
 801b962:	230a      	movs	r3, #10
 801b964:	fb03 0002 	mla	r0, r3, r2, r0
 801b968:	e7d0      	b.n	801b90c <__gethex+0xdc>
 801b96a:	4629      	mov	r1, r5
 801b96c:	e7e0      	b.n	801b930 <__gethex+0x100>
 801b96e:	eba5 0308 	sub.w	r3, r5, r8
 801b972:	3b01      	subs	r3, #1
 801b974:	4621      	mov	r1, r4
 801b976:	2b07      	cmp	r3, #7
 801b978:	dc0a      	bgt.n	801b990 <__gethex+0x160>
 801b97a:	4648      	mov	r0, r9
 801b97c:	f7fe f970 	bl	8019c60 <_Balloc>
 801b980:	4604      	mov	r4, r0
 801b982:	b940      	cbnz	r0, 801b996 <__gethex+0x166>
 801b984:	4b61      	ldr	r3, [pc, #388]	; (801bb0c <__gethex+0x2dc>)
 801b986:	4602      	mov	r2, r0
 801b988:	21e4      	movs	r1, #228	; 0xe4
 801b98a:	4861      	ldr	r0, [pc, #388]	; (801bb10 <__gethex+0x2e0>)
 801b98c:	f7ff feb4 	bl	801b6f8 <__assert_func>
 801b990:	3101      	adds	r1, #1
 801b992:	105b      	asrs	r3, r3, #1
 801b994:	e7ef      	b.n	801b976 <__gethex+0x146>
 801b996:	f100 0a14 	add.w	sl, r0, #20
 801b99a:	2300      	movs	r3, #0
 801b99c:	495a      	ldr	r1, [pc, #360]	; (801bb08 <__gethex+0x2d8>)
 801b99e:	f8cd a004 	str.w	sl, [sp, #4]
 801b9a2:	469b      	mov	fp, r3
 801b9a4:	45a8      	cmp	r8, r5
 801b9a6:	d342      	bcc.n	801ba2e <__gethex+0x1fe>
 801b9a8:	9801      	ldr	r0, [sp, #4]
 801b9aa:	f840 bb04 	str.w	fp, [r0], #4
 801b9ae:	eba0 000a 	sub.w	r0, r0, sl
 801b9b2:	1080      	asrs	r0, r0, #2
 801b9b4:	6120      	str	r0, [r4, #16]
 801b9b6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801b9ba:	4658      	mov	r0, fp
 801b9bc:	f7fe fa42 	bl	8019e44 <__hi0bits>
 801b9c0:	683d      	ldr	r5, [r7, #0]
 801b9c2:	eba8 0000 	sub.w	r0, r8, r0
 801b9c6:	42a8      	cmp	r0, r5
 801b9c8:	dd59      	ble.n	801ba7e <__gethex+0x24e>
 801b9ca:	eba0 0805 	sub.w	r8, r0, r5
 801b9ce:	4641      	mov	r1, r8
 801b9d0:	4620      	mov	r0, r4
 801b9d2:	f7fe fdce 	bl	801a572 <__any_on>
 801b9d6:	4683      	mov	fp, r0
 801b9d8:	b1b8      	cbz	r0, 801ba0a <__gethex+0x1da>
 801b9da:	f108 33ff 	add.w	r3, r8, #4294967295
 801b9de:	1159      	asrs	r1, r3, #5
 801b9e0:	f003 021f 	and.w	r2, r3, #31
 801b9e4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801b9e8:	f04f 0b01 	mov.w	fp, #1
 801b9ec:	fa0b f202 	lsl.w	r2, fp, r2
 801b9f0:	420a      	tst	r2, r1
 801b9f2:	d00a      	beq.n	801ba0a <__gethex+0x1da>
 801b9f4:	455b      	cmp	r3, fp
 801b9f6:	dd06      	ble.n	801ba06 <__gethex+0x1d6>
 801b9f8:	f1a8 0102 	sub.w	r1, r8, #2
 801b9fc:	4620      	mov	r0, r4
 801b9fe:	f7fe fdb8 	bl	801a572 <__any_on>
 801ba02:	2800      	cmp	r0, #0
 801ba04:	d138      	bne.n	801ba78 <__gethex+0x248>
 801ba06:	f04f 0b02 	mov.w	fp, #2
 801ba0a:	4641      	mov	r1, r8
 801ba0c:	4620      	mov	r0, r4
 801ba0e:	f7ff fea7 	bl	801b760 <rshift>
 801ba12:	4446      	add	r6, r8
 801ba14:	68bb      	ldr	r3, [r7, #8]
 801ba16:	42b3      	cmp	r3, r6
 801ba18:	da41      	bge.n	801ba9e <__gethex+0x26e>
 801ba1a:	4621      	mov	r1, r4
 801ba1c:	4648      	mov	r0, r9
 801ba1e:	f7fe f95f 	bl	8019ce0 <_Bfree>
 801ba22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ba24:	2300      	movs	r3, #0
 801ba26:	6013      	str	r3, [r2, #0]
 801ba28:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801ba2c:	e78a      	b.n	801b944 <__gethex+0x114>
 801ba2e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801ba32:	2a2e      	cmp	r2, #46	; 0x2e
 801ba34:	d014      	beq.n	801ba60 <__gethex+0x230>
 801ba36:	2b20      	cmp	r3, #32
 801ba38:	d106      	bne.n	801ba48 <__gethex+0x218>
 801ba3a:	9b01      	ldr	r3, [sp, #4]
 801ba3c:	f843 bb04 	str.w	fp, [r3], #4
 801ba40:	f04f 0b00 	mov.w	fp, #0
 801ba44:	9301      	str	r3, [sp, #4]
 801ba46:	465b      	mov	r3, fp
 801ba48:	7828      	ldrb	r0, [r5, #0]
 801ba4a:	9303      	str	r3, [sp, #12]
 801ba4c:	f7ff feda 	bl	801b804 <__hexdig_fun>
 801ba50:	9b03      	ldr	r3, [sp, #12]
 801ba52:	f000 000f 	and.w	r0, r0, #15
 801ba56:	4098      	lsls	r0, r3
 801ba58:	ea4b 0b00 	orr.w	fp, fp, r0
 801ba5c:	3304      	adds	r3, #4
 801ba5e:	e7a1      	b.n	801b9a4 <__gethex+0x174>
 801ba60:	45a8      	cmp	r8, r5
 801ba62:	d8e8      	bhi.n	801ba36 <__gethex+0x206>
 801ba64:	2201      	movs	r2, #1
 801ba66:	4628      	mov	r0, r5
 801ba68:	9303      	str	r3, [sp, #12]
 801ba6a:	f7ff fe19 	bl	801b6a0 <strncmp>
 801ba6e:	4926      	ldr	r1, [pc, #152]	; (801bb08 <__gethex+0x2d8>)
 801ba70:	9b03      	ldr	r3, [sp, #12]
 801ba72:	2800      	cmp	r0, #0
 801ba74:	d1df      	bne.n	801ba36 <__gethex+0x206>
 801ba76:	e795      	b.n	801b9a4 <__gethex+0x174>
 801ba78:	f04f 0b03 	mov.w	fp, #3
 801ba7c:	e7c5      	b.n	801ba0a <__gethex+0x1da>
 801ba7e:	da0b      	bge.n	801ba98 <__gethex+0x268>
 801ba80:	eba5 0800 	sub.w	r8, r5, r0
 801ba84:	4621      	mov	r1, r4
 801ba86:	4642      	mov	r2, r8
 801ba88:	4648      	mov	r0, r9
 801ba8a:	f7fe fb43 	bl	801a114 <__lshift>
 801ba8e:	eba6 0608 	sub.w	r6, r6, r8
 801ba92:	4604      	mov	r4, r0
 801ba94:	f100 0a14 	add.w	sl, r0, #20
 801ba98:	f04f 0b00 	mov.w	fp, #0
 801ba9c:	e7ba      	b.n	801ba14 <__gethex+0x1e4>
 801ba9e:	687b      	ldr	r3, [r7, #4]
 801baa0:	42b3      	cmp	r3, r6
 801baa2:	dd73      	ble.n	801bb8c <__gethex+0x35c>
 801baa4:	1b9e      	subs	r6, r3, r6
 801baa6:	42b5      	cmp	r5, r6
 801baa8:	dc34      	bgt.n	801bb14 <__gethex+0x2e4>
 801baaa:	68fb      	ldr	r3, [r7, #12]
 801baac:	2b02      	cmp	r3, #2
 801baae:	d023      	beq.n	801baf8 <__gethex+0x2c8>
 801bab0:	2b03      	cmp	r3, #3
 801bab2:	d025      	beq.n	801bb00 <__gethex+0x2d0>
 801bab4:	2b01      	cmp	r3, #1
 801bab6:	d115      	bne.n	801bae4 <__gethex+0x2b4>
 801bab8:	42b5      	cmp	r5, r6
 801baba:	d113      	bne.n	801bae4 <__gethex+0x2b4>
 801babc:	2d01      	cmp	r5, #1
 801babe:	d10b      	bne.n	801bad8 <__gethex+0x2a8>
 801bac0:	9a02      	ldr	r2, [sp, #8]
 801bac2:	687b      	ldr	r3, [r7, #4]
 801bac4:	6013      	str	r3, [r2, #0]
 801bac6:	2301      	movs	r3, #1
 801bac8:	6123      	str	r3, [r4, #16]
 801baca:	f8ca 3000 	str.w	r3, [sl]
 801bace:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bad0:	f04f 0862 	mov.w	r8, #98	; 0x62
 801bad4:	601c      	str	r4, [r3, #0]
 801bad6:	e735      	b.n	801b944 <__gethex+0x114>
 801bad8:	1e69      	subs	r1, r5, #1
 801bada:	4620      	mov	r0, r4
 801badc:	f7fe fd49 	bl	801a572 <__any_on>
 801bae0:	2800      	cmp	r0, #0
 801bae2:	d1ed      	bne.n	801bac0 <__gethex+0x290>
 801bae4:	4621      	mov	r1, r4
 801bae6:	4648      	mov	r0, r9
 801bae8:	f7fe f8fa 	bl	8019ce0 <_Bfree>
 801baec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801baee:	2300      	movs	r3, #0
 801baf0:	6013      	str	r3, [r2, #0]
 801baf2:	f04f 0850 	mov.w	r8, #80	; 0x50
 801baf6:	e725      	b.n	801b944 <__gethex+0x114>
 801baf8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bafa:	2b00      	cmp	r3, #0
 801bafc:	d1f2      	bne.n	801bae4 <__gethex+0x2b4>
 801bafe:	e7df      	b.n	801bac0 <__gethex+0x290>
 801bb00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bb02:	2b00      	cmp	r3, #0
 801bb04:	d1dc      	bne.n	801bac0 <__gethex+0x290>
 801bb06:	e7ed      	b.n	801bae4 <__gethex+0x2b4>
 801bb08:	0801ca74 	.word	0x0801ca74
 801bb0c:	0801c90d 	.word	0x0801c90d
 801bb10:	0801cc1e 	.word	0x0801cc1e
 801bb14:	f106 38ff 	add.w	r8, r6, #4294967295
 801bb18:	f1bb 0f00 	cmp.w	fp, #0
 801bb1c:	d133      	bne.n	801bb86 <__gethex+0x356>
 801bb1e:	f1b8 0f00 	cmp.w	r8, #0
 801bb22:	d004      	beq.n	801bb2e <__gethex+0x2fe>
 801bb24:	4641      	mov	r1, r8
 801bb26:	4620      	mov	r0, r4
 801bb28:	f7fe fd23 	bl	801a572 <__any_on>
 801bb2c:	4683      	mov	fp, r0
 801bb2e:	ea4f 1268 	mov.w	r2, r8, asr #5
 801bb32:	2301      	movs	r3, #1
 801bb34:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801bb38:	f008 081f 	and.w	r8, r8, #31
 801bb3c:	fa03 f308 	lsl.w	r3, r3, r8
 801bb40:	4213      	tst	r3, r2
 801bb42:	4631      	mov	r1, r6
 801bb44:	4620      	mov	r0, r4
 801bb46:	bf18      	it	ne
 801bb48:	f04b 0b02 	orrne.w	fp, fp, #2
 801bb4c:	1bad      	subs	r5, r5, r6
 801bb4e:	f7ff fe07 	bl	801b760 <rshift>
 801bb52:	687e      	ldr	r6, [r7, #4]
 801bb54:	f04f 0802 	mov.w	r8, #2
 801bb58:	f1bb 0f00 	cmp.w	fp, #0
 801bb5c:	d04a      	beq.n	801bbf4 <__gethex+0x3c4>
 801bb5e:	68fb      	ldr	r3, [r7, #12]
 801bb60:	2b02      	cmp	r3, #2
 801bb62:	d016      	beq.n	801bb92 <__gethex+0x362>
 801bb64:	2b03      	cmp	r3, #3
 801bb66:	d018      	beq.n	801bb9a <__gethex+0x36a>
 801bb68:	2b01      	cmp	r3, #1
 801bb6a:	d109      	bne.n	801bb80 <__gethex+0x350>
 801bb6c:	f01b 0f02 	tst.w	fp, #2
 801bb70:	d006      	beq.n	801bb80 <__gethex+0x350>
 801bb72:	f8da 3000 	ldr.w	r3, [sl]
 801bb76:	ea4b 0b03 	orr.w	fp, fp, r3
 801bb7a:	f01b 0f01 	tst.w	fp, #1
 801bb7e:	d10f      	bne.n	801bba0 <__gethex+0x370>
 801bb80:	f048 0810 	orr.w	r8, r8, #16
 801bb84:	e036      	b.n	801bbf4 <__gethex+0x3c4>
 801bb86:	f04f 0b01 	mov.w	fp, #1
 801bb8a:	e7d0      	b.n	801bb2e <__gethex+0x2fe>
 801bb8c:	f04f 0801 	mov.w	r8, #1
 801bb90:	e7e2      	b.n	801bb58 <__gethex+0x328>
 801bb92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bb94:	f1c3 0301 	rsb	r3, r3, #1
 801bb98:	930f      	str	r3, [sp, #60]	; 0x3c
 801bb9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bb9c:	2b00      	cmp	r3, #0
 801bb9e:	d0ef      	beq.n	801bb80 <__gethex+0x350>
 801bba0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801bba4:	f104 0214 	add.w	r2, r4, #20
 801bba8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801bbac:	9301      	str	r3, [sp, #4]
 801bbae:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801bbb2:	2300      	movs	r3, #0
 801bbb4:	4694      	mov	ip, r2
 801bbb6:	f852 1b04 	ldr.w	r1, [r2], #4
 801bbba:	f1b1 3fff 	cmp.w	r1, #4294967295
 801bbbe:	d01e      	beq.n	801bbfe <__gethex+0x3ce>
 801bbc0:	3101      	adds	r1, #1
 801bbc2:	f8cc 1000 	str.w	r1, [ip]
 801bbc6:	f1b8 0f02 	cmp.w	r8, #2
 801bbca:	f104 0214 	add.w	r2, r4, #20
 801bbce:	d13d      	bne.n	801bc4c <__gethex+0x41c>
 801bbd0:	683b      	ldr	r3, [r7, #0]
 801bbd2:	3b01      	subs	r3, #1
 801bbd4:	42ab      	cmp	r3, r5
 801bbd6:	d10b      	bne.n	801bbf0 <__gethex+0x3c0>
 801bbd8:	1169      	asrs	r1, r5, #5
 801bbda:	2301      	movs	r3, #1
 801bbdc:	f005 051f 	and.w	r5, r5, #31
 801bbe0:	fa03 f505 	lsl.w	r5, r3, r5
 801bbe4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801bbe8:	421d      	tst	r5, r3
 801bbea:	bf18      	it	ne
 801bbec:	f04f 0801 	movne.w	r8, #1
 801bbf0:	f048 0820 	orr.w	r8, r8, #32
 801bbf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bbf6:	601c      	str	r4, [r3, #0]
 801bbf8:	9b02      	ldr	r3, [sp, #8]
 801bbfa:	601e      	str	r6, [r3, #0]
 801bbfc:	e6a2      	b.n	801b944 <__gethex+0x114>
 801bbfe:	4290      	cmp	r0, r2
 801bc00:	f842 3c04 	str.w	r3, [r2, #-4]
 801bc04:	d8d6      	bhi.n	801bbb4 <__gethex+0x384>
 801bc06:	68a2      	ldr	r2, [r4, #8]
 801bc08:	4593      	cmp	fp, r2
 801bc0a:	db17      	blt.n	801bc3c <__gethex+0x40c>
 801bc0c:	6861      	ldr	r1, [r4, #4]
 801bc0e:	4648      	mov	r0, r9
 801bc10:	3101      	adds	r1, #1
 801bc12:	f7fe f825 	bl	8019c60 <_Balloc>
 801bc16:	4682      	mov	sl, r0
 801bc18:	b918      	cbnz	r0, 801bc22 <__gethex+0x3f2>
 801bc1a:	4b1b      	ldr	r3, [pc, #108]	; (801bc88 <__gethex+0x458>)
 801bc1c:	4602      	mov	r2, r0
 801bc1e:	2184      	movs	r1, #132	; 0x84
 801bc20:	e6b3      	b.n	801b98a <__gethex+0x15a>
 801bc22:	6922      	ldr	r2, [r4, #16]
 801bc24:	3202      	adds	r2, #2
 801bc26:	f104 010c 	add.w	r1, r4, #12
 801bc2a:	0092      	lsls	r2, r2, #2
 801bc2c:	300c      	adds	r0, #12
 801bc2e:	f7fd f90e 	bl	8018e4e <memcpy>
 801bc32:	4621      	mov	r1, r4
 801bc34:	4648      	mov	r0, r9
 801bc36:	f7fe f853 	bl	8019ce0 <_Bfree>
 801bc3a:	4654      	mov	r4, sl
 801bc3c:	6922      	ldr	r2, [r4, #16]
 801bc3e:	1c51      	adds	r1, r2, #1
 801bc40:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801bc44:	6121      	str	r1, [r4, #16]
 801bc46:	2101      	movs	r1, #1
 801bc48:	6151      	str	r1, [r2, #20]
 801bc4a:	e7bc      	b.n	801bbc6 <__gethex+0x396>
 801bc4c:	6921      	ldr	r1, [r4, #16]
 801bc4e:	4559      	cmp	r1, fp
 801bc50:	dd0b      	ble.n	801bc6a <__gethex+0x43a>
 801bc52:	2101      	movs	r1, #1
 801bc54:	4620      	mov	r0, r4
 801bc56:	f7ff fd83 	bl	801b760 <rshift>
 801bc5a:	68bb      	ldr	r3, [r7, #8]
 801bc5c:	3601      	adds	r6, #1
 801bc5e:	42b3      	cmp	r3, r6
 801bc60:	f6ff aedb 	blt.w	801ba1a <__gethex+0x1ea>
 801bc64:	f04f 0801 	mov.w	r8, #1
 801bc68:	e7c2      	b.n	801bbf0 <__gethex+0x3c0>
 801bc6a:	f015 051f 	ands.w	r5, r5, #31
 801bc6e:	d0f9      	beq.n	801bc64 <__gethex+0x434>
 801bc70:	9b01      	ldr	r3, [sp, #4]
 801bc72:	441a      	add	r2, r3
 801bc74:	f1c5 0520 	rsb	r5, r5, #32
 801bc78:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801bc7c:	f7fe f8e2 	bl	8019e44 <__hi0bits>
 801bc80:	42a8      	cmp	r0, r5
 801bc82:	dbe6      	blt.n	801bc52 <__gethex+0x422>
 801bc84:	e7ee      	b.n	801bc64 <__gethex+0x434>
 801bc86:	bf00      	nop
 801bc88:	0801c90d 	.word	0x0801c90d

0801bc8c <L_shift>:
 801bc8c:	f1c2 0208 	rsb	r2, r2, #8
 801bc90:	0092      	lsls	r2, r2, #2
 801bc92:	b570      	push	{r4, r5, r6, lr}
 801bc94:	f1c2 0620 	rsb	r6, r2, #32
 801bc98:	6843      	ldr	r3, [r0, #4]
 801bc9a:	6804      	ldr	r4, [r0, #0]
 801bc9c:	fa03 f506 	lsl.w	r5, r3, r6
 801bca0:	432c      	orrs	r4, r5
 801bca2:	40d3      	lsrs	r3, r2
 801bca4:	6004      	str	r4, [r0, #0]
 801bca6:	f840 3f04 	str.w	r3, [r0, #4]!
 801bcaa:	4288      	cmp	r0, r1
 801bcac:	d3f4      	bcc.n	801bc98 <L_shift+0xc>
 801bcae:	bd70      	pop	{r4, r5, r6, pc}

0801bcb0 <__match>:
 801bcb0:	b530      	push	{r4, r5, lr}
 801bcb2:	6803      	ldr	r3, [r0, #0]
 801bcb4:	3301      	adds	r3, #1
 801bcb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801bcba:	b914      	cbnz	r4, 801bcc2 <__match+0x12>
 801bcbc:	6003      	str	r3, [r0, #0]
 801bcbe:	2001      	movs	r0, #1
 801bcc0:	bd30      	pop	{r4, r5, pc}
 801bcc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bcc6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801bcca:	2d19      	cmp	r5, #25
 801bccc:	bf98      	it	ls
 801bcce:	3220      	addls	r2, #32
 801bcd0:	42a2      	cmp	r2, r4
 801bcd2:	d0f0      	beq.n	801bcb6 <__match+0x6>
 801bcd4:	2000      	movs	r0, #0
 801bcd6:	e7f3      	b.n	801bcc0 <__match+0x10>

0801bcd8 <__hexnan>:
 801bcd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bcdc:	680b      	ldr	r3, [r1, #0]
 801bcde:	6801      	ldr	r1, [r0, #0]
 801bce0:	115e      	asrs	r6, r3, #5
 801bce2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801bce6:	f013 031f 	ands.w	r3, r3, #31
 801bcea:	b087      	sub	sp, #28
 801bcec:	bf18      	it	ne
 801bcee:	3604      	addne	r6, #4
 801bcf0:	2500      	movs	r5, #0
 801bcf2:	1f37      	subs	r7, r6, #4
 801bcf4:	4682      	mov	sl, r0
 801bcf6:	4690      	mov	r8, r2
 801bcf8:	9301      	str	r3, [sp, #4]
 801bcfa:	f846 5c04 	str.w	r5, [r6, #-4]
 801bcfe:	46b9      	mov	r9, r7
 801bd00:	463c      	mov	r4, r7
 801bd02:	9502      	str	r5, [sp, #8]
 801bd04:	46ab      	mov	fp, r5
 801bd06:	784a      	ldrb	r2, [r1, #1]
 801bd08:	1c4b      	adds	r3, r1, #1
 801bd0a:	9303      	str	r3, [sp, #12]
 801bd0c:	b342      	cbz	r2, 801bd60 <__hexnan+0x88>
 801bd0e:	4610      	mov	r0, r2
 801bd10:	9105      	str	r1, [sp, #20]
 801bd12:	9204      	str	r2, [sp, #16]
 801bd14:	f7ff fd76 	bl	801b804 <__hexdig_fun>
 801bd18:	2800      	cmp	r0, #0
 801bd1a:	d14f      	bne.n	801bdbc <__hexnan+0xe4>
 801bd1c:	9a04      	ldr	r2, [sp, #16]
 801bd1e:	9905      	ldr	r1, [sp, #20]
 801bd20:	2a20      	cmp	r2, #32
 801bd22:	d818      	bhi.n	801bd56 <__hexnan+0x7e>
 801bd24:	9b02      	ldr	r3, [sp, #8]
 801bd26:	459b      	cmp	fp, r3
 801bd28:	dd13      	ble.n	801bd52 <__hexnan+0x7a>
 801bd2a:	454c      	cmp	r4, r9
 801bd2c:	d206      	bcs.n	801bd3c <__hexnan+0x64>
 801bd2e:	2d07      	cmp	r5, #7
 801bd30:	dc04      	bgt.n	801bd3c <__hexnan+0x64>
 801bd32:	462a      	mov	r2, r5
 801bd34:	4649      	mov	r1, r9
 801bd36:	4620      	mov	r0, r4
 801bd38:	f7ff ffa8 	bl	801bc8c <L_shift>
 801bd3c:	4544      	cmp	r4, r8
 801bd3e:	d950      	bls.n	801bde2 <__hexnan+0x10a>
 801bd40:	2300      	movs	r3, #0
 801bd42:	f1a4 0904 	sub.w	r9, r4, #4
 801bd46:	f844 3c04 	str.w	r3, [r4, #-4]
 801bd4a:	f8cd b008 	str.w	fp, [sp, #8]
 801bd4e:	464c      	mov	r4, r9
 801bd50:	461d      	mov	r5, r3
 801bd52:	9903      	ldr	r1, [sp, #12]
 801bd54:	e7d7      	b.n	801bd06 <__hexnan+0x2e>
 801bd56:	2a29      	cmp	r2, #41	; 0x29
 801bd58:	d155      	bne.n	801be06 <__hexnan+0x12e>
 801bd5a:	3102      	adds	r1, #2
 801bd5c:	f8ca 1000 	str.w	r1, [sl]
 801bd60:	f1bb 0f00 	cmp.w	fp, #0
 801bd64:	d04f      	beq.n	801be06 <__hexnan+0x12e>
 801bd66:	454c      	cmp	r4, r9
 801bd68:	d206      	bcs.n	801bd78 <__hexnan+0xa0>
 801bd6a:	2d07      	cmp	r5, #7
 801bd6c:	dc04      	bgt.n	801bd78 <__hexnan+0xa0>
 801bd6e:	462a      	mov	r2, r5
 801bd70:	4649      	mov	r1, r9
 801bd72:	4620      	mov	r0, r4
 801bd74:	f7ff ff8a 	bl	801bc8c <L_shift>
 801bd78:	4544      	cmp	r4, r8
 801bd7a:	d934      	bls.n	801bde6 <__hexnan+0x10e>
 801bd7c:	f1a8 0204 	sub.w	r2, r8, #4
 801bd80:	4623      	mov	r3, r4
 801bd82:	f853 1b04 	ldr.w	r1, [r3], #4
 801bd86:	f842 1f04 	str.w	r1, [r2, #4]!
 801bd8a:	429f      	cmp	r7, r3
 801bd8c:	d2f9      	bcs.n	801bd82 <__hexnan+0xaa>
 801bd8e:	1b3b      	subs	r3, r7, r4
 801bd90:	f023 0303 	bic.w	r3, r3, #3
 801bd94:	3304      	adds	r3, #4
 801bd96:	3e03      	subs	r6, #3
 801bd98:	3401      	adds	r4, #1
 801bd9a:	42a6      	cmp	r6, r4
 801bd9c:	bf38      	it	cc
 801bd9e:	2304      	movcc	r3, #4
 801bda0:	4443      	add	r3, r8
 801bda2:	2200      	movs	r2, #0
 801bda4:	f843 2b04 	str.w	r2, [r3], #4
 801bda8:	429f      	cmp	r7, r3
 801bdaa:	d2fb      	bcs.n	801bda4 <__hexnan+0xcc>
 801bdac:	683b      	ldr	r3, [r7, #0]
 801bdae:	b91b      	cbnz	r3, 801bdb8 <__hexnan+0xe0>
 801bdb0:	4547      	cmp	r7, r8
 801bdb2:	d126      	bne.n	801be02 <__hexnan+0x12a>
 801bdb4:	2301      	movs	r3, #1
 801bdb6:	603b      	str	r3, [r7, #0]
 801bdb8:	2005      	movs	r0, #5
 801bdba:	e025      	b.n	801be08 <__hexnan+0x130>
 801bdbc:	3501      	adds	r5, #1
 801bdbe:	2d08      	cmp	r5, #8
 801bdc0:	f10b 0b01 	add.w	fp, fp, #1
 801bdc4:	dd06      	ble.n	801bdd4 <__hexnan+0xfc>
 801bdc6:	4544      	cmp	r4, r8
 801bdc8:	d9c3      	bls.n	801bd52 <__hexnan+0x7a>
 801bdca:	2300      	movs	r3, #0
 801bdcc:	f844 3c04 	str.w	r3, [r4, #-4]
 801bdd0:	2501      	movs	r5, #1
 801bdd2:	3c04      	subs	r4, #4
 801bdd4:	6822      	ldr	r2, [r4, #0]
 801bdd6:	f000 000f 	and.w	r0, r0, #15
 801bdda:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801bdde:	6020      	str	r0, [r4, #0]
 801bde0:	e7b7      	b.n	801bd52 <__hexnan+0x7a>
 801bde2:	2508      	movs	r5, #8
 801bde4:	e7b5      	b.n	801bd52 <__hexnan+0x7a>
 801bde6:	9b01      	ldr	r3, [sp, #4]
 801bde8:	2b00      	cmp	r3, #0
 801bdea:	d0df      	beq.n	801bdac <__hexnan+0xd4>
 801bdec:	f1c3 0320 	rsb	r3, r3, #32
 801bdf0:	f04f 32ff 	mov.w	r2, #4294967295
 801bdf4:	40da      	lsrs	r2, r3
 801bdf6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801bdfa:	4013      	ands	r3, r2
 801bdfc:	f846 3c04 	str.w	r3, [r6, #-4]
 801be00:	e7d4      	b.n	801bdac <__hexnan+0xd4>
 801be02:	3f04      	subs	r7, #4
 801be04:	e7d2      	b.n	801bdac <__hexnan+0xd4>
 801be06:	2004      	movs	r0, #4
 801be08:	b007      	add	sp, #28
 801be0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801be0e <__ascii_mbtowc>:
 801be0e:	b082      	sub	sp, #8
 801be10:	b901      	cbnz	r1, 801be14 <__ascii_mbtowc+0x6>
 801be12:	a901      	add	r1, sp, #4
 801be14:	b142      	cbz	r2, 801be28 <__ascii_mbtowc+0x1a>
 801be16:	b14b      	cbz	r3, 801be2c <__ascii_mbtowc+0x1e>
 801be18:	7813      	ldrb	r3, [r2, #0]
 801be1a:	600b      	str	r3, [r1, #0]
 801be1c:	7812      	ldrb	r2, [r2, #0]
 801be1e:	1e10      	subs	r0, r2, #0
 801be20:	bf18      	it	ne
 801be22:	2001      	movne	r0, #1
 801be24:	b002      	add	sp, #8
 801be26:	4770      	bx	lr
 801be28:	4610      	mov	r0, r2
 801be2a:	e7fb      	b.n	801be24 <__ascii_mbtowc+0x16>
 801be2c:	f06f 0001 	mvn.w	r0, #1
 801be30:	e7f8      	b.n	801be24 <__ascii_mbtowc+0x16>

0801be32 <_realloc_r>:
 801be32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801be36:	4680      	mov	r8, r0
 801be38:	4614      	mov	r4, r2
 801be3a:	460e      	mov	r6, r1
 801be3c:	b921      	cbnz	r1, 801be48 <_realloc_r+0x16>
 801be3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801be42:	4611      	mov	r1, r2
 801be44:	f7fd be80 	b.w	8019b48 <_malloc_r>
 801be48:	b92a      	cbnz	r2, 801be56 <_realloc_r+0x24>
 801be4a:	f7fd fe09 	bl	8019a60 <_free_r>
 801be4e:	4625      	mov	r5, r4
 801be50:	4628      	mov	r0, r5
 801be52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801be56:	f000 f842 	bl	801bede <_malloc_usable_size_r>
 801be5a:	4284      	cmp	r4, r0
 801be5c:	4607      	mov	r7, r0
 801be5e:	d802      	bhi.n	801be66 <_realloc_r+0x34>
 801be60:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801be64:	d812      	bhi.n	801be8c <_realloc_r+0x5a>
 801be66:	4621      	mov	r1, r4
 801be68:	4640      	mov	r0, r8
 801be6a:	f7fd fe6d 	bl	8019b48 <_malloc_r>
 801be6e:	4605      	mov	r5, r0
 801be70:	2800      	cmp	r0, #0
 801be72:	d0ed      	beq.n	801be50 <_realloc_r+0x1e>
 801be74:	42bc      	cmp	r4, r7
 801be76:	4622      	mov	r2, r4
 801be78:	4631      	mov	r1, r6
 801be7a:	bf28      	it	cs
 801be7c:	463a      	movcs	r2, r7
 801be7e:	f7fc ffe6 	bl	8018e4e <memcpy>
 801be82:	4631      	mov	r1, r6
 801be84:	4640      	mov	r0, r8
 801be86:	f7fd fdeb 	bl	8019a60 <_free_r>
 801be8a:	e7e1      	b.n	801be50 <_realloc_r+0x1e>
 801be8c:	4635      	mov	r5, r6
 801be8e:	e7df      	b.n	801be50 <_realloc_r+0x1e>

0801be90 <__ascii_wctomb>:
 801be90:	b149      	cbz	r1, 801bea6 <__ascii_wctomb+0x16>
 801be92:	2aff      	cmp	r2, #255	; 0xff
 801be94:	bf85      	ittet	hi
 801be96:	238a      	movhi	r3, #138	; 0x8a
 801be98:	6003      	strhi	r3, [r0, #0]
 801be9a:	700a      	strbls	r2, [r1, #0]
 801be9c:	f04f 30ff 	movhi.w	r0, #4294967295
 801bea0:	bf98      	it	ls
 801bea2:	2001      	movls	r0, #1
 801bea4:	4770      	bx	lr
 801bea6:	4608      	mov	r0, r1
 801bea8:	4770      	bx	lr
	...

0801beac <fiprintf>:
 801beac:	b40e      	push	{r1, r2, r3}
 801beae:	b503      	push	{r0, r1, lr}
 801beb0:	4601      	mov	r1, r0
 801beb2:	ab03      	add	r3, sp, #12
 801beb4:	4805      	ldr	r0, [pc, #20]	; (801becc <fiprintf+0x20>)
 801beb6:	f853 2b04 	ldr.w	r2, [r3], #4
 801beba:	6800      	ldr	r0, [r0, #0]
 801bebc:	9301      	str	r3, [sp, #4]
 801bebe:	f000 f83f 	bl	801bf40 <_vfiprintf_r>
 801bec2:	b002      	add	sp, #8
 801bec4:	f85d eb04 	ldr.w	lr, [sp], #4
 801bec8:	b003      	add	sp, #12
 801beca:	4770      	bx	lr
 801becc:	24000184 	.word	0x24000184

0801bed0 <abort>:
 801bed0:	b508      	push	{r3, lr}
 801bed2:	2006      	movs	r0, #6
 801bed4:	f000 fa0c 	bl	801c2f0 <raise>
 801bed8:	2001      	movs	r0, #1
 801beda:	f7e8 f81f 	bl	8003f1c <_exit>

0801bede <_malloc_usable_size_r>:
 801bede:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bee2:	1f18      	subs	r0, r3, #4
 801bee4:	2b00      	cmp	r3, #0
 801bee6:	bfbc      	itt	lt
 801bee8:	580b      	ldrlt	r3, [r1, r0]
 801beea:	18c0      	addlt	r0, r0, r3
 801beec:	4770      	bx	lr

0801beee <__sfputc_r>:
 801beee:	6893      	ldr	r3, [r2, #8]
 801bef0:	3b01      	subs	r3, #1
 801bef2:	2b00      	cmp	r3, #0
 801bef4:	b410      	push	{r4}
 801bef6:	6093      	str	r3, [r2, #8]
 801bef8:	da08      	bge.n	801bf0c <__sfputc_r+0x1e>
 801befa:	6994      	ldr	r4, [r2, #24]
 801befc:	42a3      	cmp	r3, r4
 801befe:	db01      	blt.n	801bf04 <__sfputc_r+0x16>
 801bf00:	290a      	cmp	r1, #10
 801bf02:	d103      	bne.n	801bf0c <__sfputc_r+0x1e>
 801bf04:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bf08:	f000 b934 	b.w	801c174 <__swbuf_r>
 801bf0c:	6813      	ldr	r3, [r2, #0]
 801bf0e:	1c58      	adds	r0, r3, #1
 801bf10:	6010      	str	r0, [r2, #0]
 801bf12:	7019      	strb	r1, [r3, #0]
 801bf14:	4608      	mov	r0, r1
 801bf16:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bf1a:	4770      	bx	lr

0801bf1c <__sfputs_r>:
 801bf1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf1e:	4606      	mov	r6, r0
 801bf20:	460f      	mov	r7, r1
 801bf22:	4614      	mov	r4, r2
 801bf24:	18d5      	adds	r5, r2, r3
 801bf26:	42ac      	cmp	r4, r5
 801bf28:	d101      	bne.n	801bf2e <__sfputs_r+0x12>
 801bf2a:	2000      	movs	r0, #0
 801bf2c:	e007      	b.n	801bf3e <__sfputs_r+0x22>
 801bf2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bf32:	463a      	mov	r2, r7
 801bf34:	4630      	mov	r0, r6
 801bf36:	f7ff ffda 	bl	801beee <__sfputc_r>
 801bf3a:	1c43      	adds	r3, r0, #1
 801bf3c:	d1f3      	bne.n	801bf26 <__sfputs_r+0xa>
 801bf3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801bf40 <_vfiprintf_r>:
 801bf40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf44:	460d      	mov	r5, r1
 801bf46:	b09d      	sub	sp, #116	; 0x74
 801bf48:	4614      	mov	r4, r2
 801bf4a:	4698      	mov	r8, r3
 801bf4c:	4606      	mov	r6, r0
 801bf4e:	b118      	cbz	r0, 801bf58 <_vfiprintf_r+0x18>
 801bf50:	6a03      	ldr	r3, [r0, #32]
 801bf52:	b90b      	cbnz	r3, 801bf58 <_vfiprintf_r+0x18>
 801bf54:	f7fc fe62 	bl	8018c1c <__sinit>
 801bf58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bf5a:	07d9      	lsls	r1, r3, #31
 801bf5c:	d405      	bmi.n	801bf6a <_vfiprintf_r+0x2a>
 801bf5e:	89ab      	ldrh	r3, [r5, #12]
 801bf60:	059a      	lsls	r2, r3, #22
 801bf62:	d402      	bmi.n	801bf6a <_vfiprintf_r+0x2a>
 801bf64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bf66:	f7fc ff70 	bl	8018e4a <__retarget_lock_acquire_recursive>
 801bf6a:	89ab      	ldrh	r3, [r5, #12]
 801bf6c:	071b      	lsls	r3, r3, #28
 801bf6e:	d501      	bpl.n	801bf74 <_vfiprintf_r+0x34>
 801bf70:	692b      	ldr	r3, [r5, #16]
 801bf72:	b99b      	cbnz	r3, 801bf9c <_vfiprintf_r+0x5c>
 801bf74:	4629      	mov	r1, r5
 801bf76:	4630      	mov	r0, r6
 801bf78:	f000 f93a 	bl	801c1f0 <__swsetup_r>
 801bf7c:	b170      	cbz	r0, 801bf9c <_vfiprintf_r+0x5c>
 801bf7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bf80:	07dc      	lsls	r4, r3, #31
 801bf82:	d504      	bpl.n	801bf8e <_vfiprintf_r+0x4e>
 801bf84:	f04f 30ff 	mov.w	r0, #4294967295
 801bf88:	b01d      	add	sp, #116	; 0x74
 801bf8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf8e:	89ab      	ldrh	r3, [r5, #12]
 801bf90:	0598      	lsls	r0, r3, #22
 801bf92:	d4f7      	bmi.n	801bf84 <_vfiprintf_r+0x44>
 801bf94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bf96:	f7fc ff59 	bl	8018e4c <__retarget_lock_release_recursive>
 801bf9a:	e7f3      	b.n	801bf84 <_vfiprintf_r+0x44>
 801bf9c:	2300      	movs	r3, #0
 801bf9e:	9309      	str	r3, [sp, #36]	; 0x24
 801bfa0:	2320      	movs	r3, #32
 801bfa2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801bfa6:	f8cd 800c 	str.w	r8, [sp, #12]
 801bfaa:	2330      	movs	r3, #48	; 0x30
 801bfac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801c160 <_vfiprintf_r+0x220>
 801bfb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801bfb4:	f04f 0901 	mov.w	r9, #1
 801bfb8:	4623      	mov	r3, r4
 801bfba:	469a      	mov	sl, r3
 801bfbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bfc0:	b10a      	cbz	r2, 801bfc6 <_vfiprintf_r+0x86>
 801bfc2:	2a25      	cmp	r2, #37	; 0x25
 801bfc4:	d1f9      	bne.n	801bfba <_vfiprintf_r+0x7a>
 801bfc6:	ebba 0b04 	subs.w	fp, sl, r4
 801bfca:	d00b      	beq.n	801bfe4 <_vfiprintf_r+0xa4>
 801bfcc:	465b      	mov	r3, fp
 801bfce:	4622      	mov	r2, r4
 801bfd0:	4629      	mov	r1, r5
 801bfd2:	4630      	mov	r0, r6
 801bfd4:	f7ff ffa2 	bl	801bf1c <__sfputs_r>
 801bfd8:	3001      	adds	r0, #1
 801bfda:	f000 80a9 	beq.w	801c130 <_vfiprintf_r+0x1f0>
 801bfde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bfe0:	445a      	add	r2, fp
 801bfe2:	9209      	str	r2, [sp, #36]	; 0x24
 801bfe4:	f89a 3000 	ldrb.w	r3, [sl]
 801bfe8:	2b00      	cmp	r3, #0
 801bfea:	f000 80a1 	beq.w	801c130 <_vfiprintf_r+0x1f0>
 801bfee:	2300      	movs	r3, #0
 801bff0:	f04f 32ff 	mov.w	r2, #4294967295
 801bff4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bff8:	f10a 0a01 	add.w	sl, sl, #1
 801bffc:	9304      	str	r3, [sp, #16]
 801bffe:	9307      	str	r3, [sp, #28]
 801c000:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c004:	931a      	str	r3, [sp, #104]	; 0x68
 801c006:	4654      	mov	r4, sl
 801c008:	2205      	movs	r2, #5
 801c00a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c00e:	4854      	ldr	r0, [pc, #336]	; (801c160 <_vfiprintf_r+0x220>)
 801c010:	f7e4 f98e 	bl	8000330 <memchr>
 801c014:	9a04      	ldr	r2, [sp, #16]
 801c016:	b9d8      	cbnz	r0, 801c050 <_vfiprintf_r+0x110>
 801c018:	06d1      	lsls	r1, r2, #27
 801c01a:	bf44      	itt	mi
 801c01c:	2320      	movmi	r3, #32
 801c01e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c022:	0713      	lsls	r3, r2, #28
 801c024:	bf44      	itt	mi
 801c026:	232b      	movmi	r3, #43	; 0x2b
 801c028:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c02c:	f89a 3000 	ldrb.w	r3, [sl]
 801c030:	2b2a      	cmp	r3, #42	; 0x2a
 801c032:	d015      	beq.n	801c060 <_vfiprintf_r+0x120>
 801c034:	9a07      	ldr	r2, [sp, #28]
 801c036:	4654      	mov	r4, sl
 801c038:	2000      	movs	r0, #0
 801c03a:	f04f 0c0a 	mov.w	ip, #10
 801c03e:	4621      	mov	r1, r4
 801c040:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c044:	3b30      	subs	r3, #48	; 0x30
 801c046:	2b09      	cmp	r3, #9
 801c048:	d94d      	bls.n	801c0e6 <_vfiprintf_r+0x1a6>
 801c04a:	b1b0      	cbz	r0, 801c07a <_vfiprintf_r+0x13a>
 801c04c:	9207      	str	r2, [sp, #28]
 801c04e:	e014      	b.n	801c07a <_vfiprintf_r+0x13a>
 801c050:	eba0 0308 	sub.w	r3, r0, r8
 801c054:	fa09 f303 	lsl.w	r3, r9, r3
 801c058:	4313      	orrs	r3, r2
 801c05a:	9304      	str	r3, [sp, #16]
 801c05c:	46a2      	mov	sl, r4
 801c05e:	e7d2      	b.n	801c006 <_vfiprintf_r+0xc6>
 801c060:	9b03      	ldr	r3, [sp, #12]
 801c062:	1d19      	adds	r1, r3, #4
 801c064:	681b      	ldr	r3, [r3, #0]
 801c066:	9103      	str	r1, [sp, #12]
 801c068:	2b00      	cmp	r3, #0
 801c06a:	bfbb      	ittet	lt
 801c06c:	425b      	neglt	r3, r3
 801c06e:	f042 0202 	orrlt.w	r2, r2, #2
 801c072:	9307      	strge	r3, [sp, #28]
 801c074:	9307      	strlt	r3, [sp, #28]
 801c076:	bfb8      	it	lt
 801c078:	9204      	strlt	r2, [sp, #16]
 801c07a:	7823      	ldrb	r3, [r4, #0]
 801c07c:	2b2e      	cmp	r3, #46	; 0x2e
 801c07e:	d10c      	bne.n	801c09a <_vfiprintf_r+0x15a>
 801c080:	7863      	ldrb	r3, [r4, #1]
 801c082:	2b2a      	cmp	r3, #42	; 0x2a
 801c084:	d134      	bne.n	801c0f0 <_vfiprintf_r+0x1b0>
 801c086:	9b03      	ldr	r3, [sp, #12]
 801c088:	1d1a      	adds	r2, r3, #4
 801c08a:	681b      	ldr	r3, [r3, #0]
 801c08c:	9203      	str	r2, [sp, #12]
 801c08e:	2b00      	cmp	r3, #0
 801c090:	bfb8      	it	lt
 801c092:	f04f 33ff 	movlt.w	r3, #4294967295
 801c096:	3402      	adds	r4, #2
 801c098:	9305      	str	r3, [sp, #20]
 801c09a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801c170 <_vfiprintf_r+0x230>
 801c09e:	7821      	ldrb	r1, [r4, #0]
 801c0a0:	2203      	movs	r2, #3
 801c0a2:	4650      	mov	r0, sl
 801c0a4:	f7e4 f944 	bl	8000330 <memchr>
 801c0a8:	b138      	cbz	r0, 801c0ba <_vfiprintf_r+0x17a>
 801c0aa:	9b04      	ldr	r3, [sp, #16]
 801c0ac:	eba0 000a 	sub.w	r0, r0, sl
 801c0b0:	2240      	movs	r2, #64	; 0x40
 801c0b2:	4082      	lsls	r2, r0
 801c0b4:	4313      	orrs	r3, r2
 801c0b6:	3401      	adds	r4, #1
 801c0b8:	9304      	str	r3, [sp, #16]
 801c0ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c0be:	4829      	ldr	r0, [pc, #164]	; (801c164 <_vfiprintf_r+0x224>)
 801c0c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c0c4:	2206      	movs	r2, #6
 801c0c6:	f7e4 f933 	bl	8000330 <memchr>
 801c0ca:	2800      	cmp	r0, #0
 801c0cc:	d03f      	beq.n	801c14e <_vfiprintf_r+0x20e>
 801c0ce:	4b26      	ldr	r3, [pc, #152]	; (801c168 <_vfiprintf_r+0x228>)
 801c0d0:	bb1b      	cbnz	r3, 801c11a <_vfiprintf_r+0x1da>
 801c0d2:	9b03      	ldr	r3, [sp, #12]
 801c0d4:	3307      	adds	r3, #7
 801c0d6:	f023 0307 	bic.w	r3, r3, #7
 801c0da:	3308      	adds	r3, #8
 801c0dc:	9303      	str	r3, [sp, #12]
 801c0de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c0e0:	443b      	add	r3, r7
 801c0e2:	9309      	str	r3, [sp, #36]	; 0x24
 801c0e4:	e768      	b.n	801bfb8 <_vfiprintf_r+0x78>
 801c0e6:	fb0c 3202 	mla	r2, ip, r2, r3
 801c0ea:	460c      	mov	r4, r1
 801c0ec:	2001      	movs	r0, #1
 801c0ee:	e7a6      	b.n	801c03e <_vfiprintf_r+0xfe>
 801c0f0:	2300      	movs	r3, #0
 801c0f2:	3401      	adds	r4, #1
 801c0f4:	9305      	str	r3, [sp, #20]
 801c0f6:	4619      	mov	r1, r3
 801c0f8:	f04f 0c0a 	mov.w	ip, #10
 801c0fc:	4620      	mov	r0, r4
 801c0fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c102:	3a30      	subs	r2, #48	; 0x30
 801c104:	2a09      	cmp	r2, #9
 801c106:	d903      	bls.n	801c110 <_vfiprintf_r+0x1d0>
 801c108:	2b00      	cmp	r3, #0
 801c10a:	d0c6      	beq.n	801c09a <_vfiprintf_r+0x15a>
 801c10c:	9105      	str	r1, [sp, #20]
 801c10e:	e7c4      	b.n	801c09a <_vfiprintf_r+0x15a>
 801c110:	fb0c 2101 	mla	r1, ip, r1, r2
 801c114:	4604      	mov	r4, r0
 801c116:	2301      	movs	r3, #1
 801c118:	e7f0      	b.n	801c0fc <_vfiprintf_r+0x1bc>
 801c11a:	ab03      	add	r3, sp, #12
 801c11c:	9300      	str	r3, [sp, #0]
 801c11e:	462a      	mov	r2, r5
 801c120:	4b12      	ldr	r3, [pc, #72]	; (801c16c <_vfiprintf_r+0x22c>)
 801c122:	a904      	add	r1, sp, #16
 801c124:	4630      	mov	r0, r6
 801c126:	f7fb ff3f 	bl	8017fa8 <_printf_float>
 801c12a:	4607      	mov	r7, r0
 801c12c:	1c78      	adds	r0, r7, #1
 801c12e:	d1d6      	bne.n	801c0de <_vfiprintf_r+0x19e>
 801c130:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c132:	07d9      	lsls	r1, r3, #31
 801c134:	d405      	bmi.n	801c142 <_vfiprintf_r+0x202>
 801c136:	89ab      	ldrh	r3, [r5, #12]
 801c138:	059a      	lsls	r2, r3, #22
 801c13a:	d402      	bmi.n	801c142 <_vfiprintf_r+0x202>
 801c13c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c13e:	f7fc fe85 	bl	8018e4c <__retarget_lock_release_recursive>
 801c142:	89ab      	ldrh	r3, [r5, #12]
 801c144:	065b      	lsls	r3, r3, #25
 801c146:	f53f af1d 	bmi.w	801bf84 <_vfiprintf_r+0x44>
 801c14a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c14c:	e71c      	b.n	801bf88 <_vfiprintf_r+0x48>
 801c14e:	ab03      	add	r3, sp, #12
 801c150:	9300      	str	r3, [sp, #0]
 801c152:	462a      	mov	r2, r5
 801c154:	4b05      	ldr	r3, [pc, #20]	; (801c16c <_vfiprintf_r+0x22c>)
 801c156:	a904      	add	r1, sp, #16
 801c158:	4630      	mov	r0, r6
 801c15a:	f7fc f9ad 	bl	80184b8 <_printf_i>
 801c15e:	e7e4      	b.n	801c12a <_vfiprintf_r+0x1ea>
 801c160:	0801cbc9 	.word	0x0801cbc9
 801c164:	0801cbd3 	.word	0x0801cbd3
 801c168:	08017fa9 	.word	0x08017fa9
 801c16c:	0801bf1d 	.word	0x0801bf1d
 801c170:	0801cbcf 	.word	0x0801cbcf

0801c174 <__swbuf_r>:
 801c174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c176:	460e      	mov	r6, r1
 801c178:	4614      	mov	r4, r2
 801c17a:	4605      	mov	r5, r0
 801c17c:	b118      	cbz	r0, 801c186 <__swbuf_r+0x12>
 801c17e:	6a03      	ldr	r3, [r0, #32]
 801c180:	b90b      	cbnz	r3, 801c186 <__swbuf_r+0x12>
 801c182:	f7fc fd4b 	bl	8018c1c <__sinit>
 801c186:	69a3      	ldr	r3, [r4, #24]
 801c188:	60a3      	str	r3, [r4, #8]
 801c18a:	89a3      	ldrh	r3, [r4, #12]
 801c18c:	071a      	lsls	r2, r3, #28
 801c18e:	d525      	bpl.n	801c1dc <__swbuf_r+0x68>
 801c190:	6923      	ldr	r3, [r4, #16]
 801c192:	b31b      	cbz	r3, 801c1dc <__swbuf_r+0x68>
 801c194:	6823      	ldr	r3, [r4, #0]
 801c196:	6922      	ldr	r2, [r4, #16]
 801c198:	1a98      	subs	r0, r3, r2
 801c19a:	6963      	ldr	r3, [r4, #20]
 801c19c:	b2f6      	uxtb	r6, r6
 801c19e:	4283      	cmp	r3, r0
 801c1a0:	4637      	mov	r7, r6
 801c1a2:	dc04      	bgt.n	801c1ae <__swbuf_r+0x3a>
 801c1a4:	4621      	mov	r1, r4
 801c1a6:	4628      	mov	r0, r5
 801c1a8:	f7ff fa38 	bl	801b61c <_fflush_r>
 801c1ac:	b9e0      	cbnz	r0, 801c1e8 <__swbuf_r+0x74>
 801c1ae:	68a3      	ldr	r3, [r4, #8]
 801c1b0:	3b01      	subs	r3, #1
 801c1b2:	60a3      	str	r3, [r4, #8]
 801c1b4:	6823      	ldr	r3, [r4, #0]
 801c1b6:	1c5a      	adds	r2, r3, #1
 801c1b8:	6022      	str	r2, [r4, #0]
 801c1ba:	701e      	strb	r6, [r3, #0]
 801c1bc:	6962      	ldr	r2, [r4, #20]
 801c1be:	1c43      	adds	r3, r0, #1
 801c1c0:	429a      	cmp	r2, r3
 801c1c2:	d004      	beq.n	801c1ce <__swbuf_r+0x5a>
 801c1c4:	89a3      	ldrh	r3, [r4, #12]
 801c1c6:	07db      	lsls	r3, r3, #31
 801c1c8:	d506      	bpl.n	801c1d8 <__swbuf_r+0x64>
 801c1ca:	2e0a      	cmp	r6, #10
 801c1cc:	d104      	bne.n	801c1d8 <__swbuf_r+0x64>
 801c1ce:	4621      	mov	r1, r4
 801c1d0:	4628      	mov	r0, r5
 801c1d2:	f7ff fa23 	bl	801b61c <_fflush_r>
 801c1d6:	b938      	cbnz	r0, 801c1e8 <__swbuf_r+0x74>
 801c1d8:	4638      	mov	r0, r7
 801c1da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c1dc:	4621      	mov	r1, r4
 801c1de:	4628      	mov	r0, r5
 801c1e0:	f000 f806 	bl	801c1f0 <__swsetup_r>
 801c1e4:	2800      	cmp	r0, #0
 801c1e6:	d0d5      	beq.n	801c194 <__swbuf_r+0x20>
 801c1e8:	f04f 37ff 	mov.w	r7, #4294967295
 801c1ec:	e7f4      	b.n	801c1d8 <__swbuf_r+0x64>
	...

0801c1f0 <__swsetup_r>:
 801c1f0:	b538      	push	{r3, r4, r5, lr}
 801c1f2:	4b2a      	ldr	r3, [pc, #168]	; (801c29c <__swsetup_r+0xac>)
 801c1f4:	4605      	mov	r5, r0
 801c1f6:	6818      	ldr	r0, [r3, #0]
 801c1f8:	460c      	mov	r4, r1
 801c1fa:	b118      	cbz	r0, 801c204 <__swsetup_r+0x14>
 801c1fc:	6a03      	ldr	r3, [r0, #32]
 801c1fe:	b90b      	cbnz	r3, 801c204 <__swsetup_r+0x14>
 801c200:	f7fc fd0c 	bl	8018c1c <__sinit>
 801c204:	89a3      	ldrh	r3, [r4, #12]
 801c206:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c20a:	0718      	lsls	r0, r3, #28
 801c20c:	d422      	bmi.n	801c254 <__swsetup_r+0x64>
 801c20e:	06d9      	lsls	r1, r3, #27
 801c210:	d407      	bmi.n	801c222 <__swsetup_r+0x32>
 801c212:	2309      	movs	r3, #9
 801c214:	602b      	str	r3, [r5, #0]
 801c216:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c21a:	81a3      	strh	r3, [r4, #12]
 801c21c:	f04f 30ff 	mov.w	r0, #4294967295
 801c220:	e034      	b.n	801c28c <__swsetup_r+0x9c>
 801c222:	0758      	lsls	r0, r3, #29
 801c224:	d512      	bpl.n	801c24c <__swsetup_r+0x5c>
 801c226:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c228:	b141      	cbz	r1, 801c23c <__swsetup_r+0x4c>
 801c22a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c22e:	4299      	cmp	r1, r3
 801c230:	d002      	beq.n	801c238 <__swsetup_r+0x48>
 801c232:	4628      	mov	r0, r5
 801c234:	f7fd fc14 	bl	8019a60 <_free_r>
 801c238:	2300      	movs	r3, #0
 801c23a:	6363      	str	r3, [r4, #52]	; 0x34
 801c23c:	89a3      	ldrh	r3, [r4, #12]
 801c23e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c242:	81a3      	strh	r3, [r4, #12]
 801c244:	2300      	movs	r3, #0
 801c246:	6063      	str	r3, [r4, #4]
 801c248:	6923      	ldr	r3, [r4, #16]
 801c24a:	6023      	str	r3, [r4, #0]
 801c24c:	89a3      	ldrh	r3, [r4, #12]
 801c24e:	f043 0308 	orr.w	r3, r3, #8
 801c252:	81a3      	strh	r3, [r4, #12]
 801c254:	6923      	ldr	r3, [r4, #16]
 801c256:	b94b      	cbnz	r3, 801c26c <__swsetup_r+0x7c>
 801c258:	89a3      	ldrh	r3, [r4, #12]
 801c25a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c25e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c262:	d003      	beq.n	801c26c <__swsetup_r+0x7c>
 801c264:	4621      	mov	r1, r4
 801c266:	4628      	mov	r0, r5
 801c268:	f000 f884 	bl	801c374 <__smakebuf_r>
 801c26c:	89a0      	ldrh	r0, [r4, #12]
 801c26e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c272:	f010 0301 	ands.w	r3, r0, #1
 801c276:	d00a      	beq.n	801c28e <__swsetup_r+0x9e>
 801c278:	2300      	movs	r3, #0
 801c27a:	60a3      	str	r3, [r4, #8]
 801c27c:	6963      	ldr	r3, [r4, #20]
 801c27e:	425b      	negs	r3, r3
 801c280:	61a3      	str	r3, [r4, #24]
 801c282:	6923      	ldr	r3, [r4, #16]
 801c284:	b943      	cbnz	r3, 801c298 <__swsetup_r+0xa8>
 801c286:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c28a:	d1c4      	bne.n	801c216 <__swsetup_r+0x26>
 801c28c:	bd38      	pop	{r3, r4, r5, pc}
 801c28e:	0781      	lsls	r1, r0, #30
 801c290:	bf58      	it	pl
 801c292:	6963      	ldrpl	r3, [r4, #20]
 801c294:	60a3      	str	r3, [r4, #8]
 801c296:	e7f4      	b.n	801c282 <__swsetup_r+0x92>
 801c298:	2000      	movs	r0, #0
 801c29a:	e7f7      	b.n	801c28c <__swsetup_r+0x9c>
 801c29c:	24000184 	.word	0x24000184

0801c2a0 <_raise_r>:
 801c2a0:	291f      	cmp	r1, #31
 801c2a2:	b538      	push	{r3, r4, r5, lr}
 801c2a4:	4604      	mov	r4, r0
 801c2a6:	460d      	mov	r5, r1
 801c2a8:	d904      	bls.n	801c2b4 <_raise_r+0x14>
 801c2aa:	2316      	movs	r3, #22
 801c2ac:	6003      	str	r3, [r0, #0]
 801c2ae:	f04f 30ff 	mov.w	r0, #4294967295
 801c2b2:	bd38      	pop	{r3, r4, r5, pc}
 801c2b4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801c2b6:	b112      	cbz	r2, 801c2be <_raise_r+0x1e>
 801c2b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c2bc:	b94b      	cbnz	r3, 801c2d2 <_raise_r+0x32>
 801c2be:	4620      	mov	r0, r4
 801c2c0:	f000 f830 	bl	801c324 <_getpid_r>
 801c2c4:	462a      	mov	r2, r5
 801c2c6:	4601      	mov	r1, r0
 801c2c8:	4620      	mov	r0, r4
 801c2ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c2ce:	f000 b817 	b.w	801c300 <_kill_r>
 801c2d2:	2b01      	cmp	r3, #1
 801c2d4:	d00a      	beq.n	801c2ec <_raise_r+0x4c>
 801c2d6:	1c59      	adds	r1, r3, #1
 801c2d8:	d103      	bne.n	801c2e2 <_raise_r+0x42>
 801c2da:	2316      	movs	r3, #22
 801c2dc:	6003      	str	r3, [r0, #0]
 801c2de:	2001      	movs	r0, #1
 801c2e0:	e7e7      	b.n	801c2b2 <_raise_r+0x12>
 801c2e2:	2400      	movs	r4, #0
 801c2e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801c2e8:	4628      	mov	r0, r5
 801c2ea:	4798      	blx	r3
 801c2ec:	2000      	movs	r0, #0
 801c2ee:	e7e0      	b.n	801c2b2 <_raise_r+0x12>

0801c2f0 <raise>:
 801c2f0:	4b02      	ldr	r3, [pc, #8]	; (801c2fc <raise+0xc>)
 801c2f2:	4601      	mov	r1, r0
 801c2f4:	6818      	ldr	r0, [r3, #0]
 801c2f6:	f7ff bfd3 	b.w	801c2a0 <_raise_r>
 801c2fa:	bf00      	nop
 801c2fc:	24000184 	.word	0x24000184

0801c300 <_kill_r>:
 801c300:	b538      	push	{r3, r4, r5, lr}
 801c302:	4d07      	ldr	r5, [pc, #28]	; (801c320 <_kill_r+0x20>)
 801c304:	2300      	movs	r3, #0
 801c306:	4604      	mov	r4, r0
 801c308:	4608      	mov	r0, r1
 801c30a:	4611      	mov	r1, r2
 801c30c:	602b      	str	r3, [r5, #0]
 801c30e:	f7e7 fdf5 	bl	8003efc <_kill>
 801c312:	1c43      	adds	r3, r0, #1
 801c314:	d102      	bne.n	801c31c <_kill_r+0x1c>
 801c316:	682b      	ldr	r3, [r5, #0]
 801c318:	b103      	cbz	r3, 801c31c <_kill_r+0x1c>
 801c31a:	6023      	str	r3, [r4, #0]
 801c31c:	bd38      	pop	{r3, r4, r5, pc}
 801c31e:	bf00      	nop
 801c320:	2400336c 	.word	0x2400336c

0801c324 <_getpid_r>:
 801c324:	f7e7 bde2 	b.w	8003eec <_getpid>

0801c328 <__swhatbuf_r>:
 801c328:	b570      	push	{r4, r5, r6, lr}
 801c32a:	460c      	mov	r4, r1
 801c32c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c330:	2900      	cmp	r1, #0
 801c332:	b096      	sub	sp, #88	; 0x58
 801c334:	4615      	mov	r5, r2
 801c336:	461e      	mov	r6, r3
 801c338:	da0d      	bge.n	801c356 <__swhatbuf_r+0x2e>
 801c33a:	89a3      	ldrh	r3, [r4, #12]
 801c33c:	f013 0f80 	tst.w	r3, #128	; 0x80
 801c340:	f04f 0100 	mov.w	r1, #0
 801c344:	bf0c      	ite	eq
 801c346:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801c34a:	2340      	movne	r3, #64	; 0x40
 801c34c:	2000      	movs	r0, #0
 801c34e:	6031      	str	r1, [r6, #0]
 801c350:	602b      	str	r3, [r5, #0]
 801c352:	b016      	add	sp, #88	; 0x58
 801c354:	bd70      	pop	{r4, r5, r6, pc}
 801c356:	466a      	mov	r2, sp
 801c358:	f000 f848 	bl	801c3ec <_fstat_r>
 801c35c:	2800      	cmp	r0, #0
 801c35e:	dbec      	blt.n	801c33a <__swhatbuf_r+0x12>
 801c360:	9901      	ldr	r1, [sp, #4]
 801c362:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801c366:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801c36a:	4259      	negs	r1, r3
 801c36c:	4159      	adcs	r1, r3
 801c36e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c372:	e7eb      	b.n	801c34c <__swhatbuf_r+0x24>

0801c374 <__smakebuf_r>:
 801c374:	898b      	ldrh	r3, [r1, #12]
 801c376:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c378:	079d      	lsls	r5, r3, #30
 801c37a:	4606      	mov	r6, r0
 801c37c:	460c      	mov	r4, r1
 801c37e:	d507      	bpl.n	801c390 <__smakebuf_r+0x1c>
 801c380:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c384:	6023      	str	r3, [r4, #0]
 801c386:	6123      	str	r3, [r4, #16]
 801c388:	2301      	movs	r3, #1
 801c38a:	6163      	str	r3, [r4, #20]
 801c38c:	b002      	add	sp, #8
 801c38e:	bd70      	pop	{r4, r5, r6, pc}
 801c390:	ab01      	add	r3, sp, #4
 801c392:	466a      	mov	r2, sp
 801c394:	f7ff ffc8 	bl	801c328 <__swhatbuf_r>
 801c398:	9900      	ldr	r1, [sp, #0]
 801c39a:	4605      	mov	r5, r0
 801c39c:	4630      	mov	r0, r6
 801c39e:	f7fd fbd3 	bl	8019b48 <_malloc_r>
 801c3a2:	b948      	cbnz	r0, 801c3b8 <__smakebuf_r+0x44>
 801c3a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c3a8:	059a      	lsls	r2, r3, #22
 801c3aa:	d4ef      	bmi.n	801c38c <__smakebuf_r+0x18>
 801c3ac:	f023 0303 	bic.w	r3, r3, #3
 801c3b0:	f043 0302 	orr.w	r3, r3, #2
 801c3b4:	81a3      	strh	r3, [r4, #12]
 801c3b6:	e7e3      	b.n	801c380 <__smakebuf_r+0xc>
 801c3b8:	89a3      	ldrh	r3, [r4, #12]
 801c3ba:	6020      	str	r0, [r4, #0]
 801c3bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c3c0:	81a3      	strh	r3, [r4, #12]
 801c3c2:	9b00      	ldr	r3, [sp, #0]
 801c3c4:	6163      	str	r3, [r4, #20]
 801c3c6:	9b01      	ldr	r3, [sp, #4]
 801c3c8:	6120      	str	r0, [r4, #16]
 801c3ca:	b15b      	cbz	r3, 801c3e4 <__smakebuf_r+0x70>
 801c3cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c3d0:	4630      	mov	r0, r6
 801c3d2:	f000 f81d 	bl	801c410 <_isatty_r>
 801c3d6:	b128      	cbz	r0, 801c3e4 <__smakebuf_r+0x70>
 801c3d8:	89a3      	ldrh	r3, [r4, #12]
 801c3da:	f023 0303 	bic.w	r3, r3, #3
 801c3de:	f043 0301 	orr.w	r3, r3, #1
 801c3e2:	81a3      	strh	r3, [r4, #12]
 801c3e4:	89a3      	ldrh	r3, [r4, #12]
 801c3e6:	431d      	orrs	r5, r3
 801c3e8:	81a5      	strh	r5, [r4, #12]
 801c3ea:	e7cf      	b.n	801c38c <__smakebuf_r+0x18>

0801c3ec <_fstat_r>:
 801c3ec:	b538      	push	{r3, r4, r5, lr}
 801c3ee:	4d07      	ldr	r5, [pc, #28]	; (801c40c <_fstat_r+0x20>)
 801c3f0:	2300      	movs	r3, #0
 801c3f2:	4604      	mov	r4, r0
 801c3f4:	4608      	mov	r0, r1
 801c3f6:	4611      	mov	r1, r2
 801c3f8:	602b      	str	r3, [r5, #0]
 801c3fa:	f7e7 fdde 	bl	8003fba <_fstat>
 801c3fe:	1c43      	adds	r3, r0, #1
 801c400:	d102      	bne.n	801c408 <_fstat_r+0x1c>
 801c402:	682b      	ldr	r3, [r5, #0]
 801c404:	b103      	cbz	r3, 801c408 <_fstat_r+0x1c>
 801c406:	6023      	str	r3, [r4, #0]
 801c408:	bd38      	pop	{r3, r4, r5, pc}
 801c40a:	bf00      	nop
 801c40c:	2400336c 	.word	0x2400336c

0801c410 <_isatty_r>:
 801c410:	b538      	push	{r3, r4, r5, lr}
 801c412:	4d06      	ldr	r5, [pc, #24]	; (801c42c <_isatty_r+0x1c>)
 801c414:	2300      	movs	r3, #0
 801c416:	4604      	mov	r4, r0
 801c418:	4608      	mov	r0, r1
 801c41a:	602b      	str	r3, [r5, #0]
 801c41c:	f7e7 fddd 	bl	8003fda <_isatty>
 801c420:	1c43      	adds	r3, r0, #1
 801c422:	d102      	bne.n	801c42a <_isatty_r+0x1a>
 801c424:	682b      	ldr	r3, [r5, #0]
 801c426:	b103      	cbz	r3, 801c42a <_isatty_r+0x1a>
 801c428:	6023      	str	r3, [r4, #0]
 801c42a:	bd38      	pop	{r3, r4, r5, pc}
 801c42c:	2400336c 	.word	0x2400336c

0801c430 <_init>:
 801c430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c432:	bf00      	nop
 801c434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c436:	bc08      	pop	{r3}
 801c438:	469e      	mov	lr, r3
 801c43a:	4770      	bx	lr

0801c43c <_fini>:
 801c43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c43e:	bf00      	nop
 801c440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c442:	bc08      	pop	{r3}
 801c444:	469e      	mov	lr, r3
 801c446:	4770      	bx	lr
