
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017fcc  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  0801829c  0801829c  0002829c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018628  08018628  00028628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018630  08018630  00028630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08018634  08018634  00028634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000150  24000000  08018638  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000031f4  24000150  08018788  00030150  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  24003344  08018788  00033344  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030150  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0003017e  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003574c  00000000  00000000  000301c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00006245  00000000  00000000  0006590d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002ae8  00000000  00000000  0006bb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000214a  00000000  00000000  0006e640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003dffd  00000000  00000000  0007078a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003a8ec  00000000  00000000  000ae787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017d42a  00000000  00000000  000e9073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000c2c0  00000000  00000000  002664a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  00272760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000150 	.word	0x24000150
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08018284 	.word	0x08018284

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000154 	.word	0x24000154
 800030c:	08018284 	.word	0x08018284

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b970 	b.w	80006d8 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9e08      	ldr	r6, [sp, #32]
 8000416:	460d      	mov	r5, r1
 8000418:	4604      	mov	r4, r0
 800041a:	460f      	mov	r7, r1
 800041c:	2b00      	cmp	r3, #0
 800041e:	d14a      	bne.n	80004b6 <__udivmoddi4+0xa6>
 8000420:	428a      	cmp	r2, r1
 8000422:	4694      	mov	ip, r2
 8000424:	d965      	bls.n	80004f2 <__udivmoddi4+0xe2>
 8000426:	fab2 f382 	clz	r3, r2
 800042a:	b143      	cbz	r3, 800043e <__udivmoddi4+0x2e>
 800042c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000430:	f1c3 0220 	rsb	r2, r3, #32
 8000434:	409f      	lsls	r7, r3
 8000436:	fa20 f202 	lsr.w	r2, r0, r2
 800043a:	4317      	orrs	r7, r2
 800043c:	409c      	lsls	r4, r3
 800043e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000442:	fa1f f58c 	uxth.w	r5, ip
 8000446:	fbb7 f1fe 	udiv	r1, r7, lr
 800044a:	0c22      	lsrs	r2, r4, #16
 800044c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000450:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000454:	fb01 f005 	mul.w	r0, r1, r5
 8000458:	4290      	cmp	r0, r2
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x62>
 800045c:	eb1c 0202 	adds.w	r2, ip, r2
 8000460:	f101 37ff 	add.w	r7, r1, #4294967295
 8000464:	f080 811c 	bcs.w	80006a0 <__udivmoddi4+0x290>
 8000468:	4290      	cmp	r0, r2
 800046a:	f240 8119 	bls.w	80006a0 <__udivmoddi4+0x290>
 800046e:	3902      	subs	r1, #2
 8000470:	4462      	add	r2, ip
 8000472:	1a12      	subs	r2, r2, r0
 8000474:	b2a4      	uxth	r4, r4
 8000476:	fbb2 f0fe 	udiv	r0, r2, lr
 800047a:	fb0e 2210 	mls	r2, lr, r0, r2
 800047e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000482:	fb00 f505 	mul.w	r5, r0, r5
 8000486:	42a5      	cmp	r5, r4
 8000488:	d90a      	bls.n	80004a0 <__udivmoddi4+0x90>
 800048a:	eb1c 0404 	adds.w	r4, ip, r4
 800048e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000492:	f080 8107 	bcs.w	80006a4 <__udivmoddi4+0x294>
 8000496:	42a5      	cmp	r5, r4
 8000498:	f240 8104 	bls.w	80006a4 <__udivmoddi4+0x294>
 800049c:	4464      	add	r4, ip
 800049e:	3802      	subs	r0, #2
 80004a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80004a4:	1b64      	subs	r4, r4, r5
 80004a6:	2100      	movs	r1, #0
 80004a8:	b11e      	cbz	r6, 80004b2 <__udivmoddi4+0xa2>
 80004aa:	40dc      	lsrs	r4, r3
 80004ac:	2300      	movs	r3, #0
 80004ae:	e9c6 4300 	strd	r4, r3, [r6]
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0xbc>
 80004ba:	2e00      	cmp	r6, #0
 80004bc:	f000 80ed 	beq.w	800069a <__udivmoddi4+0x28a>
 80004c0:	2100      	movs	r1, #0
 80004c2:	e9c6 0500 	strd	r0, r5, [r6]
 80004c6:	4608      	mov	r0, r1
 80004c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004cc:	fab3 f183 	clz	r1, r3
 80004d0:	2900      	cmp	r1, #0
 80004d2:	d149      	bne.n	8000568 <__udivmoddi4+0x158>
 80004d4:	42ab      	cmp	r3, r5
 80004d6:	d302      	bcc.n	80004de <__udivmoddi4+0xce>
 80004d8:	4282      	cmp	r2, r0
 80004da:	f200 80f8 	bhi.w	80006ce <__udivmoddi4+0x2be>
 80004de:	1a84      	subs	r4, r0, r2
 80004e0:	eb65 0203 	sbc.w	r2, r5, r3
 80004e4:	2001      	movs	r0, #1
 80004e6:	4617      	mov	r7, r2
 80004e8:	2e00      	cmp	r6, #0
 80004ea:	d0e2      	beq.n	80004b2 <__udivmoddi4+0xa2>
 80004ec:	e9c6 4700 	strd	r4, r7, [r6]
 80004f0:	e7df      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004f2:	b902      	cbnz	r2, 80004f6 <__udivmoddi4+0xe6>
 80004f4:	deff      	udf	#255	; 0xff
 80004f6:	fab2 f382 	clz	r3, r2
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	f040 8090 	bne.w	8000620 <__udivmoddi4+0x210>
 8000500:	1a8a      	subs	r2, r1, r2
 8000502:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000506:	fa1f fe8c 	uxth.w	lr, ip
 800050a:	2101      	movs	r1, #1
 800050c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000510:	fb07 2015 	mls	r0, r7, r5, r2
 8000514:	0c22      	lsrs	r2, r4, #16
 8000516:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800051a:	fb0e f005 	mul.w	r0, lr, r5
 800051e:	4290      	cmp	r0, r2
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x124>
 8000522:	eb1c 0202 	adds.w	r2, ip, r2
 8000526:	f105 38ff 	add.w	r8, r5, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x122>
 800052c:	4290      	cmp	r0, r2
 800052e:	f200 80cb 	bhi.w	80006c8 <__udivmoddi4+0x2b8>
 8000532:	4645      	mov	r5, r8
 8000534:	1a12      	subs	r2, r2, r0
 8000536:	b2a4      	uxth	r4, r4
 8000538:	fbb2 f0f7 	udiv	r0, r2, r7
 800053c:	fb07 2210 	mls	r2, r7, r0, r2
 8000540:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000544:	fb0e fe00 	mul.w	lr, lr, r0
 8000548:	45a6      	cmp	lr, r4
 800054a:	d908      	bls.n	800055e <__udivmoddi4+0x14e>
 800054c:	eb1c 0404 	adds.w	r4, ip, r4
 8000550:	f100 32ff 	add.w	r2, r0, #4294967295
 8000554:	d202      	bcs.n	800055c <__udivmoddi4+0x14c>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f200 80bb 	bhi.w	80006d2 <__udivmoddi4+0x2c2>
 800055c:	4610      	mov	r0, r2
 800055e:	eba4 040e 	sub.w	r4, r4, lr
 8000562:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000566:	e79f      	b.n	80004a8 <__udivmoddi4+0x98>
 8000568:	f1c1 0720 	rsb	r7, r1, #32
 800056c:	408b      	lsls	r3, r1
 800056e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000572:	ea4c 0c03 	orr.w	ip, ip, r3
 8000576:	fa05 f401 	lsl.w	r4, r5, r1
 800057a:	fa20 f307 	lsr.w	r3, r0, r7
 800057e:	40fd      	lsrs	r5, r7
 8000580:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000584:	4323      	orrs	r3, r4
 8000586:	fbb5 f8f9 	udiv	r8, r5, r9
 800058a:	fa1f fe8c 	uxth.w	lr, ip
 800058e:	fb09 5518 	mls	r5, r9, r8, r5
 8000592:	0c1c      	lsrs	r4, r3, #16
 8000594:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000598:	fb08 f50e 	mul.w	r5, r8, lr
 800059c:	42a5      	cmp	r5, r4
 800059e:	fa02 f201 	lsl.w	r2, r2, r1
 80005a2:	fa00 f001 	lsl.w	r0, r0, r1
 80005a6:	d90b      	bls.n	80005c0 <__udivmoddi4+0x1b0>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80005b0:	f080 8088 	bcs.w	80006c4 <__udivmoddi4+0x2b4>
 80005b4:	42a5      	cmp	r5, r4
 80005b6:	f240 8085 	bls.w	80006c4 <__udivmoddi4+0x2b4>
 80005ba:	f1a8 0802 	sub.w	r8, r8, #2
 80005be:	4464      	add	r4, ip
 80005c0:	1b64      	subs	r4, r4, r5
 80005c2:	b29d      	uxth	r5, r3
 80005c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80005c8:	fb09 4413 	mls	r4, r9, r3, r4
 80005cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005d4:	45a6      	cmp	lr, r4
 80005d6:	d908      	bls.n	80005ea <__udivmoddi4+0x1da>
 80005d8:	eb1c 0404 	adds.w	r4, ip, r4
 80005dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80005e0:	d26c      	bcs.n	80006bc <__udivmoddi4+0x2ac>
 80005e2:	45a6      	cmp	lr, r4
 80005e4:	d96a      	bls.n	80006bc <__udivmoddi4+0x2ac>
 80005e6:	3b02      	subs	r3, #2
 80005e8:	4464      	add	r4, ip
 80005ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ee:	fba3 9502 	umull	r9, r5, r3, r2
 80005f2:	eba4 040e 	sub.w	r4, r4, lr
 80005f6:	42ac      	cmp	r4, r5
 80005f8:	46c8      	mov	r8, r9
 80005fa:	46ae      	mov	lr, r5
 80005fc:	d356      	bcc.n	80006ac <__udivmoddi4+0x29c>
 80005fe:	d053      	beq.n	80006a8 <__udivmoddi4+0x298>
 8000600:	b156      	cbz	r6, 8000618 <__udivmoddi4+0x208>
 8000602:	ebb0 0208 	subs.w	r2, r0, r8
 8000606:	eb64 040e 	sbc.w	r4, r4, lr
 800060a:	fa04 f707 	lsl.w	r7, r4, r7
 800060e:	40ca      	lsrs	r2, r1
 8000610:	40cc      	lsrs	r4, r1
 8000612:	4317      	orrs	r7, r2
 8000614:	e9c6 7400 	strd	r7, r4, [r6]
 8000618:	4618      	mov	r0, r3
 800061a:	2100      	movs	r1, #0
 800061c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000620:	f1c3 0120 	rsb	r1, r3, #32
 8000624:	fa02 fc03 	lsl.w	ip, r2, r3
 8000628:	fa20 f201 	lsr.w	r2, r0, r1
 800062c:	fa25 f101 	lsr.w	r1, r5, r1
 8000630:	409d      	lsls	r5, r3
 8000632:	432a      	orrs	r2, r5
 8000634:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000638:	fa1f fe8c 	uxth.w	lr, ip
 800063c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000640:	fb07 1510 	mls	r5, r7, r0, r1
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800064a:	fb00 f50e 	mul.w	r5, r0, lr
 800064e:	428d      	cmp	r5, r1
 8000650:	fa04 f403 	lsl.w	r4, r4, r3
 8000654:	d908      	bls.n	8000668 <__udivmoddi4+0x258>
 8000656:	eb1c 0101 	adds.w	r1, ip, r1
 800065a:	f100 38ff 	add.w	r8, r0, #4294967295
 800065e:	d22f      	bcs.n	80006c0 <__udivmoddi4+0x2b0>
 8000660:	428d      	cmp	r5, r1
 8000662:	d92d      	bls.n	80006c0 <__udivmoddi4+0x2b0>
 8000664:	3802      	subs	r0, #2
 8000666:	4461      	add	r1, ip
 8000668:	1b49      	subs	r1, r1, r5
 800066a:	b292      	uxth	r2, r2
 800066c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000670:	fb07 1115 	mls	r1, r7, r5, r1
 8000674:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000678:	fb05 f10e 	mul.w	r1, r5, lr
 800067c:	4291      	cmp	r1, r2
 800067e:	d908      	bls.n	8000692 <__udivmoddi4+0x282>
 8000680:	eb1c 0202 	adds.w	r2, ip, r2
 8000684:	f105 38ff 	add.w	r8, r5, #4294967295
 8000688:	d216      	bcs.n	80006b8 <__udivmoddi4+0x2a8>
 800068a:	4291      	cmp	r1, r2
 800068c:	d914      	bls.n	80006b8 <__udivmoddi4+0x2a8>
 800068e:	3d02      	subs	r5, #2
 8000690:	4462      	add	r2, ip
 8000692:	1a52      	subs	r2, r2, r1
 8000694:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000698:	e738      	b.n	800050c <__udivmoddi4+0xfc>
 800069a:	4631      	mov	r1, r6
 800069c:	4630      	mov	r0, r6
 800069e:	e708      	b.n	80004b2 <__udivmoddi4+0xa2>
 80006a0:	4639      	mov	r1, r7
 80006a2:	e6e6      	b.n	8000472 <__udivmoddi4+0x62>
 80006a4:	4610      	mov	r0, r2
 80006a6:	e6fb      	b.n	80004a0 <__udivmoddi4+0x90>
 80006a8:	4548      	cmp	r0, r9
 80006aa:	d2a9      	bcs.n	8000600 <__udivmoddi4+0x1f0>
 80006ac:	ebb9 0802 	subs.w	r8, r9, r2
 80006b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80006b4:	3b01      	subs	r3, #1
 80006b6:	e7a3      	b.n	8000600 <__udivmoddi4+0x1f0>
 80006b8:	4645      	mov	r5, r8
 80006ba:	e7ea      	b.n	8000692 <__udivmoddi4+0x282>
 80006bc:	462b      	mov	r3, r5
 80006be:	e794      	b.n	80005ea <__udivmoddi4+0x1da>
 80006c0:	4640      	mov	r0, r8
 80006c2:	e7d1      	b.n	8000668 <__udivmoddi4+0x258>
 80006c4:	46d0      	mov	r8, sl
 80006c6:	e77b      	b.n	80005c0 <__udivmoddi4+0x1b0>
 80006c8:	3d02      	subs	r5, #2
 80006ca:	4462      	add	r2, ip
 80006cc:	e732      	b.n	8000534 <__udivmoddi4+0x124>
 80006ce:	4608      	mov	r0, r1
 80006d0:	e70a      	b.n	80004e8 <__udivmoddi4+0xd8>
 80006d2:	4464      	add	r4, ip
 80006d4:	3802      	subs	r0, #2
 80006d6:	e742      	b.n	800055e <__udivmoddi4+0x14e>

080006d8 <__aeabi_idiv0>:
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop

080006dc <HG2_Write_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);

	return reg_value;
}

void HG2_Write_Register(uint8_t addr, uint8_t data){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	460a      	mov	r2, r1
 80006e6:	71fb      	strb	r3, [r7, #7]
 80006e8:	4613      	mov	r3, r2
 80006ea:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f2:	480c      	ldr	r0, [pc, #48]	; (8000724 <HG2_Write_Register+0x48>)
 80006f4:	f007 fc18 	bl	8007f28 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80006f8:	1df9      	adds	r1, r7, #7
 80006fa:	2364      	movs	r3, #100	; 0x64
 80006fc:	2201      	movs	r2, #1
 80006fe:	480a      	ldr	r0, [pc, #40]	; (8000728 <HG2_Write_Register+0x4c>)
 8000700:	f00e f9ae 	bl	800ea60 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000704:	1db9      	adds	r1, r7, #6
 8000706:	2364      	movs	r3, #100	; 0x64
 8000708:	2201      	movs	r2, #1
 800070a:	4807      	ldr	r0, [pc, #28]	; (8000728 <HG2_Write_Register+0x4c>)
 800070c:	f00e f9a8 	bl	800ea60 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 8000710:	2201      	movs	r2, #1
 8000712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000716:	4803      	ldr	r0, [pc, #12]	; (8000724 <HG2_Write_Register+0x48>)
 8000718:	f007 fc06 	bl	8007f28 <HAL_GPIO_WritePin>

}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	58020c00 	.word	0x58020c00
 8000728:	24000fc0 	.word	0x24000fc0

0800072c <LG2_Read_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
}



uint8_t LG2_Read_Register(uint8_t addr){
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	addr |= (1<<7);
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800073c:	b2db      	uxtb	r3, r3
 800073e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <LG2_Read_Register+0x50>)
 8000748:	f007 fbee 	bl	8007f28 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 800074c:	1df9      	adds	r1, r7, #7
 800074e:	2364      	movs	r3, #100	; 0x64
 8000750:	2201      	movs	r2, #1
 8000752:	480b      	ldr	r0, [pc, #44]	; (8000780 <LG2_Read_Register+0x54>)
 8000754:	f00e f984 	bl	800ea60 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &reg_value, 1, 100);
 8000758:	f107 010f 	add.w	r1, r7, #15
 800075c:	2364      	movs	r3, #100	; 0x64
 800075e:	2201      	movs	r2, #1
 8000760:	4807      	ldr	r0, [pc, #28]	; (8000780 <LG2_Read_Register+0x54>)
 8000762:	f00e fb79 	bl	800ee58 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <LG2_Read_Register+0x50>)
 800076e:	f007 fbdb 	bl	8007f28 <HAL_GPIO_WritePin>

	return reg_value;
 8000772:	7bfb      	ldrb	r3, [r7, #15]
}
 8000774:	4618      	mov	r0, r3
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	58020c00 	.word	0x58020c00
 8000780:	24000fc0 	.word	0x24000fc0

08000784 <LG2_Write_Register>:

void LG2_Write_Register(uint8_t addr, uint8_t data){
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	460a      	mov	r2, r1
 800078e:	71fb      	strb	r3, [r7, #7]
 8000790:	4613      	mov	r3, r2
 8000792:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 7180 	mov.w	r1, #256	; 0x100
 800079a:	480c      	ldr	r0, [pc, #48]	; (80007cc <LG2_Write_Register+0x48>)
 800079c:	f007 fbc4 	bl	8007f28 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80007a0:	1df9      	adds	r1, r7, #7
 80007a2:	2364      	movs	r3, #100	; 0x64
 80007a4:	2201      	movs	r2, #1
 80007a6:	480a      	ldr	r0, [pc, #40]	; (80007d0 <LG2_Write_Register+0x4c>)
 80007a8:	f00e f95a 	bl	800ea60 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 80007ac:	1db9      	adds	r1, r7, #6
 80007ae:	2364      	movs	r3, #100	; 0x64
 80007b0:	2201      	movs	r2, #1
 80007b2:	4807      	ldr	r0, [pc, #28]	; (80007d0 <LG2_Write_Register+0x4c>)
 80007b4:	f00e f954 	bl	800ea60 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 80007b8:	2201      	movs	r2, #1
 80007ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007be:	4803      	ldr	r0, [pc, #12]	; (80007cc <LG2_Write_Register+0x48>)
 80007c0:	f007 fbb2 	bl	8007f28 <HAL_GPIO_WritePin>

}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	58020c00 	.word	0x58020c00
 80007d0:	24000fc0 	.word	0x24000fc0

080007d4 <LG2_Get_Gyro_X>:

float LG2_Get_Gyro_X(){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x22);
 80007da:	2022      	movs	r0, #34	; 0x22
 80007dc:	f7ff ffa6 	bl	800072c <LG2_Read_Register>
 80007e0:	4603      	mov	r3, r0
 80007e2:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x23);
 80007e4:	2023      	movs	r0, #35	; 0x23
 80007e6:	f7ff ffa1 	bl	800072c <LG2_Read_Register>
 80007ea:	4603      	mov	r3, r0
 80007ec:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80007ee:	79bb      	ldrb	r3, [r7, #6]
 80007f0:	021b      	lsls	r3, r3, #8
 80007f2:	b21a      	sxth	r2, r3
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	b21b      	sxth	r3, r3
 80007f8:	4313      	orrs	r3, r2
 80007fa:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 80007fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000800:	ee07 3a90 	vmov	s15, r3
 8000804:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000808:	eddf 6a08 	vldr	s13, [pc, #32]	; 800082c <LG2_Get_Gyro_X+0x58>
 800080c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000810:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000830 <LG2_Get_Gyro_X+0x5c>
 8000814:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000818:	edc7 7a00 	vstr	s15, [r7]
	return omega;
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	ee07 3a90 	vmov	s15, r3
}
 8000822:	eeb0 0a67 	vmov.f32	s0, s15
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	46fffe00 	.word	0x46fffe00
 8000830:	437a0000 	.word	0x437a0000

08000834 <LG2_Get_Gyro_Y>:

float LG2_Get_Gyro_Y(){
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x24);
 800083a:	2024      	movs	r0, #36	; 0x24
 800083c:	f7ff ff76 	bl	800072c <LG2_Read_Register>
 8000840:	4603      	mov	r3, r0
 8000842:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x25);
 8000844:	2025      	movs	r0, #37	; 0x25
 8000846:	f7ff ff71 	bl	800072c <LG2_Read_Register>
 800084a:	4603      	mov	r3, r0
 800084c:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	b21a      	sxth	r2, r3
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	b21b      	sxth	r3, r3
 8000858:	4313      	orrs	r3, r2
 800085a:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 800085c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000860:	ee07 3a90 	vmov	s15, r3
 8000864:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000868:	eddf 6a08 	vldr	s13, [pc, #32]	; 800088c <LG2_Get_Gyro_Y+0x58>
 800086c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000870:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000890 <LG2_Get_Gyro_Y+0x5c>
 8000874:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000878:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	ee07 3a90 	vmov	s15, r3
}
 8000882:	eeb0 0a67 	vmov.f32	s0, s15
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	46fffe00 	.word	0x46fffe00
 8000890:	437a0000 	.word	0x437a0000
 8000894:	00000000 	.word	0x00000000

08000898 <LG2_Get_Gyro_Z>:

float LG2_Get_Gyro_Z(){
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x26);
 800089e:	2026      	movs	r0, #38	; 0x26
 80008a0:	f7ff ff44 	bl	800072c <LG2_Read_Register>
 80008a4:	4603      	mov	r3, r0
 80008a6:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x27);
 80008a8:	2027      	movs	r0, #39	; 0x27
 80008aa:	f7ff ff3f 	bl	800072c <LG2_Read_Register>
 80008ae:	4603      	mov	r3, r0
 80008b0:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80008b2:	79bb      	ldrb	r3, [r7, #6]
 80008b4:	021b      	lsls	r3, r3, #8
 80008b6:	b21a      	sxth	r2, r3
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	b21b      	sxth	r3, r3
 80008bc:	4313      	orrs	r3, r2
 80008be:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767.0) * 250.0;
 80008c0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008c4:	ee07 3a90 	vmov	s15, r3
 80008c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008cc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80008d0:	ed9f 5b09 	vldr	d5, [pc, #36]	; 80008f8 <LG2_Get_Gyro_Z+0x60>
 80008d4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008d8:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000900 <LG2_Get_Gyro_Z+0x68>
 80008dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008e0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008e4:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	ee07 3a90 	vmov	s15, r3
}
 80008ee:	eeb0 0a67 	vmov.f32	s0, s15
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	00000000 	.word	0x00000000
 80008fc:	40dfffc0 	.word	0x40dfffc0
 8000900:	00000000 	.word	0x00000000
 8000904:	406f4000 	.word	0x406f4000

08000908 <setServo>:
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;


void setServo(int servoNum, float angle){
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal =(int)( 3000 + (4000 * (angle/180)));
 8000914:	ed97 7a00 	vldr	s14, [r7]
 8000918:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000988 <setServo+0x80>
 800091c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000920:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800098c <setServo+0x84>
 8000924:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000928:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000990 <setServo+0x88>
 800092c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000930:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000934:	ee17 3a90 	vmov	r3, s15
 8000938:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	3b01      	subs	r3, #1
 800093e:	2b03      	cmp	r3, #3
 8000940:	d81a      	bhi.n	8000978 <setServo+0x70>
 8000942:	a201      	add	r2, pc, #4	; (adr r2, 8000948 <setServo+0x40>)
 8000944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000948:	08000959 	.word	0x08000959
 800094c:	08000961 	.word	0x08000961
 8000950:	08000969 	.word	0x08000969
 8000954:	08000971 	.word	0x08000971
		case 1:
			TIM4->CCR4 = timerVal;
 8000958:	4a0e      	ldr	r2, [pc, #56]	; (8000994 <setServo+0x8c>)
 800095a:	89fb      	ldrh	r3, [r7, #14]
 800095c:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 800095e:	e00c      	b.n	800097a <setServo+0x72>
		case 2:
			TIM4->CCR3 = timerVal;
 8000960:	4a0c      	ldr	r2, [pc, #48]	; (8000994 <setServo+0x8c>)
 8000962:	89fb      	ldrh	r3, [r7, #14]
 8000964:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 8000966:	e008      	b.n	800097a <setServo+0x72>
		case 3:
			TIM4->CCR2 = timerVal;
 8000968:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <setServo+0x8c>)
 800096a:	89fb      	ldrh	r3, [r7, #14]
 800096c:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 800096e:	e004      	b.n	800097a <setServo+0x72>
		case 4:
			TIM4->CCR1 = timerVal;
 8000970:	4a08      	ldr	r2, [pc, #32]	; (8000994 <setServo+0x8c>)
 8000972:	89fb      	ldrh	r3, [r7, #14]
 8000974:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8000976:	e000      	b.n	800097a <setServo+0x72>

		default:
			break;
 8000978:	bf00      	nop
	}
}
 800097a:	bf00      	nop
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	43340000 	.word	0x43340000
 800098c:	457a0000 	.word	0x457a0000
 8000990:	453b8000 	.word	0x453b8000
 8000994:	40000800 	.word	0x40000800

08000998 <setLEDs>:

void setLEDs(void) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b08e      	sub	sp, #56	; 0x38
 800099c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 800099e:	2300      	movs	r3, #0
 80009a0:	637b      	str	r3, [r7, #52]	; 0x34
 80009a2:	e181      	b.n	8000ca8 <setLEDs+0x310>
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 80009a4:	4aa1      	ldr	r2, [pc, #644]	; (8000c2c <setLEDs+0x294>)
 80009a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80009ac:	2b03      	cmp	r3, #3
 80009ae:	f200 8177 	bhi.w	8000ca0 <setLEDs+0x308>
 80009b2:	a201      	add	r2, pc, #4	; (adr r2, 80009b8 <setLEDs+0x20>)
 80009b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b8:	080009c9 	.word	0x080009c9
 80009bc:	08000a79 	.word	0x08000a79
 80009c0:	08000b29 	.word	0x08000b29
 80009c4:	08000bd9 	.word	0x08000bd9
		case 0:
			for (int j = 0; j < 3; j++) {
 80009c8:	2300      	movs	r3, #0
 80009ca:	633b      	str	r3, [r7, #48]	; 0x30
 80009cc:	e042      	b.n	8000a54 <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 80009ce:	2300      	movs	r3, #0
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009d2:	e039      	b.n	8000a48 <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 80009d4:	4996      	ldr	r1, [pc, #600]	; (8000c30 <setLEDs+0x298>)
 80009d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009d8:	4613      	mov	r3, r2
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	4413      	add	r3, r2
 80009de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80009e0:	4413      	add	r3, r2
 80009e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009e6:	2180      	movs	r1, #128	; 0x80
 80009e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009ea:	fa41 f202 	asr.w	r2, r1, r2
 80009ee:	4013      	ands	r3, r2
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d013      	beq.n	8000a1c <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 80009f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009f6:	00da      	lsls	r2, r3, #3
 80009f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009fa:	18d1      	adds	r1, r2, r3
 80009fc:	4a8b      	ldr	r2, [pc, #556]	; (8000c2c <setLEDs+0x294>)
 80009fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a00:	00db      	lsls	r3, r3, #3
 8000a02:	4413      	add	r3, r2
 8000a04:	685a      	ldr	r2, [r3, #4]
 8000a06:	4613      	mov	r3, r2
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	4413      	add	r3, r2
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	440b      	add	r3, r1
 8000a10:	3308      	adds	r3, #8
 8000a12:	4a88      	ldr	r2, [pc, #544]	; (8000c34 <setLEDs+0x29c>)
 8000a14:	213c      	movs	r1, #60	; 0x3c
 8000a16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a1a:	e012      	b.n	8000a42 <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a1e:	00da      	lsls	r2, r3, #3
 8000a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a22:	18d1      	adds	r1, r2, r3
 8000a24:	4a81      	ldr	r2, [pc, #516]	; (8000c2c <setLEDs+0x294>)
 8000a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a28:	00db      	lsls	r3, r3, #3
 8000a2a:	4413      	add	r3, r2
 8000a2c:	685a      	ldr	r2, [r3, #4]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	4413      	add	r3, r2
 8000a34:	00db      	lsls	r3, r3, #3
 8000a36:	440b      	add	r3, r1
 8000a38:	3308      	adds	r3, #8
 8000a3a:	4a7e      	ldr	r2, [pc, #504]	; (8000c34 <setLEDs+0x29c>)
 8000a3c:	211e      	movs	r1, #30
 8000a3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a44:	3301      	adds	r3, #1
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4a:	2b07      	cmp	r3, #7
 8000a4c:	ddc2      	ble.n	80009d4 <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 8000a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a50:	3301      	adds	r3, #1
 8000a52:	633b      	str	r3, [r7, #48]	; 0x30
 8000a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	ddb9      	ble.n	80009ce <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000a5a:	2380      	movs	r3, #128	; 0x80
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a5e:	e007      	b.n	8000a70 <setLEDs+0xd8>
				LED_PWM_Data_0[i] = 0;
 8000a60:	4a74      	ldr	r2, [pc, #464]	; (8000c34 <setLEDs+0x29c>)
 8000a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a64:	2100      	movs	r1, #0
 8000a66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a72:	2bb1      	cmp	r3, #177	; 0xb1
 8000a74:	ddf4      	ble.n	8000a60 <setLEDs+0xc8>
			}
			break;
 8000a76:	e114      	b.n	8000ca2 <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a7c:	e042      	b.n	8000b04 <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
 8000a82:	e039      	b.n	8000af8 <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000a84:	496a      	ldr	r1, [pc, #424]	; (8000c30 <setLEDs+0x298>)
 8000a86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a88:	4613      	mov	r3, r2
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	4413      	add	r3, r2
 8000a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a90:	4413      	add	r3, r2
 8000a92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a96:	2180      	movs	r1, #128	; 0x80
 8000a98:	6a3a      	ldr	r2, [r7, #32]
 8000a9a:	fa41 f202 	asr.w	r2, r1, r2
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d013      	beq.n	8000acc <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa6:	00da      	lsls	r2, r3, #3
 8000aa8:	6a3b      	ldr	r3, [r7, #32]
 8000aaa:	18d1      	adds	r1, r2, r3
 8000aac:	4a5f      	ldr	r2, [pc, #380]	; (8000c2c <setLEDs+0x294>)
 8000aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	4413      	add	r3, r2
 8000ab4:	685a      	ldr	r2, [r3, #4]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	4413      	add	r3, r2
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	440b      	add	r3, r1
 8000ac0:	3308      	adds	r3, #8
 8000ac2:	4a5d      	ldr	r2, [pc, #372]	; (8000c38 <setLEDs+0x2a0>)
 8000ac4:	213c      	movs	r1, #60	; 0x3c
 8000ac6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000aca:	e012      	b.n	8000af2 <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ace:	00da      	lsls	r2, r3, #3
 8000ad0:	6a3b      	ldr	r3, [r7, #32]
 8000ad2:	18d1      	adds	r1, r2, r3
 8000ad4:	4a55      	ldr	r2, [pc, #340]	; (8000c2c <setLEDs+0x294>)
 8000ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	4413      	add	r3, r2
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	4413      	add	r3, r2
 8000ae4:	00db      	lsls	r3, r3, #3
 8000ae6:	440b      	add	r3, r1
 8000ae8:	3308      	adds	r3, #8
 8000aea:	4a53      	ldr	r2, [pc, #332]	; (8000c38 <setLEDs+0x2a0>)
 8000aec:	211e      	movs	r1, #30
 8000aee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000af2:	6a3b      	ldr	r3, [r7, #32]
 8000af4:	3301      	adds	r3, #1
 8000af6:	623b      	str	r3, [r7, #32]
 8000af8:	6a3b      	ldr	r3, [r7, #32]
 8000afa:	2b07      	cmp	r3, #7
 8000afc:	ddc2      	ble.n	8000a84 <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 8000afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b00:	3301      	adds	r3, #1
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
 8000b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	ddb9      	ble.n	8000a7e <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000b0a:	2380      	movs	r3, #128	; 0x80
 8000b0c:	61fb      	str	r3, [r7, #28]
 8000b0e:	e007      	b.n	8000b20 <setLEDs+0x188>
				LED_PWM_Data_1[i] = 0;
 8000b10:	4a49      	ldr	r2, [pc, #292]	; (8000c38 <setLEDs+0x2a0>)
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	2100      	movs	r1, #0
 8000b16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	61fb      	str	r3, [r7, #28]
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	2bb1      	cmp	r3, #177	; 0xb1
 8000b24:	ddf4      	ble.n	8000b10 <setLEDs+0x178>
			}
			break;
 8000b26:	e0bc      	b.n	8000ca2 <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61bb      	str	r3, [r7, #24]
 8000b2c:	e042      	b.n	8000bb4 <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
 8000b32:	e039      	b.n	8000ba8 <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000b34:	493e      	ldr	r1, [pc, #248]	; (8000c30 <setLEDs+0x298>)
 8000b36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b38:	4613      	mov	r3, r2
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	4413      	add	r3, r2
 8000b3e:	69ba      	ldr	r2, [r7, #24]
 8000b40:	4413      	add	r3, r2
 8000b42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b46:	2180      	movs	r1, #128	; 0x80
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	fa41 f202 	asr.w	r2, r1, r2
 8000b4e:	4013      	ands	r3, r2
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d013      	beq.n	8000b7c <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	00da      	lsls	r2, r3, #3
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	18d1      	adds	r1, r2, r3
 8000b5c:	4a33      	ldr	r2, [pc, #204]	; (8000c2c <setLEDs+0x294>)
 8000b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	4413      	add	r3, r2
 8000b64:	685a      	ldr	r2, [r3, #4]
 8000b66:	4613      	mov	r3, r2
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	4413      	add	r3, r2
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	440b      	add	r3, r1
 8000b70:	3308      	adds	r3, #8
 8000b72:	4a32      	ldr	r2, [pc, #200]	; (8000c3c <setLEDs+0x2a4>)
 8000b74:	213c      	movs	r1, #60	; 0x3c
 8000b76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000b7a:	e012      	b.n	8000ba2 <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	00da      	lsls	r2, r3, #3
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	18d1      	adds	r1, r2, r3
 8000b84:	4a29      	ldr	r2, [pc, #164]	; (8000c2c <setLEDs+0x294>)
 8000b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	4413      	add	r3, r2
 8000b8c:	685a      	ldr	r2, [r3, #4]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	4413      	add	r3, r2
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	440b      	add	r3, r1
 8000b98:	3308      	adds	r3, #8
 8000b9a:	4a28      	ldr	r2, [pc, #160]	; (8000c3c <setLEDs+0x2a4>)
 8000b9c:	211e      	movs	r1, #30
 8000b9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	2b07      	cmp	r3, #7
 8000bac:	ddc2      	ble.n	8000b34 <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	61bb      	str	r3, [r7, #24]
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	ddb9      	ble.n	8000b2e <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000bba:	2338      	movs	r3, #56	; 0x38
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	e007      	b.n	8000bd0 <setLEDs+0x238>
				LED_PWM_Data_2[i] = 0;
 8000bc0:	4a1e      	ldr	r2, [pc, #120]	; (8000c3c <setLEDs+0x2a4>)
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	2b69      	cmp	r3, #105	; 0x69
 8000bd4:	ddf4      	ble.n	8000bc0 <setLEDs+0x228>
			}
			break;
 8000bd6:	e064      	b.n	8000ca2 <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	e04e      	b.n	8000c7c <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	e045      	b.n	8000c70 <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000be4:	4912      	ldr	r1, [pc, #72]	; (8000c30 <setLEDs+0x298>)
 8000be6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000be8:	4613      	mov	r3, r2
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	4413      	add	r3, r2
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bf6:	2180      	movs	r1, #128	; 0x80
 8000bf8:	68ba      	ldr	r2, [r7, #8]
 8000bfa:	fa41 f202 	asr.w	r2, r1, r2
 8000bfe:	4013      	ands	r3, r2
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d01f      	beq.n	8000c44 <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	00da      	lsls	r2, r3, #3
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	18d1      	adds	r1, r2, r3
 8000c0c:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <setLEDs+0x294>)
 8000c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	4413      	add	r3, r2
 8000c14:	685a      	ldr	r2, [r3, #4]
 8000c16:	4613      	mov	r3, r2
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	4413      	add	r3, r2
 8000c1c:	00db      	lsls	r3, r3, #3
 8000c1e:	440b      	add	r3, r1
 8000c20:	3308      	adds	r3, #8
 8000c22:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <setLEDs+0x2a8>)
 8000c24:	213c      	movs	r1, #60	; 0x3c
 8000c26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000c2a:	e01e      	b.n	8000c6a <setLEDs+0x2d2>
 8000c2c:	08018414 	.word	0x08018414
 8000c30:	24000b50 	.word	0x24000b50
 8000c34:	24000270 	.word	0x24000270
 8000c38:	24000538 	.word	0x24000538
 8000c3c:	24000800 	.word	0x24000800
 8000c40:	240009a8 	.word	0x240009a8
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	00da      	lsls	r2, r3, #3
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	18d1      	adds	r1, r2, r3
 8000c4c:	4a26      	ldr	r2, [pc, #152]	; (8000ce8 <setLEDs+0x350>)
 8000c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c50:	00db      	lsls	r3, r3, #3
 8000c52:	4413      	add	r3, r2
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	4613      	mov	r3, r2
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	4413      	add	r3, r2
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	440b      	add	r3, r1
 8000c60:	3308      	adds	r3, #8
 8000c62:	4a22      	ldr	r2, [pc, #136]	; (8000cec <setLEDs+0x354>)
 8000c64:	211e      	movs	r1, #30
 8000c66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	2b07      	cmp	r3, #7
 8000c74:	ddb6      	ble.n	8000be4 <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	ddad      	ble.n	8000bde <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000c82:	2338      	movs	r3, #56	; 0x38
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	e007      	b.n	8000c98 <setLEDs+0x300>
				LED_PWM_Data_3[i] = 0;
 8000c88:	4a18      	ldr	r2, [pc, #96]	; (8000cec <setLEDs+0x354>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	3301      	adds	r3, #1
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b69      	cmp	r3, #105	; 0x69
 8000c9c:	ddf4      	ble.n	8000c88 <setLEDs+0x2f0>
			}
			break;
 8000c9e:	e000      	b.n	8000ca2 <setLEDs+0x30a>
		default:
			break;
 8000ca0:	bf00      	nop
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 8000ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8000ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000caa:	2b0d      	cmp	r3, #13
 8000cac:	f77f ae7a 	ble.w	80009a4 <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0, (NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
 8000cb0:	23b2      	movs	r3, #178	; 0xb2
 8000cb2:	4a0f      	ldr	r2, [pc, #60]	; (8000cf0 <setLEDs+0x358>)
 8000cb4:	210c      	movs	r1, #12
 8000cb6:	480f      	ldr	r0, [pc, #60]	; (8000cf4 <setLEDs+0x35c>)
 8000cb8:	f00e fd12 	bl	800f6e0 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1, (NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
 8000cbc:	23b2      	movs	r3, #178	; 0xb2
 8000cbe:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <setLEDs+0x360>)
 8000cc0:	2108      	movs	r1, #8
 8000cc2:	480e      	ldr	r0, [pc, #56]	; (8000cfc <setLEDs+0x364>)
 8000cc4:	f00e fd0c 	bl	800f6e0 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2, (NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
 8000cc8:	236a      	movs	r3, #106	; 0x6a
 8000cca:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <setLEDs+0x368>)
 8000ccc:	2104      	movs	r1, #4
 8000cce:	480d      	ldr	r0, [pc, #52]	; (8000d04 <setLEDs+0x36c>)
 8000cd0:	f00e fd06 	bl	800f6e0 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3, (NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3
 8000cd4:	236a      	movs	r3, #106	; 0x6a
 8000cd6:	4a05      	ldr	r2, [pc, #20]	; (8000cec <setLEDs+0x354>)
 8000cd8:	2100      	movs	r1, #0
 8000cda:	480a      	ldr	r0, [pc, #40]	; (8000d04 <setLEDs+0x36c>)
 8000cdc:	f00e fd00 	bl	800f6e0 <HAL_TIM_PWM_Start_DMA>

}
 8000ce0:	bf00      	nop
 8000ce2:	3738      	adds	r7, #56	; 0x38
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	08018414 	.word	0x08018414
 8000cec:	240009a8 	.word	0x240009a8
 8000cf0:	24000270 	.word	0x24000270
 8000cf4:	240011b4 	.word	0x240011b4
 8000cf8:	24000538 	.word	0x24000538
 8000cfc:	240010d0 	.word	0x240010d0
 8000d00:	24000800 	.word	0x24000800
 8000d04:	2400111c 	.word	0x2400111c

08000d08 <LoRA_Read_Register>:
	}
}



uint8_t LoRA_Read_Register(uint8_t addr){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d18:	480d      	ldr	r0, [pc, #52]	; (8000d50 <LoRA_Read_Register+0x48>)
 8000d1a:	f007 f905 	bl	8007f28 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000d1e:	1df9      	adds	r1, r7, #7
 8000d20:	2364      	movs	r3, #100	; 0x64
 8000d22:	2201      	movs	r2, #1
 8000d24:	480b      	ldr	r0, [pc, #44]	; (8000d54 <LoRA_Read_Register+0x4c>)
 8000d26:	f00d fe9b 	bl	800ea60 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 8000d2a:	f107 010f 	add.w	r1, r7, #15
 8000d2e:	2364      	movs	r3, #100	; 0x64
 8000d30:	2201      	movs	r2, #1
 8000d32:	4808      	ldr	r0, [pc, #32]	; (8000d54 <LoRA_Read_Register+0x4c>)
 8000d34:	f00e f890 	bl	800ee58 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d3e:	4804      	ldr	r0, [pc, #16]	; (8000d50 <LoRA_Read_Register+0x48>)
 8000d40:	f007 f8f2 	bl	8007f28 <HAL_GPIO_WritePin>

	return reg_value;
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	58020000 	.word	0x58020000
 8000d54:	24001048 	.word	0x24001048

08000d58 <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	460a      	mov	r2, r1
 8000d62:	71fb      	strb	r3, [r7, #7]
 8000d64:	4613      	mov	r3, r2
 8000d66:	71bb      	strb	r3, [r7, #6]
	addr |= (1<<7);
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d78:	480c      	ldr	r0, [pc, #48]	; (8000dac <LoRA_Write_Register+0x54>)
 8000d7a:	f007 f8d5 	bl	8007f28 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000d7e:	1df9      	adds	r1, r7, #7
 8000d80:	2364      	movs	r3, #100	; 0x64
 8000d82:	2201      	movs	r2, #1
 8000d84:	480a      	ldr	r0, [pc, #40]	; (8000db0 <LoRA_Write_Register+0x58>)
 8000d86:	f00d fe6b 	bl	800ea60 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8000d8a:	1db9      	adds	r1, r7, #6
 8000d8c:	2364      	movs	r3, #100	; 0x64
 8000d8e:	2201      	movs	r2, #1
 8000d90:	4807      	ldr	r0, [pc, #28]	; (8000db0 <LoRA_Write_Register+0x58>)
 8000d92:	f00d fe65 	bl	800ea60 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000d96:	2201      	movs	r2, #1
 8000d98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d9c:	4803      	ldr	r0, [pc, #12]	; (8000dac <LoRA_Write_Register+0x54>)
 8000d9e:	f007 f8c3 	bl	8007f28 <HAL_GPIO_WritePin>

}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	58020000 	.word	0x58020000
 8000db0:	24001048 	.word	0x24001048

08000db4 <LoRA_sleep>:


void LoRA_sleep(void){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000db8:	2180      	movs	r1, #128	; 0x80
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f7ff ffcc 	bl	8000d58 <LoRA_Write_Register>
}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency){
 8000dc4:	b5b0      	push	{r4, r5, r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8000dcc:	6879      	ldr	r1, [r7, #4]
 8000dce:	17c8      	asrs	r0, r1, #31
 8000dd0:	460a      	mov	r2, r1
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	1355      	asrs	r5, r2, #13
 8000dd6:	04d4      	lsls	r4, r2, #19
 8000dd8:	4a18      	ldr	r2, [pc, #96]	; (8000e3c <LoRA_set_frequency+0x78>)
 8000dda:	f04f 0300 	mov.w	r3, #0
 8000dde:	4620      	mov	r0, r4
 8000de0:	4629      	mov	r1, r5
 8000de2:	f7ff fafd 	bl	80003e0 <__aeabi_uldivmod>
 8000de6:	4602      	mov	r2, r0
 8000de8:	460b      	mov	r3, r1
 8000dea:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8000dee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000df2:	f04f 0200 	mov.w	r2, #0
 8000df6:	f04f 0300 	mov.w	r3, #0
 8000dfa:	0c02      	lsrs	r2, r0, #16
 8000dfc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e00:	0c0b      	lsrs	r3, r1, #16
 8000e02:	b2d3      	uxtb	r3, r2
 8000e04:	4619      	mov	r1, r3
 8000e06:	2006      	movs	r0, #6
 8000e08:	f7ff ffa6 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t)(frf >> 8));
 8000e0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e10:	f04f 0200 	mov.w	r2, #0
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	0a02      	lsrs	r2, r0, #8
 8000e1a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000e1e:	0a0b      	lsrs	r3, r1, #8
 8000e20:	b2d3      	uxtb	r3, r2
 8000e22:	4619      	mov	r1, r3
 8000e24:	2007      	movs	r0, #7
 8000e26:	f7ff ff97 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8000e2a:	7a3b      	ldrb	r3, [r7, #8]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	2008      	movs	r0, #8
 8000e30:	f7ff ff92 	bl	8000d58 <LoRA_Write_Register>
}
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e3c:	01e84800 	.word	0x01e84800

08000e40 <LoRA_setOCP>:

void LoRA_idle(){
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
}

void LoRA_setOCP(uint8_t mA){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
	  uint8_t ocpTrim = 27;
 8000e4a:	231b      	movs	r3, #27
 8000e4c:	73fb      	strb	r3, [r7, #15]

	  if (mA <= 120) {
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	2b78      	cmp	r3, #120	; 0x78
 8000e52:	d809      	bhi.n	8000e68 <LoRA_setOCP+0x28>
	    ocpTrim = (mA - 45) / 5;
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	3b2d      	subs	r3, #45	; 0x2d
 8000e58:	4a11      	ldr	r2, [pc, #68]	; (8000ea0 <LoRA_setOCP+0x60>)
 8000e5a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e5e:	1052      	asrs	r2, r2, #1
 8000e60:	17db      	asrs	r3, r3, #31
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	73fb      	strb	r3, [r7, #15]
 8000e66:	e00b      	b.n	8000e80 <LoRA_setOCP+0x40>
	  } else if (mA <=240) {
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	2bf0      	cmp	r3, #240	; 0xf0
 8000e6c:	d808      	bhi.n	8000e80 <LoRA_setOCP+0x40>
	    ocpTrim = (mA + 30) / 10;
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	331e      	adds	r3, #30
 8000e72:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <LoRA_setOCP+0x60>)
 8000e74:	fb82 1203 	smull	r1, r2, r2, r3
 8000e78:	1092      	asrs	r2, r2, #2
 8000e7a:	17db      	asrs	r3, r3, #31
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	73fb      	strb	r3, [r7, #15]
	  }

	  LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
 8000e82:	f003 031f 	and.w	r3, r3, #31
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	f043 0320 	orr.w	r3, r3, #32
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	4619      	mov	r1, r3
 8000e90:	200b      	movs	r0, #11
 8000e92:	f7ff ff61 	bl	8000d58 <LoRA_Write_Register>
}
 8000e96:	bf00      	nop
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	66666667 	.word	0x66666667

08000ea4 <LoRA_setTxPower>:

void LoRA_setTxPower(int level){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
    // PA BOOST
    if (level > 17) {
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b11      	cmp	r3, #17
 8000eb0:	dd0f      	ble.n	8000ed2 <LoRA_setTxPower+0x2e>
      if (level > 20) {
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b14      	cmp	r3, #20
 8000eb6:	dd01      	ble.n	8000ebc <LoRA_setTxPower+0x18>
        level = 20;
 8000eb8:	2314      	movs	r3, #20
 8000eba:	607b      	str	r3, [r7, #4]
      }

      // subtract 3 from level, so 18 - 20 maps to 15 - 17
      level -= 3;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3b03      	subs	r3, #3
 8000ec0:	607b      	str	r3, [r7, #4]

      // High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
      LoRA_Write_Register(REG_PA_DAC, 0x87);
 8000ec2:	2187      	movs	r1, #135	; 0x87
 8000ec4:	204d      	movs	r0, #77	; 0x4d
 8000ec6:	f7ff ff47 	bl	8000d58 <LoRA_Write_Register>
      LoRA_setOCP(140);
 8000eca:	208c      	movs	r0, #140	; 0x8c
 8000ecc:	f7ff ffb8 	bl	8000e40 <LoRA_setOCP>
 8000ed0:	e00b      	b.n	8000eea <LoRA_setTxPower+0x46>
    } else {
      if (level < 2) {
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	dc01      	bgt.n	8000edc <LoRA_setTxPower+0x38>
        level = 2;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	607b      	str	r3, [r7, #4]
      }
      //Default value PA_HF/LF or +17dBm
      LoRA_Write_Register(REG_PA_DAC, 0x84);
 8000edc:	2184      	movs	r1, #132	; 0x84
 8000ede:	204d      	movs	r0, #77	; 0x4d
 8000ee0:	f7ff ff3a 	bl	8000d58 <LoRA_Write_Register>
      LoRA_setOCP(100);
 8000ee4:	2064      	movs	r0, #100	; 0x64
 8000ee6:	f7ff ffab 	bl	8000e40 <LoRA_setOCP>
    }

    LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	b25b      	sxtb	r3, r3
 8000ef4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ef8:	b25b      	sxtb	r3, r3
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	4619      	mov	r1, r3
 8000efe:	2009      	movs	r0, #9
 8000f00:	f7ff ff2a 	bl	8000d58 <LoRA_Write_Register>
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <LoRA_explicit_header_mode>:

void LoRA_explicit_header_mode(){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_MODEM_CONFIG_1, LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
 8000f10:	201d      	movs	r0, #29
 8000f12:	f7ff fef9 	bl	8000d08 <LoRA_Read_Register>
 8000f16:	4603      	mov	r3, r0
 8000f18:	f023 0301 	bic.w	r3, r3, #1
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	4619      	mov	r1, r3
 8000f20:	201d      	movs	r0, #29
 8000f22:	f7ff ff19 	bl	8000d58 <LoRA_Write_Register>
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <LoRA_begin>:

void LoRA_begin(long frequency){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b09c      	sub	sp, #112	; 0x70
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8000f34:	2201      	movs	r2, #1
 8000f36:	2101      	movs	r1, #1
 8000f38:	4822      	ldr	r0, [pc, #136]	; (8000fc4 <LoRA_begin+0x98>)
 8000f3a:	f006 fff5 	bl	8007f28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000f3e:	2201      	movs	r2, #1
 8000f40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f44:	4820      	ldr	r0, [pc, #128]	; (8000fc8 <LoRA_begin+0x9c>)
 8000f46:	f006 ffef 	bl	8007f28 <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 8000f4a:	2042      	movs	r0, #66	; 0x42
 8000f4c:	f7ff fedc 	bl	8000d08 <LoRA_Read_Register>
 8000f50:	4603      	mov	r3, r0
 8000f52:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    char data_debug[100];
	sprintf( data_debug,  "%x\n", version);
 8000f56:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000f5a:	f107 0308 	add.w	r3, r7, #8
 8000f5e:	491b      	ldr	r1, [pc, #108]	; (8000fcc <LoRA_begin+0xa0>)
 8000f60:	4618      	mov	r0, r3
 8000f62:	f016 f829 	bl	8016fb8 <siprintf>
	CDC_Transmit_HS(data_debug, strlen(data_debug));
 8000f66:	f107 0308 	add.w	r3, r7, #8
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff f9da 	bl	8000324 <strlen>
 8000f70:	4602      	mov	r2, r0
 8000f72:	f107 0308 	add.w	r3, r7, #8
 8000f76:	4611      	mov	r1, r2
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f015 fbc9 	bl	8016710 <CDC_Transmit_HS>

	LoRA_sleep();
 8000f7e:	f7ff ff19 	bl	8000db4 <LoRA_sleep>
	LoRA_set_frequency(868000000);
 8000f82:	4813      	ldr	r0, [pc, #76]	; (8000fd0 <LoRA_begin+0xa4>)
 8000f84:	f7ff ff1e 	bl	8000dc4 <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 8000f88:	2100      	movs	r1, #0
 8000f8a:	200f      	movs	r0, #15
 8000f8c:	f7ff fee4 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 8000f90:	2100      	movs	r1, #0
 8000f92:	200e      	movs	r0, #14
 8000f94:	f7ff fee0 	bl	8000d58 <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 8000f98:	200c      	movs	r0, #12
 8000f9a:	f7ff feb5 	bl	8000d08 <LoRA_Read_Register>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	f043 0303 	orr.w	r3, r3, #3
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	200c      	movs	r0, #12
 8000faa:	f7ff fed5 	bl	8000d58 <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 8000fae:	2104      	movs	r1, #4
 8000fb0:	2026      	movs	r0, #38	; 0x26
 8000fb2:	f7ff fed1 	bl	8000d58 <LoRA_Write_Register>

	LoRA_setTxPower(17);
 8000fb6:	2011      	movs	r0, #17
 8000fb8:	f7ff ff74 	bl	8000ea4 <LoRA_setTxPower>

}
 8000fbc:	bf00      	nop
 8000fbe:	3770      	adds	r7, #112	; 0x70
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	58020c00 	.word	0x58020c00
 8000fc8:	58020000 	.word	0x58020000
 8000fcc:	0801829c 	.word	0x0801829c
 8000fd0:	33bca100 	.word	0x33bca100

08000fd4 <LoRA_beginPacket>:


void LoRA_beginPacket(){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	LoRA_explicit_header_mode();
 8000fd8:	f7ff ff98 	bl	8000f0c <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8000fdc:	2100      	movs	r1, #0
 8000fde:	200d      	movs	r0, #13
 8000fe0:	f7ff feba 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, 0);
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	2022      	movs	r0, #34	; 0x22
 8000fe8:	f7ff feb6 	bl	8000d58 <LoRA_Write_Register>
}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <LoRA_endPacket>:

void LoRA_endPacket(){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8000ff4:	2183      	movs	r1, #131	; 0x83
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f7ff feae 	bl	8000d58 <LoRA_Write_Register>

	while((LoRA_Read_Register(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0){
 8000ffc:	bf00      	nop
 8000ffe:	2012      	movs	r0, #18
 8001000:	f7ff fe82 	bl	8000d08 <LoRA_Read_Register>
 8001004:	4603      	mov	r3, r0
 8001006:	f003 0308 	and.w	r3, r3, #8
 800100a:	2b00      	cmp	r3, #0
 800100c:	d0f7      	beq.n	8000ffe <LoRA_endPacket+0xe>

	}
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 800100e:	2185      	movs	r1, #133	; 0x85
 8001010:	2001      	movs	r0, #1
 8001012:	f7ff fea1 	bl	8000d58 <LoRA_Write_Register>

	LoRA_Write_Register(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8001016:	2108      	movs	r1, #8
 8001018:	2012      	movs	r0, #18
 800101a:	f7ff fe9d 	bl	8000d58 <LoRA_Write_Register>

}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}

08001022 <LoRA_parsePacket>:


int LoRA_parsePacket(){
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
	int packetLenght = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	607b      	str	r3, [r7, #4]
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 800102c:	2012      	movs	r0, #18
 800102e:	f7ff fe6b 	bl	8000d08 <LoRA_Read_Register>
 8001032:	4603      	mov	r3, r0
 8001034:	603b      	str	r3, [r7, #0]

	LoRA_explicit_header_mode();
 8001036:	f7ff ff69 	bl	8000f0c <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	b2db      	uxtb	r3, r3
 800103e:	4619      	mov	r1, r3
 8001040:	2012      	movs	r0, #18
 8001042:	f7ff fe89 	bl	8000d58 <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800104c:	2b00      	cmp	r3, #0
 800104e:	d016      	beq.n	800107e <LoRA_parsePacket+0x5c>
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	f003 0320 	and.w	r3, r3, #32
 8001056:	2b00      	cmp	r3, #0
 8001058:	d111      	bne.n	800107e <LoRA_parsePacket+0x5c>
		packetLenght = LoRA_Read_Register(REG_RX_NB_BYTES);
 800105a:	2013      	movs	r0, #19
 800105c:	f7ff fe54 	bl	8000d08 <LoRA_Read_Register>
 8001060:	4603      	mov	r3, r0
 8001062:	607b      	str	r3, [r7, #4]
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 8001064:	2010      	movs	r0, #16
 8001066:	f7ff fe4f 	bl	8000d08 <LoRA_Read_Register>
 800106a:	4603      	mov	r3, r0
 800106c:	4619      	mov	r1, r3
 800106e:	200d      	movs	r0, #13
 8001070:	f7ff fe72 	bl	8000d58 <LoRA_Write_Register>
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8001074:	2185      	movs	r1, #133	; 0x85
 8001076:	2001      	movs	r0, #1
 8001078:	f7ff fe6e 	bl	8000d58 <LoRA_Write_Register>
 800107c:	e00d      	b.n	800109a <LoRA_parsePacket+0x78>

		//LoRA_idle();
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS)){
 800107e:	2001      	movs	r0, #1
 8001080:	f7ff fe42 	bl	8000d08 <LoRA_Read_Register>
 8001084:	4603      	mov	r3, r0
 8001086:	2b85      	cmp	r3, #133	; 0x85
 8001088:	d007      	beq.n	800109a <LoRA_parsePacket+0x78>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 800108a:	2100      	movs	r1, #0
 800108c:	200d      	movs	r0, #13
 800108e:	f7ff fe63 	bl	8000d58 <LoRA_Write_Register>

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8001092:	2185      	movs	r1, #133	; 0x85
 8001094:	2001      	movs	r0, #1
 8001096:	f7ff fe5f 	bl	8000d58 <LoRA_Write_Register>
	}
	return packetLenght;
 800109a:	687b      	ldr	r3, [r7, #4]

}
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <LoRA_sendPacket>:

void LoRA_sendPacket(char * data){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
    LoRA_beginPacket();
 80010ac:	f7ff ff92 	bl	8000fd4 <LoRA_beginPacket>
    for(int i = 0; i < strlen(data); i++){
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	e00a      	b.n	80010cc <LoRA_sendPacket+0x28>
    	LoRA_Write_Register(REG_FIFO, data[i]);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	4413      	add	r3, r2
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	4619      	mov	r1, r3
 80010c0:	2000      	movs	r0, #0
 80010c2:	f7ff fe49 	bl	8000d58 <LoRA_Write_Register>
    for(int i = 0; i < strlen(data); i++){
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	3301      	adds	r3, #1
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff f929 	bl	8000324 <strlen>
 80010d2:	4602      	mov	r2, r0
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d8ed      	bhi.n	80010b6 <LoRA_sendPacket+0x12>
    }
    LoRA_Write_Register(REG_PAYLOAD_LENGTH, strlen(data));
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff f922 	bl	8000324 <strlen>
 80010e0:	4603      	mov	r3, r0
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	4619      	mov	r1, r3
 80010e6:	2022      	movs	r0, #34	; 0x22
 80010e8:	f7ff fe36 	bl	8000d58 <LoRA_Write_Register>
    LoRA_endPacket();
 80010ec:	f7ff ff80 	bl	8000ff0 <LoRA_endPacket>
}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <disarm>:
	int status = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
	return status;
}

int disarm(char* state)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 8001100:	2200      	movs	r2, #0
 8001102:	2102      	movs	r1, #2
 8001104:	4827      	ldr	r0, [pc, #156]	; (80011a4 <disarm+0xac>)
 8001106:	f006 ff0f 	bl	8007f28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2104      	movs	r1, #4
 800110e:	4825      	ldr	r0, [pc, #148]	; (80011a4 <disarm+0xac>)
 8001110:	f006 ff0a 	bl	8007f28 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 8001114:	2200      	movs	r2, #0
 8001116:	2102      	movs	r1, #2
 8001118:	4823      	ldr	r0, [pc, #140]	; (80011a8 <disarm+0xb0>)
 800111a:	f006 ff05 	bl	8007f28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 800111e:	2200      	movs	r2, #0
 8001120:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001124:	4821      	ldr	r0, [pc, #132]	; (80011ac <disarm+0xb4>)
 8001126:	f006 feff 	bl	8007f28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 800112a:	2200      	movs	r2, #0
 800112c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001130:	481e      	ldr	r0, [pc, #120]	; (80011ac <disarm+0xb4>)
 8001132:	f006 fef9 	bl	8007f28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800113c:	481b      	ldr	r0, [pc, #108]	; (80011ac <disarm+0xb4>)
 800113e:	f006 fef3 	bl	8007f28 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	2102      	movs	r1, #2
 8001146:	481a      	ldr	r0, [pc, #104]	; (80011b0 <disarm+0xb8>)
 8001148:	f006 feee 	bl	8007f28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 800114c:	2200      	movs	r2, #0
 800114e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001152:	4818      	ldr	r0, [pc, #96]	; (80011b4 <disarm+0xbc>)
 8001154:	f006 fee8 	bl	8007f28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 8001158:	2200      	movs	r2, #0
 800115a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800115e:	4815      	ldr	r0, [pc, #84]	; (80011b4 <disarm+0xbc>)
 8001160:	f006 fee2 	bl	8007f28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 8001164:	2200      	movs	r2, #0
 8001166:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800116a:	4812      	ldr	r0, [pc, #72]	; (80011b4 <disarm+0xbc>)
 800116c:	f006 fedc 	bl	8007f28 <HAL_GPIO_WritePin>

  LED_Color_Data[7][0] = 255;
 8001170:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <disarm+0xc0>)
 8001172:	22ff      	movs	r2, #255	; 0xff
 8001174:	655a      	str	r2, [r3, #84]	; 0x54
  LED_Color_Data[7][1] = 0;
 8001176:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <disarm+0xc0>)
 8001178:	2200      	movs	r2, #0
 800117a:	659a      	str	r2, [r3, #88]	; 0x58
  LED_Color_Data[7][2] = 0;
 800117c:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <disarm+0xc0>)
 800117e:	2200      	movs	r2, #0
 8001180:	65da      	str	r2, [r3, #92]	; 0x5c
  setLEDs();
 8001182:	f7ff fc09 	bl	8000998 <setLEDs>

  strcpy(state,"DISARMED");
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	490c      	ldr	r1, [pc, #48]	; (80011bc <disarm+0xc4>)
 800118a:	461a      	mov	r2, r3
 800118c:	460b      	mov	r3, r1
 800118e:	cb03      	ldmia	r3!, {r0, r1}
 8001190:	6010      	str	r0, [r2, #0]
 8001192:	6051      	str	r1, [r2, #4]
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	7213      	strb	r3, [r2, #8]
  return 0;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	58020000 	.word	0x58020000
 80011a8:	58020400 	.word	0x58020400
 80011ac:	58021400 	.word	0x58021400
 80011b0:	58021800 	.word	0x58021800
 80011b4:	58021000 	.word	0x58021000
 80011b8:	24000b50 	.word	0x24000b50
 80011bc:	080182a0 	.word	0x080182a0

080011c0 <recv_packet>:
  setLEDs();
  return 0;
}

int recv_packet(char* LoRA_data, int max_length)
{
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  int packet_length = LoRA_parsePacket();
 80011ca:	f7ff ff2a 	bl	8001022 <LoRA_parsePacket>
 80011ce:	60b8      	str	r0, [r7, #8]
  if(max_length-1 < packet_length) //-1 for the null terminator
 80011d0:	683a      	ldr	r2, [r7, #0]
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	dc01      	bgt.n	80011dc <recv_packet+0x1c>
  {
    return 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	e01c      	b.n	8001216 <recv_packet+0x56>
  }
  if(packet_length){
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d018      	beq.n	8001214 <recv_packet+0x54>
    for(int i = 0; i < packet_length; i++){
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	e00a      	b.n	80011fe <recv_packet+0x3e>
      LoRA_data[i] = LoRA_Read_Register(0x00);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	18d4      	adds	r4, r2, r3
 80011ee:	2000      	movs	r0, #0
 80011f0:	f7ff fd8a 	bl	8000d08 <LoRA_Read_Register>
 80011f4:	4603      	mov	r3, r0
 80011f6:	7023      	strb	r3, [r4, #0]
    for(int i = 0; i < packet_length; i++){
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	3301      	adds	r3, #1
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	429a      	cmp	r2, r3
 8001204:	dbf0      	blt.n	80011e8 <recv_packet+0x28>
    }
    LoRA_data[packet_length] = '\0';
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	4413      	add	r3, r2
 800120c:	2200      	movs	r2, #0
 800120e:	701a      	strb	r2, [r3, #0]
    return packet_length;
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	e000      	b.n	8001216 <recv_packet+0x56>
  }
  else{
    return 0;
 8001214:	2300      	movs	r3, #0
  }
}
 8001216:	4618      	mov	r0, r3
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	bd90      	pop	{r4, r7, pc}

0800121e <reliable_send_packet>:

void reliable_send_packet(char *LoRA_data) {
 800121e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001222:	b087      	sub	sp, #28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	466b      	mov	r3, sp
 800122a:	461e      	mov	r6, r3
	uint16_t length = strlen(LoRA_data) + 1; //+1 for the \0
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff f879 	bl	8000324 <strlen>
 8001232:	4603      	mov	r3, r0
 8001234:	b29b      	uxth	r3, r3
 8001236:	3301      	adds	r3, #1
 8001238:	827b      	strh	r3, [r7, #18]
	char acknowledge[length];
 800123a:	8a79      	ldrh	r1, [r7, #18]
 800123c:	460b      	mov	r3, r1
 800123e:	3b01      	subs	r3, #1
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	b28b      	uxth	r3, r1
 8001244:	2200      	movs	r2, #0
 8001246:	4698      	mov	r8, r3
 8001248:	4691      	mov	r9, r2
 800124a:	f04f 0200 	mov.w	r2, #0
 800124e:	f04f 0300 	mov.w	r3, #0
 8001252:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001256:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800125a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800125e:	b28b      	uxth	r3, r1
 8001260:	2200      	movs	r2, #0
 8001262:	461c      	mov	r4, r3
 8001264:	4615      	mov	r5, r2
 8001266:	f04f 0200 	mov.w	r2, #0
 800126a:	f04f 0300 	mov.w	r3, #0
 800126e:	00eb      	lsls	r3, r5, #3
 8001270:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001274:	00e2      	lsls	r2, r4, #3
 8001276:	460b      	mov	r3, r1
 8001278:	3307      	adds	r3, #7
 800127a:	08db      	lsrs	r3, r3, #3
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	ebad 0d03 	sub.w	sp, sp, r3
 8001282:	466b      	mov	r3, sp
 8001284:	3300      	adds	r3, #0
 8001286:	60bb      	str	r3, [r7, #8]
	uint32_t lastTime = HAL_GetTick();
 8001288:	f002 fb90 	bl	80039ac <HAL_GetTick>
 800128c:	6178      	str	r0, [r7, #20]
	LoRA_sendPacket(LoRA_data);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff ff08 	bl	80010a4 <LoRA_sendPacket>
	while (1) {

		if (recv_packet(acknowledge, length)) {
 8001294:	8a7b      	ldrh	r3, [r7, #18]
 8001296:	4619      	mov	r1, r3
 8001298:	68b8      	ldr	r0, [r7, #8]
 800129a:	f7ff ff91 	bl	80011c0 <recv_packet>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d009      	beq.n	80012b8 <reliable_send_packet+0x9a>
			//cehck crc
			if (strcmp(acknowledge, LoRA_data) != 0) {
 80012a4:	6879      	ldr	r1, [r7, #4]
 80012a6:	68b8      	ldr	r0, [r7, #8]
 80012a8:	f7ff f832 	bl	8000310 <strcmp>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d011      	beq.n	80012d6 <reliable_send_packet+0xb8>
				LoRA_sendPacket(LoRA_data);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff fef6 	bl	80010a4 <LoRA_sendPacket>
			} else {
				break;
			}
		}

		if (HAL_GetTick() - lastTime > 1000) {
 80012b8:	f002 fb78 	bl	80039ac <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012c6:	d9e5      	bls.n	8001294 <reliable_send_packet+0x76>
			LoRA_sendPacket(LoRA_data);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff feeb 	bl	80010a4 <LoRA_sendPacket>
			lastTime = HAL_GetTick();
 80012ce:	f002 fb6d 	bl	80039ac <HAL_GetTick>
 80012d2:	6178      	str	r0, [r7, #20]
		if (recv_packet(acknowledge, length)) {
 80012d4:	e7de      	b.n	8001294 <reliable_send_packet+0x76>
				break;
 80012d6:	bf00      	nop
 80012d8:	46b5      	mov	sp, r6
		}
	}
}
 80012da:	bf00      	nop
 80012dc:	371c      	adds	r7, #28
 80012de:	46bd      	mov	sp, r7
 80012e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080012e4 <usbReceiveHandle>:

		reliable_send_packet(message);
	}
}

int usbReceiveHandle(char* output){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	uint32_t temp = usbBytesReady;
 80012ec:	4b0d      	ldr	r3, [pc, #52]	; (8001324 <usbReceiveHandle+0x40>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	60fb      	str	r3, [r7, #12]
	if(usbBytesReady > 0){
 80012f2:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <usbReceiveHandle+0x40>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d00f      	beq.n	800131a <usbReceiveHandle+0x36>
		if(usbBytesReady > 256){
			//crash(2);
		}
		memcpy(output, usbDataBuffer, usbBytesReady);
 80012fa:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <usbReceiveHandle+0x40>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	461a      	mov	r2, r3
 8001300:	4909      	ldr	r1, [pc, #36]	; (8001328 <usbReceiveHandle+0x44>)
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f015 fee2 	bl	80170cc <memcpy>
		output[usbBytesReady] = '\0';
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <usbReceiveHandle+0x40>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	4413      	add	r3, r2
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]
		usbBytesReady = 0;
 8001314:	4b03      	ldr	r3, [pc, #12]	; (8001324 <usbReceiveHandle+0x40>)
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
	}
	return temp;
 800131a:	68fb      	ldr	r3, [r7, #12]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	2400026c 	.word	0x2400026c
 8001328:	2400016c 	.word	0x2400016c
 800132c:	00000000 	.word	0x00000000

08001330 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001332:	f6ad 4d14 	subw	sp, sp, #3092	; 0xc14
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 8001338:	4bd7      	ldr	r3, [pc, #860]	; (8001698 <main+0x368>)
 800133a:	f507 6439 	add.w	r4, r7, #2960	; 0xb90
 800133e:	461d      	mov	r5, r3
 8001340:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001342:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001344:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001348:	c403      	stmia	r4!, {r0, r1}
 800134a:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800134c:	f002 faa8 	bl	80038a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001350:	f000 fb2e 	bl	80019b0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001354:	f000 fba4 	bl	8001aa0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001358:	f001 f92c 	bl	80025b4 <MX_GPIO_Init>
  MX_DMA_Init();
 800135c:	f001 f8ca 	bl	80024f4 <MX_DMA_Init>
  MX_SPI3_Init();
 8001360:	f000 fe24 	bl	8001fac <MX_SPI3_Init>
  MX_FDCAN3_Init();
 8001364:	f000 fcb4 	bl	8001cd0 <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 8001368:	f001 f878 	bl	800245c <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800136c:	f000 fbca 	bl	8001b04 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001370:	f000 ff2e 	bl	80021d0 <MX_TIM4_Init>
  MX_ADC3_Init();
 8001374:	f000 fc3e 	bl	8001bf4 <MX_ADC3_Init>
  MX_SPI2_Init();
 8001378:	f000 fdc2 	bl	8001f00 <MX_SPI2_Init>
  MX_I2C2_Init();
 800137c:	f000 fd0c 	bl	8001d98 <MX_I2C2_Init>
  MX_TIM2_Init();
 8001380:	f000 fe6a 	bl	8002058 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001384:	f000 ffa0 	bl	80022c8 <MX_TIM5_Init>
  MX_TIM3_Init();
 8001388:	f000 febe 	bl	8002108 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 800138c:	f015 f8ea 	bl	8016564 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8001390:	f000 fd60 	bl	8001e54 <MX_SPI1_Init>
  MX_UART4_Init();
 8001394:	f001 f816 	bl	80023c4 <MX_UART4_Init>
  MX_FATFS_Init();
 8001398:	f012 fe78 	bl	801408c <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 800139c:	f000 fd3c 	bl	8001e18 <MX_SDMMC2_SD_Init>
  MX_TIM13_Init();
 80013a0:	f000 ffec 	bl	800237c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

	const int MAX = 50;
 80013a4:	2332      	movs	r3, #50	; 0x32
 80013a6:	f8c7 3bf4 	str.w	r3, [r7, #3060]	; 0xbf4
	const double SPEED = 2.0/2000;
 80013aa:	a3b9      	add	r3, pc, #740	; (adr r3, 8001690 <main+0x360>)
 80013ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b0:	f607 31e8 	addw	r1, r7, #3048	; 0xbe8
 80013b4:	e9c1 2300 	strd	r2, r3, [r1]
	const double r_offset = 0;
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	f04f 0300 	mov.w	r3, #0
 80013c0:	f507 613e 	add.w	r1, r7, #3040	; 0xbe0
 80013c4:	e9c1 2300 	strd	r2, r3, [r1]
	const double g_offset = 1;
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	4bb3      	ldr	r3, [pc, #716]	; (800169c <main+0x36c>)
 80013ce:	f607 31d8 	addw	r1, r7, #3032	; 0xbd8
 80013d2:	e9c1 2300 	strd	r2, r3, [r1]
	const double b_offset = 2;
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013de:	f507 613d 	add.w	r1, r7, #3024	; 0xbd0
 80013e2:	e9c1 2300 	strd	r2, r3, [r1]

	LG2_Write_Register(0x10, 0b00111100); //Accelerometer setup - CTRL1_XL
 80013e6:	213c      	movs	r1, #60	; 0x3c
 80013e8:	2010      	movs	r0, #16
 80013ea:	f7ff f9cb 	bl	8000784 <LG2_Write_Register>
	LG2_Write_Register(0x11, 0b00110000); //Gyroscope setup - CTRL2_G
 80013ee:	2130      	movs	r1, #48	; 0x30
 80013f0:	2011      	movs	r0, #17
 80013f2:	f7ff f9c7 	bl	8000784 <LG2_Write_Register>
	LG2_Write_Register(0x13, 0b00000100); //disables I2C - CTRL4_C
 80013f6:	2104      	movs	r1, #4
 80013f8:	2013      	movs	r0, #19
 80013fa:	f7ff f9c3 	bl	8000784 <LG2_Write_Register>

	HAL_Delay(3000);
 80013fe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001402:	f002 fadf 	bl	80039c4 <HAL_Delay>
	HG2_Write_Register(0x1C, 0b10111111);
 8001406:	21bf      	movs	r1, #191	; 0xbf
 8001408:	201c      	movs	r0, #28
 800140a:	f7ff f967 	bl	80006dc <HG2_Write_Register>
	HAL_Delay(2);
 800140e:	2002      	movs	r0, #2
 8001410:	f002 fad8 	bl	80039c4 <HAL_Delay>

	HG2_Write_Register(0x1B, 0b01011000);
 8001414:	2158      	movs	r1, #88	; 0x58
 8001416:	201b      	movs	r0, #27
 8001418:	f7ff f960 	bl	80006dc <HG2_Write_Register>
	HG2_Write_Register(0x1B, 0b11011000);
 800141c:	21d8      	movs	r1, #216	; 0xd8
 800141e:	201b      	movs	r0, #27
 8001420:	f7ff f95c 	bl	80006dc <HG2_Write_Register>

	float rotZ = 0;
 8001424:	f04f 0300 	mov.w	r3, #0
 8001428:	f607 32cc 	addw	r2, r7, #3020	; 0xbcc
 800142c:	6013      	str	r3, [r2, #0]
	uint32_t lastTime = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	f8c7 3c0c 	str.w	r3, [r7, #3084]	; 0xc0c

	float calOmegaX = 0;
 8001434:	f04f 0300 	mov.w	r3, #0
 8001438:	f607 4208 	addw	r2, r7, #3080	; 0xc08
 800143c:	6013      	str	r3, [r2, #0]
	float calOmegaY = 0;
 800143e:	f04f 0300 	mov.w	r3, #0
 8001442:	f607 4204 	addw	r2, r7, #3076	; 0xc04
 8001446:	6013      	str	r3, [r2, #0]
	float calOmegaZ = 0;
 8001448:	f04f 0300 	mov.w	r3, #0
 800144c:	f507 6240 	add.w	r2, r7, #3072	; 0xc00
 8001450:	6013      	str	r3, [r2, #0]
	//HAL_Delay(2000);
	for(int i = 0; i < 500; i++){
 8001452:	2300      	movs	r3, #0
 8001454:	f8c7 3bfc 	str.w	r3, [r7, #3068]	; 0xbfc
 8001458:	e02e      	b.n	80014b8 <main+0x188>
		calOmegaX += LG2_Get_Gyro_X();
 800145a:	f7ff f9bb 	bl	80007d4 <LG2_Get_Gyro_X>
 800145e:	eeb0 7a40 	vmov.f32	s14, s0
 8001462:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 8001466:	edd3 7a00 	vldr	s15, [r3]
 800146a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800146e:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 8001472:	edc3 7a00 	vstr	s15, [r3]
		calOmegaY += LG2_Get_Gyro_Y();
 8001476:	f7ff f9dd 	bl	8000834 <LG2_Get_Gyro_Y>
 800147a:	eeb0 7a40 	vmov.f32	s14, s0
 800147e:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 8001482:	edd3 7a00 	vldr	s15, [r3]
 8001486:	ee77 7a87 	vadd.f32	s15, s15, s14
 800148a:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 800148e:	edc3 7a00 	vstr	s15, [r3]
		calOmegaZ += LG2_Get_Gyro_Z();
 8001492:	f7ff fa01 	bl	8000898 <LG2_Get_Gyro_Z>
 8001496:	eeb0 7a40 	vmov.f32	s14, s0
 800149a:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 800149e:	edd3 7a00 	vldr	s15, [r3]
 80014a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014a6:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80014aa:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < 500; i++){
 80014ae:	f8d7 3bfc 	ldr.w	r3, [r7, #3068]	; 0xbfc
 80014b2:	3301      	adds	r3, #1
 80014b4:	f8c7 3bfc 	str.w	r3, [r7, #3068]	; 0xbfc
 80014b8:	f8d7 3bfc 	ldr.w	r3, [r7, #3068]	; 0xbfc
 80014bc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014c0:	dbcb      	blt.n	800145a <main+0x12a>

		//HAL_Delay(20);
	}
	calOmegaX /= 500;
 80014c2:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 80014c6:	ed93 7a00 	vldr	s14, [r3]
 80014ca:	eddf 6a75 	vldr	s13, [pc, #468]	; 80016a0 <main+0x370>
 80014ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014d2:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 80014d6:	edc3 7a00 	vstr	s15, [r3]
	calOmegaY /= 500;
 80014da:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 80014de:	ed93 7a00 	vldr	s14, [r3]
 80014e2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80016a0 <main+0x370>
 80014e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ea:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 80014ee:	edc3 7a00 	vstr	s15, [r3]
	calOmegaZ /= 500;
 80014f2:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80014f6:	ed93 7a00 	vldr	s14, [r3]
 80014fa:	eddf 6a69 	vldr	s13, [pc, #420]	; 80016a0 <main+0x370>
 80014fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001502:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8001506:	edc3 7a00 	vstr	s15, [r3]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 800150a:	2201      	movs	r2, #1
 800150c:	2101      	movs	r1, #1
 800150e:	4865      	ldr	r0, [pc, #404]	; (80016a4 <main+0x374>)
 8001510:	f006 fd0a 	bl	8007f28 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001514:	20c8      	movs	r0, #200	; 0xc8
 8001516:	f002 fa55 	bl	80039c4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);
 800151a:	2200      	movs	r2, #0
 800151c:	2101      	movs	r1, #1
 800151e:	4861      	ldr	r0, [pc, #388]	; (80016a4 <main+0x374>)
 8001520:	f006 fd02 	bl	8007f28 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001524:	20c8      	movs	r0, #200	; 0xc8
 8001526:	f002 fa4d 	bl	80039c4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 800152a:	2201      	movs	r2, #1
 800152c:	2101      	movs	r1, #1
 800152e:	485d      	ldr	r0, [pc, #372]	; (80016a4 <main+0x374>)
 8001530:	f006 fcfa 	bl	8007f28 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001534:	20c8      	movs	r0, #200	; 0xc8
 8001536:	f002 fa45 	bl	80039c4 <HAL_Delay>


	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 800153a:	2201      	movs	r2, #1
 800153c:	2104      	movs	r1, #4
 800153e:	485a      	ldr	r0, [pc, #360]	; (80016a8 <main+0x378>)
 8001540:	f006 fcf2 	bl	8007f28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 8001544:	2201      	movs	r2, #1
 8001546:	2108      	movs	r1, #8
 8001548:	4857      	ldr	r0, [pc, #348]	; (80016a8 <main+0x378>)
 800154a:	f006 fced 	bl	8007f28 <HAL_GPIO_WritePin>


    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800154e:	2100      	movs	r1, #0
 8001550:	4856      	ldr	r0, [pc, #344]	; (80016ac <main+0x37c>)
 8001552:	f00d ffa9 	bl	800f4a8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001556:	2104      	movs	r1, #4
 8001558:	4854      	ldr	r0, [pc, #336]	; (80016ac <main+0x37c>)
 800155a:	f00d ffa5 	bl	800f4a8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800155e:	2108      	movs	r1, #8
 8001560:	4852      	ldr	r0, [pc, #328]	; (80016ac <main+0x37c>)
 8001562:	f00d ffa1 	bl	800f4a8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001566:	210c      	movs	r1, #12
 8001568:	4850      	ldr	r0, [pc, #320]	; (80016ac <main+0x37c>)
 800156a:	f00d ff9d 	bl	800f4a8 <HAL_TIM_PWM_Start>

    setServo(1, 90);
 800156e:	ed9f 0a50 	vldr	s0, [pc, #320]	; 80016b0 <main+0x380>
 8001572:	2001      	movs	r0, #1
 8001574:	f7ff f9c8 	bl	8000908 <setServo>
    setServo(2, 180);
 8001578:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 80016b4 <main+0x384>
 800157c:	2002      	movs	r0, #2
 800157e:	f7ff f9c3 	bl	8000908 <setServo>
    setServo(3, 0);
 8001582:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80016b8 <main+0x388>
 8001586:	2003      	movs	r0, #3
 8001588:	f7ff f9be 	bl	8000908 <setServo>
    setServo(4, 45);
 800158c:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 80016bc <main+0x38c>
 8001590:	2004      	movs	r0, #4
 8001592:	f7ff f9b9 	bl	8000908 <setServo>
//    				}
//    			}
//    		}
//    	}
//    	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
	  LoRA_begin(868000000);
 8001596:	484a      	ldr	r0, [pc, #296]	; (80016c0 <main+0x390>)
 8001598:	f7ff fcc8 	bl	8000f2c <LoRA_begin>
		LoRA_sendPacket("whatever");
		HAL_Delay(1000);
	}
*/

	int connected = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	f8c7 3bc8 	str.w	r3, [r7, #3016]	; 0xbc8
	long last_packet = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	f8c7 3bc4 	str.w	r3, [r7, #3012]	; 0xbc4
	int ARMED = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	f8c7 3bc0 	str.w	r3, [r7, #3008]	; 0xbc0

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//HAL_ADC_Start_DMA(&hadc3, &read_Data, 1);

  int max_packet_count = 0;
 80015ae:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80015b2:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
  int stream_counter = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	f8c7 3bbc 	str.w	r3, [r7, #3004]	; 0xbbc
  char state[MAX_PAYLOAD_LENGHT] = "";
 80015c0:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80015c4:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	3304      	adds	r3, #4
 80015ce:	22f6      	movs	r2, #246	; 0xf6
 80015d0:	2100      	movs	r1, #0
 80015d2:	4618      	mov	r0, r3
 80015d4:	f015 fd3e 	bl	8017054 <memset>
  char acknowledge[MAX_PAYLOAD_LENGHT];
  char previous_packet[MAX_PAYLOAD_LENGHT];
  char recieved_packet[MAX_PAYLOAD_LENGHT];
  char response_packet[MAX_PAYLOAD_LENGHT];
  char sendMessage[MAX_PAYLOAD_LENGHT];
  int last = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	f8c7 3bb8 	str.w	r3, [r7, #3000]	; 0xbb8
  int packets_streamed = 50;
 80015de:	2332      	movs	r3, #50	; 0x32
 80015e0:	f8c7 3bb4 	str.w	r3, [r7, #2996]	; 0xbb4
  int packetId;
  int have_recieved_anything = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
  char communication_state[50] = "SENDING RELIABLE";
 80015ea:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80015ee:	f5a3 6620 	sub.w	r6, r3, #2560	; 0xa00
 80015f2:	4b34      	ldr	r3, [pc, #208]	; (80016c4 <main+0x394>)
 80015f4:	4634      	mov	r4, r6
 80015f6:	461d      	mov	r5, r3
 80015f8:	6828      	ldr	r0, [r5, #0]
 80015fa:	6869      	ldr	r1, [r5, #4]
 80015fc:	68aa      	ldr	r2, [r5, #8]
 80015fe:	68eb      	ldr	r3, [r5, #12]
 8001600:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001602:	7c2b      	ldrb	r3, [r5, #16]
 8001604:	7023      	strb	r3, [r4, #0]
 8001606:	f106 0311 	add.w	r3, r6, #17
 800160a:	2221      	movs	r2, #33	; 0x21
 800160c:	2100      	movs	r1, #0
 800160e:	4618      	mov	r0, r3
 8001610:	f015 fd20 	bl	8017054 <memset>
  uint32_t previousTime = HAL_GetTick();
 8001614:	f002 f9ca 	bl	80039ac <HAL_GetTick>
 8001618:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
  disarm(state);
 800161c:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fd69 	bl	80010f8 <disarm>
  LoRA_begin(868000000);
 8001626:	4826      	ldr	r0, [pc, #152]	; (80016c0 <main+0x390>)
 8001628:	f7ff fc80 	bl	8000f2c <LoRA_begin>
		  CDC_Transmit_HS(recieved_packet, strlen(recieved_packet));
	  }
  }*/

while (1) {
    if(strcmp(communication_state,"RECEIVING RELIABLE") == 0)
 800162c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001630:	4925      	ldr	r1, [pc, #148]	; (80016c8 <main+0x398>)
 8001632:	4618      	mov	r0, r3
 8001634:	f7fe fe6c 	bl	8000310 <strcmp>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	f040 809c 	bne.w	8001778 <main+0x448>
    {
      if(recv_packet(recieved_packet, MAX_PAYLOAD_LENGHT))
 8001640:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001644:	21fa      	movs	r1, #250	; 0xfa
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fdba 	bl	80011c0 <recv_packet>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 8080 	beq.w	8001754 <main+0x424>
      {
    	  have_recieved_anything = 1;
 8001654:	2301      	movs	r3, #1
 8001656:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
        previousTime = HAL_GetTick();
 800165a:	f002 f9a7 	bl	80039ac <HAL_GetTick>
 800165e:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
        //HAL_Delay(100);
        //CDC_Transmit_HS("is arm 0succ\n", strlen("is arm 0succ\n"));
        //HAL_Delay(100);
        if(sscanf(recieved_packet, "$ %s", state) == 1)
 8001662:	f607 022c 	addw	r2, r7, #2092	; 0x82c
 8001666:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800166a:	4918      	ldr	r1, [pc, #96]	; (80016cc <main+0x39c>)
 800166c:	4618      	mov	r0, r3
 800166e:	f015 fcc3 	bl	8016ff8 <siscanf>
 8001672:	4603      	mov	r3, r0
 8001674:	2b01      	cmp	r3, #1
 8001676:	d12b      	bne.n	80016d0 <main+0x3a0>
        {
          strcpy(communication_state,"SENDING RELIABLE");
 8001678:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800167c:	4a11      	ldr	r2, [pc, #68]	; (80016c4 <main+0x394>)
 800167e:	461c      	mov	r4, r3
 8001680:	4615      	mov	r5, r2
 8001682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001686:	682b      	ldr	r3, [r5, #0]
 8001688:	7023      	strb	r3, [r4, #0]
 800168a:	e166      	b.n	800195a <main+0x62a>
 800168c:	f3af 8000 	nop.w
 8001690:	d2f1a9fc 	.word	0xd2f1a9fc
 8001694:	3f50624d 	.word	0x3f50624d
 8001698:	08018360 	.word	0x08018360
 800169c:	3ff00000 	.word	0x3ff00000
 80016a0:	43fa0000 	.word	0x43fa0000
 80016a4:	58020c00 	.word	0x58020c00
 80016a8:	58021800 	.word	0x58021800
 80016ac:	24001168 	.word	0x24001168
 80016b0:	42b40000 	.word	0x42b40000
 80016b4:	43340000 	.word	0x43340000
 80016b8:	00000000 	.word	0x00000000
 80016bc:	42340000 	.word	0x42340000
 80016c0:	33bca100 	.word	0x33bca100
 80016c4:	08018308 	.word	0x08018308
 80016c8:	080182ec 	.word	0x080182ec
 80016cc:	08018300 	.word	0x08018300
        }
        else if(sscanf(recieved_packet, "! %d", &max_packet_count) == 1)
 80016d0:	f607 1228 	addw	r2, r7, #2344	; 0x928
 80016d4:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80016d8:	49ab      	ldr	r1, [pc, #684]	; (8001988 <main+0x658>)
 80016da:	4618      	mov	r0, r3
 80016dc:	f015 fc8c 	bl	8016ff8 <siscanf>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d10b      	bne.n	80016fe <main+0x3ce>
        {
          strcpy(communication_state,"SENDING STREAM");
 80016e6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80016ea:	4aa8      	ldr	r2, [pc, #672]	; (800198c <main+0x65c>)
 80016ec:	461c      	mov	r4, r3
 80016ee:	4613      	mov	r3, r2
 80016f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016f2:	c407      	stmia	r4!, {r0, r1, r2}
 80016f4:	8023      	strh	r3, [r4, #0]
 80016f6:	3402      	adds	r4, #2
 80016f8:	0c1b      	lsrs	r3, r3, #16
 80016fa:	7023      	strb	r3, [r4, #0]
 80016fc:	e12d      	b.n	800195a <main+0x62a>
        }
        else if(strcmp(recieved_packet, previous_packet)==0)
 80016fe:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8001702:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001706:	4611      	mov	r1, r2
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe fe01 	bl	8000310 <strcmp>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d105      	bne.n	8001720 <main+0x3f0>
        {
          //send acknowledge again
          LoRA_sendPacket(recieved_packet);
 8001714:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fcc3 	bl	80010a4 <LoRA_sendPacket>
 800171e:	e11c      	b.n	800195a <main+0x62a>
        }
        else
        {
          //CDC_Transmit_HS("is arm 1succ\n", strlen("is arm 1succ\n"));
          //HAL_Delay(100);
          strcpy(previous_packet, recieved_packet);
 8001720:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 8001724:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8001728:	4611      	mov	r1, r2
 800172a:	4618      	mov	r0, r3
 800172c:	f015 fcc6 	bl	80170bc <strcpy>
          LoRA_sendPacket(recieved_packet);
 8001730:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fcb5 	bl	80010a4 <LoRA_sendPacket>
          //HAL_Delay(100);
          CDC_Transmit_HS(recieved_packet, strlen(recieved_packet));
 800173a:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800173e:	4618      	mov	r0, r3
 8001740:	f7fe fdf0 	bl	8000324 <strlen>
 8001744:	4602      	mov	r2, r0
 8001746:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800174a:	4611      	mov	r1, r2
 800174c:	4618      	mov	r0, r3
 800174e:	f014 ffdf 	bl	8016710 <CDC_Transmit_HS>
 8001752:	e102      	b.n	800195a <main+0x62a>
        }
      } else if (HAL_GetTick()-previousTime > 1000)
 8001754:	f002 f92a 	bl	80039ac <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	f8d7 3bf8 	ldr.w	r3, [r7, #3064]	; 0xbf8
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001764:	f240 80f9 	bls.w	800195a <main+0x62a>
      /*else if((!have_recieved_anything && HAL_GetTick()-previousTime > 1000) ||
    		  (have_recieved_anything && HAL_GetTick()-previousTime > 5000))*/
      {
        previousTime = HAL_GetTick();
 8001768:	f002 f920 	bl	80039ac <HAL_GetTick>
 800176c:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
        //give up SENDING
        LoRA_sendPacket("$");
 8001770:	4887      	ldr	r0, [pc, #540]	; (8001990 <main+0x660>)
 8001772:	f7ff fc97 	bl	80010a4 <LoRA_sendPacket>
 8001776:	e0f0      	b.n	800195a <main+0x62a>
      }
    }
    else if(strcmp(communication_state,"RECEIVING STREAM") == 0)
 8001778:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800177c:	4985      	ldr	r1, [pc, #532]	; (8001994 <main+0x664>)
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe fdc6 	bl	8000310 <strcmp>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d14a      	bne.n	8001820 <main+0x4f0>
    {
      if(recv_packet(recieved_packet, MAX_PAYLOAD_LENGHT))
 800178a:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800178e:	21fa      	movs	r1, #250	; 0xfa
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fd15 	bl	80011c0 <recv_packet>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d025      	beq.n	80017e8 <main+0x4b8>
      {
        previousTime = HAL_GetTick();
 800179c:	f002 f906 	bl	80039ac <HAL_GetTick>
 80017a0:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
        if(sscanf(recieved_packet, "$ %s", state) == 1)
 80017a4:	f607 022c 	addw	r2, r7, #2092	; 0x82c
 80017a8:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80017ac:	497a      	ldr	r1, [pc, #488]	; (8001998 <main+0x668>)
 80017ae:	4618      	mov	r0, r3
 80017b0:	f015 fc22 	bl	8016ff8 <siscanf>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d109      	bne.n	80017ce <main+0x49e>
        {
          strcpy(communication_state,"SENDING RELIABLE");
 80017ba:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80017be:	4a77      	ldr	r2, [pc, #476]	; (800199c <main+0x66c>)
 80017c0:	461c      	mov	r4, r3
 80017c2:	4615      	mov	r5, r2
 80017c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017c8:	682b      	ldr	r3, [r5, #0]
 80017ca:	7023      	strb	r3, [r4, #0]
 80017cc:	e0c5      	b.n	800195a <main+0x62a>
        }
        else
        {
          CDC_Transmit_HS(recieved_packet, strlen(recieved_packet));
 80017ce:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7fe fda6 	bl	8000324 <strlen>
 80017d8:	4602      	mov	r2, r0
 80017da:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80017de:	4611      	mov	r1, r2
 80017e0:	4618      	mov	r0, r3
 80017e2:	f014 ff95 	bl	8016710 <CDC_Transmit_HS>
 80017e6:	e0b8      	b.n	800195a <main+0x62a>
        }
      }
      else if(HAL_GetTick()-previousTime > 1000)
 80017e8:	f002 f8e0 	bl	80039ac <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	f8d7 3bf8 	ldr.w	r3, [r7, #3064]	; 0xbf8
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017f8:	f240 80af 	bls.w	800195a <main+0x62a>
      {
        previousTime = HAL_GetTick();
 80017fc:	f002 f8d6 	bl	80039ac <HAL_GetTick>
 8001800:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
        //give up SENDING
        sprintf(sendMessage, "! %d", packets_streamed);
 8001804:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8001808:	f8d7 2bb4 	ldr.w	r2, [r7, #2996]	; 0xbb4
 800180c:	495e      	ldr	r1, [pc, #376]	; (8001988 <main+0x658>)
 800180e:	4618      	mov	r0, r3
 8001810:	f015 fbd2 	bl	8016fb8 <siprintf>
        LoRA_sendPacket(sendMessage);
 8001814:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff fc43 	bl	80010a4 <LoRA_sendPacket>
 800181e:	e09c      	b.n	800195a <main+0x62a>
      }
    }
    else if(strcmp(communication_state,"SENDING STREAM") == 0)
 8001820:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001824:	4959      	ldr	r1, [pc, #356]	; (800198c <main+0x65c>)
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe fd72 	bl	8000310 <strcmp>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d126      	bne.n	8001880 <main+0x550>
    {
      if(max_packet_count == 0)
 8001832:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001836:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d113      	bne.n	8001868 <main+0x538>
      {
        strcpy(communication_state,"RECEIVING RELIABLE");
 8001840:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001844:	4a56      	ldr	r2, [pc, #344]	; (80019a0 <main+0x670>)
 8001846:	461c      	mov	r4, r3
 8001848:	4615      	mov	r5, r2
 800184a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800184c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800184e:	682b      	ldr	r3, [r5, #0]
 8001850:	461a      	mov	r2, r3
 8001852:	8022      	strh	r2, [r4, #0]
 8001854:	3402      	adds	r4, #2
 8001856:	0c1b      	lsrs	r3, r3, #16
 8001858:	7023      	strb	r3, [r4, #0]
        have_recieved_anything = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
        LoRA_sendPacket("$");
 8001860:	484b      	ldr	r0, [pc, #300]	; (8001990 <main+0x660>)
 8001862:	f7ff fc1f 	bl	80010a4 <LoRA_sendPacket>
 8001866:	e078      	b.n	800195a <main+0x62a>
      }
      else
      {
        //send whatever
        max_packet_count--;
 8001868:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 800186c:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	1e5a      	subs	r2, r3, #1
 8001874:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001878:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	e06c      	b.n	800195a <main+0x62a>
      }

    }
    else if(strcmp(communication_state,"SENDING RELIABLE") == 0)
 8001880:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001884:	4945      	ldr	r1, [pc, #276]	; (800199c <main+0x66c>)
 8001886:	4618      	mov	r0, r3
 8001888:	f7fe fd42 	bl	8000310 <strcmp>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d163      	bne.n	800195a <main+0x62a>
    {
	  	 CDC_Transmit_HS(state, strlen(state));
 8001892:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8001896:	4618      	mov	r0, r3
 8001898:	f7fe fd44 	bl	8000324 <strlen>
 800189c:	4602      	mov	r2, r0
 800189e:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 80018a2:	4611      	mov	r1, r2
 80018a4:	4618      	mov	r0, r3
 80018a6:	f014 ff33 	bl	8016710 <CDC_Transmit_HS>

    	//get input
    	char input[usbBufferLen];
    	usbReceiveHandle(input);
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff fd19 	bl	80012e4 <usbReceiveHandle>

    	while(!usbReceiveHandle(input))
 80018b2:	bf00      	nop
 80018b4:	1d3b      	adds	r3, r7, #4
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff fd14 	bl	80012e4 <usbReceiveHandle>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0f8      	beq.n	80018b4 <main+0x584>
    	{}

      reliable_send_packet(input);
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff fcaa 	bl	800121e <reliable_send_packet>

	  	char debug[usbBufferLen+10];
	  	sprintf(debug, "Debug: %s\n", input);
 80018ca:	1d3a      	adds	r2, r7, #4
 80018cc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80018d0:	4934      	ldr	r1, [pc, #208]	; (80019a4 <main+0x674>)
 80018d2:	4618      	mov	r0, r3
 80018d4:	f015 fb70 	bl	8016fb8 <siprintf>
	  	CDC_Transmit_HS(debug, strlen(debug));
 80018d8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe fd21 	bl	8000324 <strlen>
 80018e2:	4602      	mov	r2, r0
 80018e4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80018e8:	4611      	mov	r1, r2
 80018ea:	4618      	mov	r0, r3
 80018ec:	f014 ff10 	bl	8016710 <CDC_Transmit_HS>

      if(strcmp(input,"FIRE")==0)
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	492d      	ldr	r1, [pc, #180]	; (80019a8 <main+0x678>)
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe fd0b 	bl	8000310 <strcmp>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d116      	bne.n	800192e <main+0x5fe>
      {
        strcpy(communication_state,"RECEIVING STREAM");
 8001900:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001904:	4a23      	ldr	r2, [pc, #140]	; (8001994 <main+0x664>)
 8001906:	461c      	mov	r4, r3
 8001908:	4615      	mov	r5, r2
 800190a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800190c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800190e:	682b      	ldr	r3, [r5, #0]
 8001910:	7023      	strb	r3, [r4, #0]
        sprintf(sendMessage, "! %d", packets_streamed);
 8001912:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8001916:	f8d7 2bb4 	ldr.w	r2, [r7, #2996]	; 0xbb4
 800191a:	491b      	ldr	r1, [pc, #108]	; (8001988 <main+0x658>)
 800191c:	4618      	mov	r0, r3
 800191e:	f015 fb4b 	bl	8016fb8 <siprintf>
        LoRA_sendPacket(sendMessage);
 8001922:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff fbbc 	bl	80010a4 <LoRA_sendPacket>
 800192c:	e015      	b.n	800195a <main+0x62a>
      }
      else
      {
        strcpy(communication_state,"RECEIVING RELIABLE");
 800192e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001932:	4a1b      	ldr	r2, [pc, #108]	; (80019a0 <main+0x670>)
 8001934:	461c      	mov	r4, r3
 8001936:	4615      	mov	r5, r2
 8001938:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800193a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800193c:	682b      	ldr	r3, [r5, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	8022      	strh	r2, [r4, #0]
 8001942:	3402      	adds	r4, #2
 8001944:	0c1b      	lsrs	r3, r3, #16
 8001946:	7023      	strb	r3, [r4, #0]
        have_recieved_anything = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
        HAL_Delay(100);
 800194e:	2064      	movs	r0, #100	; 0x64
 8001950:	f002 f838 	bl	80039c4 <HAL_Delay>
        LoRA_sendPacket("$");
 8001954:	480e      	ldr	r0, [pc, #56]	; (8001990 <main+0x660>)
 8001956:	f7ff fba5 	bl	80010a4 <LoRA_sendPacket>
//			LED_Color_Data[i][0] = (uint32_t)MAX*triangle_space(color_offset+r_offset);
//			LED_Color_Data[i][1] = (uint32_t)MAX*triangle_space(color_offset+g_offset);
//			LED_Color_Data[i][2] = (uint32_t)MAX*triangle_space(color_offset+b_offset);
//		}

		float timeElapsed = ((float)(HAL_GetTick() - lastTime)) / 1000;
 800195a:	f002 f827 	bl	80039ac <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	f8d7 3c0c 	ldr.w	r3, [r7, #3084]	; 0xc0c
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	ee07 3a90 	vmov	s15, r3
 800196a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800196e:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80019ac <main+0x67c>
 8001972:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001976:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 800197a:	edc3 7a00 	vstr	s15, [r3]

		//float GyroX = LG2_Get_Gyro_X() - calOmegaX;
		//float GyroY = LG2_Get_Gyro_Y() - calOmegaY;
		//float GyroZ = LG2_Get_Gyro_Z() - calOmegaZ;

		lastTime = HAL_GetTick();
 800197e:	f002 f815 	bl	80039ac <HAL_GetTick>
 8001982:	f8c7 0c0c 	str.w	r0, [r7, #3084]	; 0xc0c
while (1) {
 8001986:	e651      	b.n	800162c <main+0x2fc>
 8001988:	0801831c 	.word	0x0801831c
 800198c:	08018324 	.word	0x08018324
 8001990:	08018334 	.word	0x08018334
 8001994:	08018338 	.word	0x08018338
 8001998:	08018300 	.word	0x08018300
 800199c:	08018308 	.word	0x08018308
 80019a0:	080182ec 	.word	0x080182ec
 80019a4:	0801834c 	.word	0x0801834c
 80019a8:	08018358 	.word	0x08018358
 80019ac:	447a0000 	.word	0x447a0000

080019b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b09c      	sub	sp, #112	; 0x70
 80019b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ba:	224c      	movs	r2, #76	; 0x4c
 80019bc:	2100      	movs	r1, #0
 80019be:	4618      	mov	r0, r3
 80019c0:	f015 fb48 	bl	8017054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019c4:	1d3b      	adds	r3, r7, #4
 80019c6:	2220      	movs	r2, #32
 80019c8:	2100      	movs	r1, #0
 80019ca:	4618      	mov	r0, r3
 80019cc:	f015 fb42 	bl	8017054 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80019d0:	2002      	movs	r0, #2
 80019d2:	f007 febd 	bl	8009750 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80019d6:	2300      	movs	r3, #0
 80019d8:	603b      	str	r3, [r7, #0]
 80019da:	4b30      	ldr	r3, [pc, #192]	; (8001a9c <SystemClock_Config+0xec>)
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019e2:	4a2e      	ldr	r2, [pc, #184]	; (8001a9c <SystemClock_Config+0xec>)
 80019e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019e8:	6193      	str	r3, [r2, #24]
 80019ea:	4b2c      	ldr	r3, [pc, #176]	; (8001a9c <SystemClock_Config+0xec>)
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019f2:	603b      	str	r3, [r7, #0]
 80019f4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80019f6:	bf00      	nop
 80019f8:	4b28      	ldr	r3, [pc, #160]	; (8001a9c <SystemClock_Config+0xec>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a04:	d1f8      	bne.n	80019f8 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001a06:	2322      	movs	r3, #34	; 0x22
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001a0e:	2340      	movs	r3, #64	; 0x40
 8001a10:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001a12:	2301      	movs	r3, #1
 8001a14:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a16:	2302      	movs	r3, #2
 8001a18:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a1e:	2304      	movs	r3, #4
 8001a20:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001a22:	230c      	movs	r3, #12
 8001a24:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001a26:	2301      	movs	r3, #1
 8001a28:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8001a2a:	230c      	movs	r3, #12
 8001a2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001a32:	230c      	movs	r3, #12
 8001a34:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001a36:	2300      	movs	r3, #0
 8001a38:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a42:	4618      	mov	r0, r3
 8001a44:	f007 fece 	bl	80097e4 <HAL_RCC_OscConfig>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001a4e:	f000 ff1b 	bl	8002888 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a52:	233f      	movs	r3, #63	; 0x3f
 8001a54:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a56:	2303      	movs	r3, #3
 8001a58:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001a5e:	2308      	movs	r3, #8
 8001a60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001a62:	2340      	movs	r3, #64	; 0x40
 8001a64:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001a66:	2340      	movs	r3, #64	; 0x40
 8001a68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001a6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a6e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001a70:	2340      	movs	r3, #64	; 0x40
 8001a72:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a74:	1d3b      	adds	r3, r7, #4
 8001a76:	2101      	movs	r1, #1
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f008 fa8d 	bl	8009f98 <HAL_RCC_ClockConfig>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001a84:	f000 ff00 	bl	8002888 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001a88:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f008 fc38 	bl	800a304 <HAL_RCC_MCOConfig>
}
 8001a94:	bf00      	nop
 8001a96:	3770      	adds	r7, #112	; 0x70
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	58024800 	.word	0x58024800

08001aa0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b0ae      	sub	sp, #184	; 0xb8
 8001aa4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aa6:	463b      	mov	r3, r7
 8001aa8:	22b8      	movs	r2, #184	; 0xb8
 8001aaa:	2100      	movs	r1, #0
 8001aac:	4618      	mov	r0, r3
 8001aae:	f015 fad1 	bl	8017054 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 8001ab2:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8001ab6:	f04f 0300 	mov.w	r3, #0
 8001aba:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001abe:	2304      	movs	r3, #4
 8001ac0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001ac2:	230c      	movs	r3, #12
 8001ac4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001ac6:	2304      	movs	r3, #4
 8001ac8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001aca:	2302      	movs	r3, #2
 8001acc:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001ad2:	23c0      	movs	r3, #192	; 0xc0
 8001ad4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001ade:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ae2:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aea:	463b      	mov	r3, r7
 8001aec:	4618      	mov	r0, r3
 8001aee:	f008 fe49 	bl	800a784 <HAL_RCCEx_PeriphCLKConfig>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8001af8:	f000 fec6 	bl	8002888 <Error_Handler>
  }
}
 8001afc:	bf00      	nop
 8001afe:	37b8      	adds	r7, #184	; 0xb8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08c      	sub	sp, #48	; 0x30
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001b0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b16:	463b      	mov	r3, r7
 8001b18:	2224      	movs	r2, #36	; 0x24
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f015 fa99 	bl	8017054 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b22:	4b31      	ldr	r3, [pc, #196]	; (8001be8 <MX_ADC1_Init+0xe4>)
 8001b24:	4a31      	ldr	r2, [pc, #196]	; (8001bec <MX_ADC1_Init+0xe8>)
 8001b26:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001b28:	4b2f      	ldr	r3, [pc, #188]	; (8001be8 <MX_ADC1_Init+0xe4>)
 8001b2a:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001b2e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001b30:	4b2d      	ldr	r3, [pc, #180]	; (8001be8 <MX_ADC1_Init+0xe4>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b36:	4b2c      	ldr	r3, [pc, #176]	; (8001be8 <MX_ADC1_Init+0xe4>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b3c:	4b2a      	ldr	r3, [pc, #168]	; (8001be8 <MX_ADC1_Init+0xe4>)
 8001b3e:	2204      	movs	r2, #4
 8001b40:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001b42:	4b29      	ldr	r3, [pc, #164]	; (8001be8 <MX_ADC1_Init+0xe4>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b48:	4b27      	ldr	r3, [pc, #156]	; (8001be8 <MX_ADC1_Init+0xe4>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001b4e:	4b26      	ldr	r3, [pc, #152]	; (8001be8 <MX_ADC1_Init+0xe4>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b54:	4b24      	ldr	r3, [pc, #144]	; (8001be8 <MX_ADC1_Init+0xe4>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b5c:	4b22      	ldr	r3, [pc, #136]	; (8001be8 <MX_ADC1_Init+0xe4>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b62:	4b21      	ldr	r3, [pc, #132]	; (8001be8 <MX_ADC1_Init+0xe4>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001b68:	4b1f      	ldr	r3, [pc, #124]	; (8001be8 <MX_ADC1_Init+0xe4>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001b6e:	4b1e      	ldr	r3, [pc, #120]	; (8001be8 <MX_ADC1_Init+0xe4>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001b74:	4b1c      	ldr	r3, [pc, #112]	; (8001be8 <MX_ADC1_Init+0xe4>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001b7a:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <MX_ADC1_Init+0xe4>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b82:	4819      	ldr	r0, [pc, #100]	; (8001be8 <MX_ADC1_Init+0xe4>)
 8001b84:	f002 f99e 	bl	8003ec4 <HAL_ADC_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001b8e:	f000 fe7b 	bl	8002888 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001b92:	2300      	movs	r3, #0
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4812      	ldr	r0, [pc, #72]	; (8001be8 <MX_ADC1_Init+0xe4>)
 8001b9e:	f003 f9d9 	bl	8004f54 <HAL_ADCEx_MultiModeConfigChannel>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001ba8:	f000 fe6e 	bl	8002888 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <MX_ADC1_Init+0xec>)
 8001bae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bb0:	2306      	movs	r3, #6
 8001bb2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001bb8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001bbc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001bbe:	2304      	movs	r3, #4
 8001bc0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bcc:	463b      	mov	r3, r7
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4805      	ldr	r0, [pc, #20]	; (8001be8 <MX_ADC1_Init+0xe4>)
 8001bd2:	f002 fb7f 	bl	80042d4 <HAL_ADC_ConfigChannel>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001bdc:	f000 fe54 	bl	8002888 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001be0:	bf00      	nop
 8001be2:	3730      	adds	r7, #48	; 0x30
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	24000bf8 	.word	0x24000bf8
 8001bec:	40022000 	.word	0x40022000
 8001bf0:	2a000400 	.word	0x2a000400

08001bf4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08a      	sub	sp, #40	; 0x28
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bfa:	1d3b      	adds	r3, r7, #4
 8001bfc:	2224      	movs	r2, #36	; 0x24
 8001bfe:	2100      	movs	r1, #0
 8001c00:	4618      	mov	r0, r3
 8001c02:	f015 fa27 	bl	8017054 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001c06:	4b2f      	ldr	r3, [pc, #188]	; (8001cc4 <MX_ADC3_Init+0xd0>)
 8001c08:	4a2f      	ldr	r2, [pc, #188]	; (8001cc8 <MX_ADC3_Init+0xd4>)
 8001c0a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001c0c:	4b2d      	ldr	r3, [pc, #180]	; (8001cc4 <MX_ADC3_Init+0xd0>)
 8001c0e:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001c12:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001c14:	4b2b      	ldr	r3, [pc, #172]	; (8001cc4 <MX_ADC3_Init+0xd0>)
 8001c16:	2208      	movs	r2, #8
 8001c18:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001c1a:	4b2a      	ldr	r3, [pc, #168]	; (8001cc4 <MX_ADC3_Init+0xd0>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c20:	4b28      	ldr	r3, [pc, #160]	; (8001cc4 <MX_ADC3_Init+0xd0>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c26:	4b27      	ldr	r3, [pc, #156]	; (8001cc4 <MX_ADC3_Init+0xd0>)
 8001c28:	2204      	movs	r2, #4
 8001c2a:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001c2c:	4b25      	ldr	r3, [pc, #148]	; (8001cc4 <MX_ADC3_Init+0xd0>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001c32:	4b24      	ldr	r3, [pc, #144]	; (8001cc4 <MX_ADC3_Init+0xd0>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001c38:	4b22      	ldr	r3, [pc, #136]	; (8001cc4 <MX_ADC3_Init+0xd0>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001c3e:	4b21      	ldr	r3, [pc, #132]	; (8001cc4 <MX_ADC3_Init+0xd0>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c46:	4b1f      	ldr	r3, [pc, #124]	; (8001cc4 <MX_ADC3_Init+0xd0>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c4c:	4b1d      	ldr	r3, [pc, #116]	; (8001cc4 <MX_ADC3_Init+0xd0>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001c52:	4b1c      	ldr	r3, [pc, #112]	; (8001cc4 <MX_ADC3_Init+0xd0>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001c5a:	4b1a      	ldr	r3, [pc, #104]	; (8001cc4 <MX_ADC3_Init+0xd0>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001c60:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <MX_ADC3_Init+0xd0>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c66:	4b17      	ldr	r3, [pc, #92]	; (8001cc4 <MX_ADC3_Init+0xd0>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001c6c:	4b15      	ldr	r3, [pc, #84]	; (8001cc4 <MX_ADC3_Init+0xd0>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001c72:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <MX_ADC3_Init+0xd0>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001c7a:	4812      	ldr	r0, [pc, #72]	; (8001cc4 <MX_ADC3_Init+0xd0>)
 8001c7c:	f002 f922 	bl	8003ec4 <HAL_ADC_Init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001c86:	f000 fdff 	bl	8002888 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001c8a:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <MX_ADC3_Init+0xd8>)
 8001c8c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c8e:	2306      	movs	r3, #6
 8001c90:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c96:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001c9a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c9c:	2304      	movs	r3, #4
 8001c9e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	4619      	mov	r1, r3
 8001cac:	4805      	ldr	r0, [pc, #20]	; (8001cc4 <MX_ADC3_Init+0xd0>)
 8001cae:	f002 fb11 	bl	80042d4 <HAL_ADC_ConfigChannel>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8001cb8:	f000 fde6 	bl	8002888 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001cbc:	bf00      	nop
 8001cbe:	3728      	adds	r7, #40	; 0x28
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	24000c68 	.word	0x24000c68
 8001cc8:	58026000 	.word	0x58026000
 8001ccc:	04300002 	.word	0x04300002

08001cd0 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001cd4:	4b2e      	ldr	r3, [pc, #184]	; (8001d90 <MX_FDCAN3_Init+0xc0>)
 8001cd6:	4a2f      	ldr	r2, [pc, #188]	; (8001d94 <MX_FDCAN3_Init+0xc4>)
 8001cd8:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001cda:	4b2d      	ldr	r3, [pc, #180]	; (8001d90 <MX_FDCAN3_Init+0xc0>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001ce0:	4b2b      	ldr	r3, [pc, #172]	; (8001d90 <MX_FDCAN3_Init+0xc0>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8001ce6:	4b2a      	ldr	r3, [pc, #168]	; (8001d90 <MX_FDCAN3_Init+0xc0>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001cec:	4b28      	ldr	r3, [pc, #160]	; (8001d90 <MX_FDCAN3_Init+0xc0>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001cf2:	4b27      	ldr	r3, [pc, #156]	; (8001d90 <MX_FDCAN3_Init+0xc0>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8001cf8:	4b25      	ldr	r3, [pc, #148]	; (8001d90 <MX_FDCAN3_Init+0xc0>)
 8001cfa:	2210      	movs	r2, #16
 8001cfc:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8001cfe:	4b24      	ldr	r3, [pc, #144]	; (8001d90 <MX_FDCAN3_Init+0xc0>)
 8001d00:	2201      	movs	r2, #1
 8001d02:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8001d04:	4b22      	ldr	r3, [pc, #136]	; (8001d90 <MX_FDCAN3_Init+0xc0>)
 8001d06:	2202      	movs	r2, #2
 8001d08:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8001d0a:	4b21      	ldr	r3, [pc, #132]	; (8001d90 <MX_FDCAN3_Init+0xc0>)
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8001d10:	4b1f      	ldr	r3, [pc, #124]	; (8001d90 <MX_FDCAN3_Init+0xc0>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8001d16:	4b1e      	ldr	r3, [pc, #120]	; (8001d90 <MX_FDCAN3_Init+0xc0>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8001d1c:	4b1c      	ldr	r3, [pc, #112]	; (8001d90 <MX_FDCAN3_Init+0xc0>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8001d22:	4b1b      	ldr	r3, [pc, #108]	; (8001d90 <MX_FDCAN3_Init+0xc0>)
 8001d24:	2201      	movs	r2, #1
 8001d26:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8001d28:	4b19      	ldr	r3, [pc, #100]	; (8001d90 <MX_FDCAN3_Init+0xc0>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8001d2e:	4b18      	ldr	r3, [pc, #96]	; (8001d90 <MX_FDCAN3_Init+0xc0>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8001d34:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <MX_FDCAN3_Init+0xc0>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8001d3a:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <MX_FDCAN3_Init+0xc0>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001d40:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <MX_FDCAN3_Init+0xc0>)
 8001d42:	2204      	movs	r2, #4
 8001d44:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8001d46:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <MX_FDCAN3_Init+0xc0>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001d4c:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <MX_FDCAN3_Init+0xc0>)
 8001d4e:	2204      	movs	r2, #4
 8001d50:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8001d52:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <MX_FDCAN3_Init+0xc0>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001d58:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <MX_FDCAN3_Init+0xc0>)
 8001d5a:	2204      	movs	r2, #4
 8001d5c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8001d5e:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <MX_FDCAN3_Init+0xc0>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8001d64:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <MX_FDCAN3_Init+0xc0>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8001d6a:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <MX_FDCAN3_Init+0xc0>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001d70:	4b07      	ldr	r3, [pc, #28]	; (8001d90 <MX_FDCAN3_Init+0xc0>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001d76:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <MX_FDCAN3_Init+0xc0>)
 8001d78:	2204      	movs	r2, #4
 8001d7a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001d7c:	4804      	ldr	r0, [pc, #16]	; (8001d90 <MX_FDCAN3_Init+0xc0>)
 8001d7e:	f005 fbaf 	bl	80074e0 <HAL_FDCAN_Init>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8001d88:	f000 fd7e 	bl	8002888 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8001d8c:	bf00      	nop
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	24000dc8 	.word	0x24000dc8
 8001d94:	4000d400 	.word	0x4000d400

08001d98 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d9c:	4b1b      	ldr	r3, [pc, #108]	; (8001e0c <MX_I2C2_Init+0x74>)
 8001d9e:	4a1c      	ldr	r2, [pc, #112]	; (8001e10 <MX_I2C2_Init+0x78>)
 8001da0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001da2:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <MX_I2C2_Init+0x74>)
 8001da4:	4a1b      	ldr	r2, [pc, #108]	; (8001e14 <MX_I2C2_Init+0x7c>)
 8001da6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001da8:	4b18      	ldr	r3, [pc, #96]	; (8001e0c <MX_I2C2_Init+0x74>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dae:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <MX_I2C2_Init+0x74>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001db4:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <MX_I2C2_Init+0x74>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001dba:	4b14      	ldr	r3, [pc, #80]	; (8001e0c <MX_I2C2_Init+0x74>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001dc0:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <MX_I2C2_Init+0x74>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dc6:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <MX_I2C2_Init+0x74>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dcc:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <MX_I2C2_Init+0x74>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001dd2:	480e      	ldr	r0, [pc, #56]	; (8001e0c <MX_I2C2_Init+0x74>)
 8001dd4:	f006 f8c2 	bl	8007f5c <HAL_I2C_Init>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001dde:	f000 fd53 	bl	8002888 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001de2:	2100      	movs	r1, #0
 8001de4:	4809      	ldr	r0, [pc, #36]	; (8001e0c <MX_I2C2_Init+0x74>)
 8001de6:	f006 f963 	bl	80080b0 <HAL_I2CEx_ConfigAnalogFilter>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001df0:	f000 fd4a 	bl	8002888 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001df4:	2100      	movs	r1, #0
 8001df6:	4805      	ldr	r0, [pc, #20]	; (8001e0c <MX_I2C2_Init+0x74>)
 8001df8:	f006 f9a5 	bl	8008146 <HAL_I2CEx_ConfigDigitalFilter>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001e02:	f000 fd41 	bl	8002888 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	24000e68 	.word	0x24000e68
 8001e10:	40005800 	.word	0x40005800
 8001e14:	20303e5d 	.word	0x20303e5d

08001e18 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <MX_SDMMC2_SD_Init+0x34>)
 8001e1e:	4a0c      	ldr	r2, [pc, #48]	; (8001e50 <MX_SDMMC2_SD_Init+0x38>)
 8001e20:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001e22:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <MX_SDMMC2_SD_Init+0x34>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001e28:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <MX_SDMMC2_SD_Init+0x34>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001e2e:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <MX_SDMMC2_SD_Init+0x34>)
 8001e30:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e34:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001e36:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <MX_SDMMC2_SD_Init+0x34>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <MX_SDMMC2_SD_Init+0x34>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8001e42:	bf00      	nop
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	24000ebc 	.word	0x24000ebc
 8001e50:	48022400 	.word	0x48022400

08001e54 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e58:	4b27      	ldr	r3, [pc, #156]	; (8001ef8 <MX_SPI1_Init+0xa4>)
 8001e5a:	4a28      	ldr	r2, [pc, #160]	; (8001efc <MX_SPI1_Init+0xa8>)
 8001e5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e5e:	4b26      	ldr	r3, [pc, #152]	; (8001ef8 <MX_SPI1_Init+0xa4>)
 8001e60:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001e64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e66:	4b24      	ldr	r3, [pc, #144]	; (8001ef8 <MX_SPI1_Init+0xa4>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e6c:	4b22      	ldr	r3, [pc, #136]	; (8001ef8 <MX_SPI1_Init+0xa4>)
 8001e6e:	2207      	movs	r2, #7
 8001e70:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e72:	4b21      	ldr	r3, [pc, #132]	; (8001ef8 <MX_SPI1_Init+0xa4>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e78:	4b1f      	ldr	r3, [pc, #124]	; (8001ef8 <MX_SPI1_Init+0xa4>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e7e:	4b1e      	ldr	r3, [pc, #120]	; (8001ef8 <MX_SPI1_Init+0xa4>)
 8001e80:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e84:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001e86:	4b1c      	ldr	r3, [pc, #112]	; (8001ef8 <MX_SPI1_Init+0xa4>)
 8001e88:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001e8c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ef8 <MX_SPI1_Init+0xa4>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e94:	4b18      	ldr	r3, [pc, #96]	; (8001ef8 <MX_SPI1_Init+0xa4>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e9a:	4b17      	ldr	r3, [pc, #92]	; (8001ef8 <MX_SPI1_Init+0xa4>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001ea0:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <MX_SPI1_Init+0xa4>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ea6:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <MX_SPI1_Init+0xa4>)
 8001ea8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001eac:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001eae:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <MX_SPI1_Init+0xa4>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001eb4:	4b10      	ldr	r3, [pc, #64]	; (8001ef8 <MX_SPI1_Init+0xa4>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001eba:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <MX_SPI1_Init+0xa4>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001ec0:	4b0d      	ldr	r3, [pc, #52]	; (8001ef8 <MX_SPI1_Init+0xa4>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <MX_SPI1_Init+0xa4>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001ecc:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <MX_SPI1_Init+0xa4>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <MX_SPI1_Init+0xa4>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001ed8:	4b07      	ldr	r3, [pc, #28]	; (8001ef8 <MX_SPI1_Init+0xa4>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001ede:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <MX_SPI1_Init+0xa4>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ee4:	4804      	ldr	r0, [pc, #16]	; (8001ef8 <MX_SPI1_Init+0xa4>)
 8001ee6:	f00c fc97 	bl	800e818 <HAL_SPI_Init>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001ef0:	f000 fcca 	bl	8002888 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ef4:	bf00      	nop
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	24000f38 	.word	0x24000f38
 8001efc:	40013000 	.word	0x40013000

08001f00 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001f04:	4b27      	ldr	r3, [pc, #156]	; (8001fa4 <MX_SPI2_Init+0xa4>)
 8001f06:	4a28      	ldr	r2, [pc, #160]	; (8001fa8 <MX_SPI2_Init+0xa8>)
 8001f08:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f0a:	4b26      	ldr	r3, [pc, #152]	; (8001fa4 <MX_SPI2_Init+0xa4>)
 8001f0c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001f10:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f12:	4b24      	ldr	r3, [pc, #144]	; (8001fa4 <MX_SPI2_Init+0xa4>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f18:	4b22      	ldr	r3, [pc, #136]	; (8001fa4 <MX_SPI2_Init+0xa4>)
 8001f1a:	2207      	movs	r2, #7
 8001f1c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f1e:	4b21      	ldr	r3, [pc, #132]	; (8001fa4 <MX_SPI2_Init+0xa4>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f24:	4b1f      	ldr	r3, [pc, #124]	; (8001fa4 <MX_SPI2_Init+0xa4>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f2a:	4b1e      	ldr	r3, [pc, #120]	; (8001fa4 <MX_SPI2_Init+0xa4>)
 8001f2c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f30:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001f32:	4b1c      	ldr	r3, [pc, #112]	; (8001fa4 <MX_SPI2_Init+0xa4>)
 8001f34:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001f38:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f3a:	4b1a      	ldr	r3, [pc, #104]	; (8001fa4 <MX_SPI2_Init+0xa4>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f40:	4b18      	ldr	r3, [pc, #96]	; (8001fa4 <MX_SPI2_Init+0xa4>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f46:	4b17      	ldr	r3, [pc, #92]	; (8001fa4 <MX_SPI2_Init+0xa4>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001f4c:	4b15      	ldr	r3, [pc, #84]	; (8001fa4 <MX_SPI2_Init+0xa4>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f52:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <MX_SPI2_Init+0xa4>)
 8001f54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f58:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001f5a:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <MX_SPI2_Init+0xa4>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001f60:	4b10      	ldr	r3, [pc, #64]	; (8001fa4 <MX_SPI2_Init+0xa4>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f66:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <MX_SPI2_Init+0xa4>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f6c:	4b0d      	ldr	r3, [pc, #52]	; (8001fa4 <MX_SPI2_Init+0xa4>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001f72:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <MX_SPI2_Init+0xa4>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001f78:	4b0a      	ldr	r3, [pc, #40]	; (8001fa4 <MX_SPI2_Init+0xa4>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001f7e:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <MX_SPI2_Init+0xa4>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001f84:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <MX_SPI2_Init+0xa4>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001f8a:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <MX_SPI2_Init+0xa4>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f90:	4804      	ldr	r0, [pc, #16]	; (8001fa4 <MX_SPI2_Init+0xa4>)
 8001f92:	f00c fc41 	bl	800e818 <HAL_SPI_Init>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001f9c:	f000 fc74 	bl	8002888 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001fa0:	bf00      	nop
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	24000fc0 	.word	0x24000fc0
 8001fa8:	40003800 	.word	0x40003800

08001fac <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001fb0:	4b27      	ldr	r3, [pc, #156]	; (8002050 <MX_SPI3_Init+0xa4>)
 8001fb2:	4a28      	ldr	r2, [pc, #160]	; (8002054 <MX_SPI3_Init+0xa8>)
 8001fb4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001fb6:	4b26      	ldr	r3, [pc, #152]	; (8002050 <MX_SPI3_Init+0xa4>)
 8001fb8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001fbc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001fbe:	4b24      	ldr	r3, [pc, #144]	; (8002050 <MX_SPI3_Init+0xa4>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fc4:	4b22      	ldr	r3, [pc, #136]	; (8002050 <MX_SPI3_Init+0xa4>)
 8001fc6:	2207      	movs	r2, #7
 8001fc8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fca:	4b21      	ldr	r3, [pc, #132]	; (8002050 <MX_SPI3_Init+0xa4>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fd0:	4b1f      	ldr	r3, [pc, #124]	; (8002050 <MX_SPI3_Init+0xa4>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001fd6:	4b1e      	ldr	r3, [pc, #120]	; (8002050 <MX_SPI3_Init+0xa4>)
 8001fd8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001fdc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001fde:	4b1c      	ldr	r3, [pc, #112]	; (8002050 <MX_SPI3_Init+0xa4>)
 8001fe0:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001fe4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fe6:	4b1a      	ldr	r3, [pc, #104]	; (8002050 <MX_SPI3_Init+0xa4>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fec:	4b18      	ldr	r3, [pc, #96]	; (8002050 <MX_SPI3_Init+0xa4>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ff2:	4b17      	ldr	r3, [pc, #92]	; (8002050 <MX_SPI3_Init+0xa4>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001ff8:	4b15      	ldr	r3, [pc, #84]	; (8002050 <MX_SPI3_Init+0xa4>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ffe:	4b14      	ldr	r3, [pc, #80]	; (8002050 <MX_SPI3_Init+0xa4>)
 8002000:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002004:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002006:	4b12      	ldr	r3, [pc, #72]	; (8002050 <MX_SPI3_Init+0xa4>)
 8002008:	2200      	movs	r2, #0
 800200a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800200c:	4b10      	ldr	r3, [pc, #64]	; (8002050 <MX_SPI3_Init+0xa4>)
 800200e:	2200      	movs	r2, #0
 8002010:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002012:	4b0f      	ldr	r3, [pc, #60]	; (8002050 <MX_SPI3_Init+0xa4>)
 8002014:	2200      	movs	r2, #0
 8002016:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002018:	4b0d      	ldr	r3, [pc, #52]	; (8002050 <MX_SPI3_Init+0xa4>)
 800201a:	2200      	movs	r2, #0
 800201c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800201e:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <MX_SPI3_Init+0xa4>)
 8002020:	2200      	movs	r2, #0
 8002022:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002024:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <MX_SPI3_Init+0xa4>)
 8002026:	2200      	movs	r2, #0
 8002028:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800202a:	4b09      	ldr	r3, [pc, #36]	; (8002050 <MX_SPI3_Init+0xa4>)
 800202c:	2200      	movs	r2, #0
 800202e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002030:	4b07      	ldr	r3, [pc, #28]	; (8002050 <MX_SPI3_Init+0xa4>)
 8002032:	2200      	movs	r2, #0
 8002034:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002036:	4b06      	ldr	r3, [pc, #24]	; (8002050 <MX_SPI3_Init+0xa4>)
 8002038:	2200      	movs	r2, #0
 800203a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800203c:	4804      	ldr	r0, [pc, #16]	; (8002050 <MX_SPI3_Init+0xa4>)
 800203e:	f00c fbeb 	bl	800e818 <HAL_SPI_Init>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8002048:	f000 fc1e 	bl	8002888 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800204c:	bf00      	nop
 800204e:	bd80      	pop	{r7, pc}
 8002050:	24001048 	.word	0x24001048
 8002054:	40003c00 	.word	0x40003c00

08002058 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08a      	sub	sp, #40	; 0x28
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800205e:	f107 031c 	add.w	r3, r7, #28
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	605a      	str	r2, [r3, #4]
 8002068:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800206a:	463b      	mov	r3, r7
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]
 8002076:	611a      	str	r2, [r3, #16]
 8002078:	615a      	str	r2, [r3, #20]
 800207a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800207c:	4b21      	ldr	r3, [pc, #132]	; (8002104 <MX_TIM2_Init+0xac>)
 800207e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002082:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002084:	4b1f      	ldr	r3, [pc, #124]	; (8002104 <MX_TIM2_Init+0xac>)
 8002086:	2200      	movs	r2, #0
 8002088:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800208a:	4b1e      	ldr	r3, [pc, #120]	; (8002104 <MX_TIM2_Init+0xac>)
 800208c:	2200      	movs	r2, #0
 800208e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 8002090:	4b1c      	ldr	r3, [pc, #112]	; (8002104 <MX_TIM2_Init+0xac>)
 8002092:	225a      	movs	r2, #90	; 0x5a
 8002094:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002096:	4b1b      	ldr	r3, [pc, #108]	; (8002104 <MX_TIM2_Init+0xac>)
 8002098:	2200      	movs	r2, #0
 800209a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800209c:	4b19      	ldr	r3, [pc, #100]	; (8002104 <MX_TIM2_Init+0xac>)
 800209e:	2200      	movs	r2, #0
 80020a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80020a2:	4818      	ldr	r0, [pc, #96]	; (8002104 <MX_TIM2_Init+0xac>)
 80020a4:	f00d f9a8 	bl	800f3f8 <HAL_TIM_PWM_Init>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80020ae:	f000 fbeb 	bl	8002888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020b2:	2300      	movs	r3, #0
 80020b4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020b6:	2300      	movs	r3, #0
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020ba:	f107 031c 	add.w	r3, r7, #28
 80020be:	4619      	mov	r1, r3
 80020c0:	4810      	ldr	r0, [pc, #64]	; (8002104 <MX_TIM2_Init+0xac>)
 80020c2:	f00e fc2f 	bl	8010924 <HAL_TIMEx_MasterConfigSynchronization>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80020cc:	f000 fbdc 	bl	8002888 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020d0:	2360      	movs	r3, #96	; 0x60
 80020d2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020d8:	2300      	movs	r3, #0
 80020da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020dc:	2300      	movs	r3, #0
 80020de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020e0:	463b      	mov	r3, r7
 80020e2:	2208      	movs	r2, #8
 80020e4:	4619      	mov	r1, r3
 80020e6:	4807      	ldr	r0, [pc, #28]	; (8002104 <MX_TIM2_Init+0xac>)
 80020e8:	f00d fe4e 	bl	800fd88 <HAL_TIM_PWM_ConfigChannel>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80020f2:	f000 fbc9 	bl	8002888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80020f6:	4803      	ldr	r0, [pc, #12]	; (8002104 <MX_TIM2_Init+0xac>)
 80020f8:	f001 f8e4 	bl	80032c4 <HAL_TIM_MspPostInit>

}
 80020fc:	bf00      	nop
 80020fe:	3728      	adds	r7, #40	; 0x28
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	240010d0 	.word	0x240010d0

08002108 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08a      	sub	sp, #40	; 0x28
 800210c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800210e:	f107 031c 	add.w	r3, r7, #28
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	605a      	str	r2, [r3, #4]
 8002118:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800211a:	463b      	mov	r3, r7
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]
 8002126:	611a      	str	r2, [r3, #16]
 8002128:	615a      	str	r2, [r3, #20]
 800212a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800212c:	4b26      	ldr	r3, [pc, #152]	; (80021c8 <MX_TIM3_Init+0xc0>)
 800212e:	4a27      	ldr	r2, [pc, #156]	; (80021cc <MX_TIM3_Init+0xc4>)
 8002130:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002132:	4b25      	ldr	r3, [pc, #148]	; (80021c8 <MX_TIM3_Init+0xc0>)
 8002134:	2200      	movs	r2, #0
 8002136:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002138:	4b23      	ldr	r3, [pc, #140]	; (80021c8 <MX_TIM3_Init+0xc0>)
 800213a:	2200      	movs	r2, #0
 800213c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 800213e:	4b22      	ldr	r3, [pc, #136]	; (80021c8 <MX_TIM3_Init+0xc0>)
 8002140:	225a      	movs	r2, #90	; 0x5a
 8002142:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002144:	4b20      	ldr	r3, [pc, #128]	; (80021c8 <MX_TIM3_Init+0xc0>)
 8002146:	2200      	movs	r2, #0
 8002148:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800214a:	4b1f      	ldr	r3, [pc, #124]	; (80021c8 <MX_TIM3_Init+0xc0>)
 800214c:	2200      	movs	r2, #0
 800214e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002150:	481d      	ldr	r0, [pc, #116]	; (80021c8 <MX_TIM3_Init+0xc0>)
 8002152:	f00d f951 	bl	800f3f8 <HAL_TIM_PWM_Init>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800215c:	f000 fb94 	bl	8002888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002160:	2300      	movs	r3, #0
 8002162:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002164:	2300      	movs	r3, #0
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002168:	f107 031c 	add.w	r3, r7, #28
 800216c:	4619      	mov	r1, r3
 800216e:	4816      	ldr	r0, [pc, #88]	; (80021c8 <MX_TIM3_Init+0xc0>)
 8002170:	f00e fbd8 	bl	8010924 <HAL_TIMEx_MasterConfigSynchronization>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800217a:	f000 fb85 	bl	8002888 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800217e:	2360      	movs	r3, #96	; 0x60
 8002180:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002182:	2300      	movs	r3, #0
 8002184:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002186:	2300      	movs	r3, #0
 8002188:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800218a:	2300      	movs	r3, #0
 800218c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800218e:	463b      	mov	r3, r7
 8002190:	2200      	movs	r2, #0
 8002192:	4619      	mov	r1, r3
 8002194:	480c      	ldr	r0, [pc, #48]	; (80021c8 <MX_TIM3_Init+0xc0>)
 8002196:	f00d fdf7 	bl	800fd88 <HAL_TIM_PWM_ConfigChannel>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80021a0:	f000 fb72 	bl	8002888 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021a4:	463b      	mov	r3, r7
 80021a6:	2204      	movs	r2, #4
 80021a8:	4619      	mov	r1, r3
 80021aa:	4807      	ldr	r0, [pc, #28]	; (80021c8 <MX_TIM3_Init+0xc0>)
 80021ac:	f00d fdec 	bl	800fd88 <HAL_TIM_PWM_ConfigChannel>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80021b6:	f000 fb67 	bl	8002888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80021ba:	4803      	ldr	r0, [pc, #12]	; (80021c8 <MX_TIM3_Init+0xc0>)
 80021bc:	f001 f882 	bl	80032c4 <HAL_TIM_MspPostInit>

}
 80021c0:	bf00      	nop
 80021c2:	3728      	adds	r7, #40	; 0x28
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	2400111c 	.word	0x2400111c
 80021cc:	40000400 	.word	0x40000400

080021d0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08a      	sub	sp, #40	; 0x28
 80021d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021d6:	f107 031c 	add.w	r3, r7, #28
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	605a      	str	r2, [r3, #4]
 80021e0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021e2:	463b      	mov	r3, r7
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	605a      	str	r2, [r3, #4]
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	60da      	str	r2, [r3, #12]
 80021ee:	611a      	str	r2, [r3, #16]
 80021f0:	615a      	str	r2, [r3, #20]
 80021f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80021f4:	4b32      	ldr	r3, [pc, #200]	; (80022c0 <MX_TIM4_Init+0xf0>)
 80021f6:	4a33      	ldr	r2, [pc, #204]	; (80022c4 <MX_TIM4_Init+0xf4>)
 80021f8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 28;
 80021fa:	4b31      	ldr	r3, [pc, #196]	; (80022c0 <MX_TIM4_Init+0xf0>)
 80021fc:	221c      	movs	r2, #28
 80021fe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002200:	4b2f      	ldr	r3, [pc, #188]	; (80022c0 <MX_TIM4_Init+0xf0>)
 8002202:	2200      	movs	r2, #0
 8002204:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8002206:	4b2e      	ldr	r3, [pc, #184]	; (80022c0 <MX_TIM4_Init+0xf0>)
 8002208:	f242 720f 	movw	r2, #9999	; 0x270f
 800220c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800220e:	4b2c      	ldr	r3, [pc, #176]	; (80022c0 <MX_TIM4_Init+0xf0>)
 8002210:	2200      	movs	r2, #0
 8002212:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002214:	4b2a      	ldr	r3, [pc, #168]	; (80022c0 <MX_TIM4_Init+0xf0>)
 8002216:	2200      	movs	r2, #0
 8002218:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800221a:	4829      	ldr	r0, [pc, #164]	; (80022c0 <MX_TIM4_Init+0xf0>)
 800221c:	f00d f8ec 	bl	800f3f8 <HAL_TIM_PWM_Init>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002226:	f000 fb2f 	bl	8002888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800222e:	2300      	movs	r3, #0
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002232:	f107 031c 	add.w	r3, r7, #28
 8002236:	4619      	mov	r1, r3
 8002238:	4821      	ldr	r0, [pc, #132]	; (80022c0 <MX_TIM4_Init+0xf0>)
 800223a:	f00e fb73 	bl	8010924 <HAL_TIMEx_MasterConfigSynchronization>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002244:	f000 fb20 	bl	8002888 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002248:	2360      	movs	r3, #96	; 0x60
 800224a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800224c:	2300      	movs	r3, #0
 800224e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002250:	2300      	movs	r3, #0
 8002252:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002254:	2300      	movs	r3, #0
 8002256:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002258:	463b      	mov	r3, r7
 800225a:	2200      	movs	r2, #0
 800225c:	4619      	mov	r1, r3
 800225e:	4818      	ldr	r0, [pc, #96]	; (80022c0 <MX_TIM4_Init+0xf0>)
 8002260:	f00d fd92 	bl	800fd88 <HAL_TIM_PWM_ConfigChannel>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800226a:	f000 fb0d 	bl	8002888 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800226e:	463b      	mov	r3, r7
 8002270:	2204      	movs	r2, #4
 8002272:	4619      	mov	r1, r3
 8002274:	4812      	ldr	r0, [pc, #72]	; (80022c0 <MX_TIM4_Init+0xf0>)
 8002276:	f00d fd87 	bl	800fd88 <HAL_TIM_PWM_ConfigChannel>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002280:	f000 fb02 	bl	8002888 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002284:	463b      	mov	r3, r7
 8002286:	2208      	movs	r2, #8
 8002288:	4619      	mov	r1, r3
 800228a:	480d      	ldr	r0, [pc, #52]	; (80022c0 <MX_TIM4_Init+0xf0>)
 800228c:	f00d fd7c 	bl	800fd88 <HAL_TIM_PWM_ConfigChannel>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8002296:	f000 faf7 	bl	8002888 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800229a:	463b      	mov	r3, r7
 800229c:	220c      	movs	r2, #12
 800229e:	4619      	mov	r1, r3
 80022a0:	4807      	ldr	r0, [pc, #28]	; (80022c0 <MX_TIM4_Init+0xf0>)
 80022a2:	f00d fd71 	bl	800fd88 <HAL_TIM_PWM_ConfigChannel>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 80022ac:	f000 faec 	bl	8002888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80022b0:	4803      	ldr	r0, [pc, #12]	; (80022c0 <MX_TIM4_Init+0xf0>)
 80022b2:	f001 f807 	bl	80032c4 <HAL_TIM_MspPostInit>

}
 80022b6:	bf00      	nop
 80022b8:	3728      	adds	r7, #40	; 0x28
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	24001168 	.word	0x24001168
 80022c4:	40000800 	.word	0x40000800

080022c8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b08a      	sub	sp, #40	; 0x28
 80022cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ce:	f107 031c 	add.w	r3, r7, #28
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	605a      	str	r2, [r3, #4]
 80022d8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022da:	463b      	mov	r3, r7
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	60da      	str	r2, [r3, #12]
 80022e6:	611a      	str	r2, [r3, #16]
 80022e8:	615a      	str	r2, [r3, #20]
 80022ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80022ec:	4b21      	ldr	r3, [pc, #132]	; (8002374 <MX_TIM5_Init+0xac>)
 80022ee:	4a22      	ldr	r2, [pc, #136]	; (8002378 <MX_TIM5_Init+0xb0>)
 80022f0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80022f2:	4b20      	ldr	r3, [pc, #128]	; (8002374 <MX_TIM5_Init+0xac>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022f8:	4b1e      	ldr	r3, [pc, #120]	; (8002374 <MX_TIM5_Init+0xac>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 80022fe:	4b1d      	ldr	r3, [pc, #116]	; (8002374 <MX_TIM5_Init+0xac>)
 8002300:	225a      	movs	r2, #90	; 0x5a
 8002302:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002304:	4b1b      	ldr	r3, [pc, #108]	; (8002374 <MX_TIM5_Init+0xac>)
 8002306:	2200      	movs	r2, #0
 8002308:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800230a:	4b1a      	ldr	r3, [pc, #104]	; (8002374 <MX_TIM5_Init+0xac>)
 800230c:	2200      	movs	r2, #0
 800230e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002310:	4818      	ldr	r0, [pc, #96]	; (8002374 <MX_TIM5_Init+0xac>)
 8002312:	f00d f871 	bl	800f3f8 <HAL_TIM_PWM_Init>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 800231c:	f000 fab4 	bl	8002888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002320:	2300      	movs	r3, #0
 8002322:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002324:	2300      	movs	r3, #0
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002328:	f107 031c 	add.w	r3, r7, #28
 800232c:	4619      	mov	r1, r3
 800232e:	4811      	ldr	r0, [pc, #68]	; (8002374 <MX_TIM5_Init+0xac>)
 8002330:	f00e faf8 	bl	8010924 <HAL_TIMEx_MasterConfigSynchronization>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800233a:	f000 faa5 	bl	8002888 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800233e:	2360      	movs	r3, #96	; 0x60
 8002340:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002342:	2300      	movs	r3, #0
 8002344:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002346:	2300      	movs	r3, #0
 8002348:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800234a:	2300      	movs	r3, #0
 800234c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800234e:	463b      	mov	r3, r7
 8002350:	220c      	movs	r2, #12
 8002352:	4619      	mov	r1, r3
 8002354:	4807      	ldr	r0, [pc, #28]	; (8002374 <MX_TIM5_Init+0xac>)
 8002356:	f00d fd17 	bl	800fd88 <HAL_TIM_PWM_ConfigChannel>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002360:	f000 fa92 	bl	8002888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002364:	4803      	ldr	r0, [pc, #12]	; (8002374 <MX_TIM5_Init+0xac>)
 8002366:	f000 ffad 	bl	80032c4 <HAL_TIM_MspPostInit>

}
 800236a:	bf00      	nop
 800236c:	3728      	adds	r7, #40	; 0x28
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	240011b4 	.word	0x240011b4
 8002378:	40000c00 	.word	0x40000c00

0800237c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002380:	4b0e      	ldr	r3, [pc, #56]	; (80023bc <MX_TIM13_Init+0x40>)
 8002382:	4a0f      	ldr	r2, [pc, #60]	; (80023c0 <MX_TIM13_Init+0x44>)
 8002384:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 95;
 8002386:	4b0d      	ldr	r3, [pc, #52]	; (80023bc <MX_TIM13_Init+0x40>)
 8002388:	225f      	movs	r2, #95	; 0x5f
 800238a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800238c:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <MX_TIM13_Init+0x40>)
 800238e:	2200      	movs	r2, #0
 8002390:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8002392:	4b0a      	ldr	r3, [pc, #40]	; (80023bc <MX_TIM13_Init+0x40>)
 8002394:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002398:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800239a:	4b08      	ldr	r3, [pc, #32]	; (80023bc <MX_TIM13_Init+0x40>)
 800239c:	2200      	movs	r2, #0
 800239e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <MX_TIM13_Init+0x40>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80023a6:	4805      	ldr	r0, [pc, #20]	; (80023bc <MX_TIM13_Init+0x40>)
 80023a8:	f00c ffcf 	bl	800f34a <HAL_TIM_Base_Init>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80023b2:	f000 fa69 	bl	8002888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	24001200 	.word	0x24001200
 80023c0:	40001c00 	.word	0x40001c00

080023c4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80023c8:	4b22      	ldr	r3, [pc, #136]	; (8002454 <MX_UART4_Init+0x90>)
 80023ca:	4a23      	ldr	r2, [pc, #140]	; (8002458 <MX_UART4_Init+0x94>)
 80023cc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80023ce:	4b21      	ldr	r3, [pc, #132]	; (8002454 <MX_UART4_Init+0x90>)
 80023d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023d4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80023d6:	4b1f      	ldr	r3, [pc, #124]	; (8002454 <MX_UART4_Init+0x90>)
 80023d8:	2200      	movs	r2, #0
 80023da:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80023dc:	4b1d      	ldr	r3, [pc, #116]	; (8002454 <MX_UART4_Init+0x90>)
 80023de:	2200      	movs	r2, #0
 80023e0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80023e2:	4b1c      	ldr	r3, [pc, #112]	; (8002454 <MX_UART4_Init+0x90>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80023e8:	4b1a      	ldr	r3, [pc, #104]	; (8002454 <MX_UART4_Init+0x90>)
 80023ea:	220c      	movs	r2, #12
 80023ec:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ee:	4b19      	ldr	r3, [pc, #100]	; (8002454 <MX_UART4_Init+0x90>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80023f4:	4b17      	ldr	r3, [pc, #92]	; (8002454 <MX_UART4_Init+0x90>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023fa:	4b16      	ldr	r3, [pc, #88]	; (8002454 <MX_UART4_Init+0x90>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002400:	4b14      	ldr	r3, [pc, #80]	; (8002454 <MX_UART4_Init+0x90>)
 8002402:	2200      	movs	r2, #0
 8002404:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002406:	4b13      	ldr	r3, [pc, #76]	; (8002454 <MX_UART4_Init+0x90>)
 8002408:	2200      	movs	r2, #0
 800240a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800240c:	4811      	ldr	r0, [pc, #68]	; (8002454 <MX_UART4_Init+0x90>)
 800240e:	f00e fb43 	bl	8010a98 <HAL_UART_Init>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002418:	f000 fa36 	bl	8002888 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800241c:	2100      	movs	r1, #0
 800241e:	480d      	ldr	r0, [pc, #52]	; (8002454 <MX_UART4_Init+0x90>)
 8002420:	f00f fc49 	bl	8011cb6 <HAL_UARTEx_SetTxFifoThreshold>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800242a:	f000 fa2d 	bl	8002888 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800242e:	2100      	movs	r1, #0
 8002430:	4808      	ldr	r0, [pc, #32]	; (8002454 <MX_UART4_Init+0x90>)
 8002432:	f00f fc7e 	bl	8011d32 <HAL_UARTEx_SetRxFifoThreshold>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800243c:	f000 fa24 	bl	8002888 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002440:	4804      	ldr	r0, [pc, #16]	; (8002454 <MX_UART4_Init+0x90>)
 8002442:	f00f fbff 	bl	8011c44 <HAL_UARTEx_DisableFifoMode>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800244c:	f000 fa1c 	bl	8002888 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}
 8002454:	240014a4 	.word	0x240014a4
 8002458:	40004c00 	.word	0x40004c00

0800245c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002460:	4b22      	ldr	r3, [pc, #136]	; (80024ec <MX_USART6_UART_Init+0x90>)
 8002462:	4a23      	ldr	r2, [pc, #140]	; (80024f0 <MX_USART6_UART_Init+0x94>)
 8002464:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002466:	4b21      	ldr	r3, [pc, #132]	; (80024ec <MX_USART6_UART_Init+0x90>)
 8002468:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800246c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800246e:	4b1f      	ldr	r3, [pc, #124]	; (80024ec <MX_USART6_UART_Init+0x90>)
 8002470:	2200      	movs	r2, #0
 8002472:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002474:	4b1d      	ldr	r3, [pc, #116]	; (80024ec <MX_USART6_UART_Init+0x90>)
 8002476:	2200      	movs	r2, #0
 8002478:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800247a:	4b1c      	ldr	r3, [pc, #112]	; (80024ec <MX_USART6_UART_Init+0x90>)
 800247c:	2200      	movs	r2, #0
 800247e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002480:	4b1a      	ldr	r3, [pc, #104]	; (80024ec <MX_USART6_UART_Init+0x90>)
 8002482:	220c      	movs	r2, #12
 8002484:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002486:	4b19      	ldr	r3, [pc, #100]	; (80024ec <MX_USART6_UART_Init+0x90>)
 8002488:	2200      	movs	r2, #0
 800248a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800248c:	4b17      	ldr	r3, [pc, #92]	; (80024ec <MX_USART6_UART_Init+0x90>)
 800248e:	2200      	movs	r2, #0
 8002490:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002492:	4b16      	ldr	r3, [pc, #88]	; (80024ec <MX_USART6_UART_Init+0x90>)
 8002494:	2200      	movs	r2, #0
 8002496:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002498:	4b14      	ldr	r3, [pc, #80]	; (80024ec <MX_USART6_UART_Init+0x90>)
 800249a:	2200      	movs	r2, #0
 800249c:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800249e:	4b13      	ldr	r3, [pc, #76]	; (80024ec <MX_USART6_UART_Init+0x90>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80024a4:	4811      	ldr	r0, [pc, #68]	; (80024ec <MX_USART6_UART_Init+0x90>)
 80024a6:	f00e faf7 	bl	8010a98 <HAL_UART_Init>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80024b0:	f000 f9ea 	bl	8002888 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024b4:	2100      	movs	r1, #0
 80024b6:	480d      	ldr	r0, [pc, #52]	; (80024ec <MX_USART6_UART_Init+0x90>)
 80024b8:	f00f fbfd 	bl	8011cb6 <HAL_UARTEx_SetTxFifoThreshold>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80024c2:	f000 f9e1 	bl	8002888 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024c6:	2100      	movs	r1, #0
 80024c8:	4808      	ldr	r0, [pc, #32]	; (80024ec <MX_USART6_UART_Init+0x90>)
 80024ca:	f00f fc32 	bl	8011d32 <HAL_UARTEx_SetRxFifoThreshold>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80024d4:	f000 f9d8 	bl	8002888 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80024d8:	4804      	ldr	r0, [pc, #16]	; (80024ec <MX_USART6_UART_Init+0x90>)
 80024da:	f00f fbb3 	bl	8011c44 <HAL_UARTEx_DisableFifoMode>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80024e4:	f000 f9d0 	bl	8002888 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80024e8:	bf00      	nop
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	24001538 	.word	0x24001538
 80024f0:	40011400 	.word	0x40011400

080024f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024fa:	4b2d      	ldr	r3, [pc, #180]	; (80025b0 <MX_DMA_Init+0xbc>)
 80024fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002500:	4a2b      	ldr	r2, [pc, #172]	; (80025b0 <MX_DMA_Init+0xbc>)
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800250a:	4b29      	ldr	r3, [pc, #164]	; (80025b0 <MX_DMA_Init+0xbc>)
 800250c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	607b      	str	r3, [r7, #4]
 8002516:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002518:	4b25      	ldr	r3, [pc, #148]	; (80025b0 <MX_DMA_Init+0xbc>)
 800251a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800251e:	4a24      	ldr	r2, [pc, #144]	; (80025b0 <MX_DMA_Init+0xbc>)
 8002520:	f043 0302 	orr.w	r3, r3, #2
 8002524:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002528:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <MX_DMA_Init+0xbc>)
 800252a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	603b      	str	r3, [r7, #0]
 8002534:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002536:	2200      	movs	r2, #0
 8002538:	2100      	movs	r1, #0
 800253a:	200b      	movs	r0, #11
 800253c:	f002 fec7 	bl	80052ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002540:	200b      	movs	r0, #11
 8002542:	f002 fede 	bl	8005302 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002546:	2200      	movs	r2, #0
 8002548:	2100      	movs	r1, #0
 800254a:	200c      	movs	r0, #12
 800254c:	f002 febf 	bl	80052ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002550:	200c      	movs	r0, #12
 8002552:	f002 fed6 	bl	8005302 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002556:	2200      	movs	r2, #0
 8002558:	2100      	movs	r1, #0
 800255a:	200d      	movs	r0, #13
 800255c:	f002 feb7 	bl	80052ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002560:	200d      	movs	r0, #13
 8002562:	f002 fece 	bl	8005302 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002566:	2200      	movs	r2, #0
 8002568:	2100      	movs	r1, #0
 800256a:	200e      	movs	r0, #14
 800256c:	f002 feaf 	bl	80052ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002570:	200e      	movs	r0, #14
 8002572:	f002 fec6 	bl	8005302 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002576:	2200      	movs	r2, #0
 8002578:	2100      	movs	r1, #0
 800257a:	200f      	movs	r0, #15
 800257c:	f002 fea7 	bl	80052ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002580:	200f      	movs	r0, #15
 8002582:	f002 febe 	bl	8005302 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002586:	2200      	movs	r2, #0
 8002588:	2100      	movs	r1, #0
 800258a:	2010      	movs	r0, #16
 800258c:	f002 fe9f 	bl	80052ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002590:	2010      	movs	r0, #16
 8002592:	f002 feb6 	bl	8005302 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002596:	2200      	movs	r2, #0
 8002598:	2100      	movs	r1, #0
 800259a:	2046      	movs	r0, #70	; 0x46
 800259c:	f002 fe97 	bl	80052ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80025a0:	2046      	movs	r0, #70	; 0x46
 80025a2:	f002 feae 	bl	8005302 <HAL_NVIC_EnableIRQ>

}
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	58024400 	.word	0x58024400

080025b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08c      	sub	sp, #48	; 0x30
 80025b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ba:	f107 031c 	add.w	r3, r7, #28
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	605a      	str	r2, [r3, #4]
 80025c4:	609a      	str	r2, [r3, #8]
 80025c6:	60da      	str	r2, [r3, #12]
 80025c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80025ca:	4ba7      	ldr	r3, [pc, #668]	; (8002868 <MX_GPIO_Init+0x2b4>)
 80025cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025d0:	4aa5      	ldr	r2, [pc, #660]	; (8002868 <MX_GPIO_Init+0x2b4>)
 80025d2:	f043 0310 	orr.w	r3, r3, #16
 80025d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025da:	4ba3      	ldr	r3, [pc, #652]	; (8002868 <MX_GPIO_Init+0x2b4>)
 80025dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025e0:	f003 0310 	and.w	r3, r3, #16
 80025e4:	61bb      	str	r3, [r7, #24]
 80025e6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80025e8:	4b9f      	ldr	r3, [pc, #636]	; (8002868 <MX_GPIO_Init+0x2b4>)
 80025ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025ee:	4a9e      	ldr	r2, [pc, #632]	; (8002868 <MX_GPIO_Init+0x2b4>)
 80025f0:	f043 0320 	orr.w	r3, r3, #32
 80025f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025f8:	4b9b      	ldr	r3, [pc, #620]	; (8002868 <MX_GPIO_Init+0x2b4>)
 80025fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025fe:	f003 0320 	and.w	r3, r3, #32
 8002602:	617b      	str	r3, [r7, #20]
 8002604:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002606:	4b98      	ldr	r3, [pc, #608]	; (8002868 <MX_GPIO_Init+0x2b4>)
 8002608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800260c:	4a96      	ldr	r2, [pc, #600]	; (8002868 <MX_GPIO_Init+0x2b4>)
 800260e:	f043 0304 	orr.w	r3, r3, #4
 8002612:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002616:	4b94      	ldr	r3, [pc, #592]	; (8002868 <MX_GPIO_Init+0x2b4>)
 8002618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	613b      	str	r3, [r7, #16]
 8002622:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002624:	4b90      	ldr	r3, [pc, #576]	; (8002868 <MX_GPIO_Init+0x2b4>)
 8002626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800262a:	4a8f      	ldr	r2, [pc, #572]	; (8002868 <MX_GPIO_Init+0x2b4>)
 800262c:	f043 0301 	orr.w	r3, r3, #1
 8002630:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002634:	4b8c      	ldr	r3, [pc, #560]	; (8002868 <MX_GPIO_Init+0x2b4>)
 8002636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002642:	4b89      	ldr	r3, [pc, #548]	; (8002868 <MX_GPIO_Init+0x2b4>)
 8002644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002648:	4a87      	ldr	r2, [pc, #540]	; (8002868 <MX_GPIO_Init+0x2b4>)
 800264a:	f043 0302 	orr.w	r3, r3, #2
 800264e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002652:	4b85      	ldr	r3, [pc, #532]	; (8002868 <MX_GPIO_Init+0x2b4>)
 8002654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	60bb      	str	r3, [r7, #8]
 800265e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002660:	4b81      	ldr	r3, [pc, #516]	; (8002868 <MX_GPIO_Init+0x2b4>)
 8002662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002666:	4a80      	ldr	r2, [pc, #512]	; (8002868 <MX_GPIO_Init+0x2b4>)
 8002668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800266c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002670:	4b7d      	ldr	r3, [pc, #500]	; (8002868 <MX_GPIO_Init+0x2b4>)
 8002672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800267a:	607b      	str	r3, [r7, #4]
 800267c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800267e:	4b7a      	ldr	r3, [pc, #488]	; (8002868 <MX_GPIO_Init+0x2b4>)
 8002680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002684:	4a78      	ldr	r2, [pc, #480]	; (8002868 <MX_GPIO_Init+0x2b4>)
 8002686:	f043 0308 	orr.w	r3, r3, #8
 800268a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800268e:	4b76      	ldr	r3, [pc, #472]	; (8002868 <MX_GPIO_Init+0x2b4>)
 8002690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002694:	f003 0308 	and.w	r3, r3, #8
 8002698:	603b      	str	r3, [r7, #0]
 800269a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 800269c:	2200      	movs	r2, #0
 800269e:	f241 5104 	movw	r1, #5380	; 0x1504
 80026a2:	4872      	ldr	r0, [pc, #456]	; (800286c <MX_GPIO_Init+0x2b8>)
 80026a4:	f005 fc40 	bl	8007f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|ARM2_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 80026a8:	2200      	movs	r2, #0
 80026aa:	f248 0106 	movw	r1, #32774	; 0x8006
 80026ae:	4870      	ldr	r0, [pc, #448]	; (8002870 <MX_GPIO_Init+0x2bc>)
 80026b0:	f005 fc3a 	bl	8007f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80026b4:	2200      	movs	r2, #0
 80026b6:	2130      	movs	r1, #48	; 0x30
 80026b8:	486e      	ldr	r0, [pc, #440]	; (8002874 <MX_GPIO_Init+0x2c0>)
 80026ba:	f005 fc35 	bl	8007f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|PYRO1_Pin, GPIO_PIN_RESET);
 80026be:	2200      	movs	r2, #0
 80026c0:	2103      	movs	r1, #3
 80026c2:	486d      	ldr	r0, [pc, #436]	; (8002878 <MX_GPIO_Init+0x2c4>)
 80026c4:	f005 fc30 	bl	8007f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 80026c8:	2200      	movs	r2, #0
 80026ca:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 80026ce:	486b      	ldr	r0, [pc, #428]	; (800287c <MX_GPIO_Init+0x2c8>)
 80026d0:	f005 fc2a 	bl	8007f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80026d4:	2200      	movs	r2, #0
 80026d6:	210e      	movs	r1, #14
 80026d8:	4869      	ldr	r0, [pc, #420]	; (8002880 <MX_GPIO_Init+0x2cc>)
 80026da:	f005 fc25 	bl	8007f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_SET);
 80026de:	2201      	movs	r2, #1
 80026e0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80026e4:	4867      	ldr	r0, [pc, #412]	; (8002884 <MX_GPIO_Init+0x2d0>)
 80026e6:	f005 fc1f 	bl	8007f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 80026ea:	2200      	movs	r2, #0
 80026ec:	2101      	movs	r1, #1
 80026ee:	4865      	ldr	r0, [pc, #404]	; (8002884 <MX_GPIO_Init+0x2d0>)
 80026f0:	f005 fc1a 	bl	8007f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 80026f4:	f241 5304 	movw	r3, #5380	; 0x1504
 80026f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026fa:	2301      	movs	r3, #1
 80026fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fe:	2300      	movs	r3, #0
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002702:	2300      	movs	r3, #0
 8002704:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002706:	f107 031c 	add.w	r3, r7, #28
 800270a:	4619      	mov	r1, r3
 800270c:	4857      	ldr	r0, [pc, #348]	; (800286c <MX_GPIO_Init+0x2b8>)
 800270e:	f005 fa4b 	bl	8007ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin ARM2_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|ARM2_Pin|GPIO_PIN_15;
 8002712:	f248 0306 	movw	r3, #32774	; 0x8006
 8002716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002718:	2301      	movs	r3, #1
 800271a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271c:	2300      	movs	r3, #0
 800271e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002720:	2300      	movs	r3, #0
 8002722:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002724:	f107 031c 	add.w	r3, r7, #28
 8002728:	4619      	mov	r1, r3
 800272a:	4851      	ldr	r0, [pc, #324]	; (8002870 <MX_GPIO_Init+0x2bc>)
 800272c:	f005 fa3c 	bl	8007ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002730:	2330      	movs	r3, #48	; 0x30
 8002732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002734:	2301      	movs	r3, #1
 8002736:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002738:	2300      	movs	r3, #0
 800273a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273c:	2300      	movs	r3, #0
 800273e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002740:	f107 031c 	add.w	r3, r7, #28
 8002744:	4619      	mov	r1, r3
 8002746:	484b      	ldr	r0, [pc, #300]	; (8002874 <MX_GPIO_Init+0x2c0>)
 8002748:	f005 fa2e 	bl	8007ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PYRO1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|PYRO1_Pin;
 800274c:	2303      	movs	r3, #3
 800274e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002750:	2301      	movs	r3, #1
 8002752:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	2300      	movs	r3, #0
 8002756:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002758:	2300      	movs	r3, #0
 800275a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800275c:	f107 031c 	add.w	r3, r7, #28
 8002760:	4619      	mov	r1, r3
 8002762:	4845      	ldr	r0, [pc, #276]	; (8002878 <MX_GPIO_Init+0x2c4>)
 8002764:	f005 fa20 	bl	8007ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 8002768:	2304      	movs	r3, #4
 800276a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800276c:	2300      	movs	r3, #0
 800276e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002770:	2301      	movs	r3, #1
 8002772:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 8002774:	f107 031c 	add.w	r3, r7, #28
 8002778:	4619      	mov	r1, r3
 800277a:	483f      	ldr	r0, [pc, #252]	; (8002878 <MX_GPIO_Init+0x2c4>)
 800277c:	f005 fa14 	bl	8007ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 8002780:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8002784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002786:	2301      	movs	r3, #1
 8002788:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278a:	2300      	movs	r3, #0
 800278c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800278e:	2300      	movs	r3, #0
 8002790:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002792:	f107 031c 	add.w	r3, r7, #28
 8002796:	4619      	mov	r1, r3
 8002798:	4838      	ldr	r0, [pc, #224]	; (800287c <MX_GPIO_Init+0x2c8>)
 800279a:	f005 fa05 	bl	8007ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 800279e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80027a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027a4:	2300      	movs	r3, #0
 80027a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027a8:	2301      	movs	r3, #1
 80027aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027ac:	f107 031c 	add.w	r3, r7, #28
 80027b0:	4619      	mov	r1, r3
 80027b2:	4832      	ldr	r0, [pc, #200]	; (800287c <MX_GPIO_Init+0x2c8>)
 80027b4:	f005 f9f8 	bl	8007ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 80027b8:	2301      	movs	r3, #1
 80027ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027bc:	2300      	movs	r3, #0
 80027be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027c0:	2301      	movs	r3, #1
 80027c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 80027c4:	f107 031c 	add.w	r3, r7, #28
 80027c8:	4619      	mov	r1, r3
 80027ca:	482d      	ldr	r0, [pc, #180]	; (8002880 <MX_GPIO_Init+0x2cc>)
 80027cc:	f005 f9ec 	bl	8007ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 80027d0:	230e      	movs	r3, #14
 80027d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027d4:	2301      	movs	r3, #1
 80027d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d8:	2300      	movs	r3, #0
 80027da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027dc:	2300      	movs	r3, #0
 80027de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027e0:	f107 031c 	add.w	r3, r7, #28
 80027e4:	4619      	mov	r1, r3
 80027e6:	4826      	ldr	r0, [pc, #152]	; (8002880 <MX_GPIO_Init+0x2cc>)
 80027e8:	f005 f9de 	bl	8007ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 80027ec:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 80027f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027f2:	2300      	movs	r3, #0
 80027f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027f6:	2301      	movs	r3, #1
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027fa:	f107 031c 	add.w	r3, r7, #28
 80027fe:	4619      	mov	r1, r3
 8002800:	481a      	ldr	r0, [pc, #104]	; (800286c <MX_GPIO_Init+0x2b8>)
 8002802:	f005 f9d1 	bl	8007ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0;
 8002806:	f240 7301 	movw	r3, #1793	; 0x701
 800280a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800280c:	2301      	movs	r3, #1
 800280e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002810:	2300      	movs	r3, #0
 8002812:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002814:	2300      	movs	r3, #0
 8002816:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002818:	f107 031c 	add.w	r3, r7, #28
 800281c:	4619      	mov	r1, r3
 800281e:	4819      	ldr	r0, [pc, #100]	; (8002884 <MX_GPIO_Init+0x2d0>)
 8002820:	f005 f9c2 	bl	8007ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 8002824:	2310      	movs	r3, #16
 8002826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002828:	2300      	movs	r3, #0
 800282a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282c:	2300      	movs	r3, #0
 800282e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002830:	f107 031c 	add.w	r3, r7, #28
 8002834:	4619      	mov	r1, r3
 8002836:	4812      	ldr	r0, [pc, #72]	; (8002880 <MX_GPIO_Init+0x2cc>)
 8002838:	f005 f9b6 	bl	8007ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800283c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002842:	2302      	movs	r3, #2
 8002844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002846:	2300      	movs	r3, #0
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800284a:	2300      	movs	r3, #0
 800284c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800284e:	2300      	movs	r3, #0
 8002850:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002852:	f107 031c 	add.w	r3, r7, #28
 8002856:	4619      	mov	r1, r3
 8002858:	4805      	ldr	r0, [pc, #20]	; (8002870 <MX_GPIO_Init+0x2bc>)
 800285a:	f005 f9a5 	bl	8007ba8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800285e:	bf00      	nop
 8002860:	3730      	adds	r7, #48	; 0x30
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	58024400 	.word	0x58024400
 800286c:	58021000 	.word	0x58021000
 8002870:	58020000 	.word	0x58020000
 8002874:	58020800 	.word	0x58020800
 8002878:	58020400 	.word	0x58020400
 800287c:	58021400 	.word	0x58021400
 8002880:	58021800 	.word	0x58021800
 8002884:	58020c00 	.word	0x58020c00

08002888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800288c:	b672      	cpsid	i
}
 800288e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002890:	e7fe      	b.n	8002890 <Error_Handler+0x8>
	...

08002894 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800289a:	4b0a      	ldr	r3, [pc, #40]	; (80028c4 <HAL_MspInit+0x30>)
 800289c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80028a0:	4a08      	ldr	r2, [pc, #32]	; (80028c4 <HAL_MspInit+0x30>)
 80028a2:	f043 0302 	orr.w	r3, r3, #2
 80028a6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80028aa:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <HAL_MspInit+0x30>)
 80028ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	607b      	str	r3, [r7, #4]
 80028b6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	58024400 	.word	0x58024400

080028c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08c      	sub	sp, #48	; 0x30
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d0:	f107 031c 	add.w	r3, r7, #28
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	60da      	str	r2, [r3, #12]
 80028de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a5d      	ldr	r2, [pc, #372]	; (8002a5c <HAL_ADC_MspInit+0x194>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d159      	bne.n	800299e <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80028ea:	4b5d      	ldr	r3, [pc, #372]	; (8002a60 <HAL_ADC_MspInit+0x198>)
 80028ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80028f0:	4a5b      	ldr	r2, [pc, #364]	; (8002a60 <HAL_ADC_MspInit+0x198>)
 80028f2:	f043 0320 	orr.w	r3, r3, #32
 80028f6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80028fa:	4b59      	ldr	r3, [pc, #356]	; (8002a60 <HAL_ADC_MspInit+0x198>)
 80028fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002900:	f003 0320 	and.w	r3, r3, #32
 8002904:	61bb      	str	r3, [r7, #24]
 8002906:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002908:	4b55      	ldr	r3, [pc, #340]	; (8002a60 <HAL_ADC_MspInit+0x198>)
 800290a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800290e:	4a54      	ldr	r2, [pc, #336]	; (8002a60 <HAL_ADC_MspInit+0x198>)
 8002910:	f043 0304 	orr.w	r3, r3, #4
 8002914:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002918:	4b51      	ldr	r3, [pc, #324]	; (8002a60 <HAL_ADC_MspInit+0x198>)
 800291a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	617b      	str	r3, [r7, #20]
 8002924:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = ARM_CHECK_Pin;
 8002926:	2301      	movs	r3, #1
 8002928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800292a:	2303      	movs	r3, #3
 800292c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292e:	2300      	movs	r3, #0
 8002930:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002932:	f107 031c 	add.w	r3, r7, #28
 8002936:	4619      	mov	r1, r3
 8002938:	484a      	ldr	r0, [pc, #296]	; (8002a64 <HAL_ADC_MspInit+0x19c>)
 800293a:	f005 f935 	bl	8007ba8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 800293e:	4b4a      	ldr	r3, [pc, #296]	; (8002a68 <HAL_ADC_MspInit+0x1a0>)
 8002940:	4a4a      	ldr	r2, [pc, #296]	; (8002a6c <HAL_ADC_MspInit+0x1a4>)
 8002942:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002944:	4b48      	ldr	r3, [pc, #288]	; (8002a68 <HAL_ADC_MspInit+0x1a0>)
 8002946:	2209      	movs	r2, #9
 8002948:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800294a:	4b47      	ldr	r3, [pc, #284]	; (8002a68 <HAL_ADC_MspInit+0x1a0>)
 800294c:	2200      	movs	r2, #0
 800294e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002950:	4b45      	ldr	r3, [pc, #276]	; (8002a68 <HAL_ADC_MspInit+0x1a0>)
 8002952:	2200      	movs	r2, #0
 8002954:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002956:	4b44      	ldr	r3, [pc, #272]	; (8002a68 <HAL_ADC_MspInit+0x1a0>)
 8002958:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800295c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800295e:	4b42      	ldr	r3, [pc, #264]	; (8002a68 <HAL_ADC_MspInit+0x1a0>)
 8002960:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002964:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002966:	4b40      	ldr	r3, [pc, #256]	; (8002a68 <HAL_ADC_MspInit+0x1a0>)
 8002968:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800296c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800296e:	4b3e      	ldr	r3, [pc, #248]	; (8002a68 <HAL_ADC_MspInit+0x1a0>)
 8002970:	2200      	movs	r2, #0
 8002972:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002974:	4b3c      	ldr	r3, [pc, #240]	; (8002a68 <HAL_ADC_MspInit+0x1a0>)
 8002976:	2200      	movs	r2, #0
 8002978:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800297a:	4b3b      	ldr	r3, [pc, #236]	; (8002a68 <HAL_ADC_MspInit+0x1a0>)
 800297c:	2200      	movs	r2, #0
 800297e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002980:	4839      	ldr	r0, [pc, #228]	; (8002a68 <HAL_ADC_MspInit+0x1a0>)
 8002982:	f002 fcd9 	bl	8005338 <HAL_DMA_Init>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 800298c:	f7ff ff7c 	bl	8002888 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a35      	ldr	r2, [pc, #212]	; (8002a68 <HAL_ADC_MspInit+0x1a0>)
 8002994:	659a      	str	r2, [r3, #88]	; 0x58
 8002996:	4a34      	ldr	r2, [pc, #208]	; (8002a68 <HAL_ADC_MspInit+0x1a0>)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800299c:	e059      	b.n	8002a52 <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a33      	ldr	r2, [pc, #204]	; (8002a70 <HAL_ADC_MspInit+0x1a8>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d154      	bne.n	8002a52 <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80029a8:	4b2d      	ldr	r3, [pc, #180]	; (8002a60 <HAL_ADC_MspInit+0x198>)
 80029aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ae:	4a2c      	ldr	r2, [pc, #176]	; (8002a60 <HAL_ADC_MspInit+0x198>)
 80029b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029b8:	4b29      	ldr	r3, [pc, #164]	; (8002a60 <HAL_ADC_MspInit+0x198>)
 80029ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029c2:	613b      	str	r3, [r7, #16]
 80029c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029c6:	4b26      	ldr	r3, [pc, #152]	; (8002a60 <HAL_ADC_MspInit+0x198>)
 80029c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029cc:	4a24      	ldr	r2, [pc, #144]	; (8002a60 <HAL_ADC_MspInit+0x198>)
 80029ce:	f043 0304 	orr.w	r3, r3, #4
 80029d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029d6:	4b22      	ldr	r3, [pc, #136]	; (8002a60 <HAL_ADC_MspInit+0x198>)
 80029d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80029e4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80029e8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80029ec:	f001 f80e 	bl	8003a0c <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 80029f0:	4b20      	ldr	r3, [pc, #128]	; (8002a74 <HAL_ADC_MspInit+0x1ac>)
 80029f2:	4a21      	ldr	r2, [pc, #132]	; (8002a78 <HAL_ADC_MspInit+0x1b0>)
 80029f4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80029f6:	4b1f      	ldr	r3, [pc, #124]	; (8002a74 <HAL_ADC_MspInit+0x1ac>)
 80029f8:	2273      	movs	r2, #115	; 0x73
 80029fa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029fc:	4b1d      	ldr	r3, [pc, #116]	; (8002a74 <HAL_ADC_MspInit+0x1ac>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a02:	4b1c      	ldr	r3, [pc, #112]	; (8002a74 <HAL_ADC_MspInit+0x1ac>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002a08:	4b1a      	ldr	r3, [pc, #104]	; (8002a74 <HAL_ADC_MspInit+0x1ac>)
 8002a0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a10:	4b18      	ldr	r3, [pc, #96]	; (8002a74 <HAL_ADC_MspInit+0x1ac>)
 8002a12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a18:	4b16      	ldr	r3, [pc, #88]	; (8002a74 <HAL_ADC_MspInit+0x1ac>)
 8002a1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002a20:	4b14      	ldr	r3, [pc, #80]	; (8002a74 <HAL_ADC_MspInit+0x1ac>)
 8002a22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002a28:	4b12      	ldr	r3, [pc, #72]	; (8002a74 <HAL_ADC_MspInit+0x1ac>)
 8002a2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a2e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a30:	4b10      	ldr	r3, [pc, #64]	; (8002a74 <HAL_ADC_MspInit+0x1ac>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002a36:	480f      	ldr	r0, [pc, #60]	; (8002a74 <HAL_ADC_MspInit+0x1ac>)
 8002a38:	f002 fc7e 	bl	8005338 <HAL_DMA_Init>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 8002a42:	f7ff ff21 	bl	8002888 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a0a      	ldr	r2, [pc, #40]	; (8002a74 <HAL_ADC_MspInit+0x1ac>)
 8002a4a:	659a      	str	r2, [r3, #88]	; 0x58
 8002a4c:	4a09      	ldr	r2, [pc, #36]	; (8002a74 <HAL_ADC_MspInit+0x1ac>)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002a52:	bf00      	nop
 8002a54:	3730      	adds	r7, #48	; 0x30
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40022000 	.word	0x40022000
 8002a60:	58024400 	.word	0x58024400
 8002a64:	58020800 	.word	0x58020800
 8002a68:	24000cd8 	.word	0x24000cd8
 8002a6c:	40020088 	.word	0x40020088
 8002a70:	58026000 	.word	0x58026000
 8002a74:	24000d50 	.word	0x24000d50
 8002a78:	400204b8 	.word	0x400204b8

08002a7c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b0b8      	sub	sp, #224	; 0xe0
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a84:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	605a      	str	r2, [r3, #4]
 8002a8e:	609a      	str	r2, [r3, #8]
 8002a90:	60da      	str	r2, [r3, #12]
 8002a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a94:	f107 0310 	add.w	r3, r7, #16
 8002a98:	22b8      	movs	r2, #184	; 0xb8
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f014 fad9 	bl	8017054 <memset>
  if(hfdcan->Instance==FDCAN3)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a26      	ldr	r2, [pc, #152]	; (8002b40 <HAL_FDCAN_MspInit+0xc4>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d145      	bne.n	8002b38 <HAL_FDCAN_MspInit+0xbc>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002aac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002ab0:	f04f 0300 	mov.w	r3, #0
 8002ab4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002ab8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002abc:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002abe:	f107 0310 	add.w	r3, r7, #16
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f007 fe5e 	bl	800a784 <HAL_RCCEx_PeriphCLKConfig>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8002ace:	f7ff fedb 	bl	8002888 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002ad2:	4b1c      	ldr	r3, [pc, #112]	; (8002b44 <HAL_FDCAN_MspInit+0xc8>)
 8002ad4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002ad8:	4a1a      	ldr	r2, [pc, #104]	; (8002b44 <HAL_FDCAN_MspInit+0xc8>)
 8002ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ade:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002ae2:	4b18      	ldr	r3, [pc, #96]	; (8002b44 <HAL_FDCAN_MspInit+0xc8>)
 8002ae4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002af0:	4b14      	ldr	r3, [pc, #80]	; (8002b44 <HAL_FDCAN_MspInit+0xc8>)
 8002af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002af6:	4a13      	ldr	r2, [pc, #76]	; (8002b44 <HAL_FDCAN_MspInit+0xc8>)
 8002af8:	f043 0320 	orr.w	r3, r3, #32
 8002afc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b00:	4b10      	ldr	r3, [pc, #64]	; (8002b44 <HAL_FDCAN_MspInit+0xc8>)
 8002b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b06:	f003 0320 	and.w	r3, r3, #32
 8002b0a:	60bb      	str	r3, [r7, #8]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b0e:	23c0      	movs	r3, #192	; 0xc0
 8002b10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b14:	2302      	movs	r3, #2
 8002b16:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b20:	2300      	movs	r3, #0
 8002b22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8002b26:	2302      	movs	r3, #2
 8002b28:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b2c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b30:	4619      	mov	r1, r3
 8002b32:	4805      	ldr	r0, [pc, #20]	; (8002b48 <HAL_FDCAN_MspInit+0xcc>)
 8002b34:	f005 f838 	bl	8007ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8002b38:	bf00      	nop
 8002b3a:	37e0      	adds	r7, #224	; 0xe0
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	4000d400 	.word	0x4000d400
 8002b44:	58024400 	.word	0x58024400
 8002b48:	58021400 	.word	0x58021400

08002b4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b0b8      	sub	sp, #224	; 0xe0
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b54:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	605a      	str	r2, [r3, #4]
 8002b5e:	609a      	str	r2, [r3, #8]
 8002b60:	60da      	str	r2, [r3, #12]
 8002b62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b64:	f107 0310 	add.w	r3, r7, #16
 8002b68:	22b8      	movs	r2, #184	; 0xb8
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f014 fa71 	bl	8017054 <memset>
  if(hi2c->Instance==I2C2)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a2a      	ldr	r2, [pc, #168]	; (8002c20 <HAL_I2C_MspInit+0xd4>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d14d      	bne.n	8002c18 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002b7c:	f04f 0208 	mov.w	r2, #8
 8002b80:	f04f 0300 	mov.w	r3, #0
 8002b84:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b8e:	f107 0310 	add.w	r3, r7, #16
 8002b92:	4618      	mov	r0, r3
 8002b94:	f007 fdf6 	bl	800a784 <HAL_RCCEx_PeriphCLKConfig>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002b9e:	f7ff fe73 	bl	8002888 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ba2:	4b20      	ldr	r3, [pc, #128]	; (8002c24 <HAL_I2C_MspInit+0xd8>)
 8002ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ba8:	4a1e      	ldr	r2, [pc, #120]	; (8002c24 <HAL_I2C_MspInit+0xd8>)
 8002baa:	f043 0320 	orr.w	r3, r3, #32
 8002bae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bb2:	4b1c      	ldr	r3, [pc, #112]	; (8002c24 <HAL_I2C_MspInit+0xd8>)
 8002bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bb8:	f003 0320 	and.w	r3, r3, #32
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bc6:	2312      	movs	r3, #18
 8002bc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002bd8:	2304      	movs	r3, #4
 8002bda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002bde:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002be2:	4619      	mov	r1, r3
 8002be4:	4810      	ldr	r0, [pc, #64]	; (8002c28 <HAL_I2C_MspInit+0xdc>)
 8002be6:	f004 ffdf 	bl	8007ba8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002bea:	4b0e      	ldr	r3, [pc, #56]	; (8002c24 <HAL_I2C_MspInit+0xd8>)
 8002bec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bf0:	4a0c      	ldr	r2, [pc, #48]	; (8002c24 <HAL_I2C_MspInit+0xd8>)
 8002bf2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bf6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002bfa:	4b0a      	ldr	r3, [pc, #40]	; (8002c24 <HAL_I2C_MspInit+0xd8>)
 8002bfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c04:	60bb      	str	r3, [r7, #8]
 8002c06:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8002c08:	2200      	movs	r2, #0
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	2021      	movs	r0, #33	; 0x21
 8002c0e:	f002 fb5e 	bl	80052ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002c12:	2021      	movs	r0, #33	; 0x21
 8002c14:	f002 fb75 	bl	8005302 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002c18:	bf00      	nop
 8002c1a:	37e0      	adds	r7, #224	; 0xe0
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	40005800 	.word	0x40005800
 8002c24:	58024400 	.word	0x58024400
 8002c28:	58021400 	.word	0x58021400

08002c2c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b0ba      	sub	sp, #232	; 0xe8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c34:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	605a      	str	r2, [r3, #4]
 8002c3e:	609a      	str	r2, [r3, #8]
 8002c40:	60da      	str	r2, [r3, #12]
 8002c42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c44:	f107 0318 	add.w	r3, r7, #24
 8002c48:	22b8      	movs	r2, #184	; 0xb8
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f014 fa01 	bl	8017054 <memset>
  if(hsd->Instance==SDMMC2)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a5d      	ldr	r2, [pc, #372]	; (8002dcc <HAL_SD_MspInit+0x1a0>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	f040 80b3 	bne.w	8002dc4 <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002c5e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c62:	f04f 0300 	mov.w	r3, #0
 8002c66:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c6e:	f107 0318 	add.w	r3, r7, #24
 8002c72:	4618      	mov	r0, r3
 8002c74:	f007 fd86 	bl	800a784 <HAL_RCCEx_PeriphCLKConfig>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8002c7e:	f7ff fe03 	bl	8002888 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8002c82:	4b53      	ldr	r3, [pc, #332]	; (8002dd0 <HAL_SD_MspInit+0x1a4>)
 8002c84:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002c88:	4a51      	ldr	r2, [pc, #324]	; (8002dd0 <HAL_SD_MspInit+0x1a4>)
 8002c8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c8e:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002c92:	4b4f      	ldr	r3, [pc, #316]	; (8002dd0 <HAL_SD_MspInit+0x1a4>)
 8002c94:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002c98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c9c:	617b      	str	r3, [r7, #20]
 8002c9e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ca0:	4b4b      	ldr	r3, [pc, #300]	; (8002dd0 <HAL_SD_MspInit+0x1a4>)
 8002ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ca6:	4a4a      	ldr	r2, [pc, #296]	; (8002dd0 <HAL_SD_MspInit+0x1a4>)
 8002ca8:	f043 0308 	orr.w	r3, r3, #8
 8002cac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cb0:	4b47      	ldr	r3, [pc, #284]	; (8002dd0 <HAL_SD_MspInit+0x1a4>)
 8002cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	613b      	str	r3, [r7, #16]
 8002cbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002cbe:	4b44      	ldr	r3, [pc, #272]	; (8002dd0 <HAL_SD_MspInit+0x1a4>)
 8002cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cc4:	4a42      	ldr	r2, [pc, #264]	; (8002dd0 <HAL_SD_MspInit+0x1a4>)
 8002cc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cce:	4b40      	ldr	r3, [pc, #256]	; (8002dd0 <HAL_SD_MspInit+0x1a4>)
 8002cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002cdc:	2340      	movs	r3, #64	; 0x40
 8002cde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002cf4:	230b      	movs	r3, #11
 8002cf6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cfa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4834      	ldr	r0, [pc, #208]	; (8002dd4 <HAL_SD_MspInit+0x1a8>)
 8002d02:	f004 ff51 	bl	8007ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002d06:	2380      	movs	r3, #128	; 0x80
 8002d08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d12:	2301      	movs	r3, #1
 8002d14:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002d1e:	230b      	movs	r3, #11
 8002d20:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d24:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d28:	4619      	mov	r1, r3
 8002d2a:	482a      	ldr	r0, [pc, #168]	; (8002dd4 <HAL_SD_MspInit+0x1a8>)
 8002d2c:	f004 ff3c 	bl	8007ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d38:	2302      	movs	r3, #2
 8002d3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d44:	2303      	movs	r3, #3
 8002d46:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002d4a:	230b      	movs	r3, #11
 8002d4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d50:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d54:	4619      	mov	r1, r3
 8002d56:	4820      	ldr	r0, [pc, #128]	; (8002dd8 <HAL_SD_MspInit+0x1ac>)
 8002d58:	f004 ff26 	bl	8007ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d64:	2302      	movs	r3, #2
 8002d66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d70:	2303      	movs	r3, #3
 8002d72:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002d76:	230b      	movs	r3, #11
 8002d78:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d7c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d80:	4619      	mov	r1, r3
 8002d82:	4815      	ldr	r0, [pc, #84]	; (8002dd8 <HAL_SD_MspInit+0x1ac>)
 8002d84:	f004 ff10 	bl	8007ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002d88:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002d8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d90:	2302      	movs	r3, #2
 8002d92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8002da2:	230a      	movs	r3, #10
 8002da4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002da8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002dac:	4619      	mov	r1, r3
 8002dae:	480a      	ldr	r0, [pc, #40]	; (8002dd8 <HAL_SD_MspInit+0x1ac>)
 8002db0:	f004 fefa 	bl	8007ba8 <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8002db4:	2200      	movs	r2, #0
 8002db6:	2100      	movs	r1, #0
 8002db8:	207c      	movs	r0, #124	; 0x7c
 8002dba:	f002 fa88 	bl	80052ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8002dbe:	207c      	movs	r0, #124	; 0x7c
 8002dc0:	f002 fa9f 	bl	8005302 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8002dc4:	bf00      	nop
 8002dc6:	37e8      	adds	r7, #232	; 0xe8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	48022400 	.word	0x48022400
 8002dd0:	58024400 	.word	0x58024400
 8002dd4:	58020c00 	.word	0x58020c00
 8002dd8:	58021800 	.word	0x58021800

08002ddc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08e      	sub	sp, #56	; 0x38
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	605a      	str	r2, [r3, #4]
 8002dee:	609a      	str	r2, [r3, #8]
 8002df0:	60da      	str	r2, [r3, #12]
 8002df2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a4f      	ldr	r2, [pc, #316]	; (8002f38 <HAL_SPI_MspInit+0x15c>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d12e      	bne.n	8002e5c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002dfe:	4b4f      	ldr	r3, [pc, #316]	; (8002f3c <HAL_SPI_MspInit+0x160>)
 8002e00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e04:	4a4d      	ldr	r2, [pc, #308]	; (8002f3c <HAL_SPI_MspInit+0x160>)
 8002e06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e0a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002e0e:	4b4b      	ldr	r3, [pc, #300]	; (8002f3c <HAL_SPI_MspInit+0x160>)
 8002e10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e18:	623b      	str	r3, [r7, #32]
 8002e1a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1c:	4b47      	ldr	r3, [pc, #284]	; (8002f3c <HAL_SPI_MspInit+0x160>)
 8002e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e22:	4a46      	ldr	r2, [pc, #280]	; (8002f3c <HAL_SPI_MspInit+0x160>)
 8002e24:	f043 0301 	orr.w	r3, r3, #1
 8002e28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e2c:	4b43      	ldr	r3, [pc, #268]	; (8002f3c <HAL_SPI_MspInit+0x160>)
 8002e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	61fb      	str	r3, [r7, #28]
 8002e38:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002e3a:	23e0      	movs	r3, #224	; 0xe0
 8002e3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3e:	2302      	movs	r3, #2
 8002e40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e42:	2300      	movs	r3, #0
 8002e44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e46:	2300      	movs	r3, #0
 8002e48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e4a:	2305      	movs	r3, #5
 8002e4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e52:	4619      	mov	r1, r3
 8002e54:	483a      	ldr	r0, [pc, #232]	; (8002f40 <HAL_SPI_MspInit+0x164>)
 8002e56:	f004 fea7 	bl	8007ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002e5a:	e068      	b.n	8002f2e <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a38      	ldr	r2, [pc, #224]	; (8002f44 <HAL_SPI_MspInit+0x168>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d12f      	bne.n	8002ec6 <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002e66:	4b35      	ldr	r3, [pc, #212]	; (8002f3c <HAL_SPI_MspInit+0x160>)
 8002e68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e6c:	4a33      	ldr	r2, [pc, #204]	; (8002f3c <HAL_SPI_MspInit+0x160>)
 8002e6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e72:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e76:	4b31      	ldr	r3, [pc, #196]	; (8002f3c <HAL_SPI_MspInit+0x160>)
 8002e78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e80:	61bb      	str	r3, [r7, #24]
 8002e82:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e84:	4b2d      	ldr	r3, [pc, #180]	; (8002f3c <HAL_SPI_MspInit+0x160>)
 8002e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e8a:	4a2c      	ldr	r2, [pc, #176]	; (8002f3c <HAL_SPI_MspInit+0x160>)
 8002e8c:	f043 0302 	orr.w	r3, r3, #2
 8002e90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e94:	4b29      	ldr	r3, [pc, #164]	; (8002f3c <HAL_SPI_MspInit+0x160>)
 8002e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	617b      	str	r3, [r7, #20]
 8002ea0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002ea2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002ea6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eac:	2300      	movs	r3, #0
 8002eae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002eb4:	2305      	movs	r3, #5
 8002eb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4822      	ldr	r0, [pc, #136]	; (8002f48 <HAL_SPI_MspInit+0x16c>)
 8002ec0:	f004 fe72 	bl	8007ba8 <HAL_GPIO_Init>
}
 8002ec4:	e033      	b.n	8002f2e <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a20      	ldr	r2, [pc, #128]	; (8002f4c <HAL_SPI_MspInit+0x170>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d12e      	bne.n	8002f2e <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002ed0:	4b1a      	ldr	r3, [pc, #104]	; (8002f3c <HAL_SPI_MspInit+0x160>)
 8002ed2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ed6:	4a19      	ldr	r2, [pc, #100]	; (8002f3c <HAL_SPI_MspInit+0x160>)
 8002ed8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002edc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ee0:	4b16      	ldr	r3, [pc, #88]	; (8002f3c <HAL_SPI_MspInit+0x160>)
 8002ee2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ee6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eea:	613b      	str	r3, [r7, #16]
 8002eec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eee:	4b13      	ldr	r3, [pc, #76]	; (8002f3c <HAL_SPI_MspInit+0x160>)
 8002ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ef4:	4a11      	ldr	r2, [pc, #68]	; (8002f3c <HAL_SPI_MspInit+0x160>)
 8002ef6:	f043 0304 	orr.w	r3, r3, #4
 8002efa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002efe:	4b0f      	ldr	r3, [pc, #60]	; (8002f3c <HAL_SPI_MspInit+0x160>)
 8002f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	60fb      	str	r3, [r7, #12]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002f0c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002f10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f12:	2302      	movs	r3, #2
 8002f14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f16:	2300      	movs	r3, #0
 8002f18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002f1e:	2306      	movs	r3, #6
 8002f20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f26:	4619      	mov	r1, r3
 8002f28:	4809      	ldr	r0, [pc, #36]	; (8002f50 <HAL_SPI_MspInit+0x174>)
 8002f2a:	f004 fe3d 	bl	8007ba8 <HAL_GPIO_Init>
}
 8002f2e:	bf00      	nop
 8002f30:	3738      	adds	r7, #56	; 0x38
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	40013000 	.word	0x40013000
 8002f3c:	58024400 	.word	0x58024400
 8002f40:	58020000 	.word	0x58020000
 8002f44:	40003800 	.word	0x40003800
 8002f48:	58020400 	.word	0x58020400
 8002f4c:	40003c00 	.word	0x40003c00
 8002f50:	58020800 	.word	0x58020800

08002f54 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b08c      	sub	sp, #48	; 0x30
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f5c:	f107 031c 	add.w	r3, r7, #28
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	605a      	str	r2, [r3, #4]
 8002f66:	609a      	str	r2, [r3, #8]
 8002f68:	60da      	str	r2, [r3, #12]
 8002f6a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f74:	d15d      	bne.n	8003032 <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f76:	4b8e      	ldr	r3, [pc, #568]	; (80031b0 <HAL_TIM_PWM_MspInit+0x25c>)
 8002f78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f7c:	4a8c      	ldr	r2, [pc, #560]	; (80031b0 <HAL_TIM_PWM_MspInit+0x25c>)
 8002f7e:	f043 0301 	orr.w	r3, r3, #1
 8002f82:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f86:	4b8a      	ldr	r3, [pc, #552]	; (80031b0 <HAL_TIM_PWM_MspInit+0x25c>)
 8002f88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	61bb      	str	r3, [r7, #24]
 8002f92:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f94:	4b86      	ldr	r3, [pc, #536]	; (80031b0 <HAL_TIM_PWM_MspInit+0x25c>)
 8002f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f9a:	4a85      	ldr	r2, [pc, #532]	; (80031b0 <HAL_TIM_PWM_MspInit+0x25c>)
 8002f9c:	f043 0301 	orr.w	r3, r3, #1
 8002fa0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fa4:	4b82      	ldr	r3, [pc, #520]	; (80031b0 <HAL_TIM_PWM_MspInit+0x25c>)
 8002fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	617b      	str	r3, [r7, #20]
 8002fb0:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fc6:	f107 031c 	add.w	r3, r7, #28
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4879      	ldr	r0, [pc, #484]	; (80031b4 <HAL_TIM_PWM_MspInit+0x260>)
 8002fce:	f004 fdeb 	bl	8007ba8 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 8002fd2:	4b79      	ldr	r3, [pc, #484]	; (80031b8 <HAL_TIM_PWM_MspInit+0x264>)
 8002fd4:	4a79      	ldr	r2, [pc, #484]	; (80031bc <HAL_TIM_PWM_MspInit+0x268>)
 8002fd6:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 8002fd8:	4b77      	ldr	r3, [pc, #476]	; (80031b8 <HAL_TIM_PWM_MspInit+0x264>)
 8002fda:	2214      	movs	r2, #20
 8002fdc:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fde:	4b76      	ldr	r3, [pc, #472]	; (80031b8 <HAL_TIM_PWM_MspInit+0x264>)
 8002fe0:	2240      	movs	r2, #64	; 0x40
 8002fe2:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fe4:	4b74      	ldr	r3, [pc, #464]	; (80031b8 <HAL_TIM_PWM_MspInit+0x264>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002fea:	4b73      	ldr	r3, [pc, #460]	; (80031b8 <HAL_TIM_PWM_MspInit+0x264>)
 8002fec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ff0:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ff2:	4b71      	ldr	r3, [pc, #452]	; (80031b8 <HAL_TIM_PWM_MspInit+0x264>)
 8002ff4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ff8:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ffa:	4b6f      	ldr	r3, [pc, #444]	; (80031b8 <HAL_TIM_PWM_MspInit+0x264>)
 8002ffc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003000:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8003002:	4b6d      	ldr	r3, [pc, #436]	; (80031b8 <HAL_TIM_PWM_MspInit+0x264>)
 8003004:	2200      	movs	r2, #0
 8003006:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003008:	4b6b      	ldr	r3, [pc, #428]	; (80031b8 <HAL_TIM_PWM_MspInit+0x264>)
 800300a:	2200      	movs	r2, #0
 800300c:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800300e:	4b6a      	ldr	r3, [pc, #424]	; (80031b8 <HAL_TIM_PWM_MspInit+0x264>)
 8003010:	2200      	movs	r2, #0
 8003012:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8003014:	4868      	ldr	r0, [pc, #416]	; (80031b8 <HAL_TIM_PWM_MspInit+0x264>)
 8003016:	f002 f98f 	bl	8005338 <HAL_DMA_Init>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 8003020:	f7ff fc32 	bl	8002888 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a64      	ldr	r2, [pc, #400]	; (80031b8 <HAL_TIM_PWM_MspInit+0x264>)
 8003028:	62da      	str	r2, [r3, #44]	; 0x2c
 800302a:	4a63      	ldr	r2, [pc, #396]	; (80031b8 <HAL_TIM_PWM_MspInit+0x264>)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003030:	e119      	b.n	8003266 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a62      	ldr	r2, [pc, #392]	; (80031c0 <HAL_TIM_PWM_MspInit+0x26c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d16d      	bne.n	8003118 <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800303c:	4b5c      	ldr	r3, [pc, #368]	; (80031b0 <HAL_TIM_PWM_MspInit+0x25c>)
 800303e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003042:	4a5b      	ldr	r2, [pc, #364]	; (80031b0 <HAL_TIM_PWM_MspInit+0x25c>)
 8003044:	f043 0302 	orr.w	r3, r3, #2
 8003048:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800304c:	4b58      	ldr	r3, [pc, #352]	; (80031b0 <HAL_TIM_PWM_MspInit+0x25c>)
 800304e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	613b      	str	r3, [r7, #16]
 8003058:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 800305a:	4b5a      	ldr	r3, [pc, #360]	; (80031c4 <HAL_TIM_PWM_MspInit+0x270>)
 800305c:	4a5a      	ldr	r2, [pc, #360]	; (80031c8 <HAL_TIM_PWM_MspInit+0x274>)
 800305e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8003060:	4b58      	ldr	r3, [pc, #352]	; (80031c4 <HAL_TIM_PWM_MspInit+0x270>)
 8003062:	2218      	movs	r2, #24
 8003064:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003066:	4b57      	ldr	r3, [pc, #348]	; (80031c4 <HAL_TIM_PWM_MspInit+0x270>)
 8003068:	2240      	movs	r2, #64	; 0x40
 800306a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800306c:	4b55      	ldr	r3, [pc, #340]	; (80031c4 <HAL_TIM_PWM_MspInit+0x270>)
 800306e:	2200      	movs	r2, #0
 8003070:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003072:	4b54      	ldr	r3, [pc, #336]	; (80031c4 <HAL_TIM_PWM_MspInit+0x270>)
 8003074:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003078:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800307a:	4b52      	ldr	r3, [pc, #328]	; (80031c4 <HAL_TIM_PWM_MspInit+0x270>)
 800307c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003080:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003082:	4b50      	ldr	r3, [pc, #320]	; (80031c4 <HAL_TIM_PWM_MspInit+0x270>)
 8003084:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003088:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 800308a:	4b4e      	ldr	r3, [pc, #312]	; (80031c4 <HAL_TIM_PWM_MspInit+0x270>)
 800308c:	2200      	movs	r2, #0
 800308e:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8003090:	4b4c      	ldr	r3, [pc, #304]	; (80031c4 <HAL_TIM_PWM_MspInit+0x270>)
 8003092:	2200      	movs	r2, #0
 8003094:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003096:	4b4b      	ldr	r3, [pc, #300]	; (80031c4 <HAL_TIM_PWM_MspInit+0x270>)
 8003098:	2200      	movs	r2, #0
 800309a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 800309c:	4849      	ldr	r0, [pc, #292]	; (80031c4 <HAL_TIM_PWM_MspInit+0x270>)
 800309e:	f002 f94b 	bl	8005338 <HAL_DMA_Init>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 80030a8:	f7ff fbee 	bl	8002888 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a45      	ldr	r2, [pc, #276]	; (80031c4 <HAL_TIM_PWM_MspInit+0x270>)
 80030b0:	629a      	str	r2, [r3, #40]	; 0x28
 80030b2:	4a44      	ldr	r2, [pc, #272]	; (80031c4 <HAL_TIM_PWM_MspInit+0x270>)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 80030b8:	4b44      	ldr	r3, [pc, #272]	; (80031cc <HAL_TIM_PWM_MspInit+0x278>)
 80030ba:	4a45      	ldr	r2, [pc, #276]	; (80031d0 <HAL_TIM_PWM_MspInit+0x27c>)
 80030bc:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 80030be:	4b43      	ldr	r3, [pc, #268]	; (80031cc <HAL_TIM_PWM_MspInit+0x278>)
 80030c0:	2217      	movs	r2, #23
 80030c2:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030c4:	4b41      	ldr	r3, [pc, #260]	; (80031cc <HAL_TIM_PWM_MspInit+0x278>)
 80030c6:	2240      	movs	r2, #64	; 0x40
 80030c8:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80030ca:	4b40      	ldr	r3, [pc, #256]	; (80031cc <HAL_TIM_PWM_MspInit+0x278>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80030d0:	4b3e      	ldr	r3, [pc, #248]	; (80031cc <HAL_TIM_PWM_MspInit+0x278>)
 80030d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030d6:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80030d8:	4b3c      	ldr	r3, [pc, #240]	; (80031cc <HAL_TIM_PWM_MspInit+0x278>)
 80030da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030de:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80030e0:	4b3a      	ldr	r3, [pc, #232]	; (80031cc <HAL_TIM_PWM_MspInit+0x278>)
 80030e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030e6:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 80030e8:	4b38      	ldr	r3, [pc, #224]	; (80031cc <HAL_TIM_PWM_MspInit+0x278>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80030ee:	4b37      	ldr	r3, [pc, #220]	; (80031cc <HAL_TIM_PWM_MspInit+0x278>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030f4:	4b35      	ldr	r3, [pc, #212]	; (80031cc <HAL_TIM_PWM_MspInit+0x278>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 80030fa:	4834      	ldr	r0, [pc, #208]	; (80031cc <HAL_TIM_PWM_MspInit+0x278>)
 80030fc:	f002 f91c 	bl	8005338 <HAL_DMA_Init>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 8003106:	f7ff fbbf 	bl	8002888 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a2f      	ldr	r2, [pc, #188]	; (80031cc <HAL_TIM_PWM_MspInit+0x278>)
 800310e:	625a      	str	r2, [r3, #36]	; 0x24
 8003110:	4a2e      	ldr	r2, [pc, #184]	; (80031cc <HAL_TIM_PWM_MspInit+0x278>)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003116:	e0a6      	b.n	8003266 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a2d      	ldr	r2, [pc, #180]	; (80031d4 <HAL_TIM_PWM_MspInit+0x280>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d15e      	bne.n	80031e0 <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003122:	4b23      	ldr	r3, [pc, #140]	; (80031b0 <HAL_TIM_PWM_MspInit+0x25c>)
 8003124:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003128:	4a21      	ldr	r2, [pc, #132]	; (80031b0 <HAL_TIM_PWM_MspInit+0x25c>)
 800312a:	f043 0304 	orr.w	r3, r3, #4
 800312e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003132:	4b1f      	ldr	r3, [pc, #124]	; (80031b0 <HAL_TIM_PWM_MspInit+0x25c>)
 8003134:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 8003140:	4b25      	ldr	r3, [pc, #148]	; (80031d8 <HAL_TIM_PWM_MspInit+0x284>)
 8003142:	4a26      	ldr	r2, [pc, #152]	; (80031dc <HAL_TIM_PWM_MspInit+0x288>)
 8003144:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 8003146:	4b24      	ldr	r3, [pc, #144]	; (80031d8 <HAL_TIM_PWM_MspInit+0x284>)
 8003148:	221f      	movs	r2, #31
 800314a:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800314c:	4b22      	ldr	r3, [pc, #136]	; (80031d8 <HAL_TIM_PWM_MspInit+0x284>)
 800314e:	2240      	movs	r2, #64	; 0x40
 8003150:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003152:	4b21      	ldr	r3, [pc, #132]	; (80031d8 <HAL_TIM_PWM_MspInit+0x284>)
 8003154:	2200      	movs	r2, #0
 8003156:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003158:	4b1f      	ldr	r3, [pc, #124]	; (80031d8 <HAL_TIM_PWM_MspInit+0x284>)
 800315a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800315e:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003160:	4b1d      	ldr	r3, [pc, #116]	; (80031d8 <HAL_TIM_PWM_MspInit+0x284>)
 8003162:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003166:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003168:	4b1b      	ldr	r3, [pc, #108]	; (80031d8 <HAL_TIM_PWM_MspInit+0x284>)
 800316a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800316e:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8003170:	4b19      	ldr	r3, [pc, #100]	; (80031d8 <HAL_TIM_PWM_MspInit+0x284>)
 8003172:	2200      	movs	r2, #0
 8003174:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003176:	4b18      	ldr	r3, [pc, #96]	; (80031d8 <HAL_TIM_PWM_MspInit+0x284>)
 8003178:	2200      	movs	r2, #0
 800317a:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800317c:	4b16      	ldr	r3, [pc, #88]	; (80031d8 <HAL_TIM_PWM_MspInit+0x284>)
 800317e:	2200      	movs	r2, #0
 8003180:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8003182:	4815      	ldr	r0, [pc, #84]	; (80031d8 <HAL_TIM_PWM_MspInit+0x284>)
 8003184:	f002 f8d8 	bl	8005338 <HAL_DMA_Init>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 800318e:	f7ff fb7b 	bl	8002888 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a10      	ldr	r2, [pc, #64]	; (80031d8 <HAL_TIM_PWM_MspInit+0x284>)
 8003196:	62da      	str	r2, [r3, #44]	; 0x2c
 8003198:	4a0f      	ldr	r2, [pc, #60]	; (80031d8 <HAL_TIM_PWM_MspInit+0x284>)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800319e:	2200      	movs	r2, #0
 80031a0:	2100      	movs	r1, #0
 80031a2:	201e      	movs	r0, #30
 80031a4:	f002 f893 	bl	80052ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80031a8:	201e      	movs	r0, #30
 80031aa:	f002 f8aa 	bl	8005302 <HAL_NVIC_EnableIRQ>
}
 80031ae:	e05a      	b.n	8003266 <HAL_TIM_PWM_MspInit+0x312>
 80031b0:	58024400 	.word	0x58024400
 80031b4:	58020000 	.word	0x58020000
 80031b8:	2400124c 	.word	0x2400124c
 80031bc:	40020028 	.word	0x40020028
 80031c0:	40000400 	.word	0x40000400
 80031c4:	240012c4 	.word	0x240012c4
 80031c8:	40020058 	.word	0x40020058
 80031cc:	2400133c 	.word	0x2400133c
 80031d0:	40020070 	.word	0x40020070
 80031d4:	40000800 	.word	0x40000800
 80031d8:	240013b4 	.word	0x240013b4
 80031dc:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a22      	ldr	r2, [pc, #136]	; (8003270 <HAL_TIM_PWM_MspInit+0x31c>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d13d      	bne.n	8003266 <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80031ea:	4b22      	ldr	r3, [pc, #136]	; (8003274 <HAL_TIM_PWM_MspInit+0x320>)
 80031ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031f0:	4a20      	ldr	r2, [pc, #128]	; (8003274 <HAL_TIM_PWM_MspInit+0x320>)
 80031f2:	f043 0308 	orr.w	r3, r3, #8
 80031f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80031fa:	4b1e      	ldr	r3, [pc, #120]	; (8003274 <HAL_TIM_PWM_MspInit+0x320>)
 80031fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003200:	f003 0308 	and.w	r3, r3, #8
 8003204:	60bb      	str	r3, [r7, #8]
 8003206:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 8003208:	4b1b      	ldr	r3, [pc, #108]	; (8003278 <HAL_TIM_PWM_MspInit+0x324>)
 800320a:	4a1c      	ldr	r2, [pc, #112]	; (800327c <HAL_TIM_PWM_MspInit+0x328>)
 800320c:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 800320e:	4b1a      	ldr	r3, [pc, #104]	; (8003278 <HAL_TIM_PWM_MspInit+0x324>)
 8003210:	223a      	movs	r2, #58	; 0x3a
 8003212:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003214:	4b18      	ldr	r3, [pc, #96]	; (8003278 <HAL_TIM_PWM_MspInit+0x324>)
 8003216:	2240      	movs	r2, #64	; 0x40
 8003218:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800321a:	4b17      	ldr	r3, [pc, #92]	; (8003278 <HAL_TIM_PWM_MspInit+0x324>)
 800321c:	2200      	movs	r2, #0
 800321e:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8003220:	4b15      	ldr	r3, [pc, #84]	; (8003278 <HAL_TIM_PWM_MspInit+0x324>)
 8003222:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003226:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003228:	4b13      	ldr	r3, [pc, #76]	; (8003278 <HAL_TIM_PWM_MspInit+0x324>)
 800322a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800322e:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003230:	4b11      	ldr	r3, [pc, #68]	; (8003278 <HAL_TIM_PWM_MspInit+0x324>)
 8003232:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003236:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 8003238:	4b0f      	ldr	r3, [pc, #60]	; (8003278 <HAL_TIM_PWM_MspInit+0x324>)
 800323a:	2200      	movs	r2, #0
 800323c:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 800323e:	4b0e      	ldr	r3, [pc, #56]	; (8003278 <HAL_TIM_PWM_MspInit+0x324>)
 8003240:	2200      	movs	r2, #0
 8003242:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003244:	4b0c      	ldr	r3, [pc, #48]	; (8003278 <HAL_TIM_PWM_MspInit+0x324>)
 8003246:	2200      	movs	r2, #0
 8003248:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 800324a:	480b      	ldr	r0, [pc, #44]	; (8003278 <HAL_TIM_PWM_MspInit+0x324>)
 800324c:	f002 f874 	bl	8005338 <HAL_DMA_Init>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 8003256:	f7ff fb17 	bl	8002888 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a06      	ldr	r2, [pc, #24]	; (8003278 <HAL_TIM_PWM_MspInit+0x324>)
 800325e:	631a      	str	r2, [r3, #48]	; 0x30
 8003260:	4a05      	ldr	r2, [pc, #20]	; (8003278 <HAL_TIM_PWM_MspInit+0x324>)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003266:	bf00      	nop
 8003268:	3730      	adds	r7, #48	; 0x30
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40000c00 	.word	0x40000c00
 8003274:	58024400 	.word	0x58024400
 8003278:	2400142c 	.word	0x2400142c
 800327c:	40020040 	.word	0x40020040

08003280 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a0b      	ldr	r2, [pc, #44]	; (80032bc <HAL_TIM_Base_MspInit+0x3c>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d10e      	bne.n	80032b0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003292:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <HAL_TIM_Base_MspInit+0x40>)
 8003294:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003298:	4a09      	ldr	r2, [pc, #36]	; (80032c0 <HAL_TIM_Base_MspInit+0x40>)
 800329a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800329e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80032a2:	4b07      	ldr	r3, [pc, #28]	; (80032c0 <HAL_TIM_Base_MspInit+0x40>)
 80032a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80032b0:	bf00      	nop
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	40001c00 	.word	0x40001c00
 80032c0:	58024400 	.word	0x58024400

080032c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b08c      	sub	sp, #48	; 0x30
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032cc:	f107 031c 	add.w	r3, r7, #28
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	605a      	str	r2, [r3, #4]
 80032d6:	609a      	str	r2, [r3, #8]
 80032d8:	60da      	str	r2, [r3, #12]
 80032da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e4:	d120      	bne.n	8003328 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032e6:	4b52      	ldr	r3, [pc, #328]	; (8003430 <HAL_TIM_MspPostInit+0x16c>)
 80032e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032ec:	4a50      	ldr	r2, [pc, #320]	; (8003430 <HAL_TIM_MspPostInit+0x16c>)
 80032ee:	f043 0302 	orr.w	r3, r3, #2
 80032f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032f6:	4b4e      	ldr	r3, [pc, #312]	; (8003430 <HAL_TIM_MspPostInit+0x16c>)
 80032f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	61bb      	str	r3, [r7, #24]
 8003302:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003304:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330a:	2302      	movs	r3, #2
 800330c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800330e:	2302      	movs	r3, #2
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003312:	2300      	movs	r3, #0
 8003314:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003316:	2301      	movs	r3, #1
 8003318:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800331a:	f107 031c 	add.w	r3, r7, #28
 800331e:	4619      	mov	r1, r3
 8003320:	4844      	ldr	r0, [pc, #272]	; (8003434 <HAL_TIM_MspPostInit+0x170>)
 8003322:	f004 fc41 	bl	8007ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8003326:	e07f      	b.n	8003428 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a42      	ldr	r2, [pc, #264]	; (8003438 <HAL_TIM_MspPostInit+0x174>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d11f      	bne.n	8003372 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003332:	4b3f      	ldr	r3, [pc, #252]	; (8003430 <HAL_TIM_MspPostInit+0x16c>)
 8003334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003338:	4a3d      	ldr	r2, [pc, #244]	; (8003430 <HAL_TIM_MspPostInit+0x16c>)
 800333a:	f043 0302 	orr.w	r3, r3, #2
 800333e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003342:	4b3b      	ldr	r3, [pc, #236]	; (8003430 <HAL_TIM_MspPostInit+0x16c>)
 8003344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	617b      	str	r3, [r7, #20]
 800334e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003350:	2330      	movs	r3, #48	; 0x30
 8003352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003354:	2302      	movs	r3, #2
 8003356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003358:	2302      	movs	r3, #2
 800335a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800335c:	2300      	movs	r3, #0
 800335e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003360:	2302      	movs	r3, #2
 8003362:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003364:	f107 031c 	add.w	r3, r7, #28
 8003368:	4619      	mov	r1, r3
 800336a:	4832      	ldr	r0, [pc, #200]	; (8003434 <HAL_TIM_MspPostInit+0x170>)
 800336c:	f004 fc1c 	bl	8007ba8 <HAL_GPIO_Init>
}
 8003370:	e05a      	b.n	8003428 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a31      	ldr	r2, [pc, #196]	; (800343c <HAL_TIM_MspPostInit+0x178>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d131      	bne.n	80033e0 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800337c:	4b2c      	ldr	r3, [pc, #176]	; (8003430 <HAL_TIM_MspPostInit+0x16c>)
 800337e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003382:	4a2b      	ldr	r2, [pc, #172]	; (8003430 <HAL_TIM_MspPostInit+0x16c>)
 8003384:	f043 0308 	orr.w	r3, r3, #8
 8003388:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800338c:	4b28      	ldr	r3, [pc, #160]	; (8003430 <HAL_TIM_MspPostInit+0x16c>)
 800338e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003392:	f003 0308 	and.w	r3, r3, #8
 8003396:	613b      	str	r3, [r7, #16]
 8003398:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800339a:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800339e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a0:	2302      	movs	r3, #2
 80033a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a4:	2300      	movs	r3, #0
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a8:	2300      	movs	r3, #0
 80033aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80033ac:	2302      	movs	r3, #2
 80033ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033b0:	f107 031c 	add.w	r3, r7, #28
 80033b4:	4619      	mov	r1, r3
 80033b6:	4822      	ldr	r0, [pc, #136]	; (8003440 <HAL_TIM_MspPostInit+0x17c>)
 80033b8:	f004 fbf6 	bl	8007ba8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80033bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80033c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c2:	2302      	movs	r3, #2
 80033c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80033c6:	2302      	movs	r3, #2
 80033c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ca:	2300      	movs	r3, #0
 80033cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80033ce:	2302      	movs	r3, #2
 80033d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033d2:	f107 031c 	add.w	r3, r7, #28
 80033d6:	4619      	mov	r1, r3
 80033d8:	4819      	ldr	r0, [pc, #100]	; (8003440 <HAL_TIM_MspPostInit+0x17c>)
 80033da:	f004 fbe5 	bl	8007ba8 <HAL_GPIO_Init>
}
 80033de:	e023      	b.n	8003428 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a17      	ldr	r2, [pc, #92]	; (8003444 <HAL_TIM_MspPostInit+0x180>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d11e      	bne.n	8003428 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ea:	4b11      	ldr	r3, [pc, #68]	; (8003430 <HAL_TIM_MspPostInit+0x16c>)
 80033ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033f0:	4a0f      	ldr	r2, [pc, #60]	; (8003430 <HAL_TIM_MspPostInit+0x16c>)
 80033f2:	f043 0301 	orr.w	r3, r3, #1
 80033f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033fa:	4b0d      	ldr	r3, [pc, #52]	; (8003430 <HAL_TIM_MspPostInit+0x16c>)
 80033fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	60fb      	str	r3, [r7, #12]
 8003406:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003408:	2308      	movs	r3, #8
 800340a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800340c:	2302      	movs	r3, #2
 800340e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003410:	2302      	movs	r3, #2
 8003412:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003414:	2300      	movs	r3, #0
 8003416:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003418:	2302      	movs	r3, #2
 800341a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800341c:	f107 031c 	add.w	r3, r7, #28
 8003420:	4619      	mov	r1, r3
 8003422:	4809      	ldr	r0, [pc, #36]	; (8003448 <HAL_TIM_MspPostInit+0x184>)
 8003424:	f004 fbc0 	bl	8007ba8 <HAL_GPIO_Init>
}
 8003428:	bf00      	nop
 800342a:	3730      	adds	r7, #48	; 0x30
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	58024400 	.word	0x58024400
 8003434:	58020400 	.word	0x58020400
 8003438:	40000400 	.word	0x40000400
 800343c:	40000800 	.word	0x40000800
 8003440:	58020c00 	.word	0x58020c00
 8003444:	40000c00 	.word	0x40000c00
 8003448:	58020000 	.word	0x58020000

0800344c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b0ba      	sub	sp, #232	; 0xe8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003454:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	605a      	str	r2, [r3, #4]
 800345e:	609a      	str	r2, [r3, #8]
 8003460:	60da      	str	r2, [r3, #12]
 8003462:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003464:	f107 0318 	add.w	r3, r7, #24
 8003468:	22b8      	movs	r2, #184	; 0xb8
 800346a:	2100      	movs	r1, #0
 800346c:	4618      	mov	r0, r3
 800346e:	f013 fdf1 	bl	8017054 <memset>
  if(huart->Instance==UART4)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a4d      	ldr	r2, [pc, #308]	; (80035ac <HAL_UART_MspInit+0x160>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d147      	bne.n	800350c <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800347c:	f04f 0202 	mov.w	r2, #2
 8003480:	f04f 0300 	mov.w	r3, #0
 8003484:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003488:	2300      	movs	r3, #0
 800348a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800348e:	f107 0318 	add.w	r3, r7, #24
 8003492:	4618      	mov	r0, r3
 8003494:	f007 f976 	bl	800a784 <HAL_RCCEx_PeriphCLKConfig>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800349e:	f7ff f9f3 	bl	8002888 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80034a2:	4b43      	ldr	r3, [pc, #268]	; (80035b0 <HAL_UART_MspInit+0x164>)
 80034a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034a8:	4a41      	ldr	r2, [pc, #260]	; (80035b0 <HAL_UART_MspInit+0x164>)
 80034aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80034ae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80034b2:	4b3f      	ldr	r3, [pc, #252]	; (80035b0 <HAL_UART_MspInit+0x164>)
 80034b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034bc:	617b      	str	r3, [r7, #20]
 80034be:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034c0:	4b3b      	ldr	r3, [pc, #236]	; (80035b0 <HAL_UART_MspInit+0x164>)
 80034c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034c6:	4a3a      	ldr	r2, [pc, #232]	; (80035b0 <HAL_UART_MspInit+0x164>)
 80034c8:	f043 0302 	orr.w	r3, r3, #2
 80034cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034d0:	4b37      	ldr	r3, [pc, #220]	; (80035b0 <HAL_UART_MspInit+0x164>)
 80034d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	613b      	str	r3, [r7, #16]
 80034dc:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80034de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80034e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e6:	2302      	movs	r3, #2
 80034e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ec:	2300      	movs	r3, #0
 80034ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f2:	2300      	movs	r3, #0
 80034f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80034f8:	2308      	movs	r3, #8
 80034fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034fe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003502:	4619      	mov	r1, r3
 8003504:	482b      	ldr	r0, [pc, #172]	; (80035b4 <HAL_UART_MspInit+0x168>)
 8003506:	f004 fb4f 	bl	8007ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800350a:	e04a      	b.n	80035a2 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a29      	ldr	r2, [pc, #164]	; (80035b8 <HAL_UART_MspInit+0x16c>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d145      	bne.n	80035a2 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003516:	f04f 0201 	mov.w	r2, #1
 800351a:	f04f 0300 	mov.w	r3, #0
 800351e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003522:	2300      	movs	r3, #0
 8003524:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003528:	f107 0318 	add.w	r3, r7, #24
 800352c:	4618      	mov	r0, r3
 800352e:	f007 f929 	bl	800a784 <HAL_RCCEx_PeriphCLKConfig>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8003538:	f7ff f9a6 	bl	8002888 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800353c:	4b1c      	ldr	r3, [pc, #112]	; (80035b0 <HAL_UART_MspInit+0x164>)
 800353e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003542:	4a1b      	ldr	r2, [pc, #108]	; (80035b0 <HAL_UART_MspInit+0x164>)
 8003544:	f043 0320 	orr.w	r3, r3, #32
 8003548:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800354c:	4b18      	ldr	r3, [pc, #96]	; (80035b0 <HAL_UART_MspInit+0x164>)
 800354e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003552:	f003 0320 	and.w	r3, r3, #32
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800355a:	4b15      	ldr	r3, [pc, #84]	; (80035b0 <HAL_UART_MspInit+0x164>)
 800355c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003560:	4a13      	ldr	r2, [pc, #76]	; (80035b0 <HAL_UART_MspInit+0x164>)
 8003562:	f043 0304 	orr.w	r3, r3, #4
 8003566:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800356a:	4b11      	ldr	r3, [pc, #68]	; (80035b0 <HAL_UART_MspInit+0x164>)
 800356c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003570:	f003 0304 	and.w	r3, r3, #4
 8003574:	60bb      	str	r3, [r7, #8]
 8003576:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003578:	23c0      	movs	r3, #192	; 0xc0
 800357a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800357e:	2302      	movs	r3, #2
 8003580:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003584:	2300      	movs	r3, #0
 8003586:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800358a:	2300      	movs	r3, #0
 800358c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8003590:	2307      	movs	r3, #7
 8003592:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003596:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800359a:	4619      	mov	r1, r3
 800359c:	4807      	ldr	r0, [pc, #28]	; (80035bc <HAL_UART_MspInit+0x170>)
 800359e:	f004 fb03 	bl	8007ba8 <HAL_GPIO_Init>
}
 80035a2:	bf00      	nop
 80035a4:	37e8      	adds	r7, #232	; 0xe8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	40004c00 	.word	0x40004c00
 80035b0:	58024400 	.word	0x58024400
 80035b4:	58020400 	.word	0x58020400
 80035b8:	40011400 	.word	0x40011400
 80035bc:	58020800 	.word	0x58020800

080035c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80035c4:	e7fe      	b.n	80035c4 <NMI_Handler+0x4>

080035c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035c6:	b480      	push	{r7}
 80035c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035ca:	e7fe      	b.n	80035ca <HardFault_Handler+0x4>

080035cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035d0:	e7fe      	b.n	80035d0 <MemManage_Handler+0x4>

080035d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035d2:	b480      	push	{r7}
 80035d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035d6:	e7fe      	b.n	80035d6 <BusFault_Handler+0x4>

080035d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035dc:	e7fe      	b.n	80035dc <UsageFault_Handler+0x4>

080035de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035de:	b480      	push	{r7}
 80035e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035e2:	bf00      	nop
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035f0:	bf00      	nop
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035fa:	b480      	push	{r7}
 80035fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035fe:	bf00      	nop
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800360c:	f000 f9ba 	bl	8003984 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003610:	bf00      	nop
 8003612:	bd80      	pop	{r7, pc}

08003614 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8003618:	4802      	ldr	r0, [pc, #8]	; (8003624 <DMA1_Stream0_IRQHandler+0x10>)
 800361a:	f002 fc4f 	bl	8005ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800361e:	bf00      	nop
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	240013b4 	.word	0x240013b4

08003628 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 800362c:	4802      	ldr	r0, [pc, #8]	; (8003638 <DMA1_Stream1_IRQHandler+0x10>)
 800362e:	f002 fc45 	bl	8005ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003632:	bf00      	nop
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	2400124c 	.word	0x2400124c

0800363c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8003640:	4802      	ldr	r0, [pc, #8]	; (800364c <DMA1_Stream2_IRQHandler+0x10>)
 8003642:	f002 fc3b 	bl	8005ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003646:	bf00      	nop
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	2400142c 	.word	0x2400142c

08003650 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003654:	4802      	ldr	r0, [pc, #8]	; (8003660 <DMA1_Stream3_IRQHandler+0x10>)
 8003656:	f002 fc31 	bl	8005ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800365a:	bf00      	nop
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	240012c4 	.word	0x240012c4

08003664 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8003668:	4802      	ldr	r0, [pc, #8]	; (8003674 <DMA1_Stream4_IRQHandler+0x10>)
 800366a:	f002 fc27 	bl	8005ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800366e:	bf00      	nop
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	2400133c 	.word	0x2400133c

08003678 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800367c:	4802      	ldr	r0, [pc, #8]	; (8003688 <DMA1_Stream5_IRQHandler+0x10>)
 800367e:	f002 fc1d 	bl	8005ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003682:	bf00      	nop
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	24000cd8 	.word	0x24000cd8

0800368c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003690:	4802      	ldr	r0, [pc, #8]	; (800369c <TIM4_IRQHandler+0x10>)
 8003692:	f00c fa59 	bl	800fb48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003696:	bf00      	nop
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	24001168 	.word	0x24001168

080036a0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80036a4:	4802      	ldr	r0, [pc, #8]	; (80036b0 <I2C2_EV_IRQHandler+0x10>)
 80036a6:	f004 fce9 	bl	800807c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80036aa:	bf00      	nop
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	24000e68 	.word	0x24000e68

080036b4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80036b8:	4802      	ldr	r0, [pc, #8]	; (80036c4 <DMA2_Stream7_IRQHandler+0x10>)
 80036ba:	f002 fbff 	bl	8005ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80036be:	bf00      	nop
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	24000d50 	.word	0x24000d50

080036c8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80036cc:	4802      	ldr	r0, [pc, #8]	; (80036d8 <OTG_HS_IRQHandler+0x10>)
 80036ce:	f004 fedf 	bl	8008490 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80036d2:	bf00      	nop
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	24002ad0 	.word	0x24002ad0

080036dc <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 80036e0:	4802      	ldr	r0, [pc, #8]	; (80036ec <SDMMC2_IRQHandler+0x10>)
 80036e2:	f009 fea5 	bl	800d430 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 80036e6:	bf00      	nop
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	24000ebc 	.word	0x24000ebc

080036f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036f8:	4a14      	ldr	r2, [pc, #80]	; (800374c <_sbrk+0x5c>)
 80036fa:	4b15      	ldr	r3, [pc, #84]	; (8003750 <_sbrk+0x60>)
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003704:	4b13      	ldr	r3, [pc, #76]	; (8003754 <_sbrk+0x64>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d102      	bne.n	8003712 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800370c:	4b11      	ldr	r3, [pc, #68]	; (8003754 <_sbrk+0x64>)
 800370e:	4a12      	ldr	r2, [pc, #72]	; (8003758 <_sbrk+0x68>)
 8003710:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003712:	4b10      	ldr	r3, [pc, #64]	; (8003754 <_sbrk+0x64>)
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4413      	add	r3, r2
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	429a      	cmp	r2, r3
 800371e:	d207      	bcs.n	8003730 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003720:	f013 fca0 	bl	8017064 <__errno>
 8003724:	4603      	mov	r3, r0
 8003726:	220c      	movs	r2, #12
 8003728:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800372a:	f04f 33ff 	mov.w	r3, #4294967295
 800372e:	e009      	b.n	8003744 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003730:	4b08      	ldr	r3, [pc, #32]	; (8003754 <_sbrk+0x64>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003736:	4b07      	ldr	r3, [pc, #28]	; (8003754 <_sbrk+0x64>)
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4413      	add	r3, r2
 800373e:	4a05      	ldr	r2, [pc, #20]	; (8003754 <_sbrk+0x64>)
 8003740:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003742:	68fb      	ldr	r3, [r7, #12]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3718      	adds	r7, #24
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	24050000 	.word	0x24050000
 8003750:	00000800 	.word	0x00000800
 8003754:	240015cc 	.word	0x240015cc
 8003758:	24003348 	.word	0x24003348

0800375c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003760:	4b32      	ldr	r3, [pc, #200]	; (800382c <SystemInit+0xd0>)
 8003762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003766:	4a31      	ldr	r2, [pc, #196]	; (800382c <SystemInit+0xd0>)
 8003768:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800376c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003770:	4b2f      	ldr	r3, [pc, #188]	; (8003830 <SystemInit+0xd4>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 030f 	and.w	r3, r3, #15
 8003778:	2b06      	cmp	r3, #6
 800377a:	d807      	bhi.n	800378c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800377c:	4b2c      	ldr	r3, [pc, #176]	; (8003830 <SystemInit+0xd4>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f023 030f 	bic.w	r3, r3, #15
 8003784:	4a2a      	ldr	r2, [pc, #168]	; (8003830 <SystemInit+0xd4>)
 8003786:	f043 0307 	orr.w	r3, r3, #7
 800378a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800378c:	4b29      	ldr	r3, [pc, #164]	; (8003834 <SystemInit+0xd8>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a28      	ldr	r2, [pc, #160]	; (8003834 <SystemInit+0xd8>)
 8003792:	f043 0301 	orr.w	r3, r3, #1
 8003796:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003798:	4b26      	ldr	r3, [pc, #152]	; (8003834 <SystemInit+0xd8>)
 800379a:	2200      	movs	r2, #0
 800379c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800379e:	4b25      	ldr	r3, [pc, #148]	; (8003834 <SystemInit+0xd8>)
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	4924      	ldr	r1, [pc, #144]	; (8003834 <SystemInit+0xd8>)
 80037a4:	4b24      	ldr	r3, [pc, #144]	; (8003838 <SystemInit+0xdc>)
 80037a6:	4013      	ands	r3, r2
 80037a8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80037aa:	4b21      	ldr	r3, [pc, #132]	; (8003830 <SystemInit+0xd4>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0308 	and.w	r3, r3, #8
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d007      	beq.n	80037c6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80037b6:	4b1e      	ldr	r3, [pc, #120]	; (8003830 <SystemInit+0xd4>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f023 030f 	bic.w	r3, r3, #15
 80037be:	4a1c      	ldr	r2, [pc, #112]	; (8003830 <SystemInit+0xd4>)
 80037c0:	f043 0307 	orr.w	r3, r3, #7
 80037c4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80037c6:	4b1b      	ldr	r3, [pc, #108]	; (8003834 <SystemInit+0xd8>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80037cc:	4b19      	ldr	r3, [pc, #100]	; (8003834 <SystemInit+0xd8>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80037d2:	4b18      	ldr	r3, [pc, #96]	; (8003834 <SystemInit+0xd8>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80037d8:	4b16      	ldr	r3, [pc, #88]	; (8003834 <SystemInit+0xd8>)
 80037da:	4a18      	ldr	r2, [pc, #96]	; (800383c <SystemInit+0xe0>)
 80037dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80037de:	4b15      	ldr	r3, [pc, #84]	; (8003834 <SystemInit+0xd8>)
 80037e0:	4a17      	ldr	r2, [pc, #92]	; (8003840 <SystemInit+0xe4>)
 80037e2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80037e4:	4b13      	ldr	r3, [pc, #76]	; (8003834 <SystemInit+0xd8>)
 80037e6:	4a17      	ldr	r2, [pc, #92]	; (8003844 <SystemInit+0xe8>)
 80037e8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80037ea:	4b12      	ldr	r3, [pc, #72]	; (8003834 <SystemInit+0xd8>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80037f0:	4b10      	ldr	r3, [pc, #64]	; (8003834 <SystemInit+0xd8>)
 80037f2:	4a14      	ldr	r2, [pc, #80]	; (8003844 <SystemInit+0xe8>)
 80037f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80037f6:	4b0f      	ldr	r3, [pc, #60]	; (8003834 <SystemInit+0xd8>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80037fc:	4b0d      	ldr	r3, [pc, #52]	; (8003834 <SystemInit+0xd8>)
 80037fe:	4a11      	ldr	r2, [pc, #68]	; (8003844 <SystemInit+0xe8>)
 8003800:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003802:	4b0c      	ldr	r3, [pc, #48]	; (8003834 <SystemInit+0xd8>)
 8003804:	2200      	movs	r2, #0
 8003806:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003808:	4b0a      	ldr	r3, [pc, #40]	; (8003834 <SystemInit+0xd8>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a09      	ldr	r2, [pc, #36]	; (8003834 <SystemInit+0xd8>)
 800380e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003812:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003814:	4b07      	ldr	r3, [pc, #28]	; (8003834 <SystemInit+0xd8>)
 8003816:	2200      	movs	r2, #0
 8003818:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800381a:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <SystemInit+0xec>)
 800381c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003820:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003822:	bf00      	nop
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr
 800382c:	e000ed00 	.word	0xe000ed00
 8003830:	52002000 	.word	0x52002000
 8003834:	58024400 	.word	0x58024400
 8003838:	eaf6ed7f 	.word	0xeaf6ed7f
 800383c:	02020200 	.word	0x02020200
 8003840:	01ff0000 	.word	0x01ff0000
 8003844:	01010280 	.word	0x01010280
 8003848:	52004000 	.word	0x52004000

0800384c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800384c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003884 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003850:	f7ff ff84 	bl	800375c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003854:	480c      	ldr	r0, [pc, #48]	; (8003888 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003856:	490d      	ldr	r1, [pc, #52]	; (800388c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003858:	4a0d      	ldr	r2, [pc, #52]	; (8003890 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800385a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800385c:	e002      	b.n	8003864 <LoopCopyDataInit>

0800385e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800385e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003862:	3304      	adds	r3, #4

08003864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003868:	d3f9      	bcc.n	800385e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800386a:	4a0a      	ldr	r2, [pc, #40]	; (8003894 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800386c:	4c0a      	ldr	r4, [pc, #40]	; (8003898 <LoopFillZerobss+0x22>)
  movs r3, #0
 800386e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003870:	e001      	b.n	8003876 <LoopFillZerobss>

08003872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003874:	3204      	adds	r2, #4

08003876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003878:	d3fb      	bcc.n	8003872 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800387a:	f013 fbf9 	bl	8017070 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800387e:	f7fd fd57 	bl	8001330 <main>
  bx  lr
 8003882:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003884:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003888:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800388c:	24000150 	.word	0x24000150
  ldr r2, =_sidata
 8003890:	08018638 	.word	0x08018638
  ldr r2, =_sbss
 8003894:	24000150 	.word	0x24000150
  ldr r4, =_ebss
 8003898:	24003344 	.word	0x24003344

0800389c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800389c:	e7fe      	b.n	800389c <ADC3_IRQHandler>
	...

080038a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038a6:	2003      	movs	r0, #3
 80038a8:	f001 fd06 	bl	80052b8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80038ac:	f006 fd94 	bl	800a3d8 <HAL_RCC_GetSysClockFreq>
 80038b0:	4602      	mov	r2, r0
 80038b2:	4b15      	ldr	r3, [pc, #84]	; (8003908 <HAL_Init+0x68>)
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	0a1b      	lsrs	r3, r3, #8
 80038b8:	f003 030f 	and.w	r3, r3, #15
 80038bc:	4913      	ldr	r1, [pc, #76]	; (800390c <HAL_Init+0x6c>)
 80038be:	5ccb      	ldrb	r3, [r1, r3]
 80038c0:	f003 031f 	and.w	r3, r3, #31
 80038c4:	fa22 f303 	lsr.w	r3, r2, r3
 80038c8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80038ca:	4b0f      	ldr	r3, [pc, #60]	; (8003908 <HAL_Init+0x68>)
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	f003 030f 	and.w	r3, r3, #15
 80038d2:	4a0e      	ldr	r2, [pc, #56]	; (800390c <HAL_Init+0x6c>)
 80038d4:	5cd3      	ldrb	r3, [r2, r3]
 80038d6:	f003 031f 	and.w	r3, r3, #31
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	fa22 f303 	lsr.w	r3, r2, r3
 80038e0:	4a0b      	ldr	r2, [pc, #44]	; (8003910 <HAL_Init+0x70>)
 80038e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80038e4:	4a0b      	ldr	r2, [pc, #44]	; (8003914 <HAL_Init+0x74>)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80038ea:	200f      	movs	r0, #15
 80038ec:	f000 f814 	bl	8003918 <HAL_InitTick>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e002      	b.n	8003900 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80038fa:	f7fe ffcb 	bl	8002894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3708      	adds	r7, #8
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	58024400 	.word	0x58024400
 800390c:	08018484 	.word	0x08018484
 8003910:	24000004 	.word	0x24000004
 8003914:	24000000 	.word	0x24000000

08003918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003920:	4b15      	ldr	r3, [pc, #84]	; (8003978 <HAL_InitTick+0x60>)
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e021      	b.n	8003970 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800392c:	4b13      	ldr	r3, [pc, #76]	; (800397c <HAL_InitTick+0x64>)
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	4b11      	ldr	r3, [pc, #68]	; (8003978 <HAL_InitTick+0x60>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	4619      	mov	r1, r3
 8003936:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800393a:	fbb3 f3f1 	udiv	r3, r3, r1
 800393e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003942:	4618      	mov	r0, r3
 8003944:	f001 fceb 	bl	800531e <HAL_SYSTICK_Config>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e00e      	b.n	8003970 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2b0f      	cmp	r3, #15
 8003956:	d80a      	bhi.n	800396e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003958:	2200      	movs	r2, #0
 800395a:	6879      	ldr	r1, [r7, #4]
 800395c:	f04f 30ff 	mov.w	r0, #4294967295
 8003960:	f001 fcb5 	bl	80052ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003964:	4a06      	ldr	r2, [pc, #24]	; (8003980 <HAL_InitTick+0x68>)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800396a:	2300      	movs	r3, #0
 800396c:	e000      	b.n	8003970 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
}
 8003970:	4618      	mov	r0, r3
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	2400000c 	.word	0x2400000c
 800397c:	24000000 	.word	0x24000000
 8003980:	24000008 	.word	0x24000008

08003984 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003988:	4b06      	ldr	r3, [pc, #24]	; (80039a4 <HAL_IncTick+0x20>)
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	461a      	mov	r2, r3
 800398e:	4b06      	ldr	r3, [pc, #24]	; (80039a8 <HAL_IncTick+0x24>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4413      	add	r3, r2
 8003994:	4a04      	ldr	r2, [pc, #16]	; (80039a8 <HAL_IncTick+0x24>)
 8003996:	6013      	str	r3, [r2, #0]
}
 8003998:	bf00      	nop
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	2400000c 	.word	0x2400000c
 80039a8:	240015d0 	.word	0x240015d0

080039ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  return uwTick;
 80039b0:	4b03      	ldr	r3, [pc, #12]	; (80039c0 <HAL_GetTick+0x14>)
 80039b2:	681b      	ldr	r3, [r3, #0]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	240015d0 	.word	0x240015d0

080039c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039cc:	f7ff ffee 	bl	80039ac <HAL_GetTick>
 80039d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039dc:	d005      	beq.n	80039ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039de:	4b0a      	ldr	r3, [pc, #40]	; (8003a08 <HAL_Delay+0x44>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	461a      	mov	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4413      	add	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039ea:	bf00      	nop
 80039ec:	f7ff ffde 	bl	80039ac <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d8f7      	bhi.n	80039ec <HAL_Delay+0x28>
  {
  }
}
 80039fc:	bf00      	nop
 80039fe:	bf00      	nop
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	2400000c 	.word	0x2400000c

08003a0c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003a16:	4b07      	ldr	r3, [pc, #28]	; (8003a34 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	401a      	ands	r2, r3
 8003a20:	4904      	ldr	r1, [pc, #16]	; (8003a34 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	604b      	str	r3, [r1, #4]
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr
 8003a34:	58000400 	.word	0x58000400

08003a38 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	431a      	orrs	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	609a      	str	r2, [r3, #8]
}
 8003a52:	bf00      	nop
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
 8003a66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	609a      	str	r2, [r3, #8]
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b087      	sub	sp, #28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
 8003aac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	3360      	adds	r3, #96	; 0x60
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4a10      	ldr	r2, [pc, #64]	; (8003b00 <LL_ADC_SetOffset+0x60>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d10b      	bne.n	8003adc <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003ada:	e00b      	b.n	8003af4 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	430b      	orrs	r3, r1
 8003aee:	431a      	orrs	r2, r3
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	601a      	str	r2, [r3, #0]
}
 8003af4:	bf00      	nop
 8003af6:	371c      	adds	r7, #28
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	58026000 	.word	0x58026000

08003b04 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3360      	adds	r3, #96	; 0x60
 8003b12:	461a      	mov	r2, r3
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3714      	adds	r7, #20
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	f003 031f 	and.w	r3, r3, #31
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b50:	431a      	orrs	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	611a      	str	r2, [r3, #16]
}
 8003b56:	bf00      	nop
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
	...

08003b64 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b087      	sub	sp, #28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4a0c      	ldr	r2, [pc, #48]	; (8003ba4 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d00e      	beq.n	8003b96 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	3360      	adds	r3, #96	; 0x60
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4413      	add	r3, r2
 8003b84:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	431a      	orrs	r2, r3
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	601a      	str	r2, [r3, #0]
  }
}
 8003b96:	bf00      	nop
 8003b98:	371c      	adds	r7, #28
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	58026000 	.word	0x58026000

08003ba8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b087      	sub	sp, #28
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4a0c      	ldr	r2, [pc, #48]	; (8003be8 <LL_ADC_SetOffsetSaturation+0x40>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d10e      	bne.n	8003bda <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	3360      	adds	r3, #96	; 0x60
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4413      	add	r3, r2
 8003bc8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003bda:	bf00      	nop
 8003bdc:	371c      	adds	r7, #28
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	58026000 	.word	0x58026000

08003bec <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4a0c      	ldr	r2, [pc, #48]	; (8003c2c <LL_ADC_SetOffsetSign+0x40>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d10e      	bne.n	8003c1e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	3360      	adds	r3, #96	; 0x60
 8003c04:	461a      	mov	r2, r3
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4413      	add	r3, r2
 8003c0c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003c1e:	bf00      	nop
 8003c20:	371c      	adds	r7, #28
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	58026000 	.word	0x58026000

08003c30 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b087      	sub	sp, #28
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	3360      	adds	r3, #96	; 0x60
 8003c40:	461a      	mov	r2, r3
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	4a0c      	ldr	r2, [pc, #48]	; (8003c80 <LL_ADC_SetOffsetState+0x50>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d108      	bne.n	8003c64 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003c62:	e007      	b.n	8003c74 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	601a      	str	r2, [r3, #0]
}
 8003c74:	bf00      	nop
 8003c76:	371c      	adds	r7, #28
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	58026000 	.word	0x58026000

08003c84 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	3330      	adds	r3, #48	; 0x30
 8003c94:	461a      	mov	r2, r3
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	0a1b      	lsrs	r3, r3, #8
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	f003 030c 	and.w	r3, r3, #12
 8003ca0:	4413      	add	r3, r2
 8003ca2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	f003 031f 	and.w	r3, r3, #31
 8003cae:	211f      	movs	r1, #31
 8003cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	401a      	ands	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	0e9b      	lsrs	r3, r3, #26
 8003cbc:	f003 011f 	and.w	r1, r3, #31
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	f003 031f 	and.w	r3, r3, #31
 8003cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003cd0:	bf00      	nop
 8003cd2:	371c      	adds	r7, #28
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b087      	sub	sp, #28
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	3314      	adds	r3, #20
 8003cec:	461a      	mov	r2, r3
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	0e5b      	lsrs	r3, r3, #25
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	4413      	add	r3, r2
 8003cfa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	0d1b      	lsrs	r3, r3, #20
 8003d04:	f003 031f 	and.w	r3, r3, #31
 8003d08:	2107      	movs	r1, #7
 8003d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	401a      	ands	r2, r3
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	0d1b      	lsrs	r3, r3, #20
 8003d16:	f003 031f 	and.w	r3, r3, #31
 8003d1a:	6879      	ldr	r1, [r7, #4]
 8003d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d20:	431a      	orrs	r2, r3
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003d26:	bf00      	nop
 8003d28:	371c      	adds	r7, #28
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
	...

08003d34 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4a1a      	ldr	r2, [pc, #104]	; (8003dac <LL_ADC_SetChannelSingleDiff+0x78>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d115      	bne.n	8003d74 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d54:	43db      	mvns	r3, r3
 8003d56:	401a      	ands	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f003 0318 	and.w	r3, r3, #24
 8003d5e:	4914      	ldr	r1, [pc, #80]	; (8003db0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003d60:	40d9      	lsrs	r1, r3
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	400b      	ands	r3, r1
 8003d66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003d72:	e014      	b.n	8003d9e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d80:	43db      	mvns	r3, r3
 8003d82:	401a      	ands	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f003 0318 	and.w	r3, r3, #24
 8003d8a:	4909      	ldr	r1, [pc, #36]	; (8003db0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003d8c:	40d9      	lsrs	r1, r3
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	400b      	ands	r3, r1
 8003d92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d96:	431a      	orrs	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003d9e:	bf00      	nop
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	58026000 	.word	0x58026000
 8003db0:	000fffff 	.word	0x000fffff

08003db4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	4b04      	ldr	r3, [pc, #16]	; (8003dd4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6093      	str	r3, [r2, #8]
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr
 8003dd4:	5fffffc0 	.word	0x5fffffc0

08003dd8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003de8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dec:	d101      	bne.n	8003df2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003dee:	2301      	movs	r3, #1
 8003df0:	e000      	b.n	8003df4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689a      	ldr	r2, [r3, #8]
 8003e0c:	4b05      	ldr	r3, [pc, #20]	; (8003e24 <LL_ADC_EnableInternalRegulator+0x24>)
 8003e0e:	4013      	ands	r3, r2
 8003e10:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	6fffffc0 	.word	0x6fffffc0

08003e28 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e3c:	d101      	bne.n	8003e42 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e000      	b.n	8003e44 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <LL_ADC_IsEnabled+0x18>
 8003e64:	2301      	movs	r3, #1
 8003e66:	e000      	b.n	8003e6a <LL_ADC_IsEnabled+0x1a>
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e76:	b480      	push	{r7}
 8003e78:	b083      	sub	sp, #12
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 0304 	and.w	r3, r3, #4
 8003e86:	2b04      	cmp	r3, #4
 8003e88:	d101      	bne.n	8003e8e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e000      	b.n	8003e90 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b08      	cmp	r3, #8
 8003eae:	d101      	bne.n	8003eb4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e000      	b.n	8003eb6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
	...

08003ec4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ec4:	b590      	push	{r4, r7, lr}
 8003ec6:	b089      	sub	sp, #36	; 0x24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e1ee      	b.n	80042bc <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d109      	bne.n	8003f00 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f7fe fceb 	bl	80028c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7ff ff67 	bl	8003dd8 <LL_ADC_IsDeepPowerDownEnabled>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d004      	beq.n	8003f1a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7ff ff4d 	bl	8003db4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff ff82 	bl	8003e28 <LL_ADC_IsInternalRegulatorEnabled>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d114      	bne.n	8003f54 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7ff ff66 	bl	8003e00 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f34:	4b8e      	ldr	r3, [pc, #568]	; (8004170 <HAL_ADC_Init+0x2ac>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	099b      	lsrs	r3, r3, #6
 8003f3a:	4a8e      	ldr	r2, [pc, #568]	; (8004174 <HAL_ADC_Init+0x2b0>)
 8003f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f40:	099b      	lsrs	r3, r3, #6
 8003f42:	3301      	adds	r3, #1
 8003f44:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003f46:	e002      	b.n	8003f4e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1f9      	bne.n	8003f48 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff ff65 	bl	8003e28 <LL_ADC_IsInternalRegulatorEnabled>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10d      	bne.n	8003f80 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f68:	f043 0210 	orr.w	r2, r3, #16
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f74:	f043 0201 	orr.w	r2, r3, #1
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff ff76 	bl	8003e76 <LL_ADC_REG_IsConversionOngoing>
 8003f8a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f90:	f003 0310 	and.w	r3, r3, #16
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f040 8188 	bne.w	80042aa <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f040 8184 	bne.w	80042aa <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fa6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003faa:	f043 0202 	orr.w	r2, r3, #2
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7ff ff4a 	bl	8003e50 <LL_ADC_IsEnabled>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d136      	bne.n	8004030 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a6c      	ldr	r2, [pc, #432]	; (8004178 <HAL_ADC_Init+0x2b4>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d004      	beq.n	8003fd6 <HAL_ADC_Init+0x112>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a6a      	ldr	r2, [pc, #424]	; (800417c <HAL_ADC_Init+0x2b8>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d10e      	bne.n	8003ff4 <HAL_ADC_Init+0x130>
 8003fd6:	4868      	ldr	r0, [pc, #416]	; (8004178 <HAL_ADC_Init+0x2b4>)
 8003fd8:	f7ff ff3a 	bl	8003e50 <LL_ADC_IsEnabled>
 8003fdc:	4604      	mov	r4, r0
 8003fde:	4867      	ldr	r0, [pc, #412]	; (800417c <HAL_ADC_Init+0x2b8>)
 8003fe0:	f7ff ff36 	bl	8003e50 <LL_ADC_IsEnabled>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	4323      	orrs	r3, r4
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	bf0c      	ite	eq
 8003fec:	2301      	moveq	r3, #1
 8003fee:	2300      	movne	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	e008      	b.n	8004006 <HAL_ADC_Init+0x142>
 8003ff4:	4862      	ldr	r0, [pc, #392]	; (8004180 <HAL_ADC_Init+0x2bc>)
 8003ff6:	f7ff ff2b 	bl	8003e50 <LL_ADC_IsEnabled>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	bf0c      	ite	eq
 8004000:	2301      	moveq	r3, #1
 8004002:	2300      	movne	r3, #0
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d012      	beq.n	8004030 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a5a      	ldr	r2, [pc, #360]	; (8004178 <HAL_ADC_Init+0x2b4>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d004      	beq.n	800401e <HAL_ADC_Init+0x15a>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a58      	ldr	r2, [pc, #352]	; (800417c <HAL_ADC_Init+0x2b8>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d101      	bne.n	8004022 <HAL_ADC_Init+0x15e>
 800401e:	4a59      	ldr	r2, [pc, #356]	; (8004184 <HAL_ADC_Init+0x2c0>)
 8004020:	e000      	b.n	8004024 <HAL_ADC_Init+0x160>
 8004022:	4a59      	ldr	r2, [pc, #356]	; (8004188 <HAL_ADC_Init+0x2c4>)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	4619      	mov	r1, r3
 800402a:	4610      	mov	r0, r2
 800402c:	f7ff fd04 	bl	8003a38 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a52      	ldr	r2, [pc, #328]	; (8004180 <HAL_ADC_Init+0x2bc>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d129      	bne.n	800408e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	7e5b      	ldrb	r3, [r3, #25]
 800403e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004044:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800404a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	2b08      	cmp	r3, #8
 8004052:	d013      	beq.n	800407c <HAL_ADC_Init+0x1b8>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	2b0c      	cmp	r3, #12
 800405a:	d00d      	beq.n	8004078 <HAL_ADC_Init+0x1b4>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	2b1c      	cmp	r3, #28
 8004062:	d007      	beq.n	8004074 <HAL_ADC_Init+0x1b0>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	2b18      	cmp	r3, #24
 800406a:	d101      	bne.n	8004070 <HAL_ADC_Init+0x1ac>
 800406c:	2318      	movs	r3, #24
 800406e:	e006      	b.n	800407e <HAL_ADC_Init+0x1ba>
 8004070:	2300      	movs	r3, #0
 8004072:	e004      	b.n	800407e <HAL_ADC_Init+0x1ba>
 8004074:	2310      	movs	r3, #16
 8004076:	e002      	b.n	800407e <HAL_ADC_Init+0x1ba>
 8004078:	2308      	movs	r3, #8
 800407a:	e000      	b.n	800407e <HAL_ADC_Init+0x1ba>
 800407c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800407e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004086:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004088:	4313      	orrs	r3, r2
 800408a:	61bb      	str	r3, [r7, #24]
 800408c:	e00e      	b.n	80040ac <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	7e5b      	ldrb	r3, [r3, #25]
 8004092:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004098:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800409e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040a6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80040a8:	4313      	orrs	r3, r2
 80040aa:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d106      	bne.n	80040c4 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	3b01      	subs	r3, #1
 80040bc:	045b      	lsls	r3, r3, #17
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d009      	beq.n	80040e0 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	4313      	orrs	r3, r2
 80040de:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a26      	ldr	r2, [pc, #152]	; (8004180 <HAL_ADC_Init+0x2bc>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d115      	bne.n	8004116 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68da      	ldr	r2, [r3, #12]
 80040f0:	4b26      	ldr	r3, [pc, #152]	; (800418c <HAL_ADC_Init+0x2c8>)
 80040f2:	4013      	ands	r3, r2
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	6812      	ldr	r2, [r2, #0]
 80040f8:	69b9      	ldr	r1, [r7, #24]
 80040fa:	430b      	orrs	r3, r1
 80040fc:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	611a      	str	r2, [r3, #16]
 8004114:	e009      	b.n	800412a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68da      	ldr	r2, [r3, #12]
 800411c:	4b1c      	ldr	r3, [pc, #112]	; (8004190 <HAL_ADC_Init+0x2cc>)
 800411e:	4013      	ands	r3, r2
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	6812      	ldr	r2, [r2, #0]
 8004124:	69b9      	ldr	r1, [r7, #24]
 8004126:	430b      	orrs	r3, r1
 8004128:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4618      	mov	r0, r3
 8004130:	f7ff fea1 	bl	8003e76 <LL_ADC_REG_IsConversionOngoing>
 8004134:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f7ff feae 	bl	8003e9c <LL_ADC_INJ_IsConversionOngoing>
 8004140:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	2b00      	cmp	r3, #0
 8004146:	f040 808e 	bne.w	8004266 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2b00      	cmp	r3, #0
 800414e:	f040 808a 	bne.w	8004266 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a0a      	ldr	r2, [pc, #40]	; (8004180 <HAL_ADC_Init+0x2bc>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d11b      	bne.n	8004194 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	7e1b      	ldrb	r3, [r3, #24]
 8004160:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004168:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800416a:	4313      	orrs	r3, r2
 800416c:	61bb      	str	r3, [r7, #24]
 800416e:	e018      	b.n	80041a2 <HAL_ADC_Init+0x2de>
 8004170:	24000000 	.word	0x24000000
 8004174:	053e2d63 	.word	0x053e2d63
 8004178:	40022000 	.word	0x40022000
 800417c:	40022100 	.word	0x40022100
 8004180:	58026000 	.word	0x58026000
 8004184:	40022300 	.word	0x40022300
 8004188:	58026300 	.word	0x58026300
 800418c:	fff04007 	.word	0xfff04007
 8004190:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	7e1b      	ldrb	r3, [r3, #24]
 8004198:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 800419e:	4313      	orrs	r3, r2
 80041a0:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68da      	ldr	r2, [r3, #12]
 80041a8:	4b46      	ldr	r3, [pc, #280]	; (80042c4 <HAL_ADC_Init+0x400>)
 80041aa:	4013      	ands	r3, r2
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6812      	ldr	r2, [r2, #0]
 80041b0:	69b9      	ldr	r1, [r7, #24]
 80041b2:	430b      	orrs	r3, r1
 80041b4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d137      	bne.n	8004230 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c4:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a3f      	ldr	r2, [pc, #252]	; (80042c8 <HAL_ADC_Init+0x404>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d116      	bne.n	80041fe <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	691a      	ldr	r2, [r3, #16]
 80041d6:	4b3d      	ldr	r3, [pc, #244]	; (80042cc <HAL_ADC_Init+0x408>)
 80041d8:	4013      	ands	r3, r2
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80041e2:	4311      	orrs	r1, r2
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041e8:	4311      	orrs	r1, r2
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80041ee:	430a      	orrs	r2, r1
 80041f0:	431a      	orrs	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f042 0201 	orr.w	r2, r2, #1
 80041fa:	611a      	str	r2, [r3, #16]
 80041fc:	e020      	b.n	8004240 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	691a      	ldr	r2, [r3, #16]
 8004204:	4b32      	ldr	r3, [pc, #200]	; (80042d0 <HAL_ADC_Init+0x40c>)
 8004206:	4013      	ands	r3, r2
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800420c:	3a01      	subs	r2, #1
 800420e:	0411      	lsls	r1, r2, #16
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004214:	4311      	orrs	r1, r2
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800421a:	4311      	orrs	r1, r2
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004220:	430a      	orrs	r2, r1
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f042 0201 	orr.w	r2, r2, #1
 800422c:	611a      	str	r2, [r3, #16]
 800422e:	e007      	b.n	8004240 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	691a      	ldr	r2, [r3, #16]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 0201 	bic.w	r2, r2, #1
 800423e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a1b      	ldr	r2, [pc, #108]	; (80042c8 <HAL_ADC_Init+0x404>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d002      	beq.n	8004266 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 fd63 	bl	8004d2c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d10c      	bne.n	8004288 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004274:	f023 010f 	bic.w	r1, r3, #15
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	1e5a      	subs	r2, r3, #1
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	631a      	str	r2, [r3, #48]	; 0x30
 8004286:	e007      	b.n	8004298 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 020f 	bic.w	r2, r2, #15
 8004296:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800429c:	f023 0303 	bic.w	r3, r3, #3
 80042a0:	f043 0201 	orr.w	r2, r3, #1
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	661a      	str	r2, [r3, #96]	; 0x60
 80042a8:	e007      	b.n	80042ba <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ae:	f043 0210 	orr.w	r2, r3, #16
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80042ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3724      	adds	r7, #36	; 0x24
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd90      	pop	{r4, r7, pc}
 80042c4:	ffffbffc 	.word	0xffffbffc
 80042c8:	58026000 	.word	0x58026000
 80042cc:	fc00f81f 	.word	0xfc00f81f
 80042d0:	fc00f81e 	.word	0xfc00f81e

080042d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80042d4:	b590      	push	{r4, r7, lr}
 80042d6:	b0b9      	sub	sp, #228	; 0xe4
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042de:	2300      	movs	r3, #0
 80042e0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80042e4:	2300      	movs	r3, #0
 80042e6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042ee:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	4aa9      	ldr	r2, [pc, #676]	; (800459c <HAL_ADC_ConfigChannel+0x2c8>)
 80042f6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d102      	bne.n	8004308 <HAL_ADC_ConfigChannel+0x34>
 8004302:	2302      	movs	r3, #2
 8004304:	f000 bcfa 	b.w	8004cfc <HAL_ADC_ConfigChannel+0xa28>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff fdae 	bl	8003e76 <LL_ADC_REG_IsConversionOngoing>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	f040 84de 	bne.w	8004cde <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a9e      	ldr	r2, [pc, #632]	; (80045a0 <HAL_ADC_ConfigChannel+0x2cc>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d033      	beq.n	8004394 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004334:	2b00      	cmp	r3, #0
 8004336:	d108      	bne.n	800434a <HAL_ADC_ConfigChannel+0x76>
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	0e9b      	lsrs	r3, r3, #26
 800433e:	f003 031f 	and.w	r3, r3, #31
 8004342:	2201      	movs	r2, #1
 8004344:	fa02 f303 	lsl.w	r3, r2, r3
 8004348:	e01d      	b.n	8004386 <HAL_ADC_ConfigChannel+0xb2>
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004352:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004356:	fa93 f3a3 	rbit	r3, r3
 800435a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800435e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004362:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004366:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 800436e:	2320      	movs	r3, #32
 8004370:	e004      	b.n	800437c <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8004372:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004376:	fab3 f383 	clz	r3, r3
 800437a:	b2db      	uxtb	r3, r3
 800437c:	f003 031f 	and.w	r3, r3, #31
 8004380:	2201      	movs	r2, #1
 8004382:	fa02 f303 	lsl.w	r3, r2, r3
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	6812      	ldr	r2, [r2, #0]
 800438a:	69d1      	ldr	r1, [r2, #28]
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6812      	ldr	r2, [r2, #0]
 8004390:	430b      	orrs	r3, r1
 8004392:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6818      	ldr	r0, [r3, #0]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	6859      	ldr	r1, [r3, #4]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	461a      	mov	r2, r3
 80043a2:	f7ff fc6f 	bl	8003c84 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7ff fd63 	bl	8003e76 <LL_ADC_REG_IsConversionOngoing>
 80043b0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7ff fd6f 	bl	8003e9c <LL_ADC_INJ_IsConversionOngoing>
 80043be:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80043c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f040 8270 	bne.w	80048ac <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80043cc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f040 826b 	bne.w	80048ac <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6818      	ldr	r0, [r3, #0]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	6819      	ldr	r1, [r3, #0]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	461a      	mov	r2, r3
 80043e4:	f7ff fc7a 	bl	8003cdc <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a6c      	ldr	r2, [pc, #432]	; (80045a0 <HAL_ADC_ConfigChannel+0x2cc>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d10d      	bne.n	800440e <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	695a      	ldr	r2, [r3, #20]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	08db      	lsrs	r3, r3, #3
 80043fe:	f003 0303 	and.w	r3, r3, #3
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800440c:	e032      	b.n	8004474 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800440e:	4b65      	ldr	r3, [pc, #404]	; (80045a4 <HAL_ADC_ConfigChannel+0x2d0>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004416:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800441a:	d10b      	bne.n	8004434 <HAL_ADC_ConfigChannel+0x160>
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	695a      	ldr	r2, [r3, #20]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	089b      	lsrs	r3, r3, #2
 8004428:	f003 0307 	and.w	r3, r3, #7
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	fa02 f303 	lsl.w	r3, r2, r3
 8004432:	e01d      	b.n	8004470 <HAL_ADC_ConfigChannel+0x19c>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	f003 0310 	and.w	r3, r3, #16
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10b      	bne.n	800445a <HAL_ADC_ConfigChannel+0x186>
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	695a      	ldr	r2, [r3, #20]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	089b      	lsrs	r3, r3, #2
 800444e:	f003 0307 	and.w	r3, r3, #7
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	fa02 f303 	lsl.w	r3, r2, r3
 8004458:	e00a      	b.n	8004470 <HAL_ADC_ConfigChannel+0x19c>
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	695a      	ldr	r2, [r3, #20]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	089b      	lsrs	r3, r3, #2
 8004466:	f003 0304 	and.w	r3, r3, #4
 800446a:	005b      	lsls	r3, r3, #1
 800446c:	fa02 f303 	lsl.w	r3, r2, r3
 8004470:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	2b04      	cmp	r3, #4
 800447a:	d048      	beq.n	800450e <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6818      	ldr	r0, [r3, #0]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	6919      	ldr	r1, [r3, #16]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800448c:	f7ff fb08 	bl	8003aa0 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a42      	ldr	r2, [pc, #264]	; (80045a0 <HAL_ADC_ConfigChannel+0x2cc>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d119      	bne.n	80044ce <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6818      	ldr	r0, [r3, #0]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	6919      	ldr	r1, [r3, #16]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	461a      	mov	r2, r3
 80044a8:	f7ff fba0 	bl	8003bec <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6818      	ldr	r0, [r3, #0]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	6919      	ldr	r1, [r3, #16]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d102      	bne.n	80044c4 <HAL_ADC_ConfigChannel+0x1f0>
 80044be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044c2:	e000      	b.n	80044c6 <HAL_ADC_ConfigChannel+0x1f2>
 80044c4:	2300      	movs	r3, #0
 80044c6:	461a      	mov	r2, r3
 80044c8:	f7ff fb6e 	bl	8003ba8 <LL_ADC_SetOffsetSaturation>
 80044cc:	e1ee      	b.n	80048ac <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6818      	ldr	r0, [r3, #0]
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	6919      	ldr	r1, [r3, #16]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d102      	bne.n	80044e6 <HAL_ADC_ConfigChannel+0x212>
 80044e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80044e4:	e000      	b.n	80044e8 <HAL_ADC_ConfigChannel+0x214>
 80044e6:	2300      	movs	r3, #0
 80044e8:	461a      	mov	r2, r3
 80044ea:	f7ff fb3b 	bl	8003b64 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6818      	ldr	r0, [r3, #0]
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	6919      	ldr	r1, [r3, #16]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	7e1b      	ldrb	r3, [r3, #24]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d102      	bne.n	8004504 <HAL_ADC_ConfigChannel+0x230>
 80044fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004502:	e000      	b.n	8004506 <HAL_ADC_ConfigChannel+0x232>
 8004504:	2300      	movs	r3, #0
 8004506:	461a      	mov	r2, r3
 8004508:	f7ff fb12 	bl	8003b30 <LL_ADC_SetDataRightShift>
 800450c:	e1ce      	b.n	80048ac <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a23      	ldr	r2, [pc, #140]	; (80045a0 <HAL_ADC_ConfigChannel+0x2cc>)
 8004514:	4293      	cmp	r3, r2
 8004516:	f040 8181 	bne.w	800481c <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2100      	movs	r1, #0
 8004520:	4618      	mov	r0, r3
 8004522:	f7ff faef 	bl	8003b04 <LL_ADC_GetOffsetChannel>
 8004526:	4603      	mov	r3, r0
 8004528:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10a      	bne.n	8004546 <HAL_ADC_ConfigChannel+0x272>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2100      	movs	r1, #0
 8004536:	4618      	mov	r0, r3
 8004538:	f7ff fae4 	bl	8003b04 <LL_ADC_GetOffsetChannel>
 800453c:	4603      	mov	r3, r0
 800453e:	0e9b      	lsrs	r3, r3, #26
 8004540:	f003 021f 	and.w	r2, r3, #31
 8004544:	e01e      	b.n	8004584 <HAL_ADC_ConfigChannel+0x2b0>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2100      	movs	r1, #0
 800454c:	4618      	mov	r0, r3
 800454e:	f7ff fad9 	bl	8003b04 <LL_ADC_GetOffsetChannel>
 8004552:	4603      	mov	r3, r0
 8004554:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004558:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800455c:	fa93 f3a3 	rbit	r3, r3
 8004560:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8004564:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004568:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 800456c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8004574:	2320      	movs	r3, #32
 8004576:	e004      	b.n	8004582 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8004578:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800457c:	fab3 f383 	clz	r3, r3
 8004580:	b2db      	uxtb	r3, r3
 8004582:	461a      	mov	r2, r3
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10b      	bne.n	80045a8 <HAL_ADC_ConfigChannel+0x2d4>
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	0e9b      	lsrs	r3, r3, #26
 8004596:	f003 031f 	and.w	r3, r3, #31
 800459a:	e01e      	b.n	80045da <HAL_ADC_ConfigChannel+0x306>
 800459c:	47ff0000 	.word	0x47ff0000
 80045a0:	58026000 	.word	0x58026000
 80045a4:	5c001000 	.word	0x5c001000
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045b4:	fa93 f3a3 	rbit	r3, r3
 80045b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80045bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80045c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80045c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 80045cc:	2320      	movs	r3, #32
 80045ce:	e004      	b.n	80045da <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 80045d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80045d4:	fab3 f383 	clz	r3, r3
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	429a      	cmp	r2, r3
 80045dc:	d106      	bne.n	80045ec <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2200      	movs	r2, #0
 80045e4:	2100      	movs	r1, #0
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7ff fb22 	bl	8003c30 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2101      	movs	r1, #1
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff fa86 	bl	8003b04 <LL_ADC_GetOffsetChannel>
 80045f8:	4603      	mov	r3, r0
 80045fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10a      	bne.n	8004618 <HAL_ADC_ConfigChannel+0x344>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2101      	movs	r1, #1
 8004608:	4618      	mov	r0, r3
 800460a:	f7ff fa7b 	bl	8003b04 <LL_ADC_GetOffsetChannel>
 800460e:	4603      	mov	r3, r0
 8004610:	0e9b      	lsrs	r3, r3, #26
 8004612:	f003 021f 	and.w	r2, r3, #31
 8004616:	e01e      	b.n	8004656 <HAL_ADC_ConfigChannel+0x382>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2101      	movs	r1, #1
 800461e:	4618      	mov	r0, r3
 8004620:	f7ff fa70 	bl	8003b04 <LL_ADC_GetOffsetChannel>
 8004624:	4603      	mov	r3, r0
 8004626:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800462e:	fa93 f3a3 	rbit	r3, r3
 8004632:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004636:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800463a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800463e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8004646:	2320      	movs	r3, #32
 8004648:	e004      	b.n	8004654 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800464a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800464e:	fab3 f383 	clz	r3, r3
 8004652:	b2db      	uxtb	r3, r3
 8004654:	461a      	mov	r2, r3
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800465e:	2b00      	cmp	r3, #0
 8004660:	d105      	bne.n	800466e <HAL_ADC_ConfigChannel+0x39a>
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	0e9b      	lsrs	r3, r3, #26
 8004668:	f003 031f 	and.w	r3, r3, #31
 800466c:	e018      	b.n	80046a0 <HAL_ADC_ConfigChannel+0x3cc>
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004676:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800467a:	fa93 f3a3 	rbit	r3, r3
 800467e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004682:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004686:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800468a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8004692:	2320      	movs	r3, #32
 8004694:	e004      	b.n	80046a0 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8004696:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800469a:	fab3 f383 	clz	r3, r3
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d106      	bne.n	80046b2 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2200      	movs	r2, #0
 80046aa:	2101      	movs	r1, #1
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7ff fabf 	bl	8003c30 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2102      	movs	r1, #2
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7ff fa23 	bl	8003b04 <LL_ADC_GetOffsetChannel>
 80046be:	4603      	mov	r3, r0
 80046c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10a      	bne.n	80046de <HAL_ADC_ConfigChannel+0x40a>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2102      	movs	r1, #2
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7ff fa18 	bl	8003b04 <LL_ADC_GetOffsetChannel>
 80046d4:	4603      	mov	r3, r0
 80046d6:	0e9b      	lsrs	r3, r3, #26
 80046d8:	f003 021f 	and.w	r2, r3, #31
 80046dc:	e01e      	b.n	800471c <HAL_ADC_ConfigChannel+0x448>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2102      	movs	r1, #2
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7ff fa0d 	bl	8003b04 <LL_ADC_GetOffsetChannel>
 80046ea:	4603      	mov	r3, r0
 80046ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046f4:	fa93 f3a3 	rbit	r3, r3
 80046f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80046fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004700:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004704:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 800470c:	2320      	movs	r3, #32
 800470e:	e004      	b.n	800471a <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8004710:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004714:	fab3 f383 	clz	r3, r3
 8004718:	b2db      	uxtb	r3, r3
 800471a:	461a      	mov	r2, r3
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004724:	2b00      	cmp	r3, #0
 8004726:	d105      	bne.n	8004734 <HAL_ADC_ConfigChannel+0x460>
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	0e9b      	lsrs	r3, r3, #26
 800472e:	f003 031f 	and.w	r3, r3, #31
 8004732:	e014      	b.n	800475e <HAL_ADC_ConfigChannel+0x48a>
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800473a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800473c:	fa93 f3a3 	rbit	r3, r3
 8004740:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004742:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004744:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004748:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8004750:	2320      	movs	r3, #32
 8004752:	e004      	b.n	800475e <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8004754:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004758:	fab3 f383 	clz	r3, r3
 800475c:	b2db      	uxtb	r3, r3
 800475e:	429a      	cmp	r2, r3
 8004760:	d106      	bne.n	8004770 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2200      	movs	r2, #0
 8004768:	2102      	movs	r1, #2
 800476a:	4618      	mov	r0, r3
 800476c:	f7ff fa60 	bl	8003c30 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2103      	movs	r1, #3
 8004776:	4618      	mov	r0, r3
 8004778:	f7ff f9c4 	bl	8003b04 <LL_ADC_GetOffsetChannel>
 800477c:	4603      	mov	r3, r0
 800477e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10a      	bne.n	800479c <HAL_ADC_ConfigChannel+0x4c8>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2103      	movs	r1, #3
 800478c:	4618      	mov	r0, r3
 800478e:	f7ff f9b9 	bl	8003b04 <LL_ADC_GetOffsetChannel>
 8004792:	4603      	mov	r3, r0
 8004794:	0e9b      	lsrs	r3, r3, #26
 8004796:	f003 021f 	and.w	r2, r3, #31
 800479a:	e017      	b.n	80047cc <HAL_ADC_ConfigChannel+0x4f8>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2103      	movs	r1, #3
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7ff f9ae 	bl	8003b04 <LL_ADC_GetOffsetChannel>
 80047a8:	4603      	mov	r3, r0
 80047aa:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047ae:	fa93 f3a3 	rbit	r3, r3
 80047b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80047b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047b6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80047b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80047be:	2320      	movs	r3, #32
 80047c0:	e003      	b.n	80047ca <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80047c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047c4:	fab3 f383 	clz	r3, r3
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	461a      	mov	r2, r3
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d105      	bne.n	80047e4 <HAL_ADC_ConfigChannel+0x510>
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	0e9b      	lsrs	r3, r3, #26
 80047de:	f003 031f 	and.w	r3, r3, #31
 80047e2:	e011      	b.n	8004808 <HAL_ADC_ConfigChannel+0x534>
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047ec:	fa93 f3a3 	rbit	r3, r3
 80047f0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80047f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047f4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80047f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d101      	bne.n	8004800 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 80047fc:	2320      	movs	r3, #32
 80047fe:	e003      	b.n	8004808 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8004800:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004802:	fab3 f383 	clz	r3, r3
 8004806:	b2db      	uxtb	r3, r3
 8004808:	429a      	cmp	r2, r3
 800480a:	d14f      	bne.n	80048ac <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2200      	movs	r2, #0
 8004812:	2103      	movs	r1, #3
 8004814:	4618      	mov	r0, r3
 8004816:	f7ff fa0b 	bl	8003c30 <LL_ADC_SetOffsetState>
 800481a:	e047      	b.n	80048ac <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004822:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	069b      	lsls	r3, r3, #26
 800482c:	429a      	cmp	r2, r3
 800482e:	d107      	bne.n	8004840 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800483e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004846:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	069b      	lsls	r3, r3, #26
 8004850:	429a      	cmp	r2, r3
 8004852:	d107      	bne.n	8004864 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004862:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800486a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	069b      	lsls	r3, r3, #26
 8004874:	429a      	cmp	r2, r3
 8004876:	d107      	bne.n	8004888 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004886:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800488e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	069b      	lsls	r3, r3, #26
 8004898:	429a      	cmp	r2, r3
 800489a:	d107      	bne.n	80048ac <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80048aa:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7ff facd 	bl	8003e50 <LL_ADC_IsEnabled>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f040 8219 	bne.w	8004cf0 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6818      	ldr	r0, [r3, #0]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	6819      	ldr	r1, [r3, #0]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	461a      	mov	r2, r3
 80048cc:	f7ff fa32 	bl	8003d34 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	4aa1      	ldr	r2, [pc, #644]	; (8004b5c <HAL_ADC_ConfigChannel+0x888>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	f040 812e 	bne.w	8004b38 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10b      	bne.n	8004904 <HAL_ADC_ConfigChannel+0x630>
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	0e9b      	lsrs	r3, r3, #26
 80048f2:	3301      	adds	r3, #1
 80048f4:	f003 031f 	and.w	r3, r3, #31
 80048f8:	2b09      	cmp	r3, #9
 80048fa:	bf94      	ite	ls
 80048fc:	2301      	movls	r3, #1
 80048fe:	2300      	movhi	r3, #0
 8004900:	b2db      	uxtb	r3, r3
 8004902:	e019      	b.n	8004938 <HAL_ADC_ConfigChannel+0x664>
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800490a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800490c:	fa93 f3a3 	rbit	r3, r3
 8004910:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004912:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004914:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004916:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 800491c:	2320      	movs	r3, #32
 800491e:	e003      	b.n	8004928 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8004920:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004922:	fab3 f383 	clz	r3, r3
 8004926:	b2db      	uxtb	r3, r3
 8004928:	3301      	adds	r3, #1
 800492a:	f003 031f 	and.w	r3, r3, #31
 800492e:	2b09      	cmp	r3, #9
 8004930:	bf94      	ite	ls
 8004932:	2301      	movls	r3, #1
 8004934:	2300      	movhi	r3, #0
 8004936:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004938:	2b00      	cmp	r3, #0
 800493a:	d079      	beq.n	8004a30 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004944:	2b00      	cmp	r3, #0
 8004946:	d107      	bne.n	8004958 <HAL_ADC_ConfigChannel+0x684>
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	0e9b      	lsrs	r3, r3, #26
 800494e:	3301      	adds	r3, #1
 8004950:	069b      	lsls	r3, r3, #26
 8004952:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004956:	e015      	b.n	8004984 <HAL_ADC_ConfigChannel+0x6b0>
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800495e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004960:	fa93 f3a3 	rbit	r3, r3
 8004964:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004968:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800496a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004970:	2320      	movs	r3, #32
 8004972:	e003      	b.n	800497c <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004976:	fab3 f383 	clz	r3, r3
 800497a:	b2db      	uxtb	r3, r3
 800497c:	3301      	adds	r3, #1
 800497e:	069b      	lsls	r3, r3, #26
 8004980:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800498c:	2b00      	cmp	r3, #0
 800498e:	d109      	bne.n	80049a4 <HAL_ADC_ConfigChannel+0x6d0>
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	0e9b      	lsrs	r3, r3, #26
 8004996:	3301      	adds	r3, #1
 8004998:	f003 031f 	and.w	r3, r3, #31
 800499c:	2101      	movs	r1, #1
 800499e:	fa01 f303 	lsl.w	r3, r1, r3
 80049a2:	e017      	b.n	80049d4 <HAL_ADC_ConfigChannel+0x700>
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049ac:	fa93 f3a3 	rbit	r3, r3
 80049b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80049b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049b4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80049b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d101      	bne.n	80049c0 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 80049bc:	2320      	movs	r3, #32
 80049be:	e003      	b.n	80049c8 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 80049c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049c2:	fab3 f383 	clz	r3, r3
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	3301      	adds	r3, #1
 80049ca:	f003 031f 	and.w	r3, r3, #31
 80049ce:	2101      	movs	r1, #1
 80049d0:	fa01 f303 	lsl.w	r3, r1, r3
 80049d4:	ea42 0103 	orr.w	r1, r2, r3
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10a      	bne.n	80049fa <HAL_ADC_ConfigChannel+0x726>
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	0e9b      	lsrs	r3, r3, #26
 80049ea:	3301      	adds	r3, #1
 80049ec:	f003 021f 	and.w	r2, r3, #31
 80049f0:	4613      	mov	r3, r2
 80049f2:	005b      	lsls	r3, r3, #1
 80049f4:	4413      	add	r3, r2
 80049f6:	051b      	lsls	r3, r3, #20
 80049f8:	e018      	b.n	8004a2c <HAL_ADC_ConfigChannel+0x758>
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a02:	fa93 f3a3 	rbit	r3, r3
 8004a06:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8004a12:	2320      	movs	r3, #32
 8004a14:	e003      	b.n	8004a1e <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8004a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a18:	fab3 f383 	clz	r3, r3
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	3301      	adds	r3, #1
 8004a20:	f003 021f 	and.w	r2, r3, #31
 8004a24:	4613      	mov	r3, r2
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	4413      	add	r3, r2
 8004a2a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a2c:	430b      	orrs	r3, r1
 8004a2e:	e07e      	b.n	8004b2e <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d107      	bne.n	8004a4c <HAL_ADC_ConfigChannel+0x778>
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	0e9b      	lsrs	r3, r3, #26
 8004a42:	3301      	adds	r3, #1
 8004a44:	069b      	lsls	r3, r3, #26
 8004a46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a4a:	e015      	b.n	8004a78 <HAL_ADC_ConfigChannel+0x7a4>
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a54:	fa93 f3a3 	rbit	r3, r3
 8004a58:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004a64:	2320      	movs	r3, #32
 8004a66:	e003      	b.n	8004a70 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a6a:	fab3 f383 	clz	r3, r3
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	3301      	adds	r3, #1
 8004a72:	069b      	lsls	r3, r3, #26
 8004a74:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d109      	bne.n	8004a98 <HAL_ADC_ConfigChannel+0x7c4>
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	0e9b      	lsrs	r3, r3, #26
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	f003 031f 	and.w	r3, r3, #31
 8004a90:	2101      	movs	r1, #1
 8004a92:	fa01 f303 	lsl.w	r3, r1, r3
 8004a96:	e017      	b.n	8004ac8 <HAL_ADC_ConfigChannel+0x7f4>
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	fa93 f3a3 	rbit	r3, r3
 8004aa4:	61bb      	str	r3, [r7, #24]
  return result;
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004aaa:	6a3b      	ldr	r3, [r7, #32]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004ab0:	2320      	movs	r3, #32
 8004ab2:	e003      	b.n	8004abc <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004ab4:	6a3b      	ldr	r3, [r7, #32]
 8004ab6:	fab3 f383 	clz	r3, r3
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	3301      	adds	r3, #1
 8004abe:	f003 031f 	and.w	r3, r3, #31
 8004ac2:	2101      	movs	r1, #1
 8004ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ac8:	ea42 0103 	orr.w	r1, r2, r3
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10d      	bne.n	8004af4 <HAL_ADC_ConfigChannel+0x820>
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	0e9b      	lsrs	r3, r3, #26
 8004ade:	3301      	adds	r3, #1
 8004ae0:	f003 021f 	and.w	r2, r3, #31
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	4413      	add	r3, r2
 8004aea:	3b1e      	subs	r3, #30
 8004aec:	051b      	lsls	r3, r3, #20
 8004aee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004af2:	e01b      	b.n	8004b2c <HAL_ADC_ConfigChannel+0x858>
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	fa93 f3a3 	rbit	r3, r3
 8004b00:	60fb      	str	r3, [r7, #12]
  return result;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004b0c:	2320      	movs	r3, #32
 8004b0e:	e003      	b.n	8004b18 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	fab3 f383 	clz	r3, r3
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	3301      	adds	r3, #1
 8004b1a:	f003 021f 	and.w	r2, r3, #31
 8004b1e:	4613      	mov	r3, r2
 8004b20:	005b      	lsls	r3, r3, #1
 8004b22:	4413      	add	r3, r2
 8004b24:	3b1e      	subs	r3, #30
 8004b26:	051b      	lsls	r3, r3, #20
 8004b28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b2c:	430b      	orrs	r3, r1
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	6892      	ldr	r2, [r2, #8]
 8004b32:	4619      	mov	r1, r3
 8004b34:	f7ff f8d2 	bl	8003cdc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f280 80d7 	bge.w	8004cf0 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a06      	ldr	r2, [pc, #24]	; (8004b60 <HAL_ADC_ConfigChannel+0x88c>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d004      	beq.n	8004b56 <HAL_ADC_ConfigChannel+0x882>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a04      	ldr	r2, [pc, #16]	; (8004b64 <HAL_ADC_ConfigChannel+0x890>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d10a      	bne.n	8004b6c <HAL_ADC_ConfigChannel+0x898>
 8004b56:	4b04      	ldr	r3, [pc, #16]	; (8004b68 <HAL_ADC_ConfigChannel+0x894>)
 8004b58:	e009      	b.n	8004b6e <HAL_ADC_ConfigChannel+0x89a>
 8004b5a:	bf00      	nop
 8004b5c:	47ff0000 	.word	0x47ff0000
 8004b60:	40022000 	.word	0x40022000
 8004b64:	40022100 	.word	0x40022100
 8004b68:	40022300 	.word	0x40022300
 8004b6c:	4b65      	ldr	r3, [pc, #404]	; (8004d04 <HAL_ADC_ConfigChannel+0xa30>)
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7fe ff88 	bl	8003a84 <LL_ADC_GetCommonPathInternalCh>
 8004b74:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a62      	ldr	r2, [pc, #392]	; (8004d08 <HAL_ADC_ConfigChannel+0xa34>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d004      	beq.n	8004b8c <HAL_ADC_ConfigChannel+0x8b8>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a61      	ldr	r2, [pc, #388]	; (8004d0c <HAL_ADC_ConfigChannel+0xa38>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d10e      	bne.n	8004baa <HAL_ADC_ConfigChannel+0x8d6>
 8004b8c:	485e      	ldr	r0, [pc, #376]	; (8004d08 <HAL_ADC_ConfigChannel+0xa34>)
 8004b8e:	f7ff f95f 	bl	8003e50 <LL_ADC_IsEnabled>
 8004b92:	4604      	mov	r4, r0
 8004b94:	485d      	ldr	r0, [pc, #372]	; (8004d0c <HAL_ADC_ConfigChannel+0xa38>)
 8004b96:	f7ff f95b 	bl	8003e50 <LL_ADC_IsEnabled>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	4323      	orrs	r3, r4
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	bf0c      	ite	eq
 8004ba2:	2301      	moveq	r3, #1
 8004ba4:	2300      	movne	r3, #0
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	e008      	b.n	8004bbc <HAL_ADC_ConfigChannel+0x8e8>
 8004baa:	4859      	ldr	r0, [pc, #356]	; (8004d10 <HAL_ADC_ConfigChannel+0xa3c>)
 8004bac:	f7ff f950 	bl	8003e50 <LL_ADC_IsEnabled>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	bf0c      	ite	eq
 8004bb6:	2301      	moveq	r3, #1
 8004bb8:	2300      	movne	r3, #0
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f000 8084 	beq.w	8004cca <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a53      	ldr	r2, [pc, #332]	; (8004d14 <HAL_ADC_ConfigChannel+0xa40>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d132      	bne.n	8004c32 <HAL_ADC_ConfigChannel+0x95e>
 8004bcc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004bd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d12c      	bne.n	8004c32 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a4c      	ldr	r2, [pc, #304]	; (8004d10 <HAL_ADC_ConfigChannel+0xa3c>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	f040 8086 	bne.w	8004cf0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a47      	ldr	r2, [pc, #284]	; (8004d08 <HAL_ADC_ConfigChannel+0xa34>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d004      	beq.n	8004bf8 <HAL_ADC_ConfigChannel+0x924>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a46      	ldr	r2, [pc, #280]	; (8004d0c <HAL_ADC_ConfigChannel+0xa38>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d101      	bne.n	8004bfc <HAL_ADC_ConfigChannel+0x928>
 8004bf8:	4a47      	ldr	r2, [pc, #284]	; (8004d18 <HAL_ADC_ConfigChannel+0xa44>)
 8004bfa:	e000      	b.n	8004bfe <HAL_ADC_ConfigChannel+0x92a>
 8004bfc:	4a41      	ldr	r2, [pc, #260]	; (8004d04 <HAL_ADC_ConfigChannel+0xa30>)
 8004bfe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c06:	4619      	mov	r1, r3
 8004c08:	4610      	mov	r0, r2
 8004c0a:	f7fe ff28 	bl	8003a5e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c0e:	4b43      	ldr	r3, [pc, #268]	; (8004d1c <HAL_ADC_ConfigChannel+0xa48>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	099b      	lsrs	r3, r3, #6
 8004c14:	4a42      	ldr	r2, [pc, #264]	; (8004d20 <HAL_ADC_ConfigChannel+0xa4c>)
 8004c16:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1a:	099b      	lsrs	r3, r3, #6
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004c22:	e002      	b.n	8004c2a <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	3b01      	subs	r3, #1
 8004c28:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1f9      	bne.n	8004c24 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c30:	e05e      	b.n	8004cf0 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a3b      	ldr	r2, [pc, #236]	; (8004d24 <HAL_ADC_ConfigChannel+0xa50>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d120      	bne.n	8004c7e <HAL_ADC_ConfigChannel+0x9aa>
 8004c3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d11a      	bne.n	8004c7e <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a30      	ldr	r2, [pc, #192]	; (8004d10 <HAL_ADC_ConfigChannel+0xa3c>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d14e      	bne.n	8004cf0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a2c      	ldr	r2, [pc, #176]	; (8004d08 <HAL_ADC_ConfigChannel+0xa34>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d004      	beq.n	8004c66 <HAL_ADC_ConfigChannel+0x992>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a2a      	ldr	r2, [pc, #168]	; (8004d0c <HAL_ADC_ConfigChannel+0xa38>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d101      	bne.n	8004c6a <HAL_ADC_ConfigChannel+0x996>
 8004c66:	4a2c      	ldr	r2, [pc, #176]	; (8004d18 <HAL_ADC_ConfigChannel+0xa44>)
 8004c68:	e000      	b.n	8004c6c <HAL_ADC_ConfigChannel+0x998>
 8004c6a:	4a26      	ldr	r2, [pc, #152]	; (8004d04 <HAL_ADC_ConfigChannel+0xa30>)
 8004c6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c74:	4619      	mov	r1, r3
 8004c76:	4610      	mov	r0, r2
 8004c78:	f7fe fef1 	bl	8003a5e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c7c:	e038      	b.n	8004cf0 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a29      	ldr	r2, [pc, #164]	; (8004d28 <HAL_ADC_ConfigChannel+0xa54>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d133      	bne.n	8004cf0 <HAL_ADC_ConfigChannel+0xa1c>
 8004c88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d12d      	bne.n	8004cf0 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a1d      	ldr	r2, [pc, #116]	; (8004d10 <HAL_ADC_ConfigChannel+0xa3c>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d128      	bne.n	8004cf0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a19      	ldr	r2, [pc, #100]	; (8004d08 <HAL_ADC_ConfigChannel+0xa34>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d004      	beq.n	8004cb2 <HAL_ADC_ConfigChannel+0x9de>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a17      	ldr	r2, [pc, #92]	; (8004d0c <HAL_ADC_ConfigChannel+0xa38>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d101      	bne.n	8004cb6 <HAL_ADC_ConfigChannel+0x9e2>
 8004cb2:	4a19      	ldr	r2, [pc, #100]	; (8004d18 <HAL_ADC_ConfigChannel+0xa44>)
 8004cb4:	e000      	b.n	8004cb8 <HAL_ADC_ConfigChannel+0x9e4>
 8004cb6:	4a13      	ldr	r2, [pc, #76]	; (8004d04 <HAL_ADC_ConfigChannel+0xa30>)
 8004cb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004cbc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	4610      	mov	r0, r2
 8004cc4:	f7fe fecb 	bl	8003a5e <LL_ADC_SetCommonPathInternalCh>
 8004cc8:	e012      	b.n	8004cf0 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cce:	f043 0220 	orr.w	r2, r3, #32
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004cdc:	e008      	b.n	8004cf0 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ce2:	f043 0220 	orr.w	r2, r3, #32
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004cf8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	37e4      	adds	r7, #228	; 0xe4
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd90      	pop	{r4, r7, pc}
 8004d04:	58026300 	.word	0x58026300
 8004d08:	40022000 	.word	0x40022000
 8004d0c:	40022100 	.word	0x40022100
 8004d10:	58026000 	.word	0x58026000
 8004d14:	c7520000 	.word	0xc7520000
 8004d18:	40022300 	.word	0x40022300
 8004d1c:	24000000 	.word	0x24000000
 8004d20:	053e2d63 	.word	0x053e2d63
 8004d24:	c3210000 	.word	0xc3210000
 8004d28:	cb840000 	.word	0xcb840000

08004d2c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a6c      	ldr	r2, [pc, #432]	; (8004eec <ADC_ConfigureBoostMode+0x1c0>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d004      	beq.n	8004d48 <ADC_ConfigureBoostMode+0x1c>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a6b      	ldr	r2, [pc, #428]	; (8004ef0 <ADC_ConfigureBoostMode+0x1c4>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d109      	bne.n	8004d5c <ADC_ConfigureBoostMode+0x30>
 8004d48:	4b6a      	ldr	r3, [pc, #424]	; (8004ef4 <ADC_ConfigureBoostMode+0x1c8>)
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	bf14      	ite	ne
 8004d54:	2301      	movne	r3, #1
 8004d56:	2300      	moveq	r3, #0
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	e008      	b.n	8004d6e <ADC_ConfigureBoostMode+0x42>
 8004d5c:	4b66      	ldr	r3, [pc, #408]	; (8004ef8 <ADC_ConfigureBoostMode+0x1cc>)
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	bf14      	ite	ne
 8004d68:	2301      	movne	r3, #1
 8004d6a:	2300      	moveq	r3, #0
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d01c      	beq.n	8004dac <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004d72:	f005 fcab 	bl	800a6cc <HAL_RCC_GetHCLKFreq>
 8004d76:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d80:	d010      	beq.n	8004da4 <ADC_ConfigureBoostMode+0x78>
 8004d82:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d86:	d873      	bhi.n	8004e70 <ADC_ConfigureBoostMode+0x144>
 8004d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d8c:	d002      	beq.n	8004d94 <ADC_ConfigureBoostMode+0x68>
 8004d8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d92:	d16d      	bne.n	8004e70 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	0c1b      	lsrs	r3, r3, #16
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da0:	60fb      	str	r3, [r7, #12]
        break;
 8004da2:	e068      	b.n	8004e76 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	089b      	lsrs	r3, r3, #2
 8004da8:	60fb      	str	r3, [r7, #12]
        break;
 8004daa:	e064      	b.n	8004e76 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004dac:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004db0:	f04f 0100 	mov.w	r1, #0
 8004db4:	f006 fe86 	bl	800bac4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004db8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004dc2:	d051      	beq.n	8004e68 <ADC_ConfigureBoostMode+0x13c>
 8004dc4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004dc8:	d854      	bhi.n	8004e74 <ADC_ConfigureBoostMode+0x148>
 8004dca:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004dce:	d047      	beq.n	8004e60 <ADC_ConfigureBoostMode+0x134>
 8004dd0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004dd4:	d84e      	bhi.n	8004e74 <ADC_ConfigureBoostMode+0x148>
 8004dd6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004dda:	d03d      	beq.n	8004e58 <ADC_ConfigureBoostMode+0x12c>
 8004ddc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004de0:	d848      	bhi.n	8004e74 <ADC_ConfigureBoostMode+0x148>
 8004de2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004de6:	d033      	beq.n	8004e50 <ADC_ConfigureBoostMode+0x124>
 8004de8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dec:	d842      	bhi.n	8004e74 <ADC_ConfigureBoostMode+0x148>
 8004dee:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004df2:	d029      	beq.n	8004e48 <ADC_ConfigureBoostMode+0x11c>
 8004df4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004df8:	d83c      	bhi.n	8004e74 <ADC_ConfigureBoostMode+0x148>
 8004dfa:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004dfe:	d01a      	beq.n	8004e36 <ADC_ConfigureBoostMode+0x10a>
 8004e00:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004e04:	d836      	bhi.n	8004e74 <ADC_ConfigureBoostMode+0x148>
 8004e06:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004e0a:	d014      	beq.n	8004e36 <ADC_ConfigureBoostMode+0x10a>
 8004e0c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004e10:	d830      	bhi.n	8004e74 <ADC_ConfigureBoostMode+0x148>
 8004e12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e16:	d00e      	beq.n	8004e36 <ADC_ConfigureBoostMode+0x10a>
 8004e18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e1c:	d82a      	bhi.n	8004e74 <ADC_ConfigureBoostMode+0x148>
 8004e1e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004e22:	d008      	beq.n	8004e36 <ADC_ConfigureBoostMode+0x10a>
 8004e24:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004e28:	d824      	bhi.n	8004e74 <ADC_ConfigureBoostMode+0x148>
 8004e2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e2e:	d002      	beq.n	8004e36 <ADC_ConfigureBoostMode+0x10a>
 8004e30:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e34:	d11e      	bne.n	8004e74 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	0c9b      	lsrs	r3, r3, #18
 8004e3c:	005b      	lsls	r3, r3, #1
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e44:	60fb      	str	r3, [r7, #12]
        break;
 8004e46:	e016      	b.n	8004e76 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	091b      	lsrs	r3, r3, #4
 8004e4c:	60fb      	str	r3, [r7, #12]
        break;
 8004e4e:	e012      	b.n	8004e76 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	095b      	lsrs	r3, r3, #5
 8004e54:	60fb      	str	r3, [r7, #12]
        break;
 8004e56:	e00e      	b.n	8004e76 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	099b      	lsrs	r3, r3, #6
 8004e5c:	60fb      	str	r3, [r7, #12]
        break;
 8004e5e:	e00a      	b.n	8004e76 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	09db      	lsrs	r3, r3, #7
 8004e64:	60fb      	str	r3, [r7, #12]
        break;
 8004e66:	e006      	b.n	8004e76 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	0a1b      	lsrs	r3, r3, #8
 8004e6c:	60fb      	str	r3, [r7, #12]
        break;
 8004e6e:	e002      	b.n	8004e76 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004e70:	bf00      	nop
 8004e72:	e000      	b.n	8004e76 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004e74:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	085b      	lsrs	r3, r3, #1
 8004e7a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	4a1f      	ldr	r2, [pc, #124]	; (8004efc <ADC_ConfigureBoostMode+0x1d0>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d808      	bhi.n	8004e96 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689a      	ldr	r2, [r3, #8]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004e92:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004e94:	e025      	b.n	8004ee2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	4a19      	ldr	r2, [pc, #100]	; (8004f00 <ADC_ConfigureBoostMode+0x1d4>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d80a      	bhi.n	8004eb4 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004eb0:	609a      	str	r2, [r3, #8]
}
 8004eb2:	e016      	b.n	8004ee2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4a13      	ldr	r2, [pc, #76]	; (8004f04 <ADC_ConfigureBoostMode+0x1d8>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d80a      	bhi.n	8004ed2 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ece:	609a      	str	r2, [r3, #8]
}
 8004ed0:	e007      	b.n	8004ee2 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	689a      	ldr	r2, [r3, #8]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004ee0:	609a      	str	r2, [r3, #8]
}
 8004ee2:	bf00      	nop
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	40022000 	.word	0x40022000
 8004ef0:	40022100 	.word	0x40022100
 8004ef4:	40022300 	.word	0x40022300
 8004ef8:	58026300 	.word	0x58026300
 8004efc:	005f5e10 	.word	0x005f5e10
 8004f00:	00bebc20 	.word	0x00bebc20
 8004f04:	017d7840 	.word	0x017d7840

08004f08 <LL_ADC_IsEnabled>:
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d101      	bne.n	8004f20 <LL_ADC_IsEnabled+0x18>
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e000      	b.n	8004f22 <LL_ADC_IsEnabled+0x1a>
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <LL_ADC_REG_IsConversionOngoing>:
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b083      	sub	sp, #12
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f003 0304 	and.w	r3, r3, #4
 8004f3e:	2b04      	cmp	r3, #4
 8004f40:	d101      	bne.n	8004f46 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004f42:	2301      	movs	r3, #1
 8004f44:	e000      	b.n	8004f48 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004f54:	b590      	push	{r4, r7, lr}
 8004f56:	b0a3      	sub	sp, #140	; 0x8c
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d101      	bne.n	8004f72 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004f6e:	2302      	movs	r3, #2
 8004f70:	e0c1      	b.n	80050f6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a5e      	ldr	r2, [pc, #376]	; (8005100 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d102      	bne.n	8004f92 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004f8c:	4b5d      	ldr	r3, [pc, #372]	; (8005104 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004f8e:	60fb      	str	r3, [r7, #12]
 8004f90:	e001      	b.n	8004f96 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004f92:	2300      	movs	r3, #0
 8004f94:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10b      	bne.n	8004fb4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fa0:	f043 0220 	orr.w	r2, r3, #32
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e0a0      	b.n	80050f6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7ff ffb9 	bl	8004f2e <LL_ADC_REG_IsConversionOngoing>
 8004fbc:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7ff ffb2 	bl	8004f2e <LL_ADC_REG_IsConversionOngoing>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f040 8081 	bne.w	80050d4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004fd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d17c      	bne.n	80050d4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a48      	ldr	r2, [pc, #288]	; (8005100 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d004      	beq.n	8004fee <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a46      	ldr	r2, [pc, #280]	; (8005104 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d101      	bne.n	8004ff2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004fee:	4b46      	ldr	r3, [pc, #280]	; (8005108 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004ff0:	e000      	b.n	8004ff4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004ff2:	4b46      	ldr	r3, [pc, #280]	; (800510c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004ff4:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d039      	beq.n	8005072 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004ffe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	431a      	orrs	r2, r3
 800500c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800500e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a3a      	ldr	r2, [pc, #232]	; (8005100 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d004      	beq.n	8005024 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a39      	ldr	r2, [pc, #228]	; (8005104 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d10e      	bne.n	8005042 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005024:	4836      	ldr	r0, [pc, #216]	; (8005100 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005026:	f7ff ff6f 	bl	8004f08 <LL_ADC_IsEnabled>
 800502a:	4604      	mov	r4, r0
 800502c:	4835      	ldr	r0, [pc, #212]	; (8005104 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800502e:	f7ff ff6b 	bl	8004f08 <LL_ADC_IsEnabled>
 8005032:	4603      	mov	r3, r0
 8005034:	4323      	orrs	r3, r4
 8005036:	2b00      	cmp	r3, #0
 8005038:	bf0c      	ite	eq
 800503a:	2301      	moveq	r3, #1
 800503c:	2300      	movne	r3, #0
 800503e:	b2db      	uxtb	r3, r3
 8005040:	e008      	b.n	8005054 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8005042:	4833      	ldr	r0, [pc, #204]	; (8005110 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005044:	f7ff ff60 	bl	8004f08 <LL_ADC_IsEnabled>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	bf0c      	ite	eq
 800504e:	2301      	moveq	r3, #1
 8005050:	2300      	movne	r3, #0
 8005052:	b2db      	uxtb	r3, r3
 8005054:	2b00      	cmp	r3, #0
 8005056:	d047      	beq.n	80050e8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005058:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800505a:	689a      	ldr	r2, [r3, #8]
 800505c:	4b2d      	ldr	r3, [pc, #180]	; (8005114 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800505e:	4013      	ands	r3, r2
 8005060:	683a      	ldr	r2, [r7, #0]
 8005062:	6811      	ldr	r1, [r2, #0]
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	6892      	ldr	r2, [r2, #8]
 8005068:	430a      	orrs	r2, r1
 800506a:	431a      	orrs	r2, r3
 800506c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800506e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005070:	e03a      	b.n	80050e8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005072:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800507a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800507c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a1f      	ldr	r2, [pc, #124]	; (8005100 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d004      	beq.n	8005092 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a1d      	ldr	r2, [pc, #116]	; (8005104 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d10e      	bne.n	80050b0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8005092:	481b      	ldr	r0, [pc, #108]	; (8005100 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005094:	f7ff ff38 	bl	8004f08 <LL_ADC_IsEnabled>
 8005098:	4604      	mov	r4, r0
 800509a:	481a      	ldr	r0, [pc, #104]	; (8005104 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800509c:	f7ff ff34 	bl	8004f08 <LL_ADC_IsEnabled>
 80050a0:	4603      	mov	r3, r0
 80050a2:	4323      	orrs	r3, r4
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	bf0c      	ite	eq
 80050a8:	2301      	moveq	r3, #1
 80050aa:	2300      	movne	r3, #0
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	e008      	b.n	80050c2 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80050b0:	4817      	ldr	r0, [pc, #92]	; (8005110 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80050b2:	f7ff ff29 	bl	8004f08 <LL_ADC_IsEnabled>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	bf0c      	ite	eq
 80050bc:	2301      	moveq	r3, #1
 80050be:	2300      	movne	r3, #0
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d010      	beq.n	80050e8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80050c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050c8:	689a      	ldr	r2, [r3, #8]
 80050ca:	4b12      	ldr	r3, [pc, #72]	; (8005114 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80050cc:	4013      	ands	r3, r2
 80050ce:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80050d0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80050d2:	e009      	b.n	80050e8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050d8:	f043 0220 	orr.w	r2, r3, #32
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80050e6:	e000      	b.n	80050ea <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80050e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80050f2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	378c      	adds	r7, #140	; 0x8c
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd90      	pop	{r4, r7, pc}
 80050fe:	bf00      	nop
 8005100:	40022000 	.word	0x40022000
 8005104:	40022100 	.word	0x40022100
 8005108:	40022300 	.word	0x40022300
 800510c:	58026300 	.word	0x58026300
 8005110:	58026000 	.word	0x58026000
 8005114:	fffff0e0 	.word	0xfffff0e0

08005118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f003 0307 	and.w	r3, r3, #7
 8005126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005128:	4b0b      	ldr	r3, [pc, #44]	; (8005158 <__NVIC_SetPriorityGrouping+0x40>)
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800512e:	68ba      	ldr	r2, [r7, #8]
 8005130:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005134:	4013      	ands	r3, r2
 8005136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005140:	4b06      	ldr	r3, [pc, #24]	; (800515c <__NVIC_SetPriorityGrouping+0x44>)
 8005142:	4313      	orrs	r3, r2
 8005144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005146:	4a04      	ldr	r2, [pc, #16]	; (8005158 <__NVIC_SetPriorityGrouping+0x40>)
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	60d3      	str	r3, [r2, #12]
}
 800514c:	bf00      	nop
 800514e:	3714      	adds	r7, #20
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	e000ed00 	.word	0xe000ed00
 800515c:	05fa0000 	.word	0x05fa0000

08005160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005160:	b480      	push	{r7}
 8005162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005164:	4b04      	ldr	r3, [pc, #16]	; (8005178 <__NVIC_GetPriorityGrouping+0x18>)
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	0a1b      	lsrs	r3, r3, #8
 800516a:	f003 0307 	and.w	r3, r3, #7
}
 800516e:	4618      	mov	r0, r3
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr
 8005178:	e000ed00 	.word	0xe000ed00

0800517c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	4603      	mov	r3, r0
 8005184:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005186:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800518a:	2b00      	cmp	r3, #0
 800518c:	db0b      	blt.n	80051a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800518e:	88fb      	ldrh	r3, [r7, #6]
 8005190:	f003 021f 	and.w	r2, r3, #31
 8005194:	4907      	ldr	r1, [pc, #28]	; (80051b4 <__NVIC_EnableIRQ+0x38>)
 8005196:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800519a:	095b      	lsrs	r3, r3, #5
 800519c:	2001      	movs	r0, #1
 800519e:	fa00 f202 	lsl.w	r2, r0, r2
 80051a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80051a6:	bf00      	nop
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	e000e100 	.word	0xe000e100

080051b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	4603      	mov	r3, r0
 80051c0:	6039      	str	r1, [r7, #0]
 80051c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80051c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	db0a      	blt.n	80051e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	b2da      	uxtb	r2, r3
 80051d0:	490c      	ldr	r1, [pc, #48]	; (8005204 <__NVIC_SetPriority+0x4c>)
 80051d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051d6:	0112      	lsls	r2, r2, #4
 80051d8:	b2d2      	uxtb	r2, r2
 80051da:	440b      	add	r3, r1
 80051dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051e0:	e00a      	b.n	80051f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	b2da      	uxtb	r2, r3
 80051e6:	4908      	ldr	r1, [pc, #32]	; (8005208 <__NVIC_SetPriority+0x50>)
 80051e8:	88fb      	ldrh	r3, [r7, #6]
 80051ea:	f003 030f 	and.w	r3, r3, #15
 80051ee:	3b04      	subs	r3, #4
 80051f0:	0112      	lsls	r2, r2, #4
 80051f2:	b2d2      	uxtb	r2, r2
 80051f4:	440b      	add	r3, r1
 80051f6:	761a      	strb	r2, [r3, #24]
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr
 8005204:	e000e100 	.word	0xe000e100
 8005208:	e000ed00 	.word	0xe000ed00

0800520c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800520c:	b480      	push	{r7}
 800520e:	b089      	sub	sp, #36	; 0x24
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f003 0307 	and.w	r3, r3, #7
 800521e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	f1c3 0307 	rsb	r3, r3, #7
 8005226:	2b04      	cmp	r3, #4
 8005228:	bf28      	it	cs
 800522a:	2304      	movcs	r3, #4
 800522c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	3304      	adds	r3, #4
 8005232:	2b06      	cmp	r3, #6
 8005234:	d902      	bls.n	800523c <NVIC_EncodePriority+0x30>
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	3b03      	subs	r3, #3
 800523a:	e000      	b.n	800523e <NVIC_EncodePriority+0x32>
 800523c:	2300      	movs	r3, #0
 800523e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005240:	f04f 32ff 	mov.w	r2, #4294967295
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	fa02 f303 	lsl.w	r3, r2, r3
 800524a:	43da      	mvns	r2, r3
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	401a      	ands	r2, r3
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005254:	f04f 31ff 	mov.w	r1, #4294967295
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	fa01 f303 	lsl.w	r3, r1, r3
 800525e:	43d9      	mvns	r1, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005264:	4313      	orrs	r3, r2
         );
}
 8005266:	4618      	mov	r0, r3
 8005268:	3724      	adds	r7, #36	; 0x24
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
	...

08005274 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	3b01      	subs	r3, #1
 8005280:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005284:	d301      	bcc.n	800528a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005286:	2301      	movs	r3, #1
 8005288:	e00f      	b.n	80052aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800528a:	4a0a      	ldr	r2, [pc, #40]	; (80052b4 <SysTick_Config+0x40>)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	3b01      	subs	r3, #1
 8005290:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005292:	210f      	movs	r1, #15
 8005294:	f04f 30ff 	mov.w	r0, #4294967295
 8005298:	f7ff ff8e 	bl	80051b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800529c:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <SysTick_Config+0x40>)
 800529e:	2200      	movs	r2, #0
 80052a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80052a2:	4b04      	ldr	r3, [pc, #16]	; (80052b4 <SysTick_Config+0x40>)
 80052a4:	2207      	movs	r2, #7
 80052a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3708      	adds	r7, #8
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	e000e010 	.word	0xe000e010

080052b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f7ff ff29 	bl	8005118 <__NVIC_SetPriorityGrouping>
}
 80052c6:	bf00      	nop
 80052c8:	3708      	adds	r7, #8
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b086      	sub	sp, #24
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	4603      	mov	r3, r0
 80052d6:	60b9      	str	r1, [r7, #8]
 80052d8:	607a      	str	r2, [r7, #4]
 80052da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80052dc:	f7ff ff40 	bl	8005160 <__NVIC_GetPriorityGrouping>
 80052e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	68b9      	ldr	r1, [r7, #8]
 80052e6:	6978      	ldr	r0, [r7, #20]
 80052e8:	f7ff ff90 	bl	800520c <NVIC_EncodePriority>
 80052ec:	4602      	mov	r2, r0
 80052ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80052f2:	4611      	mov	r1, r2
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7ff ff5f 	bl	80051b8 <__NVIC_SetPriority>
}
 80052fa:	bf00      	nop
 80052fc:	3718      	adds	r7, #24
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b082      	sub	sp, #8
 8005306:	af00      	add	r7, sp, #0
 8005308:	4603      	mov	r3, r0
 800530a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800530c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005310:	4618      	mov	r0, r3
 8005312:	f7ff ff33 	bl	800517c <__NVIC_EnableIRQ>
}
 8005316:	bf00      	nop
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800531e:	b580      	push	{r7, lr}
 8005320:	b082      	sub	sp, #8
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f7ff ffa4 	bl	8005274 <SysTick_Config>
 800532c:	4603      	mov	r3, r0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
	...

08005338 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005340:	f7fe fb34 	bl	80039ac <HAL_GetTick>
 8005344:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d101      	bne.n	8005350 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e312      	b.n	8005976 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a66      	ldr	r2, [pc, #408]	; (80054f0 <HAL_DMA_Init+0x1b8>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d04a      	beq.n	80053f0 <HAL_DMA_Init+0xb8>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a65      	ldr	r2, [pc, #404]	; (80054f4 <HAL_DMA_Init+0x1bc>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d045      	beq.n	80053f0 <HAL_DMA_Init+0xb8>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a63      	ldr	r2, [pc, #396]	; (80054f8 <HAL_DMA_Init+0x1c0>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d040      	beq.n	80053f0 <HAL_DMA_Init+0xb8>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a62      	ldr	r2, [pc, #392]	; (80054fc <HAL_DMA_Init+0x1c4>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d03b      	beq.n	80053f0 <HAL_DMA_Init+0xb8>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a60      	ldr	r2, [pc, #384]	; (8005500 <HAL_DMA_Init+0x1c8>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d036      	beq.n	80053f0 <HAL_DMA_Init+0xb8>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a5f      	ldr	r2, [pc, #380]	; (8005504 <HAL_DMA_Init+0x1cc>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d031      	beq.n	80053f0 <HAL_DMA_Init+0xb8>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a5d      	ldr	r2, [pc, #372]	; (8005508 <HAL_DMA_Init+0x1d0>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d02c      	beq.n	80053f0 <HAL_DMA_Init+0xb8>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a5c      	ldr	r2, [pc, #368]	; (800550c <HAL_DMA_Init+0x1d4>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d027      	beq.n	80053f0 <HAL_DMA_Init+0xb8>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a5a      	ldr	r2, [pc, #360]	; (8005510 <HAL_DMA_Init+0x1d8>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d022      	beq.n	80053f0 <HAL_DMA_Init+0xb8>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a59      	ldr	r2, [pc, #356]	; (8005514 <HAL_DMA_Init+0x1dc>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d01d      	beq.n	80053f0 <HAL_DMA_Init+0xb8>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a57      	ldr	r2, [pc, #348]	; (8005518 <HAL_DMA_Init+0x1e0>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d018      	beq.n	80053f0 <HAL_DMA_Init+0xb8>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a56      	ldr	r2, [pc, #344]	; (800551c <HAL_DMA_Init+0x1e4>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d013      	beq.n	80053f0 <HAL_DMA_Init+0xb8>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a54      	ldr	r2, [pc, #336]	; (8005520 <HAL_DMA_Init+0x1e8>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d00e      	beq.n	80053f0 <HAL_DMA_Init+0xb8>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a53      	ldr	r2, [pc, #332]	; (8005524 <HAL_DMA_Init+0x1ec>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d009      	beq.n	80053f0 <HAL_DMA_Init+0xb8>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a51      	ldr	r2, [pc, #324]	; (8005528 <HAL_DMA_Init+0x1f0>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d004      	beq.n	80053f0 <HAL_DMA_Init+0xb8>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a50      	ldr	r2, [pc, #320]	; (800552c <HAL_DMA_Init+0x1f4>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d101      	bne.n	80053f4 <HAL_DMA_Init+0xbc>
 80053f0:	2301      	movs	r3, #1
 80053f2:	e000      	b.n	80053f6 <HAL_DMA_Init+0xbe>
 80053f4:	2300      	movs	r3, #0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f000 813c 	beq.w	8005674 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2202      	movs	r2, #2
 8005400:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a37      	ldr	r2, [pc, #220]	; (80054f0 <HAL_DMA_Init+0x1b8>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d04a      	beq.n	80054ac <HAL_DMA_Init+0x174>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a36      	ldr	r2, [pc, #216]	; (80054f4 <HAL_DMA_Init+0x1bc>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d045      	beq.n	80054ac <HAL_DMA_Init+0x174>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a34      	ldr	r2, [pc, #208]	; (80054f8 <HAL_DMA_Init+0x1c0>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d040      	beq.n	80054ac <HAL_DMA_Init+0x174>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a33      	ldr	r2, [pc, #204]	; (80054fc <HAL_DMA_Init+0x1c4>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d03b      	beq.n	80054ac <HAL_DMA_Init+0x174>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a31      	ldr	r2, [pc, #196]	; (8005500 <HAL_DMA_Init+0x1c8>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d036      	beq.n	80054ac <HAL_DMA_Init+0x174>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a30      	ldr	r2, [pc, #192]	; (8005504 <HAL_DMA_Init+0x1cc>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d031      	beq.n	80054ac <HAL_DMA_Init+0x174>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a2e      	ldr	r2, [pc, #184]	; (8005508 <HAL_DMA_Init+0x1d0>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d02c      	beq.n	80054ac <HAL_DMA_Init+0x174>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a2d      	ldr	r2, [pc, #180]	; (800550c <HAL_DMA_Init+0x1d4>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d027      	beq.n	80054ac <HAL_DMA_Init+0x174>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a2b      	ldr	r2, [pc, #172]	; (8005510 <HAL_DMA_Init+0x1d8>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d022      	beq.n	80054ac <HAL_DMA_Init+0x174>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a2a      	ldr	r2, [pc, #168]	; (8005514 <HAL_DMA_Init+0x1dc>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d01d      	beq.n	80054ac <HAL_DMA_Init+0x174>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a28      	ldr	r2, [pc, #160]	; (8005518 <HAL_DMA_Init+0x1e0>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d018      	beq.n	80054ac <HAL_DMA_Init+0x174>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a27      	ldr	r2, [pc, #156]	; (800551c <HAL_DMA_Init+0x1e4>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d013      	beq.n	80054ac <HAL_DMA_Init+0x174>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a25      	ldr	r2, [pc, #148]	; (8005520 <HAL_DMA_Init+0x1e8>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d00e      	beq.n	80054ac <HAL_DMA_Init+0x174>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a24      	ldr	r2, [pc, #144]	; (8005524 <HAL_DMA_Init+0x1ec>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d009      	beq.n	80054ac <HAL_DMA_Init+0x174>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a22      	ldr	r2, [pc, #136]	; (8005528 <HAL_DMA_Init+0x1f0>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d004      	beq.n	80054ac <HAL_DMA_Init+0x174>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a21      	ldr	r2, [pc, #132]	; (800552c <HAL_DMA_Init+0x1f4>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d108      	bne.n	80054be <HAL_DMA_Init+0x186>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f022 0201 	bic.w	r2, r2, #1
 80054ba:	601a      	str	r2, [r3, #0]
 80054bc:	e007      	b.n	80054ce <HAL_DMA_Init+0x196>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 0201 	bic.w	r2, r2, #1
 80054cc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80054ce:	e02f      	b.n	8005530 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80054d0:	f7fe fa6c 	bl	80039ac <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b05      	cmp	r3, #5
 80054dc:	d928      	bls.n	8005530 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2220      	movs	r2, #32
 80054e2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2203      	movs	r2, #3
 80054e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e242      	b.n	8005976 <HAL_DMA_Init+0x63e>
 80054f0:	40020010 	.word	0x40020010
 80054f4:	40020028 	.word	0x40020028
 80054f8:	40020040 	.word	0x40020040
 80054fc:	40020058 	.word	0x40020058
 8005500:	40020070 	.word	0x40020070
 8005504:	40020088 	.word	0x40020088
 8005508:	400200a0 	.word	0x400200a0
 800550c:	400200b8 	.word	0x400200b8
 8005510:	40020410 	.word	0x40020410
 8005514:	40020428 	.word	0x40020428
 8005518:	40020440 	.word	0x40020440
 800551c:	40020458 	.word	0x40020458
 8005520:	40020470 	.word	0x40020470
 8005524:	40020488 	.word	0x40020488
 8005528:	400204a0 	.word	0x400204a0
 800552c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1c8      	bne.n	80054d0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	4b83      	ldr	r3, [pc, #524]	; (8005758 <HAL_DMA_Init+0x420>)
 800554a:	4013      	ands	r3, r2
 800554c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005556:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005562:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800556e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a1b      	ldr	r3, [r3, #32]
 8005574:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	4313      	orrs	r3, r2
 800557a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005580:	2b04      	cmp	r3, #4
 8005582:	d107      	bne.n	8005594 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558c:	4313      	orrs	r3, r2
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	4313      	orrs	r3, r2
 8005592:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	2b28      	cmp	r3, #40	; 0x28
 800559a:	d903      	bls.n	80055a4 <HAL_DMA_Init+0x26c>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	2b2e      	cmp	r3, #46	; 0x2e
 80055a2:	d91f      	bls.n	80055e4 <HAL_DMA_Init+0x2ac>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	2b3e      	cmp	r3, #62	; 0x3e
 80055aa:	d903      	bls.n	80055b4 <HAL_DMA_Init+0x27c>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	2b42      	cmp	r3, #66	; 0x42
 80055b2:	d917      	bls.n	80055e4 <HAL_DMA_Init+0x2ac>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	2b46      	cmp	r3, #70	; 0x46
 80055ba:	d903      	bls.n	80055c4 <HAL_DMA_Init+0x28c>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	2b48      	cmp	r3, #72	; 0x48
 80055c2:	d90f      	bls.n	80055e4 <HAL_DMA_Init+0x2ac>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	2b4e      	cmp	r3, #78	; 0x4e
 80055ca:	d903      	bls.n	80055d4 <HAL_DMA_Init+0x29c>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	2b52      	cmp	r3, #82	; 0x52
 80055d2:	d907      	bls.n	80055e4 <HAL_DMA_Init+0x2ac>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	2b73      	cmp	r3, #115	; 0x73
 80055da:	d905      	bls.n	80055e8 <HAL_DMA_Init+0x2b0>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	2b77      	cmp	r3, #119	; 0x77
 80055e2:	d801      	bhi.n	80055e8 <HAL_DMA_Init+0x2b0>
 80055e4:	2301      	movs	r3, #1
 80055e6:	e000      	b.n	80055ea <HAL_DMA_Init+0x2b2>
 80055e8:	2300      	movs	r3, #0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055f4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f023 0307 	bic.w	r3, r3, #7
 800560c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	4313      	orrs	r3, r2
 8005616:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561c:	2b04      	cmp	r3, #4
 800561e:	d117      	bne.n	8005650 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	4313      	orrs	r3, r2
 8005628:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00e      	beq.n	8005650 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f001 fdca 	bl	80071cc <DMA_CheckFifoParam>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d008      	beq.n	8005650 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2240      	movs	r2, #64	; 0x40
 8005642:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e192      	b.n	8005976 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f001 fd05 	bl	8007068 <DMA_CalcBaseAndBitshift>
 800565e:	4603      	mov	r3, r0
 8005660:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005666:	f003 031f 	and.w	r3, r3, #31
 800566a:	223f      	movs	r2, #63	; 0x3f
 800566c:	409a      	lsls	r2, r3
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	609a      	str	r2, [r3, #8]
 8005672:	e0c8      	b.n	8005806 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a38      	ldr	r2, [pc, #224]	; (800575c <HAL_DMA_Init+0x424>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d022      	beq.n	80056c4 <HAL_DMA_Init+0x38c>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a37      	ldr	r2, [pc, #220]	; (8005760 <HAL_DMA_Init+0x428>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d01d      	beq.n	80056c4 <HAL_DMA_Init+0x38c>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a35      	ldr	r2, [pc, #212]	; (8005764 <HAL_DMA_Init+0x42c>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d018      	beq.n	80056c4 <HAL_DMA_Init+0x38c>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a34      	ldr	r2, [pc, #208]	; (8005768 <HAL_DMA_Init+0x430>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d013      	beq.n	80056c4 <HAL_DMA_Init+0x38c>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a32      	ldr	r2, [pc, #200]	; (800576c <HAL_DMA_Init+0x434>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d00e      	beq.n	80056c4 <HAL_DMA_Init+0x38c>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a31      	ldr	r2, [pc, #196]	; (8005770 <HAL_DMA_Init+0x438>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d009      	beq.n	80056c4 <HAL_DMA_Init+0x38c>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a2f      	ldr	r2, [pc, #188]	; (8005774 <HAL_DMA_Init+0x43c>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d004      	beq.n	80056c4 <HAL_DMA_Init+0x38c>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a2e      	ldr	r2, [pc, #184]	; (8005778 <HAL_DMA_Init+0x440>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d101      	bne.n	80056c8 <HAL_DMA_Init+0x390>
 80056c4:	2301      	movs	r3, #1
 80056c6:	e000      	b.n	80056ca <HAL_DMA_Init+0x392>
 80056c8:	2300      	movs	r3, #0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f000 8092 	beq.w	80057f4 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a21      	ldr	r2, [pc, #132]	; (800575c <HAL_DMA_Init+0x424>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d021      	beq.n	800571e <HAL_DMA_Init+0x3e6>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a20      	ldr	r2, [pc, #128]	; (8005760 <HAL_DMA_Init+0x428>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d01c      	beq.n	800571e <HAL_DMA_Init+0x3e6>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a1e      	ldr	r2, [pc, #120]	; (8005764 <HAL_DMA_Init+0x42c>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d017      	beq.n	800571e <HAL_DMA_Init+0x3e6>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a1d      	ldr	r2, [pc, #116]	; (8005768 <HAL_DMA_Init+0x430>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d012      	beq.n	800571e <HAL_DMA_Init+0x3e6>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a1b      	ldr	r2, [pc, #108]	; (800576c <HAL_DMA_Init+0x434>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d00d      	beq.n	800571e <HAL_DMA_Init+0x3e6>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a1a      	ldr	r2, [pc, #104]	; (8005770 <HAL_DMA_Init+0x438>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d008      	beq.n	800571e <HAL_DMA_Init+0x3e6>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a18      	ldr	r2, [pc, #96]	; (8005774 <HAL_DMA_Init+0x43c>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d003      	beq.n	800571e <HAL_DMA_Init+0x3e6>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a17      	ldr	r2, [pc, #92]	; (8005778 <HAL_DMA_Init+0x440>)
 800571c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2202      	movs	r2, #2
 8005722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	4b10      	ldr	r3, [pc, #64]	; (800577c <HAL_DMA_Init+0x444>)
 800573a:	4013      	ands	r3, r2
 800573c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	2b40      	cmp	r3, #64	; 0x40
 8005744:	d01c      	beq.n	8005780 <HAL_DMA_Init+0x448>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	2b80      	cmp	r3, #128	; 0x80
 800574c:	d102      	bne.n	8005754 <HAL_DMA_Init+0x41c>
 800574e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005752:	e016      	b.n	8005782 <HAL_DMA_Init+0x44a>
 8005754:	2300      	movs	r3, #0
 8005756:	e014      	b.n	8005782 <HAL_DMA_Init+0x44a>
 8005758:	fe10803f 	.word	0xfe10803f
 800575c:	58025408 	.word	0x58025408
 8005760:	5802541c 	.word	0x5802541c
 8005764:	58025430 	.word	0x58025430
 8005768:	58025444 	.word	0x58025444
 800576c:	58025458 	.word	0x58025458
 8005770:	5802546c 	.word	0x5802546c
 8005774:	58025480 	.word	0x58025480
 8005778:	58025494 	.word	0x58025494
 800577c:	fffe000f 	.word	0xfffe000f
 8005780:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	68d2      	ldr	r2, [r2, #12]
 8005786:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005788:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005790:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005798:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80057a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	69db      	ldr	r3, [r3, #28]
 80057a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80057a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80057b0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	461a      	mov	r2, r3
 80057c6:	4b6e      	ldr	r3, [pc, #440]	; (8005980 <HAL_DMA_Init+0x648>)
 80057c8:	4413      	add	r3, r2
 80057ca:	4a6e      	ldr	r2, [pc, #440]	; (8005984 <HAL_DMA_Init+0x64c>)
 80057cc:	fba2 2303 	umull	r2, r3, r2, r3
 80057d0:	091b      	lsrs	r3, r3, #4
 80057d2:	009a      	lsls	r2, r3, #2
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f001 fc45 	bl	8007068 <DMA_CalcBaseAndBitshift>
 80057de:	4603      	mov	r3, r0
 80057e0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057e6:	f003 031f 	and.w	r3, r3, #31
 80057ea:	2201      	movs	r2, #1
 80057ec:	409a      	lsls	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	605a      	str	r2, [r3, #4]
 80057f2:	e008      	b.n	8005806 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2240      	movs	r2, #64	; 0x40
 80057f8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2203      	movs	r2, #3
 80057fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e0b7      	b.n	8005976 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a5f      	ldr	r2, [pc, #380]	; (8005988 <HAL_DMA_Init+0x650>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d072      	beq.n	80058f6 <HAL_DMA_Init+0x5be>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a5d      	ldr	r2, [pc, #372]	; (800598c <HAL_DMA_Init+0x654>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d06d      	beq.n	80058f6 <HAL_DMA_Init+0x5be>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a5c      	ldr	r2, [pc, #368]	; (8005990 <HAL_DMA_Init+0x658>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d068      	beq.n	80058f6 <HAL_DMA_Init+0x5be>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a5a      	ldr	r2, [pc, #360]	; (8005994 <HAL_DMA_Init+0x65c>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d063      	beq.n	80058f6 <HAL_DMA_Init+0x5be>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a59      	ldr	r2, [pc, #356]	; (8005998 <HAL_DMA_Init+0x660>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d05e      	beq.n	80058f6 <HAL_DMA_Init+0x5be>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a57      	ldr	r2, [pc, #348]	; (800599c <HAL_DMA_Init+0x664>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d059      	beq.n	80058f6 <HAL_DMA_Init+0x5be>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a56      	ldr	r2, [pc, #344]	; (80059a0 <HAL_DMA_Init+0x668>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d054      	beq.n	80058f6 <HAL_DMA_Init+0x5be>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a54      	ldr	r2, [pc, #336]	; (80059a4 <HAL_DMA_Init+0x66c>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d04f      	beq.n	80058f6 <HAL_DMA_Init+0x5be>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a53      	ldr	r2, [pc, #332]	; (80059a8 <HAL_DMA_Init+0x670>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d04a      	beq.n	80058f6 <HAL_DMA_Init+0x5be>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a51      	ldr	r2, [pc, #324]	; (80059ac <HAL_DMA_Init+0x674>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d045      	beq.n	80058f6 <HAL_DMA_Init+0x5be>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a50      	ldr	r2, [pc, #320]	; (80059b0 <HAL_DMA_Init+0x678>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d040      	beq.n	80058f6 <HAL_DMA_Init+0x5be>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a4e      	ldr	r2, [pc, #312]	; (80059b4 <HAL_DMA_Init+0x67c>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d03b      	beq.n	80058f6 <HAL_DMA_Init+0x5be>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a4d      	ldr	r2, [pc, #308]	; (80059b8 <HAL_DMA_Init+0x680>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d036      	beq.n	80058f6 <HAL_DMA_Init+0x5be>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a4b      	ldr	r2, [pc, #300]	; (80059bc <HAL_DMA_Init+0x684>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d031      	beq.n	80058f6 <HAL_DMA_Init+0x5be>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a4a      	ldr	r2, [pc, #296]	; (80059c0 <HAL_DMA_Init+0x688>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d02c      	beq.n	80058f6 <HAL_DMA_Init+0x5be>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a48      	ldr	r2, [pc, #288]	; (80059c4 <HAL_DMA_Init+0x68c>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d027      	beq.n	80058f6 <HAL_DMA_Init+0x5be>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a47      	ldr	r2, [pc, #284]	; (80059c8 <HAL_DMA_Init+0x690>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d022      	beq.n	80058f6 <HAL_DMA_Init+0x5be>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a45      	ldr	r2, [pc, #276]	; (80059cc <HAL_DMA_Init+0x694>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d01d      	beq.n	80058f6 <HAL_DMA_Init+0x5be>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a44      	ldr	r2, [pc, #272]	; (80059d0 <HAL_DMA_Init+0x698>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d018      	beq.n	80058f6 <HAL_DMA_Init+0x5be>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a42      	ldr	r2, [pc, #264]	; (80059d4 <HAL_DMA_Init+0x69c>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d013      	beq.n	80058f6 <HAL_DMA_Init+0x5be>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a41      	ldr	r2, [pc, #260]	; (80059d8 <HAL_DMA_Init+0x6a0>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d00e      	beq.n	80058f6 <HAL_DMA_Init+0x5be>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a3f      	ldr	r2, [pc, #252]	; (80059dc <HAL_DMA_Init+0x6a4>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d009      	beq.n	80058f6 <HAL_DMA_Init+0x5be>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a3e      	ldr	r2, [pc, #248]	; (80059e0 <HAL_DMA_Init+0x6a8>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d004      	beq.n	80058f6 <HAL_DMA_Init+0x5be>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a3c      	ldr	r2, [pc, #240]	; (80059e4 <HAL_DMA_Init+0x6ac>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d101      	bne.n	80058fa <HAL_DMA_Init+0x5c2>
 80058f6:	2301      	movs	r3, #1
 80058f8:	e000      	b.n	80058fc <HAL_DMA_Init+0x5c4>
 80058fa:	2300      	movs	r3, #0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d032      	beq.n	8005966 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f001 fcdf 	bl	80072c4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	2b80      	cmp	r3, #128	; 0x80
 800590c:	d102      	bne.n	8005914 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800591c:	b2d2      	uxtb	r2, r2
 800591e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005928:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d010      	beq.n	8005954 <HAL_DMA_Init+0x61c>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	2b08      	cmp	r3, #8
 8005938:	d80c      	bhi.n	8005954 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f001 fd5c 	bl	80073f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005944:	2200      	movs	r2, #0
 8005946:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005950:	605a      	str	r2, [r3, #4]
 8005952:	e008      	b.n	8005966 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3718      	adds	r7, #24
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	a7fdabf8 	.word	0xa7fdabf8
 8005984:	cccccccd 	.word	0xcccccccd
 8005988:	40020010 	.word	0x40020010
 800598c:	40020028 	.word	0x40020028
 8005990:	40020040 	.word	0x40020040
 8005994:	40020058 	.word	0x40020058
 8005998:	40020070 	.word	0x40020070
 800599c:	40020088 	.word	0x40020088
 80059a0:	400200a0 	.word	0x400200a0
 80059a4:	400200b8 	.word	0x400200b8
 80059a8:	40020410 	.word	0x40020410
 80059ac:	40020428 	.word	0x40020428
 80059b0:	40020440 	.word	0x40020440
 80059b4:	40020458 	.word	0x40020458
 80059b8:	40020470 	.word	0x40020470
 80059bc:	40020488 	.word	0x40020488
 80059c0:	400204a0 	.word	0x400204a0
 80059c4:	400204b8 	.word	0x400204b8
 80059c8:	58025408 	.word	0x58025408
 80059cc:	5802541c 	.word	0x5802541c
 80059d0:	58025430 	.word	0x58025430
 80059d4:	58025444 	.word	0x58025444
 80059d8:	58025458 	.word	0x58025458
 80059dc:	5802546c 	.word	0x5802546c
 80059e0:	58025480 	.word	0x58025480
 80059e4:	58025494 	.word	0x58025494

080059e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
 80059f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059f6:	2300      	movs	r3, #0
 80059f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d101      	bne.n	8005a04 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e226      	b.n	8005e52 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d101      	bne.n	8005a12 <HAL_DMA_Start_IT+0x2a>
 8005a0e:	2302      	movs	r3, #2
 8005a10:	e21f      	b.n	8005e52 <HAL_DMA_Start_IT+0x46a>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	f040 820a 	bne.w	8005e3c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a68      	ldr	r2, [pc, #416]	; (8005bdc <HAL_DMA_Start_IT+0x1f4>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d04a      	beq.n	8005ad6 <HAL_DMA_Start_IT+0xee>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a66      	ldr	r2, [pc, #408]	; (8005be0 <HAL_DMA_Start_IT+0x1f8>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d045      	beq.n	8005ad6 <HAL_DMA_Start_IT+0xee>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a65      	ldr	r2, [pc, #404]	; (8005be4 <HAL_DMA_Start_IT+0x1fc>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d040      	beq.n	8005ad6 <HAL_DMA_Start_IT+0xee>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a63      	ldr	r2, [pc, #396]	; (8005be8 <HAL_DMA_Start_IT+0x200>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d03b      	beq.n	8005ad6 <HAL_DMA_Start_IT+0xee>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a62      	ldr	r2, [pc, #392]	; (8005bec <HAL_DMA_Start_IT+0x204>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d036      	beq.n	8005ad6 <HAL_DMA_Start_IT+0xee>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a60      	ldr	r2, [pc, #384]	; (8005bf0 <HAL_DMA_Start_IT+0x208>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d031      	beq.n	8005ad6 <HAL_DMA_Start_IT+0xee>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a5f      	ldr	r2, [pc, #380]	; (8005bf4 <HAL_DMA_Start_IT+0x20c>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d02c      	beq.n	8005ad6 <HAL_DMA_Start_IT+0xee>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a5d      	ldr	r2, [pc, #372]	; (8005bf8 <HAL_DMA_Start_IT+0x210>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d027      	beq.n	8005ad6 <HAL_DMA_Start_IT+0xee>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a5c      	ldr	r2, [pc, #368]	; (8005bfc <HAL_DMA_Start_IT+0x214>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d022      	beq.n	8005ad6 <HAL_DMA_Start_IT+0xee>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a5a      	ldr	r2, [pc, #360]	; (8005c00 <HAL_DMA_Start_IT+0x218>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d01d      	beq.n	8005ad6 <HAL_DMA_Start_IT+0xee>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a59      	ldr	r2, [pc, #356]	; (8005c04 <HAL_DMA_Start_IT+0x21c>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d018      	beq.n	8005ad6 <HAL_DMA_Start_IT+0xee>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a57      	ldr	r2, [pc, #348]	; (8005c08 <HAL_DMA_Start_IT+0x220>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d013      	beq.n	8005ad6 <HAL_DMA_Start_IT+0xee>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a56      	ldr	r2, [pc, #344]	; (8005c0c <HAL_DMA_Start_IT+0x224>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d00e      	beq.n	8005ad6 <HAL_DMA_Start_IT+0xee>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a54      	ldr	r2, [pc, #336]	; (8005c10 <HAL_DMA_Start_IT+0x228>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d009      	beq.n	8005ad6 <HAL_DMA_Start_IT+0xee>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a53      	ldr	r2, [pc, #332]	; (8005c14 <HAL_DMA_Start_IT+0x22c>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d004      	beq.n	8005ad6 <HAL_DMA_Start_IT+0xee>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a51      	ldr	r2, [pc, #324]	; (8005c18 <HAL_DMA_Start_IT+0x230>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d108      	bne.n	8005ae8 <HAL_DMA_Start_IT+0x100>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 0201 	bic.w	r2, r2, #1
 8005ae4:	601a      	str	r2, [r3, #0]
 8005ae6:	e007      	b.n	8005af8 <HAL_DMA_Start_IT+0x110>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f022 0201 	bic.w	r2, r2, #1
 8005af6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	68b9      	ldr	r1, [r7, #8]
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f001 f906 	bl	8006d10 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a34      	ldr	r2, [pc, #208]	; (8005bdc <HAL_DMA_Start_IT+0x1f4>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d04a      	beq.n	8005ba4 <HAL_DMA_Start_IT+0x1bc>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a33      	ldr	r2, [pc, #204]	; (8005be0 <HAL_DMA_Start_IT+0x1f8>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d045      	beq.n	8005ba4 <HAL_DMA_Start_IT+0x1bc>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a31      	ldr	r2, [pc, #196]	; (8005be4 <HAL_DMA_Start_IT+0x1fc>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d040      	beq.n	8005ba4 <HAL_DMA_Start_IT+0x1bc>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a30      	ldr	r2, [pc, #192]	; (8005be8 <HAL_DMA_Start_IT+0x200>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d03b      	beq.n	8005ba4 <HAL_DMA_Start_IT+0x1bc>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a2e      	ldr	r2, [pc, #184]	; (8005bec <HAL_DMA_Start_IT+0x204>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d036      	beq.n	8005ba4 <HAL_DMA_Start_IT+0x1bc>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a2d      	ldr	r2, [pc, #180]	; (8005bf0 <HAL_DMA_Start_IT+0x208>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d031      	beq.n	8005ba4 <HAL_DMA_Start_IT+0x1bc>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a2b      	ldr	r2, [pc, #172]	; (8005bf4 <HAL_DMA_Start_IT+0x20c>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d02c      	beq.n	8005ba4 <HAL_DMA_Start_IT+0x1bc>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a2a      	ldr	r2, [pc, #168]	; (8005bf8 <HAL_DMA_Start_IT+0x210>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d027      	beq.n	8005ba4 <HAL_DMA_Start_IT+0x1bc>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a28      	ldr	r2, [pc, #160]	; (8005bfc <HAL_DMA_Start_IT+0x214>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d022      	beq.n	8005ba4 <HAL_DMA_Start_IT+0x1bc>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a27      	ldr	r2, [pc, #156]	; (8005c00 <HAL_DMA_Start_IT+0x218>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d01d      	beq.n	8005ba4 <HAL_DMA_Start_IT+0x1bc>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a25      	ldr	r2, [pc, #148]	; (8005c04 <HAL_DMA_Start_IT+0x21c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d018      	beq.n	8005ba4 <HAL_DMA_Start_IT+0x1bc>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a24      	ldr	r2, [pc, #144]	; (8005c08 <HAL_DMA_Start_IT+0x220>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d013      	beq.n	8005ba4 <HAL_DMA_Start_IT+0x1bc>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a22      	ldr	r2, [pc, #136]	; (8005c0c <HAL_DMA_Start_IT+0x224>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d00e      	beq.n	8005ba4 <HAL_DMA_Start_IT+0x1bc>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a21      	ldr	r2, [pc, #132]	; (8005c10 <HAL_DMA_Start_IT+0x228>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d009      	beq.n	8005ba4 <HAL_DMA_Start_IT+0x1bc>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a1f      	ldr	r2, [pc, #124]	; (8005c14 <HAL_DMA_Start_IT+0x22c>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d004      	beq.n	8005ba4 <HAL_DMA_Start_IT+0x1bc>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a1e      	ldr	r2, [pc, #120]	; (8005c18 <HAL_DMA_Start_IT+0x230>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d101      	bne.n	8005ba8 <HAL_DMA_Start_IT+0x1c0>
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e000      	b.n	8005baa <HAL_DMA_Start_IT+0x1c2>
 8005ba8:	2300      	movs	r3, #0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d036      	beq.n	8005c1c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f023 021e 	bic.w	r2, r3, #30
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f042 0216 	orr.w	r2, r2, #22
 8005bc0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d03e      	beq.n	8005c48 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f042 0208 	orr.w	r2, r2, #8
 8005bd8:	601a      	str	r2, [r3, #0]
 8005bda:	e035      	b.n	8005c48 <HAL_DMA_Start_IT+0x260>
 8005bdc:	40020010 	.word	0x40020010
 8005be0:	40020028 	.word	0x40020028
 8005be4:	40020040 	.word	0x40020040
 8005be8:	40020058 	.word	0x40020058
 8005bec:	40020070 	.word	0x40020070
 8005bf0:	40020088 	.word	0x40020088
 8005bf4:	400200a0 	.word	0x400200a0
 8005bf8:	400200b8 	.word	0x400200b8
 8005bfc:	40020410 	.word	0x40020410
 8005c00:	40020428 	.word	0x40020428
 8005c04:	40020440 	.word	0x40020440
 8005c08:	40020458 	.word	0x40020458
 8005c0c:	40020470 	.word	0x40020470
 8005c10:	40020488 	.word	0x40020488
 8005c14:	400204a0 	.word	0x400204a0
 8005c18:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f023 020e 	bic.w	r2, r3, #14
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f042 020a 	orr.w	r2, r2, #10
 8005c2e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d007      	beq.n	8005c48 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f042 0204 	orr.w	r2, r2, #4
 8005c46:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a83      	ldr	r2, [pc, #524]	; (8005e5c <HAL_DMA_Start_IT+0x474>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d072      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a82      	ldr	r2, [pc, #520]	; (8005e60 <HAL_DMA_Start_IT+0x478>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d06d      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a80      	ldr	r2, [pc, #512]	; (8005e64 <HAL_DMA_Start_IT+0x47c>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d068      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a7f      	ldr	r2, [pc, #508]	; (8005e68 <HAL_DMA_Start_IT+0x480>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d063      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a7d      	ldr	r2, [pc, #500]	; (8005e6c <HAL_DMA_Start_IT+0x484>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d05e      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a7c      	ldr	r2, [pc, #496]	; (8005e70 <HAL_DMA_Start_IT+0x488>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d059      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a7a      	ldr	r2, [pc, #488]	; (8005e74 <HAL_DMA_Start_IT+0x48c>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d054      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a79      	ldr	r2, [pc, #484]	; (8005e78 <HAL_DMA_Start_IT+0x490>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d04f      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a77      	ldr	r2, [pc, #476]	; (8005e7c <HAL_DMA_Start_IT+0x494>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d04a      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a76      	ldr	r2, [pc, #472]	; (8005e80 <HAL_DMA_Start_IT+0x498>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d045      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a74      	ldr	r2, [pc, #464]	; (8005e84 <HAL_DMA_Start_IT+0x49c>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d040      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a73      	ldr	r2, [pc, #460]	; (8005e88 <HAL_DMA_Start_IT+0x4a0>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d03b      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a71      	ldr	r2, [pc, #452]	; (8005e8c <HAL_DMA_Start_IT+0x4a4>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d036      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a70      	ldr	r2, [pc, #448]	; (8005e90 <HAL_DMA_Start_IT+0x4a8>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d031      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a6e      	ldr	r2, [pc, #440]	; (8005e94 <HAL_DMA_Start_IT+0x4ac>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d02c      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a6d      	ldr	r2, [pc, #436]	; (8005e98 <HAL_DMA_Start_IT+0x4b0>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d027      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a6b      	ldr	r2, [pc, #428]	; (8005e9c <HAL_DMA_Start_IT+0x4b4>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d022      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a6a      	ldr	r2, [pc, #424]	; (8005ea0 <HAL_DMA_Start_IT+0x4b8>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d01d      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a68      	ldr	r2, [pc, #416]	; (8005ea4 <HAL_DMA_Start_IT+0x4bc>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d018      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a67      	ldr	r2, [pc, #412]	; (8005ea8 <HAL_DMA_Start_IT+0x4c0>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d013      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a65      	ldr	r2, [pc, #404]	; (8005eac <HAL_DMA_Start_IT+0x4c4>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d00e      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a64      	ldr	r2, [pc, #400]	; (8005eb0 <HAL_DMA_Start_IT+0x4c8>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d009      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a62      	ldr	r2, [pc, #392]	; (8005eb4 <HAL_DMA_Start_IT+0x4cc>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d004      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a61      	ldr	r2, [pc, #388]	; (8005eb8 <HAL_DMA_Start_IT+0x4d0>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d101      	bne.n	8005d3c <HAL_DMA_Start_IT+0x354>
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e000      	b.n	8005d3e <HAL_DMA_Start_IT+0x356>
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d01a      	beq.n	8005d78 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d007      	beq.n	8005d60 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d5e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d007      	beq.n	8005d78 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d76:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a37      	ldr	r2, [pc, #220]	; (8005e5c <HAL_DMA_Start_IT+0x474>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d04a      	beq.n	8005e18 <HAL_DMA_Start_IT+0x430>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a36      	ldr	r2, [pc, #216]	; (8005e60 <HAL_DMA_Start_IT+0x478>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d045      	beq.n	8005e18 <HAL_DMA_Start_IT+0x430>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a34      	ldr	r2, [pc, #208]	; (8005e64 <HAL_DMA_Start_IT+0x47c>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d040      	beq.n	8005e18 <HAL_DMA_Start_IT+0x430>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a33      	ldr	r2, [pc, #204]	; (8005e68 <HAL_DMA_Start_IT+0x480>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d03b      	beq.n	8005e18 <HAL_DMA_Start_IT+0x430>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a31      	ldr	r2, [pc, #196]	; (8005e6c <HAL_DMA_Start_IT+0x484>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d036      	beq.n	8005e18 <HAL_DMA_Start_IT+0x430>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a30      	ldr	r2, [pc, #192]	; (8005e70 <HAL_DMA_Start_IT+0x488>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d031      	beq.n	8005e18 <HAL_DMA_Start_IT+0x430>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a2e      	ldr	r2, [pc, #184]	; (8005e74 <HAL_DMA_Start_IT+0x48c>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d02c      	beq.n	8005e18 <HAL_DMA_Start_IT+0x430>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a2d      	ldr	r2, [pc, #180]	; (8005e78 <HAL_DMA_Start_IT+0x490>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d027      	beq.n	8005e18 <HAL_DMA_Start_IT+0x430>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a2b      	ldr	r2, [pc, #172]	; (8005e7c <HAL_DMA_Start_IT+0x494>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d022      	beq.n	8005e18 <HAL_DMA_Start_IT+0x430>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a2a      	ldr	r2, [pc, #168]	; (8005e80 <HAL_DMA_Start_IT+0x498>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d01d      	beq.n	8005e18 <HAL_DMA_Start_IT+0x430>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a28      	ldr	r2, [pc, #160]	; (8005e84 <HAL_DMA_Start_IT+0x49c>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d018      	beq.n	8005e18 <HAL_DMA_Start_IT+0x430>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a27      	ldr	r2, [pc, #156]	; (8005e88 <HAL_DMA_Start_IT+0x4a0>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d013      	beq.n	8005e18 <HAL_DMA_Start_IT+0x430>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a25      	ldr	r2, [pc, #148]	; (8005e8c <HAL_DMA_Start_IT+0x4a4>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d00e      	beq.n	8005e18 <HAL_DMA_Start_IT+0x430>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a24      	ldr	r2, [pc, #144]	; (8005e90 <HAL_DMA_Start_IT+0x4a8>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d009      	beq.n	8005e18 <HAL_DMA_Start_IT+0x430>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a22      	ldr	r2, [pc, #136]	; (8005e94 <HAL_DMA_Start_IT+0x4ac>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d004      	beq.n	8005e18 <HAL_DMA_Start_IT+0x430>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a21      	ldr	r2, [pc, #132]	; (8005e98 <HAL_DMA_Start_IT+0x4b0>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d108      	bne.n	8005e2a <HAL_DMA_Start_IT+0x442>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f042 0201 	orr.w	r2, r2, #1
 8005e26:	601a      	str	r2, [r3, #0]
 8005e28:	e012      	b.n	8005e50 <HAL_DMA_Start_IT+0x468>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f042 0201 	orr.w	r2, r2, #1
 8005e38:	601a      	str	r2, [r3, #0]
 8005e3a:	e009      	b.n	8005e50 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e42:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005e50:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3718      	adds	r7, #24
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	40020010 	.word	0x40020010
 8005e60:	40020028 	.word	0x40020028
 8005e64:	40020040 	.word	0x40020040
 8005e68:	40020058 	.word	0x40020058
 8005e6c:	40020070 	.word	0x40020070
 8005e70:	40020088 	.word	0x40020088
 8005e74:	400200a0 	.word	0x400200a0
 8005e78:	400200b8 	.word	0x400200b8
 8005e7c:	40020410 	.word	0x40020410
 8005e80:	40020428 	.word	0x40020428
 8005e84:	40020440 	.word	0x40020440
 8005e88:	40020458 	.word	0x40020458
 8005e8c:	40020470 	.word	0x40020470
 8005e90:	40020488 	.word	0x40020488
 8005e94:	400204a0 	.word	0x400204a0
 8005e98:	400204b8 	.word	0x400204b8
 8005e9c:	58025408 	.word	0x58025408
 8005ea0:	5802541c 	.word	0x5802541c
 8005ea4:	58025430 	.word	0x58025430
 8005ea8:	58025444 	.word	0x58025444
 8005eac:	58025458 	.word	0x58025458
 8005eb0:	5802546c 	.word	0x5802546c
 8005eb4:	58025480 	.word	0x58025480
 8005eb8:	58025494 	.word	0x58025494

08005ebc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b08a      	sub	sp, #40	; 0x28
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005ec8:	4b67      	ldr	r3, [pc, #412]	; (8006068 <HAL_DMA_IRQHandler+0x1ac>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a67      	ldr	r2, [pc, #412]	; (800606c <HAL_DMA_IRQHandler+0x1b0>)
 8005ece:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed2:	0a9b      	lsrs	r3, r3, #10
 8005ed4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eda:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ee0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005ee2:	6a3b      	ldr	r3, [r7, #32]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a5f      	ldr	r2, [pc, #380]	; (8006070 <HAL_DMA_IRQHandler+0x1b4>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d04a      	beq.n	8005f8e <HAL_DMA_IRQHandler+0xd2>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a5d      	ldr	r2, [pc, #372]	; (8006074 <HAL_DMA_IRQHandler+0x1b8>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d045      	beq.n	8005f8e <HAL_DMA_IRQHandler+0xd2>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a5c      	ldr	r2, [pc, #368]	; (8006078 <HAL_DMA_IRQHandler+0x1bc>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d040      	beq.n	8005f8e <HAL_DMA_IRQHandler+0xd2>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a5a      	ldr	r2, [pc, #360]	; (800607c <HAL_DMA_IRQHandler+0x1c0>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d03b      	beq.n	8005f8e <HAL_DMA_IRQHandler+0xd2>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a59      	ldr	r2, [pc, #356]	; (8006080 <HAL_DMA_IRQHandler+0x1c4>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d036      	beq.n	8005f8e <HAL_DMA_IRQHandler+0xd2>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a57      	ldr	r2, [pc, #348]	; (8006084 <HAL_DMA_IRQHandler+0x1c8>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d031      	beq.n	8005f8e <HAL_DMA_IRQHandler+0xd2>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a56      	ldr	r2, [pc, #344]	; (8006088 <HAL_DMA_IRQHandler+0x1cc>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d02c      	beq.n	8005f8e <HAL_DMA_IRQHandler+0xd2>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a54      	ldr	r2, [pc, #336]	; (800608c <HAL_DMA_IRQHandler+0x1d0>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d027      	beq.n	8005f8e <HAL_DMA_IRQHandler+0xd2>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a53      	ldr	r2, [pc, #332]	; (8006090 <HAL_DMA_IRQHandler+0x1d4>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d022      	beq.n	8005f8e <HAL_DMA_IRQHandler+0xd2>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a51      	ldr	r2, [pc, #324]	; (8006094 <HAL_DMA_IRQHandler+0x1d8>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d01d      	beq.n	8005f8e <HAL_DMA_IRQHandler+0xd2>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a50      	ldr	r2, [pc, #320]	; (8006098 <HAL_DMA_IRQHandler+0x1dc>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d018      	beq.n	8005f8e <HAL_DMA_IRQHandler+0xd2>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a4e      	ldr	r2, [pc, #312]	; (800609c <HAL_DMA_IRQHandler+0x1e0>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d013      	beq.n	8005f8e <HAL_DMA_IRQHandler+0xd2>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a4d      	ldr	r2, [pc, #308]	; (80060a0 <HAL_DMA_IRQHandler+0x1e4>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d00e      	beq.n	8005f8e <HAL_DMA_IRQHandler+0xd2>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a4b      	ldr	r2, [pc, #300]	; (80060a4 <HAL_DMA_IRQHandler+0x1e8>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d009      	beq.n	8005f8e <HAL_DMA_IRQHandler+0xd2>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a4a      	ldr	r2, [pc, #296]	; (80060a8 <HAL_DMA_IRQHandler+0x1ec>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d004      	beq.n	8005f8e <HAL_DMA_IRQHandler+0xd2>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a48      	ldr	r2, [pc, #288]	; (80060ac <HAL_DMA_IRQHandler+0x1f0>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d101      	bne.n	8005f92 <HAL_DMA_IRQHandler+0xd6>
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e000      	b.n	8005f94 <HAL_DMA_IRQHandler+0xd8>
 8005f92:	2300      	movs	r3, #0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f000 842b 	beq.w	80067f0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f9e:	f003 031f 	and.w	r3, r3, #31
 8005fa2:	2208      	movs	r2, #8
 8005fa4:	409a      	lsls	r2, r3
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	4013      	ands	r3, r2
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f000 80a2 	beq.w	80060f4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a2e      	ldr	r2, [pc, #184]	; (8006070 <HAL_DMA_IRQHandler+0x1b4>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d04a      	beq.n	8006050 <HAL_DMA_IRQHandler+0x194>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a2d      	ldr	r2, [pc, #180]	; (8006074 <HAL_DMA_IRQHandler+0x1b8>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d045      	beq.n	8006050 <HAL_DMA_IRQHandler+0x194>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a2b      	ldr	r2, [pc, #172]	; (8006078 <HAL_DMA_IRQHandler+0x1bc>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d040      	beq.n	8006050 <HAL_DMA_IRQHandler+0x194>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a2a      	ldr	r2, [pc, #168]	; (800607c <HAL_DMA_IRQHandler+0x1c0>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d03b      	beq.n	8006050 <HAL_DMA_IRQHandler+0x194>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a28      	ldr	r2, [pc, #160]	; (8006080 <HAL_DMA_IRQHandler+0x1c4>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d036      	beq.n	8006050 <HAL_DMA_IRQHandler+0x194>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a27      	ldr	r2, [pc, #156]	; (8006084 <HAL_DMA_IRQHandler+0x1c8>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d031      	beq.n	8006050 <HAL_DMA_IRQHandler+0x194>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a25      	ldr	r2, [pc, #148]	; (8006088 <HAL_DMA_IRQHandler+0x1cc>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d02c      	beq.n	8006050 <HAL_DMA_IRQHandler+0x194>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a24      	ldr	r2, [pc, #144]	; (800608c <HAL_DMA_IRQHandler+0x1d0>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d027      	beq.n	8006050 <HAL_DMA_IRQHandler+0x194>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a22      	ldr	r2, [pc, #136]	; (8006090 <HAL_DMA_IRQHandler+0x1d4>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d022      	beq.n	8006050 <HAL_DMA_IRQHandler+0x194>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a21      	ldr	r2, [pc, #132]	; (8006094 <HAL_DMA_IRQHandler+0x1d8>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d01d      	beq.n	8006050 <HAL_DMA_IRQHandler+0x194>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a1f      	ldr	r2, [pc, #124]	; (8006098 <HAL_DMA_IRQHandler+0x1dc>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d018      	beq.n	8006050 <HAL_DMA_IRQHandler+0x194>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a1e      	ldr	r2, [pc, #120]	; (800609c <HAL_DMA_IRQHandler+0x1e0>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d013      	beq.n	8006050 <HAL_DMA_IRQHandler+0x194>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a1c      	ldr	r2, [pc, #112]	; (80060a0 <HAL_DMA_IRQHandler+0x1e4>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d00e      	beq.n	8006050 <HAL_DMA_IRQHandler+0x194>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a1b      	ldr	r2, [pc, #108]	; (80060a4 <HAL_DMA_IRQHandler+0x1e8>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d009      	beq.n	8006050 <HAL_DMA_IRQHandler+0x194>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a19      	ldr	r2, [pc, #100]	; (80060a8 <HAL_DMA_IRQHandler+0x1ec>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d004      	beq.n	8006050 <HAL_DMA_IRQHandler+0x194>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a18      	ldr	r2, [pc, #96]	; (80060ac <HAL_DMA_IRQHandler+0x1f0>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d12f      	bne.n	80060b0 <HAL_DMA_IRQHandler+0x1f4>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0304 	and.w	r3, r3, #4
 800605a:	2b00      	cmp	r3, #0
 800605c:	bf14      	ite	ne
 800605e:	2301      	movne	r3, #1
 8006060:	2300      	moveq	r3, #0
 8006062:	b2db      	uxtb	r3, r3
 8006064:	e02e      	b.n	80060c4 <HAL_DMA_IRQHandler+0x208>
 8006066:	bf00      	nop
 8006068:	24000000 	.word	0x24000000
 800606c:	1b4e81b5 	.word	0x1b4e81b5
 8006070:	40020010 	.word	0x40020010
 8006074:	40020028 	.word	0x40020028
 8006078:	40020040 	.word	0x40020040
 800607c:	40020058 	.word	0x40020058
 8006080:	40020070 	.word	0x40020070
 8006084:	40020088 	.word	0x40020088
 8006088:	400200a0 	.word	0x400200a0
 800608c:	400200b8 	.word	0x400200b8
 8006090:	40020410 	.word	0x40020410
 8006094:	40020428 	.word	0x40020428
 8006098:	40020440 	.word	0x40020440
 800609c:	40020458 	.word	0x40020458
 80060a0:	40020470 	.word	0x40020470
 80060a4:	40020488 	.word	0x40020488
 80060a8:	400204a0 	.word	0x400204a0
 80060ac:	400204b8 	.word	0x400204b8
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0308 	and.w	r3, r3, #8
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	bf14      	ite	ne
 80060be:	2301      	movne	r3, #1
 80060c0:	2300      	moveq	r3, #0
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d015      	beq.n	80060f4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f022 0204 	bic.w	r2, r2, #4
 80060d6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060dc:	f003 031f 	and.w	r3, r3, #31
 80060e0:	2208      	movs	r2, #8
 80060e2:	409a      	lsls	r2, r3
 80060e4:	6a3b      	ldr	r3, [r7, #32]
 80060e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ec:	f043 0201 	orr.w	r2, r3, #1
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060f8:	f003 031f 	and.w	r3, r3, #31
 80060fc:	69ba      	ldr	r2, [r7, #24]
 80060fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006102:	f003 0301 	and.w	r3, r3, #1
 8006106:	2b00      	cmp	r3, #0
 8006108:	d06e      	beq.n	80061e8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a69      	ldr	r2, [pc, #420]	; (80062b4 <HAL_DMA_IRQHandler+0x3f8>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d04a      	beq.n	80061aa <HAL_DMA_IRQHandler+0x2ee>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a67      	ldr	r2, [pc, #412]	; (80062b8 <HAL_DMA_IRQHandler+0x3fc>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d045      	beq.n	80061aa <HAL_DMA_IRQHandler+0x2ee>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a66      	ldr	r2, [pc, #408]	; (80062bc <HAL_DMA_IRQHandler+0x400>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d040      	beq.n	80061aa <HAL_DMA_IRQHandler+0x2ee>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a64      	ldr	r2, [pc, #400]	; (80062c0 <HAL_DMA_IRQHandler+0x404>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d03b      	beq.n	80061aa <HAL_DMA_IRQHandler+0x2ee>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a63      	ldr	r2, [pc, #396]	; (80062c4 <HAL_DMA_IRQHandler+0x408>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d036      	beq.n	80061aa <HAL_DMA_IRQHandler+0x2ee>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a61      	ldr	r2, [pc, #388]	; (80062c8 <HAL_DMA_IRQHandler+0x40c>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d031      	beq.n	80061aa <HAL_DMA_IRQHandler+0x2ee>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a60      	ldr	r2, [pc, #384]	; (80062cc <HAL_DMA_IRQHandler+0x410>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d02c      	beq.n	80061aa <HAL_DMA_IRQHandler+0x2ee>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a5e      	ldr	r2, [pc, #376]	; (80062d0 <HAL_DMA_IRQHandler+0x414>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d027      	beq.n	80061aa <HAL_DMA_IRQHandler+0x2ee>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a5d      	ldr	r2, [pc, #372]	; (80062d4 <HAL_DMA_IRQHandler+0x418>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d022      	beq.n	80061aa <HAL_DMA_IRQHandler+0x2ee>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a5b      	ldr	r2, [pc, #364]	; (80062d8 <HAL_DMA_IRQHandler+0x41c>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d01d      	beq.n	80061aa <HAL_DMA_IRQHandler+0x2ee>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a5a      	ldr	r2, [pc, #360]	; (80062dc <HAL_DMA_IRQHandler+0x420>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d018      	beq.n	80061aa <HAL_DMA_IRQHandler+0x2ee>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a58      	ldr	r2, [pc, #352]	; (80062e0 <HAL_DMA_IRQHandler+0x424>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d013      	beq.n	80061aa <HAL_DMA_IRQHandler+0x2ee>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a57      	ldr	r2, [pc, #348]	; (80062e4 <HAL_DMA_IRQHandler+0x428>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d00e      	beq.n	80061aa <HAL_DMA_IRQHandler+0x2ee>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a55      	ldr	r2, [pc, #340]	; (80062e8 <HAL_DMA_IRQHandler+0x42c>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d009      	beq.n	80061aa <HAL_DMA_IRQHandler+0x2ee>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a54      	ldr	r2, [pc, #336]	; (80062ec <HAL_DMA_IRQHandler+0x430>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d004      	beq.n	80061aa <HAL_DMA_IRQHandler+0x2ee>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a52      	ldr	r2, [pc, #328]	; (80062f0 <HAL_DMA_IRQHandler+0x434>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d10a      	bne.n	80061c0 <HAL_DMA_IRQHandler+0x304>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	695b      	ldr	r3, [r3, #20]
 80061b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	bf14      	ite	ne
 80061b8:	2301      	movne	r3, #1
 80061ba:	2300      	moveq	r3, #0
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	e003      	b.n	80061c8 <HAL_DMA_IRQHandler+0x30c>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2300      	movs	r3, #0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00d      	beq.n	80061e8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061d0:	f003 031f 	and.w	r3, r3, #31
 80061d4:	2201      	movs	r2, #1
 80061d6:	409a      	lsls	r2, r3
 80061d8:	6a3b      	ldr	r3, [r7, #32]
 80061da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061e0:	f043 0202 	orr.w	r2, r3, #2
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ec:	f003 031f 	and.w	r3, r3, #31
 80061f0:	2204      	movs	r2, #4
 80061f2:	409a      	lsls	r2, r3
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	4013      	ands	r3, r2
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f000 808f 	beq.w	800631c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a2c      	ldr	r2, [pc, #176]	; (80062b4 <HAL_DMA_IRQHandler+0x3f8>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d04a      	beq.n	800629e <HAL_DMA_IRQHandler+0x3e2>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a2a      	ldr	r2, [pc, #168]	; (80062b8 <HAL_DMA_IRQHandler+0x3fc>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d045      	beq.n	800629e <HAL_DMA_IRQHandler+0x3e2>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a29      	ldr	r2, [pc, #164]	; (80062bc <HAL_DMA_IRQHandler+0x400>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d040      	beq.n	800629e <HAL_DMA_IRQHandler+0x3e2>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a27      	ldr	r2, [pc, #156]	; (80062c0 <HAL_DMA_IRQHandler+0x404>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d03b      	beq.n	800629e <HAL_DMA_IRQHandler+0x3e2>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a26      	ldr	r2, [pc, #152]	; (80062c4 <HAL_DMA_IRQHandler+0x408>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d036      	beq.n	800629e <HAL_DMA_IRQHandler+0x3e2>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a24      	ldr	r2, [pc, #144]	; (80062c8 <HAL_DMA_IRQHandler+0x40c>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d031      	beq.n	800629e <HAL_DMA_IRQHandler+0x3e2>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a23      	ldr	r2, [pc, #140]	; (80062cc <HAL_DMA_IRQHandler+0x410>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d02c      	beq.n	800629e <HAL_DMA_IRQHandler+0x3e2>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a21      	ldr	r2, [pc, #132]	; (80062d0 <HAL_DMA_IRQHandler+0x414>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d027      	beq.n	800629e <HAL_DMA_IRQHandler+0x3e2>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a20      	ldr	r2, [pc, #128]	; (80062d4 <HAL_DMA_IRQHandler+0x418>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d022      	beq.n	800629e <HAL_DMA_IRQHandler+0x3e2>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a1e      	ldr	r2, [pc, #120]	; (80062d8 <HAL_DMA_IRQHandler+0x41c>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d01d      	beq.n	800629e <HAL_DMA_IRQHandler+0x3e2>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a1d      	ldr	r2, [pc, #116]	; (80062dc <HAL_DMA_IRQHandler+0x420>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d018      	beq.n	800629e <HAL_DMA_IRQHandler+0x3e2>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a1b      	ldr	r2, [pc, #108]	; (80062e0 <HAL_DMA_IRQHandler+0x424>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d013      	beq.n	800629e <HAL_DMA_IRQHandler+0x3e2>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a1a      	ldr	r2, [pc, #104]	; (80062e4 <HAL_DMA_IRQHandler+0x428>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d00e      	beq.n	800629e <HAL_DMA_IRQHandler+0x3e2>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a18      	ldr	r2, [pc, #96]	; (80062e8 <HAL_DMA_IRQHandler+0x42c>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d009      	beq.n	800629e <HAL_DMA_IRQHandler+0x3e2>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a17      	ldr	r2, [pc, #92]	; (80062ec <HAL_DMA_IRQHandler+0x430>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d004      	beq.n	800629e <HAL_DMA_IRQHandler+0x3e2>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a15      	ldr	r2, [pc, #84]	; (80062f0 <HAL_DMA_IRQHandler+0x434>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d12a      	bne.n	80062f4 <HAL_DMA_IRQHandler+0x438>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0302 	and.w	r3, r3, #2
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	bf14      	ite	ne
 80062ac:	2301      	movne	r3, #1
 80062ae:	2300      	moveq	r3, #0
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	e023      	b.n	80062fc <HAL_DMA_IRQHandler+0x440>
 80062b4:	40020010 	.word	0x40020010
 80062b8:	40020028 	.word	0x40020028
 80062bc:	40020040 	.word	0x40020040
 80062c0:	40020058 	.word	0x40020058
 80062c4:	40020070 	.word	0x40020070
 80062c8:	40020088 	.word	0x40020088
 80062cc:	400200a0 	.word	0x400200a0
 80062d0:	400200b8 	.word	0x400200b8
 80062d4:	40020410 	.word	0x40020410
 80062d8:	40020428 	.word	0x40020428
 80062dc:	40020440 	.word	0x40020440
 80062e0:	40020458 	.word	0x40020458
 80062e4:	40020470 	.word	0x40020470
 80062e8:	40020488 	.word	0x40020488
 80062ec:	400204a0 	.word	0x400204a0
 80062f0:	400204b8 	.word	0x400204b8
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2300      	movs	r3, #0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00d      	beq.n	800631c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006304:	f003 031f 	and.w	r3, r3, #31
 8006308:	2204      	movs	r2, #4
 800630a:	409a      	lsls	r2, r3
 800630c:	6a3b      	ldr	r3, [r7, #32]
 800630e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006314:	f043 0204 	orr.w	r2, r3, #4
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006320:	f003 031f 	and.w	r3, r3, #31
 8006324:	2210      	movs	r2, #16
 8006326:	409a      	lsls	r2, r3
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	4013      	ands	r3, r2
 800632c:	2b00      	cmp	r3, #0
 800632e:	f000 80a6 	beq.w	800647e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a85      	ldr	r2, [pc, #532]	; (800654c <HAL_DMA_IRQHandler+0x690>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d04a      	beq.n	80063d2 <HAL_DMA_IRQHandler+0x516>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a83      	ldr	r2, [pc, #524]	; (8006550 <HAL_DMA_IRQHandler+0x694>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d045      	beq.n	80063d2 <HAL_DMA_IRQHandler+0x516>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a82      	ldr	r2, [pc, #520]	; (8006554 <HAL_DMA_IRQHandler+0x698>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d040      	beq.n	80063d2 <HAL_DMA_IRQHandler+0x516>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a80      	ldr	r2, [pc, #512]	; (8006558 <HAL_DMA_IRQHandler+0x69c>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d03b      	beq.n	80063d2 <HAL_DMA_IRQHandler+0x516>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a7f      	ldr	r2, [pc, #508]	; (800655c <HAL_DMA_IRQHandler+0x6a0>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d036      	beq.n	80063d2 <HAL_DMA_IRQHandler+0x516>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a7d      	ldr	r2, [pc, #500]	; (8006560 <HAL_DMA_IRQHandler+0x6a4>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d031      	beq.n	80063d2 <HAL_DMA_IRQHandler+0x516>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a7c      	ldr	r2, [pc, #496]	; (8006564 <HAL_DMA_IRQHandler+0x6a8>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d02c      	beq.n	80063d2 <HAL_DMA_IRQHandler+0x516>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a7a      	ldr	r2, [pc, #488]	; (8006568 <HAL_DMA_IRQHandler+0x6ac>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d027      	beq.n	80063d2 <HAL_DMA_IRQHandler+0x516>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a79      	ldr	r2, [pc, #484]	; (800656c <HAL_DMA_IRQHandler+0x6b0>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d022      	beq.n	80063d2 <HAL_DMA_IRQHandler+0x516>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a77      	ldr	r2, [pc, #476]	; (8006570 <HAL_DMA_IRQHandler+0x6b4>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d01d      	beq.n	80063d2 <HAL_DMA_IRQHandler+0x516>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a76      	ldr	r2, [pc, #472]	; (8006574 <HAL_DMA_IRQHandler+0x6b8>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d018      	beq.n	80063d2 <HAL_DMA_IRQHandler+0x516>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a74      	ldr	r2, [pc, #464]	; (8006578 <HAL_DMA_IRQHandler+0x6bc>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d013      	beq.n	80063d2 <HAL_DMA_IRQHandler+0x516>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a73      	ldr	r2, [pc, #460]	; (800657c <HAL_DMA_IRQHandler+0x6c0>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d00e      	beq.n	80063d2 <HAL_DMA_IRQHandler+0x516>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a71      	ldr	r2, [pc, #452]	; (8006580 <HAL_DMA_IRQHandler+0x6c4>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d009      	beq.n	80063d2 <HAL_DMA_IRQHandler+0x516>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a70      	ldr	r2, [pc, #448]	; (8006584 <HAL_DMA_IRQHandler+0x6c8>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d004      	beq.n	80063d2 <HAL_DMA_IRQHandler+0x516>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a6e      	ldr	r2, [pc, #440]	; (8006588 <HAL_DMA_IRQHandler+0x6cc>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d10a      	bne.n	80063e8 <HAL_DMA_IRQHandler+0x52c>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0308 	and.w	r3, r3, #8
 80063dc:	2b00      	cmp	r3, #0
 80063de:	bf14      	ite	ne
 80063e0:	2301      	movne	r3, #1
 80063e2:	2300      	moveq	r3, #0
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	e009      	b.n	80063fc <HAL_DMA_IRQHandler+0x540>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 0304 	and.w	r3, r3, #4
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	bf14      	ite	ne
 80063f6:	2301      	movne	r3, #1
 80063f8:	2300      	moveq	r3, #0
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d03e      	beq.n	800647e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006404:	f003 031f 	and.w	r3, r3, #31
 8006408:	2210      	movs	r2, #16
 800640a:	409a      	lsls	r2, r3
 800640c:	6a3b      	ldr	r3, [r7, #32]
 800640e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800641a:	2b00      	cmp	r3, #0
 800641c:	d018      	beq.n	8006450 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d108      	bne.n	800643e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006430:	2b00      	cmp	r3, #0
 8006432:	d024      	beq.n	800647e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	4798      	blx	r3
 800643c:	e01f      	b.n	800647e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006442:	2b00      	cmp	r3, #0
 8006444:	d01b      	beq.n	800647e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	4798      	blx	r3
 800644e:	e016      	b.n	800647e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800645a:	2b00      	cmp	r3, #0
 800645c:	d107      	bne.n	800646e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f022 0208 	bic.w	r2, r2, #8
 800646c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006472:	2b00      	cmp	r3, #0
 8006474:	d003      	beq.n	800647e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006482:	f003 031f 	and.w	r3, r3, #31
 8006486:	2220      	movs	r2, #32
 8006488:	409a      	lsls	r2, r3
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	4013      	ands	r3, r2
 800648e:	2b00      	cmp	r3, #0
 8006490:	f000 8110 	beq.w	80066b4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a2c      	ldr	r2, [pc, #176]	; (800654c <HAL_DMA_IRQHandler+0x690>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d04a      	beq.n	8006534 <HAL_DMA_IRQHandler+0x678>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a2b      	ldr	r2, [pc, #172]	; (8006550 <HAL_DMA_IRQHandler+0x694>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d045      	beq.n	8006534 <HAL_DMA_IRQHandler+0x678>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a29      	ldr	r2, [pc, #164]	; (8006554 <HAL_DMA_IRQHandler+0x698>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d040      	beq.n	8006534 <HAL_DMA_IRQHandler+0x678>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a28      	ldr	r2, [pc, #160]	; (8006558 <HAL_DMA_IRQHandler+0x69c>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d03b      	beq.n	8006534 <HAL_DMA_IRQHandler+0x678>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a26      	ldr	r2, [pc, #152]	; (800655c <HAL_DMA_IRQHandler+0x6a0>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d036      	beq.n	8006534 <HAL_DMA_IRQHandler+0x678>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a25      	ldr	r2, [pc, #148]	; (8006560 <HAL_DMA_IRQHandler+0x6a4>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d031      	beq.n	8006534 <HAL_DMA_IRQHandler+0x678>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a23      	ldr	r2, [pc, #140]	; (8006564 <HAL_DMA_IRQHandler+0x6a8>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d02c      	beq.n	8006534 <HAL_DMA_IRQHandler+0x678>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a22      	ldr	r2, [pc, #136]	; (8006568 <HAL_DMA_IRQHandler+0x6ac>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d027      	beq.n	8006534 <HAL_DMA_IRQHandler+0x678>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a20      	ldr	r2, [pc, #128]	; (800656c <HAL_DMA_IRQHandler+0x6b0>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d022      	beq.n	8006534 <HAL_DMA_IRQHandler+0x678>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a1f      	ldr	r2, [pc, #124]	; (8006570 <HAL_DMA_IRQHandler+0x6b4>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d01d      	beq.n	8006534 <HAL_DMA_IRQHandler+0x678>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a1d      	ldr	r2, [pc, #116]	; (8006574 <HAL_DMA_IRQHandler+0x6b8>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d018      	beq.n	8006534 <HAL_DMA_IRQHandler+0x678>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a1c      	ldr	r2, [pc, #112]	; (8006578 <HAL_DMA_IRQHandler+0x6bc>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d013      	beq.n	8006534 <HAL_DMA_IRQHandler+0x678>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a1a      	ldr	r2, [pc, #104]	; (800657c <HAL_DMA_IRQHandler+0x6c0>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d00e      	beq.n	8006534 <HAL_DMA_IRQHandler+0x678>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a19      	ldr	r2, [pc, #100]	; (8006580 <HAL_DMA_IRQHandler+0x6c4>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d009      	beq.n	8006534 <HAL_DMA_IRQHandler+0x678>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a17      	ldr	r2, [pc, #92]	; (8006584 <HAL_DMA_IRQHandler+0x6c8>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d004      	beq.n	8006534 <HAL_DMA_IRQHandler+0x678>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a16      	ldr	r2, [pc, #88]	; (8006588 <HAL_DMA_IRQHandler+0x6cc>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d12b      	bne.n	800658c <HAL_DMA_IRQHandler+0x6d0>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 0310 	and.w	r3, r3, #16
 800653e:	2b00      	cmp	r3, #0
 8006540:	bf14      	ite	ne
 8006542:	2301      	movne	r3, #1
 8006544:	2300      	moveq	r3, #0
 8006546:	b2db      	uxtb	r3, r3
 8006548:	e02a      	b.n	80065a0 <HAL_DMA_IRQHandler+0x6e4>
 800654a:	bf00      	nop
 800654c:	40020010 	.word	0x40020010
 8006550:	40020028 	.word	0x40020028
 8006554:	40020040 	.word	0x40020040
 8006558:	40020058 	.word	0x40020058
 800655c:	40020070 	.word	0x40020070
 8006560:	40020088 	.word	0x40020088
 8006564:	400200a0 	.word	0x400200a0
 8006568:	400200b8 	.word	0x400200b8
 800656c:	40020410 	.word	0x40020410
 8006570:	40020428 	.word	0x40020428
 8006574:	40020440 	.word	0x40020440
 8006578:	40020458 	.word	0x40020458
 800657c:	40020470 	.word	0x40020470
 8006580:	40020488 	.word	0x40020488
 8006584:	400204a0 	.word	0x400204a0
 8006588:	400204b8 	.word	0x400204b8
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 0302 	and.w	r3, r3, #2
 8006596:	2b00      	cmp	r3, #0
 8006598:	bf14      	ite	ne
 800659a:	2301      	movne	r3, #1
 800659c:	2300      	moveq	r3, #0
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f000 8087 	beq.w	80066b4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065aa:	f003 031f 	and.w	r3, r3, #31
 80065ae:	2220      	movs	r2, #32
 80065b0:	409a      	lsls	r2, r3
 80065b2:	6a3b      	ldr	r3, [r7, #32]
 80065b4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	2b04      	cmp	r3, #4
 80065c0:	d139      	bne.n	8006636 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f022 0216 	bic.w	r2, r2, #22
 80065d0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	695a      	ldr	r2, [r3, #20]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065e0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d103      	bne.n	80065f2 <HAL_DMA_IRQHandler+0x736>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d007      	beq.n	8006602 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f022 0208 	bic.w	r2, r2, #8
 8006600:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006606:	f003 031f 	and.w	r3, r3, #31
 800660a:	223f      	movs	r2, #63	; 0x3f
 800660c:	409a      	lsls	r2, r3
 800660e:	6a3b      	ldr	r3, [r7, #32]
 8006610:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006626:	2b00      	cmp	r3, #0
 8006628:	f000 834a 	beq.w	8006cc0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	4798      	blx	r3
          }
          return;
 8006634:	e344      	b.n	8006cc0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006640:	2b00      	cmp	r3, #0
 8006642:	d018      	beq.n	8006676 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d108      	bne.n	8006664 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006656:	2b00      	cmp	r3, #0
 8006658:	d02c      	beq.n	80066b4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	4798      	blx	r3
 8006662:	e027      	b.n	80066b4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006668:	2b00      	cmp	r3, #0
 800666a:	d023      	beq.n	80066b4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	4798      	blx	r3
 8006674:	e01e      	b.n	80066b4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006680:	2b00      	cmp	r3, #0
 8006682:	d10f      	bne.n	80066a4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f022 0210 	bic.w	r2, r2, #16
 8006692:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d003      	beq.n	80066b4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f000 8306 	beq.w	8006cca <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066c2:	f003 0301 	and.w	r3, r3, #1
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	f000 8088 	beq.w	80067dc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2204      	movs	r2, #4
 80066d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a7a      	ldr	r2, [pc, #488]	; (80068c4 <HAL_DMA_IRQHandler+0xa08>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d04a      	beq.n	8006774 <HAL_DMA_IRQHandler+0x8b8>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a79      	ldr	r2, [pc, #484]	; (80068c8 <HAL_DMA_IRQHandler+0xa0c>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d045      	beq.n	8006774 <HAL_DMA_IRQHandler+0x8b8>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a77      	ldr	r2, [pc, #476]	; (80068cc <HAL_DMA_IRQHandler+0xa10>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d040      	beq.n	8006774 <HAL_DMA_IRQHandler+0x8b8>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a76      	ldr	r2, [pc, #472]	; (80068d0 <HAL_DMA_IRQHandler+0xa14>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d03b      	beq.n	8006774 <HAL_DMA_IRQHandler+0x8b8>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a74      	ldr	r2, [pc, #464]	; (80068d4 <HAL_DMA_IRQHandler+0xa18>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d036      	beq.n	8006774 <HAL_DMA_IRQHandler+0x8b8>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a73      	ldr	r2, [pc, #460]	; (80068d8 <HAL_DMA_IRQHandler+0xa1c>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d031      	beq.n	8006774 <HAL_DMA_IRQHandler+0x8b8>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a71      	ldr	r2, [pc, #452]	; (80068dc <HAL_DMA_IRQHandler+0xa20>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d02c      	beq.n	8006774 <HAL_DMA_IRQHandler+0x8b8>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a70      	ldr	r2, [pc, #448]	; (80068e0 <HAL_DMA_IRQHandler+0xa24>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d027      	beq.n	8006774 <HAL_DMA_IRQHandler+0x8b8>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a6e      	ldr	r2, [pc, #440]	; (80068e4 <HAL_DMA_IRQHandler+0xa28>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d022      	beq.n	8006774 <HAL_DMA_IRQHandler+0x8b8>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a6d      	ldr	r2, [pc, #436]	; (80068e8 <HAL_DMA_IRQHandler+0xa2c>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d01d      	beq.n	8006774 <HAL_DMA_IRQHandler+0x8b8>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a6b      	ldr	r2, [pc, #428]	; (80068ec <HAL_DMA_IRQHandler+0xa30>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d018      	beq.n	8006774 <HAL_DMA_IRQHandler+0x8b8>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a6a      	ldr	r2, [pc, #424]	; (80068f0 <HAL_DMA_IRQHandler+0xa34>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d013      	beq.n	8006774 <HAL_DMA_IRQHandler+0x8b8>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a68      	ldr	r2, [pc, #416]	; (80068f4 <HAL_DMA_IRQHandler+0xa38>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d00e      	beq.n	8006774 <HAL_DMA_IRQHandler+0x8b8>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a67      	ldr	r2, [pc, #412]	; (80068f8 <HAL_DMA_IRQHandler+0xa3c>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d009      	beq.n	8006774 <HAL_DMA_IRQHandler+0x8b8>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a65      	ldr	r2, [pc, #404]	; (80068fc <HAL_DMA_IRQHandler+0xa40>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d004      	beq.n	8006774 <HAL_DMA_IRQHandler+0x8b8>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a64      	ldr	r2, [pc, #400]	; (8006900 <HAL_DMA_IRQHandler+0xa44>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d108      	bne.n	8006786 <HAL_DMA_IRQHandler+0x8ca>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f022 0201 	bic.w	r2, r2, #1
 8006782:	601a      	str	r2, [r3, #0]
 8006784:	e007      	b.n	8006796 <HAL_DMA_IRQHandler+0x8da>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f022 0201 	bic.w	r2, r2, #1
 8006794:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	3301      	adds	r3, #1
 800679a:	60fb      	str	r3, [r7, #12]
 800679c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800679e:	429a      	cmp	r2, r3
 80067a0:	d307      	bcc.n	80067b2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0301 	and.w	r3, r3, #1
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1f2      	bne.n	8006796 <HAL_DMA_IRQHandler+0x8da>
 80067b0:	e000      	b.n	80067b4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80067b2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 0301 	and.w	r3, r3, #1
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d004      	beq.n	80067cc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2203      	movs	r2, #3
 80067c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80067ca:	e003      	b.n	80067d4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f000 8272 	beq.w	8006cca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	4798      	blx	r3
 80067ee:	e26c      	b.n	8006cca <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a43      	ldr	r2, [pc, #268]	; (8006904 <HAL_DMA_IRQHandler+0xa48>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d022      	beq.n	8006840 <HAL_DMA_IRQHandler+0x984>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a42      	ldr	r2, [pc, #264]	; (8006908 <HAL_DMA_IRQHandler+0xa4c>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d01d      	beq.n	8006840 <HAL_DMA_IRQHandler+0x984>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a40      	ldr	r2, [pc, #256]	; (800690c <HAL_DMA_IRQHandler+0xa50>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d018      	beq.n	8006840 <HAL_DMA_IRQHandler+0x984>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a3f      	ldr	r2, [pc, #252]	; (8006910 <HAL_DMA_IRQHandler+0xa54>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d013      	beq.n	8006840 <HAL_DMA_IRQHandler+0x984>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a3d      	ldr	r2, [pc, #244]	; (8006914 <HAL_DMA_IRQHandler+0xa58>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d00e      	beq.n	8006840 <HAL_DMA_IRQHandler+0x984>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a3c      	ldr	r2, [pc, #240]	; (8006918 <HAL_DMA_IRQHandler+0xa5c>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d009      	beq.n	8006840 <HAL_DMA_IRQHandler+0x984>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a3a      	ldr	r2, [pc, #232]	; (800691c <HAL_DMA_IRQHandler+0xa60>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d004      	beq.n	8006840 <HAL_DMA_IRQHandler+0x984>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a39      	ldr	r2, [pc, #228]	; (8006920 <HAL_DMA_IRQHandler+0xa64>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d101      	bne.n	8006844 <HAL_DMA_IRQHandler+0x988>
 8006840:	2301      	movs	r3, #1
 8006842:	e000      	b.n	8006846 <HAL_DMA_IRQHandler+0x98a>
 8006844:	2300      	movs	r3, #0
 8006846:	2b00      	cmp	r3, #0
 8006848:	f000 823f 	beq.w	8006cca <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006858:	f003 031f 	and.w	r3, r3, #31
 800685c:	2204      	movs	r2, #4
 800685e:	409a      	lsls	r2, r3
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	4013      	ands	r3, r2
 8006864:	2b00      	cmp	r3, #0
 8006866:	f000 80cd 	beq.w	8006a04 <HAL_DMA_IRQHandler+0xb48>
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	f003 0304 	and.w	r3, r3, #4
 8006870:	2b00      	cmp	r3, #0
 8006872:	f000 80c7 	beq.w	8006a04 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800687a:	f003 031f 	and.w	r3, r3, #31
 800687e:	2204      	movs	r2, #4
 8006880:	409a      	lsls	r2, r3
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800688c:	2b00      	cmp	r3, #0
 800688e:	d049      	beq.n	8006924 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d109      	bne.n	80068ae <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f000 8210 	beq.w	8006cc4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068ac:	e20a      	b.n	8006cc4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f000 8206 	beq.w	8006cc4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068c0:	e200      	b.n	8006cc4 <HAL_DMA_IRQHandler+0xe08>
 80068c2:	bf00      	nop
 80068c4:	40020010 	.word	0x40020010
 80068c8:	40020028 	.word	0x40020028
 80068cc:	40020040 	.word	0x40020040
 80068d0:	40020058 	.word	0x40020058
 80068d4:	40020070 	.word	0x40020070
 80068d8:	40020088 	.word	0x40020088
 80068dc:	400200a0 	.word	0x400200a0
 80068e0:	400200b8 	.word	0x400200b8
 80068e4:	40020410 	.word	0x40020410
 80068e8:	40020428 	.word	0x40020428
 80068ec:	40020440 	.word	0x40020440
 80068f0:	40020458 	.word	0x40020458
 80068f4:	40020470 	.word	0x40020470
 80068f8:	40020488 	.word	0x40020488
 80068fc:	400204a0 	.word	0x400204a0
 8006900:	400204b8 	.word	0x400204b8
 8006904:	58025408 	.word	0x58025408
 8006908:	5802541c 	.word	0x5802541c
 800690c:	58025430 	.word	0x58025430
 8006910:	58025444 	.word	0x58025444
 8006914:	58025458 	.word	0x58025458
 8006918:	5802546c 	.word	0x5802546c
 800691c:	58025480 	.word	0x58025480
 8006920:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	f003 0320 	and.w	r3, r3, #32
 800692a:	2b00      	cmp	r3, #0
 800692c:	d160      	bne.n	80069f0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a7f      	ldr	r2, [pc, #508]	; (8006b30 <HAL_DMA_IRQHandler+0xc74>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d04a      	beq.n	80069ce <HAL_DMA_IRQHandler+0xb12>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a7d      	ldr	r2, [pc, #500]	; (8006b34 <HAL_DMA_IRQHandler+0xc78>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d045      	beq.n	80069ce <HAL_DMA_IRQHandler+0xb12>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a7c      	ldr	r2, [pc, #496]	; (8006b38 <HAL_DMA_IRQHandler+0xc7c>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d040      	beq.n	80069ce <HAL_DMA_IRQHandler+0xb12>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a7a      	ldr	r2, [pc, #488]	; (8006b3c <HAL_DMA_IRQHandler+0xc80>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d03b      	beq.n	80069ce <HAL_DMA_IRQHandler+0xb12>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a79      	ldr	r2, [pc, #484]	; (8006b40 <HAL_DMA_IRQHandler+0xc84>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d036      	beq.n	80069ce <HAL_DMA_IRQHandler+0xb12>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a77      	ldr	r2, [pc, #476]	; (8006b44 <HAL_DMA_IRQHandler+0xc88>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d031      	beq.n	80069ce <HAL_DMA_IRQHandler+0xb12>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a76      	ldr	r2, [pc, #472]	; (8006b48 <HAL_DMA_IRQHandler+0xc8c>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d02c      	beq.n	80069ce <HAL_DMA_IRQHandler+0xb12>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a74      	ldr	r2, [pc, #464]	; (8006b4c <HAL_DMA_IRQHandler+0xc90>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d027      	beq.n	80069ce <HAL_DMA_IRQHandler+0xb12>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a73      	ldr	r2, [pc, #460]	; (8006b50 <HAL_DMA_IRQHandler+0xc94>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d022      	beq.n	80069ce <HAL_DMA_IRQHandler+0xb12>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a71      	ldr	r2, [pc, #452]	; (8006b54 <HAL_DMA_IRQHandler+0xc98>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d01d      	beq.n	80069ce <HAL_DMA_IRQHandler+0xb12>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a70      	ldr	r2, [pc, #448]	; (8006b58 <HAL_DMA_IRQHandler+0xc9c>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d018      	beq.n	80069ce <HAL_DMA_IRQHandler+0xb12>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a6e      	ldr	r2, [pc, #440]	; (8006b5c <HAL_DMA_IRQHandler+0xca0>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d013      	beq.n	80069ce <HAL_DMA_IRQHandler+0xb12>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a6d      	ldr	r2, [pc, #436]	; (8006b60 <HAL_DMA_IRQHandler+0xca4>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d00e      	beq.n	80069ce <HAL_DMA_IRQHandler+0xb12>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a6b      	ldr	r2, [pc, #428]	; (8006b64 <HAL_DMA_IRQHandler+0xca8>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d009      	beq.n	80069ce <HAL_DMA_IRQHandler+0xb12>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a6a      	ldr	r2, [pc, #424]	; (8006b68 <HAL_DMA_IRQHandler+0xcac>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d004      	beq.n	80069ce <HAL_DMA_IRQHandler+0xb12>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a68      	ldr	r2, [pc, #416]	; (8006b6c <HAL_DMA_IRQHandler+0xcb0>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d108      	bne.n	80069e0 <HAL_DMA_IRQHandler+0xb24>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f022 0208 	bic.w	r2, r2, #8
 80069dc:	601a      	str	r2, [r3, #0]
 80069de:	e007      	b.n	80069f0 <HAL_DMA_IRQHandler+0xb34>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f022 0204 	bic.w	r2, r2, #4
 80069ee:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f000 8165 	beq.w	8006cc4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a02:	e15f      	b.n	8006cc4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a08:	f003 031f 	and.w	r3, r3, #31
 8006a0c:	2202      	movs	r2, #2
 8006a0e:	409a      	lsls	r2, r3
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	4013      	ands	r3, r2
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f000 80c5 	beq.w	8006ba4 <HAL_DMA_IRQHandler+0xce8>
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	f003 0302 	and.w	r3, r3, #2
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	f000 80bf 	beq.w	8006ba4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a2a:	f003 031f 	and.w	r3, r3, #31
 8006a2e:	2202      	movs	r2, #2
 8006a30:	409a      	lsls	r2, r3
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d018      	beq.n	8006a72 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d109      	bne.n	8006a5e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	f000 813a 	beq.w	8006cc8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a5c:	e134      	b.n	8006cc8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f000 8130 	beq.w	8006cc8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a70:	e12a      	b.n	8006cc8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	f003 0320 	and.w	r3, r3, #32
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f040 8089 	bne.w	8006b90 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a2b      	ldr	r2, [pc, #172]	; (8006b30 <HAL_DMA_IRQHandler+0xc74>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d04a      	beq.n	8006b1e <HAL_DMA_IRQHandler+0xc62>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a29      	ldr	r2, [pc, #164]	; (8006b34 <HAL_DMA_IRQHandler+0xc78>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d045      	beq.n	8006b1e <HAL_DMA_IRQHandler+0xc62>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a28      	ldr	r2, [pc, #160]	; (8006b38 <HAL_DMA_IRQHandler+0xc7c>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d040      	beq.n	8006b1e <HAL_DMA_IRQHandler+0xc62>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a26      	ldr	r2, [pc, #152]	; (8006b3c <HAL_DMA_IRQHandler+0xc80>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d03b      	beq.n	8006b1e <HAL_DMA_IRQHandler+0xc62>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a25      	ldr	r2, [pc, #148]	; (8006b40 <HAL_DMA_IRQHandler+0xc84>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d036      	beq.n	8006b1e <HAL_DMA_IRQHandler+0xc62>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a23      	ldr	r2, [pc, #140]	; (8006b44 <HAL_DMA_IRQHandler+0xc88>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d031      	beq.n	8006b1e <HAL_DMA_IRQHandler+0xc62>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a22      	ldr	r2, [pc, #136]	; (8006b48 <HAL_DMA_IRQHandler+0xc8c>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d02c      	beq.n	8006b1e <HAL_DMA_IRQHandler+0xc62>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a20      	ldr	r2, [pc, #128]	; (8006b4c <HAL_DMA_IRQHandler+0xc90>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d027      	beq.n	8006b1e <HAL_DMA_IRQHandler+0xc62>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a1f      	ldr	r2, [pc, #124]	; (8006b50 <HAL_DMA_IRQHandler+0xc94>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d022      	beq.n	8006b1e <HAL_DMA_IRQHandler+0xc62>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a1d      	ldr	r2, [pc, #116]	; (8006b54 <HAL_DMA_IRQHandler+0xc98>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d01d      	beq.n	8006b1e <HAL_DMA_IRQHandler+0xc62>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a1c      	ldr	r2, [pc, #112]	; (8006b58 <HAL_DMA_IRQHandler+0xc9c>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d018      	beq.n	8006b1e <HAL_DMA_IRQHandler+0xc62>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a1a      	ldr	r2, [pc, #104]	; (8006b5c <HAL_DMA_IRQHandler+0xca0>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d013      	beq.n	8006b1e <HAL_DMA_IRQHandler+0xc62>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a19      	ldr	r2, [pc, #100]	; (8006b60 <HAL_DMA_IRQHandler+0xca4>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d00e      	beq.n	8006b1e <HAL_DMA_IRQHandler+0xc62>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a17      	ldr	r2, [pc, #92]	; (8006b64 <HAL_DMA_IRQHandler+0xca8>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d009      	beq.n	8006b1e <HAL_DMA_IRQHandler+0xc62>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a16      	ldr	r2, [pc, #88]	; (8006b68 <HAL_DMA_IRQHandler+0xcac>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d004      	beq.n	8006b1e <HAL_DMA_IRQHandler+0xc62>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a14      	ldr	r2, [pc, #80]	; (8006b6c <HAL_DMA_IRQHandler+0xcb0>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d128      	bne.n	8006b70 <HAL_DMA_IRQHandler+0xcb4>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f022 0214 	bic.w	r2, r2, #20
 8006b2c:	601a      	str	r2, [r3, #0]
 8006b2e:	e027      	b.n	8006b80 <HAL_DMA_IRQHandler+0xcc4>
 8006b30:	40020010 	.word	0x40020010
 8006b34:	40020028 	.word	0x40020028
 8006b38:	40020040 	.word	0x40020040
 8006b3c:	40020058 	.word	0x40020058
 8006b40:	40020070 	.word	0x40020070
 8006b44:	40020088 	.word	0x40020088
 8006b48:	400200a0 	.word	0x400200a0
 8006b4c:	400200b8 	.word	0x400200b8
 8006b50:	40020410 	.word	0x40020410
 8006b54:	40020428 	.word	0x40020428
 8006b58:	40020440 	.word	0x40020440
 8006b5c:	40020458 	.word	0x40020458
 8006b60:	40020470 	.word	0x40020470
 8006b64:	40020488 	.word	0x40020488
 8006b68:	400204a0 	.word	0x400204a0
 8006b6c:	400204b8 	.word	0x400204b8
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f022 020a 	bic.w	r2, r2, #10
 8006b7e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	f000 8097 	beq.w	8006cc8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ba2:	e091      	b.n	8006cc8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ba8:	f003 031f 	and.w	r3, r3, #31
 8006bac:	2208      	movs	r2, #8
 8006bae:	409a      	lsls	r2, r3
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f000 8088 	beq.w	8006cca <HAL_DMA_IRQHandler+0xe0e>
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	f003 0308 	and.w	r3, r3, #8
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f000 8082 	beq.w	8006cca <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a41      	ldr	r2, [pc, #260]	; (8006cd0 <HAL_DMA_IRQHandler+0xe14>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d04a      	beq.n	8006c66 <HAL_DMA_IRQHandler+0xdaa>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a3f      	ldr	r2, [pc, #252]	; (8006cd4 <HAL_DMA_IRQHandler+0xe18>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d045      	beq.n	8006c66 <HAL_DMA_IRQHandler+0xdaa>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a3e      	ldr	r2, [pc, #248]	; (8006cd8 <HAL_DMA_IRQHandler+0xe1c>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d040      	beq.n	8006c66 <HAL_DMA_IRQHandler+0xdaa>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a3c      	ldr	r2, [pc, #240]	; (8006cdc <HAL_DMA_IRQHandler+0xe20>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d03b      	beq.n	8006c66 <HAL_DMA_IRQHandler+0xdaa>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a3b      	ldr	r2, [pc, #236]	; (8006ce0 <HAL_DMA_IRQHandler+0xe24>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d036      	beq.n	8006c66 <HAL_DMA_IRQHandler+0xdaa>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a39      	ldr	r2, [pc, #228]	; (8006ce4 <HAL_DMA_IRQHandler+0xe28>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d031      	beq.n	8006c66 <HAL_DMA_IRQHandler+0xdaa>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a38      	ldr	r2, [pc, #224]	; (8006ce8 <HAL_DMA_IRQHandler+0xe2c>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d02c      	beq.n	8006c66 <HAL_DMA_IRQHandler+0xdaa>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a36      	ldr	r2, [pc, #216]	; (8006cec <HAL_DMA_IRQHandler+0xe30>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d027      	beq.n	8006c66 <HAL_DMA_IRQHandler+0xdaa>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a35      	ldr	r2, [pc, #212]	; (8006cf0 <HAL_DMA_IRQHandler+0xe34>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d022      	beq.n	8006c66 <HAL_DMA_IRQHandler+0xdaa>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a33      	ldr	r2, [pc, #204]	; (8006cf4 <HAL_DMA_IRQHandler+0xe38>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d01d      	beq.n	8006c66 <HAL_DMA_IRQHandler+0xdaa>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a32      	ldr	r2, [pc, #200]	; (8006cf8 <HAL_DMA_IRQHandler+0xe3c>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d018      	beq.n	8006c66 <HAL_DMA_IRQHandler+0xdaa>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a30      	ldr	r2, [pc, #192]	; (8006cfc <HAL_DMA_IRQHandler+0xe40>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d013      	beq.n	8006c66 <HAL_DMA_IRQHandler+0xdaa>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a2f      	ldr	r2, [pc, #188]	; (8006d00 <HAL_DMA_IRQHandler+0xe44>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d00e      	beq.n	8006c66 <HAL_DMA_IRQHandler+0xdaa>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a2d      	ldr	r2, [pc, #180]	; (8006d04 <HAL_DMA_IRQHandler+0xe48>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d009      	beq.n	8006c66 <HAL_DMA_IRQHandler+0xdaa>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a2c      	ldr	r2, [pc, #176]	; (8006d08 <HAL_DMA_IRQHandler+0xe4c>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d004      	beq.n	8006c66 <HAL_DMA_IRQHandler+0xdaa>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a2a      	ldr	r2, [pc, #168]	; (8006d0c <HAL_DMA_IRQHandler+0xe50>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d108      	bne.n	8006c78 <HAL_DMA_IRQHandler+0xdbc>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f022 021c 	bic.w	r2, r2, #28
 8006c74:	601a      	str	r2, [r3, #0]
 8006c76:	e007      	b.n	8006c88 <HAL_DMA_IRQHandler+0xdcc>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f022 020e 	bic.w	r2, r2, #14
 8006c86:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c8c:	f003 031f 	and.w	r3, r3, #31
 8006c90:	2201      	movs	r2, #1
 8006c92:	409a      	lsls	r2, r3
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d009      	beq.n	8006cca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	4798      	blx	r3
 8006cbe:	e004      	b.n	8006cca <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006cc0:	bf00      	nop
 8006cc2:	e002      	b.n	8006cca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cc4:	bf00      	nop
 8006cc6:	e000      	b.n	8006cca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cc8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006cca:	3728      	adds	r7, #40	; 0x28
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	40020010 	.word	0x40020010
 8006cd4:	40020028 	.word	0x40020028
 8006cd8:	40020040 	.word	0x40020040
 8006cdc:	40020058 	.word	0x40020058
 8006ce0:	40020070 	.word	0x40020070
 8006ce4:	40020088 	.word	0x40020088
 8006ce8:	400200a0 	.word	0x400200a0
 8006cec:	400200b8 	.word	0x400200b8
 8006cf0:	40020410 	.word	0x40020410
 8006cf4:	40020428 	.word	0x40020428
 8006cf8:	40020440 	.word	0x40020440
 8006cfc:	40020458 	.word	0x40020458
 8006d00:	40020470 	.word	0x40020470
 8006d04:	40020488 	.word	0x40020488
 8006d08:	400204a0 	.word	0x400204a0
 8006d0c:	400204b8 	.word	0x400204b8

08006d10 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b087      	sub	sp, #28
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	607a      	str	r2, [r7, #4]
 8006d1c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d22:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d28:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a7f      	ldr	r2, [pc, #508]	; (8006f2c <DMA_SetConfig+0x21c>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d072      	beq.n	8006e1a <DMA_SetConfig+0x10a>
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a7d      	ldr	r2, [pc, #500]	; (8006f30 <DMA_SetConfig+0x220>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d06d      	beq.n	8006e1a <DMA_SetConfig+0x10a>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a7c      	ldr	r2, [pc, #496]	; (8006f34 <DMA_SetConfig+0x224>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d068      	beq.n	8006e1a <DMA_SetConfig+0x10a>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a7a      	ldr	r2, [pc, #488]	; (8006f38 <DMA_SetConfig+0x228>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d063      	beq.n	8006e1a <DMA_SetConfig+0x10a>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a79      	ldr	r2, [pc, #484]	; (8006f3c <DMA_SetConfig+0x22c>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d05e      	beq.n	8006e1a <DMA_SetConfig+0x10a>
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a77      	ldr	r2, [pc, #476]	; (8006f40 <DMA_SetConfig+0x230>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d059      	beq.n	8006e1a <DMA_SetConfig+0x10a>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a76      	ldr	r2, [pc, #472]	; (8006f44 <DMA_SetConfig+0x234>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d054      	beq.n	8006e1a <DMA_SetConfig+0x10a>
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a74      	ldr	r2, [pc, #464]	; (8006f48 <DMA_SetConfig+0x238>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d04f      	beq.n	8006e1a <DMA_SetConfig+0x10a>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a73      	ldr	r2, [pc, #460]	; (8006f4c <DMA_SetConfig+0x23c>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d04a      	beq.n	8006e1a <DMA_SetConfig+0x10a>
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a71      	ldr	r2, [pc, #452]	; (8006f50 <DMA_SetConfig+0x240>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d045      	beq.n	8006e1a <DMA_SetConfig+0x10a>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a70      	ldr	r2, [pc, #448]	; (8006f54 <DMA_SetConfig+0x244>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d040      	beq.n	8006e1a <DMA_SetConfig+0x10a>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a6e      	ldr	r2, [pc, #440]	; (8006f58 <DMA_SetConfig+0x248>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d03b      	beq.n	8006e1a <DMA_SetConfig+0x10a>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a6d      	ldr	r2, [pc, #436]	; (8006f5c <DMA_SetConfig+0x24c>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d036      	beq.n	8006e1a <DMA_SetConfig+0x10a>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a6b      	ldr	r2, [pc, #428]	; (8006f60 <DMA_SetConfig+0x250>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d031      	beq.n	8006e1a <DMA_SetConfig+0x10a>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a6a      	ldr	r2, [pc, #424]	; (8006f64 <DMA_SetConfig+0x254>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d02c      	beq.n	8006e1a <DMA_SetConfig+0x10a>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a68      	ldr	r2, [pc, #416]	; (8006f68 <DMA_SetConfig+0x258>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d027      	beq.n	8006e1a <DMA_SetConfig+0x10a>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a67      	ldr	r2, [pc, #412]	; (8006f6c <DMA_SetConfig+0x25c>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d022      	beq.n	8006e1a <DMA_SetConfig+0x10a>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a65      	ldr	r2, [pc, #404]	; (8006f70 <DMA_SetConfig+0x260>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d01d      	beq.n	8006e1a <DMA_SetConfig+0x10a>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a64      	ldr	r2, [pc, #400]	; (8006f74 <DMA_SetConfig+0x264>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d018      	beq.n	8006e1a <DMA_SetConfig+0x10a>
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a62      	ldr	r2, [pc, #392]	; (8006f78 <DMA_SetConfig+0x268>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d013      	beq.n	8006e1a <DMA_SetConfig+0x10a>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a61      	ldr	r2, [pc, #388]	; (8006f7c <DMA_SetConfig+0x26c>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d00e      	beq.n	8006e1a <DMA_SetConfig+0x10a>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a5f      	ldr	r2, [pc, #380]	; (8006f80 <DMA_SetConfig+0x270>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d009      	beq.n	8006e1a <DMA_SetConfig+0x10a>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a5e      	ldr	r2, [pc, #376]	; (8006f84 <DMA_SetConfig+0x274>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d004      	beq.n	8006e1a <DMA_SetConfig+0x10a>
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a5c      	ldr	r2, [pc, #368]	; (8006f88 <DMA_SetConfig+0x278>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d101      	bne.n	8006e1e <DMA_SetConfig+0x10e>
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e000      	b.n	8006e20 <DMA_SetConfig+0x110>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00d      	beq.n	8006e40 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006e2c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d004      	beq.n	8006e40 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006e3e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a39      	ldr	r2, [pc, #228]	; (8006f2c <DMA_SetConfig+0x21c>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d04a      	beq.n	8006ee0 <DMA_SetConfig+0x1d0>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a38      	ldr	r2, [pc, #224]	; (8006f30 <DMA_SetConfig+0x220>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d045      	beq.n	8006ee0 <DMA_SetConfig+0x1d0>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a36      	ldr	r2, [pc, #216]	; (8006f34 <DMA_SetConfig+0x224>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d040      	beq.n	8006ee0 <DMA_SetConfig+0x1d0>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a35      	ldr	r2, [pc, #212]	; (8006f38 <DMA_SetConfig+0x228>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d03b      	beq.n	8006ee0 <DMA_SetConfig+0x1d0>
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a33      	ldr	r2, [pc, #204]	; (8006f3c <DMA_SetConfig+0x22c>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d036      	beq.n	8006ee0 <DMA_SetConfig+0x1d0>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a32      	ldr	r2, [pc, #200]	; (8006f40 <DMA_SetConfig+0x230>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d031      	beq.n	8006ee0 <DMA_SetConfig+0x1d0>
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a30      	ldr	r2, [pc, #192]	; (8006f44 <DMA_SetConfig+0x234>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d02c      	beq.n	8006ee0 <DMA_SetConfig+0x1d0>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a2f      	ldr	r2, [pc, #188]	; (8006f48 <DMA_SetConfig+0x238>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d027      	beq.n	8006ee0 <DMA_SetConfig+0x1d0>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a2d      	ldr	r2, [pc, #180]	; (8006f4c <DMA_SetConfig+0x23c>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d022      	beq.n	8006ee0 <DMA_SetConfig+0x1d0>
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a2c      	ldr	r2, [pc, #176]	; (8006f50 <DMA_SetConfig+0x240>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d01d      	beq.n	8006ee0 <DMA_SetConfig+0x1d0>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a2a      	ldr	r2, [pc, #168]	; (8006f54 <DMA_SetConfig+0x244>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d018      	beq.n	8006ee0 <DMA_SetConfig+0x1d0>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a29      	ldr	r2, [pc, #164]	; (8006f58 <DMA_SetConfig+0x248>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d013      	beq.n	8006ee0 <DMA_SetConfig+0x1d0>
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a27      	ldr	r2, [pc, #156]	; (8006f5c <DMA_SetConfig+0x24c>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d00e      	beq.n	8006ee0 <DMA_SetConfig+0x1d0>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a26      	ldr	r2, [pc, #152]	; (8006f60 <DMA_SetConfig+0x250>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d009      	beq.n	8006ee0 <DMA_SetConfig+0x1d0>
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a24      	ldr	r2, [pc, #144]	; (8006f64 <DMA_SetConfig+0x254>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d004      	beq.n	8006ee0 <DMA_SetConfig+0x1d0>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a23      	ldr	r2, [pc, #140]	; (8006f68 <DMA_SetConfig+0x258>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d101      	bne.n	8006ee4 <DMA_SetConfig+0x1d4>
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e000      	b.n	8006ee6 <DMA_SetConfig+0x1d6>
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d059      	beq.n	8006f9e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eee:	f003 031f 	and.w	r3, r3, #31
 8006ef2:	223f      	movs	r2, #63	; 0x3f
 8006ef4:	409a      	lsls	r2, r3
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006f08:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	683a      	ldr	r2, [r7, #0]
 8006f10:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	2b40      	cmp	r3, #64	; 0x40
 8006f18:	d138      	bne.n	8006f8c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68ba      	ldr	r2, [r7, #8]
 8006f28:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006f2a:	e086      	b.n	800703a <DMA_SetConfig+0x32a>
 8006f2c:	40020010 	.word	0x40020010
 8006f30:	40020028 	.word	0x40020028
 8006f34:	40020040 	.word	0x40020040
 8006f38:	40020058 	.word	0x40020058
 8006f3c:	40020070 	.word	0x40020070
 8006f40:	40020088 	.word	0x40020088
 8006f44:	400200a0 	.word	0x400200a0
 8006f48:	400200b8 	.word	0x400200b8
 8006f4c:	40020410 	.word	0x40020410
 8006f50:	40020428 	.word	0x40020428
 8006f54:	40020440 	.word	0x40020440
 8006f58:	40020458 	.word	0x40020458
 8006f5c:	40020470 	.word	0x40020470
 8006f60:	40020488 	.word	0x40020488
 8006f64:	400204a0 	.word	0x400204a0
 8006f68:	400204b8 	.word	0x400204b8
 8006f6c:	58025408 	.word	0x58025408
 8006f70:	5802541c 	.word	0x5802541c
 8006f74:	58025430 	.word	0x58025430
 8006f78:	58025444 	.word	0x58025444
 8006f7c:	58025458 	.word	0x58025458
 8006f80:	5802546c 	.word	0x5802546c
 8006f84:	58025480 	.word	0x58025480
 8006f88:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	68ba      	ldr	r2, [r7, #8]
 8006f92:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	60da      	str	r2, [r3, #12]
}
 8006f9c:	e04d      	b.n	800703a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a29      	ldr	r2, [pc, #164]	; (8007048 <DMA_SetConfig+0x338>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d022      	beq.n	8006fee <DMA_SetConfig+0x2de>
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a27      	ldr	r2, [pc, #156]	; (800704c <DMA_SetConfig+0x33c>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d01d      	beq.n	8006fee <DMA_SetConfig+0x2de>
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a26      	ldr	r2, [pc, #152]	; (8007050 <DMA_SetConfig+0x340>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d018      	beq.n	8006fee <DMA_SetConfig+0x2de>
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a24      	ldr	r2, [pc, #144]	; (8007054 <DMA_SetConfig+0x344>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d013      	beq.n	8006fee <DMA_SetConfig+0x2de>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a23      	ldr	r2, [pc, #140]	; (8007058 <DMA_SetConfig+0x348>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d00e      	beq.n	8006fee <DMA_SetConfig+0x2de>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a21      	ldr	r2, [pc, #132]	; (800705c <DMA_SetConfig+0x34c>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d009      	beq.n	8006fee <DMA_SetConfig+0x2de>
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a20      	ldr	r2, [pc, #128]	; (8007060 <DMA_SetConfig+0x350>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d004      	beq.n	8006fee <DMA_SetConfig+0x2de>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a1e      	ldr	r2, [pc, #120]	; (8007064 <DMA_SetConfig+0x354>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d101      	bne.n	8006ff2 <DMA_SetConfig+0x2e2>
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e000      	b.n	8006ff4 <DMA_SetConfig+0x2e4>
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d020      	beq.n	800703a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ffc:	f003 031f 	and.w	r3, r3, #31
 8007000:	2201      	movs	r2, #1
 8007002:	409a      	lsls	r2, r3
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	683a      	ldr	r2, [r7, #0]
 800700e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	2b40      	cmp	r3, #64	; 0x40
 8007016:	d108      	bne.n	800702a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68ba      	ldr	r2, [r7, #8]
 8007026:	60da      	str	r2, [r3, #12]
}
 8007028:	e007      	b.n	800703a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	60da      	str	r2, [r3, #12]
}
 800703a:	bf00      	nop
 800703c:	371c      	adds	r7, #28
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	58025408 	.word	0x58025408
 800704c:	5802541c 	.word	0x5802541c
 8007050:	58025430 	.word	0x58025430
 8007054:	58025444 	.word	0x58025444
 8007058:	58025458 	.word	0x58025458
 800705c:	5802546c 	.word	0x5802546c
 8007060:	58025480 	.word	0x58025480
 8007064:	58025494 	.word	0x58025494

08007068 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a42      	ldr	r2, [pc, #264]	; (8007180 <DMA_CalcBaseAndBitshift+0x118>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d04a      	beq.n	8007110 <DMA_CalcBaseAndBitshift+0xa8>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a41      	ldr	r2, [pc, #260]	; (8007184 <DMA_CalcBaseAndBitshift+0x11c>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d045      	beq.n	8007110 <DMA_CalcBaseAndBitshift+0xa8>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a3f      	ldr	r2, [pc, #252]	; (8007188 <DMA_CalcBaseAndBitshift+0x120>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d040      	beq.n	8007110 <DMA_CalcBaseAndBitshift+0xa8>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a3e      	ldr	r2, [pc, #248]	; (800718c <DMA_CalcBaseAndBitshift+0x124>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d03b      	beq.n	8007110 <DMA_CalcBaseAndBitshift+0xa8>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a3c      	ldr	r2, [pc, #240]	; (8007190 <DMA_CalcBaseAndBitshift+0x128>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d036      	beq.n	8007110 <DMA_CalcBaseAndBitshift+0xa8>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a3b      	ldr	r2, [pc, #236]	; (8007194 <DMA_CalcBaseAndBitshift+0x12c>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d031      	beq.n	8007110 <DMA_CalcBaseAndBitshift+0xa8>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a39      	ldr	r2, [pc, #228]	; (8007198 <DMA_CalcBaseAndBitshift+0x130>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d02c      	beq.n	8007110 <DMA_CalcBaseAndBitshift+0xa8>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a38      	ldr	r2, [pc, #224]	; (800719c <DMA_CalcBaseAndBitshift+0x134>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d027      	beq.n	8007110 <DMA_CalcBaseAndBitshift+0xa8>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a36      	ldr	r2, [pc, #216]	; (80071a0 <DMA_CalcBaseAndBitshift+0x138>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d022      	beq.n	8007110 <DMA_CalcBaseAndBitshift+0xa8>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a35      	ldr	r2, [pc, #212]	; (80071a4 <DMA_CalcBaseAndBitshift+0x13c>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d01d      	beq.n	8007110 <DMA_CalcBaseAndBitshift+0xa8>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a33      	ldr	r2, [pc, #204]	; (80071a8 <DMA_CalcBaseAndBitshift+0x140>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d018      	beq.n	8007110 <DMA_CalcBaseAndBitshift+0xa8>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a32      	ldr	r2, [pc, #200]	; (80071ac <DMA_CalcBaseAndBitshift+0x144>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d013      	beq.n	8007110 <DMA_CalcBaseAndBitshift+0xa8>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a30      	ldr	r2, [pc, #192]	; (80071b0 <DMA_CalcBaseAndBitshift+0x148>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d00e      	beq.n	8007110 <DMA_CalcBaseAndBitshift+0xa8>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a2f      	ldr	r2, [pc, #188]	; (80071b4 <DMA_CalcBaseAndBitshift+0x14c>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d009      	beq.n	8007110 <DMA_CalcBaseAndBitshift+0xa8>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a2d      	ldr	r2, [pc, #180]	; (80071b8 <DMA_CalcBaseAndBitshift+0x150>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d004      	beq.n	8007110 <DMA_CalcBaseAndBitshift+0xa8>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a2c      	ldr	r2, [pc, #176]	; (80071bc <DMA_CalcBaseAndBitshift+0x154>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d101      	bne.n	8007114 <DMA_CalcBaseAndBitshift+0xac>
 8007110:	2301      	movs	r3, #1
 8007112:	e000      	b.n	8007116 <DMA_CalcBaseAndBitshift+0xae>
 8007114:	2300      	movs	r3, #0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d024      	beq.n	8007164 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	b2db      	uxtb	r3, r3
 8007120:	3b10      	subs	r3, #16
 8007122:	4a27      	ldr	r2, [pc, #156]	; (80071c0 <DMA_CalcBaseAndBitshift+0x158>)
 8007124:	fba2 2303 	umull	r2, r3, r2, r3
 8007128:	091b      	lsrs	r3, r3, #4
 800712a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f003 0307 	and.w	r3, r3, #7
 8007132:	4a24      	ldr	r2, [pc, #144]	; (80071c4 <DMA_CalcBaseAndBitshift+0x15c>)
 8007134:	5cd3      	ldrb	r3, [r2, r3]
 8007136:	461a      	mov	r2, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2b03      	cmp	r3, #3
 8007140:	d908      	bls.n	8007154 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	461a      	mov	r2, r3
 8007148:	4b1f      	ldr	r3, [pc, #124]	; (80071c8 <DMA_CalcBaseAndBitshift+0x160>)
 800714a:	4013      	ands	r3, r2
 800714c:	1d1a      	adds	r2, r3, #4
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	659a      	str	r2, [r3, #88]	; 0x58
 8007152:	e00d      	b.n	8007170 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	461a      	mov	r2, r3
 800715a:	4b1b      	ldr	r3, [pc, #108]	; (80071c8 <DMA_CalcBaseAndBitshift+0x160>)
 800715c:	4013      	ands	r3, r2
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	6593      	str	r3, [r2, #88]	; 0x58
 8007162:	e005      	b.n	8007170 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007174:	4618      	mov	r0, r3
 8007176:	3714      	adds	r7, #20
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr
 8007180:	40020010 	.word	0x40020010
 8007184:	40020028 	.word	0x40020028
 8007188:	40020040 	.word	0x40020040
 800718c:	40020058 	.word	0x40020058
 8007190:	40020070 	.word	0x40020070
 8007194:	40020088 	.word	0x40020088
 8007198:	400200a0 	.word	0x400200a0
 800719c:	400200b8 	.word	0x400200b8
 80071a0:	40020410 	.word	0x40020410
 80071a4:	40020428 	.word	0x40020428
 80071a8:	40020440 	.word	0x40020440
 80071ac:	40020458 	.word	0x40020458
 80071b0:	40020470 	.word	0x40020470
 80071b4:	40020488 	.word	0x40020488
 80071b8:	400204a0 	.word	0x400204a0
 80071bc:	400204b8 	.word	0x400204b8
 80071c0:	aaaaaaab 	.word	0xaaaaaaab
 80071c4:	08018494 	.word	0x08018494
 80071c8:	fffffc00 	.word	0xfffffc00

080071cc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b085      	sub	sp, #20
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071d4:	2300      	movs	r3, #0
 80071d6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	699b      	ldr	r3, [r3, #24]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d120      	bne.n	8007222 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e4:	2b03      	cmp	r3, #3
 80071e6:	d858      	bhi.n	800729a <DMA_CheckFifoParam+0xce>
 80071e8:	a201      	add	r2, pc, #4	; (adr r2, 80071f0 <DMA_CheckFifoParam+0x24>)
 80071ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ee:	bf00      	nop
 80071f0:	08007201 	.word	0x08007201
 80071f4:	08007213 	.word	0x08007213
 80071f8:	08007201 	.word	0x08007201
 80071fc:	0800729b 	.word	0x0800729b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007204:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007208:	2b00      	cmp	r3, #0
 800720a:	d048      	beq.n	800729e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007210:	e045      	b.n	800729e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007216:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800721a:	d142      	bne.n	80072a2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007220:	e03f      	b.n	80072a2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	699b      	ldr	r3, [r3, #24]
 8007226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800722a:	d123      	bne.n	8007274 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007230:	2b03      	cmp	r3, #3
 8007232:	d838      	bhi.n	80072a6 <DMA_CheckFifoParam+0xda>
 8007234:	a201      	add	r2, pc, #4	; (adr r2, 800723c <DMA_CheckFifoParam+0x70>)
 8007236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800723a:	bf00      	nop
 800723c:	0800724d 	.word	0x0800724d
 8007240:	08007253 	.word	0x08007253
 8007244:	0800724d 	.word	0x0800724d
 8007248:	08007265 	.word	0x08007265
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	73fb      	strb	r3, [r7, #15]
        break;
 8007250:	e030      	b.n	80072b4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007256:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800725a:	2b00      	cmp	r3, #0
 800725c:	d025      	beq.n	80072aa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007262:	e022      	b.n	80072aa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007268:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800726c:	d11f      	bne.n	80072ae <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007272:	e01c      	b.n	80072ae <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007278:	2b02      	cmp	r3, #2
 800727a:	d902      	bls.n	8007282 <DMA_CheckFifoParam+0xb6>
 800727c:	2b03      	cmp	r3, #3
 800727e:	d003      	beq.n	8007288 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007280:	e018      	b.n	80072b4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	73fb      	strb	r3, [r7, #15]
        break;
 8007286:	e015      	b.n	80072b4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800728c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00e      	beq.n	80072b2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	73fb      	strb	r3, [r7, #15]
    break;
 8007298:	e00b      	b.n	80072b2 <DMA_CheckFifoParam+0xe6>
        break;
 800729a:	bf00      	nop
 800729c:	e00a      	b.n	80072b4 <DMA_CheckFifoParam+0xe8>
        break;
 800729e:	bf00      	nop
 80072a0:	e008      	b.n	80072b4 <DMA_CheckFifoParam+0xe8>
        break;
 80072a2:	bf00      	nop
 80072a4:	e006      	b.n	80072b4 <DMA_CheckFifoParam+0xe8>
        break;
 80072a6:	bf00      	nop
 80072a8:	e004      	b.n	80072b4 <DMA_CheckFifoParam+0xe8>
        break;
 80072aa:	bf00      	nop
 80072ac:	e002      	b.n	80072b4 <DMA_CheckFifoParam+0xe8>
        break;
 80072ae:	bf00      	nop
 80072b0:	e000      	b.n	80072b4 <DMA_CheckFifoParam+0xe8>
    break;
 80072b2:	bf00      	nop
    }
  }

  return status;
 80072b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3714      	adds	r7, #20
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop

080072c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a38      	ldr	r2, [pc, #224]	; (80073b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d022      	beq.n	8007322 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a36      	ldr	r2, [pc, #216]	; (80073bc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d01d      	beq.n	8007322 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a35      	ldr	r2, [pc, #212]	; (80073c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d018      	beq.n	8007322 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a33      	ldr	r2, [pc, #204]	; (80073c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d013      	beq.n	8007322 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a32      	ldr	r2, [pc, #200]	; (80073c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d00e      	beq.n	8007322 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a30      	ldr	r2, [pc, #192]	; (80073cc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d009      	beq.n	8007322 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a2f      	ldr	r2, [pc, #188]	; (80073d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d004      	beq.n	8007322 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a2d      	ldr	r2, [pc, #180]	; (80073d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d101      	bne.n	8007326 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007322:	2301      	movs	r3, #1
 8007324:	e000      	b.n	8007328 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007326:	2300      	movs	r3, #0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d01a      	beq.n	8007362 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	b2db      	uxtb	r3, r3
 8007332:	3b08      	subs	r3, #8
 8007334:	4a28      	ldr	r2, [pc, #160]	; (80073d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007336:	fba2 2303 	umull	r2, r3, r2, r3
 800733a:	091b      	lsrs	r3, r3, #4
 800733c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	4b26      	ldr	r3, [pc, #152]	; (80073dc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007342:	4413      	add	r3, r2
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	461a      	mov	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4a24      	ldr	r2, [pc, #144]	; (80073e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007350:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f003 031f 	and.w	r3, r3, #31
 8007358:	2201      	movs	r2, #1
 800735a:	409a      	lsls	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007360:	e024      	b.n	80073ac <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	b2db      	uxtb	r3, r3
 8007368:	3b10      	subs	r3, #16
 800736a:	4a1e      	ldr	r2, [pc, #120]	; (80073e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800736c:	fba2 2303 	umull	r2, r3, r2, r3
 8007370:	091b      	lsrs	r3, r3, #4
 8007372:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	4a1c      	ldr	r2, [pc, #112]	; (80073e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d806      	bhi.n	800738a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	4a1b      	ldr	r2, [pc, #108]	; (80073ec <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d902      	bls.n	800738a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	3308      	adds	r3, #8
 8007388:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	4b18      	ldr	r3, [pc, #96]	; (80073f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800738e:	4413      	add	r3, r2
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	461a      	mov	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4a16      	ldr	r2, [pc, #88]	; (80073f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800739c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f003 031f 	and.w	r3, r3, #31
 80073a4:	2201      	movs	r2, #1
 80073a6:	409a      	lsls	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	669a      	str	r2, [r3, #104]	; 0x68
}
 80073ac:	bf00      	nop
 80073ae:	3714      	adds	r7, #20
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr
 80073b8:	58025408 	.word	0x58025408
 80073bc:	5802541c 	.word	0x5802541c
 80073c0:	58025430 	.word	0x58025430
 80073c4:	58025444 	.word	0x58025444
 80073c8:	58025458 	.word	0x58025458
 80073cc:	5802546c 	.word	0x5802546c
 80073d0:	58025480 	.word	0x58025480
 80073d4:	58025494 	.word	0x58025494
 80073d8:	cccccccd 	.word	0xcccccccd
 80073dc:	16009600 	.word	0x16009600
 80073e0:	58025880 	.word	0x58025880
 80073e4:	aaaaaaab 	.word	0xaaaaaaab
 80073e8:	400204b8 	.word	0x400204b8
 80073ec:	4002040f 	.word	0x4002040f
 80073f0:	10008200 	.word	0x10008200
 80073f4:	40020880 	.word	0x40020880

080073f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b085      	sub	sp, #20
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	b2db      	uxtb	r3, r3
 8007406:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d04a      	beq.n	80074a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2b08      	cmp	r3, #8
 8007412:	d847      	bhi.n	80074a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a25      	ldr	r2, [pc, #148]	; (80074b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d022      	beq.n	8007464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a24      	ldr	r2, [pc, #144]	; (80074b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d01d      	beq.n	8007464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a22      	ldr	r2, [pc, #136]	; (80074b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d018      	beq.n	8007464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a21      	ldr	r2, [pc, #132]	; (80074bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d013      	beq.n	8007464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a1f      	ldr	r2, [pc, #124]	; (80074c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d00e      	beq.n	8007464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a1e      	ldr	r2, [pc, #120]	; (80074c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d009      	beq.n	8007464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a1c      	ldr	r2, [pc, #112]	; (80074c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d004      	beq.n	8007464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a1b      	ldr	r2, [pc, #108]	; (80074cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d101      	bne.n	8007468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007464:	2301      	movs	r3, #1
 8007466:	e000      	b.n	800746a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007468:	2300      	movs	r3, #0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00a      	beq.n	8007484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	4b17      	ldr	r3, [pc, #92]	; (80074d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007472:	4413      	add	r3, r2
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	461a      	mov	r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a15      	ldr	r2, [pc, #84]	; (80074d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007480:	671a      	str	r2, [r3, #112]	; 0x70
 8007482:	e009      	b.n	8007498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	4b14      	ldr	r3, [pc, #80]	; (80074d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007488:	4413      	add	r3, r2
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	461a      	mov	r2, r3
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a11      	ldr	r2, [pc, #68]	; (80074dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007496:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	3b01      	subs	r3, #1
 800749c:	2201      	movs	r2, #1
 800749e:	409a      	lsls	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80074a4:	bf00      	nop
 80074a6:	3714      	adds	r7, #20
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr
 80074b0:	58025408 	.word	0x58025408
 80074b4:	5802541c 	.word	0x5802541c
 80074b8:	58025430 	.word	0x58025430
 80074bc:	58025444 	.word	0x58025444
 80074c0:	58025458 	.word	0x58025458
 80074c4:	5802546c 	.word	0x5802546c
 80074c8:	58025480 	.word	0x58025480
 80074cc:	58025494 	.word	0x58025494
 80074d0:	1600963f 	.word	0x1600963f
 80074d4:	58025940 	.word	0x58025940
 80074d8:	1000823f 	.word	0x1000823f
 80074dc:	40020940 	.word	0x40020940

080074e0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b098      	sub	sp, #96	; 0x60
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80074e8:	4a84      	ldr	r2, [pc, #528]	; (80076fc <HAL_FDCAN_Init+0x21c>)
 80074ea:	f107 030c 	add.w	r3, r7, #12
 80074ee:	4611      	mov	r1, r2
 80074f0:	224c      	movs	r2, #76	; 0x4c
 80074f2:	4618      	mov	r0, r3
 80074f4:	f00f fdea 	bl	80170cc <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d101      	bne.n	8007502 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e1c6      	b.n	8007890 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a7e      	ldr	r2, [pc, #504]	; (8007700 <HAL_FDCAN_Init+0x220>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d106      	bne.n	800751a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007514:	461a      	mov	r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007520:	b2db      	uxtb	r3, r3
 8007522:	2b00      	cmp	r3, #0
 8007524:	d106      	bne.n	8007534 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f7fb faa4 	bl	8002a7c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	699a      	ldr	r2, [r3, #24]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f022 0210 	bic.w	r2, r2, #16
 8007542:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007544:	f7fc fa32 	bl	80039ac <HAL_GetTick>
 8007548:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800754a:	e014      	b.n	8007576 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800754c:	f7fc fa2e 	bl	80039ac <HAL_GetTick>
 8007550:	4602      	mov	r2, r0
 8007552:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007554:	1ad3      	subs	r3, r2, r3
 8007556:	2b0a      	cmp	r3, #10
 8007558:	d90d      	bls.n	8007576 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007560:	f043 0201 	orr.w	r2, r3, #1
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2203      	movs	r2, #3
 800756e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e18c      	b.n	8007890 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	699b      	ldr	r3, [r3, #24]
 800757c:	f003 0308 	and.w	r3, r3, #8
 8007580:	2b08      	cmp	r3, #8
 8007582:	d0e3      	beq.n	800754c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	699a      	ldr	r2, [r3, #24]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f042 0201 	orr.w	r2, r2, #1
 8007592:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007594:	f7fc fa0a 	bl	80039ac <HAL_GetTick>
 8007598:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800759a:	e014      	b.n	80075c6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800759c:	f7fc fa06 	bl	80039ac <HAL_GetTick>
 80075a0:	4602      	mov	r2, r0
 80075a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075a4:	1ad3      	subs	r3, r2, r3
 80075a6:	2b0a      	cmp	r3, #10
 80075a8:	d90d      	bls.n	80075c6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075b0:	f043 0201 	orr.w	r2, r3, #1
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2203      	movs	r2, #3
 80075be:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	e164      	b.n	8007890 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	699b      	ldr	r3, [r3, #24]
 80075cc:	f003 0301 	and.w	r3, r3, #1
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d0e3      	beq.n	800759c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	699a      	ldr	r2, [r3, #24]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f042 0202 	orr.w	r2, r2, #2
 80075e2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	7c1b      	ldrb	r3, [r3, #16]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d108      	bne.n	80075fe <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	699a      	ldr	r2, [r3, #24]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075fa:	619a      	str	r2, [r3, #24]
 80075fc:	e007      	b.n	800760e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	699a      	ldr	r2, [r3, #24]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800760c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	7c5b      	ldrb	r3, [r3, #17]
 8007612:	2b01      	cmp	r3, #1
 8007614:	d108      	bne.n	8007628 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	699a      	ldr	r2, [r3, #24]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007624:	619a      	str	r2, [r3, #24]
 8007626:	e007      	b.n	8007638 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	699a      	ldr	r2, [r3, #24]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007636:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	7c9b      	ldrb	r3, [r3, #18]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d108      	bne.n	8007652 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	699a      	ldr	r2, [r3, #24]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800764e:	619a      	str	r2, [r3, #24]
 8007650:	e007      	b.n	8007662 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	699a      	ldr	r2, [r3, #24]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007660:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	689a      	ldr	r2, [r3, #8]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	430a      	orrs	r2, r1
 8007676:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	699a      	ldr	r2, [r3, #24]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8007686:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	691a      	ldr	r2, [r3, #16]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f022 0210 	bic.w	r2, r2, #16
 8007696:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	2b01      	cmp	r3, #1
 800769e:	d108      	bne.n	80076b2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	699a      	ldr	r2, [r3, #24]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f042 0204 	orr.w	r2, r2, #4
 80076ae:	619a      	str	r2, [r3, #24]
 80076b0:	e030      	b.n	8007714 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d02c      	beq.n	8007714 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	2b02      	cmp	r3, #2
 80076c0:	d020      	beq.n	8007704 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	699a      	ldr	r2, [r3, #24]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80076d0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	691a      	ldr	r2, [r3, #16]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f042 0210 	orr.w	r2, r2, #16
 80076e0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	2b03      	cmp	r3, #3
 80076e8:	d114      	bne.n	8007714 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	699a      	ldr	r2, [r3, #24]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f042 0220 	orr.w	r2, r2, #32
 80076f8:	619a      	str	r2, [r3, #24]
 80076fa:	e00b      	b.n	8007714 <HAL_FDCAN_Init+0x234>
 80076fc:	08018380 	.word	0x08018380
 8007700:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	699a      	ldr	r2, [r3, #24]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f042 0220 	orr.w	r2, r2, #32
 8007712:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	699b      	ldr	r3, [r3, #24]
 8007718:	3b01      	subs	r3, #1
 800771a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	69db      	ldr	r3, [r3, #28]
 8007720:	3b01      	subs	r3, #1
 8007722:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007724:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a1b      	ldr	r3, [r3, #32]
 800772a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800772c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	695b      	ldr	r3, [r3, #20]
 8007734:	3b01      	subs	r3, #1
 8007736:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800773c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800773e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007748:	d115      	bne.n	8007776 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800774e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007754:	3b01      	subs	r3, #1
 8007756:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007758:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800775e:	3b01      	subs	r3, #1
 8007760:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007762:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776a:	3b01      	subs	r3, #1
 800776c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007772:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007774:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00a      	beq.n	8007794 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	430a      	orrs	r2, r1
 8007790:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800779c:	4413      	add	r3, r2
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d011      	beq.n	80077c6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80077aa:	f023 0107 	bic.w	r1, r3, #7
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	3360      	adds	r3, #96	; 0x60
 80077b6:	443b      	add	r3, r7
 80077b8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	430a      	orrs	r2, r1
 80077c2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d011      	beq.n	80077f2 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80077d6:	f023 0107 	bic.w	r1, r3, #7
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	3360      	adds	r3, #96	; 0x60
 80077e2:	443b      	add	r3, r7
 80077e4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	430a      	orrs	r2, r1
 80077ee:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d012      	beq.n	8007820 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007802:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	3360      	adds	r3, #96	; 0x60
 800780e:	443b      	add	r3, r7
 8007810:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007814:	011a      	lsls	r2, r3, #4
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	430a      	orrs	r2, r1
 800781c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007824:	2b00      	cmp	r3, #0
 8007826:	d012      	beq.n	800784e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007830:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	3360      	adds	r3, #96	; 0x60
 800783c:	443b      	add	r3, r7
 800783e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007842:	021a      	lsls	r2, r3, #8
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	430a      	orrs	r2, r1
 800784a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a11      	ldr	r2, [pc, #68]	; (8007898 <HAL_FDCAN_Init+0x3b8>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d107      	bne.n	8007868 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	689a      	ldr	r2, [r3, #8]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	f022 0203 	bic.w	r2, r2, #3
 8007866:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 f80b 	bl	800789c <FDCAN_CalcultateRamBlockAddresses>
 8007886:	4603      	mov	r3, r0
 8007888:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 800788c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8007890:	4618      	mov	r0, r3
 8007892:	3760      	adds	r7, #96	; 0x60
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}
 8007898:	4000a000 	.word	0x4000a000

0800789c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078a8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80078b2:	4ba7      	ldr	r3, [pc, #668]	; (8007b50 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80078b4:	4013      	ands	r3, r2
 80078b6:	68ba      	ldr	r2, [r7, #8]
 80078b8:	0091      	lsls	r1, r2, #2
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	6812      	ldr	r2, [r2, #0]
 80078be:	430b      	orrs	r3, r1
 80078c0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078cc:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d4:	041a      	lsls	r2, r3, #16
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	430a      	orrs	r2, r1
 80078dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e4:	68ba      	ldr	r2, [r7, #8]
 80078e6:	4413      	add	r3, r2
 80078e8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80078f2:	4b97      	ldr	r3, [pc, #604]	; (8007b50 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80078f4:	4013      	ands	r3, r2
 80078f6:	68ba      	ldr	r2, [r7, #8]
 80078f8:	0091      	lsls	r1, r2, #2
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	6812      	ldr	r2, [r2, #0]
 80078fe:	430b      	orrs	r3, r1
 8007900:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800790c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007914:	041a      	lsls	r2, r3, #16
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	430a      	orrs	r2, r1
 800791c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007924:	005b      	lsls	r3, r3, #1
 8007926:	68ba      	ldr	r2, [r7, #8]
 8007928:	4413      	add	r3, r2
 800792a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007934:	4b86      	ldr	r3, [pc, #536]	; (8007b50 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007936:	4013      	ands	r3, r2
 8007938:	68ba      	ldr	r2, [r7, #8]
 800793a:	0091      	lsls	r1, r2, #2
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	6812      	ldr	r2, [r2, #0]
 8007940:	430b      	orrs	r3, r1
 8007942:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800794e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007956:	041a      	lsls	r2, r3, #16
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	430a      	orrs	r2, r1
 800795e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800796a:	fb02 f303 	mul.w	r3, r2, r3
 800796e:	68ba      	ldr	r2, [r7, #8]
 8007970:	4413      	add	r3, r2
 8007972:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800797c:	4b74      	ldr	r3, [pc, #464]	; (8007b50 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800797e:	4013      	ands	r3, r2
 8007980:	68ba      	ldr	r2, [r7, #8]
 8007982:	0091      	lsls	r1, r2, #2
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	6812      	ldr	r2, [r2, #0]
 8007988:	430b      	orrs	r3, r1
 800798a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007996:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800799e:	041a      	lsls	r2, r3, #16
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	430a      	orrs	r2, r1
 80079a6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80079b2:	fb02 f303 	mul.w	r3, r2, r3
 80079b6:	68ba      	ldr	r2, [r7, #8]
 80079b8:	4413      	add	r3, r2
 80079ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80079c4:	4b62      	ldr	r3, [pc, #392]	; (8007b50 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80079c6:	4013      	ands	r3, r2
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	0091      	lsls	r1, r2, #2
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	6812      	ldr	r2, [r2, #0]
 80079d0:	430b      	orrs	r3, r1
 80079d2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80079de:	fb02 f303 	mul.w	r3, r2, r3
 80079e2:	68ba      	ldr	r2, [r7, #8]
 80079e4:	4413      	add	r3, r2
 80079e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80079f0:	4b57      	ldr	r3, [pc, #348]	; (8007b50 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80079f2:	4013      	ands	r3, r2
 80079f4:	68ba      	ldr	r2, [r7, #8]
 80079f6:	0091      	lsls	r1, r2, #2
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	6812      	ldr	r2, [r2, #0]
 80079fc:	430b      	orrs	r3, r1
 80079fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007a0a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a12:	041a      	lsls	r2, r3, #16
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	430a      	orrs	r2, r1
 8007a1a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a22:	005b      	lsls	r3, r3, #1
 8007a24:	68ba      	ldr	r2, [r7, #8]
 8007a26:	4413      	add	r3, r2
 8007a28:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007a32:	4b47      	ldr	r3, [pc, #284]	; (8007b50 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a34:	4013      	ands	r3, r2
 8007a36:	68ba      	ldr	r2, [r7, #8]
 8007a38:	0091      	lsls	r1, r2, #2
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	6812      	ldr	r2, [r2, #0]
 8007a3e:	430b      	orrs	r3, r1
 8007a40:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007a4c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a54:	041a      	lsls	r2, r3, #16
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	430a      	orrs	r2, r1
 8007a5c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007a68:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a70:	061a      	lsls	r2, r3, #24
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	430a      	orrs	r2, r1
 8007a78:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a80:	4b34      	ldr	r3, [pc, #208]	; (8007b54 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007a82:	4413      	add	r3, r2
 8007a84:	009a      	lsls	r2, r3, #2
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	441a      	add	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aa2:	00db      	lsls	r3, r3, #3
 8007aa4:	441a      	add	r2, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab2:	6879      	ldr	r1, [r7, #4]
 8007ab4:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007ab6:	fb01 f303 	mul.w	r3, r1, r3
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	441a      	add	r2, r3
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aca:	6879      	ldr	r1, [r7, #4]
 8007acc:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007ace:	fb01 f303 	mul.w	r3, r1, r3
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	441a      	add	r2, r3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ae2:	6879      	ldr	r1, [r7, #4]
 8007ae4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8007ae6:	fb01 f303 	mul.w	r3, r1, r3
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	441a      	add	r2, r3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007afe:	00db      	lsls	r3, r3, #3
 8007b00:	441a      	add	r2, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b12:	6879      	ldr	r1, [r7, #4]
 8007b14:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007b16:	fb01 f303 	mul.w	r3, r1, r3
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	441a      	add	r2, r3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b2e:	6879      	ldr	r1, [r7, #4]
 8007b30:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007b32:	fb01 f303 	mul.w	r3, r1, r3
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	441a      	add	r2, r3
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b46:	4a04      	ldr	r2, [pc, #16]	; (8007b58 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d915      	bls.n	8007b78 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007b4c:	e006      	b.n	8007b5c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007b4e:	bf00      	nop
 8007b50:	ffff0003 	.word	0xffff0003
 8007b54:	10002b00 	.word	0x10002b00
 8007b58:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b62:	f043 0220 	orr.w	r2, r3, #32
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2203      	movs	r2, #3
 8007b70:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	e010      	b.n	8007b9a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b7c:	60fb      	str	r3, [r7, #12]
 8007b7e:	e005      	b.n	8007b8c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2200      	movs	r2, #0
 8007b84:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	3304      	adds	r3, #4
 8007b8a:	60fb      	str	r3, [r7, #12]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d3f3      	bcc.n	8007b80 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3714      	adds	r7, #20
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr
 8007ba6:	bf00      	nop

08007ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b089      	sub	sp, #36	; 0x24
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007bb6:	4b86      	ldr	r3, [pc, #536]	; (8007dd0 <HAL_GPIO_Init+0x228>)
 8007bb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007bba:	e18c      	b.n	8007ed6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	2101      	movs	r1, #1
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8007bc8:	4013      	ands	r3, r2
 8007bca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	f000 817e 	beq.w	8007ed0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	f003 0303 	and.w	r3, r3, #3
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d005      	beq.n	8007bec <HAL_GPIO_Init+0x44>
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	f003 0303 	and.w	r3, r3, #3
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	d130      	bne.n	8007c4e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	005b      	lsls	r3, r3, #1
 8007bf6:	2203      	movs	r2, #3
 8007bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bfc:	43db      	mvns	r3, r3
 8007bfe:	69ba      	ldr	r2, [r7, #24]
 8007c00:	4013      	ands	r3, r2
 8007c02:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	68da      	ldr	r2, [r3, #12]
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	005b      	lsls	r3, r3, #1
 8007c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c10:	69ba      	ldr	r2, [r7, #24]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	69ba      	ldr	r2, [r7, #24]
 8007c1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007c22:	2201      	movs	r2, #1
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	fa02 f303 	lsl.w	r3, r2, r3
 8007c2a:	43db      	mvns	r3, r3
 8007c2c:	69ba      	ldr	r2, [r7, #24]
 8007c2e:	4013      	ands	r3, r2
 8007c30:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	091b      	lsrs	r3, r3, #4
 8007c38:	f003 0201 	and.w	r2, r3, #1
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c42:	69ba      	ldr	r2, [r7, #24]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	69ba      	ldr	r2, [r7, #24]
 8007c4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	f003 0303 	and.w	r3, r3, #3
 8007c56:	2b03      	cmp	r3, #3
 8007c58:	d017      	beq.n	8007c8a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	005b      	lsls	r3, r3, #1
 8007c64:	2203      	movs	r2, #3
 8007c66:	fa02 f303 	lsl.w	r3, r2, r3
 8007c6a:	43db      	mvns	r3, r3
 8007c6c:	69ba      	ldr	r2, [r7, #24]
 8007c6e:	4013      	ands	r3, r2
 8007c70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	689a      	ldr	r2, [r3, #8]
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	005b      	lsls	r3, r3, #1
 8007c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c7e:	69ba      	ldr	r2, [r7, #24]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	69ba      	ldr	r2, [r7, #24]
 8007c88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	f003 0303 	and.w	r3, r3, #3
 8007c92:	2b02      	cmp	r3, #2
 8007c94:	d123      	bne.n	8007cde <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	08da      	lsrs	r2, r3, #3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	3208      	adds	r2, #8
 8007c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	f003 0307 	and.w	r3, r3, #7
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	220f      	movs	r2, #15
 8007cae:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb2:	43db      	mvns	r3, r3
 8007cb4:	69ba      	ldr	r2, [r7, #24]
 8007cb6:	4013      	ands	r3, r2
 8007cb8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	691a      	ldr	r2, [r3, #16]
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	f003 0307 	and.w	r3, r3, #7
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cca:	69ba      	ldr	r2, [r7, #24]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007cd0:	69fb      	ldr	r3, [r7, #28]
 8007cd2:	08da      	lsrs	r2, r3, #3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	3208      	adds	r2, #8
 8007cd8:	69b9      	ldr	r1, [r7, #24]
 8007cda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	005b      	lsls	r3, r3, #1
 8007ce8:	2203      	movs	r2, #3
 8007cea:	fa02 f303 	lsl.w	r3, r2, r3
 8007cee:	43db      	mvns	r3, r3
 8007cf0:	69ba      	ldr	r2, [r7, #24]
 8007cf2:	4013      	ands	r3, r2
 8007cf4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	f003 0203 	and.w	r2, r3, #3
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	005b      	lsls	r3, r3, #1
 8007d02:	fa02 f303 	lsl.w	r3, r2, r3
 8007d06:	69ba      	ldr	r2, [r7, #24]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	69ba      	ldr	r2, [r7, #24]
 8007d10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f000 80d8 	beq.w	8007ed0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d20:	4b2c      	ldr	r3, [pc, #176]	; (8007dd4 <HAL_GPIO_Init+0x22c>)
 8007d22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d26:	4a2b      	ldr	r2, [pc, #172]	; (8007dd4 <HAL_GPIO_Init+0x22c>)
 8007d28:	f043 0302 	orr.w	r3, r3, #2
 8007d2c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007d30:	4b28      	ldr	r3, [pc, #160]	; (8007dd4 <HAL_GPIO_Init+0x22c>)
 8007d32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d36:	f003 0302 	and.w	r3, r3, #2
 8007d3a:	60fb      	str	r3, [r7, #12]
 8007d3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007d3e:	4a26      	ldr	r2, [pc, #152]	; (8007dd8 <HAL_GPIO_Init+0x230>)
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	089b      	lsrs	r3, r3, #2
 8007d44:	3302      	adds	r3, #2
 8007d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	f003 0303 	and.w	r3, r3, #3
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	220f      	movs	r2, #15
 8007d56:	fa02 f303 	lsl.w	r3, r2, r3
 8007d5a:	43db      	mvns	r3, r3
 8007d5c:	69ba      	ldr	r2, [r7, #24]
 8007d5e:	4013      	ands	r3, r2
 8007d60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a1d      	ldr	r2, [pc, #116]	; (8007ddc <HAL_GPIO_Init+0x234>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d04a      	beq.n	8007e00 <HAL_GPIO_Init+0x258>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4a1c      	ldr	r2, [pc, #112]	; (8007de0 <HAL_GPIO_Init+0x238>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d02b      	beq.n	8007dca <HAL_GPIO_Init+0x222>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4a1b      	ldr	r2, [pc, #108]	; (8007de4 <HAL_GPIO_Init+0x23c>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d025      	beq.n	8007dc6 <HAL_GPIO_Init+0x21e>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4a1a      	ldr	r2, [pc, #104]	; (8007de8 <HAL_GPIO_Init+0x240>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d01f      	beq.n	8007dc2 <HAL_GPIO_Init+0x21a>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a19      	ldr	r2, [pc, #100]	; (8007dec <HAL_GPIO_Init+0x244>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d019      	beq.n	8007dbe <HAL_GPIO_Init+0x216>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4a18      	ldr	r2, [pc, #96]	; (8007df0 <HAL_GPIO_Init+0x248>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d013      	beq.n	8007dba <HAL_GPIO_Init+0x212>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a17      	ldr	r2, [pc, #92]	; (8007df4 <HAL_GPIO_Init+0x24c>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d00d      	beq.n	8007db6 <HAL_GPIO_Init+0x20e>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a16      	ldr	r2, [pc, #88]	; (8007df8 <HAL_GPIO_Init+0x250>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d007      	beq.n	8007db2 <HAL_GPIO_Init+0x20a>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a15      	ldr	r2, [pc, #84]	; (8007dfc <HAL_GPIO_Init+0x254>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d101      	bne.n	8007dae <HAL_GPIO_Init+0x206>
 8007daa:	2309      	movs	r3, #9
 8007dac:	e029      	b.n	8007e02 <HAL_GPIO_Init+0x25a>
 8007dae:	230a      	movs	r3, #10
 8007db0:	e027      	b.n	8007e02 <HAL_GPIO_Init+0x25a>
 8007db2:	2307      	movs	r3, #7
 8007db4:	e025      	b.n	8007e02 <HAL_GPIO_Init+0x25a>
 8007db6:	2306      	movs	r3, #6
 8007db8:	e023      	b.n	8007e02 <HAL_GPIO_Init+0x25a>
 8007dba:	2305      	movs	r3, #5
 8007dbc:	e021      	b.n	8007e02 <HAL_GPIO_Init+0x25a>
 8007dbe:	2304      	movs	r3, #4
 8007dc0:	e01f      	b.n	8007e02 <HAL_GPIO_Init+0x25a>
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	e01d      	b.n	8007e02 <HAL_GPIO_Init+0x25a>
 8007dc6:	2302      	movs	r3, #2
 8007dc8:	e01b      	b.n	8007e02 <HAL_GPIO_Init+0x25a>
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e019      	b.n	8007e02 <HAL_GPIO_Init+0x25a>
 8007dce:	bf00      	nop
 8007dd0:	58000080 	.word	0x58000080
 8007dd4:	58024400 	.word	0x58024400
 8007dd8:	58000400 	.word	0x58000400
 8007ddc:	58020000 	.word	0x58020000
 8007de0:	58020400 	.word	0x58020400
 8007de4:	58020800 	.word	0x58020800
 8007de8:	58020c00 	.word	0x58020c00
 8007dec:	58021000 	.word	0x58021000
 8007df0:	58021400 	.word	0x58021400
 8007df4:	58021800 	.word	0x58021800
 8007df8:	58021c00 	.word	0x58021c00
 8007dfc:	58022400 	.word	0x58022400
 8007e00:	2300      	movs	r3, #0
 8007e02:	69fa      	ldr	r2, [r7, #28]
 8007e04:	f002 0203 	and.w	r2, r2, #3
 8007e08:	0092      	lsls	r2, r2, #2
 8007e0a:	4093      	lsls	r3, r2
 8007e0c:	69ba      	ldr	r2, [r7, #24]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007e12:	4938      	ldr	r1, [pc, #224]	; (8007ef4 <HAL_GPIO_Init+0x34c>)
 8007e14:	69fb      	ldr	r3, [r7, #28]
 8007e16:	089b      	lsrs	r3, r3, #2
 8007e18:	3302      	adds	r3, #2
 8007e1a:	69ba      	ldr	r2, [r7, #24]
 8007e1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	43db      	mvns	r3, r3
 8007e2c:	69ba      	ldr	r2, [r7, #24]
 8007e2e:	4013      	ands	r3, r2
 8007e30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d003      	beq.n	8007e46 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007e3e:	69ba      	ldr	r2, [r7, #24]
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007e46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	43db      	mvns	r3, r3
 8007e5a:	69ba      	ldr	r2, [r7, #24]
 8007e5c:	4013      	ands	r3, r2
 8007e5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d003      	beq.n	8007e74 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007e6c:	69ba      	ldr	r2, [r7, #24]
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	4313      	orrs	r3, r2
 8007e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007e74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e78:	69bb      	ldr	r3, [r7, #24]
 8007e7a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	43db      	mvns	r3, r3
 8007e86:	69ba      	ldr	r2, [r7, #24]
 8007e88:	4013      	ands	r3, r2
 8007e8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d003      	beq.n	8007ea0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007e98:	69ba      	ldr	r2, [r7, #24]
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	69ba      	ldr	r2, [r7, #24]
 8007ea4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	43db      	mvns	r3, r3
 8007eb0:	69ba      	ldr	r2, [r7, #24]
 8007eb2:	4013      	ands	r3, r2
 8007eb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d003      	beq.n	8007eca <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007ec2:	69ba      	ldr	r2, [r7, #24]
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	69ba      	ldr	r2, [r7, #24]
 8007ece:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	fa22 f303 	lsr.w	r3, r2, r3
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f47f ae6b 	bne.w	8007bbc <HAL_GPIO_Init+0x14>
  }
}
 8007ee6:	bf00      	nop
 8007ee8:	bf00      	nop
 8007eea:	3724      	adds	r7, #36	; 0x24
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr
 8007ef4:	58000400 	.word	0x58000400

08007ef8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	460b      	mov	r3, r1
 8007f02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	691a      	ldr	r2, [r3, #16]
 8007f08:	887b      	ldrh	r3, [r7, #2]
 8007f0a:	4013      	ands	r3, r2
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d002      	beq.n	8007f16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007f10:	2301      	movs	r3, #1
 8007f12:	73fb      	strb	r3, [r7, #15]
 8007f14:	e001      	b.n	8007f1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007f16:	2300      	movs	r3, #0
 8007f18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3714      	adds	r7, #20
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	460b      	mov	r3, r1
 8007f32:	807b      	strh	r3, [r7, #2]
 8007f34:	4613      	mov	r3, r2
 8007f36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007f38:	787b      	ldrb	r3, [r7, #1]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d003      	beq.n	8007f46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007f3e:	887a      	ldrh	r2, [r7, #2]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007f44:	e003      	b.n	8007f4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007f46:	887b      	ldrh	r3, [r7, #2]
 8007f48:	041a      	lsls	r2, r3, #16
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	619a      	str	r2, [r3, #24]
}
 8007f4e:	bf00      	nop
 8007f50:	370c      	adds	r7, #12
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr
	...

08007f5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d101      	bne.n	8007f6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e07f      	b.n	800806e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d106      	bne.n	8007f88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f7fa fde2 	bl	8002b4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2224      	movs	r2, #36	; 0x24
 8007f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f022 0201 	bic.w	r2, r2, #1
 8007f9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	685a      	ldr	r2, [r3, #4]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007fac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	689a      	ldr	r2, [r3, #8]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007fbc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	68db      	ldr	r3, [r3, #12]
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d107      	bne.n	8007fd6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	689a      	ldr	r2, [r3, #8]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007fd2:	609a      	str	r2, [r3, #8]
 8007fd4:	e006      	b.n	8007fe4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	689a      	ldr	r2, [r3, #8]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007fe2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	2b02      	cmp	r3, #2
 8007fea:	d104      	bne.n	8007ff6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ff4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	6859      	ldr	r1, [r3, #4]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	4b1d      	ldr	r3, [pc, #116]	; (8008078 <HAL_I2C_Init+0x11c>)
 8008002:	430b      	orrs	r3, r1
 8008004:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	68da      	ldr	r2, [r3, #12]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008014:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	691a      	ldr	r2, [r3, #16]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	695b      	ldr	r3, [r3, #20]
 800801e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	699b      	ldr	r3, [r3, #24]
 8008026:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	430a      	orrs	r2, r1
 800802e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	69d9      	ldr	r1, [r3, #28]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6a1a      	ldr	r2, [r3, #32]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	430a      	orrs	r2, r1
 800803e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f042 0201 	orr.w	r2, r2, #1
 800804e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2220      	movs	r2, #32
 800805a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	3708      	adds	r7, #8
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	02008000 	.word	0x02008000

0800807c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	699b      	ldr	r3, [r3, #24]
 800808a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008098:	2b00      	cmp	r3, #0
 800809a:	d005      	beq.n	80080a8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080a0:	68ba      	ldr	r2, [r7, #8]
 80080a2:	68f9      	ldr	r1, [r7, #12]
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	4798      	blx	r3
  }
}
 80080a8:	bf00      	nop
 80080aa:	3710      	adds	r7, #16
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	2b20      	cmp	r3, #32
 80080c4:	d138      	bne.n	8008138 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d101      	bne.n	80080d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80080d0:	2302      	movs	r3, #2
 80080d2:	e032      	b.n	800813a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2201      	movs	r2, #1
 80080d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2224      	movs	r2, #36	; 0x24
 80080e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f022 0201 	bic.w	r2, r2, #1
 80080f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008102:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	6819      	ldr	r1, [r3, #0]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	683a      	ldr	r2, [r7, #0]
 8008110:	430a      	orrs	r2, r1
 8008112:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f042 0201 	orr.w	r2, r2, #1
 8008122:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2220      	movs	r2, #32
 8008128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008134:	2300      	movs	r3, #0
 8008136:	e000      	b.n	800813a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008138:	2302      	movs	r3, #2
  }
}
 800813a:	4618      	mov	r0, r3
 800813c:	370c      	adds	r7, #12
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr

08008146 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008146:	b480      	push	{r7}
 8008148:	b085      	sub	sp, #20
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
 800814e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008156:	b2db      	uxtb	r3, r3
 8008158:	2b20      	cmp	r3, #32
 800815a:	d139      	bne.n	80081d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008162:	2b01      	cmp	r3, #1
 8008164:	d101      	bne.n	800816a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008166:	2302      	movs	r3, #2
 8008168:	e033      	b.n	80081d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2201      	movs	r2, #1
 800816e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2224      	movs	r2, #36	; 0x24
 8008176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f022 0201 	bic.w	r2, r2, #1
 8008188:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008198:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	021b      	lsls	r3, r3, #8
 800819e:	68fa      	ldr	r2, [r7, #12]
 80081a0:	4313      	orrs	r3, r2
 80081a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f042 0201 	orr.w	r2, r2, #1
 80081ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2220      	movs	r2, #32
 80081c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80081cc:	2300      	movs	r3, #0
 80081ce:	e000      	b.n	80081d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80081d0:	2302      	movs	r3, #2
  }
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3714      	adds	r7, #20
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr

080081de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80081de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081e0:	b08f      	sub	sp, #60	; 0x3c
 80081e2:	af0a      	add	r7, sp, #40	; 0x28
 80081e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d101      	bne.n	80081f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	e116      	b.n	800841e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d106      	bne.n	8008210 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f00e fbc8 	bl	80169a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2203      	movs	r2, #3
 8008214:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800821c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008220:	2b00      	cmp	r3, #0
 8008222:	d102      	bne.n	800822a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4618      	mov	r0, r3
 8008230:	f00a fcf7 	bl	8012c22 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	603b      	str	r3, [r7, #0]
 800823a:	687e      	ldr	r6, [r7, #4]
 800823c:	466d      	mov	r5, sp
 800823e:	f106 0410 	add.w	r4, r6, #16
 8008242:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008244:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008246:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008248:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800824a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800824e:	e885 0003 	stmia.w	r5, {r0, r1}
 8008252:	1d33      	adds	r3, r6, #4
 8008254:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008256:	6838      	ldr	r0, [r7, #0]
 8008258:	f00a fbc2 	bl	80129e0 <USB_CoreInit>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d005      	beq.n	800826e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2202      	movs	r2, #2
 8008266:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	e0d7      	b.n	800841e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	2100      	movs	r1, #0
 8008274:	4618      	mov	r0, r3
 8008276:	f00a fce5 	bl	8012c44 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800827a:	2300      	movs	r3, #0
 800827c:	73fb      	strb	r3, [r7, #15]
 800827e:	e04a      	b.n	8008316 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008280:	7bfa      	ldrb	r2, [r7, #15]
 8008282:	6879      	ldr	r1, [r7, #4]
 8008284:	4613      	mov	r3, r2
 8008286:	00db      	lsls	r3, r3, #3
 8008288:	4413      	add	r3, r2
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	440b      	add	r3, r1
 800828e:	333d      	adds	r3, #61	; 0x3d
 8008290:	2201      	movs	r2, #1
 8008292:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008294:	7bfa      	ldrb	r2, [r7, #15]
 8008296:	6879      	ldr	r1, [r7, #4]
 8008298:	4613      	mov	r3, r2
 800829a:	00db      	lsls	r3, r3, #3
 800829c:	4413      	add	r3, r2
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	440b      	add	r3, r1
 80082a2:	333c      	adds	r3, #60	; 0x3c
 80082a4:	7bfa      	ldrb	r2, [r7, #15]
 80082a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80082a8:	7bfa      	ldrb	r2, [r7, #15]
 80082aa:	7bfb      	ldrb	r3, [r7, #15]
 80082ac:	b298      	uxth	r0, r3
 80082ae:	6879      	ldr	r1, [r7, #4]
 80082b0:	4613      	mov	r3, r2
 80082b2:	00db      	lsls	r3, r3, #3
 80082b4:	4413      	add	r3, r2
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	440b      	add	r3, r1
 80082ba:	3356      	adds	r3, #86	; 0x56
 80082bc:	4602      	mov	r2, r0
 80082be:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80082c0:	7bfa      	ldrb	r2, [r7, #15]
 80082c2:	6879      	ldr	r1, [r7, #4]
 80082c4:	4613      	mov	r3, r2
 80082c6:	00db      	lsls	r3, r3, #3
 80082c8:	4413      	add	r3, r2
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	440b      	add	r3, r1
 80082ce:	3340      	adds	r3, #64	; 0x40
 80082d0:	2200      	movs	r2, #0
 80082d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80082d4:	7bfa      	ldrb	r2, [r7, #15]
 80082d6:	6879      	ldr	r1, [r7, #4]
 80082d8:	4613      	mov	r3, r2
 80082da:	00db      	lsls	r3, r3, #3
 80082dc:	4413      	add	r3, r2
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	440b      	add	r3, r1
 80082e2:	3344      	adds	r3, #68	; 0x44
 80082e4:	2200      	movs	r2, #0
 80082e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80082e8:	7bfa      	ldrb	r2, [r7, #15]
 80082ea:	6879      	ldr	r1, [r7, #4]
 80082ec:	4613      	mov	r3, r2
 80082ee:	00db      	lsls	r3, r3, #3
 80082f0:	4413      	add	r3, r2
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	440b      	add	r3, r1
 80082f6:	3348      	adds	r3, #72	; 0x48
 80082f8:	2200      	movs	r2, #0
 80082fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80082fc:	7bfa      	ldrb	r2, [r7, #15]
 80082fe:	6879      	ldr	r1, [r7, #4]
 8008300:	4613      	mov	r3, r2
 8008302:	00db      	lsls	r3, r3, #3
 8008304:	4413      	add	r3, r2
 8008306:	009b      	lsls	r3, r3, #2
 8008308:	440b      	add	r3, r1
 800830a:	334c      	adds	r3, #76	; 0x4c
 800830c:	2200      	movs	r2, #0
 800830e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008310:	7bfb      	ldrb	r3, [r7, #15]
 8008312:	3301      	adds	r3, #1
 8008314:	73fb      	strb	r3, [r7, #15]
 8008316:	7bfa      	ldrb	r2, [r7, #15]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	429a      	cmp	r2, r3
 800831e:	d3af      	bcc.n	8008280 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008320:	2300      	movs	r3, #0
 8008322:	73fb      	strb	r3, [r7, #15]
 8008324:	e044      	b.n	80083b0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008326:	7bfa      	ldrb	r2, [r7, #15]
 8008328:	6879      	ldr	r1, [r7, #4]
 800832a:	4613      	mov	r3, r2
 800832c:	00db      	lsls	r3, r3, #3
 800832e:	4413      	add	r3, r2
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	440b      	add	r3, r1
 8008334:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008338:	2200      	movs	r2, #0
 800833a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800833c:	7bfa      	ldrb	r2, [r7, #15]
 800833e:	6879      	ldr	r1, [r7, #4]
 8008340:	4613      	mov	r3, r2
 8008342:	00db      	lsls	r3, r3, #3
 8008344:	4413      	add	r3, r2
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	440b      	add	r3, r1
 800834a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800834e:	7bfa      	ldrb	r2, [r7, #15]
 8008350:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008352:	7bfa      	ldrb	r2, [r7, #15]
 8008354:	6879      	ldr	r1, [r7, #4]
 8008356:	4613      	mov	r3, r2
 8008358:	00db      	lsls	r3, r3, #3
 800835a:	4413      	add	r3, r2
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	440b      	add	r3, r1
 8008360:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008364:	2200      	movs	r2, #0
 8008366:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008368:	7bfa      	ldrb	r2, [r7, #15]
 800836a:	6879      	ldr	r1, [r7, #4]
 800836c:	4613      	mov	r3, r2
 800836e:	00db      	lsls	r3, r3, #3
 8008370:	4413      	add	r3, r2
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	440b      	add	r3, r1
 8008376:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800837a:	2200      	movs	r2, #0
 800837c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800837e:	7bfa      	ldrb	r2, [r7, #15]
 8008380:	6879      	ldr	r1, [r7, #4]
 8008382:	4613      	mov	r3, r2
 8008384:	00db      	lsls	r3, r3, #3
 8008386:	4413      	add	r3, r2
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	440b      	add	r3, r1
 800838c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008390:	2200      	movs	r2, #0
 8008392:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008394:	7bfa      	ldrb	r2, [r7, #15]
 8008396:	6879      	ldr	r1, [r7, #4]
 8008398:	4613      	mov	r3, r2
 800839a:	00db      	lsls	r3, r3, #3
 800839c:	4413      	add	r3, r2
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	440b      	add	r3, r1
 80083a2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80083a6:	2200      	movs	r2, #0
 80083a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80083aa:	7bfb      	ldrb	r3, [r7, #15]
 80083ac:	3301      	adds	r3, #1
 80083ae:	73fb      	strb	r3, [r7, #15]
 80083b0:	7bfa      	ldrb	r2, [r7, #15]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d3b5      	bcc.n	8008326 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	603b      	str	r3, [r7, #0]
 80083c0:	687e      	ldr	r6, [r7, #4]
 80083c2:	466d      	mov	r5, sp
 80083c4:	f106 0410 	add.w	r4, r6, #16
 80083c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80083ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80083cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80083ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80083d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80083d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80083d8:	1d33      	adds	r3, r6, #4
 80083da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80083dc:	6838      	ldr	r0, [r7, #0]
 80083de:	f00a fc7d 	bl	8012cdc <USB_DevInit>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d005      	beq.n	80083f4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2202      	movs	r2, #2
 80083ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	e014      	b.n	800841e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2201      	movs	r2, #1
 8008400:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008408:	2b01      	cmp	r3, #1
 800840a:	d102      	bne.n	8008412 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f001 f96f 	bl	80096f0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4618      	mov	r0, r3
 8008418:	f00b fcbf 	bl	8013d9a <USB_DevDisconnect>

  return HAL_OK;
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	3714      	adds	r7, #20
 8008422:	46bd      	mov	sp, r7
 8008424:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008426 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008426:	b580      	push	{r7, lr}
 8008428:	b084      	sub	sp, #16
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800843a:	2b01      	cmp	r3, #1
 800843c:	d101      	bne.n	8008442 <HAL_PCD_Start+0x1c>
 800843e:	2302      	movs	r3, #2
 8008440:	e022      	b.n	8008488 <HAL_PCD_Start+0x62>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2201      	movs	r2, #1
 8008446:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800844e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008452:	2b00      	cmp	r3, #0
 8008454:	d109      	bne.n	800846a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800845a:	2b01      	cmp	r3, #1
 800845c:	d105      	bne.n	800846a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008462:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4618      	mov	r0, r3
 8008470:	f00a fbc6 	bl	8012c00 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4618      	mov	r0, r3
 800847a:	f00b fc6d 	bl	8013d58 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008486:	2300      	movs	r3, #0
}
 8008488:	4618      	mov	r0, r3
 800848a:	3710      	adds	r7, #16
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008490:	b590      	push	{r4, r7, lr}
 8008492:	b08d      	sub	sp, #52	; 0x34
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800849e:	6a3b      	ldr	r3, [r7, #32]
 80084a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4618      	mov	r0, r3
 80084a8:	f00b fd2b 	bl	8013f02 <USB_GetMode>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	f040 84b7 	bne.w	8008e22 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4618      	mov	r0, r3
 80084ba:	f00b fc8f 	bl	8013ddc <USB_ReadInterrupts>
 80084be:	4603      	mov	r3, r0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	f000 84ad 	beq.w	8008e20 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80084c6:	69fb      	ldr	r3, [r7, #28]
 80084c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	0a1b      	lsrs	r3, r3, #8
 80084d0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4618      	mov	r0, r3
 80084e0:	f00b fc7c 	bl	8013ddc <USB_ReadInterrupts>
 80084e4:	4603      	mov	r3, r0
 80084e6:	f003 0302 	and.w	r3, r3, #2
 80084ea:	2b02      	cmp	r3, #2
 80084ec:	d107      	bne.n	80084fe <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	695a      	ldr	r2, [r3, #20]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f002 0202 	and.w	r2, r2, #2
 80084fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4618      	mov	r0, r3
 8008504:	f00b fc6a 	bl	8013ddc <USB_ReadInterrupts>
 8008508:	4603      	mov	r3, r0
 800850a:	f003 0310 	and.w	r3, r3, #16
 800850e:	2b10      	cmp	r3, #16
 8008510:	d161      	bne.n	80085d6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	699a      	ldr	r2, [r3, #24]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f022 0210 	bic.w	r2, r2, #16
 8008520:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008522:	6a3b      	ldr	r3, [r7, #32]
 8008524:	6a1b      	ldr	r3, [r3, #32]
 8008526:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	f003 020f 	and.w	r2, r3, #15
 800852e:	4613      	mov	r3, r2
 8008530:	00db      	lsls	r3, r3, #3
 8008532:	4413      	add	r3, r2
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	4413      	add	r3, r2
 800853e:	3304      	adds	r3, #4
 8008540:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008542:	69bb      	ldr	r3, [r7, #24]
 8008544:	0c5b      	lsrs	r3, r3, #17
 8008546:	f003 030f 	and.w	r3, r3, #15
 800854a:	2b02      	cmp	r3, #2
 800854c:	d124      	bne.n	8008598 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800854e:	69ba      	ldr	r2, [r7, #24]
 8008550:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008554:	4013      	ands	r3, r2
 8008556:	2b00      	cmp	r3, #0
 8008558:	d035      	beq.n	80085c6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	091b      	lsrs	r3, r3, #4
 8008562:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008564:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008568:	b29b      	uxth	r3, r3
 800856a:	461a      	mov	r2, r3
 800856c:	6a38      	ldr	r0, [r7, #32]
 800856e:	f00b faa1 	bl	8013ab4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	68da      	ldr	r2, [r3, #12]
 8008576:	69bb      	ldr	r3, [r7, #24]
 8008578:	091b      	lsrs	r3, r3, #4
 800857a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800857e:	441a      	add	r2, r3
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	695a      	ldr	r2, [r3, #20]
 8008588:	69bb      	ldr	r3, [r7, #24]
 800858a:	091b      	lsrs	r3, r3, #4
 800858c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008590:	441a      	add	r2, r3
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	615a      	str	r2, [r3, #20]
 8008596:	e016      	b.n	80085c6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	0c5b      	lsrs	r3, r3, #17
 800859c:	f003 030f 	and.w	r3, r3, #15
 80085a0:	2b06      	cmp	r3, #6
 80085a2:	d110      	bne.n	80085c6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80085aa:	2208      	movs	r2, #8
 80085ac:	4619      	mov	r1, r3
 80085ae:	6a38      	ldr	r0, [r7, #32]
 80085b0:	f00b fa80 	bl	8013ab4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	695a      	ldr	r2, [r3, #20]
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	091b      	lsrs	r3, r3, #4
 80085bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80085c0:	441a      	add	r2, r3
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	699a      	ldr	r2, [r3, #24]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f042 0210 	orr.w	r2, r2, #16
 80085d4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4618      	mov	r0, r3
 80085dc:	f00b fbfe 	bl	8013ddc <USB_ReadInterrupts>
 80085e0:	4603      	mov	r3, r0
 80085e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80085e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80085ea:	f040 80a7 	bne.w	800873c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80085ee:	2300      	movs	r3, #0
 80085f0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4618      	mov	r0, r3
 80085f8:	f00b fc03 	bl	8013e02 <USB_ReadDevAllOutEpInterrupt>
 80085fc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80085fe:	e099      	b.n	8008734 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008602:	f003 0301 	and.w	r3, r3, #1
 8008606:	2b00      	cmp	r3, #0
 8008608:	f000 808e 	beq.w	8008728 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008612:	b2d2      	uxtb	r2, r2
 8008614:	4611      	mov	r1, r2
 8008616:	4618      	mov	r0, r3
 8008618:	f00b fc27 	bl	8013e6a <USB_ReadDevOutEPInterrupt>
 800861c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	f003 0301 	and.w	r3, r3, #1
 8008624:	2b00      	cmp	r3, #0
 8008626:	d00c      	beq.n	8008642 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862a:	015a      	lsls	r2, r3, #5
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	4413      	add	r3, r2
 8008630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008634:	461a      	mov	r2, r3
 8008636:	2301      	movs	r3, #1
 8008638:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800863a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 fed1 	bl	80093e4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	f003 0308 	and.w	r3, r3, #8
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00c      	beq.n	8008666 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800864c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864e:	015a      	lsls	r2, r3, #5
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	4413      	add	r3, r2
 8008654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008658:	461a      	mov	r2, r3
 800865a:	2308      	movs	r3, #8
 800865c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800865e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 ffa7 	bl	80095b4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	f003 0310 	and.w	r3, r3, #16
 800866c:	2b00      	cmp	r3, #0
 800866e:	d008      	beq.n	8008682 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008672:	015a      	lsls	r2, r3, #5
 8008674:	69fb      	ldr	r3, [r7, #28]
 8008676:	4413      	add	r3, r2
 8008678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800867c:	461a      	mov	r2, r3
 800867e:	2310      	movs	r3, #16
 8008680:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	f003 0302 	and.w	r3, r3, #2
 8008688:	2b00      	cmp	r3, #0
 800868a:	d030      	beq.n	80086ee <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800868c:	6a3b      	ldr	r3, [r7, #32]
 800868e:	695b      	ldr	r3, [r3, #20]
 8008690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008694:	2b80      	cmp	r3, #128	; 0x80
 8008696:	d109      	bne.n	80086ac <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008698:	69fb      	ldr	r3, [r7, #28]
 800869a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	69fa      	ldr	r2, [r7, #28]
 80086a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80086aa:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80086ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086ae:	4613      	mov	r3, r2
 80086b0:	00db      	lsls	r3, r3, #3
 80086b2:	4413      	add	r3, r2
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	4413      	add	r3, r2
 80086be:	3304      	adds	r3, #4
 80086c0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	78db      	ldrb	r3, [r3, #3]
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d108      	bne.n	80086dc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	2200      	movs	r2, #0
 80086ce:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80086d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	4619      	mov	r1, r3
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f00e fa5a 	bl	8016b90 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80086dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086de:	015a      	lsls	r2, r3, #5
 80086e0:	69fb      	ldr	r3, [r7, #28]
 80086e2:	4413      	add	r3, r2
 80086e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086e8:	461a      	mov	r2, r3
 80086ea:	2302      	movs	r3, #2
 80086ec:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	f003 0320 	and.w	r3, r3, #32
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d008      	beq.n	800870a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80086f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fa:	015a      	lsls	r2, r3, #5
 80086fc:	69fb      	ldr	r3, [r7, #28]
 80086fe:	4413      	add	r3, r2
 8008700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008704:	461a      	mov	r2, r3
 8008706:	2320      	movs	r3, #32
 8008708:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008710:	2b00      	cmp	r3, #0
 8008712:	d009      	beq.n	8008728 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008716:	015a      	lsls	r2, r3, #5
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	4413      	add	r3, r2
 800871c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008720:	461a      	mov	r2, r3
 8008722:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008726:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872a:	3301      	adds	r3, #1
 800872c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800872e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008736:	2b00      	cmp	r3, #0
 8008738:	f47f af62 	bne.w	8008600 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4618      	mov	r0, r3
 8008742:	f00b fb4b 	bl	8013ddc <USB_ReadInterrupts>
 8008746:	4603      	mov	r3, r0
 8008748:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800874c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008750:	f040 80db 	bne.w	800890a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4618      	mov	r0, r3
 800875a:	f00b fb6c 	bl	8013e36 <USB_ReadDevAllInEpInterrupt>
 800875e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008760:	2300      	movs	r3, #0
 8008762:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008764:	e0cd      	b.n	8008902 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008768:	f003 0301 	and.w	r3, r3, #1
 800876c:	2b00      	cmp	r3, #0
 800876e:	f000 80c2 	beq.w	80088f6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008778:	b2d2      	uxtb	r2, r2
 800877a:	4611      	mov	r1, r2
 800877c:	4618      	mov	r0, r3
 800877e:	f00b fb92 	bl	8013ea6 <USB_ReadDevInEPInterrupt>
 8008782:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	f003 0301 	and.w	r3, r3, #1
 800878a:	2b00      	cmp	r3, #0
 800878c:	d057      	beq.n	800883e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800878e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008790:	f003 030f 	and.w	r3, r3, #15
 8008794:	2201      	movs	r2, #1
 8008796:	fa02 f303 	lsl.w	r3, r2, r3
 800879a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800879c:	69fb      	ldr	r3, [r7, #28]
 800879e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	43db      	mvns	r3, r3
 80087a8:	69f9      	ldr	r1, [r7, #28]
 80087aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087ae:	4013      	ands	r3, r2
 80087b0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80087b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b4:	015a      	lsls	r2, r3, #5
 80087b6:	69fb      	ldr	r3, [r7, #28]
 80087b8:	4413      	add	r3, r2
 80087ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087be:	461a      	mov	r2, r3
 80087c0:	2301      	movs	r3, #1
 80087c2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d132      	bne.n	8008832 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80087cc:	6879      	ldr	r1, [r7, #4]
 80087ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087d0:	4613      	mov	r3, r2
 80087d2:	00db      	lsls	r3, r3, #3
 80087d4:	4413      	add	r3, r2
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	440b      	add	r3, r1
 80087da:	3348      	adds	r3, #72	; 0x48
 80087dc:	6819      	ldr	r1, [r3, #0]
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087e2:	4613      	mov	r3, r2
 80087e4:	00db      	lsls	r3, r3, #3
 80087e6:	4413      	add	r3, r2
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	4403      	add	r3, r0
 80087ec:	3344      	adds	r3, #68	; 0x44
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4419      	add	r1, r3
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087f6:	4613      	mov	r3, r2
 80087f8:	00db      	lsls	r3, r3, #3
 80087fa:	4413      	add	r3, r2
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	4403      	add	r3, r0
 8008800:	3348      	adds	r3, #72	; 0x48
 8008802:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008806:	2b00      	cmp	r3, #0
 8008808:	d113      	bne.n	8008832 <HAL_PCD_IRQHandler+0x3a2>
 800880a:	6879      	ldr	r1, [r7, #4]
 800880c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800880e:	4613      	mov	r3, r2
 8008810:	00db      	lsls	r3, r3, #3
 8008812:	4413      	add	r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	440b      	add	r3, r1
 8008818:	334c      	adds	r3, #76	; 0x4c
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d108      	bne.n	8008832 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6818      	ldr	r0, [r3, #0]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800882a:	461a      	mov	r2, r3
 800882c:	2101      	movs	r1, #1
 800882e:	f00b fb9b 	bl	8013f68 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008834:	b2db      	uxtb	r3, r3
 8008836:	4619      	mov	r1, r3
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f00e f924 	bl	8016a86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	f003 0308 	and.w	r3, r3, #8
 8008844:	2b00      	cmp	r3, #0
 8008846:	d008      	beq.n	800885a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884a:	015a      	lsls	r2, r3, #5
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	4413      	add	r3, r2
 8008850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008854:	461a      	mov	r2, r3
 8008856:	2308      	movs	r3, #8
 8008858:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	f003 0310 	and.w	r3, r3, #16
 8008860:	2b00      	cmp	r3, #0
 8008862:	d008      	beq.n	8008876 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008866:	015a      	lsls	r2, r3, #5
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	4413      	add	r3, r2
 800886c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008870:	461a      	mov	r2, r3
 8008872:	2310      	movs	r3, #16
 8008874:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800887c:	2b00      	cmp	r3, #0
 800887e:	d008      	beq.n	8008892 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008882:	015a      	lsls	r2, r3, #5
 8008884:	69fb      	ldr	r3, [r7, #28]
 8008886:	4413      	add	r3, r2
 8008888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800888c:	461a      	mov	r2, r3
 800888e:	2340      	movs	r3, #64	; 0x40
 8008890:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	f003 0302 	and.w	r3, r3, #2
 8008898:	2b00      	cmp	r3, #0
 800889a:	d023      	beq.n	80088e4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800889c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800889e:	6a38      	ldr	r0, [r7, #32]
 80088a0:	f00a fb7a 	bl	8012f98 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80088a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088a6:	4613      	mov	r3, r2
 80088a8:	00db      	lsls	r3, r3, #3
 80088aa:	4413      	add	r3, r2
 80088ac:	009b      	lsls	r3, r3, #2
 80088ae:	3338      	adds	r3, #56	; 0x38
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	4413      	add	r3, r2
 80088b4:	3304      	adds	r3, #4
 80088b6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	78db      	ldrb	r3, [r3, #3]
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d108      	bne.n	80088d2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	2200      	movs	r2, #0
 80088c4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80088c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	4619      	mov	r1, r3
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f00e f971 	bl	8016bb4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80088d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d4:	015a      	lsls	r2, r3, #5
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	4413      	add	r3, r2
 80088da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088de:	461a      	mov	r2, r3
 80088e0:	2302      	movs	r3, #2
 80088e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d003      	beq.n	80088f6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80088ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 fcea 	bl	80092ca <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80088f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f8:	3301      	adds	r3, #1
 80088fa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80088fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088fe:	085b      	lsrs	r3, r3, #1
 8008900:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008904:	2b00      	cmp	r3, #0
 8008906:	f47f af2e 	bne.w	8008766 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4618      	mov	r0, r3
 8008910:	f00b fa64 	bl	8013ddc <USB_ReadInterrupts>
 8008914:	4603      	mov	r3, r0
 8008916:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800891a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800891e:	d122      	bne.n	8008966 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008920:	69fb      	ldr	r3, [r7, #28]
 8008922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	69fa      	ldr	r2, [r7, #28]
 800892a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800892e:	f023 0301 	bic.w	r3, r3, #1
 8008932:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800893a:	2b01      	cmp	r3, #1
 800893c:	d108      	bne.n	8008950 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008946:	2100      	movs	r1, #0
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f000 fef5 	bl	8009738 <HAL_PCDEx_LPM_Callback>
 800894e:	e002      	b.n	8008956 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f00e f90f 	bl	8016b74 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	695a      	ldr	r2, [r3, #20]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008964:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4618      	mov	r0, r3
 800896c:	f00b fa36 	bl	8013ddc <USB_ReadInterrupts>
 8008970:	4603      	mov	r3, r0
 8008972:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008976:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800897a:	d112      	bne.n	80089a2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800897c:	69fb      	ldr	r3, [r7, #28]
 800897e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	f003 0301 	and.w	r3, r3, #1
 8008988:	2b01      	cmp	r3, #1
 800898a:	d102      	bne.n	8008992 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f00e f8cb 	bl	8016b28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	695a      	ldr	r2, [r3, #20]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80089a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4618      	mov	r0, r3
 80089a8:	f00b fa18 	bl	8013ddc <USB_ReadInterrupts>
 80089ac:	4603      	mov	r3, r0
 80089ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089b6:	d121      	bne.n	80089fc <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	695a      	ldr	r2, [r3, #20]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80089c6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d111      	bne.n	80089f6 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2201      	movs	r2, #1
 80089d6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089e0:	089b      	lsrs	r3, r3, #2
 80089e2:	f003 020f 	and.w	r2, r3, #15
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80089ec:	2101      	movs	r1, #1
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 fea2 	bl	8009738 <HAL_PCDEx_LPM_Callback>
 80089f4:	e002      	b.n	80089fc <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f00e f896 	bl	8016b28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4618      	mov	r0, r3
 8008a02:	f00b f9eb 	bl	8013ddc <USB_ReadInterrupts>
 8008a06:	4603      	mov	r3, r0
 8008a08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a10:	f040 80b7 	bne.w	8008b82 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	69fa      	ldr	r2, [r7, #28]
 8008a1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a22:	f023 0301 	bic.w	r3, r3, #1
 8008a26:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	2110      	movs	r1, #16
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f00a fab2 	bl	8012f98 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a34:	2300      	movs	r3, #0
 8008a36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a38:	e046      	b.n	8008ac8 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a3c:	015a      	lsls	r2, r3, #5
 8008a3e:	69fb      	ldr	r3, [r7, #28]
 8008a40:	4413      	add	r3, r2
 8008a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a46:	461a      	mov	r2, r3
 8008a48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008a4c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a50:	015a      	lsls	r2, r3, #5
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	4413      	add	r3, r2
 8008a56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a5e:	0151      	lsls	r1, r2, #5
 8008a60:	69fa      	ldr	r2, [r7, #28]
 8008a62:	440a      	add	r2, r1
 8008a64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a68:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008a6c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a70:	015a      	lsls	r2, r3, #5
 8008a72:	69fb      	ldr	r3, [r7, #28]
 8008a74:	4413      	add	r3, r2
 8008a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008a80:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a84:	015a      	lsls	r2, r3, #5
 8008a86:	69fb      	ldr	r3, [r7, #28]
 8008a88:	4413      	add	r3, r2
 8008a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a92:	0151      	lsls	r1, r2, #5
 8008a94:	69fa      	ldr	r2, [r7, #28]
 8008a96:	440a      	add	r2, r1
 8008a98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008aa0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa4:	015a      	lsls	r2, r3, #5
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ab2:	0151      	lsls	r1, r2, #5
 8008ab4:	69fa      	ldr	r2, [r7, #28]
 8008ab6:	440a      	add	r2, r1
 8008ab8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008abc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008ac0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d3b3      	bcc.n	8008a3a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ad8:	69db      	ldr	r3, [r3, #28]
 8008ada:	69fa      	ldr	r2, [r7, #28]
 8008adc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ae0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008ae4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d016      	beq.n	8008b1c <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008af8:	69fa      	ldr	r2, [r7, #28]
 8008afa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008afe:	f043 030b 	orr.w	r3, r3, #11
 8008b02:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b0e:	69fa      	ldr	r2, [r7, #28]
 8008b10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b14:	f043 030b 	orr.w	r3, r3, #11
 8008b18:	6453      	str	r3, [r2, #68]	; 0x44
 8008b1a:	e015      	b.n	8008b48 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b22:	695a      	ldr	r2, [r3, #20]
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	f242 032b 	movw	r3, #8235	; 0x202b
 8008b30:	4313      	orrs	r3, r2
 8008b32:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b3a:	691b      	ldr	r3, [r3, #16]
 8008b3c:	69fa      	ldr	r2, [r7, #28]
 8008b3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b42:	f043 030b 	orr.w	r3, r3, #11
 8008b46:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	69fa      	ldr	r2, [r7, #28]
 8008b52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b56:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008b5a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6818      	ldr	r0, [r3, #0]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	f00b f9fb 	bl	8013f68 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	695a      	ldr	r2, [r3, #20]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008b80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4618      	mov	r0, r3
 8008b88:	f00b f928 	bl	8013ddc <USB_ReadInterrupts>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b96:	d124      	bne.n	8008be2 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f00b f9bf 	bl	8013f20 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f00a fa73 	bl	8013092 <USB_GetDevSpeed>
 8008bac:	4603      	mov	r3, r0
 8008bae:	461a      	mov	r2, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681c      	ldr	r4, [r3, #0]
 8008bb8:	f001 fd88 	bl	800a6cc <HAL_RCC_GetHCLKFreq>
 8008bbc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	4620      	mov	r0, r4
 8008bc8:	f009 ff78 	bl	8012abc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f00d ff82 	bl	8016ad6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	695a      	ldr	r2, [r3, #20]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008be0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4618      	mov	r0, r3
 8008be8:	f00b f8f8 	bl	8013ddc <USB_ReadInterrupts>
 8008bec:	4603      	mov	r3, r0
 8008bee:	f003 0308 	and.w	r3, r3, #8
 8008bf2:	2b08      	cmp	r3, #8
 8008bf4:	d10a      	bne.n	8008c0c <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f00d ff5f 	bl	8016aba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	695a      	ldr	r2, [r3, #20]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f002 0208 	and.w	r2, r2, #8
 8008c0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4618      	mov	r0, r3
 8008c12:	f00b f8e3 	bl	8013ddc <USB_ReadInterrupts>
 8008c16:	4603      	mov	r3, r0
 8008c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c1c:	2b80      	cmp	r3, #128	; 0x80
 8008c1e:	d122      	bne.n	8008c66 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008c20:	6a3b      	ldr	r3, [r7, #32]
 8008c22:	699b      	ldr	r3, [r3, #24]
 8008c24:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c28:	6a3b      	ldr	r3, [r7, #32]
 8008c2a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8008c30:	e014      	b.n	8008c5c <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008c32:	6879      	ldr	r1, [r7, #4]
 8008c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c36:	4613      	mov	r3, r2
 8008c38:	00db      	lsls	r3, r3, #3
 8008c3a:	4413      	add	r3, r2
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	440b      	add	r3, r1
 8008c40:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d105      	bne.n	8008c56 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	4619      	mov	r1, r3
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 fb09 	bl	8009268 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c58:	3301      	adds	r3, #1
 8008c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d3e5      	bcc.n	8008c32 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f00b f8b6 	bl	8013ddc <USB_ReadInterrupts>
 8008c70:	4603      	mov	r3, r0
 8008c72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c7a:	d13b      	bne.n	8008cf4 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8008c80:	e02b      	b.n	8008cda <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c84:	015a      	lsls	r2, r3, #5
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	4413      	add	r3, r2
 8008c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008c92:	6879      	ldr	r1, [r7, #4]
 8008c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c96:	4613      	mov	r3, r2
 8008c98:	00db      	lsls	r3, r3, #3
 8008c9a:	4413      	add	r3, r2
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	440b      	add	r3, r1
 8008ca0:	3340      	adds	r3, #64	; 0x40
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d115      	bne.n	8008cd4 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008ca8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	da12      	bge.n	8008cd4 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008cae:	6879      	ldr	r1, [r7, #4]
 8008cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	00db      	lsls	r3, r3, #3
 8008cb6:	4413      	add	r3, r2
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	440b      	add	r3, r1
 8008cbc:	333f      	adds	r3, #63	; 0x3f
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	4619      	mov	r1, r3
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 faca 	bl	8009268 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d3ce      	bcc.n	8008c82 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	695a      	ldr	r2, [r3, #20]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008cf2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f00b f86f 	bl	8013ddc <USB_ReadInterrupts>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d08:	d155      	bne.n	8008db6 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8008d0e:	e045      	b.n	8008d9c <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d12:	015a      	lsls	r2, r3, #5
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	4413      	add	r3, r2
 8008d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008d20:	6879      	ldr	r1, [r7, #4]
 8008d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d24:	4613      	mov	r3, r2
 8008d26:	00db      	lsls	r3, r3, #3
 8008d28:	4413      	add	r3, r2
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	440b      	add	r3, r1
 8008d2e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d12e      	bne.n	8008d96 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008d38:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	da2b      	bge.n	8008d96 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8008d4a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d121      	bne.n	8008d96 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008d52:	6879      	ldr	r1, [r7, #4]
 8008d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d56:	4613      	mov	r3, r2
 8008d58:	00db      	lsls	r3, r3, #3
 8008d5a:	4413      	add	r3, r2
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	440b      	add	r3, r1
 8008d60:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008d64:	2201      	movs	r2, #1
 8008d66:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008d68:	6a3b      	ldr	r3, [r7, #32]
 8008d6a:	699b      	ldr	r3, [r3, #24]
 8008d6c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008d70:	6a3b      	ldr	r3, [r7, #32]
 8008d72:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008d74:	6a3b      	ldr	r3, [r7, #32]
 8008d76:	695b      	ldr	r3, [r3, #20]
 8008d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d10a      	bne.n	8008d96 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	69fa      	ldr	r2, [r7, #28]
 8008d8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008d92:	6053      	str	r3, [r2, #4]
            break;
 8008d94:	e007      	b.n	8008da6 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d98:	3301      	adds	r3, #1
 8008d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d3b4      	bcc.n	8008d10 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	695a      	ldr	r2, [r3, #20]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008db4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f00b f80e 	bl	8013ddc <USB_ReadInterrupts>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dca:	d10a      	bne.n	8008de2 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f00d ff03 	bl	8016bd8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	695a      	ldr	r2, [r3, #20]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008de0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4618      	mov	r0, r3
 8008de8:	f00a fff8 	bl	8013ddc <USB_ReadInterrupts>
 8008dec:	4603      	mov	r3, r0
 8008dee:	f003 0304 	and.w	r3, r3, #4
 8008df2:	2b04      	cmp	r3, #4
 8008df4:	d115      	bne.n	8008e22 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008dfe:	69bb      	ldr	r3, [r7, #24]
 8008e00:	f003 0304 	and.w	r3, r3, #4
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d002      	beq.n	8008e0e <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f00d fef3 	bl	8016bf4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	6859      	ldr	r1, [r3, #4]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	69ba      	ldr	r2, [r7, #24]
 8008e1a:	430a      	orrs	r2, r1
 8008e1c:	605a      	str	r2, [r3, #4]
 8008e1e:	e000      	b.n	8008e22 <HAL_PCD_IRQHandler+0x992>
      return;
 8008e20:	bf00      	nop
    }
  }
}
 8008e22:	3734      	adds	r7, #52	; 0x34
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd90      	pop	{r4, r7, pc}

08008e28 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b082      	sub	sp, #8
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	460b      	mov	r3, r1
 8008e32:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d101      	bne.n	8008e42 <HAL_PCD_SetAddress+0x1a>
 8008e3e:	2302      	movs	r3, #2
 8008e40:	e013      	b.n	8008e6a <HAL_PCD_SetAddress+0x42>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2201      	movs	r2, #1
 8008e46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	78fa      	ldrb	r2, [r7, #3]
 8008e4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	78fa      	ldrb	r2, [r7, #3]
 8008e58:	4611      	mov	r1, r2
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f00a ff56 	bl	8013d0c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3708      	adds	r7, #8
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b084      	sub	sp, #16
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
 8008e7a:	4608      	mov	r0, r1
 8008e7c:	4611      	mov	r1, r2
 8008e7e:	461a      	mov	r2, r3
 8008e80:	4603      	mov	r3, r0
 8008e82:	70fb      	strb	r3, [r7, #3]
 8008e84:	460b      	mov	r3, r1
 8008e86:	803b      	strh	r3, [r7, #0]
 8008e88:	4613      	mov	r3, r2
 8008e8a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008e90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	da0f      	bge.n	8008eb8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008e98:	78fb      	ldrb	r3, [r7, #3]
 8008e9a:	f003 020f 	and.w	r2, r3, #15
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	00db      	lsls	r3, r3, #3
 8008ea2:	4413      	add	r3, r2
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	3338      	adds	r3, #56	; 0x38
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	4413      	add	r3, r2
 8008eac:	3304      	adds	r3, #4
 8008eae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	705a      	strb	r2, [r3, #1]
 8008eb6:	e00f      	b.n	8008ed8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008eb8:	78fb      	ldrb	r3, [r7, #3]
 8008eba:	f003 020f 	and.w	r2, r3, #15
 8008ebe:	4613      	mov	r3, r2
 8008ec0:	00db      	lsls	r3, r3, #3
 8008ec2:	4413      	add	r3, r2
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	4413      	add	r3, r2
 8008ece:	3304      	adds	r3, #4
 8008ed0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008ed8:	78fb      	ldrb	r3, [r7, #3]
 8008eda:	f003 030f 	and.w	r3, r3, #15
 8008ede:	b2da      	uxtb	r2, r3
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008ee4:	883a      	ldrh	r2, [r7, #0]
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	78ba      	ldrb	r2, [r7, #2]
 8008eee:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	785b      	ldrb	r3, [r3, #1]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d004      	beq.n	8008f02 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	b29a      	uxth	r2, r3
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008f02:	78bb      	ldrb	r3, [r7, #2]
 8008f04:	2b02      	cmp	r3, #2
 8008f06:	d102      	bne.n	8008f0e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d101      	bne.n	8008f1c <HAL_PCD_EP_Open+0xaa>
 8008f18:	2302      	movs	r3, #2
 8008f1a:	e00e      	b.n	8008f3a <HAL_PCD_EP_Open+0xc8>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	68f9      	ldr	r1, [r7, #12]
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f00a f8d6 	bl	80130dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8008f38:	7afb      	ldrb	r3, [r7, #11]
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3710      	adds	r7, #16
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008f42:	b580      	push	{r7, lr}
 8008f44:	b084      	sub	sp, #16
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008f4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	da0f      	bge.n	8008f76 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f56:	78fb      	ldrb	r3, [r7, #3]
 8008f58:	f003 020f 	and.w	r2, r3, #15
 8008f5c:	4613      	mov	r3, r2
 8008f5e:	00db      	lsls	r3, r3, #3
 8008f60:	4413      	add	r3, r2
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	3338      	adds	r3, #56	; 0x38
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	4413      	add	r3, r2
 8008f6a:	3304      	adds	r3, #4
 8008f6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2201      	movs	r2, #1
 8008f72:	705a      	strb	r2, [r3, #1]
 8008f74:	e00f      	b.n	8008f96 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008f76:	78fb      	ldrb	r3, [r7, #3]
 8008f78:	f003 020f 	and.w	r2, r3, #15
 8008f7c:	4613      	mov	r3, r2
 8008f7e:	00db      	lsls	r3, r3, #3
 8008f80:	4413      	add	r3, r2
 8008f82:	009b      	lsls	r3, r3, #2
 8008f84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	3304      	adds	r3, #4
 8008f8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2200      	movs	r2, #0
 8008f94:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008f96:	78fb      	ldrb	r3, [r7, #3]
 8008f98:	f003 030f 	and.w	r3, r3, #15
 8008f9c:	b2da      	uxtb	r2, r3
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d101      	bne.n	8008fb0 <HAL_PCD_EP_Close+0x6e>
 8008fac:	2302      	movs	r3, #2
 8008fae:	e00e      	b.n	8008fce <HAL_PCD_EP_Close+0x8c>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	68f9      	ldr	r1, [r7, #12]
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f00a f914 	bl	80131ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8008fcc:	2300      	movs	r3, #0
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3710      	adds	r7, #16
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b086      	sub	sp, #24
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	60f8      	str	r0, [r7, #12]
 8008fde:	607a      	str	r2, [r7, #4]
 8008fe0:	603b      	str	r3, [r7, #0]
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008fe6:	7afb      	ldrb	r3, [r7, #11]
 8008fe8:	f003 020f 	and.w	r2, r3, #15
 8008fec:	4613      	mov	r3, r2
 8008fee:	00db      	lsls	r3, r3, #3
 8008ff0:	4413      	add	r3, r2
 8008ff2:	009b      	lsls	r3, r3, #2
 8008ff4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008ff8:	68fa      	ldr	r2, [r7, #12]
 8008ffa:	4413      	add	r3, r2
 8008ffc:	3304      	adds	r3, #4
 8008ffe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	683a      	ldr	r2, [r7, #0]
 800900a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	2200      	movs	r2, #0
 8009010:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	2200      	movs	r2, #0
 8009016:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009018:	7afb      	ldrb	r3, [r7, #11]
 800901a:	f003 030f 	and.w	r3, r3, #15
 800901e:	b2da      	uxtb	r2, r3
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	2b01      	cmp	r3, #1
 800902a:	d102      	bne.n	8009032 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	6818      	ldr	r0, [r3, #0]
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	68db      	ldr	r3, [r3, #12]
 800903a:	b2db      	uxtb	r3, r3
 800903c:	461a      	mov	r2, r3
 800903e:	6979      	ldr	r1, [r7, #20]
 8009040:	f00a f9b0 	bl	80133a4 <USB_EPStartXfer>

  return HAL_OK;
 8009044:	2300      	movs	r3, #0
}
 8009046:	4618      	mov	r0, r3
 8009048:	3718      	adds	r7, #24
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}

0800904e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800904e:	b480      	push	{r7}
 8009050:	b083      	sub	sp, #12
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
 8009056:	460b      	mov	r3, r1
 8009058:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800905a:	78fb      	ldrb	r3, [r7, #3]
 800905c:	f003 020f 	and.w	r2, r3, #15
 8009060:	6879      	ldr	r1, [r7, #4]
 8009062:	4613      	mov	r3, r2
 8009064:	00db      	lsls	r3, r3, #3
 8009066:	4413      	add	r3, r2
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	440b      	add	r3, r1
 800906c:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8009070:	681b      	ldr	r3, [r3, #0]
}
 8009072:	4618      	mov	r0, r3
 8009074:	370c      	adds	r7, #12
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr

0800907e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800907e:	b580      	push	{r7, lr}
 8009080:	b086      	sub	sp, #24
 8009082:	af00      	add	r7, sp, #0
 8009084:	60f8      	str	r0, [r7, #12]
 8009086:	607a      	str	r2, [r7, #4]
 8009088:	603b      	str	r3, [r7, #0]
 800908a:	460b      	mov	r3, r1
 800908c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800908e:	7afb      	ldrb	r3, [r7, #11]
 8009090:	f003 020f 	and.w	r2, r3, #15
 8009094:	4613      	mov	r3, r2
 8009096:	00db      	lsls	r3, r3, #3
 8009098:	4413      	add	r3, r2
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	3338      	adds	r3, #56	; 0x38
 800909e:	68fa      	ldr	r2, [r7, #12]
 80090a0:	4413      	add	r3, r2
 80090a2:	3304      	adds	r3, #4
 80090a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	683a      	ldr	r2, [r7, #0]
 80090b0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	2200      	movs	r2, #0
 80090b6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	2201      	movs	r2, #1
 80090bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80090be:	7afb      	ldrb	r3, [r7, #11]
 80090c0:	f003 030f 	and.w	r3, r3, #15
 80090c4:	b2da      	uxtb	r2, r3
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d102      	bne.n	80090d8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6818      	ldr	r0, [r3, #0]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	461a      	mov	r2, r3
 80090e4:	6979      	ldr	r1, [r7, #20]
 80090e6:	f00a f95d 	bl	80133a4 <USB_EPStartXfer>

  return HAL_OK;
 80090ea:	2300      	movs	r3, #0
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3718      	adds	r7, #24
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	460b      	mov	r3, r1
 80090fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009100:	78fb      	ldrb	r3, [r7, #3]
 8009102:	f003 020f 	and.w	r2, r3, #15
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	429a      	cmp	r2, r3
 800910c:	d901      	bls.n	8009112 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800910e:	2301      	movs	r3, #1
 8009110:	e050      	b.n	80091b4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009112:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009116:	2b00      	cmp	r3, #0
 8009118:	da0f      	bge.n	800913a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800911a:	78fb      	ldrb	r3, [r7, #3]
 800911c:	f003 020f 	and.w	r2, r3, #15
 8009120:	4613      	mov	r3, r2
 8009122:	00db      	lsls	r3, r3, #3
 8009124:	4413      	add	r3, r2
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	3338      	adds	r3, #56	; 0x38
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	4413      	add	r3, r2
 800912e:	3304      	adds	r3, #4
 8009130:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2201      	movs	r2, #1
 8009136:	705a      	strb	r2, [r3, #1]
 8009138:	e00d      	b.n	8009156 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800913a:	78fa      	ldrb	r2, [r7, #3]
 800913c:	4613      	mov	r3, r2
 800913e:	00db      	lsls	r3, r3, #3
 8009140:	4413      	add	r3, r2
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009148:	687a      	ldr	r2, [r7, #4]
 800914a:	4413      	add	r3, r2
 800914c:	3304      	adds	r3, #4
 800914e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2200      	movs	r2, #0
 8009154:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2201      	movs	r2, #1
 800915a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800915c:	78fb      	ldrb	r3, [r7, #3]
 800915e:	f003 030f 	and.w	r3, r3, #15
 8009162:	b2da      	uxtb	r2, r3
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800916e:	2b01      	cmp	r3, #1
 8009170:	d101      	bne.n	8009176 <HAL_PCD_EP_SetStall+0x82>
 8009172:	2302      	movs	r3, #2
 8009174:	e01e      	b.n	80091b4 <HAL_PCD_EP_SetStall+0xc0>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2201      	movs	r2, #1
 800917a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	68f9      	ldr	r1, [r7, #12]
 8009184:	4618      	mov	r0, r3
 8009186:	f00a fced 	bl	8013b64 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800918a:	78fb      	ldrb	r3, [r7, #3]
 800918c:	f003 030f 	and.w	r3, r3, #15
 8009190:	2b00      	cmp	r3, #0
 8009192:	d10a      	bne.n	80091aa <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6818      	ldr	r0, [r3, #0]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	68db      	ldr	r3, [r3, #12]
 800919c:	b2d9      	uxtb	r1, r3
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80091a4:	461a      	mov	r2, r3
 80091a6:	f00a fedf 	bl	8013f68 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2200      	movs	r2, #0
 80091ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80091b2:	2300      	movs	r3, #0
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3710      	adds	r7, #16
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	460b      	mov	r3, r1
 80091c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80091c8:	78fb      	ldrb	r3, [r7, #3]
 80091ca:	f003 020f 	and.w	r2, r3, #15
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d901      	bls.n	80091da <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	e042      	b.n	8009260 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80091da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	da0f      	bge.n	8009202 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091e2:	78fb      	ldrb	r3, [r7, #3]
 80091e4:	f003 020f 	and.w	r2, r3, #15
 80091e8:	4613      	mov	r3, r2
 80091ea:	00db      	lsls	r3, r3, #3
 80091ec:	4413      	add	r3, r2
 80091ee:	009b      	lsls	r3, r3, #2
 80091f0:	3338      	adds	r3, #56	; 0x38
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	4413      	add	r3, r2
 80091f6:	3304      	adds	r3, #4
 80091f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2201      	movs	r2, #1
 80091fe:	705a      	strb	r2, [r3, #1]
 8009200:	e00f      	b.n	8009222 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009202:	78fb      	ldrb	r3, [r7, #3]
 8009204:	f003 020f 	and.w	r2, r3, #15
 8009208:	4613      	mov	r3, r2
 800920a:	00db      	lsls	r3, r3, #3
 800920c:	4413      	add	r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	4413      	add	r3, r2
 8009218:	3304      	adds	r3, #4
 800921a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2200      	movs	r2, #0
 8009220:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2200      	movs	r2, #0
 8009226:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009228:	78fb      	ldrb	r3, [r7, #3]
 800922a:	f003 030f 	and.w	r3, r3, #15
 800922e:	b2da      	uxtb	r2, r3
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800923a:	2b01      	cmp	r3, #1
 800923c:	d101      	bne.n	8009242 <HAL_PCD_EP_ClrStall+0x86>
 800923e:	2302      	movs	r3, #2
 8009240:	e00e      	b.n	8009260 <HAL_PCD_EP_ClrStall+0xa4>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2201      	movs	r2, #1
 8009246:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	68f9      	ldr	r1, [r7, #12]
 8009250:	4618      	mov	r0, r3
 8009252:	f00a fcf5 	bl	8013c40 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800925e:	2300      	movs	r3, #0
}
 8009260:	4618      	mov	r0, r3
 8009262:	3710      	adds	r7, #16
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	460b      	mov	r3, r1
 8009272:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009274:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009278:	2b00      	cmp	r3, #0
 800927a:	da0c      	bge.n	8009296 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800927c:	78fb      	ldrb	r3, [r7, #3]
 800927e:	f003 020f 	and.w	r2, r3, #15
 8009282:	4613      	mov	r3, r2
 8009284:	00db      	lsls	r3, r3, #3
 8009286:	4413      	add	r3, r2
 8009288:	009b      	lsls	r3, r3, #2
 800928a:	3338      	adds	r3, #56	; 0x38
 800928c:	687a      	ldr	r2, [r7, #4]
 800928e:	4413      	add	r3, r2
 8009290:	3304      	adds	r3, #4
 8009292:	60fb      	str	r3, [r7, #12]
 8009294:	e00c      	b.n	80092b0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009296:	78fb      	ldrb	r3, [r7, #3]
 8009298:	f003 020f 	and.w	r2, r3, #15
 800929c:	4613      	mov	r3, r2
 800929e:	00db      	lsls	r3, r3, #3
 80092a0:	4413      	add	r3, r2
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	4413      	add	r3, r2
 80092ac:	3304      	adds	r3, #4
 80092ae:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	68f9      	ldr	r1, [r7, #12]
 80092b6:	4618      	mov	r0, r3
 80092b8:	f00a fb14 	bl	80138e4 <USB_EPStopXfer>
 80092bc:	4603      	mov	r3, r0
 80092be:	72fb      	strb	r3, [r7, #11]

  return ret;
 80092c0:	7afb      	ldrb	r3, [r7, #11]
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3710      	adds	r7, #16
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}

080092ca <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80092ca:	b580      	push	{r7, lr}
 80092cc:	b08a      	sub	sp, #40	; 0x28
 80092ce:	af02      	add	r7, sp, #8
 80092d0:	6078      	str	r0, [r7, #4]
 80092d2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80092de:	683a      	ldr	r2, [r7, #0]
 80092e0:	4613      	mov	r3, r2
 80092e2:	00db      	lsls	r3, r3, #3
 80092e4:	4413      	add	r3, r2
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	3338      	adds	r3, #56	; 0x38
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	4413      	add	r3, r2
 80092ee:	3304      	adds	r3, #4
 80092f0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	695a      	ldr	r2, [r3, #20]
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	691b      	ldr	r3, [r3, #16]
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d901      	bls.n	8009302 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80092fe:	2301      	movs	r3, #1
 8009300:	e06c      	b.n	80093dc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	691a      	ldr	r2, [r3, #16]
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	695b      	ldr	r3, [r3, #20]
 800930a:	1ad3      	subs	r3, r2, r3
 800930c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	69fa      	ldr	r2, [r7, #28]
 8009314:	429a      	cmp	r2, r3
 8009316:	d902      	bls.n	800931e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800931e:	69fb      	ldr	r3, [r7, #28]
 8009320:	3303      	adds	r3, #3
 8009322:	089b      	lsrs	r3, r3, #2
 8009324:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009326:	e02b      	b.n	8009380 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	691a      	ldr	r2, [r3, #16]
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	695b      	ldr	r3, [r3, #20]
 8009330:	1ad3      	subs	r3, r2, r3
 8009332:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	69fa      	ldr	r2, [r7, #28]
 800933a:	429a      	cmp	r2, r3
 800933c:	d902      	bls.n	8009344 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	689b      	ldr	r3, [r3, #8]
 8009342:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	3303      	adds	r3, #3
 8009348:	089b      	lsrs	r3, r3, #2
 800934a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	68d9      	ldr	r1, [r3, #12]
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	b2da      	uxtb	r2, r3
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800935c:	b2db      	uxtb	r3, r3
 800935e:	9300      	str	r3, [sp, #0]
 8009360:	4603      	mov	r3, r0
 8009362:	6978      	ldr	r0, [r7, #20]
 8009364:	f00a fb68 	bl	8013a38 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	68da      	ldr	r2, [r3, #12]
 800936c:	69fb      	ldr	r3, [r7, #28]
 800936e:	441a      	add	r2, r3
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	695a      	ldr	r2, [r3, #20]
 8009378:	69fb      	ldr	r3, [r7, #28]
 800937a:	441a      	add	r2, r3
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	015a      	lsls	r2, r3, #5
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	4413      	add	r3, r2
 8009388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800938c:	699b      	ldr	r3, [r3, #24]
 800938e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009390:	69ba      	ldr	r2, [r7, #24]
 8009392:	429a      	cmp	r2, r3
 8009394:	d809      	bhi.n	80093aa <PCD_WriteEmptyTxFifo+0xe0>
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	695a      	ldr	r2, [r3, #20]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800939e:	429a      	cmp	r2, r3
 80093a0:	d203      	bcs.n	80093aa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	691b      	ldr	r3, [r3, #16]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d1be      	bne.n	8009328 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	691a      	ldr	r2, [r3, #16]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	695b      	ldr	r3, [r3, #20]
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d811      	bhi.n	80093da <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	f003 030f 	and.w	r3, r3, #15
 80093bc:	2201      	movs	r2, #1
 80093be:	fa02 f303 	lsl.w	r3, r2, r3
 80093c2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	43db      	mvns	r3, r3
 80093d0:	6939      	ldr	r1, [r7, #16]
 80093d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093d6:	4013      	ands	r3, r2
 80093d8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80093da:	2300      	movs	r3, #0
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3720      	adds	r7, #32
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b088      	sub	sp, #32
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093f4:	69fb      	ldr	r3, [r7, #28]
 80093f6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80093f8:	69fb      	ldr	r3, [r7, #28]
 80093fa:	333c      	adds	r3, #60	; 0x3c
 80093fc:	3304      	adds	r3, #4
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	015a      	lsls	r2, r3, #5
 8009406:	69bb      	ldr	r3, [r7, #24]
 8009408:	4413      	add	r3, r2
 800940a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800940e:	689b      	ldr	r3, [r3, #8]
 8009410:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	68db      	ldr	r3, [r3, #12]
 8009416:	2b01      	cmp	r3, #1
 8009418:	d17b      	bne.n	8009512 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	f003 0308 	and.w	r3, r3, #8
 8009420:	2b00      	cmp	r3, #0
 8009422:	d015      	beq.n	8009450 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	4a61      	ldr	r2, [pc, #388]	; (80095ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009428:	4293      	cmp	r3, r2
 800942a:	f240 80b9 	bls.w	80095a0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009434:	2b00      	cmp	r3, #0
 8009436:	f000 80b3 	beq.w	80095a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	015a      	lsls	r2, r3, #5
 800943e:	69bb      	ldr	r3, [r7, #24]
 8009440:	4413      	add	r3, r2
 8009442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009446:	461a      	mov	r2, r3
 8009448:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800944c:	6093      	str	r3, [r2, #8]
 800944e:	e0a7      	b.n	80095a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	f003 0320 	and.w	r3, r3, #32
 8009456:	2b00      	cmp	r3, #0
 8009458:	d009      	beq.n	800946e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	015a      	lsls	r2, r3, #5
 800945e:	69bb      	ldr	r3, [r7, #24]
 8009460:	4413      	add	r3, r2
 8009462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009466:	461a      	mov	r2, r3
 8009468:	2320      	movs	r3, #32
 800946a:	6093      	str	r3, [r2, #8]
 800946c:	e098      	b.n	80095a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009474:	2b00      	cmp	r3, #0
 8009476:	f040 8093 	bne.w	80095a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	4a4b      	ldr	r2, [pc, #300]	; (80095ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d90f      	bls.n	80094a2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009488:	2b00      	cmp	r3, #0
 800948a:	d00a      	beq.n	80094a2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	015a      	lsls	r2, r3, #5
 8009490:	69bb      	ldr	r3, [r7, #24]
 8009492:	4413      	add	r3, r2
 8009494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009498:	461a      	mov	r2, r3
 800949a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800949e:	6093      	str	r3, [r2, #8]
 80094a0:	e07e      	b.n	80095a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80094a2:	683a      	ldr	r2, [r7, #0]
 80094a4:	4613      	mov	r3, r2
 80094a6:	00db      	lsls	r3, r3, #3
 80094a8:	4413      	add	r3, r2
 80094aa:	009b      	lsls	r3, r3, #2
 80094ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	4413      	add	r3, r2
 80094b4:	3304      	adds	r3, #4
 80094b6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	6a1a      	ldr	r2, [r3, #32]
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	0159      	lsls	r1, r3, #5
 80094c0:	69bb      	ldr	r3, [r7, #24]
 80094c2:	440b      	add	r3, r1
 80094c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094c8:	691b      	ldr	r3, [r3, #16]
 80094ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094ce:	1ad2      	subs	r2, r2, r3
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d114      	bne.n	8009504 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	691b      	ldr	r3, [r3, #16]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d109      	bne.n	80094f6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6818      	ldr	r0, [r3, #0]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80094ec:	461a      	mov	r2, r3
 80094ee:	2101      	movs	r1, #1
 80094f0:	f00a fd3a 	bl	8013f68 <USB_EP0_OutStart>
 80094f4:	e006      	b.n	8009504 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	68da      	ldr	r2, [r3, #12]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	695b      	ldr	r3, [r3, #20]
 80094fe:	441a      	add	r2, r3
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	b2db      	uxtb	r3, r3
 8009508:	4619      	mov	r1, r3
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f00d faa0 	bl	8016a50 <HAL_PCD_DataOutStageCallback>
 8009510:	e046      	b.n	80095a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	4a26      	ldr	r2, [pc, #152]	; (80095b0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d124      	bne.n	8009564 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009520:	2b00      	cmp	r3, #0
 8009522:	d00a      	beq.n	800953a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	015a      	lsls	r2, r3, #5
 8009528:	69bb      	ldr	r3, [r7, #24]
 800952a:	4413      	add	r3, r2
 800952c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009530:	461a      	mov	r2, r3
 8009532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009536:	6093      	str	r3, [r2, #8]
 8009538:	e032      	b.n	80095a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	f003 0320 	and.w	r3, r3, #32
 8009540:	2b00      	cmp	r3, #0
 8009542:	d008      	beq.n	8009556 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	015a      	lsls	r2, r3, #5
 8009548:	69bb      	ldr	r3, [r7, #24]
 800954a:	4413      	add	r3, r2
 800954c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009550:	461a      	mov	r2, r3
 8009552:	2320      	movs	r3, #32
 8009554:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	b2db      	uxtb	r3, r3
 800955a:	4619      	mov	r1, r3
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f00d fa77 	bl	8016a50 <HAL_PCD_DataOutStageCallback>
 8009562:	e01d      	b.n	80095a0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d114      	bne.n	8009594 <PCD_EP_OutXfrComplete_int+0x1b0>
 800956a:	6879      	ldr	r1, [r7, #4]
 800956c:	683a      	ldr	r2, [r7, #0]
 800956e:	4613      	mov	r3, r2
 8009570:	00db      	lsls	r3, r3, #3
 8009572:	4413      	add	r3, r2
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	440b      	add	r3, r1
 8009578:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d108      	bne.n	8009594 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6818      	ldr	r0, [r3, #0]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800958c:	461a      	mov	r2, r3
 800958e:	2100      	movs	r1, #0
 8009590:	f00a fcea 	bl	8013f68 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	b2db      	uxtb	r3, r3
 8009598:	4619      	mov	r1, r3
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f00d fa58 	bl	8016a50 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80095a0:	2300      	movs	r3, #0
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3720      	adds	r7, #32
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop
 80095ac:	4f54300a 	.word	0x4f54300a
 80095b0:	4f54310a 	.word	0x4f54310a

080095b4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b086      	sub	sp, #24
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	333c      	adds	r3, #60	; 0x3c
 80095cc:	3304      	adds	r3, #4
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	015a      	lsls	r2, r3, #5
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	4413      	add	r3, r2
 80095da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095de:	689b      	ldr	r3, [r3, #8]
 80095e0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	4a15      	ldr	r2, [pc, #84]	; (800963c <PCD_EP_OutSetupPacket_int+0x88>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d90e      	bls.n	8009608 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d009      	beq.n	8009608 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	015a      	lsls	r2, r3, #5
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	4413      	add	r3, r2
 80095fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009600:	461a      	mov	r2, r3
 8009602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009606:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f00d fa0f 	bl	8016a2c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	4a0a      	ldr	r2, [pc, #40]	; (800963c <PCD_EP_OutSetupPacket_int+0x88>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d90c      	bls.n	8009630 <PCD_EP_OutSetupPacket_int+0x7c>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	68db      	ldr	r3, [r3, #12]
 800961a:	2b01      	cmp	r3, #1
 800961c:	d108      	bne.n	8009630 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6818      	ldr	r0, [r3, #0]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009628:	461a      	mov	r2, r3
 800962a:	2101      	movs	r1, #1
 800962c:	f00a fc9c 	bl	8013f68 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009630:	2300      	movs	r3, #0
}
 8009632:	4618      	mov	r0, r3
 8009634:	3718      	adds	r7, #24
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	4f54300a 	.word	0x4f54300a

08009640 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009640:	b480      	push	{r7}
 8009642:	b085      	sub	sp, #20
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	460b      	mov	r3, r1
 800964a:	70fb      	strb	r3, [r7, #3]
 800964c:	4613      	mov	r3, r2
 800964e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009656:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009658:	78fb      	ldrb	r3, [r7, #3]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d107      	bne.n	800966e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800965e:	883b      	ldrh	r3, [r7, #0]
 8009660:	0419      	lsls	r1, r3, #16
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	68ba      	ldr	r2, [r7, #8]
 8009668:	430a      	orrs	r2, r1
 800966a:	629a      	str	r2, [r3, #40]	; 0x28
 800966c:	e028      	b.n	80096c0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009674:	0c1b      	lsrs	r3, r3, #16
 8009676:	68ba      	ldr	r2, [r7, #8]
 8009678:	4413      	add	r3, r2
 800967a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800967c:	2300      	movs	r3, #0
 800967e:	73fb      	strb	r3, [r7, #15]
 8009680:	e00d      	b.n	800969e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681a      	ldr	r2, [r3, #0]
 8009686:	7bfb      	ldrb	r3, [r7, #15]
 8009688:	3340      	adds	r3, #64	; 0x40
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	4413      	add	r3, r2
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	0c1b      	lsrs	r3, r3, #16
 8009692:	68ba      	ldr	r2, [r7, #8]
 8009694:	4413      	add	r3, r2
 8009696:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009698:	7bfb      	ldrb	r3, [r7, #15]
 800969a:	3301      	adds	r3, #1
 800969c:	73fb      	strb	r3, [r7, #15]
 800969e:	7bfa      	ldrb	r2, [r7, #15]
 80096a0:	78fb      	ldrb	r3, [r7, #3]
 80096a2:	3b01      	subs	r3, #1
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d3ec      	bcc.n	8009682 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80096a8:	883b      	ldrh	r3, [r7, #0]
 80096aa:	0418      	lsls	r0, r3, #16
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6819      	ldr	r1, [r3, #0]
 80096b0:	78fb      	ldrb	r3, [r7, #3]
 80096b2:	3b01      	subs	r3, #1
 80096b4:	68ba      	ldr	r2, [r7, #8]
 80096b6:	4302      	orrs	r2, r0
 80096b8:	3340      	adds	r3, #64	; 0x40
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	440b      	add	r3, r1
 80096be:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80096c0:	2300      	movs	r3, #0
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3714      	adds	r7, #20
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr

080096ce <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80096ce:	b480      	push	{r7}
 80096d0:	b083      	sub	sp, #12
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	6078      	str	r0, [r7, #4]
 80096d6:	460b      	mov	r3, r1
 80096d8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	887a      	ldrh	r2, [r7, #2]
 80096e0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80096e2:	2300      	movs	r3, #0
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	370c      	adds	r7, #12
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr

080096f0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b085      	sub	sp, #20
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2201      	movs	r2, #1
 8009702:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	699b      	ldr	r3, [r3, #24]
 8009712:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800971e:	4b05      	ldr	r3, [pc, #20]	; (8009734 <HAL_PCDEx_ActivateLPM+0x44>)
 8009720:	4313      	orrs	r3, r2
 8009722:	68fa      	ldr	r2, [r7, #12]
 8009724:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009726:	2300      	movs	r3, #0
}
 8009728:	4618      	mov	r0, r3
 800972a:	3714      	adds	r7, #20
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr
 8009734:	10000003 	.word	0x10000003

08009738 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009738:	b480      	push	{r7}
 800973a:	b083      	sub	sp, #12
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	460b      	mov	r3, r1
 8009742:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009744:	bf00      	nop
 8009746:	370c      	adds	r7, #12
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr

08009750 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b084      	sub	sp, #16
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009758:	4b19      	ldr	r3, [pc, #100]	; (80097c0 <HAL_PWREx_ConfigSupply+0x70>)
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	f003 0304 	and.w	r3, r3, #4
 8009760:	2b04      	cmp	r3, #4
 8009762:	d00a      	beq.n	800977a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009764:	4b16      	ldr	r3, [pc, #88]	; (80097c0 <HAL_PWREx_ConfigSupply+0x70>)
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	f003 0307 	and.w	r3, r3, #7
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	429a      	cmp	r2, r3
 8009770:	d001      	beq.n	8009776 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009772:	2301      	movs	r3, #1
 8009774:	e01f      	b.n	80097b6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009776:	2300      	movs	r3, #0
 8009778:	e01d      	b.n	80097b6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800977a:	4b11      	ldr	r3, [pc, #68]	; (80097c0 <HAL_PWREx_ConfigSupply+0x70>)
 800977c:	68db      	ldr	r3, [r3, #12]
 800977e:	f023 0207 	bic.w	r2, r3, #7
 8009782:	490f      	ldr	r1, [pc, #60]	; (80097c0 <HAL_PWREx_ConfigSupply+0x70>)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	4313      	orrs	r3, r2
 8009788:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800978a:	f7fa f90f 	bl	80039ac <HAL_GetTick>
 800978e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009790:	e009      	b.n	80097a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009792:	f7fa f90b 	bl	80039ac <HAL_GetTick>
 8009796:	4602      	mov	r2, r0
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	1ad3      	subs	r3, r2, r3
 800979c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80097a0:	d901      	bls.n	80097a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80097a2:	2301      	movs	r3, #1
 80097a4:	e007      	b.n	80097b6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80097a6:	4b06      	ldr	r3, [pc, #24]	; (80097c0 <HAL_PWREx_ConfigSupply+0x70>)
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80097ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097b2:	d1ee      	bne.n	8009792 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80097b4:	2300      	movs	r3, #0
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
 80097be:	bf00      	nop
 80097c0:	58024800 	.word	0x58024800

080097c4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80097c4:	b480      	push	{r7}
 80097c6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80097c8:	4b05      	ldr	r3, [pc, #20]	; (80097e0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	4a04      	ldr	r2, [pc, #16]	; (80097e0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80097ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80097d2:	60d3      	str	r3, [r2, #12]
}
 80097d4:	bf00      	nop
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr
 80097de:	bf00      	nop
 80097e0:	58024800 	.word	0x58024800

080097e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b08c      	sub	sp, #48	; 0x30
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d101      	bne.n	80097f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	e3c8      	b.n	8009f88 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f003 0301 	and.w	r3, r3, #1
 80097fe:	2b00      	cmp	r3, #0
 8009800:	f000 8087 	beq.w	8009912 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009804:	4b88      	ldr	r3, [pc, #544]	; (8009a28 <HAL_RCC_OscConfig+0x244>)
 8009806:	691b      	ldr	r3, [r3, #16]
 8009808:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800980c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800980e:	4b86      	ldr	r3, [pc, #536]	; (8009a28 <HAL_RCC_OscConfig+0x244>)
 8009810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009812:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009816:	2b10      	cmp	r3, #16
 8009818:	d007      	beq.n	800982a <HAL_RCC_OscConfig+0x46>
 800981a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800981c:	2b18      	cmp	r3, #24
 800981e:	d110      	bne.n	8009842 <HAL_RCC_OscConfig+0x5e>
 8009820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009822:	f003 0303 	and.w	r3, r3, #3
 8009826:	2b02      	cmp	r3, #2
 8009828:	d10b      	bne.n	8009842 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800982a:	4b7f      	ldr	r3, [pc, #508]	; (8009a28 <HAL_RCC_OscConfig+0x244>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009832:	2b00      	cmp	r3, #0
 8009834:	d06c      	beq.n	8009910 <HAL_RCC_OscConfig+0x12c>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d168      	bne.n	8009910 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800983e:	2301      	movs	r3, #1
 8009840:	e3a2      	b.n	8009f88 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800984a:	d106      	bne.n	800985a <HAL_RCC_OscConfig+0x76>
 800984c:	4b76      	ldr	r3, [pc, #472]	; (8009a28 <HAL_RCC_OscConfig+0x244>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a75      	ldr	r2, [pc, #468]	; (8009a28 <HAL_RCC_OscConfig+0x244>)
 8009852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009856:	6013      	str	r3, [r2, #0]
 8009858:	e02e      	b.n	80098b8 <HAL_RCC_OscConfig+0xd4>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d10c      	bne.n	800987c <HAL_RCC_OscConfig+0x98>
 8009862:	4b71      	ldr	r3, [pc, #452]	; (8009a28 <HAL_RCC_OscConfig+0x244>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a70      	ldr	r2, [pc, #448]	; (8009a28 <HAL_RCC_OscConfig+0x244>)
 8009868:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800986c:	6013      	str	r3, [r2, #0]
 800986e:	4b6e      	ldr	r3, [pc, #440]	; (8009a28 <HAL_RCC_OscConfig+0x244>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4a6d      	ldr	r2, [pc, #436]	; (8009a28 <HAL_RCC_OscConfig+0x244>)
 8009874:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009878:	6013      	str	r3, [r2, #0]
 800987a:	e01d      	b.n	80098b8 <HAL_RCC_OscConfig+0xd4>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009884:	d10c      	bne.n	80098a0 <HAL_RCC_OscConfig+0xbc>
 8009886:	4b68      	ldr	r3, [pc, #416]	; (8009a28 <HAL_RCC_OscConfig+0x244>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4a67      	ldr	r2, [pc, #412]	; (8009a28 <HAL_RCC_OscConfig+0x244>)
 800988c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009890:	6013      	str	r3, [r2, #0]
 8009892:	4b65      	ldr	r3, [pc, #404]	; (8009a28 <HAL_RCC_OscConfig+0x244>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a64      	ldr	r2, [pc, #400]	; (8009a28 <HAL_RCC_OscConfig+0x244>)
 8009898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800989c:	6013      	str	r3, [r2, #0]
 800989e:	e00b      	b.n	80098b8 <HAL_RCC_OscConfig+0xd4>
 80098a0:	4b61      	ldr	r3, [pc, #388]	; (8009a28 <HAL_RCC_OscConfig+0x244>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a60      	ldr	r2, [pc, #384]	; (8009a28 <HAL_RCC_OscConfig+0x244>)
 80098a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098aa:	6013      	str	r3, [r2, #0]
 80098ac:	4b5e      	ldr	r3, [pc, #376]	; (8009a28 <HAL_RCC_OscConfig+0x244>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a5d      	ldr	r2, [pc, #372]	; (8009a28 <HAL_RCC_OscConfig+0x244>)
 80098b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80098b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d013      	beq.n	80098e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098c0:	f7fa f874 	bl	80039ac <HAL_GetTick>
 80098c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80098c6:	e008      	b.n	80098da <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80098c8:	f7fa f870 	bl	80039ac <HAL_GetTick>
 80098cc:	4602      	mov	r2, r0
 80098ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d0:	1ad3      	subs	r3, r2, r3
 80098d2:	2b64      	cmp	r3, #100	; 0x64
 80098d4:	d901      	bls.n	80098da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80098d6:	2303      	movs	r3, #3
 80098d8:	e356      	b.n	8009f88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80098da:	4b53      	ldr	r3, [pc, #332]	; (8009a28 <HAL_RCC_OscConfig+0x244>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d0f0      	beq.n	80098c8 <HAL_RCC_OscConfig+0xe4>
 80098e6:	e014      	b.n	8009912 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098e8:	f7fa f860 	bl	80039ac <HAL_GetTick>
 80098ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80098ee:	e008      	b.n	8009902 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80098f0:	f7fa f85c 	bl	80039ac <HAL_GetTick>
 80098f4:	4602      	mov	r2, r0
 80098f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f8:	1ad3      	subs	r3, r2, r3
 80098fa:	2b64      	cmp	r3, #100	; 0x64
 80098fc:	d901      	bls.n	8009902 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80098fe:	2303      	movs	r3, #3
 8009900:	e342      	b.n	8009f88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009902:	4b49      	ldr	r3, [pc, #292]	; (8009a28 <HAL_RCC_OscConfig+0x244>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800990a:	2b00      	cmp	r3, #0
 800990c:	d1f0      	bne.n	80098f0 <HAL_RCC_OscConfig+0x10c>
 800990e:	e000      	b.n	8009912 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f003 0302 	and.w	r3, r3, #2
 800991a:	2b00      	cmp	r3, #0
 800991c:	f000 808c 	beq.w	8009a38 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009920:	4b41      	ldr	r3, [pc, #260]	; (8009a28 <HAL_RCC_OscConfig+0x244>)
 8009922:	691b      	ldr	r3, [r3, #16]
 8009924:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009928:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800992a:	4b3f      	ldr	r3, [pc, #252]	; (8009a28 <HAL_RCC_OscConfig+0x244>)
 800992c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800992e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009930:	6a3b      	ldr	r3, [r7, #32]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d007      	beq.n	8009946 <HAL_RCC_OscConfig+0x162>
 8009936:	6a3b      	ldr	r3, [r7, #32]
 8009938:	2b18      	cmp	r3, #24
 800993a:	d137      	bne.n	80099ac <HAL_RCC_OscConfig+0x1c8>
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	f003 0303 	and.w	r3, r3, #3
 8009942:	2b00      	cmp	r3, #0
 8009944:	d132      	bne.n	80099ac <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009946:	4b38      	ldr	r3, [pc, #224]	; (8009a28 <HAL_RCC_OscConfig+0x244>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f003 0304 	and.w	r3, r3, #4
 800994e:	2b00      	cmp	r3, #0
 8009950:	d005      	beq.n	800995e <HAL_RCC_OscConfig+0x17a>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	68db      	ldr	r3, [r3, #12]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d101      	bne.n	800995e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800995a:	2301      	movs	r3, #1
 800995c:	e314      	b.n	8009f88 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800995e:	4b32      	ldr	r3, [pc, #200]	; (8009a28 <HAL_RCC_OscConfig+0x244>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f023 0219 	bic.w	r2, r3, #25
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	68db      	ldr	r3, [r3, #12]
 800996a:	492f      	ldr	r1, [pc, #188]	; (8009a28 <HAL_RCC_OscConfig+0x244>)
 800996c:	4313      	orrs	r3, r2
 800996e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009970:	f7fa f81c 	bl	80039ac <HAL_GetTick>
 8009974:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009976:	e008      	b.n	800998a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009978:	f7fa f818 	bl	80039ac <HAL_GetTick>
 800997c:	4602      	mov	r2, r0
 800997e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009980:	1ad3      	subs	r3, r2, r3
 8009982:	2b02      	cmp	r3, #2
 8009984:	d901      	bls.n	800998a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8009986:	2303      	movs	r3, #3
 8009988:	e2fe      	b.n	8009f88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800998a:	4b27      	ldr	r3, [pc, #156]	; (8009a28 <HAL_RCC_OscConfig+0x244>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f003 0304 	and.w	r3, r3, #4
 8009992:	2b00      	cmp	r3, #0
 8009994:	d0f0      	beq.n	8009978 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009996:	4b24      	ldr	r3, [pc, #144]	; (8009a28 <HAL_RCC_OscConfig+0x244>)
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	691b      	ldr	r3, [r3, #16]
 80099a2:	061b      	lsls	r3, r3, #24
 80099a4:	4920      	ldr	r1, [pc, #128]	; (8009a28 <HAL_RCC_OscConfig+0x244>)
 80099a6:	4313      	orrs	r3, r2
 80099a8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80099aa:	e045      	b.n	8009a38 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	68db      	ldr	r3, [r3, #12]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d026      	beq.n	8009a02 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80099b4:	4b1c      	ldr	r3, [pc, #112]	; (8009a28 <HAL_RCC_OscConfig+0x244>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f023 0219 	bic.w	r2, r3, #25
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	68db      	ldr	r3, [r3, #12]
 80099c0:	4919      	ldr	r1, [pc, #100]	; (8009a28 <HAL_RCC_OscConfig+0x244>)
 80099c2:	4313      	orrs	r3, r2
 80099c4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099c6:	f7f9 fff1 	bl	80039ac <HAL_GetTick>
 80099ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80099cc:	e008      	b.n	80099e0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80099ce:	f7f9 ffed 	bl	80039ac <HAL_GetTick>
 80099d2:	4602      	mov	r2, r0
 80099d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d6:	1ad3      	subs	r3, r2, r3
 80099d8:	2b02      	cmp	r3, #2
 80099da:	d901      	bls.n	80099e0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80099dc:	2303      	movs	r3, #3
 80099de:	e2d3      	b.n	8009f88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80099e0:	4b11      	ldr	r3, [pc, #68]	; (8009a28 <HAL_RCC_OscConfig+0x244>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f003 0304 	and.w	r3, r3, #4
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d0f0      	beq.n	80099ce <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099ec:	4b0e      	ldr	r3, [pc, #56]	; (8009a28 <HAL_RCC_OscConfig+0x244>)
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	691b      	ldr	r3, [r3, #16]
 80099f8:	061b      	lsls	r3, r3, #24
 80099fa:	490b      	ldr	r1, [pc, #44]	; (8009a28 <HAL_RCC_OscConfig+0x244>)
 80099fc:	4313      	orrs	r3, r2
 80099fe:	604b      	str	r3, [r1, #4]
 8009a00:	e01a      	b.n	8009a38 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009a02:	4b09      	ldr	r3, [pc, #36]	; (8009a28 <HAL_RCC_OscConfig+0x244>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4a08      	ldr	r2, [pc, #32]	; (8009a28 <HAL_RCC_OscConfig+0x244>)
 8009a08:	f023 0301 	bic.w	r3, r3, #1
 8009a0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a0e:	f7f9 ffcd 	bl	80039ac <HAL_GetTick>
 8009a12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009a14:	e00a      	b.n	8009a2c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a16:	f7f9 ffc9 	bl	80039ac <HAL_GetTick>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1e:	1ad3      	subs	r3, r2, r3
 8009a20:	2b02      	cmp	r3, #2
 8009a22:	d903      	bls.n	8009a2c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009a24:	2303      	movs	r3, #3
 8009a26:	e2af      	b.n	8009f88 <HAL_RCC_OscConfig+0x7a4>
 8009a28:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009a2c:	4b96      	ldr	r3, [pc, #600]	; (8009c88 <HAL_RCC_OscConfig+0x4a4>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f003 0304 	and.w	r3, r3, #4
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d1ee      	bne.n	8009a16 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f003 0310 	and.w	r3, r3, #16
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d06a      	beq.n	8009b1a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a44:	4b90      	ldr	r3, [pc, #576]	; (8009c88 <HAL_RCC_OscConfig+0x4a4>)
 8009a46:	691b      	ldr	r3, [r3, #16]
 8009a48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a4c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009a4e:	4b8e      	ldr	r3, [pc, #568]	; (8009c88 <HAL_RCC_OscConfig+0x4a4>)
 8009a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a52:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009a54:	69bb      	ldr	r3, [r7, #24]
 8009a56:	2b08      	cmp	r3, #8
 8009a58:	d007      	beq.n	8009a6a <HAL_RCC_OscConfig+0x286>
 8009a5a:	69bb      	ldr	r3, [r7, #24]
 8009a5c:	2b18      	cmp	r3, #24
 8009a5e:	d11b      	bne.n	8009a98 <HAL_RCC_OscConfig+0x2b4>
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	f003 0303 	and.w	r3, r3, #3
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	d116      	bne.n	8009a98 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009a6a:	4b87      	ldr	r3, [pc, #540]	; (8009c88 <HAL_RCC_OscConfig+0x4a4>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d005      	beq.n	8009a82 <HAL_RCC_OscConfig+0x29e>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	69db      	ldr	r3, [r3, #28]
 8009a7a:	2b80      	cmp	r3, #128	; 0x80
 8009a7c:	d001      	beq.n	8009a82 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	e282      	b.n	8009f88 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a82:	4b81      	ldr	r3, [pc, #516]	; (8009c88 <HAL_RCC_OscConfig+0x4a4>)
 8009a84:	68db      	ldr	r3, [r3, #12]
 8009a86:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6a1b      	ldr	r3, [r3, #32]
 8009a8e:	061b      	lsls	r3, r3, #24
 8009a90:	497d      	ldr	r1, [pc, #500]	; (8009c88 <HAL_RCC_OscConfig+0x4a4>)
 8009a92:	4313      	orrs	r3, r2
 8009a94:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009a96:	e040      	b.n	8009b1a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	69db      	ldr	r3, [r3, #28]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d023      	beq.n	8009ae8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009aa0:	4b79      	ldr	r3, [pc, #484]	; (8009c88 <HAL_RCC_OscConfig+0x4a4>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a78      	ldr	r2, [pc, #480]	; (8009c88 <HAL_RCC_OscConfig+0x4a4>)
 8009aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009aac:	f7f9 ff7e 	bl	80039ac <HAL_GetTick>
 8009ab0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009ab2:	e008      	b.n	8009ac6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009ab4:	f7f9 ff7a 	bl	80039ac <HAL_GetTick>
 8009ab8:	4602      	mov	r2, r0
 8009aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009abc:	1ad3      	subs	r3, r2, r3
 8009abe:	2b02      	cmp	r3, #2
 8009ac0:	d901      	bls.n	8009ac6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009ac2:	2303      	movs	r3, #3
 8009ac4:	e260      	b.n	8009f88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009ac6:	4b70      	ldr	r3, [pc, #448]	; (8009c88 <HAL_RCC_OscConfig+0x4a4>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d0f0      	beq.n	8009ab4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009ad2:	4b6d      	ldr	r3, [pc, #436]	; (8009c88 <HAL_RCC_OscConfig+0x4a4>)
 8009ad4:	68db      	ldr	r3, [r3, #12]
 8009ad6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6a1b      	ldr	r3, [r3, #32]
 8009ade:	061b      	lsls	r3, r3, #24
 8009ae0:	4969      	ldr	r1, [pc, #420]	; (8009c88 <HAL_RCC_OscConfig+0x4a4>)
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	60cb      	str	r3, [r1, #12]
 8009ae6:	e018      	b.n	8009b1a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009ae8:	4b67      	ldr	r3, [pc, #412]	; (8009c88 <HAL_RCC_OscConfig+0x4a4>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a66      	ldr	r2, [pc, #408]	; (8009c88 <HAL_RCC_OscConfig+0x4a4>)
 8009aee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009af2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009af4:	f7f9 ff5a 	bl	80039ac <HAL_GetTick>
 8009af8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009afa:	e008      	b.n	8009b0e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009afc:	f7f9 ff56 	bl	80039ac <HAL_GetTick>
 8009b00:	4602      	mov	r2, r0
 8009b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b04:	1ad3      	subs	r3, r2, r3
 8009b06:	2b02      	cmp	r3, #2
 8009b08:	d901      	bls.n	8009b0e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009b0a:	2303      	movs	r3, #3
 8009b0c:	e23c      	b.n	8009f88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009b0e:	4b5e      	ldr	r3, [pc, #376]	; (8009c88 <HAL_RCC_OscConfig+0x4a4>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d1f0      	bne.n	8009afc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f003 0308 	and.w	r3, r3, #8
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d036      	beq.n	8009b94 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	695b      	ldr	r3, [r3, #20]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d019      	beq.n	8009b62 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009b2e:	4b56      	ldr	r3, [pc, #344]	; (8009c88 <HAL_RCC_OscConfig+0x4a4>)
 8009b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b32:	4a55      	ldr	r2, [pc, #340]	; (8009c88 <HAL_RCC_OscConfig+0x4a4>)
 8009b34:	f043 0301 	orr.w	r3, r3, #1
 8009b38:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b3a:	f7f9 ff37 	bl	80039ac <HAL_GetTick>
 8009b3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009b40:	e008      	b.n	8009b54 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009b42:	f7f9 ff33 	bl	80039ac <HAL_GetTick>
 8009b46:	4602      	mov	r2, r0
 8009b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4a:	1ad3      	subs	r3, r2, r3
 8009b4c:	2b02      	cmp	r3, #2
 8009b4e:	d901      	bls.n	8009b54 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009b50:	2303      	movs	r3, #3
 8009b52:	e219      	b.n	8009f88 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009b54:	4b4c      	ldr	r3, [pc, #304]	; (8009c88 <HAL_RCC_OscConfig+0x4a4>)
 8009b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b58:	f003 0302 	and.w	r3, r3, #2
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d0f0      	beq.n	8009b42 <HAL_RCC_OscConfig+0x35e>
 8009b60:	e018      	b.n	8009b94 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009b62:	4b49      	ldr	r3, [pc, #292]	; (8009c88 <HAL_RCC_OscConfig+0x4a4>)
 8009b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b66:	4a48      	ldr	r2, [pc, #288]	; (8009c88 <HAL_RCC_OscConfig+0x4a4>)
 8009b68:	f023 0301 	bic.w	r3, r3, #1
 8009b6c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b6e:	f7f9 ff1d 	bl	80039ac <HAL_GetTick>
 8009b72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009b74:	e008      	b.n	8009b88 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009b76:	f7f9 ff19 	bl	80039ac <HAL_GetTick>
 8009b7a:	4602      	mov	r2, r0
 8009b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7e:	1ad3      	subs	r3, r2, r3
 8009b80:	2b02      	cmp	r3, #2
 8009b82:	d901      	bls.n	8009b88 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009b84:	2303      	movs	r3, #3
 8009b86:	e1ff      	b.n	8009f88 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009b88:	4b3f      	ldr	r3, [pc, #252]	; (8009c88 <HAL_RCC_OscConfig+0x4a4>)
 8009b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b8c:	f003 0302 	and.w	r3, r3, #2
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d1f0      	bne.n	8009b76 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f003 0320 	and.w	r3, r3, #32
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d036      	beq.n	8009c0e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	699b      	ldr	r3, [r3, #24]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d019      	beq.n	8009bdc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009ba8:	4b37      	ldr	r3, [pc, #220]	; (8009c88 <HAL_RCC_OscConfig+0x4a4>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a36      	ldr	r2, [pc, #216]	; (8009c88 <HAL_RCC_OscConfig+0x4a4>)
 8009bae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009bb2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009bb4:	f7f9 fefa 	bl	80039ac <HAL_GetTick>
 8009bb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009bba:	e008      	b.n	8009bce <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009bbc:	f7f9 fef6 	bl	80039ac <HAL_GetTick>
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc4:	1ad3      	subs	r3, r2, r3
 8009bc6:	2b02      	cmp	r3, #2
 8009bc8:	d901      	bls.n	8009bce <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009bca:	2303      	movs	r3, #3
 8009bcc:	e1dc      	b.n	8009f88 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009bce:	4b2e      	ldr	r3, [pc, #184]	; (8009c88 <HAL_RCC_OscConfig+0x4a4>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d0f0      	beq.n	8009bbc <HAL_RCC_OscConfig+0x3d8>
 8009bda:	e018      	b.n	8009c0e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009bdc:	4b2a      	ldr	r3, [pc, #168]	; (8009c88 <HAL_RCC_OscConfig+0x4a4>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4a29      	ldr	r2, [pc, #164]	; (8009c88 <HAL_RCC_OscConfig+0x4a4>)
 8009be2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009be6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009be8:	f7f9 fee0 	bl	80039ac <HAL_GetTick>
 8009bec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009bee:	e008      	b.n	8009c02 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009bf0:	f7f9 fedc 	bl	80039ac <HAL_GetTick>
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf8:	1ad3      	subs	r3, r2, r3
 8009bfa:	2b02      	cmp	r3, #2
 8009bfc:	d901      	bls.n	8009c02 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009bfe:	2303      	movs	r3, #3
 8009c00:	e1c2      	b.n	8009f88 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009c02:	4b21      	ldr	r3, [pc, #132]	; (8009c88 <HAL_RCC_OscConfig+0x4a4>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d1f0      	bne.n	8009bf0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f003 0304 	and.w	r3, r3, #4
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	f000 8086 	beq.w	8009d28 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009c1c:	4b1b      	ldr	r3, [pc, #108]	; (8009c8c <HAL_RCC_OscConfig+0x4a8>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a1a      	ldr	r2, [pc, #104]	; (8009c8c <HAL_RCC_OscConfig+0x4a8>)
 8009c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009c28:	f7f9 fec0 	bl	80039ac <HAL_GetTick>
 8009c2c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c2e:	e008      	b.n	8009c42 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c30:	f7f9 febc 	bl	80039ac <HAL_GetTick>
 8009c34:	4602      	mov	r2, r0
 8009c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c38:	1ad3      	subs	r3, r2, r3
 8009c3a:	2b64      	cmp	r3, #100	; 0x64
 8009c3c:	d901      	bls.n	8009c42 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009c3e:	2303      	movs	r3, #3
 8009c40:	e1a2      	b.n	8009f88 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c42:	4b12      	ldr	r3, [pc, #72]	; (8009c8c <HAL_RCC_OscConfig+0x4a8>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d0f0      	beq.n	8009c30 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	2b01      	cmp	r3, #1
 8009c54:	d106      	bne.n	8009c64 <HAL_RCC_OscConfig+0x480>
 8009c56:	4b0c      	ldr	r3, [pc, #48]	; (8009c88 <HAL_RCC_OscConfig+0x4a4>)
 8009c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c5a:	4a0b      	ldr	r2, [pc, #44]	; (8009c88 <HAL_RCC_OscConfig+0x4a4>)
 8009c5c:	f043 0301 	orr.w	r3, r3, #1
 8009c60:	6713      	str	r3, [r2, #112]	; 0x70
 8009c62:	e032      	b.n	8009cca <HAL_RCC_OscConfig+0x4e6>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d111      	bne.n	8009c90 <HAL_RCC_OscConfig+0x4ac>
 8009c6c:	4b06      	ldr	r3, [pc, #24]	; (8009c88 <HAL_RCC_OscConfig+0x4a4>)
 8009c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c70:	4a05      	ldr	r2, [pc, #20]	; (8009c88 <HAL_RCC_OscConfig+0x4a4>)
 8009c72:	f023 0301 	bic.w	r3, r3, #1
 8009c76:	6713      	str	r3, [r2, #112]	; 0x70
 8009c78:	4b03      	ldr	r3, [pc, #12]	; (8009c88 <HAL_RCC_OscConfig+0x4a4>)
 8009c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c7c:	4a02      	ldr	r2, [pc, #8]	; (8009c88 <HAL_RCC_OscConfig+0x4a4>)
 8009c7e:	f023 0304 	bic.w	r3, r3, #4
 8009c82:	6713      	str	r3, [r2, #112]	; 0x70
 8009c84:	e021      	b.n	8009cca <HAL_RCC_OscConfig+0x4e6>
 8009c86:	bf00      	nop
 8009c88:	58024400 	.word	0x58024400
 8009c8c:	58024800 	.word	0x58024800
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	689b      	ldr	r3, [r3, #8]
 8009c94:	2b05      	cmp	r3, #5
 8009c96:	d10c      	bne.n	8009cb2 <HAL_RCC_OscConfig+0x4ce>
 8009c98:	4b83      	ldr	r3, [pc, #524]	; (8009ea8 <HAL_RCC_OscConfig+0x6c4>)
 8009c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c9c:	4a82      	ldr	r2, [pc, #520]	; (8009ea8 <HAL_RCC_OscConfig+0x6c4>)
 8009c9e:	f043 0304 	orr.w	r3, r3, #4
 8009ca2:	6713      	str	r3, [r2, #112]	; 0x70
 8009ca4:	4b80      	ldr	r3, [pc, #512]	; (8009ea8 <HAL_RCC_OscConfig+0x6c4>)
 8009ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ca8:	4a7f      	ldr	r2, [pc, #508]	; (8009ea8 <HAL_RCC_OscConfig+0x6c4>)
 8009caa:	f043 0301 	orr.w	r3, r3, #1
 8009cae:	6713      	str	r3, [r2, #112]	; 0x70
 8009cb0:	e00b      	b.n	8009cca <HAL_RCC_OscConfig+0x4e6>
 8009cb2:	4b7d      	ldr	r3, [pc, #500]	; (8009ea8 <HAL_RCC_OscConfig+0x6c4>)
 8009cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cb6:	4a7c      	ldr	r2, [pc, #496]	; (8009ea8 <HAL_RCC_OscConfig+0x6c4>)
 8009cb8:	f023 0301 	bic.w	r3, r3, #1
 8009cbc:	6713      	str	r3, [r2, #112]	; 0x70
 8009cbe:	4b7a      	ldr	r3, [pc, #488]	; (8009ea8 <HAL_RCC_OscConfig+0x6c4>)
 8009cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cc2:	4a79      	ldr	r2, [pc, #484]	; (8009ea8 <HAL_RCC_OscConfig+0x6c4>)
 8009cc4:	f023 0304 	bic.w	r3, r3, #4
 8009cc8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d015      	beq.n	8009cfe <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cd2:	f7f9 fe6b 	bl	80039ac <HAL_GetTick>
 8009cd6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009cd8:	e00a      	b.n	8009cf0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009cda:	f7f9 fe67 	bl	80039ac <HAL_GetTick>
 8009cde:	4602      	mov	r2, r0
 8009ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce2:	1ad3      	subs	r3, r2, r3
 8009ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d901      	bls.n	8009cf0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009cec:	2303      	movs	r3, #3
 8009cee:	e14b      	b.n	8009f88 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009cf0:	4b6d      	ldr	r3, [pc, #436]	; (8009ea8 <HAL_RCC_OscConfig+0x6c4>)
 8009cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cf4:	f003 0302 	and.w	r3, r3, #2
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d0ee      	beq.n	8009cda <HAL_RCC_OscConfig+0x4f6>
 8009cfc:	e014      	b.n	8009d28 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cfe:	f7f9 fe55 	bl	80039ac <HAL_GetTick>
 8009d02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009d04:	e00a      	b.n	8009d1c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d06:	f7f9 fe51 	bl	80039ac <HAL_GetTick>
 8009d0a:	4602      	mov	r2, r0
 8009d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0e:	1ad3      	subs	r3, r2, r3
 8009d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d901      	bls.n	8009d1c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009d18:	2303      	movs	r3, #3
 8009d1a:	e135      	b.n	8009f88 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009d1c:	4b62      	ldr	r3, [pc, #392]	; (8009ea8 <HAL_RCC_OscConfig+0x6c4>)
 8009d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d20:	f003 0302 	and.w	r3, r3, #2
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d1ee      	bne.n	8009d06 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	f000 812a 	beq.w	8009f86 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009d32:	4b5d      	ldr	r3, [pc, #372]	; (8009ea8 <HAL_RCC_OscConfig+0x6c4>)
 8009d34:	691b      	ldr	r3, [r3, #16]
 8009d36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d3a:	2b18      	cmp	r3, #24
 8009d3c:	f000 80ba 	beq.w	8009eb4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d44:	2b02      	cmp	r3, #2
 8009d46:	f040 8095 	bne.w	8009e74 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d4a:	4b57      	ldr	r3, [pc, #348]	; (8009ea8 <HAL_RCC_OscConfig+0x6c4>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a56      	ldr	r2, [pc, #344]	; (8009ea8 <HAL_RCC_OscConfig+0x6c4>)
 8009d50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d56:	f7f9 fe29 	bl	80039ac <HAL_GetTick>
 8009d5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009d5c:	e008      	b.n	8009d70 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d5e:	f7f9 fe25 	bl	80039ac <HAL_GetTick>
 8009d62:	4602      	mov	r2, r0
 8009d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d66:	1ad3      	subs	r3, r2, r3
 8009d68:	2b02      	cmp	r3, #2
 8009d6a:	d901      	bls.n	8009d70 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009d6c:	2303      	movs	r3, #3
 8009d6e:	e10b      	b.n	8009f88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009d70:	4b4d      	ldr	r3, [pc, #308]	; (8009ea8 <HAL_RCC_OscConfig+0x6c4>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d1f0      	bne.n	8009d5e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009d7c:	4b4a      	ldr	r3, [pc, #296]	; (8009ea8 <HAL_RCC_OscConfig+0x6c4>)
 8009d7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d80:	4b4a      	ldr	r3, [pc, #296]	; (8009eac <HAL_RCC_OscConfig+0x6c8>)
 8009d82:	4013      	ands	r3, r2
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009d8c:	0112      	lsls	r2, r2, #4
 8009d8e:	430a      	orrs	r2, r1
 8009d90:	4945      	ldr	r1, [pc, #276]	; (8009ea8 <HAL_RCC_OscConfig+0x6c4>)
 8009d92:	4313      	orrs	r3, r2
 8009d94:	628b      	str	r3, [r1, #40]	; 0x28
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d9a:	3b01      	subs	r3, #1
 8009d9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009da4:	3b01      	subs	r3, #1
 8009da6:	025b      	lsls	r3, r3, #9
 8009da8:	b29b      	uxth	r3, r3
 8009daa:	431a      	orrs	r2, r3
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009db0:	3b01      	subs	r3, #1
 8009db2:	041b      	lsls	r3, r3, #16
 8009db4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009db8:	431a      	orrs	r2, r3
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dbe:	3b01      	subs	r3, #1
 8009dc0:	061b      	lsls	r3, r3, #24
 8009dc2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009dc6:	4938      	ldr	r1, [pc, #224]	; (8009ea8 <HAL_RCC_OscConfig+0x6c4>)
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009dcc:	4b36      	ldr	r3, [pc, #216]	; (8009ea8 <HAL_RCC_OscConfig+0x6c4>)
 8009dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd0:	4a35      	ldr	r2, [pc, #212]	; (8009ea8 <HAL_RCC_OscConfig+0x6c4>)
 8009dd2:	f023 0301 	bic.w	r3, r3, #1
 8009dd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009dd8:	4b33      	ldr	r3, [pc, #204]	; (8009ea8 <HAL_RCC_OscConfig+0x6c4>)
 8009dda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ddc:	4b34      	ldr	r3, [pc, #208]	; (8009eb0 <HAL_RCC_OscConfig+0x6cc>)
 8009dde:	4013      	ands	r3, r2
 8009de0:	687a      	ldr	r2, [r7, #4]
 8009de2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009de4:	00d2      	lsls	r2, r2, #3
 8009de6:	4930      	ldr	r1, [pc, #192]	; (8009ea8 <HAL_RCC_OscConfig+0x6c4>)
 8009de8:	4313      	orrs	r3, r2
 8009dea:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009dec:	4b2e      	ldr	r3, [pc, #184]	; (8009ea8 <HAL_RCC_OscConfig+0x6c4>)
 8009dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df0:	f023 020c 	bic.w	r2, r3, #12
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009df8:	492b      	ldr	r1, [pc, #172]	; (8009ea8 <HAL_RCC_OscConfig+0x6c4>)
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009dfe:	4b2a      	ldr	r3, [pc, #168]	; (8009ea8 <HAL_RCC_OscConfig+0x6c4>)
 8009e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e02:	f023 0202 	bic.w	r2, r3, #2
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e0a:	4927      	ldr	r1, [pc, #156]	; (8009ea8 <HAL_RCC_OscConfig+0x6c4>)
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009e10:	4b25      	ldr	r3, [pc, #148]	; (8009ea8 <HAL_RCC_OscConfig+0x6c4>)
 8009e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e14:	4a24      	ldr	r2, [pc, #144]	; (8009ea8 <HAL_RCC_OscConfig+0x6c4>)
 8009e16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e1c:	4b22      	ldr	r3, [pc, #136]	; (8009ea8 <HAL_RCC_OscConfig+0x6c4>)
 8009e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e20:	4a21      	ldr	r2, [pc, #132]	; (8009ea8 <HAL_RCC_OscConfig+0x6c4>)
 8009e22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009e28:	4b1f      	ldr	r3, [pc, #124]	; (8009ea8 <HAL_RCC_OscConfig+0x6c4>)
 8009e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e2c:	4a1e      	ldr	r2, [pc, #120]	; (8009ea8 <HAL_RCC_OscConfig+0x6c4>)
 8009e2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009e34:	4b1c      	ldr	r3, [pc, #112]	; (8009ea8 <HAL_RCC_OscConfig+0x6c4>)
 8009e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e38:	4a1b      	ldr	r2, [pc, #108]	; (8009ea8 <HAL_RCC_OscConfig+0x6c4>)
 8009e3a:	f043 0301 	orr.w	r3, r3, #1
 8009e3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009e40:	4b19      	ldr	r3, [pc, #100]	; (8009ea8 <HAL_RCC_OscConfig+0x6c4>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a18      	ldr	r2, [pc, #96]	; (8009ea8 <HAL_RCC_OscConfig+0x6c4>)
 8009e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e4c:	f7f9 fdae 	bl	80039ac <HAL_GetTick>
 8009e50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009e52:	e008      	b.n	8009e66 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e54:	f7f9 fdaa 	bl	80039ac <HAL_GetTick>
 8009e58:	4602      	mov	r2, r0
 8009e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5c:	1ad3      	subs	r3, r2, r3
 8009e5e:	2b02      	cmp	r3, #2
 8009e60:	d901      	bls.n	8009e66 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009e62:	2303      	movs	r3, #3
 8009e64:	e090      	b.n	8009f88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009e66:	4b10      	ldr	r3, [pc, #64]	; (8009ea8 <HAL_RCC_OscConfig+0x6c4>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d0f0      	beq.n	8009e54 <HAL_RCC_OscConfig+0x670>
 8009e72:	e088      	b.n	8009f86 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e74:	4b0c      	ldr	r3, [pc, #48]	; (8009ea8 <HAL_RCC_OscConfig+0x6c4>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4a0b      	ldr	r2, [pc, #44]	; (8009ea8 <HAL_RCC_OscConfig+0x6c4>)
 8009e7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009e7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e80:	f7f9 fd94 	bl	80039ac <HAL_GetTick>
 8009e84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e86:	e008      	b.n	8009e9a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e88:	f7f9 fd90 	bl	80039ac <HAL_GetTick>
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e90:	1ad3      	subs	r3, r2, r3
 8009e92:	2b02      	cmp	r3, #2
 8009e94:	d901      	bls.n	8009e9a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8009e96:	2303      	movs	r3, #3
 8009e98:	e076      	b.n	8009f88 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e9a:	4b03      	ldr	r3, [pc, #12]	; (8009ea8 <HAL_RCC_OscConfig+0x6c4>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d1f0      	bne.n	8009e88 <HAL_RCC_OscConfig+0x6a4>
 8009ea6:	e06e      	b.n	8009f86 <HAL_RCC_OscConfig+0x7a2>
 8009ea8:	58024400 	.word	0x58024400
 8009eac:	fffffc0c 	.word	0xfffffc0c
 8009eb0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009eb4:	4b36      	ldr	r3, [pc, #216]	; (8009f90 <HAL_RCC_OscConfig+0x7ac>)
 8009eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eb8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009eba:	4b35      	ldr	r3, [pc, #212]	; (8009f90 <HAL_RCC_OscConfig+0x7ac>)
 8009ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ebe:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d031      	beq.n	8009f2c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	f003 0203 	and.w	r2, r3, #3
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d12a      	bne.n	8009f2c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	091b      	lsrs	r3, r3, #4
 8009eda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d122      	bne.n	8009f2c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ef0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d11a      	bne.n	8009f2c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	0a5b      	lsrs	r3, r3, #9
 8009efa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f02:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d111      	bne.n	8009f2c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	0c1b      	lsrs	r3, r3, #16
 8009f0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f14:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d108      	bne.n	8009f2c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	0e1b      	lsrs	r3, r3, #24
 8009f1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f26:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d001      	beq.n	8009f30 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	e02b      	b.n	8009f88 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009f30:	4b17      	ldr	r3, [pc, #92]	; (8009f90 <HAL_RCC_OscConfig+0x7ac>)
 8009f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f34:	08db      	lsrs	r3, r3, #3
 8009f36:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f3a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f40:	693a      	ldr	r2, [r7, #16]
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d01f      	beq.n	8009f86 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009f46:	4b12      	ldr	r3, [pc, #72]	; (8009f90 <HAL_RCC_OscConfig+0x7ac>)
 8009f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f4a:	4a11      	ldr	r2, [pc, #68]	; (8009f90 <HAL_RCC_OscConfig+0x7ac>)
 8009f4c:	f023 0301 	bic.w	r3, r3, #1
 8009f50:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009f52:	f7f9 fd2b 	bl	80039ac <HAL_GetTick>
 8009f56:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009f58:	bf00      	nop
 8009f5a:	f7f9 fd27 	bl	80039ac <HAL_GetTick>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d0f9      	beq.n	8009f5a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009f66:	4b0a      	ldr	r3, [pc, #40]	; (8009f90 <HAL_RCC_OscConfig+0x7ac>)
 8009f68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f6a:	4b0a      	ldr	r3, [pc, #40]	; (8009f94 <HAL_RCC_OscConfig+0x7b0>)
 8009f6c:	4013      	ands	r3, r2
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009f72:	00d2      	lsls	r2, r2, #3
 8009f74:	4906      	ldr	r1, [pc, #24]	; (8009f90 <HAL_RCC_OscConfig+0x7ac>)
 8009f76:	4313      	orrs	r3, r2
 8009f78:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009f7a:	4b05      	ldr	r3, [pc, #20]	; (8009f90 <HAL_RCC_OscConfig+0x7ac>)
 8009f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f7e:	4a04      	ldr	r2, [pc, #16]	; (8009f90 <HAL_RCC_OscConfig+0x7ac>)
 8009f80:	f043 0301 	orr.w	r3, r3, #1
 8009f84:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009f86:	2300      	movs	r3, #0
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3730      	adds	r7, #48	; 0x30
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}
 8009f90:	58024400 	.word	0x58024400
 8009f94:	ffff0007 	.word	0xffff0007

08009f98 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b086      	sub	sp, #24
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d101      	bne.n	8009fac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	e19c      	b.n	800a2e6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009fac:	4b8a      	ldr	r3, [pc, #552]	; (800a1d8 <HAL_RCC_ClockConfig+0x240>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f003 030f 	and.w	r3, r3, #15
 8009fb4:	683a      	ldr	r2, [r7, #0]
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d910      	bls.n	8009fdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009fba:	4b87      	ldr	r3, [pc, #540]	; (800a1d8 <HAL_RCC_ClockConfig+0x240>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f023 020f 	bic.w	r2, r3, #15
 8009fc2:	4985      	ldr	r1, [pc, #532]	; (800a1d8 <HAL_RCC_ClockConfig+0x240>)
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009fca:	4b83      	ldr	r3, [pc, #524]	; (800a1d8 <HAL_RCC_ClockConfig+0x240>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f003 030f 	and.w	r3, r3, #15
 8009fd2:	683a      	ldr	r2, [r7, #0]
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d001      	beq.n	8009fdc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	e184      	b.n	800a2e6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f003 0304 	and.w	r3, r3, #4
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d010      	beq.n	800a00a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	691a      	ldr	r2, [r3, #16]
 8009fec:	4b7b      	ldr	r3, [pc, #492]	; (800a1dc <HAL_RCC_ClockConfig+0x244>)
 8009fee:	699b      	ldr	r3, [r3, #24]
 8009ff0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d908      	bls.n	800a00a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009ff8:	4b78      	ldr	r3, [pc, #480]	; (800a1dc <HAL_RCC_ClockConfig+0x244>)
 8009ffa:	699b      	ldr	r3, [r3, #24]
 8009ffc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	691b      	ldr	r3, [r3, #16]
 800a004:	4975      	ldr	r1, [pc, #468]	; (800a1dc <HAL_RCC_ClockConfig+0x244>)
 800a006:	4313      	orrs	r3, r2
 800a008:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f003 0308 	and.w	r3, r3, #8
 800a012:	2b00      	cmp	r3, #0
 800a014:	d010      	beq.n	800a038 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	695a      	ldr	r2, [r3, #20]
 800a01a:	4b70      	ldr	r3, [pc, #448]	; (800a1dc <HAL_RCC_ClockConfig+0x244>)
 800a01c:	69db      	ldr	r3, [r3, #28]
 800a01e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a022:	429a      	cmp	r2, r3
 800a024:	d908      	bls.n	800a038 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a026:	4b6d      	ldr	r3, [pc, #436]	; (800a1dc <HAL_RCC_ClockConfig+0x244>)
 800a028:	69db      	ldr	r3, [r3, #28]
 800a02a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	695b      	ldr	r3, [r3, #20]
 800a032:	496a      	ldr	r1, [pc, #424]	; (800a1dc <HAL_RCC_ClockConfig+0x244>)
 800a034:	4313      	orrs	r3, r2
 800a036:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f003 0310 	and.w	r3, r3, #16
 800a040:	2b00      	cmp	r3, #0
 800a042:	d010      	beq.n	800a066 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	699a      	ldr	r2, [r3, #24]
 800a048:	4b64      	ldr	r3, [pc, #400]	; (800a1dc <HAL_RCC_ClockConfig+0x244>)
 800a04a:	69db      	ldr	r3, [r3, #28]
 800a04c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a050:	429a      	cmp	r2, r3
 800a052:	d908      	bls.n	800a066 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a054:	4b61      	ldr	r3, [pc, #388]	; (800a1dc <HAL_RCC_ClockConfig+0x244>)
 800a056:	69db      	ldr	r3, [r3, #28]
 800a058:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	699b      	ldr	r3, [r3, #24]
 800a060:	495e      	ldr	r1, [pc, #376]	; (800a1dc <HAL_RCC_ClockConfig+0x244>)
 800a062:	4313      	orrs	r3, r2
 800a064:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f003 0320 	and.w	r3, r3, #32
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d010      	beq.n	800a094 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	69da      	ldr	r2, [r3, #28]
 800a076:	4b59      	ldr	r3, [pc, #356]	; (800a1dc <HAL_RCC_ClockConfig+0x244>)
 800a078:	6a1b      	ldr	r3, [r3, #32]
 800a07a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a07e:	429a      	cmp	r2, r3
 800a080:	d908      	bls.n	800a094 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a082:	4b56      	ldr	r3, [pc, #344]	; (800a1dc <HAL_RCC_ClockConfig+0x244>)
 800a084:	6a1b      	ldr	r3, [r3, #32]
 800a086:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	69db      	ldr	r3, [r3, #28]
 800a08e:	4953      	ldr	r1, [pc, #332]	; (800a1dc <HAL_RCC_ClockConfig+0x244>)
 800a090:	4313      	orrs	r3, r2
 800a092:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f003 0302 	and.w	r3, r3, #2
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d010      	beq.n	800a0c2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	68da      	ldr	r2, [r3, #12]
 800a0a4:	4b4d      	ldr	r3, [pc, #308]	; (800a1dc <HAL_RCC_ClockConfig+0x244>)
 800a0a6:	699b      	ldr	r3, [r3, #24]
 800a0a8:	f003 030f 	and.w	r3, r3, #15
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d908      	bls.n	800a0c2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a0b0:	4b4a      	ldr	r3, [pc, #296]	; (800a1dc <HAL_RCC_ClockConfig+0x244>)
 800a0b2:	699b      	ldr	r3, [r3, #24]
 800a0b4:	f023 020f 	bic.w	r2, r3, #15
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	68db      	ldr	r3, [r3, #12]
 800a0bc:	4947      	ldr	r1, [pc, #284]	; (800a1dc <HAL_RCC_ClockConfig+0x244>)
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f003 0301 	and.w	r3, r3, #1
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d055      	beq.n	800a17a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a0ce:	4b43      	ldr	r3, [pc, #268]	; (800a1dc <HAL_RCC_ClockConfig+0x244>)
 800a0d0:	699b      	ldr	r3, [r3, #24]
 800a0d2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	4940      	ldr	r1, [pc, #256]	; (800a1dc <HAL_RCC_ClockConfig+0x244>)
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	2b02      	cmp	r3, #2
 800a0e6:	d107      	bne.n	800a0f8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a0e8:	4b3c      	ldr	r3, [pc, #240]	; (800a1dc <HAL_RCC_ClockConfig+0x244>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d121      	bne.n	800a138 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	e0f6      	b.n	800a2e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	2b03      	cmp	r3, #3
 800a0fe:	d107      	bne.n	800a110 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a100:	4b36      	ldr	r3, [pc, #216]	; (800a1dc <HAL_RCC_ClockConfig+0x244>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d115      	bne.n	800a138 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a10c:	2301      	movs	r3, #1
 800a10e:	e0ea      	b.n	800a2e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	2b01      	cmp	r3, #1
 800a116:	d107      	bne.n	800a128 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a118:	4b30      	ldr	r3, [pc, #192]	; (800a1dc <HAL_RCC_ClockConfig+0x244>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a120:	2b00      	cmp	r3, #0
 800a122:	d109      	bne.n	800a138 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a124:	2301      	movs	r3, #1
 800a126:	e0de      	b.n	800a2e6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a128:	4b2c      	ldr	r3, [pc, #176]	; (800a1dc <HAL_RCC_ClockConfig+0x244>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f003 0304 	and.w	r3, r3, #4
 800a130:	2b00      	cmp	r3, #0
 800a132:	d101      	bne.n	800a138 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a134:	2301      	movs	r3, #1
 800a136:	e0d6      	b.n	800a2e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a138:	4b28      	ldr	r3, [pc, #160]	; (800a1dc <HAL_RCC_ClockConfig+0x244>)
 800a13a:	691b      	ldr	r3, [r3, #16]
 800a13c:	f023 0207 	bic.w	r2, r3, #7
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	4925      	ldr	r1, [pc, #148]	; (800a1dc <HAL_RCC_ClockConfig+0x244>)
 800a146:	4313      	orrs	r3, r2
 800a148:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a14a:	f7f9 fc2f 	bl	80039ac <HAL_GetTick>
 800a14e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a150:	e00a      	b.n	800a168 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a152:	f7f9 fc2b 	bl	80039ac <HAL_GetTick>
 800a156:	4602      	mov	r2, r0
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	1ad3      	subs	r3, r2, r3
 800a15c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a160:	4293      	cmp	r3, r2
 800a162:	d901      	bls.n	800a168 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a164:	2303      	movs	r3, #3
 800a166:	e0be      	b.n	800a2e6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a168:	4b1c      	ldr	r3, [pc, #112]	; (800a1dc <HAL_RCC_ClockConfig+0x244>)
 800a16a:	691b      	ldr	r3, [r3, #16]
 800a16c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	00db      	lsls	r3, r3, #3
 800a176:	429a      	cmp	r2, r3
 800a178:	d1eb      	bne.n	800a152 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f003 0302 	and.w	r3, r3, #2
 800a182:	2b00      	cmp	r3, #0
 800a184:	d010      	beq.n	800a1a8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	68da      	ldr	r2, [r3, #12]
 800a18a:	4b14      	ldr	r3, [pc, #80]	; (800a1dc <HAL_RCC_ClockConfig+0x244>)
 800a18c:	699b      	ldr	r3, [r3, #24]
 800a18e:	f003 030f 	and.w	r3, r3, #15
 800a192:	429a      	cmp	r2, r3
 800a194:	d208      	bcs.n	800a1a8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a196:	4b11      	ldr	r3, [pc, #68]	; (800a1dc <HAL_RCC_ClockConfig+0x244>)
 800a198:	699b      	ldr	r3, [r3, #24]
 800a19a:	f023 020f 	bic.w	r2, r3, #15
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	68db      	ldr	r3, [r3, #12]
 800a1a2:	490e      	ldr	r1, [pc, #56]	; (800a1dc <HAL_RCC_ClockConfig+0x244>)
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a1a8:	4b0b      	ldr	r3, [pc, #44]	; (800a1d8 <HAL_RCC_ClockConfig+0x240>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f003 030f 	and.w	r3, r3, #15
 800a1b0:	683a      	ldr	r2, [r7, #0]
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d214      	bcs.n	800a1e0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a1b6:	4b08      	ldr	r3, [pc, #32]	; (800a1d8 <HAL_RCC_ClockConfig+0x240>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f023 020f 	bic.w	r2, r3, #15
 800a1be:	4906      	ldr	r1, [pc, #24]	; (800a1d8 <HAL_RCC_ClockConfig+0x240>)
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1c6:	4b04      	ldr	r3, [pc, #16]	; (800a1d8 <HAL_RCC_ClockConfig+0x240>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f003 030f 	and.w	r3, r3, #15
 800a1ce:	683a      	ldr	r2, [r7, #0]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d005      	beq.n	800a1e0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	e086      	b.n	800a2e6 <HAL_RCC_ClockConfig+0x34e>
 800a1d8:	52002000 	.word	0x52002000
 800a1dc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f003 0304 	and.w	r3, r3, #4
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d010      	beq.n	800a20e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	691a      	ldr	r2, [r3, #16]
 800a1f0:	4b3f      	ldr	r3, [pc, #252]	; (800a2f0 <HAL_RCC_ClockConfig+0x358>)
 800a1f2:	699b      	ldr	r3, [r3, #24]
 800a1f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d208      	bcs.n	800a20e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a1fc:	4b3c      	ldr	r3, [pc, #240]	; (800a2f0 <HAL_RCC_ClockConfig+0x358>)
 800a1fe:	699b      	ldr	r3, [r3, #24]
 800a200:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	691b      	ldr	r3, [r3, #16]
 800a208:	4939      	ldr	r1, [pc, #228]	; (800a2f0 <HAL_RCC_ClockConfig+0x358>)
 800a20a:	4313      	orrs	r3, r2
 800a20c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f003 0308 	and.w	r3, r3, #8
 800a216:	2b00      	cmp	r3, #0
 800a218:	d010      	beq.n	800a23c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	695a      	ldr	r2, [r3, #20]
 800a21e:	4b34      	ldr	r3, [pc, #208]	; (800a2f0 <HAL_RCC_ClockConfig+0x358>)
 800a220:	69db      	ldr	r3, [r3, #28]
 800a222:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a226:	429a      	cmp	r2, r3
 800a228:	d208      	bcs.n	800a23c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a22a:	4b31      	ldr	r3, [pc, #196]	; (800a2f0 <HAL_RCC_ClockConfig+0x358>)
 800a22c:	69db      	ldr	r3, [r3, #28]
 800a22e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	695b      	ldr	r3, [r3, #20]
 800a236:	492e      	ldr	r1, [pc, #184]	; (800a2f0 <HAL_RCC_ClockConfig+0x358>)
 800a238:	4313      	orrs	r3, r2
 800a23a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f003 0310 	and.w	r3, r3, #16
 800a244:	2b00      	cmp	r3, #0
 800a246:	d010      	beq.n	800a26a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	699a      	ldr	r2, [r3, #24]
 800a24c:	4b28      	ldr	r3, [pc, #160]	; (800a2f0 <HAL_RCC_ClockConfig+0x358>)
 800a24e:	69db      	ldr	r3, [r3, #28]
 800a250:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a254:	429a      	cmp	r2, r3
 800a256:	d208      	bcs.n	800a26a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a258:	4b25      	ldr	r3, [pc, #148]	; (800a2f0 <HAL_RCC_ClockConfig+0x358>)
 800a25a:	69db      	ldr	r3, [r3, #28]
 800a25c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	699b      	ldr	r3, [r3, #24]
 800a264:	4922      	ldr	r1, [pc, #136]	; (800a2f0 <HAL_RCC_ClockConfig+0x358>)
 800a266:	4313      	orrs	r3, r2
 800a268:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f003 0320 	and.w	r3, r3, #32
 800a272:	2b00      	cmp	r3, #0
 800a274:	d010      	beq.n	800a298 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	69da      	ldr	r2, [r3, #28]
 800a27a:	4b1d      	ldr	r3, [pc, #116]	; (800a2f0 <HAL_RCC_ClockConfig+0x358>)
 800a27c:	6a1b      	ldr	r3, [r3, #32]
 800a27e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a282:	429a      	cmp	r2, r3
 800a284:	d208      	bcs.n	800a298 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a286:	4b1a      	ldr	r3, [pc, #104]	; (800a2f0 <HAL_RCC_ClockConfig+0x358>)
 800a288:	6a1b      	ldr	r3, [r3, #32]
 800a28a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	69db      	ldr	r3, [r3, #28]
 800a292:	4917      	ldr	r1, [pc, #92]	; (800a2f0 <HAL_RCC_ClockConfig+0x358>)
 800a294:	4313      	orrs	r3, r2
 800a296:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a298:	f000 f89e 	bl	800a3d8 <HAL_RCC_GetSysClockFreq>
 800a29c:	4602      	mov	r2, r0
 800a29e:	4b14      	ldr	r3, [pc, #80]	; (800a2f0 <HAL_RCC_ClockConfig+0x358>)
 800a2a0:	699b      	ldr	r3, [r3, #24]
 800a2a2:	0a1b      	lsrs	r3, r3, #8
 800a2a4:	f003 030f 	and.w	r3, r3, #15
 800a2a8:	4912      	ldr	r1, [pc, #72]	; (800a2f4 <HAL_RCC_ClockConfig+0x35c>)
 800a2aa:	5ccb      	ldrb	r3, [r1, r3]
 800a2ac:	f003 031f 	and.w	r3, r3, #31
 800a2b0:	fa22 f303 	lsr.w	r3, r2, r3
 800a2b4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a2b6:	4b0e      	ldr	r3, [pc, #56]	; (800a2f0 <HAL_RCC_ClockConfig+0x358>)
 800a2b8:	699b      	ldr	r3, [r3, #24]
 800a2ba:	f003 030f 	and.w	r3, r3, #15
 800a2be:	4a0d      	ldr	r2, [pc, #52]	; (800a2f4 <HAL_RCC_ClockConfig+0x35c>)
 800a2c0:	5cd3      	ldrb	r3, [r2, r3]
 800a2c2:	f003 031f 	and.w	r3, r3, #31
 800a2c6:	693a      	ldr	r2, [r7, #16]
 800a2c8:	fa22 f303 	lsr.w	r3, r2, r3
 800a2cc:	4a0a      	ldr	r2, [pc, #40]	; (800a2f8 <HAL_RCC_ClockConfig+0x360>)
 800a2ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a2d0:	4a0a      	ldr	r2, [pc, #40]	; (800a2fc <HAL_RCC_ClockConfig+0x364>)
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a2d6:	4b0a      	ldr	r3, [pc, #40]	; (800a300 <HAL_RCC_ClockConfig+0x368>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7f9 fb1c 	bl	8003918 <HAL_InitTick>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a2e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3718      	adds	r7, #24
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	58024400 	.word	0x58024400
 800a2f4:	08018484 	.word	0x08018484
 800a2f8:	24000004 	.word	0x24000004
 800a2fc:	24000000 	.word	0x24000000
 800a300:	24000008 	.word	0x24000008

0800a304 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b08c      	sub	sp, #48	; 0x30
 800a308:	af00      	add	r7, sp, #0
 800a30a:	60f8      	str	r0, [r7, #12]
 800a30c:	60b9      	str	r1, [r7, #8]
 800a30e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d12a      	bne.n	800a36c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800a316:	4b2d      	ldr	r3, [pc, #180]	; (800a3cc <HAL_RCC_MCOConfig+0xc8>)
 800a318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a31c:	4a2b      	ldr	r2, [pc, #172]	; (800a3cc <HAL_RCC_MCOConfig+0xc8>)
 800a31e:	f043 0301 	orr.w	r3, r3, #1
 800a322:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a326:	4b29      	ldr	r3, [pc, #164]	; (800a3cc <HAL_RCC_MCOConfig+0xc8>)
 800a328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a32c:	f003 0301 	and.w	r3, r3, #1
 800a330:	61bb      	str	r3, [r7, #24]
 800a332:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a334:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a338:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a33a:	2302      	movs	r3, #2
 800a33c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a33e:	2303      	movs	r3, #3
 800a340:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a342:	2300      	movs	r3, #0
 800a344:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a346:	2300      	movs	r3, #0
 800a348:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a34a:	f107 031c 	add.w	r3, r7, #28
 800a34e:	4619      	mov	r1, r3
 800a350:	481f      	ldr	r0, [pc, #124]	; (800a3d0 <HAL_RCC_MCOConfig+0xcc>)
 800a352:	f7fd fc29 	bl	8007ba8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a356:	4b1d      	ldr	r3, [pc, #116]	; (800a3cc <HAL_RCC_MCOConfig+0xc8>)
 800a358:	691b      	ldr	r3, [r3, #16]
 800a35a:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800a35e:	68b9      	ldr	r1, [r7, #8]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	430b      	orrs	r3, r1
 800a364:	4919      	ldr	r1, [pc, #100]	; (800a3cc <HAL_RCC_MCOConfig+0xc8>)
 800a366:	4313      	orrs	r3, r2
 800a368:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800a36a:	e02a      	b.n	800a3c2 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800a36c:	4b17      	ldr	r3, [pc, #92]	; (800a3cc <HAL_RCC_MCOConfig+0xc8>)
 800a36e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a372:	4a16      	ldr	r2, [pc, #88]	; (800a3cc <HAL_RCC_MCOConfig+0xc8>)
 800a374:	f043 0304 	orr.w	r3, r3, #4
 800a378:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a37c:	4b13      	ldr	r3, [pc, #76]	; (800a3cc <HAL_RCC_MCOConfig+0xc8>)
 800a37e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a382:	f003 0304 	and.w	r3, r3, #4
 800a386:	617b      	str	r3, [r7, #20]
 800a388:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a38a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a38e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a390:	2302      	movs	r3, #2
 800a392:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a394:	2303      	movs	r3, #3
 800a396:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a398:	2300      	movs	r3, #0
 800a39a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a39c:	2300      	movs	r3, #0
 800a39e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a3a0:	f107 031c 	add.w	r3, r7, #28
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	480b      	ldr	r0, [pc, #44]	; (800a3d4 <HAL_RCC_MCOConfig+0xd0>)
 800a3a8:	f7fd fbfe 	bl	8007ba8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a3ac:	4b07      	ldr	r3, [pc, #28]	; (800a3cc <HAL_RCC_MCOConfig+0xc8>)
 800a3ae:	691b      	ldr	r3, [r3, #16]
 800a3b0:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	01d9      	lsls	r1, r3, #7
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	430b      	orrs	r3, r1
 800a3bc:	4903      	ldr	r1, [pc, #12]	; (800a3cc <HAL_RCC_MCOConfig+0xc8>)
 800a3be:	4313      	orrs	r3, r2
 800a3c0:	610b      	str	r3, [r1, #16]
}
 800a3c2:	bf00      	nop
 800a3c4:	3730      	adds	r7, #48	; 0x30
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	58024400 	.word	0x58024400
 800a3d0:	58020000 	.word	0x58020000
 800a3d4:	58020800 	.word	0x58020800

0800a3d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b089      	sub	sp, #36	; 0x24
 800a3dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a3de:	4bb3      	ldr	r3, [pc, #716]	; (800a6ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a3e0:	691b      	ldr	r3, [r3, #16]
 800a3e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a3e6:	2b18      	cmp	r3, #24
 800a3e8:	f200 8155 	bhi.w	800a696 <HAL_RCC_GetSysClockFreq+0x2be>
 800a3ec:	a201      	add	r2, pc, #4	; (adr r2, 800a3f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a3ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3f2:	bf00      	nop
 800a3f4:	0800a459 	.word	0x0800a459
 800a3f8:	0800a697 	.word	0x0800a697
 800a3fc:	0800a697 	.word	0x0800a697
 800a400:	0800a697 	.word	0x0800a697
 800a404:	0800a697 	.word	0x0800a697
 800a408:	0800a697 	.word	0x0800a697
 800a40c:	0800a697 	.word	0x0800a697
 800a410:	0800a697 	.word	0x0800a697
 800a414:	0800a47f 	.word	0x0800a47f
 800a418:	0800a697 	.word	0x0800a697
 800a41c:	0800a697 	.word	0x0800a697
 800a420:	0800a697 	.word	0x0800a697
 800a424:	0800a697 	.word	0x0800a697
 800a428:	0800a697 	.word	0x0800a697
 800a42c:	0800a697 	.word	0x0800a697
 800a430:	0800a697 	.word	0x0800a697
 800a434:	0800a485 	.word	0x0800a485
 800a438:	0800a697 	.word	0x0800a697
 800a43c:	0800a697 	.word	0x0800a697
 800a440:	0800a697 	.word	0x0800a697
 800a444:	0800a697 	.word	0x0800a697
 800a448:	0800a697 	.word	0x0800a697
 800a44c:	0800a697 	.word	0x0800a697
 800a450:	0800a697 	.word	0x0800a697
 800a454:	0800a48b 	.word	0x0800a48b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a458:	4b94      	ldr	r3, [pc, #592]	; (800a6ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f003 0320 	and.w	r3, r3, #32
 800a460:	2b00      	cmp	r3, #0
 800a462:	d009      	beq.n	800a478 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a464:	4b91      	ldr	r3, [pc, #580]	; (800a6ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	08db      	lsrs	r3, r3, #3
 800a46a:	f003 0303 	and.w	r3, r3, #3
 800a46e:	4a90      	ldr	r2, [pc, #576]	; (800a6b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a470:	fa22 f303 	lsr.w	r3, r2, r3
 800a474:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a476:	e111      	b.n	800a69c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a478:	4b8d      	ldr	r3, [pc, #564]	; (800a6b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a47a:	61bb      	str	r3, [r7, #24]
      break;
 800a47c:	e10e      	b.n	800a69c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a47e:	4b8d      	ldr	r3, [pc, #564]	; (800a6b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a480:	61bb      	str	r3, [r7, #24]
      break;
 800a482:	e10b      	b.n	800a69c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a484:	4b8c      	ldr	r3, [pc, #560]	; (800a6b8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a486:	61bb      	str	r3, [r7, #24]
      break;
 800a488:	e108      	b.n	800a69c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a48a:	4b88      	ldr	r3, [pc, #544]	; (800a6ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a48c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a48e:	f003 0303 	and.w	r3, r3, #3
 800a492:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a494:	4b85      	ldr	r3, [pc, #532]	; (800a6ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a498:	091b      	lsrs	r3, r3, #4
 800a49a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a49e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a4a0:	4b82      	ldr	r3, [pc, #520]	; (800a6ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4a4:	f003 0301 	and.w	r3, r3, #1
 800a4a8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a4aa:	4b80      	ldr	r3, [pc, #512]	; (800a6ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4ae:	08db      	lsrs	r3, r3, #3
 800a4b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a4b4:	68fa      	ldr	r2, [r7, #12]
 800a4b6:	fb02 f303 	mul.w	r3, r2, r3
 800a4ba:	ee07 3a90 	vmov	s15, r3
 800a4be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4c2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	f000 80e1 	beq.w	800a690 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	2b02      	cmp	r3, #2
 800a4d2:	f000 8083 	beq.w	800a5dc <HAL_RCC_GetSysClockFreq+0x204>
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	2b02      	cmp	r3, #2
 800a4da:	f200 80a1 	bhi.w	800a620 <HAL_RCC_GetSysClockFreq+0x248>
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d003      	beq.n	800a4ec <HAL_RCC_GetSysClockFreq+0x114>
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	2b01      	cmp	r3, #1
 800a4e8:	d056      	beq.n	800a598 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a4ea:	e099      	b.n	800a620 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4ec:	4b6f      	ldr	r3, [pc, #444]	; (800a6ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f003 0320 	and.w	r3, r3, #32
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d02d      	beq.n	800a554 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4f8:	4b6c      	ldr	r3, [pc, #432]	; (800a6ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	08db      	lsrs	r3, r3, #3
 800a4fe:	f003 0303 	and.w	r3, r3, #3
 800a502:	4a6b      	ldr	r2, [pc, #428]	; (800a6b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a504:	fa22 f303 	lsr.w	r3, r2, r3
 800a508:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	ee07 3a90 	vmov	s15, r3
 800a510:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	ee07 3a90 	vmov	s15, r3
 800a51a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a51e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a522:	4b62      	ldr	r3, [pc, #392]	; (800a6ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a52a:	ee07 3a90 	vmov	s15, r3
 800a52e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a532:	ed97 6a02 	vldr	s12, [r7, #8]
 800a536:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a6bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800a53a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a53e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a542:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a54a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a54e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a552:	e087      	b.n	800a664 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	ee07 3a90 	vmov	s15, r3
 800a55a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a55e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a6c0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a566:	4b51      	ldr	r3, [pc, #324]	; (800a6ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a56a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a56e:	ee07 3a90 	vmov	s15, r3
 800a572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a576:	ed97 6a02 	vldr	s12, [r7, #8]
 800a57a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a6bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800a57e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a586:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a58a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a58e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a592:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a596:	e065      	b.n	800a664 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	ee07 3a90 	vmov	s15, r3
 800a59e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5a2:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a6c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a5a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5aa:	4b40      	ldr	r3, [pc, #256]	; (800a6ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5b2:	ee07 3a90 	vmov	s15, r3
 800a5b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5ba:	ed97 6a02 	vldr	s12, [r7, #8]
 800a5be:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a6bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800a5c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a5da:	e043      	b.n	800a664 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	ee07 3a90 	vmov	s15, r3
 800a5e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5e6:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a6c8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a5ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5ee:	4b2f      	ldr	r3, [pc, #188]	; (800a6ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5f6:	ee07 3a90 	vmov	s15, r3
 800a5fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5fe:	ed97 6a02 	vldr	s12, [r7, #8]
 800a602:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a6bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800a606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a60a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a60e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a61a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a61e:	e021      	b.n	800a664 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	ee07 3a90 	vmov	s15, r3
 800a626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a62a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a6c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a62e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a632:	4b1e      	ldr	r3, [pc, #120]	; (800a6ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a63a:	ee07 3a90 	vmov	s15, r3
 800a63e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a642:	ed97 6a02 	vldr	s12, [r7, #8]
 800a646:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a6bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800a64a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a64e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a65a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a65e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a662:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a664:	4b11      	ldr	r3, [pc, #68]	; (800a6ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a668:	0a5b      	lsrs	r3, r3, #9
 800a66a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a66e:	3301      	adds	r3, #1
 800a670:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	ee07 3a90 	vmov	s15, r3
 800a678:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a67c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a680:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a684:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a688:	ee17 3a90 	vmov	r3, s15
 800a68c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a68e:	e005      	b.n	800a69c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a690:	2300      	movs	r3, #0
 800a692:	61bb      	str	r3, [r7, #24]
      break;
 800a694:	e002      	b.n	800a69c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a696:	4b07      	ldr	r3, [pc, #28]	; (800a6b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a698:	61bb      	str	r3, [r7, #24]
      break;
 800a69a:	bf00      	nop
  }

  return sysclockfreq;
 800a69c:	69bb      	ldr	r3, [r7, #24]
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3724      	adds	r7, #36	; 0x24
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a8:	4770      	bx	lr
 800a6aa:	bf00      	nop
 800a6ac:	58024400 	.word	0x58024400
 800a6b0:	03d09000 	.word	0x03d09000
 800a6b4:	003d0900 	.word	0x003d0900
 800a6b8:	02faf080 	.word	0x02faf080
 800a6bc:	46000000 	.word	0x46000000
 800a6c0:	4c742400 	.word	0x4c742400
 800a6c4:	4a742400 	.word	0x4a742400
 800a6c8:	4c3ebc20 	.word	0x4c3ebc20

0800a6cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a6d2:	f7ff fe81 	bl	800a3d8 <HAL_RCC_GetSysClockFreq>
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	4b10      	ldr	r3, [pc, #64]	; (800a71c <HAL_RCC_GetHCLKFreq+0x50>)
 800a6da:	699b      	ldr	r3, [r3, #24]
 800a6dc:	0a1b      	lsrs	r3, r3, #8
 800a6de:	f003 030f 	and.w	r3, r3, #15
 800a6e2:	490f      	ldr	r1, [pc, #60]	; (800a720 <HAL_RCC_GetHCLKFreq+0x54>)
 800a6e4:	5ccb      	ldrb	r3, [r1, r3]
 800a6e6:	f003 031f 	and.w	r3, r3, #31
 800a6ea:	fa22 f303 	lsr.w	r3, r2, r3
 800a6ee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a6f0:	4b0a      	ldr	r3, [pc, #40]	; (800a71c <HAL_RCC_GetHCLKFreq+0x50>)
 800a6f2:	699b      	ldr	r3, [r3, #24]
 800a6f4:	f003 030f 	and.w	r3, r3, #15
 800a6f8:	4a09      	ldr	r2, [pc, #36]	; (800a720 <HAL_RCC_GetHCLKFreq+0x54>)
 800a6fa:	5cd3      	ldrb	r3, [r2, r3]
 800a6fc:	f003 031f 	and.w	r3, r3, #31
 800a700:	687a      	ldr	r2, [r7, #4]
 800a702:	fa22 f303 	lsr.w	r3, r2, r3
 800a706:	4a07      	ldr	r2, [pc, #28]	; (800a724 <HAL_RCC_GetHCLKFreq+0x58>)
 800a708:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a70a:	4a07      	ldr	r2, [pc, #28]	; (800a728 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a710:	4b04      	ldr	r3, [pc, #16]	; (800a724 <HAL_RCC_GetHCLKFreq+0x58>)
 800a712:	681b      	ldr	r3, [r3, #0]
}
 800a714:	4618      	mov	r0, r3
 800a716:	3708      	adds	r7, #8
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}
 800a71c:	58024400 	.word	0x58024400
 800a720:	08018484 	.word	0x08018484
 800a724:	24000004 	.word	0x24000004
 800a728:	24000000 	.word	0x24000000

0800a72c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a730:	f7ff ffcc 	bl	800a6cc <HAL_RCC_GetHCLKFreq>
 800a734:	4602      	mov	r2, r0
 800a736:	4b06      	ldr	r3, [pc, #24]	; (800a750 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a738:	69db      	ldr	r3, [r3, #28]
 800a73a:	091b      	lsrs	r3, r3, #4
 800a73c:	f003 0307 	and.w	r3, r3, #7
 800a740:	4904      	ldr	r1, [pc, #16]	; (800a754 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a742:	5ccb      	ldrb	r3, [r1, r3]
 800a744:	f003 031f 	and.w	r3, r3, #31
 800a748:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	bd80      	pop	{r7, pc}
 800a750:	58024400 	.word	0x58024400
 800a754:	08018484 	.word	0x08018484

0800a758 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a75c:	f7ff ffb6 	bl	800a6cc <HAL_RCC_GetHCLKFreq>
 800a760:	4602      	mov	r2, r0
 800a762:	4b06      	ldr	r3, [pc, #24]	; (800a77c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a764:	69db      	ldr	r3, [r3, #28]
 800a766:	0a1b      	lsrs	r3, r3, #8
 800a768:	f003 0307 	and.w	r3, r3, #7
 800a76c:	4904      	ldr	r1, [pc, #16]	; (800a780 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a76e:	5ccb      	ldrb	r3, [r1, r3]
 800a770:	f003 031f 	and.w	r3, r3, #31
 800a774:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a778:	4618      	mov	r0, r3
 800a77a:	bd80      	pop	{r7, pc}
 800a77c:	58024400 	.word	0x58024400
 800a780:	08018484 	.word	0x08018484

0800a784 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a788:	b0c6      	sub	sp, #280	; 0x118
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a790:	2300      	movs	r3, #0
 800a792:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a796:	2300      	movs	r3, #0
 800a798:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a79c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a7a8:	2500      	movs	r5, #0
 800a7aa:	ea54 0305 	orrs.w	r3, r4, r5
 800a7ae:	d049      	beq.n	800a844 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a7b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a7ba:	d02f      	beq.n	800a81c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a7bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a7c0:	d828      	bhi.n	800a814 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a7c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7c6:	d01a      	beq.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a7c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7cc:	d822      	bhi.n	800a814 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d003      	beq.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a7d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7d6:	d007      	beq.n	800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a7d8:	e01c      	b.n	800a814 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7da:	4bab      	ldr	r3, [pc, #684]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a7dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7de:	4aaa      	ldr	r2, [pc, #680]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a7e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a7e6:	e01a      	b.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a7e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7ec:	3308      	adds	r3, #8
 800a7ee:	2102      	movs	r1, #2
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f002 fa49 	bl	800cc88 <RCCEx_PLL2_Config>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a7fc:	e00f      	b.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a7fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a802:	3328      	adds	r3, #40	; 0x28
 800a804:	2102      	movs	r1, #2
 800a806:	4618      	mov	r0, r3
 800a808:	f002 faf0 	bl	800cdec <RCCEx_PLL3_Config>
 800a80c:	4603      	mov	r3, r0
 800a80e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a812:	e004      	b.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a814:	2301      	movs	r3, #1
 800a816:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a81a:	e000      	b.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a81c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a81e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a822:	2b00      	cmp	r3, #0
 800a824:	d10a      	bne.n	800a83c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a826:	4b98      	ldr	r3, [pc, #608]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a82a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a82e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a832:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a834:	4a94      	ldr	r2, [pc, #592]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a836:	430b      	orrs	r3, r1
 800a838:	6513      	str	r3, [r2, #80]	; 0x50
 800a83a:	e003      	b.n	800a844 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a83c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a840:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a844:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800a850:	f04f 0900 	mov.w	r9, #0
 800a854:	ea58 0309 	orrs.w	r3, r8, r9
 800a858:	d047      	beq.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a85a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a85e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a860:	2b04      	cmp	r3, #4
 800a862:	d82a      	bhi.n	800a8ba <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a864:	a201      	add	r2, pc, #4	; (adr r2, 800a86c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a86a:	bf00      	nop
 800a86c:	0800a881 	.word	0x0800a881
 800a870:	0800a88f 	.word	0x0800a88f
 800a874:	0800a8a5 	.word	0x0800a8a5
 800a878:	0800a8c3 	.word	0x0800a8c3
 800a87c:	0800a8c3 	.word	0x0800a8c3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a880:	4b81      	ldr	r3, [pc, #516]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a884:	4a80      	ldr	r2, [pc, #512]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a88a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a88c:	e01a      	b.n	800a8c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a88e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a892:	3308      	adds	r3, #8
 800a894:	2100      	movs	r1, #0
 800a896:	4618      	mov	r0, r3
 800a898:	f002 f9f6 	bl	800cc88 <RCCEx_PLL2_Config>
 800a89c:	4603      	mov	r3, r0
 800a89e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a8a2:	e00f      	b.n	800a8c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a8a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8a8:	3328      	adds	r3, #40	; 0x28
 800a8aa:	2100      	movs	r1, #0
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f002 fa9d 	bl	800cdec <RCCEx_PLL3_Config>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a8b8:	e004      	b.n	800a8c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a8c0:	e000      	b.n	800a8c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a8c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d10a      	bne.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a8cc:	4b6e      	ldr	r3, [pc, #440]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a8ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8d0:	f023 0107 	bic.w	r1, r3, #7
 800a8d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8da:	4a6b      	ldr	r2, [pc, #428]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a8dc:	430b      	orrs	r3, r1
 800a8de:	6513      	str	r3, [r2, #80]	; 0x50
 800a8e0:	e003      	b.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8e2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a8e6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a8ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f2:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800a8f6:	f04f 0b00 	mov.w	fp, #0
 800a8fa:	ea5a 030b 	orrs.w	r3, sl, fp
 800a8fe:	d05b      	beq.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a900:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a904:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a908:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a90c:	d03b      	beq.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a90e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a912:	d834      	bhi.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a914:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a918:	d037      	beq.n	800a98a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a91a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a91e:	d82e      	bhi.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a920:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a924:	d033      	beq.n	800a98e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a926:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a92a:	d828      	bhi.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a92c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a930:	d01a      	beq.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800a932:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a936:	d822      	bhi.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d003      	beq.n	800a944 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800a93c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a940:	d007      	beq.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800a942:	e01c      	b.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a944:	4b50      	ldr	r3, [pc, #320]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a948:	4a4f      	ldr	r2, [pc, #316]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a94a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a94e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a950:	e01e      	b.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a952:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a956:	3308      	adds	r3, #8
 800a958:	2100      	movs	r1, #0
 800a95a:	4618      	mov	r0, r3
 800a95c:	f002 f994 	bl	800cc88 <RCCEx_PLL2_Config>
 800a960:	4603      	mov	r3, r0
 800a962:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a966:	e013      	b.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a96c:	3328      	adds	r3, #40	; 0x28
 800a96e:	2100      	movs	r1, #0
 800a970:	4618      	mov	r0, r3
 800a972:	f002 fa3b 	bl	800cdec <RCCEx_PLL3_Config>
 800a976:	4603      	mov	r3, r0
 800a978:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a97c:	e008      	b.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a97e:	2301      	movs	r3, #1
 800a980:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a984:	e004      	b.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a986:	bf00      	nop
 800a988:	e002      	b.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a98a:	bf00      	nop
 800a98c:	e000      	b.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a98e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a990:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a994:	2b00      	cmp	r3, #0
 800a996:	d10b      	bne.n	800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a998:	4b3b      	ldr	r3, [pc, #236]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a99a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a99c:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800a9a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a9a8:	4a37      	ldr	r2, [pc, #220]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a9aa:	430b      	orrs	r3, r1
 800a9ac:	6593      	str	r3, [r2, #88]	; 0x58
 800a9ae:	e003      	b.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9b4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a9b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800a9c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a9ce:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800a9d2:	460b      	mov	r3, r1
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	d05d      	beq.n	800aa94 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a9d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a9e0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a9e4:	d03b      	beq.n	800aa5e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800a9e6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a9ea:	d834      	bhi.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a9ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a9f0:	d037      	beq.n	800aa62 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800a9f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a9f6:	d82e      	bhi.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a9f8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a9fc:	d033      	beq.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800a9fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aa02:	d828      	bhi.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aa04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa08:	d01a      	beq.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800aa0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa0e:	d822      	bhi.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d003      	beq.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800aa14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aa18:	d007      	beq.n	800aa2a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800aa1a:	e01c      	b.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa1c:	4b1a      	ldr	r3, [pc, #104]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa20:	4a19      	ldr	r2, [pc, #100]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa28:	e01e      	b.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa2e:	3308      	adds	r3, #8
 800aa30:	2100      	movs	r1, #0
 800aa32:	4618      	mov	r0, r3
 800aa34:	f002 f928 	bl	800cc88 <RCCEx_PLL2_Config>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800aa3e:	e013      	b.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa44:	3328      	adds	r3, #40	; 0x28
 800aa46:	2100      	movs	r1, #0
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f002 f9cf 	bl	800cdec <RCCEx_PLL3_Config>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa54:	e008      	b.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800aa56:	2301      	movs	r3, #1
 800aa58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aa5c:	e004      	b.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800aa5e:	bf00      	nop
 800aa60:	e002      	b.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800aa62:	bf00      	nop
 800aa64:	e000      	b.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800aa66:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d10d      	bne.n	800aa8c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800aa70:	4b05      	ldr	r3, [pc, #20]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa74:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800aa78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa7c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aa80:	4a01      	ldr	r2, [pc, #4]	; (800aa88 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa82:	430b      	orrs	r3, r1
 800aa84:	6593      	str	r3, [r2, #88]	; 0x58
 800aa86:	e005      	b.n	800aa94 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800aa88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa8c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa90:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800aa94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa9c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800aaa0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800aaaa:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800aaae:	460b      	mov	r3, r1
 800aab0:	4313      	orrs	r3, r2
 800aab2:	d03a      	beq.n	800ab2a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800aab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aaba:	2b30      	cmp	r3, #48	; 0x30
 800aabc:	d01f      	beq.n	800aafe <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800aabe:	2b30      	cmp	r3, #48	; 0x30
 800aac0:	d819      	bhi.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800aac2:	2b20      	cmp	r3, #32
 800aac4:	d00c      	beq.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800aac6:	2b20      	cmp	r3, #32
 800aac8:	d815      	bhi.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d019      	beq.n	800ab02 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800aace:	2b10      	cmp	r3, #16
 800aad0:	d111      	bne.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aad2:	4baa      	ldr	r3, [pc, #680]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad6:	4aa9      	ldr	r2, [pc, #676]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aadc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800aade:	e011      	b.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aae4:	3308      	adds	r3, #8
 800aae6:	2102      	movs	r1, #2
 800aae8:	4618      	mov	r0, r3
 800aaea:	f002 f8cd 	bl	800cc88 <RCCEx_PLL2_Config>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800aaf4:	e006      	b.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aafc:	e002      	b.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800aafe:	bf00      	nop
 800ab00:	e000      	b.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800ab02:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d10a      	bne.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800ab0c:	4b9b      	ldr	r3, [pc, #620]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ab0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab10:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800ab14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab1a:	4a98      	ldr	r2, [pc, #608]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ab1c:	430b      	orrs	r3, r1
 800ab1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ab20:	e003      	b.n	800ab2a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab22:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab26:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ab2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab32:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800ab36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ab40:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800ab44:	460b      	mov	r3, r1
 800ab46:	4313      	orrs	r3, r2
 800ab48:	d051      	beq.n	800abee <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ab4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab54:	d035      	beq.n	800abc2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800ab56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab5a:	d82e      	bhi.n	800abba <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ab5c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ab60:	d031      	beq.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800ab62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ab66:	d828      	bhi.n	800abba <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ab68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab6c:	d01a      	beq.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800ab6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab72:	d822      	bhi.n	800abba <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d003      	beq.n	800ab80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800ab78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab7c:	d007      	beq.n	800ab8e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800ab7e:	e01c      	b.n	800abba <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab80:	4b7e      	ldr	r3, [pc, #504]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ab82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab84:	4a7d      	ldr	r2, [pc, #500]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ab86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ab8c:	e01c      	b.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab92:	3308      	adds	r3, #8
 800ab94:	2100      	movs	r1, #0
 800ab96:	4618      	mov	r0, r3
 800ab98:	f002 f876 	bl	800cc88 <RCCEx_PLL2_Config>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800aba2:	e011      	b.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aba8:	3328      	adds	r3, #40	; 0x28
 800abaa:	2100      	movs	r1, #0
 800abac:	4618      	mov	r0, r3
 800abae:	f002 f91d 	bl	800cdec <RCCEx_PLL3_Config>
 800abb2:	4603      	mov	r3, r0
 800abb4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800abb8:	e006      	b.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800abba:	2301      	movs	r3, #1
 800abbc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800abc0:	e002      	b.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800abc2:	bf00      	nop
 800abc4:	e000      	b.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800abc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abc8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d10a      	bne.n	800abe6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800abd0:	4b6a      	ldr	r3, [pc, #424]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800abd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abd4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800abd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abde:	4a67      	ldr	r2, [pc, #412]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800abe0:	430b      	orrs	r3, r1
 800abe2:	6513      	str	r3, [r2, #80]	; 0x50
 800abe4:	e003      	b.n	800abee <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abe6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800abea:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800abee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800abfa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800abfe:	2300      	movs	r3, #0
 800ac00:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ac04:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800ac08:	460b      	mov	r3, r1
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	d053      	beq.n	800acb6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ac0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ac18:	d033      	beq.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800ac1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ac1e:	d82c      	bhi.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ac20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ac24:	d02f      	beq.n	800ac86 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800ac26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ac2a:	d826      	bhi.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ac2c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ac30:	d02b      	beq.n	800ac8a <HAL_RCCEx_PeriphCLKConfig+0x506>
 800ac32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ac36:	d820      	bhi.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ac38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac3c:	d012      	beq.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800ac3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac42:	d81a      	bhi.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d022      	beq.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800ac48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac4c:	d115      	bne.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ac4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac52:	3308      	adds	r3, #8
 800ac54:	2101      	movs	r1, #1
 800ac56:	4618      	mov	r0, r3
 800ac58:	f002 f816 	bl	800cc88 <RCCEx_PLL2_Config>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ac62:	e015      	b.n	800ac90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ac64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac68:	3328      	adds	r3, #40	; 0x28
 800ac6a:	2101      	movs	r1, #1
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f002 f8bd 	bl	800cdec <RCCEx_PLL3_Config>
 800ac72:	4603      	mov	r3, r0
 800ac74:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ac78:	e00a      	b.n	800ac90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ac80:	e006      	b.n	800ac90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ac82:	bf00      	nop
 800ac84:	e004      	b.n	800ac90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ac86:	bf00      	nop
 800ac88:	e002      	b.n	800ac90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ac8a:	bf00      	nop
 800ac8c:	e000      	b.n	800ac90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ac8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d10a      	bne.n	800acae <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ac98:	4b38      	ldr	r3, [pc, #224]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac9c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800aca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aca6:	4a35      	ldr	r2, [pc, #212]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aca8:	430b      	orrs	r3, r1
 800acaa:	6513      	str	r3, [r2, #80]	; 0x50
 800acac:	e003      	b.n	800acb6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800acb2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800acb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acbe:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800acc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800acc6:	2300      	movs	r3, #0
 800acc8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800accc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800acd0:	460b      	mov	r3, r1
 800acd2:	4313      	orrs	r3, r2
 800acd4:	d058      	beq.n	800ad88 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800acd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acda:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800acde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ace2:	d033      	beq.n	800ad4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800ace4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ace8:	d82c      	bhi.n	800ad44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800acea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acee:	d02f      	beq.n	800ad50 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800acf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acf4:	d826      	bhi.n	800ad44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800acf6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800acfa:	d02b      	beq.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800acfc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ad00:	d820      	bhi.n	800ad44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ad02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad06:	d012      	beq.n	800ad2e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800ad08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad0c:	d81a      	bhi.n	800ad44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d022      	beq.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800ad12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad16:	d115      	bne.n	800ad44 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ad18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad1c:	3308      	adds	r3, #8
 800ad1e:	2101      	movs	r1, #1
 800ad20:	4618      	mov	r0, r3
 800ad22:	f001 ffb1 	bl	800cc88 <RCCEx_PLL2_Config>
 800ad26:	4603      	mov	r3, r0
 800ad28:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ad2c:	e015      	b.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad32:	3328      	adds	r3, #40	; 0x28
 800ad34:	2101      	movs	r1, #1
 800ad36:	4618      	mov	r0, r3
 800ad38:	f002 f858 	bl	800cdec <RCCEx_PLL3_Config>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ad42:	e00a      	b.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ad44:	2301      	movs	r3, #1
 800ad46:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ad4a:	e006      	b.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ad4c:	bf00      	nop
 800ad4e:	e004      	b.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ad50:	bf00      	nop
 800ad52:	e002      	b.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ad54:	bf00      	nop
 800ad56:	e000      	b.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ad58:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad5a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d10e      	bne.n	800ad80 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ad62:	4b06      	ldr	r3, [pc, #24]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ad64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad66:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800ad6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ad72:	4a02      	ldr	r2, [pc, #8]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ad74:	430b      	orrs	r3, r1
 800ad76:	6593      	str	r3, [r2, #88]	; 0x58
 800ad78:	e006      	b.n	800ad88 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800ad7a:	bf00      	nop
 800ad7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad80:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad84:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ad88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad90:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800ad94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ad98:	2300      	movs	r3, #0
 800ad9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ad9e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800ada2:	460b      	mov	r3, r1
 800ada4:	4313      	orrs	r3, r2
 800ada6:	d037      	beq.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800ada8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adb2:	d00e      	beq.n	800add2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800adb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adb8:	d816      	bhi.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d018      	beq.n	800adf0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800adbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800adc2:	d111      	bne.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800adc4:	4bc4      	ldr	r3, [pc, #784]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800adc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc8:	4ac3      	ldr	r2, [pc, #780]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800adca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800adce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800add0:	e00f      	b.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800add2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800add6:	3308      	adds	r3, #8
 800add8:	2101      	movs	r1, #1
 800adda:	4618      	mov	r0, r3
 800addc:	f001 ff54 	bl	800cc88 <RCCEx_PLL2_Config>
 800ade0:	4603      	mov	r3, r0
 800ade2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ade6:	e004      	b.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ade8:	2301      	movs	r3, #1
 800adea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800adee:	e000      	b.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800adf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800adf2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d10a      	bne.n	800ae10 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800adfa:	4bb7      	ldr	r3, [pc, #732]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800adfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adfe:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800ae02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae08:	4ab3      	ldr	r2, [pc, #716]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae0a:	430b      	orrs	r3, r1
 800ae0c:	6513      	str	r3, [r2, #80]	; 0x50
 800ae0e:	e003      	b.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae10:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae14:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ae18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae20:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800ae24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ae28:	2300      	movs	r3, #0
 800ae2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ae2e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800ae32:	460b      	mov	r3, r1
 800ae34:	4313      	orrs	r3, r2
 800ae36:	d039      	beq.n	800aeac <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800ae38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae3e:	2b03      	cmp	r3, #3
 800ae40:	d81c      	bhi.n	800ae7c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800ae42:	a201      	add	r2, pc, #4	; (adr r2, 800ae48 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800ae44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae48:	0800ae85 	.word	0x0800ae85
 800ae4c:	0800ae59 	.word	0x0800ae59
 800ae50:	0800ae67 	.word	0x0800ae67
 800ae54:	0800ae85 	.word	0x0800ae85
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae58:	4b9f      	ldr	r3, [pc, #636]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae5c:	4a9e      	ldr	r2, [pc, #632]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ae64:	e00f      	b.n	800ae86 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae6a:	3308      	adds	r3, #8
 800ae6c:	2102      	movs	r1, #2
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f001 ff0a 	bl	800cc88 <RCCEx_PLL2_Config>
 800ae74:	4603      	mov	r3, r0
 800ae76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ae7a:	e004      	b.n	800ae86 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ae82:	e000      	b.n	800ae86 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800ae84:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae86:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d10a      	bne.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ae8e:	4b92      	ldr	r3, [pc, #584]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae92:	f023 0103 	bic.w	r1, r3, #3
 800ae96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae9c:	4a8e      	ldr	r2, [pc, #568]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae9e:	430b      	orrs	r3, r1
 800aea0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aea2:	e003      	b.n	800aeac <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aea4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aea8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800aeac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800aeb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800aebc:	2300      	movs	r3, #0
 800aebe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aec2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800aec6:	460b      	mov	r3, r1
 800aec8:	4313      	orrs	r3, r2
 800aeca:	f000 8099 	beq.w	800b000 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800aece:	4b83      	ldr	r3, [pc, #524]	; (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	4a82      	ldr	r2, [pc, #520]	; (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800aed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aed8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aeda:	f7f8 fd67 	bl	80039ac <HAL_GetTick>
 800aede:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aee2:	e00b      	b.n	800aefc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aee4:	f7f8 fd62 	bl	80039ac <HAL_GetTick>
 800aee8:	4602      	mov	r2, r0
 800aeea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800aeee:	1ad3      	subs	r3, r2, r3
 800aef0:	2b64      	cmp	r3, #100	; 0x64
 800aef2:	d903      	bls.n	800aefc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800aef4:	2303      	movs	r3, #3
 800aef6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aefa:	e005      	b.n	800af08 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aefc:	4b77      	ldr	r3, [pc, #476]	; (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af04:	2b00      	cmp	r3, #0
 800af06:	d0ed      	beq.n	800aee4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800af08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d173      	bne.n	800aff8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800af10:	4b71      	ldr	r3, [pc, #452]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800af14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800af1c:	4053      	eors	r3, r2
 800af1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af22:	2b00      	cmp	r3, #0
 800af24:	d015      	beq.n	800af52 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800af26:	4b6c      	ldr	r3, [pc, #432]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af2e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800af32:	4b69      	ldr	r3, [pc, #420]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af36:	4a68      	ldr	r2, [pc, #416]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af3c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800af3e:	4b66      	ldr	r3, [pc, #408]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af42:	4a65      	ldr	r2, [pc, #404]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af48:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800af4a:	4a63      	ldr	r2, [pc, #396]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800af50:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800af52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800af5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af5e:	d118      	bne.n	800af92 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af60:	f7f8 fd24 	bl	80039ac <HAL_GetTick>
 800af64:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af68:	e00d      	b.n	800af86 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af6a:	f7f8 fd1f 	bl	80039ac <HAL_GetTick>
 800af6e:	4602      	mov	r2, r0
 800af70:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800af74:	1ad2      	subs	r2, r2, r3
 800af76:	f241 3388 	movw	r3, #5000	; 0x1388
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d903      	bls.n	800af86 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800af7e:	2303      	movs	r3, #3
 800af80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800af84:	e005      	b.n	800af92 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af86:	4b54      	ldr	r3, [pc, #336]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af8a:	f003 0302 	and.w	r3, r3, #2
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d0eb      	beq.n	800af6a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800af92:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af96:	2b00      	cmp	r3, #0
 800af98:	d129      	bne.n	800afee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800af9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800afa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800afa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800afaa:	d10e      	bne.n	800afca <HAL_RCCEx_PeriphCLKConfig+0x846>
 800afac:	4b4a      	ldr	r3, [pc, #296]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afae:	691b      	ldr	r3, [r3, #16]
 800afb0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800afb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800afbc:	091a      	lsrs	r2, r3, #4
 800afbe:	4b48      	ldr	r3, [pc, #288]	; (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800afc0:	4013      	ands	r3, r2
 800afc2:	4a45      	ldr	r2, [pc, #276]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afc4:	430b      	orrs	r3, r1
 800afc6:	6113      	str	r3, [r2, #16]
 800afc8:	e005      	b.n	800afd6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800afca:	4b43      	ldr	r3, [pc, #268]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afcc:	691b      	ldr	r3, [r3, #16]
 800afce:	4a42      	ldr	r2, [pc, #264]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afd0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800afd4:	6113      	str	r3, [r2, #16]
 800afd6:	4b40      	ldr	r3, [pc, #256]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afd8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800afda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afde:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800afe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800afe6:	4a3c      	ldr	r2, [pc, #240]	; (800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afe8:	430b      	orrs	r3, r1
 800afea:	6713      	str	r3, [r2, #112]	; 0x70
 800afec:	e008      	b.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800afee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aff2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800aff6:	e003      	b.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aff8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800affc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b000:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b008:	f002 0301 	and.w	r3, r2, #1
 800b00c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b010:	2300      	movs	r3, #0
 800b012:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b016:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b01a:	460b      	mov	r3, r1
 800b01c:	4313      	orrs	r3, r2
 800b01e:	f000 808f 	beq.w	800b140 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b022:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b026:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b028:	2b28      	cmp	r3, #40	; 0x28
 800b02a:	d871      	bhi.n	800b110 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b02c:	a201      	add	r2, pc, #4	; (adr r2, 800b034 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800b02e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b032:	bf00      	nop
 800b034:	0800b119 	.word	0x0800b119
 800b038:	0800b111 	.word	0x0800b111
 800b03c:	0800b111 	.word	0x0800b111
 800b040:	0800b111 	.word	0x0800b111
 800b044:	0800b111 	.word	0x0800b111
 800b048:	0800b111 	.word	0x0800b111
 800b04c:	0800b111 	.word	0x0800b111
 800b050:	0800b111 	.word	0x0800b111
 800b054:	0800b0e5 	.word	0x0800b0e5
 800b058:	0800b111 	.word	0x0800b111
 800b05c:	0800b111 	.word	0x0800b111
 800b060:	0800b111 	.word	0x0800b111
 800b064:	0800b111 	.word	0x0800b111
 800b068:	0800b111 	.word	0x0800b111
 800b06c:	0800b111 	.word	0x0800b111
 800b070:	0800b111 	.word	0x0800b111
 800b074:	0800b0fb 	.word	0x0800b0fb
 800b078:	0800b111 	.word	0x0800b111
 800b07c:	0800b111 	.word	0x0800b111
 800b080:	0800b111 	.word	0x0800b111
 800b084:	0800b111 	.word	0x0800b111
 800b088:	0800b111 	.word	0x0800b111
 800b08c:	0800b111 	.word	0x0800b111
 800b090:	0800b111 	.word	0x0800b111
 800b094:	0800b119 	.word	0x0800b119
 800b098:	0800b111 	.word	0x0800b111
 800b09c:	0800b111 	.word	0x0800b111
 800b0a0:	0800b111 	.word	0x0800b111
 800b0a4:	0800b111 	.word	0x0800b111
 800b0a8:	0800b111 	.word	0x0800b111
 800b0ac:	0800b111 	.word	0x0800b111
 800b0b0:	0800b111 	.word	0x0800b111
 800b0b4:	0800b119 	.word	0x0800b119
 800b0b8:	0800b111 	.word	0x0800b111
 800b0bc:	0800b111 	.word	0x0800b111
 800b0c0:	0800b111 	.word	0x0800b111
 800b0c4:	0800b111 	.word	0x0800b111
 800b0c8:	0800b111 	.word	0x0800b111
 800b0cc:	0800b111 	.word	0x0800b111
 800b0d0:	0800b111 	.word	0x0800b111
 800b0d4:	0800b119 	.word	0x0800b119
 800b0d8:	58024400 	.word	0x58024400
 800b0dc:	58024800 	.word	0x58024800
 800b0e0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b0e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0e8:	3308      	adds	r3, #8
 800b0ea:	2101      	movs	r1, #1
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f001 fdcb 	bl	800cc88 <RCCEx_PLL2_Config>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b0f8:	e00f      	b.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b0fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0fe:	3328      	adds	r3, #40	; 0x28
 800b100:	2101      	movs	r1, #1
 800b102:	4618      	mov	r0, r3
 800b104:	f001 fe72 	bl	800cdec <RCCEx_PLL3_Config>
 800b108:	4603      	mov	r3, r0
 800b10a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b10e:	e004      	b.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b110:	2301      	movs	r3, #1
 800b112:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b116:	e000      	b.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800b118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b11a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d10a      	bne.n	800b138 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b122:	4bbf      	ldr	r3, [pc, #764]	; (800b420 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b126:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b12a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b12e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b130:	4abb      	ldr	r2, [pc, #748]	; (800b420 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b132:	430b      	orrs	r3, r1
 800b134:	6553      	str	r3, [r2, #84]	; 0x54
 800b136:	e003      	b.n	800b140 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b138:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b13c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b140:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b148:	f002 0302 	and.w	r3, r2, #2
 800b14c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b150:	2300      	movs	r3, #0
 800b152:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b156:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b15a:	460b      	mov	r3, r1
 800b15c:	4313      	orrs	r3, r2
 800b15e:	d041      	beq.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b160:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b166:	2b05      	cmp	r3, #5
 800b168:	d824      	bhi.n	800b1b4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800b16a:	a201      	add	r2, pc, #4	; (adr r2, 800b170 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800b16c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b170:	0800b1bd 	.word	0x0800b1bd
 800b174:	0800b189 	.word	0x0800b189
 800b178:	0800b19f 	.word	0x0800b19f
 800b17c:	0800b1bd 	.word	0x0800b1bd
 800b180:	0800b1bd 	.word	0x0800b1bd
 800b184:	0800b1bd 	.word	0x0800b1bd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b188:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b18c:	3308      	adds	r3, #8
 800b18e:	2101      	movs	r1, #1
 800b190:	4618      	mov	r0, r3
 800b192:	f001 fd79 	bl	800cc88 <RCCEx_PLL2_Config>
 800b196:	4603      	mov	r3, r0
 800b198:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b19c:	e00f      	b.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b19e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1a2:	3328      	adds	r3, #40	; 0x28
 800b1a4:	2101      	movs	r1, #1
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f001 fe20 	bl	800cdec <RCCEx_PLL3_Config>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b1b2:	e004      	b.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b1ba:	e000      	b.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800b1bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d10a      	bne.n	800b1dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b1c6:	4b96      	ldr	r3, [pc, #600]	; (800b420 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b1c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1ca:	f023 0107 	bic.w	r1, r3, #7
 800b1ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1d4:	4a92      	ldr	r2, [pc, #584]	; (800b420 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b1d6:	430b      	orrs	r3, r1
 800b1d8:	6553      	str	r3, [r2, #84]	; 0x54
 800b1da:	e003      	b.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b1e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ec:	f002 0304 	and.w	r3, r2, #4
 800b1f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b1fa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b1fe:	460b      	mov	r3, r1
 800b200:	4313      	orrs	r3, r2
 800b202:	d044      	beq.n	800b28e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b20c:	2b05      	cmp	r3, #5
 800b20e:	d825      	bhi.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800b210:	a201      	add	r2, pc, #4	; (adr r2, 800b218 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800b212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b216:	bf00      	nop
 800b218:	0800b265 	.word	0x0800b265
 800b21c:	0800b231 	.word	0x0800b231
 800b220:	0800b247 	.word	0x0800b247
 800b224:	0800b265 	.word	0x0800b265
 800b228:	0800b265 	.word	0x0800b265
 800b22c:	0800b265 	.word	0x0800b265
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b230:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b234:	3308      	adds	r3, #8
 800b236:	2101      	movs	r1, #1
 800b238:	4618      	mov	r0, r3
 800b23a:	f001 fd25 	bl	800cc88 <RCCEx_PLL2_Config>
 800b23e:	4603      	mov	r3, r0
 800b240:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b244:	e00f      	b.n	800b266 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b246:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b24a:	3328      	adds	r3, #40	; 0x28
 800b24c:	2101      	movs	r1, #1
 800b24e:	4618      	mov	r0, r3
 800b250:	f001 fdcc 	bl	800cdec <RCCEx_PLL3_Config>
 800b254:	4603      	mov	r3, r0
 800b256:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b25a:	e004      	b.n	800b266 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b25c:	2301      	movs	r3, #1
 800b25e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b262:	e000      	b.n	800b266 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800b264:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b266:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d10b      	bne.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b26e:	4b6c      	ldr	r3, [pc, #432]	; (800b420 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b272:	f023 0107 	bic.w	r1, r3, #7
 800b276:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b27a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b27e:	4a68      	ldr	r2, [pc, #416]	; (800b420 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b280:	430b      	orrs	r3, r1
 800b282:	6593      	str	r3, [r2, #88]	; 0x58
 800b284:	e003      	b.n	800b28e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b286:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b28a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b28e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b296:	f002 0320 	and.w	r3, r2, #32
 800b29a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b29e:	2300      	movs	r3, #0
 800b2a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b2a4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b2a8:	460b      	mov	r3, r1
 800b2aa:	4313      	orrs	r3, r2
 800b2ac:	d055      	beq.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b2ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b2ba:	d033      	beq.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800b2bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b2c0:	d82c      	bhi.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b2c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2c6:	d02f      	beq.n	800b328 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b2c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2cc:	d826      	bhi.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b2ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b2d2:	d02b      	beq.n	800b32c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b2d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b2d8:	d820      	bhi.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b2da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2de:	d012      	beq.n	800b306 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800b2e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2e4:	d81a      	bhi.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d022      	beq.n	800b330 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b2ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2ee:	d115      	bne.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b2f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2f4:	3308      	adds	r3, #8
 800b2f6:	2100      	movs	r1, #0
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f001 fcc5 	bl	800cc88 <RCCEx_PLL2_Config>
 800b2fe:	4603      	mov	r3, r0
 800b300:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b304:	e015      	b.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b306:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b30a:	3328      	adds	r3, #40	; 0x28
 800b30c:	2102      	movs	r1, #2
 800b30e:	4618      	mov	r0, r3
 800b310:	f001 fd6c 	bl	800cdec <RCCEx_PLL3_Config>
 800b314:	4603      	mov	r3, r0
 800b316:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b31a:	e00a      	b.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b31c:	2301      	movs	r3, #1
 800b31e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b322:	e006      	b.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b324:	bf00      	nop
 800b326:	e004      	b.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b328:	bf00      	nop
 800b32a:	e002      	b.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b32c:	bf00      	nop
 800b32e:	e000      	b.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b330:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b332:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b336:	2b00      	cmp	r3, #0
 800b338:	d10b      	bne.n	800b352 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b33a:	4b39      	ldr	r3, [pc, #228]	; (800b420 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b33c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b33e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b342:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b346:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b34a:	4a35      	ldr	r2, [pc, #212]	; (800b420 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b34c:	430b      	orrs	r3, r1
 800b34e:	6553      	str	r3, [r2, #84]	; 0x54
 800b350:	e003      	b.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b352:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b356:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b35a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b362:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b366:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b36a:	2300      	movs	r3, #0
 800b36c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b370:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b374:	460b      	mov	r3, r1
 800b376:	4313      	orrs	r3, r2
 800b378:	d058      	beq.n	800b42c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b37a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b37e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b382:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b386:	d033      	beq.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b388:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b38c:	d82c      	bhi.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b38e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b392:	d02f      	beq.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b398:	d826      	bhi.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b39a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b39e:	d02b      	beq.n	800b3f8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b3a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b3a4:	d820      	bhi.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b3a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b3aa:	d012      	beq.n	800b3d2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800b3ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b3b0:	d81a      	bhi.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d022      	beq.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b3b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b3ba:	d115      	bne.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b3bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3c0:	3308      	adds	r3, #8
 800b3c2:	2100      	movs	r1, #0
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f001 fc5f 	bl	800cc88 <RCCEx_PLL2_Config>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b3d0:	e015      	b.n	800b3fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b3d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3d6:	3328      	adds	r3, #40	; 0x28
 800b3d8:	2102      	movs	r1, #2
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f001 fd06 	bl	800cdec <RCCEx_PLL3_Config>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b3e6:	e00a      	b.n	800b3fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b3ee:	e006      	b.n	800b3fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b3f0:	bf00      	nop
 800b3f2:	e004      	b.n	800b3fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b3f4:	bf00      	nop
 800b3f6:	e002      	b.n	800b3fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b3f8:	bf00      	nop
 800b3fa:	e000      	b.n	800b3fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b3fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b402:	2b00      	cmp	r3, #0
 800b404:	d10e      	bne.n	800b424 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b406:	4b06      	ldr	r3, [pc, #24]	; (800b420 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b40a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b40e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b412:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b416:	4a02      	ldr	r2, [pc, #8]	; (800b420 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b418:	430b      	orrs	r3, r1
 800b41a:	6593      	str	r3, [r2, #88]	; 0x58
 800b41c:	e006      	b.n	800b42c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800b41e:	bf00      	nop
 800b420:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b424:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b428:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b42c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b434:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b438:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b43c:	2300      	movs	r3, #0
 800b43e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b442:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b446:	460b      	mov	r3, r1
 800b448:	4313      	orrs	r3, r2
 800b44a:	d055      	beq.n	800b4f8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b44c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b450:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b454:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b458:	d033      	beq.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800b45a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b45e:	d82c      	bhi.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b464:	d02f      	beq.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b46a:	d826      	bhi.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b46c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b470:	d02b      	beq.n	800b4ca <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b472:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b476:	d820      	bhi.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b478:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b47c:	d012      	beq.n	800b4a4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800b47e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b482:	d81a      	bhi.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b484:	2b00      	cmp	r3, #0
 800b486:	d022      	beq.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b488:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b48c:	d115      	bne.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b48e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b492:	3308      	adds	r3, #8
 800b494:	2100      	movs	r1, #0
 800b496:	4618      	mov	r0, r3
 800b498:	f001 fbf6 	bl	800cc88 <RCCEx_PLL2_Config>
 800b49c:	4603      	mov	r3, r0
 800b49e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b4a2:	e015      	b.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b4a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4a8:	3328      	adds	r3, #40	; 0x28
 800b4aa:	2102      	movs	r1, #2
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f001 fc9d 	bl	800cdec <RCCEx_PLL3_Config>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b4b8:	e00a      	b.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b4c0:	e006      	b.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b4c2:	bf00      	nop
 800b4c4:	e004      	b.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b4c6:	bf00      	nop
 800b4c8:	e002      	b.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b4ca:	bf00      	nop
 800b4cc:	e000      	b.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b4ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d10b      	bne.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b4d8:	4ba0      	ldr	r3, [pc, #640]	; (800b75c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b4da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4dc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b4e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b4e8:	4a9c      	ldr	r2, [pc, #624]	; (800b75c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b4ea:	430b      	orrs	r3, r1
 800b4ec:	6593      	str	r3, [r2, #88]	; 0x58
 800b4ee:	e003      	b.n	800b4f8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4f4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b4f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b500:	f002 0308 	and.w	r3, r2, #8
 800b504:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b508:	2300      	movs	r3, #0
 800b50a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b50e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b512:	460b      	mov	r3, r1
 800b514:	4313      	orrs	r3, r2
 800b516:	d01e      	beq.n	800b556 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800b518:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b51c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b524:	d10c      	bne.n	800b540 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b526:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b52a:	3328      	adds	r3, #40	; 0x28
 800b52c:	2102      	movs	r1, #2
 800b52e:	4618      	mov	r0, r3
 800b530:	f001 fc5c 	bl	800cdec <RCCEx_PLL3_Config>
 800b534:	4603      	mov	r3, r0
 800b536:	2b00      	cmp	r3, #0
 800b538:	d002      	beq.n	800b540 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800b53a:	2301      	movs	r3, #1
 800b53c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b540:	4b86      	ldr	r3, [pc, #536]	; (800b75c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b544:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b548:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b54c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b550:	4a82      	ldr	r2, [pc, #520]	; (800b75c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b552:	430b      	orrs	r3, r1
 800b554:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b556:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b55e:	f002 0310 	and.w	r3, r2, #16
 800b562:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b566:	2300      	movs	r3, #0
 800b568:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b56c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b570:	460b      	mov	r3, r1
 800b572:	4313      	orrs	r3, r2
 800b574:	d01e      	beq.n	800b5b4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b576:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b57a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b57e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b582:	d10c      	bne.n	800b59e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b584:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b588:	3328      	adds	r3, #40	; 0x28
 800b58a:	2102      	movs	r1, #2
 800b58c:	4618      	mov	r0, r3
 800b58e:	f001 fc2d 	bl	800cdec <RCCEx_PLL3_Config>
 800b592:	4603      	mov	r3, r0
 800b594:	2b00      	cmp	r3, #0
 800b596:	d002      	beq.n	800b59e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800b598:	2301      	movs	r3, #1
 800b59a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b59e:	4b6f      	ldr	r3, [pc, #444]	; (800b75c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b5a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b5a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b5ae:	4a6b      	ldr	r2, [pc, #428]	; (800b75c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b5b0:	430b      	orrs	r3, r1
 800b5b2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b5b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5bc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b5c0:	67bb      	str	r3, [r7, #120]	; 0x78
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b5c6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b5ca:	460b      	mov	r3, r1
 800b5cc:	4313      	orrs	r3, r2
 800b5ce:	d03e      	beq.n	800b64e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b5d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b5d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5dc:	d022      	beq.n	800b624 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b5de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5e2:	d81b      	bhi.n	800b61c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d003      	beq.n	800b5f0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800b5e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5ec:	d00b      	beq.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800b5ee:	e015      	b.n	800b61c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b5f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5f4:	3308      	adds	r3, #8
 800b5f6:	2100      	movs	r1, #0
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f001 fb45 	bl	800cc88 <RCCEx_PLL2_Config>
 800b5fe:	4603      	mov	r3, r0
 800b600:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b604:	e00f      	b.n	800b626 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b606:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b60a:	3328      	adds	r3, #40	; 0x28
 800b60c:	2102      	movs	r1, #2
 800b60e:	4618      	mov	r0, r3
 800b610:	f001 fbec 	bl	800cdec <RCCEx_PLL3_Config>
 800b614:	4603      	mov	r3, r0
 800b616:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b61a:	e004      	b.n	800b626 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b61c:	2301      	movs	r3, #1
 800b61e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b622:	e000      	b.n	800b626 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800b624:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b626:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d10b      	bne.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b62e:	4b4b      	ldr	r3, [pc, #300]	; (800b75c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b632:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b636:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b63a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b63e:	4a47      	ldr	r2, [pc, #284]	; (800b75c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b640:	430b      	orrs	r3, r1
 800b642:	6593      	str	r3, [r2, #88]	; 0x58
 800b644:	e003      	b.n	800b64e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b646:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b64a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b64e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b656:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b65a:	673b      	str	r3, [r7, #112]	; 0x70
 800b65c:	2300      	movs	r3, #0
 800b65e:	677b      	str	r3, [r7, #116]	; 0x74
 800b660:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b664:	460b      	mov	r3, r1
 800b666:	4313      	orrs	r3, r2
 800b668:	d03b      	beq.n	800b6e2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b66a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b66e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b672:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b676:	d01f      	beq.n	800b6b8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b678:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b67c:	d818      	bhi.n	800b6b0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800b67e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b682:	d003      	beq.n	800b68c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800b684:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b688:	d007      	beq.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800b68a:	e011      	b.n	800b6b0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b68c:	4b33      	ldr	r3, [pc, #204]	; (800b75c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b68e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b690:	4a32      	ldr	r2, [pc, #200]	; (800b75c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b696:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b698:	e00f      	b.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b69a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b69e:	3328      	adds	r3, #40	; 0x28
 800b6a0:	2101      	movs	r1, #1
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f001 fba2 	bl	800cdec <RCCEx_PLL3_Config>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800b6ae:	e004      	b.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b6b6:	e000      	b.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800b6b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d10b      	bne.n	800b6da <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b6c2:	4b26      	ldr	r3, [pc, #152]	; (800b75c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b6c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6c6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b6ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6d2:	4a22      	ldr	r2, [pc, #136]	; (800b75c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b6d4:	430b      	orrs	r3, r1
 800b6d6:	6553      	str	r3, [r2, #84]	; 0x54
 800b6d8:	e003      	b.n	800b6e2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6de:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b6e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ea:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b6ee:	66bb      	str	r3, [r7, #104]	; 0x68
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b6f4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b6f8:	460b      	mov	r3, r1
 800b6fa:	4313      	orrs	r3, r2
 800b6fc:	d034      	beq.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b6fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b704:	2b00      	cmp	r3, #0
 800b706:	d003      	beq.n	800b710 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800b708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b70c:	d007      	beq.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800b70e:	e011      	b.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b710:	4b12      	ldr	r3, [pc, #72]	; (800b75c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b714:	4a11      	ldr	r2, [pc, #68]	; (800b75c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b71a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b71c:	e00e      	b.n	800b73c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b71e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b722:	3308      	adds	r3, #8
 800b724:	2102      	movs	r1, #2
 800b726:	4618      	mov	r0, r3
 800b728:	f001 faae 	bl	800cc88 <RCCEx_PLL2_Config>
 800b72c:	4603      	mov	r3, r0
 800b72e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b732:	e003      	b.n	800b73c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800b734:	2301      	movs	r3, #1
 800b736:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b73a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b73c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b740:	2b00      	cmp	r3, #0
 800b742:	d10d      	bne.n	800b760 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b744:	4b05      	ldr	r3, [pc, #20]	; (800b75c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b748:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b74c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b752:	4a02      	ldr	r2, [pc, #8]	; (800b75c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b754:	430b      	orrs	r3, r1
 800b756:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b758:	e006      	b.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800b75a:	bf00      	nop
 800b75c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b760:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b764:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b768:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b770:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b774:	663b      	str	r3, [r7, #96]	; 0x60
 800b776:	2300      	movs	r3, #0
 800b778:	667b      	str	r3, [r7, #100]	; 0x64
 800b77a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b77e:	460b      	mov	r3, r1
 800b780:	4313      	orrs	r3, r2
 800b782:	d00c      	beq.n	800b79e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b788:	3328      	adds	r3, #40	; 0x28
 800b78a:	2102      	movs	r1, #2
 800b78c:	4618      	mov	r0, r3
 800b78e:	f001 fb2d 	bl	800cdec <RCCEx_PLL3_Config>
 800b792:	4603      	mov	r3, r0
 800b794:	2b00      	cmp	r3, #0
 800b796:	d002      	beq.n	800b79e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800b798:	2301      	movs	r3, #1
 800b79a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b79e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b7aa:	65bb      	str	r3, [r7, #88]	; 0x58
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b7b0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800b7b4:	460b      	mov	r3, r1
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	d036      	beq.n	800b828 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b7ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b7c4:	d018      	beq.n	800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800b7c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b7ca:	d811      	bhi.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b7cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7d0:	d014      	beq.n	800b7fc <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800b7d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7d6:	d80b      	bhi.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d011      	beq.n	800b800 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800b7dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7e0:	d106      	bne.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7e2:	4bb7      	ldr	r3, [pc, #732]	; (800bac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b7e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7e6:	4ab6      	ldr	r2, [pc, #728]	; (800bac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b7e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b7ee:	e008      	b.n	800b802 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b7f6:	e004      	b.n	800b802 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b7f8:	bf00      	nop
 800b7fa:	e002      	b.n	800b802 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b7fc:	bf00      	nop
 800b7fe:	e000      	b.n	800b802 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b800:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b802:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b806:	2b00      	cmp	r3, #0
 800b808:	d10a      	bne.n	800b820 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b80a:	4bad      	ldr	r3, [pc, #692]	; (800bac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b80c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b80e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b812:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b816:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b818:	4aa9      	ldr	r2, [pc, #676]	; (800bac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b81a:	430b      	orrs	r3, r1
 800b81c:	6553      	str	r3, [r2, #84]	; 0x54
 800b81e:	e003      	b.n	800b828 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b820:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b824:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b830:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800b834:	653b      	str	r3, [r7, #80]	; 0x50
 800b836:	2300      	movs	r3, #0
 800b838:	657b      	str	r3, [r7, #84]	; 0x54
 800b83a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b83e:	460b      	mov	r3, r1
 800b840:	4313      	orrs	r3, r2
 800b842:	d009      	beq.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b844:	4b9e      	ldr	r3, [pc, #632]	; (800bac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b848:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b84c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b852:	4a9b      	ldr	r2, [pc, #620]	; (800bac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b854:	430b      	orrs	r3, r1
 800b856:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b858:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b860:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800b864:	64bb      	str	r3, [r7, #72]	; 0x48
 800b866:	2300      	movs	r3, #0
 800b868:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b86a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800b86e:	460b      	mov	r3, r1
 800b870:	4313      	orrs	r3, r2
 800b872:	d009      	beq.n	800b888 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b874:	4b92      	ldr	r3, [pc, #584]	; (800bac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b878:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800b87c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b880:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b882:	4a8f      	ldr	r2, [pc, #572]	; (800bac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b884:	430b      	orrs	r3, r1
 800b886:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b888:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b890:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800b894:	643b      	str	r3, [r7, #64]	; 0x40
 800b896:	2300      	movs	r3, #0
 800b898:	647b      	str	r3, [r7, #68]	; 0x44
 800b89a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b89e:	460b      	mov	r3, r1
 800b8a0:	4313      	orrs	r3, r2
 800b8a2:	d00e      	beq.n	800b8c2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b8a4:	4b86      	ldr	r3, [pc, #536]	; (800bac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8a6:	691b      	ldr	r3, [r3, #16]
 800b8a8:	4a85      	ldr	r2, [pc, #532]	; (800bac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b8ae:	6113      	str	r3, [r2, #16]
 800b8b0:	4b83      	ldr	r3, [pc, #524]	; (800bac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8b2:	6919      	ldr	r1, [r3, #16]
 800b8b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b8bc:	4a80      	ldr	r2, [pc, #512]	; (800bac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8be:	430b      	orrs	r3, r1
 800b8c0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b8c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ca:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800b8ce:	63bb      	str	r3, [r7, #56]	; 0x38
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8d4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b8d8:	460b      	mov	r3, r1
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	d009      	beq.n	800b8f2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b8de:	4b78      	ldr	r3, [pc, #480]	; (800bac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8e2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b8e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8ec:	4a74      	ldr	r2, [pc, #464]	; (800bac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8ee:	430b      	orrs	r3, r1
 800b8f0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b8f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fa:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800b8fe:	633b      	str	r3, [r7, #48]	; 0x30
 800b900:	2300      	movs	r3, #0
 800b902:	637b      	str	r3, [r7, #52]	; 0x34
 800b904:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800b908:	460b      	mov	r3, r1
 800b90a:	4313      	orrs	r3, r2
 800b90c:	d00a      	beq.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b90e:	4b6c      	ldr	r3, [pc, #432]	; (800bac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b912:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800b916:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b91a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b91e:	4a68      	ldr	r2, [pc, #416]	; (800bac0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b920:	430b      	orrs	r3, r1
 800b922:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b924:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b92c:	2100      	movs	r1, #0
 800b92e:	62b9      	str	r1, [r7, #40]	; 0x28
 800b930:	f003 0301 	and.w	r3, r3, #1
 800b934:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b936:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800b93a:	460b      	mov	r3, r1
 800b93c:	4313      	orrs	r3, r2
 800b93e:	d011      	beq.n	800b964 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b940:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b944:	3308      	adds	r3, #8
 800b946:	2100      	movs	r1, #0
 800b948:	4618      	mov	r0, r3
 800b94a:	f001 f99d 	bl	800cc88 <RCCEx_PLL2_Config>
 800b94e:	4603      	mov	r3, r0
 800b950:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b954:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d003      	beq.n	800b964 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b95c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b960:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b964:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b96c:	2100      	movs	r1, #0
 800b96e:	6239      	str	r1, [r7, #32]
 800b970:	f003 0302 	and.w	r3, r3, #2
 800b974:	627b      	str	r3, [r7, #36]	; 0x24
 800b976:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b97a:	460b      	mov	r3, r1
 800b97c:	4313      	orrs	r3, r2
 800b97e:	d011      	beq.n	800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b980:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b984:	3308      	adds	r3, #8
 800b986:	2101      	movs	r1, #1
 800b988:	4618      	mov	r0, r3
 800b98a:	f001 f97d 	bl	800cc88 <RCCEx_PLL2_Config>
 800b98e:	4603      	mov	r3, r0
 800b990:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b994:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d003      	beq.n	800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b99c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b9a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ac:	2100      	movs	r1, #0
 800b9ae:	61b9      	str	r1, [r7, #24]
 800b9b0:	f003 0304 	and.w	r3, r3, #4
 800b9b4:	61fb      	str	r3, [r7, #28]
 800b9b6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b9ba:	460b      	mov	r3, r1
 800b9bc:	4313      	orrs	r3, r2
 800b9be:	d011      	beq.n	800b9e4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b9c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9c4:	3308      	adds	r3, #8
 800b9c6:	2102      	movs	r1, #2
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f001 f95d 	bl	800cc88 <RCCEx_PLL2_Config>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b9d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d003      	beq.n	800b9e4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b9e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ec:	2100      	movs	r1, #0
 800b9ee:	6139      	str	r1, [r7, #16]
 800b9f0:	f003 0308 	and.w	r3, r3, #8
 800b9f4:	617b      	str	r3, [r7, #20]
 800b9f6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b9fa:	460b      	mov	r3, r1
 800b9fc:	4313      	orrs	r3, r2
 800b9fe:	d011      	beq.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ba00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba04:	3328      	adds	r3, #40	; 0x28
 800ba06:	2100      	movs	r1, #0
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f001 f9ef 	bl	800cdec <RCCEx_PLL3_Config>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800ba14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d003      	beq.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba1c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba20:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ba24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba2c:	2100      	movs	r1, #0
 800ba2e:	60b9      	str	r1, [r7, #8]
 800ba30:	f003 0310 	and.w	r3, r3, #16
 800ba34:	60fb      	str	r3, [r7, #12]
 800ba36:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ba3a:	460b      	mov	r3, r1
 800ba3c:	4313      	orrs	r3, r2
 800ba3e:	d011      	beq.n	800ba64 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba44:	3328      	adds	r3, #40	; 0x28
 800ba46:	2101      	movs	r1, #1
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f001 f9cf 	bl	800cdec <RCCEx_PLL3_Config>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ba54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d003      	beq.n	800ba64 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba60:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ba64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6c:	2100      	movs	r1, #0
 800ba6e:	6039      	str	r1, [r7, #0]
 800ba70:	f003 0320 	and.w	r3, r3, #32
 800ba74:	607b      	str	r3, [r7, #4]
 800ba76:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ba7a:	460b      	mov	r3, r1
 800ba7c:	4313      	orrs	r3, r2
 800ba7e:	d011      	beq.n	800baa4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ba80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba84:	3328      	adds	r3, #40	; 0x28
 800ba86:	2102      	movs	r1, #2
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f001 f9af 	bl	800cdec <RCCEx_PLL3_Config>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ba94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d003      	beq.n	800baa4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800baa0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800baa4:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d101      	bne.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800baac:	2300      	movs	r3, #0
 800baae:	e000      	b.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800bab0:	2301      	movs	r3, #1
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800bab8:	46bd      	mov	sp, r7
 800baba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800babe:	bf00      	nop
 800bac0:	58024400 	.word	0x58024400

0800bac4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b090      	sub	sp, #64	; 0x40
 800bac8:	af00      	add	r7, sp, #0
 800baca:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bace:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bad2:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800bad6:	430b      	orrs	r3, r1
 800bad8:	f040 8094 	bne.w	800bc04 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800badc:	4b9b      	ldr	r3, [pc, #620]	; (800bd4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bae0:	f003 0307 	and.w	r3, r3, #7
 800bae4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae8:	2b04      	cmp	r3, #4
 800baea:	f200 8087 	bhi.w	800bbfc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800baee:	a201      	add	r2, pc, #4	; (adr r2, 800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800baf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baf4:	0800bb09 	.word	0x0800bb09
 800baf8:	0800bb31 	.word	0x0800bb31
 800bafc:	0800bb59 	.word	0x0800bb59
 800bb00:	0800bbf5 	.word	0x0800bbf5
 800bb04:	0800bb81 	.word	0x0800bb81
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bb08:	4b90      	ldr	r3, [pc, #576]	; (800bd4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb14:	d108      	bne.n	800bb28 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f000 ff62 	bl	800c9e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bb20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb24:	f000 bc93 	b.w	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb2c:	f000 bc8f 	b.w	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bb30:	4b86      	ldr	r3, [pc, #536]	; (800bd4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb3c:	d108      	bne.n	800bb50 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb3e:	f107 0318 	add.w	r3, r7, #24
 800bb42:	4618      	mov	r0, r3
 800bb44:	f000 fca6 	bl	800c494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bb48:	69bb      	ldr	r3, [r7, #24]
 800bb4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb4c:	f000 bc7f 	b.w	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bb50:	2300      	movs	r3, #0
 800bb52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb54:	f000 bc7b 	b.w	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bb58:	4b7c      	ldr	r3, [pc, #496]	; (800bd4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb64:	d108      	bne.n	800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb66:	f107 030c 	add.w	r3, r7, #12
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f000 fde6 	bl	800c73c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb74:	f000 bc6b 	b.w	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb7c:	f000 bc67 	b.w	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bb80:	4b72      	ldr	r3, [pc, #456]	; (800bd4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bb88:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bb8a:	4b70      	ldr	r3, [pc, #448]	; (800bd4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f003 0304 	and.w	r3, r3, #4
 800bb92:	2b04      	cmp	r3, #4
 800bb94:	d10c      	bne.n	800bbb0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bb96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d109      	bne.n	800bbb0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb9c:	4b6b      	ldr	r3, [pc, #428]	; (800bd4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	08db      	lsrs	r3, r3, #3
 800bba2:	f003 0303 	and.w	r3, r3, #3
 800bba6:	4a6a      	ldr	r2, [pc, #424]	; (800bd50 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800bba8:	fa22 f303 	lsr.w	r3, r2, r3
 800bbac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbae:	e01f      	b.n	800bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bbb0:	4b66      	ldr	r3, [pc, #408]	; (800bd4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbbc:	d106      	bne.n	800bbcc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800bbbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bbc4:	d102      	bne.n	800bbcc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bbc6:	4b63      	ldr	r3, [pc, #396]	; (800bd54 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800bbc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbca:	e011      	b.n	800bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bbcc:	4b5f      	ldr	r3, [pc, #380]	; (800bd4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bbd8:	d106      	bne.n	800bbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bbda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbe0:	d102      	bne.n	800bbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bbe2:	4b5d      	ldr	r3, [pc, #372]	; (800bd58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bbe4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbe6:	e003      	b.n	800bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bbec:	f000 bc2f 	b.w	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bbf0:	f000 bc2d 	b.w	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bbf4:	4b59      	ldr	r3, [pc, #356]	; (800bd5c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bbf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbf8:	f000 bc29 	b.w	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc00:	f000 bc25 	b.w	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800bc04:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc08:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800bc0c:	430b      	orrs	r3, r1
 800bc0e:	f040 80a7 	bne.w	800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800bc12:	4b4e      	ldr	r3, [pc, #312]	; (800bd4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc16:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800bc1a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bc1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bc22:	d054      	beq.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800bc24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bc2a:	f200 808b 	bhi.w	800bd44 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bc2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc30:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bc34:	f000 8083 	beq.w	800bd3e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800bc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc3a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bc3e:	f200 8081 	bhi.w	800bd44 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc48:	d02f      	beq.n	800bcaa <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800bc4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc50:	d878      	bhi.n	800bd44 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bc52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d004      	beq.n	800bc62 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800bc58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bc5e:	d012      	beq.n	800bc86 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800bc60:	e070      	b.n	800bd44 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bc62:	4b3a      	ldr	r3, [pc, #232]	; (800bd4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc6e:	d107      	bne.n	800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bc70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc74:	4618      	mov	r0, r3
 800bc76:	f000 feb5 	bl	800c9e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bc7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc7e:	e3e6      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc80:	2300      	movs	r3, #0
 800bc82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc84:	e3e3      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bc86:	4b31      	ldr	r3, [pc, #196]	; (800bd4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc92:	d107      	bne.n	800bca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc94:	f107 0318 	add.w	r3, r7, #24
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f000 fbfb 	bl	800c494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bc9e:	69bb      	ldr	r3, [r7, #24]
 800bca0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bca2:	e3d4      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bca4:	2300      	movs	r3, #0
 800bca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bca8:	e3d1      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bcaa:	4b28      	ldr	r3, [pc, #160]	; (800bd4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bcb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcb6:	d107      	bne.n	800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bcb8:	f107 030c 	add.w	r3, r7, #12
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f000 fd3d 	bl	800c73c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bcc6:	e3c2      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bccc:	e3bf      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bcce:	4b1f      	ldr	r3, [pc, #124]	; (800bd4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bcd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcd2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bcd6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bcd8:	4b1c      	ldr	r3, [pc, #112]	; (800bd4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f003 0304 	and.w	r3, r3, #4
 800bce0:	2b04      	cmp	r3, #4
 800bce2:	d10c      	bne.n	800bcfe <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800bce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d109      	bne.n	800bcfe <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bcea:	4b18      	ldr	r3, [pc, #96]	; (800bd4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	08db      	lsrs	r3, r3, #3
 800bcf0:	f003 0303 	and.w	r3, r3, #3
 800bcf4:	4a16      	ldr	r2, [pc, #88]	; (800bd50 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800bcf6:	fa22 f303 	lsr.w	r3, r2, r3
 800bcfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcfc:	e01e      	b.n	800bd3c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bcfe:	4b13      	ldr	r3, [pc, #76]	; (800bd4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd0a:	d106      	bne.n	800bd1a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800bd0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd12:	d102      	bne.n	800bd1a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bd14:	4b0f      	ldr	r3, [pc, #60]	; (800bd54 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800bd16:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd18:	e010      	b.n	800bd3c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bd1a:	4b0c      	ldr	r3, [pc, #48]	; (800bd4c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd26:	d106      	bne.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800bd28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd2e:	d102      	bne.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bd30:	4b09      	ldr	r3, [pc, #36]	; (800bd58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd34:	e002      	b.n	800bd3c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bd36:	2300      	movs	r3, #0
 800bd38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bd3a:	e388      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bd3c:	e387      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bd3e:	4b07      	ldr	r3, [pc, #28]	; (800bd5c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bd40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd42:	e384      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bd44:	2300      	movs	r3, #0
 800bd46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd48:	e381      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bd4a:	bf00      	nop
 800bd4c:	58024400 	.word	0x58024400
 800bd50:	03d09000 	.word	0x03d09000
 800bd54:	003d0900 	.word	0x003d0900
 800bd58:	02faf080 	.word	0x02faf080
 800bd5c:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800bd60:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd64:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800bd68:	430b      	orrs	r3, r1
 800bd6a:	f040 809c 	bne.w	800bea6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800bd6e:	4b9e      	ldr	r3, [pc, #632]	; (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bd70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd72:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800bd76:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bd78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bd7e:	d054      	beq.n	800be2a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800bd80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bd86:	f200 808b 	bhi.w	800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd8c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bd90:	f000 8083 	beq.w	800be9a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800bd94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd96:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bd9a:	f200 8081 	bhi.w	800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bda4:	d02f      	beq.n	800be06 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800bda6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bdac:	d878      	bhi.n	800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bdae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d004      	beq.n	800bdbe <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800bdb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bdba:	d012      	beq.n	800bde2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800bdbc:	e070      	b.n	800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bdbe:	4b8a      	ldr	r3, [pc, #552]	; (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bdc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bdca:	d107      	bne.n	800bddc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bdcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f000 fe07 	bl	800c9e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bdd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bdda:	e338      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bddc:	2300      	movs	r3, #0
 800bdde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bde0:	e335      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bde2:	4b81      	ldr	r3, [pc, #516]	; (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bdea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bdee:	d107      	bne.n	800be00 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bdf0:	f107 0318 	add.w	r3, r7, #24
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f000 fb4d 	bl	800c494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bdfa:	69bb      	ldr	r3, [r7, #24]
 800bdfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bdfe:	e326      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be00:	2300      	movs	r3, #0
 800be02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be04:	e323      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800be06:	4b78      	ldr	r3, [pc, #480]	; (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be12:	d107      	bne.n	800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be14:	f107 030c 	add.w	r3, r7, #12
 800be18:	4618      	mov	r0, r3
 800be1a:	f000 fc8f 	bl	800c73c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be22:	e314      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be24:	2300      	movs	r3, #0
 800be26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be28:	e311      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800be2a:	4b6f      	ldr	r3, [pc, #444]	; (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800be32:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800be34:	4b6c      	ldr	r3, [pc, #432]	; (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	f003 0304 	and.w	r3, r3, #4
 800be3c:	2b04      	cmp	r3, #4
 800be3e:	d10c      	bne.n	800be5a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800be40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be42:	2b00      	cmp	r3, #0
 800be44:	d109      	bne.n	800be5a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be46:	4b68      	ldr	r3, [pc, #416]	; (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	08db      	lsrs	r3, r3, #3
 800be4c:	f003 0303 	and.w	r3, r3, #3
 800be50:	4a66      	ldr	r2, [pc, #408]	; (800bfec <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800be52:	fa22 f303 	lsr.w	r3, r2, r3
 800be56:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be58:	e01e      	b.n	800be98 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800be5a:	4b63      	ldr	r3, [pc, #396]	; (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be66:	d106      	bne.n	800be76 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800be68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be6e:	d102      	bne.n	800be76 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800be70:	4b5f      	ldr	r3, [pc, #380]	; (800bff0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800be72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be74:	e010      	b.n	800be98 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800be76:	4b5c      	ldr	r3, [pc, #368]	; (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be82:	d106      	bne.n	800be92 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800be84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be8a:	d102      	bne.n	800be92 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800be8c:	4b59      	ldr	r3, [pc, #356]	; (800bff4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800be8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be90:	e002      	b.n	800be98 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800be92:	2300      	movs	r3, #0
 800be94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800be96:	e2da      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800be98:	e2d9      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800be9a:	4b57      	ldr	r3, [pc, #348]	; (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800be9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be9e:	e2d6      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bea0:	2300      	movs	r3, #0
 800bea2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bea4:	e2d3      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800bea6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800beaa:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800beae:	430b      	orrs	r3, r1
 800beb0:	f040 80a7 	bne.w	800c002 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800beb4:	4b4c      	ldr	r3, [pc, #304]	; (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800beb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800beb8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800bebc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bec0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bec4:	d055      	beq.n	800bf72 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800bec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bec8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800becc:	f200 8096 	bhi.w	800bffc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bed2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bed6:	f000 8084 	beq.w	800bfe2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800beda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bedc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bee0:	f200 808c 	bhi.w	800bffc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800beea:	d030      	beq.n	800bf4e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800beec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bef2:	f200 8083 	bhi.w	800bffc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d004      	beq.n	800bf06 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800befc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800befe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf02:	d012      	beq.n	800bf2a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800bf04:	e07a      	b.n	800bffc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bf06:	4b38      	ldr	r3, [pc, #224]	; (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf12:	d107      	bne.n	800bf24 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bf14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f000 fd63 	bl	800c9e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bf1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf22:	e294      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf24:	2300      	movs	r3, #0
 800bf26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf28:	e291      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf2a:	4b2f      	ldr	r3, [pc, #188]	; (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf36:	d107      	bne.n	800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf38:	f107 0318 	add.w	r3, r7, #24
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f000 faa9 	bl	800c494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bf42:	69bb      	ldr	r3, [r7, #24]
 800bf44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf46:	e282      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf4c:	e27f      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bf4e:	4b26      	ldr	r3, [pc, #152]	; (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf5a:	d107      	bne.n	800bf6c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf5c:	f107 030c 	add.w	r3, r7, #12
 800bf60:	4618      	mov	r0, r3
 800bf62:	f000 fbeb 	bl	800c73c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf6a:	e270      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf70:	e26d      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bf72:	4b1d      	ldr	r3, [pc, #116]	; (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bf7a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bf7c:	4b1a      	ldr	r3, [pc, #104]	; (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f003 0304 	and.w	r3, r3, #4
 800bf84:	2b04      	cmp	r3, #4
 800bf86:	d10c      	bne.n	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800bf88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d109      	bne.n	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf8e:	4b16      	ldr	r3, [pc, #88]	; (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	08db      	lsrs	r3, r3, #3
 800bf94:	f003 0303 	and.w	r3, r3, #3
 800bf98:	4a14      	ldr	r2, [pc, #80]	; (800bfec <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800bf9a:	fa22 f303 	lsr.w	r3, r2, r3
 800bf9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfa0:	e01e      	b.n	800bfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bfa2:	4b11      	ldr	r3, [pc, #68]	; (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfae:	d106      	bne.n	800bfbe <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800bfb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bfb6:	d102      	bne.n	800bfbe <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bfb8:	4b0d      	ldr	r3, [pc, #52]	; (800bff0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800bfba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfbc:	e010      	b.n	800bfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bfbe:	4b0a      	ldr	r3, [pc, #40]	; (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bfca:	d106      	bne.n	800bfda <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800bfcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfd2:	d102      	bne.n	800bfda <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bfd4:	4b07      	ldr	r3, [pc, #28]	; (800bff4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bfd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfd8:	e002      	b.n	800bfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bfde:	e236      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bfe0:	e235      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bfe2:	4b05      	ldr	r3, [pc, #20]	; (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bfe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfe6:	e232      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bfe8:	58024400 	.word	0x58024400
 800bfec:	03d09000 	.word	0x03d09000
 800bff0:	003d0900 	.word	0x003d0900
 800bff4:	02faf080 	.word	0x02faf080
 800bff8:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800bffc:	2300      	movs	r3, #0
 800bffe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c000:	e225      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c002:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c006:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c00a:	430b      	orrs	r3, r1
 800c00c:	f040 8085 	bne.w	800c11a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c010:	4b9c      	ldr	r3, [pc, #624]	; (800c284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c014:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c018:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c01c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c020:	d06b      	beq.n	800c0fa <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800c022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c028:	d874      	bhi.n	800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c02c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c030:	d056      	beq.n	800c0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800c032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c034:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c038:	d86c      	bhi.n	800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c03c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c040:	d03b      	beq.n	800c0ba <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800c042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c044:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c048:	d864      	bhi.n	800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c04c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c050:	d021      	beq.n	800c096 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800c052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c054:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c058:	d85c      	bhi.n	800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d004      	beq.n	800c06a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800c060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c066:	d004      	beq.n	800c072 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800c068:	e054      	b.n	800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c06a:	f7fe fb5f 	bl	800a72c <HAL_RCC_GetPCLK1Freq>
 800c06e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c070:	e1ed      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c072:	4b84      	ldr	r3, [pc, #528]	; (800c284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c07a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c07e:	d107      	bne.n	800c090 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c080:	f107 0318 	add.w	r3, r7, #24
 800c084:	4618      	mov	r0, r3
 800c086:	f000 fa05 	bl	800c494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c08a:	69fb      	ldr	r3, [r7, #28]
 800c08c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c08e:	e1de      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c090:	2300      	movs	r3, #0
 800c092:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c094:	e1db      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c096:	4b7b      	ldr	r3, [pc, #492]	; (800c284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c09e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0a2:	d107      	bne.n	800c0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c0a4:	f107 030c 	add.w	r3, r7, #12
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f000 fb47 	bl	800c73c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c0ae:	693b      	ldr	r3, [r7, #16]
 800c0b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0b2:	e1cc      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0b8:	e1c9      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c0ba:	4b72      	ldr	r3, [pc, #456]	; (800c284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	f003 0304 	and.w	r3, r3, #4
 800c0c2:	2b04      	cmp	r3, #4
 800c0c4:	d109      	bne.n	800c0da <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c0c6:	4b6f      	ldr	r3, [pc, #444]	; (800c284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	08db      	lsrs	r3, r3, #3
 800c0cc:	f003 0303 	and.w	r3, r3, #3
 800c0d0:	4a6d      	ldr	r2, [pc, #436]	; (800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c0d2:	fa22 f303 	lsr.w	r3, r2, r3
 800c0d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0d8:	e1b9      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0de:	e1b6      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c0e0:	4b68      	ldr	r3, [pc, #416]	; (800c284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0ec:	d102      	bne.n	800c0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800c0ee:	4b67      	ldr	r3, [pc, #412]	; (800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c0f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0f2:	e1ac      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0f8:	e1a9      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c0fa:	4b62      	ldr	r3, [pc, #392]	; (800c284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c102:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c106:	d102      	bne.n	800c10e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800c108:	4b61      	ldr	r3, [pc, #388]	; (800c290 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c10a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c10c:	e19f      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c10e:	2300      	movs	r3, #0
 800c110:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c112:	e19c      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c114:	2300      	movs	r3, #0
 800c116:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c118:	e199      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c11a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c11e:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c122:	430b      	orrs	r3, r1
 800c124:	d173      	bne.n	800c20e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c126:	4b57      	ldr	r3, [pc, #348]	; (800c284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c12a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c12e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c132:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c136:	d02f      	beq.n	800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800c138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c13a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c13e:	d863      	bhi.n	800c208 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800c140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c142:	2b00      	cmp	r3, #0
 800c144:	d004      	beq.n	800c150 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800c146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c14c:	d012      	beq.n	800c174 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800c14e:	e05b      	b.n	800c208 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c150:	4b4c      	ldr	r3, [pc, #304]	; (800c284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c158:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c15c:	d107      	bne.n	800c16e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c15e:	f107 0318 	add.w	r3, r7, #24
 800c162:	4618      	mov	r0, r3
 800c164:	f000 f996 	bl	800c494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c168:	69bb      	ldr	r3, [r7, #24]
 800c16a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c16c:	e16f      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c16e:	2300      	movs	r3, #0
 800c170:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c172:	e16c      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c174:	4b43      	ldr	r3, [pc, #268]	; (800c284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c17c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c180:	d107      	bne.n	800c192 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c182:	f107 030c 	add.w	r3, r7, #12
 800c186:	4618      	mov	r0, r3
 800c188:	f000 fad8 	bl	800c73c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c190:	e15d      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c192:	2300      	movs	r3, #0
 800c194:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c196:	e15a      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c198:	4b3a      	ldr	r3, [pc, #232]	; (800c284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c19a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c19c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c1a0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c1a2:	4b38      	ldr	r3, [pc, #224]	; (800c284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	f003 0304 	and.w	r3, r3, #4
 800c1aa:	2b04      	cmp	r3, #4
 800c1ac:	d10c      	bne.n	800c1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800c1ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d109      	bne.n	800c1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c1b4:	4b33      	ldr	r3, [pc, #204]	; (800c284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	08db      	lsrs	r3, r3, #3
 800c1ba:	f003 0303 	and.w	r3, r3, #3
 800c1be:	4a32      	ldr	r2, [pc, #200]	; (800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c1c0:	fa22 f303 	lsr.w	r3, r2, r3
 800c1c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1c6:	e01e      	b.n	800c206 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c1c8:	4b2e      	ldr	r3, [pc, #184]	; (800c284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1d4:	d106      	bne.n	800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800c1d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c1dc:	d102      	bne.n	800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c1de:	4b2b      	ldr	r3, [pc, #172]	; (800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c1e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1e2:	e010      	b.n	800c206 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c1e4:	4b27      	ldr	r3, [pc, #156]	; (800c284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1f0:	d106      	bne.n	800c200 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800c1f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1f8:	d102      	bne.n	800c200 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c1fa:	4b25      	ldr	r3, [pc, #148]	; (800c290 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c1fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1fe:	e002      	b.n	800c206 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c200:	2300      	movs	r3, #0
 800c202:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c204:	e123      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c206:	e122      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c208:	2300      	movs	r3, #0
 800c20a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c20c:	e11f      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c20e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c212:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c216:	430b      	orrs	r3, r1
 800c218:	d13c      	bne.n	800c294 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c21a:	4b1a      	ldr	r3, [pc, #104]	; (800c284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c21c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c21e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c222:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c226:	2b00      	cmp	r3, #0
 800c228:	d004      	beq.n	800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800c22a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c22c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c230:	d012      	beq.n	800c258 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800c232:	e023      	b.n	800c27c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c234:	4b13      	ldr	r3, [pc, #76]	; (800c284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c23c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c240:	d107      	bne.n	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c246:	4618      	mov	r0, r3
 800c248:	f000 fbcc 	bl	800c9e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c24e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c250:	e0fd      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c252:	2300      	movs	r3, #0
 800c254:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c256:	e0fa      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c258:	4b0a      	ldr	r3, [pc, #40]	; (800c284 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c260:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c264:	d107      	bne.n	800c276 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c266:	f107 0318 	add.w	r3, r7, #24
 800c26a:	4618      	mov	r0, r3
 800c26c:	f000 f912 	bl	800c494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c270:	6a3b      	ldr	r3, [r7, #32]
 800c272:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c274:	e0eb      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c276:	2300      	movs	r3, #0
 800c278:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c27a:	e0e8      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c27c:	2300      	movs	r3, #0
 800c27e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c280:	e0e5      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c282:	bf00      	nop
 800c284:	58024400 	.word	0x58024400
 800c288:	03d09000 	.word	0x03d09000
 800c28c:	003d0900 	.word	0x003d0900
 800c290:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c294:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c298:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c29c:	430b      	orrs	r3, r1
 800c29e:	f040 8085 	bne.w	800c3ac <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c2a2:	4b6d      	ldr	r3, [pc, #436]	; (800c458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c2a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2a6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c2aa:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c2b2:	d06b      	beq.n	800c38c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800c2b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c2ba:	d874      	bhi.n	800c3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2c2:	d056      	beq.n	800c372 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800c2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2ca:	d86c      	bhi.n	800c3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c2d2:	d03b      	beq.n	800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800c2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c2da:	d864      	bhi.n	800c3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2e2:	d021      	beq.n	800c328 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800c2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2ea:	d85c      	bhi.n	800c3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d004      	beq.n	800c2fc <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800c2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c2f8:	d004      	beq.n	800c304 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800c2fa:	e054      	b.n	800c3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c2fc:	f000 f8b4 	bl	800c468 <HAL_RCCEx_GetD3PCLK1Freq>
 800c300:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c302:	e0a4      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c304:	4b54      	ldr	r3, [pc, #336]	; (800c458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c30c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c310:	d107      	bne.n	800c322 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c312:	f107 0318 	add.w	r3, r7, #24
 800c316:	4618      	mov	r0, r3
 800c318:	f000 f8bc 	bl	800c494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c31c:	69fb      	ldr	r3, [r7, #28]
 800c31e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c320:	e095      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c322:	2300      	movs	r3, #0
 800c324:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c326:	e092      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c328:	4b4b      	ldr	r3, [pc, #300]	; (800c458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c330:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c334:	d107      	bne.n	800c346 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c336:	f107 030c 	add.w	r3, r7, #12
 800c33a:	4618      	mov	r0, r3
 800c33c:	f000 f9fe 	bl	800c73c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c344:	e083      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c346:	2300      	movs	r3, #0
 800c348:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c34a:	e080      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c34c:	4b42      	ldr	r3, [pc, #264]	; (800c458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	f003 0304 	and.w	r3, r3, #4
 800c354:	2b04      	cmp	r3, #4
 800c356:	d109      	bne.n	800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c358:	4b3f      	ldr	r3, [pc, #252]	; (800c458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	08db      	lsrs	r3, r3, #3
 800c35e:	f003 0303 	and.w	r3, r3, #3
 800c362:	4a3e      	ldr	r2, [pc, #248]	; (800c45c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c364:	fa22 f303 	lsr.w	r3, r2, r3
 800c368:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c36a:	e070      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c36c:	2300      	movs	r3, #0
 800c36e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c370:	e06d      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c372:	4b39      	ldr	r3, [pc, #228]	; (800c458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c37a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c37e:	d102      	bne.n	800c386 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800c380:	4b37      	ldr	r3, [pc, #220]	; (800c460 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c382:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c384:	e063      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c386:	2300      	movs	r3, #0
 800c388:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c38a:	e060      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c38c:	4b32      	ldr	r3, [pc, #200]	; (800c458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c394:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c398:	d102      	bne.n	800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800c39a:	4b32      	ldr	r3, [pc, #200]	; (800c464 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c39c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c39e:	e056      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3a4:	e053      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3aa:	e050      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c3ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3b0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c3b4:	430b      	orrs	r3, r1
 800c3b6:	d148      	bne.n	800c44a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c3b8:	4b27      	ldr	r3, [pc, #156]	; (800c458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c3ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c3c0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c3c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3c8:	d02a      	beq.n	800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3d0:	d838      	bhi.n	800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d004      	beq.n	800c3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c3de:	d00d      	beq.n	800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800c3e0:	e030      	b.n	800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c3e2:	4b1d      	ldr	r3, [pc, #116]	; (800c458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c3ee:	d102      	bne.n	800c3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800c3f0:	4b1c      	ldr	r3, [pc, #112]	; (800c464 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3f4:	e02b      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3fa:	e028      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c3fc:	4b16      	ldr	r3, [pc, #88]	; (800c458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c404:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c408:	d107      	bne.n	800c41a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c40a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c40e:	4618      	mov	r0, r3
 800c410:	f000 fae8 	bl	800c9e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c416:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c418:	e019      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c41a:	2300      	movs	r3, #0
 800c41c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c41e:	e016      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c420:	4b0d      	ldr	r3, [pc, #52]	; (800c458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c428:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c42c:	d107      	bne.n	800c43e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c42e:	f107 0318 	add.w	r3, r7, #24
 800c432:	4618      	mov	r0, r3
 800c434:	f000 f82e 	bl	800c494 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c438:	69fb      	ldr	r3, [r7, #28]
 800c43a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c43c:	e007      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c43e:	2300      	movs	r3, #0
 800c440:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c442:	e004      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c444:	2300      	movs	r3, #0
 800c446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c448:	e001      	b.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800c44a:	2300      	movs	r3, #0
 800c44c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c44e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c450:	4618      	mov	r0, r3
 800c452:	3740      	adds	r7, #64	; 0x40
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}
 800c458:	58024400 	.word	0x58024400
 800c45c:	03d09000 	.word	0x03d09000
 800c460:	003d0900 	.word	0x003d0900
 800c464:	02faf080 	.word	0x02faf080

0800c468 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c46c:	f7fe f92e 	bl	800a6cc <HAL_RCC_GetHCLKFreq>
 800c470:	4602      	mov	r2, r0
 800c472:	4b06      	ldr	r3, [pc, #24]	; (800c48c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c474:	6a1b      	ldr	r3, [r3, #32]
 800c476:	091b      	lsrs	r3, r3, #4
 800c478:	f003 0307 	and.w	r3, r3, #7
 800c47c:	4904      	ldr	r1, [pc, #16]	; (800c490 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c47e:	5ccb      	ldrb	r3, [r1, r3]
 800c480:	f003 031f 	and.w	r3, r3, #31
 800c484:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c488:	4618      	mov	r0, r3
 800c48a:	bd80      	pop	{r7, pc}
 800c48c:	58024400 	.word	0x58024400
 800c490:	08018484 	.word	0x08018484

0800c494 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c494:	b480      	push	{r7}
 800c496:	b089      	sub	sp, #36	; 0x24
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c49c:	4ba1      	ldr	r3, [pc, #644]	; (800c724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c49e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4a0:	f003 0303 	and.w	r3, r3, #3
 800c4a4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c4a6:	4b9f      	ldr	r3, [pc, #636]	; (800c724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4aa:	0b1b      	lsrs	r3, r3, #12
 800c4ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c4b0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c4b2:	4b9c      	ldr	r3, [pc, #624]	; (800c724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4b6:	091b      	lsrs	r3, r3, #4
 800c4b8:	f003 0301 	and.w	r3, r3, #1
 800c4bc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c4be:	4b99      	ldr	r3, [pc, #612]	; (800c724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4c2:	08db      	lsrs	r3, r3, #3
 800c4c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c4c8:	693a      	ldr	r2, [r7, #16]
 800c4ca:	fb02 f303 	mul.w	r3, r2, r3
 800c4ce:	ee07 3a90 	vmov	s15, r3
 800c4d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c4da:	697b      	ldr	r3, [r7, #20]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	f000 8111 	beq.w	800c704 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c4e2:	69bb      	ldr	r3, [r7, #24]
 800c4e4:	2b02      	cmp	r3, #2
 800c4e6:	f000 8083 	beq.w	800c5f0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c4ea:	69bb      	ldr	r3, [r7, #24]
 800c4ec:	2b02      	cmp	r3, #2
 800c4ee:	f200 80a1 	bhi.w	800c634 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c4f2:	69bb      	ldr	r3, [r7, #24]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d003      	beq.n	800c500 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c4f8:	69bb      	ldr	r3, [r7, #24]
 800c4fa:	2b01      	cmp	r3, #1
 800c4fc:	d056      	beq.n	800c5ac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c4fe:	e099      	b.n	800c634 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c500:	4b88      	ldr	r3, [pc, #544]	; (800c724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	f003 0320 	and.w	r3, r3, #32
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d02d      	beq.n	800c568 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c50c:	4b85      	ldr	r3, [pc, #532]	; (800c724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	08db      	lsrs	r3, r3, #3
 800c512:	f003 0303 	and.w	r3, r3, #3
 800c516:	4a84      	ldr	r2, [pc, #528]	; (800c728 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c518:	fa22 f303 	lsr.w	r3, r2, r3
 800c51c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c51e:	68bb      	ldr	r3, [r7, #8]
 800c520:	ee07 3a90 	vmov	s15, r3
 800c524:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	ee07 3a90 	vmov	s15, r3
 800c52e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c536:	4b7b      	ldr	r3, [pc, #492]	; (800c724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c53a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c53e:	ee07 3a90 	vmov	s15, r3
 800c542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c546:	ed97 6a03 	vldr	s12, [r7, #12]
 800c54a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c72c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c54e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c556:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c55a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c55e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c562:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c566:	e087      	b.n	800c678 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c568:	697b      	ldr	r3, [r7, #20]
 800c56a:	ee07 3a90 	vmov	s15, r3
 800c56e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c572:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c730 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c57a:	4b6a      	ldr	r3, [pc, #424]	; (800c724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c57c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c57e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c582:	ee07 3a90 	vmov	s15, r3
 800c586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c58a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c58e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c72c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c59a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c59e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c5aa:	e065      	b.n	800c678 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	ee07 3a90 	vmov	s15, r3
 800c5b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c5ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5be:	4b59      	ldr	r3, [pc, #356]	; (800c724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5c6:	ee07 3a90 	vmov	s15, r3
 800c5ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c72c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c5d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c5ee:	e043      	b.n	800c678 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	ee07 3a90 	vmov	s15, r3
 800c5f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c738 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c5fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c602:	4b48      	ldr	r3, [pc, #288]	; (800c724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c60a:	ee07 3a90 	vmov	s15, r3
 800c60e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c612:	ed97 6a03 	vldr	s12, [r7, #12]
 800c616:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c72c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c61a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c61e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c62a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c62e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c632:	e021      	b.n	800c678 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	ee07 3a90 	vmov	s15, r3
 800c63a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c63e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c646:	4b37      	ldr	r3, [pc, #220]	; (800c724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c64a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c64e:	ee07 3a90 	vmov	s15, r3
 800c652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c656:	ed97 6a03 	vldr	s12, [r7, #12]
 800c65a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c72c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c65e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c66a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c66e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c672:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c676:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c678:	4b2a      	ldr	r3, [pc, #168]	; (800c724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c67a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c67c:	0a5b      	lsrs	r3, r3, #9
 800c67e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c682:	ee07 3a90 	vmov	s15, r3
 800c686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c68a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c68e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c692:	edd7 6a07 	vldr	s13, [r7, #28]
 800c696:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c69a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c69e:	ee17 2a90 	vmov	r2, s15
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c6a6:	4b1f      	ldr	r3, [pc, #124]	; (800c724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6aa:	0c1b      	lsrs	r3, r3, #16
 800c6ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6b0:	ee07 3a90 	vmov	s15, r3
 800c6b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c6bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c6c0:	edd7 6a07 	vldr	s13, [r7, #28]
 800c6c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c6c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6cc:	ee17 2a90 	vmov	r2, s15
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c6d4:	4b13      	ldr	r3, [pc, #76]	; (800c724 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6d8:	0e1b      	lsrs	r3, r3, #24
 800c6da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6de:	ee07 3a90 	vmov	s15, r3
 800c6e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c6ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c6ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800c6f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c6f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6fa:	ee17 2a90 	vmov	r2, s15
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c702:	e008      	b.n	800c716 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2200      	movs	r2, #0
 800c708:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2200      	movs	r2, #0
 800c70e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2200      	movs	r2, #0
 800c714:	609a      	str	r2, [r3, #8]
}
 800c716:	bf00      	nop
 800c718:	3724      	adds	r7, #36	; 0x24
 800c71a:	46bd      	mov	sp, r7
 800c71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c720:	4770      	bx	lr
 800c722:	bf00      	nop
 800c724:	58024400 	.word	0x58024400
 800c728:	03d09000 	.word	0x03d09000
 800c72c:	46000000 	.word	0x46000000
 800c730:	4c742400 	.word	0x4c742400
 800c734:	4a742400 	.word	0x4a742400
 800c738:	4c3ebc20 	.word	0x4c3ebc20

0800c73c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c73c:	b480      	push	{r7}
 800c73e:	b089      	sub	sp, #36	; 0x24
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c744:	4ba1      	ldr	r3, [pc, #644]	; (800c9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c748:	f003 0303 	and.w	r3, r3, #3
 800c74c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c74e:	4b9f      	ldr	r3, [pc, #636]	; (800c9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c752:	0d1b      	lsrs	r3, r3, #20
 800c754:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c758:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c75a:	4b9c      	ldr	r3, [pc, #624]	; (800c9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c75c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c75e:	0a1b      	lsrs	r3, r3, #8
 800c760:	f003 0301 	and.w	r3, r3, #1
 800c764:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c766:	4b99      	ldr	r3, [pc, #612]	; (800c9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c76a:	08db      	lsrs	r3, r3, #3
 800c76c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c770:	693a      	ldr	r2, [r7, #16]
 800c772:	fb02 f303 	mul.w	r3, r2, r3
 800c776:	ee07 3a90 	vmov	s15, r3
 800c77a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c77e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	2b00      	cmp	r3, #0
 800c786:	f000 8111 	beq.w	800c9ac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c78a:	69bb      	ldr	r3, [r7, #24]
 800c78c:	2b02      	cmp	r3, #2
 800c78e:	f000 8083 	beq.w	800c898 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c792:	69bb      	ldr	r3, [r7, #24]
 800c794:	2b02      	cmp	r3, #2
 800c796:	f200 80a1 	bhi.w	800c8dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c79a:	69bb      	ldr	r3, [r7, #24]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d003      	beq.n	800c7a8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c7a0:	69bb      	ldr	r3, [r7, #24]
 800c7a2:	2b01      	cmp	r3, #1
 800c7a4:	d056      	beq.n	800c854 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c7a6:	e099      	b.n	800c8dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c7a8:	4b88      	ldr	r3, [pc, #544]	; (800c9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	f003 0320 	and.w	r3, r3, #32
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d02d      	beq.n	800c810 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c7b4:	4b85      	ldr	r3, [pc, #532]	; (800c9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	08db      	lsrs	r3, r3, #3
 800c7ba:	f003 0303 	and.w	r3, r3, #3
 800c7be:	4a84      	ldr	r2, [pc, #528]	; (800c9d0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c7c0:	fa22 f303 	lsr.w	r3, r2, r3
 800c7c4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	ee07 3a90 	vmov	s15, r3
 800c7cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	ee07 3a90 	vmov	s15, r3
 800c7d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7de:	4b7b      	ldr	r3, [pc, #492]	; (800c9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7e6:	ee07 3a90 	vmov	s15, r3
 800c7ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c7f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c80a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c80e:	e087      	b.n	800c920 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	ee07 3a90 	vmov	s15, r3
 800c816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c81a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c81e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c822:	4b6a      	ldr	r3, [pc, #424]	; (800c9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c82a:	ee07 3a90 	vmov	s15, r3
 800c82e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c832:	ed97 6a03 	vldr	s12, [r7, #12]
 800c836:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c83a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c83e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c842:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c84a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c84e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c852:	e065      	b.n	800c920 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	ee07 3a90 	vmov	s15, r3
 800c85a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c85e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c9dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c866:	4b59      	ldr	r3, [pc, #356]	; (800c9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c86a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c86e:	ee07 3a90 	vmov	s15, r3
 800c872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c876:	ed97 6a03 	vldr	s12, [r7, #12]
 800c87a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c87e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c88a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c88e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c892:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c896:	e043      	b.n	800c920 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	ee07 3a90 	vmov	s15, r3
 800c89e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c9e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c8a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8aa:	4b48      	ldr	r3, [pc, #288]	; (800c9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8b2:	ee07 3a90 	vmov	s15, r3
 800c8b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8be:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c8c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c8da:	e021      	b.n	800c920 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	ee07 3a90 	vmov	s15, r3
 800c8e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c9dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c8ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8ee:	4b37      	ldr	r3, [pc, #220]	; (800c9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8f6:	ee07 3a90 	vmov	s15, r3
 800c8fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800c902:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c90a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c90e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c91a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c91e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c920:	4b2a      	ldr	r3, [pc, #168]	; (800c9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c924:	0a5b      	lsrs	r3, r3, #9
 800c926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c92a:	ee07 3a90 	vmov	s15, r3
 800c92e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c932:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c936:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c93a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c93e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c942:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c946:	ee17 2a90 	vmov	r2, s15
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c94e:	4b1f      	ldr	r3, [pc, #124]	; (800c9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c952:	0c1b      	lsrs	r3, r3, #16
 800c954:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c958:	ee07 3a90 	vmov	s15, r3
 800c95c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c960:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c964:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c968:	edd7 6a07 	vldr	s13, [r7, #28]
 800c96c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c970:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c974:	ee17 2a90 	vmov	r2, s15
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c97c:	4b13      	ldr	r3, [pc, #76]	; (800c9cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c97e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c980:	0e1b      	lsrs	r3, r3, #24
 800c982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c986:	ee07 3a90 	vmov	s15, r3
 800c98a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c98e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c992:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c996:	edd7 6a07 	vldr	s13, [r7, #28]
 800c99a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c99e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9a2:	ee17 2a90 	vmov	r2, s15
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c9aa:	e008      	b.n	800c9be <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	609a      	str	r2, [r3, #8]
}
 800c9be:	bf00      	nop
 800c9c0:	3724      	adds	r7, #36	; 0x24
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c8:	4770      	bx	lr
 800c9ca:	bf00      	nop
 800c9cc:	58024400 	.word	0x58024400
 800c9d0:	03d09000 	.word	0x03d09000
 800c9d4:	46000000 	.word	0x46000000
 800c9d8:	4c742400 	.word	0x4c742400
 800c9dc:	4a742400 	.word	0x4a742400
 800c9e0:	4c3ebc20 	.word	0x4c3ebc20

0800c9e4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c9e4:	b480      	push	{r7}
 800c9e6:	b089      	sub	sp, #36	; 0x24
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c9ec:	4ba0      	ldr	r3, [pc, #640]	; (800cc70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c9ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9f0:	f003 0303 	and.w	r3, r3, #3
 800c9f4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c9f6:	4b9e      	ldr	r3, [pc, #632]	; (800cc70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c9f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9fa:	091b      	lsrs	r3, r3, #4
 800c9fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca00:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ca02:	4b9b      	ldr	r3, [pc, #620]	; (800cc70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca06:	f003 0301 	and.w	r3, r3, #1
 800ca0a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ca0c:	4b98      	ldr	r3, [pc, #608]	; (800cc70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca10:	08db      	lsrs	r3, r3, #3
 800ca12:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ca16:	693a      	ldr	r2, [r7, #16]
 800ca18:	fb02 f303 	mul.w	r3, r2, r3
 800ca1c:	ee07 3a90 	vmov	s15, r3
 800ca20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca24:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ca28:	697b      	ldr	r3, [r7, #20]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	f000 8111 	beq.w	800cc52 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ca30:	69bb      	ldr	r3, [r7, #24]
 800ca32:	2b02      	cmp	r3, #2
 800ca34:	f000 8083 	beq.w	800cb3e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ca38:	69bb      	ldr	r3, [r7, #24]
 800ca3a:	2b02      	cmp	r3, #2
 800ca3c:	f200 80a1 	bhi.w	800cb82 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ca40:	69bb      	ldr	r3, [r7, #24]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d003      	beq.n	800ca4e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ca46:	69bb      	ldr	r3, [r7, #24]
 800ca48:	2b01      	cmp	r3, #1
 800ca4a:	d056      	beq.n	800cafa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ca4c:	e099      	b.n	800cb82 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca4e:	4b88      	ldr	r3, [pc, #544]	; (800cc70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	f003 0320 	and.w	r3, r3, #32
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d02d      	beq.n	800cab6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca5a:	4b85      	ldr	r3, [pc, #532]	; (800cc70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	08db      	lsrs	r3, r3, #3
 800ca60:	f003 0303 	and.w	r3, r3, #3
 800ca64:	4a83      	ldr	r2, [pc, #524]	; (800cc74 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ca66:	fa22 f303 	lsr.w	r3, r2, r3
 800ca6a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	ee07 3a90 	vmov	s15, r3
 800ca72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	ee07 3a90 	vmov	s15, r3
 800ca7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca84:	4b7a      	ldr	r3, [pc, #488]	; (800cc70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca8c:	ee07 3a90 	vmov	s15, r3
 800ca90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca94:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca98:	eddf 5a77 	vldr	s11, [pc, #476]	; 800cc78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ca9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800caa0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800caa4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800caa8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800caac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cab0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cab4:	e087      	b.n	800cbc6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cab6:	697b      	ldr	r3, [r7, #20]
 800cab8:	ee07 3a90 	vmov	s15, r3
 800cabc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cac0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800cc7c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cac4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cac8:	4b69      	ldr	r3, [pc, #420]	; (800cc70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800caca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cacc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cad0:	ee07 3a90 	vmov	s15, r3
 800cad4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cad8:	ed97 6a03 	vldr	s12, [r7, #12]
 800cadc:	eddf 5a66 	vldr	s11, [pc, #408]	; 800cc78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cae0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cae4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cae8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800caec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800caf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800caf4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800caf8:	e065      	b.n	800cbc6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	ee07 3a90 	vmov	s15, r3
 800cb00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb04:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800cc80 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800cb08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb0c:	4b58      	ldr	r3, [pc, #352]	; (800cc70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb14:	ee07 3a90 	vmov	s15, r3
 800cb18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb1c:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb20:	eddf 5a55 	vldr	s11, [pc, #340]	; 800cc78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cb24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb34:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb38:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb3c:	e043      	b.n	800cbc6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cb3e:	697b      	ldr	r3, [r7, #20]
 800cb40:	ee07 3a90 	vmov	s15, r3
 800cb44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb48:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800cc84 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800cb4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb50:	4b47      	ldr	r3, [pc, #284]	; (800cc70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb58:	ee07 3a90 	vmov	s15, r3
 800cb5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb60:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb64:	eddf 5a44 	vldr	s11, [pc, #272]	; 800cc78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cb68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb78:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb7c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb80:	e021      	b.n	800cbc6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	ee07 3a90 	vmov	s15, r3
 800cb88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb8c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800cc7c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cb90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb94:	4b36      	ldr	r3, [pc, #216]	; (800cc70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb9c:	ee07 3a90 	vmov	s15, r3
 800cba0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cba4:	ed97 6a03 	vldr	s12, [r7, #12]
 800cba8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800cc78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cbac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbc0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cbc4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800cbc6:	4b2a      	ldr	r3, [pc, #168]	; (800cc70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cbc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbca:	0a5b      	lsrs	r3, r3, #9
 800cbcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbd0:	ee07 3a90 	vmov	s15, r3
 800cbd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cbdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cbe0:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbe8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbec:	ee17 2a90 	vmov	r2, s15
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800cbf4:	4b1e      	ldr	r3, [pc, #120]	; (800cc70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cbf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbf8:	0c1b      	lsrs	r3, r3, #16
 800cbfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbfe:	ee07 3a90 	vmov	s15, r3
 800cc02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc0e:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc1a:	ee17 2a90 	vmov	r2, s15
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800cc22:	4b13      	ldr	r3, [pc, #76]	; (800cc70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc26:	0e1b      	lsrs	r3, r3, #24
 800cc28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc2c:	ee07 3a90 	vmov	s15, r3
 800cc30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc38:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc3c:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc48:	ee17 2a90 	vmov	r2, s15
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800cc50:	e008      	b.n	800cc64 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2200      	movs	r2, #0
 800cc56:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2200      	movs	r2, #0
 800cc62:	609a      	str	r2, [r3, #8]
}
 800cc64:	bf00      	nop
 800cc66:	3724      	adds	r7, #36	; 0x24
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6e:	4770      	bx	lr
 800cc70:	58024400 	.word	0x58024400
 800cc74:	03d09000 	.word	0x03d09000
 800cc78:	46000000 	.word	0x46000000
 800cc7c:	4c742400 	.word	0x4c742400
 800cc80:	4a742400 	.word	0x4a742400
 800cc84:	4c3ebc20 	.word	0x4c3ebc20

0800cc88 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b084      	sub	sp, #16
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cc92:	2300      	movs	r3, #0
 800cc94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cc96:	4b53      	ldr	r3, [pc, #332]	; (800cde4 <RCCEx_PLL2_Config+0x15c>)
 800cc98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc9a:	f003 0303 	and.w	r3, r3, #3
 800cc9e:	2b03      	cmp	r3, #3
 800cca0:	d101      	bne.n	800cca6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cca2:	2301      	movs	r3, #1
 800cca4:	e099      	b.n	800cdda <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cca6:	4b4f      	ldr	r3, [pc, #316]	; (800cde4 <RCCEx_PLL2_Config+0x15c>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	4a4e      	ldr	r2, [pc, #312]	; (800cde4 <RCCEx_PLL2_Config+0x15c>)
 800ccac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ccb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ccb2:	f7f6 fe7b 	bl	80039ac <HAL_GetTick>
 800ccb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ccb8:	e008      	b.n	800cccc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ccba:	f7f6 fe77 	bl	80039ac <HAL_GetTick>
 800ccbe:	4602      	mov	r2, r0
 800ccc0:	68bb      	ldr	r3, [r7, #8]
 800ccc2:	1ad3      	subs	r3, r2, r3
 800ccc4:	2b02      	cmp	r3, #2
 800ccc6:	d901      	bls.n	800cccc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ccc8:	2303      	movs	r3, #3
 800ccca:	e086      	b.n	800cdda <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cccc:	4b45      	ldr	r3, [pc, #276]	; (800cde4 <RCCEx_PLL2_Config+0x15c>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d1f0      	bne.n	800ccba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ccd8:	4b42      	ldr	r3, [pc, #264]	; (800cde4 <RCCEx_PLL2_Config+0x15c>)
 800ccda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccdc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	031b      	lsls	r3, r3, #12
 800cce6:	493f      	ldr	r1, [pc, #252]	; (800cde4 <RCCEx_PLL2_Config+0x15c>)
 800cce8:	4313      	orrs	r3, r2
 800ccea:	628b      	str	r3, [r1, #40]	; 0x28
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	685b      	ldr	r3, [r3, #4]
 800ccf0:	3b01      	subs	r3, #1
 800ccf2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	689b      	ldr	r3, [r3, #8]
 800ccfa:	3b01      	subs	r3, #1
 800ccfc:	025b      	lsls	r3, r3, #9
 800ccfe:	b29b      	uxth	r3, r3
 800cd00:	431a      	orrs	r2, r3
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	68db      	ldr	r3, [r3, #12]
 800cd06:	3b01      	subs	r3, #1
 800cd08:	041b      	lsls	r3, r3, #16
 800cd0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cd0e:	431a      	orrs	r2, r3
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	691b      	ldr	r3, [r3, #16]
 800cd14:	3b01      	subs	r3, #1
 800cd16:	061b      	lsls	r3, r3, #24
 800cd18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cd1c:	4931      	ldr	r1, [pc, #196]	; (800cde4 <RCCEx_PLL2_Config+0x15c>)
 800cd1e:	4313      	orrs	r3, r2
 800cd20:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cd22:	4b30      	ldr	r3, [pc, #192]	; (800cde4 <RCCEx_PLL2_Config+0x15c>)
 800cd24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	695b      	ldr	r3, [r3, #20]
 800cd2e:	492d      	ldr	r1, [pc, #180]	; (800cde4 <RCCEx_PLL2_Config+0x15c>)
 800cd30:	4313      	orrs	r3, r2
 800cd32:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cd34:	4b2b      	ldr	r3, [pc, #172]	; (800cde4 <RCCEx_PLL2_Config+0x15c>)
 800cd36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd38:	f023 0220 	bic.w	r2, r3, #32
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	699b      	ldr	r3, [r3, #24]
 800cd40:	4928      	ldr	r1, [pc, #160]	; (800cde4 <RCCEx_PLL2_Config+0x15c>)
 800cd42:	4313      	orrs	r3, r2
 800cd44:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cd46:	4b27      	ldr	r3, [pc, #156]	; (800cde4 <RCCEx_PLL2_Config+0x15c>)
 800cd48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd4a:	4a26      	ldr	r2, [pc, #152]	; (800cde4 <RCCEx_PLL2_Config+0x15c>)
 800cd4c:	f023 0310 	bic.w	r3, r3, #16
 800cd50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cd52:	4b24      	ldr	r3, [pc, #144]	; (800cde4 <RCCEx_PLL2_Config+0x15c>)
 800cd54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd56:	4b24      	ldr	r3, [pc, #144]	; (800cde8 <RCCEx_PLL2_Config+0x160>)
 800cd58:	4013      	ands	r3, r2
 800cd5a:	687a      	ldr	r2, [r7, #4]
 800cd5c:	69d2      	ldr	r2, [r2, #28]
 800cd5e:	00d2      	lsls	r2, r2, #3
 800cd60:	4920      	ldr	r1, [pc, #128]	; (800cde4 <RCCEx_PLL2_Config+0x15c>)
 800cd62:	4313      	orrs	r3, r2
 800cd64:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cd66:	4b1f      	ldr	r3, [pc, #124]	; (800cde4 <RCCEx_PLL2_Config+0x15c>)
 800cd68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd6a:	4a1e      	ldr	r2, [pc, #120]	; (800cde4 <RCCEx_PLL2_Config+0x15c>)
 800cd6c:	f043 0310 	orr.w	r3, r3, #16
 800cd70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d106      	bne.n	800cd86 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cd78:	4b1a      	ldr	r3, [pc, #104]	; (800cde4 <RCCEx_PLL2_Config+0x15c>)
 800cd7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd7c:	4a19      	ldr	r2, [pc, #100]	; (800cde4 <RCCEx_PLL2_Config+0x15c>)
 800cd7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cd82:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cd84:	e00f      	b.n	800cda6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	2b01      	cmp	r3, #1
 800cd8a:	d106      	bne.n	800cd9a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cd8c:	4b15      	ldr	r3, [pc, #84]	; (800cde4 <RCCEx_PLL2_Config+0x15c>)
 800cd8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd90:	4a14      	ldr	r2, [pc, #80]	; (800cde4 <RCCEx_PLL2_Config+0x15c>)
 800cd92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cd96:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cd98:	e005      	b.n	800cda6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cd9a:	4b12      	ldr	r3, [pc, #72]	; (800cde4 <RCCEx_PLL2_Config+0x15c>)
 800cd9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd9e:	4a11      	ldr	r2, [pc, #68]	; (800cde4 <RCCEx_PLL2_Config+0x15c>)
 800cda0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cda4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cda6:	4b0f      	ldr	r3, [pc, #60]	; (800cde4 <RCCEx_PLL2_Config+0x15c>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	4a0e      	ldr	r2, [pc, #56]	; (800cde4 <RCCEx_PLL2_Config+0x15c>)
 800cdac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cdb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cdb2:	f7f6 fdfb 	bl	80039ac <HAL_GetTick>
 800cdb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cdb8:	e008      	b.n	800cdcc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cdba:	f7f6 fdf7 	bl	80039ac <HAL_GetTick>
 800cdbe:	4602      	mov	r2, r0
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	1ad3      	subs	r3, r2, r3
 800cdc4:	2b02      	cmp	r3, #2
 800cdc6:	d901      	bls.n	800cdcc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cdc8:	2303      	movs	r3, #3
 800cdca:	e006      	b.n	800cdda <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cdcc:	4b05      	ldr	r3, [pc, #20]	; (800cde4 <RCCEx_PLL2_Config+0x15c>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d0f0      	beq.n	800cdba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cdd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdda:	4618      	mov	r0, r3
 800cddc:	3710      	adds	r7, #16
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}
 800cde2:	bf00      	nop
 800cde4:	58024400 	.word	0x58024400
 800cde8:	ffff0007 	.word	0xffff0007

0800cdec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b084      	sub	sp, #16
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
 800cdf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cdfa:	4b53      	ldr	r3, [pc, #332]	; (800cf48 <RCCEx_PLL3_Config+0x15c>)
 800cdfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdfe:	f003 0303 	and.w	r3, r3, #3
 800ce02:	2b03      	cmp	r3, #3
 800ce04:	d101      	bne.n	800ce0a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ce06:	2301      	movs	r3, #1
 800ce08:	e099      	b.n	800cf3e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ce0a:	4b4f      	ldr	r3, [pc, #316]	; (800cf48 <RCCEx_PLL3_Config+0x15c>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	4a4e      	ldr	r2, [pc, #312]	; (800cf48 <RCCEx_PLL3_Config+0x15c>)
 800ce10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ce14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce16:	f7f6 fdc9 	bl	80039ac <HAL_GetTick>
 800ce1a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ce1c:	e008      	b.n	800ce30 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ce1e:	f7f6 fdc5 	bl	80039ac <HAL_GetTick>
 800ce22:	4602      	mov	r2, r0
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	1ad3      	subs	r3, r2, r3
 800ce28:	2b02      	cmp	r3, #2
 800ce2a:	d901      	bls.n	800ce30 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ce2c:	2303      	movs	r3, #3
 800ce2e:	e086      	b.n	800cf3e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ce30:	4b45      	ldr	r3, [pc, #276]	; (800cf48 <RCCEx_PLL3_Config+0x15c>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d1f0      	bne.n	800ce1e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ce3c:	4b42      	ldr	r3, [pc, #264]	; (800cf48 <RCCEx_PLL3_Config+0x15c>)
 800ce3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce40:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	051b      	lsls	r3, r3, #20
 800ce4a:	493f      	ldr	r1, [pc, #252]	; (800cf48 <RCCEx_PLL3_Config+0x15c>)
 800ce4c:	4313      	orrs	r3, r2
 800ce4e:	628b      	str	r3, [r1, #40]	; 0x28
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	685b      	ldr	r3, [r3, #4]
 800ce54:	3b01      	subs	r3, #1
 800ce56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	689b      	ldr	r3, [r3, #8]
 800ce5e:	3b01      	subs	r3, #1
 800ce60:	025b      	lsls	r3, r3, #9
 800ce62:	b29b      	uxth	r3, r3
 800ce64:	431a      	orrs	r2, r3
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	68db      	ldr	r3, [r3, #12]
 800ce6a:	3b01      	subs	r3, #1
 800ce6c:	041b      	lsls	r3, r3, #16
 800ce6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ce72:	431a      	orrs	r2, r3
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	691b      	ldr	r3, [r3, #16]
 800ce78:	3b01      	subs	r3, #1
 800ce7a:	061b      	lsls	r3, r3, #24
 800ce7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ce80:	4931      	ldr	r1, [pc, #196]	; (800cf48 <RCCEx_PLL3_Config+0x15c>)
 800ce82:	4313      	orrs	r3, r2
 800ce84:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ce86:	4b30      	ldr	r3, [pc, #192]	; (800cf48 <RCCEx_PLL3_Config+0x15c>)
 800ce88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce8a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	695b      	ldr	r3, [r3, #20]
 800ce92:	492d      	ldr	r1, [pc, #180]	; (800cf48 <RCCEx_PLL3_Config+0x15c>)
 800ce94:	4313      	orrs	r3, r2
 800ce96:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ce98:	4b2b      	ldr	r3, [pc, #172]	; (800cf48 <RCCEx_PLL3_Config+0x15c>)
 800ce9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce9c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	699b      	ldr	r3, [r3, #24]
 800cea4:	4928      	ldr	r1, [pc, #160]	; (800cf48 <RCCEx_PLL3_Config+0x15c>)
 800cea6:	4313      	orrs	r3, r2
 800cea8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ceaa:	4b27      	ldr	r3, [pc, #156]	; (800cf48 <RCCEx_PLL3_Config+0x15c>)
 800ceac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceae:	4a26      	ldr	r2, [pc, #152]	; (800cf48 <RCCEx_PLL3_Config+0x15c>)
 800ceb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ceb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ceb6:	4b24      	ldr	r3, [pc, #144]	; (800cf48 <RCCEx_PLL3_Config+0x15c>)
 800ceb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ceba:	4b24      	ldr	r3, [pc, #144]	; (800cf4c <RCCEx_PLL3_Config+0x160>)
 800cebc:	4013      	ands	r3, r2
 800cebe:	687a      	ldr	r2, [r7, #4]
 800cec0:	69d2      	ldr	r2, [r2, #28]
 800cec2:	00d2      	lsls	r2, r2, #3
 800cec4:	4920      	ldr	r1, [pc, #128]	; (800cf48 <RCCEx_PLL3_Config+0x15c>)
 800cec6:	4313      	orrs	r3, r2
 800cec8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ceca:	4b1f      	ldr	r3, [pc, #124]	; (800cf48 <RCCEx_PLL3_Config+0x15c>)
 800cecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cece:	4a1e      	ldr	r2, [pc, #120]	; (800cf48 <RCCEx_PLL3_Config+0x15c>)
 800ced0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ced4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d106      	bne.n	800ceea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cedc:	4b1a      	ldr	r3, [pc, #104]	; (800cf48 <RCCEx_PLL3_Config+0x15c>)
 800cede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cee0:	4a19      	ldr	r2, [pc, #100]	; (800cf48 <RCCEx_PLL3_Config+0x15c>)
 800cee2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cee6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cee8:	e00f      	b.n	800cf0a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	2b01      	cmp	r3, #1
 800ceee:	d106      	bne.n	800cefe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cef0:	4b15      	ldr	r3, [pc, #84]	; (800cf48 <RCCEx_PLL3_Config+0x15c>)
 800cef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cef4:	4a14      	ldr	r2, [pc, #80]	; (800cf48 <RCCEx_PLL3_Config+0x15c>)
 800cef6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cefa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cefc:	e005      	b.n	800cf0a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cefe:	4b12      	ldr	r3, [pc, #72]	; (800cf48 <RCCEx_PLL3_Config+0x15c>)
 800cf00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf02:	4a11      	ldr	r2, [pc, #68]	; (800cf48 <RCCEx_PLL3_Config+0x15c>)
 800cf04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cf08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cf0a:	4b0f      	ldr	r3, [pc, #60]	; (800cf48 <RCCEx_PLL3_Config+0x15c>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	4a0e      	ldr	r2, [pc, #56]	; (800cf48 <RCCEx_PLL3_Config+0x15c>)
 800cf10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf16:	f7f6 fd49 	bl	80039ac <HAL_GetTick>
 800cf1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cf1c:	e008      	b.n	800cf30 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cf1e:	f7f6 fd45 	bl	80039ac <HAL_GetTick>
 800cf22:	4602      	mov	r2, r0
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	1ad3      	subs	r3, r2, r3
 800cf28:	2b02      	cmp	r3, #2
 800cf2a:	d901      	bls.n	800cf30 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cf2c:	2303      	movs	r3, #3
 800cf2e:	e006      	b.n	800cf3e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cf30:	4b05      	ldr	r3, [pc, #20]	; (800cf48 <RCCEx_PLL3_Config+0x15c>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d0f0      	beq.n	800cf1e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cf3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3710      	adds	r7, #16
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}
 800cf46:	bf00      	nop
 800cf48:	58024400 	.word	0x58024400
 800cf4c:	ffff0007 	.word	0xffff0007

0800cf50 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b08a      	sub	sp, #40	; 0x28
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d101      	bne.n	800cf62 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800cf5e:	2301      	movs	r3, #1
 800cf60:	e075      	b.n	800d04e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cf68:	b2db      	uxtb	r3, r3
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d105      	bne.n	800cf7a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2200      	movs	r2, #0
 800cf72:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f7f5 fe59 	bl	8002c2c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2204      	movs	r2, #4
 800cf7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f000 f868 	bl	800d058 <HAL_SD_InitCard>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d001      	beq.n	800cf92 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800cf8e:	2301      	movs	r3, #1
 800cf90:	e05d      	b.n	800d04e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800cf92:	f107 0308 	add.w	r3, r7, #8
 800cf96:	4619      	mov	r1, r3
 800cf98:	6878      	ldr	r0, [r7, #4]
 800cf9a:	f000 fdaf 	bl	800dafc <HAL_SD_GetCardStatus>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d001      	beq.n	800cfa8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	e052      	b.n	800d04e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800cfa8:	7e3b      	ldrb	r3, [r7, #24]
 800cfaa:	b2db      	uxtb	r3, r3
 800cfac:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800cfae:	7e7b      	ldrb	r3, [r7, #25]
 800cfb0:	b2db      	uxtb	r3, r3
 800cfb2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfb8:	2b01      	cmp	r3, #1
 800cfba:	d10a      	bne.n	800cfd2 <HAL_SD_Init+0x82>
 800cfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d102      	bne.n	800cfc8 <HAL_SD_Init+0x78>
 800cfc2:	6a3b      	ldr	r3, [r7, #32]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d004      	beq.n	800cfd2 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cfce:	659a      	str	r2, [r3, #88]	; 0x58
 800cfd0:	e00b      	b.n	800cfea <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfd6:	2b01      	cmp	r3, #1
 800cfd8:	d104      	bne.n	800cfe4 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cfe0:	659a      	str	r2, [r3, #88]	; 0x58
 800cfe2:	e002      	b.n	800cfea <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	68db      	ldr	r3, [r3, #12]
 800cfee:	4619      	mov	r1, r3
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	f000 fe6d 	bl	800dcd0 <HAL_SD_ConfigWideBusOperation>
 800cff6:	4603      	mov	r3, r0
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d001      	beq.n	800d000 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800cffc:	2301      	movs	r3, #1
 800cffe:	e026      	b.n	800d04e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800d000:	f7f6 fcd4 	bl	80039ac <HAL_GetTick>
 800d004:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d006:	e011      	b.n	800d02c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d008:	f7f6 fcd0 	bl	80039ac <HAL_GetTick>
 800d00c:	4602      	mov	r2, r0
 800d00e:	69fb      	ldr	r3, [r7, #28]
 800d010:	1ad3      	subs	r3, r2, r3
 800d012:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d016:	d109      	bne.n	800d02c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d01e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2201      	movs	r2, #1
 800d024:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800d028:	2303      	movs	r3, #3
 800d02a:	e010      	b.n	800d04e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f000 ff61 	bl	800def4 <HAL_SD_GetCardState>
 800d032:	4603      	mov	r3, r0
 800d034:	2b04      	cmp	r3, #4
 800d036:	d1e7      	bne.n	800d008 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2200      	movs	r2, #0
 800d03c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2200      	movs	r2, #0
 800d042:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2201      	movs	r2, #1
 800d048:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800d04c:	2300      	movs	r3, #0
}
 800d04e:	4618      	mov	r0, r3
 800d050:	3728      	adds	r7, #40	; 0x28
 800d052:	46bd      	mov	sp, r7
 800d054:	bd80      	pop	{r7, pc}
	...

0800d058 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d058:	b590      	push	{r4, r7, lr}
 800d05a:	b08d      	sub	sp, #52	; 0x34
 800d05c:	af02      	add	r7, sp, #8
 800d05e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d060:	2300      	movs	r3, #0
 800d062:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d064:	2300      	movs	r3, #0
 800d066:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d068:	2300      	movs	r3, #0
 800d06a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d06c:	2300      	movs	r3, #0
 800d06e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d070:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d074:	f04f 0100 	mov.w	r1, #0
 800d078:	f7fe fd24 	bl	800bac4 <HAL_RCCEx_GetPeriphCLKFreq>
 800d07c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800d07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d080:	2b00      	cmp	r3, #0
 800d082:	d109      	bne.n	800d098 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2201      	movs	r2, #1
 800d088:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d092:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d094:	2301      	movs	r3, #1
 800d096:	e070      	b.n	800d17a <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800d098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d09a:	0a1b      	lsrs	r3, r3, #8
 800d09c:	4a39      	ldr	r2, [pc, #228]	; (800d184 <HAL_SD_InitCard+0x12c>)
 800d09e:	fba2 2303 	umull	r2, r3, r2, r3
 800d0a2:	091b      	lsrs	r3, r3, #4
 800d0a4:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681c      	ldr	r4, [r3, #0]
 800d0aa:	466a      	mov	r2, sp
 800d0ac:	f107 0318 	add.w	r3, r7, #24
 800d0b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d0b4:	e882 0003 	stmia.w	r2, {r0, r1}
 800d0b8:	f107 030c 	add.w	r3, r7, #12
 800d0bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d0be:	4620      	mov	r0, r4
 800d0c0:	f004 fec4 	bl	8011e4c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f004 ff07 	bl	8011edc <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800d0ce:	69fb      	ldr	r3, [r7, #28]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d005      	beq.n	800d0e0 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800d0d4:	69fb      	ldr	r3, [r7, #28]
 800d0d6:	005b      	lsls	r3, r3, #1
 800d0d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0da:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0de:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800d0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d007      	beq.n	800d0f6 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800d0e6:	4a28      	ldr	r2, [pc, #160]	; (800d188 <HAL_SD_InitCard+0x130>)
 800d0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0ee:	3301      	adds	r3, #1
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f7f6 fc67 	bl	80039c4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f000 ffea 	bl	800e0d0 <SD_PowerON>
 800d0fc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d0fe:	6a3b      	ldr	r3, [r7, #32]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d00b      	beq.n	800d11c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2201      	movs	r2, #1
 800d108:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d110:	6a3b      	ldr	r3, [r7, #32]
 800d112:	431a      	orrs	r2, r3
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d118:	2301      	movs	r3, #1
 800d11a:	e02e      	b.n	800d17a <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f000 ff09 	bl	800df34 <SD_InitCard>
 800d122:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d124:	6a3b      	ldr	r3, [r7, #32]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d00b      	beq.n	800d142 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2201      	movs	r2, #1
 800d12e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d136:	6a3b      	ldr	r3, [r7, #32]
 800d138:	431a      	orrs	r2, r3
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d13e:	2301      	movs	r3, #1
 800d140:	e01b      	b.n	800d17a <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d14a:	4618      	mov	r0, r3
 800d14c:	f004 ff5c 	bl	8012008 <SDMMC_CmdBlockLength>
 800d150:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d152:	6a3b      	ldr	r3, [r7, #32]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d00f      	beq.n	800d178 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	4a0b      	ldr	r2, [pc, #44]	; (800d18c <HAL_SD_InitCard+0x134>)
 800d15e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d164:	6a3b      	ldr	r3, [r7, #32]
 800d166:	431a      	orrs	r2, r3
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2201      	movs	r2, #1
 800d170:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d174:	2301      	movs	r3, #1
 800d176:	e000      	b.n	800d17a <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800d178:	2300      	movs	r3, #0
}
 800d17a:	4618      	mov	r0, r3
 800d17c:	372c      	adds	r7, #44	; 0x2c
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd90      	pop	{r4, r7, pc}
 800d182:	bf00      	nop
 800d184:	014f8b59 	.word	0x014f8b59
 800d188:	00012110 	.word	0x00012110
 800d18c:	1fe00fff 	.word	0x1fe00fff

0800d190 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b08c      	sub	sp, #48	; 0x30
 800d194:	af00      	add	r7, sp, #0
 800d196:	60f8      	str	r0, [r7, #12]
 800d198:	60b9      	str	r1, [r7, #8]
 800d19a:	607a      	str	r2, [r7, #4]
 800d19c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d1a2:	68bb      	ldr	r3, [r7, #8]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d107      	bne.n	800d1b8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1ac:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	e08d      	b.n	800d2d4 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d1be:	b2db      	uxtb	r3, r3
 800d1c0:	2b01      	cmp	r3, #1
 800d1c2:	f040 8086 	bne.w	800d2d2 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d1cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	441a      	add	r2, r3
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1d6:	429a      	cmp	r2, r3
 800d1d8:	d907      	bls.n	800d1ea <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1de:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	e074      	b.n	800d2d4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	2203      	movs	r2, #3
 800d1ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	68ba      	ldr	r2, [r7, #8]
 800d1fe:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	025a      	lsls	r2, r3, #9
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d20c:	2b01      	cmp	r3, #1
 800d20e:	d002      	beq.n	800d216 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800d210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d212:	025b      	lsls	r3, r3, #9
 800d214:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d216:	f04f 33ff 	mov.w	r3, #4294967295
 800d21a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	025b      	lsls	r3, r3, #9
 800d220:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d222:	2390      	movs	r3, #144	; 0x90
 800d224:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d226:	2302      	movs	r3, #2
 800d228:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d22a:	2300      	movs	r3, #0
 800d22c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d22e:	2300      	movs	r3, #0
 800d230:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	f107 0210 	add.w	r2, r7, #16
 800d23a:	4611      	mov	r1, r2
 800d23c:	4618      	mov	r0, r3
 800d23e:	f004 feb7 	bl	8011fb0 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	68da      	ldr	r2, [r3, #12]
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d250:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	68ba      	ldr	r2, [r7, #8]
 800d258:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	2201      	movs	r2, #1
 800d260:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	2b01      	cmp	r3, #1
 800d266:	d90a      	bls.n	800d27e <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	2282      	movs	r2, #130	; 0x82
 800d26c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d274:	4618      	mov	r0, r3
 800d276:	f004 ff0d 	bl	8012094 <SDMMC_CmdReadMultiBlock>
 800d27a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d27c:	e009      	b.n	800d292 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	2281      	movs	r2, #129	; 0x81
 800d282:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d28a:	4618      	mov	r0, r3
 800d28c:	f004 fedf 	bl	801204e <SDMMC_CmdReadSingleBlock>
 800d290:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d294:	2b00      	cmp	r3, #0
 800d296:	d012      	beq.n	800d2be <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	4a0f      	ldr	r2, [pc, #60]	; (800d2dc <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d29e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2a6:	431a      	orrs	r2, r3
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	2201      	movs	r2, #1
 800d2b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	e00a      	b.n	800d2d4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d2cc:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	e000      	b.n	800d2d4 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d2d2:	2302      	movs	r3, #2
  }
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	3730      	adds	r7, #48	; 0x30
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}
 800d2dc:	1fe00fff 	.word	0x1fe00fff

0800d2e0 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b08c      	sub	sp, #48	; 0x30
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	60f8      	str	r0, [r7, #12]
 800d2e8:	60b9      	str	r1, [r7, #8]
 800d2ea:	607a      	str	r2, [r7, #4]
 800d2ec:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d107      	bne.n	800d308 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2fc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d304:	2301      	movs	r3, #1
 800d306:	e08d      	b.n	800d424 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d30e:	b2db      	uxtb	r3, r3
 800d310:	2b01      	cmp	r3, #1
 800d312:	f040 8086 	bne.w	800d422 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	2200      	movs	r2, #0
 800d31a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d31c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	441a      	add	r2, r3
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d326:	429a      	cmp	r2, r3
 800d328:	d907      	bls.n	800d33a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d32e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d336:	2301      	movs	r3, #1
 800d338:	e074      	b.n	800d424 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	2203      	movs	r2, #3
 800d33e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	2200      	movs	r2, #0
 800d348:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	68ba      	ldr	r2, [r7, #8]
 800d34e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	025a      	lsls	r2, r3, #9
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d35c:	2b01      	cmp	r3, #1
 800d35e:	d002      	beq.n	800d366 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800d360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d362:	025b      	lsls	r3, r3, #9
 800d364:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d366:	f04f 33ff 	mov.w	r3, #4294967295
 800d36a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	025b      	lsls	r3, r3, #9
 800d370:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d372:	2390      	movs	r3, #144	; 0x90
 800d374:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d376:	2300      	movs	r3, #0
 800d378:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d37a:	2300      	movs	r3, #0
 800d37c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d37e:	2300      	movs	r3, #0
 800d380:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	f107 0210 	add.w	r2, r7, #16
 800d38a:	4611      	mov	r1, r2
 800d38c:	4618      	mov	r0, r3
 800d38e:	f004 fe0f 	bl	8011fb0 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	68da      	ldr	r2, [r3, #12]
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d3a0:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	68ba      	ldr	r2, [r7, #8]
 800d3a8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	2201      	movs	r2, #1
 800d3b0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	2b01      	cmp	r3, #1
 800d3b6:	d90a      	bls.n	800d3ce <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	22a0      	movs	r2, #160	; 0xa0
 800d3bc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f004 feab 	bl	8012120 <SDMMC_CmdWriteMultiBlock>
 800d3ca:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d3cc:	e009      	b.n	800d3e2 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	2290      	movs	r2, #144	; 0x90
 800d3d2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f004 fe7d 	bl	80120da <SDMMC_CmdWriteSingleBlock>
 800d3e0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d012      	beq.n	800d40e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	4a0f      	ldr	r2, [pc, #60]	; (800d42c <HAL_SD_WriteBlocks_DMA+0x14c>)
 800d3ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f6:	431a      	orrs	r2, r3
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	2201      	movs	r2, #1
 800d400:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	2200      	movs	r2, #0
 800d408:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d40a:	2301      	movs	r3, #1
 800d40c:	e00a      	b.n	800d424 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800d41c:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d41e:	2300      	movs	r3, #0
 800d420:	e000      	b.n	800d424 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d422:	2302      	movs	r3, #2
  }
}
 800d424:	4618      	mov	r0, r3
 800d426:	3730      	adds	r7, #48	; 0x30
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}
 800d42c:	1fe00fff 	.word	0x1fe00fff

0800d430 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b084      	sub	sp, #16
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d43c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d444:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d008      	beq.n	800d45e <HAL_SD_IRQHandler+0x2e>
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	f003 0308 	and.w	r3, r3, #8
 800d452:	2b00      	cmp	r3, #0
 800d454:	d003      	beq.n	800d45e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d456:	6878      	ldr	r0, [r7, #4]
 800d458:	f001 f926 	bl	800e6a8 <SD_Read_IT>
 800d45c:	e19a      	b.n	800d794 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d468:	2b00      	cmp	r3, #0
 800d46a:	f000 80ac 	beq.w	800d5c6 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d476:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681a      	ldr	r2, [r3, #0]
 800d482:	4b59      	ldr	r3, [pc, #356]	; (800d5e8 <HAL_SD_IRQHandler+0x1b8>)
 800d484:	400b      	ands	r3, r1
 800d486:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d496:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	68da      	ldr	r2, [r3, #12]
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d4a6:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	f003 0308 	and.w	r3, r3, #8
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d038      	beq.n	800d524 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	f003 0302 	and.w	r3, r3, #2
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d104      	bne.n	800d4c6 <HAL_SD_IRQHandler+0x96>
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	f003 0320 	and.w	r3, r3, #32
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d011      	beq.n	800d4ea <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f004 fe4c 	bl	8012168 <SDMMC_CmdStopTransfer>
 800d4d0:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d4d2:	68bb      	ldr	r3, [r7, #8]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d008      	beq.n	800d4ea <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	431a      	orrs	r2, r3
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	f000 f95b 	bl	800d7a0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	4a3f      	ldr	r2, [pc, #252]	; (800d5ec <HAL_SD_IRQHandler+0x1bc>)
 800d4f0:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2201      	movs	r2, #1
 800d4f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	f003 0301 	and.w	r3, r3, #1
 800d506:	2b00      	cmp	r3, #0
 800d508:	d104      	bne.n	800d514 <HAL_SD_IRQHandler+0xe4>
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	f003 0302 	and.w	r3, r3, #2
 800d510:	2b00      	cmp	r3, #0
 800d512:	d003      	beq.n	800d51c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f006 fe4d 	bl	80141b4 <HAL_SD_RxCpltCallback>
 800d51a:	e13b      	b.n	800d794 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f006 fe3f 	bl	80141a0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d522:	e137      	b.n	800d794 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	f000 8132 	beq.w	800d794 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	2200      	movs	r2, #0
 800d536:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	2200      	movs	r2, #0
 800d53e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	2200      	movs	r2, #0
 800d546:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	f003 0302 	and.w	r3, r3, #2
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d104      	bne.n	800d55c <HAL_SD_IRQHandler+0x12c>
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	f003 0320 	and.w	r3, r3, #32
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d011      	beq.n	800d580 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	4618      	mov	r0, r3
 800d562:	f004 fe01 	bl	8012168 <SDMMC_CmdStopTransfer>
 800d566:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d008      	beq.n	800d580 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	431a      	orrs	r2, r3
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800d57a:	6878      	ldr	r0, [r7, #4]
 800d57c:	f000 f910 	bl	800d7a0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2201      	movs	r2, #1
 800d584:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	2200      	movs	r2, #0
 800d58c:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	f003 0310 	and.w	r3, r3, #16
 800d594:	2b00      	cmp	r3, #0
 800d596:	d104      	bne.n	800d5a2 <HAL_SD_IRQHandler+0x172>
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	f003 0320 	and.w	r3, r3, #32
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d002      	beq.n	800d5a8 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800d5a2:	6878      	ldr	r0, [r7, #4]
 800d5a4:	f006 fdfc 	bl	80141a0 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	f003 0301 	and.w	r3, r3, #1
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d105      	bne.n	800d5be <HAL_SD_IRQHandler+0x18e>
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	f003 0302 	and.w	r3, r3, #2
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	f000 80eb 	beq.w	800d794 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800d5be:	6878      	ldr	r0, [r7, #4]
 800d5c0:	f006 fdf8 	bl	80141b4 <HAL_SD_RxCpltCallback>
}
 800d5c4:	e0e6      	b.n	800d794 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d00d      	beq.n	800d5f0 <HAL_SD_IRQHandler+0x1c0>
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	f003 0308 	and.w	r3, r3, #8
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d008      	beq.n	800d5f0 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	f001 f8a8 	bl	800e734 <SD_Write_IT>
 800d5e4:	e0d6      	b.n	800d794 <HAL_SD_IRQHandler+0x364>
 800d5e6:	bf00      	nop
 800d5e8:	ffff3ec5 	.word	0xffff3ec5
 800d5ec:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5f6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	f000 809d 	beq.w	800d73a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d606:	f003 0302 	and.w	r3, r3, #2
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d005      	beq.n	800d61a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d612:	f043 0202 	orr.w	r2, r3, #2
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d620:	f003 0308 	and.w	r3, r3, #8
 800d624:	2b00      	cmp	r3, #0
 800d626:	d005      	beq.n	800d634 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d62c:	f043 0208 	orr.w	r2, r3, #8
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d63a:	f003 0320 	and.w	r3, r3, #32
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d005      	beq.n	800d64e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d646:	f043 0220 	orr.w	r2, r3, #32
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d654:	f003 0310 	and.w	r3, r3, #16
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d005      	beq.n	800d668 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d660:	f043 0210 	orr.w	r2, r3, #16
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	4a4b      	ldr	r2, [pc, #300]	; (800d79c <HAL_SD_IRQHandler+0x36c>)
 800d66e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d67e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	68da      	ldr	r2, [r3, #12]
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d68e:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d69e:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	68da      	ldr	r2, [r3, #12]
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d6ae:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	f004 fd57 	bl	8012168 <SDMMC_CmdStopTransfer>
 800d6ba:	4602      	mov	r2, r0
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6c0:	431a      	orrs	r2, r3
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	68da      	ldr	r2, [r3, #12]
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d6d4:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d6de:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	f003 0308 	and.w	r3, r3, #8
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d00a      	beq.n	800d700 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2201      	movs	r2, #1
 800d6ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800d6f8:	6878      	ldr	r0, [r7, #4]
 800d6fa:	f000 f851 	bl	800d7a0 <HAL_SD_ErrorCallback>
}
 800d6fe:	e049      	b.n	800d794 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d706:	2b00      	cmp	r3, #0
 800d708:	d044      	beq.n	800d794 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d040      	beq.n	800d794 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d720:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	2200      	movs	r2, #0
 800d728:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2201      	movs	r2, #1
 800d72e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800d732:	6878      	ldr	r0, [r7, #4]
 800d734:	f000 f834 	bl	800d7a0 <HAL_SD_ErrorCallback>
}
 800d738:	e02c      	b.n	800d794 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d744:	2b00      	cmp	r3, #0
 800d746:	d025      	beq.n	800d794 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d750:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d758:	f003 0304 	and.w	r3, r3, #4
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d10c      	bne.n	800d77a <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	f003 0320 	and.w	r3, r3, #32
 800d766:	2b00      	cmp	r3, #0
 800d768:	d003      	beq.n	800d772 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	f001 f84a 	bl	800e804 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800d770:	e010      	b.n	800d794 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800d772:	6878      	ldr	r0, [r7, #4]
 800d774:	f001 f832 	bl	800e7dc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800d778:	e00c      	b.n	800d794 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	f003 0320 	and.w	r3, r3, #32
 800d780:	2b00      	cmp	r3, #0
 800d782:	d003      	beq.n	800d78c <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	f001 f833 	bl	800e7f0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800d78a:	e003      	b.n	800d794 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f001 f81b 	bl	800e7c8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800d792:	e7ff      	b.n	800d794 <HAL_SD_IRQHandler+0x364>
 800d794:	bf00      	nop
 800d796:	3710      	adds	r7, #16
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}
 800d79c:	18000f3a 	.word	0x18000f3a

0800d7a0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d7a0:	b480      	push	{r7}
 800d7a2:	b083      	sub	sp, #12
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d7a8:	bf00      	nop
 800d7aa:	370c      	adds	r7, #12
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b2:	4770      	bx	lr

0800d7b4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d7b4:	b480      	push	{r7}
 800d7b6:	b083      	sub	sp, #12
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
 800d7bc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7c2:	0f9b      	lsrs	r3, r3, #30
 800d7c4:	b2da      	uxtb	r2, r3
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7ce:	0e9b      	lsrs	r3, r3, #26
 800d7d0:	b2db      	uxtb	r3, r3
 800d7d2:	f003 030f 	and.w	r3, r3, #15
 800d7d6:	b2da      	uxtb	r2, r3
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7e0:	0e1b      	lsrs	r3, r3, #24
 800d7e2:	b2db      	uxtb	r3, r3
 800d7e4:	f003 0303 	and.w	r3, r3, #3
 800d7e8:	b2da      	uxtb	r2, r3
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7f2:	0c1b      	lsrs	r3, r3, #16
 800d7f4:	b2da      	uxtb	r2, r3
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7fe:	0a1b      	lsrs	r3, r3, #8
 800d800:	b2da      	uxtb	r2, r3
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d80a:	b2da      	uxtb	r2, r3
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d814:	0d1b      	lsrs	r3, r3, #20
 800d816:	b29a      	uxth	r2, r3
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d820:	0c1b      	lsrs	r3, r3, #16
 800d822:	b2db      	uxtb	r3, r3
 800d824:	f003 030f 	and.w	r3, r3, #15
 800d828:	b2da      	uxtb	r2, r3
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d832:	0bdb      	lsrs	r3, r3, #15
 800d834:	b2db      	uxtb	r3, r3
 800d836:	f003 0301 	and.w	r3, r3, #1
 800d83a:	b2da      	uxtb	r2, r3
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d844:	0b9b      	lsrs	r3, r3, #14
 800d846:	b2db      	uxtb	r3, r3
 800d848:	f003 0301 	and.w	r3, r3, #1
 800d84c:	b2da      	uxtb	r2, r3
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d856:	0b5b      	lsrs	r3, r3, #13
 800d858:	b2db      	uxtb	r3, r3
 800d85a:	f003 0301 	and.w	r3, r3, #1
 800d85e:	b2da      	uxtb	r2, r3
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d868:	0b1b      	lsrs	r3, r3, #12
 800d86a:	b2db      	uxtb	r3, r3
 800d86c:	f003 0301 	and.w	r3, r3, #1
 800d870:	b2da      	uxtb	r2, r3
 800d872:	683b      	ldr	r3, [r7, #0]
 800d874:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	2200      	movs	r2, #0
 800d87a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d880:	2b00      	cmp	r3, #0
 800d882:	d163      	bne.n	800d94c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d888:	009a      	lsls	r2, r3, #2
 800d88a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d88e:	4013      	ands	r3, r2
 800d890:	687a      	ldr	r2, [r7, #4]
 800d892:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800d894:	0f92      	lsrs	r2, r2, #30
 800d896:	431a      	orrs	r2, r3
 800d898:	683b      	ldr	r3, [r7, #0]
 800d89a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8a0:	0edb      	lsrs	r3, r3, #27
 800d8a2:	b2db      	uxtb	r3, r3
 800d8a4:	f003 0307 	and.w	r3, r3, #7
 800d8a8:	b2da      	uxtb	r2, r3
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8b2:	0e1b      	lsrs	r3, r3, #24
 800d8b4:	b2db      	uxtb	r3, r3
 800d8b6:	f003 0307 	and.w	r3, r3, #7
 800d8ba:	b2da      	uxtb	r2, r3
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8c4:	0d5b      	lsrs	r3, r3, #21
 800d8c6:	b2db      	uxtb	r3, r3
 800d8c8:	f003 0307 	and.w	r3, r3, #7
 800d8cc:	b2da      	uxtb	r2, r3
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8d6:	0c9b      	lsrs	r3, r3, #18
 800d8d8:	b2db      	uxtb	r3, r3
 800d8da:	f003 0307 	and.w	r3, r3, #7
 800d8de:	b2da      	uxtb	r2, r3
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8e8:	0bdb      	lsrs	r3, r3, #15
 800d8ea:	b2db      	uxtb	r3, r3
 800d8ec:	f003 0307 	and.w	r3, r3, #7
 800d8f0:	b2da      	uxtb	r2, r3
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	691b      	ldr	r3, [r3, #16]
 800d8fa:	1c5a      	adds	r2, r3, #1
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d900:	683b      	ldr	r3, [r7, #0]
 800d902:	7e1b      	ldrb	r3, [r3, #24]
 800d904:	b2db      	uxtb	r3, r3
 800d906:	f003 0307 	and.w	r3, r3, #7
 800d90a:	3302      	adds	r3, #2
 800d90c:	2201      	movs	r2, #1
 800d90e:	fa02 f303 	lsl.w	r3, r2, r3
 800d912:	687a      	ldr	r2, [r7, #4]
 800d914:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d916:	fb03 f202 	mul.w	r2, r3, r2
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	7a1b      	ldrb	r3, [r3, #8]
 800d922:	b2db      	uxtb	r3, r3
 800d924:	f003 030f 	and.w	r3, r3, #15
 800d928:	2201      	movs	r2, #1
 800d92a:	409a      	lsls	r2, r3
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d934:	687a      	ldr	r2, [r7, #4]
 800d936:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800d938:	0a52      	lsrs	r2, r2, #9
 800d93a:	fb03 f202 	mul.w	r2, r3, r2
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d948:	655a      	str	r2, [r3, #84]	; 0x54
 800d94a:	e031      	b.n	800d9b0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d950:	2b01      	cmp	r3, #1
 800d952:	d11d      	bne.n	800d990 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d958:	041b      	lsls	r3, r3, #16
 800d95a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d962:	0c1b      	lsrs	r3, r3, #16
 800d964:	431a      	orrs	r2, r3
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	691b      	ldr	r3, [r3, #16]
 800d96e:	3301      	adds	r3, #1
 800d970:	029a      	lsls	r2, r3, #10
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d984:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	655a      	str	r2, [r3, #84]	; 0x54
 800d98e:	e00f      	b.n	800d9b0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	4a58      	ldr	r2, [pc, #352]	; (800daf8 <HAL_SD_GetCardCSD+0x344>)
 800d996:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d99c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2201      	movs	r2, #1
 800d9a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d9ac:	2301      	movs	r3, #1
 800d9ae:	e09d      	b.n	800daec <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9b4:	0b9b      	lsrs	r3, r3, #14
 800d9b6:	b2db      	uxtb	r3, r3
 800d9b8:	f003 0301 	and.w	r3, r3, #1
 800d9bc:	b2da      	uxtb	r2, r3
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9c6:	09db      	lsrs	r3, r3, #7
 800d9c8:	b2db      	uxtb	r3, r3
 800d9ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9ce:	b2da      	uxtb	r2, r3
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9d8:	b2db      	uxtb	r3, r3
 800d9da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9de:	b2da      	uxtb	r2, r3
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9e8:	0fdb      	lsrs	r3, r3, #31
 800d9ea:	b2da      	uxtb	r2, r3
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9f4:	0f5b      	lsrs	r3, r3, #29
 800d9f6:	b2db      	uxtb	r3, r3
 800d9f8:	f003 0303 	and.w	r3, r3, #3
 800d9fc:	b2da      	uxtb	r2, r3
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da06:	0e9b      	lsrs	r3, r3, #26
 800da08:	b2db      	uxtb	r3, r3
 800da0a:	f003 0307 	and.w	r3, r3, #7
 800da0e:	b2da      	uxtb	r2, r3
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da18:	0d9b      	lsrs	r3, r3, #22
 800da1a:	b2db      	uxtb	r3, r3
 800da1c:	f003 030f 	and.w	r3, r3, #15
 800da20:	b2da      	uxtb	r2, r3
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da2a:	0d5b      	lsrs	r3, r3, #21
 800da2c:	b2db      	uxtb	r3, r3
 800da2e:	f003 0301 	and.w	r3, r3, #1
 800da32:	b2da      	uxtb	r2, r3
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	2200      	movs	r2, #0
 800da3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da46:	0c1b      	lsrs	r3, r3, #16
 800da48:	b2db      	uxtb	r3, r3
 800da4a:	f003 0301 	and.w	r3, r3, #1
 800da4e:	b2da      	uxtb	r2, r3
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da5a:	0bdb      	lsrs	r3, r3, #15
 800da5c:	b2db      	uxtb	r3, r3
 800da5e:	f003 0301 	and.w	r3, r3, #1
 800da62:	b2da      	uxtb	r2, r3
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da6e:	0b9b      	lsrs	r3, r3, #14
 800da70:	b2db      	uxtb	r3, r3
 800da72:	f003 0301 	and.w	r3, r3, #1
 800da76:	b2da      	uxtb	r2, r3
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da82:	0b5b      	lsrs	r3, r3, #13
 800da84:	b2db      	uxtb	r3, r3
 800da86:	f003 0301 	and.w	r3, r3, #1
 800da8a:	b2da      	uxtb	r2, r3
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da96:	0b1b      	lsrs	r3, r3, #12
 800da98:	b2db      	uxtb	r3, r3
 800da9a:	f003 0301 	and.w	r3, r3, #1
 800da9e:	b2da      	uxtb	r2, r3
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800daaa:	0a9b      	lsrs	r3, r3, #10
 800daac:	b2db      	uxtb	r3, r3
 800daae:	f003 0303 	and.w	r3, r3, #3
 800dab2:	b2da      	uxtb	r2, r3
 800dab4:	683b      	ldr	r3, [r7, #0]
 800dab6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dabe:	0a1b      	lsrs	r3, r3, #8
 800dac0:	b2db      	uxtb	r3, r3
 800dac2:	f003 0303 	and.w	r3, r3, #3
 800dac6:	b2da      	uxtb	r2, r3
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dad2:	085b      	lsrs	r3, r3, #1
 800dad4:	b2db      	uxtb	r3, r3
 800dad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dada:	b2da      	uxtb	r2, r3
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	2201      	movs	r2, #1
 800dae6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800daea:	2300      	movs	r3, #0
}
 800daec:	4618      	mov	r0, r3
 800daee:	370c      	adds	r7, #12
 800daf0:	46bd      	mov	sp, r7
 800daf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf6:	4770      	bx	lr
 800daf8:	1fe00fff 	.word	0x1fe00fff

0800dafc <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b094      	sub	sp, #80	; 0x50
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
 800db04:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800db06:	2300      	movs	r3, #0
 800db08:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800db12:	b2db      	uxtb	r3, r3
 800db14:	2b03      	cmp	r3, #3
 800db16:	d101      	bne.n	800db1c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800db18:	2301      	movs	r3, #1
 800db1a:	e0a7      	b.n	800dc6c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800db1c:	f107 0308 	add.w	r3, r7, #8
 800db20:	4619      	mov	r1, r3
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	f000 fb62 	bl	800e1ec <SD_SendSDStatus>
 800db28:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800db2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d011      	beq.n	800db54 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	4a4f      	ldr	r2, [pc, #316]	; (800dc74 <HAL_SD_GetCardStatus+0x178>)
 800db36:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db3e:	431a      	orrs	r2, r3
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2201      	movs	r2, #1
 800db48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800db4c:	2301      	movs	r3, #1
 800db4e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800db52:	e070      	b.n	800dc36 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	099b      	lsrs	r3, r3, #6
 800db58:	b2db      	uxtb	r3, r3
 800db5a:	f003 0303 	and.w	r3, r3, #3
 800db5e:	b2da      	uxtb	r2, r3
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800db64:	68bb      	ldr	r3, [r7, #8]
 800db66:	095b      	lsrs	r3, r3, #5
 800db68:	b2db      	uxtb	r3, r3
 800db6a:	f003 0301 	and.w	r3, r3, #1
 800db6e:	b2da      	uxtb	r2, r3
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	0a1b      	lsrs	r3, r3, #8
 800db78:	b29b      	uxth	r3, r3
 800db7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800db7e:	b29a      	uxth	r2, r3
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	0e1b      	lsrs	r3, r3, #24
 800db84:	b29b      	uxth	r3, r3
 800db86:	4313      	orrs	r3, r2
 800db88:	b29a      	uxth	r2, r3
 800db8a:	683b      	ldr	r3, [r7, #0]
 800db8c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	061a      	lsls	r2, r3, #24
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	021b      	lsls	r3, r3, #8
 800db96:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800db9a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	0a1b      	lsrs	r3, r3, #8
 800dba0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dba4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	0e1b      	lsrs	r3, r3, #24
 800dbaa:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800dbb0:	693b      	ldr	r3, [r7, #16]
 800dbb2:	b2da      	uxtb	r2, r3
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	0a1b      	lsrs	r3, r3, #8
 800dbbc:	b2da      	uxtb	r2, r3
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800dbc2:	693b      	ldr	r3, [r7, #16]
 800dbc4:	0d1b      	lsrs	r3, r3, #20
 800dbc6:	b2db      	uxtb	r3, r3
 800dbc8:	f003 030f 	and.w	r3, r3, #15
 800dbcc:	b2da      	uxtb	r2, r3
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800dbd2:	693b      	ldr	r3, [r7, #16]
 800dbd4:	0c1b      	lsrs	r3, r3, #16
 800dbd6:	b29b      	uxth	r3, r3
 800dbd8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dbdc:	b29a      	uxth	r2, r3
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	b29b      	uxth	r3, r3
 800dbe2:	b2db      	uxtb	r3, r3
 800dbe4:	b29b      	uxth	r3, r3
 800dbe6:	4313      	orrs	r3, r2
 800dbe8:	b29a      	uxth	r2, r3
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	0a9b      	lsrs	r3, r3, #10
 800dbf2:	b2db      	uxtb	r3, r3
 800dbf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dbf8:	b2da      	uxtb	r2, r3
 800dbfa:	683b      	ldr	r3, [r7, #0]
 800dbfc:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800dbfe:	697b      	ldr	r3, [r7, #20]
 800dc00:	0a1b      	lsrs	r3, r3, #8
 800dc02:	b2db      	uxtb	r3, r3
 800dc04:	f003 0303 	and.w	r3, r3, #3
 800dc08:	b2da      	uxtb	r2, r3
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800dc0e:	697b      	ldr	r3, [r7, #20]
 800dc10:	091b      	lsrs	r3, r3, #4
 800dc12:	b2db      	uxtb	r3, r3
 800dc14:	f003 030f 	and.w	r3, r3, #15
 800dc18:	b2da      	uxtb	r2, r3
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800dc1e:	697b      	ldr	r3, [r7, #20]
 800dc20:	b2db      	uxtb	r3, r3
 800dc22:	f003 030f 	and.w	r3, r3, #15
 800dc26:	b2da      	uxtb	r2, r3
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800dc2c:	69bb      	ldr	r3, [r7, #24]
 800dc2e:	0e1b      	lsrs	r3, r3, #24
 800dc30:	b2da      	uxtb	r2, r3
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f004 f9e2 	bl	8012008 <SDMMC_CmdBlockLength>
 800dc44:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800dc46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d00d      	beq.n	800dc68 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	4a08      	ldr	r2, [pc, #32]	; (800dc74 <HAL_SD_GetCardStatus+0x178>)
 800dc52:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dc58:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	2201      	movs	r2, #1
 800dc5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800dc62:	2301      	movs	r3, #1
 800dc64:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800dc68:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	3750      	adds	r7, #80	; 0x50
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}
 800dc74:	1fe00fff 	.word	0x1fe00fff

0800dc78 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800dc78:	b480      	push	{r7}
 800dc7a:	b083      	sub	sp, #12
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
 800dc80:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800dcc2:	2300      	movs	r3, #0
}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	370c      	adds	r7, #12
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcce:	4770      	bx	lr

0800dcd0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800dcd0:	b590      	push	{r4, r7, lr}
 800dcd2:	b08d      	sub	sp, #52	; 0x34
 800dcd4:	af02      	add	r7, sp, #8
 800dcd6:	6078      	str	r0, [r7, #4]
 800dcd8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800dcda:	2300      	movs	r3, #0
 800dcdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	2203      	movs	r2, #3
 800dce4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcec:	2b03      	cmp	r3, #3
 800dcee:	d02e      	beq.n	800dd4e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dcf6:	d106      	bne.n	800dd06 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcfc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	635a      	str	r2, [r3, #52]	; 0x34
 800dd04:	e029      	b.n	800dd5a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dd0c:	d10a      	bne.n	800dd24 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800dd0e:	6878      	ldr	r0, [r7, #4]
 800dd10:	f000 fb64 	bl	800e3dc <SD_WideBus_Enable>
 800dd14:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd1a:	6a3b      	ldr	r3, [r7, #32]
 800dd1c:	431a      	orrs	r2, r3
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	635a      	str	r2, [r3, #52]	; 0x34
 800dd22:	e01a      	b.n	800dd5a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d10a      	bne.n	800dd40 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800dd2a:	6878      	ldr	r0, [r7, #4]
 800dd2c:	f000 fba1 	bl	800e472 <SD_WideBus_Disable>
 800dd30:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd36:	6a3b      	ldr	r3, [r7, #32]
 800dd38:	431a      	orrs	r2, r3
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	635a      	str	r2, [r3, #52]	; 0x34
 800dd3e:	e00c      	b.n	800dd5a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd44:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	635a      	str	r2, [r3, #52]	; 0x34
 800dd4c:	e005      	b.n	800dd5a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd52:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d007      	beq.n	800dd72 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	4a5f      	ldr	r2, [pc, #380]	; (800dee4 <HAL_SD_ConfigWideBusOperation+0x214>)
 800dd68:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800dd6a:	2301      	movs	r3, #1
 800dd6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dd70:	e096      	b.n	800dea0 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800dd72:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800dd76:	f04f 0100 	mov.w	r1, #0
 800dd7a:	f7fd fea3 	bl	800bac4 <HAL_RCCEx_GetPeriphCLKFreq>
 800dd7e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800dd80:	69fb      	ldr	r3, [r7, #28]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	f000 8083 	beq.w	800de8e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	685b      	ldr	r3, [r3, #4]
 800dd8c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	689b      	ldr	r3, [r3, #8]
 800dd92:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800dd94:	683b      	ldr	r3, [r7, #0]
 800dd96:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	691b      	ldr	r3, [r3, #16]
 800dd9c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	695a      	ldr	r2, [r3, #20]
 800dda2:	69fb      	ldr	r3, [r7, #28]
 800dda4:	4950      	ldr	r1, [pc, #320]	; (800dee8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800dda6:	fba1 1303 	umull	r1, r3, r1, r3
 800ddaa:	0e1b      	lsrs	r3, r3, #24
 800ddac:	429a      	cmp	r2, r3
 800ddae:	d303      	bcc.n	800ddb8 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	695b      	ldr	r3, [r3, #20]
 800ddb4:	61bb      	str	r3, [r7, #24]
 800ddb6:	e05a      	b.n	800de6e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ddbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ddc0:	d103      	bne.n	800ddca <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	695b      	ldr	r3, [r3, #20]
 800ddc6:	61bb      	str	r3, [r7, #24]
 800ddc8:	e051      	b.n	800de6e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ddce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ddd2:	d126      	bne.n	800de22 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	695b      	ldr	r3, [r3, #20]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d10e      	bne.n	800ddfa <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800dddc:	69fb      	ldr	r3, [r7, #28]
 800ddde:	4a43      	ldr	r2, [pc, #268]	; (800deec <HAL_SD_ConfigWideBusOperation+0x21c>)
 800dde0:	4293      	cmp	r3, r2
 800dde2:	d906      	bls.n	800ddf2 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800dde4:	69fb      	ldr	r3, [r7, #28]
 800dde6:	4a40      	ldr	r2, [pc, #256]	; (800dee8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800dde8:	fba2 2303 	umull	r2, r3, r2, r3
 800ddec:	0e5b      	lsrs	r3, r3, #25
 800ddee:	61bb      	str	r3, [r7, #24]
 800ddf0:	e03d      	b.n	800de6e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	695b      	ldr	r3, [r3, #20]
 800ddf6:	61bb      	str	r3, [r7, #24]
 800ddf8:	e039      	b.n	800de6e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	695b      	ldr	r3, [r3, #20]
 800ddfe:	005b      	lsls	r3, r3, #1
 800de00:	69fa      	ldr	r2, [r7, #28]
 800de02:	fbb2 f3f3 	udiv	r3, r2, r3
 800de06:	4a39      	ldr	r2, [pc, #228]	; (800deec <HAL_SD_ConfigWideBusOperation+0x21c>)
 800de08:	4293      	cmp	r3, r2
 800de0a:	d906      	bls.n	800de1a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800de0c:	69fb      	ldr	r3, [r7, #28]
 800de0e:	4a36      	ldr	r2, [pc, #216]	; (800dee8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800de10:	fba2 2303 	umull	r2, r3, r2, r3
 800de14:	0e5b      	lsrs	r3, r3, #25
 800de16:	61bb      	str	r3, [r7, #24]
 800de18:	e029      	b.n	800de6e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	695b      	ldr	r3, [r3, #20]
 800de1e:	61bb      	str	r3, [r7, #24]
 800de20:	e025      	b.n	800de6e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	695b      	ldr	r3, [r3, #20]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d10e      	bne.n	800de48 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800de2a:	69fb      	ldr	r3, [r7, #28]
 800de2c:	4a30      	ldr	r2, [pc, #192]	; (800def0 <HAL_SD_ConfigWideBusOperation+0x220>)
 800de2e:	4293      	cmp	r3, r2
 800de30:	d906      	bls.n	800de40 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800de32:	69fb      	ldr	r3, [r7, #28]
 800de34:	4a2c      	ldr	r2, [pc, #176]	; (800dee8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800de36:	fba2 2303 	umull	r2, r3, r2, r3
 800de3a:	0e1b      	lsrs	r3, r3, #24
 800de3c:	61bb      	str	r3, [r7, #24]
 800de3e:	e016      	b.n	800de6e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	695b      	ldr	r3, [r3, #20]
 800de44:	61bb      	str	r3, [r7, #24]
 800de46:	e012      	b.n	800de6e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	695b      	ldr	r3, [r3, #20]
 800de4c:	005b      	lsls	r3, r3, #1
 800de4e:	69fa      	ldr	r2, [r7, #28]
 800de50:	fbb2 f3f3 	udiv	r3, r2, r3
 800de54:	4a26      	ldr	r2, [pc, #152]	; (800def0 <HAL_SD_ConfigWideBusOperation+0x220>)
 800de56:	4293      	cmp	r3, r2
 800de58:	d906      	bls.n	800de68 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800de5a:	69fb      	ldr	r3, [r7, #28]
 800de5c:	4a22      	ldr	r2, [pc, #136]	; (800dee8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800de5e:	fba2 2303 	umull	r2, r3, r2, r3
 800de62:	0e1b      	lsrs	r3, r3, #24
 800de64:	61bb      	str	r3, [r7, #24]
 800de66:	e002      	b.n	800de6e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	695b      	ldr	r3, [r3, #20]
 800de6c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681c      	ldr	r4, [r3, #0]
 800de72:	466a      	mov	r2, sp
 800de74:	f107 0314 	add.w	r3, r7, #20
 800de78:	e893 0003 	ldmia.w	r3, {r0, r1}
 800de7c:	e882 0003 	stmia.w	r2, {r0, r1}
 800de80:	f107 0308 	add.w	r3, r7, #8
 800de84:	cb0e      	ldmia	r3, {r1, r2, r3}
 800de86:	4620      	mov	r0, r4
 800de88:	f003 ffe0 	bl	8011e4c <SDMMC_Init>
 800de8c:	e008      	b.n	800dea0 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de92:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800de9a:	2301      	movs	r3, #1
 800de9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dea8:	4618      	mov	r0, r3
 800deaa:	f004 f8ad 	bl	8012008 <SDMMC_CmdBlockLength>
 800deae:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800deb0:	6a3b      	ldr	r3, [r7, #32]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d00c      	beq.n	800ded0 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	4a0a      	ldr	r2, [pc, #40]	; (800dee4 <HAL_SD_ConfigWideBusOperation+0x214>)
 800debc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dec2:	6a3b      	ldr	r3, [r7, #32]
 800dec4:	431a      	orrs	r2, r3
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800deca:	2301      	movs	r3, #1
 800decc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	2201      	movs	r2, #1
 800ded4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800ded8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800dedc:	4618      	mov	r0, r3
 800dede:	372c      	adds	r7, #44	; 0x2c
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd90      	pop	{r4, r7, pc}
 800dee4:	1fe00fff 	.word	0x1fe00fff
 800dee8:	55e63b89 	.word	0x55e63b89
 800deec:	02faf080 	.word	0x02faf080
 800def0:	017d7840 	.word	0x017d7840

0800def4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b086      	sub	sp, #24
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800defc:	2300      	movs	r3, #0
 800defe:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800df00:	f107 030c 	add.w	r3, r7, #12
 800df04:	4619      	mov	r1, r3
 800df06:	6878      	ldr	r0, [r7, #4]
 800df08:	f000 fa40 	bl	800e38c <SD_SendStatus>
 800df0c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800df0e:	697b      	ldr	r3, [r7, #20]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d005      	beq.n	800df20 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df18:	697b      	ldr	r3, [r7, #20]
 800df1a:	431a      	orrs	r2, r3
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	0a5b      	lsrs	r3, r3, #9
 800df24:	f003 030f 	and.w	r3, r3, #15
 800df28:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800df2a:	693b      	ldr	r3, [r7, #16]
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	3718      	adds	r7, #24
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}

0800df34 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b090      	sub	sp, #64	; 0x40
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800df3c:	2300      	movs	r3, #0
 800df3e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800df40:	f7f5 fd34 	bl	80039ac <HAL_GetTick>
 800df44:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	4618      	mov	r0, r3
 800df4c:	f003 ffd7 	bl	8011efe <SDMMC_GetPowerState>
 800df50:	4603      	mov	r3, r0
 800df52:	2b00      	cmp	r3, #0
 800df54:	d102      	bne.n	800df5c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800df56:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800df5a:	e0b5      	b.n	800e0c8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df60:	2b03      	cmp	r3, #3
 800df62:	d02e      	beq.n	800dfc2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	4618      	mov	r0, r3
 800df6a:	f004 fa22 	bl	80123b2 <SDMMC_CmdSendCID>
 800df6e:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800df70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df72:	2b00      	cmp	r3, #0
 800df74:	d001      	beq.n	800df7a <SD_InitCard+0x46>
    {
      return errorstate;
 800df76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df78:	e0a6      	b.n	800e0c8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	2100      	movs	r1, #0
 800df80:	4618      	mov	r0, r3
 800df82:	f004 f802 	bl	8011f8a <SDMMC_GetResponse>
 800df86:	4602      	mov	r2, r0
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	2104      	movs	r1, #4
 800df92:	4618      	mov	r0, r3
 800df94:	f003 fff9 	bl	8011f8a <SDMMC_GetResponse>
 800df98:	4602      	mov	r2, r0
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	2108      	movs	r1, #8
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	f003 fff0 	bl	8011f8a <SDMMC_GetResponse>
 800dfaa:	4602      	mov	r2, r0
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	210c      	movs	r1, #12
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	f003 ffe7 	bl	8011f8a <SDMMC_GetResponse>
 800dfbc:	4602      	mov	r2, r0
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfc6:	2b03      	cmp	r3, #3
 800dfc8:	d01d      	beq.n	800e006 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800dfca:	e019      	b.n	800e000 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	f107 020a 	add.w	r2, r7, #10
 800dfd4:	4611      	mov	r1, r2
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	f004 fa2a 	bl	8012430 <SDMMC_CmdSetRelAdd>
 800dfdc:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800dfde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d001      	beq.n	800dfe8 <SD_InitCard+0xb4>
      {
        return errorstate;
 800dfe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfe6:	e06f      	b.n	800e0c8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800dfe8:	f7f5 fce0 	bl	80039ac <HAL_GetTick>
 800dfec:	4602      	mov	r2, r0
 800dfee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dff0:	1ad3      	subs	r3, r2, r3
 800dff2:	f241 3287 	movw	r2, #4999	; 0x1387
 800dff6:	4293      	cmp	r3, r2
 800dff8:	d902      	bls.n	800e000 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800dffa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dffe:	e063      	b.n	800e0c8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800e000:	897b      	ldrh	r3, [r7, #10]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d0e2      	beq.n	800dfcc <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e00a:	2b03      	cmp	r3, #3
 800e00c:	d036      	beq.n	800e07c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e00e:	897b      	ldrh	r3, [r7, #10]
 800e010:	461a      	mov	r2, r3
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681a      	ldr	r2, [r3, #0]
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e01e:	041b      	lsls	r3, r3, #16
 800e020:	4619      	mov	r1, r3
 800e022:	4610      	mov	r0, r2
 800e024:	f004 f9e4 	bl	80123f0 <SDMMC_CmdSendCSD>
 800e028:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d001      	beq.n	800e034 <SD_InitCard+0x100>
    {
      return errorstate;
 800e030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e032:	e049      	b.n	800e0c8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	2100      	movs	r1, #0
 800e03a:	4618      	mov	r0, r3
 800e03c:	f003 ffa5 	bl	8011f8a <SDMMC_GetResponse>
 800e040:	4602      	mov	r2, r0
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	2104      	movs	r1, #4
 800e04c:	4618      	mov	r0, r3
 800e04e:	f003 ff9c 	bl	8011f8a <SDMMC_GetResponse>
 800e052:	4602      	mov	r2, r0
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	2108      	movs	r1, #8
 800e05e:	4618      	mov	r0, r3
 800e060:	f003 ff93 	bl	8011f8a <SDMMC_GetResponse>
 800e064:	4602      	mov	r2, r0
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	210c      	movs	r1, #12
 800e070:	4618      	mov	r0, r3
 800e072:	f003 ff8a 	bl	8011f8a <SDMMC_GetResponse>
 800e076:	4602      	mov	r2, r0
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	2104      	movs	r1, #4
 800e082:	4618      	mov	r0, r3
 800e084:	f003 ff81 	bl	8011f8a <SDMMC_GetResponse>
 800e088:	4603      	mov	r3, r0
 800e08a:	0d1a      	lsrs	r2, r3, #20
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e090:	f107 030c 	add.w	r3, r7, #12
 800e094:	4619      	mov	r1, r3
 800e096:	6878      	ldr	r0, [r7, #4]
 800e098:	f7ff fb8c 	bl	800d7b4 <HAL_SD_GetCardCSD>
 800e09c:	4603      	mov	r3, r0
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d002      	beq.n	800e0a8 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e0a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e0a6:	e00f      	b.n	800e0c8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681a      	ldr	r2, [r3, #0]
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0b0:	041b      	lsls	r3, r3, #16
 800e0b2:	4619      	mov	r1, r3
 800e0b4:	4610      	mov	r0, r2
 800e0b6:	f004 f893 	bl	80121e0 <SDMMC_CmdSelDesel>
 800e0ba:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800e0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d001      	beq.n	800e0c6 <SD_InitCard+0x192>
  {
    return errorstate;
 800e0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0c4:	e000      	b.n	800e0c8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e0c6:	2300      	movs	r3, #0
}
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	3740      	adds	r7, #64	; 0x40
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	bd80      	pop	{r7, pc}

0800e0d0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b086      	sub	sp, #24
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e0d8:	2300      	movs	r3, #0
 800e0da:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800e0dc:	2300      	movs	r3, #0
 800e0de:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	f004 f89c 	bl	8012226 <SDMMC_CmdGoIdleState>
 800e0ee:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d001      	beq.n	800e0fa <SD_PowerON+0x2a>
  {
    return errorstate;
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	e072      	b.n	800e1e0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	4618      	mov	r0, r3
 800e100:	f004 f8af 	bl	8012262 <SDMMC_CmdOperCond>
 800e104:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e10c:	d10d      	bne.n	800e12a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2200      	movs	r2, #0
 800e112:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	4618      	mov	r0, r3
 800e11a:	f004 f884 	bl	8012226 <SDMMC_CmdGoIdleState>
 800e11e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d004      	beq.n	800e130 <SD_PowerON+0x60>
    {
      return errorstate;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	e05a      	b.n	800e1e0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	2201      	movs	r2, #1
 800e12e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e134:	2b01      	cmp	r3, #1
 800e136:	d137      	bne.n	800e1a8 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	2100      	movs	r1, #0
 800e13e:	4618      	mov	r0, r3
 800e140:	f004 f8af 	bl	80122a2 <SDMMC_CmdAppCommand>
 800e144:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d02d      	beq.n	800e1a8 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e14c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e150:	e046      	b.n	800e1e0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	2100      	movs	r1, #0
 800e158:	4618      	mov	r0, r3
 800e15a:	f004 f8a2 	bl	80122a2 <SDMMC_CmdAppCommand>
 800e15e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d001      	beq.n	800e16a <SD_PowerON+0x9a>
    {
      return errorstate;
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	e03a      	b.n	800e1e0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	491e      	ldr	r1, [pc, #120]	; (800e1e8 <SD_PowerON+0x118>)
 800e170:	4618      	mov	r0, r3
 800e172:	f004 f8b9 	bl	80122e8 <SDMMC_CmdAppOperCommand>
 800e176:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d002      	beq.n	800e184 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e17e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e182:	e02d      	b.n	800e1e0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	2100      	movs	r1, #0
 800e18a:	4618      	mov	r0, r3
 800e18c:	f003 fefd 	bl	8011f8a <SDMMC_GetResponse>
 800e190:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e192:	697b      	ldr	r3, [r7, #20]
 800e194:	0fdb      	lsrs	r3, r3, #31
 800e196:	2b01      	cmp	r3, #1
 800e198:	d101      	bne.n	800e19e <SD_PowerON+0xce>
 800e19a:	2301      	movs	r3, #1
 800e19c:	e000      	b.n	800e1a0 <SD_PowerON+0xd0>
 800e19e:	2300      	movs	r3, #0
 800e1a0:	613b      	str	r3, [r7, #16]

    count++;
 800e1a2:	68bb      	ldr	r3, [r7, #8]
 800e1a4:	3301      	adds	r3, #1
 800e1a6:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e1ae:	4293      	cmp	r3, r2
 800e1b0:	d802      	bhi.n	800e1b8 <SD_PowerON+0xe8>
 800e1b2:	693b      	ldr	r3, [r7, #16]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d0cc      	beq.n	800e152 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e1be:	4293      	cmp	r3, r2
 800e1c0:	d902      	bls.n	800e1c8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e1c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e1c6:	e00b      	b.n	800e1e0 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800e1ce:	697b      	ldr	r3, [r7, #20]
 800e1d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d002      	beq.n	800e1de <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2201      	movs	r2, #1
 800e1dc:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e1de:	2300      	movs	r3, #0
}
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	3718      	adds	r7, #24
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}
 800e1e8:	c1100000 	.word	0xc1100000

0800e1ec <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b08c      	sub	sp, #48	; 0x30
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e1f6:	f7f5 fbd9 	bl	80039ac <HAL_GetTick>
 800e1fa:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e1fc:	683b      	ldr	r3, [r7, #0]
 800e1fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	2100      	movs	r1, #0
 800e206:	4618      	mov	r0, r3
 800e208:	f003 febf 	bl	8011f8a <SDMMC_GetResponse>
 800e20c:	4603      	mov	r3, r0
 800e20e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e212:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e216:	d102      	bne.n	800e21e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e218:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e21c:	e0b0      	b.n	800e380 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	2140      	movs	r1, #64	; 0x40
 800e224:	4618      	mov	r0, r3
 800e226:	f003 feef 	bl	8012008 <SDMMC_CmdBlockLength>
 800e22a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e22c:	6a3b      	ldr	r3, [r7, #32]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d005      	beq.n	800e23e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e23a:	6a3b      	ldr	r3, [r7, #32]
 800e23c:	e0a0      	b.n	800e380 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	681a      	ldr	r2, [r3, #0]
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e246:	041b      	lsls	r3, r3, #16
 800e248:	4619      	mov	r1, r3
 800e24a:	4610      	mov	r0, r2
 800e24c:	f004 f829 	bl	80122a2 <SDMMC_CmdAppCommand>
 800e250:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e252:	6a3b      	ldr	r3, [r7, #32]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d005      	beq.n	800e264 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e260:	6a3b      	ldr	r3, [r7, #32]
 800e262:	e08d      	b.n	800e380 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e264:	f04f 33ff 	mov.w	r3, #4294967295
 800e268:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e26a:	2340      	movs	r3, #64	; 0x40
 800e26c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e26e:	2360      	movs	r3, #96	; 0x60
 800e270:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e272:	2302      	movs	r3, #2
 800e274:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e276:	2300      	movs	r3, #0
 800e278:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e27a:	2301      	movs	r3, #1
 800e27c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	f107 0208 	add.w	r2, r7, #8
 800e286:	4611      	mov	r1, r2
 800e288:	4618      	mov	r0, r3
 800e28a:	f003 fe91 	bl	8011fb0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	4618      	mov	r0, r3
 800e294:	f004 f911 	bl	80124ba <SDMMC_CmdStatusRegister>
 800e298:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e29a:	6a3b      	ldr	r3, [r7, #32]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d02b      	beq.n	800e2f8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e2a8:	6a3b      	ldr	r3, [r7, #32]
 800e2aa:	e069      	b.n	800e380 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d013      	beq.n	800e2e2 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e2be:	e00d      	b.n	800e2dc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f003 fdeb 	bl	8011ea0 <SDMMC_ReadFIFO>
 800e2ca:	4602      	mov	r2, r0
 800e2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ce:	601a      	str	r2, [r3, #0]
        pData++;
 800e2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d2:	3304      	adds	r3, #4
 800e2d4:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800e2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2d8:	3301      	adds	r3, #1
 800e2da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2de:	2b07      	cmp	r3, #7
 800e2e0:	d9ee      	bls.n	800e2c0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e2e2:	f7f5 fb63 	bl	80039ac <HAL_GetTick>
 800e2e6:	4602      	mov	r2, r0
 800e2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ea:	1ad3      	subs	r3, r2, r3
 800e2ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2f0:	d102      	bne.n	800e2f8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e2f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e2f6:	e043      	b.n	800e380 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2fe:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e302:	2b00      	cmp	r3, #0
 800e304:	d0d2      	beq.n	800e2ac <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e30c:	f003 0308 	and.w	r3, r3, #8
 800e310:	2b00      	cmp	r3, #0
 800e312:	d001      	beq.n	800e318 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e314:	2308      	movs	r3, #8
 800e316:	e033      	b.n	800e380 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e31e:	f003 0302 	and.w	r3, r3, #2
 800e322:	2b00      	cmp	r3, #0
 800e324:	d001      	beq.n	800e32a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e326:	2302      	movs	r3, #2
 800e328:	e02a      	b.n	800e380 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e330:	f003 0320 	and.w	r3, r3, #32
 800e334:	2b00      	cmp	r3, #0
 800e336:	d017      	beq.n	800e368 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e338:	2320      	movs	r3, #32
 800e33a:	e021      	b.n	800e380 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	4618      	mov	r0, r3
 800e342:	f003 fdad 	bl	8011ea0 <SDMMC_ReadFIFO>
 800e346:	4602      	mov	r2, r0
 800e348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e34a:	601a      	str	r2, [r3, #0]
    pData++;
 800e34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e34e:	3304      	adds	r3, #4
 800e350:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e352:	f7f5 fb2b 	bl	80039ac <HAL_GetTick>
 800e356:	4602      	mov	r2, r0
 800e358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e35a:	1ad3      	subs	r3, r2, r3
 800e35c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e360:	d102      	bne.n	800e368 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e362:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e366:	e00b      	b.n	800e380 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e36e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e372:	2b00      	cmp	r3, #0
 800e374:	d1e2      	bne.n	800e33c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	4a03      	ldr	r2, [pc, #12]	; (800e388 <SD_SendSDStatus+0x19c>)
 800e37c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800e37e:	2300      	movs	r3, #0
}
 800e380:	4618      	mov	r0, r3
 800e382:	3730      	adds	r7, #48	; 0x30
 800e384:	46bd      	mov	sp, r7
 800e386:	bd80      	pop	{r7, pc}
 800e388:	18000f3a 	.word	0x18000f3a

0800e38c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b084      	sub	sp, #16
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
 800e394:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800e396:	683b      	ldr	r3, [r7, #0]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d102      	bne.n	800e3a2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e39c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e3a0:	e018      	b.n	800e3d4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681a      	ldr	r2, [r3, #0]
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3aa:	041b      	lsls	r3, r3, #16
 800e3ac:	4619      	mov	r1, r3
 800e3ae:	4610      	mov	r0, r2
 800e3b0:	f004 f860 	bl	8012474 <SDMMC_CmdSendStatus>
 800e3b4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d001      	beq.n	800e3c0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	e009      	b.n	800e3d4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	2100      	movs	r1, #0
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f003 fddf 	bl	8011f8a <SDMMC_GetResponse>
 800e3cc:	4602      	mov	r2, r0
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e3d2:	2300      	movs	r3, #0
}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3710      	adds	r7, #16
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}

0800e3dc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b086      	sub	sp, #24
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	60fb      	str	r3, [r7, #12]
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	2100      	movs	r1, #0
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	f003 fdc9 	bl	8011f8a <SDMMC_GetResponse>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e3fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e402:	d102      	bne.n	800e40a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e404:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e408:	e02f      	b.n	800e46a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e40a:	f107 030c 	add.w	r3, r7, #12
 800e40e:	4619      	mov	r1, r3
 800e410:	6878      	ldr	r0, [r7, #4]
 800e412:	f000 f879 	bl	800e508 <SD_FindSCR>
 800e416:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e418:	697b      	ldr	r3, [r7, #20]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d001      	beq.n	800e422 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e41e:	697b      	ldr	r3, [r7, #20]
 800e420:	e023      	b.n	800e46a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e422:	693b      	ldr	r3, [r7, #16]
 800e424:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d01c      	beq.n	800e466 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681a      	ldr	r2, [r3, #0]
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e434:	041b      	lsls	r3, r3, #16
 800e436:	4619      	mov	r1, r3
 800e438:	4610      	mov	r0, r2
 800e43a:	f003 ff32 	bl	80122a2 <SDMMC_CmdAppCommand>
 800e43e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e440:	697b      	ldr	r3, [r7, #20]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d001      	beq.n	800e44a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e446:	697b      	ldr	r3, [r7, #20]
 800e448:	e00f      	b.n	800e46a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	2102      	movs	r1, #2
 800e450:	4618      	mov	r0, r3
 800e452:	f003 ff69 	bl	8012328 <SDMMC_CmdBusWidth>
 800e456:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e458:	697b      	ldr	r3, [r7, #20]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d001      	beq.n	800e462 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e45e:	697b      	ldr	r3, [r7, #20]
 800e460:	e003      	b.n	800e46a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e462:	2300      	movs	r3, #0
 800e464:	e001      	b.n	800e46a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e466:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e46a:	4618      	mov	r0, r3
 800e46c:	3718      	adds	r7, #24
 800e46e:	46bd      	mov	sp, r7
 800e470:	bd80      	pop	{r7, pc}

0800e472 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e472:	b580      	push	{r7, lr}
 800e474:	b086      	sub	sp, #24
 800e476:	af00      	add	r7, sp, #0
 800e478:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e47a:	2300      	movs	r3, #0
 800e47c:	60fb      	str	r3, [r7, #12]
 800e47e:	2300      	movs	r3, #0
 800e480:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	2100      	movs	r1, #0
 800e488:	4618      	mov	r0, r3
 800e48a:	f003 fd7e 	bl	8011f8a <SDMMC_GetResponse>
 800e48e:	4603      	mov	r3, r0
 800e490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e494:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e498:	d102      	bne.n	800e4a0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e49a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e49e:	e02f      	b.n	800e500 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e4a0:	f107 030c 	add.w	r3, r7, #12
 800e4a4:	4619      	mov	r1, r3
 800e4a6:	6878      	ldr	r0, [r7, #4]
 800e4a8:	f000 f82e 	bl	800e508 <SD_FindSCR>
 800e4ac:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e4ae:	697b      	ldr	r3, [r7, #20]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d001      	beq.n	800e4b8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e4b4:	697b      	ldr	r3, [r7, #20]
 800e4b6:	e023      	b.n	800e500 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e4b8:	693b      	ldr	r3, [r7, #16]
 800e4ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d01c      	beq.n	800e4fc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	681a      	ldr	r2, [r3, #0]
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4ca:	041b      	lsls	r3, r3, #16
 800e4cc:	4619      	mov	r1, r3
 800e4ce:	4610      	mov	r0, r2
 800e4d0:	f003 fee7 	bl	80122a2 <SDMMC_CmdAppCommand>
 800e4d4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e4d6:	697b      	ldr	r3, [r7, #20]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d001      	beq.n	800e4e0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	e00f      	b.n	800e500 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	2100      	movs	r1, #0
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f003 ff1e 	bl	8012328 <SDMMC_CmdBusWidth>
 800e4ec:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e4ee:	697b      	ldr	r3, [r7, #20]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d001      	beq.n	800e4f8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e4f4:	697b      	ldr	r3, [r7, #20]
 800e4f6:	e003      	b.n	800e500 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	e001      	b.n	800e500 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e4fc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e500:	4618      	mov	r0, r3
 800e502:	3718      	adds	r7, #24
 800e504:	46bd      	mov	sp, r7
 800e506:	bd80      	pop	{r7, pc}

0800e508 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b08e      	sub	sp, #56	; 0x38
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
 800e510:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e512:	f7f5 fa4b 	bl	80039ac <HAL_GetTick>
 800e516:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e518:	2300      	movs	r3, #0
 800e51a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800e51c:	2300      	movs	r3, #0
 800e51e:	60bb      	str	r3, [r7, #8]
 800e520:	2300      	movs	r3, #0
 800e522:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e524:	683b      	ldr	r3, [r7, #0]
 800e526:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	2108      	movs	r1, #8
 800e52e:	4618      	mov	r0, r3
 800e530:	f003 fd6a 	bl	8012008 <SDMMC_CmdBlockLength>
 800e534:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d001      	beq.n	800e540 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e53e:	e0ad      	b.n	800e69c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681a      	ldr	r2, [r3, #0]
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e548:	041b      	lsls	r3, r3, #16
 800e54a:	4619      	mov	r1, r3
 800e54c:	4610      	mov	r0, r2
 800e54e:	f003 fea8 	bl	80122a2 <SDMMC_CmdAppCommand>
 800e552:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e556:	2b00      	cmp	r3, #0
 800e558:	d001      	beq.n	800e55e <SD_FindSCR+0x56>
  {
    return errorstate;
 800e55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e55c:	e09e      	b.n	800e69c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e55e:	f04f 33ff 	mov.w	r3, #4294967295
 800e562:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e564:	2308      	movs	r3, #8
 800e566:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e568:	2330      	movs	r3, #48	; 0x30
 800e56a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e56c:	2302      	movs	r3, #2
 800e56e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e570:	2300      	movs	r3, #0
 800e572:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e574:	2301      	movs	r3, #1
 800e576:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	f107 0210 	add.w	r2, r7, #16
 800e580:	4611      	mov	r1, r2
 800e582:	4618      	mov	r0, r3
 800e584:	f003 fd14 	bl	8011fb0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	4618      	mov	r0, r3
 800e58e:	f003 feee 	bl	801236e <SDMMC_CmdSendSCR>
 800e592:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e596:	2b00      	cmp	r3, #0
 800e598:	d027      	beq.n	800e5ea <SD_FindSCR+0xe2>
  {
    return errorstate;
 800e59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e59c:	e07e      	b.n	800e69c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d113      	bne.n	800e5d4 <SD_FindSCR+0xcc>
 800e5ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d110      	bne.n	800e5d4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f003 fc72 	bl	8011ea0 <SDMMC_ReadFIFO>
 800e5bc:	4603      	mov	r3, r0
 800e5be:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f003 fc6b 	bl	8011ea0 <SDMMC_ReadFIFO>
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	60fb      	str	r3, [r7, #12]
      index++;
 800e5ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5d0:	3301      	adds	r3, #1
 800e5d2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e5d4:	f7f5 f9ea 	bl	80039ac <HAL_GetTick>
 800e5d8:	4602      	mov	r2, r0
 800e5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5dc:	1ad3      	subs	r3, r2, r3
 800e5de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5e2:	d102      	bne.n	800e5ea <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e5e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e5e8:	e058      	b.n	800e69c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e5f0:	f240 532a 	movw	r3, #1322	; 0x52a
 800e5f4:	4013      	ands	r3, r2
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d0d1      	beq.n	800e59e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e600:	f003 0308 	and.w	r3, r3, #8
 800e604:	2b00      	cmp	r3, #0
 800e606:	d005      	beq.n	800e614 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	2208      	movs	r2, #8
 800e60e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e610:	2308      	movs	r3, #8
 800e612:	e043      	b.n	800e69c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e61a:	f003 0302 	and.w	r3, r3, #2
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d005      	beq.n	800e62e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	2202      	movs	r2, #2
 800e628:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e62a:	2302      	movs	r3, #2
 800e62c:	e036      	b.n	800e69c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e634:	f003 0320 	and.w	r3, r3, #32
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d005      	beq.n	800e648 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	2220      	movs	r2, #32
 800e642:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e644:	2320      	movs	r3, #32
 800e646:	e029      	b.n	800e69c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	4a15      	ldr	r2, [pc, #84]	; (800e6a4 <SD_FindSCR+0x19c>)
 800e64e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	061a      	lsls	r2, r3, #24
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	021b      	lsls	r3, r3, #8
 800e658:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e65c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	0a1b      	lsrs	r3, r3, #8
 800e662:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e666:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	0e1b      	lsrs	r3, r3, #24
 800e66c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e670:	601a      	str	r2, [r3, #0]
    scr++;
 800e672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e674:	3304      	adds	r3, #4
 800e676:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e678:	68bb      	ldr	r3, [r7, #8]
 800e67a:	061a      	lsls	r2, r3, #24
 800e67c:	68bb      	ldr	r3, [r7, #8]
 800e67e:	021b      	lsls	r3, r3, #8
 800e680:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e684:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e686:	68bb      	ldr	r3, [r7, #8]
 800e688:	0a1b      	lsrs	r3, r3, #8
 800e68a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e68e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e690:	68bb      	ldr	r3, [r7, #8]
 800e692:	0e1b      	lsrs	r3, r3, #24
 800e694:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e698:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e69a:	2300      	movs	r3, #0
}
 800e69c:	4618      	mov	r0, r3
 800e69e:	3738      	adds	r7, #56	; 0x38
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bd80      	pop	{r7, pc}
 800e6a4:	18000f3a 	.word	0x18000f3a

0800e6a8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b086      	sub	sp, #24
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6b4:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6ba:	2b1f      	cmp	r3, #31
 800e6bc:	d936      	bls.n	800e72c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800e6be:	2300      	movs	r3, #0
 800e6c0:	617b      	str	r3, [r7, #20]
 800e6c2:	e027      	b.n	800e714 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	f003 fbe9 	bl	8011ea0 <SDMMC_ReadFIFO>
 800e6ce:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	b2da      	uxtb	r2, r3
 800e6d4:	693b      	ldr	r3, [r7, #16]
 800e6d6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e6d8:	693b      	ldr	r3, [r7, #16]
 800e6da:	3301      	adds	r3, #1
 800e6dc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	0a1b      	lsrs	r3, r3, #8
 800e6e2:	b2da      	uxtb	r2, r3
 800e6e4:	693b      	ldr	r3, [r7, #16]
 800e6e6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e6e8:	693b      	ldr	r3, [r7, #16]
 800e6ea:	3301      	adds	r3, #1
 800e6ec:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	0c1b      	lsrs	r3, r3, #16
 800e6f2:	b2da      	uxtb	r2, r3
 800e6f4:	693b      	ldr	r3, [r7, #16]
 800e6f6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e6f8:	693b      	ldr	r3, [r7, #16]
 800e6fa:	3301      	adds	r3, #1
 800e6fc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	0e1b      	lsrs	r3, r3, #24
 800e702:	b2da      	uxtb	r2, r3
 800e704:	693b      	ldr	r3, [r7, #16]
 800e706:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e708:	693b      	ldr	r3, [r7, #16]
 800e70a:	3301      	adds	r3, #1
 800e70c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800e70e:	697b      	ldr	r3, [r7, #20]
 800e710:	3301      	adds	r3, #1
 800e712:	617b      	str	r3, [r7, #20]
 800e714:	697b      	ldr	r3, [r7, #20]
 800e716:	2b07      	cmp	r3, #7
 800e718:	d9d4      	bls.n	800e6c4 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	693a      	ldr	r2, [r7, #16]
 800e71e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e724:	f1a3 0220 	sub.w	r2, r3, #32
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800e72c:	bf00      	nop
 800e72e:	3718      	adds	r7, #24
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}

0800e734 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b086      	sub	sp, #24
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	69db      	ldr	r3, [r3, #28]
 800e740:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	6a1b      	ldr	r3, [r3, #32]
 800e746:	2b1f      	cmp	r3, #31
 800e748:	d93a      	bls.n	800e7c0 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800e74a:	2300      	movs	r3, #0
 800e74c:	617b      	str	r3, [r7, #20]
 800e74e:	e02b      	b.n	800e7a8 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800e750:	693b      	ldr	r3, [r7, #16]
 800e752:	781b      	ldrb	r3, [r3, #0]
 800e754:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e756:	693b      	ldr	r3, [r7, #16]
 800e758:	3301      	adds	r3, #1
 800e75a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e75c:	693b      	ldr	r3, [r7, #16]
 800e75e:	781b      	ldrb	r3, [r3, #0]
 800e760:	021a      	lsls	r2, r3, #8
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	4313      	orrs	r3, r2
 800e766:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e768:	693b      	ldr	r3, [r7, #16]
 800e76a:	3301      	adds	r3, #1
 800e76c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e76e:	693b      	ldr	r3, [r7, #16]
 800e770:	781b      	ldrb	r3, [r3, #0]
 800e772:	041a      	lsls	r2, r3, #16
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	4313      	orrs	r3, r2
 800e778:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e77a:	693b      	ldr	r3, [r7, #16]
 800e77c:	3301      	adds	r3, #1
 800e77e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e780:	693b      	ldr	r3, [r7, #16]
 800e782:	781b      	ldrb	r3, [r3, #0]
 800e784:	061a      	lsls	r2, r3, #24
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	4313      	orrs	r3, r2
 800e78a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e78c:	693b      	ldr	r3, [r7, #16]
 800e78e:	3301      	adds	r3, #1
 800e790:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	f107 020c 	add.w	r2, r7, #12
 800e79a:	4611      	mov	r1, r2
 800e79c:	4618      	mov	r0, r3
 800e79e:	f003 fb8c 	bl	8011eba <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800e7a2:	697b      	ldr	r3, [r7, #20]
 800e7a4:	3301      	adds	r3, #1
 800e7a6:	617b      	str	r3, [r7, #20]
 800e7a8:	697b      	ldr	r3, [r7, #20]
 800e7aa:	2b07      	cmp	r3, #7
 800e7ac:	d9d0      	bls.n	800e750 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	693a      	ldr	r2, [r7, #16]
 800e7b2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	6a1b      	ldr	r3, [r3, #32]
 800e7b8:	f1a3 0220 	sub.w	r2, r3, #32
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	621a      	str	r2, [r3, #32]
  }
}
 800e7c0:	bf00      	nop
 800e7c2:	3718      	adds	r7, #24
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	bd80      	pop	{r7, pc}

0800e7c8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e7c8:	b480      	push	{r7}
 800e7ca:	b083      	sub	sp, #12
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e7d0:	bf00      	nop
 800e7d2:	370c      	adds	r7, #12
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7da:	4770      	bx	lr

0800e7dc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e7dc:	b480      	push	{r7}
 800e7de:	b083      	sub	sp, #12
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e7e4:	bf00      	nop
 800e7e6:	370c      	adds	r7, #12
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ee:	4770      	bx	lr

0800e7f0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e7f0:	b480      	push	{r7}
 800e7f2:	b083      	sub	sp, #12
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e7f8:	bf00      	nop
 800e7fa:	370c      	adds	r7, #12
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e802:	4770      	bx	lr

0800e804 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e804:	b480      	push	{r7}
 800e806:	b083      	sub	sp, #12
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e80c:	bf00      	nop
 800e80e:	370c      	adds	r7, #12
 800e810:	46bd      	mov	sp, r7
 800e812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e816:	4770      	bx	lr

0800e818 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b084      	sub	sp, #16
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d101      	bne.n	800e82a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e826:	2301      	movs	r3, #1
 800e828:	e10f      	b.n	800ea4a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	2200      	movs	r2, #0
 800e82e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	4a87      	ldr	r2, [pc, #540]	; (800ea54 <HAL_SPI_Init+0x23c>)
 800e836:	4293      	cmp	r3, r2
 800e838:	d00f      	beq.n	800e85a <HAL_SPI_Init+0x42>
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	4a86      	ldr	r2, [pc, #536]	; (800ea58 <HAL_SPI_Init+0x240>)
 800e840:	4293      	cmp	r3, r2
 800e842:	d00a      	beq.n	800e85a <HAL_SPI_Init+0x42>
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	4a84      	ldr	r2, [pc, #528]	; (800ea5c <HAL_SPI_Init+0x244>)
 800e84a:	4293      	cmp	r3, r2
 800e84c:	d005      	beq.n	800e85a <HAL_SPI_Init+0x42>
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	68db      	ldr	r3, [r3, #12]
 800e852:	2b0f      	cmp	r3, #15
 800e854:	d901      	bls.n	800e85a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e856:	2301      	movs	r3, #1
 800e858:	e0f7      	b.n	800ea4a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e85a:	6878      	ldr	r0, [r7, #4]
 800e85c:	f000 fd5a 	bl	800f314 <SPI_GetPacketSize>
 800e860:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	4a7b      	ldr	r2, [pc, #492]	; (800ea54 <HAL_SPI_Init+0x23c>)
 800e868:	4293      	cmp	r3, r2
 800e86a:	d00c      	beq.n	800e886 <HAL_SPI_Init+0x6e>
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	4a79      	ldr	r2, [pc, #484]	; (800ea58 <HAL_SPI_Init+0x240>)
 800e872:	4293      	cmp	r3, r2
 800e874:	d007      	beq.n	800e886 <HAL_SPI_Init+0x6e>
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	4a78      	ldr	r2, [pc, #480]	; (800ea5c <HAL_SPI_Init+0x244>)
 800e87c:	4293      	cmp	r3, r2
 800e87e:	d002      	beq.n	800e886 <HAL_SPI_Init+0x6e>
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	2b08      	cmp	r3, #8
 800e884:	d811      	bhi.n	800e8aa <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e88a:	4a72      	ldr	r2, [pc, #456]	; (800ea54 <HAL_SPI_Init+0x23c>)
 800e88c:	4293      	cmp	r3, r2
 800e88e:	d009      	beq.n	800e8a4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	4a70      	ldr	r2, [pc, #448]	; (800ea58 <HAL_SPI_Init+0x240>)
 800e896:	4293      	cmp	r3, r2
 800e898:	d004      	beq.n	800e8a4 <HAL_SPI_Init+0x8c>
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	4a6f      	ldr	r2, [pc, #444]	; (800ea5c <HAL_SPI_Init+0x244>)
 800e8a0:	4293      	cmp	r3, r2
 800e8a2:	d104      	bne.n	800e8ae <HAL_SPI_Init+0x96>
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	2b10      	cmp	r3, #16
 800e8a8:	d901      	bls.n	800e8ae <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e8aa:	2301      	movs	r3, #1
 800e8ac:	e0cd      	b.n	800ea4a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e8b4:	b2db      	uxtb	r3, r3
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d106      	bne.n	800e8c8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	2200      	movs	r2, #0
 800e8be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e8c2:	6878      	ldr	r0, [r7, #4]
 800e8c4:	f7f4 fa8a 	bl	8002ddc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2202      	movs	r2, #2
 800e8cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	681a      	ldr	r2, [r3, #0]
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	f022 0201 	bic.w	r2, r2, #1
 800e8de:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	689b      	ldr	r3, [r3, #8]
 800e8e6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e8ea:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	699b      	ldr	r3, [r3, #24]
 800e8f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e8f4:	d119      	bne.n	800e92a <HAL_SPI_Init+0x112>
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	685b      	ldr	r3, [r3, #4]
 800e8fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e8fe:	d103      	bne.n	800e908 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e904:	2b00      	cmp	r3, #0
 800e906:	d008      	beq.n	800e91a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d10c      	bne.n	800e92a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e914:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e918:	d107      	bne.n	800e92a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	681a      	ldr	r2, [r3, #0]
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e928:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	685b      	ldr	r3, [r3, #4]
 800e92e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e932:	2b00      	cmp	r3, #0
 800e934:	d00f      	beq.n	800e956 <HAL_SPI_Init+0x13e>
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	68db      	ldr	r3, [r3, #12]
 800e93a:	2b06      	cmp	r3, #6
 800e93c:	d90b      	bls.n	800e956 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	430a      	orrs	r2, r1
 800e952:	601a      	str	r2, [r3, #0]
 800e954:	e007      	b.n	800e966 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	681a      	ldr	r2, [r3, #0]
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e964:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	69da      	ldr	r2, [r3, #28]
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e96e:	431a      	orrs	r2, r3
 800e970:	68bb      	ldr	r3, [r7, #8]
 800e972:	431a      	orrs	r2, r3
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e978:	ea42 0103 	orr.w	r1, r2, r3
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	68da      	ldr	r2, [r3, #12]
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	430a      	orrs	r2, r1
 800e986:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e990:	431a      	orrs	r2, r3
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e996:	431a      	orrs	r2, r3
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	699b      	ldr	r3, [r3, #24]
 800e99c:	431a      	orrs	r2, r3
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	691b      	ldr	r3, [r3, #16]
 800e9a2:	431a      	orrs	r2, r3
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	695b      	ldr	r3, [r3, #20]
 800e9a8:	431a      	orrs	r2, r3
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6a1b      	ldr	r3, [r3, #32]
 800e9ae:	431a      	orrs	r2, r3
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	685b      	ldr	r3, [r3, #4]
 800e9b4:	431a      	orrs	r2, r3
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e9ba:	431a      	orrs	r2, r3
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	689b      	ldr	r3, [r3, #8]
 800e9c0:	431a      	orrs	r2, r3
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e9c6:	ea42 0103 	orr.w	r1, r2, r3
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	430a      	orrs	r2, r1
 800e9d4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	685b      	ldr	r3, [r3, #4]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d113      	bne.n	800ea06 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	689b      	ldr	r3, [r3, #8]
 800e9e4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e9f0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	689b      	ldr	r3, [r3, #8]
 800e9f8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ea04:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	f022 0201 	bic.w	r2, r2, #1
 800ea14:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	685b      	ldr	r3, [r3, #4]
 800ea1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d00a      	beq.n	800ea38 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	68db      	ldr	r3, [r3, #12]
 800ea28:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	430a      	orrs	r2, r1
 800ea36:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2201      	movs	r2, #1
 800ea44:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800ea48:	2300      	movs	r3, #0
}
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	3710      	adds	r7, #16
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}
 800ea52:	bf00      	nop
 800ea54:	40013000 	.word	0x40013000
 800ea58:	40003800 	.word	0x40003800
 800ea5c:	40003c00 	.word	0x40003c00

0800ea60 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b08a      	sub	sp, #40	; 0x28
 800ea64:	af02      	add	r7, sp, #8
 800ea66:	60f8      	str	r0, [r7, #12]
 800ea68:	60b9      	str	r1, [r7, #8]
 800ea6a:	603b      	str	r3, [r7, #0]
 800ea6c:	4613      	mov	r3, r2
 800ea6e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	3320      	adds	r3, #32
 800ea76:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ea78:	2300      	movs	r3, #0
 800ea7a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ea82:	2b01      	cmp	r3, #1
 800ea84:	d101      	bne.n	800ea8a <HAL_SPI_Transmit+0x2a>
 800ea86:	2302      	movs	r3, #2
 800ea88:	e1e1      	b.n	800ee4e <HAL_SPI_Transmit+0x3ee>
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	2201      	movs	r2, #1
 800ea8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ea92:	f7f4 ff8b 	bl	80039ac <HAL_GetTick>
 800ea96:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ea9e:	b2db      	uxtb	r3, r3
 800eaa0:	2b01      	cmp	r3, #1
 800eaa2:	d007      	beq.n	800eab4 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800eaa4:	2302      	movs	r3, #2
 800eaa6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	2200      	movs	r2, #0
 800eaac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800eab0:	7efb      	ldrb	r3, [r7, #27]
 800eab2:	e1cc      	b.n	800ee4e <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800eab4:	68bb      	ldr	r3, [r7, #8]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d002      	beq.n	800eac0 <HAL_SPI_Transmit+0x60>
 800eaba:	88fb      	ldrh	r3, [r7, #6]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d107      	bne.n	800ead0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800eac0:	2301      	movs	r3, #1
 800eac2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	2200      	movs	r2, #0
 800eac8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800eacc:	7efb      	ldrb	r3, [r7, #27]
 800eace:	e1be      	b.n	800ee4e <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	2203      	movs	r2, #3
 800ead4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	2200      	movs	r2, #0
 800eadc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	68ba      	ldr	r2, [r7, #8]
 800eae4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	88fa      	ldrh	r2, [r7, #6]
 800eaea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	88fa      	ldrh	r2, [r7, #6]
 800eaf2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	2200      	movs	r2, #0
 800eafa:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	2200      	movs	r2, #0
 800eb00:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	2200      	movs	r2, #0
 800eb08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	2200      	movs	r2, #0
 800eb10:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	2200      	movs	r2, #0
 800eb16:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	689b      	ldr	r3, [r3, #8]
 800eb1c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800eb20:	d108      	bne.n	800eb34 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	681a      	ldr	r2, [r3, #0]
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eb30:	601a      	str	r2, [r3, #0]
 800eb32:	e009      	b.n	800eb48 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	68db      	ldr	r3, [r3, #12]
 800eb3a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800eb46:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	685a      	ldr	r2, [r3, #4]
 800eb4e:	4b96      	ldr	r3, [pc, #600]	; (800eda8 <HAL_SPI_Transmit+0x348>)
 800eb50:	4013      	ands	r3, r2
 800eb52:	88f9      	ldrh	r1, [r7, #6]
 800eb54:	68fa      	ldr	r2, [r7, #12]
 800eb56:	6812      	ldr	r2, [r2, #0]
 800eb58:	430b      	orrs	r3, r1
 800eb5a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	681a      	ldr	r2, [r3, #0]
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	f042 0201 	orr.w	r2, r2, #1
 800eb6a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	685b      	ldr	r3, [r3, #4]
 800eb70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800eb74:	d107      	bne.n	800eb86 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	681a      	ldr	r2, [r3, #0]
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800eb84:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	68db      	ldr	r3, [r3, #12]
 800eb8a:	2b0f      	cmp	r3, #15
 800eb8c:	d947      	bls.n	800ec1e <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800eb8e:	e03f      	b.n	800ec10 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	695b      	ldr	r3, [r3, #20]
 800eb96:	f003 0302 	and.w	r3, r3, #2
 800eb9a:	2b02      	cmp	r3, #2
 800eb9c:	d114      	bne.n	800ebc8 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	6812      	ldr	r2, [r2, #0]
 800eba8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ebae:	1d1a      	adds	r2, r3, #4
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ebba:	b29b      	uxth	r3, r3
 800ebbc:	3b01      	subs	r3, #1
 800ebbe:	b29a      	uxth	r2, r3
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ebc6:	e023      	b.n	800ec10 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ebc8:	f7f4 fef0 	bl	80039ac <HAL_GetTick>
 800ebcc:	4602      	mov	r2, r0
 800ebce:	697b      	ldr	r3, [r7, #20]
 800ebd0:	1ad3      	subs	r3, r2, r3
 800ebd2:	683a      	ldr	r2, [r7, #0]
 800ebd4:	429a      	cmp	r2, r3
 800ebd6:	d803      	bhi.n	800ebe0 <HAL_SPI_Transmit+0x180>
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebde:	d102      	bne.n	800ebe6 <HAL_SPI_Transmit+0x186>
 800ebe0:	683b      	ldr	r3, [r7, #0]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d114      	bne.n	800ec10 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ebe6:	68f8      	ldr	r0, [r7, #12]
 800ebe8:	f000 fac6 	bl	800f178 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	2200      	movs	r2, #0
 800ebf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ebfa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	2201      	movs	r2, #1
 800ec08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ec0c:	2303      	movs	r3, #3
 800ec0e:	e11e      	b.n	800ee4e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ec16:	b29b      	uxth	r3, r3
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d1b9      	bne.n	800eb90 <HAL_SPI_Transmit+0x130>
 800ec1c:	e0f1      	b.n	800ee02 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	68db      	ldr	r3, [r3, #12]
 800ec22:	2b07      	cmp	r3, #7
 800ec24:	f240 80e6 	bls.w	800edf4 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ec28:	e05d      	b.n	800ece6 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	695b      	ldr	r3, [r3, #20]
 800ec30:	f003 0302 	and.w	r3, r3, #2
 800ec34:	2b02      	cmp	r3, #2
 800ec36:	d132      	bne.n	800ec9e <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ec3e:	b29b      	uxth	r3, r3
 800ec40:	2b01      	cmp	r3, #1
 800ec42:	d918      	bls.n	800ec76 <HAL_SPI_Transmit+0x216>
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d014      	beq.n	800ec76 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	6812      	ldr	r2, [r2, #0]
 800ec56:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec5c:	1d1a      	adds	r2, r3, #4
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ec68:	b29b      	uxth	r3, r3
 800ec6a:	3b02      	subs	r3, #2
 800ec6c:	b29a      	uxth	r2, r3
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ec74:	e037      	b.n	800ece6 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec7a:	881a      	ldrh	r2, [r3, #0]
 800ec7c:	69fb      	ldr	r3, [r7, #28]
 800ec7e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec84:	1c9a      	adds	r2, r3, #2
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ec90:	b29b      	uxth	r3, r3
 800ec92:	3b01      	subs	r3, #1
 800ec94:	b29a      	uxth	r2, r3
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ec9c:	e023      	b.n	800ece6 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ec9e:	f7f4 fe85 	bl	80039ac <HAL_GetTick>
 800eca2:	4602      	mov	r2, r0
 800eca4:	697b      	ldr	r3, [r7, #20]
 800eca6:	1ad3      	subs	r3, r2, r3
 800eca8:	683a      	ldr	r2, [r7, #0]
 800ecaa:	429a      	cmp	r2, r3
 800ecac:	d803      	bhi.n	800ecb6 <HAL_SPI_Transmit+0x256>
 800ecae:	683b      	ldr	r3, [r7, #0]
 800ecb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecb4:	d102      	bne.n	800ecbc <HAL_SPI_Transmit+0x25c>
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d114      	bne.n	800ece6 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ecbc:	68f8      	ldr	r0, [r7, #12]
 800ecbe:	f000 fa5b 	bl	800f178 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ecd0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	2201      	movs	r2, #1
 800ecde:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ece2:	2303      	movs	r3, #3
 800ece4:	e0b3      	b.n	800ee4e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ecec:	b29b      	uxth	r3, r3
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d19b      	bne.n	800ec2a <HAL_SPI_Transmit+0x1ca>
 800ecf2:	e086      	b.n	800ee02 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	695b      	ldr	r3, [r3, #20]
 800ecfa:	f003 0302 	and.w	r3, r3, #2
 800ecfe:	2b02      	cmp	r3, #2
 800ed00:	d154      	bne.n	800edac <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed08:	b29b      	uxth	r3, r3
 800ed0a:	2b03      	cmp	r3, #3
 800ed0c:	d918      	bls.n	800ed40 <HAL_SPI_Transmit+0x2e0>
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed12:	2b40      	cmp	r3, #64	; 0x40
 800ed14:	d914      	bls.n	800ed40 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	6812      	ldr	r2, [r2, #0]
 800ed20:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed26:	1d1a      	adds	r2, r3, #4
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed32:	b29b      	uxth	r3, r3
 800ed34:	3b04      	subs	r3, #4
 800ed36:	b29a      	uxth	r2, r3
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ed3e:	e059      	b.n	800edf4 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed46:	b29b      	uxth	r3, r3
 800ed48:	2b01      	cmp	r3, #1
 800ed4a:	d917      	bls.n	800ed7c <HAL_SPI_Transmit+0x31c>
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d013      	beq.n	800ed7c <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed58:	881a      	ldrh	r2, [r3, #0]
 800ed5a:	69fb      	ldr	r3, [r7, #28]
 800ed5c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed62:	1c9a      	adds	r2, r3, #2
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed6e:	b29b      	uxth	r3, r3
 800ed70:	3b02      	subs	r3, #2
 800ed72:	b29a      	uxth	r2, r3
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ed7a:	e03b      	b.n	800edf4 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	3320      	adds	r3, #32
 800ed86:	7812      	ldrb	r2, [r2, #0]
 800ed88:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed8e:	1c5a      	adds	r2, r3, #1
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed9a:	b29b      	uxth	r3, r3
 800ed9c:	3b01      	subs	r3, #1
 800ed9e:	b29a      	uxth	r2, r3
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800eda6:	e025      	b.n	800edf4 <HAL_SPI_Transmit+0x394>
 800eda8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800edac:	f7f4 fdfe 	bl	80039ac <HAL_GetTick>
 800edb0:	4602      	mov	r2, r0
 800edb2:	697b      	ldr	r3, [r7, #20]
 800edb4:	1ad3      	subs	r3, r2, r3
 800edb6:	683a      	ldr	r2, [r7, #0]
 800edb8:	429a      	cmp	r2, r3
 800edba:	d803      	bhi.n	800edc4 <HAL_SPI_Transmit+0x364>
 800edbc:	683b      	ldr	r3, [r7, #0]
 800edbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edc2:	d102      	bne.n	800edca <HAL_SPI_Transmit+0x36a>
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d114      	bne.n	800edf4 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800edca:	68f8      	ldr	r0, [r7, #12]
 800edcc:	f000 f9d4 	bl	800f178 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	2200      	movs	r2, #0
 800edd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800edde:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	2201      	movs	r2, #1
 800edec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800edf0:	2303      	movs	r3, #3
 800edf2:	e02c      	b.n	800ee4e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800edfa:	b29b      	uxth	r3, r3
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	f47f af79 	bne.w	800ecf4 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800ee02:	697b      	ldr	r3, [r7, #20]
 800ee04:	9300      	str	r3, [sp, #0]
 800ee06:	683b      	ldr	r3, [r7, #0]
 800ee08:	2200      	movs	r2, #0
 800ee0a:	2108      	movs	r1, #8
 800ee0c:	68f8      	ldr	r0, [r7, #12]
 800ee0e:	f000 fa53 	bl	800f2b8 <SPI_WaitOnFlagUntilTimeout>
 800ee12:	4603      	mov	r3, r0
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d007      	beq.n	800ee28 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee1e:	f043 0220 	orr.w	r2, r3, #32
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ee28:	68f8      	ldr	r0, [r7, #12]
 800ee2a:	f000 f9a5 	bl	800f178 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	2200      	movs	r2, #0
 800ee32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	2201      	movs	r2, #1
 800ee3a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d001      	beq.n	800ee4c <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800ee48:	2301      	movs	r3, #1
 800ee4a:	e000      	b.n	800ee4e <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800ee4c:	7efb      	ldrb	r3, [r7, #27]
}
 800ee4e:	4618      	mov	r0, r3
 800ee50:	3720      	adds	r7, #32
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}
 800ee56:	bf00      	nop

0800ee58 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b088      	sub	sp, #32
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	60f8      	str	r0, [r7, #12]
 800ee60:	60b9      	str	r1, [r7, #8]
 800ee62:	603b      	str	r3, [r7, #0]
 800ee64:	4613      	mov	r3, r2
 800ee66:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ee68:	2300      	movs	r3, #0
 800ee6a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	3330      	adds	r3, #48	; 0x30
 800ee72:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ee7a:	2b01      	cmp	r3, #1
 800ee7c:	d101      	bne.n	800ee82 <HAL_SPI_Receive+0x2a>
 800ee7e:	2302      	movs	r3, #2
 800ee80:	e173      	b.n	800f16a <HAL_SPI_Receive+0x312>
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	2201      	movs	r2, #1
 800ee86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ee8a:	f7f4 fd8f 	bl	80039ac <HAL_GetTick>
 800ee8e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ee96:	b2db      	uxtb	r3, r3
 800ee98:	2b01      	cmp	r3, #1
 800ee9a:	d007      	beq.n	800eeac <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800ee9c:	2302      	movs	r3, #2
 800ee9e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	2200      	movs	r2, #0
 800eea4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800eea8:	7ffb      	ldrb	r3, [r7, #31]
 800eeaa:	e15e      	b.n	800f16a <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800eeac:	68bb      	ldr	r3, [r7, #8]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d002      	beq.n	800eeb8 <HAL_SPI_Receive+0x60>
 800eeb2:	88fb      	ldrh	r3, [r7, #6]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d107      	bne.n	800eec8 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800eeb8:	2301      	movs	r3, #1
 800eeba:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	2200      	movs	r2, #0
 800eec0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800eec4:	7ffb      	ldrb	r3, [r7, #31]
 800eec6:	e150      	b.n	800f16a <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	2204      	movs	r2, #4
 800eecc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	2200      	movs	r2, #0
 800eed4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	68ba      	ldr	r2, [r7, #8]
 800eedc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	88fa      	ldrh	r2, [r7, #6]
 800eee2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	88fa      	ldrh	r2, [r7, #6]
 800eeea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	2200      	movs	r2, #0
 800eef2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	2200      	movs	r2, #0
 800eef8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	2200      	movs	r2, #0
 800ef00:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	2200      	movs	r2, #0
 800ef08:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	2200      	movs	r2, #0
 800ef0e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	689b      	ldr	r3, [r3, #8]
 800ef14:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ef18:	d108      	bne.n	800ef2c <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	681a      	ldr	r2, [r3, #0]
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ef28:	601a      	str	r2, [r3, #0]
 800ef2a:	e009      	b.n	800ef40 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	68db      	ldr	r3, [r3, #12]
 800ef32:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ef3e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	685a      	ldr	r2, [r3, #4]
 800ef46:	4b8b      	ldr	r3, [pc, #556]	; (800f174 <HAL_SPI_Receive+0x31c>)
 800ef48:	4013      	ands	r3, r2
 800ef4a:	88f9      	ldrh	r1, [r7, #6]
 800ef4c:	68fa      	ldr	r2, [r7, #12]
 800ef4e:	6812      	ldr	r2, [r2, #0]
 800ef50:	430b      	orrs	r3, r1
 800ef52:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	681a      	ldr	r2, [r3, #0]
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	f042 0201 	orr.w	r2, r2, #1
 800ef62:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	685b      	ldr	r3, [r3, #4]
 800ef68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ef6c:	d107      	bne.n	800ef7e <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	681a      	ldr	r2, [r3, #0]
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ef7c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	68db      	ldr	r3, [r3, #12]
 800ef82:	2b0f      	cmp	r3, #15
 800ef84:	d948      	bls.n	800f018 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ef86:	e040      	b.n	800f00a <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	695a      	ldr	r2, [r3, #20]
 800ef8e:	f248 0308 	movw	r3, #32776	; 0x8008
 800ef92:	4013      	ands	r3, r2
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d014      	beq.n	800efc2 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	681a      	ldr	r2, [r3, #0]
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800efa0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800efa2:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800efa8:	1d1a      	adds	r2, r3, #4
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800efb4:	b29b      	uxth	r3, r3
 800efb6:	3b01      	subs	r3, #1
 800efb8:	b29a      	uxth	r2, r3
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800efc0:	e023      	b.n	800f00a <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800efc2:	f7f4 fcf3 	bl	80039ac <HAL_GetTick>
 800efc6:	4602      	mov	r2, r0
 800efc8:	697b      	ldr	r3, [r7, #20]
 800efca:	1ad3      	subs	r3, r2, r3
 800efcc:	683a      	ldr	r2, [r7, #0]
 800efce:	429a      	cmp	r2, r3
 800efd0:	d803      	bhi.n	800efda <HAL_SPI_Receive+0x182>
 800efd2:	683b      	ldr	r3, [r7, #0]
 800efd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efd8:	d102      	bne.n	800efe0 <HAL_SPI_Receive+0x188>
 800efda:	683b      	ldr	r3, [r7, #0]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d114      	bne.n	800f00a <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800efe0:	68f8      	ldr	r0, [r7, #12]
 800efe2:	f000 f8c9 	bl	800f178 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	2200      	movs	r2, #0
 800efea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eff4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	2201      	movs	r2, #1
 800f002:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f006:	2303      	movs	r3, #3
 800f008:	e0af      	b.n	800f16a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f010:	b29b      	uxth	r3, r3
 800f012:	2b00      	cmp	r3, #0
 800f014:	d1b8      	bne.n	800ef88 <HAL_SPI_Receive+0x130>
 800f016:	e095      	b.n	800f144 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	68db      	ldr	r3, [r3, #12]
 800f01c:	2b07      	cmp	r3, #7
 800f01e:	f240 808b 	bls.w	800f138 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f022:	e03f      	b.n	800f0a4 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	695b      	ldr	r3, [r3, #20]
 800f02a:	f003 0301 	and.w	r3, r3, #1
 800f02e:	2b01      	cmp	r3, #1
 800f030:	d114      	bne.n	800f05c <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f036:	69ba      	ldr	r2, [r7, #24]
 800f038:	8812      	ldrh	r2, [r2, #0]
 800f03a:	b292      	uxth	r2, r2
 800f03c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f042:	1c9a      	adds	r2, r3, #2
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f04e:	b29b      	uxth	r3, r3
 800f050:	3b01      	subs	r3, #1
 800f052:	b29a      	uxth	r2, r3
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f05a:	e023      	b.n	800f0a4 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f05c:	f7f4 fca6 	bl	80039ac <HAL_GetTick>
 800f060:	4602      	mov	r2, r0
 800f062:	697b      	ldr	r3, [r7, #20]
 800f064:	1ad3      	subs	r3, r2, r3
 800f066:	683a      	ldr	r2, [r7, #0]
 800f068:	429a      	cmp	r2, r3
 800f06a:	d803      	bhi.n	800f074 <HAL_SPI_Receive+0x21c>
 800f06c:	683b      	ldr	r3, [r7, #0]
 800f06e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f072:	d102      	bne.n	800f07a <HAL_SPI_Receive+0x222>
 800f074:	683b      	ldr	r3, [r7, #0]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d114      	bne.n	800f0a4 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f07a:	68f8      	ldr	r0, [r7, #12]
 800f07c:	f000 f87c 	bl	800f178 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	2200      	movs	r2, #0
 800f084:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f08e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	2201      	movs	r2, #1
 800f09c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f0a0:	2303      	movs	r3, #3
 800f0a2:	e062      	b.n	800f16a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f0aa:	b29b      	uxth	r3, r3
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d1b9      	bne.n	800f024 <HAL_SPI_Receive+0x1cc>
 800f0b0:	e048      	b.n	800f144 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	695b      	ldr	r3, [r3, #20]
 800f0b8:	f003 0301 	and.w	r3, r3, #1
 800f0bc:	2b01      	cmp	r3, #1
 800f0be:	d117      	bne.n	800f0f0 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0cc:	7812      	ldrb	r2, [r2, #0]
 800f0ce:	b2d2      	uxtb	r2, r2
 800f0d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0d6:	1c5a      	adds	r2, r3, #1
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f0e2:	b29b      	uxth	r3, r3
 800f0e4:	3b01      	subs	r3, #1
 800f0e6:	b29a      	uxth	r2, r3
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f0ee:	e023      	b.n	800f138 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f0f0:	f7f4 fc5c 	bl	80039ac <HAL_GetTick>
 800f0f4:	4602      	mov	r2, r0
 800f0f6:	697b      	ldr	r3, [r7, #20]
 800f0f8:	1ad3      	subs	r3, r2, r3
 800f0fa:	683a      	ldr	r2, [r7, #0]
 800f0fc:	429a      	cmp	r2, r3
 800f0fe:	d803      	bhi.n	800f108 <HAL_SPI_Receive+0x2b0>
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f106:	d102      	bne.n	800f10e <HAL_SPI_Receive+0x2b6>
 800f108:	683b      	ldr	r3, [r7, #0]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d114      	bne.n	800f138 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f10e:	68f8      	ldr	r0, [r7, #12]
 800f110:	f000 f832 	bl	800f178 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	2200      	movs	r2, #0
 800f118:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f122:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	2201      	movs	r2, #1
 800f130:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f134:	2303      	movs	r3, #3
 800f136:	e018      	b.n	800f16a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f13e:	b29b      	uxth	r3, r3
 800f140:	2b00      	cmp	r3, #0
 800f142:	d1b6      	bne.n	800f0b2 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f144:	68f8      	ldr	r0, [r7, #12]
 800f146:	f000 f817 	bl	800f178 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	2200      	movs	r2, #0
 800f14e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	2201      	movs	r2, #1
 800f156:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f160:	2b00      	cmp	r3, #0
 800f162:	d001      	beq.n	800f168 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800f164:	2301      	movs	r3, #1
 800f166:	e000      	b.n	800f16a <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800f168:	7ffb      	ldrb	r3, [r7, #31]
}
 800f16a:	4618      	mov	r0, r3
 800f16c:	3720      	adds	r7, #32
 800f16e:	46bd      	mov	sp, r7
 800f170:	bd80      	pop	{r7, pc}
 800f172:	bf00      	nop
 800f174:	ffff0000 	.word	0xffff0000

0800f178 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f178:	b480      	push	{r7}
 800f17a:	b085      	sub	sp, #20
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	695b      	ldr	r3, [r3, #20]
 800f186:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	699a      	ldr	r2, [r3, #24]
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	f042 0208 	orr.w	r2, r2, #8
 800f196:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	699a      	ldr	r2, [r3, #24]
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	f042 0210 	orr.w	r2, r2, #16
 800f1a6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	681a      	ldr	r2, [r3, #0]
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	f022 0201 	bic.w	r2, r2, #1
 800f1b6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	6919      	ldr	r1, [r3, #16]
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	681a      	ldr	r2, [r3, #0]
 800f1c2:	4b3c      	ldr	r3, [pc, #240]	; (800f2b4 <SPI_CloseTransfer+0x13c>)
 800f1c4:	400b      	ands	r3, r1
 800f1c6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	689a      	ldr	r2, [r3, #8]
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f1d6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f1de:	b2db      	uxtb	r3, r3
 800f1e0:	2b04      	cmp	r3, #4
 800f1e2:	d014      	beq.n	800f20e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	f003 0320 	and.w	r3, r3, #32
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d00f      	beq.n	800f20e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	699a      	ldr	r2, [r3, #24]
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	f042 0220 	orr.w	r2, r2, #32
 800f20c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f214:	b2db      	uxtb	r3, r3
 800f216:	2b03      	cmp	r3, #3
 800f218:	d014      	beq.n	800f244 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f220:	2b00      	cmp	r3, #0
 800f222:	d00f      	beq.n	800f244 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f22a:	f043 0204 	orr.w	r2, r3, #4
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	699a      	ldr	r2, [r3, #24]
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f242:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d00f      	beq.n	800f26e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f254:	f043 0201 	orr.w	r2, r3, #1
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	699a      	ldr	r2, [r3, #24]
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f26c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f274:	2b00      	cmp	r3, #0
 800f276:	d00f      	beq.n	800f298 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f27e:	f043 0208 	orr.w	r2, r3, #8
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	699a      	ldr	r2, [r3, #24]
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f296:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	2200      	movs	r2, #0
 800f29c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800f2a8:	bf00      	nop
 800f2aa:	3714      	adds	r7, #20
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b2:	4770      	bx	lr
 800f2b4:	fffffc90 	.word	0xfffffc90

0800f2b8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b084      	sub	sp, #16
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	60f8      	str	r0, [r7, #12]
 800f2c0:	60b9      	str	r1, [r7, #8]
 800f2c2:	603b      	str	r3, [r7, #0]
 800f2c4:	4613      	mov	r3, r2
 800f2c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f2c8:	e010      	b.n	800f2ec <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f2ca:	f7f4 fb6f 	bl	80039ac <HAL_GetTick>
 800f2ce:	4602      	mov	r2, r0
 800f2d0:	69bb      	ldr	r3, [r7, #24]
 800f2d2:	1ad3      	subs	r3, r2, r3
 800f2d4:	683a      	ldr	r2, [r7, #0]
 800f2d6:	429a      	cmp	r2, r3
 800f2d8:	d803      	bhi.n	800f2e2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800f2da:	683b      	ldr	r3, [r7, #0]
 800f2dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2e0:	d102      	bne.n	800f2e8 <SPI_WaitOnFlagUntilTimeout+0x30>
 800f2e2:	683b      	ldr	r3, [r7, #0]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d101      	bne.n	800f2ec <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800f2e8:	2303      	movs	r3, #3
 800f2ea:	e00f      	b.n	800f30c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	695a      	ldr	r2, [r3, #20]
 800f2f2:	68bb      	ldr	r3, [r7, #8]
 800f2f4:	4013      	ands	r3, r2
 800f2f6:	68ba      	ldr	r2, [r7, #8]
 800f2f8:	429a      	cmp	r2, r3
 800f2fa:	bf0c      	ite	eq
 800f2fc:	2301      	moveq	r3, #1
 800f2fe:	2300      	movne	r3, #0
 800f300:	b2db      	uxtb	r3, r3
 800f302:	461a      	mov	r2, r3
 800f304:	79fb      	ldrb	r3, [r7, #7]
 800f306:	429a      	cmp	r2, r3
 800f308:	d0df      	beq.n	800f2ca <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800f30a:	2300      	movs	r3, #0
}
 800f30c:	4618      	mov	r0, r3
 800f30e:	3710      	adds	r7, #16
 800f310:	46bd      	mov	sp, r7
 800f312:	bd80      	pop	{r7, pc}

0800f314 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800f314:	b480      	push	{r7}
 800f316:	b085      	sub	sp, #20
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f320:	095b      	lsrs	r3, r3, #5
 800f322:	3301      	adds	r3, #1
 800f324:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	68db      	ldr	r3, [r3, #12]
 800f32a:	3301      	adds	r3, #1
 800f32c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f32e:	68bb      	ldr	r3, [r7, #8]
 800f330:	3307      	adds	r3, #7
 800f332:	08db      	lsrs	r3, r3, #3
 800f334:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f336:	68bb      	ldr	r3, [r7, #8]
 800f338:	68fa      	ldr	r2, [r7, #12]
 800f33a:	fb02 f303 	mul.w	r3, r2, r3
}
 800f33e:	4618      	mov	r0, r3
 800f340:	3714      	adds	r7, #20
 800f342:	46bd      	mov	sp, r7
 800f344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f348:	4770      	bx	lr

0800f34a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f34a:	b580      	push	{r7, lr}
 800f34c:	b082      	sub	sp, #8
 800f34e:	af00      	add	r7, sp, #0
 800f350:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d101      	bne.n	800f35c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f358:	2301      	movs	r3, #1
 800f35a:	e049      	b.n	800f3f0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f362:	b2db      	uxtb	r3, r3
 800f364:	2b00      	cmp	r3, #0
 800f366:	d106      	bne.n	800f376 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	2200      	movs	r2, #0
 800f36c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f370:	6878      	ldr	r0, [r7, #4]
 800f372:	f7f3 ff85 	bl	8003280 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	2202      	movs	r2, #2
 800f37a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	681a      	ldr	r2, [r3, #0]
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	3304      	adds	r3, #4
 800f386:	4619      	mov	r1, r3
 800f388:	4610      	mov	r0, r2
 800f38a:	f000 ff29 	bl	80101e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	2201      	movs	r2, #1
 800f392:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	2201      	movs	r2, #1
 800f39a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	2201      	movs	r2, #1
 800f3a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	2201      	movs	r2, #1
 800f3aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	2201      	movs	r2, #1
 800f3b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	2201      	movs	r2, #1
 800f3ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	2201      	movs	r2, #1
 800f3c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	2201      	movs	r2, #1
 800f3ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	2201      	movs	r2, #1
 800f3d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	2201      	movs	r2, #1
 800f3da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	2201      	movs	r2, #1
 800f3e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	2201      	movs	r2, #1
 800f3ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f3ee:	2300      	movs	r3, #0
}
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	3708      	adds	r7, #8
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	bd80      	pop	{r7, pc}

0800f3f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b082      	sub	sp, #8
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d101      	bne.n	800f40a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f406:	2301      	movs	r3, #1
 800f408:	e049      	b.n	800f49e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f410:	b2db      	uxtb	r3, r3
 800f412:	2b00      	cmp	r3, #0
 800f414:	d106      	bne.n	800f424 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	2200      	movs	r2, #0
 800f41a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f41e:	6878      	ldr	r0, [r7, #4]
 800f420:	f7f3 fd98 	bl	8002f54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	2202      	movs	r2, #2
 800f428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	681a      	ldr	r2, [r3, #0]
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	3304      	adds	r3, #4
 800f434:	4619      	mov	r1, r3
 800f436:	4610      	mov	r0, r2
 800f438:	f000 fed2 	bl	80101e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	2201      	movs	r2, #1
 800f440:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	2201      	movs	r2, #1
 800f448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	2201      	movs	r2, #1
 800f450:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	2201      	movs	r2, #1
 800f458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	2201      	movs	r2, #1
 800f460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	2201      	movs	r2, #1
 800f468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	2201      	movs	r2, #1
 800f470:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	2201      	movs	r2, #1
 800f478:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	2201      	movs	r2, #1
 800f480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	2201      	movs	r2, #1
 800f488:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	2201      	movs	r2, #1
 800f490:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	2201      	movs	r2, #1
 800f498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f49c:	2300      	movs	r3, #0
}
 800f49e:	4618      	mov	r0, r3
 800f4a0:	3708      	adds	r7, #8
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	bd80      	pop	{r7, pc}
	...

0800f4a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b084      	sub	sp, #16
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
 800f4b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d109      	bne.n	800f4cc <HAL_TIM_PWM_Start+0x24>
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f4be:	b2db      	uxtb	r3, r3
 800f4c0:	2b01      	cmp	r3, #1
 800f4c2:	bf14      	ite	ne
 800f4c4:	2301      	movne	r3, #1
 800f4c6:	2300      	moveq	r3, #0
 800f4c8:	b2db      	uxtb	r3, r3
 800f4ca:	e03c      	b.n	800f546 <HAL_TIM_PWM_Start+0x9e>
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	2b04      	cmp	r3, #4
 800f4d0:	d109      	bne.n	800f4e6 <HAL_TIM_PWM_Start+0x3e>
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f4d8:	b2db      	uxtb	r3, r3
 800f4da:	2b01      	cmp	r3, #1
 800f4dc:	bf14      	ite	ne
 800f4de:	2301      	movne	r3, #1
 800f4e0:	2300      	moveq	r3, #0
 800f4e2:	b2db      	uxtb	r3, r3
 800f4e4:	e02f      	b.n	800f546 <HAL_TIM_PWM_Start+0x9e>
 800f4e6:	683b      	ldr	r3, [r7, #0]
 800f4e8:	2b08      	cmp	r3, #8
 800f4ea:	d109      	bne.n	800f500 <HAL_TIM_PWM_Start+0x58>
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f4f2:	b2db      	uxtb	r3, r3
 800f4f4:	2b01      	cmp	r3, #1
 800f4f6:	bf14      	ite	ne
 800f4f8:	2301      	movne	r3, #1
 800f4fa:	2300      	moveq	r3, #0
 800f4fc:	b2db      	uxtb	r3, r3
 800f4fe:	e022      	b.n	800f546 <HAL_TIM_PWM_Start+0x9e>
 800f500:	683b      	ldr	r3, [r7, #0]
 800f502:	2b0c      	cmp	r3, #12
 800f504:	d109      	bne.n	800f51a <HAL_TIM_PWM_Start+0x72>
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f50c:	b2db      	uxtb	r3, r3
 800f50e:	2b01      	cmp	r3, #1
 800f510:	bf14      	ite	ne
 800f512:	2301      	movne	r3, #1
 800f514:	2300      	moveq	r3, #0
 800f516:	b2db      	uxtb	r3, r3
 800f518:	e015      	b.n	800f546 <HAL_TIM_PWM_Start+0x9e>
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	2b10      	cmp	r3, #16
 800f51e:	d109      	bne.n	800f534 <HAL_TIM_PWM_Start+0x8c>
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f526:	b2db      	uxtb	r3, r3
 800f528:	2b01      	cmp	r3, #1
 800f52a:	bf14      	ite	ne
 800f52c:	2301      	movne	r3, #1
 800f52e:	2300      	moveq	r3, #0
 800f530:	b2db      	uxtb	r3, r3
 800f532:	e008      	b.n	800f546 <HAL_TIM_PWM_Start+0x9e>
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f53a:	b2db      	uxtb	r3, r3
 800f53c:	2b01      	cmp	r3, #1
 800f53e:	bf14      	ite	ne
 800f540:	2301      	movne	r3, #1
 800f542:	2300      	moveq	r3, #0
 800f544:	b2db      	uxtb	r3, r3
 800f546:	2b00      	cmp	r3, #0
 800f548:	d001      	beq.n	800f54e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800f54a:	2301      	movs	r3, #1
 800f54c:	e0ab      	b.n	800f6a6 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f54e:	683b      	ldr	r3, [r7, #0]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d104      	bne.n	800f55e <HAL_TIM_PWM_Start+0xb6>
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	2202      	movs	r2, #2
 800f558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f55c:	e023      	b.n	800f5a6 <HAL_TIM_PWM_Start+0xfe>
 800f55e:	683b      	ldr	r3, [r7, #0]
 800f560:	2b04      	cmp	r3, #4
 800f562:	d104      	bne.n	800f56e <HAL_TIM_PWM_Start+0xc6>
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	2202      	movs	r2, #2
 800f568:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f56c:	e01b      	b.n	800f5a6 <HAL_TIM_PWM_Start+0xfe>
 800f56e:	683b      	ldr	r3, [r7, #0]
 800f570:	2b08      	cmp	r3, #8
 800f572:	d104      	bne.n	800f57e <HAL_TIM_PWM_Start+0xd6>
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2202      	movs	r2, #2
 800f578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f57c:	e013      	b.n	800f5a6 <HAL_TIM_PWM_Start+0xfe>
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	2b0c      	cmp	r3, #12
 800f582:	d104      	bne.n	800f58e <HAL_TIM_PWM_Start+0xe6>
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	2202      	movs	r2, #2
 800f588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f58c:	e00b      	b.n	800f5a6 <HAL_TIM_PWM_Start+0xfe>
 800f58e:	683b      	ldr	r3, [r7, #0]
 800f590:	2b10      	cmp	r3, #16
 800f592:	d104      	bne.n	800f59e <HAL_TIM_PWM_Start+0xf6>
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	2202      	movs	r2, #2
 800f598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f59c:	e003      	b.n	800f5a6 <HAL_TIM_PWM_Start+0xfe>
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	2202      	movs	r2, #2
 800f5a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	2201      	movs	r2, #1
 800f5ac:	6839      	ldr	r1, [r7, #0]
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f001 f992 	bl	80108d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	4a3d      	ldr	r2, [pc, #244]	; (800f6b0 <HAL_TIM_PWM_Start+0x208>)
 800f5ba:	4293      	cmp	r3, r2
 800f5bc:	d013      	beq.n	800f5e6 <HAL_TIM_PWM_Start+0x13e>
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	4a3c      	ldr	r2, [pc, #240]	; (800f6b4 <HAL_TIM_PWM_Start+0x20c>)
 800f5c4:	4293      	cmp	r3, r2
 800f5c6:	d00e      	beq.n	800f5e6 <HAL_TIM_PWM_Start+0x13e>
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	4a3a      	ldr	r2, [pc, #232]	; (800f6b8 <HAL_TIM_PWM_Start+0x210>)
 800f5ce:	4293      	cmp	r3, r2
 800f5d0:	d009      	beq.n	800f5e6 <HAL_TIM_PWM_Start+0x13e>
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	4a39      	ldr	r2, [pc, #228]	; (800f6bc <HAL_TIM_PWM_Start+0x214>)
 800f5d8:	4293      	cmp	r3, r2
 800f5da:	d004      	beq.n	800f5e6 <HAL_TIM_PWM_Start+0x13e>
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	4a37      	ldr	r2, [pc, #220]	; (800f6c0 <HAL_TIM_PWM_Start+0x218>)
 800f5e2:	4293      	cmp	r3, r2
 800f5e4:	d101      	bne.n	800f5ea <HAL_TIM_PWM_Start+0x142>
 800f5e6:	2301      	movs	r3, #1
 800f5e8:	e000      	b.n	800f5ec <HAL_TIM_PWM_Start+0x144>
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d007      	beq.n	800f600 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f5fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	4a2a      	ldr	r2, [pc, #168]	; (800f6b0 <HAL_TIM_PWM_Start+0x208>)
 800f606:	4293      	cmp	r3, r2
 800f608:	d02c      	beq.n	800f664 <HAL_TIM_PWM_Start+0x1bc>
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f612:	d027      	beq.n	800f664 <HAL_TIM_PWM_Start+0x1bc>
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	4a2a      	ldr	r2, [pc, #168]	; (800f6c4 <HAL_TIM_PWM_Start+0x21c>)
 800f61a:	4293      	cmp	r3, r2
 800f61c:	d022      	beq.n	800f664 <HAL_TIM_PWM_Start+0x1bc>
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	4a29      	ldr	r2, [pc, #164]	; (800f6c8 <HAL_TIM_PWM_Start+0x220>)
 800f624:	4293      	cmp	r3, r2
 800f626:	d01d      	beq.n	800f664 <HAL_TIM_PWM_Start+0x1bc>
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	4a27      	ldr	r2, [pc, #156]	; (800f6cc <HAL_TIM_PWM_Start+0x224>)
 800f62e:	4293      	cmp	r3, r2
 800f630:	d018      	beq.n	800f664 <HAL_TIM_PWM_Start+0x1bc>
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	4a1f      	ldr	r2, [pc, #124]	; (800f6b4 <HAL_TIM_PWM_Start+0x20c>)
 800f638:	4293      	cmp	r3, r2
 800f63a:	d013      	beq.n	800f664 <HAL_TIM_PWM_Start+0x1bc>
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	4a23      	ldr	r2, [pc, #140]	; (800f6d0 <HAL_TIM_PWM_Start+0x228>)
 800f642:	4293      	cmp	r3, r2
 800f644:	d00e      	beq.n	800f664 <HAL_TIM_PWM_Start+0x1bc>
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	4a1b      	ldr	r2, [pc, #108]	; (800f6b8 <HAL_TIM_PWM_Start+0x210>)
 800f64c:	4293      	cmp	r3, r2
 800f64e:	d009      	beq.n	800f664 <HAL_TIM_PWM_Start+0x1bc>
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	4a1f      	ldr	r2, [pc, #124]	; (800f6d4 <HAL_TIM_PWM_Start+0x22c>)
 800f656:	4293      	cmp	r3, r2
 800f658:	d004      	beq.n	800f664 <HAL_TIM_PWM_Start+0x1bc>
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	4a1e      	ldr	r2, [pc, #120]	; (800f6d8 <HAL_TIM_PWM_Start+0x230>)
 800f660:	4293      	cmp	r3, r2
 800f662:	d115      	bne.n	800f690 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	689a      	ldr	r2, [r3, #8]
 800f66a:	4b1c      	ldr	r3, [pc, #112]	; (800f6dc <HAL_TIM_PWM_Start+0x234>)
 800f66c:	4013      	ands	r3, r2
 800f66e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	2b06      	cmp	r3, #6
 800f674:	d015      	beq.n	800f6a2 <HAL_TIM_PWM_Start+0x1fa>
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f67c:	d011      	beq.n	800f6a2 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	681a      	ldr	r2, [r3, #0]
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	f042 0201 	orr.w	r2, r2, #1
 800f68c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f68e:	e008      	b.n	800f6a2 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	681a      	ldr	r2, [r3, #0]
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	f042 0201 	orr.w	r2, r2, #1
 800f69e:	601a      	str	r2, [r3, #0]
 800f6a0:	e000      	b.n	800f6a4 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f6a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f6a4:	2300      	movs	r3, #0
}
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	3710      	adds	r7, #16
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	bd80      	pop	{r7, pc}
 800f6ae:	bf00      	nop
 800f6b0:	40010000 	.word	0x40010000
 800f6b4:	40010400 	.word	0x40010400
 800f6b8:	40014000 	.word	0x40014000
 800f6bc:	40014400 	.word	0x40014400
 800f6c0:	40014800 	.word	0x40014800
 800f6c4:	40000400 	.word	0x40000400
 800f6c8:	40000800 	.word	0x40000800
 800f6cc:	40000c00 	.word	0x40000c00
 800f6d0:	40001800 	.word	0x40001800
 800f6d4:	4000e000 	.word	0x4000e000
 800f6d8:	4000e400 	.word	0x4000e400
 800f6dc:	00010007 	.word	0x00010007

0800f6e0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b086      	sub	sp, #24
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	60f8      	str	r0, [r7, #12]
 800f6e8:	60b9      	str	r1, [r7, #8]
 800f6ea:	607a      	str	r2, [r7, #4]
 800f6ec:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800f6f2:	68bb      	ldr	r3, [r7, #8]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d109      	bne.n	800f70c <HAL_TIM_PWM_Start_DMA+0x2c>
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f6fe:	b2db      	uxtb	r3, r3
 800f700:	2b02      	cmp	r3, #2
 800f702:	bf0c      	ite	eq
 800f704:	2301      	moveq	r3, #1
 800f706:	2300      	movne	r3, #0
 800f708:	b2db      	uxtb	r3, r3
 800f70a:	e03c      	b.n	800f786 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f70c:	68bb      	ldr	r3, [r7, #8]
 800f70e:	2b04      	cmp	r3, #4
 800f710:	d109      	bne.n	800f726 <HAL_TIM_PWM_Start_DMA+0x46>
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f718:	b2db      	uxtb	r3, r3
 800f71a:	2b02      	cmp	r3, #2
 800f71c:	bf0c      	ite	eq
 800f71e:	2301      	moveq	r3, #1
 800f720:	2300      	movne	r3, #0
 800f722:	b2db      	uxtb	r3, r3
 800f724:	e02f      	b.n	800f786 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f726:	68bb      	ldr	r3, [r7, #8]
 800f728:	2b08      	cmp	r3, #8
 800f72a:	d109      	bne.n	800f740 <HAL_TIM_PWM_Start_DMA+0x60>
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f732:	b2db      	uxtb	r3, r3
 800f734:	2b02      	cmp	r3, #2
 800f736:	bf0c      	ite	eq
 800f738:	2301      	moveq	r3, #1
 800f73a:	2300      	movne	r3, #0
 800f73c:	b2db      	uxtb	r3, r3
 800f73e:	e022      	b.n	800f786 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f740:	68bb      	ldr	r3, [r7, #8]
 800f742:	2b0c      	cmp	r3, #12
 800f744:	d109      	bne.n	800f75a <HAL_TIM_PWM_Start_DMA+0x7a>
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f74c:	b2db      	uxtb	r3, r3
 800f74e:	2b02      	cmp	r3, #2
 800f750:	bf0c      	ite	eq
 800f752:	2301      	moveq	r3, #1
 800f754:	2300      	movne	r3, #0
 800f756:	b2db      	uxtb	r3, r3
 800f758:	e015      	b.n	800f786 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f75a:	68bb      	ldr	r3, [r7, #8]
 800f75c:	2b10      	cmp	r3, #16
 800f75e:	d109      	bne.n	800f774 <HAL_TIM_PWM_Start_DMA+0x94>
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f766:	b2db      	uxtb	r3, r3
 800f768:	2b02      	cmp	r3, #2
 800f76a:	bf0c      	ite	eq
 800f76c:	2301      	moveq	r3, #1
 800f76e:	2300      	movne	r3, #0
 800f770:	b2db      	uxtb	r3, r3
 800f772:	e008      	b.n	800f786 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f77a:	b2db      	uxtb	r3, r3
 800f77c:	2b02      	cmp	r3, #2
 800f77e:	bf0c      	ite	eq
 800f780:	2301      	moveq	r3, #1
 800f782:	2300      	movne	r3, #0
 800f784:	b2db      	uxtb	r3, r3
 800f786:	2b00      	cmp	r3, #0
 800f788:	d001      	beq.n	800f78e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800f78a:	2302      	movs	r3, #2
 800f78c:	e1ba      	b.n	800fb04 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800f78e:	68bb      	ldr	r3, [r7, #8]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d109      	bne.n	800f7a8 <HAL_TIM_PWM_Start_DMA+0xc8>
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f79a:	b2db      	uxtb	r3, r3
 800f79c:	2b01      	cmp	r3, #1
 800f79e:	bf0c      	ite	eq
 800f7a0:	2301      	moveq	r3, #1
 800f7a2:	2300      	movne	r3, #0
 800f7a4:	b2db      	uxtb	r3, r3
 800f7a6:	e03c      	b.n	800f822 <HAL_TIM_PWM_Start_DMA+0x142>
 800f7a8:	68bb      	ldr	r3, [r7, #8]
 800f7aa:	2b04      	cmp	r3, #4
 800f7ac:	d109      	bne.n	800f7c2 <HAL_TIM_PWM_Start_DMA+0xe2>
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f7b4:	b2db      	uxtb	r3, r3
 800f7b6:	2b01      	cmp	r3, #1
 800f7b8:	bf0c      	ite	eq
 800f7ba:	2301      	moveq	r3, #1
 800f7bc:	2300      	movne	r3, #0
 800f7be:	b2db      	uxtb	r3, r3
 800f7c0:	e02f      	b.n	800f822 <HAL_TIM_PWM_Start_DMA+0x142>
 800f7c2:	68bb      	ldr	r3, [r7, #8]
 800f7c4:	2b08      	cmp	r3, #8
 800f7c6:	d109      	bne.n	800f7dc <HAL_TIM_PWM_Start_DMA+0xfc>
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f7ce:	b2db      	uxtb	r3, r3
 800f7d0:	2b01      	cmp	r3, #1
 800f7d2:	bf0c      	ite	eq
 800f7d4:	2301      	moveq	r3, #1
 800f7d6:	2300      	movne	r3, #0
 800f7d8:	b2db      	uxtb	r3, r3
 800f7da:	e022      	b.n	800f822 <HAL_TIM_PWM_Start_DMA+0x142>
 800f7dc:	68bb      	ldr	r3, [r7, #8]
 800f7de:	2b0c      	cmp	r3, #12
 800f7e0:	d109      	bne.n	800f7f6 <HAL_TIM_PWM_Start_DMA+0x116>
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f7e8:	b2db      	uxtb	r3, r3
 800f7ea:	2b01      	cmp	r3, #1
 800f7ec:	bf0c      	ite	eq
 800f7ee:	2301      	moveq	r3, #1
 800f7f0:	2300      	movne	r3, #0
 800f7f2:	b2db      	uxtb	r3, r3
 800f7f4:	e015      	b.n	800f822 <HAL_TIM_PWM_Start_DMA+0x142>
 800f7f6:	68bb      	ldr	r3, [r7, #8]
 800f7f8:	2b10      	cmp	r3, #16
 800f7fa:	d109      	bne.n	800f810 <HAL_TIM_PWM_Start_DMA+0x130>
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f802:	b2db      	uxtb	r3, r3
 800f804:	2b01      	cmp	r3, #1
 800f806:	bf0c      	ite	eq
 800f808:	2301      	moveq	r3, #1
 800f80a:	2300      	movne	r3, #0
 800f80c:	b2db      	uxtb	r3, r3
 800f80e:	e008      	b.n	800f822 <HAL_TIM_PWM_Start_DMA+0x142>
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f816:	b2db      	uxtb	r3, r3
 800f818:	2b01      	cmp	r3, #1
 800f81a:	bf0c      	ite	eq
 800f81c:	2301      	moveq	r3, #1
 800f81e:	2300      	movne	r3, #0
 800f820:	b2db      	uxtb	r3, r3
 800f822:	2b00      	cmp	r3, #0
 800f824:	d034      	beq.n	800f890 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d002      	beq.n	800f832 <HAL_TIM_PWM_Start_DMA+0x152>
 800f82c:	887b      	ldrh	r3, [r7, #2]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d101      	bne.n	800f836 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800f832:	2301      	movs	r3, #1
 800f834:	e166      	b.n	800fb04 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f836:	68bb      	ldr	r3, [r7, #8]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d104      	bne.n	800f846 <HAL_TIM_PWM_Start_DMA+0x166>
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	2202      	movs	r2, #2
 800f840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f844:	e026      	b.n	800f894 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f846:	68bb      	ldr	r3, [r7, #8]
 800f848:	2b04      	cmp	r3, #4
 800f84a:	d104      	bne.n	800f856 <HAL_TIM_PWM_Start_DMA+0x176>
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	2202      	movs	r2, #2
 800f850:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f854:	e01e      	b.n	800f894 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f856:	68bb      	ldr	r3, [r7, #8]
 800f858:	2b08      	cmp	r3, #8
 800f85a:	d104      	bne.n	800f866 <HAL_TIM_PWM_Start_DMA+0x186>
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	2202      	movs	r2, #2
 800f860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f864:	e016      	b.n	800f894 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f866:	68bb      	ldr	r3, [r7, #8]
 800f868:	2b0c      	cmp	r3, #12
 800f86a:	d104      	bne.n	800f876 <HAL_TIM_PWM_Start_DMA+0x196>
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	2202      	movs	r2, #2
 800f870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f874:	e00e      	b.n	800f894 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f876:	68bb      	ldr	r3, [r7, #8]
 800f878:	2b10      	cmp	r3, #16
 800f87a:	d104      	bne.n	800f886 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	2202      	movs	r2, #2
 800f880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f884:	e006      	b.n	800f894 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	2202      	movs	r2, #2
 800f88a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f88e:	e001      	b.n	800f894 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800f890:	2301      	movs	r3, #1
 800f892:	e137      	b.n	800fb04 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800f894:	68bb      	ldr	r3, [r7, #8]
 800f896:	2b0c      	cmp	r3, #12
 800f898:	f200 80ae 	bhi.w	800f9f8 <HAL_TIM_PWM_Start_DMA+0x318>
 800f89c:	a201      	add	r2, pc, #4	; (adr r2, 800f8a4 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800f89e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8a2:	bf00      	nop
 800f8a4:	0800f8d9 	.word	0x0800f8d9
 800f8a8:	0800f9f9 	.word	0x0800f9f9
 800f8ac:	0800f9f9 	.word	0x0800f9f9
 800f8b0:	0800f9f9 	.word	0x0800f9f9
 800f8b4:	0800f921 	.word	0x0800f921
 800f8b8:	0800f9f9 	.word	0x0800f9f9
 800f8bc:	0800f9f9 	.word	0x0800f9f9
 800f8c0:	0800f9f9 	.word	0x0800f9f9
 800f8c4:	0800f969 	.word	0x0800f969
 800f8c8:	0800f9f9 	.word	0x0800f9f9
 800f8cc:	0800f9f9 	.word	0x0800f9f9
 800f8d0:	0800f9f9 	.word	0x0800f9f9
 800f8d4:	0800f9b1 	.word	0x0800f9b1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8dc:	4a8b      	ldr	r2, [pc, #556]	; (800fb0c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f8de:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8e4:	4a8a      	ldr	r2, [pc, #552]	; (800fb10 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f8e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8ec:	4a89      	ldr	r2, [pc, #548]	; (800fb14 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f8ee:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f8f4:	6879      	ldr	r1, [r7, #4]
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	3334      	adds	r3, #52	; 0x34
 800f8fc:	461a      	mov	r2, r3
 800f8fe:	887b      	ldrh	r3, [r7, #2]
 800f900:	f7f6 f872 	bl	80059e8 <HAL_DMA_Start_IT>
 800f904:	4603      	mov	r3, r0
 800f906:	2b00      	cmp	r3, #0
 800f908:	d001      	beq.n	800f90e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f90a:	2301      	movs	r3, #1
 800f90c:	e0fa      	b.n	800fb04 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	68da      	ldr	r2, [r3, #12]
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f91c:	60da      	str	r2, [r3, #12]
      break;
 800f91e:	e06e      	b.n	800f9fe <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f924:	4a79      	ldr	r2, [pc, #484]	; (800fb0c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f926:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f92c:	4a78      	ldr	r2, [pc, #480]	; (800fb10 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f92e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f934:	4a77      	ldr	r2, [pc, #476]	; (800fb14 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f936:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800f93c:	6879      	ldr	r1, [r7, #4]
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	3338      	adds	r3, #56	; 0x38
 800f944:	461a      	mov	r2, r3
 800f946:	887b      	ldrh	r3, [r7, #2]
 800f948:	f7f6 f84e 	bl	80059e8 <HAL_DMA_Start_IT>
 800f94c:	4603      	mov	r3, r0
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d001      	beq.n	800f956 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f952:	2301      	movs	r3, #1
 800f954:	e0d6      	b.n	800fb04 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	68da      	ldr	r2, [r3, #12]
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f964:	60da      	str	r2, [r3, #12]
      break;
 800f966:	e04a      	b.n	800f9fe <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f96c:	4a67      	ldr	r2, [pc, #412]	; (800fb0c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f96e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f974:	4a66      	ldr	r2, [pc, #408]	; (800fb10 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f976:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f97c:	4a65      	ldr	r2, [pc, #404]	; (800fb14 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f97e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800f984:	6879      	ldr	r1, [r7, #4]
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	333c      	adds	r3, #60	; 0x3c
 800f98c:	461a      	mov	r2, r3
 800f98e:	887b      	ldrh	r3, [r7, #2]
 800f990:	f7f6 f82a 	bl	80059e8 <HAL_DMA_Start_IT>
 800f994:	4603      	mov	r3, r0
 800f996:	2b00      	cmp	r3, #0
 800f998:	d001      	beq.n	800f99e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f99a:	2301      	movs	r3, #1
 800f99c:	e0b2      	b.n	800fb04 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	68da      	ldr	r2, [r3, #12]
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f9ac:	60da      	str	r2, [r3, #12]
      break;
 800f9ae:	e026      	b.n	800f9fe <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9b4:	4a55      	ldr	r2, [pc, #340]	; (800fb0c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f9b6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9bc:	4a54      	ldr	r2, [pc, #336]	; (800fb10 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f9be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9c4:	4a53      	ldr	r2, [pc, #332]	; (800fb14 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f9c6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f9cc:	6879      	ldr	r1, [r7, #4]
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	3340      	adds	r3, #64	; 0x40
 800f9d4:	461a      	mov	r2, r3
 800f9d6:	887b      	ldrh	r3, [r7, #2]
 800f9d8:	f7f6 f806 	bl	80059e8 <HAL_DMA_Start_IT>
 800f9dc:	4603      	mov	r3, r0
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d001      	beq.n	800f9e6 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f9e2:	2301      	movs	r3, #1
 800f9e4:	e08e      	b.n	800fb04 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	68da      	ldr	r2, [r3, #12]
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f9f4:	60da      	str	r2, [r3, #12]
      break;
 800f9f6:	e002      	b.n	800f9fe <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800f9f8:	2301      	movs	r3, #1
 800f9fa:	75fb      	strb	r3, [r7, #23]
      break;
 800f9fc:	bf00      	nop
  }

  if (status == HAL_OK)
 800f9fe:	7dfb      	ldrb	r3, [r7, #23]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d17e      	bne.n	800fb02 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	2201      	movs	r2, #1
 800fa0a:	68b9      	ldr	r1, [r7, #8]
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	f000 ff63 	bl	80108d8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	4a40      	ldr	r2, [pc, #256]	; (800fb18 <HAL_TIM_PWM_Start_DMA+0x438>)
 800fa18:	4293      	cmp	r3, r2
 800fa1a:	d013      	beq.n	800fa44 <HAL_TIM_PWM_Start_DMA+0x364>
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	4a3e      	ldr	r2, [pc, #248]	; (800fb1c <HAL_TIM_PWM_Start_DMA+0x43c>)
 800fa22:	4293      	cmp	r3, r2
 800fa24:	d00e      	beq.n	800fa44 <HAL_TIM_PWM_Start_DMA+0x364>
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	4a3d      	ldr	r2, [pc, #244]	; (800fb20 <HAL_TIM_PWM_Start_DMA+0x440>)
 800fa2c:	4293      	cmp	r3, r2
 800fa2e:	d009      	beq.n	800fa44 <HAL_TIM_PWM_Start_DMA+0x364>
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	4a3b      	ldr	r2, [pc, #236]	; (800fb24 <HAL_TIM_PWM_Start_DMA+0x444>)
 800fa36:	4293      	cmp	r3, r2
 800fa38:	d004      	beq.n	800fa44 <HAL_TIM_PWM_Start_DMA+0x364>
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	4a3a      	ldr	r2, [pc, #232]	; (800fb28 <HAL_TIM_PWM_Start_DMA+0x448>)
 800fa40:	4293      	cmp	r3, r2
 800fa42:	d101      	bne.n	800fa48 <HAL_TIM_PWM_Start_DMA+0x368>
 800fa44:	2301      	movs	r3, #1
 800fa46:	e000      	b.n	800fa4a <HAL_TIM_PWM_Start_DMA+0x36a>
 800fa48:	2300      	movs	r3, #0
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d007      	beq.n	800fa5e <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fa5c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	4a2d      	ldr	r2, [pc, #180]	; (800fb18 <HAL_TIM_PWM_Start_DMA+0x438>)
 800fa64:	4293      	cmp	r3, r2
 800fa66:	d02c      	beq.n	800fac2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fa70:	d027      	beq.n	800fac2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	4a2d      	ldr	r2, [pc, #180]	; (800fb2c <HAL_TIM_PWM_Start_DMA+0x44c>)
 800fa78:	4293      	cmp	r3, r2
 800fa7a:	d022      	beq.n	800fac2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	4a2b      	ldr	r2, [pc, #172]	; (800fb30 <HAL_TIM_PWM_Start_DMA+0x450>)
 800fa82:	4293      	cmp	r3, r2
 800fa84:	d01d      	beq.n	800fac2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	4a2a      	ldr	r2, [pc, #168]	; (800fb34 <HAL_TIM_PWM_Start_DMA+0x454>)
 800fa8c:	4293      	cmp	r3, r2
 800fa8e:	d018      	beq.n	800fac2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	4a21      	ldr	r2, [pc, #132]	; (800fb1c <HAL_TIM_PWM_Start_DMA+0x43c>)
 800fa96:	4293      	cmp	r3, r2
 800fa98:	d013      	beq.n	800fac2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	4a26      	ldr	r2, [pc, #152]	; (800fb38 <HAL_TIM_PWM_Start_DMA+0x458>)
 800faa0:	4293      	cmp	r3, r2
 800faa2:	d00e      	beq.n	800fac2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	4a1d      	ldr	r2, [pc, #116]	; (800fb20 <HAL_TIM_PWM_Start_DMA+0x440>)
 800faaa:	4293      	cmp	r3, r2
 800faac:	d009      	beq.n	800fac2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	4a22      	ldr	r2, [pc, #136]	; (800fb3c <HAL_TIM_PWM_Start_DMA+0x45c>)
 800fab4:	4293      	cmp	r3, r2
 800fab6:	d004      	beq.n	800fac2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	4a20      	ldr	r2, [pc, #128]	; (800fb40 <HAL_TIM_PWM_Start_DMA+0x460>)
 800fabe:	4293      	cmp	r3, r2
 800fac0:	d115      	bne.n	800faee <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	689a      	ldr	r2, [r3, #8]
 800fac8:	4b1e      	ldr	r3, [pc, #120]	; (800fb44 <HAL_TIM_PWM_Start_DMA+0x464>)
 800faca:	4013      	ands	r3, r2
 800facc:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800face:	693b      	ldr	r3, [r7, #16]
 800fad0:	2b06      	cmp	r3, #6
 800fad2:	d015      	beq.n	800fb00 <HAL_TIM_PWM_Start_DMA+0x420>
 800fad4:	693b      	ldr	r3, [r7, #16]
 800fad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fada:	d011      	beq.n	800fb00 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	681a      	ldr	r2, [r3, #0]
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	f042 0201 	orr.w	r2, r2, #1
 800faea:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800faec:	e008      	b.n	800fb00 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	681a      	ldr	r2, [r3, #0]
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	f042 0201 	orr.w	r2, r2, #1
 800fafc:	601a      	str	r2, [r3, #0]
 800fafe:	e000      	b.n	800fb02 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fb00:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800fb02:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb04:	4618      	mov	r0, r3
 800fb06:	3718      	adds	r7, #24
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bd80      	pop	{r7, pc}
 800fb0c:	080100cf 	.word	0x080100cf
 800fb10:	08010177 	.word	0x08010177
 800fb14:	0801003d 	.word	0x0801003d
 800fb18:	40010000 	.word	0x40010000
 800fb1c:	40010400 	.word	0x40010400
 800fb20:	40014000 	.word	0x40014000
 800fb24:	40014400 	.word	0x40014400
 800fb28:	40014800 	.word	0x40014800
 800fb2c:	40000400 	.word	0x40000400
 800fb30:	40000800 	.word	0x40000800
 800fb34:	40000c00 	.word	0x40000c00
 800fb38:	40001800 	.word	0x40001800
 800fb3c:	4000e000 	.word	0x4000e000
 800fb40:	4000e400 	.word	0x4000e400
 800fb44:	00010007 	.word	0x00010007

0800fb48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b082      	sub	sp, #8
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	691b      	ldr	r3, [r3, #16]
 800fb56:	f003 0302 	and.w	r3, r3, #2
 800fb5a:	2b02      	cmp	r3, #2
 800fb5c:	d122      	bne.n	800fba4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	68db      	ldr	r3, [r3, #12]
 800fb64:	f003 0302 	and.w	r3, r3, #2
 800fb68:	2b02      	cmp	r3, #2
 800fb6a:	d11b      	bne.n	800fba4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	f06f 0202 	mvn.w	r2, #2
 800fb74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	2201      	movs	r2, #1
 800fb7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	699b      	ldr	r3, [r3, #24]
 800fb82:	f003 0303 	and.w	r3, r3, #3
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d003      	beq.n	800fb92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fb8a:	6878      	ldr	r0, [r7, #4]
 800fb8c:	f000 fa24 	bl	800ffd8 <HAL_TIM_IC_CaptureCallback>
 800fb90:	e005      	b.n	800fb9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fb92:	6878      	ldr	r0, [r7, #4]
 800fb94:	f000 fa16 	bl	800ffc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fb98:	6878      	ldr	r0, [r7, #4]
 800fb9a:	f000 fa27 	bl	800ffec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	2200      	movs	r2, #0
 800fba2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	691b      	ldr	r3, [r3, #16]
 800fbaa:	f003 0304 	and.w	r3, r3, #4
 800fbae:	2b04      	cmp	r3, #4
 800fbb0:	d122      	bne.n	800fbf8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	68db      	ldr	r3, [r3, #12]
 800fbb8:	f003 0304 	and.w	r3, r3, #4
 800fbbc:	2b04      	cmp	r3, #4
 800fbbe:	d11b      	bne.n	800fbf8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	f06f 0204 	mvn.w	r2, #4
 800fbc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	2202      	movs	r2, #2
 800fbce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	699b      	ldr	r3, [r3, #24]
 800fbd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d003      	beq.n	800fbe6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fbde:	6878      	ldr	r0, [r7, #4]
 800fbe0:	f000 f9fa 	bl	800ffd8 <HAL_TIM_IC_CaptureCallback>
 800fbe4:	e005      	b.n	800fbf2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fbe6:	6878      	ldr	r0, [r7, #4]
 800fbe8:	f000 f9ec 	bl	800ffc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fbec:	6878      	ldr	r0, [r7, #4]
 800fbee:	f000 f9fd 	bl	800ffec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	2200      	movs	r2, #0
 800fbf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	691b      	ldr	r3, [r3, #16]
 800fbfe:	f003 0308 	and.w	r3, r3, #8
 800fc02:	2b08      	cmp	r3, #8
 800fc04:	d122      	bne.n	800fc4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	68db      	ldr	r3, [r3, #12]
 800fc0c:	f003 0308 	and.w	r3, r3, #8
 800fc10:	2b08      	cmp	r3, #8
 800fc12:	d11b      	bne.n	800fc4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	f06f 0208 	mvn.w	r2, #8
 800fc1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	2204      	movs	r2, #4
 800fc22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	69db      	ldr	r3, [r3, #28]
 800fc2a:	f003 0303 	and.w	r3, r3, #3
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d003      	beq.n	800fc3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fc32:	6878      	ldr	r0, [r7, #4]
 800fc34:	f000 f9d0 	bl	800ffd8 <HAL_TIM_IC_CaptureCallback>
 800fc38:	e005      	b.n	800fc46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fc3a:	6878      	ldr	r0, [r7, #4]
 800fc3c:	f000 f9c2 	bl	800ffc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fc40:	6878      	ldr	r0, [r7, #4]
 800fc42:	f000 f9d3 	bl	800ffec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	2200      	movs	r2, #0
 800fc4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	691b      	ldr	r3, [r3, #16]
 800fc52:	f003 0310 	and.w	r3, r3, #16
 800fc56:	2b10      	cmp	r3, #16
 800fc58:	d122      	bne.n	800fca0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	68db      	ldr	r3, [r3, #12]
 800fc60:	f003 0310 	and.w	r3, r3, #16
 800fc64:	2b10      	cmp	r3, #16
 800fc66:	d11b      	bne.n	800fca0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	f06f 0210 	mvn.w	r2, #16
 800fc70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	2208      	movs	r2, #8
 800fc76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	69db      	ldr	r3, [r3, #28]
 800fc7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d003      	beq.n	800fc8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fc86:	6878      	ldr	r0, [r7, #4]
 800fc88:	f000 f9a6 	bl	800ffd8 <HAL_TIM_IC_CaptureCallback>
 800fc8c:	e005      	b.n	800fc9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fc8e:	6878      	ldr	r0, [r7, #4]
 800fc90:	f000 f998 	bl	800ffc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fc94:	6878      	ldr	r0, [r7, #4]
 800fc96:	f000 f9a9 	bl	800ffec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	2200      	movs	r2, #0
 800fc9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	691b      	ldr	r3, [r3, #16]
 800fca6:	f003 0301 	and.w	r3, r3, #1
 800fcaa:	2b01      	cmp	r3, #1
 800fcac:	d10e      	bne.n	800fccc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	68db      	ldr	r3, [r3, #12]
 800fcb4:	f003 0301 	and.w	r3, r3, #1
 800fcb8:	2b01      	cmp	r3, #1
 800fcba:	d107      	bne.n	800fccc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	f06f 0201 	mvn.w	r2, #1
 800fcc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fcc6:	6878      	ldr	r0, [r7, #4]
 800fcc8:	f000 f972 	bl	800ffb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	691b      	ldr	r3, [r3, #16]
 800fcd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fcd6:	2b80      	cmp	r3, #128	; 0x80
 800fcd8:	d10e      	bne.n	800fcf8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	68db      	ldr	r3, [r3, #12]
 800fce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fce4:	2b80      	cmp	r3, #128	; 0x80
 800fce6:	d107      	bne.n	800fcf8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800fcf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fcf2:	6878      	ldr	r0, [r7, #4]
 800fcf4:	f000 febc 	bl	8010a70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	691b      	ldr	r3, [r3, #16]
 800fcfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fd02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd06:	d10e      	bne.n	800fd26 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	68db      	ldr	r3, [r3, #12]
 800fd0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd12:	2b80      	cmp	r3, #128	; 0x80
 800fd14:	d107      	bne.n	800fd26 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800fd1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800fd20:	6878      	ldr	r0, [r7, #4]
 800fd22:	f000 feaf 	bl	8010a84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	691b      	ldr	r3, [r3, #16]
 800fd2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd30:	2b40      	cmp	r3, #64	; 0x40
 800fd32:	d10e      	bne.n	800fd52 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	68db      	ldr	r3, [r3, #12]
 800fd3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd3e:	2b40      	cmp	r3, #64	; 0x40
 800fd40:	d107      	bne.n	800fd52 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fd4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fd4c:	6878      	ldr	r0, [r7, #4]
 800fd4e:	f000 f961 	bl	8010014 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	691b      	ldr	r3, [r3, #16]
 800fd58:	f003 0320 	and.w	r3, r3, #32
 800fd5c:	2b20      	cmp	r3, #32
 800fd5e:	d10e      	bne.n	800fd7e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	68db      	ldr	r3, [r3, #12]
 800fd66:	f003 0320 	and.w	r3, r3, #32
 800fd6a:	2b20      	cmp	r3, #32
 800fd6c:	d107      	bne.n	800fd7e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	f06f 0220 	mvn.w	r2, #32
 800fd76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fd78:	6878      	ldr	r0, [r7, #4]
 800fd7a:	f000 fe6f 	bl	8010a5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fd7e:	bf00      	nop
 800fd80:	3708      	adds	r7, #8
 800fd82:	46bd      	mov	sp, r7
 800fd84:	bd80      	pop	{r7, pc}
	...

0800fd88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b086      	sub	sp, #24
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	60f8      	str	r0, [r7, #12]
 800fd90:	60b9      	str	r1, [r7, #8]
 800fd92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fd94:	2300      	movs	r3, #0
 800fd96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fd9e:	2b01      	cmp	r3, #1
 800fda0:	d101      	bne.n	800fda6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800fda2:	2302      	movs	r3, #2
 800fda4:	e0ff      	b.n	800ffa6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	2201      	movs	r2, #1
 800fdaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	2b14      	cmp	r3, #20
 800fdb2:	f200 80f0 	bhi.w	800ff96 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800fdb6:	a201      	add	r2, pc, #4	; (adr r2, 800fdbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800fdb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdbc:	0800fe11 	.word	0x0800fe11
 800fdc0:	0800ff97 	.word	0x0800ff97
 800fdc4:	0800ff97 	.word	0x0800ff97
 800fdc8:	0800ff97 	.word	0x0800ff97
 800fdcc:	0800fe51 	.word	0x0800fe51
 800fdd0:	0800ff97 	.word	0x0800ff97
 800fdd4:	0800ff97 	.word	0x0800ff97
 800fdd8:	0800ff97 	.word	0x0800ff97
 800fddc:	0800fe93 	.word	0x0800fe93
 800fde0:	0800ff97 	.word	0x0800ff97
 800fde4:	0800ff97 	.word	0x0800ff97
 800fde8:	0800ff97 	.word	0x0800ff97
 800fdec:	0800fed3 	.word	0x0800fed3
 800fdf0:	0800ff97 	.word	0x0800ff97
 800fdf4:	0800ff97 	.word	0x0800ff97
 800fdf8:	0800ff97 	.word	0x0800ff97
 800fdfc:	0800ff15 	.word	0x0800ff15
 800fe00:	0800ff97 	.word	0x0800ff97
 800fe04:	0800ff97 	.word	0x0800ff97
 800fe08:	0800ff97 	.word	0x0800ff97
 800fe0c:	0800ff55 	.word	0x0800ff55
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	68b9      	ldr	r1, [r7, #8]
 800fe16:	4618      	mov	r0, r3
 800fe18:	f000 fa88 	bl	801032c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	699a      	ldr	r2, [r3, #24]
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	f042 0208 	orr.w	r2, r2, #8
 800fe2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	699a      	ldr	r2, [r3, #24]
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	f022 0204 	bic.w	r2, r2, #4
 800fe3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	6999      	ldr	r1, [r3, #24]
 800fe42:	68bb      	ldr	r3, [r7, #8]
 800fe44:	691a      	ldr	r2, [r3, #16]
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	430a      	orrs	r2, r1
 800fe4c:	619a      	str	r2, [r3, #24]
      break;
 800fe4e:	e0a5      	b.n	800ff9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	68b9      	ldr	r1, [r7, #8]
 800fe56:	4618      	mov	r0, r3
 800fe58:	f000 faf8 	bl	801044c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	699a      	ldr	r2, [r3, #24]
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fe6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	699a      	ldr	r2, [r3, #24]
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fe7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	6999      	ldr	r1, [r3, #24]
 800fe82:	68bb      	ldr	r3, [r7, #8]
 800fe84:	691b      	ldr	r3, [r3, #16]
 800fe86:	021a      	lsls	r2, r3, #8
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	430a      	orrs	r2, r1
 800fe8e:	619a      	str	r2, [r3, #24]
      break;
 800fe90:	e084      	b.n	800ff9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	68b9      	ldr	r1, [r7, #8]
 800fe98:	4618      	mov	r0, r3
 800fe9a:	f000 fb61 	bl	8010560 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	69da      	ldr	r2, [r3, #28]
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	f042 0208 	orr.w	r2, r2, #8
 800feac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	69da      	ldr	r2, [r3, #28]
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	f022 0204 	bic.w	r2, r2, #4
 800febc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	69d9      	ldr	r1, [r3, #28]
 800fec4:	68bb      	ldr	r3, [r7, #8]
 800fec6:	691a      	ldr	r2, [r3, #16]
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	430a      	orrs	r2, r1
 800fece:	61da      	str	r2, [r3, #28]
      break;
 800fed0:	e064      	b.n	800ff9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	68b9      	ldr	r1, [r7, #8]
 800fed8:	4618      	mov	r0, r3
 800feda:	f000 fbc9 	bl	8010670 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	69da      	ldr	r2, [r3, #28]
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800feec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	69da      	ldr	r2, [r3, #28]
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fefc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	69d9      	ldr	r1, [r3, #28]
 800ff04:	68bb      	ldr	r3, [r7, #8]
 800ff06:	691b      	ldr	r3, [r3, #16]
 800ff08:	021a      	lsls	r2, r3, #8
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	430a      	orrs	r2, r1
 800ff10:	61da      	str	r2, [r3, #28]
      break;
 800ff12:	e043      	b.n	800ff9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	68b9      	ldr	r1, [r7, #8]
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	f000 fc12 	bl	8010744 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	f042 0208 	orr.w	r2, r2, #8
 800ff2e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	f022 0204 	bic.w	r2, r2, #4
 800ff3e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ff46:	68bb      	ldr	r3, [r7, #8]
 800ff48:	691a      	ldr	r2, [r3, #16]
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	430a      	orrs	r2, r1
 800ff50:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ff52:	e023      	b.n	800ff9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	68b9      	ldr	r1, [r7, #8]
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	f000 fc56 	bl	801080c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ff6e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ff7e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ff86:	68bb      	ldr	r3, [r7, #8]
 800ff88:	691b      	ldr	r3, [r3, #16]
 800ff8a:	021a      	lsls	r2, r3, #8
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	430a      	orrs	r2, r1
 800ff92:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ff94:	e002      	b.n	800ff9c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ff96:	2301      	movs	r3, #1
 800ff98:	75fb      	strb	r3, [r7, #23]
      break;
 800ff9a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	2200      	movs	r2, #0
 800ffa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ffa4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	3718      	adds	r7, #24
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	bd80      	pop	{r7, pc}
 800ffae:	bf00      	nop

0800ffb0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ffb0:	b480      	push	{r7}
 800ffb2:	b083      	sub	sp, #12
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ffb8:	bf00      	nop
 800ffba:	370c      	adds	r7, #12
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc2:	4770      	bx	lr

0800ffc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ffc4:	b480      	push	{r7}
 800ffc6:	b083      	sub	sp, #12
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ffcc:	bf00      	nop
 800ffce:	370c      	adds	r7, #12
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd6:	4770      	bx	lr

0800ffd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ffd8:	b480      	push	{r7}
 800ffda:	b083      	sub	sp, #12
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ffe0:	bf00      	nop
 800ffe2:	370c      	adds	r7, #12
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffea:	4770      	bx	lr

0800ffec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ffec:	b480      	push	{r7}
 800ffee:	b083      	sub	sp, #12
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fff4:	bf00      	nop
 800fff6:	370c      	adds	r7, #12
 800fff8:	46bd      	mov	sp, r7
 800fffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffe:	4770      	bx	lr

08010000 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010000:	b480      	push	{r7}
 8010002:	b083      	sub	sp, #12
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8010008:	bf00      	nop
 801000a:	370c      	adds	r7, #12
 801000c:	46bd      	mov	sp, r7
 801000e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010012:	4770      	bx	lr

08010014 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010014:	b480      	push	{r7}
 8010016:	b083      	sub	sp, #12
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801001c:	bf00      	nop
 801001e:	370c      	adds	r7, #12
 8010020:	46bd      	mov	sp, r7
 8010022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010026:	4770      	bx	lr

08010028 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8010028:	b480      	push	{r7}
 801002a:	b083      	sub	sp, #12
 801002c:	af00      	add	r7, sp, #0
 801002e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8010030:	bf00      	nop
 8010032:	370c      	adds	r7, #12
 8010034:	46bd      	mov	sp, r7
 8010036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003a:	4770      	bx	lr

0801003c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 801003c:	b580      	push	{r7, lr}
 801003e:	b084      	sub	sp, #16
 8010040:	af00      	add	r7, sp, #0
 8010042:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010048:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801004e:	687a      	ldr	r2, [r7, #4]
 8010050:	429a      	cmp	r2, r3
 8010052:	d107      	bne.n	8010064 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	2201      	movs	r2, #1
 8010058:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	2201      	movs	r2, #1
 801005e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010062:	e02a      	b.n	80100ba <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010068:	687a      	ldr	r2, [r7, #4]
 801006a:	429a      	cmp	r2, r3
 801006c:	d107      	bne.n	801007e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	2202      	movs	r2, #2
 8010072:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	2201      	movs	r2, #1
 8010078:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801007c:	e01d      	b.n	80100ba <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010082:	687a      	ldr	r2, [r7, #4]
 8010084:	429a      	cmp	r2, r3
 8010086:	d107      	bne.n	8010098 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	2204      	movs	r2, #4
 801008c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	2201      	movs	r2, #1
 8010092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010096:	e010      	b.n	80100ba <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801009c:	687a      	ldr	r2, [r7, #4]
 801009e:	429a      	cmp	r2, r3
 80100a0:	d107      	bne.n	80100b2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	2208      	movs	r2, #8
 80100a6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	2201      	movs	r2, #1
 80100ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80100b0:	e003      	b.n	80100ba <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	2201      	movs	r2, #1
 80100b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80100ba:	68f8      	ldr	r0, [r7, #12]
 80100bc:	f7ff ffb4 	bl	8010028 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	2200      	movs	r2, #0
 80100c4:	771a      	strb	r2, [r3, #28]
}
 80100c6:	bf00      	nop
 80100c8:	3710      	adds	r7, #16
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bd80      	pop	{r7, pc}

080100ce <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80100ce:	b580      	push	{r7, lr}
 80100d0:	b084      	sub	sp, #16
 80100d2:	af00      	add	r7, sp, #0
 80100d4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100da:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100e0:	687a      	ldr	r2, [r7, #4]
 80100e2:	429a      	cmp	r2, r3
 80100e4:	d10b      	bne.n	80100fe <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	2201      	movs	r2, #1
 80100ea:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	69db      	ldr	r3, [r3, #28]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d136      	bne.n	8010162 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	2201      	movs	r2, #1
 80100f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80100fc:	e031      	b.n	8010162 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010102:	687a      	ldr	r2, [r7, #4]
 8010104:	429a      	cmp	r2, r3
 8010106:	d10b      	bne.n	8010120 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	2202      	movs	r2, #2
 801010c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	69db      	ldr	r3, [r3, #28]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d125      	bne.n	8010162 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	2201      	movs	r2, #1
 801011a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801011e:	e020      	b.n	8010162 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010124:	687a      	ldr	r2, [r7, #4]
 8010126:	429a      	cmp	r2, r3
 8010128:	d10b      	bne.n	8010142 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	2204      	movs	r2, #4
 801012e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	69db      	ldr	r3, [r3, #28]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d114      	bne.n	8010162 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	2201      	movs	r2, #1
 801013c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010140:	e00f      	b.n	8010162 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010146:	687a      	ldr	r2, [r7, #4]
 8010148:	429a      	cmp	r2, r3
 801014a:	d10a      	bne.n	8010162 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	2208      	movs	r2, #8
 8010150:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	69db      	ldr	r3, [r3, #28]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d103      	bne.n	8010162 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	2201      	movs	r2, #1
 801015e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010162:	68f8      	ldr	r0, [r7, #12]
 8010164:	f7ff ff42 	bl	800ffec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	2200      	movs	r2, #0
 801016c:	771a      	strb	r2, [r3, #28]
}
 801016e:	bf00      	nop
 8010170:	3710      	adds	r7, #16
 8010172:	46bd      	mov	sp, r7
 8010174:	bd80      	pop	{r7, pc}

08010176 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010176:	b580      	push	{r7, lr}
 8010178:	b084      	sub	sp, #16
 801017a:	af00      	add	r7, sp, #0
 801017c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010182:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010188:	687a      	ldr	r2, [r7, #4]
 801018a:	429a      	cmp	r2, r3
 801018c:	d103      	bne.n	8010196 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	2201      	movs	r2, #1
 8010192:	771a      	strb	r2, [r3, #28]
 8010194:	e019      	b.n	80101ca <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801019a:	687a      	ldr	r2, [r7, #4]
 801019c:	429a      	cmp	r2, r3
 801019e:	d103      	bne.n	80101a8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	2202      	movs	r2, #2
 80101a4:	771a      	strb	r2, [r3, #28]
 80101a6:	e010      	b.n	80101ca <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101ac:	687a      	ldr	r2, [r7, #4]
 80101ae:	429a      	cmp	r2, r3
 80101b0:	d103      	bne.n	80101ba <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	2204      	movs	r2, #4
 80101b6:	771a      	strb	r2, [r3, #28]
 80101b8:	e007      	b.n	80101ca <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101be:	687a      	ldr	r2, [r7, #4]
 80101c0:	429a      	cmp	r2, r3
 80101c2:	d102      	bne.n	80101ca <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	2208      	movs	r2, #8
 80101c8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80101ca:	68f8      	ldr	r0, [r7, #12]
 80101cc:	f7ff ff18 	bl	8010000 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	2200      	movs	r2, #0
 80101d4:	771a      	strb	r2, [r3, #28]
}
 80101d6:	bf00      	nop
 80101d8:	3710      	adds	r7, #16
 80101da:	46bd      	mov	sp, r7
 80101dc:	bd80      	pop	{r7, pc}
	...

080101e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80101e0:	b480      	push	{r7}
 80101e2:	b085      	sub	sp, #20
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
 80101e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	4a44      	ldr	r2, [pc, #272]	; (8010304 <TIM_Base_SetConfig+0x124>)
 80101f4:	4293      	cmp	r3, r2
 80101f6:	d013      	beq.n	8010220 <TIM_Base_SetConfig+0x40>
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80101fe:	d00f      	beq.n	8010220 <TIM_Base_SetConfig+0x40>
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	4a41      	ldr	r2, [pc, #260]	; (8010308 <TIM_Base_SetConfig+0x128>)
 8010204:	4293      	cmp	r3, r2
 8010206:	d00b      	beq.n	8010220 <TIM_Base_SetConfig+0x40>
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	4a40      	ldr	r2, [pc, #256]	; (801030c <TIM_Base_SetConfig+0x12c>)
 801020c:	4293      	cmp	r3, r2
 801020e:	d007      	beq.n	8010220 <TIM_Base_SetConfig+0x40>
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	4a3f      	ldr	r2, [pc, #252]	; (8010310 <TIM_Base_SetConfig+0x130>)
 8010214:	4293      	cmp	r3, r2
 8010216:	d003      	beq.n	8010220 <TIM_Base_SetConfig+0x40>
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	4a3e      	ldr	r2, [pc, #248]	; (8010314 <TIM_Base_SetConfig+0x134>)
 801021c:	4293      	cmp	r3, r2
 801021e:	d108      	bne.n	8010232 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010226:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010228:	683b      	ldr	r3, [r7, #0]
 801022a:	685b      	ldr	r3, [r3, #4]
 801022c:	68fa      	ldr	r2, [r7, #12]
 801022e:	4313      	orrs	r3, r2
 8010230:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	4a33      	ldr	r2, [pc, #204]	; (8010304 <TIM_Base_SetConfig+0x124>)
 8010236:	4293      	cmp	r3, r2
 8010238:	d027      	beq.n	801028a <TIM_Base_SetConfig+0xaa>
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010240:	d023      	beq.n	801028a <TIM_Base_SetConfig+0xaa>
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	4a30      	ldr	r2, [pc, #192]	; (8010308 <TIM_Base_SetConfig+0x128>)
 8010246:	4293      	cmp	r3, r2
 8010248:	d01f      	beq.n	801028a <TIM_Base_SetConfig+0xaa>
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	4a2f      	ldr	r2, [pc, #188]	; (801030c <TIM_Base_SetConfig+0x12c>)
 801024e:	4293      	cmp	r3, r2
 8010250:	d01b      	beq.n	801028a <TIM_Base_SetConfig+0xaa>
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	4a2e      	ldr	r2, [pc, #184]	; (8010310 <TIM_Base_SetConfig+0x130>)
 8010256:	4293      	cmp	r3, r2
 8010258:	d017      	beq.n	801028a <TIM_Base_SetConfig+0xaa>
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	4a2d      	ldr	r2, [pc, #180]	; (8010314 <TIM_Base_SetConfig+0x134>)
 801025e:	4293      	cmp	r3, r2
 8010260:	d013      	beq.n	801028a <TIM_Base_SetConfig+0xaa>
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	4a2c      	ldr	r2, [pc, #176]	; (8010318 <TIM_Base_SetConfig+0x138>)
 8010266:	4293      	cmp	r3, r2
 8010268:	d00f      	beq.n	801028a <TIM_Base_SetConfig+0xaa>
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	4a2b      	ldr	r2, [pc, #172]	; (801031c <TIM_Base_SetConfig+0x13c>)
 801026e:	4293      	cmp	r3, r2
 8010270:	d00b      	beq.n	801028a <TIM_Base_SetConfig+0xaa>
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	4a2a      	ldr	r2, [pc, #168]	; (8010320 <TIM_Base_SetConfig+0x140>)
 8010276:	4293      	cmp	r3, r2
 8010278:	d007      	beq.n	801028a <TIM_Base_SetConfig+0xaa>
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	4a29      	ldr	r2, [pc, #164]	; (8010324 <TIM_Base_SetConfig+0x144>)
 801027e:	4293      	cmp	r3, r2
 8010280:	d003      	beq.n	801028a <TIM_Base_SetConfig+0xaa>
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	4a28      	ldr	r2, [pc, #160]	; (8010328 <TIM_Base_SetConfig+0x148>)
 8010286:	4293      	cmp	r3, r2
 8010288:	d108      	bne.n	801029c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010290:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010292:	683b      	ldr	r3, [r7, #0]
 8010294:	68db      	ldr	r3, [r3, #12]
 8010296:	68fa      	ldr	r2, [r7, #12]
 8010298:	4313      	orrs	r3, r2
 801029a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80102a2:	683b      	ldr	r3, [r7, #0]
 80102a4:	695b      	ldr	r3, [r3, #20]
 80102a6:	4313      	orrs	r3, r2
 80102a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	68fa      	ldr	r2, [r7, #12]
 80102ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80102b0:	683b      	ldr	r3, [r7, #0]
 80102b2:	689a      	ldr	r2, [r3, #8]
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80102b8:	683b      	ldr	r3, [r7, #0]
 80102ba:	681a      	ldr	r2, [r3, #0]
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	4a10      	ldr	r2, [pc, #64]	; (8010304 <TIM_Base_SetConfig+0x124>)
 80102c4:	4293      	cmp	r3, r2
 80102c6:	d00f      	beq.n	80102e8 <TIM_Base_SetConfig+0x108>
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	4a12      	ldr	r2, [pc, #72]	; (8010314 <TIM_Base_SetConfig+0x134>)
 80102cc:	4293      	cmp	r3, r2
 80102ce:	d00b      	beq.n	80102e8 <TIM_Base_SetConfig+0x108>
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	4a11      	ldr	r2, [pc, #68]	; (8010318 <TIM_Base_SetConfig+0x138>)
 80102d4:	4293      	cmp	r3, r2
 80102d6:	d007      	beq.n	80102e8 <TIM_Base_SetConfig+0x108>
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	4a10      	ldr	r2, [pc, #64]	; (801031c <TIM_Base_SetConfig+0x13c>)
 80102dc:	4293      	cmp	r3, r2
 80102de:	d003      	beq.n	80102e8 <TIM_Base_SetConfig+0x108>
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	4a0f      	ldr	r2, [pc, #60]	; (8010320 <TIM_Base_SetConfig+0x140>)
 80102e4:	4293      	cmp	r3, r2
 80102e6:	d103      	bne.n	80102f0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80102e8:	683b      	ldr	r3, [r7, #0]
 80102ea:	691a      	ldr	r2, [r3, #16]
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	2201      	movs	r2, #1
 80102f4:	615a      	str	r2, [r3, #20]
}
 80102f6:	bf00      	nop
 80102f8:	3714      	adds	r7, #20
 80102fa:	46bd      	mov	sp, r7
 80102fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010300:	4770      	bx	lr
 8010302:	bf00      	nop
 8010304:	40010000 	.word	0x40010000
 8010308:	40000400 	.word	0x40000400
 801030c:	40000800 	.word	0x40000800
 8010310:	40000c00 	.word	0x40000c00
 8010314:	40010400 	.word	0x40010400
 8010318:	40014000 	.word	0x40014000
 801031c:	40014400 	.word	0x40014400
 8010320:	40014800 	.word	0x40014800
 8010324:	4000e000 	.word	0x4000e000
 8010328:	4000e400 	.word	0x4000e400

0801032c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801032c:	b480      	push	{r7}
 801032e:	b087      	sub	sp, #28
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
 8010334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	6a1b      	ldr	r3, [r3, #32]
 801033a:	f023 0201 	bic.w	r2, r3, #1
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	6a1b      	ldr	r3, [r3, #32]
 8010346:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	685b      	ldr	r3, [r3, #4]
 801034c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	699b      	ldr	r3, [r3, #24]
 8010352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010354:	68fa      	ldr	r2, [r7, #12]
 8010356:	4b37      	ldr	r3, [pc, #220]	; (8010434 <TIM_OC1_SetConfig+0x108>)
 8010358:	4013      	ands	r3, r2
 801035a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	f023 0303 	bic.w	r3, r3, #3
 8010362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010364:	683b      	ldr	r3, [r7, #0]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	68fa      	ldr	r2, [r7, #12]
 801036a:	4313      	orrs	r3, r2
 801036c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801036e:	697b      	ldr	r3, [r7, #20]
 8010370:	f023 0302 	bic.w	r3, r3, #2
 8010374:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010376:	683b      	ldr	r3, [r7, #0]
 8010378:	689b      	ldr	r3, [r3, #8]
 801037a:	697a      	ldr	r2, [r7, #20]
 801037c:	4313      	orrs	r3, r2
 801037e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	4a2d      	ldr	r2, [pc, #180]	; (8010438 <TIM_OC1_SetConfig+0x10c>)
 8010384:	4293      	cmp	r3, r2
 8010386:	d00f      	beq.n	80103a8 <TIM_OC1_SetConfig+0x7c>
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	4a2c      	ldr	r2, [pc, #176]	; (801043c <TIM_OC1_SetConfig+0x110>)
 801038c:	4293      	cmp	r3, r2
 801038e:	d00b      	beq.n	80103a8 <TIM_OC1_SetConfig+0x7c>
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	4a2b      	ldr	r2, [pc, #172]	; (8010440 <TIM_OC1_SetConfig+0x114>)
 8010394:	4293      	cmp	r3, r2
 8010396:	d007      	beq.n	80103a8 <TIM_OC1_SetConfig+0x7c>
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	4a2a      	ldr	r2, [pc, #168]	; (8010444 <TIM_OC1_SetConfig+0x118>)
 801039c:	4293      	cmp	r3, r2
 801039e:	d003      	beq.n	80103a8 <TIM_OC1_SetConfig+0x7c>
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	4a29      	ldr	r2, [pc, #164]	; (8010448 <TIM_OC1_SetConfig+0x11c>)
 80103a4:	4293      	cmp	r3, r2
 80103a6:	d10c      	bne.n	80103c2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80103a8:	697b      	ldr	r3, [r7, #20]
 80103aa:	f023 0308 	bic.w	r3, r3, #8
 80103ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80103b0:	683b      	ldr	r3, [r7, #0]
 80103b2:	68db      	ldr	r3, [r3, #12]
 80103b4:	697a      	ldr	r2, [r7, #20]
 80103b6:	4313      	orrs	r3, r2
 80103b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80103ba:	697b      	ldr	r3, [r7, #20]
 80103bc:	f023 0304 	bic.w	r3, r3, #4
 80103c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	4a1c      	ldr	r2, [pc, #112]	; (8010438 <TIM_OC1_SetConfig+0x10c>)
 80103c6:	4293      	cmp	r3, r2
 80103c8:	d00f      	beq.n	80103ea <TIM_OC1_SetConfig+0xbe>
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	4a1b      	ldr	r2, [pc, #108]	; (801043c <TIM_OC1_SetConfig+0x110>)
 80103ce:	4293      	cmp	r3, r2
 80103d0:	d00b      	beq.n	80103ea <TIM_OC1_SetConfig+0xbe>
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	4a1a      	ldr	r2, [pc, #104]	; (8010440 <TIM_OC1_SetConfig+0x114>)
 80103d6:	4293      	cmp	r3, r2
 80103d8:	d007      	beq.n	80103ea <TIM_OC1_SetConfig+0xbe>
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	4a19      	ldr	r2, [pc, #100]	; (8010444 <TIM_OC1_SetConfig+0x118>)
 80103de:	4293      	cmp	r3, r2
 80103e0:	d003      	beq.n	80103ea <TIM_OC1_SetConfig+0xbe>
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	4a18      	ldr	r2, [pc, #96]	; (8010448 <TIM_OC1_SetConfig+0x11c>)
 80103e6:	4293      	cmp	r3, r2
 80103e8:	d111      	bne.n	801040e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80103ea:	693b      	ldr	r3, [r7, #16]
 80103ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80103f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80103f2:	693b      	ldr	r3, [r7, #16]
 80103f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80103f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80103fa:	683b      	ldr	r3, [r7, #0]
 80103fc:	695b      	ldr	r3, [r3, #20]
 80103fe:	693a      	ldr	r2, [r7, #16]
 8010400:	4313      	orrs	r3, r2
 8010402:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010404:	683b      	ldr	r3, [r7, #0]
 8010406:	699b      	ldr	r3, [r3, #24]
 8010408:	693a      	ldr	r2, [r7, #16]
 801040a:	4313      	orrs	r3, r2
 801040c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	693a      	ldr	r2, [r7, #16]
 8010412:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	68fa      	ldr	r2, [r7, #12]
 8010418:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801041a:	683b      	ldr	r3, [r7, #0]
 801041c:	685a      	ldr	r2, [r3, #4]
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	697a      	ldr	r2, [r7, #20]
 8010426:	621a      	str	r2, [r3, #32]
}
 8010428:	bf00      	nop
 801042a:	371c      	adds	r7, #28
 801042c:	46bd      	mov	sp, r7
 801042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010432:	4770      	bx	lr
 8010434:	fffeff8f 	.word	0xfffeff8f
 8010438:	40010000 	.word	0x40010000
 801043c:	40010400 	.word	0x40010400
 8010440:	40014000 	.word	0x40014000
 8010444:	40014400 	.word	0x40014400
 8010448:	40014800 	.word	0x40014800

0801044c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801044c:	b480      	push	{r7}
 801044e:	b087      	sub	sp, #28
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
 8010454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	6a1b      	ldr	r3, [r3, #32]
 801045a:	f023 0210 	bic.w	r2, r3, #16
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	6a1b      	ldr	r3, [r3, #32]
 8010466:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	685b      	ldr	r3, [r3, #4]
 801046c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	699b      	ldr	r3, [r3, #24]
 8010472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010474:	68fa      	ldr	r2, [r7, #12]
 8010476:	4b34      	ldr	r3, [pc, #208]	; (8010548 <TIM_OC2_SetConfig+0xfc>)
 8010478:	4013      	ands	r3, r2
 801047a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010482:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010484:	683b      	ldr	r3, [r7, #0]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	021b      	lsls	r3, r3, #8
 801048a:	68fa      	ldr	r2, [r7, #12]
 801048c:	4313      	orrs	r3, r2
 801048e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010490:	697b      	ldr	r3, [r7, #20]
 8010492:	f023 0320 	bic.w	r3, r3, #32
 8010496:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010498:	683b      	ldr	r3, [r7, #0]
 801049a:	689b      	ldr	r3, [r3, #8]
 801049c:	011b      	lsls	r3, r3, #4
 801049e:	697a      	ldr	r2, [r7, #20]
 80104a0:	4313      	orrs	r3, r2
 80104a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	4a29      	ldr	r2, [pc, #164]	; (801054c <TIM_OC2_SetConfig+0x100>)
 80104a8:	4293      	cmp	r3, r2
 80104aa:	d003      	beq.n	80104b4 <TIM_OC2_SetConfig+0x68>
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	4a28      	ldr	r2, [pc, #160]	; (8010550 <TIM_OC2_SetConfig+0x104>)
 80104b0:	4293      	cmp	r3, r2
 80104b2:	d10d      	bne.n	80104d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80104b4:	697b      	ldr	r3, [r7, #20]
 80104b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80104ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80104bc:	683b      	ldr	r3, [r7, #0]
 80104be:	68db      	ldr	r3, [r3, #12]
 80104c0:	011b      	lsls	r3, r3, #4
 80104c2:	697a      	ldr	r2, [r7, #20]
 80104c4:	4313      	orrs	r3, r2
 80104c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80104c8:	697b      	ldr	r3, [r7, #20]
 80104ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80104ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	4a1e      	ldr	r2, [pc, #120]	; (801054c <TIM_OC2_SetConfig+0x100>)
 80104d4:	4293      	cmp	r3, r2
 80104d6:	d00f      	beq.n	80104f8 <TIM_OC2_SetConfig+0xac>
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	4a1d      	ldr	r2, [pc, #116]	; (8010550 <TIM_OC2_SetConfig+0x104>)
 80104dc:	4293      	cmp	r3, r2
 80104de:	d00b      	beq.n	80104f8 <TIM_OC2_SetConfig+0xac>
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	4a1c      	ldr	r2, [pc, #112]	; (8010554 <TIM_OC2_SetConfig+0x108>)
 80104e4:	4293      	cmp	r3, r2
 80104e6:	d007      	beq.n	80104f8 <TIM_OC2_SetConfig+0xac>
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	4a1b      	ldr	r2, [pc, #108]	; (8010558 <TIM_OC2_SetConfig+0x10c>)
 80104ec:	4293      	cmp	r3, r2
 80104ee:	d003      	beq.n	80104f8 <TIM_OC2_SetConfig+0xac>
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	4a1a      	ldr	r2, [pc, #104]	; (801055c <TIM_OC2_SetConfig+0x110>)
 80104f4:	4293      	cmp	r3, r2
 80104f6:	d113      	bne.n	8010520 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80104f8:	693b      	ldr	r3, [r7, #16]
 80104fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80104fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010500:	693b      	ldr	r3, [r7, #16]
 8010502:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010506:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010508:	683b      	ldr	r3, [r7, #0]
 801050a:	695b      	ldr	r3, [r3, #20]
 801050c:	009b      	lsls	r3, r3, #2
 801050e:	693a      	ldr	r2, [r7, #16]
 8010510:	4313      	orrs	r3, r2
 8010512:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010514:	683b      	ldr	r3, [r7, #0]
 8010516:	699b      	ldr	r3, [r3, #24]
 8010518:	009b      	lsls	r3, r3, #2
 801051a:	693a      	ldr	r2, [r7, #16]
 801051c:	4313      	orrs	r3, r2
 801051e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	693a      	ldr	r2, [r7, #16]
 8010524:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	68fa      	ldr	r2, [r7, #12]
 801052a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801052c:	683b      	ldr	r3, [r7, #0]
 801052e:	685a      	ldr	r2, [r3, #4]
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	697a      	ldr	r2, [r7, #20]
 8010538:	621a      	str	r2, [r3, #32]
}
 801053a:	bf00      	nop
 801053c:	371c      	adds	r7, #28
 801053e:	46bd      	mov	sp, r7
 8010540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010544:	4770      	bx	lr
 8010546:	bf00      	nop
 8010548:	feff8fff 	.word	0xfeff8fff
 801054c:	40010000 	.word	0x40010000
 8010550:	40010400 	.word	0x40010400
 8010554:	40014000 	.word	0x40014000
 8010558:	40014400 	.word	0x40014400
 801055c:	40014800 	.word	0x40014800

08010560 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010560:	b480      	push	{r7}
 8010562:	b087      	sub	sp, #28
 8010564:	af00      	add	r7, sp, #0
 8010566:	6078      	str	r0, [r7, #4]
 8010568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	6a1b      	ldr	r3, [r3, #32]
 801056e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	6a1b      	ldr	r3, [r3, #32]
 801057a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	685b      	ldr	r3, [r3, #4]
 8010580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	69db      	ldr	r3, [r3, #28]
 8010586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010588:	68fa      	ldr	r2, [r7, #12]
 801058a:	4b33      	ldr	r3, [pc, #204]	; (8010658 <TIM_OC3_SetConfig+0xf8>)
 801058c:	4013      	ands	r3, r2
 801058e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	f023 0303 	bic.w	r3, r3, #3
 8010596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010598:	683b      	ldr	r3, [r7, #0]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	68fa      	ldr	r2, [r7, #12]
 801059e:	4313      	orrs	r3, r2
 80105a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80105a2:	697b      	ldr	r3, [r7, #20]
 80105a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80105a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80105aa:	683b      	ldr	r3, [r7, #0]
 80105ac:	689b      	ldr	r3, [r3, #8]
 80105ae:	021b      	lsls	r3, r3, #8
 80105b0:	697a      	ldr	r2, [r7, #20]
 80105b2:	4313      	orrs	r3, r2
 80105b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	4a28      	ldr	r2, [pc, #160]	; (801065c <TIM_OC3_SetConfig+0xfc>)
 80105ba:	4293      	cmp	r3, r2
 80105bc:	d003      	beq.n	80105c6 <TIM_OC3_SetConfig+0x66>
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	4a27      	ldr	r2, [pc, #156]	; (8010660 <TIM_OC3_SetConfig+0x100>)
 80105c2:	4293      	cmp	r3, r2
 80105c4:	d10d      	bne.n	80105e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80105c6:	697b      	ldr	r3, [r7, #20]
 80105c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80105cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80105ce:	683b      	ldr	r3, [r7, #0]
 80105d0:	68db      	ldr	r3, [r3, #12]
 80105d2:	021b      	lsls	r3, r3, #8
 80105d4:	697a      	ldr	r2, [r7, #20]
 80105d6:	4313      	orrs	r3, r2
 80105d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80105da:	697b      	ldr	r3, [r7, #20]
 80105dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80105e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	4a1d      	ldr	r2, [pc, #116]	; (801065c <TIM_OC3_SetConfig+0xfc>)
 80105e6:	4293      	cmp	r3, r2
 80105e8:	d00f      	beq.n	801060a <TIM_OC3_SetConfig+0xaa>
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	4a1c      	ldr	r2, [pc, #112]	; (8010660 <TIM_OC3_SetConfig+0x100>)
 80105ee:	4293      	cmp	r3, r2
 80105f0:	d00b      	beq.n	801060a <TIM_OC3_SetConfig+0xaa>
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	4a1b      	ldr	r2, [pc, #108]	; (8010664 <TIM_OC3_SetConfig+0x104>)
 80105f6:	4293      	cmp	r3, r2
 80105f8:	d007      	beq.n	801060a <TIM_OC3_SetConfig+0xaa>
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	4a1a      	ldr	r2, [pc, #104]	; (8010668 <TIM_OC3_SetConfig+0x108>)
 80105fe:	4293      	cmp	r3, r2
 8010600:	d003      	beq.n	801060a <TIM_OC3_SetConfig+0xaa>
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	4a19      	ldr	r2, [pc, #100]	; (801066c <TIM_OC3_SetConfig+0x10c>)
 8010606:	4293      	cmp	r3, r2
 8010608:	d113      	bne.n	8010632 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801060a:	693b      	ldr	r3, [r7, #16]
 801060c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010610:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010612:	693b      	ldr	r3, [r7, #16]
 8010614:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010618:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801061a:	683b      	ldr	r3, [r7, #0]
 801061c:	695b      	ldr	r3, [r3, #20]
 801061e:	011b      	lsls	r3, r3, #4
 8010620:	693a      	ldr	r2, [r7, #16]
 8010622:	4313      	orrs	r3, r2
 8010624:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010626:	683b      	ldr	r3, [r7, #0]
 8010628:	699b      	ldr	r3, [r3, #24]
 801062a:	011b      	lsls	r3, r3, #4
 801062c:	693a      	ldr	r2, [r7, #16]
 801062e:	4313      	orrs	r3, r2
 8010630:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	693a      	ldr	r2, [r7, #16]
 8010636:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	68fa      	ldr	r2, [r7, #12]
 801063c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801063e:	683b      	ldr	r3, [r7, #0]
 8010640:	685a      	ldr	r2, [r3, #4]
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	697a      	ldr	r2, [r7, #20]
 801064a:	621a      	str	r2, [r3, #32]
}
 801064c:	bf00      	nop
 801064e:	371c      	adds	r7, #28
 8010650:	46bd      	mov	sp, r7
 8010652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010656:	4770      	bx	lr
 8010658:	fffeff8f 	.word	0xfffeff8f
 801065c:	40010000 	.word	0x40010000
 8010660:	40010400 	.word	0x40010400
 8010664:	40014000 	.word	0x40014000
 8010668:	40014400 	.word	0x40014400
 801066c:	40014800 	.word	0x40014800

08010670 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010670:	b480      	push	{r7}
 8010672:	b087      	sub	sp, #28
 8010674:	af00      	add	r7, sp, #0
 8010676:	6078      	str	r0, [r7, #4]
 8010678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	6a1b      	ldr	r3, [r3, #32]
 801067e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	6a1b      	ldr	r3, [r3, #32]
 801068a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	685b      	ldr	r3, [r3, #4]
 8010690:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	69db      	ldr	r3, [r3, #28]
 8010696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010698:	68fa      	ldr	r2, [r7, #12]
 801069a:	4b24      	ldr	r3, [pc, #144]	; (801072c <TIM_OC4_SetConfig+0xbc>)
 801069c:	4013      	ands	r3, r2
 801069e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80106a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80106a8:	683b      	ldr	r3, [r7, #0]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	021b      	lsls	r3, r3, #8
 80106ae:	68fa      	ldr	r2, [r7, #12]
 80106b0:	4313      	orrs	r3, r2
 80106b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80106b4:	693b      	ldr	r3, [r7, #16]
 80106b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80106ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80106bc:	683b      	ldr	r3, [r7, #0]
 80106be:	689b      	ldr	r3, [r3, #8]
 80106c0:	031b      	lsls	r3, r3, #12
 80106c2:	693a      	ldr	r2, [r7, #16]
 80106c4:	4313      	orrs	r3, r2
 80106c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	4a19      	ldr	r2, [pc, #100]	; (8010730 <TIM_OC4_SetConfig+0xc0>)
 80106cc:	4293      	cmp	r3, r2
 80106ce:	d00f      	beq.n	80106f0 <TIM_OC4_SetConfig+0x80>
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	4a18      	ldr	r2, [pc, #96]	; (8010734 <TIM_OC4_SetConfig+0xc4>)
 80106d4:	4293      	cmp	r3, r2
 80106d6:	d00b      	beq.n	80106f0 <TIM_OC4_SetConfig+0x80>
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	4a17      	ldr	r2, [pc, #92]	; (8010738 <TIM_OC4_SetConfig+0xc8>)
 80106dc:	4293      	cmp	r3, r2
 80106de:	d007      	beq.n	80106f0 <TIM_OC4_SetConfig+0x80>
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	4a16      	ldr	r2, [pc, #88]	; (801073c <TIM_OC4_SetConfig+0xcc>)
 80106e4:	4293      	cmp	r3, r2
 80106e6:	d003      	beq.n	80106f0 <TIM_OC4_SetConfig+0x80>
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	4a15      	ldr	r2, [pc, #84]	; (8010740 <TIM_OC4_SetConfig+0xd0>)
 80106ec:	4293      	cmp	r3, r2
 80106ee:	d109      	bne.n	8010704 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80106f0:	697b      	ldr	r3, [r7, #20]
 80106f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80106f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80106f8:	683b      	ldr	r3, [r7, #0]
 80106fa:	695b      	ldr	r3, [r3, #20]
 80106fc:	019b      	lsls	r3, r3, #6
 80106fe:	697a      	ldr	r2, [r7, #20]
 8010700:	4313      	orrs	r3, r2
 8010702:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	697a      	ldr	r2, [r7, #20]
 8010708:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	68fa      	ldr	r2, [r7, #12]
 801070e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010710:	683b      	ldr	r3, [r7, #0]
 8010712:	685a      	ldr	r2, [r3, #4]
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	693a      	ldr	r2, [r7, #16]
 801071c:	621a      	str	r2, [r3, #32]
}
 801071e:	bf00      	nop
 8010720:	371c      	adds	r7, #28
 8010722:	46bd      	mov	sp, r7
 8010724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010728:	4770      	bx	lr
 801072a:	bf00      	nop
 801072c:	feff8fff 	.word	0xfeff8fff
 8010730:	40010000 	.word	0x40010000
 8010734:	40010400 	.word	0x40010400
 8010738:	40014000 	.word	0x40014000
 801073c:	40014400 	.word	0x40014400
 8010740:	40014800 	.word	0x40014800

08010744 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010744:	b480      	push	{r7}
 8010746:	b087      	sub	sp, #28
 8010748:	af00      	add	r7, sp, #0
 801074a:	6078      	str	r0, [r7, #4]
 801074c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	6a1b      	ldr	r3, [r3, #32]
 8010752:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	6a1b      	ldr	r3, [r3, #32]
 801075e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	685b      	ldr	r3, [r3, #4]
 8010764:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801076a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801076c:	68fa      	ldr	r2, [r7, #12]
 801076e:	4b21      	ldr	r3, [pc, #132]	; (80107f4 <TIM_OC5_SetConfig+0xb0>)
 8010770:	4013      	ands	r3, r2
 8010772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010774:	683b      	ldr	r3, [r7, #0]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	68fa      	ldr	r2, [r7, #12]
 801077a:	4313      	orrs	r3, r2
 801077c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801077e:	693b      	ldr	r3, [r7, #16]
 8010780:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010784:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010786:	683b      	ldr	r3, [r7, #0]
 8010788:	689b      	ldr	r3, [r3, #8]
 801078a:	041b      	lsls	r3, r3, #16
 801078c:	693a      	ldr	r2, [r7, #16]
 801078e:	4313      	orrs	r3, r2
 8010790:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	4a18      	ldr	r2, [pc, #96]	; (80107f8 <TIM_OC5_SetConfig+0xb4>)
 8010796:	4293      	cmp	r3, r2
 8010798:	d00f      	beq.n	80107ba <TIM_OC5_SetConfig+0x76>
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	4a17      	ldr	r2, [pc, #92]	; (80107fc <TIM_OC5_SetConfig+0xb8>)
 801079e:	4293      	cmp	r3, r2
 80107a0:	d00b      	beq.n	80107ba <TIM_OC5_SetConfig+0x76>
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	4a16      	ldr	r2, [pc, #88]	; (8010800 <TIM_OC5_SetConfig+0xbc>)
 80107a6:	4293      	cmp	r3, r2
 80107a8:	d007      	beq.n	80107ba <TIM_OC5_SetConfig+0x76>
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	4a15      	ldr	r2, [pc, #84]	; (8010804 <TIM_OC5_SetConfig+0xc0>)
 80107ae:	4293      	cmp	r3, r2
 80107b0:	d003      	beq.n	80107ba <TIM_OC5_SetConfig+0x76>
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	4a14      	ldr	r2, [pc, #80]	; (8010808 <TIM_OC5_SetConfig+0xc4>)
 80107b6:	4293      	cmp	r3, r2
 80107b8:	d109      	bne.n	80107ce <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80107ba:	697b      	ldr	r3, [r7, #20]
 80107bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80107c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80107c2:	683b      	ldr	r3, [r7, #0]
 80107c4:	695b      	ldr	r3, [r3, #20]
 80107c6:	021b      	lsls	r3, r3, #8
 80107c8:	697a      	ldr	r2, [r7, #20]
 80107ca:	4313      	orrs	r3, r2
 80107cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	697a      	ldr	r2, [r7, #20]
 80107d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	68fa      	ldr	r2, [r7, #12]
 80107d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80107da:	683b      	ldr	r3, [r7, #0]
 80107dc:	685a      	ldr	r2, [r3, #4]
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	693a      	ldr	r2, [r7, #16]
 80107e6:	621a      	str	r2, [r3, #32]
}
 80107e8:	bf00      	nop
 80107ea:	371c      	adds	r7, #28
 80107ec:	46bd      	mov	sp, r7
 80107ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f2:	4770      	bx	lr
 80107f4:	fffeff8f 	.word	0xfffeff8f
 80107f8:	40010000 	.word	0x40010000
 80107fc:	40010400 	.word	0x40010400
 8010800:	40014000 	.word	0x40014000
 8010804:	40014400 	.word	0x40014400
 8010808:	40014800 	.word	0x40014800

0801080c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801080c:	b480      	push	{r7}
 801080e:	b087      	sub	sp, #28
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
 8010814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	6a1b      	ldr	r3, [r3, #32]
 801081a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	6a1b      	ldr	r3, [r3, #32]
 8010826:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	685b      	ldr	r3, [r3, #4]
 801082c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010834:	68fa      	ldr	r2, [r7, #12]
 8010836:	4b22      	ldr	r3, [pc, #136]	; (80108c0 <TIM_OC6_SetConfig+0xb4>)
 8010838:	4013      	ands	r3, r2
 801083a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801083c:	683b      	ldr	r3, [r7, #0]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	021b      	lsls	r3, r3, #8
 8010842:	68fa      	ldr	r2, [r7, #12]
 8010844:	4313      	orrs	r3, r2
 8010846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010848:	693b      	ldr	r3, [r7, #16]
 801084a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801084e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010850:	683b      	ldr	r3, [r7, #0]
 8010852:	689b      	ldr	r3, [r3, #8]
 8010854:	051b      	lsls	r3, r3, #20
 8010856:	693a      	ldr	r2, [r7, #16]
 8010858:	4313      	orrs	r3, r2
 801085a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	4a19      	ldr	r2, [pc, #100]	; (80108c4 <TIM_OC6_SetConfig+0xb8>)
 8010860:	4293      	cmp	r3, r2
 8010862:	d00f      	beq.n	8010884 <TIM_OC6_SetConfig+0x78>
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	4a18      	ldr	r2, [pc, #96]	; (80108c8 <TIM_OC6_SetConfig+0xbc>)
 8010868:	4293      	cmp	r3, r2
 801086a:	d00b      	beq.n	8010884 <TIM_OC6_SetConfig+0x78>
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	4a17      	ldr	r2, [pc, #92]	; (80108cc <TIM_OC6_SetConfig+0xc0>)
 8010870:	4293      	cmp	r3, r2
 8010872:	d007      	beq.n	8010884 <TIM_OC6_SetConfig+0x78>
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	4a16      	ldr	r2, [pc, #88]	; (80108d0 <TIM_OC6_SetConfig+0xc4>)
 8010878:	4293      	cmp	r3, r2
 801087a:	d003      	beq.n	8010884 <TIM_OC6_SetConfig+0x78>
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	4a15      	ldr	r2, [pc, #84]	; (80108d4 <TIM_OC6_SetConfig+0xc8>)
 8010880:	4293      	cmp	r3, r2
 8010882:	d109      	bne.n	8010898 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010884:	697b      	ldr	r3, [r7, #20]
 8010886:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801088a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801088c:	683b      	ldr	r3, [r7, #0]
 801088e:	695b      	ldr	r3, [r3, #20]
 8010890:	029b      	lsls	r3, r3, #10
 8010892:	697a      	ldr	r2, [r7, #20]
 8010894:	4313      	orrs	r3, r2
 8010896:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	697a      	ldr	r2, [r7, #20]
 801089c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	68fa      	ldr	r2, [r7, #12]
 80108a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80108a4:	683b      	ldr	r3, [r7, #0]
 80108a6:	685a      	ldr	r2, [r3, #4]
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	693a      	ldr	r2, [r7, #16]
 80108b0:	621a      	str	r2, [r3, #32]
}
 80108b2:	bf00      	nop
 80108b4:	371c      	adds	r7, #28
 80108b6:	46bd      	mov	sp, r7
 80108b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108bc:	4770      	bx	lr
 80108be:	bf00      	nop
 80108c0:	feff8fff 	.word	0xfeff8fff
 80108c4:	40010000 	.word	0x40010000
 80108c8:	40010400 	.word	0x40010400
 80108cc:	40014000 	.word	0x40014000
 80108d0:	40014400 	.word	0x40014400
 80108d4:	40014800 	.word	0x40014800

080108d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80108d8:	b480      	push	{r7}
 80108da:	b087      	sub	sp, #28
 80108dc:	af00      	add	r7, sp, #0
 80108de:	60f8      	str	r0, [r7, #12]
 80108e0:	60b9      	str	r1, [r7, #8]
 80108e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80108e4:	68bb      	ldr	r3, [r7, #8]
 80108e6:	f003 031f 	and.w	r3, r3, #31
 80108ea:	2201      	movs	r2, #1
 80108ec:	fa02 f303 	lsl.w	r3, r2, r3
 80108f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	6a1a      	ldr	r2, [r3, #32]
 80108f6:	697b      	ldr	r3, [r7, #20]
 80108f8:	43db      	mvns	r3, r3
 80108fa:	401a      	ands	r2, r3
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	6a1a      	ldr	r2, [r3, #32]
 8010904:	68bb      	ldr	r3, [r7, #8]
 8010906:	f003 031f 	and.w	r3, r3, #31
 801090a:	6879      	ldr	r1, [r7, #4]
 801090c:	fa01 f303 	lsl.w	r3, r1, r3
 8010910:	431a      	orrs	r2, r3
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	621a      	str	r2, [r3, #32]
}
 8010916:	bf00      	nop
 8010918:	371c      	adds	r7, #28
 801091a:	46bd      	mov	sp, r7
 801091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010920:	4770      	bx	lr
	...

08010924 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010924:	b480      	push	{r7}
 8010926:	b085      	sub	sp, #20
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
 801092c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010934:	2b01      	cmp	r3, #1
 8010936:	d101      	bne.n	801093c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010938:	2302      	movs	r3, #2
 801093a:	e077      	b.n	8010a2c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	2201      	movs	r2, #1
 8010940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	2202      	movs	r2, #2
 8010948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	685b      	ldr	r3, [r3, #4]
 8010952:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	689b      	ldr	r3, [r3, #8]
 801095a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	4a35      	ldr	r2, [pc, #212]	; (8010a38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010962:	4293      	cmp	r3, r2
 8010964:	d004      	beq.n	8010970 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	4a34      	ldr	r2, [pc, #208]	; (8010a3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801096c:	4293      	cmp	r3, r2
 801096e:	d108      	bne.n	8010982 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010976:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010978:	683b      	ldr	r3, [r7, #0]
 801097a:	685b      	ldr	r3, [r3, #4]
 801097c:	68fa      	ldr	r2, [r7, #12]
 801097e:	4313      	orrs	r3, r2
 8010980:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010988:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801098a:	683b      	ldr	r3, [r7, #0]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	68fa      	ldr	r2, [r7, #12]
 8010990:	4313      	orrs	r3, r2
 8010992:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	68fa      	ldr	r2, [r7, #12]
 801099a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	4a25      	ldr	r2, [pc, #148]	; (8010a38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80109a2:	4293      	cmp	r3, r2
 80109a4:	d02c      	beq.n	8010a00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80109ae:	d027      	beq.n	8010a00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	4a22      	ldr	r2, [pc, #136]	; (8010a40 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80109b6:	4293      	cmp	r3, r2
 80109b8:	d022      	beq.n	8010a00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	4a21      	ldr	r2, [pc, #132]	; (8010a44 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80109c0:	4293      	cmp	r3, r2
 80109c2:	d01d      	beq.n	8010a00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	4a1f      	ldr	r2, [pc, #124]	; (8010a48 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80109ca:	4293      	cmp	r3, r2
 80109cc:	d018      	beq.n	8010a00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	4a1a      	ldr	r2, [pc, #104]	; (8010a3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80109d4:	4293      	cmp	r3, r2
 80109d6:	d013      	beq.n	8010a00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	4a1b      	ldr	r2, [pc, #108]	; (8010a4c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80109de:	4293      	cmp	r3, r2
 80109e0:	d00e      	beq.n	8010a00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	4a1a      	ldr	r2, [pc, #104]	; (8010a50 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80109e8:	4293      	cmp	r3, r2
 80109ea:	d009      	beq.n	8010a00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	4a18      	ldr	r2, [pc, #96]	; (8010a54 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80109f2:	4293      	cmp	r3, r2
 80109f4:	d004      	beq.n	8010a00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	4a17      	ldr	r2, [pc, #92]	; (8010a58 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80109fc:	4293      	cmp	r3, r2
 80109fe:	d10c      	bne.n	8010a1a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010a00:	68bb      	ldr	r3, [r7, #8]
 8010a02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010a06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010a08:	683b      	ldr	r3, [r7, #0]
 8010a0a:	689b      	ldr	r3, [r3, #8]
 8010a0c:	68ba      	ldr	r2, [r7, #8]
 8010a0e:	4313      	orrs	r3, r2
 8010a10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	68ba      	ldr	r2, [r7, #8]
 8010a18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	2201      	movs	r2, #1
 8010a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	2200      	movs	r2, #0
 8010a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010a2a:	2300      	movs	r3, #0
}
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	3714      	adds	r7, #20
 8010a30:	46bd      	mov	sp, r7
 8010a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a36:	4770      	bx	lr
 8010a38:	40010000 	.word	0x40010000
 8010a3c:	40010400 	.word	0x40010400
 8010a40:	40000400 	.word	0x40000400
 8010a44:	40000800 	.word	0x40000800
 8010a48:	40000c00 	.word	0x40000c00
 8010a4c:	40001800 	.word	0x40001800
 8010a50:	40014000 	.word	0x40014000
 8010a54:	4000e000 	.word	0x4000e000
 8010a58:	4000e400 	.word	0x4000e400

08010a5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010a5c:	b480      	push	{r7}
 8010a5e:	b083      	sub	sp, #12
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010a64:	bf00      	nop
 8010a66:	370c      	adds	r7, #12
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a6e:	4770      	bx	lr

08010a70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010a70:	b480      	push	{r7}
 8010a72:	b083      	sub	sp, #12
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010a78:	bf00      	nop
 8010a7a:	370c      	adds	r7, #12
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a82:	4770      	bx	lr

08010a84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010a84:	b480      	push	{r7}
 8010a86:	b083      	sub	sp, #12
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010a8c:	bf00      	nop
 8010a8e:	370c      	adds	r7, #12
 8010a90:	46bd      	mov	sp, r7
 8010a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a96:	4770      	bx	lr

08010a98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b082      	sub	sp, #8
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d101      	bne.n	8010aaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010aa6:	2301      	movs	r3, #1
 8010aa8:	e042      	b.n	8010b30 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d106      	bne.n	8010ac2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	2200      	movs	r2, #0
 8010ab8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010abc:	6878      	ldr	r0, [r7, #4]
 8010abe:	f7f2 fcc5 	bl	800344c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	2224      	movs	r2, #36	; 0x24
 8010ac6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	681a      	ldr	r2, [r3, #0]
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	f022 0201 	bic.w	r2, r2, #1
 8010ad8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010ada:	6878      	ldr	r0, [r7, #4]
 8010adc:	f000 f82c 	bl	8010b38 <UART_SetConfig>
 8010ae0:	4603      	mov	r3, r0
 8010ae2:	2b01      	cmp	r3, #1
 8010ae4:	d101      	bne.n	8010aea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8010ae6:	2301      	movs	r3, #1
 8010ae8:	e022      	b.n	8010b30 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d002      	beq.n	8010af8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8010af2:	6878      	ldr	r0, [r7, #4]
 8010af4:	f000 fe8c 	bl	8011810 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	685a      	ldr	r2, [r3, #4]
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010b06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	689a      	ldr	r2, [r3, #8]
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010b16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	681a      	ldr	r2, [r3, #0]
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	f042 0201 	orr.w	r2, r2, #1
 8010b26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010b28:	6878      	ldr	r0, [r7, #4]
 8010b2a:	f000 ff13 	bl	8011954 <UART_CheckIdleState>
 8010b2e:	4603      	mov	r3, r0
}
 8010b30:	4618      	mov	r0, r3
 8010b32:	3708      	adds	r7, #8
 8010b34:	46bd      	mov	sp, r7
 8010b36:	bd80      	pop	{r7, pc}

08010b38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010b38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010b3c:	b092      	sub	sp, #72	; 0x48
 8010b3e:	af00      	add	r7, sp, #0
 8010b40:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010b42:	2300      	movs	r3, #0
 8010b44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010b48:	697b      	ldr	r3, [r7, #20]
 8010b4a:	689a      	ldr	r2, [r3, #8]
 8010b4c:	697b      	ldr	r3, [r7, #20]
 8010b4e:	691b      	ldr	r3, [r3, #16]
 8010b50:	431a      	orrs	r2, r3
 8010b52:	697b      	ldr	r3, [r7, #20]
 8010b54:	695b      	ldr	r3, [r3, #20]
 8010b56:	431a      	orrs	r2, r3
 8010b58:	697b      	ldr	r3, [r7, #20]
 8010b5a:	69db      	ldr	r3, [r3, #28]
 8010b5c:	4313      	orrs	r3, r2
 8010b5e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010b60:	697b      	ldr	r3, [r7, #20]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	681a      	ldr	r2, [r3, #0]
 8010b66:	4bbe      	ldr	r3, [pc, #760]	; (8010e60 <UART_SetConfig+0x328>)
 8010b68:	4013      	ands	r3, r2
 8010b6a:	697a      	ldr	r2, [r7, #20]
 8010b6c:	6812      	ldr	r2, [r2, #0]
 8010b6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010b70:	430b      	orrs	r3, r1
 8010b72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010b74:	697b      	ldr	r3, [r7, #20]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	685b      	ldr	r3, [r3, #4]
 8010b7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010b7e:	697b      	ldr	r3, [r7, #20]
 8010b80:	68da      	ldr	r2, [r3, #12]
 8010b82:	697b      	ldr	r3, [r7, #20]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	430a      	orrs	r2, r1
 8010b88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010b8a:	697b      	ldr	r3, [r7, #20]
 8010b8c:	699b      	ldr	r3, [r3, #24]
 8010b8e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010b90:	697b      	ldr	r3, [r7, #20]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	4ab3      	ldr	r2, [pc, #716]	; (8010e64 <UART_SetConfig+0x32c>)
 8010b96:	4293      	cmp	r3, r2
 8010b98:	d004      	beq.n	8010ba4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010b9a:	697b      	ldr	r3, [r7, #20]
 8010b9c:	6a1b      	ldr	r3, [r3, #32]
 8010b9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010ba0:	4313      	orrs	r3, r2
 8010ba2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010ba4:	697b      	ldr	r3, [r7, #20]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	689a      	ldr	r2, [r3, #8]
 8010baa:	4baf      	ldr	r3, [pc, #700]	; (8010e68 <UART_SetConfig+0x330>)
 8010bac:	4013      	ands	r3, r2
 8010bae:	697a      	ldr	r2, [r7, #20]
 8010bb0:	6812      	ldr	r2, [r2, #0]
 8010bb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010bb4:	430b      	orrs	r3, r1
 8010bb6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010bb8:	697b      	ldr	r3, [r7, #20]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bbe:	f023 010f 	bic.w	r1, r3, #15
 8010bc2:	697b      	ldr	r3, [r7, #20]
 8010bc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010bc6:	697b      	ldr	r3, [r7, #20]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	430a      	orrs	r2, r1
 8010bcc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010bce:	697b      	ldr	r3, [r7, #20]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	4aa6      	ldr	r2, [pc, #664]	; (8010e6c <UART_SetConfig+0x334>)
 8010bd4:	4293      	cmp	r3, r2
 8010bd6:	d177      	bne.n	8010cc8 <UART_SetConfig+0x190>
 8010bd8:	4ba5      	ldr	r3, [pc, #660]	; (8010e70 <UART_SetConfig+0x338>)
 8010bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bdc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010be0:	2b28      	cmp	r3, #40	; 0x28
 8010be2:	d86d      	bhi.n	8010cc0 <UART_SetConfig+0x188>
 8010be4:	a201      	add	r2, pc, #4	; (adr r2, 8010bec <UART_SetConfig+0xb4>)
 8010be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bea:	bf00      	nop
 8010bec:	08010c91 	.word	0x08010c91
 8010bf0:	08010cc1 	.word	0x08010cc1
 8010bf4:	08010cc1 	.word	0x08010cc1
 8010bf8:	08010cc1 	.word	0x08010cc1
 8010bfc:	08010cc1 	.word	0x08010cc1
 8010c00:	08010cc1 	.word	0x08010cc1
 8010c04:	08010cc1 	.word	0x08010cc1
 8010c08:	08010cc1 	.word	0x08010cc1
 8010c0c:	08010c99 	.word	0x08010c99
 8010c10:	08010cc1 	.word	0x08010cc1
 8010c14:	08010cc1 	.word	0x08010cc1
 8010c18:	08010cc1 	.word	0x08010cc1
 8010c1c:	08010cc1 	.word	0x08010cc1
 8010c20:	08010cc1 	.word	0x08010cc1
 8010c24:	08010cc1 	.word	0x08010cc1
 8010c28:	08010cc1 	.word	0x08010cc1
 8010c2c:	08010ca1 	.word	0x08010ca1
 8010c30:	08010cc1 	.word	0x08010cc1
 8010c34:	08010cc1 	.word	0x08010cc1
 8010c38:	08010cc1 	.word	0x08010cc1
 8010c3c:	08010cc1 	.word	0x08010cc1
 8010c40:	08010cc1 	.word	0x08010cc1
 8010c44:	08010cc1 	.word	0x08010cc1
 8010c48:	08010cc1 	.word	0x08010cc1
 8010c4c:	08010ca9 	.word	0x08010ca9
 8010c50:	08010cc1 	.word	0x08010cc1
 8010c54:	08010cc1 	.word	0x08010cc1
 8010c58:	08010cc1 	.word	0x08010cc1
 8010c5c:	08010cc1 	.word	0x08010cc1
 8010c60:	08010cc1 	.word	0x08010cc1
 8010c64:	08010cc1 	.word	0x08010cc1
 8010c68:	08010cc1 	.word	0x08010cc1
 8010c6c:	08010cb1 	.word	0x08010cb1
 8010c70:	08010cc1 	.word	0x08010cc1
 8010c74:	08010cc1 	.word	0x08010cc1
 8010c78:	08010cc1 	.word	0x08010cc1
 8010c7c:	08010cc1 	.word	0x08010cc1
 8010c80:	08010cc1 	.word	0x08010cc1
 8010c84:	08010cc1 	.word	0x08010cc1
 8010c88:	08010cc1 	.word	0x08010cc1
 8010c8c:	08010cb9 	.word	0x08010cb9
 8010c90:	2301      	movs	r3, #1
 8010c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c96:	e326      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010c98:	2304      	movs	r3, #4
 8010c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c9e:	e322      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010ca0:	2308      	movs	r3, #8
 8010ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ca6:	e31e      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010ca8:	2310      	movs	r3, #16
 8010caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cae:	e31a      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010cb0:	2320      	movs	r3, #32
 8010cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cb6:	e316      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010cb8:	2340      	movs	r3, #64	; 0x40
 8010cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cbe:	e312      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010cc0:	2380      	movs	r3, #128	; 0x80
 8010cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cc6:	e30e      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010cc8:	697b      	ldr	r3, [r7, #20]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	4a69      	ldr	r2, [pc, #420]	; (8010e74 <UART_SetConfig+0x33c>)
 8010cce:	4293      	cmp	r3, r2
 8010cd0:	d130      	bne.n	8010d34 <UART_SetConfig+0x1fc>
 8010cd2:	4b67      	ldr	r3, [pc, #412]	; (8010e70 <UART_SetConfig+0x338>)
 8010cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010cd6:	f003 0307 	and.w	r3, r3, #7
 8010cda:	2b05      	cmp	r3, #5
 8010cdc:	d826      	bhi.n	8010d2c <UART_SetConfig+0x1f4>
 8010cde:	a201      	add	r2, pc, #4	; (adr r2, 8010ce4 <UART_SetConfig+0x1ac>)
 8010ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ce4:	08010cfd 	.word	0x08010cfd
 8010ce8:	08010d05 	.word	0x08010d05
 8010cec:	08010d0d 	.word	0x08010d0d
 8010cf0:	08010d15 	.word	0x08010d15
 8010cf4:	08010d1d 	.word	0x08010d1d
 8010cf8:	08010d25 	.word	0x08010d25
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d02:	e2f0      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010d04:	2304      	movs	r3, #4
 8010d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d0a:	e2ec      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010d0c:	2308      	movs	r3, #8
 8010d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d12:	e2e8      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010d14:	2310      	movs	r3, #16
 8010d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d1a:	e2e4      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010d1c:	2320      	movs	r3, #32
 8010d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d22:	e2e0      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010d24:	2340      	movs	r3, #64	; 0x40
 8010d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d2a:	e2dc      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010d2c:	2380      	movs	r3, #128	; 0x80
 8010d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d32:	e2d8      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010d34:	697b      	ldr	r3, [r7, #20]
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	4a4f      	ldr	r2, [pc, #316]	; (8010e78 <UART_SetConfig+0x340>)
 8010d3a:	4293      	cmp	r3, r2
 8010d3c:	d130      	bne.n	8010da0 <UART_SetConfig+0x268>
 8010d3e:	4b4c      	ldr	r3, [pc, #304]	; (8010e70 <UART_SetConfig+0x338>)
 8010d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d42:	f003 0307 	and.w	r3, r3, #7
 8010d46:	2b05      	cmp	r3, #5
 8010d48:	d826      	bhi.n	8010d98 <UART_SetConfig+0x260>
 8010d4a:	a201      	add	r2, pc, #4	; (adr r2, 8010d50 <UART_SetConfig+0x218>)
 8010d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d50:	08010d69 	.word	0x08010d69
 8010d54:	08010d71 	.word	0x08010d71
 8010d58:	08010d79 	.word	0x08010d79
 8010d5c:	08010d81 	.word	0x08010d81
 8010d60:	08010d89 	.word	0x08010d89
 8010d64:	08010d91 	.word	0x08010d91
 8010d68:	2300      	movs	r3, #0
 8010d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d6e:	e2ba      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010d70:	2304      	movs	r3, #4
 8010d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d76:	e2b6      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010d78:	2308      	movs	r3, #8
 8010d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d7e:	e2b2      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010d80:	2310      	movs	r3, #16
 8010d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d86:	e2ae      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010d88:	2320      	movs	r3, #32
 8010d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d8e:	e2aa      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010d90:	2340      	movs	r3, #64	; 0x40
 8010d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d96:	e2a6      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010d98:	2380      	movs	r3, #128	; 0x80
 8010d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d9e:	e2a2      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010da0:	697b      	ldr	r3, [r7, #20]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	4a35      	ldr	r2, [pc, #212]	; (8010e7c <UART_SetConfig+0x344>)
 8010da6:	4293      	cmp	r3, r2
 8010da8:	d130      	bne.n	8010e0c <UART_SetConfig+0x2d4>
 8010daa:	4b31      	ldr	r3, [pc, #196]	; (8010e70 <UART_SetConfig+0x338>)
 8010dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010dae:	f003 0307 	and.w	r3, r3, #7
 8010db2:	2b05      	cmp	r3, #5
 8010db4:	d826      	bhi.n	8010e04 <UART_SetConfig+0x2cc>
 8010db6:	a201      	add	r2, pc, #4	; (adr r2, 8010dbc <UART_SetConfig+0x284>)
 8010db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dbc:	08010dd5 	.word	0x08010dd5
 8010dc0:	08010ddd 	.word	0x08010ddd
 8010dc4:	08010de5 	.word	0x08010de5
 8010dc8:	08010ded 	.word	0x08010ded
 8010dcc:	08010df5 	.word	0x08010df5
 8010dd0:	08010dfd 	.word	0x08010dfd
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dda:	e284      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010ddc:	2304      	movs	r3, #4
 8010dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010de2:	e280      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010de4:	2308      	movs	r3, #8
 8010de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dea:	e27c      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010dec:	2310      	movs	r3, #16
 8010dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010df2:	e278      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010df4:	2320      	movs	r3, #32
 8010df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dfa:	e274      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010dfc:	2340      	movs	r3, #64	; 0x40
 8010dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e02:	e270      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010e04:	2380      	movs	r3, #128	; 0x80
 8010e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e0a:	e26c      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010e0c:	697b      	ldr	r3, [r7, #20]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	4a1b      	ldr	r2, [pc, #108]	; (8010e80 <UART_SetConfig+0x348>)
 8010e12:	4293      	cmp	r3, r2
 8010e14:	d142      	bne.n	8010e9c <UART_SetConfig+0x364>
 8010e16:	4b16      	ldr	r3, [pc, #88]	; (8010e70 <UART_SetConfig+0x338>)
 8010e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e1a:	f003 0307 	and.w	r3, r3, #7
 8010e1e:	2b05      	cmp	r3, #5
 8010e20:	d838      	bhi.n	8010e94 <UART_SetConfig+0x35c>
 8010e22:	a201      	add	r2, pc, #4	; (adr r2, 8010e28 <UART_SetConfig+0x2f0>)
 8010e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e28:	08010e41 	.word	0x08010e41
 8010e2c:	08010e49 	.word	0x08010e49
 8010e30:	08010e51 	.word	0x08010e51
 8010e34:	08010e59 	.word	0x08010e59
 8010e38:	08010e85 	.word	0x08010e85
 8010e3c:	08010e8d 	.word	0x08010e8d
 8010e40:	2300      	movs	r3, #0
 8010e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e46:	e24e      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010e48:	2304      	movs	r3, #4
 8010e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e4e:	e24a      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010e50:	2308      	movs	r3, #8
 8010e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e56:	e246      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010e58:	2310      	movs	r3, #16
 8010e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e5e:	e242      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010e60:	cfff69f3 	.word	0xcfff69f3
 8010e64:	58000c00 	.word	0x58000c00
 8010e68:	11fff4ff 	.word	0x11fff4ff
 8010e6c:	40011000 	.word	0x40011000
 8010e70:	58024400 	.word	0x58024400
 8010e74:	40004400 	.word	0x40004400
 8010e78:	40004800 	.word	0x40004800
 8010e7c:	40004c00 	.word	0x40004c00
 8010e80:	40005000 	.word	0x40005000
 8010e84:	2320      	movs	r3, #32
 8010e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e8a:	e22c      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010e8c:	2340      	movs	r3, #64	; 0x40
 8010e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e92:	e228      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010e94:	2380      	movs	r3, #128	; 0x80
 8010e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e9a:	e224      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010e9c:	697b      	ldr	r3, [r7, #20]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	4ab1      	ldr	r2, [pc, #708]	; (8011168 <UART_SetConfig+0x630>)
 8010ea2:	4293      	cmp	r3, r2
 8010ea4:	d176      	bne.n	8010f94 <UART_SetConfig+0x45c>
 8010ea6:	4bb1      	ldr	r3, [pc, #708]	; (801116c <UART_SetConfig+0x634>)
 8010ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010eaa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010eae:	2b28      	cmp	r3, #40	; 0x28
 8010eb0:	d86c      	bhi.n	8010f8c <UART_SetConfig+0x454>
 8010eb2:	a201      	add	r2, pc, #4	; (adr r2, 8010eb8 <UART_SetConfig+0x380>)
 8010eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010eb8:	08010f5d 	.word	0x08010f5d
 8010ebc:	08010f8d 	.word	0x08010f8d
 8010ec0:	08010f8d 	.word	0x08010f8d
 8010ec4:	08010f8d 	.word	0x08010f8d
 8010ec8:	08010f8d 	.word	0x08010f8d
 8010ecc:	08010f8d 	.word	0x08010f8d
 8010ed0:	08010f8d 	.word	0x08010f8d
 8010ed4:	08010f8d 	.word	0x08010f8d
 8010ed8:	08010f65 	.word	0x08010f65
 8010edc:	08010f8d 	.word	0x08010f8d
 8010ee0:	08010f8d 	.word	0x08010f8d
 8010ee4:	08010f8d 	.word	0x08010f8d
 8010ee8:	08010f8d 	.word	0x08010f8d
 8010eec:	08010f8d 	.word	0x08010f8d
 8010ef0:	08010f8d 	.word	0x08010f8d
 8010ef4:	08010f8d 	.word	0x08010f8d
 8010ef8:	08010f6d 	.word	0x08010f6d
 8010efc:	08010f8d 	.word	0x08010f8d
 8010f00:	08010f8d 	.word	0x08010f8d
 8010f04:	08010f8d 	.word	0x08010f8d
 8010f08:	08010f8d 	.word	0x08010f8d
 8010f0c:	08010f8d 	.word	0x08010f8d
 8010f10:	08010f8d 	.word	0x08010f8d
 8010f14:	08010f8d 	.word	0x08010f8d
 8010f18:	08010f75 	.word	0x08010f75
 8010f1c:	08010f8d 	.word	0x08010f8d
 8010f20:	08010f8d 	.word	0x08010f8d
 8010f24:	08010f8d 	.word	0x08010f8d
 8010f28:	08010f8d 	.word	0x08010f8d
 8010f2c:	08010f8d 	.word	0x08010f8d
 8010f30:	08010f8d 	.word	0x08010f8d
 8010f34:	08010f8d 	.word	0x08010f8d
 8010f38:	08010f7d 	.word	0x08010f7d
 8010f3c:	08010f8d 	.word	0x08010f8d
 8010f40:	08010f8d 	.word	0x08010f8d
 8010f44:	08010f8d 	.word	0x08010f8d
 8010f48:	08010f8d 	.word	0x08010f8d
 8010f4c:	08010f8d 	.word	0x08010f8d
 8010f50:	08010f8d 	.word	0x08010f8d
 8010f54:	08010f8d 	.word	0x08010f8d
 8010f58:	08010f85 	.word	0x08010f85
 8010f5c:	2301      	movs	r3, #1
 8010f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f62:	e1c0      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010f64:	2304      	movs	r3, #4
 8010f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f6a:	e1bc      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010f6c:	2308      	movs	r3, #8
 8010f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f72:	e1b8      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010f74:	2310      	movs	r3, #16
 8010f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f7a:	e1b4      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010f7c:	2320      	movs	r3, #32
 8010f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f82:	e1b0      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010f84:	2340      	movs	r3, #64	; 0x40
 8010f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f8a:	e1ac      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010f8c:	2380      	movs	r3, #128	; 0x80
 8010f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f92:	e1a8      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010f94:	697b      	ldr	r3, [r7, #20]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	4a75      	ldr	r2, [pc, #468]	; (8011170 <UART_SetConfig+0x638>)
 8010f9a:	4293      	cmp	r3, r2
 8010f9c:	d130      	bne.n	8011000 <UART_SetConfig+0x4c8>
 8010f9e:	4b73      	ldr	r3, [pc, #460]	; (801116c <UART_SetConfig+0x634>)
 8010fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010fa2:	f003 0307 	and.w	r3, r3, #7
 8010fa6:	2b05      	cmp	r3, #5
 8010fa8:	d826      	bhi.n	8010ff8 <UART_SetConfig+0x4c0>
 8010faa:	a201      	add	r2, pc, #4	; (adr r2, 8010fb0 <UART_SetConfig+0x478>)
 8010fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fb0:	08010fc9 	.word	0x08010fc9
 8010fb4:	08010fd1 	.word	0x08010fd1
 8010fb8:	08010fd9 	.word	0x08010fd9
 8010fbc:	08010fe1 	.word	0x08010fe1
 8010fc0:	08010fe9 	.word	0x08010fe9
 8010fc4:	08010ff1 	.word	0x08010ff1
 8010fc8:	2300      	movs	r3, #0
 8010fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fce:	e18a      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010fd0:	2304      	movs	r3, #4
 8010fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fd6:	e186      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010fd8:	2308      	movs	r3, #8
 8010fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fde:	e182      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010fe0:	2310      	movs	r3, #16
 8010fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fe6:	e17e      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010fe8:	2320      	movs	r3, #32
 8010fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fee:	e17a      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010ff0:	2340      	movs	r3, #64	; 0x40
 8010ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ff6:	e176      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8010ff8:	2380      	movs	r3, #128	; 0x80
 8010ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ffe:	e172      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8011000:	697b      	ldr	r3, [r7, #20]
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	4a5b      	ldr	r2, [pc, #364]	; (8011174 <UART_SetConfig+0x63c>)
 8011006:	4293      	cmp	r3, r2
 8011008:	d130      	bne.n	801106c <UART_SetConfig+0x534>
 801100a:	4b58      	ldr	r3, [pc, #352]	; (801116c <UART_SetConfig+0x634>)
 801100c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801100e:	f003 0307 	and.w	r3, r3, #7
 8011012:	2b05      	cmp	r3, #5
 8011014:	d826      	bhi.n	8011064 <UART_SetConfig+0x52c>
 8011016:	a201      	add	r2, pc, #4	; (adr r2, 801101c <UART_SetConfig+0x4e4>)
 8011018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801101c:	08011035 	.word	0x08011035
 8011020:	0801103d 	.word	0x0801103d
 8011024:	08011045 	.word	0x08011045
 8011028:	0801104d 	.word	0x0801104d
 801102c:	08011055 	.word	0x08011055
 8011030:	0801105d 	.word	0x0801105d
 8011034:	2300      	movs	r3, #0
 8011036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801103a:	e154      	b.n	80112e6 <UART_SetConfig+0x7ae>
 801103c:	2304      	movs	r3, #4
 801103e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011042:	e150      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8011044:	2308      	movs	r3, #8
 8011046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801104a:	e14c      	b.n	80112e6 <UART_SetConfig+0x7ae>
 801104c:	2310      	movs	r3, #16
 801104e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011052:	e148      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8011054:	2320      	movs	r3, #32
 8011056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801105a:	e144      	b.n	80112e6 <UART_SetConfig+0x7ae>
 801105c:	2340      	movs	r3, #64	; 0x40
 801105e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011062:	e140      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8011064:	2380      	movs	r3, #128	; 0x80
 8011066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801106a:	e13c      	b.n	80112e6 <UART_SetConfig+0x7ae>
 801106c:	697b      	ldr	r3, [r7, #20]
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	4a41      	ldr	r2, [pc, #260]	; (8011178 <UART_SetConfig+0x640>)
 8011072:	4293      	cmp	r3, r2
 8011074:	f040 8082 	bne.w	801117c <UART_SetConfig+0x644>
 8011078:	4b3c      	ldr	r3, [pc, #240]	; (801116c <UART_SetConfig+0x634>)
 801107a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801107c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011080:	2b28      	cmp	r3, #40	; 0x28
 8011082:	d86d      	bhi.n	8011160 <UART_SetConfig+0x628>
 8011084:	a201      	add	r2, pc, #4	; (adr r2, 801108c <UART_SetConfig+0x554>)
 8011086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801108a:	bf00      	nop
 801108c:	08011131 	.word	0x08011131
 8011090:	08011161 	.word	0x08011161
 8011094:	08011161 	.word	0x08011161
 8011098:	08011161 	.word	0x08011161
 801109c:	08011161 	.word	0x08011161
 80110a0:	08011161 	.word	0x08011161
 80110a4:	08011161 	.word	0x08011161
 80110a8:	08011161 	.word	0x08011161
 80110ac:	08011139 	.word	0x08011139
 80110b0:	08011161 	.word	0x08011161
 80110b4:	08011161 	.word	0x08011161
 80110b8:	08011161 	.word	0x08011161
 80110bc:	08011161 	.word	0x08011161
 80110c0:	08011161 	.word	0x08011161
 80110c4:	08011161 	.word	0x08011161
 80110c8:	08011161 	.word	0x08011161
 80110cc:	08011141 	.word	0x08011141
 80110d0:	08011161 	.word	0x08011161
 80110d4:	08011161 	.word	0x08011161
 80110d8:	08011161 	.word	0x08011161
 80110dc:	08011161 	.word	0x08011161
 80110e0:	08011161 	.word	0x08011161
 80110e4:	08011161 	.word	0x08011161
 80110e8:	08011161 	.word	0x08011161
 80110ec:	08011149 	.word	0x08011149
 80110f0:	08011161 	.word	0x08011161
 80110f4:	08011161 	.word	0x08011161
 80110f8:	08011161 	.word	0x08011161
 80110fc:	08011161 	.word	0x08011161
 8011100:	08011161 	.word	0x08011161
 8011104:	08011161 	.word	0x08011161
 8011108:	08011161 	.word	0x08011161
 801110c:	08011151 	.word	0x08011151
 8011110:	08011161 	.word	0x08011161
 8011114:	08011161 	.word	0x08011161
 8011118:	08011161 	.word	0x08011161
 801111c:	08011161 	.word	0x08011161
 8011120:	08011161 	.word	0x08011161
 8011124:	08011161 	.word	0x08011161
 8011128:	08011161 	.word	0x08011161
 801112c:	08011159 	.word	0x08011159
 8011130:	2301      	movs	r3, #1
 8011132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011136:	e0d6      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8011138:	2304      	movs	r3, #4
 801113a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801113e:	e0d2      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8011140:	2308      	movs	r3, #8
 8011142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011146:	e0ce      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8011148:	2310      	movs	r3, #16
 801114a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801114e:	e0ca      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8011150:	2320      	movs	r3, #32
 8011152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011156:	e0c6      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8011158:	2340      	movs	r3, #64	; 0x40
 801115a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801115e:	e0c2      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8011160:	2380      	movs	r3, #128	; 0x80
 8011162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011166:	e0be      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8011168:	40011400 	.word	0x40011400
 801116c:	58024400 	.word	0x58024400
 8011170:	40007800 	.word	0x40007800
 8011174:	40007c00 	.word	0x40007c00
 8011178:	40011800 	.word	0x40011800
 801117c:	697b      	ldr	r3, [r7, #20]
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	4aad      	ldr	r2, [pc, #692]	; (8011438 <UART_SetConfig+0x900>)
 8011182:	4293      	cmp	r3, r2
 8011184:	d176      	bne.n	8011274 <UART_SetConfig+0x73c>
 8011186:	4bad      	ldr	r3, [pc, #692]	; (801143c <UART_SetConfig+0x904>)
 8011188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801118a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801118e:	2b28      	cmp	r3, #40	; 0x28
 8011190:	d86c      	bhi.n	801126c <UART_SetConfig+0x734>
 8011192:	a201      	add	r2, pc, #4	; (adr r2, 8011198 <UART_SetConfig+0x660>)
 8011194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011198:	0801123d 	.word	0x0801123d
 801119c:	0801126d 	.word	0x0801126d
 80111a0:	0801126d 	.word	0x0801126d
 80111a4:	0801126d 	.word	0x0801126d
 80111a8:	0801126d 	.word	0x0801126d
 80111ac:	0801126d 	.word	0x0801126d
 80111b0:	0801126d 	.word	0x0801126d
 80111b4:	0801126d 	.word	0x0801126d
 80111b8:	08011245 	.word	0x08011245
 80111bc:	0801126d 	.word	0x0801126d
 80111c0:	0801126d 	.word	0x0801126d
 80111c4:	0801126d 	.word	0x0801126d
 80111c8:	0801126d 	.word	0x0801126d
 80111cc:	0801126d 	.word	0x0801126d
 80111d0:	0801126d 	.word	0x0801126d
 80111d4:	0801126d 	.word	0x0801126d
 80111d8:	0801124d 	.word	0x0801124d
 80111dc:	0801126d 	.word	0x0801126d
 80111e0:	0801126d 	.word	0x0801126d
 80111e4:	0801126d 	.word	0x0801126d
 80111e8:	0801126d 	.word	0x0801126d
 80111ec:	0801126d 	.word	0x0801126d
 80111f0:	0801126d 	.word	0x0801126d
 80111f4:	0801126d 	.word	0x0801126d
 80111f8:	08011255 	.word	0x08011255
 80111fc:	0801126d 	.word	0x0801126d
 8011200:	0801126d 	.word	0x0801126d
 8011204:	0801126d 	.word	0x0801126d
 8011208:	0801126d 	.word	0x0801126d
 801120c:	0801126d 	.word	0x0801126d
 8011210:	0801126d 	.word	0x0801126d
 8011214:	0801126d 	.word	0x0801126d
 8011218:	0801125d 	.word	0x0801125d
 801121c:	0801126d 	.word	0x0801126d
 8011220:	0801126d 	.word	0x0801126d
 8011224:	0801126d 	.word	0x0801126d
 8011228:	0801126d 	.word	0x0801126d
 801122c:	0801126d 	.word	0x0801126d
 8011230:	0801126d 	.word	0x0801126d
 8011234:	0801126d 	.word	0x0801126d
 8011238:	08011265 	.word	0x08011265
 801123c:	2301      	movs	r3, #1
 801123e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011242:	e050      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8011244:	2304      	movs	r3, #4
 8011246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801124a:	e04c      	b.n	80112e6 <UART_SetConfig+0x7ae>
 801124c:	2308      	movs	r3, #8
 801124e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011252:	e048      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8011254:	2310      	movs	r3, #16
 8011256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801125a:	e044      	b.n	80112e6 <UART_SetConfig+0x7ae>
 801125c:	2320      	movs	r3, #32
 801125e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011262:	e040      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8011264:	2340      	movs	r3, #64	; 0x40
 8011266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801126a:	e03c      	b.n	80112e6 <UART_SetConfig+0x7ae>
 801126c:	2380      	movs	r3, #128	; 0x80
 801126e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011272:	e038      	b.n	80112e6 <UART_SetConfig+0x7ae>
 8011274:	697b      	ldr	r3, [r7, #20]
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	4a71      	ldr	r2, [pc, #452]	; (8011440 <UART_SetConfig+0x908>)
 801127a:	4293      	cmp	r3, r2
 801127c:	d130      	bne.n	80112e0 <UART_SetConfig+0x7a8>
 801127e:	4b6f      	ldr	r3, [pc, #444]	; (801143c <UART_SetConfig+0x904>)
 8011280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011282:	f003 0307 	and.w	r3, r3, #7
 8011286:	2b05      	cmp	r3, #5
 8011288:	d826      	bhi.n	80112d8 <UART_SetConfig+0x7a0>
 801128a:	a201      	add	r2, pc, #4	; (adr r2, 8011290 <UART_SetConfig+0x758>)
 801128c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011290:	080112a9 	.word	0x080112a9
 8011294:	080112b1 	.word	0x080112b1
 8011298:	080112b9 	.word	0x080112b9
 801129c:	080112c1 	.word	0x080112c1
 80112a0:	080112c9 	.word	0x080112c9
 80112a4:	080112d1 	.word	0x080112d1
 80112a8:	2302      	movs	r3, #2
 80112aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112ae:	e01a      	b.n	80112e6 <UART_SetConfig+0x7ae>
 80112b0:	2304      	movs	r3, #4
 80112b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112b6:	e016      	b.n	80112e6 <UART_SetConfig+0x7ae>
 80112b8:	2308      	movs	r3, #8
 80112ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112be:	e012      	b.n	80112e6 <UART_SetConfig+0x7ae>
 80112c0:	2310      	movs	r3, #16
 80112c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112c6:	e00e      	b.n	80112e6 <UART_SetConfig+0x7ae>
 80112c8:	2320      	movs	r3, #32
 80112ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112ce:	e00a      	b.n	80112e6 <UART_SetConfig+0x7ae>
 80112d0:	2340      	movs	r3, #64	; 0x40
 80112d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112d6:	e006      	b.n	80112e6 <UART_SetConfig+0x7ae>
 80112d8:	2380      	movs	r3, #128	; 0x80
 80112da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112de:	e002      	b.n	80112e6 <UART_SetConfig+0x7ae>
 80112e0:	2380      	movs	r3, #128	; 0x80
 80112e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80112e6:	697b      	ldr	r3, [r7, #20]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	4a55      	ldr	r2, [pc, #340]	; (8011440 <UART_SetConfig+0x908>)
 80112ec:	4293      	cmp	r3, r2
 80112ee:	f040 80f8 	bne.w	80114e2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80112f2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80112f6:	2b20      	cmp	r3, #32
 80112f8:	dc46      	bgt.n	8011388 <UART_SetConfig+0x850>
 80112fa:	2b02      	cmp	r3, #2
 80112fc:	db75      	blt.n	80113ea <UART_SetConfig+0x8b2>
 80112fe:	3b02      	subs	r3, #2
 8011300:	2b1e      	cmp	r3, #30
 8011302:	d872      	bhi.n	80113ea <UART_SetConfig+0x8b2>
 8011304:	a201      	add	r2, pc, #4	; (adr r2, 801130c <UART_SetConfig+0x7d4>)
 8011306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801130a:	bf00      	nop
 801130c:	0801138f 	.word	0x0801138f
 8011310:	080113eb 	.word	0x080113eb
 8011314:	08011397 	.word	0x08011397
 8011318:	080113eb 	.word	0x080113eb
 801131c:	080113eb 	.word	0x080113eb
 8011320:	080113eb 	.word	0x080113eb
 8011324:	080113a7 	.word	0x080113a7
 8011328:	080113eb 	.word	0x080113eb
 801132c:	080113eb 	.word	0x080113eb
 8011330:	080113eb 	.word	0x080113eb
 8011334:	080113eb 	.word	0x080113eb
 8011338:	080113eb 	.word	0x080113eb
 801133c:	080113eb 	.word	0x080113eb
 8011340:	080113eb 	.word	0x080113eb
 8011344:	080113b7 	.word	0x080113b7
 8011348:	080113eb 	.word	0x080113eb
 801134c:	080113eb 	.word	0x080113eb
 8011350:	080113eb 	.word	0x080113eb
 8011354:	080113eb 	.word	0x080113eb
 8011358:	080113eb 	.word	0x080113eb
 801135c:	080113eb 	.word	0x080113eb
 8011360:	080113eb 	.word	0x080113eb
 8011364:	080113eb 	.word	0x080113eb
 8011368:	080113eb 	.word	0x080113eb
 801136c:	080113eb 	.word	0x080113eb
 8011370:	080113eb 	.word	0x080113eb
 8011374:	080113eb 	.word	0x080113eb
 8011378:	080113eb 	.word	0x080113eb
 801137c:	080113eb 	.word	0x080113eb
 8011380:	080113eb 	.word	0x080113eb
 8011384:	080113dd 	.word	0x080113dd
 8011388:	2b40      	cmp	r3, #64	; 0x40
 801138a:	d02a      	beq.n	80113e2 <UART_SetConfig+0x8aa>
 801138c:	e02d      	b.n	80113ea <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801138e:	f7fb f86b 	bl	800c468 <HAL_RCCEx_GetD3PCLK1Freq>
 8011392:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011394:	e02f      	b.n	80113f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011396:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801139a:	4618      	mov	r0, r3
 801139c:	f7fb f87a 	bl	800c494 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80113a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113a4:	e027      	b.n	80113f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80113a6:	f107 0318 	add.w	r3, r7, #24
 80113aa:	4618      	mov	r0, r3
 80113ac:	f7fb f9c6 	bl	800c73c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80113b0:	69fb      	ldr	r3, [r7, #28]
 80113b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113b4:	e01f      	b.n	80113f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80113b6:	4b21      	ldr	r3, [pc, #132]	; (801143c <UART_SetConfig+0x904>)
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	f003 0320 	and.w	r3, r3, #32
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d009      	beq.n	80113d6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80113c2:	4b1e      	ldr	r3, [pc, #120]	; (801143c <UART_SetConfig+0x904>)
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	08db      	lsrs	r3, r3, #3
 80113c8:	f003 0303 	and.w	r3, r3, #3
 80113cc:	4a1d      	ldr	r2, [pc, #116]	; (8011444 <UART_SetConfig+0x90c>)
 80113ce:	fa22 f303 	lsr.w	r3, r2, r3
 80113d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80113d4:	e00f      	b.n	80113f6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80113d6:	4b1b      	ldr	r3, [pc, #108]	; (8011444 <UART_SetConfig+0x90c>)
 80113d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113da:	e00c      	b.n	80113f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80113dc:	4b1a      	ldr	r3, [pc, #104]	; (8011448 <UART_SetConfig+0x910>)
 80113de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113e0:	e009      	b.n	80113f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80113e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80113e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113e8:	e005      	b.n	80113f6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80113ea:	2300      	movs	r3, #0
 80113ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80113ee:	2301      	movs	r3, #1
 80113f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80113f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80113f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	f000 81ee 	beq.w	80117da <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80113fe:	697b      	ldr	r3, [r7, #20]
 8011400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011402:	4a12      	ldr	r2, [pc, #72]	; (801144c <UART_SetConfig+0x914>)
 8011404:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011408:	461a      	mov	r2, r3
 801140a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801140c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011410:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011412:	697b      	ldr	r3, [r7, #20]
 8011414:	685a      	ldr	r2, [r3, #4]
 8011416:	4613      	mov	r3, r2
 8011418:	005b      	lsls	r3, r3, #1
 801141a:	4413      	add	r3, r2
 801141c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801141e:	429a      	cmp	r2, r3
 8011420:	d305      	bcc.n	801142e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011422:	697b      	ldr	r3, [r7, #20]
 8011424:	685b      	ldr	r3, [r3, #4]
 8011426:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801142a:	429a      	cmp	r2, r3
 801142c:	d910      	bls.n	8011450 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 801142e:	2301      	movs	r3, #1
 8011430:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011434:	e1d1      	b.n	80117da <UART_SetConfig+0xca2>
 8011436:	bf00      	nop
 8011438:	40011c00 	.word	0x40011c00
 801143c:	58024400 	.word	0x58024400
 8011440:	58000c00 	.word	0x58000c00
 8011444:	03d09000 	.word	0x03d09000
 8011448:	003d0900 	.word	0x003d0900
 801144c:	0801849c 	.word	0x0801849c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011452:	2200      	movs	r2, #0
 8011454:	60bb      	str	r3, [r7, #8]
 8011456:	60fa      	str	r2, [r7, #12]
 8011458:	697b      	ldr	r3, [r7, #20]
 801145a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801145c:	4ac0      	ldr	r2, [pc, #768]	; (8011760 <UART_SetConfig+0xc28>)
 801145e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011462:	b29b      	uxth	r3, r3
 8011464:	2200      	movs	r2, #0
 8011466:	603b      	str	r3, [r7, #0]
 8011468:	607a      	str	r2, [r7, #4]
 801146a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801146e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011472:	f7ee ffb5 	bl	80003e0 <__aeabi_uldivmod>
 8011476:	4602      	mov	r2, r0
 8011478:	460b      	mov	r3, r1
 801147a:	4610      	mov	r0, r2
 801147c:	4619      	mov	r1, r3
 801147e:	f04f 0200 	mov.w	r2, #0
 8011482:	f04f 0300 	mov.w	r3, #0
 8011486:	020b      	lsls	r3, r1, #8
 8011488:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801148c:	0202      	lsls	r2, r0, #8
 801148e:	6979      	ldr	r1, [r7, #20]
 8011490:	6849      	ldr	r1, [r1, #4]
 8011492:	0849      	lsrs	r1, r1, #1
 8011494:	2000      	movs	r0, #0
 8011496:	460c      	mov	r4, r1
 8011498:	4605      	mov	r5, r0
 801149a:	eb12 0804 	adds.w	r8, r2, r4
 801149e:	eb43 0905 	adc.w	r9, r3, r5
 80114a2:	697b      	ldr	r3, [r7, #20]
 80114a4:	685b      	ldr	r3, [r3, #4]
 80114a6:	2200      	movs	r2, #0
 80114a8:	469a      	mov	sl, r3
 80114aa:	4693      	mov	fp, r2
 80114ac:	4652      	mov	r2, sl
 80114ae:	465b      	mov	r3, fp
 80114b0:	4640      	mov	r0, r8
 80114b2:	4649      	mov	r1, r9
 80114b4:	f7ee ff94 	bl	80003e0 <__aeabi_uldivmod>
 80114b8:	4602      	mov	r2, r0
 80114ba:	460b      	mov	r3, r1
 80114bc:	4613      	mov	r3, r2
 80114be:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80114c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80114c6:	d308      	bcc.n	80114da <UART_SetConfig+0x9a2>
 80114c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80114ce:	d204      	bcs.n	80114da <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80114d0:	697b      	ldr	r3, [r7, #20]
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80114d6:	60da      	str	r2, [r3, #12]
 80114d8:	e17f      	b.n	80117da <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80114da:	2301      	movs	r3, #1
 80114dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80114e0:	e17b      	b.n	80117da <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80114e2:	697b      	ldr	r3, [r7, #20]
 80114e4:	69db      	ldr	r3, [r3, #28]
 80114e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80114ea:	f040 80bd 	bne.w	8011668 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80114ee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80114f2:	2b20      	cmp	r3, #32
 80114f4:	dc48      	bgt.n	8011588 <UART_SetConfig+0xa50>
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	db7b      	blt.n	80115f2 <UART_SetConfig+0xaba>
 80114fa:	2b20      	cmp	r3, #32
 80114fc:	d879      	bhi.n	80115f2 <UART_SetConfig+0xaba>
 80114fe:	a201      	add	r2, pc, #4	; (adr r2, 8011504 <UART_SetConfig+0x9cc>)
 8011500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011504:	0801158f 	.word	0x0801158f
 8011508:	08011597 	.word	0x08011597
 801150c:	080115f3 	.word	0x080115f3
 8011510:	080115f3 	.word	0x080115f3
 8011514:	0801159f 	.word	0x0801159f
 8011518:	080115f3 	.word	0x080115f3
 801151c:	080115f3 	.word	0x080115f3
 8011520:	080115f3 	.word	0x080115f3
 8011524:	080115af 	.word	0x080115af
 8011528:	080115f3 	.word	0x080115f3
 801152c:	080115f3 	.word	0x080115f3
 8011530:	080115f3 	.word	0x080115f3
 8011534:	080115f3 	.word	0x080115f3
 8011538:	080115f3 	.word	0x080115f3
 801153c:	080115f3 	.word	0x080115f3
 8011540:	080115f3 	.word	0x080115f3
 8011544:	080115bf 	.word	0x080115bf
 8011548:	080115f3 	.word	0x080115f3
 801154c:	080115f3 	.word	0x080115f3
 8011550:	080115f3 	.word	0x080115f3
 8011554:	080115f3 	.word	0x080115f3
 8011558:	080115f3 	.word	0x080115f3
 801155c:	080115f3 	.word	0x080115f3
 8011560:	080115f3 	.word	0x080115f3
 8011564:	080115f3 	.word	0x080115f3
 8011568:	080115f3 	.word	0x080115f3
 801156c:	080115f3 	.word	0x080115f3
 8011570:	080115f3 	.word	0x080115f3
 8011574:	080115f3 	.word	0x080115f3
 8011578:	080115f3 	.word	0x080115f3
 801157c:	080115f3 	.word	0x080115f3
 8011580:	080115f3 	.word	0x080115f3
 8011584:	080115e5 	.word	0x080115e5
 8011588:	2b40      	cmp	r3, #64	; 0x40
 801158a:	d02e      	beq.n	80115ea <UART_SetConfig+0xab2>
 801158c:	e031      	b.n	80115f2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801158e:	f7f9 f8cd 	bl	800a72c <HAL_RCC_GetPCLK1Freq>
 8011592:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011594:	e033      	b.n	80115fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011596:	f7f9 f8df 	bl	800a758 <HAL_RCC_GetPCLK2Freq>
 801159a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801159c:	e02f      	b.n	80115fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801159e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80115a2:	4618      	mov	r0, r3
 80115a4:	f7fa ff76 	bl	800c494 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80115a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80115ac:	e027      	b.n	80115fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80115ae:	f107 0318 	add.w	r3, r7, #24
 80115b2:	4618      	mov	r0, r3
 80115b4:	f7fb f8c2 	bl	800c73c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80115b8:	69fb      	ldr	r3, [r7, #28]
 80115ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80115bc:	e01f      	b.n	80115fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80115be:	4b69      	ldr	r3, [pc, #420]	; (8011764 <UART_SetConfig+0xc2c>)
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	f003 0320 	and.w	r3, r3, #32
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d009      	beq.n	80115de <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80115ca:	4b66      	ldr	r3, [pc, #408]	; (8011764 <UART_SetConfig+0xc2c>)
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	08db      	lsrs	r3, r3, #3
 80115d0:	f003 0303 	and.w	r3, r3, #3
 80115d4:	4a64      	ldr	r2, [pc, #400]	; (8011768 <UART_SetConfig+0xc30>)
 80115d6:	fa22 f303 	lsr.w	r3, r2, r3
 80115da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80115dc:	e00f      	b.n	80115fe <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80115de:	4b62      	ldr	r3, [pc, #392]	; (8011768 <UART_SetConfig+0xc30>)
 80115e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80115e2:	e00c      	b.n	80115fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80115e4:	4b61      	ldr	r3, [pc, #388]	; (801176c <UART_SetConfig+0xc34>)
 80115e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80115e8:	e009      	b.n	80115fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80115ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80115ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80115f0:	e005      	b.n	80115fe <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80115f2:	2300      	movs	r3, #0
 80115f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80115f6:	2301      	movs	r3, #1
 80115f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80115fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80115fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011600:	2b00      	cmp	r3, #0
 8011602:	f000 80ea 	beq.w	80117da <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011606:	697b      	ldr	r3, [r7, #20]
 8011608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801160a:	4a55      	ldr	r2, [pc, #340]	; (8011760 <UART_SetConfig+0xc28>)
 801160c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011610:	461a      	mov	r2, r3
 8011612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011614:	fbb3 f3f2 	udiv	r3, r3, r2
 8011618:	005a      	lsls	r2, r3, #1
 801161a:	697b      	ldr	r3, [r7, #20]
 801161c:	685b      	ldr	r3, [r3, #4]
 801161e:	085b      	lsrs	r3, r3, #1
 8011620:	441a      	add	r2, r3
 8011622:	697b      	ldr	r3, [r7, #20]
 8011624:	685b      	ldr	r3, [r3, #4]
 8011626:	fbb2 f3f3 	udiv	r3, r2, r3
 801162a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801162c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801162e:	2b0f      	cmp	r3, #15
 8011630:	d916      	bls.n	8011660 <UART_SetConfig+0xb28>
 8011632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011638:	d212      	bcs.n	8011660 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801163a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801163c:	b29b      	uxth	r3, r3
 801163e:	f023 030f 	bic.w	r3, r3, #15
 8011642:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011646:	085b      	lsrs	r3, r3, #1
 8011648:	b29b      	uxth	r3, r3
 801164a:	f003 0307 	and.w	r3, r3, #7
 801164e:	b29a      	uxth	r2, r3
 8011650:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011652:	4313      	orrs	r3, r2
 8011654:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011656:	697b      	ldr	r3, [r7, #20]
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801165c:	60da      	str	r2, [r3, #12]
 801165e:	e0bc      	b.n	80117da <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011660:	2301      	movs	r3, #1
 8011662:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011666:	e0b8      	b.n	80117da <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011668:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801166c:	2b20      	cmp	r3, #32
 801166e:	dc4b      	bgt.n	8011708 <UART_SetConfig+0xbd0>
 8011670:	2b00      	cmp	r3, #0
 8011672:	f2c0 8087 	blt.w	8011784 <UART_SetConfig+0xc4c>
 8011676:	2b20      	cmp	r3, #32
 8011678:	f200 8084 	bhi.w	8011784 <UART_SetConfig+0xc4c>
 801167c:	a201      	add	r2, pc, #4	; (adr r2, 8011684 <UART_SetConfig+0xb4c>)
 801167e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011682:	bf00      	nop
 8011684:	0801170f 	.word	0x0801170f
 8011688:	08011717 	.word	0x08011717
 801168c:	08011785 	.word	0x08011785
 8011690:	08011785 	.word	0x08011785
 8011694:	0801171f 	.word	0x0801171f
 8011698:	08011785 	.word	0x08011785
 801169c:	08011785 	.word	0x08011785
 80116a0:	08011785 	.word	0x08011785
 80116a4:	0801172f 	.word	0x0801172f
 80116a8:	08011785 	.word	0x08011785
 80116ac:	08011785 	.word	0x08011785
 80116b0:	08011785 	.word	0x08011785
 80116b4:	08011785 	.word	0x08011785
 80116b8:	08011785 	.word	0x08011785
 80116bc:	08011785 	.word	0x08011785
 80116c0:	08011785 	.word	0x08011785
 80116c4:	0801173f 	.word	0x0801173f
 80116c8:	08011785 	.word	0x08011785
 80116cc:	08011785 	.word	0x08011785
 80116d0:	08011785 	.word	0x08011785
 80116d4:	08011785 	.word	0x08011785
 80116d8:	08011785 	.word	0x08011785
 80116dc:	08011785 	.word	0x08011785
 80116e0:	08011785 	.word	0x08011785
 80116e4:	08011785 	.word	0x08011785
 80116e8:	08011785 	.word	0x08011785
 80116ec:	08011785 	.word	0x08011785
 80116f0:	08011785 	.word	0x08011785
 80116f4:	08011785 	.word	0x08011785
 80116f8:	08011785 	.word	0x08011785
 80116fc:	08011785 	.word	0x08011785
 8011700:	08011785 	.word	0x08011785
 8011704:	08011777 	.word	0x08011777
 8011708:	2b40      	cmp	r3, #64	; 0x40
 801170a:	d037      	beq.n	801177c <UART_SetConfig+0xc44>
 801170c:	e03a      	b.n	8011784 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801170e:	f7f9 f80d 	bl	800a72c <HAL_RCC_GetPCLK1Freq>
 8011712:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011714:	e03c      	b.n	8011790 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011716:	f7f9 f81f 	bl	800a758 <HAL_RCC_GetPCLK2Freq>
 801171a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801171c:	e038      	b.n	8011790 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801171e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011722:	4618      	mov	r0, r3
 8011724:	f7fa feb6 	bl	800c494 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801172a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801172c:	e030      	b.n	8011790 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801172e:	f107 0318 	add.w	r3, r7, #24
 8011732:	4618      	mov	r0, r3
 8011734:	f7fb f802 	bl	800c73c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011738:	69fb      	ldr	r3, [r7, #28]
 801173a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801173c:	e028      	b.n	8011790 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801173e:	4b09      	ldr	r3, [pc, #36]	; (8011764 <UART_SetConfig+0xc2c>)
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	f003 0320 	and.w	r3, r3, #32
 8011746:	2b00      	cmp	r3, #0
 8011748:	d012      	beq.n	8011770 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801174a:	4b06      	ldr	r3, [pc, #24]	; (8011764 <UART_SetConfig+0xc2c>)
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	08db      	lsrs	r3, r3, #3
 8011750:	f003 0303 	and.w	r3, r3, #3
 8011754:	4a04      	ldr	r2, [pc, #16]	; (8011768 <UART_SetConfig+0xc30>)
 8011756:	fa22 f303 	lsr.w	r3, r2, r3
 801175a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801175c:	e018      	b.n	8011790 <UART_SetConfig+0xc58>
 801175e:	bf00      	nop
 8011760:	0801849c 	.word	0x0801849c
 8011764:	58024400 	.word	0x58024400
 8011768:	03d09000 	.word	0x03d09000
 801176c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8011770:	4b24      	ldr	r3, [pc, #144]	; (8011804 <UART_SetConfig+0xccc>)
 8011772:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011774:	e00c      	b.n	8011790 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011776:	4b24      	ldr	r3, [pc, #144]	; (8011808 <UART_SetConfig+0xcd0>)
 8011778:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801177a:	e009      	b.n	8011790 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801177c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011780:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011782:	e005      	b.n	8011790 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8011784:	2300      	movs	r3, #0
 8011786:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011788:	2301      	movs	r3, #1
 801178a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801178e:	bf00      	nop
    }

    if (pclk != 0U)
 8011790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011792:	2b00      	cmp	r3, #0
 8011794:	d021      	beq.n	80117da <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011796:	697b      	ldr	r3, [r7, #20]
 8011798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801179a:	4a1c      	ldr	r2, [pc, #112]	; (801180c <UART_SetConfig+0xcd4>)
 801179c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80117a0:	461a      	mov	r2, r3
 80117a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117a4:	fbb3 f2f2 	udiv	r2, r3, r2
 80117a8:	697b      	ldr	r3, [r7, #20]
 80117aa:	685b      	ldr	r3, [r3, #4]
 80117ac:	085b      	lsrs	r3, r3, #1
 80117ae:	441a      	add	r2, r3
 80117b0:	697b      	ldr	r3, [r7, #20]
 80117b2:	685b      	ldr	r3, [r3, #4]
 80117b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80117b8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80117ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117bc:	2b0f      	cmp	r3, #15
 80117be:	d909      	bls.n	80117d4 <UART_SetConfig+0xc9c>
 80117c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80117c6:	d205      	bcs.n	80117d4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80117c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117ca:	b29a      	uxth	r2, r3
 80117cc:	697b      	ldr	r3, [r7, #20]
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	60da      	str	r2, [r3, #12]
 80117d2:	e002      	b.n	80117da <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80117d4:	2301      	movs	r3, #1
 80117d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80117da:	697b      	ldr	r3, [r7, #20]
 80117dc:	2201      	movs	r2, #1
 80117de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80117e2:	697b      	ldr	r3, [r7, #20]
 80117e4:	2201      	movs	r2, #1
 80117e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80117ea:	697b      	ldr	r3, [r7, #20]
 80117ec:	2200      	movs	r2, #0
 80117ee:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80117f0:	697b      	ldr	r3, [r7, #20]
 80117f2:	2200      	movs	r2, #0
 80117f4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80117f6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80117fa:	4618      	mov	r0, r3
 80117fc:	3748      	adds	r7, #72	; 0x48
 80117fe:	46bd      	mov	sp, r7
 8011800:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011804:	03d09000 	.word	0x03d09000
 8011808:	003d0900 	.word	0x003d0900
 801180c:	0801849c 	.word	0x0801849c

08011810 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011810:	b480      	push	{r7}
 8011812:	b083      	sub	sp, #12
 8011814:	af00      	add	r7, sp, #0
 8011816:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801181c:	f003 0301 	and.w	r3, r3, #1
 8011820:	2b00      	cmp	r3, #0
 8011822:	d00a      	beq.n	801183a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	685b      	ldr	r3, [r3, #4]
 801182a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	430a      	orrs	r2, r1
 8011838:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801183e:	f003 0302 	and.w	r3, r3, #2
 8011842:	2b00      	cmp	r3, #0
 8011844:	d00a      	beq.n	801185c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	685b      	ldr	r3, [r3, #4]
 801184c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	430a      	orrs	r2, r1
 801185a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011860:	f003 0304 	and.w	r3, r3, #4
 8011864:	2b00      	cmp	r3, #0
 8011866:	d00a      	beq.n	801187e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	685b      	ldr	r3, [r3, #4]
 801186e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	430a      	orrs	r2, r1
 801187c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011882:	f003 0308 	and.w	r3, r3, #8
 8011886:	2b00      	cmp	r3, #0
 8011888:	d00a      	beq.n	80118a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	685b      	ldr	r3, [r3, #4]
 8011890:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	430a      	orrs	r2, r1
 801189e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118a4:	f003 0310 	and.w	r3, r3, #16
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d00a      	beq.n	80118c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	689b      	ldr	r3, [r3, #8]
 80118b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	430a      	orrs	r2, r1
 80118c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118c6:	f003 0320 	and.w	r3, r3, #32
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d00a      	beq.n	80118e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	689b      	ldr	r3, [r3, #8]
 80118d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	430a      	orrs	r2, r1
 80118e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d01a      	beq.n	8011926 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	685b      	ldr	r3, [r3, #4]
 80118f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	430a      	orrs	r2, r1
 8011904:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801190a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801190e:	d10a      	bne.n	8011926 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	685b      	ldr	r3, [r3, #4]
 8011916:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	430a      	orrs	r2, r1
 8011924:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801192a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801192e:	2b00      	cmp	r3, #0
 8011930:	d00a      	beq.n	8011948 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	685b      	ldr	r3, [r3, #4]
 8011938:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	430a      	orrs	r2, r1
 8011946:	605a      	str	r2, [r3, #4]
  }
}
 8011948:	bf00      	nop
 801194a:	370c      	adds	r7, #12
 801194c:	46bd      	mov	sp, r7
 801194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011952:	4770      	bx	lr

08011954 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011954:	b580      	push	{r7, lr}
 8011956:	b098      	sub	sp, #96	; 0x60
 8011958:	af02      	add	r7, sp, #8
 801195a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	2200      	movs	r2, #0
 8011960:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011964:	f7f2 f822 	bl	80039ac <HAL_GetTick>
 8011968:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	f003 0308 	and.w	r3, r3, #8
 8011974:	2b08      	cmp	r3, #8
 8011976:	d12f      	bne.n	80119d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011978:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801197c:	9300      	str	r3, [sp, #0]
 801197e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011980:	2200      	movs	r2, #0
 8011982:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011986:	6878      	ldr	r0, [r7, #4]
 8011988:	f000 f88e 	bl	8011aa8 <UART_WaitOnFlagUntilTimeout>
 801198c:	4603      	mov	r3, r0
 801198e:	2b00      	cmp	r3, #0
 8011990:	d022      	beq.n	80119d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801199a:	e853 3f00 	ldrex	r3, [r3]
 801199e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80119a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80119a6:	653b      	str	r3, [r7, #80]	; 0x50
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	461a      	mov	r2, r3
 80119ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119b0:	647b      	str	r3, [r7, #68]	; 0x44
 80119b2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80119b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80119b8:	e841 2300 	strex	r3, r2, [r1]
 80119bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80119be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d1e6      	bne.n	8011992 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	2220      	movs	r2, #32
 80119c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	2200      	movs	r2, #0
 80119d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80119d4:	2303      	movs	r3, #3
 80119d6:	e063      	b.n	8011aa0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	f003 0304 	and.w	r3, r3, #4
 80119e2:	2b04      	cmp	r3, #4
 80119e4:	d149      	bne.n	8011a7a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80119e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80119ea:	9300      	str	r3, [sp, #0]
 80119ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80119ee:	2200      	movs	r2, #0
 80119f0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80119f4:	6878      	ldr	r0, [r7, #4]
 80119f6:	f000 f857 	bl	8011aa8 <UART_WaitOnFlagUntilTimeout>
 80119fa:	4603      	mov	r3, r0
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d03c      	beq.n	8011a7a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a08:	e853 3f00 	ldrex	r3, [r3]
 8011a0c:	623b      	str	r3, [r7, #32]
   return(result);
 8011a0e:	6a3b      	ldr	r3, [r7, #32]
 8011a10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011a14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	461a      	mov	r2, r3
 8011a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a1e:	633b      	str	r3, [r7, #48]	; 0x30
 8011a20:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011a24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a26:	e841 2300 	strex	r3, r2, [r1]
 8011a2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d1e6      	bne.n	8011a00 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	3308      	adds	r3, #8
 8011a38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a3a:	693b      	ldr	r3, [r7, #16]
 8011a3c:	e853 3f00 	ldrex	r3, [r3]
 8011a40:	60fb      	str	r3, [r7, #12]
   return(result);
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	f023 0301 	bic.w	r3, r3, #1
 8011a48:	64bb      	str	r3, [r7, #72]	; 0x48
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	3308      	adds	r3, #8
 8011a50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011a52:	61fa      	str	r2, [r7, #28]
 8011a54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a56:	69b9      	ldr	r1, [r7, #24]
 8011a58:	69fa      	ldr	r2, [r7, #28]
 8011a5a:	e841 2300 	strex	r3, r2, [r1]
 8011a5e:	617b      	str	r3, [r7, #20]
   return(result);
 8011a60:	697b      	ldr	r3, [r7, #20]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d1e5      	bne.n	8011a32 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	2220      	movs	r2, #32
 8011a6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	2200      	movs	r2, #0
 8011a72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011a76:	2303      	movs	r3, #3
 8011a78:	e012      	b.n	8011aa0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	2220      	movs	r2, #32
 8011a7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	2220      	movs	r2, #32
 8011a86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	2200      	movs	r2, #0
 8011a8e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	2200      	movs	r2, #0
 8011a94:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	2200      	movs	r2, #0
 8011a9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011a9e:	2300      	movs	r3, #0
}
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	3758      	adds	r7, #88	; 0x58
 8011aa4:	46bd      	mov	sp, r7
 8011aa6:	bd80      	pop	{r7, pc}

08011aa8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011aa8:	b580      	push	{r7, lr}
 8011aaa:	b084      	sub	sp, #16
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	60f8      	str	r0, [r7, #12]
 8011ab0:	60b9      	str	r1, [r7, #8]
 8011ab2:	603b      	str	r3, [r7, #0]
 8011ab4:	4613      	mov	r3, r2
 8011ab6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011ab8:	e049      	b.n	8011b4e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011aba:	69bb      	ldr	r3, [r7, #24]
 8011abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ac0:	d045      	beq.n	8011b4e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011ac2:	f7f1 ff73 	bl	80039ac <HAL_GetTick>
 8011ac6:	4602      	mov	r2, r0
 8011ac8:	683b      	ldr	r3, [r7, #0]
 8011aca:	1ad3      	subs	r3, r2, r3
 8011acc:	69ba      	ldr	r2, [r7, #24]
 8011ace:	429a      	cmp	r2, r3
 8011ad0:	d302      	bcc.n	8011ad8 <UART_WaitOnFlagUntilTimeout+0x30>
 8011ad2:	69bb      	ldr	r3, [r7, #24]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d101      	bne.n	8011adc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011ad8:	2303      	movs	r3, #3
 8011ada:	e048      	b.n	8011b6e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	f003 0304 	and.w	r3, r3, #4
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d031      	beq.n	8011b4e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	69db      	ldr	r3, [r3, #28]
 8011af0:	f003 0308 	and.w	r3, r3, #8
 8011af4:	2b08      	cmp	r3, #8
 8011af6:	d110      	bne.n	8011b1a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	2208      	movs	r2, #8
 8011afe:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8011b00:	68f8      	ldr	r0, [r7, #12]
 8011b02:	f000 f839 	bl	8011b78 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	2208      	movs	r2, #8
 8011b0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	2200      	movs	r2, #0
 8011b12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8011b16:	2301      	movs	r3, #1
 8011b18:	e029      	b.n	8011b6e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	69db      	ldr	r3, [r3, #28]
 8011b20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011b24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011b28:	d111      	bne.n	8011b4e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011b32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011b34:	68f8      	ldr	r0, [r7, #12]
 8011b36:	f000 f81f 	bl	8011b78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	2220      	movs	r2, #32
 8011b3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	2200      	movs	r2, #0
 8011b46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011b4a:	2303      	movs	r3, #3
 8011b4c:	e00f      	b.n	8011b6e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	69da      	ldr	r2, [r3, #28]
 8011b54:	68bb      	ldr	r3, [r7, #8]
 8011b56:	4013      	ands	r3, r2
 8011b58:	68ba      	ldr	r2, [r7, #8]
 8011b5a:	429a      	cmp	r2, r3
 8011b5c:	bf0c      	ite	eq
 8011b5e:	2301      	moveq	r3, #1
 8011b60:	2300      	movne	r3, #0
 8011b62:	b2db      	uxtb	r3, r3
 8011b64:	461a      	mov	r2, r3
 8011b66:	79fb      	ldrb	r3, [r7, #7]
 8011b68:	429a      	cmp	r2, r3
 8011b6a:	d0a6      	beq.n	8011aba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011b6c:	2300      	movs	r3, #0
}
 8011b6e:	4618      	mov	r0, r3
 8011b70:	3710      	adds	r7, #16
 8011b72:	46bd      	mov	sp, r7
 8011b74:	bd80      	pop	{r7, pc}
	...

08011b78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011b78:	b480      	push	{r7}
 8011b7a:	b095      	sub	sp, #84	; 0x54
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b88:	e853 3f00 	ldrex	r3, [r3]
 8011b8c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011b94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	461a      	mov	r2, r3
 8011b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b9e:	643b      	str	r3, [r7, #64]	; 0x40
 8011ba0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ba2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011ba4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011ba6:	e841 2300 	strex	r3, r2, [r1]
 8011baa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d1e6      	bne.n	8011b80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	3308      	adds	r3, #8
 8011bb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bba:	6a3b      	ldr	r3, [r7, #32]
 8011bbc:	e853 3f00 	ldrex	r3, [r3]
 8011bc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8011bc2:	69fa      	ldr	r2, [r7, #28]
 8011bc4:	4b1e      	ldr	r3, [pc, #120]	; (8011c40 <UART_EndRxTransfer+0xc8>)
 8011bc6:	4013      	ands	r3, r2
 8011bc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	3308      	adds	r3, #8
 8011bd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011bd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011bd4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011bd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011bda:	e841 2300 	strex	r3, r2, [r1]
 8011bde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d1e5      	bne.n	8011bb2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bea:	2b01      	cmp	r3, #1
 8011bec:	d118      	bne.n	8011c20 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	e853 3f00 	ldrex	r3, [r3]
 8011bfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8011bfc:	68bb      	ldr	r3, [r7, #8]
 8011bfe:	f023 0310 	bic.w	r3, r3, #16
 8011c02:	647b      	str	r3, [r7, #68]	; 0x44
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	461a      	mov	r2, r3
 8011c0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c0c:	61bb      	str	r3, [r7, #24]
 8011c0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c10:	6979      	ldr	r1, [r7, #20]
 8011c12:	69ba      	ldr	r2, [r7, #24]
 8011c14:	e841 2300 	strex	r3, r2, [r1]
 8011c18:	613b      	str	r3, [r7, #16]
   return(result);
 8011c1a:	693b      	ldr	r3, [r7, #16]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d1e6      	bne.n	8011bee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	2220      	movs	r2, #32
 8011c24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	2200      	movs	r2, #0
 8011c32:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011c34:	bf00      	nop
 8011c36:	3754      	adds	r7, #84	; 0x54
 8011c38:	46bd      	mov	sp, r7
 8011c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c3e:	4770      	bx	lr
 8011c40:	effffffe 	.word	0xeffffffe

08011c44 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011c44:	b480      	push	{r7}
 8011c46:	b085      	sub	sp, #20
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011c52:	2b01      	cmp	r3, #1
 8011c54:	d101      	bne.n	8011c5a <HAL_UARTEx_DisableFifoMode+0x16>
 8011c56:	2302      	movs	r3, #2
 8011c58:	e027      	b.n	8011caa <HAL_UARTEx_DisableFifoMode+0x66>
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	2201      	movs	r2, #1
 8011c5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	2224      	movs	r2, #36	; 0x24
 8011c66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	681a      	ldr	r2, [r3, #0]
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	f022 0201 	bic.w	r2, r2, #1
 8011c80:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011c88:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	68fa      	ldr	r2, [r7, #12]
 8011c96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	2220      	movs	r2, #32
 8011c9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	2200      	movs	r2, #0
 8011ca4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011ca8:	2300      	movs	r3, #0
}
 8011caa:	4618      	mov	r0, r3
 8011cac:	3714      	adds	r7, #20
 8011cae:	46bd      	mov	sp, r7
 8011cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb4:	4770      	bx	lr

08011cb6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011cb6:	b580      	push	{r7, lr}
 8011cb8:	b084      	sub	sp, #16
 8011cba:	af00      	add	r7, sp, #0
 8011cbc:	6078      	str	r0, [r7, #4]
 8011cbe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011cc6:	2b01      	cmp	r3, #1
 8011cc8:	d101      	bne.n	8011cce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011cca:	2302      	movs	r3, #2
 8011ccc:	e02d      	b.n	8011d2a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	2201      	movs	r2, #1
 8011cd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	2224      	movs	r2, #36	; 0x24
 8011cda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	681a      	ldr	r2, [r3, #0]
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	f022 0201 	bic.w	r2, r2, #1
 8011cf4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	689b      	ldr	r3, [r3, #8]
 8011cfc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	683a      	ldr	r2, [r7, #0]
 8011d06:	430a      	orrs	r2, r1
 8011d08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011d0a:	6878      	ldr	r0, [r7, #4]
 8011d0c:	f000 f850 	bl	8011db0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	68fa      	ldr	r2, [r7, #12]
 8011d16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	2220      	movs	r2, #32
 8011d1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	2200      	movs	r2, #0
 8011d24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011d28:	2300      	movs	r3, #0
}
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	3710      	adds	r7, #16
 8011d2e:	46bd      	mov	sp, r7
 8011d30:	bd80      	pop	{r7, pc}

08011d32 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011d32:	b580      	push	{r7, lr}
 8011d34:	b084      	sub	sp, #16
 8011d36:	af00      	add	r7, sp, #0
 8011d38:	6078      	str	r0, [r7, #4]
 8011d3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011d42:	2b01      	cmp	r3, #1
 8011d44:	d101      	bne.n	8011d4a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011d46:	2302      	movs	r3, #2
 8011d48:	e02d      	b.n	8011da6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	2201      	movs	r2, #1
 8011d4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	2224      	movs	r2, #36	; 0x24
 8011d56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	681a      	ldr	r2, [r3, #0]
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	f022 0201 	bic.w	r2, r2, #1
 8011d70:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	689b      	ldr	r3, [r3, #8]
 8011d78:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	683a      	ldr	r2, [r7, #0]
 8011d82:	430a      	orrs	r2, r1
 8011d84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011d86:	6878      	ldr	r0, [r7, #4]
 8011d88:	f000 f812 	bl	8011db0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	68fa      	ldr	r2, [r7, #12]
 8011d92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	2220      	movs	r2, #32
 8011d98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	2200      	movs	r2, #0
 8011da0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011da4:	2300      	movs	r3, #0
}
 8011da6:	4618      	mov	r0, r3
 8011da8:	3710      	adds	r7, #16
 8011daa:	46bd      	mov	sp, r7
 8011dac:	bd80      	pop	{r7, pc}
	...

08011db0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011db0:	b480      	push	{r7}
 8011db2:	b085      	sub	sp, #20
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d108      	bne.n	8011dd2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	2201      	movs	r2, #1
 8011dc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	2201      	movs	r2, #1
 8011dcc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011dd0:	e031      	b.n	8011e36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011dd2:	2310      	movs	r3, #16
 8011dd4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011dd6:	2310      	movs	r3, #16
 8011dd8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	689b      	ldr	r3, [r3, #8]
 8011de0:	0e5b      	lsrs	r3, r3, #25
 8011de2:	b2db      	uxtb	r3, r3
 8011de4:	f003 0307 	and.w	r3, r3, #7
 8011de8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	689b      	ldr	r3, [r3, #8]
 8011df0:	0f5b      	lsrs	r3, r3, #29
 8011df2:	b2db      	uxtb	r3, r3
 8011df4:	f003 0307 	and.w	r3, r3, #7
 8011df8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011dfa:	7bbb      	ldrb	r3, [r7, #14]
 8011dfc:	7b3a      	ldrb	r2, [r7, #12]
 8011dfe:	4911      	ldr	r1, [pc, #68]	; (8011e44 <UARTEx_SetNbDataToProcess+0x94>)
 8011e00:	5c8a      	ldrb	r2, [r1, r2]
 8011e02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011e06:	7b3a      	ldrb	r2, [r7, #12]
 8011e08:	490f      	ldr	r1, [pc, #60]	; (8011e48 <UARTEx_SetNbDataToProcess+0x98>)
 8011e0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011e0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8011e10:	b29a      	uxth	r2, r3
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011e18:	7bfb      	ldrb	r3, [r7, #15]
 8011e1a:	7b7a      	ldrb	r2, [r7, #13]
 8011e1c:	4909      	ldr	r1, [pc, #36]	; (8011e44 <UARTEx_SetNbDataToProcess+0x94>)
 8011e1e:	5c8a      	ldrb	r2, [r1, r2]
 8011e20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011e24:	7b7a      	ldrb	r2, [r7, #13]
 8011e26:	4908      	ldr	r1, [pc, #32]	; (8011e48 <UARTEx_SetNbDataToProcess+0x98>)
 8011e28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011e2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8011e2e:	b29a      	uxth	r2, r3
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011e36:	bf00      	nop
 8011e38:	3714      	adds	r7, #20
 8011e3a:	46bd      	mov	sp, r7
 8011e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e40:	4770      	bx	lr
 8011e42:	bf00      	nop
 8011e44:	080184b4 	.word	0x080184b4
 8011e48:	080184bc 	.word	0x080184bc

08011e4c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8011e4c:	b084      	sub	sp, #16
 8011e4e:	b480      	push	{r7}
 8011e50:	b085      	sub	sp, #20
 8011e52:	af00      	add	r7, sp, #0
 8011e54:	6078      	str	r0, [r7, #4]
 8011e56:	f107 001c 	add.w	r0, r7, #28
 8011e5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011e5e:	2300      	movs	r3, #0
 8011e60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8011e62:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8011e64:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8011e66:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8011e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8011e6a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8011e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8011e6e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8011e72:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8011e74:	68fa      	ldr	r2, [r7, #12]
 8011e76:	4313      	orrs	r3, r2
 8011e78:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	685a      	ldr	r2, [r3, #4]
 8011e7e:	4b07      	ldr	r3, [pc, #28]	; (8011e9c <SDMMC_Init+0x50>)
 8011e80:	4013      	ands	r3, r2
 8011e82:	68fa      	ldr	r2, [r7, #12]
 8011e84:	431a      	orrs	r2, r3
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8011e8a:	2300      	movs	r3, #0
}
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	3714      	adds	r7, #20
 8011e90:	46bd      	mov	sp, r7
 8011e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e96:	b004      	add	sp, #16
 8011e98:	4770      	bx	lr
 8011e9a:	bf00      	nop
 8011e9c:	ffc02c00 	.word	0xffc02c00

08011ea0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8011ea0:	b480      	push	{r7}
 8011ea2:	b083      	sub	sp, #12
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011eae:	4618      	mov	r0, r3
 8011eb0:	370c      	adds	r7, #12
 8011eb2:	46bd      	mov	sp, r7
 8011eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb8:	4770      	bx	lr

08011eba <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8011eba:	b480      	push	{r7}
 8011ebc:	b083      	sub	sp, #12
 8011ebe:	af00      	add	r7, sp, #0
 8011ec0:	6078      	str	r0, [r7, #4]
 8011ec2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8011ec4:	683b      	ldr	r3, [r7, #0]
 8011ec6:	681a      	ldr	r2, [r3, #0]
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011ece:	2300      	movs	r3, #0
}
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	370c      	adds	r7, #12
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eda:	4770      	bx	lr

08011edc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8011edc:	b480      	push	{r7}
 8011ede:	b083      	sub	sp, #12
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	f043 0203 	orr.w	r2, r3, #3
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8011ef0:	2300      	movs	r3, #0
}
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	370c      	adds	r7, #12
 8011ef6:	46bd      	mov	sp, r7
 8011ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011efc:	4770      	bx	lr

08011efe <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8011efe:	b480      	push	{r7}
 8011f00:	b083      	sub	sp, #12
 8011f02:	af00      	add	r7, sp, #0
 8011f04:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	f003 0303 	and.w	r3, r3, #3
}
 8011f0e:	4618      	mov	r0, r3
 8011f10:	370c      	adds	r7, #12
 8011f12:	46bd      	mov	sp, r7
 8011f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f18:	4770      	bx	lr
	...

08011f1c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8011f1c:	b480      	push	{r7}
 8011f1e:	b085      	sub	sp, #20
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
 8011f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011f26:	2300      	movs	r3, #0
 8011f28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8011f2a:	683b      	ldr	r3, [r7, #0]
 8011f2c:	681a      	ldr	r2, [r3, #0]
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011f32:	683b      	ldr	r3, [r7, #0]
 8011f34:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8011f36:	683b      	ldr	r3, [r7, #0]
 8011f38:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011f3a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8011f3c:	683b      	ldr	r3, [r7, #0]
 8011f3e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8011f40:	431a      	orrs	r2, r3
                       Command->CPSM);
 8011f42:	683b      	ldr	r3, [r7, #0]
 8011f44:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8011f46:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011f48:	68fa      	ldr	r2, [r7, #12]
 8011f4a:	4313      	orrs	r3, r2
 8011f4c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	68da      	ldr	r2, [r3, #12]
 8011f52:	4b06      	ldr	r3, [pc, #24]	; (8011f6c <SDMMC_SendCommand+0x50>)
 8011f54:	4013      	ands	r3, r2
 8011f56:	68fa      	ldr	r2, [r7, #12]
 8011f58:	431a      	orrs	r2, r3
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011f5e:	2300      	movs	r3, #0
}
 8011f60:	4618      	mov	r0, r3
 8011f62:	3714      	adds	r7, #20
 8011f64:	46bd      	mov	sp, r7
 8011f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f6a:	4770      	bx	lr
 8011f6c:	fffee0c0 	.word	0xfffee0c0

08011f70 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8011f70:	b480      	push	{r7}
 8011f72:	b083      	sub	sp, #12
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	691b      	ldr	r3, [r3, #16]
 8011f7c:	b2db      	uxtb	r3, r3
}
 8011f7e:	4618      	mov	r0, r3
 8011f80:	370c      	adds	r7, #12
 8011f82:	46bd      	mov	sp, r7
 8011f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f88:	4770      	bx	lr

08011f8a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8011f8a:	b480      	push	{r7}
 8011f8c:	b085      	sub	sp, #20
 8011f8e:	af00      	add	r7, sp, #0
 8011f90:	6078      	str	r0, [r7, #4]
 8011f92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	3314      	adds	r3, #20
 8011f98:	461a      	mov	r2, r3
 8011f9a:	683b      	ldr	r3, [r7, #0]
 8011f9c:	4413      	add	r3, r2
 8011f9e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	681b      	ldr	r3, [r3, #0]
}
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	3714      	adds	r7, #20
 8011fa8:	46bd      	mov	sp, r7
 8011faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fae:	4770      	bx	lr

08011fb0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8011fb0:	b480      	push	{r7}
 8011fb2:	b085      	sub	sp, #20
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	6078      	str	r0, [r7, #4]
 8011fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011fba:	2300      	movs	r3, #0
 8011fbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8011fbe:	683b      	ldr	r3, [r7, #0]
 8011fc0:	681a      	ldr	r2, [r3, #0]
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8011fc6:	683b      	ldr	r3, [r7, #0]
 8011fc8:	685a      	ldr	r2, [r3, #4]
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011fce:	683b      	ldr	r3, [r7, #0]
 8011fd0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8011fd2:	683b      	ldr	r3, [r7, #0]
 8011fd4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011fd6:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8011fd8:	683b      	ldr	r3, [r7, #0]
 8011fda:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8011fdc:	431a      	orrs	r2, r3
                       Data->DPSM);
 8011fde:	683b      	ldr	r3, [r7, #0]
 8011fe0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8011fe2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011fe4:	68fa      	ldr	r2, [r7, #12]
 8011fe6:	4313      	orrs	r3, r2
 8011fe8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	431a      	orrs	r2, r3
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8011ffa:	2300      	movs	r3, #0

}
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	3714      	adds	r7, #20
 8012000:	46bd      	mov	sp, r7
 8012002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012006:	4770      	bx	lr

08012008 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8012008:	b580      	push	{r7, lr}
 801200a:	b088      	sub	sp, #32
 801200c:	af00      	add	r7, sp, #0
 801200e:	6078      	str	r0, [r7, #4]
 8012010:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8012012:	683b      	ldr	r3, [r7, #0]
 8012014:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8012016:	2310      	movs	r3, #16
 8012018:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801201a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801201e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012020:	2300      	movs	r3, #0
 8012022:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012024:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012028:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801202a:	f107 0308 	add.w	r3, r7, #8
 801202e:	4619      	mov	r1, r3
 8012030:	6878      	ldr	r0, [r7, #4]
 8012032:	f7ff ff73 	bl	8011f1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8012036:	f241 3288 	movw	r2, #5000	; 0x1388
 801203a:	2110      	movs	r1, #16
 801203c:	6878      	ldr	r0, [r7, #4]
 801203e:	f000 fa5f 	bl	8012500 <SDMMC_GetCmdResp1>
 8012042:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012044:	69fb      	ldr	r3, [r7, #28]
}
 8012046:	4618      	mov	r0, r3
 8012048:	3720      	adds	r7, #32
 801204a:	46bd      	mov	sp, r7
 801204c:	bd80      	pop	{r7, pc}

0801204e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801204e:	b580      	push	{r7, lr}
 8012050:	b088      	sub	sp, #32
 8012052:	af00      	add	r7, sp, #0
 8012054:	6078      	str	r0, [r7, #4]
 8012056:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012058:	683b      	ldr	r3, [r7, #0]
 801205a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801205c:	2311      	movs	r3, #17
 801205e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012060:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012064:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012066:	2300      	movs	r3, #0
 8012068:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801206a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801206e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012070:	f107 0308 	add.w	r3, r7, #8
 8012074:	4619      	mov	r1, r3
 8012076:	6878      	ldr	r0, [r7, #4]
 8012078:	f7ff ff50 	bl	8011f1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801207c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012080:	2111      	movs	r1, #17
 8012082:	6878      	ldr	r0, [r7, #4]
 8012084:	f000 fa3c 	bl	8012500 <SDMMC_GetCmdResp1>
 8012088:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801208a:	69fb      	ldr	r3, [r7, #28]
}
 801208c:	4618      	mov	r0, r3
 801208e:	3720      	adds	r7, #32
 8012090:	46bd      	mov	sp, r7
 8012092:	bd80      	pop	{r7, pc}

08012094 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012094:	b580      	push	{r7, lr}
 8012096:	b088      	sub	sp, #32
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
 801209c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801209e:	683b      	ldr	r3, [r7, #0]
 80120a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80120a2:	2312      	movs	r3, #18
 80120a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80120a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80120aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80120ac:	2300      	movs	r3, #0
 80120ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80120b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80120b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80120b6:	f107 0308 	add.w	r3, r7, #8
 80120ba:	4619      	mov	r1, r3
 80120bc:	6878      	ldr	r0, [r7, #4]
 80120be:	f7ff ff2d 	bl	8011f1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80120c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80120c6:	2112      	movs	r1, #18
 80120c8:	6878      	ldr	r0, [r7, #4]
 80120ca:	f000 fa19 	bl	8012500 <SDMMC_GetCmdResp1>
 80120ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80120d0:	69fb      	ldr	r3, [r7, #28]
}
 80120d2:	4618      	mov	r0, r3
 80120d4:	3720      	adds	r7, #32
 80120d6:	46bd      	mov	sp, r7
 80120d8:	bd80      	pop	{r7, pc}

080120da <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80120da:	b580      	push	{r7, lr}
 80120dc:	b088      	sub	sp, #32
 80120de:	af00      	add	r7, sp, #0
 80120e0:	6078      	str	r0, [r7, #4]
 80120e2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80120e4:	683b      	ldr	r3, [r7, #0]
 80120e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80120e8:	2318      	movs	r3, #24
 80120ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80120ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80120f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80120f2:	2300      	movs	r3, #0
 80120f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80120f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80120fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80120fc:	f107 0308 	add.w	r3, r7, #8
 8012100:	4619      	mov	r1, r3
 8012102:	6878      	ldr	r0, [r7, #4]
 8012104:	f7ff ff0a 	bl	8011f1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012108:	f241 3288 	movw	r2, #5000	; 0x1388
 801210c:	2118      	movs	r1, #24
 801210e:	6878      	ldr	r0, [r7, #4]
 8012110:	f000 f9f6 	bl	8012500 <SDMMC_GetCmdResp1>
 8012114:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012116:	69fb      	ldr	r3, [r7, #28]
}
 8012118:	4618      	mov	r0, r3
 801211a:	3720      	adds	r7, #32
 801211c:	46bd      	mov	sp, r7
 801211e:	bd80      	pop	{r7, pc}

08012120 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012120:	b580      	push	{r7, lr}
 8012122:	b088      	sub	sp, #32
 8012124:	af00      	add	r7, sp, #0
 8012126:	6078      	str	r0, [r7, #4]
 8012128:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801212a:	683b      	ldr	r3, [r7, #0]
 801212c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801212e:	2319      	movs	r3, #25
 8012130:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012132:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012136:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012138:	2300      	movs	r3, #0
 801213a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801213c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012140:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012142:	f107 0308 	add.w	r3, r7, #8
 8012146:	4619      	mov	r1, r3
 8012148:	6878      	ldr	r0, [r7, #4]
 801214a:	f7ff fee7 	bl	8011f1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801214e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012152:	2119      	movs	r1, #25
 8012154:	6878      	ldr	r0, [r7, #4]
 8012156:	f000 f9d3 	bl	8012500 <SDMMC_GetCmdResp1>
 801215a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801215c:	69fb      	ldr	r3, [r7, #28]
}
 801215e:	4618      	mov	r0, r3
 8012160:	3720      	adds	r7, #32
 8012162:	46bd      	mov	sp, r7
 8012164:	bd80      	pop	{r7, pc}
	...

08012168 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8012168:	b580      	push	{r7, lr}
 801216a:	b088      	sub	sp, #32
 801216c:	af00      	add	r7, sp, #0
 801216e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8012170:	2300      	movs	r3, #0
 8012172:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8012174:	230c      	movs	r3, #12
 8012176:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012178:	f44f 7380 	mov.w	r3, #256	; 0x100
 801217c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801217e:	2300      	movs	r3, #0
 8012180:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012182:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012186:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	68db      	ldr	r3, [r3, #12]
 801218c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	68db      	ldr	r3, [r3, #12]
 8012198:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80121a0:	f107 0308 	add.w	r3, r7, #8
 80121a4:	4619      	mov	r1, r3
 80121a6:	6878      	ldr	r0, [r7, #4]
 80121a8:	f7ff feb8 	bl	8011f1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80121ac:	4a0b      	ldr	r2, [pc, #44]	; (80121dc <SDMMC_CmdStopTransfer+0x74>)
 80121ae:	210c      	movs	r1, #12
 80121b0:	6878      	ldr	r0, [r7, #4]
 80121b2:	f000 f9a5 	bl	8012500 <SDMMC_GetCmdResp1>
 80121b6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	68db      	ldr	r3, [r3, #12]
 80121bc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80121c4:	69fb      	ldr	r3, [r7, #28]
 80121c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80121ca:	d101      	bne.n	80121d0 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80121cc:	2300      	movs	r3, #0
 80121ce:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80121d0:	69fb      	ldr	r3, [r7, #28]
}
 80121d2:	4618      	mov	r0, r3
 80121d4:	3720      	adds	r7, #32
 80121d6:	46bd      	mov	sp, r7
 80121d8:	bd80      	pop	{r7, pc}
 80121da:	bf00      	nop
 80121dc:	05f5e100 	.word	0x05f5e100

080121e0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b088      	sub	sp, #32
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	6078      	str	r0, [r7, #4]
 80121e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80121ea:	683b      	ldr	r3, [r7, #0]
 80121ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80121ee:	2307      	movs	r3, #7
 80121f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80121f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80121f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80121f8:	2300      	movs	r3, #0
 80121fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80121fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012200:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012202:	f107 0308 	add.w	r3, r7, #8
 8012206:	4619      	mov	r1, r3
 8012208:	6878      	ldr	r0, [r7, #4]
 801220a:	f7ff fe87 	bl	8011f1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 801220e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012212:	2107      	movs	r1, #7
 8012214:	6878      	ldr	r0, [r7, #4]
 8012216:	f000 f973 	bl	8012500 <SDMMC_GetCmdResp1>
 801221a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801221c:	69fb      	ldr	r3, [r7, #28]
}
 801221e:	4618      	mov	r0, r3
 8012220:	3720      	adds	r7, #32
 8012222:	46bd      	mov	sp, r7
 8012224:	bd80      	pop	{r7, pc}

08012226 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8012226:	b580      	push	{r7, lr}
 8012228:	b088      	sub	sp, #32
 801222a:	af00      	add	r7, sp, #0
 801222c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801222e:	2300      	movs	r3, #0
 8012230:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8012232:	2300      	movs	r3, #0
 8012234:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8012236:	2300      	movs	r3, #0
 8012238:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801223a:	2300      	movs	r3, #0
 801223c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801223e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012242:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012244:	f107 0308 	add.w	r3, r7, #8
 8012248:	4619      	mov	r1, r3
 801224a:	6878      	ldr	r0, [r7, #4]
 801224c:	f7ff fe66 	bl	8011f1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8012250:	6878      	ldr	r0, [r7, #4]
 8012252:	f000 fb97 	bl	8012984 <SDMMC_GetCmdError>
 8012256:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012258:	69fb      	ldr	r3, [r7, #28]
}
 801225a:	4618      	mov	r0, r3
 801225c:	3720      	adds	r7, #32
 801225e:	46bd      	mov	sp, r7
 8012260:	bd80      	pop	{r7, pc}

08012262 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8012262:	b580      	push	{r7, lr}
 8012264:	b088      	sub	sp, #32
 8012266:	af00      	add	r7, sp, #0
 8012268:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801226a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801226e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8012270:	2308      	movs	r3, #8
 8012272:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012274:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012278:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801227a:	2300      	movs	r3, #0
 801227c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801227e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012282:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012284:	f107 0308 	add.w	r3, r7, #8
 8012288:	4619      	mov	r1, r3
 801228a:	6878      	ldr	r0, [r7, #4]
 801228c:	f7ff fe46 	bl	8011f1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8012290:	6878      	ldr	r0, [r7, #4]
 8012292:	f000 fb29 	bl	80128e8 <SDMMC_GetCmdResp7>
 8012296:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012298:	69fb      	ldr	r3, [r7, #28]
}
 801229a:	4618      	mov	r0, r3
 801229c:	3720      	adds	r7, #32
 801229e:	46bd      	mov	sp, r7
 80122a0:	bd80      	pop	{r7, pc}

080122a2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80122a2:	b580      	push	{r7, lr}
 80122a4:	b088      	sub	sp, #32
 80122a6:	af00      	add	r7, sp, #0
 80122a8:	6078      	str	r0, [r7, #4]
 80122aa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80122ac:	683b      	ldr	r3, [r7, #0]
 80122ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80122b0:	2337      	movs	r3, #55	; 0x37
 80122b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80122b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80122b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80122ba:	2300      	movs	r3, #0
 80122bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80122be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80122c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80122c4:	f107 0308 	add.w	r3, r7, #8
 80122c8:	4619      	mov	r1, r3
 80122ca:	6878      	ldr	r0, [r7, #4]
 80122cc:	f7ff fe26 	bl	8011f1c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80122d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80122d4:	2137      	movs	r1, #55	; 0x37
 80122d6:	6878      	ldr	r0, [r7, #4]
 80122d8:	f000 f912 	bl	8012500 <SDMMC_GetCmdResp1>
 80122dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80122de:	69fb      	ldr	r3, [r7, #28]
}
 80122e0:	4618      	mov	r0, r3
 80122e2:	3720      	adds	r7, #32
 80122e4:	46bd      	mov	sp, r7
 80122e6:	bd80      	pop	{r7, pc}

080122e8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80122e8:	b580      	push	{r7, lr}
 80122ea:	b088      	sub	sp, #32
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	6078      	str	r0, [r7, #4]
 80122f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80122f2:	683b      	ldr	r3, [r7, #0]
 80122f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80122f6:	2329      	movs	r3, #41	; 0x29
 80122f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80122fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80122fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012300:	2300      	movs	r3, #0
 8012302:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012304:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012308:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801230a:	f107 0308 	add.w	r3, r7, #8
 801230e:	4619      	mov	r1, r3
 8012310:	6878      	ldr	r0, [r7, #4]
 8012312:	f7ff fe03 	bl	8011f1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8012316:	6878      	ldr	r0, [r7, #4]
 8012318:	f000 fa2e 	bl	8012778 <SDMMC_GetCmdResp3>
 801231c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801231e:	69fb      	ldr	r3, [r7, #28]
}
 8012320:	4618      	mov	r0, r3
 8012322:	3720      	adds	r7, #32
 8012324:	46bd      	mov	sp, r7
 8012326:	bd80      	pop	{r7, pc}

08012328 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8012328:	b580      	push	{r7, lr}
 801232a:	b088      	sub	sp, #32
 801232c:	af00      	add	r7, sp, #0
 801232e:	6078      	str	r0, [r7, #4]
 8012330:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8012332:	683b      	ldr	r3, [r7, #0]
 8012334:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8012336:	2306      	movs	r3, #6
 8012338:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801233a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801233e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012340:	2300      	movs	r3, #0
 8012342:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012344:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012348:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801234a:	f107 0308 	add.w	r3, r7, #8
 801234e:	4619      	mov	r1, r3
 8012350:	6878      	ldr	r0, [r7, #4]
 8012352:	f7ff fde3 	bl	8011f1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8012356:	f241 3288 	movw	r2, #5000	; 0x1388
 801235a:	2106      	movs	r1, #6
 801235c:	6878      	ldr	r0, [r7, #4]
 801235e:	f000 f8cf 	bl	8012500 <SDMMC_GetCmdResp1>
 8012362:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012364:	69fb      	ldr	r3, [r7, #28]
}
 8012366:	4618      	mov	r0, r3
 8012368:	3720      	adds	r7, #32
 801236a:	46bd      	mov	sp, r7
 801236c:	bd80      	pop	{r7, pc}

0801236e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801236e:	b580      	push	{r7, lr}
 8012370:	b088      	sub	sp, #32
 8012372:	af00      	add	r7, sp, #0
 8012374:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8012376:	2300      	movs	r3, #0
 8012378:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801237a:	2333      	movs	r3, #51	; 0x33
 801237c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801237e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012382:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012384:	2300      	movs	r3, #0
 8012386:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012388:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801238c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801238e:	f107 0308 	add.w	r3, r7, #8
 8012392:	4619      	mov	r1, r3
 8012394:	6878      	ldr	r0, [r7, #4]
 8012396:	f7ff fdc1 	bl	8011f1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 801239a:	f241 3288 	movw	r2, #5000	; 0x1388
 801239e:	2133      	movs	r1, #51	; 0x33
 80123a0:	6878      	ldr	r0, [r7, #4]
 80123a2:	f000 f8ad 	bl	8012500 <SDMMC_GetCmdResp1>
 80123a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80123a8:	69fb      	ldr	r3, [r7, #28]
}
 80123aa:	4618      	mov	r0, r3
 80123ac:	3720      	adds	r7, #32
 80123ae:	46bd      	mov	sp, r7
 80123b0:	bd80      	pop	{r7, pc}

080123b2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80123b2:	b580      	push	{r7, lr}
 80123b4:	b088      	sub	sp, #32
 80123b6:	af00      	add	r7, sp, #0
 80123b8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80123ba:	2300      	movs	r3, #0
 80123bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80123be:	2302      	movs	r3, #2
 80123c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80123c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80123c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80123c8:	2300      	movs	r3, #0
 80123ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80123cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80123d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80123d2:	f107 0308 	add.w	r3, r7, #8
 80123d6:	4619      	mov	r1, r3
 80123d8:	6878      	ldr	r0, [r7, #4]
 80123da:	f7ff fd9f 	bl	8011f1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80123de:	6878      	ldr	r0, [r7, #4]
 80123e0:	f000 f980 	bl	80126e4 <SDMMC_GetCmdResp2>
 80123e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80123e6:	69fb      	ldr	r3, [r7, #28]
}
 80123e8:	4618      	mov	r0, r3
 80123ea:	3720      	adds	r7, #32
 80123ec:	46bd      	mov	sp, r7
 80123ee:	bd80      	pop	{r7, pc}

080123f0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80123f0:	b580      	push	{r7, lr}
 80123f2:	b088      	sub	sp, #32
 80123f4:	af00      	add	r7, sp, #0
 80123f6:	6078      	str	r0, [r7, #4]
 80123f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80123fa:	683b      	ldr	r3, [r7, #0]
 80123fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80123fe:	2309      	movs	r3, #9
 8012400:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012402:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012406:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012408:	2300      	movs	r3, #0
 801240a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801240c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012410:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012412:	f107 0308 	add.w	r3, r7, #8
 8012416:	4619      	mov	r1, r3
 8012418:	6878      	ldr	r0, [r7, #4]
 801241a:	f7ff fd7f 	bl	8011f1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801241e:	6878      	ldr	r0, [r7, #4]
 8012420:	f000 f960 	bl	80126e4 <SDMMC_GetCmdResp2>
 8012424:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012426:	69fb      	ldr	r3, [r7, #28]
}
 8012428:	4618      	mov	r0, r3
 801242a:	3720      	adds	r7, #32
 801242c:	46bd      	mov	sp, r7
 801242e:	bd80      	pop	{r7, pc}

08012430 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8012430:	b580      	push	{r7, lr}
 8012432:	b088      	sub	sp, #32
 8012434:	af00      	add	r7, sp, #0
 8012436:	6078      	str	r0, [r7, #4]
 8012438:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801243a:	2300      	movs	r3, #0
 801243c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801243e:	2303      	movs	r3, #3
 8012440:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012442:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012446:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012448:	2300      	movs	r3, #0
 801244a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801244c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012450:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012452:	f107 0308 	add.w	r3, r7, #8
 8012456:	4619      	mov	r1, r3
 8012458:	6878      	ldr	r0, [r7, #4]
 801245a:	f7ff fd5f 	bl	8011f1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801245e:	683a      	ldr	r2, [r7, #0]
 8012460:	2103      	movs	r1, #3
 8012462:	6878      	ldr	r0, [r7, #4]
 8012464:	f000 f9c8 	bl	80127f8 <SDMMC_GetCmdResp6>
 8012468:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801246a:	69fb      	ldr	r3, [r7, #28]
}
 801246c:	4618      	mov	r0, r3
 801246e:	3720      	adds	r7, #32
 8012470:	46bd      	mov	sp, r7
 8012472:	bd80      	pop	{r7, pc}

08012474 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012474:	b580      	push	{r7, lr}
 8012476:	b088      	sub	sp, #32
 8012478:	af00      	add	r7, sp, #0
 801247a:	6078      	str	r0, [r7, #4]
 801247c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801247e:	683b      	ldr	r3, [r7, #0]
 8012480:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8012482:	230d      	movs	r3, #13
 8012484:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012486:	f44f 7380 	mov.w	r3, #256	; 0x100
 801248a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801248c:	2300      	movs	r3, #0
 801248e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012490:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012494:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012496:	f107 0308 	add.w	r3, r7, #8
 801249a:	4619      	mov	r1, r3
 801249c:	6878      	ldr	r0, [r7, #4]
 801249e:	f7ff fd3d 	bl	8011f1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80124a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80124a6:	210d      	movs	r1, #13
 80124a8:	6878      	ldr	r0, [r7, #4]
 80124aa:	f000 f829 	bl	8012500 <SDMMC_GetCmdResp1>
 80124ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80124b0:	69fb      	ldr	r3, [r7, #28]
}
 80124b2:	4618      	mov	r0, r3
 80124b4:	3720      	adds	r7, #32
 80124b6:	46bd      	mov	sp, r7
 80124b8:	bd80      	pop	{r7, pc}

080124ba <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80124ba:	b580      	push	{r7, lr}
 80124bc:	b088      	sub	sp, #32
 80124be:	af00      	add	r7, sp, #0
 80124c0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80124c2:	2300      	movs	r3, #0
 80124c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80124c6:	230d      	movs	r3, #13
 80124c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80124ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80124ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80124d0:	2300      	movs	r3, #0
 80124d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80124d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80124d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80124da:	f107 0308 	add.w	r3, r7, #8
 80124de:	4619      	mov	r1, r3
 80124e0:	6878      	ldr	r0, [r7, #4]
 80124e2:	f7ff fd1b 	bl	8011f1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80124e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80124ea:	210d      	movs	r1, #13
 80124ec:	6878      	ldr	r0, [r7, #4]
 80124ee:	f000 f807 	bl	8012500 <SDMMC_GetCmdResp1>
 80124f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80124f4:	69fb      	ldr	r3, [r7, #28]
}
 80124f6:	4618      	mov	r0, r3
 80124f8:	3720      	adds	r7, #32
 80124fa:	46bd      	mov	sp, r7
 80124fc:	bd80      	pop	{r7, pc}
	...

08012500 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8012500:	b580      	push	{r7, lr}
 8012502:	b088      	sub	sp, #32
 8012504:	af00      	add	r7, sp, #0
 8012506:	60f8      	str	r0, [r7, #12]
 8012508:	460b      	mov	r3, r1
 801250a:	607a      	str	r2, [r7, #4]
 801250c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801250e:	4b70      	ldr	r3, [pc, #448]	; (80126d0 <SDMMC_GetCmdResp1+0x1d0>)
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	4a70      	ldr	r2, [pc, #448]	; (80126d4 <SDMMC_GetCmdResp1+0x1d4>)
 8012514:	fba2 2303 	umull	r2, r3, r2, r3
 8012518:	0a5a      	lsrs	r2, r3, #9
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	fb02 f303 	mul.w	r3, r2, r3
 8012520:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012522:	69fb      	ldr	r3, [r7, #28]
 8012524:	1e5a      	subs	r2, r3, #1
 8012526:	61fa      	str	r2, [r7, #28]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d102      	bne.n	8012532 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 801252c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012530:	e0c9      	b.n	80126c6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012536:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8012538:	69ba      	ldr	r2, [r7, #24]
 801253a:	4b67      	ldr	r3, [pc, #412]	; (80126d8 <SDMMC_GetCmdResp1+0x1d8>)
 801253c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801253e:	2b00      	cmp	r3, #0
 8012540:	d0ef      	beq.n	8012522 <SDMMC_GetCmdResp1+0x22>
 8012542:	69bb      	ldr	r3, [r7, #24]
 8012544:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012548:	2b00      	cmp	r3, #0
 801254a:	d1ea      	bne.n	8012522 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012550:	f003 0304 	and.w	r3, r3, #4
 8012554:	2b00      	cmp	r3, #0
 8012556:	d004      	beq.n	8012562 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	2204      	movs	r2, #4
 801255c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801255e:	2304      	movs	r3, #4
 8012560:	e0b1      	b.n	80126c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012566:	f003 0301 	and.w	r3, r3, #1
 801256a:	2b00      	cmp	r3, #0
 801256c:	d004      	beq.n	8012578 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	2201      	movs	r2, #1
 8012572:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012574:	2301      	movs	r3, #1
 8012576:	e0a6      	b.n	80126c6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	4a58      	ldr	r2, [pc, #352]	; (80126dc <SDMMC_GetCmdResp1+0x1dc>)
 801257c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801257e:	68f8      	ldr	r0, [r7, #12]
 8012580:	f7ff fcf6 	bl	8011f70 <SDMMC_GetCommandResponse>
 8012584:	4603      	mov	r3, r0
 8012586:	461a      	mov	r2, r3
 8012588:	7afb      	ldrb	r3, [r7, #11]
 801258a:	4293      	cmp	r3, r2
 801258c:	d001      	beq.n	8012592 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801258e:	2301      	movs	r3, #1
 8012590:	e099      	b.n	80126c6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012592:	2100      	movs	r1, #0
 8012594:	68f8      	ldr	r0, [r7, #12]
 8012596:	f7ff fcf8 	bl	8011f8a <SDMMC_GetResponse>
 801259a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801259c:	697a      	ldr	r2, [r7, #20]
 801259e:	4b50      	ldr	r3, [pc, #320]	; (80126e0 <SDMMC_GetCmdResp1+0x1e0>)
 80125a0:	4013      	ands	r3, r2
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d101      	bne.n	80125aa <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80125a6:	2300      	movs	r3, #0
 80125a8:	e08d      	b.n	80126c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80125aa:	697b      	ldr	r3, [r7, #20]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	da02      	bge.n	80125b6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80125b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80125b4:	e087      	b.n	80126c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80125b6:	697b      	ldr	r3, [r7, #20]
 80125b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d001      	beq.n	80125c4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80125c0:	2340      	movs	r3, #64	; 0x40
 80125c2:	e080      	b.n	80126c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80125c4:	697b      	ldr	r3, [r7, #20]
 80125c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d001      	beq.n	80125d2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80125ce:	2380      	movs	r3, #128	; 0x80
 80125d0:	e079      	b.n	80126c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80125d2:	697b      	ldr	r3, [r7, #20]
 80125d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d002      	beq.n	80125e2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80125dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80125e0:	e071      	b.n	80126c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80125e2:	697b      	ldr	r3, [r7, #20]
 80125e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d002      	beq.n	80125f2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80125ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80125f0:	e069      	b.n	80126c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80125f2:	697b      	ldr	r3, [r7, #20]
 80125f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d002      	beq.n	8012602 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80125fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012600:	e061      	b.n	80126c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012602:	697b      	ldr	r3, [r7, #20]
 8012604:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012608:	2b00      	cmp	r3, #0
 801260a:	d002      	beq.n	8012612 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801260c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012610:	e059      	b.n	80126c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012612:	697b      	ldr	r3, [r7, #20]
 8012614:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012618:	2b00      	cmp	r3, #0
 801261a:	d002      	beq.n	8012622 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801261c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012620:	e051      	b.n	80126c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012622:	697b      	ldr	r3, [r7, #20]
 8012624:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012628:	2b00      	cmp	r3, #0
 801262a:	d002      	beq.n	8012632 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801262c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012630:	e049      	b.n	80126c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012632:	697b      	ldr	r3, [r7, #20]
 8012634:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012638:	2b00      	cmp	r3, #0
 801263a:	d002      	beq.n	8012642 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801263c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012640:	e041      	b.n	80126c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012642:	697b      	ldr	r3, [r7, #20]
 8012644:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012648:	2b00      	cmp	r3, #0
 801264a:	d002      	beq.n	8012652 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 801264c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012650:	e039      	b.n	80126c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012652:	697b      	ldr	r3, [r7, #20]
 8012654:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012658:	2b00      	cmp	r3, #0
 801265a:	d002      	beq.n	8012662 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801265c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012660:	e031      	b.n	80126c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012662:	697b      	ldr	r3, [r7, #20]
 8012664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012668:	2b00      	cmp	r3, #0
 801266a:	d002      	beq.n	8012672 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801266c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012670:	e029      	b.n	80126c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8012672:	697b      	ldr	r3, [r7, #20]
 8012674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012678:	2b00      	cmp	r3, #0
 801267a:	d002      	beq.n	8012682 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801267c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012680:	e021      	b.n	80126c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8012682:	697b      	ldr	r3, [r7, #20]
 8012684:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012688:	2b00      	cmp	r3, #0
 801268a:	d002      	beq.n	8012692 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801268c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012690:	e019      	b.n	80126c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8012692:	697b      	ldr	r3, [r7, #20]
 8012694:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012698:	2b00      	cmp	r3, #0
 801269a:	d002      	beq.n	80126a2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801269c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80126a0:	e011      	b.n	80126c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80126a2:	697b      	ldr	r3, [r7, #20]
 80126a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d002      	beq.n	80126b2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80126ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80126b0:	e009      	b.n	80126c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80126b2:	697b      	ldr	r3, [r7, #20]
 80126b4:	f003 0308 	and.w	r3, r3, #8
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d002      	beq.n	80126c2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80126bc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80126c0:	e001      	b.n	80126c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80126c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80126c6:	4618      	mov	r0, r3
 80126c8:	3720      	adds	r7, #32
 80126ca:	46bd      	mov	sp, r7
 80126cc:	bd80      	pop	{r7, pc}
 80126ce:	bf00      	nop
 80126d0:	24000000 	.word	0x24000000
 80126d4:	10624dd3 	.word	0x10624dd3
 80126d8:	00200045 	.word	0x00200045
 80126dc:	002000c5 	.word	0x002000c5
 80126e0:	fdffe008 	.word	0xfdffe008

080126e4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80126e4:	b480      	push	{r7}
 80126e6:	b085      	sub	sp, #20
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80126ec:	4b1f      	ldr	r3, [pc, #124]	; (801276c <SDMMC_GetCmdResp2+0x88>)
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	4a1f      	ldr	r2, [pc, #124]	; (8012770 <SDMMC_GetCmdResp2+0x8c>)
 80126f2:	fba2 2303 	umull	r2, r3, r2, r3
 80126f6:	0a5b      	lsrs	r3, r3, #9
 80126f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80126fc:	fb02 f303 	mul.w	r3, r2, r3
 8012700:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	1e5a      	subs	r2, r3, #1
 8012706:	60fa      	str	r2, [r7, #12]
 8012708:	2b00      	cmp	r3, #0
 801270a:	d102      	bne.n	8012712 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801270c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012710:	e026      	b.n	8012760 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012716:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012718:	68bb      	ldr	r3, [r7, #8]
 801271a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801271e:	2b00      	cmp	r3, #0
 8012720:	d0ef      	beq.n	8012702 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012722:	68bb      	ldr	r3, [r7, #8]
 8012724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012728:	2b00      	cmp	r3, #0
 801272a:	d1ea      	bne.n	8012702 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012730:	f003 0304 	and.w	r3, r3, #4
 8012734:	2b00      	cmp	r3, #0
 8012736:	d004      	beq.n	8012742 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	2204      	movs	r2, #4
 801273c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801273e:	2304      	movs	r3, #4
 8012740:	e00e      	b.n	8012760 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012746:	f003 0301 	and.w	r3, r3, #1
 801274a:	2b00      	cmp	r3, #0
 801274c:	d004      	beq.n	8012758 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	2201      	movs	r2, #1
 8012752:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012754:	2301      	movs	r3, #1
 8012756:	e003      	b.n	8012760 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	4a06      	ldr	r2, [pc, #24]	; (8012774 <SDMMC_GetCmdResp2+0x90>)
 801275c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801275e:	2300      	movs	r3, #0
}
 8012760:	4618      	mov	r0, r3
 8012762:	3714      	adds	r7, #20
 8012764:	46bd      	mov	sp, r7
 8012766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801276a:	4770      	bx	lr
 801276c:	24000000 	.word	0x24000000
 8012770:	10624dd3 	.word	0x10624dd3
 8012774:	002000c5 	.word	0x002000c5

08012778 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8012778:	b480      	push	{r7}
 801277a:	b085      	sub	sp, #20
 801277c:	af00      	add	r7, sp, #0
 801277e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012780:	4b1a      	ldr	r3, [pc, #104]	; (80127ec <SDMMC_GetCmdResp3+0x74>)
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	4a1a      	ldr	r2, [pc, #104]	; (80127f0 <SDMMC_GetCmdResp3+0x78>)
 8012786:	fba2 2303 	umull	r2, r3, r2, r3
 801278a:	0a5b      	lsrs	r3, r3, #9
 801278c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012790:	fb02 f303 	mul.w	r3, r2, r3
 8012794:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	1e5a      	subs	r2, r3, #1
 801279a:	60fa      	str	r2, [r7, #12]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d102      	bne.n	80127a6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80127a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80127a4:	e01b      	b.n	80127de <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127aa:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80127ac:	68bb      	ldr	r3, [r7, #8]
 80127ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d0ef      	beq.n	8012796 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80127b6:	68bb      	ldr	r3, [r7, #8]
 80127b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d1ea      	bne.n	8012796 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127c4:	f003 0304 	and.w	r3, r3, #4
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d004      	beq.n	80127d6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	2204      	movs	r2, #4
 80127d0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80127d2:	2304      	movs	r3, #4
 80127d4:	e003      	b.n	80127de <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	4a06      	ldr	r2, [pc, #24]	; (80127f4 <SDMMC_GetCmdResp3+0x7c>)
 80127da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80127dc:	2300      	movs	r3, #0
}
 80127de:	4618      	mov	r0, r3
 80127e0:	3714      	adds	r7, #20
 80127e2:	46bd      	mov	sp, r7
 80127e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e8:	4770      	bx	lr
 80127ea:	bf00      	nop
 80127ec:	24000000 	.word	0x24000000
 80127f0:	10624dd3 	.word	0x10624dd3
 80127f4:	002000c5 	.word	0x002000c5

080127f8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80127f8:	b580      	push	{r7, lr}
 80127fa:	b088      	sub	sp, #32
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	60f8      	str	r0, [r7, #12]
 8012800:	460b      	mov	r3, r1
 8012802:	607a      	str	r2, [r7, #4]
 8012804:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012806:	4b35      	ldr	r3, [pc, #212]	; (80128dc <SDMMC_GetCmdResp6+0xe4>)
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	4a35      	ldr	r2, [pc, #212]	; (80128e0 <SDMMC_GetCmdResp6+0xe8>)
 801280c:	fba2 2303 	umull	r2, r3, r2, r3
 8012810:	0a5b      	lsrs	r3, r3, #9
 8012812:	f241 3288 	movw	r2, #5000	; 0x1388
 8012816:	fb02 f303 	mul.w	r3, r2, r3
 801281a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801281c:	69fb      	ldr	r3, [r7, #28]
 801281e:	1e5a      	subs	r2, r3, #1
 8012820:	61fa      	str	r2, [r7, #28]
 8012822:	2b00      	cmp	r3, #0
 8012824:	d102      	bne.n	801282c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012826:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801282a:	e052      	b.n	80128d2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012830:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012832:	69bb      	ldr	r3, [r7, #24]
 8012834:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012838:	2b00      	cmp	r3, #0
 801283a:	d0ef      	beq.n	801281c <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801283c:	69bb      	ldr	r3, [r7, #24]
 801283e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012842:	2b00      	cmp	r3, #0
 8012844:	d1ea      	bne.n	801281c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801284a:	f003 0304 	and.w	r3, r3, #4
 801284e:	2b00      	cmp	r3, #0
 8012850:	d004      	beq.n	801285c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	2204      	movs	r2, #4
 8012856:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012858:	2304      	movs	r3, #4
 801285a:	e03a      	b.n	80128d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012860:	f003 0301 	and.w	r3, r3, #1
 8012864:	2b00      	cmp	r3, #0
 8012866:	d004      	beq.n	8012872 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	2201      	movs	r2, #1
 801286c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801286e:	2301      	movs	r3, #1
 8012870:	e02f      	b.n	80128d2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012872:	68f8      	ldr	r0, [r7, #12]
 8012874:	f7ff fb7c 	bl	8011f70 <SDMMC_GetCommandResponse>
 8012878:	4603      	mov	r3, r0
 801287a:	461a      	mov	r2, r3
 801287c:	7afb      	ldrb	r3, [r7, #11]
 801287e:	4293      	cmp	r3, r2
 8012880:	d001      	beq.n	8012886 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012882:	2301      	movs	r3, #1
 8012884:	e025      	b.n	80128d2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	4a16      	ldr	r2, [pc, #88]	; (80128e4 <SDMMC_GetCmdResp6+0xec>)
 801288a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801288c:	2100      	movs	r1, #0
 801288e:	68f8      	ldr	r0, [r7, #12]
 8012890:	f7ff fb7b 	bl	8011f8a <SDMMC_GetResponse>
 8012894:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8012896:	697b      	ldr	r3, [r7, #20]
 8012898:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 801289c:	2b00      	cmp	r3, #0
 801289e:	d106      	bne.n	80128ae <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80128a0:	697b      	ldr	r3, [r7, #20]
 80128a2:	0c1b      	lsrs	r3, r3, #16
 80128a4:	b29a      	uxth	r2, r3
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80128aa:	2300      	movs	r3, #0
 80128ac:	e011      	b.n	80128d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80128ae:	697b      	ldr	r3, [r7, #20]
 80128b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d002      	beq.n	80128be <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80128b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80128bc:	e009      	b.n	80128d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80128be:	697b      	ldr	r3, [r7, #20]
 80128c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d002      	beq.n	80128ce <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80128c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80128cc:	e001      	b.n	80128d2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80128ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80128d2:	4618      	mov	r0, r3
 80128d4:	3720      	adds	r7, #32
 80128d6:	46bd      	mov	sp, r7
 80128d8:	bd80      	pop	{r7, pc}
 80128da:	bf00      	nop
 80128dc:	24000000 	.word	0x24000000
 80128e0:	10624dd3 	.word	0x10624dd3
 80128e4:	002000c5 	.word	0x002000c5

080128e8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80128e8:	b480      	push	{r7}
 80128ea:	b085      	sub	sp, #20
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80128f0:	4b22      	ldr	r3, [pc, #136]	; (801297c <SDMMC_GetCmdResp7+0x94>)
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	4a22      	ldr	r2, [pc, #136]	; (8012980 <SDMMC_GetCmdResp7+0x98>)
 80128f6:	fba2 2303 	umull	r2, r3, r2, r3
 80128fa:	0a5b      	lsrs	r3, r3, #9
 80128fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8012900:	fb02 f303 	mul.w	r3, r2, r3
 8012904:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	1e5a      	subs	r2, r3, #1
 801290a:	60fa      	str	r2, [r7, #12]
 801290c:	2b00      	cmp	r3, #0
 801290e:	d102      	bne.n	8012916 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012910:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012914:	e02c      	b.n	8012970 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801291a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801291c:	68bb      	ldr	r3, [r7, #8]
 801291e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012922:	2b00      	cmp	r3, #0
 8012924:	d0ef      	beq.n	8012906 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012926:	68bb      	ldr	r3, [r7, #8]
 8012928:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801292c:	2b00      	cmp	r3, #0
 801292e:	d1ea      	bne.n	8012906 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012934:	f003 0304 	and.w	r3, r3, #4
 8012938:	2b00      	cmp	r3, #0
 801293a:	d004      	beq.n	8012946 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	2204      	movs	r2, #4
 8012940:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012942:	2304      	movs	r3, #4
 8012944:	e014      	b.n	8012970 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801294a:	f003 0301 	and.w	r3, r3, #1
 801294e:	2b00      	cmp	r3, #0
 8012950:	d004      	beq.n	801295c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	2201      	movs	r2, #1
 8012956:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012958:	2301      	movs	r3, #1
 801295a:	e009      	b.n	8012970 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012964:	2b00      	cmp	r3, #0
 8012966:	d002      	beq.n	801296e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	2240      	movs	r2, #64	; 0x40
 801296c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801296e:	2300      	movs	r3, #0

}
 8012970:	4618      	mov	r0, r3
 8012972:	3714      	adds	r7, #20
 8012974:	46bd      	mov	sp, r7
 8012976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801297a:	4770      	bx	lr
 801297c:	24000000 	.word	0x24000000
 8012980:	10624dd3 	.word	0x10624dd3

08012984 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8012984:	b480      	push	{r7}
 8012986:	b085      	sub	sp, #20
 8012988:	af00      	add	r7, sp, #0
 801298a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801298c:	4b11      	ldr	r3, [pc, #68]	; (80129d4 <SDMMC_GetCmdError+0x50>)
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	4a11      	ldr	r2, [pc, #68]	; (80129d8 <SDMMC_GetCmdError+0x54>)
 8012992:	fba2 2303 	umull	r2, r3, r2, r3
 8012996:	0a5b      	lsrs	r3, r3, #9
 8012998:	f241 3288 	movw	r2, #5000	; 0x1388
 801299c:	fb02 f303 	mul.w	r3, r2, r3
 80129a0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	1e5a      	subs	r2, r3, #1
 80129a6:	60fa      	str	r2, [r7, #12]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d102      	bne.n	80129b2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80129ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80129b0:	e009      	b.n	80129c6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d0f1      	beq.n	80129a2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	4a06      	ldr	r2, [pc, #24]	; (80129dc <SDMMC_GetCmdError+0x58>)
 80129c2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80129c4:	2300      	movs	r3, #0
}
 80129c6:	4618      	mov	r0, r3
 80129c8:	3714      	adds	r7, #20
 80129ca:	46bd      	mov	sp, r7
 80129cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d0:	4770      	bx	lr
 80129d2:	bf00      	nop
 80129d4:	24000000 	.word	0x24000000
 80129d8:	10624dd3 	.word	0x10624dd3
 80129dc:	002000c5 	.word	0x002000c5

080129e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80129e0:	b084      	sub	sp, #16
 80129e2:	b580      	push	{r7, lr}
 80129e4:	b084      	sub	sp, #16
 80129e6:	af00      	add	r7, sp, #0
 80129e8:	6078      	str	r0, [r7, #4]
 80129ea:	f107 001c 	add.w	r0, r7, #28
 80129ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80129f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129f4:	2b01      	cmp	r3, #1
 80129f6:	d120      	bne.n	8012a3a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	68da      	ldr	r2, [r3, #12]
 8012a08:	4b2a      	ldr	r3, [pc, #168]	; (8012ab4 <USB_CoreInit+0xd4>)
 8012a0a:	4013      	ands	r3, r2
 8012a0c:	687a      	ldr	r2, [r7, #4]
 8012a0e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	68db      	ldr	r3, [r3, #12]
 8012a14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a1e:	2b01      	cmp	r3, #1
 8012a20:	d105      	bne.n	8012a2e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	68db      	ldr	r3, [r3, #12]
 8012a26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012a2e:	6878      	ldr	r0, [r7, #4]
 8012a30:	f001 faf8 	bl	8014024 <USB_CoreReset>
 8012a34:	4603      	mov	r3, r0
 8012a36:	73fb      	strb	r3, [r7, #15]
 8012a38:	e01a      	b.n	8012a70 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	68db      	ldr	r3, [r3, #12]
 8012a3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012a46:	6878      	ldr	r0, [r7, #4]
 8012a48:	f001 faec 	bl	8014024 <USB_CoreReset>
 8012a4c:	4603      	mov	r3, r0
 8012a4e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8012a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d106      	bne.n	8012a64 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a5a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	639a      	str	r2, [r3, #56]	; 0x38
 8012a62:	e005      	b.n	8012a70 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8012a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a72:	2b01      	cmp	r3, #1
 8012a74:	d116      	bne.n	8012aa4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012a7a:	b29a      	uxth	r2, r3
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012a84:	4b0c      	ldr	r3, [pc, #48]	; (8012ab8 <USB_CoreInit+0xd8>)
 8012a86:	4313      	orrs	r3, r2
 8012a88:	687a      	ldr	r2, [r7, #4]
 8012a8a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	689b      	ldr	r3, [r3, #8]
 8012a90:	f043 0206 	orr.w	r2, r3, #6
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	689b      	ldr	r3, [r3, #8]
 8012a9c:	f043 0220 	orr.w	r2, r3, #32
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8012aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	3710      	adds	r7, #16
 8012aaa:	46bd      	mov	sp, r7
 8012aac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012ab0:	b004      	add	sp, #16
 8012ab2:	4770      	bx	lr
 8012ab4:	ffbdffbf 	.word	0xffbdffbf
 8012ab8:	03ee0000 	.word	0x03ee0000

08012abc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8012abc:	b480      	push	{r7}
 8012abe:	b087      	sub	sp, #28
 8012ac0:	af00      	add	r7, sp, #0
 8012ac2:	60f8      	str	r0, [r7, #12]
 8012ac4:	60b9      	str	r1, [r7, #8]
 8012ac6:	4613      	mov	r3, r2
 8012ac8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8012aca:	79fb      	ldrb	r3, [r7, #7]
 8012acc:	2b02      	cmp	r3, #2
 8012ace:	d165      	bne.n	8012b9c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8012ad0:	68bb      	ldr	r3, [r7, #8]
 8012ad2:	4a41      	ldr	r2, [pc, #260]	; (8012bd8 <USB_SetTurnaroundTime+0x11c>)
 8012ad4:	4293      	cmp	r3, r2
 8012ad6:	d906      	bls.n	8012ae6 <USB_SetTurnaroundTime+0x2a>
 8012ad8:	68bb      	ldr	r3, [r7, #8]
 8012ada:	4a40      	ldr	r2, [pc, #256]	; (8012bdc <USB_SetTurnaroundTime+0x120>)
 8012adc:	4293      	cmp	r3, r2
 8012ade:	d202      	bcs.n	8012ae6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8012ae0:	230f      	movs	r3, #15
 8012ae2:	617b      	str	r3, [r7, #20]
 8012ae4:	e062      	b.n	8012bac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8012ae6:	68bb      	ldr	r3, [r7, #8]
 8012ae8:	4a3c      	ldr	r2, [pc, #240]	; (8012bdc <USB_SetTurnaroundTime+0x120>)
 8012aea:	4293      	cmp	r3, r2
 8012aec:	d306      	bcc.n	8012afc <USB_SetTurnaroundTime+0x40>
 8012aee:	68bb      	ldr	r3, [r7, #8]
 8012af0:	4a3b      	ldr	r2, [pc, #236]	; (8012be0 <USB_SetTurnaroundTime+0x124>)
 8012af2:	4293      	cmp	r3, r2
 8012af4:	d202      	bcs.n	8012afc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8012af6:	230e      	movs	r3, #14
 8012af8:	617b      	str	r3, [r7, #20]
 8012afa:	e057      	b.n	8012bac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8012afc:	68bb      	ldr	r3, [r7, #8]
 8012afe:	4a38      	ldr	r2, [pc, #224]	; (8012be0 <USB_SetTurnaroundTime+0x124>)
 8012b00:	4293      	cmp	r3, r2
 8012b02:	d306      	bcc.n	8012b12 <USB_SetTurnaroundTime+0x56>
 8012b04:	68bb      	ldr	r3, [r7, #8]
 8012b06:	4a37      	ldr	r2, [pc, #220]	; (8012be4 <USB_SetTurnaroundTime+0x128>)
 8012b08:	4293      	cmp	r3, r2
 8012b0a:	d202      	bcs.n	8012b12 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8012b0c:	230d      	movs	r3, #13
 8012b0e:	617b      	str	r3, [r7, #20]
 8012b10:	e04c      	b.n	8012bac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8012b12:	68bb      	ldr	r3, [r7, #8]
 8012b14:	4a33      	ldr	r2, [pc, #204]	; (8012be4 <USB_SetTurnaroundTime+0x128>)
 8012b16:	4293      	cmp	r3, r2
 8012b18:	d306      	bcc.n	8012b28 <USB_SetTurnaroundTime+0x6c>
 8012b1a:	68bb      	ldr	r3, [r7, #8]
 8012b1c:	4a32      	ldr	r2, [pc, #200]	; (8012be8 <USB_SetTurnaroundTime+0x12c>)
 8012b1e:	4293      	cmp	r3, r2
 8012b20:	d802      	bhi.n	8012b28 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8012b22:	230c      	movs	r3, #12
 8012b24:	617b      	str	r3, [r7, #20]
 8012b26:	e041      	b.n	8012bac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8012b28:	68bb      	ldr	r3, [r7, #8]
 8012b2a:	4a2f      	ldr	r2, [pc, #188]	; (8012be8 <USB_SetTurnaroundTime+0x12c>)
 8012b2c:	4293      	cmp	r3, r2
 8012b2e:	d906      	bls.n	8012b3e <USB_SetTurnaroundTime+0x82>
 8012b30:	68bb      	ldr	r3, [r7, #8]
 8012b32:	4a2e      	ldr	r2, [pc, #184]	; (8012bec <USB_SetTurnaroundTime+0x130>)
 8012b34:	4293      	cmp	r3, r2
 8012b36:	d802      	bhi.n	8012b3e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8012b38:	230b      	movs	r3, #11
 8012b3a:	617b      	str	r3, [r7, #20]
 8012b3c:	e036      	b.n	8012bac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8012b3e:	68bb      	ldr	r3, [r7, #8]
 8012b40:	4a2a      	ldr	r2, [pc, #168]	; (8012bec <USB_SetTurnaroundTime+0x130>)
 8012b42:	4293      	cmp	r3, r2
 8012b44:	d906      	bls.n	8012b54 <USB_SetTurnaroundTime+0x98>
 8012b46:	68bb      	ldr	r3, [r7, #8]
 8012b48:	4a29      	ldr	r2, [pc, #164]	; (8012bf0 <USB_SetTurnaroundTime+0x134>)
 8012b4a:	4293      	cmp	r3, r2
 8012b4c:	d802      	bhi.n	8012b54 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8012b4e:	230a      	movs	r3, #10
 8012b50:	617b      	str	r3, [r7, #20]
 8012b52:	e02b      	b.n	8012bac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8012b54:	68bb      	ldr	r3, [r7, #8]
 8012b56:	4a26      	ldr	r2, [pc, #152]	; (8012bf0 <USB_SetTurnaroundTime+0x134>)
 8012b58:	4293      	cmp	r3, r2
 8012b5a:	d906      	bls.n	8012b6a <USB_SetTurnaroundTime+0xae>
 8012b5c:	68bb      	ldr	r3, [r7, #8]
 8012b5e:	4a25      	ldr	r2, [pc, #148]	; (8012bf4 <USB_SetTurnaroundTime+0x138>)
 8012b60:	4293      	cmp	r3, r2
 8012b62:	d202      	bcs.n	8012b6a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8012b64:	2309      	movs	r3, #9
 8012b66:	617b      	str	r3, [r7, #20]
 8012b68:	e020      	b.n	8012bac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8012b6a:	68bb      	ldr	r3, [r7, #8]
 8012b6c:	4a21      	ldr	r2, [pc, #132]	; (8012bf4 <USB_SetTurnaroundTime+0x138>)
 8012b6e:	4293      	cmp	r3, r2
 8012b70:	d306      	bcc.n	8012b80 <USB_SetTurnaroundTime+0xc4>
 8012b72:	68bb      	ldr	r3, [r7, #8]
 8012b74:	4a20      	ldr	r2, [pc, #128]	; (8012bf8 <USB_SetTurnaroundTime+0x13c>)
 8012b76:	4293      	cmp	r3, r2
 8012b78:	d802      	bhi.n	8012b80 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8012b7a:	2308      	movs	r3, #8
 8012b7c:	617b      	str	r3, [r7, #20]
 8012b7e:	e015      	b.n	8012bac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8012b80:	68bb      	ldr	r3, [r7, #8]
 8012b82:	4a1d      	ldr	r2, [pc, #116]	; (8012bf8 <USB_SetTurnaroundTime+0x13c>)
 8012b84:	4293      	cmp	r3, r2
 8012b86:	d906      	bls.n	8012b96 <USB_SetTurnaroundTime+0xda>
 8012b88:	68bb      	ldr	r3, [r7, #8]
 8012b8a:	4a1c      	ldr	r2, [pc, #112]	; (8012bfc <USB_SetTurnaroundTime+0x140>)
 8012b8c:	4293      	cmp	r3, r2
 8012b8e:	d202      	bcs.n	8012b96 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8012b90:	2307      	movs	r3, #7
 8012b92:	617b      	str	r3, [r7, #20]
 8012b94:	e00a      	b.n	8012bac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8012b96:	2306      	movs	r3, #6
 8012b98:	617b      	str	r3, [r7, #20]
 8012b9a:	e007      	b.n	8012bac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8012b9c:	79fb      	ldrb	r3, [r7, #7]
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d102      	bne.n	8012ba8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8012ba2:	2309      	movs	r3, #9
 8012ba4:	617b      	str	r3, [r7, #20]
 8012ba6:	e001      	b.n	8012bac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8012ba8:	2309      	movs	r3, #9
 8012baa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	68db      	ldr	r3, [r3, #12]
 8012bb0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	68da      	ldr	r2, [r3, #12]
 8012bbc:	697b      	ldr	r3, [r7, #20]
 8012bbe:	029b      	lsls	r3, r3, #10
 8012bc0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8012bc4:	431a      	orrs	r2, r3
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012bca:	2300      	movs	r3, #0
}
 8012bcc:	4618      	mov	r0, r3
 8012bce:	371c      	adds	r7, #28
 8012bd0:	46bd      	mov	sp, r7
 8012bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd6:	4770      	bx	lr
 8012bd8:	00d8acbf 	.word	0x00d8acbf
 8012bdc:	00e4e1c0 	.word	0x00e4e1c0
 8012be0:	00f42400 	.word	0x00f42400
 8012be4:	01067380 	.word	0x01067380
 8012be8:	011a499f 	.word	0x011a499f
 8012bec:	01312cff 	.word	0x01312cff
 8012bf0:	014ca43f 	.word	0x014ca43f
 8012bf4:	016e3600 	.word	0x016e3600
 8012bf8:	01a6ab1f 	.word	0x01a6ab1f
 8012bfc:	01e84800 	.word	0x01e84800

08012c00 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012c00:	b480      	push	{r7}
 8012c02:	b083      	sub	sp, #12
 8012c04:	af00      	add	r7, sp, #0
 8012c06:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	689b      	ldr	r3, [r3, #8]
 8012c0c:	f043 0201 	orr.w	r2, r3, #1
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012c14:	2300      	movs	r3, #0
}
 8012c16:	4618      	mov	r0, r3
 8012c18:	370c      	adds	r7, #12
 8012c1a:	46bd      	mov	sp, r7
 8012c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c20:	4770      	bx	lr

08012c22 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012c22:	b480      	push	{r7}
 8012c24:	b083      	sub	sp, #12
 8012c26:	af00      	add	r7, sp, #0
 8012c28:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	689b      	ldr	r3, [r3, #8]
 8012c2e:	f023 0201 	bic.w	r2, r3, #1
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012c36:	2300      	movs	r3, #0
}
 8012c38:	4618      	mov	r0, r3
 8012c3a:	370c      	adds	r7, #12
 8012c3c:	46bd      	mov	sp, r7
 8012c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c42:	4770      	bx	lr

08012c44 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012c44:	b580      	push	{r7, lr}
 8012c46:	b084      	sub	sp, #16
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	6078      	str	r0, [r7, #4]
 8012c4c:	460b      	mov	r3, r1
 8012c4e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8012c50:	2300      	movs	r3, #0
 8012c52:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	68db      	ldr	r3, [r3, #12]
 8012c58:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012c60:	78fb      	ldrb	r3, [r7, #3]
 8012c62:	2b01      	cmp	r3, #1
 8012c64:	d115      	bne.n	8012c92 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	68db      	ldr	r3, [r3, #12]
 8012c6a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012c72:	2001      	movs	r0, #1
 8012c74:	f7f0 fea6 	bl	80039c4 <HAL_Delay>
      ms++;
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	3301      	adds	r3, #1
 8012c7c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8012c7e:	6878      	ldr	r0, [r7, #4]
 8012c80:	f001 f93f 	bl	8013f02 <USB_GetMode>
 8012c84:	4603      	mov	r3, r0
 8012c86:	2b01      	cmp	r3, #1
 8012c88:	d01e      	beq.n	8012cc8 <USB_SetCurrentMode+0x84>
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	2b31      	cmp	r3, #49	; 0x31
 8012c8e:	d9f0      	bls.n	8012c72 <USB_SetCurrentMode+0x2e>
 8012c90:	e01a      	b.n	8012cc8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8012c92:	78fb      	ldrb	r3, [r7, #3]
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d115      	bne.n	8012cc4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	68db      	ldr	r3, [r3, #12]
 8012c9c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012ca4:	2001      	movs	r0, #1
 8012ca6:	f7f0 fe8d 	bl	80039c4 <HAL_Delay>
      ms++;
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	3301      	adds	r3, #1
 8012cae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8012cb0:	6878      	ldr	r0, [r7, #4]
 8012cb2:	f001 f926 	bl	8013f02 <USB_GetMode>
 8012cb6:	4603      	mov	r3, r0
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d005      	beq.n	8012cc8 <USB_SetCurrentMode+0x84>
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	2b31      	cmp	r3, #49	; 0x31
 8012cc0:	d9f0      	bls.n	8012ca4 <USB_SetCurrentMode+0x60>
 8012cc2:	e001      	b.n	8012cc8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8012cc4:	2301      	movs	r3, #1
 8012cc6:	e005      	b.n	8012cd4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	2b32      	cmp	r3, #50	; 0x32
 8012ccc:	d101      	bne.n	8012cd2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8012cce:	2301      	movs	r3, #1
 8012cd0:	e000      	b.n	8012cd4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8012cd2:	2300      	movs	r3, #0
}
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	3710      	adds	r7, #16
 8012cd8:	46bd      	mov	sp, r7
 8012cda:	bd80      	pop	{r7, pc}

08012cdc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012cdc:	b084      	sub	sp, #16
 8012cde:	b580      	push	{r7, lr}
 8012ce0:	b086      	sub	sp, #24
 8012ce2:	af00      	add	r7, sp, #0
 8012ce4:	6078      	str	r0, [r7, #4]
 8012ce6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8012cea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8012cee:	2300      	movs	r3, #0
 8012cf0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8012cf6:	2300      	movs	r3, #0
 8012cf8:	613b      	str	r3, [r7, #16]
 8012cfa:	e009      	b.n	8012d10 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8012cfc:	687a      	ldr	r2, [r7, #4]
 8012cfe:	693b      	ldr	r3, [r7, #16]
 8012d00:	3340      	adds	r3, #64	; 0x40
 8012d02:	009b      	lsls	r3, r3, #2
 8012d04:	4413      	add	r3, r2
 8012d06:	2200      	movs	r2, #0
 8012d08:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8012d0a:	693b      	ldr	r3, [r7, #16]
 8012d0c:	3301      	adds	r3, #1
 8012d0e:	613b      	str	r3, [r7, #16]
 8012d10:	693b      	ldr	r3, [r7, #16]
 8012d12:	2b0e      	cmp	r3, #14
 8012d14:	d9f2      	bls.n	8012cfc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8012d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d11c      	bne.n	8012d56 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012d22:	685b      	ldr	r3, [r3, #4]
 8012d24:	68fa      	ldr	r2, [r7, #12]
 8012d26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012d2a:	f043 0302 	orr.w	r3, r3, #2
 8012d2e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d34:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	601a      	str	r2, [r3, #0]
 8012d54:	e005      	b.n	8012d62 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d5a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012d68:	461a      	mov	r2, r3
 8012d6a:	2300      	movs	r3, #0
 8012d6c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012d74:	4619      	mov	r1, r3
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012d7c:	461a      	mov	r2, r3
 8012d7e:	680b      	ldr	r3, [r1, #0]
 8012d80:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d84:	2b01      	cmp	r3, #1
 8012d86:	d10c      	bne.n	8012da2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8012d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d104      	bne.n	8012d98 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8012d8e:	2100      	movs	r1, #0
 8012d90:	6878      	ldr	r0, [r7, #4]
 8012d92:	f000 f965 	bl	8013060 <USB_SetDevSpeed>
 8012d96:	e008      	b.n	8012daa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8012d98:	2101      	movs	r1, #1
 8012d9a:	6878      	ldr	r0, [r7, #4]
 8012d9c:	f000 f960 	bl	8013060 <USB_SetDevSpeed>
 8012da0:	e003      	b.n	8012daa <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8012da2:	2103      	movs	r1, #3
 8012da4:	6878      	ldr	r0, [r7, #4]
 8012da6:	f000 f95b 	bl	8013060 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012daa:	2110      	movs	r1, #16
 8012dac:	6878      	ldr	r0, [r7, #4]
 8012dae:	f000 f8f3 	bl	8012f98 <USB_FlushTxFifo>
 8012db2:	4603      	mov	r3, r0
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d001      	beq.n	8012dbc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8012db8:	2301      	movs	r3, #1
 8012dba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012dbc:	6878      	ldr	r0, [r7, #4]
 8012dbe:	f000 f91f 	bl	8013000 <USB_FlushRxFifo>
 8012dc2:	4603      	mov	r3, r0
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d001      	beq.n	8012dcc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8012dc8:	2301      	movs	r3, #1
 8012dca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012dd2:	461a      	mov	r2, r3
 8012dd4:	2300      	movs	r3, #0
 8012dd6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012dde:	461a      	mov	r2, r3
 8012de0:	2300      	movs	r3, #0
 8012de2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012dea:	461a      	mov	r2, r3
 8012dec:	2300      	movs	r3, #0
 8012dee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012df0:	2300      	movs	r3, #0
 8012df2:	613b      	str	r3, [r7, #16]
 8012df4:	e043      	b.n	8012e7e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012df6:	693b      	ldr	r3, [r7, #16]
 8012df8:	015a      	lsls	r2, r3, #5
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	4413      	add	r3, r2
 8012dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012e08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012e0c:	d118      	bne.n	8012e40 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8012e0e:	693b      	ldr	r3, [r7, #16]
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d10a      	bne.n	8012e2a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8012e14:	693b      	ldr	r3, [r7, #16]
 8012e16:	015a      	lsls	r2, r3, #5
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	4413      	add	r3, r2
 8012e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e20:	461a      	mov	r2, r3
 8012e22:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012e26:	6013      	str	r3, [r2, #0]
 8012e28:	e013      	b.n	8012e52 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8012e2a:	693b      	ldr	r3, [r7, #16]
 8012e2c:	015a      	lsls	r2, r3, #5
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	4413      	add	r3, r2
 8012e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e36:	461a      	mov	r2, r3
 8012e38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012e3c:	6013      	str	r3, [r2, #0]
 8012e3e:	e008      	b.n	8012e52 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8012e40:	693b      	ldr	r3, [r7, #16]
 8012e42:	015a      	lsls	r2, r3, #5
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	4413      	add	r3, r2
 8012e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e4c:	461a      	mov	r2, r3
 8012e4e:	2300      	movs	r3, #0
 8012e50:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8012e52:	693b      	ldr	r3, [r7, #16]
 8012e54:	015a      	lsls	r2, r3, #5
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	4413      	add	r3, r2
 8012e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e5e:	461a      	mov	r2, r3
 8012e60:	2300      	movs	r3, #0
 8012e62:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012e64:	693b      	ldr	r3, [r7, #16]
 8012e66:	015a      	lsls	r2, r3, #5
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	4413      	add	r3, r2
 8012e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e70:	461a      	mov	r2, r3
 8012e72:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012e76:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012e78:	693b      	ldr	r3, [r7, #16]
 8012e7a:	3301      	adds	r3, #1
 8012e7c:	613b      	str	r3, [r7, #16]
 8012e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e80:	693a      	ldr	r2, [r7, #16]
 8012e82:	429a      	cmp	r2, r3
 8012e84:	d3b7      	bcc.n	8012df6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012e86:	2300      	movs	r3, #0
 8012e88:	613b      	str	r3, [r7, #16]
 8012e8a:	e043      	b.n	8012f14 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012e8c:	693b      	ldr	r3, [r7, #16]
 8012e8e:	015a      	lsls	r2, r3, #5
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	4413      	add	r3, r2
 8012e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012e9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012ea2:	d118      	bne.n	8012ed6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8012ea4:	693b      	ldr	r3, [r7, #16]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d10a      	bne.n	8012ec0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8012eaa:	693b      	ldr	r3, [r7, #16]
 8012eac:	015a      	lsls	r2, r3, #5
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	4413      	add	r3, r2
 8012eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012eb6:	461a      	mov	r2, r3
 8012eb8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012ebc:	6013      	str	r3, [r2, #0]
 8012ebe:	e013      	b.n	8012ee8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012ec0:	693b      	ldr	r3, [r7, #16]
 8012ec2:	015a      	lsls	r2, r3, #5
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	4413      	add	r3, r2
 8012ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ecc:	461a      	mov	r2, r3
 8012ece:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012ed2:	6013      	str	r3, [r2, #0]
 8012ed4:	e008      	b.n	8012ee8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012ed6:	693b      	ldr	r3, [r7, #16]
 8012ed8:	015a      	lsls	r2, r3, #5
 8012eda:	68fb      	ldr	r3, [r7, #12]
 8012edc:	4413      	add	r3, r2
 8012ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ee2:	461a      	mov	r2, r3
 8012ee4:	2300      	movs	r3, #0
 8012ee6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012ee8:	693b      	ldr	r3, [r7, #16]
 8012eea:	015a      	lsls	r2, r3, #5
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	4413      	add	r3, r2
 8012ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ef4:	461a      	mov	r2, r3
 8012ef6:	2300      	movs	r3, #0
 8012ef8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8012efa:	693b      	ldr	r3, [r7, #16]
 8012efc:	015a      	lsls	r2, r3, #5
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	4413      	add	r3, r2
 8012f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f06:	461a      	mov	r2, r3
 8012f08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012f0c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012f0e:	693b      	ldr	r3, [r7, #16]
 8012f10:	3301      	adds	r3, #1
 8012f12:	613b      	str	r3, [r7, #16]
 8012f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f16:	693a      	ldr	r2, [r7, #16]
 8012f18:	429a      	cmp	r2, r3
 8012f1a:	d3b7      	bcc.n	8012e8c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f22:	691b      	ldr	r3, [r3, #16]
 8012f24:	68fa      	ldr	r2, [r7, #12]
 8012f26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012f2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012f2e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	2200      	movs	r2, #0
 8012f34:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8012f3c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8012f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d105      	bne.n	8012f50 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	699b      	ldr	r3, [r3, #24]
 8012f48:	f043 0210 	orr.w	r2, r3, #16
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	699a      	ldr	r2, [r3, #24]
 8012f54:	4b0e      	ldr	r3, [pc, #56]	; (8012f90 <USB_DevInit+0x2b4>)
 8012f56:	4313      	orrs	r3, r2
 8012f58:	687a      	ldr	r2, [r7, #4]
 8012f5a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8012f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d005      	beq.n	8012f6e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	699b      	ldr	r3, [r3, #24]
 8012f66:	f043 0208 	orr.w	r2, r3, #8
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8012f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f70:	2b01      	cmp	r3, #1
 8012f72:	d105      	bne.n	8012f80 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	699a      	ldr	r2, [r3, #24]
 8012f78:	4b06      	ldr	r3, [pc, #24]	; (8012f94 <USB_DevInit+0x2b8>)
 8012f7a:	4313      	orrs	r3, r2
 8012f7c:	687a      	ldr	r2, [r7, #4]
 8012f7e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8012f80:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f82:	4618      	mov	r0, r3
 8012f84:	3718      	adds	r7, #24
 8012f86:	46bd      	mov	sp, r7
 8012f88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012f8c:	b004      	add	sp, #16
 8012f8e:	4770      	bx	lr
 8012f90:	803c3800 	.word	0x803c3800
 8012f94:	40000004 	.word	0x40000004

08012f98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012f98:	b480      	push	{r7}
 8012f9a:	b085      	sub	sp, #20
 8012f9c:	af00      	add	r7, sp, #0
 8012f9e:	6078      	str	r0, [r7, #4]
 8012fa0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012fa2:	2300      	movs	r3, #0
 8012fa4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	3301      	adds	r3, #1
 8012faa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	4a13      	ldr	r2, [pc, #76]	; (8012ffc <USB_FlushTxFifo+0x64>)
 8012fb0:	4293      	cmp	r3, r2
 8012fb2:	d901      	bls.n	8012fb8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8012fb4:	2303      	movs	r3, #3
 8012fb6:	e01b      	b.n	8012ff0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	691b      	ldr	r3, [r3, #16]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	daf2      	bge.n	8012fa6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8012fc0:	2300      	movs	r3, #0
 8012fc2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012fc4:	683b      	ldr	r3, [r7, #0]
 8012fc6:	019b      	lsls	r3, r3, #6
 8012fc8:	f043 0220 	orr.w	r2, r3, #32
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	3301      	adds	r3, #1
 8012fd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	4a08      	ldr	r2, [pc, #32]	; (8012ffc <USB_FlushTxFifo+0x64>)
 8012fda:	4293      	cmp	r3, r2
 8012fdc:	d901      	bls.n	8012fe2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8012fde:	2303      	movs	r3, #3
 8012fe0:	e006      	b.n	8012ff0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	691b      	ldr	r3, [r3, #16]
 8012fe6:	f003 0320 	and.w	r3, r3, #32
 8012fea:	2b20      	cmp	r3, #32
 8012fec:	d0f0      	beq.n	8012fd0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8012fee:	2300      	movs	r3, #0
}
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	3714      	adds	r7, #20
 8012ff4:	46bd      	mov	sp, r7
 8012ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ffa:	4770      	bx	lr
 8012ffc:	00030d40 	.word	0x00030d40

08013000 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8013000:	b480      	push	{r7}
 8013002:	b085      	sub	sp, #20
 8013004:	af00      	add	r7, sp, #0
 8013006:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013008:	2300      	movs	r3, #0
 801300a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	3301      	adds	r3, #1
 8013010:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	4a11      	ldr	r2, [pc, #68]	; (801305c <USB_FlushRxFifo+0x5c>)
 8013016:	4293      	cmp	r3, r2
 8013018:	d901      	bls.n	801301e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801301a:	2303      	movs	r3, #3
 801301c:	e018      	b.n	8013050 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	691b      	ldr	r3, [r3, #16]
 8013022:	2b00      	cmp	r3, #0
 8013024:	daf2      	bge.n	801300c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8013026:	2300      	movs	r3, #0
 8013028:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	2210      	movs	r2, #16
 801302e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	3301      	adds	r3, #1
 8013034:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	4a08      	ldr	r2, [pc, #32]	; (801305c <USB_FlushRxFifo+0x5c>)
 801303a:	4293      	cmp	r3, r2
 801303c:	d901      	bls.n	8013042 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801303e:	2303      	movs	r3, #3
 8013040:	e006      	b.n	8013050 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	691b      	ldr	r3, [r3, #16]
 8013046:	f003 0310 	and.w	r3, r3, #16
 801304a:	2b10      	cmp	r3, #16
 801304c:	d0f0      	beq.n	8013030 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801304e:	2300      	movs	r3, #0
}
 8013050:	4618      	mov	r0, r3
 8013052:	3714      	adds	r7, #20
 8013054:	46bd      	mov	sp, r7
 8013056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801305a:	4770      	bx	lr
 801305c:	00030d40 	.word	0x00030d40

08013060 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8013060:	b480      	push	{r7}
 8013062:	b085      	sub	sp, #20
 8013064:	af00      	add	r7, sp, #0
 8013066:	6078      	str	r0, [r7, #4]
 8013068:	460b      	mov	r3, r1
 801306a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013076:	681a      	ldr	r2, [r3, #0]
 8013078:	78fb      	ldrb	r3, [r7, #3]
 801307a:	68f9      	ldr	r1, [r7, #12]
 801307c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013080:	4313      	orrs	r3, r2
 8013082:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8013084:	2300      	movs	r3, #0
}
 8013086:	4618      	mov	r0, r3
 8013088:	3714      	adds	r7, #20
 801308a:	46bd      	mov	sp, r7
 801308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013090:	4770      	bx	lr

08013092 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8013092:	b480      	push	{r7}
 8013094:	b087      	sub	sp, #28
 8013096:	af00      	add	r7, sp, #0
 8013098:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801309e:	693b      	ldr	r3, [r7, #16]
 80130a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80130a4:	689b      	ldr	r3, [r3, #8]
 80130a6:	f003 0306 	and.w	r3, r3, #6
 80130aa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d102      	bne.n	80130b8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80130b2:	2300      	movs	r3, #0
 80130b4:	75fb      	strb	r3, [r7, #23]
 80130b6:	e00a      	b.n	80130ce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	2b02      	cmp	r3, #2
 80130bc:	d002      	beq.n	80130c4 <USB_GetDevSpeed+0x32>
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	2b06      	cmp	r3, #6
 80130c2:	d102      	bne.n	80130ca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80130c4:	2302      	movs	r3, #2
 80130c6:	75fb      	strb	r3, [r7, #23]
 80130c8:	e001      	b.n	80130ce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80130ca:	230f      	movs	r3, #15
 80130cc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80130ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80130d0:	4618      	mov	r0, r3
 80130d2:	371c      	adds	r7, #28
 80130d4:	46bd      	mov	sp, r7
 80130d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130da:	4770      	bx	lr

080130dc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80130dc:	b480      	push	{r7}
 80130de:	b085      	sub	sp, #20
 80130e0:	af00      	add	r7, sp, #0
 80130e2:	6078      	str	r0, [r7, #4]
 80130e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80130ea:	683b      	ldr	r3, [r7, #0]
 80130ec:	781b      	ldrb	r3, [r3, #0]
 80130ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80130f0:	683b      	ldr	r3, [r7, #0]
 80130f2:	785b      	ldrb	r3, [r3, #1]
 80130f4:	2b01      	cmp	r3, #1
 80130f6:	d139      	bne.n	801316c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80130fe:	69da      	ldr	r2, [r3, #28]
 8013100:	683b      	ldr	r3, [r7, #0]
 8013102:	781b      	ldrb	r3, [r3, #0]
 8013104:	f003 030f 	and.w	r3, r3, #15
 8013108:	2101      	movs	r1, #1
 801310a:	fa01 f303 	lsl.w	r3, r1, r3
 801310e:	b29b      	uxth	r3, r3
 8013110:	68f9      	ldr	r1, [r7, #12]
 8013112:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013116:	4313      	orrs	r3, r2
 8013118:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801311a:	68bb      	ldr	r3, [r7, #8]
 801311c:	015a      	lsls	r2, r3, #5
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	4413      	add	r3, r2
 8013122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801312c:	2b00      	cmp	r3, #0
 801312e:	d153      	bne.n	80131d8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013130:	68bb      	ldr	r3, [r7, #8]
 8013132:	015a      	lsls	r2, r3, #5
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	4413      	add	r3, r2
 8013138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801313c:	681a      	ldr	r2, [r3, #0]
 801313e:	683b      	ldr	r3, [r7, #0]
 8013140:	689b      	ldr	r3, [r3, #8]
 8013142:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013146:	683b      	ldr	r3, [r7, #0]
 8013148:	791b      	ldrb	r3, [r3, #4]
 801314a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801314c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801314e:	68bb      	ldr	r3, [r7, #8]
 8013150:	059b      	lsls	r3, r3, #22
 8013152:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013154:	431a      	orrs	r2, r3
 8013156:	68bb      	ldr	r3, [r7, #8]
 8013158:	0159      	lsls	r1, r3, #5
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	440b      	add	r3, r1
 801315e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013162:	4619      	mov	r1, r3
 8013164:	4b20      	ldr	r3, [pc, #128]	; (80131e8 <USB_ActivateEndpoint+0x10c>)
 8013166:	4313      	orrs	r3, r2
 8013168:	600b      	str	r3, [r1, #0]
 801316a:	e035      	b.n	80131d8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013172:	69da      	ldr	r2, [r3, #28]
 8013174:	683b      	ldr	r3, [r7, #0]
 8013176:	781b      	ldrb	r3, [r3, #0]
 8013178:	f003 030f 	and.w	r3, r3, #15
 801317c:	2101      	movs	r1, #1
 801317e:	fa01 f303 	lsl.w	r3, r1, r3
 8013182:	041b      	lsls	r3, r3, #16
 8013184:	68f9      	ldr	r1, [r7, #12]
 8013186:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801318a:	4313      	orrs	r3, r2
 801318c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801318e:	68bb      	ldr	r3, [r7, #8]
 8013190:	015a      	lsls	r2, r3, #5
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	4413      	add	r3, r2
 8013196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d119      	bne.n	80131d8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80131a4:	68bb      	ldr	r3, [r7, #8]
 80131a6:	015a      	lsls	r2, r3, #5
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	4413      	add	r3, r2
 80131ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80131b0:	681a      	ldr	r2, [r3, #0]
 80131b2:	683b      	ldr	r3, [r7, #0]
 80131b4:	689b      	ldr	r3, [r3, #8]
 80131b6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80131ba:	683b      	ldr	r3, [r7, #0]
 80131bc:	791b      	ldrb	r3, [r3, #4]
 80131be:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80131c0:	430b      	orrs	r3, r1
 80131c2:	431a      	orrs	r2, r3
 80131c4:	68bb      	ldr	r3, [r7, #8]
 80131c6:	0159      	lsls	r1, r3, #5
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	440b      	add	r3, r1
 80131cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80131d0:	4619      	mov	r1, r3
 80131d2:	4b05      	ldr	r3, [pc, #20]	; (80131e8 <USB_ActivateEndpoint+0x10c>)
 80131d4:	4313      	orrs	r3, r2
 80131d6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80131d8:	2300      	movs	r3, #0
}
 80131da:	4618      	mov	r0, r3
 80131dc:	3714      	adds	r7, #20
 80131de:	46bd      	mov	sp, r7
 80131e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e4:	4770      	bx	lr
 80131e6:	bf00      	nop
 80131e8:	10008000 	.word	0x10008000

080131ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80131ec:	b480      	push	{r7}
 80131ee:	b085      	sub	sp, #20
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	6078      	str	r0, [r7, #4]
 80131f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80131fa:	683b      	ldr	r3, [r7, #0]
 80131fc:	781b      	ldrb	r3, [r3, #0]
 80131fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8013200:	683b      	ldr	r3, [r7, #0]
 8013202:	785b      	ldrb	r3, [r3, #1]
 8013204:	2b01      	cmp	r3, #1
 8013206:	d161      	bne.n	80132cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013208:	68bb      	ldr	r3, [r7, #8]
 801320a:	015a      	lsls	r2, r3, #5
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	4413      	add	r3, r2
 8013210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801321a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801321e:	d11f      	bne.n	8013260 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8013220:	68bb      	ldr	r3, [r7, #8]
 8013222:	015a      	lsls	r2, r3, #5
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	4413      	add	r3, r2
 8013228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	68ba      	ldr	r2, [r7, #8]
 8013230:	0151      	lsls	r1, r2, #5
 8013232:	68fa      	ldr	r2, [r7, #12]
 8013234:	440a      	add	r2, r1
 8013236:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801323a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801323e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8013240:	68bb      	ldr	r3, [r7, #8]
 8013242:	015a      	lsls	r2, r3, #5
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	4413      	add	r3, r2
 8013248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801324c:	681b      	ldr	r3, [r3, #0]
 801324e:	68ba      	ldr	r2, [r7, #8]
 8013250:	0151      	lsls	r1, r2, #5
 8013252:	68fa      	ldr	r2, [r7, #12]
 8013254:	440a      	add	r2, r1
 8013256:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801325a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801325e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013266:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013268:	683b      	ldr	r3, [r7, #0]
 801326a:	781b      	ldrb	r3, [r3, #0]
 801326c:	f003 030f 	and.w	r3, r3, #15
 8013270:	2101      	movs	r1, #1
 8013272:	fa01 f303 	lsl.w	r3, r1, r3
 8013276:	b29b      	uxth	r3, r3
 8013278:	43db      	mvns	r3, r3
 801327a:	68f9      	ldr	r1, [r7, #12]
 801327c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013280:	4013      	ands	r3, r2
 8013282:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801328a:	69da      	ldr	r2, [r3, #28]
 801328c:	683b      	ldr	r3, [r7, #0]
 801328e:	781b      	ldrb	r3, [r3, #0]
 8013290:	f003 030f 	and.w	r3, r3, #15
 8013294:	2101      	movs	r1, #1
 8013296:	fa01 f303 	lsl.w	r3, r1, r3
 801329a:	b29b      	uxth	r3, r3
 801329c:	43db      	mvns	r3, r3
 801329e:	68f9      	ldr	r1, [r7, #12]
 80132a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80132a4:	4013      	ands	r3, r2
 80132a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80132a8:	68bb      	ldr	r3, [r7, #8]
 80132aa:	015a      	lsls	r2, r3, #5
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	4413      	add	r3, r2
 80132b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132b4:	681a      	ldr	r2, [r3, #0]
 80132b6:	68bb      	ldr	r3, [r7, #8]
 80132b8:	0159      	lsls	r1, r3, #5
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	440b      	add	r3, r1
 80132be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132c2:	4619      	mov	r1, r3
 80132c4:	4b35      	ldr	r3, [pc, #212]	; (801339c <USB_DeactivateEndpoint+0x1b0>)
 80132c6:	4013      	ands	r3, r2
 80132c8:	600b      	str	r3, [r1, #0]
 80132ca:	e060      	b.n	801338e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80132cc:	68bb      	ldr	r3, [r7, #8]
 80132ce:	015a      	lsls	r2, r3, #5
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	4413      	add	r3, r2
 80132d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80132de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80132e2:	d11f      	bne.n	8013324 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80132e4:	68bb      	ldr	r3, [r7, #8]
 80132e6:	015a      	lsls	r2, r3, #5
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	4413      	add	r3, r2
 80132ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	68ba      	ldr	r2, [r7, #8]
 80132f4:	0151      	lsls	r1, r2, #5
 80132f6:	68fa      	ldr	r2, [r7, #12]
 80132f8:	440a      	add	r2, r1
 80132fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80132fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013302:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8013304:	68bb      	ldr	r3, [r7, #8]
 8013306:	015a      	lsls	r2, r3, #5
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	4413      	add	r3, r2
 801330c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	68ba      	ldr	r2, [r7, #8]
 8013314:	0151      	lsls	r1, r2, #5
 8013316:	68fa      	ldr	r2, [r7, #12]
 8013318:	440a      	add	r2, r1
 801331a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801331e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013322:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801332a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801332c:	683b      	ldr	r3, [r7, #0]
 801332e:	781b      	ldrb	r3, [r3, #0]
 8013330:	f003 030f 	and.w	r3, r3, #15
 8013334:	2101      	movs	r1, #1
 8013336:	fa01 f303 	lsl.w	r3, r1, r3
 801333a:	041b      	lsls	r3, r3, #16
 801333c:	43db      	mvns	r3, r3
 801333e:	68f9      	ldr	r1, [r7, #12]
 8013340:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013344:	4013      	ands	r3, r2
 8013346:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801334e:	69da      	ldr	r2, [r3, #28]
 8013350:	683b      	ldr	r3, [r7, #0]
 8013352:	781b      	ldrb	r3, [r3, #0]
 8013354:	f003 030f 	and.w	r3, r3, #15
 8013358:	2101      	movs	r1, #1
 801335a:	fa01 f303 	lsl.w	r3, r1, r3
 801335e:	041b      	lsls	r3, r3, #16
 8013360:	43db      	mvns	r3, r3
 8013362:	68f9      	ldr	r1, [r7, #12]
 8013364:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013368:	4013      	ands	r3, r2
 801336a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801336c:	68bb      	ldr	r3, [r7, #8]
 801336e:	015a      	lsls	r2, r3, #5
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	4413      	add	r3, r2
 8013374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013378:	681a      	ldr	r2, [r3, #0]
 801337a:	68bb      	ldr	r3, [r7, #8]
 801337c:	0159      	lsls	r1, r3, #5
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	440b      	add	r3, r1
 8013382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013386:	4619      	mov	r1, r3
 8013388:	4b05      	ldr	r3, [pc, #20]	; (80133a0 <USB_DeactivateEndpoint+0x1b4>)
 801338a:	4013      	ands	r3, r2
 801338c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801338e:	2300      	movs	r3, #0
}
 8013390:	4618      	mov	r0, r3
 8013392:	3714      	adds	r7, #20
 8013394:	46bd      	mov	sp, r7
 8013396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801339a:	4770      	bx	lr
 801339c:	ec337800 	.word	0xec337800
 80133a0:	eff37800 	.word	0xeff37800

080133a4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80133a4:	b580      	push	{r7, lr}
 80133a6:	b08a      	sub	sp, #40	; 0x28
 80133a8:	af02      	add	r7, sp, #8
 80133aa:	60f8      	str	r0, [r7, #12]
 80133ac:	60b9      	str	r1, [r7, #8]
 80133ae:	4613      	mov	r3, r2
 80133b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80133b6:	68bb      	ldr	r3, [r7, #8]
 80133b8:	781b      	ldrb	r3, [r3, #0]
 80133ba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80133bc:	68bb      	ldr	r3, [r7, #8]
 80133be:	785b      	ldrb	r3, [r3, #1]
 80133c0:	2b01      	cmp	r3, #1
 80133c2:	f040 8181 	bne.w	80136c8 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80133c6:	68bb      	ldr	r3, [r7, #8]
 80133c8:	691b      	ldr	r3, [r3, #16]
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d132      	bne.n	8013434 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80133ce:	69bb      	ldr	r3, [r7, #24]
 80133d0:	015a      	lsls	r2, r3, #5
 80133d2:	69fb      	ldr	r3, [r7, #28]
 80133d4:	4413      	add	r3, r2
 80133d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80133da:	691a      	ldr	r2, [r3, #16]
 80133dc:	69bb      	ldr	r3, [r7, #24]
 80133de:	0159      	lsls	r1, r3, #5
 80133e0:	69fb      	ldr	r3, [r7, #28]
 80133e2:	440b      	add	r3, r1
 80133e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80133e8:	4619      	mov	r1, r3
 80133ea:	4ba5      	ldr	r3, [pc, #660]	; (8013680 <USB_EPStartXfer+0x2dc>)
 80133ec:	4013      	ands	r3, r2
 80133ee:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80133f0:	69bb      	ldr	r3, [r7, #24]
 80133f2:	015a      	lsls	r2, r3, #5
 80133f4:	69fb      	ldr	r3, [r7, #28]
 80133f6:	4413      	add	r3, r2
 80133f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80133fc:	691b      	ldr	r3, [r3, #16]
 80133fe:	69ba      	ldr	r2, [r7, #24]
 8013400:	0151      	lsls	r1, r2, #5
 8013402:	69fa      	ldr	r2, [r7, #28]
 8013404:	440a      	add	r2, r1
 8013406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801340a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801340e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013410:	69bb      	ldr	r3, [r7, #24]
 8013412:	015a      	lsls	r2, r3, #5
 8013414:	69fb      	ldr	r3, [r7, #28]
 8013416:	4413      	add	r3, r2
 8013418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801341c:	691a      	ldr	r2, [r3, #16]
 801341e:	69bb      	ldr	r3, [r7, #24]
 8013420:	0159      	lsls	r1, r3, #5
 8013422:	69fb      	ldr	r3, [r7, #28]
 8013424:	440b      	add	r3, r1
 8013426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801342a:	4619      	mov	r1, r3
 801342c:	4b95      	ldr	r3, [pc, #596]	; (8013684 <USB_EPStartXfer+0x2e0>)
 801342e:	4013      	ands	r3, r2
 8013430:	610b      	str	r3, [r1, #16]
 8013432:	e092      	b.n	801355a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013434:	69bb      	ldr	r3, [r7, #24]
 8013436:	015a      	lsls	r2, r3, #5
 8013438:	69fb      	ldr	r3, [r7, #28]
 801343a:	4413      	add	r3, r2
 801343c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013440:	691a      	ldr	r2, [r3, #16]
 8013442:	69bb      	ldr	r3, [r7, #24]
 8013444:	0159      	lsls	r1, r3, #5
 8013446:	69fb      	ldr	r3, [r7, #28]
 8013448:	440b      	add	r3, r1
 801344a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801344e:	4619      	mov	r1, r3
 8013450:	4b8c      	ldr	r3, [pc, #560]	; (8013684 <USB_EPStartXfer+0x2e0>)
 8013452:	4013      	ands	r3, r2
 8013454:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013456:	69bb      	ldr	r3, [r7, #24]
 8013458:	015a      	lsls	r2, r3, #5
 801345a:	69fb      	ldr	r3, [r7, #28]
 801345c:	4413      	add	r3, r2
 801345e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013462:	691a      	ldr	r2, [r3, #16]
 8013464:	69bb      	ldr	r3, [r7, #24]
 8013466:	0159      	lsls	r1, r3, #5
 8013468:	69fb      	ldr	r3, [r7, #28]
 801346a:	440b      	add	r3, r1
 801346c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013470:	4619      	mov	r1, r3
 8013472:	4b83      	ldr	r3, [pc, #524]	; (8013680 <USB_EPStartXfer+0x2dc>)
 8013474:	4013      	ands	r3, r2
 8013476:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8013478:	69bb      	ldr	r3, [r7, #24]
 801347a:	2b00      	cmp	r3, #0
 801347c:	d11a      	bne.n	80134b4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 801347e:	68bb      	ldr	r3, [r7, #8]
 8013480:	691a      	ldr	r2, [r3, #16]
 8013482:	68bb      	ldr	r3, [r7, #8]
 8013484:	689b      	ldr	r3, [r3, #8]
 8013486:	429a      	cmp	r2, r3
 8013488:	d903      	bls.n	8013492 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 801348a:	68bb      	ldr	r3, [r7, #8]
 801348c:	689a      	ldr	r2, [r3, #8]
 801348e:	68bb      	ldr	r3, [r7, #8]
 8013490:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013492:	69bb      	ldr	r3, [r7, #24]
 8013494:	015a      	lsls	r2, r3, #5
 8013496:	69fb      	ldr	r3, [r7, #28]
 8013498:	4413      	add	r3, r2
 801349a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801349e:	691b      	ldr	r3, [r3, #16]
 80134a0:	69ba      	ldr	r2, [r7, #24]
 80134a2:	0151      	lsls	r1, r2, #5
 80134a4:	69fa      	ldr	r2, [r7, #28]
 80134a6:	440a      	add	r2, r1
 80134a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80134ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80134b0:	6113      	str	r3, [r2, #16]
 80134b2:	e01b      	b.n	80134ec <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80134b4:	69bb      	ldr	r3, [r7, #24]
 80134b6:	015a      	lsls	r2, r3, #5
 80134b8:	69fb      	ldr	r3, [r7, #28]
 80134ba:	4413      	add	r3, r2
 80134bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134c0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80134c2:	68bb      	ldr	r3, [r7, #8]
 80134c4:	6919      	ldr	r1, [r3, #16]
 80134c6:	68bb      	ldr	r3, [r7, #8]
 80134c8:	689b      	ldr	r3, [r3, #8]
 80134ca:	440b      	add	r3, r1
 80134cc:	1e59      	subs	r1, r3, #1
 80134ce:	68bb      	ldr	r3, [r7, #8]
 80134d0:	689b      	ldr	r3, [r3, #8]
 80134d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80134d6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80134d8:	4b6b      	ldr	r3, [pc, #428]	; (8013688 <USB_EPStartXfer+0x2e4>)
 80134da:	400b      	ands	r3, r1
 80134dc:	69b9      	ldr	r1, [r7, #24]
 80134de:	0148      	lsls	r0, r1, #5
 80134e0:	69f9      	ldr	r1, [r7, #28]
 80134e2:	4401      	add	r1, r0
 80134e4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80134e8:	4313      	orrs	r3, r2
 80134ea:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80134ec:	69bb      	ldr	r3, [r7, #24]
 80134ee:	015a      	lsls	r2, r3, #5
 80134f0:	69fb      	ldr	r3, [r7, #28]
 80134f2:	4413      	add	r3, r2
 80134f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134f8:	691a      	ldr	r2, [r3, #16]
 80134fa:	68bb      	ldr	r3, [r7, #8]
 80134fc:	691b      	ldr	r3, [r3, #16]
 80134fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013502:	69b9      	ldr	r1, [r7, #24]
 8013504:	0148      	lsls	r0, r1, #5
 8013506:	69f9      	ldr	r1, [r7, #28]
 8013508:	4401      	add	r1, r0
 801350a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801350e:	4313      	orrs	r3, r2
 8013510:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8013512:	68bb      	ldr	r3, [r7, #8]
 8013514:	791b      	ldrb	r3, [r3, #4]
 8013516:	2b01      	cmp	r3, #1
 8013518:	d11f      	bne.n	801355a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801351a:	69bb      	ldr	r3, [r7, #24]
 801351c:	015a      	lsls	r2, r3, #5
 801351e:	69fb      	ldr	r3, [r7, #28]
 8013520:	4413      	add	r3, r2
 8013522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013526:	691b      	ldr	r3, [r3, #16]
 8013528:	69ba      	ldr	r2, [r7, #24]
 801352a:	0151      	lsls	r1, r2, #5
 801352c:	69fa      	ldr	r2, [r7, #28]
 801352e:	440a      	add	r2, r1
 8013530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013534:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8013538:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801353a:	69bb      	ldr	r3, [r7, #24]
 801353c:	015a      	lsls	r2, r3, #5
 801353e:	69fb      	ldr	r3, [r7, #28]
 8013540:	4413      	add	r3, r2
 8013542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013546:	691b      	ldr	r3, [r3, #16]
 8013548:	69ba      	ldr	r2, [r7, #24]
 801354a:	0151      	lsls	r1, r2, #5
 801354c:	69fa      	ldr	r2, [r7, #28]
 801354e:	440a      	add	r2, r1
 8013550:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013554:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013558:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801355a:	79fb      	ldrb	r3, [r7, #7]
 801355c:	2b01      	cmp	r3, #1
 801355e:	d14b      	bne.n	80135f8 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8013560:	68bb      	ldr	r3, [r7, #8]
 8013562:	69db      	ldr	r3, [r3, #28]
 8013564:	2b00      	cmp	r3, #0
 8013566:	d009      	beq.n	801357c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013568:	69bb      	ldr	r3, [r7, #24]
 801356a:	015a      	lsls	r2, r3, #5
 801356c:	69fb      	ldr	r3, [r7, #28]
 801356e:	4413      	add	r3, r2
 8013570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013574:	461a      	mov	r2, r3
 8013576:	68bb      	ldr	r3, [r7, #8]
 8013578:	69db      	ldr	r3, [r3, #28]
 801357a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801357c:	68bb      	ldr	r3, [r7, #8]
 801357e:	791b      	ldrb	r3, [r3, #4]
 8013580:	2b01      	cmp	r3, #1
 8013582:	d128      	bne.n	80135d6 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013584:	69fb      	ldr	r3, [r7, #28]
 8013586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801358a:	689b      	ldr	r3, [r3, #8]
 801358c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013590:	2b00      	cmp	r3, #0
 8013592:	d110      	bne.n	80135b6 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013594:	69bb      	ldr	r3, [r7, #24]
 8013596:	015a      	lsls	r2, r3, #5
 8013598:	69fb      	ldr	r3, [r7, #28]
 801359a:	4413      	add	r3, r2
 801359c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	69ba      	ldr	r2, [r7, #24]
 80135a4:	0151      	lsls	r1, r2, #5
 80135a6:	69fa      	ldr	r2, [r7, #28]
 80135a8:	440a      	add	r2, r1
 80135aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80135ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80135b2:	6013      	str	r3, [r2, #0]
 80135b4:	e00f      	b.n	80135d6 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80135b6:	69bb      	ldr	r3, [r7, #24]
 80135b8:	015a      	lsls	r2, r3, #5
 80135ba:	69fb      	ldr	r3, [r7, #28]
 80135bc:	4413      	add	r3, r2
 80135be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	69ba      	ldr	r2, [r7, #24]
 80135c6:	0151      	lsls	r1, r2, #5
 80135c8:	69fa      	ldr	r2, [r7, #28]
 80135ca:	440a      	add	r2, r1
 80135cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80135d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80135d4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80135d6:	69bb      	ldr	r3, [r7, #24]
 80135d8:	015a      	lsls	r2, r3, #5
 80135da:	69fb      	ldr	r3, [r7, #28]
 80135dc:	4413      	add	r3, r2
 80135de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	69ba      	ldr	r2, [r7, #24]
 80135e6:	0151      	lsls	r1, r2, #5
 80135e8:	69fa      	ldr	r2, [r7, #28]
 80135ea:	440a      	add	r2, r1
 80135ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80135f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80135f4:	6013      	str	r3, [r2, #0]
 80135f6:	e16a      	b.n	80138ce <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80135f8:	69bb      	ldr	r3, [r7, #24]
 80135fa:	015a      	lsls	r2, r3, #5
 80135fc:	69fb      	ldr	r3, [r7, #28]
 80135fe:	4413      	add	r3, r2
 8013600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	69ba      	ldr	r2, [r7, #24]
 8013608:	0151      	lsls	r1, r2, #5
 801360a:	69fa      	ldr	r2, [r7, #28]
 801360c:	440a      	add	r2, r1
 801360e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013612:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013616:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8013618:	68bb      	ldr	r3, [r7, #8]
 801361a:	791b      	ldrb	r3, [r3, #4]
 801361c:	2b01      	cmp	r3, #1
 801361e:	d015      	beq.n	801364c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8013620:	68bb      	ldr	r3, [r7, #8]
 8013622:	691b      	ldr	r3, [r3, #16]
 8013624:	2b00      	cmp	r3, #0
 8013626:	f000 8152 	beq.w	80138ce <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801362a:	69fb      	ldr	r3, [r7, #28]
 801362c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013630:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013632:	68bb      	ldr	r3, [r7, #8]
 8013634:	781b      	ldrb	r3, [r3, #0]
 8013636:	f003 030f 	and.w	r3, r3, #15
 801363a:	2101      	movs	r1, #1
 801363c:	fa01 f303 	lsl.w	r3, r1, r3
 8013640:	69f9      	ldr	r1, [r7, #28]
 8013642:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013646:	4313      	orrs	r3, r2
 8013648:	634b      	str	r3, [r1, #52]	; 0x34
 801364a:	e140      	b.n	80138ce <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801364c:	69fb      	ldr	r3, [r7, #28]
 801364e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013652:	689b      	ldr	r3, [r3, #8]
 8013654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013658:	2b00      	cmp	r3, #0
 801365a:	d117      	bne.n	801368c <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801365c:	69bb      	ldr	r3, [r7, #24]
 801365e:	015a      	lsls	r2, r3, #5
 8013660:	69fb      	ldr	r3, [r7, #28]
 8013662:	4413      	add	r3, r2
 8013664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	69ba      	ldr	r2, [r7, #24]
 801366c:	0151      	lsls	r1, r2, #5
 801366e:	69fa      	ldr	r2, [r7, #28]
 8013670:	440a      	add	r2, r1
 8013672:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013676:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801367a:	6013      	str	r3, [r2, #0]
 801367c:	e016      	b.n	80136ac <USB_EPStartXfer+0x308>
 801367e:	bf00      	nop
 8013680:	e007ffff 	.word	0xe007ffff
 8013684:	fff80000 	.word	0xfff80000
 8013688:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801368c:	69bb      	ldr	r3, [r7, #24]
 801368e:	015a      	lsls	r2, r3, #5
 8013690:	69fb      	ldr	r3, [r7, #28]
 8013692:	4413      	add	r3, r2
 8013694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	69ba      	ldr	r2, [r7, #24]
 801369c:	0151      	lsls	r1, r2, #5
 801369e:	69fa      	ldr	r2, [r7, #28]
 80136a0:	440a      	add	r2, r1
 80136a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80136a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80136aa:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80136ac:	68bb      	ldr	r3, [r7, #8]
 80136ae:	68d9      	ldr	r1, [r3, #12]
 80136b0:	68bb      	ldr	r3, [r7, #8]
 80136b2:	781a      	ldrb	r2, [r3, #0]
 80136b4:	68bb      	ldr	r3, [r7, #8]
 80136b6:	691b      	ldr	r3, [r3, #16]
 80136b8:	b298      	uxth	r0, r3
 80136ba:	79fb      	ldrb	r3, [r7, #7]
 80136bc:	9300      	str	r3, [sp, #0]
 80136be:	4603      	mov	r3, r0
 80136c0:	68f8      	ldr	r0, [r7, #12]
 80136c2:	f000 f9b9 	bl	8013a38 <USB_WritePacket>
 80136c6:	e102      	b.n	80138ce <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80136c8:	69bb      	ldr	r3, [r7, #24]
 80136ca:	015a      	lsls	r2, r3, #5
 80136cc:	69fb      	ldr	r3, [r7, #28]
 80136ce:	4413      	add	r3, r2
 80136d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136d4:	691a      	ldr	r2, [r3, #16]
 80136d6:	69bb      	ldr	r3, [r7, #24]
 80136d8:	0159      	lsls	r1, r3, #5
 80136da:	69fb      	ldr	r3, [r7, #28]
 80136dc:	440b      	add	r3, r1
 80136de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136e2:	4619      	mov	r1, r3
 80136e4:	4b7c      	ldr	r3, [pc, #496]	; (80138d8 <USB_EPStartXfer+0x534>)
 80136e6:	4013      	ands	r3, r2
 80136e8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80136ea:	69bb      	ldr	r3, [r7, #24]
 80136ec:	015a      	lsls	r2, r3, #5
 80136ee:	69fb      	ldr	r3, [r7, #28]
 80136f0:	4413      	add	r3, r2
 80136f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136f6:	691a      	ldr	r2, [r3, #16]
 80136f8:	69bb      	ldr	r3, [r7, #24]
 80136fa:	0159      	lsls	r1, r3, #5
 80136fc:	69fb      	ldr	r3, [r7, #28]
 80136fe:	440b      	add	r3, r1
 8013700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013704:	4619      	mov	r1, r3
 8013706:	4b75      	ldr	r3, [pc, #468]	; (80138dc <USB_EPStartXfer+0x538>)
 8013708:	4013      	ands	r3, r2
 801370a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 801370c:	69bb      	ldr	r3, [r7, #24]
 801370e:	2b00      	cmp	r3, #0
 8013710:	d12f      	bne.n	8013772 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8013712:	68bb      	ldr	r3, [r7, #8]
 8013714:	691b      	ldr	r3, [r3, #16]
 8013716:	2b00      	cmp	r3, #0
 8013718:	d003      	beq.n	8013722 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 801371a:	68bb      	ldr	r3, [r7, #8]
 801371c:	689a      	ldr	r2, [r3, #8]
 801371e:	68bb      	ldr	r3, [r7, #8]
 8013720:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8013722:	68bb      	ldr	r3, [r7, #8]
 8013724:	689a      	ldr	r2, [r3, #8]
 8013726:	68bb      	ldr	r3, [r7, #8]
 8013728:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801372a:	69bb      	ldr	r3, [r7, #24]
 801372c:	015a      	lsls	r2, r3, #5
 801372e:	69fb      	ldr	r3, [r7, #28]
 8013730:	4413      	add	r3, r2
 8013732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013736:	691a      	ldr	r2, [r3, #16]
 8013738:	68bb      	ldr	r3, [r7, #8]
 801373a:	6a1b      	ldr	r3, [r3, #32]
 801373c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013740:	69b9      	ldr	r1, [r7, #24]
 8013742:	0148      	lsls	r0, r1, #5
 8013744:	69f9      	ldr	r1, [r7, #28]
 8013746:	4401      	add	r1, r0
 8013748:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801374c:	4313      	orrs	r3, r2
 801374e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013750:	69bb      	ldr	r3, [r7, #24]
 8013752:	015a      	lsls	r2, r3, #5
 8013754:	69fb      	ldr	r3, [r7, #28]
 8013756:	4413      	add	r3, r2
 8013758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801375c:	691b      	ldr	r3, [r3, #16]
 801375e:	69ba      	ldr	r2, [r7, #24]
 8013760:	0151      	lsls	r1, r2, #5
 8013762:	69fa      	ldr	r2, [r7, #28]
 8013764:	440a      	add	r2, r1
 8013766:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801376a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801376e:	6113      	str	r3, [r2, #16]
 8013770:	e05f      	b.n	8013832 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8013772:	68bb      	ldr	r3, [r7, #8]
 8013774:	691b      	ldr	r3, [r3, #16]
 8013776:	2b00      	cmp	r3, #0
 8013778:	d123      	bne.n	80137c2 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801377a:	69bb      	ldr	r3, [r7, #24]
 801377c:	015a      	lsls	r2, r3, #5
 801377e:	69fb      	ldr	r3, [r7, #28]
 8013780:	4413      	add	r3, r2
 8013782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013786:	691a      	ldr	r2, [r3, #16]
 8013788:	68bb      	ldr	r3, [r7, #8]
 801378a:	689b      	ldr	r3, [r3, #8]
 801378c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013790:	69b9      	ldr	r1, [r7, #24]
 8013792:	0148      	lsls	r0, r1, #5
 8013794:	69f9      	ldr	r1, [r7, #28]
 8013796:	4401      	add	r1, r0
 8013798:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801379c:	4313      	orrs	r3, r2
 801379e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80137a0:	69bb      	ldr	r3, [r7, #24]
 80137a2:	015a      	lsls	r2, r3, #5
 80137a4:	69fb      	ldr	r3, [r7, #28]
 80137a6:	4413      	add	r3, r2
 80137a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137ac:	691b      	ldr	r3, [r3, #16]
 80137ae:	69ba      	ldr	r2, [r7, #24]
 80137b0:	0151      	lsls	r1, r2, #5
 80137b2:	69fa      	ldr	r2, [r7, #28]
 80137b4:	440a      	add	r2, r1
 80137b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80137ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80137be:	6113      	str	r3, [r2, #16]
 80137c0:	e037      	b.n	8013832 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80137c2:	68bb      	ldr	r3, [r7, #8]
 80137c4:	691a      	ldr	r2, [r3, #16]
 80137c6:	68bb      	ldr	r3, [r7, #8]
 80137c8:	689b      	ldr	r3, [r3, #8]
 80137ca:	4413      	add	r3, r2
 80137cc:	1e5a      	subs	r2, r3, #1
 80137ce:	68bb      	ldr	r3, [r7, #8]
 80137d0:	689b      	ldr	r3, [r3, #8]
 80137d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80137d6:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80137d8:	68bb      	ldr	r3, [r7, #8]
 80137da:	689b      	ldr	r3, [r3, #8]
 80137dc:	8afa      	ldrh	r2, [r7, #22]
 80137de:	fb03 f202 	mul.w	r2, r3, r2
 80137e2:	68bb      	ldr	r3, [r7, #8]
 80137e4:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80137e6:	69bb      	ldr	r3, [r7, #24]
 80137e8:	015a      	lsls	r2, r3, #5
 80137ea:	69fb      	ldr	r3, [r7, #28]
 80137ec:	4413      	add	r3, r2
 80137ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137f2:	691a      	ldr	r2, [r3, #16]
 80137f4:	8afb      	ldrh	r3, [r7, #22]
 80137f6:	04d9      	lsls	r1, r3, #19
 80137f8:	4b39      	ldr	r3, [pc, #228]	; (80138e0 <USB_EPStartXfer+0x53c>)
 80137fa:	400b      	ands	r3, r1
 80137fc:	69b9      	ldr	r1, [r7, #24]
 80137fe:	0148      	lsls	r0, r1, #5
 8013800:	69f9      	ldr	r1, [r7, #28]
 8013802:	4401      	add	r1, r0
 8013804:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013808:	4313      	orrs	r3, r2
 801380a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 801380c:	69bb      	ldr	r3, [r7, #24]
 801380e:	015a      	lsls	r2, r3, #5
 8013810:	69fb      	ldr	r3, [r7, #28]
 8013812:	4413      	add	r3, r2
 8013814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013818:	691a      	ldr	r2, [r3, #16]
 801381a:	68bb      	ldr	r3, [r7, #8]
 801381c:	6a1b      	ldr	r3, [r3, #32]
 801381e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013822:	69b9      	ldr	r1, [r7, #24]
 8013824:	0148      	lsls	r0, r1, #5
 8013826:	69f9      	ldr	r1, [r7, #28]
 8013828:	4401      	add	r1, r0
 801382a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801382e:	4313      	orrs	r3, r2
 8013830:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8013832:	79fb      	ldrb	r3, [r7, #7]
 8013834:	2b01      	cmp	r3, #1
 8013836:	d10d      	bne.n	8013854 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8013838:	68bb      	ldr	r3, [r7, #8]
 801383a:	68db      	ldr	r3, [r3, #12]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d009      	beq.n	8013854 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013840:	68bb      	ldr	r3, [r7, #8]
 8013842:	68d9      	ldr	r1, [r3, #12]
 8013844:	69bb      	ldr	r3, [r7, #24]
 8013846:	015a      	lsls	r2, r3, #5
 8013848:	69fb      	ldr	r3, [r7, #28]
 801384a:	4413      	add	r3, r2
 801384c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013850:	460a      	mov	r2, r1
 8013852:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8013854:	68bb      	ldr	r3, [r7, #8]
 8013856:	791b      	ldrb	r3, [r3, #4]
 8013858:	2b01      	cmp	r3, #1
 801385a:	d128      	bne.n	80138ae <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801385c:	69fb      	ldr	r3, [r7, #28]
 801385e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013862:	689b      	ldr	r3, [r3, #8]
 8013864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013868:	2b00      	cmp	r3, #0
 801386a:	d110      	bne.n	801388e <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801386c:	69bb      	ldr	r3, [r7, #24]
 801386e:	015a      	lsls	r2, r3, #5
 8013870:	69fb      	ldr	r3, [r7, #28]
 8013872:	4413      	add	r3, r2
 8013874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	69ba      	ldr	r2, [r7, #24]
 801387c:	0151      	lsls	r1, r2, #5
 801387e:	69fa      	ldr	r2, [r7, #28]
 8013880:	440a      	add	r2, r1
 8013882:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013886:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801388a:	6013      	str	r3, [r2, #0]
 801388c:	e00f      	b.n	80138ae <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801388e:	69bb      	ldr	r3, [r7, #24]
 8013890:	015a      	lsls	r2, r3, #5
 8013892:	69fb      	ldr	r3, [r7, #28]
 8013894:	4413      	add	r3, r2
 8013896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	69ba      	ldr	r2, [r7, #24]
 801389e:	0151      	lsls	r1, r2, #5
 80138a0:	69fa      	ldr	r2, [r7, #28]
 80138a2:	440a      	add	r2, r1
 80138a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80138a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80138ac:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80138ae:	69bb      	ldr	r3, [r7, #24]
 80138b0:	015a      	lsls	r2, r3, #5
 80138b2:	69fb      	ldr	r3, [r7, #28]
 80138b4:	4413      	add	r3, r2
 80138b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	69ba      	ldr	r2, [r7, #24]
 80138be:	0151      	lsls	r1, r2, #5
 80138c0:	69fa      	ldr	r2, [r7, #28]
 80138c2:	440a      	add	r2, r1
 80138c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80138c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80138cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80138ce:	2300      	movs	r3, #0
}
 80138d0:	4618      	mov	r0, r3
 80138d2:	3720      	adds	r7, #32
 80138d4:	46bd      	mov	sp, r7
 80138d6:	bd80      	pop	{r7, pc}
 80138d8:	fff80000 	.word	0xfff80000
 80138dc:	e007ffff 	.word	0xe007ffff
 80138e0:	1ff80000 	.word	0x1ff80000

080138e4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80138e4:	b480      	push	{r7}
 80138e6:	b087      	sub	sp, #28
 80138e8:	af00      	add	r7, sp, #0
 80138ea:	6078      	str	r0, [r7, #4]
 80138ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80138ee:	2300      	movs	r3, #0
 80138f0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80138f2:	2300      	movs	r3, #0
 80138f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80138fa:	683b      	ldr	r3, [r7, #0]
 80138fc:	785b      	ldrb	r3, [r3, #1]
 80138fe:	2b01      	cmp	r3, #1
 8013900:	d14a      	bne.n	8013998 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013902:	683b      	ldr	r3, [r7, #0]
 8013904:	781b      	ldrb	r3, [r3, #0]
 8013906:	015a      	lsls	r2, r3, #5
 8013908:	693b      	ldr	r3, [r7, #16]
 801390a:	4413      	add	r3, r2
 801390c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013916:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801391a:	f040 8086 	bne.w	8013a2a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801391e:	683b      	ldr	r3, [r7, #0]
 8013920:	781b      	ldrb	r3, [r3, #0]
 8013922:	015a      	lsls	r2, r3, #5
 8013924:	693b      	ldr	r3, [r7, #16]
 8013926:	4413      	add	r3, r2
 8013928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	683a      	ldr	r2, [r7, #0]
 8013930:	7812      	ldrb	r2, [r2, #0]
 8013932:	0151      	lsls	r1, r2, #5
 8013934:	693a      	ldr	r2, [r7, #16]
 8013936:	440a      	add	r2, r1
 8013938:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801393c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013940:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8013942:	683b      	ldr	r3, [r7, #0]
 8013944:	781b      	ldrb	r3, [r3, #0]
 8013946:	015a      	lsls	r2, r3, #5
 8013948:	693b      	ldr	r3, [r7, #16]
 801394a:	4413      	add	r3, r2
 801394c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	683a      	ldr	r2, [r7, #0]
 8013954:	7812      	ldrb	r2, [r2, #0]
 8013956:	0151      	lsls	r1, r2, #5
 8013958:	693a      	ldr	r2, [r7, #16]
 801395a:	440a      	add	r2, r1
 801395c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013960:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013964:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	3301      	adds	r3, #1
 801396a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	f242 7210 	movw	r2, #10000	; 0x2710
 8013972:	4293      	cmp	r3, r2
 8013974:	d902      	bls.n	801397c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8013976:	2301      	movs	r3, #1
 8013978:	75fb      	strb	r3, [r7, #23]
          break;
 801397a:	e056      	b.n	8013a2a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 801397c:	683b      	ldr	r3, [r7, #0]
 801397e:	781b      	ldrb	r3, [r3, #0]
 8013980:	015a      	lsls	r2, r3, #5
 8013982:	693b      	ldr	r3, [r7, #16]
 8013984:	4413      	add	r3, r2
 8013986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013990:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013994:	d0e7      	beq.n	8013966 <USB_EPStopXfer+0x82>
 8013996:	e048      	b.n	8013a2a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013998:	683b      	ldr	r3, [r7, #0]
 801399a:	781b      	ldrb	r3, [r3, #0]
 801399c:	015a      	lsls	r2, r3, #5
 801399e:	693b      	ldr	r3, [r7, #16]
 80139a0:	4413      	add	r3, r2
 80139a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80139ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80139b0:	d13b      	bne.n	8013a2a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80139b2:	683b      	ldr	r3, [r7, #0]
 80139b4:	781b      	ldrb	r3, [r3, #0]
 80139b6:	015a      	lsls	r2, r3, #5
 80139b8:	693b      	ldr	r3, [r7, #16]
 80139ba:	4413      	add	r3, r2
 80139bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	683a      	ldr	r2, [r7, #0]
 80139c4:	7812      	ldrb	r2, [r2, #0]
 80139c6:	0151      	lsls	r1, r2, #5
 80139c8:	693a      	ldr	r2, [r7, #16]
 80139ca:	440a      	add	r2, r1
 80139cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80139d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80139d4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80139d6:	683b      	ldr	r3, [r7, #0]
 80139d8:	781b      	ldrb	r3, [r3, #0]
 80139da:	015a      	lsls	r2, r3, #5
 80139dc:	693b      	ldr	r3, [r7, #16]
 80139de:	4413      	add	r3, r2
 80139e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	683a      	ldr	r2, [r7, #0]
 80139e8:	7812      	ldrb	r2, [r2, #0]
 80139ea:	0151      	lsls	r1, r2, #5
 80139ec:	693a      	ldr	r2, [r7, #16]
 80139ee:	440a      	add	r2, r1
 80139f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80139f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80139f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	3301      	adds	r3, #1
 80139fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	f242 7210 	movw	r2, #10000	; 0x2710
 8013a06:	4293      	cmp	r3, r2
 8013a08:	d902      	bls.n	8013a10 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8013a0a:	2301      	movs	r3, #1
 8013a0c:	75fb      	strb	r3, [r7, #23]
          break;
 8013a0e:	e00c      	b.n	8013a2a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8013a10:	683b      	ldr	r3, [r7, #0]
 8013a12:	781b      	ldrb	r3, [r3, #0]
 8013a14:	015a      	lsls	r2, r3, #5
 8013a16:	693b      	ldr	r3, [r7, #16]
 8013a18:	4413      	add	r3, r2
 8013a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013a24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013a28:	d0e7      	beq.n	80139fa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8013a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a2c:	4618      	mov	r0, r3
 8013a2e:	371c      	adds	r7, #28
 8013a30:	46bd      	mov	sp, r7
 8013a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a36:	4770      	bx	lr

08013a38 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8013a38:	b480      	push	{r7}
 8013a3a:	b089      	sub	sp, #36	; 0x24
 8013a3c:	af00      	add	r7, sp, #0
 8013a3e:	60f8      	str	r0, [r7, #12]
 8013a40:	60b9      	str	r1, [r7, #8]
 8013a42:	4611      	mov	r1, r2
 8013a44:	461a      	mov	r2, r3
 8013a46:	460b      	mov	r3, r1
 8013a48:	71fb      	strb	r3, [r7, #7]
 8013a4a:	4613      	mov	r3, r2
 8013a4c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8013a52:	68bb      	ldr	r3, [r7, #8]
 8013a54:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8013a56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d123      	bne.n	8013aa6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8013a5e:	88bb      	ldrh	r3, [r7, #4]
 8013a60:	3303      	adds	r3, #3
 8013a62:	089b      	lsrs	r3, r3, #2
 8013a64:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8013a66:	2300      	movs	r3, #0
 8013a68:	61bb      	str	r3, [r7, #24]
 8013a6a:	e018      	b.n	8013a9e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013a6c:	79fb      	ldrb	r3, [r7, #7]
 8013a6e:	031a      	lsls	r2, r3, #12
 8013a70:	697b      	ldr	r3, [r7, #20]
 8013a72:	4413      	add	r3, r2
 8013a74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013a78:	461a      	mov	r2, r3
 8013a7a:	69fb      	ldr	r3, [r7, #28]
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8013a80:	69fb      	ldr	r3, [r7, #28]
 8013a82:	3301      	adds	r3, #1
 8013a84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013a86:	69fb      	ldr	r3, [r7, #28]
 8013a88:	3301      	adds	r3, #1
 8013a8a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013a8c:	69fb      	ldr	r3, [r7, #28]
 8013a8e:	3301      	adds	r3, #1
 8013a90:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013a92:	69fb      	ldr	r3, [r7, #28]
 8013a94:	3301      	adds	r3, #1
 8013a96:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8013a98:	69bb      	ldr	r3, [r7, #24]
 8013a9a:	3301      	adds	r3, #1
 8013a9c:	61bb      	str	r3, [r7, #24]
 8013a9e:	69ba      	ldr	r2, [r7, #24]
 8013aa0:	693b      	ldr	r3, [r7, #16]
 8013aa2:	429a      	cmp	r2, r3
 8013aa4:	d3e2      	bcc.n	8013a6c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8013aa6:	2300      	movs	r3, #0
}
 8013aa8:	4618      	mov	r0, r3
 8013aaa:	3724      	adds	r7, #36	; 0x24
 8013aac:	46bd      	mov	sp, r7
 8013aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab2:	4770      	bx	lr

08013ab4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013ab4:	b480      	push	{r7}
 8013ab6:	b08b      	sub	sp, #44	; 0x2c
 8013ab8:	af00      	add	r7, sp, #0
 8013aba:	60f8      	str	r0, [r7, #12]
 8013abc:	60b9      	str	r1, [r7, #8]
 8013abe:	4613      	mov	r3, r2
 8013ac0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8013ac6:	68bb      	ldr	r3, [r7, #8]
 8013ac8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8013aca:	88fb      	ldrh	r3, [r7, #6]
 8013acc:	089b      	lsrs	r3, r3, #2
 8013ace:	b29b      	uxth	r3, r3
 8013ad0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8013ad2:	88fb      	ldrh	r3, [r7, #6]
 8013ad4:	f003 0303 	and.w	r3, r3, #3
 8013ad8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8013ada:	2300      	movs	r3, #0
 8013adc:	623b      	str	r3, [r7, #32]
 8013ade:	e014      	b.n	8013b0a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013ae0:	69bb      	ldr	r3, [r7, #24]
 8013ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013ae6:	681a      	ldr	r2, [r3, #0]
 8013ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aea:	601a      	str	r2, [r3, #0]
    pDest++;
 8013aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aee:	3301      	adds	r3, #1
 8013af0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013af4:	3301      	adds	r3, #1
 8013af6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013afa:	3301      	adds	r3, #1
 8013afc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b00:	3301      	adds	r3, #1
 8013b02:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8013b04:	6a3b      	ldr	r3, [r7, #32]
 8013b06:	3301      	adds	r3, #1
 8013b08:	623b      	str	r3, [r7, #32]
 8013b0a:	6a3a      	ldr	r2, [r7, #32]
 8013b0c:	697b      	ldr	r3, [r7, #20]
 8013b0e:	429a      	cmp	r2, r3
 8013b10:	d3e6      	bcc.n	8013ae0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8013b12:	8bfb      	ldrh	r3, [r7, #30]
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d01e      	beq.n	8013b56 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013b18:	2300      	movs	r3, #0
 8013b1a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013b1c:	69bb      	ldr	r3, [r7, #24]
 8013b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013b22:	461a      	mov	r2, r3
 8013b24:	f107 0310 	add.w	r3, r7, #16
 8013b28:	6812      	ldr	r2, [r2, #0]
 8013b2a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013b2c:	693a      	ldr	r2, [r7, #16]
 8013b2e:	6a3b      	ldr	r3, [r7, #32]
 8013b30:	b2db      	uxtb	r3, r3
 8013b32:	00db      	lsls	r3, r3, #3
 8013b34:	fa22 f303 	lsr.w	r3, r2, r3
 8013b38:	b2da      	uxtb	r2, r3
 8013b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b3c:	701a      	strb	r2, [r3, #0]
      i++;
 8013b3e:	6a3b      	ldr	r3, [r7, #32]
 8013b40:	3301      	adds	r3, #1
 8013b42:	623b      	str	r3, [r7, #32]
      pDest++;
 8013b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b46:	3301      	adds	r3, #1
 8013b48:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8013b4a:	8bfb      	ldrh	r3, [r7, #30]
 8013b4c:	3b01      	subs	r3, #1
 8013b4e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8013b50:	8bfb      	ldrh	r3, [r7, #30]
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d1ea      	bne.n	8013b2c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8013b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013b58:	4618      	mov	r0, r3
 8013b5a:	372c      	adds	r7, #44	; 0x2c
 8013b5c:	46bd      	mov	sp, r7
 8013b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b62:	4770      	bx	lr

08013b64 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013b64:	b480      	push	{r7}
 8013b66:	b085      	sub	sp, #20
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	6078      	str	r0, [r7, #4]
 8013b6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013b72:	683b      	ldr	r3, [r7, #0]
 8013b74:	781b      	ldrb	r3, [r3, #0]
 8013b76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013b78:	683b      	ldr	r3, [r7, #0]
 8013b7a:	785b      	ldrb	r3, [r3, #1]
 8013b7c:	2b01      	cmp	r3, #1
 8013b7e:	d12c      	bne.n	8013bda <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013b80:	68bb      	ldr	r3, [r7, #8]
 8013b82:	015a      	lsls	r2, r3, #5
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	4413      	add	r3, r2
 8013b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	db12      	blt.n	8013bb8 <USB_EPSetStall+0x54>
 8013b92:	68bb      	ldr	r3, [r7, #8]
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d00f      	beq.n	8013bb8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013b98:	68bb      	ldr	r3, [r7, #8]
 8013b9a:	015a      	lsls	r2, r3, #5
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	4413      	add	r3, r2
 8013ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	68ba      	ldr	r2, [r7, #8]
 8013ba8:	0151      	lsls	r1, r2, #5
 8013baa:	68fa      	ldr	r2, [r7, #12]
 8013bac:	440a      	add	r2, r1
 8013bae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013bb2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013bb6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013bb8:	68bb      	ldr	r3, [r7, #8]
 8013bba:	015a      	lsls	r2, r3, #5
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	4413      	add	r3, r2
 8013bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	68ba      	ldr	r2, [r7, #8]
 8013bc8:	0151      	lsls	r1, r2, #5
 8013bca:	68fa      	ldr	r2, [r7, #12]
 8013bcc:	440a      	add	r2, r1
 8013bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013bd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013bd6:	6013      	str	r3, [r2, #0]
 8013bd8:	e02b      	b.n	8013c32 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013bda:	68bb      	ldr	r3, [r7, #8]
 8013bdc:	015a      	lsls	r2, r3, #5
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	4413      	add	r3, r2
 8013be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	db12      	blt.n	8013c12 <USB_EPSetStall+0xae>
 8013bec:	68bb      	ldr	r3, [r7, #8]
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d00f      	beq.n	8013c12 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013bf2:	68bb      	ldr	r3, [r7, #8]
 8013bf4:	015a      	lsls	r2, r3, #5
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	4413      	add	r3, r2
 8013bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	68ba      	ldr	r2, [r7, #8]
 8013c02:	0151      	lsls	r1, r2, #5
 8013c04:	68fa      	ldr	r2, [r7, #12]
 8013c06:	440a      	add	r2, r1
 8013c08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013c0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013c10:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8013c12:	68bb      	ldr	r3, [r7, #8]
 8013c14:	015a      	lsls	r2, r3, #5
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	4413      	add	r3, r2
 8013c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	68ba      	ldr	r2, [r7, #8]
 8013c22:	0151      	lsls	r1, r2, #5
 8013c24:	68fa      	ldr	r2, [r7, #12]
 8013c26:	440a      	add	r2, r1
 8013c28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013c2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013c30:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013c32:	2300      	movs	r3, #0
}
 8013c34:	4618      	mov	r0, r3
 8013c36:	3714      	adds	r7, #20
 8013c38:	46bd      	mov	sp, r7
 8013c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c3e:	4770      	bx	lr

08013c40 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013c40:	b480      	push	{r7}
 8013c42:	b085      	sub	sp, #20
 8013c44:	af00      	add	r7, sp, #0
 8013c46:	6078      	str	r0, [r7, #4]
 8013c48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013c4e:	683b      	ldr	r3, [r7, #0]
 8013c50:	781b      	ldrb	r3, [r3, #0]
 8013c52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013c54:	683b      	ldr	r3, [r7, #0]
 8013c56:	785b      	ldrb	r3, [r3, #1]
 8013c58:	2b01      	cmp	r3, #1
 8013c5a:	d128      	bne.n	8013cae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013c5c:	68bb      	ldr	r3, [r7, #8]
 8013c5e:	015a      	lsls	r2, r3, #5
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	4413      	add	r3, r2
 8013c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	68ba      	ldr	r2, [r7, #8]
 8013c6c:	0151      	lsls	r1, r2, #5
 8013c6e:	68fa      	ldr	r2, [r7, #12]
 8013c70:	440a      	add	r2, r1
 8013c72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013c7a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013c7c:	683b      	ldr	r3, [r7, #0]
 8013c7e:	791b      	ldrb	r3, [r3, #4]
 8013c80:	2b03      	cmp	r3, #3
 8013c82:	d003      	beq.n	8013c8c <USB_EPClearStall+0x4c>
 8013c84:	683b      	ldr	r3, [r7, #0]
 8013c86:	791b      	ldrb	r3, [r3, #4]
 8013c88:	2b02      	cmp	r3, #2
 8013c8a:	d138      	bne.n	8013cfe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013c8c:	68bb      	ldr	r3, [r7, #8]
 8013c8e:	015a      	lsls	r2, r3, #5
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	4413      	add	r3, r2
 8013c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	68ba      	ldr	r2, [r7, #8]
 8013c9c:	0151      	lsls	r1, r2, #5
 8013c9e:	68fa      	ldr	r2, [r7, #12]
 8013ca0:	440a      	add	r2, r1
 8013ca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013caa:	6013      	str	r3, [r2, #0]
 8013cac:	e027      	b.n	8013cfe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8013cae:	68bb      	ldr	r3, [r7, #8]
 8013cb0:	015a      	lsls	r2, r3, #5
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	4413      	add	r3, r2
 8013cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	68ba      	ldr	r2, [r7, #8]
 8013cbe:	0151      	lsls	r1, r2, #5
 8013cc0:	68fa      	ldr	r2, [r7, #12]
 8013cc2:	440a      	add	r2, r1
 8013cc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013cc8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013ccc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013cce:	683b      	ldr	r3, [r7, #0]
 8013cd0:	791b      	ldrb	r3, [r3, #4]
 8013cd2:	2b03      	cmp	r3, #3
 8013cd4:	d003      	beq.n	8013cde <USB_EPClearStall+0x9e>
 8013cd6:	683b      	ldr	r3, [r7, #0]
 8013cd8:	791b      	ldrb	r3, [r3, #4]
 8013cda:	2b02      	cmp	r3, #2
 8013cdc:	d10f      	bne.n	8013cfe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013cde:	68bb      	ldr	r3, [r7, #8]
 8013ce0:	015a      	lsls	r2, r3, #5
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	4413      	add	r3, r2
 8013ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	68ba      	ldr	r2, [r7, #8]
 8013cee:	0151      	lsls	r1, r2, #5
 8013cf0:	68fa      	ldr	r2, [r7, #12]
 8013cf2:	440a      	add	r2, r1
 8013cf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013cfc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8013cfe:	2300      	movs	r3, #0
}
 8013d00:	4618      	mov	r0, r3
 8013d02:	3714      	adds	r7, #20
 8013d04:	46bd      	mov	sp, r7
 8013d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d0a:	4770      	bx	lr

08013d0c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8013d0c:	b480      	push	{r7}
 8013d0e:	b085      	sub	sp, #20
 8013d10:	af00      	add	r7, sp, #0
 8013d12:	6078      	str	r0, [r7, #4]
 8013d14:	460b      	mov	r3, r1
 8013d16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	68fa      	ldr	r2, [r7, #12]
 8013d26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013d2a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8013d2e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d36:	681a      	ldr	r2, [r3, #0]
 8013d38:	78fb      	ldrb	r3, [r7, #3]
 8013d3a:	011b      	lsls	r3, r3, #4
 8013d3c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8013d40:	68f9      	ldr	r1, [r7, #12]
 8013d42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013d46:	4313      	orrs	r3, r2
 8013d48:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8013d4a:	2300      	movs	r3, #0
}
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	3714      	adds	r7, #20
 8013d50:	46bd      	mov	sp, r7
 8013d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d56:	4770      	bx	lr

08013d58 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013d58:	b480      	push	{r7}
 8013d5a:	b085      	sub	sp, #20
 8013d5c:	af00      	add	r7, sp, #0
 8013d5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	68fa      	ldr	r2, [r7, #12]
 8013d6e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013d72:	f023 0303 	bic.w	r3, r3, #3
 8013d76:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d7e:	685b      	ldr	r3, [r3, #4]
 8013d80:	68fa      	ldr	r2, [r7, #12]
 8013d82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013d86:	f023 0302 	bic.w	r3, r3, #2
 8013d8a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013d8c:	2300      	movs	r3, #0
}
 8013d8e:	4618      	mov	r0, r3
 8013d90:	3714      	adds	r7, #20
 8013d92:	46bd      	mov	sp, r7
 8013d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d98:	4770      	bx	lr

08013d9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013d9a:	b480      	push	{r7}
 8013d9c:	b085      	sub	sp, #20
 8013d9e:	af00      	add	r7, sp, #0
 8013da0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	68fa      	ldr	r2, [r7, #12]
 8013db0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013db4:	f023 0303 	bic.w	r3, r3, #3
 8013db8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013dc0:	685b      	ldr	r3, [r3, #4]
 8013dc2:	68fa      	ldr	r2, [r7, #12]
 8013dc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013dc8:	f043 0302 	orr.w	r3, r3, #2
 8013dcc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013dce:	2300      	movs	r3, #0
}
 8013dd0:	4618      	mov	r0, r3
 8013dd2:	3714      	adds	r7, #20
 8013dd4:	46bd      	mov	sp, r7
 8013dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dda:	4770      	bx	lr

08013ddc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8013ddc:	b480      	push	{r7}
 8013dde:	b085      	sub	sp, #20
 8013de0:	af00      	add	r7, sp, #0
 8013de2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	695b      	ldr	r3, [r3, #20]
 8013de8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	699b      	ldr	r3, [r3, #24]
 8013dee:	68fa      	ldr	r2, [r7, #12]
 8013df0:	4013      	ands	r3, r2
 8013df2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013df4:	68fb      	ldr	r3, [r7, #12]
}
 8013df6:	4618      	mov	r0, r3
 8013df8:	3714      	adds	r7, #20
 8013dfa:	46bd      	mov	sp, r7
 8013dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e00:	4770      	bx	lr

08013e02 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013e02:	b480      	push	{r7}
 8013e04:	b085      	sub	sp, #20
 8013e06:	af00      	add	r7, sp, #0
 8013e08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e14:	699b      	ldr	r3, [r3, #24]
 8013e16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e1e:	69db      	ldr	r3, [r3, #28]
 8013e20:	68ba      	ldr	r2, [r7, #8]
 8013e22:	4013      	ands	r3, r2
 8013e24:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8013e26:	68bb      	ldr	r3, [r7, #8]
 8013e28:	0c1b      	lsrs	r3, r3, #16
}
 8013e2a:	4618      	mov	r0, r3
 8013e2c:	3714      	adds	r7, #20
 8013e2e:	46bd      	mov	sp, r7
 8013e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e34:	4770      	bx	lr

08013e36 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013e36:	b480      	push	{r7}
 8013e38:	b085      	sub	sp, #20
 8013e3a:	af00      	add	r7, sp, #0
 8013e3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e48:	699b      	ldr	r3, [r3, #24]
 8013e4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e52:	69db      	ldr	r3, [r3, #28]
 8013e54:	68ba      	ldr	r2, [r7, #8]
 8013e56:	4013      	ands	r3, r2
 8013e58:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8013e5a:	68bb      	ldr	r3, [r7, #8]
 8013e5c:	b29b      	uxth	r3, r3
}
 8013e5e:	4618      	mov	r0, r3
 8013e60:	3714      	adds	r7, #20
 8013e62:	46bd      	mov	sp, r7
 8013e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e68:	4770      	bx	lr

08013e6a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013e6a:	b480      	push	{r7}
 8013e6c:	b085      	sub	sp, #20
 8013e6e:	af00      	add	r7, sp, #0
 8013e70:	6078      	str	r0, [r7, #4]
 8013e72:	460b      	mov	r3, r1
 8013e74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8013e7a:	78fb      	ldrb	r3, [r7, #3]
 8013e7c:	015a      	lsls	r2, r3, #5
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	4413      	add	r3, r2
 8013e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e86:	689b      	ldr	r3, [r3, #8]
 8013e88:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e90:	695b      	ldr	r3, [r3, #20]
 8013e92:	68ba      	ldr	r2, [r7, #8]
 8013e94:	4013      	ands	r3, r2
 8013e96:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013e98:	68bb      	ldr	r3, [r7, #8]
}
 8013e9a:	4618      	mov	r0, r3
 8013e9c:	3714      	adds	r7, #20
 8013e9e:	46bd      	mov	sp, r7
 8013ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea4:	4770      	bx	lr

08013ea6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013ea6:	b480      	push	{r7}
 8013ea8:	b087      	sub	sp, #28
 8013eaa:	af00      	add	r7, sp, #0
 8013eac:	6078      	str	r0, [r7, #4]
 8013eae:	460b      	mov	r3, r1
 8013eb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8013eb6:	697b      	ldr	r3, [r7, #20]
 8013eb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ebc:	691b      	ldr	r3, [r3, #16]
 8013ebe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013ec0:	697b      	ldr	r3, [r7, #20]
 8013ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ec8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8013eca:	78fb      	ldrb	r3, [r7, #3]
 8013ecc:	f003 030f 	and.w	r3, r3, #15
 8013ed0:	68fa      	ldr	r2, [r7, #12]
 8013ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8013ed6:	01db      	lsls	r3, r3, #7
 8013ed8:	b2db      	uxtb	r3, r3
 8013eda:	693a      	ldr	r2, [r7, #16]
 8013edc:	4313      	orrs	r3, r2
 8013ede:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013ee0:	78fb      	ldrb	r3, [r7, #3]
 8013ee2:	015a      	lsls	r2, r3, #5
 8013ee4:	697b      	ldr	r3, [r7, #20]
 8013ee6:	4413      	add	r3, r2
 8013ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013eec:	689b      	ldr	r3, [r3, #8]
 8013eee:	693a      	ldr	r2, [r7, #16]
 8013ef0:	4013      	ands	r3, r2
 8013ef2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013ef4:	68bb      	ldr	r3, [r7, #8]
}
 8013ef6:	4618      	mov	r0, r3
 8013ef8:	371c      	adds	r7, #28
 8013efa:	46bd      	mov	sp, r7
 8013efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f00:	4770      	bx	lr

08013f02 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013f02:	b480      	push	{r7}
 8013f04:	b083      	sub	sp, #12
 8013f06:	af00      	add	r7, sp, #0
 8013f08:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	695b      	ldr	r3, [r3, #20]
 8013f0e:	f003 0301 	and.w	r3, r3, #1
}
 8013f12:	4618      	mov	r0, r3
 8013f14:	370c      	adds	r7, #12
 8013f16:	46bd      	mov	sp, r7
 8013f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f1c:	4770      	bx	lr
	...

08013f20 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8013f20:	b480      	push	{r7}
 8013f22:	b085      	sub	sp, #20
 8013f24:	af00      	add	r7, sp, #0
 8013f26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f32:	681a      	ldr	r2, [r3, #0]
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f3a:	4619      	mov	r1, r3
 8013f3c:	4b09      	ldr	r3, [pc, #36]	; (8013f64 <USB_ActivateSetup+0x44>)
 8013f3e:	4013      	ands	r3, r2
 8013f40:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f48:	685b      	ldr	r3, [r3, #4]
 8013f4a:	68fa      	ldr	r2, [r7, #12]
 8013f4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013f54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013f56:	2300      	movs	r3, #0
}
 8013f58:	4618      	mov	r0, r3
 8013f5a:	3714      	adds	r7, #20
 8013f5c:	46bd      	mov	sp, r7
 8013f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f62:	4770      	bx	lr
 8013f64:	fffff800 	.word	0xfffff800

08013f68 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8013f68:	b480      	push	{r7}
 8013f6a:	b087      	sub	sp, #28
 8013f6c:	af00      	add	r7, sp, #0
 8013f6e:	60f8      	str	r0, [r7, #12]
 8013f70:	460b      	mov	r3, r1
 8013f72:	607a      	str	r2, [r7, #4]
 8013f74:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	333c      	adds	r3, #60	; 0x3c
 8013f7e:	3304      	adds	r3, #4
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8013f84:	693b      	ldr	r3, [r7, #16]
 8013f86:	4a26      	ldr	r2, [pc, #152]	; (8014020 <USB_EP0_OutStart+0xb8>)
 8013f88:	4293      	cmp	r3, r2
 8013f8a:	d90a      	bls.n	8013fa2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013f8c:	697b      	ldr	r3, [r7, #20]
 8013f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013f98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013f9c:	d101      	bne.n	8013fa2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8013f9e:	2300      	movs	r3, #0
 8013fa0:	e037      	b.n	8014012 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8013fa2:	697b      	ldr	r3, [r7, #20]
 8013fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013fa8:	461a      	mov	r2, r3
 8013faa:	2300      	movs	r3, #0
 8013fac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013fae:	697b      	ldr	r3, [r7, #20]
 8013fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013fb4:	691b      	ldr	r3, [r3, #16]
 8013fb6:	697a      	ldr	r2, [r7, #20]
 8013fb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013fbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013fc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8013fc2:	697b      	ldr	r3, [r7, #20]
 8013fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013fc8:	691b      	ldr	r3, [r3, #16]
 8013fca:	697a      	ldr	r2, [r7, #20]
 8013fcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013fd0:	f043 0318 	orr.w	r3, r3, #24
 8013fd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8013fd6:	697b      	ldr	r3, [r7, #20]
 8013fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013fdc:	691b      	ldr	r3, [r3, #16]
 8013fde:	697a      	ldr	r2, [r7, #20]
 8013fe0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013fe4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8013fe8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8013fea:	7afb      	ldrb	r3, [r7, #11]
 8013fec:	2b01      	cmp	r3, #1
 8013fee:	d10f      	bne.n	8014010 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8013ff0:	697b      	ldr	r3, [r7, #20]
 8013ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ff6:	461a      	mov	r2, r3
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8013ffc:	697b      	ldr	r3, [r7, #20]
 8013ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014002:	681b      	ldr	r3, [r3, #0]
 8014004:	697a      	ldr	r2, [r7, #20]
 8014006:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801400a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801400e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014010:	2300      	movs	r3, #0
}
 8014012:	4618      	mov	r0, r3
 8014014:	371c      	adds	r7, #28
 8014016:	46bd      	mov	sp, r7
 8014018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801401c:	4770      	bx	lr
 801401e:	bf00      	nop
 8014020:	4f54300a 	.word	0x4f54300a

08014024 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8014024:	b480      	push	{r7}
 8014026:	b085      	sub	sp, #20
 8014028:	af00      	add	r7, sp, #0
 801402a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801402c:	2300      	movs	r3, #0
 801402e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	3301      	adds	r3, #1
 8014034:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	4a13      	ldr	r2, [pc, #76]	; (8014088 <USB_CoreReset+0x64>)
 801403a:	4293      	cmp	r3, r2
 801403c:	d901      	bls.n	8014042 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801403e:	2303      	movs	r3, #3
 8014040:	e01b      	b.n	801407a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	691b      	ldr	r3, [r3, #16]
 8014046:	2b00      	cmp	r3, #0
 8014048:	daf2      	bge.n	8014030 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801404a:	2300      	movs	r3, #0
 801404c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	691b      	ldr	r3, [r3, #16]
 8014052:	f043 0201 	orr.w	r2, r3, #1
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801405a:	68fb      	ldr	r3, [r7, #12]
 801405c:	3301      	adds	r3, #1
 801405e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	4a09      	ldr	r2, [pc, #36]	; (8014088 <USB_CoreReset+0x64>)
 8014064:	4293      	cmp	r3, r2
 8014066:	d901      	bls.n	801406c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8014068:	2303      	movs	r3, #3
 801406a:	e006      	b.n	801407a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	691b      	ldr	r3, [r3, #16]
 8014070:	f003 0301 	and.w	r3, r3, #1
 8014074:	2b01      	cmp	r3, #1
 8014076:	d0f0      	beq.n	801405a <USB_CoreReset+0x36>

  return HAL_OK;
 8014078:	2300      	movs	r3, #0
}
 801407a:	4618      	mov	r0, r3
 801407c:	3714      	adds	r7, #20
 801407e:	46bd      	mov	sp, r7
 8014080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014084:	4770      	bx	lr
 8014086:	bf00      	nop
 8014088:	00030d40 	.word	0x00030d40

0801408c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801408c:	b580      	push	{r7, lr}
 801408e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8014090:	4904      	ldr	r1, [pc, #16]	; (80140a4 <MX_FATFS_Init+0x18>)
 8014092:	4805      	ldr	r0, [pc, #20]	; (80140a8 <MX_FATFS_Init+0x1c>)
 8014094:	f002 fa56 	bl	8016544 <FATFS_LinkDriver>
 8014098:	4603      	mov	r3, r0
 801409a:	461a      	mov	r2, r3
 801409c:	4b03      	ldr	r3, [pc, #12]	; (80140ac <MX_FATFS_Init+0x20>)
 801409e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80140a0:	bf00      	nop
 80140a2:	bd80      	pop	{r7, pc}
 80140a4:	240015d8 	.word	0x240015d8
 80140a8:	080184c4 	.word	0x080184c4
 80140ac:	240015d4 	.word	0x240015d4

080140b0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80140b0:	b580      	push	{r7, lr}
 80140b2:	b082      	sub	sp, #8
 80140b4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80140b6:	2300      	movs	r3, #0
 80140b8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80140ba:	f000 f885 	bl	80141c8 <BSP_SD_IsDetected>
 80140be:	4603      	mov	r3, r0
 80140c0:	2b01      	cmp	r3, #1
 80140c2:	d001      	beq.n	80140c8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80140c4:	2302      	movs	r3, #2
 80140c6:	e012      	b.n	80140ee <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 80140c8:	480b      	ldr	r0, [pc, #44]	; (80140f8 <BSP_SD_Init+0x48>)
 80140ca:	f7f8 ff41 	bl	800cf50 <HAL_SD_Init>
 80140ce:	4603      	mov	r3, r0
 80140d0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80140d2:	79fb      	ldrb	r3, [r7, #7]
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d109      	bne.n	80140ec <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80140d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80140dc:	4806      	ldr	r0, [pc, #24]	; (80140f8 <BSP_SD_Init+0x48>)
 80140de:	f7f9 fdf7 	bl	800dcd0 <HAL_SD_ConfigWideBusOperation>
 80140e2:	4603      	mov	r3, r0
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d001      	beq.n	80140ec <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80140e8:	2301      	movs	r3, #1
 80140ea:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80140ec:	79fb      	ldrb	r3, [r7, #7]
}
 80140ee:	4618      	mov	r0, r3
 80140f0:	3708      	adds	r7, #8
 80140f2:	46bd      	mov	sp, r7
 80140f4:	bd80      	pop	{r7, pc}
 80140f6:	bf00      	nop
 80140f8:	24000ebc 	.word	0x24000ebc

080140fc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80140fc:	b580      	push	{r7, lr}
 80140fe:	b086      	sub	sp, #24
 8014100:	af00      	add	r7, sp, #0
 8014102:	60f8      	str	r0, [r7, #12]
 8014104:	60b9      	str	r1, [r7, #8]
 8014106:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014108:	2300      	movs	r3, #0
 801410a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	68ba      	ldr	r2, [r7, #8]
 8014110:	68f9      	ldr	r1, [r7, #12]
 8014112:	4806      	ldr	r0, [pc, #24]	; (801412c <BSP_SD_ReadBlocks_DMA+0x30>)
 8014114:	f7f9 f83c 	bl	800d190 <HAL_SD_ReadBlocks_DMA>
 8014118:	4603      	mov	r3, r0
 801411a:	2b00      	cmp	r3, #0
 801411c:	d001      	beq.n	8014122 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801411e:	2301      	movs	r3, #1
 8014120:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8014122:	7dfb      	ldrb	r3, [r7, #23]
}
 8014124:	4618      	mov	r0, r3
 8014126:	3718      	adds	r7, #24
 8014128:	46bd      	mov	sp, r7
 801412a:	bd80      	pop	{r7, pc}
 801412c:	24000ebc 	.word	0x24000ebc

08014130 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8014130:	b580      	push	{r7, lr}
 8014132:	b086      	sub	sp, #24
 8014134:	af00      	add	r7, sp, #0
 8014136:	60f8      	str	r0, [r7, #12]
 8014138:	60b9      	str	r1, [r7, #8]
 801413a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801413c:	2300      	movs	r3, #0
 801413e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	68ba      	ldr	r2, [r7, #8]
 8014144:	68f9      	ldr	r1, [r7, #12]
 8014146:	4806      	ldr	r0, [pc, #24]	; (8014160 <BSP_SD_WriteBlocks_DMA+0x30>)
 8014148:	f7f9 f8ca 	bl	800d2e0 <HAL_SD_WriteBlocks_DMA>
 801414c:	4603      	mov	r3, r0
 801414e:	2b00      	cmp	r3, #0
 8014150:	d001      	beq.n	8014156 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8014152:	2301      	movs	r3, #1
 8014154:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8014156:	7dfb      	ldrb	r3, [r7, #23]
}
 8014158:	4618      	mov	r0, r3
 801415a:	3718      	adds	r7, #24
 801415c:	46bd      	mov	sp, r7
 801415e:	bd80      	pop	{r7, pc}
 8014160:	24000ebc 	.word	0x24000ebc

08014164 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8014164:	b580      	push	{r7, lr}
 8014166:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8014168:	4805      	ldr	r0, [pc, #20]	; (8014180 <BSP_SD_GetCardState+0x1c>)
 801416a:	f7f9 fec3 	bl	800def4 <HAL_SD_GetCardState>
 801416e:	4603      	mov	r3, r0
 8014170:	2b04      	cmp	r3, #4
 8014172:	bf14      	ite	ne
 8014174:	2301      	movne	r3, #1
 8014176:	2300      	moveq	r3, #0
 8014178:	b2db      	uxtb	r3, r3
}
 801417a:	4618      	mov	r0, r3
 801417c:	bd80      	pop	{r7, pc}
 801417e:	bf00      	nop
 8014180:	24000ebc 	.word	0x24000ebc

08014184 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8014184:	b580      	push	{r7, lr}
 8014186:	b082      	sub	sp, #8
 8014188:	af00      	add	r7, sp, #0
 801418a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 801418c:	6879      	ldr	r1, [r7, #4]
 801418e:	4803      	ldr	r0, [pc, #12]	; (801419c <BSP_SD_GetCardInfo+0x18>)
 8014190:	f7f9 fd72 	bl	800dc78 <HAL_SD_GetCardInfo>
}
 8014194:	bf00      	nop
 8014196:	3708      	adds	r7, #8
 8014198:	46bd      	mov	sp, r7
 801419a:	bd80      	pop	{r7, pc}
 801419c:	24000ebc 	.word	0x24000ebc

080141a0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80141a0:	b580      	push	{r7, lr}
 80141a2:	b082      	sub	sp, #8
 80141a4:	af00      	add	r7, sp, #0
 80141a6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80141a8:	f000 f9a0 	bl	80144ec <BSP_SD_WriteCpltCallback>
}
 80141ac:	bf00      	nop
 80141ae:	3708      	adds	r7, #8
 80141b0:	46bd      	mov	sp, r7
 80141b2:	bd80      	pop	{r7, pc}

080141b4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80141b4:	b580      	push	{r7, lr}
 80141b6:	b082      	sub	sp, #8
 80141b8:	af00      	add	r7, sp, #0
 80141ba:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80141bc:	f000 f9a2 	bl	8014504 <BSP_SD_ReadCpltCallback>
}
 80141c0:	bf00      	nop
 80141c2:	3708      	adds	r7, #8
 80141c4:	46bd      	mov	sp, r7
 80141c6:	bd80      	pop	{r7, pc}

080141c8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80141c8:	b580      	push	{r7, lr}
 80141ca:	b082      	sub	sp, #8
 80141cc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80141ce:	2301      	movs	r3, #1
 80141d0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80141d2:	f000 f80b 	bl	80141ec <BSP_PlatformIsDetected>
 80141d6:	4603      	mov	r3, r0
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d101      	bne.n	80141e0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80141dc:	2300      	movs	r3, #0
 80141de:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80141e0:	79fb      	ldrb	r3, [r7, #7]
 80141e2:	b2db      	uxtb	r3, r3
}
 80141e4:	4618      	mov	r0, r3
 80141e6:	3708      	adds	r7, #8
 80141e8:	46bd      	mov	sp, r7
 80141ea:	bd80      	pop	{r7, pc}

080141ec <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80141ec:	b580      	push	{r7, lr}
 80141ee:	b082      	sub	sp, #8
 80141f0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80141f2:	2301      	movs	r3, #1
 80141f4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80141f6:	2104      	movs	r1, #4
 80141f8:	4806      	ldr	r0, [pc, #24]	; (8014214 <BSP_PlatformIsDetected+0x28>)
 80141fa:	f7f3 fe7d 	bl	8007ef8 <HAL_GPIO_ReadPin>
 80141fe:	4603      	mov	r3, r0
 8014200:	2b00      	cmp	r3, #0
 8014202:	d001      	beq.n	8014208 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8014204:	2300      	movs	r3, #0
 8014206:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8014208:	79fb      	ldrb	r3, [r7, #7]
}
 801420a:	4618      	mov	r0, r3
 801420c:	3708      	adds	r7, #8
 801420e:	46bd      	mov	sp, r7
 8014210:	bd80      	pop	{r7, pc}
 8014212:	bf00      	nop
 8014214:	58020400 	.word	0x58020400

08014218 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8014218:	b580      	push	{r7, lr}
 801421a:	b084      	sub	sp, #16
 801421c:	af00      	add	r7, sp, #0
 801421e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8014220:	f7ef fbc4 	bl	80039ac <HAL_GetTick>
 8014224:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8014226:	e006      	b.n	8014236 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014228:	f7ff ff9c 	bl	8014164 <BSP_SD_GetCardState>
 801422c:	4603      	mov	r3, r0
 801422e:	2b00      	cmp	r3, #0
 8014230:	d101      	bne.n	8014236 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8014232:	2300      	movs	r3, #0
 8014234:	e009      	b.n	801424a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8014236:	f7ef fbb9 	bl	80039ac <HAL_GetTick>
 801423a:	4602      	mov	r2, r0
 801423c:	68fb      	ldr	r3, [r7, #12]
 801423e:	1ad3      	subs	r3, r2, r3
 8014240:	687a      	ldr	r2, [r7, #4]
 8014242:	429a      	cmp	r2, r3
 8014244:	d8f0      	bhi.n	8014228 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8014246:	f04f 33ff 	mov.w	r3, #4294967295
}
 801424a:	4618      	mov	r0, r3
 801424c:	3710      	adds	r7, #16
 801424e:	46bd      	mov	sp, r7
 8014250:	bd80      	pop	{r7, pc}
	...

08014254 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8014254:	b580      	push	{r7, lr}
 8014256:	b082      	sub	sp, #8
 8014258:	af00      	add	r7, sp, #0
 801425a:	4603      	mov	r3, r0
 801425c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801425e:	4b0b      	ldr	r3, [pc, #44]	; (801428c <SD_CheckStatus+0x38>)
 8014260:	2201      	movs	r2, #1
 8014262:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8014264:	f7ff ff7e 	bl	8014164 <BSP_SD_GetCardState>
 8014268:	4603      	mov	r3, r0
 801426a:	2b00      	cmp	r3, #0
 801426c:	d107      	bne.n	801427e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801426e:	4b07      	ldr	r3, [pc, #28]	; (801428c <SD_CheckStatus+0x38>)
 8014270:	781b      	ldrb	r3, [r3, #0]
 8014272:	b2db      	uxtb	r3, r3
 8014274:	f023 0301 	bic.w	r3, r3, #1
 8014278:	b2da      	uxtb	r2, r3
 801427a:	4b04      	ldr	r3, [pc, #16]	; (801428c <SD_CheckStatus+0x38>)
 801427c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801427e:	4b03      	ldr	r3, [pc, #12]	; (801428c <SD_CheckStatus+0x38>)
 8014280:	781b      	ldrb	r3, [r3, #0]
 8014282:	b2db      	uxtb	r3, r3
}
 8014284:	4618      	mov	r0, r3
 8014286:	3708      	adds	r7, #8
 8014288:	46bd      	mov	sp, r7
 801428a:	bd80      	pop	{r7, pc}
 801428c:	2400000d 	.word	0x2400000d

08014290 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8014290:	b580      	push	{r7, lr}
 8014292:	b082      	sub	sp, #8
 8014294:	af00      	add	r7, sp, #0
 8014296:	4603      	mov	r3, r0
 8014298:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801429a:	f7ff ff09 	bl	80140b0 <BSP_SD_Init>
 801429e:	4603      	mov	r3, r0
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d107      	bne.n	80142b4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80142a4:	79fb      	ldrb	r3, [r7, #7]
 80142a6:	4618      	mov	r0, r3
 80142a8:	f7ff ffd4 	bl	8014254 <SD_CheckStatus>
 80142ac:	4603      	mov	r3, r0
 80142ae:	461a      	mov	r2, r3
 80142b0:	4b04      	ldr	r3, [pc, #16]	; (80142c4 <SD_initialize+0x34>)
 80142b2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80142b4:	4b03      	ldr	r3, [pc, #12]	; (80142c4 <SD_initialize+0x34>)
 80142b6:	781b      	ldrb	r3, [r3, #0]
 80142b8:	b2db      	uxtb	r3, r3
}
 80142ba:	4618      	mov	r0, r3
 80142bc:	3708      	adds	r7, #8
 80142be:	46bd      	mov	sp, r7
 80142c0:	bd80      	pop	{r7, pc}
 80142c2:	bf00      	nop
 80142c4:	2400000d 	.word	0x2400000d

080142c8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80142c8:	b580      	push	{r7, lr}
 80142ca:	b082      	sub	sp, #8
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	4603      	mov	r3, r0
 80142d0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80142d2:	79fb      	ldrb	r3, [r7, #7]
 80142d4:	4618      	mov	r0, r3
 80142d6:	f7ff ffbd 	bl	8014254 <SD_CheckStatus>
 80142da:	4603      	mov	r3, r0
}
 80142dc:	4618      	mov	r0, r3
 80142de:	3708      	adds	r7, #8
 80142e0:	46bd      	mov	sp, r7
 80142e2:	bd80      	pop	{r7, pc}

080142e4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80142e4:	b580      	push	{r7, lr}
 80142e6:	b086      	sub	sp, #24
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	60b9      	str	r1, [r7, #8]
 80142ec:	607a      	str	r2, [r7, #4]
 80142ee:	603b      	str	r3, [r7, #0]
 80142f0:	4603      	mov	r3, r0
 80142f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80142f4:	2301      	movs	r3, #1
 80142f6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80142f8:	f247 5030 	movw	r0, #30000	; 0x7530
 80142fc:	f7ff ff8c 	bl	8014218 <SD_CheckStatusWithTimeout>
 8014300:	4603      	mov	r3, r0
 8014302:	2b00      	cmp	r3, #0
 8014304:	da01      	bge.n	801430a <SD_read+0x26>
  {
    return res;
 8014306:	7dfb      	ldrb	r3, [r7, #23]
 8014308:	e03b      	b.n	8014382 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801430a:	683a      	ldr	r2, [r7, #0]
 801430c:	6879      	ldr	r1, [r7, #4]
 801430e:	68b8      	ldr	r0, [r7, #8]
 8014310:	f7ff fef4 	bl	80140fc <BSP_SD_ReadBlocks_DMA>
 8014314:	4603      	mov	r3, r0
 8014316:	2b00      	cmp	r3, #0
 8014318:	d132      	bne.n	8014380 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801431a:	4b1c      	ldr	r3, [pc, #112]	; (801438c <SD_read+0xa8>)
 801431c:	2200      	movs	r2, #0
 801431e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8014320:	f7ef fb44 	bl	80039ac <HAL_GetTick>
 8014324:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8014326:	bf00      	nop
 8014328:	4b18      	ldr	r3, [pc, #96]	; (801438c <SD_read+0xa8>)
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	2b00      	cmp	r3, #0
 801432e:	d108      	bne.n	8014342 <SD_read+0x5e>
 8014330:	f7ef fb3c 	bl	80039ac <HAL_GetTick>
 8014334:	4602      	mov	r2, r0
 8014336:	693b      	ldr	r3, [r7, #16]
 8014338:	1ad3      	subs	r3, r2, r3
 801433a:	f247 522f 	movw	r2, #29999	; 0x752f
 801433e:	4293      	cmp	r3, r2
 8014340:	d9f2      	bls.n	8014328 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8014342:	4b12      	ldr	r3, [pc, #72]	; (801438c <SD_read+0xa8>)
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	2b00      	cmp	r3, #0
 8014348:	d102      	bne.n	8014350 <SD_read+0x6c>
      {
        res = RES_ERROR;
 801434a:	2301      	movs	r3, #1
 801434c:	75fb      	strb	r3, [r7, #23]
 801434e:	e017      	b.n	8014380 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8014350:	4b0e      	ldr	r3, [pc, #56]	; (801438c <SD_read+0xa8>)
 8014352:	2200      	movs	r2, #0
 8014354:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8014356:	f7ef fb29 	bl	80039ac <HAL_GetTick>
 801435a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801435c:	e007      	b.n	801436e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801435e:	f7ff ff01 	bl	8014164 <BSP_SD_GetCardState>
 8014362:	4603      	mov	r3, r0
 8014364:	2b00      	cmp	r3, #0
 8014366:	d102      	bne.n	801436e <SD_read+0x8a>
          {
            res = RES_OK;
 8014368:	2300      	movs	r3, #0
 801436a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 801436c:	e008      	b.n	8014380 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801436e:	f7ef fb1d 	bl	80039ac <HAL_GetTick>
 8014372:	4602      	mov	r2, r0
 8014374:	693b      	ldr	r3, [r7, #16]
 8014376:	1ad3      	subs	r3, r2, r3
 8014378:	f247 522f 	movw	r2, #29999	; 0x752f
 801437c:	4293      	cmp	r3, r2
 801437e:	d9ee      	bls.n	801435e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8014380:	7dfb      	ldrb	r3, [r7, #23]
}
 8014382:	4618      	mov	r0, r3
 8014384:	3718      	adds	r7, #24
 8014386:	46bd      	mov	sp, r7
 8014388:	bd80      	pop	{r7, pc}
 801438a:	bf00      	nop
 801438c:	240015e0 	.word	0x240015e0

08014390 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8014390:	b580      	push	{r7, lr}
 8014392:	b086      	sub	sp, #24
 8014394:	af00      	add	r7, sp, #0
 8014396:	60b9      	str	r1, [r7, #8]
 8014398:	607a      	str	r2, [r7, #4]
 801439a:	603b      	str	r3, [r7, #0]
 801439c:	4603      	mov	r3, r0
 801439e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80143a0:	2301      	movs	r3, #1
 80143a2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80143a4:	4b24      	ldr	r3, [pc, #144]	; (8014438 <SD_write+0xa8>)
 80143a6:	2200      	movs	r2, #0
 80143a8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80143aa:	f247 5030 	movw	r0, #30000	; 0x7530
 80143ae:	f7ff ff33 	bl	8014218 <SD_CheckStatusWithTimeout>
 80143b2:	4603      	mov	r3, r0
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	da01      	bge.n	80143bc <SD_write+0x2c>
  {
    return res;
 80143b8:	7dfb      	ldrb	r3, [r7, #23]
 80143ba:	e038      	b.n	801442e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80143bc:	683a      	ldr	r2, [r7, #0]
 80143be:	6879      	ldr	r1, [r7, #4]
 80143c0:	68b8      	ldr	r0, [r7, #8]
 80143c2:	f7ff feb5 	bl	8014130 <BSP_SD_WriteBlocks_DMA>
 80143c6:	4603      	mov	r3, r0
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d12f      	bne.n	801442c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80143cc:	f7ef faee 	bl	80039ac <HAL_GetTick>
 80143d0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80143d2:	bf00      	nop
 80143d4:	4b18      	ldr	r3, [pc, #96]	; (8014438 <SD_write+0xa8>)
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d108      	bne.n	80143ee <SD_write+0x5e>
 80143dc:	f7ef fae6 	bl	80039ac <HAL_GetTick>
 80143e0:	4602      	mov	r2, r0
 80143e2:	693b      	ldr	r3, [r7, #16]
 80143e4:	1ad3      	subs	r3, r2, r3
 80143e6:	f247 522f 	movw	r2, #29999	; 0x752f
 80143ea:	4293      	cmp	r3, r2
 80143ec:	d9f2      	bls.n	80143d4 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80143ee:	4b12      	ldr	r3, [pc, #72]	; (8014438 <SD_write+0xa8>)
 80143f0:	681b      	ldr	r3, [r3, #0]
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d102      	bne.n	80143fc <SD_write+0x6c>
      {
        res = RES_ERROR;
 80143f6:	2301      	movs	r3, #1
 80143f8:	75fb      	strb	r3, [r7, #23]
 80143fa:	e017      	b.n	801442c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80143fc:	4b0e      	ldr	r3, [pc, #56]	; (8014438 <SD_write+0xa8>)
 80143fe:	2200      	movs	r2, #0
 8014400:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8014402:	f7ef fad3 	bl	80039ac <HAL_GetTick>
 8014406:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014408:	e007      	b.n	801441a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801440a:	f7ff feab 	bl	8014164 <BSP_SD_GetCardState>
 801440e:	4603      	mov	r3, r0
 8014410:	2b00      	cmp	r3, #0
 8014412:	d102      	bne.n	801441a <SD_write+0x8a>
          {
            res = RES_OK;
 8014414:	2300      	movs	r3, #0
 8014416:	75fb      	strb	r3, [r7, #23]
            break;
 8014418:	e008      	b.n	801442c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801441a:	f7ef fac7 	bl	80039ac <HAL_GetTick>
 801441e:	4602      	mov	r2, r0
 8014420:	693b      	ldr	r3, [r7, #16]
 8014422:	1ad3      	subs	r3, r2, r3
 8014424:	f247 522f 	movw	r2, #29999	; 0x752f
 8014428:	4293      	cmp	r3, r2
 801442a:	d9ee      	bls.n	801440a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 801442c:	7dfb      	ldrb	r3, [r7, #23]
}
 801442e:	4618      	mov	r0, r3
 8014430:	3718      	adds	r7, #24
 8014432:	46bd      	mov	sp, r7
 8014434:	bd80      	pop	{r7, pc}
 8014436:	bf00      	nop
 8014438:	240015dc 	.word	0x240015dc

0801443c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801443c:	b580      	push	{r7, lr}
 801443e:	b08c      	sub	sp, #48	; 0x30
 8014440:	af00      	add	r7, sp, #0
 8014442:	4603      	mov	r3, r0
 8014444:	603a      	str	r2, [r7, #0]
 8014446:	71fb      	strb	r3, [r7, #7]
 8014448:	460b      	mov	r3, r1
 801444a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801444c:	2301      	movs	r3, #1
 801444e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8014452:	4b25      	ldr	r3, [pc, #148]	; (80144e8 <SD_ioctl+0xac>)
 8014454:	781b      	ldrb	r3, [r3, #0]
 8014456:	b2db      	uxtb	r3, r3
 8014458:	f003 0301 	and.w	r3, r3, #1
 801445c:	2b00      	cmp	r3, #0
 801445e:	d001      	beq.n	8014464 <SD_ioctl+0x28>
 8014460:	2303      	movs	r3, #3
 8014462:	e03c      	b.n	80144de <SD_ioctl+0xa2>

  switch (cmd)
 8014464:	79bb      	ldrb	r3, [r7, #6]
 8014466:	2b03      	cmp	r3, #3
 8014468:	d834      	bhi.n	80144d4 <SD_ioctl+0x98>
 801446a:	a201      	add	r2, pc, #4	; (adr r2, 8014470 <SD_ioctl+0x34>)
 801446c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014470:	08014481 	.word	0x08014481
 8014474:	08014489 	.word	0x08014489
 8014478:	080144a1 	.word	0x080144a1
 801447c:	080144bb 	.word	0x080144bb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8014480:	2300      	movs	r3, #0
 8014482:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014486:	e028      	b.n	80144da <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8014488:	f107 0308 	add.w	r3, r7, #8
 801448c:	4618      	mov	r0, r3
 801448e:	f7ff fe79 	bl	8014184 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8014492:	6a3a      	ldr	r2, [r7, #32]
 8014494:	683b      	ldr	r3, [r7, #0]
 8014496:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014498:	2300      	movs	r3, #0
 801449a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801449e:	e01c      	b.n	80144da <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80144a0:	f107 0308 	add.w	r3, r7, #8
 80144a4:	4618      	mov	r0, r3
 80144a6:	f7ff fe6d 	bl	8014184 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80144aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144ac:	b29a      	uxth	r2, r3
 80144ae:	683b      	ldr	r3, [r7, #0]
 80144b0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80144b2:	2300      	movs	r3, #0
 80144b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80144b8:	e00f      	b.n	80144da <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80144ba:	f107 0308 	add.w	r3, r7, #8
 80144be:	4618      	mov	r0, r3
 80144c0:	f7ff fe60 	bl	8014184 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80144c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144c6:	0a5a      	lsrs	r2, r3, #9
 80144c8:	683b      	ldr	r3, [r7, #0]
 80144ca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80144cc:	2300      	movs	r3, #0
 80144ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80144d2:	e002      	b.n	80144da <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80144d4:	2304      	movs	r3, #4
 80144d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80144da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80144de:	4618      	mov	r0, r3
 80144e0:	3730      	adds	r7, #48	; 0x30
 80144e2:	46bd      	mov	sp, r7
 80144e4:	bd80      	pop	{r7, pc}
 80144e6:	bf00      	nop
 80144e8:	2400000d 	.word	0x2400000d

080144ec <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80144ec:	b480      	push	{r7}
 80144ee:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80144f0:	4b03      	ldr	r3, [pc, #12]	; (8014500 <BSP_SD_WriteCpltCallback+0x14>)
 80144f2:	2201      	movs	r2, #1
 80144f4:	601a      	str	r2, [r3, #0]
}
 80144f6:	bf00      	nop
 80144f8:	46bd      	mov	sp, r7
 80144fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144fe:	4770      	bx	lr
 8014500:	240015dc 	.word	0x240015dc

08014504 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8014504:	b480      	push	{r7}
 8014506:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8014508:	4b03      	ldr	r3, [pc, #12]	; (8014518 <BSP_SD_ReadCpltCallback+0x14>)
 801450a:	2201      	movs	r2, #1
 801450c:	601a      	str	r2, [r3, #0]
}
 801450e:	bf00      	nop
 8014510:	46bd      	mov	sp, r7
 8014512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014516:	4770      	bx	lr
 8014518:	240015e0 	.word	0x240015e0

0801451c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801451c:	b580      	push	{r7, lr}
 801451e:	b084      	sub	sp, #16
 8014520:	af00      	add	r7, sp, #0
 8014522:	6078      	str	r0, [r7, #4]
 8014524:	460b      	mov	r3, r1
 8014526:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014528:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801452c:	f002 fd00 	bl	8016f30 <USBD_static_malloc>
 8014530:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8014532:	68fb      	ldr	r3, [r7, #12]
 8014534:	2b00      	cmp	r3, #0
 8014536:	d109      	bne.n	801454c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	32b0      	adds	r2, #176	; 0xb0
 8014542:	2100      	movs	r1, #0
 8014544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8014548:	2302      	movs	r3, #2
 801454a:	e0d4      	b.n	80146f6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 801454c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8014550:	2100      	movs	r1, #0
 8014552:	68f8      	ldr	r0, [r7, #12]
 8014554:	f002 fd7e 	bl	8017054 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	32b0      	adds	r2, #176	; 0xb0
 8014562:	68f9      	ldr	r1, [r7, #12]
 8014564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	32b0      	adds	r2, #176	; 0xb0
 8014572:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	7c1b      	ldrb	r3, [r3, #16]
 8014580:	2b00      	cmp	r3, #0
 8014582:	d138      	bne.n	80145f6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014584:	4b5e      	ldr	r3, [pc, #376]	; (8014700 <USBD_CDC_Init+0x1e4>)
 8014586:	7819      	ldrb	r1, [r3, #0]
 8014588:	f44f 7300 	mov.w	r3, #512	; 0x200
 801458c:	2202      	movs	r2, #2
 801458e:	6878      	ldr	r0, [r7, #4]
 8014590:	f002 fbab 	bl	8016cea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014594:	4b5a      	ldr	r3, [pc, #360]	; (8014700 <USBD_CDC_Init+0x1e4>)
 8014596:	781b      	ldrb	r3, [r3, #0]
 8014598:	f003 020f 	and.w	r2, r3, #15
 801459c:	6879      	ldr	r1, [r7, #4]
 801459e:	4613      	mov	r3, r2
 80145a0:	009b      	lsls	r3, r3, #2
 80145a2:	4413      	add	r3, r2
 80145a4:	009b      	lsls	r3, r3, #2
 80145a6:	440b      	add	r3, r1
 80145a8:	3324      	adds	r3, #36	; 0x24
 80145aa:	2201      	movs	r2, #1
 80145ac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80145ae:	4b55      	ldr	r3, [pc, #340]	; (8014704 <USBD_CDC_Init+0x1e8>)
 80145b0:	7819      	ldrb	r1, [r3, #0]
 80145b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80145b6:	2202      	movs	r2, #2
 80145b8:	6878      	ldr	r0, [r7, #4]
 80145ba:	f002 fb96 	bl	8016cea <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80145be:	4b51      	ldr	r3, [pc, #324]	; (8014704 <USBD_CDC_Init+0x1e8>)
 80145c0:	781b      	ldrb	r3, [r3, #0]
 80145c2:	f003 020f 	and.w	r2, r3, #15
 80145c6:	6879      	ldr	r1, [r7, #4]
 80145c8:	4613      	mov	r3, r2
 80145ca:	009b      	lsls	r3, r3, #2
 80145cc:	4413      	add	r3, r2
 80145ce:	009b      	lsls	r3, r3, #2
 80145d0:	440b      	add	r3, r1
 80145d2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80145d6:	2201      	movs	r2, #1
 80145d8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80145da:	4b4b      	ldr	r3, [pc, #300]	; (8014708 <USBD_CDC_Init+0x1ec>)
 80145dc:	781b      	ldrb	r3, [r3, #0]
 80145de:	f003 020f 	and.w	r2, r3, #15
 80145e2:	6879      	ldr	r1, [r7, #4]
 80145e4:	4613      	mov	r3, r2
 80145e6:	009b      	lsls	r3, r3, #2
 80145e8:	4413      	add	r3, r2
 80145ea:	009b      	lsls	r3, r3, #2
 80145ec:	440b      	add	r3, r1
 80145ee:	3326      	adds	r3, #38	; 0x26
 80145f0:	2210      	movs	r2, #16
 80145f2:	801a      	strh	r2, [r3, #0]
 80145f4:	e035      	b.n	8014662 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80145f6:	4b42      	ldr	r3, [pc, #264]	; (8014700 <USBD_CDC_Init+0x1e4>)
 80145f8:	7819      	ldrb	r1, [r3, #0]
 80145fa:	2340      	movs	r3, #64	; 0x40
 80145fc:	2202      	movs	r2, #2
 80145fe:	6878      	ldr	r0, [r7, #4]
 8014600:	f002 fb73 	bl	8016cea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014604:	4b3e      	ldr	r3, [pc, #248]	; (8014700 <USBD_CDC_Init+0x1e4>)
 8014606:	781b      	ldrb	r3, [r3, #0]
 8014608:	f003 020f 	and.w	r2, r3, #15
 801460c:	6879      	ldr	r1, [r7, #4]
 801460e:	4613      	mov	r3, r2
 8014610:	009b      	lsls	r3, r3, #2
 8014612:	4413      	add	r3, r2
 8014614:	009b      	lsls	r3, r3, #2
 8014616:	440b      	add	r3, r1
 8014618:	3324      	adds	r3, #36	; 0x24
 801461a:	2201      	movs	r2, #1
 801461c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801461e:	4b39      	ldr	r3, [pc, #228]	; (8014704 <USBD_CDC_Init+0x1e8>)
 8014620:	7819      	ldrb	r1, [r3, #0]
 8014622:	2340      	movs	r3, #64	; 0x40
 8014624:	2202      	movs	r2, #2
 8014626:	6878      	ldr	r0, [r7, #4]
 8014628:	f002 fb5f 	bl	8016cea <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801462c:	4b35      	ldr	r3, [pc, #212]	; (8014704 <USBD_CDC_Init+0x1e8>)
 801462e:	781b      	ldrb	r3, [r3, #0]
 8014630:	f003 020f 	and.w	r2, r3, #15
 8014634:	6879      	ldr	r1, [r7, #4]
 8014636:	4613      	mov	r3, r2
 8014638:	009b      	lsls	r3, r3, #2
 801463a:	4413      	add	r3, r2
 801463c:	009b      	lsls	r3, r3, #2
 801463e:	440b      	add	r3, r1
 8014640:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014644:	2201      	movs	r2, #1
 8014646:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014648:	4b2f      	ldr	r3, [pc, #188]	; (8014708 <USBD_CDC_Init+0x1ec>)
 801464a:	781b      	ldrb	r3, [r3, #0]
 801464c:	f003 020f 	and.w	r2, r3, #15
 8014650:	6879      	ldr	r1, [r7, #4]
 8014652:	4613      	mov	r3, r2
 8014654:	009b      	lsls	r3, r3, #2
 8014656:	4413      	add	r3, r2
 8014658:	009b      	lsls	r3, r3, #2
 801465a:	440b      	add	r3, r1
 801465c:	3326      	adds	r3, #38	; 0x26
 801465e:	2210      	movs	r2, #16
 8014660:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014662:	4b29      	ldr	r3, [pc, #164]	; (8014708 <USBD_CDC_Init+0x1ec>)
 8014664:	7819      	ldrb	r1, [r3, #0]
 8014666:	2308      	movs	r3, #8
 8014668:	2203      	movs	r2, #3
 801466a:	6878      	ldr	r0, [r7, #4]
 801466c:	f002 fb3d 	bl	8016cea <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8014670:	4b25      	ldr	r3, [pc, #148]	; (8014708 <USBD_CDC_Init+0x1ec>)
 8014672:	781b      	ldrb	r3, [r3, #0]
 8014674:	f003 020f 	and.w	r2, r3, #15
 8014678:	6879      	ldr	r1, [r7, #4]
 801467a:	4613      	mov	r3, r2
 801467c:	009b      	lsls	r3, r3, #2
 801467e:	4413      	add	r3, r2
 8014680:	009b      	lsls	r3, r3, #2
 8014682:	440b      	add	r3, r1
 8014684:	3324      	adds	r3, #36	; 0x24
 8014686:	2201      	movs	r2, #1
 8014688:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801468a:	68fb      	ldr	r3, [r7, #12]
 801468c:	2200      	movs	r2, #0
 801468e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014698:	687a      	ldr	r2, [r7, #4]
 801469a:	33b0      	adds	r3, #176	; 0xb0
 801469c:	009b      	lsls	r3, r3, #2
 801469e:	4413      	add	r3, r2
 80146a0:	685b      	ldr	r3, [r3, #4]
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80146a6:	68fb      	ldr	r3, [r7, #12]
 80146a8:	2200      	movs	r2, #0
 80146aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	2200      	movs	r2, #0
 80146b2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80146b6:	68fb      	ldr	r3, [r7, #12]
 80146b8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d101      	bne.n	80146c4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80146c0:	2302      	movs	r3, #2
 80146c2:	e018      	b.n	80146f6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	7c1b      	ldrb	r3, [r3, #16]
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d10a      	bne.n	80146e2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80146cc:	4b0d      	ldr	r3, [pc, #52]	; (8014704 <USBD_CDC_Init+0x1e8>)
 80146ce:	7819      	ldrb	r1, [r3, #0]
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80146d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80146da:	6878      	ldr	r0, [r7, #4]
 80146dc:	f002 fbf4 	bl	8016ec8 <USBD_LL_PrepareReceive>
 80146e0:	e008      	b.n	80146f4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80146e2:	4b08      	ldr	r3, [pc, #32]	; (8014704 <USBD_CDC_Init+0x1e8>)
 80146e4:	7819      	ldrb	r1, [r3, #0]
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80146ec:	2340      	movs	r3, #64	; 0x40
 80146ee:	6878      	ldr	r0, [r7, #4]
 80146f0:	f002 fbea 	bl	8016ec8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80146f4:	2300      	movs	r3, #0
}
 80146f6:	4618      	mov	r0, r3
 80146f8:	3710      	adds	r7, #16
 80146fa:	46bd      	mov	sp, r7
 80146fc:	bd80      	pop	{r7, pc}
 80146fe:	bf00      	nop
 8014700:	24000097 	.word	0x24000097
 8014704:	24000098 	.word	0x24000098
 8014708:	24000099 	.word	0x24000099

0801470c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801470c:	b580      	push	{r7, lr}
 801470e:	b082      	sub	sp, #8
 8014710:	af00      	add	r7, sp, #0
 8014712:	6078      	str	r0, [r7, #4]
 8014714:	460b      	mov	r3, r1
 8014716:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8014718:	4b3a      	ldr	r3, [pc, #232]	; (8014804 <USBD_CDC_DeInit+0xf8>)
 801471a:	781b      	ldrb	r3, [r3, #0]
 801471c:	4619      	mov	r1, r3
 801471e:	6878      	ldr	r0, [r7, #4]
 8014720:	f002 fb09 	bl	8016d36 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8014724:	4b37      	ldr	r3, [pc, #220]	; (8014804 <USBD_CDC_DeInit+0xf8>)
 8014726:	781b      	ldrb	r3, [r3, #0]
 8014728:	f003 020f 	and.w	r2, r3, #15
 801472c:	6879      	ldr	r1, [r7, #4]
 801472e:	4613      	mov	r3, r2
 8014730:	009b      	lsls	r3, r3, #2
 8014732:	4413      	add	r3, r2
 8014734:	009b      	lsls	r3, r3, #2
 8014736:	440b      	add	r3, r1
 8014738:	3324      	adds	r3, #36	; 0x24
 801473a:	2200      	movs	r2, #0
 801473c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801473e:	4b32      	ldr	r3, [pc, #200]	; (8014808 <USBD_CDC_DeInit+0xfc>)
 8014740:	781b      	ldrb	r3, [r3, #0]
 8014742:	4619      	mov	r1, r3
 8014744:	6878      	ldr	r0, [r7, #4]
 8014746:	f002 faf6 	bl	8016d36 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801474a:	4b2f      	ldr	r3, [pc, #188]	; (8014808 <USBD_CDC_DeInit+0xfc>)
 801474c:	781b      	ldrb	r3, [r3, #0]
 801474e:	f003 020f 	and.w	r2, r3, #15
 8014752:	6879      	ldr	r1, [r7, #4]
 8014754:	4613      	mov	r3, r2
 8014756:	009b      	lsls	r3, r3, #2
 8014758:	4413      	add	r3, r2
 801475a:	009b      	lsls	r3, r3, #2
 801475c:	440b      	add	r3, r1
 801475e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014762:	2200      	movs	r2, #0
 8014764:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8014766:	4b29      	ldr	r3, [pc, #164]	; (801480c <USBD_CDC_DeInit+0x100>)
 8014768:	781b      	ldrb	r3, [r3, #0]
 801476a:	4619      	mov	r1, r3
 801476c:	6878      	ldr	r0, [r7, #4]
 801476e:	f002 fae2 	bl	8016d36 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8014772:	4b26      	ldr	r3, [pc, #152]	; (801480c <USBD_CDC_DeInit+0x100>)
 8014774:	781b      	ldrb	r3, [r3, #0]
 8014776:	f003 020f 	and.w	r2, r3, #15
 801477a:	6879      	ldr	r1, [r7, #4]
 801477c:	4613      	mov	r3, r2
 801477e:	009b      	lsls	r3, r3, #2
 8014780:	4413      	add	r3, r2
 8014782:	009b      	lsls	r3, r3, #2
 8014784:	440b      	add	r3, r1
 8014786:	3324      	adds	r3, #36	; 0x24
 8014788:	2200      	movs	r2, #0
 801478a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 801478c:	4b1f      	ldr	r3, [pc, #124]	; (801480c <USBD_CDC_DeInit+0x100>)
 801478e:	781b      	ldrb	r3, [r3, #0]
 8014790:	f003 020f 	and.w	r2, r3, #15
 8014794:	6879      	ldr	r1, [r7, #4]
 8014796:	4613      	mov	r3, r2
 8014798:	009b      	lsls	r3, r3, #2
 801479a:	4413      	add	r3, r2
 801479c:	009b      	lsls	r3, r3, #2
 801479e:	440b      	add	r3, r1
 80147a0:	3326      	adds	r3, #38	; 0x26
 80147a2:	2200      	movs	r2, #0
 80147a4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	32b0      	adds	r2, #176	; 0xb0
 80147b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d01f      	beq.n	80147f8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80147be:	687a      	ldr	r2, [r7, #4]
 80147c0:	33b0      	adds	r3, #176	; 0xb0
 80147c2:	009b      	lsls	r3, r3, #2
 80147c4:	4413      	add	r3, r2
 80147c6:	685b      	ldr	r3, [r3, #4]
 80147c8:	685b      	ldr	r3, [r3, #4]
 80147ca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	32b0      	adds	r2, #176	; 0xb0
 80147d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147da:	4618      	mov	r0, r3
 80147dc:	f002 fbb6 	bl	8016f4c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	32b0      	adds	r2, #176	; 0xb0
 80147ea:	2100      	movs	r1, #0
 80147ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	2200      	movs	r2, #0
 80147f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80147f8:	2300      	movs	r3, #0
}
 80147fa:	4618      	mov	r0, r3
 80147fc:	3708      	adds	r7, #8
 80147fe:	46bd      	mov	sp, r7
 8014800:	bd80      	pop	{r7, pc}
 8014802:	bf00      	nop
 8014804:	24000097 	.word	0x24000097
 8014808:	24000098 	.word	0x24000098
 801480c:	24000099 	.word	0x24000099

08014810 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8014810:	b580      	push	{r7, lr}
 8014812:	b086      	sub	sp, #24
 8014814:	af00      	add	r7, sp, #0
 8014816:	6078      	str	r0, [r7, #4]
 8014818:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	32b0      	adds	r2, #176	; 0xb0
 8014824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014828:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801482a:	2300      	movs	r3, #0
 801482c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801482e:	2300      	movs	r3, #0
 8014830:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8014832:	2300      	movs	r3, #0
 8014834:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8014836:	693b      	ldr	r3, [r7, #16]
 8014838:	2b00      	cmp	r3, #0
 801483a:	d101      	bne.n	8014840 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 801483c:	2303      	movs	r3, #3
 801483e:	e0bf      	b.n	80149c0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014840:	683b      	ldr	r3, [r7, #0]
 8014842:	781b      	ldrb	r3, [r3, #0]
 8014844:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014848:	2b00      	cmp	r3, #0
 801484a:	d050      	beq.n	80148ee <USBD_CDC_Setup+0xde>
 801484c:	2b20      	cmp	r3, #32
 801484e:	f040 80af 	bne.w	80149b0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8014852:	683b      	ldr	r3, [r7, #0]
 8014854:	88db      	ldrh	r3, [r3, #6]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d03a      	beq.n	80148d0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801485a:	683b      	ldr	r3, [r7, #0]
 801485c:	781b      	ldrb	r3, [r3, #0]
 801485e:	b25b      	sxtb	r3, r3
 8014860:	2b00      	cmp	r3, #0
 8014862:	da1b      	bge.n	801489c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801486a:	687a      	ldr	r2, [r7, #4]
 801486c:	33b0      	adds	r3, #176	; 0xb0
 801486e:	009b      	lsls	r3, r3, #2
 8014870:	4413      	add	r3, r2
 8014872:	685b      	ldr	r3, [r3, #4]
 8014874:	689b      	ldr	r3, [r3, #8]
 8014876:	683a      	ldr	r2, [r7, #0]
 8014878:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801487a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801487c:	683a      	ldr	r2, [r7, #0]
 801487e:	88d2      	ldrh	r2, [r2, #6]
 8014880:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8014882:	683b      	ldr	r3, [r7, #0]
 8014884:	88db      	ldrh	r3, [r3, #6]
 8014886:	2b07      	cmp	r3, #7
 8014888:	bf28      	it	cs
 801488a:	2307      	movcs	r3, #7
 801488c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801488e:	693b      	ldr	r3, [r7, #16]
 8014890:	89fa      	ldrh	r2, [r7, #14]
 8014892:	4619      	mov	r1, r3
 8014894:	6878      	ldr	r0, [r7, #4]
 8014896:	f001 fd89 	bl	80163ac <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801489a:	e090      	b.n	80149be <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 801489c:	683b      	ldr	r3, [r7, #0]
 801489e:	785a      	ldrb	r2, [r3, #1]
 80148a0:	693b      	ldr	r3, [r7, #16]
 80148a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80148a6:	683b      	ldr	r3, [r7, #0]
 80148a8:	88db      	ldrh	r3, [r3, #6]
 80148aa:	2b3f      	cmp	r3, #63	; 0x3f
 80148ac:	d803      	bhi.n	80148b6 <USBD_CDC_Setup+0xa6>
 80148ae:	683b      	ldr	r3, [r7, #0]
 80148b0:	88db      	ldrh	r3, [r3, #6]
 80148b2:	b2da      	uxtb	r2, r3
 80148b4:	e000      	b.n	80148b8 <USBD_CDC_Setup+0xa8>
 80148b6:	2240      	movs	r2, #64	; 0x40
 80148b8:	693b      	ldr	r3, [r7, #16]
 80148ba:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80148be:	6939      	ldr	r1, [r7, #16]
 80148c0:	693b      	ldr	r3, [r7, #16]
 80148c2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80148c6:	461a      	mov	r2, r3
 80148c8:	6878      	ldr	r0, [r7, #4]
 80148ca:	f001 fd9b 	bl	8016404 <USBD_CtlPrepareRx>
      break;
 80148ce:	e076      	b.n	80149be <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80148d6:	687a      	ldr	r2, [r7, #4]
 80148d8:	33b0      	adds	r3, #176	; 0xb0
 80148da:	009b      	lsls	r3, r3, #2
 80148dc:	4413      	add	r3, r2
 80148de:	685b      	ldr	r3, [r3, #4]
 80148e0:	689b      	ldr	r3, [r3, #8]
 80148e2:	683a      	ldr	r2, [r7, #0]
 80148e4:	7850      	ldrb	r0, [r2, #1]
 80148e6:	2200      	movs	r2, #0
 80148e8:	6839      	ldr	r1, [r7, #0]
 80148ea:	4798      	blx	r3
      break;
 80148ec:	e067      	b.n	80149be <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80148ee:	683b      	ldr	r3, [r7, #0]
 80148f0:	785b      	ldrb	r3, [r3, #1]
 80148f2:	2b0b      	cmp	r3, #11
 80148f4:	d851      	bhi.n	801499a <USBD_CDC_Setup+0x18a>
 80148f6:	a201      	add	r2, pc, #4	; (adr r2, 80148fc <USBD_CDC_Setup+0xec>)
 80148f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148fc:	0801492d 	.word	0x0801492d
 8014900:	080149a9 	.word	0x080149a9
 8014904:	0801499b 	.word	0x0801499b
 8014908:	0801499b 	.word	0x0801499b
 801490c:	0801499b 	.word	0x0801499b
 8014910:	0801499b 	.word	0x0801499b
 8014914:	0801499b 	.word	0x0801499b
 8014918:	0801499b 	.word	0x0801499b
 801491c:	0801499b 	.word	0x0801499b
 8014920:	0801499b 	.word	0x0801499b
 8014924:	08014957 	.word	0x08014957
 8014928:	08014981 	.word	0x08014981
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014932:	b2db      	uxtb	r3, r3
 8014934:	2b03      	cmp	r3, #3
 8014936:	d107      	bne.n	8014948 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014938:	f107 030a 	add.w	r3, r7, #10
 801493c:	2202      	movs	r2, #2
 801493e:	4619      	mov	r1, r3
 8014940:	6878      	ldr	r0, [r7, #4]
 8014942:	f001 fd33 	bl	80163ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014946:	e032      	b.n	80149ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014948:	6839      	ldr	r1, [r7, #0]
 801494a:	6878      	ldr	r0, [r7, #4]
 801494c:	f001 fcbd 	bl	80162ca <USBD_CtlError>
            ret = USBD_FAIL;
 8014950:	2303      	movs	r3, #3
 8014952:	75fb      	strb	r3, [r7, #23]
          break;
 8014954:	e02b      	b.n	80149ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801495c:	b2db      	uxtb	r3, r3
 801495e:	2b03      	cmp	r3, #3
 8014960:	d107      	bne.n	8014972 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014962:	f107 030d 	add.w	r3, r7, #13
 8014966:	2201      	movs	r2, #1
 8014968:	4619      	mov	r1, r3
 801496a:	6878      	ldr	r0, [r7, #4]
 801496c:	f001 fd1e 	bl	80163ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014970:	e01d      	b.n	80149ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014972:	6839      	ldr	r1, [r7, #0]
 8014974:	6878      	ldr	r0, [r7, #4]
 8014976:	f001 fca8 	bl	80162ca <USBD_CtlError>
            ret = USBD_FAIL;
 801497a:	2303      	movs	r3, #3
 801497c:	75fb      	strb	r3, [r7, #23]
          break;
 801497e:	e016      	b.n	80149ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014986:	b2db      	uxtb	r3, r3
 8014988:	2b03      	cmp	r3, #3
 801498a:	d00f      	beq.n	80149ac <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 801498c:	6839      	ldr	r1, [r7, #0]
 801498e:	6878      	ldr	r0, [r7, #4]
 8014990:	f001 fc9b 	bl	80162ca <USBD_CtlError>
            ret = USBD_FAIL;
 8014994:	2303      	movs	r3, #3
 8014996:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014998:	e008      	b.n	80149ac <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801499a:	6839      	ldr	r1, [r7, #0]
 801499c:	6878      	ldr	r0, [r7, #4]
 801499e:	f001 fc94 	bl	80162ca <USBD_CtlError>
          ret = USBD_FAIL;
 80149a2:	2303      	movs	r3, #3
 80149a4:	75fb      	strb	r3, [r7, #23]
          break;
 80149a6:	e002      	b.n	80149ae <USBD_CDC_Setup+0x19e>
          break;
 80149a8:	bf00      	nop
 80149aa:	e008      	b.n	80149be <USBD_CDC_Setup+0x1ae>
          break;
 80149ac:	bf00      	nop
      }
      break;
 80149ae:	e006      	b.n	80149be <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80149b0:	6839      	ldr	r1, [r7, #0]
 80149b2:	6878      	ldr	r0, [r7, #4]
 80149b4:	f001 fc89 	bl	80162ca <USBD_CtlError>
      ret = USBD_FAIL;
 80149b8:	2303      	movs	r3, #3
 80149ba:	75fb      	strb	r3, [r7, #23]
      break;
 80149bc:	bf00      	nop
  }

  return (uint8_t)ret;
 80149be:	7dfb      	ldrb	r3, [r7, #23]
}
 80149c0:	4618      	mov	r0, r3
 80149c2:	3718      	adds	r7, #24
 80149c4:	46bd      	mov	sp, r7
 80149c6:	bd80      	pop	{r7, pc}

080149c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80149c8:	b580      	push	{r7, lr}
 80149ca:	b084      	sub	sp, #16
 80149cc:	af00      	add	r7, sp, #0
 80149ce:	6078      	str	r0, [r7, #4]
 80149d0:	460b      	mov	r3, r1
 80149d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80149da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	32b0      	adds	r2, #176	; 0xb0
 80149e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d101      	bne.n	80149f2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80149ee:	2303      	movs	r3, #3
 80149f0:	e065      	b.n	8014abe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	32b0      	adds	r2, #176	; 0xb0
 80149fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a00:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014a02:	78fb      	ldrb	r3, [r7, #3]
 8014a04:	f003 020f 	and.w	r2, r3, #15
 8014a08:	6879      	ldr	r1, [r7, #4]
 8014a0a:	4613      	mov	r3, r2
 8014a0c:	009b      	lsls	r3, r3, #2
 8014a0e:	4413      	add	r3, r2
 8014a10:	009b      	lsls	r3, r3, #2
 8014a12:	440b      	add	r3, r1
 8014a14:	3318      	adds	r3, #24
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d02f      	beq.n	8014a7c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8014a1c:	78fb      	ldrb	r3, [r7, #3]
 8014a1e:	f003 020f 	and.w	r2, r3, #15
 8014a22:	6879      	ldr	r1, [r7, #4]
 8014a24:	4613      	mov	r3, r2
 8014a26:	009b      	lsls	r3, r3, #2
 8014a28:	4413      	add	r3, r2
 8014a2a:	009b      	lsls	r3, r3, #2
 8014a2c:	440b      	add	r3, r1
 8014a2e:	3318      	adds	r3, #24
 8014a30:	681a      	ldr	r2, [r3, #0]
 8014a32:	78fb      	ldrb	r3, [r7, #3]
 8014a34:	f003 010f 	and.w	r1, r3, #15
 8014a38:	68f8      	ldr	r0, [r7, #12]
 8014a3a:	460b      	mov	r3, r1
 8014a3c:	00db      	lsls	r3, r3, #3
 8014a3e:	440b      	add	r3, r1
 8014a40:	009b      	lsls	r3, r3, #2
 8014a42:	4403      	add	r3, r0
 8014a44:	3344      	adds	r3, #68	; 0x44
 8014a46:	681b      	ldr	r3, [r3, #0]
 8014a48:	fbb2 f1f3 	udiv	r1, r2, r3
 8014a4c:	fb01 f303 	mul.w	r3, r1, r3
 8014a50:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d112      	bne.n	8014a7c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8014a56:	78fb      	ldrb	r3, [r7, #3]
 8014a58:	f003 020f 	and.w	r2, r3, #15
 8014a5c:	6879      	ldr	r1, [r7, #4]
 8014a5e:	4613      	mov	r3, r2
 8014a60:	009b      	lsls	r3, r3, #2
 8014a62:	4413      	add	r3, r2
 8014a64:	009b      	lsls	r3, r3, #2
 8014a66:	440b      	add	r3, r1
 8014a68:	3318      	adds	r3, #24
 8014a6a:	2200      	movs	r2, #0
 8014a6c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8014a6e:	78f9      	ldrb	r1, [r7, #3]
 8014a70:	2300      	movs	r3, #0
 8014a72:	2200      	movs	r2, #0
 8014a74:	6878      	ldr	r0, [r7, #4]
 8014a76:	f002 fa06 	bl	8016e86 <USBD_LL_Transmit>
 8014a7a:	e01f      	b.n	8014abc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8014a7c:	68bb      	ldr	r3, [r7, #8]
 8014a7e:	2200      	movs	r2, #0
 8014a80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014a8a:	687a      	ldr	r2, [r7, #4]
 8014a8c:	33b0      	adds	r3, #176	; 0xb0
 8014a8e:	009b      	lsls	r3, r3, #2
 8014a90:	4413      	add	r3, r2
 8014a92:	685b      	ldr	r3, [r3, #4]
 8014a94:	691b      	ldr	r3, [r3, #16]
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d010      	beq.n	8014abc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014aa0:	687a      	ldr	r2, [r7, #4]
 8014aa2:	33b0      	adds	r3, #176	; 0xb0
 8014aa4:	009b      	lsls	r3, r3, #2
 8014aa6:	4413      	add	r3, r2
 8014aa8:	685b      	ldr	r3, [r3, #4]
 8014aaa:	691b      	ldr	r3, [r3, #16]
 8014aac:	68ba      	ldr	r2, [r7, #8]
 8014aae:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8014ab2:	68ba      	ldr	r2, [r7, #8]
 8014ab4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8014ab8:	78fa      	ldrb	r2, [r7, #3]
 8014aba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8014abc:	2300      	movs	r3, #0
}
 8014abe:	4618      	mov	r0, r3
 8014ac0:	3710      	adds	r7, #16
 8014ac2:	46bd      	mov	sp, r7
 8014ac4:	bd80      	pop	{r7, pc}

08014ac6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014ac6:	b580      	push	{r7, lr}
 8014ac8:	b084      	sub	sp, #16
 8014aca:	af00      	add	r7, sp, #0
 8014acc:	6078      	str	r0, [r7, #4]
 8014ace:	460b      	mov	r3, r1
 8014ad0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	32b0      	adds	r2, #176	; 0xb0
 8014adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ae0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	32b0      	adds	r2, #176	; 0xb0
 8014aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	d101      	bne.n	8014af8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8014af4:	2303      	movs	r3, #3
 8014af6:	e01a      	b.n	8014b2e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014af8:	78fb      	ldrb	r3, [r7, #3]
 8014afa:	4619      	mov	r1, r3
 8014afc:	6878      	ldr	r0, [r7, #4]
 8014afe:	f002 fa04 	bl	8016f0a <USBD_LL_GetRxDataSize>
 8014b02:	4602      	mov	r2, r0
 8014b04:	68fb      	ldr	r3, [r7, #12]
 8014b06:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014b10:	687a      	ldr	r2, [r7, #4]
 8014b12:	33b0      	adds	r3, #176	; 0xb0
 8014b14:	009b      	lsls	r3, r3, #2
 8014b16:	4413      	add	r3, r2
 8014b18:	685b      	ldr	r3, [r3, #4]
 8014b1a:	68db      	ldr	r3, [r3, #12]
 8014b1c:	68fa      	ldr	r2, [r7, #12]
 8014b1e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8014b22:	68fa      	ldr	r2, [r7, #12]
 8014b24:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8014b28:	4611      	mov	r1, r2
 8014b2a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8014b2c:	2300      	movs	r3, #0
}
 8014b2e:	4618      	mov	r0, r3
 8014b30:	3710      	adds	r7, #16
 8014b32:	46bd      	mov	sp, r7
 8014b34:	bd80      	pop	{r7, pc}

08014b36 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014b36:	b580      	push	{r7, lr}
 8014b38:	b084      	sub	sp, #16
 8014b3a:	af00      	add	r7, sp, #0
 8014b3c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	32b0      	adds	r2, #176	; 0xb0
 8014b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b4c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d101      	bne.n	8014b58 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014b54:	2303      	movs	r3, #3
 8014b56:	e025      	b.n	8014ba4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014b5e:	687a      	ldr	r2, [r7, #4]
 8014b60:	33b0      	adds	r3, #176	; 0xb0
 8014b62:	009b      	lsls	r3, r3, #2
 8014b64:	4413      	add	r3, r2
 8014b66:	685b      	ldr	r3, [r3, #4]
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d01a      	beq.n	8014ba2 <USBD_CDC_EP0_RxReady+0x6c>
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8014b72:	2bff      	cmp	r3, #255	; 0xff
 8014b74:	d015      	beq.n	8014ba2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014b7c:	687a      	ldr	r2, [r7, #4]
 8014b7e:	33b0      	adds	r3, #176	; 0xb0
 8014b80:	009b      	lsls	r3, r3, #2
 8014b82:	4413      	add	r3, r2
 8014b84:	685b      	ldr	r3, [r3, #4]
 8014b86:	689b      	ldr	r3, [r3, #8]
 8014b88:	68fa      	ldr	r2, [r7, #12]
 8014b8a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8014b8e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8014b90:	68fa      	ldr	r2, [r7, #12]
 8014b92:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014b96:	b292      	uxth	r2, r2
 8014b98:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	22ff      	movs	r2, #255	; 0xff
 8014b9e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8014ba2:	2300      	movs	r3, #0
}
 8014ba4:	4618      	mov	r0, r3
 8014ba6:	3710      	adds	r7, #16
 8014ba8:	46bd      	mov	sp, r7
 8014baa:	bd80      	pop	{r7, pc}

08014bac <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014bac:	b580      	push	{r7, lr}
 8014bae:	b086      	sub	sp, #24
 8014bb0:	af00      	add	r7, sp, #0
 8014bb2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014bb4:	2182      	movs	r1, #130	; 0x82
 8014bb6:	4818      	ldr	r0, [pc, #96]	; (8014c18 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014bb8:	f000 fd4f 	bl	801565a <USBD_GetEpDesc>
 8014bbc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014bbe:	2101      	movs	r1, #1
 8014bc0:	4815      	ldr	r0, [pc, #84]	; (8014c18 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014bc2:	f000 fd4a 	bl	801565a <USBD_GetEpDesc>
 8014bc6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014bc8:	2181      	movs	r1, #129	; 0x81
 8014bca:	4813      	ldr	r0, [pc, #76]	; (8014c18 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014bcc:	f000 fd45 	bl	801565a <USBD_GetEpDesc>
 8014bd0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014bd2:	697b      	ldr	r3, [r7, #20]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d002      	beq.n	8014bde <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014bd8:	697b      	ldr	r3, [r7, #20]
 8014bda:	2210      	movs	r2, #16
 8014bdc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014bde:	693b      	ldr	r3, [r7, #16]
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d006      	beq.n	8014bf2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014be4:	693b      	ldr	r3, [r7, #16]
 8014be6:	2200      	movs	r2, #0
 8014be8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014bec:	711a      	strb	r2, [r3, #4]
 8014bee:	2200      	movs	r2, #0
 8014bf0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d006      	beq.n	8014c06 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	2200      	movs	r2, #0
 8014bfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014c00:	711a      	strb	r2, [r3, #4]
 8014c02:	2200      	movs	r2, #0
 8014c04:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	2243      	movs	r2, #67	; 0x43
 8014c0a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014c0c:	4b02      	ldr	r3, [pc, #8]	; (8014c18 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8014c0e:	4618      	mov	r0, r3
 8014c10:	3718      	adds	r7, #24
 8014c12:	46bd      	mov	sp, r7
 8014c14:	bd80      	pop	{r7, pc}
 8014c16:	bf00      	nop
 8014c18:	24000054 	.word	0x24000054

08014c1c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014c1c:	b580      	push	{r7, lr}
 8014c1e:	b086      	sub	sp, #24
 8014c20:	af00      	add	r7, sp, #0
 8014c22:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014c24:	2182      	movs	r1, #130	; 0x82
 8014c26:	4818      	ldr	r0, [pc, #96]	; (8014c88 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014c28:	f000 fd17 	bl	801565a <USBD_GetEpDesc>
 8014c2c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014c2e:	2101      	movs	r1, #1
 8014c30:	4815      	ldr	r0, [pc, #84]	; (8014c88 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014c32:	f000 fd12 	bl	801565a <USBD_GetEpDesc>
 8014c36:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014c38:	2181      	movs	r1, #129	; 0x81
 8014c3a:	4813      	ldr	r0, [pc, #76]	; (8014c88 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014c3c:	f000 fd0d 	bl	801565a <USBD_GetEpDesc>
 8014c40:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014c42:	697b      	ldr	r3, [r7, #20]
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d002      	beq.n	8014c4e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8014c48:	697b      	ldr	r3, [r7, #20]
 8014c4a:	2210      	movs	r2, #16
 8014c4c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014c4e:	693b      	ldr	r3, [r7, #16]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d006      	beq.n	8014c62 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014c54:	693b      	ldr	r3, [r7, #16]
 8014c56:	2200      	movs	r2, #0
 8014c58:	711a      	strb	r2, [r3, #4]
 8014c5a:	2200      	movs	r2, #0
 8014c5c:	f042 0202 	orr.w	r2, r2, #2
 8014c60:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d006      	beq.n	8014c76 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	2200      	movs	r2, #0
 8014c6c:	711a      	strb	r2, [r3, #4]
 8014c6e:	2200      	movs	r2, #0
 8014c70:	f042 0202 	orr.w	r2, r2, #2
 8014c74:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	2243      	movs	r2, #67	; 0x43
 8014c7a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014c7c:	4b02      	ldr	r3, [pc, #8]	; (8014c88 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8014c7e:	4618      	mov	r0, r3
 8014c80:	3718      	adds	r7, #24
 8014c82:	46bd      	mov	sp, r7
 8014c84:	bd80      	pop	{r7, pc}
 8014c86:	bf00      	nop
 8014c88:	24000054 	.word	0x24000054

08014c8c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014c8c:	b580      	push	{r7, lr}
 8014c8e:	b086      	sub	sp, #24
 8014c90:	af00      	add	r7, sp, #0
 8014c92:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014c94:	2182      	movs	r1, #130	; 0x82
 8014c96:	4818      	ldr	r0, [pc, #96]	; (8014cf8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014c98:	f000 fcdf 	bl	801565a <USBD_GetEpDesc>
 8014c9c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014c9e:	2101      	movs	r1, #1
 8014ca0:	4815      	ldr	r0, [pc, #84]	; (8014cf8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014ca2:	f000 fcda 	bl	801565a <USBD_GetEpDesc>
 8014ca6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014ca8:	2181      	movs	r1, #129	; 0x81
 8014caa:	4813      	ldr	r0, [pc, #76]	; (8014cf8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014cac:	f000 fcd5 	bl	801565a <USBD_GetEpDesc>
 8014cb0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014cb2:	697b      	ldr	r3, [r7, #20]
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d002      	beq.n	8014cbe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014cb8:	697b      	ldr	r3, [r7, #20]
 8014cba:	2210      	movs	r2, #16
 8014cbc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014cbe:	693b      	ldr	r3, [r7, #16]
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d006      	beq.n	8014cd2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014cc4:	693b      	ldr	r3, [r7, #16]
 8014cc6:	2200      	movs	r2, #0
 8014cc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014ccc:	711a      	strb	r2, [r3, #4]
 8014cce:	2200      	movs	r2, #0
 8014cd0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d006      	beq.n	8014ce6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	2200      	movs	r2, #0
 8014cdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014ce0:	711a      	strb	r2, [r3, #4]
 8014ce2:	2200      	movs	r2, #0
 8014ce4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	2243      	movs	r2, #67	; 0x43
 8014cea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014cec:	4b02      	ldr	r3, [pc, #8]	; (8014cf8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8014cee:	4618      	mov	r0, r3
 8014cf0:	3718      	adds	r7, #24
 8014cf2:	46bd      	mov	sp, r7
 8014cf4:	bd80      	pop	{r7, pc}
 8014cf6:	bf00      	nop
 8014cf8:	24000054 	.word	0x24000054

08014cfc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014cfc:	b480      	push	{r7}
 8014cfe:	b083      	sub	sp, #12
 8014d00:	af00      	add	r7, sp, #0
 8014d02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	220a      	movs	r2, #10
 8014d08:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8014d0a:	4b03      	ldr	r3, [pc, #12]	; (8014d18 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014d0c:	4618      	mov	r0, r3
 8014d0e:	370c      	adds	r7, #12
 8014d10:	46bd      	mov	sp, r7
 8014d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d16:	4770      	bx	lr
 8014d18:	24000010 	.word	0x24000010

08014d1c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8014d1c:	b480      	push	{r7}
 8014d1e:	b083      	sub	sp, #12
 8014d20:	af00      	add	r7, sp, #0
 8014d22:	6078      	str	r0, [r7, #4]
 8014d24:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8014d26:	683b      	ldr	r3, [r7, #0]
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d101      	bne.n	8014d30 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014d2c:	2303      	movs	r3, #3
 8014d2e:	e009      	b.n	8014d44 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014d36:	687a      	ldr	r2, [r7, #4]
 8014d38:	33b0      	adds	r3, #176	; 0xb0
 8014d3a:	009b      	lsls	r3, r3, #2
 8014d3c:	4413      	add	r3, r2
 8014d3e:	683a      	ldr	r2, [r7, #0]
 8014d40:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8014d42:	2300      	movs	r3, #0
}
 8014d44:	4618      	mov	r0, r3
 8014d46:	370c      	adds	r7, #12
 8014d48:	46bd      	mov	sp, r7
 8014d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d4e:	4770      	bx	lr

08014d50 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014d50:	b480      	push	{r7}
 8014d52:	b087      	sub	sp, #28
 8014d54:	af00      	add	r7, sp, #0
 8014d56:	60f8      	str	r0, [r7, #12]
 8014d58:	60b9      	str	r1, [r7, #8]
 8014d5a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014d62:	68fb      	ldr	r3, [r7, #12]
 8014d64:	32b0      	adds	r2, #176	; 0xb0
 8014d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d6a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014d6c:	697b      	ldr	r3, [r7, #20]
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d101      	bne.n	8014d76 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014d72:	2303      	movs	r3, #3
 8014d74:	e008      	b.n	8014d88 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8014d76:	697b      	ldr	r3, [r7, #20]
 8014d78:	68ba      	ldr	r2, [r7, #8]
 8014d7a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8014d7e:	697b      	ldr	r3, [r7, #20]
 8014d80:	687a      	ldr	r2, [r7, #4]
 8014d82:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8014d86:	2300      	movs	r3, #0
}
 8014d88:	4618      	mov	r0, r3
 8014d8a:	371c      	adds	r7, #28
 8014d8c:	46bd      	mov	sp, r7
 8014d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d92:	4770      	bx	lr

08014d94 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014d94:	b480      	push	{r7}
 8014d96:	b085      	sub	sp, #20
 8014d98:	af00      	add	r7, sp, #0
 8014d9a:	6078      	str	r0, [r7, #4]
 8014d9c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	32b0      	adds	r2, #176	; 0xb0
 8014da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014dac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d101      	bne.n	8014db8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8014db4:	2303      	movs	r3, #3
 8014db6:	e004      	b.n	8014dc2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8014db8:	68fb      	ldr	r3, [r7, #12]
 8014dba:	683a      	ldr	r2, [r7, #0]
 8014dbc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8014dc0:	2300      	movs	r3, #0
}
 8014dc2:	4618      	mov	r0, r3
 8014dc4:	3714      	adds	r7, #20
 8014dc6:	46bd      	mov	sp, r7
 8014dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dcc:	4770      	bx	lr
	...

08014dd0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8014dd0:	b580      	push	{r7, lr}
 8014dd2:	b084      	sub	sp, #16
 8014dd4:	af00      	add	r7, sp, #0
 8014dd6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	32b0      	adds	r2, #176	; 0xb0
 8014de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014de6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8014de8:	2301      	movs	r3, #1
 8014dea:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014dec:	68bb      	ldr	r3, [r7, #8]
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d101      	bne.n	8014df6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014df2:	2303      	movs	r3, #3
 8014df4:	e025      	b.n	8014e42 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8014df6:	68bb      	ldr	r3, [r7, #8]
 8014df8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d11f      	bne.n	8014e40 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8014e00:	68bb      	ldr	r3, [r7, #8]
 8014e02:	2201      	movs	r2, #1
 8014e04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8014e08:	4b10      	ldr	r3, [pc, #64]	; (8014e4c <USBD_CDC_TransmitPacket+0x7c>)
 8014e0a:	781b      	ldrb	r3, [r3, #0]
 8014e0c:	f003 020f 	and.w	r2, r3, #15
 8014e10:	68bb      	ldr	r3, [r7, #8]
 8014e12:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8014e16:	6878      	ldr	r0, [r7, #4]
 8014e18:	4613      	mov	r3, r2
 8014e1a:	009b      	lsls	r3, r3, #2
 8014e1c:	4413      	add	r3, r2
 8014e1e:	009b      	lsls	r3, r3, #2
 8014e20:	4403      	add	r3, r0
 8014e22:	3318      	adds	r3, #24
 8014e24:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8014e26:	4b09      	ldr	r3, [pc, #36]	; (8014e4c <USBD_CDC_TransmitPacket+0x7c>)
 8014e28:	7819      	ldrb	r1, [r3, #0]
 8014e2a:	68bb      	ldr	r3, [r7, #8]
 8014e2c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8014e30:	68bb      	ldr	r3, [r7, #8]
 8014e32:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014e36:	6878      	ldr	r0, [r7, #4]
 8014e38:	f002 f825 	bl	8016e86 <USBD_LL_Transmit>

    ret = USBD_OK;
 8014e3c:	2300      	movs	r3, #0
 8014e3e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8014e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e42:	4618      	mov	r0, r3
 8014e44:	3710      	adds	r7, #16
 8014e46:	46bd      	mov	sp, r7
 8014e48:	bd80      	pop	{r7, pc}
 8014e4a:	bf00      	nop
 8014e4c:	24000097 	.word	0x24000097

08014e50 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014e50:	b580      	push	{r7, lr}
 8014e52:	b084      	sub	sp, #16
 8014e54:	af00      	add	r7, sp, #0
 8014e56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	32b0      	adds	r2, #176	; 0xb0
 8014e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e66:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	32b0      	adds	r2, #176	; 0xb0
 8014e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d101      	bne.n	8014e7e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8014e7a:	2303      	movs	r3, #3
 8014e7c:	e018      	b.n	8014eb0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	7c1b      	ldrb	r3, [r3, #16]
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d10a      	bne.n	8014e9c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014e86:	4b0c      	ldr	r3, [pc, #48]	; (8014eb8 <USBD_CDC_ReceivePacket+0x68>)
 8014e88:	7819      	ldrb	r1, [r3, #0]
 8014e8a:	68fb      	ldr	r3, [r7, #12]
 8014e8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014e90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014e94:	6878      	ldr	r0, [r7, #4]
 8014e96:	f002 f817 	bl	8016ec8 <USBD_LL_PrepareReceive>
 8014e9a:	e008      	b.n	8014eae <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014e9c:	4b06      	ldr	r3, [pc, #24]	; (8014eb8 <USBD_CDC_ReceivePacket+0x68>)
 8014e9e:	7819      	ldrb	r1, [r3, #0]
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014ea6:	2340      	movs	r3, #64	; 0x40
 8014ea8:	6878      	ldr	r0, [r7, #4]
 8014eaa:	f002 f80d 	bl	8016ec8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014eae:	2300      	movs	r3, #0
}
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	3710      	adds	r7, #16
 8014eb4:	46bd      	mov	sp, r7
 8014eb6:	bd80      	pop	{r7, pc}
 8014eb8:	24000098 	.word	0x24000098

08014ebc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014ebc:	b580      	push	{r7, lr}
 8014ebe:	b086      	sub	sp, #24
 8014ec0:	af00      	add	r7, sp, #0
 8014ec2:	60f8      	str	r0, [r7, #12]
 8014ec4:	60b9      	str	r1, [r7, #8]
 8014ec6:	4613      	mov	r3, r2
 8014ec8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d101      	bne.n	8014ed4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014ed0:	2303      	movs	r3, #3
 8014ed2:	e01f      	b.n	8014f14 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	2200      	movs	r2, #0
 8014ed8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8014edc:	68fb      	ldr	r3, [r7, #12]
 8014ede:	2200      	movs	r2, #0
 8014ee0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	2200      	movs	r2, #0
 8014ee8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014eec:	68bb      	ldr	r3, [r7, #8]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d003      	beq.n	8014efa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8014ef2:	68fb      	ldr	r3, [r7, #12]
 8014ef4:	68ba      	ldr	r2, [r7, #8]
 8014ef6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014efa:	68fb      	ldr	r3, [r7, #12]
 8014efc:	2201      	movs	r2, #1
 8014efe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	79fa      	ldrb	r2, [r7, #7]
 8014f06:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014f08:	68f8      	ldr	r0, [r7, #12]
 8014f0a:	f001 fe81 	bl	8016c10 <USBD_LL_Init>
 8014f0e:	4603      	mov	r3, r0
 8014f10:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8014f14:	4618      	mov	r0, r3
 8014f16:	3718      	adds	r7, #24
 8014f18:	46bd      	mov	sp, r7
 8014f1a:	bd80      	pop	{r7, pc}

08014f1c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014f1c:	b580      	push	{r7, lr}
 8014f1e:	b084      	sub	sp, #16
 8014f20:	af00      	add	r7, sp, #0
 8014f22:	6078      	str	r0, [r7, #4]
 8014f24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014f26:	2300      	movs	r3, #0
 8014f28:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8014f2a:	683b      	ldr	r3, [r7, #0]
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d101      	bne.n	8014f34 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014f30:	2303      	movs	r3, #3
 8014f32:	e025      	b.n	8014f80 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	683a      	ldr	r2, [r7, #0]
 8014f38:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	32ae      	adds	r2, #174	; 0xae
 8014f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d00f      	beq.n	8014f70 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	32ae      	adds	r2, #174	; 0xae
 8014f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f60:	f107 020e 	add.w	r2, r7, #14
 8014f64:	4610      	mov	r0, r2
 8014f66:	4798      	blx	r3
 8014f68:	4602      	mov	r2, r0
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8014f76:	1c5a      	adds	r2, r3, #1
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8014f7e:	2300      	movs	r3, #0
}
 8014f80:	4618      	mov	r0, r3
 8014f82:	3710      	adds	r7, #16
 8014f84:	46bd      	mov	sp, r7
 8014f86:	bd80      	pop	{r7, pc}

08014f88 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8014f88:	b580      	push	{r7, lr}
 8014f8a:	b082      	sub	sp, #8
 8014f8c:	af00      	add	r7, sp, #0
 8014f8e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8014f90:	6878      	ldr	r0, [r7, #4]
 8014f92:	f001 fe8f 	bl	8016cb4 <USBD_LL_Start>
 8014f96:	4603      	mov	r3, r0
}
 8014f98:	4618      	mov	r0, r3
 8014f9a:	3708      	adds	r7, #8
 8014f9c:	46bd      	mov	sp, r7
 8014f9e:	bd80      	pop	{r7, pc}

08014fa0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8014fa0:	b480      	push	{r7}
 8014fa2:	b083      	sub	sp, #12
 8014fa4:	af00      	add	r7, sp, #0
 8014fa6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014fa8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8014faa:	4618      	mov	r0, r3
 8014fac:	370c      	adds	r7, #12
 8014fae:	46bd      	mov	sp, r7
 8014fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fb4:	4770      	bx	lr

08014fb6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014fb6:	b580      	push	{r7, lr}
 8014fb8:	b084      	sub	sp, #16
 8014fba:	af00      	add	r7, sp, #0
 8014fbc:	6078      	str	r0, [r7, #4]
 8014fbe:	460b      	mov	r3, r1
 8014fc0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014fc2:	2300      	movs	r3, #0
 8014fc4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d009      	beq.n	8014fe4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014fd6:	681b      	ldr	r3, [r3, #0]
 8014fd8:	78fa      	ldrb	r2, [r7, #3]
 8014fda:	4611      	mov	r1, r2
 8014fdc:	6878      	ldr	r0, [r7, #4]
 8014fde:	4798      	blx	r3
 8014fe0:	4603      	mov	r3, r0
 8014fe2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8014fe6:	4618      	mov	r0, r3
 8014fe8:	3710      	adds	r7, #16
 8014fea:	46bd      	mov	sp, r7
 8014fec:	bd80      	pop	{r7, pc}

08014fee <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014fee:	b580      	push	{r7, lr}
 8014ff0:	b084      	sub	sp, #16
 8014ff2:	af00      	add	r7, sp, #0
 8014ff4:	6078      	str	r0, [r7, #4]
 8014ff6:	460b      	mov	r3, r1
 8014ff8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014ffa:	2300      	movs	r3, #0
 8014ffc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015004:	685b      	ldr	r3, [r3, #4]
 8015006:	78fa      	ldrb	r2, [r7, #3]
 8015008:	4611      	mov	r1, r2
 801500a:	6878      	ldr	r0, [r7, #4]
 801500c:	4798      	blx	r3
 801500e:	4603      	mov	r3, r0
 8015010:	2b00      	cmp	r3, #0
 8015012:	d001      	beq.n	8015018 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8015014:	2303      	movs	r3, #3
 8015016:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015018:	7bfb      	ldrb	r3, [r7, #15]
}
 801501a:	4618      	mov	r0, r3
 801501c:	3710      	adds	r7, #16
 801501e:	46bd      	mov	sp, r7
 8015020:	bd80      	pop	{r7, pc}

08015022 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015022:	b580      	push	{r7, lr}
 8015024:	b084      	sub	sp, #16
 8015026:	af00      	add	r7, sp, #0
 8015028:	6078      	str	r0, [r7, #4]
 801502a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015032:	6839      	ldr	r1, [r7, #0]
 8015034:	4618      	mov	r0, r3
 8015036:	f001 f90e 	bl	8016256 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	2201      	movs	r2, #1
 801503e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8015048:	461a      	mov	r2, r3
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015056:	f003 031f 	and.w	r3, r3, #31
 801505a:	2b02      	cmp	r3, #2
 801505c:	d01a      	beq.n	8015094 <USBD_LL_SetupStage+0x72>
 801505e:	2b02      	cmp	r3, #2
 8015060:	d822      	bhi.n	80150a8 <USBD_LL_SetupStage+0x86>
 8015062:	2b00      	cmp	r3, #0
 8015064:	d002      	beq.n	801506c <USBD_LL_SetupStage+0x4a>
 8015066:	2b01      	cmp	r3, #1
 8015068:	d00a      	beq.n	8015080 <USBD_LL_SetupStage+0x5e>
 801506a:	e01d      	b.n	80150a8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015072:	4619      	mov	r1, r3
 8015074:	6878      	ldr	r0, [r7, #4]
 8015076:	f000 fb65 	bl	8015744 <USBD_StdDevReq>
 801507a:	4603      	mov	r3, r0
 801507c:	73fb      	strb	r3, [r7, #15]
      break;
 801507e:	e020      	b.n	80150c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015086:	4619      	mov	r1, r3
 8015088:	6878      	ldr	r0, [r7, #4]
 801508a:	f000 fbcd 	bl	8015828 <USBD_StdItfReq>
 801508e:	4603      	mov	r3, r0
 8015090:	73fb      	strb	r3, [r7, #15]
      break;
 8015092:	e016      	b.n	80150c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801509a:	4619      	mov	r1, r3
 801509c:	6878      	ldr	r0, [r7, #4]
 801509e:	f000 fc2f 	bl	8015900 <USBD_StdEPReq>
 80150a2:	4603      	mov	r3, r0
 80150a4:	73fb      	strb	r3, [r7, #15]
      break;
 80150a6:	e00c      	b.n	80150c2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80150ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80150b2:	b2db      	uxtb	r3, r3
 80150b4:	4619      	mov	r1, r3
 80150b6:	6878      	ldr	r0, [r7, #4]
 80150b8:	f001 fe5c 	bl	8016d74 <USBD_LL_StallEP>
 80150bc:	4603      	mov	r3, r0
 80150be:	73fb      	strb	r3, [r7, #15]
      break;
 80150c0:	bf00      	nop
  }

  return ret;
 80150c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80150c4:	4618      	mov	r0, r3
 80150c6:	3710      	adds	r7, #16
 80150c8:	46bd      	mov	sp, r7
 80150ca:	bd80      	pop	{r7, pc}

080150cc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80150cc:	b580      	push	{r7, lr}
 80150ce:	b086      	sub	sp, #24
 80150d0:	af00      	add	r7, sp, #0
 80150d2:	60f8      	str	r0, [r7, #12]
 80150d4:	460b      	mov	r3, r1
 80150d6:	607a      	str	r2, [r7, #4]
 80150d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80150da:	2300      	movs	r3, #0
 80150dc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80150de:	7afb      	ldrb	r3, [r7, #11]
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d16e      	bne.n	80151c2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80150ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80150ec:	68fb      	ldr	r3, [r7, #12]
 80150ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80150f2:	2b03      	cmp	r3, #3
 80150f4:	f040 8098 	bne.w	8015228 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80150f8:	693b      	ldr	r3, [r7, #16]
 80150fa:	689a      	ldr	r2, [r3, #8]
 80150fc:	693b      	ldr	r3, [r7, #16]
 80150fe:	68db      	ldr	r3, [r3, #12]
 8015100:	429a      	cmp	r2, r3
 8015102:	d913      	bls.n	801512c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8015104:	693b      	ldr	r3, [r7, #16]
 8015106:	689a      	ldr	r2, [r3, #8]
 8015108:	693b      	ldr	r3, [r7, #16]
 801510a:	68db      	ldr	r3, [r3, #12]
 801510c:	1ad2      	subs	r2, r2, r3
 801510e:	693b      	ldr	r3, [r7, #16]
 8015110:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8015112:	693b      	ldr	r3, [r7, #16]
 8015114:	68da      	ldr	r2, [r3, #12]
 8015116:	693b      	ldr	r3, [r7, #16]
 8015118:	689b      	ldr	r3, [r3, #8]
 801511a:	4293      	cmp	r3, r2
 801511c:	bf28      	it	cs
 801511e:	4613      	movcs	r3, r2
 8015120:	461a      	mov	r2, r3
 8015122:	6879      	ldr	r1, [r7, #4]
 8015124:	68f8      	ldr	r0, [r7, #12]
 8015126:	f001 f98a 	bl	801643e <USBD_CtlContinueRx>
 801512a:	e07d      	b.n	8015228 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015132:	f003 031f 	and.w	r3, r3, #31
 8015136:	2b02      	cmp	r3, #2
 8015138:	d014      	beq.n	8015164 <USBD_LL_DataOutStage+0x98>
 801513a:	2b02      	cmp	r3, #2
 801513c:	d81d      	bhi.n	801517a <USBD_LL_DataOutStage+0xae>
 801513e:	2b00      	cmp	r3, #0
 8015140:	d002      	beq.n	8015148 <USBD_LL_DataOutStage+0x7c>
 8015142:	2b01      	cmp	r3, #1
 8015144:	d003      	beq.n	801514e <USBD_LL_DataOutStage+0x82>
 8015146:	e018      	b.n	801517a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8015148:	2300      	movs	r3, #0
 801514a:	75bb      	strb	r3, [r7, #22]
            break;
 801514c:	e018      	b.n	8015180 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801514e:	68fb      	ldr	r3, [r7, #12]
 8015150:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015154:	b2db      	uxtb	r3, r3
 8015156:	4619      	mov	r1, r3
 8015158:	68f8      	ldr	r0, [r7, #12]
 801515a:	f000 fa64 	bl	8015626 <USBD_CoreFindIF>
 801515e:	4603      	mov	r3, r0
 8015160:	75bb      	strb	r3, [r7, #22]
            break;
 8015162:	e00d      	b.n	8015180 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801516a:	b2db      	uxtb	r3, r3
 801516c:	4619      	mov	r1, r3
 801516e:	68f8      	ldr	r0, [r7, #12]
 8015170:	f000 fa66 	bl	8015640 <USBD_CoreFindEP>
 8015174:	4603      	mov	r3, r0
 8015176:	75bb      	strb	r3, [r7, #22]
            break;
 8015178:	e002      	b.n	8015180 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801517a:	2300      	movs	r3, #0
 801517c:	75bb      	strb	r3, [r7, #22]
            break;
 801517e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8015180:	7dbb      	ldrb	r3, [r7, #22]
 8015182:	2b00      	cmp	r3, #0
 8015184:	d119      	bne.n	80151ba <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015186:	68fb      	ldr	r3, [r7, #12]
 8015188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801518c:	b2db      	uxtb	r3, r3
 801518e:	2b03      	cmp	r3, #3
 8015190:	d113      	bne.n	80151ba <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8015192:	7dba      	ldrb	r2, [r7, #22]
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	32ae      	adds	r2, #174	; 0xae
 8015198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801519c:	691b      	ldr	r3, [r3, #16]
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d00b      	beq.n	80151ba <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80151a2:	7dba      	ldrb	r2, [r7, #22]
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80151aa:	7dba      	ldrb	r2, [r7, #22]
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	32ae      	adds	r2, #174	; 0xae
 80151b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151b4:	691b      	ldr	r3, [r3, #16]
 80151b6:	68f8      	ldr	r0, [r7, #12]
 80151b8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80151ba:	68f8      	ldr	r0, [r7, #12]
 80151bc:	f001 f950 	bl	8016460 <USBD_CtlSendStatus>
 80151c0:	e032      	b.n	8015228 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80151c2:	7afb      	ldrb	r3, [r7, #11]
 80151c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80151c8:	b2db      	uxtb	r3, r3
 80151ca:	4619      	mov	r1, r3
 80151cc:	68f8      	ldr	r0, [r7, #12]
 80151ce:	f000 fa37 	bl	8015640 <USBD_CoreFindEP>
 80151d2:	4603      	mov	r3, r0
 80151d4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80151d6:	7dbb      	ldrb	r3, [r7, #22]
 80151d8:	2bff      	cmp	r3, #255	; 0xff
 80151da:	d025      	beq.n	8015228 <USBD_LL_DataOutStage+0x15c>
 80151dc:	7dbb      	ldrb	r3, [r7, #22]
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d122      	bne.n	8015228 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80151e2:	68fb      	ldr	r3, [r7, #12]
 80151e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80151e8:	b2db      	uxtb	r3, r3
 80151ea:	2b03      	cmp	r3, #3
 80151ec:	d117      	bne.n	801521e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80151ee:	7dba      	ldrb	r2, [r7, #22]
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	32ae      	adds	r2, #174	; 0xae
 80151f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151f8:	699b      	ldr	r3, [r3, #24]
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d00f      	beq.n	801521e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80151fe:	7dba      	ldrb	r2, [r7, #22]
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8015206:	7dba      	ldrb	r2, [r7, #22]
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	32ae      	adds	r2, #174	; 0xae
 801520c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015210:	699b      	ldr	r3, [r3, #24]
 8015212:	7afa      	ldrb	r2, [r7, #11]
 8015214:	4611      	mov	r1, r2
 8015216:	68f8      	ldr	r0, [r7, #12]
 8015218:	4798      	blx	r3
 801521a:	4603      	mov	r3, r0
 801521c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801521e:	7dfb      	ldrb	r3, [r7, #23]
 8015220:	2b00      	cmp	r3, #0
 8015222:	d001      	beq.n	8015228 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8015224:	7dfb      	ldrb	r3, [r7, #23]
 8015226:	e000      	b.n	801522a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8015228:	2300      	movs	r3, #0
}
 801522a:	4618      	mov	r0, r3
 801522c:	3718      	adds	r7, #24
 801522e:	46bd      	mov	sp, r7
 8015230:	bd80      	pop	{r7, pc}

08015232 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8015232:	b580      	push	{r7, lr}
 8015234:	b086      	sub	sp, #24
 8015236:	af00      	add	r7, sp, #0
 8015238:	60f8      	str	r0, [r7, #12]
 801523a:	460b      	mov	r3, r1
 801523c:	607a      	str	r2, [r7, #4]
 801523e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8015240:	7afb      	ldrb	r3, [r7, #11]
 8015242:	2b00      	cmp	r3, #0
 8015244:	d16f      	bne.n	8015326 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	3314      	adds	r3, #20
 801524a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015252:	2b02      	cmp	r3, #2
 8015254:	d15a      	bne.n	801530c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8015256:	693b      	ldr	r3, [r7, #16]
 8015258:	689a      	ldr	r2, [r3, #8]
 801525a:	693b      	ldr	r3, [r7, #16]
 801525c:	68db      	ldr	r3, [r3, #12]
 801525e:	429a      	cmp	r2, r3
 8015260:	d914      	bls.n	801528c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015262:	693b      	ldr	r3, [r7, #16]
 8015264:	689a      	ldr	r2, [r3, #8]
 8015266:	693b      	ldr	r3, [r7, #16]
 8015268:	68db      	ldr	r3, [r3, #12]
 801526a:	1ad2      	subs	r2, r2, r3
 801526c:	693b      	ldr	r3, [r7, #16]
 801526e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015270:	693b      	ldr	r3, [r7, #16]
 8015272:	689b      	ldr	r3, [r3, #8]
 8015274:	461a      	mov	r2, r3
 8015276:	6879      	ldr	r1, [r7, #4]
 8015278:	68f8      	ldr	r0, [r7, #12]
 801527a:	f001 f8b2 	bl	80163e2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801527e:	2300      	movs	r3, #0
 8015280:	2200      	movs	r2, #0
 8015282:	2100      	movs	r1, #0
 8015284:	68f8      	ldr	r0, [r7, #12]
 8015286:	f001 fe1f 	bl	8016ec8 <USBD_LL_PrepareReceive>
 801528a:	e03f      	b.n	801530c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801528c:	693b      	ldr	r3, [r7, #16]
 801528e:	68da      	ldr	r2, [r3, #12]
 8015290:	693b      	ldr	r3, [r7, #16]
 8015292:	689b      	ldr	r3, [r3, #8]
 8015294:	429a      	cmp	r2, r3
 8015296:	d11c      	bne.n	80152d2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8015298:	693b      	ldr	r3, [r7, #16]
 801529a:	685a      	ldr	r2, [r3, #4]
 801529c:	693b      	ldr	r3, [r7, #16]
 801529e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80152a0:	429a      	cmp	r2, r3
 80152a2:	d316      	bcc.n	80152d2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80152a4:	693b      	ldr	r3, [r7, #16]
 80152a6:	685a      	ldr	r2, [r3, #4]
 80152a8:	68fb      	ldr	r3, [r7, #12]
 80152aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80152ae:	429a      	cmp	r2, r3
 80152b0:	d20f      	bcs.n	80152d2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80152b2:	2200      	movs	r2, #0
 80152b4:	2100      	movs	r1, #0
 80152b6:	68f8      	ldr	r0, [r7, #12]
 80152b8:	f001 f893 	bl	80163e2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	2200      	movs	r2, #0
 80152c0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80152c4:	2300      	movs	r3, #0
 80152c6:	2200      	movs	r2, #0
 80152c8:	2100      	movs	r1, #0
 80152ca:	68f8      	ldr	r0, [r7, #12]
 80152cc:	f001 fdfc 	bl	8016ec8 <USBD_LL_PrepareReceive>
 80152d0:	e01c      	b.n	801530c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80152d2:	68fb      	ldr	r3, [r7, #12]
 80152d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80152d8:	b2db      	uxtb	r3, r3
 80152da:	2b03      	cmp	r3, #3
 80152dc:	d10f      	bne.n	80152fe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80152e4:	68db      	ldr	r3, [r3, #12]
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d009      	beq.n	80152fe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80152ea:	68fb      	ldr	r3, [r7, #12]
 80152ec:	2200      	movs	r2, #0
 80152ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80152f8:	68db      	ldr	r3, [r3, #12]
 80152fa:	68f8      	ldr	r0, [r7, #12]
 80152fc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80152fe:	2180      	movs	r1, #128	; 0x80
 8015300:	68f8      	ldr	r0, [r7, #12]
 8015302:	f001 fd37 	bl	8016d74 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015306:	68f8      	ldr	r0, [r7, #12]
 8015308:	f001 f8bd 	bl	8016486 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8015312:	2b00      	cmp	r3, #0
 8015314:	d03a      	beq.n	801538c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8015316:	68f8      	ldr	r0, [r7, #12]
 8015318:	f7ff fe42 	bl	8014fa0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	2200      	movs	r2, #0
 8015320:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8015324:	e032      	b.n	801538c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8015326:	7afb      	ldrb	r3, [r7, #11]
 8015328:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801532c:	b2db      	uxtb	r3, r3
 801532e:	4619      	mov	r1, r3
 8015330:	68f8      	ldr	r0, [r7, #12]
 8015332:	f000 f985 	bl	8015640 <USBD_CoreFindEP>
 8015336:	4603      	mov	r3, r0
 8015338:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801533a:	7dfb      	ldrb	r3, [r7, #23]
 801533c:	2bff      	cmp	r3, #255	; 0xff
 801533e:	d025      	beq.n	801538c <USBD_LL_DataInStage+0x15a>
 8015340:	7dfb      	ldrb	r3, [r7, #23]
 8015342:	2b00      	cmp	r3, #0
 8015344:	d122      	bne.n	801538c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801534c:	b2db      	uxtb	r3, r3
 801534e:	2b03      	cmp	r3, #3
 8015350:	d11c      	bne.n	801538c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8015352:	7dfa      	ldrb	r2, [r7, #23]
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	32ae      	adds	r2, #174	; 0xae
 8015358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801535c:	695b      	ldr	r3, [r3, #20]
 801535e:	2b00      	cmp	r3, #0
 8015360:	d014      	beq.n	801538c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8015362:	7dfa      	ldrb	r2, [r7, #23]
 8015364:	68fb      	ldr	r3, [r7, #12]
 8015366:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801536a:	7dfa      	ldrb	r2, [r7, #23]
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	32ae      	adds	r2, #174	; 0xae
 8015370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015374:	695b      	ldr	r3, [r3, #20]
 8015376:	7afa      	ldrb	r2, [r7, #11]
 8015378:	4611      	mov	r1, r2
 801537a:	68f8      	ldr	r0, [r7, #12]
 801537c:	4798      	blx	r3
 801537e:	4603      	mov	r3, r0
 8015380:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8015382:	7dbb      	ldrb	r3, [r7, #22]
 8015384:	2b00      	cmp	r3, #0
 8015386:	d001      	beq.n	801538c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8015388:	7dbb      	ldrb	r3, [r7, #22]
 801538a:	e000      	b.n	801538e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 801538c:	2300      	movs	r3, #0
}
 801538e:	4618      	mov	r0, r3
 8015390:	3718      	adds	r7, #24
 8015392:	46bd      	mov	sp, r7
 8015394:	bd80      	pop	{r7, pc}

08015396 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015396:	b580      	push	{r7, lr}
 8015398:	b084      	sub	sp, #16
 801539a:	af00      	add	r7, sp, #0
 801539c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801539e:	2300      	movs	r3, #0
 80153a0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	2201      	movs	r2, #1
 80153a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	2200      	movs	r2, #0
 80153ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	2200      	movs	r2, #0
 80153b6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	2200      	movs	r2, #0
 80153bc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	2200      	movs	r2, #0
 80153c4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d014      	beq.n	80153fc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80153d8:	685b      	ldr	r3, [r3, #4]
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d00e      	beq.n	80153fc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80153e4:	685b      	ldr	r3, [r3, #4]
 80153e6:	687a      	ldr	r2, [r7, #4]
 80153e8:	6852      	ldr	r2, [r2, #4]
 80153ea:	b2d2      	uxtb	r2, r2
 80153ec:	4611      	mov	r1, r2
 80153ee:	6878      	ldr	r0, [r7, #4]
 80153f0:	4798      	blx	r3
 80153f2:	4603      	mov	r3, r0
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d001      	beq.n	80153fc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80153f8:	2303      	movs	r3, #3
 80153fa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80153fc:	2340      	movs	r3, #64	; 0x40
 80153fe:	2200      	movs	r2, #0
 8015400:	2100      	movs	r1, #0
 8015402:	6878      	ldr	r0, [r7, #4]
 8015404:	f001 fc71 	bl	8016cea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	2201      	movs	r2, #1
 801540c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	2240      	movs	r2, #64	; 0x40
 8015414:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015418:	2340      	movs	r3, #64	; 0x40
 801541a:	2200      	movs	r2, #0
 801541c:	2180      	movs	r1, #128	; 0x80
 801541e:	6878      	ldr	r0, [r7, #4]
 8015420:	f001 fc63 	bl	8016cea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	2201      	movs	r2, #1
 8015428:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	2240      	movs	r2, #64	; 0x40
 801542e:	621a      	str	r2, [r3, #32]

  return ret;
 8015430:	7bfb      	ldrb	r3, [r7, #15]
}
 8015432:	4618      	mov	r0, r3
 8015434:	3710      	adds	r7, #16
 8015436:	46bd      	mov	sp, r7
 8015438:	bd80      	pop	{r7, pc}

0801543a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801543a:	b480      	push	{r7}
 801543c:	b083      	sub	sp, #12
 801543e:	af00      	add	r7, sp, #0
 8015440:	6078      	str	r0, [r7, #4]
 8015442:	460b      	mov	r3, r1
 8015444:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	78fa      	ldrb	r2, [r7, #3]
 801544a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801544c:	2300      	movs	r3, #0
}
 801544e:	4618      	mov	r0, r3
 8015450:	370c      	adds	r7, #12
 8015452:	46bd      	mov	sp, r7
 8015454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015458:	4770      	bx	lr

0801545a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801545a:	b480      	push	{r7}
 801545c:	b083      	sub	sp, #12
 801545e:	af00      	add	r7, sp, #0
 8015460:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015468:	b2db      	uxtb	r3, r3
 801546a:	2b04      	cmp	r3, #4
 801546c:	d006      	beq.n	801547c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015474:	b2da      	uxtb	r2, r3
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	2204      	movs	r2, #4
 8015480:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015484:	2300      	movs	r3, #0
}
 8015486:	4618      	mov	r0, r3
 8015488:	370c      	adds	r7, #12
 801548a:	46bd      	mov	sp, r7
 801548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015490:	4770      	bx	lr

08015492 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015492:	b480      	push	{r7}
 8015494:	b083      	sub	sp, #12
 8015496:	af00      	add	r7, sp, #0
 8015498:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80154a0:	b2db      	uxtb	r3, r3
 80154a2:	2b04      	cmp	r3, #4
 80154a4:	d106      	bne.n	80154b4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80154ac:	b2da      	uxtb	r2, r3
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80154b4:	2300      	movs	r3, #0
}
 80154b6:	4618      	mov	r0, r3
 80154b8:	370c      	adds	r7, #12
 80154ba:	46bd      	mov	sp, r7
 80154bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154c0:	4770      	bx	lr

080154c2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80154c2:	b580      	push	{r7, lr}
 80154c4:	b082      	sub	sp, #8
 80154c6:	af00      	add	r7, sp, #0
 80154c8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80154d0:	b2db      	uxtb	r3, r3
 80154d2:	2b03      	cmp	r3, #3
 80154d4:	d110      	bne.n	80154f8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d00b      	beq.n	80154f8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154e6:	69db      	ldr	r3, [r3, #28]
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d005      	beq.n	80154f8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154f2:	69db      	ldr	r3, [r3, #28]
 80154f4:	6878      	ldr	r0, [r7, #4]
 80154f6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80154f8:	2300      	movs	r3, #0
}
 80154fa:	4618      	mov	r0, r3
 80154fc:	3708      	adds	r7, #8
 80154fe:	46bd      	mov	sp, r7
 8015500:	bd80      	pop	{r7, pc}

08015502 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8015502:	b580      	push	{r7, lr}
 8015504:	b082      	sub	sp, #8
 8015506:	af00      	add	r7, sp, #0
 8015508:	6078      	str	r0, [r7, #4]
 801550a:	460b      	mov	r3, r1
 801550c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	32ae      	adds	r2, #174	; 0xae
 8015518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801551c:	2b00      	cmp	r3, #0
 801551e:	d101      	bne.n	8015524 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8015520:	2303      	movs	r3, #3
 8015522:	e01c      	b.n	801555e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801552a:	b2db      	uxtb	r3, r3
 801552c:	2b03      	cmp	r3, #3
 801552e:	d115      	bne.n	801555c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	32ae      	adds	r2, #174	; 0xae
 801553a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801553e:	6a1b      	ldr	r3, [r3, #32]
 8015540:	2b00      	cmp	r3, #0
 8015542:	d00b      	beq.n	801555c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	32ae      	adds	r2, #174	; 0xae
 801554e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015552:	6a1b      	ldr	r3, [r3, #32]
 8015554:	78fa      	ldrb	r2, [r7, #3]
 8015556:	4611      	mov	r1, r2
 8015558:	6878      	ldr	r0, [r7, #4]
 801555a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801555c:	2300      	movs	r3, #0
}
 801555e:	4618      	mov	r0, r3
 8015560:	3708      	adds	r7, #8
 8015562:	46bd      	mov	sp, r7
 8015564:	bd80      	pop	{r7, pc}

08015566 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015566:	b580      	push	{r7, lr}
 8015568:	b082      	sub	sp, #8
 801556a:	af00      	add	r7, sp, #0
 801556c:	6078      	str	r0, [r7, #4]
 801556e:	460b      	mov	r3, r1
 8015570:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	32ae      	adds	r2, #174	; 0xae
 801557c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015580:	2b00      	cmp	r3, #0
 8015582:	d101      	bne.n	8015588 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8015584:	2303      	movs	r3, #3
 8015586:	e01c      	b.n	80155c2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801558e:	b2db      	uxtb	r3, r3
 8015590:	2b03      	cmp	r3, #3
 8015592:	d115      	bne.n	80155c0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	32ae      	adds	r2, #174	; 0xae
 801559e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d00b      	beq.n	80155c0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	32ae      	adds	r2, #174	; 0xae
 80155b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155b8:	78fa      	ldrb	r2, [r7, #3]
 80155ba:	4611      	mov	r1, r2
 80155bc:	6878      	ldr	r0, [r7, #4]
 80155be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80155c0:	2300      	movs	r3, #0
}
 80155c2:	4618      	mov	r0, r3
 80155c4:	3708      	adds	r7, #8
 80155c6:	46bd      	mov	sp, r7
 80155c8:	bd80      	pop	{r7, pc}

080155ca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80155ca:	b480      	push	{r7}
 80155cc:	b083      	sub	sp, #12
 80155ce:	af00      	add	r7, sp, #0
 80155d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80155d2:	2300      	movs	r3, #0
}
 80155d4:	4618      	mov	r0, r3
 80155d6:	370c      	adds	r7, #12
 80155d8:	46bd      	mov	sp, r7
 80155da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155de:	4770      	bx	lr

080155e0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80155e0:	b580      	push	{r7, lr}
 80155e2:	b084      	sub	sp, #16
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80155e8:	2300      	movs	r3, #0
 80155ea:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	2201      	movs	r2, #1
 80155f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d00e      	beq.n	801561c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015604:	685b      	ldr	r3, [r3, #4]
 8015606:	687a      	ldr	r2, [r7, #4]
 8015608:	6852      	ldr	r2, [r2, #4]
 801560a:	b2d2      	uxtb	r2, r2
 801560c:	4611      	mov	r1, r2
 801560e:	6878      	ldr	r0, [r7, #4]
 8015610:	4798      	blx	r3
 8015612:	4603      	mov	r3, r0
 8015614:	2b00      	cmp	r3, #0
 8015616:	d001      	beq.n	801561c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8015618:	2303      	movs	r3, #3
 801561a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801561c:	7bfb      	ldrb	r3, [r7, #15]
}
 801561e:	4618      	mov	r0, r3
 8015620:	3710      	adds	r7, #16
 8015622:	46bd      	mov	sp, r7
 8015624:	bd80      	pop	{r7, pc}

08015626 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015626:	b480      	push	{r7}
 8015628:	b083      	sub	sp, #12
 801562a:	af00      	add	r7, sp, #0
 801562c:	6078      	str	r0, [r7, #4]
 801562e:	460b      	mov	r3, r1
 8015630:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015632:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015634:	4618      	mov	r0, r3
 8015636:	370c      	adds	r7, #12
 8015638:	46bd      	mov	sp, r7
 801563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801563e:	4770      	bx	lr

08015640 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015640:	b480      	push	{r7}
 8015642:	b083      	sub	sp, #12
 8015644:	af00      	add	r7, sp, #0
 8015646:	6078      	str	r0, [r7, #4]
 8015648:	460b      	mov	r3, r1
 801564a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801564c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801564e:	4618      	mov	r0, r3
 8015650:	370c      	adds	r7, #12
 8015652:	46bd      	mov	sp, r7
 8015654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015658:	4770      	bx	lr

0801565a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801565a:	b580      	push	{r7, lr}
 801565c:	b086      	sub	sp, #24
 801565e:	af00      	add	r7, sp, #0
 8015660:	6078      	str	r0, [r7, #4]
 8015662:	460b      	mov	r3, r1
 8015664:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801566e:	2300      	movs	r3, #0
 8015670:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8015672:	68fb      	ldr	r3, [r7, #12]
 8015674:	885b      	ldrh	r3, [r3, #2]
 8015676:	b29a      	uxth	r2, r3
 8015678:	68fb      	ldr	r3, [r7, #12]
 801567a:	781b      	ldrb	r3, [r3, #0]
 801567c:	b29b      	uxth	r3, r3
 801567e:	429a      	cmp	r2, r3
 8015680:	d920      	bls.n	80156c4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8015682:	68fb      	ldr	r3, [r7, #12]
 8015684:	781b      	ldrb	r3, [r3, #0]
 8015686:	b29b      	uxth	r3, r3
 8015688:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801568a:	e013      	b.n	80156b4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801568c:	f107 030a 	add.w	r3, r7, #10
 8015690:	4619      	mov	r1, r3
 8015692:	6978      	ldr	r0, [r7, #20]
 8015694:	f000 f81b 	bl	80156ce <USBD_GetNextDesc>
 8015698:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801569a:	697b      	ldr	r3, [r7, #20]
 801569c:	785b      	ldrb	r3, [r3, #1]
 801569e:	2b05      	cmp	r3, #5
 80156a0:	d108      	bne.n	80156b4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80156a2:	697b      	ldr	r3, [r7, #20]
 80156a4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80156a6:	693b      	ldr	r3, [r7, #16]
 80156a8:	789b      	ldrb	r3, [r3, #2]
 80156aa:	78fa      	ldrb	r2, [r7, #3]
 80156ac:	429a      	cmp	r2, r3
 80156ae:	d008      	beq.n	80156c2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80156b0:	2300      	movs	r3, #0
 80156b2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	885b      	ldrh	r3, [r3, #2]
 80156b8:	b29a      	uxth	r2, r3
 80156ba:	897b      	ldrh	r3, [r7, #10]
 80156bc:	429a      	cmp	r2, r3
 80156be:	d8e5      	bhi.n	801568c <USBD_GetEpDesc+0x32>
 80156c0:	e000      	b.n	80156c4 <USBD_GetEpDesc+0x6a>
          break;
 80156c2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80156c4:	693b      	ldr	r3, [r7, #16]
}
 80156c6:	4618      	mov	r0, r3
 80156c8:	3718      	adds	r7, #24
 80156ca:	46bd      	mov	sp, r7
 80156cc:	bd80      	pop	{r7, pc}

080156ce <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80156ce:	b480      	push	{r7}
 80156d0:	b085      	sub	sp, #20
 80156d2:	af00      	add	r7, sp, #0
 80156d4:	6078      	str	r0, [r7, #4]
 80156d6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80156dc:	683b      	ldr	r3, [r7, #0]
 80156de:	881a      	ldrh	r2, [r3, #0]
 80156e0:	68fb      	ldr	r3, [r7, #12]
 80156e2:	781b      	ldrb	r3, [r3, #0]
 80156e4:	b29b      	uxth	r3, r3
 80156e6:	4413      	add	r3, r2
 80156e8:	b29a      	uxth	r2, r3
 80156ea:	683b      	ldr	r3, [r7, #0]
 80156ec:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	781b      	ldrb	r3, [r3, #0]
 80156f2:	461a      	mov	r2, r3
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	4413      	add	r3, r2
 80156f8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80156fa:	68fb      	ldr	r3, [r7, #12]
}
 80156fc:	4618      	mov	r0, r3
 80156fe:	3714      	adds	r7, #20
 8015700:	46bd      	mov	sp, r7
 8015702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015706:	4770      	bx	lr

08015708 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015708:	b480      	push	{r7}
 801570a:	b087      	sub	sp, #28
 801570c:	af00      	add	r7, sp, #0
 801570e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015714:	697b      	ldr	r3, [r7, #20]
 8015716:	781b      	ldrb	r3, [r3, #0]
 8015718:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801571a:	697b      	ldr	r3, [r7, #20]
 801571c:	3301      	adds	r3, #1
 801571e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015720:	697b      	ldr	r3, [r7, #20]
 8015722:	781b      	ldrb	r3, [r3, #0]
 8015724:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015726:	8a3b      	ldrh	r3, [r7, #16]
 8015728:	021b      	lsls	r3, r3, #8
 801572a:	b21a      	sxth	r2, r3
 801572c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015730:	4313      	orrs	r3, r2
 8015732:	b21b      	sxth	r3, r3
 8015734:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015736:	89fb      	ldrh	r3, [r7, #14]
}
 8015738:	4618      	mov	r0, r3
 801573a:	371c      	adds	r7, #28
 801573c:	46bd      	mov	sp, r7
 801573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015742:	4770      	bx	lr

08015744 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015744:	b580      	push	{r7, lr}
 8015746:	b084      	sub	sp, #16
 8015748:	af00      	add	r7, sp, #0
 801574a:	6078      	str	r0, [r7, #4]
 801574c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801574e:	2300      	movs	r3, #0
 8015750:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015752:	683b      	ldr	r3, [r7, #0]
 8015754:	781b      	ldrb	r3, [r3, #0]
 8015756:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801575a:	2b40      	cmp	r3, #64	; 0x40
 801575c:	d005      	beq.n	801576a <USBD_StdDevReq+0x26>
 801575e:	2b40      	cmp	r3, #64	; 0x40
 8015760:	d857      	bhi.n	8015812 <USBD_StdDevReq+0xce>
 8015762:	2b00      	cmp	r3, #0
 8015764:	d00f      	beq.n	8015786 <USBD_StdDevReq+0x42>
 8015766:	2b20      	cmp	r3, #32
 8015768:	d153      	bne.n	8015812 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	32ae      	adds	r2, #174	; 0xae
 8015774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015778:	689b      	ldr	r3, [r3, #8]
 801577a:	6839      	ldr	r1, [r7, #0]
 801577c:	6878      	ldr	r0, [r7, #4]
 801577e:	4798      	blx	r3
 8015780:	4603      	mov	r3, r0
 8015782:	73fb      	strb	r3, [r7, #15]
      break;
 8015784:	e04a      	b.n	801581c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015786:	683b      	ldr	r3, [r7, #0]
 8015788:	785b      	ldrb	r3, [r3, #1]
 801578a:	2b09      	cmp	r3, #9
 801578c:	d83b      	bhi.n	8015806 <USBD_StdDevReq+0xc2>
 801578e:	a201      	add	r2, pc, #4	; (adr r2, 8015794 <USBD_StdDevReq+0x50>)
 8015790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015794:	080157e9 	.word	0x080157e9
 8015798:	080157fd 	.word	0x080157fd
 801579c:	08015807 	.word	0x08015807
 80157a0:	080157f3 	.word	0x080157f3
 80157a4:	08015807 	.word	0x08015807
 80157a8:	080157c7 	.word	0x080157c7
 80157ac:	080157bd 	.word	0x080157bd
 80157b0:	08015807 	.word	0x08015807
 80157b4:	080157df 	.word	0x080157df
 80157b8:	080157d1 	.word	0x080157d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80157bc:	6839      	ldr	r1, [r7, #0]
 80157be:	6878      	ldr	r0, [r7, #4]
 80157c0:	f000 fa3c 	bl	8015c3c <USBD_GetDescriptor>
          break;
 80157c4:	e024      	b.n	8015810 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80157c6:	6839      	ldr	r1, [r7, #0]
 80157c8:	6878      	ldr	r0, [r7, #4]
 80157ca:	f000 fba1 	bl	8015f10 <USBD_SetAddress>
          break;
 80157ce:	e01f      	b.n	8015810 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80157d0:	6839      	ldr	r1, [r7, #0]
 80157d2:	6878      	ldr	r0, [r7, #4]
 80157d4:	f000 fbe0 	bl	8015f98 <USBD_SetConfig>
 80157d8:	4603      	mov	r3, r0
 80157da:	73fb      	strb	r3, [r7, #15]
          break;
 80157dc:	e018      	b.n	8015810 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80157de:	6839      	ldr	r1, [r7, #0]
 80157e0:	6878      	ldr	r0, [r7, #4]
 80157e2:	f000 fc83 	bl	80160ec <USBD_GetConfig>
          break;
 80157e6:	e013      	b.n	8015810 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80157e8:	6839      	ldr	r1, [r7, #0]
 80157ea:	6878      	ldr	r0, [r7, #4]
 80157ec:	f000 fcb4 	bl	8016158 <USBD_GetStatus>
          break;
 80157f0:	e00e      	b.n	8015810 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80157f2:	6839      	ldr	r1, [r7, #0]
 80157f4:	6878      	ldr	r0, [r7, #4]
 80157f6:	f000 fce3 	bl	80161c0 <USBD_SetFeature>
          break;
 80157fa:	e009      	b.n	8015810 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80157fc:	6839      	ldr	r1, [r7, #0]
 80157fe:	6878      	ldr	r0, [r7, #4]
 8015800:	f000 fd07 	bl	8016212 <USBD_ClrFeature>
          break;
 8015804:	e004      	b.n	8015810 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8015806:	6839      	ldr	r1, [r7, #0]
 8015808:	6878      	ldr	r0, [r7, #4]
 801580a:	f000 fd5e 	bl	80162ca <USBD_CtlError>
          break;
 801580e:	bf00      	nop
      }
      break;
 8015810:	e004      	b.n	801581c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8015812:	6839      	ldr	r1, [r7, #0]
 8015814:	6878      	ldr	r0, [r7, #4]
 8015816:	f000 fd58 	bl	80162ca <USBD_CtlError>
      break;
 801581a:	bf00      	nop
  }

  return ret;
 801581c:	7bfb      	ldrb	r3, [r7, #15]
}
 801581e:	4618      	mov	r0, r3
 8015820:	3710      	adds	r7, #16
 8015822:	46bd      	mov	sp, r7
 8015824:	bd80      	pop	{r7, pc}
 8015826:	bf00      	nop

08015828 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015828:	b580      	push	{r7, lr}
 801582a:	b084      	sub	sp, #16
 801582c:	af00      	add	r7, sp, #0
 801582e:	6078      	str	r0, [r7, #4]
 8015830:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015832:	2300      	movs	r3, #0
 8015834:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015836:	683b      	ldr	r3, [r7, #0]
 8015838:	781b      	ldrb	r3, [r3, #0]
 801583a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801583e:	2b40      	cmp	r3, #64	; 0x40
 8015840:	d005      	beq.n	801584e <USBD_StdItfReq+0x26>
 8015842:	2b40      	cmp	r3, #64	; 0x40
 8015844:	d852      	bhi.n	80158ec <USBD_StdItfReq+0xc4>
 8015846:	2b00      	cmp	r3, #0
 8015848:	d001      	beq.n	801584e <USBD_StdItfReq+0x26>
 801584a:	2b20      	cmp	r3, #32
 801584c:	d14e      	bne.n	80158ec <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015854:	b2db      	uxtb	r3, r3
 8015856:	3b01      	subs	r3, #1
 8015858:	2b02      	cmp	r3, #2
 801585a:	d840      	bhi.n	80158de <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801585c:	683b      	ldr	r3, [r7, #0]
 801585e:	889b      	ldrh	r3, [r3, #4]
 8015860:	b2db      	uxtb	r3, r3
 8015862:	2b01      	cmp	r3, #1
 8015864:	d836      	bhi.n	80158d4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8015866:	683b      	ldr	r3, [r7, #0]
 8015868:	889b      	ldrh	r3, [r3, #4]
 801586a:	b2db      	uxtb	r3, r3
 801586c:	4619      	mov	r1, r3
 801586e:	6878      	ldr	r0, [r7, #4]
 8015870:	f7ff fed9 	bl	8015626 <USBD_CoreFindIF>
 8015874:	4603      	mov	r3, r0
 8015876:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015878:	7bbb      	ldrb	r3, [r7, #14]
 801587a:	2bff      	cmp	r3, #255	; 0xff
 801587c:	d01d      	beq.n	80158ba <USBD_StdItfReq+0x92>
 801587e:	7bbb      	ldrb	r3, [r7, #14]
 8015880:	2b00      	cmp	r3, #0
 8015882:	d11a      	bne.n	80158ba <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8015884:	7bba      	ldrb	r2, [r7, #14]
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	32ae      	adds	r2, #174	; 0xae
 801588a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801588e:	689b      	ldr	r3, [r3, #8]
 8015890:	2b00      	cmp	r3, #0
 8015892:	d00f      	beq.n	80158b4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8015894:	7bba      	ldrb	r2, [r7, #14]
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801589c:	7bba      	ldrb	r2, [r7, #14]
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	32ae      	adds	r2, #174	; 0xae
 80158a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158a6:	689b      	ldr	r3, [r3, #8]
 80158a8:	6839      	ldr	r1, [r7, #0]
 80158aa:	6878      	ldr	r0, [r7, #4]
 80158ac:	4798      	blx	r3
 80158ae:	4603      	mov	r3, r0
 80158b0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80158b2:	e004      	b.n	80158be <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80158b4:	2303      	movs	r3, #3
 80158b6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80158b8:	e001      	b.n	80158be <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80158ba:	2303      	movs	r3, #3
 80158bc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80158be:	683b      	ldr	r3, [r7, #0]
 80158c0:	88db      	ldrh	r3, [r3, #6]
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	d110      	bne.n	80158e8 <USBD_StdItfReq+0xc0>
 80158c6:	7bfb      	ldrb	r3, [r7, #15]
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d10d      	bne.n	80158e8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80158cc:	6878      	ldr	r0, [r7, #4]
 80158ce:	f000 fdc7 	bl	8016460 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80158d2:	e009      	b.n	80158e8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80158d4:	6839      	ldr	r1, [r7, #0]
 80158d6:	6878      	ldr	r0, [r7, #4]
 80158d8:	f000 fcf7 	bl	80162ca <USBD_CtlError>
          break;
 80158dc:	e004      	b.n	80158e8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80158de:	6839      	ldr	r1, [r7, #0]
 80158e0:	6878      	ldr	r0, [r7, #4]
 80158e2:	f000 fcf2 	bl	80162ca <USBD_CtlError>
          break;
 80158e6:	e000      	b.n	80158ea <USBD_StdItfReq+0xc2>
          break;
 80158e8:	bf00      	nop
      }
      break;
 80158ea:	e004      	b.n	80158f6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80158ec:	6839      	ldr	r1, [r7, #0]
 80158ee:	6878      	ldr	r0, [r7, #4]
 80158f0:	f000 fceb 	bl	80162ca <USBD_CtlError>
      break;
 80158f4:	bf00      	nop
  }

  return ret;
 80158f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80158f8:	4618      	mov	r0, r3
 80158fa:	3710      	adds	r7, #16
 80158fc:	46bd      	mov	sp, r7
 80158fe:	bd80      	pop	{r7, pc}

08015900 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015900:	b580      	push	{r7, lr}
 8015902:	b084      	sub	sp, #16
 8015904:	af00      	add	r7, sp, #0
 8015906:	6078      	str	r0, [r7, #4]
 8015908:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801590a:	2300      	movs	r3, #0
 801590c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801590e:	683b      	ldr	r3, [r7, #0]
 8015910:	889b      	ldrh	r3, [r3, #4]
 8015912:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015914:	683b      	ldr	r3, [r7, #0]
 8015916:	781b      	ldrb	r3, [r3, #0]
 8015918:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801591c:	2b40      	cmp	r3, #64	; 0x40
 801591e:	d007      	beq.n	8015930 <USBD_StdEPReq+0x30>
 8015920:	2b40      	cmp	r3, #64	; 0x40
 8015922:	f200 817f 	bhi.w	8015c24 <USBD_StdEPReq+0x324>
 8015926:	2b00      	cmp	r3, #0
 8015928:	d02a      	beq.n	8015980 <USBD_StdEPReq+0x80>
 801592a:	2b20      	cmp	r3, #32
 801592c:	f040 817a 	bne.w	8015c24 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8015930:	7bbb      	ldrb	r3, [r7, #14]
 8015932:	4619      	mov	r1, r3
 8015934:	6878      	ldr	r0, [r7, #4]
 8015936:	f7ff fe83 	bl	8015640 <USBD_CoreFindEP>
 801593a:	4603      	mov	r3, r0
 801593c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801593e:	7b7b      	ldrb	r3, [r7, #13]
 8015940:	2bff      	cmp	r3, #255	; 0xff
 8015942:	f000 8174 	beq.w	8015c2e <USBD_StdEPReq+0x32e>
 8015946:	7b7b      	ldrb	r3, [r7, #13]
 8015948:	2b00      	cmp	r3, #0
 801594a:	f040 8170 	bne.w	8015c2e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801594e:	7b7a      	ldrb	r2, [r7, #13]
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8015956:	7b7a      	ldrb	r2, [r7, #13]
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	32ae      	adds	r2, #174	; 0xae
 801595c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015960:	689b      	ldr	r3, [r3, #8]
 8015962:	2b00      	cmp	r3, #0
 8015964:	f000 8163 	beq.w	8015c2e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015968:	7b7a      	ldrb	r2, [r7, #13]
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	32ae      	adds	r2, #174	; 0xae
 801596e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015972:	689b      	ldr	r3, [r3, #8]
 8015974:	6839      	ldr	r1, [r7, #0]
 8015976:	6878      	ldr	r0, [r7, #4]
 8015978:	4798      	blx	r3
 801597a:	4603      	mov	r3, r0
 801597c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801597e:	e156      	b.n	8015c2e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015980:	683b      	ldr	r3, [r7, #0]
 8015982:	785b      	ldrb	r3, [r3, #1]
 8015984:	2b03      	cmp	r3, #3
 8015986:	d008      	beq.n	801599a <USBD_StdEPReq+0x9a>
 8015988:	2b03      	cmp	r3, #3
 801598a:	f300 8145 	bgt.w	8015c18 <USBD_StdEPReq+0x318>
 801598e:	2b00      	cmp	r3, #0
 8015990:	f000 809b 	beq.w	8015aca <USBD_StdEPReq+0x1ca>
 8015994:	2b01      	cmp	r3, #1
 8015996:	d03c      	beq.n	8015a12 <USBD_StdEPReq+0x112>
 8015998:	e13e      	b.n	8015c18 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80159a0:	b2db      	uxtb	r3, r3
 80159a2:	2b02      	cmp	r3, #2
 80159a4:	d002      	beq.n	80159ac <USBD_StdEPReq+0xac>
 80159a6:	2b03      	cmp	r3, #3
 80159a8:	d016      	beq.n	80159d8 <USBD_StdEPReq+0xd8>
 80159aa:	e02c      	b.n	8015a06 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80159ac:	7bbb      	ldrb	r3, [r7, #14]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d00d      	beq.n	80159ce <USBD_StdEPReq+0xce>
 80159b2:	7bbb      	ldrb	r3, [r7, #14]
 80159b4:	2b80      	cmp	r3, #128	; 0x80
 80159b6:	d00a      	beq.n	80159ce <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80159b8:	7bbb      	ldrb	r3, [r7, #14]
 80159ba:	4619      	mov	r1, r3
 80159bc:	6878      	ldr	r0, [r7, #4]
 80159be:	f001 f9d9 	bl	8016d74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80159c2:	2180      	movs	r1, #128	; 0x80
 80159c4:	6878      	ldr	r0, [r7, #4]
 80159c6:	f001 f9d5 	bl	8016d74 <USBD_LL_StallEP>
 80159ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80159cc:	e020      	b.n	8015a10 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80159ce:	6839      	ldr	r1, [r7, #0]
 80159d0:	6878      	ldr	r0, [r7, #4]
 80159d2:	f000 fc7a 	bl	80162ca <USBD_CtlError>
              break;
 80159d6:	e01b      	b.n	8015a10 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80159d8:	683b      	ldr	r3, [r7, #0]
 80159da:	885b      	ldrh	r3, [r3, #2]
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d10e      	bne.n	80159fe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80159e0:	7bbb      	ldrb	r3, [r7, #14]
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d00b      	beq.n	80159fe <USBD_StdEPReq+0xfe>
 80159e6:	7bbb      	ldrb	r3, [r7, #14]
 80159e8:	2b80      	cmp	r3, #128	; 0x80
 80159ea:	d008      	beq.n	80159fe <USBD_StdEPReq+0xfe>
 80159ec:	683b      	ldr	r3, [r7, #0]
 80159ee:	88db      	ldrh	r3, [r3, #6]
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d104      	bne.n	80159fe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80159f4:	7bbb      	ldrb	r3, [r7, #14]
 80159f6:	4619      	mov	r1, r3
 80159f8:	6878      	ldr	r0, [r7, #4]
 80159fa:	f001 f9bb 	bl	8016d74 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80159fe:	6878      	ldr	r0, [r7, #4]
 8015a00:	f000 fd2e 	bl	8016460 <USBD_CtlSendStatus>

              break;
 8015a04:	e004      	b.n	8015a10 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8015a06:	6839      	ldr	r1, [r7, #0]
 8015a08:	6878      	ldr	r0, [r7, #4]
 8015a0a:	f000 fc5e 	bl	80162ca <USBD_CtlError>
              break;
 8015a0e:	bf00      	nop
          }
          break;
 8015a10:	e107      	b.n	8015c22 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a18:	b2db      	uxtb	r3, r3
 8015a1a:	2b02      	cmp	r3, #2
 8015a1c:	d002      	beq.n	8015a24 <USBD_StdEPReq+0x124>
 8015a1e:	2b03      	cmp	r3, #3
 8015a20:	d016      	beq.n	8015a50 <USBD_StdEPReq+0x150>
 8015a22:	e04b      	b.n	8015abc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015a24:	7bbb      	ldrb	r3, [r7, #14]
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	d00d      	beq.n	8015a46 <USBD_StdEPReq+0x146>
 8015a2a:	7bbb      	ldrb	r3, [r7, #14]
 8015a2c:	2b80      	cmp	r3, #128	; 0x80
 8015a2e:	d00a      	beq.n	8015a46 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015a30:	7bbb      	ldrb	r3, [r7, #14]
 8015a32:	4619      	mov	r1, r3
 8015a34:	6878      	ldr	r0, [r7, #4]
 8015a36:	f001 f99d 	bl	8016d74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015a3a:	2180      	movs	r1, #128	; 0x80
 8015a3c:	6878      	ldr	r0, [r7, #4]
 8015a3e:	f001 f999 	bl	8016d74 <USBD_LL_StallEP>
 8015a42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015a44:	e040      	b.n	8015ac8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8015a46:	6839      	ldr	r1, [r7, #0]
 8015a48:	6878      	ldr	r0, [r7, #4]
 8015a4a:	f000 fc3e 	bl	80162ca <USBD_CtlError>
              break;
 8015a4e:	e03b      	b.n	8015ac8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015a50:	683b      	ldr	r3, [r7, #0]
 8015a52:	885b      	ldrh	r3, [r3, #2]
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d136      	bne.n	8015ac6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015a58:	7bbb      	ldrb	r3, [r7, #14]
 8015a5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d004      	beq.n	8015a6c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015a62:	7bbb      	ldrb	r3, [r7, #14]
 8015a64:	4619      	mov	r1, r3
 8015a66:	6878      	ldr	r0, [r7, #4]
 8015a68:	f001 f9a3 	bl	8016db2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015a6c:	6878      	ldr	r0, [r7, #4]
 8015a6e:	f000 fcf7 	bl	8016460 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8015a72:	7bbb      	ldrb	r3, [r7, #14]
 8015a74:	4619      	mov	r1, r3
 8015a76:	6878      	ldr	r0, [r7, #4]
 8015a78:	f7ff fde2 	bl	8015640 <USBD_CoreFindEP>
 8015a7c:	4603      	mov	r3, r0
 8015a7e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015a80:	7b7b      	ldrb	r3, [r7, #13]
 8015a82:	2bff      	cmp	r3, #255	; 0xff
 8015a84:	d01f      	beq.n	8015ac6 <USBD_StdEPReq+0x1c6>
 8015a86:	7b7b      	ldrb	r3, [r7, #13]
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	d11c      	bne.n	8015ac6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8015a8c:	7b7a      	ldrb	r2, [r7, #13]
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8015a94:	7b7a      	ldrb	r2, [r7, #13]
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	32ae      	adds	r2, #174	; 0xae
 8015a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a9e:	689b      	ldr	r3, [r3, #8]
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d010      	beq.n	8015ac6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015aa4:	7b7a      	ldrb	r2, [r7, #13]
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	32ae      	adds	r2, #174	; 0xae
 8015aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015aae:	689b      	ldr	r3, [r3, #8]
 8015ab0:	6839      	ldr	r1, [r7, #0]
 8015ab2:	6878      	ldr	r0, [r7, #4]
 8015ab4:	4798      	blx	r3
 8015ab6:	4603      	mov	r3, r0
 8015ab8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8015aba:	e004      	b.n	8015ac6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8015abc:	6839      	ldr	r1, [r7, #0]
 8015abe:	6878      	ldr	r0, [r7, #4]
 8015ac0:	f000 fc03 	bl	80162ca <USBD_CtlError>
              break;
 8015ac4:	e000      	b.n	8015ac8 <USBD_StdEPReq+0x1c8>
              break;
 8015ac6:	bf00      	nop
          }
          break;
 8015ac8:	e0ab      	b.n	8015c22 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ad0:	b2db      	uxtb	r3, r3
 8015ad2:	2b02      	cmp	r3, #2
 8015ad4:	d002      	beq.n	8015adc <USBD_StdEPReq+0x1dc>
 8015ad6:	2b03      	cmp	r3, #3
 8015ad8:	d032      	beq.n	8015b40 <USBD_StdEPReq+0x240>
 8015ada:	e097      	b.n	8015c0c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015adc:	7bbb      	ldrb	r3, [r7, #14]
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	d007      	beq.n	8015af2 <USBD_StdEPReq+0x1f2>
 8015ae2:	7bbb      	ldrb	r3, [r7, #14]
 8015ae4:	2b80      	cmp	r3, #128	; 0x80
 8015ae6:	d004      	beq.n	8015af2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8015ae8:	6839      	ldr	r1, [r7, #0]
 8015aea:	6878      	ldr	r0, [r7, #4]
 8015aec:	f000 fbed 	bl	80162ca <USBD_CtlError>
                break;
 8015af0:	e091      	b.n	8015c16 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015af2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	da0b      	bge.n	8015b12 <USBD_StdEPReq+0x212>
 8015afa:	7bbb      	ldrb	r3, [r7, #14]
 8015afc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015b00:	4613      	mov	r3, r2
 8015b02:	009b      	lsls	r3, r3, #2
 8015b04:	4413      	add	r3, r2
 8015b06:	009b      	lsls	r3, r3, #2
 8015b08:	3310      	adds	r3, #16
 8015b0a:	687a      	ldr	r2, [r7, #4]
 8015b0c:	4413      	add	r3, r2
 8015b0e:	3304      	adds	r3, #4
 8015b10:	e00b      	b.n	8015b2a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015b12:	7bbb      	ldrb	r3, [r7, #14]
 8015b14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015b18:	4613      	mov	r3, r2
 8015b1a:	009b      	lsls	r3, r3, #2
 8015b1c:	4413      	add	r3, r2
 8015b1e:	009b      	lsls	r3, r3, #2
 8015b20:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015b24:	687a      	ldr	r2, [r7, #4]
 8015b26:	4413      	add	r3, r2
 8015b28:	3304      	adds	r3, #4
 8015b2a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015b2c:	68bb      	ldr	r3, [r7, #8]
 8015b2e:	2200      	movs	r2, #0
 8015b30:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015b32:	68bb      	ldr	r3, [r7, #8]
 8015b34:	2202      	movs	r2, #2
 8015b36:	4619      	mov	r1, r3
 8015b38:	6878      	ldr	r0, [r7, #4]
 8015b3a:	f000 fc37 	bl	80163ac <USBD_CtlSendData>
              break;
 8015b3e:	e06a      	b.n	8015c16 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015b40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	da11      	bge.n	8015b6c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015b48:	7bbb      	ldrb	r3, [r7, #14]
 8015b4a:	f003 020f 	and.w	r2, r3, #15
 8015b4e:	6879      	ldr	r1, [r7, #4]
 8015b50:	4613      	mov	r3, r2
 8015b52:	009b      	lsls	r3, r3, #2
 8015b54:	4413      	add	r3, r2
 8015b56:	009b      	lsls	r3, r3, #2
 8015b58:	440b      	add	r3, r1
 8015b5a:	3324      	adds	r3, #36	; 0x24
 8015b5c:	881b      	ldrh	r3, [r3, #0]
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d117      	bne.n	8015b92 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015b62:	6839      	ldr	r1, [r7, #0]
 8015b64:	6878      	ldr	r0, [r7, #4]
 8015b66:	f000 fbb0 	bl	80162ca <USBD_CtlError>
                  break;
 8015b6a:	e054      	b.n	8015c16 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015b6c:	7bbb      	ldrb	r3, [r7, #14]
 8015b6e:	f003 020f 	and.w	r2, r3, #15
 8015b72:	6879      	ldr	r1, [r7, #4]
 8015b74:	4613      	mov	r3, r2
 8015b76:	009b      	lsls	r3, r3, #2
 8015b78:	4413      	add	r3, r2
 8015b7a:	009b      	lsls	r3, r3, #2
 8015b7c:	440b      	add	r3, r1
 8015b7e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015b82:	881b      	ldrh	r3, [r3, #0]
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d104      	bne.n	8015b92 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015b88:	6839      	ldr	r1, [r7, #0]
 8015b8a:	6878      	ldr	r0, [r7, #4]
 8015b8c:	f000 fb9d 	bl	80162ca <USBD_CtlError>
                  break;
 8015b90:	e041      	b.n	8015c16 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015b92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	da0b      	bge.n	8015bb2 <USBD_StdEPReq+0x2b2>
 8015b9a:	7bbb      	ldrb	r3, [r7, #14]
 8015b9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015ba0:	4613      	mov	r3, r2
 8015ba2:	009b      	lsls	r3, r3, #2
 8015ba4:	4413      	add	r3, r2
 8015ba6:	009b      	lsls	r3, r3, #2
 8015ba8:	3310      	adds	r3, #16
 8015baa:	687a      	ldr	r2, [r7, #4]
 8015bac:	4413      	add	r3, r2
 8015bae:	3304      	adds	r3, #4
 8015bb0:	e00b      	b.n	8015bca <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015bb2:	7bbb      	ldrb	r3, [r7, #14]
 8015bb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015bb8:	4613      	mov	r3, r2
 8015bba:	009b      	lsls	r3, r3, #2
 8015bbc:	4413      	add	r3, r2
 8015bbe:	009b      	lsls	r3, r3, #2
 8015bc0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015bc4:	687a      	ldr	r2, [r7, #4]
 8015bc6:	4413      	add	r3, r2
 8015bc8:	3304      	adds	r3, #4
 8015bca:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015bcc:	7bbb      	ldrb	r3, [r7, #14]
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d002      	beq.n	8015bd8 <USBD_StdEPReq+0x2d8>
 8015bd2:	7bbb      	ldrb	r3, [r7, #14]
 8015bd4:	2b80      	cmp	r3, #128	; 0x80
 8015bd6:	d103      	bne.n	8015be0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8015bd8:	68bb      	ldr	r3, [r7, #8]
 8015bda:	2200      	movs	r2, #0
 8015bdc:	601a      	str	r2, [r3, #0]
 8015bde:	e00e      	b.n	8015bfe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015be0:	7bbb      	ldrb	r3, [r7, #14]
 8015be2:	4619      	mov	r1, r3
 8015be4:	6878      	ldr	r0, [r7, #4]
 8015be6:	f001 f903 	bl	8016df0 <USBD_LL_IsStallEP>
 8015bea:	4603      	mov	r3, r0
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d003      	beq.n	8015bf8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8015bf0:	68bb      	ldr	r3, [r7, #8]
 8015bf2:	2201      	movs	r2, #1
 8015bf4:	601a      	str	r2, [r3, #0]
 8015bf6:	e002      	b.n	8015bfe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8015bf8:	68bb      	ldr	r3, [r7, #8]
 8015bfa:	2200      	movs	r2, #0
 8015bfc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015bfe:	68bb      	ldr	r3, [r7, #8]
 8015c00:	2202      	movs	r2, #2
 8015c02:	4619      	mov	r1, r3
 8015c04:	6878      	ldr	r0, [r7, #4]
 8015c06:	f000 fbd1 	bl	80163ac <USBD_CtlSendData>
              break;
 8015c0a:	e004      	b.n	8015c16 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8015c0c:	6839      	ldr	r1, [r7, #0]
 8015c0e:	6878      	ldr	r0, [r7, #4]
 8015c10:	f000 fb5b 	bl	80162ca <USBD_CtlError>
              break;
 8015c14:	bf00      	nop
          }
          break;
 8015c16:	e004      	b.n	8015c22 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015c18:	6839      	ldr	r1, [r7, #0]
 8015c1a:	6878      	ldr	r0, [r7, #4]
 8015c1c:	f000 fb55 	bl	80162ca <USBD_CtlError>
          break;
 8015c20:	bf00      	nop
      }
      break;
 8015c22:	e005      	b.n	8015c30 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8015c24:	6839      	ldr	r1, [r7, #0]
 8015c26:	6878      	ldr	r0, [r7, #4]
 8015c28:	f000 fb4f 	bl	80162ca <USBD_CtlError>
      break;
 8015c2c:	e000      	b.n	8015c30 <USBD_StdEPReq+0x330>
      break;
 8015c2e:	bf00      	nop
  }

  return ret;
 8015c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c32:	4618      	mov	r0, r3
 8015c34:	3710      	adds	r7, #16
 8015c36:	46bd      	mov	sp, r7
 8015c38:	bd80      	pop	{r7, pc}
	...

08015c3c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015c3c:	b580      	push	{r7, lr}
 8015c3e:	b084      	sub	sp, #16
 8015c40:	af00      	add	r7, sp, #0
 8015c42:	6078      	str	r0, [r7, #4]
 8015c44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015c46:	2300      	movs	r3, #0
 8015c48:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015c4a:	2300      	movs	r3, #0
 8015c4c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015c4e:	2300      	movs	r3, #0
 8015c50:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015c52:	683b      	ldr	r3, [r7, #0]
 8015c54:	885b      	ldrh	r3, [r3, #2]
 8015c56:	0a1b      	lsrs	r3, r3, #8
 8015c58:	b29b      	uxth	r3, r3
 8015c5a:	3b01      	subs	r3, #1
 8015c5c:	2b06      	cmp	r3, #6
 8015c5e:	f200 8128 	bhi.w	8015eb2 <USBD_GetDescriptor+0x276>
 8015c62:	a201      	add	r2, pc, #4	; (adr r2, 8015c68 <USBD_GetDescriptor+0x2c>)
 8015c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c68:	08015c85 	.word	0x08015c85
 8015c6c:	08015c9d 	.word	0x08015c9d
 8015c70:	08015cdd 	.word	0x08015cdd
 8015c74:	08015eb3 	.word	0x08015eb3
 8015c78:	08015eb3 	.word	0x08015eb3
 8015c7c:	08015e53 	.word	0x08015e53
 8015c80:	08015e7f 	.word	0x08015e7f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c8a:	681b      	ldr	r3, [r3, #0]
 8015c8c:	687a      	ldr	r2, [r7, #4]
 8015c8e:	7c12      	ldrb	r2, [r2, #16]
 8015c90:	f107 0108 	add.w	r1, r7, #8
 8015c94:	4610      	mov	r0, r2
 8015c96:	4798      	blx	r3
 8015c98:	60f8      	str	r0, [r7, #12]
      break;
 8015c9a:	e112      	b.n	8015ec2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	7c1b      	ldrb	r3, [r3, #16]
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d10d      	bne.n	8015cc0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015cac:	f107 0208 	add.w	r2, r7, #8
 8015cb0:	4610      	mov	r0, r2
 8015cb2:	4798      	blx	r3
 8015cb4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015cb6:	68fb      	ldr	r3, [r7, #12]
 8015cb8:	3301      	adds	r3, #1
 8015cba:	2202      	movs	r2, #2
 8015cbc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015cbe:	e100      	b.n	8015ec2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015cc8:	f107 0208 	add.w	r2, r7, #8
 8015ccc:	4610      	mov	r0, r2
 8015cce:	4798      	blx	r3
 8015cd0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015cd2:	68fb      	ldr	r3, [r7, #12]
 8015cd4:	3301      	adds	r3, #1
 8015cd6:	2202      	movs	r2, #2
 8015cd8:	701a      	strb	r2, [r3, #0]
      break;
 8015cda:	e0f2      	b.n	8015ec2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015cdc:	683b      	ldr	r3, [r7, #0]
 8015cde:	885b      	ldrh	r3, [r3, #2]
 8015ce0:	b2db      	uxtb	r3, r3
 8015ce2:	2b05      	cmp	r3, #5
 8015ce4:	f200 80ac 	bhi.w	8015e40 <USBD_GetDescriptor+0x204>
 8015ce8:	a201      	add	r2, pc, #4	; (adr r2, 8015cf0 <USBD_GetDescriptor+0xb4>)
 8015cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015cee:	bf00      	nop
 8015cf0:	08015d09 	.word	0x08015d09
 8015cf4:	08015d3d 	.word	0x08015d3d
 8015cf8:	08015d71 	.word	0x08015d71
 8015cfc:	08015da5 	.word	0x08015da5
 8015d00:	08015dd9 	.word	0x08015dd9
 8015d04:	08015e0d 	.word	0x08015e0d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d0e:	685b      	ldr	r3, [r3, #4]
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d00b      	beq.n	8015d2c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d1a:	685b      	ldr	r3, [r3, #4]
 8015d1c:	687a      	ldr	r2, [r7, #4]
 8015d1e:	7c12      	ldrb	r2, [r2, #16]
 8015d20:	f107 0108 	add.w	r1, r7, #8
 8015d24:	4610      	mov	r0, r2
 8015d26:	4798      	blx	r3
 8015d28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015d2a:	e091      	b.n	8015e50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015d2c:	6839      	ldr	r1, [r7, #0]
 8015d2e:	6878      	ldr	r0, [r7, #4]
 8015d30:	f000 facb 	bl	80162ca <USBD_CtlError>
            err++;
 8015d34:	7afb      	ldrb	r3, [r7, #11]
 8015d36:	3301      	adds	r3, #1
 8015d38:	72fb      	strb	r3, [r7, #11]
          break;
 8015d3a:	e089      	b.n	8015e50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d42:	689b      	ldr	r3, [r3, #8]
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	d00b      	beq.n	8015d60 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d4e:	689b      	ldr	r3, [r3, #8]
 8015d50:	687a      	ldr	r2, [r7, #4]
 8015d52:	7c12      	ldrb	r2, [r2, #16]
 8015d54:	f107 0108 	add.w	r1, r7, #8
 8015d58:	4610      	mov	r0, r2
 8015d5a:	4798      	blx	r3
 8015d5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015d5e:	e077      	b.n	8015e50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015d60:	6839      	ldr	r1, [r7, #0]
 8015d62:	6878      	ldr	r0, [r7, #4]
 8015d64:	f000 fab1 	bl	80162ca <USBD_CtlError>
            err++;
 8015d68:	7afb      	ldrb	r3, [r7, #11]
 8015d6a:	3301      	adds	r3, #1
 8015d6c:	72fb      	strb	r3, [r7, #11]
          break;
 8015d6e:	e06f      	b.n	8015e50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d76:	68db      	ldr	r3, [r3, #12]
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d00b      	beq.n	8015d94 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d82:	68db      	ldr	r3, [r3, #12]
 8015d84:	687a      	ldr	r2, [r7, #4]
 8015d86:	7c12      	ldrb	r2, [r2, #16]
 8015d88:	f107 0108 	add.w	r1, r7, #8
 8015d8c:	4610      	mov	r0, r2
 8015d8e:	4798      	blx	r3
 8015d90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015d92:	e05d      	b.n	8015e50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015d94:	6839      	ldr	r1, [r7, #0]
 8015d96:	6878      	ldr	r0, [r7, #4]
 8015d98:	f000 fa97 	bl	80162ca <USBD_CtlError>
            err++;
 8015d9c:	7afb      	ldrb	r3, [r7, #11]
 8015d9e:	3301      	adds	r3, #1
 8015da0:	72fb      	strb	r3, [r7, #11]
          break;
 8015da2:	e055      	b.n	8015e50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015daa:	691b      	ldr	r3, [r3, #16]
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d00b      	beq.n	8015dc8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015db6:	691b      	ldr	r3, [r3, #16]
 8015db8:	687a      	ldr	r2, [r7, #4]
 8015dba:	7c12      	ldrb	r2, [r2, #16]
 8015dbc:	f107 0108 	add.w	r1, r7, #8
 8015dc0:	4610      	mov	r0, r2
 8015dc2:	4798      	blx	r3
 8015dc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015dc6:	e043      	b.n	8015e50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015dc8:	6839      	ldr	r1, [r7, #0]
 8015dca:	6878      	ldr	r0, [r7, #4]
 8015dcc:	f000 fa7d 	bl	80162ca <USBD_CtlError>
            err++;
 8015dd0:	7afb      	ldrb	r3, [r7, #11]
 8015dd2:	3301      	adds	r3, #1
 8015dd4:	72fb      	strb	r3, [r7, #11]
          break;
 8015dd6:	e03b      	b.n	8015e50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015dde:	695b      	ldr	r3, [r3, #20]
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d00b      	beq.n	8015dfc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015dea:	695b      	ldr	r3, [r3, #20]
 8015dec:	687a      	ldr	r2, [r7, #4]
 8015dee:	7c12      	ldrb	r2, [r2, #16]
 8015df0:	f107 0108 	add.w	r1, r7, #8
 8015df4:	4610      	mov	r0, r2
 8015df6:	4798      	blx	r3
 8015df8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015dfa:	e029      	b.n	8015e50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015dfc:	6839      	ldr	r1, [r7, #0]
 8015dfe:	6878      	ldr	r0, [r7, #4]
 8015e00:	f000 fa63 	bl	80162ca <USBD_CtlError>
            err++;
 8015e04:	7afb      	ldrb	r3, [r7, #11]
 8015e06:	3301      	adds	r3, #1
 8015e08:	72fb      	strb	r3, [r7, #11]
          break;
 8015e0a:	e021      	b.n	8015e50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e12:	699b      	ldr	r3, [r3, #24]
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d00b      	beq.n	8015e30 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e1e:	699b      	ldr	r3, [r3, #24]
 8015e20:	687a      	ldr	r2, [r7, #4]
 8015e22:	7c12      	ldrb	r2, [r2, #16]
 8015e24:	f107 0108 	add.w	r1, r7, #8
 8015e28:	4610      	mov	r0, r2
 8015e2a:	4798      	blx	r3
 8015e2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e2e:	e00f      	b.n	8015e50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015e30:	6839      	ldr	r1, [r7, #0]
 8015e32:	6878      	ldr	r0, [r7, #4]
 8015e34:	f000 fa49 	bl	80162ca <USBD_CtlError>
            err++;
 8015e38:	7afb      	ldrb	r3, [r7, #11]
 8015e3a:	3301      	adds	r3, #1
 8015e3c:	72fb      	strb	r3, [r7, #11]
          break;
 8015e3e:	e007      	b.n	8015e50 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015e40:	6839      	ldr	r1, [r7, #0]
 8015e42:	6878      	ldr	r0, [r7, #4]
 8015e44:	f000 fa41 	bl	80162ca <USBD_CtlError>
          err++;
 8015e48:	7afb      	ldrb	r3, [r7, #11]
 8015e4a:	3301      	adds	r3, #1
 8015e4c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8015e4e:	bf00      	nop
      }
      break;
 8015e50:	e037      	b.n	8015ec2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	7c1b      	ldrb	r3, [r3, #16]
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d109      	bne.n	8015e6e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015e62:	f107 0208 	add.w	r2, r7, #8
 8015e66:	4610      	mov	r0, r2
 8015e68:	4798      	blx	r3
 8015e6a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015e6c:	e029      	b.n	8015ec2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015e6e:	6839      	ldr	r1, [r7, #0]
 8015e70:	6878      	ldr	r0, [r7, #4]
 8015e72:	f000 fa2a 	bl	80162ca <USBD_CtlError>
        err++;
 8015e76:	7afb      	ldrb	r3, [r7, #11]
 8015e78:	3301      	adds	r3, #1
 8015e7a:	72fb      	strb	r3, [r7, #11]
      break;
 8015e7c:	e021      	b.n	8015ec2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	7c1b      	ldrb	r3, [r3, #16]
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d10d      	bne.n	8015ea2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e8e:	f107 0208 	add.w	r2, r7, #8
 8015e92:	4610      	mov	r0, r2
 8015e94:	4798      	blx	r3
 8015e96:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015e98:	68fb      	ldr	r3, [r7, #12]
 8015e9a:	3301      	adds	r3, #1
 8015e9c:	2207      	movs	r2, #7
 8015e9e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015ea0:	e00f      	b.n	8015ec2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015ea2:	6839      	ldr	r1, [r7, #0]
 8015ea4:	6878      	ldr	r0, [r7, #4]
 8015ea6:	f000 fa10 	bl	80162ca <USBD_CtlError>
        err++;
 8015eaa:	7afb      	ldrb	r3, [r7, #11]
 8015eac:	3301      	adds	r3, #1
 8015eae:	72fb      	strb	r3, [r7, #11]
      break;
 8015eb0:	e007      	b.n	8015ec2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8015eb2:	6839      	ldr	r1, [r7, #0]
 8015eb4:	6878      	ldr	r0, [r7, #4]
 8015eb6:	f000 fa08 	bl	80162ca <USBD_CtlError>
      err++;
 8015eba:	7afb      	ldrb	r3, [r7, #11]
 8015ebc:	3301      	adds	r3, #1
 8015ebe:	72fb      	strb	r3, [r7, #11]
      break;
 8015ec0:	bf00      	nop
  }

  if (err != 0U)
 8015ec2:	7afb      	ldrb	r3, [r7, #11]
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d11e      	bne.n	8015f06 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8015ec8:	683b      	ldr	r3, [r7, #0]
 8015eca:	88db      	ldrh	r3, [r3, #6]
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d016      	beq.n	8015efe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8015ed0:	893b      	ldrh	r3, [r7, #8]
 8015ed2:	2b00      	cmp	r3, #0
 8015ed4:	d00e      	beq.n	8015ef4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8015ed6:	683b      	ldr	r3, [r7, #0]
 8015ed8:	88da      	ldrh	r2, [r3, #6]
 8015eda:	893b      	ldrh	r3, [r7, #8]
 8015edc:	4293      	cmp	r3, r2
 8015ede:	bf28      	it	cs
 8015ee0:	4613      	movcs	r3, r2
 8015ee2:	b29b      	uxth	r3, r3
 8015ee4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015ee6:	893b      	ldrh	r3, [r7, #8]
 8015ee8:	461a      	mov	r2, r3
 8015eea:	68f9      	ldr	r1, [r7, #12]
 8015eec:	6878      	ldr	r0, [r7, #4]
 8015eee:	f000 fa5d 	bl	80163ac <USBD_CtlSendData>
 8015ef2:	e009      	b.n	8015f08 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015ef4:	6839      	ldr	r1, [r7, #0]
 8015ef6:	6878      	ldr	r0, [r7, #4]
 8015ef8:	f000 f9e7 	bl	80162ca <USBD_CtlError>
 8015efc:	e004      	b.n	8015f08 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015efe:	6878      	ldr	r0, [r7, #4]
 8015f00:	f000 faae 	bl	8016460 <USBD_CtlSendStatus>
 8015f04:	e000      	b.n	8015f08 <USBD_GetDescriptor+0x2cc>
    return;
 8015f06:	bf00      	nop
  }
}
 8015f08:	3710      	adds	r7, #16
 8015f0a:	46bd      	mov	sp, r7
 8015f0c:	bd80      	pop	{r7, pc}
 8015f0e:	bf00      	nop

08015f10 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015f10:	b580      	push	{r7, lr}
 8015f12:	b084      	sub	sp, #16
 8015f14:	af00      	add	r7, sp, #0
 8015f16:	6078      	str	r0, [r7, #4]
 8015f18:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015f1a:	683b      	ldr	r3, [r7, #0]
 8015f1c:	889b      	ldrh	r3, [r3, #4]
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d131      	bne.n	8015f86 <USBD_SetAddress+0x76>
 8015f22:	683b      	ldr	r3, [r7, #0]
 8015f24:	88db      	ldrh	r3, [r3, #6]
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d12d      	bne.n	8015f86 <USBD_SetAddress+0x76>
 8015f2a:	683b      	ldr	r3, [r7, #0]
 8015f2c:	885b      	ldrh	r3, [r3, #2]
 8015f2e:	2b7f      	cmp	r3, #127	; 0x7f
 8015f30:	d829      	bhi.n	8015f86 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015f32:	683b      	ldr	r3, [r7, #0]
 8015f34:	885b      	ldrh	r3, [r3, #2]
 8015f36:	b2db      	uxtb	r3, r3
 8015f38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015f3c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015f44:	b2db      	uxtb	r3, r3
 8015f46:	2b03      	cmp	r3, #3
 8015f48:	d104      	bne.n	8015f54 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8015f4a:	6839      	ldr	r1, [r7, #0]
 8015f4c:	6878      	ldr	r0, [r7, #4]
 8015f4e:	f000 f9bc 	bl	80162ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f52:	e01d      	b.n	8015f90 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	7bfa      	ldrb	r2, [r7, #15]
 8015f58:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015f5c:	7bfb      	ldrb	r3, [r7, #15]
 8015f5e:	4619      	mov	r1, r3
 8015f60:	6878      	ldr	r0, [r7, #4]
 8015f62:	f000 ff71 	bl	8016e48 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015f66:	6878      	ldr	r0, [r7, #4]
 8015f68:	f000 fa7a 	bl	8016460 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015f6c:	7bfb      	ldrb	r3, [r7, #15]
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d004      	beq.n	8015f7c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	2202      	movs	r2, #2
 8015f76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f7a:	e009      	b.n	8015f90 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	2201      	movs	r2, #1
 8015f80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f84:	e004      	b.n	8015f90 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8015f86:	6839      	ldr	r1, [r7, #0]
 8015f88:	6878      	ldr	r0, [r7, #4]
 8015f8a:	f000 f99e 	bl	80162ca <USBD_CtlError>
  }
}
 8015f8e:	bf00      	nop
 8015f90:	bf00      	nop
 8015f92:	3710      	adds	r7, #16
 8015f94:	46bd      	mov	sp, r7
 8015f96:	bd80      	pop	{r7, pc}

08015f98 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015f98:	b580      	push	{r7, lr}
 8015f9a:	b084      	sub	sp, #16
 8015f9c:	af00      	add	r7, sp, #0
 8015f9e:	6078      	str	r0, [r7, #4]
 8015fa0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015fa2:	2300      	movs	r3, #0
 8015fa4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8015fa6:	683b      	ldr	r3, [r7, #0]
 8015fa8:	885b      	ldrh	r3, [r3, #2]
 8015faa:	b2da      	uxtb	r2, r3
 8015fac:	4b4e      	ldr	r3, [pc, #312]	; (80160e8 <USBD_SetConfig+0x150>)
 8015fae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015fb0:	4b4d      	ldr	r3, [pc, #308]	; (80160e8 <USBD_SetConfig+0x150>)
 8015fb2:	781b      	ldrb	r3, [r3, #0]
 8015fb4:	2b01      	cmp	r3, #1
 8015fb6:	d905      	bls.n	8015fc4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015fb8:	6839      	ldr	r1, [r7, #0]
 8015fba:	6878      	ldr	r0, [r7, #4]
 8015fbc:	f000 f985 	bl	80162ca <USBD_CtlError>
    return USBD_FAIL;
 8015fc0:	2303      	movs	r3, #3
 8015fc2:	e08c      	b.n	80160de <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015fca:	b2db      	uxtb	r3, r3
 8015fcc:	2b02      	cmp	r3, #2
 8015fce:	d002      	beq.n	8015fd6 <USBD_SetConfig+0x3e>
 8015fd0:	2b03      	cmp	r3, #3
 8015fd2:	d029      	beq.n	8016028 <USBD_SetConfig+0x90>
 8015fd4:	e075      	b.n	80160c2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8015fd6:	4b44      	ldr	r3, [pc, #272]	; (80160e8 <USBD_SetConfig+0x150>)
 8015fd8:	781b      	ldrb	r3, [r3, #0]
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d020      	beq.n	8016020 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8015fde:	4b42      	ldr	r3, [pc, #264]	; (80160e8 <USBD_SetConfig+0x150>)
 8015fe0:	781b      	ldrb	r3, [r3, #0]
 8015fe2:	461a      	mov	r2, r3
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015fe8:	4b3f      	ldr	r3, [pc, #252]	; (80160e8 <USBD_SetConfig+0x150>)
 8015fea:	781b      	ldrb	r3, [r3, #0]
 8015fec:	4619      	mov	r1, r3
 8015fee:	6878      	ldr	r0, [r7, #4]
 8015ff0:	f7fe ffe1 	bl	8014fb6 <USBD_SetClassConfig>
 8015ff4:	4603      	mov	r3, r0
 8015ff6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8015ff8:	7bfb      	ldrb	r3, [r7, #15]
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d008      	beq.n	8016010 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8015ffe:	6839      	ldr	r1, [r7, #0]
 8016000:	6878      	ldr	r0, [r7, #4]
 8016002:	f000 f962 	bl	80162ca <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	2202      	movs	r2, #2
 801600a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801600e:	e065      	b.n	80160dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016010:	6878      	ldr	r0, [r7, #4]
 8016012:	f000 fa25 	bl	8016460 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	2203      	movs	r2, #3
 801601a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801601e:	e05d      	b.n	80160dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016020:	6878      	ldr	r0, [r7, #4]
 8016022:	f000 fa1d 	bl	8016460 <USBD_CtlSendStatus>
      break;
 8016026:	e059      	b.n	80160dc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8016028:	4b2f      	ldr	r3, [pc, #188]	; (80160e8 <USBD_SetConfig+0x150>)
 801602a:	781b      	ldrb	r3, [r3, #0]
 801602c:	2b00      	cmp	r3, #0
 801602e:	d112      	bne.n	8016056 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	2202      	movs	r2, #2
 8016034:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8016038:	4b2b      	ldr	r3, [pc, #172]	; (80160e8 <USBD_SetConfig+0x150>)
 801603a:	781b      	ldrb	r3, [r3, #0]
 801603c:	461a      	mov	r2, r3
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016042:	4b29      	ldr	r3, [pc, #164]	; (80160e8 <USBD_SetConfig+0x150>)
 8016044:	781b      	ldrb	r3, [r3, #0]
 8016046:	4619      	mov	r1, r3
 8016048:	6878      	ldr	r0, [r7, #4]
 801604a:	f7fe ffd0 	bl	8014fee <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801604e:	6878      	ldr	r0, [r7, #4]
 8016050:	f000 fa06 	bl	8016460 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016054:	e042      	b.n	80160dc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8016056:	4b24      	ldr	r3, [pc, #144]	; (80160e8 <USBD_SetConfig+0x150>)
 8016058:	781b      	ldrb	r3, [r3, #0]
 801605a:	461a      	mov	r2, r3
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	685b      	ldr	r3, [r3, #4]
 8016060:	429a      	cmp	r2, r3
 8016062:	d02a      	beq.n	80160ba <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	685b      	ldr	r3, [r3, #4]
 8016068:	b2db      	uxtb	r3, r3
 801606a:	4619      	mov	r1, r3
 801606c:	6878      	ldr	r0, [r7, #4]
 801606e:	f7fe ffbe 	bl	8014fee <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8016072:	4b1d      	ldr	r3, [pc, #116]	; (80160e8 <USBD_SetConfig+0x150>)
 8016074:	781b      	ldrb	r3, [r3, #0]
 8016076:	461a      	mov	r2, r3
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801607c:	4b1a      	ldr	r3, [pc, #104]	; (80160e8 <USBD_SetConfig+0x150>)
 801607e:	781b      	ldrb	r3, [r3, #0]
 8016080:	4619      	mov	r1, r3
 8016082:	6878      	ldr	r0, [r7, #4]
 8016084:	f7fe ff97 	bl	8014fb6 <USBD_SetClassConfig>
 8016088:	4603      	mov	r3, r0
 801608a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801608c:	7bfb      	ldrb	r3, [r7, #15]
 801608e:	2b00      	cmp	r3, #0
 8016090:	d00f      	beq.n	80160b2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8016092:	6839      	ldr	r1, [r7, #0]
 8016094:	6878      	ldr	r0, [r7, #4]
 8016096:	f000 f918 	bl	80162ca <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	685b      	ldr	r3, [r3, #4]
 801609e:	b2db      	uxtb	r3, r3
 80160a0:	4619      	mov	r1, r3
 80160a2:	6878      	ldr	r0, [r7, #4]
 80160a4:	f7fe ffa3 	bl	8014fee <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	2202      	movs	r2, #2
 80160ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80160b0:	e014      	b.n	80160dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80160b2:	6878      	ldr	r0, [r7, #4]
 80160b4:	f000 f9d4 	bl	8016460 <USBD_CtlSendStatus>
      break;
 80160b8:	e010      	b.n	80160dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80160ba:	6878      	ldr	r0, [r7, #4]
 80160bc:	f000 f9d0 	bl	8016460 <USBD_CtlSendStatus>
      break;
 80160c0:	e00c      	b.n	80160dc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80160c2:	6839      	ldr	r1, [r7, #0]
 80160c4:	6878      	ldr	r0, [r7, #4]
 80160c6:	f000 f900 	bl	80162ca <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80160ca:	4b07      	ldr	r3, [pc, #28]	; (80160e8 <USBD_SetConfig+0x150>)
 80160cc:	781b      	ldrb	r3, [r3, #0]
 80160ce:	4619      	mov	r1, r3
 80160d0:	6878      	ldr	r0, [r7, #4]
 80160d2:	f7fe ff8c 	bl	8014fee <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80160d6:	2303      	movs	r3, #3
 80160d8:	73fb      	strb	r3, [r7, #15]
      break;
 80160da:	bf00      	nop
  }

  return ret;
 80160dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80160de:	4618      	mov	r0, r3
 80160e0:	3710      	adds	r7, #16
 80160e2:	46bd      	mov	sp, r7
 80160e4:	bd80      	pop	{r7, pc}
 80160e6:	bf00      	nop
 80160e8:	240015e4 	.word	0x240015e4

080160ec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80160ec:	b580      	push	{r7, lr}
 80160ee:	b082      	sub	sp, #8
 80160f0:	af00      	add	r7, sp, #0
 80160f2:	6078      	str	r0, [r7, #4]
 80160f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80160f6:	683b      	ldr	r3, [r7, #0]
 80160f8:	88db      	ldrh	r3, [r3, #6]
 80160fa:	2b01      	cmp	r3, #1
 80160fc:	d004      	beq.n	8016108 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80160fe:	6839      	ldr	r1, [r7, #0]
 8016100:	6878      	ldr	r0, [r7, #4]
 8016102:	f000 f8e2 	bl	80162ca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8016106:	e023      	b.n	8016150 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801610e:	b2db      	uxtb	r3, r3
 8016110:	2b02      	cmp	r3, #2
 8016112:	dc02      	bgt.n	801611a <USBD_GetConfig+0x2e>
 8016114:	2b00      	cmp	r3, #0
 8016116:	dc03      	bgt.n	8016120 <USBD_GetConfig+0x34>
 8016118:	e015      	b.n	8016146 <USBD_GetConfig+0x5a>
 801611a:	2b03      	cmp	r3, #3
 801611c:	d00b      	beq.n	8016136 <USBD_GetConfig+0x4a>
 801611e:	e012      	b.n	8016146 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	2200      	movs	r2, #0
 8016124:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	3308      	adds	r3, #8
 801612a:	2201      	movs	r2, #1
 801612c:	4619      	mov	r1, r3
 801612e:	6878      	ldr	r0, [r7, #4]
 8016130:	f000 f93c 	bl	80163ac <USBD_CtlSendData>
        break;
 8016134:	e00c      	b.n	8016150 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	3304      	adds	r3, #4
 801613a:	2201      	movs	r2, #1
 801613c:	4619      	mov	r1, r3
 801613e:	6878      	ldr	r0, [r7, #4]
 8016140:	f000 f934 	bl	80163ac <USBD_CtlSendData>
        break;
 8016144:	e004      	b.n	8016150 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8016146:	6839      	ldr	r1, [r7, #0]
 8016148:	6878      	ldr	r0, [r7, #4]
 801614a:	f000 f8be 	bl	80162ca <USBD_CtlError>
        break;
 801614e:	bf00      	nop
}
 8016150:	bf00      	nop
 8016152:	3708      	adds	r7, #8
 8016154:	46bd      	mov	sp, r7
 8016156:	bd80      	pop	{r7, pc}

08016158 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016158:	b580      	push	{r7, lr}
 801615a:	b082      	sub	sp, #8
 801615c:	af00      	add	r7, sp, #0
 801615e:	6078      	str	r0, [r7, #4]
 8016160:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016168:	b2db      	uxtb	r3, r3
 801616a:	3b01      	subs	r3, #1
 801616c:	2b02      	cmp	r3, #2
 801616e:	d81e      	bhi.n	80161ae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8016170:	683b      	ldr	r3, [r7, #0]
 8016172:	88db      	ldrh	r3, [r3, #6]
 8016174:	2b02      	cmp	r3, #2
 8016176:	d004      	beq.n	8016182 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8016178:	6839      	ldr	r1, [r7, #0]
 801617a:	6878      	ldr	r0, [r7, #4]
 801617c:	f000 f8a5 	bl	80162ca <USBD_CtlError>
        break;
 8016180:	e01a      	b.n	80161b8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	2201      	movs	r2, #1
 8016186:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801618e:	2b00      	cmp	r3, #0
 8016190:	d005      	beq.n	801619e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	68db      	ldr	r3, [r3, #12]
 8016196:	f043 0202 	orr.w	r2, r3, #2
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	330c      	adds	r3, #12
 80161a2:	2202      	movs	r2, #2
 80161a4:	4619      	mov	r1, r3
 80161a6:	6878      	ldr	r0, [r7, #4]
 80161a8:	f000 f900 	bl	80163ac <USBD_CtlSendData>
      break;
 80161ac:	e004      	b.n	80161b8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80161ae:	6839      	ldr	r1, [r7, #0]
 80161b0:	6878      	ldr	r0, [r7, #4]
 80161b2:	f000 f88a 	bl	80162ca <USBD_CtlError>
      break;
 80161b6:	bf00      	nop
  }
}
 80161b8:	bf00      	nop
 80161ba:	3708      	adds	r7, #8
 80161bc:	46bd      	mov	sp, r7
 80161be:	bd80      	pop	{r7, pc}

080161c0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80161c0:	b580      	push	{r7, lr}
 80161c2:	b082      	sub	sp, #8
 80161c4:	af00      	add	r7, sp, #0
 80161c6:	6078      	str	r0, [r7, #4]
 80161c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80161ca:	683b      	ldr	r3, [r7, #0]
 80161cc:	885b      	ldrh	r3, [r3, #2]
 80161ce:	2b01      	cmp	r3, #1
 80161d0:	d107      	bne.n	80161e2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	2201      	movs	r2, #1
 80161d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80161da:	6878      	ldr	r0, [r7, #4]
 80161dc:	f000 f940 	bl	8016460 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80161e0:	e013      	b.n	801620a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80161e2:	683b      	ldr	r3, [r7, #0]
 80161e4:	885b      	ldrh	r3, [r3, #2]
 80161e6:	2b02      	cmp	r3, #2
 80161e8:	d10b      	bne.n	8016202 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80161ea:	683b      	ldr	r3, [r7, #0]
 80161ec:	889b      	ldrh	r3, [r3, #4]
 80161ee:	0a1b      	lsrs	r3, r3, #8
 80161f0:	b29b      	uxth	r3, r3
 80161f2:	b2da      	uxtb	r2, r3
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80161fa:	6878      	ldr	r0, [r7, #4]
 80161fc:	f000 f930 	bl	8016460 <USBD_CtlSendStatus>
}
 8016200:	e003      	b.n	801620a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8016202:	6839      	ldr	r1, [r7, #0]
 8016204:	6878      	ldr	r0, [r7, #4]
 8016206:	f000 f860 	bl	80162ca <USBD_CtlError>
}
 801620a:	bf00      	nop
 801620c:	3708      	adds	r7, #8
 801620e:	46bd      	mov	sp, r7
 8016210:	bd80      	pop	{r7, pc}

08016212 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016212:	b580      	push	{r7, lr}
 8016214:	b082      	sub	sp, #8
 8016216:	af00      	add	r7, sp, #0
 8016218:	6078      	str	r0, [r7, #4]
 801621a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016222:	b2db      	uxtb	r3, r3
 8016224:	3b01      	subs	r3, #1
 8016226:	2b02      	cmp	r3, #2
 8016228:	d80b      	bhi.n	8016242 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801622a:	683b      	ldr	r3, [r7, #0]
 801622c:	885b      	ldrh	r3, [r3, #2]
 801622e:	2b01      	cmp	r3, #1
 8016230:	d10c      	bne.n	801624c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	2200      	movs	r2, #0
 8016236:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801623a:	6878      	ldr	r0, [r7, #4]
 801623c:	f000 f910 	bl	8016460 <USBD_CtlSendStatus>
      }
      break;
 8016240:	e004      	b.n	801624c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8016242:	6839      	ldr	r1, [r7, #0]
 8016244:	6878      	ldr	r0, [r7, #4]
 8016246:	f000 f840 	bl	80162ca <USBD_CtlError>
      break;
 801624a:	e000      	b.n	801624e <USBD_ClrFeature+0x3c>
      break;
 801624c:	bf00      	nop
  }
}
 801624e:	bf00      	nop
 8016250:	3708      	adds	r7, #8
 8016252:	46bd      	mov	sp, r7
 8016254:	bd80      	pop	{r7, pc}

08016256 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8016256:	b580      	push	{r7, lr}
 8016258:	b084      	sub	sp, #16
 801625a:	af00      	add	r7, sp, #0
 801625c:	6078      	str	r0, [r7, #4]
 801625e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8016260:	683b      	ldr	r3, [r7, #0]
 8016262:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016264:	68fb      	ldr	r3, [r7, #12]
 8016266:	781a      	ldrb	r2, [r3, #0]
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801626c:	68fb      	ldr	r3, [r7, #12]
 801626e:	3301      	adds	r3, #1
 8016270:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8016272:	68fb      	ldr	r3, [r7, #12]
 8016274:	781a      	ldrb	r2, [r3, #0]
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801627a:	68fb      	ldr	r3, [r7, #12]
 801627c:	3301      	adds	r3, #1
 801627e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8016280:	68f8      	ldr	r0, [r7, #12]
 8016282:	f7ff fa41 	bl	8015708 <SWAPBYTE>
 8016286:	4603      	mov	r3, r0
 8016288:	461a      	mov	r2, r3
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801628e:	68fb      	ldr	r3, [r7, #12]
 8016290:	3301      	adds	r3, #1
 8016292:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016294:	68fb      	ldr	r3, [r7, #12]
 8016296:	3301      	adds	r3, #1
 8016298:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801629a:	68f8      	ldr	r0, [r7, #12]
 801629c:	f7ff fa34 	bl	8015708 <SWAPBYTE>
 80162a0:	4603      	mov	r3, r0
 80162a2:	461a      	mov	r2, r3
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	3301      	adds	r3, #1
 80162ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80162ae:	68fb      	ldr	r3, [r7, #12]
 80162b0:	3301      	adds	r3, #1
 80162b2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80162b4:	68f8      	ldr	r0, [r7, #12]
 80162b6:	f7ff fa27 	bl	8015708 <SWAPBYTE>
 80162ba:	4603      	mov	r3, r0
 80162bc:	461a      	mov	r2, r3
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	80da      	strh	r2, [r3, #6]
}
 80162c2:	bf00      	nop
 80162c4:	3710      	adds	r7, #16
 80162c6:	46bd      	mov	sp, r7
 80162c8:	bd80      	pop	{r7, pc}

080162ca <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80162ca:	b580      	push	{r7, lr}
 80162cc:	b082      	sub	sp, #8
 80162ce:	af00      	add	r7, sp, #0
 80162d0:	6078      	str	r0, [r7, #4]
 80162d2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80162d4:	2180      	movs	r1, #128	; 0x80
 80162d6:	6878      	ldr	r0, [r7, #4]
 80162d8:	f000 fd4c 	bl	8016d74 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80162dc:	2100      	movs	r1, #0
 80162de:	6878      	ldr	r0, [r7, #4]
 80162e0:	f000 fd48 	bl	8016d74 <USBD_LL_StallEP>
}
 80162e4:	bf00      	nop
 80162e6:	3708      	adds	r7, #8
 80162e8:	46bd      	mov	sp, r7
 80162ea:	bd80      	pop	{r7, pc}

080162ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80162ec:	b580      	push	{r7, lr}
 80162ee:	b086      	sub	sp, #24
 80162f0:	af00      	add	r7, sp, #0
 80162f2:	60f8      	str	r0, [r7, #12]
 80162f4:	60b9      	str	r1, [r7, #8]
 80162f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80162f8:	2300      	movs	r3, #0
 80162fa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80162fc:	68fb      	ldr	r3, [r7, #12]
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d036      	beq.n	8016370 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8016306:	6938      	ldr	r0, [r7, #16]
 8016308:	f000 f836 	bl	8016378 <USBD_GetLen>
 801630c:	4603      	mov	r3, r0
 801630e:	3301      	adds	r3, #1
 8016310:	b29b      	uxth	r3, r3
 8016312:	005b      	lsls	r3, r3, #1
 8016314:	b29a      	uxth	r2, r3
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801631a:	7dfb      	ldrb	r3, [r7, #23]
 801631c:	68ba      	ldr	r2, [r7, #8]
 801631e:	4413      	add	r3, r2
 8016320:	687a      	ldr	r2, [r7, #4]
 8016322:	7812      	ldrb	r2, [r2, #0]
 8016324:	701a      	strb	r2, [r3, #0]
  idx++;
 8016326:	7dfb      	ldrb	r3, [r7, #23]
 8016328:	3301      	adds	r3, #1
 801632a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801632c:	7dfb      	ldrb	r3, [r7, #23]
 801632e:	68ba      	ldr	r2, [r7, #8]
 8016330:	4413      	add	r3, r2
 8016332:	2203      	movs	r2, #3
 8016334:	701a      	strb	r2, [r3, #0]
  idx++;
 8016336:	7dfb      	ldrb	r3, [r7, #23]
 8016338:	3301      	adds	r3, #1
 801633a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801633c:	e013      	b.n	8016366 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801633e:	7dfb      	ldrb	r3, [r7, #23]
 8016340:	68ba      	ldr	r2, [r7, #8]
 8016342:	4413      	add	r3, r2
 8016344:	693a      	ldr	r2, [r7, #16]
 8016346:	7812      	ldrb	r2, [r2, #0]
 8016348:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801634a:	693b      	ldr	r3, [r7, #16]
 801634c:	3301      	adds	r3, #1
 801634e:	613b      	str	r3, [r7, #16]
    idx++;
 8016350:	7dfb      	ldrb	r3, [r7, #23]
 8016352:	3301      	adds	r3, #1
 8016354:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8016356:	7dfb      	ldrb	r3, [r7, #23]
 8016358:	68ba      	ldr	r2, [r7, #8]
 801635a:	4413      	add	r3, r2
 801635c:	2200      	movs	r2, #0
 801635e:	701a      	strb	r2, [r3, #0]
    idx++;
 8016360:	7dfb      	ldrb	r3, [r7, #23]
 8016362:	3301      	adds	r3, #1
 8016364:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016366:	693b      	ldr	r3, [r7, #16]
 8016368:	781b      	ldrb	r3, [r3, #0]
 801636a:	2b00      	cmp	r3, #0
 801636c:	d1e7      	bne.n	801633e <USBD_GetString+0x52>
 801636e:	e000      	b.n	8016372 <USBD_GetString+0x86>
    return;
 8016370:	bf00      	nop
  }
}
 8016372:	3718      	adds	r7, #24
 8016374:	46bd      	mov	sp, r7
 8016376:	bd80      	pop	{r7, pc}

08016378 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016378:	b480      	push	{r7}
 801637a:	b085      	sub	sp, #20
 801637c:	af00      	add	r7, sp, #0
 801637e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016380:	2300      	movs	r3, #0
 8016382:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016388:	e005      	b.n	8016396 <USBD_GetLen+0x1e>
  {
    len++;
 801638a:	7bfb      	ldrb	r3, [r7, #15]
 801638c:	3301      	adds	r3, #1
 801638e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8016390:	68bb      	ldr	r3, [r7, #8]
 8016392:	3301      	adds	r3, #1
 8016394:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016396:	68bb      	ldr	r3, [r7, #8]
 8016398:	781b      	ldrb	r3, [r3, #0]
 801639a:	2b00      	cmp	r3, #0
 801639c:	d1f5      	bne.n	801638a <USBD_GetLen+0x12>
  }

  return len;
 801639e:	7bfb      	ldrb	r3, [r7, #15]
}
 80163a0:	4618      	mov	r0, r3
 80163a2:	3714      	adds	r7, #20
 80163a4:	46bd      	mov	sp, r7
 80163a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163aa:	4770      	bx	lr

080163ac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80163ac:	b580      	push	{r7, lr}
 80163ae:	b084      	sub	sp, #16
 80163b0:	af00      	add	r7, sp, #0
 80163b2:	60f8      	str	r0, [r7, #12]
 80163b4:	60b9      	str	r1, [r7, #8]
 80163b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80163b8:	68fb      	ldr	r3, [r7, #12]
 80163ba:	2202      	movs	r2, #2
 80163bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	687a      	ldr	r2, [r7, #4]
 80163c4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80163c6:	68fb      	ldr	r3, [r7, #12]
 80163c8:	687a      	ldr	r2, [r7, #4]
 80163ca:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	68ba      	ldr	r2, [r7, #8]
 80163d0:	2100      	movs	r1, #0
 80163d2:	68f8      	ldr	r0, [r7, #12]
 80163d4:	f000 fd57 	bl	8016e86 <USBD_LL_Transmit>

  return USBD_OK;
 80163d8:	2300      	movs	r3, #0
}
 80163da:	4618      	mov	r0, r3
 80163dc:	3710      	adds	r7, #16
 80163de:	46bd      	mov	sp, r7
 80163e0:	bd80      	pop	{r7, pc}

080163e2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80163e2:	b580      	push	{r7, lr}
 80163e4:	b084      	sub	sp, #16
 80163e6:	af00      	add	r7, sp, #0
 80163e8:	60f8      	str	r0, [r7, #12]
 80163ea:	60b9      	str	r1, [r7, #8]
 80163ec:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	68ba      	ldr	r2, [r7, #8]
 80163f2:	2100      	movs	r1, #0
 80163f4:	68f8      	ldr	r0, [r7, #12]
 80163f6:	f000 fd46 	bl	8016e86 <USBD_LL_Transmit>

  return USBD_OK;
 80163fa:	2300      	movs	r3, #0
}
 80163fc:	4618      	mov	r0, r3
 80163fe:	3710      	adds	r7, #16
 8016400:	46bd      	mov	sp, r7
 8016402:	bd80      	pop	{r7, pc}

08016404 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8016404:	b580      	push	{r7, lr}
 8016406:	b084      	sub	sp, #16
 8016408:	af00      	add	r7, sp, #0
 801640a:	60f8      	str	r0, [r7, #12]
 801640c:	60b9      	str	r1, [r7, #8]
 801640e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8016410:	68fb      	ldr	r3, [r7, #12]
 8016412:	2203      	movs	r2, #3
 8016414:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	687a      	ldr	r2, [r7, #4]
 801641c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8016420:	68fb      	ldr	r3, [r7, #12]
 8016422:	687a      	ldr	r2, [r7, #4]
 8016424:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	68ba      	ldr	r2, [r7, #8]
 801642c:	2100      	movs	r1, #0
 801642e:	68f8      	ldr	r0, [r7, #12]
 8016430:	f000 fd4a 	bl	8016ec8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016434:	2300      	movs	r3, #0
}
 8016436:	4618      	mov	r0, r3
 8016438:	3710      	adds	r7, #16
 801643a:	46bd      	mov	sp, r7
 801643c:	bd80      	pop	{r7, pc}

0801643e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801643e:	b580      	push	{r7, lr}
 8016440:	b084      	sub	sp, #16
 8016442:	af00      	add	r7, sp, #0
 8016444:	60f8      	str	r0, [r7, #12]
 8016446:	60b9      	str	r1, [r7, #8]
 8016448:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	68ba      	ldr	r2, [r7, #8]
 801644e:	2100      	movs	r1, #0
 8016450:	68f8      	ldr	r0, [r7, #12]
 8016452:	f000 fd39 	bl	8016ec8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016456:	2300      	movs	r3, #0
}
 8016458:	4618      	mov	r0, r3
 801645a:	3710      	adds	r7, #16
 801645c:	46bd      	mov	sp, r7
 801645e:	bd80      	pop	{r7, pc}

08016460 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016460:	b580      	push	{r7, lr}
 8016462:	b082      	sub	sp, #8
 8016464:	af00      	add	r7, sp, #0
 8016466:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	2204      	movs	r2, #4
 801646c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016470:	2300      	movs	r3, #0
 8016472:	2200      	movs	r2, #0
 8016474:	2100      	movs	r1, #0
 8016476:	6878      	ldr	r0, [r7, #4]
 8016478:	f000 fd05 	bl	8016e86 <USBD_LL_Transmit>

  return USBD_OK;
 801647c:	2300      	movs	r3, #0
}
 801647e:	4618      	mov	r0, r3
 8016480:	3708      	adds	r7, #8
 8016482:	46bd      	mov	sp, r7
 8016484:	bd80      	pop	{r7, pc}

08016486 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016486:	b580      	push	{r7, lr}
 8016488:	b082      	sub	sp, #8
 801648a:	af00      	add	r7, sp, #0
 801648c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	2205      	movs	r2, #5
 8016492:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016496:	2300      	movs	r3, #0
 8016498:	2200      	movs	r2, #0
 801649a:	2100      	movs	r1, #0
 801649c:	6878      	ldr	r0, [r7, #4]
 801649e:	f000 fd13 	bl	8016ec8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80164a2:	2300      	movs	r3, #0
}
 80164a4:	4618      	mov	r0, r3
 80164a6:	3708      	adds	r7, #8
 80164a8:	46bd      	mov	sp, r7
 80164aa:	bd80      	pop	{r7, pc}

080164ac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80164ac:	b480      	push	{r7}
 80164ae:	b087      	sub	sp, #28
 80164b0:	af00      	add	r7, sp, #0
 80164b2:	60f8      	str	r0, [r7, #12]
 80164b4:	60b9      	str	r1, [r7, #8]
 80164b6:	4613      	mov	r3, r2
 80164b8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80164ba:	2301      	movs	r3, #1
 80164bc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80164be:	2300      	movs	r3, #0
 80164c0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80164c2:	4b1f      	ldr	r3, [pc, #124]	; (8016540 <FATFS_LinkDriverEx+0x94>)
 80164c4:	7a5b      	ldrb	r3, [r3, #9]
 80164c6:	b2db      	uxtb	r3, r3
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d131      	bne.n	8016530 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80164cc:	4b1c      	ldr	r3, [pc, #112]	; (8016540 <FATFS_LinkDriverEx+0x94>)
 80164ce:	7a5b      	ldrb	r3, [r3, #9]
 80164d0:	b2db      	uxtb	r3, r3
 80164d2:	461a      	mov	r2, r3
 80164d4:	4b1a      	ldr	r3, [pc, #104]	; (8016540 <FATFS_LinkDriverEx+0x94>)
 80164d6:	2100      	movs	r1, #0
 80164d8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80164da:	4b19      	ldr	r3, [pc, #100]	; (8016540 <FATFS_LinkDriverEx+0x94>)
 80164dc:	7a5b      	ldrb	r3, [r3, #9]
 80164de:	b2db      	uxtb	r3, r3
 80164e0:	4a17      	ldr	r2, [pc, #92]	; (8016540 <FATFS_LinkDriverEx+0x94>)
 80164e2:	009b      	lsls	r3, r3, #2
 80164e4:	4413      	add	r3, r2
 80164e6:	68fa      	ldr	r2, [r7, #12]
 80164e8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80164ea:	4b15      	ldr	r3, [pc, #84]	; (8016540 <FATFS_LinkDriverEx+0x94>)
 80164ec:	7a5b      	ldrb	r3, [r3, #9]
 80164ee:	b2db      	uxtb	r3, r3
 80164f0:	461a      	mov	r2, r3
 80164f2:	4b13      	ldr	r3, [pc, #76]	; (8016540 <FATFS_LinkDriverEx+0x94>)
 80164f4:	4413      	add	r3, r2
 80164f6:	79fa      	ldrb	r2, [r7, #7]
 80164f8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80164fa:	4b11      	ldr	r3, [pc, #68]	; (8016540 <FATFS_LinkDriverEx+0x94>)
 80164fc:	7a5b      	ldrb	r3, [r3, #9]
 80164fe:	b2db      	uxtb	r3, r3
 8016500:	1c5a      	adds	r2, r3, #1
 8016502:	b2d1      	uxtb	r1, r2
 8016504:	4a0e      	ldr	r2, [pc, #56]	; (8016540 <FATFS_LinkDriverEx+0x94>)
 8016506:	7251      	strb	r1, [r2, #9]
 8016508:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801650a:	7dbb      	ldrb	r3, [r7, #22]
 801650c:	3330      	adds	r3, #48	; 0x30
 801650e:	b2da      	uxtb	r2, r3
 8016510:	68bb      	ldr	r3, [r7, #8]
 8016512:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8016514:	68bb      	ldr	r3, [r7, #8]
 8016516:	3301      	adds	r3, #1
 8016518:	223a      	movs	r2, #58	; 0x3a
 801651a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801651c:	68bb      	ldr	r3, [r7, #8]
 801651e:	3302      	adds	r3, #2
 8016520:	222f      	movs	r2, #47	; 0x2f
 8016522:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8016524:	68bb      	ldr	r3, [r7, #8]
 8016526:	3303      	adds	r3, #3
 8016528:	2200      	movs	r2, #0
 801652a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801652c:	2300      	movs	r3, #0
 801652e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8016530:	7dfb      	ldrb	r3, [r7, #23]
}
 8016532:	4618      	mov	r0, r3
 8016534:	371c      	adds	r7, #28
 8016536:	46bd      	mov	sp, r7
 8016538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801653c:	4770      	bx	lr
 801653e:	bf00      	nop
 8016540:	240015e8 	.word	0x240015e8

08016544 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016544:	b580      	push	{r7, lr}
 8016546:	b082      	sub	sp, #8
 8016548:	af00      	add	r7, sp, #0
 801654a:	6078      	str	r0, [r7, #4]
 801654c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801654e:	2200      	movs	r2, #0
 8016550:	6839      	ldr	r1, [r7, #0]
 8016552:	6878      	ldr	r0, [r7, #4]
 8016554:	f7ff ffaa 	bl	80164ac <FATFS_LinkDriverEx>
 8016558:	4603      	mov	r3, r0
}
 801655a:	4618      	mov	r0, r3
 801655c:	3708      	adds	r7, #8
 801655e:	46bd      	mov	sp, r7
 8016560:	bd80      	pop	{r7, pc}
	...

08016564 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016564:	b580      	push	{r7, lr}
 8016566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8016568:	2201      	movs	r2, #1
 801656a:	4913      	ldr	r1, [pc, #76]	; (80165b8 <MX_USB_DEVICE_Init+0x54>)
 801656c:	4813      	ldr	r0, [pc, #76]	; (80165bc <MX_USB_DEVICE_Init+0x58>)
 801656e:	f7fe fca5 	bl	8014ebc <USBD_Init>
 8016572:	4603      	mov	r3, r0
 8016574:	2b00      	cmp	r3, #0
 8016576:	d001      	beq.n	801657c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016578:	f7ec f986 	bl	8002888 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 801657c:	4910      	ldr	r1, [pc, #64]	; (80165c0 <MX_USB_DEVICE_Init+0x5c>)
 801657e:	480f      	ldr	r0, [pc, #60]	; (80165bc <MX_USB_DEVICE_Init+0x58>)
 8016580:	f7fe fccc 	bl	8014f1c <USBD_RegisterClass>
 8016584:	4603      	mov	r3, r0
 8016586:	2b00      	cmp	r3, #0
 8016588:	d001      	beq.n	801658e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801658a:	f7ec f97d 	bl	8002888 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 801658e:	490d      	ldr	r1, [pc, #52]	; (80165c4 <MX_USB_DEVICE_Init+0x60>)
 8016590:	480a      	ldr	r0, [pc, #40]	; (80165bc <MX_USB_DEVICE_Init+0x58>)
 8016592:	f7fe fbc3 	bl	8014d1c <USBD_CDC_RegisterInterface>
 8016596:	4603      	mov	r3, r0
 8016598:	2b00      	cmp	r3, #0
 801659a:	d001      	beq.n	80165a0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801659c:	f7ec f974 	bl	8002888 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 80165a0:	4806      	ldr	r0, [pc, #24]	; (80165bc <MX_USB_DEVICE_Init+0x58>)
 80165a2:	f7fe fcf1 	bl	8014f88 <USBD_Start>
 80165a6:	4603      	mov	r3, r0
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d001      	beq.n	80165b0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80165ac:	f7ec f96c 	bl	8002888 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80165b0:	f7f3 f908 	bl	80097c4 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80165b4:	bf00      	nop
 80165b6:	bd80      	pop	{r7, pc}
 80165b8:	240000b0 	.word	0x240000b0
 80165bc:	240015f4 	.word	0x240015f4
 80165c0:	2400001c 	.word	0x2400001c
 80165c4:	2400009c 	.word	0x2400009c

080165c8 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80165c8:	b580      	push	{r7, lr}
 80165ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80165cc:	2200      	movs	r2, #0
 80165ce:	4905      	ldr	r1, [pc, #20]	; (80165e4 <CDC_Init_HS+0x1c>)
 80165d0:	4805      	ldr	r0, [pc, #20]	; (80165e8 <CDC_Init_HS+0x20>)
 80165d2:	f7fe fbbd 	bl	8014d50 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80165d6:	4905      	ldr	r1, [pc, #20]	; (80165ec <CDC_Init_HS+0x24>)
 80165d8:	4803      	ldr	r0, [pc, #12]	; (80165e8 <CDC_Init_HS+0x20>)
 80165da:	f7fe fbdb 	bl	8014d94 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80165de:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80165e0:	4618      	mov	r0, r3
 80165e2:	bd80      	pop	{r7, pc}
 80165e4:	240020d0 	.word	0x240020d0
 80165e8:	240015f4 	.word	0x240015f4
 80165ec:	240018d0 	.word	0x240018d0

080165f0 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 80165f0:	b480      	push	{r7}
 80165f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 80165f4:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80165f6:	4618      	mov	r0, r3
 80165f8:	46bd      	mov	sp, r7
 80165fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165fe:	4770      	bx	lr

08016600 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016600:	b480      	push	{r7}
 8016602:	b083      	sub	sp, #12
 8016604:	af00      	add	r7, sp, #0
 8016606:	4603      	mov	r3, r0
 8016608:	6039      	str	r1, [r7, #0]
 801660a:	71fb      	strb	r3, [r7, #7]
 801660c:	4613      	mov	r3, r2
 801660e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8016610:	79fb      	ldrb	r3, [r7, #7]
 8016612:	2b23      	cmp	r3, #35	; 0x23
 8016614:	d84a      	bhi.n	80166ac <CDC_Control_HS+0xac>
 8016616:	a201      	add	r2, pc, #4	; (adr r2, 801661c <CDC_Control_HS+0x1c>)
 8016618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801661c:	080166ad 	.word	0x080166ad
 8016620:	080166ad 	.word	0x080166ad
 8016624:	080166ad 	.word	0x080166ad
 8016628:	080166ad 	.word	0x080166ad
 801662c:	080166ad 	.word	0x080166ad
 8016630:	080166ad 	.word	0x080166ad
 8016634:	080166ad 	.word	0x080166ad
 8016638:	080166ad 	.word	0x080166ad
 801663c:	080166ad 	.word	0x080166ad
 8016640:	080166ad 	.word	0x080166ad
 8016644:	080166ad 	.word	0x080166ad
 8016648:	080166ad 	.word	0x080166ad
 801664c:	080166ad 	.word	0x080166ad
 8016650:	080166ad 	.word	0x080166ad
 8016654:	080166ad 	.word	0x080166ad
 8016658:	080166ad 	.word	0x080166ad
 801665c:	080166ad 	.word	0x080166ad
 8016660:	080166ad 	.word	0x080166ad
 8016664:	080166ad 	.word	0x080166ad
 8016668:	080166ad 	.word	0x080166ad
 801666c:	080166ad 	.word	0x080166ad
 8016670:	080166ad 	.word	0x080166ad
 8016674:	080166ad 	.word	0x080166ad
 8016678:	080166ad 	.word	0x080166ad
 801667c:	080166ad 	.word	0x080166ad
 8016680:	080166ad 	.word	0x080166ad
 8016684:	080166ad 	.word	0x080166ad
 8016688:	080166ad 	.word	0x080166ad
 801668c:	080166ad 	.word	0x080166ad
 8016690:	080166ad 	.word	0x080166ad
 8016694:	080166ad 	.word	0x080166ad
 8016698:	080166ad 	.word	0x080166ad
 801669c:	080166ad 	.word	0x080166ad
 80166a0:	080166ad 	.word	0x080166ad
 80166a4:	080166ad 	.word	0x080166ad
 80166a8:	080166ad 	.word	0x080166ad
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80166ac:	bf00      	nop
  }

  return (USBD_OK);
 80166ae:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 80166b0:	4618      	mov	r0, r3
 80166b2:	370c      	adds	r7, #12
 80166b4:	46bd      	mov	sp, r7
 80166b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166ba:	4770      	bx	lr

080166bc <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 80166bc:	b580      	push	{r7, lr}
 80166be:	b084      	sub	sp, #16
 80166c0:	af00      	add	r7, sp, #0
 80166c2:	6078      	str	r0, [r7, #4]
 80166c4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80166c6:	6879      	ldr	r1, [r7, #4]
 80166c8:	480e      	ldr	r0, [pc, #56]	; (8016704 <CDC_Receive_HS+0x48>)
 80166ca:	f7fe fb63 	bl	8014d94 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80166ce:	480d      	ldr	r0, [pc, #52]	; (8016704 <CDC_Receive_HS+0x48>)
 80166d0:	f7fe fbbe 	bl	8014e50 <USBD_CDC_ReceivePacket>

  extern uint8_t usbDataBuffer[usbBufferLen];
  extern uint32_t usbBytesReady;

  uint32_t cpyLen = *Len;
 80166d4:	683b      	ldr	r3, [r7, #0]
 80166d6:	681b      	ldr	r3, [r3, #0]
 80166d8:	60fb      	str	r3, [r7, #12]
  memcpy(usbDataBuffer + usbBytesReady, Buf, cpyLen);
 80166da:	4b0b      	ldr	r3, [pc, #44]	; (8016708 <CDC_Receive_HS+0x4c>)
 80166dc:	681b      	ldr	r3, [r3, #0]
 80166de:	4a0b      	ldr	r2, [pc, #44]	; (801670c <CDC_Receive_HS+0x50>)
 80166e0:	4413      	add	r3, r2
 80166e2:	68fa      	ldr	r2, [r7, #12]
 80166e4:	6879      	ldr	r1, [r7, #4]
 80166e6:	4618      	mov	r0, r3
 80166e8:	f000 fcf0 	bl	80170cc <memcpy>
  usbBytesReady += cpyLen;
 80166ec:	4b06      	ldr	r3, [pc, #24]	; (8016708 <CDC_Receive_HS+0x4c>)
 80166ee:	681a      	ldr	r2, [r3, #0]
 80166f0:	68fb      	ldr	r3, [r7, #12]
 80166f2:	4413      	add	r3, r2
 80166f4:	4a04      	ldr	r2, [pc, #16]	; (8016708 <CDC_Receive_HS+0x4c>)
 80166f6:	6013      	str	r3, [r2, #0]
  
  return (USBD_OK);
 80166f8:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80166fa:	4618      	mov	r0, r3
 80166fc:	3710      	adds	r7, #16
 80166fe:	46bd      	mov	sp, r7
 8016700:	bd80      	pop	{r7, pc}
 8016702:	bf00      	nop
 8016704:	240015f4 	.word	0x240015f4
 8016708:	2400026c 	.word	0x2400026c
 801670c:	2400016c 	.word	0x2400016c

08016710 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8016710:	b580      	push	{r7, lr}
 8016712:	b084      	sub	sp, #16
 8016714:	af00      	add	r7, sp, #0
 8016716:	6078      	str	r0, [r7, #4]
 8016718:	460b      	mov	r3, r1
 801671a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801671c:	2300      	movs	r3, #0
 801671e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8016720:	4b0d      	ldr	r3, [pc, #52]	; (8016758 <CDC_Transmit_HS+0x48>)
 8016722:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016726:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016728:	68bb      	ldr	r3, [r7, #8]
 801672a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801672e:	2b00      	cmp	r3, #0
 8016730:	d001      	beq.n	8016736 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8016732:	2301      	movs	r3, #1
 8016734:	e00b      	b.n	801674e <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8016736:	887b      	ldrh	r3, [r7, #2]
 8016738:	461a      	mov	r2, r3
 801673a:	6879      	ldr	r1, [r7, #4]
 801673c:	4806      	ldr	r0, [pc, #24]	; (8016758 <CDC_Transmit_HS+0x48>)
 801673e:	f7fe fb07 	bl	8014d50 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8016742:	4805      	ldr	r0, [pc, #20]	; (8016758 <CDC_Transmit_HS+0x48>)
 8016744:	f7fe fb44 	bl	8014dd0 <USBD_CDC_TransmitPacket>
 8016748:	4603      	mov	r3, r0
 801674a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 801674c:	7bfb      	ldrb	r3, [r7, #15]
}
 801674e:	4618      	mov	r0, r3
 8016750:	3710      	adds	r7, #16
 8016752:	46bd      	mov	sp, r7
 8016754:	bd80      	pop	{r7, pc}
 8016756:	bf00      	nop
 8016758:	240015f4 	.word	0x240015f4

0801675c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801675c:	b480      	push	{r7}
 801675e:	b087      	sub	sp, #28
 8016760:	af00      	add	r7, sp, #0
 8016762:	60f8      	str	r0, [r7, #12]
 8016764:	60b9      	str	r1, [r7, #8]
 8016766:	4613      	mov	r3, r2
 8016768:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801676a:	2300      	movs	r3, #0
 801676c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801676e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016772:	4618      	mov	r0, r3
 8016774:	371c      	adds	r7, #28
 8016776:	46bd      	mov	sp, r7
 8016778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801677c:	4770      	bx	lr
	...

08016780 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016780:	b480      	push	{r7}
 8016782:	b083      	sub	sp, #12
 8016784:	af00      	add	r7, sp, #0
 8016786:	4603      	mov	r3, r0
 8016788:	6039      	str	r1, [r7, #0]
 801678a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 801678c:	683b      	ldr	r3, [r7, #0]
 801678e:	2212      	movs	r2, #18
 8016790:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8016792:	4b03      	ldr	r3, [pc, #12]	; (80167a0 <USBD_HS_DeviceDescriptor+0x20>)
}
 8016794:	4618      	mov	r0, r3
 8016796:	370c      	adds	r7, #12
 8016798:	46bd      	mov	sp, r7
 801679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801679e:	4770      	bx	lr
 80167a0:	240000cc 	.word	0x240000cc

080167a4 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80167a4:	b480      	push	{r7}
 80167a6:	b083      	sub	sp, #12
 80167a8:	af00      	add	r7, sp, #0
 80167aa:	4603      	mov	r3, r0
 80167ac:	6039      	str	r1, [r7, #0]
 80167ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80167b0:	683b      	ldr	r3, [r7, #0]
 80167b2:	2204      	movs	r2, #4
 80167b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80167b6:	4b03      	ldr	r3, [pc, #12]	; (80167c4 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80167b8:	4618      	mov	r0, r3
 80167ba:	370c      	adds	r7, #12
 80167bc:	46bd      	mov	sp, r7
 80167be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167c2:	4770      	bx	lr
 80167c4:	240000e0 	.word	0x240000e0

080167c8 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80167c8:	b580      	push	{r7, lr}
 80167ca:	b082      	sub	sp, #8
 80167cc:	af00      	add	r7, sp, #0
 80167ce:	4603      	mov	r3, r0
 80167d0:	6039      	str	r1, [r7, #0]
 80167d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80167d4:	79fb      	ldrb	r3, [r7, #7]
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d105      	bne.n	80167e6 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80167da:	683a      	ldr	r2, [r7, #0]
 80167dc:	4907      	ldr	r1, [pc, #28]	; (80167fc <USBD_HS_ProductStrDescriptor+0x34>)
 80167de:	4808      	ldr	r0, [pc, #32]	; (8016800 <USBD_HS_ProductStrDescriptor+0x38>)
 80167e0:	f7ff fd84 	bl	80162ec <USBD_GetString>
 80167e4:	e004      	b.n	80167f0 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80167e6:	683a      	ldr	r2, [r7, #0]
 80167e8:	4904      	ldr	r1, [pc, #16]	; (80167fc <USBD_HS_ProductStrDescriptor+0x34>)
 80167ea:	4805      	ldr	r0, [pc, #20]	; (8016800 <USBD_HS_ProductStrDescriptor+0x38>)
 80167ec:	f7ff fd7e 	bl	80162ec <USBD_GetString>
  }
  return USBD_StrDesc;
 80167f0:	4b02      	ldr	r3, [pc, #8]	; (80167fc <USBD_HS_ProductStrDescriptor+0x34>)
}
 80167f2:	4618      	mov	r0, r3
 80167f4:	3708      	adds	r7, #8
 80167f6:	46bd      	mov	sp, r7
 80167f8:	bd80      	pop	{r7, pc}
 80167fa:	bf00      	nop
 80167fc:	240028d0 	.word	0x240028d0
 8016800:	080183cc 	.word	0x080183cc

08016804 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016804:	b580      	push	{r7, lr}
 8016806:	b082      	sub	sp, #8
 8016808:	af00      	add	r7, sp, #0
 801680a:	4603      	mov	r3, r0
 801680c:	6039      	str	r1, [r7, #0]
 801680e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016810:	683a      	ldr	r2, [r7, #0]
 8016812:	4904      	ldr	r1, [pc, #16]	; (8016824 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8016814:	4804      	ldr	r0, [pc, #16]	; (8016828 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8016816:	f7ff fd69 	bl	80162ec <USBD_GetString>
  return USBD_StrDesc;
 801681a:	4b02      	ldr	r3, [pc, #8]	; (8016824 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 801681c:	4618      	mov	r0, r3
 801681e:	3708      	adds	r7, #8
 8016820:	46bd      	mov	sp, r7
 8016822:	bd80      	pop	{r7, pc}
 8016824:	240028d0 	.word	0x240028d0
 8016828:	080183e8 	.word	0x080183e8

0801682c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801682c:	b580      	push	{r7, lr}
 801682e:	b082      	sub	sp, #8
 8016830:	af00      	add	r7, sp, #0
 8016832:	4603      	mov	r3, r0
 8016834:	6039      	str	r1, [r7, #0]
 8016836:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016838:	683b      	ldr	r3, [r7, #0]
 801683a:	221a      	movs	r2, #26
 801683c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801683e:	f000 f843 	bl	80168c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8016842:	4b02      	ldr	r3, [pc, #8]	; (801684c <USBD_HS_SerialStrDescriptor+0x20>)
}
 8016844:	4618      	mov	r0, r3
 8016846:	3708      	adds	r7, #8
 8016848:	46bd      	mov	sp, r7
 801684a:	bd80      	pop	{r7, pc}
 801684c:	240000e4 	.word	0x240000e4

08016850 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016850:	b580      	push	{r7, lr}
 8016852:	b082      	sub	sp, #8
 8016854:	af00      	add	r7, sp, #0
 8016856:	4603      	mov	r3, r0
 8016858:	6039      	str	r1, [r7, #0]
 801685a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801685c:	79fb      	ldrb	r3, [r7, #7]
 801685e:	2b00      	cmp	r3, #0
 8016860:	d105      	bne.n	801686e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8016862:	683a      	ldr	r2, [r7, #0]
 8016864:	4907      	ldr	r1, [pc, #28]	; (8016884 <USBD_HS_ConfigStrDescriptor+0x34>)
 8016866:	4808      	ldr	r0, [pc, #32]	; (8016888 <USBD_HS_ConfigStrDescriptor+0x38>)
 8016868:	f7ff fd40 	bl	80162ec <USBD_GetString>
 801686c:	e004      	b.n	8016878 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801686e:	683a      	ldr	r2, [r7, #0]
 8016870:	4904      	ldr	r1, [pc, #16]	; (8016884 <USBD_HS_ConfigStrDescriptor+0x34>)
 8016872:	4805      	ldr	r0, [pc, #20]	; (8016888 <USBD_HS_ConfigStrDescriptor+0x38>)
 8016874:	f7ff fd3a 	bl	80162ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8016878:	4b02      	ldr	r3, [pc, #8]	; (8016884 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801687a:	4618      	mov	r0, r3
 801687c:	3708      	adds	r7, #8
 801687e:	46bd      	mov	sp, r7
 8016880:	bd80      	pop	{r7, pc}
 8016882:	bf00      	nop
 8016884:	240028d0 	.word	0x240028d0
 8016888:	080183ec 	.word	0x080183ec

0801688c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801688c:	b580      	push	{r7, lr}
 801688e:	b082      	sub	sp, #8
 8016890:	af00      	add	r7, sp, #0
 8016892:	4603      	mov	r3, r0
 8016894:	6039      	str	r1, [r7, #0]
 8016896:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016898:	79fb      	ldrb	r3, [r7, #7]
 801689a:	2b00      	cmp	r3, #0
 801689c:	d105      	bne.n	80168aa <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801689e:	683a      	ldr	r2, [r7, #0]
 80168a0:	4907      	ldr	r1, [pc, #28]	; (80168c0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80168a2:	4808      	ldr	r0, [pc, #32]	; (80168c4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80168a4:	f7ff fd22 	bl	80162ec <USBD_GetString>
 80168a8:	e004      	b.n	80168b4 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80168aa:	683a      	ldr	r2, [r7, #0]
 80168ac:	4904      	ldr	r1, [pc, #16]	; (80168c0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80168ae:	4805      	ldr	r0, [pc, #20]	; (80168c4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80168b0:	f7ff fd1c 	bl	80162ec <USBD_GetString>
  }
  return USBD_StrDesc;
 80168b4:	4b02      	ldr	r3, [pc, #8]	; (80168c0 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 80168b6:	4618      	mov	r0, r3
 80168b8:	3708      	adds	r7, #8
 80168ba:	46bd      	mov	sp, r7
 80168bc:	bd80      	pop	{r7, pc}
 80168be:	bf00      	nop
 80168c0:	240028d0 	.word	0x240028d0
 80168c4:	080183f8 	.word	0x080183f8

080168c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80168c8:	b580      	push	{r7, lr}
 80168ca:	b084      	sub	sp, #16
 80168cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80168ce:	4b0f      	ldr	r3, [pc, #60]	; (801690c <Get_SerialNum+0x44>)
 80168d0:	681b      	ldr	r3, [r3, #0]
 80168d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80168d4:	4b0e      	ldr	r3, [pc, #56]	; (8016910 <Get_SerialNum+0x48>)
 80168d6:	681b      	ldr	r3, [r3, #0]
 80168d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80168da:	4b0e      	ldr	r3, [pc, #56]	; (8016914 <Get_SerialNum+0x4c>)
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80168e0:	68fa      	ldr	r2, [r7, #12]
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	4413      	add	r3, r2
 80168e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80168e8:	68fb      	ldr	r3, [r7, #12]
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d009      	beq.n	8016902 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80168ee:	2208      	movs	r2, #8
 80168f0:	4909      	ldr	r1, [pc, #36]	; (8016918 <Get_SerialNum+0x50>)
 80168f2:	68f8      	ldr	r0, [r7, #12]
 80168f4:	f000 f814 	bl	8016920 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80168f8:	2204      	movs	r2, #4
 80168fa:	4908      	ldr	r1, [pc, #32]	; (801691c <Get_SerialNum+0x54>)
 80168fc:	68b8      	ldr	r0, [r7, #8]
 80168fe:	f000 f80f 	bl	8016920 <IntToUnicode>
  }
}
 8016902:	bf00      	nop
 8016904:	3710      	adds	r7, #16
 8016906:	46bd      	mov	sp, r7
 8016908:	bd80      	pop	{r7, pc}
 801690a:	bf00      	nop
 801690c:	1ff1e800 	.word	0x1ff1e800
 8016910:	1ff1e804 	.word	0x1ff1e804
 8016914:	1ff1e808 	.word	0x1ff1e808
 8016918:	240000e6 	.word	0x240000e6
 801691c:	240000f6 	.word	0x240000f6

08016920 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016920:	b480      	push	{r7}
 8016922:	b087      	sub	sp, #28
 8016924:	af00      	add	r7, sp, #0
 8016926:	60f8      	str	r0, [r7, #12]
 8016928:	60b9      	str	r1, [r7, #8]
 801692a:	4613      	mov	r3, r2
 801692c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801692e:	2300      	movs	r3, #0
 8016930:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016932:	2300      	movs	r3, #0
 8016934:	75fb      	strb	r3, [r7, #23]
 8016936:	e027      	b.n	8016988 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016938:	68fb      	ldr	r3, [r7, #12]
 801693a:	0f1b      	lsrs	r3, r3, #28
 801693c:	2b09      	cmp	r3, #9
 801693e:	d80b      	bhi.n	8016958 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016940:	68fb      	ldr	r3, [r7, #12]
 8016942:	0f1b      	lsrs	r3, r3, #28
 8016944:	b2da      	uxtb	r2, r3
 8016946:	7dfb      	ldrb	r3, [r7, #23]
 8016948:	005b      	lsls	r3, r3, #1
 801694a:	4619      	mov	r1, r3
 801694c:	68bb      	ldr	r3, [r7, #8]
 801694e:	440b      	add	r3, r1
 8016950:	3230      	adds	r2, #48	; 0x30
 8016952:	b2d2      	uxtb	r2, r2
 8016954:	701a      	strb	r2, [r3, #0]
 8016956:	e00a      	b.n	801696e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016958:	68fb      	ldr	r3, [r7, #12]
 801695a:	0f1b      	lsrs	r3, r3, #28
 801695c:	b2da      	uxtb	r2, r3
 801695e:	7dfb      	ldrb	r3, [r7, #23]
 8016960:	005b      	lsls	r3, r3, #1
 8016962:	4619      	mov	r1, r3
 8016964:	68bb      	ldr	r3, [r7, #8]
 8016966:	440b      	add	r3, r1
 8016968:	3237      	adds	r2, #55	; 0x37
 801696a:	b2d2      	uxtb	r2, r2
 801696c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801696e:	68fb      	ldr	r3, [r7, #12]
 8016970:	011b      	lsls	r3, r3, #4
 8016972:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016974:	7dfb      	ldrb	r3, [r7, #23]
 8016976:	005b      	lsls	r3, r3, #1
 8016978:	3301      	adds	r3, #1
 801697a:	68ba      	ldr	r2, [r7, #8]
 801697c:	4413      	add	r3, r2
 801697e:	2200      	movs	r2, #0
 8016980:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016982:	7dfb      	ldrb	r3, [r7, #23]
 8016984:	3301      	adds	r3, #1
 8016986:	75fb      	strb	r3, [r7, #23]
 8016988:	7dfa      	ldrb	r2, [r7, #23]
 801698a:	79fb      	ldrb	r3, [r7, #7]
 801698c:	429a      	cmp	r2, r3
 801698e:	d3d3      	bcc.n	8016938 <IntToUnicode+0x18>
  }
}
 8016990:	bf00      	nop
 8016992:	bf00      	nop
 8016994:	371c      	adds	r7, #28
 8016996:	46bd      	mov	sp, r7
 8016998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801699c:	4770      	bx	lr
	...

080169a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80169a0:	b580      	push	{r7, lr}
 80169a2:	b0b2      	sub	sp, #200	; 0xc8
 80169a4:	af00      	add	r7, sp, #0
 80169a6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80169a8:	f107 0310 	add.w	r3, r7, #16
 80169ac:	22b8      	movs	r2, #184	; 0xb8
 80169ae:	2100      	movs	r1, #0
 80169b0:	4618      	mov	r0, r3
 80169b2:	f000 fb4f 	bl	8017054 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	681b      	ldr	r3, [r3, #0]
 80169ba:	4a1a      	ldr	r2, [pc, #104]	; (8016a24 <HAL_PCD_MspInit+0x84>)
 80169bc:	4293      	cmp	r3, r2
 80169be:	d12c      	bne.n	8016a1a <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80169c0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80169c4:	f04f 0300 	mov.w	r3, #0
 80169c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80169cc:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80169d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80169d4:	f107 0310 	add.w	r3, r7, #16
 80169d8:	4618      	mov	r0, r3
 80169da:	f7f3 fed3 	bl	800a784 <HAL_RCCEx_PeriphCLKConfig>
 80169de:	4603      	mov	r3, r0
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d001      	beq.n	80169e8 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 80169e4:	f7eb ff50 	bl	8002888 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80169e8:	f7f2 feec 	bl	80097c4 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80169ec:	4b0e      	ldr	r3, [pc, #56]	; (8016a28 <HAL_PCD_MspInit+0x88>)
 80169ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80169f2:	4a0d      	ldr	r2, [pc, #52]	; (8016a28 <HAL_PCD_MspInit+0x88>)
 80169f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80169f8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80169fc:	4b0a      	ldr	r3, [pc, #40]	; (8016a28 <HAL_PCD_MspInit+0x88>)
 80169fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016a06:	60fb      	str	r3, [r7, #12]
 8016a08:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8016a0a:	2200      	movs	r2, #0
 8016a0c:	2100      	movs	r1, #0
 8016a0e:	204d      	movs	r0, #77	; 0x4d
 8016a10:	f7ee fc5d 	bl	80052ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8016a14:	204d      	movs	r0, #77	; 0x4d
 8016a16:	f7ee fc74 	bl	8005302 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8016a1a:	bf00      	nop
 8016a1c:	37c8      	adds	r7, #200	; 0xc8
 8016a1e:	46bd      	mov	sp, r7
 8016a20:	bd80      	pop	{r7, pc}
 8016a22:	bf00      	nop
 8016a24:	40040000 	.word	0x40040000
 8016a28:	58024400 	.word	0x58024400

08016a2c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a2c:	b580      	push	{r7, lr}
 8016a2e:	b082      	sub	sp, #8
 8016a30:	af00      	add	r7, sp, #0
 8016a32:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8016a40:	4619      	mov	r1, r3
 8016a42:	4610      	mov	r0, r2
 8016a44:	f7fe faed 	bl	8015022 <USBD_LL_SetupStage>
}
 8016a48:	bf00      	nop
 8016a4a:	3708      	adds	r7, #8
 8016a4c:	46bd      	mov	sp, r7
 8016a4e:	bd80      	pop	{r7, pc}

08016a50 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a50:	b580      	push	{r7, lr}
 8016a52:	b082      	sub	sp, #8
 8016a54:	af00      	add	r7, sp, #0
 8016a56:	6078      	str	r0, [r7, #4]
 8016a58:	460b      	mov	r3, r1
 8016a5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016a62:	78fa      	ldrb	r2, [r7, #3]
 8016a64:	6879      	ldr	r1, [r7, #4]
 8016a66:	4613      	mov	r3, r2
 8016a68:	00db      	lsls	r3, r3, #3
 8016a6a:	4413      	add	r3, r2
 8016a6c:	009b      	lsls	r3, r3, #2
 8016a6e:	440b      	add	r3, r1
 8016a70:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8016a74:	681a      	ldr	r2, [r3, #0]
 8016a76:	78fb      	ldrb	r3, [r7, #3]
 8016a78:	4619      	mov	r1, r3
 8016a7a:	f7fe fb27 	bl	80150cc <USBD_LL_DataOutStage>
}
 8016a7e:	bf00      	nop
 8016a80:	3708      	adds	r7, #8
 8016a82:	46bd      	mov	sp, r7
 8016a84:	bd80      	pop	{r7, pc}

08016a86 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a86:	b580      	push	{r7, lr}
 8016a88:	b082      	sub	sp, #8
 8016a8a:	af00      	add	r7, sp, #0
 8016a8c:	6078      	str	r0, [r7, #4]
 8016a8e:	460b      	mov	r3, r1
 8016a90:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016a98:	78fa      	ldrb	r2, [r7, #3]
 8016a9a:	6879      	ldr	r1, [r7, #4]
 8016a9c:	4613      	mov	r3, r2
 8016a9e:	00db      	lsls	r3, r3, #3
 8016aa0:	4413      	add	r3, r2
 8016aa2:	009b      	lsls	r3, r3, #2
 8016aa4:	440b      	add	r3, r1
 8016aa6:	3348      	adds	r3, #72	; 0x48
 8016aa8:	681a      	ldr	r2, [r3, #0]
 8016aaa:	78fb      	ldrb	r3, [r7, #3]
 8016aac:	4619      	mov	r1, r3
 8016aae:	f7fe fbc0 	bl	8015232 <USBD_LL_DataInStage>
}
 8016ab2:	bf00      	nop
 8016ab4:	3708      	adds	r7, #8
 8016ab6:	46bd      	mov	sp, r7
 8016ab8:	bd80      	pop	{r7, pc}

08016aba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016aba:	b580      	push	{r7, lr}
 8016abc:	b082      	sub	sp, #8
 8016abe:	af00      	add	r7, sp, #0
 8016ac0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016ac8:	4618      	mov	r0, r3
 8016aca:	f7fe fcfa 	bl	80154c2 <USBD_LL_SOF>
}
 8016ace:	bf00      	nop
 8016ad0:	3708      	adds	r7, #8
 8016ad2:	46bd      	mov	sp, r7
 8016ad4:	bd80      	pop	{r7, pc}

08016ad6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ad6:	b580      	push	{r7, lr}
 8016ad8:	b084      	sub	sp, #16
 8016ada:	af00      	add	r7, sp, #0
 8016adc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016ade:	2301      	movs	r3, #1
 8016ae0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	691b      	ldr	r3, [r3, #16]
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	d102      	bne.n	8016af0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8016aea:	2300      	movs	r3, #0
 8016aec:	73fb      	strb	r3, [r7, #15]
 8016aee:	e008      	b.n	8016b02 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	691b      	ldr	r3, [r3, #16]
 8016af4:	2b02      	cmp	r3, #2
 8016af6:	d102      	bne.n	8016afe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016af8:	2301      	movs	r3, #1
 8016afa:	73fb      	strb	r3, [r7, #15]
 8016afc:	e001      	b.n	8016b02 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8016afe:	f7eb fec3 	bl	8002888 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016b08:	7bfa      	ldrb	r2, [r7, #15]
 8016b0a:	4611      	mov	r1, r2
 8016b0c:	4618      	mov	r0, r3
 8016b0e:	f7fe fc94 	bl	801543a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016b18:	4618      	mov	r0, r3
 8016b1a:	f7fe fc3c 	bl	8015396 <USBD_LL_Reset>
}
 8016b1e:	bf00      	nop
 8016b20:	3710      	adds	r7, #16
 8016b22:	46bd      	mov	sp, r7
 8016b24:	bd80      	pop	{r7, pc}
	...

08016b28 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b28:	b580      	push	{r7, lr}
 8016b2a:	b082      	sub	sp, #8
 8016b2c:	af00      	add	r7, sp, #0
 8016b2e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016b36:	4618      	mov	r0, r3
 8016b38:	f7fe fc8f 	bl	801545a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	681b      	ldr	r3, [r3, #0]
 8016b40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016b44:	681b      	ldr	r3, [r3, #0]
 8016b46:	687a      	ldr	r2, [r7, #4]
 8016b48:	6812      	ldr	r2, [r2, #0]
 8016b4a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016b4e:	f043 0301 	orr.w	r3, r3, #1
 8016b52:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	6a1b      	ldr	r3, [r3, #32]
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	d005      	beq.n	8016b68 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016b5c:	4b04      	ldr	r3, [pc, #16]	; (8016b70 <HAL_PCD_SuspendCallback+0x48>)
 8016b5e:	691b      	ldr	r3, [r3, #16]
 8016b60:	4a03      	ldr	r2, [pc, #12]	; (8016b70 <HAL_PCD_SuspendCallback+0x48>)
 8016b62:	f043 0306 	orr.w	r3, r3, #6
 8016b66:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016b68:	bf00      	nop
 8016b6a:	3708      	adds	r7, #8
 8016b6c:	46bd      	mov	sp, r7
 8016b6e:	bd80      	pop	{r7, pc}
 8016b70:	e000ed00 	.word	0xe000ed00

08016b74 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b74:	b580      	push	{r7, lr}
 8016b76:	b082      	sub	sp, #8
 8016b78:	af00      	add	r7, sp, #0
 8016b7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016b82:	4618      	mov	r0, r3
 8016b84:	f7fe fc85 	bl	8015492 <USBD_LL_Resume>
}
 8016b88:	bf00      	nop
 8016b8a:	3708      	adds	r7, #8
 8016b8c:	46bd      	mov	sp, r7
 8016b8e:	bd80      	pop	{r7, pc}

08016b90 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b90:	b580      	push	{r7, lr}
 8016b92:	b082      	sub	sp, #8
 8016b94:	af00      	add	r7, sp, #0
 8016b96:	6078      	str	r0, [r7, #4]
 8016b98:	460b      	mov	r3, r1
 8016b9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016ba2:	78fa      	ldrb	r2, [r7, #3]
 8016ba4:	4611      	mov	r1, r2
 8016ba6:	4618      	mov	r0, r3
 8016ba8:	f7fe fcdd 	bl	8015566 <USBD_LL_IsoOUTIncomplete>
}
 8016bac:	bf00      	nop
 8016bae:	3708      	adds	r7, #8
 8016bb0:	46bd      	mov	sp, r7
 8016bb2:	bd80      	pop	{r7, pc}

08016bb4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016bb4:	b580      	push	{r7, lr}
 8016bb6:	b082      	sub	sp, #8
 8016bb8:	af00      	add	r7, sp, #0
 8016bba:	6078      	str	r0, [r7, #4]
 8016bbc:	460b      	mov	r3, r1
 8016bbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016bc6:	78fa      	ldrb	r2, [r7, #3]
 8016bc8:	4611      	mov	r1, r2
 8016bca:	4618      	mov	r0, r3
 8016bcc:	f7fe fc99 	bl	8015502 <USBD_LL_IsoINIncomplete>
}
 8016bd0:	bf00      	nop
 8016bd2:	3708      	adds	r7, #8
 8016bd4:	46bd      	mov	sp, r7
 8016bd6:	bd80      	pop	{r7, pc}

08016bd8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016bd8:	b580      	push	{r7, lr}
 8016bda:	b082      	sub	sp, #8
 8016bdc:	af00      	add	r7, sp, #0
 8016bde:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016be6:	4618      	mov	r0, r3
 8016be8:	f7fe fcef 	bl	80155ca <USBD_LL_DevConnected>
}
 8016bec:	bf00      	nop
 8016bee:	3708      	adds	r7, #8
 8016bf0:	46bd      	mov	sp, r7
 8016bf2:	bd80      	pop	{r7, pc}

08016bf4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016bf4:	b580      	push	{r7, lr}
 8016bf6:	b082      	sub	sp, #8
 8016bf8:	af00      	add	r7, sp, #0
 8016bfa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016c02:	4618      	mov	r0, r3
 8016c04:	f7fe fcec 	bl	80155e0 <USBD_LL_DevDisconnected>
}
 8016c08:	bf00      	nop
 8016c0a:	3708      	adds	r7, #8
 8016c0c:	46bd      	mov	sp, r7
 8016c0e:	bd80      	pop	{r7, pc}

08016c10 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016c10:	b580      	push	{r7, lr}
 8016c12:	b082      	sub	sp, #8
 8016c14:	af00      	add	r7, sp, #0
 8016c16:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	781b      	ldrb	r3, [r3, #0]
 8016c1c:	2b01      	cmp	r3, #1
 8016c1e:	d140      	bne.n	8016ca2 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8016c20:	4a22      	ldr	r2, [pc, #136]	; (8016cac <USBD_LL_Init+0x9c>)
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	4a20      	ldr	r2, [pc, #128]	; (8016cac <USBD_LL_Init+0x9c>)
 8016c2c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8016c30:	4b1e      	ldr	r3, [pc, #120]	; (8016cac <USBD_LL_Init+0x9c>)
 8016c32:	4a1f      	ldr	r2, [pc, #124]	; (8016cb0 <USBD_LL_Init+0xa0>)
 8016c34:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8016c36:	4b1d      	ldr	r3, [pc, #116]	; (8016cac <USBD_LL_Init+0x9c>)
 8016c38:	2209      	movs	r2, #9
 8016c3a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8016c3c:	4b1b      	ldr	r3, [pc, #108]	; (8016cac <USBD_LL_Init+0x9c>)
 8016c3e:	2202      	movs	r2, #2
 8016c40:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8016c42:	4b1a      	ldr	r3, [pc, #104]	; (8016cac <USBD_LL_Init+0x9c>)
 8016c44:	2200      	movs	r2, #0
 8016c46:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8016c48:	4b18      	ldr	r3, [pc, #96]	; (8016cac <USBD_LL_Init+0x9c>)
 8016c4a:	2202      	movs	r2, #2
 8016c4c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8016c4e:	4b17      	ldr	r3, [pc, #92]	; (8016cac <USBD_LL_Init+0x9c>)
 8016c50:	2200      	movs	r2, #0
 8016c52:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8016c54:	4b15      	ldr	r3, [pc, #84]	; (8016cac <USBD_LL_Init+0x9c>)
 8016c56:	2200      	movs	r2, #0
 8016c58:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8016c5a:	4b14      	ldr	r3, [pc, #80]	; (8016cac <USBD_LL_Init+0x9c>)
 8016c5c:	2200      	movs	r2, #0
 8016c5e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8016c60:	4b12      	ldr	r3, [pc, #72]	; (8016cac <USBD_LL_Init+0x9c>)
 8016c62:	2200      	movs	r2, #0
 8016c64:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8016c66:	4b11      	ldr	r3, [pc, #68]	; (8016cac <USBD_LL_Init+0x9c>)
 8016c68:	2200      	movs	r2, #0
 8016c6a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8016c6c:	4b0f      	ldr	r3, [pc, #60]	; (8016cac <USBD_LL_Init+0x9c>)
 8016c6e:	2200      	movs	r2, #0
 8016c70:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8016c72:	480e      	ldr	r0, [pc, #56]	; (8016cac <USBD_LL_Init+0x9c>)
 8016c74:	f7f1 fab3 	bl	80081de <HAL_PCD_Init>
 8016c78:	4603      	mov	r3, r0
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	d001      	beq.n	8016c82 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8016c7e:	f7eb fe03 	bl	8002888 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8016c82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8016c86:	4809      	ldr	r0, [pc, #36]	; (8016cac <USBD_LL_Init+0x9c>)
 8016c88:	f7f2 fd21 	bl	80096ce <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8016c8c:	2280      	movs	r2, #128	; 0x80
 8016c8e:	2100      	movs	r1, #0
 8016c90:	4806      	ldr	r0, [pc, #24]	; (8016cac <USBD_LL_Init+0x9c>)
 8016c92:	f7f2 fcd5 	bl	8009640 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8016c96:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8016c9a:	2101      	movs	r1, #1
 8016c9c:	4803      	ldr	r0, [pc, #12]	; (8016cac <USBD_LL_Init+0x9c>)
 8016c9e:	f7f2 fccf 	bl	8009640 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8016ca2:	2300      	movs	r3, #0
}
 8016ca4:	4618      	mov	r0, r3
 8016ca6:	3708      	adds	r7, #8
 8016ca8:	46bd      	mov	sp, r7
 8016caa:	bd80      	pop	{r7, pc}
 8016cac:	24002ad0 	.word	0x24002ad0
 8016cb0:	40040000 	.word	0x40040000

08016cb4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016cb4:	b580      	push	{r7, lr}
 8016cb6:	b084      	sub	sp, #16
 8016cb8:	af00      	add	r7, sp, #0
 8016cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016cbc:	2300      	movs	r3, #0
 8016cbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016cc0:	2300      	movs	r3, #0
 8016cc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016cca:	4618      	mov	r0, r3
 8016ccc:	f7f1 fbab 	bl	8008426 <HAL_PCD_Start>
 8016cd0:	4603      	mov	r3, r0
 8016cd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016cd4:	7bfb      	ldrb	r3, [r7, #15]
 8016cd6:	4618      	mov	r0, r3
 8016cd8:	f000 f942 	bl	8016f60 <USBD_Get_USB_Status>
 8016cdc:	4603      	mov	r3, r0
 8016cde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016ce0:	7bbb      	ldrb	r3, [r7, #14]
}
 8016ce2:	4618      	mov	r0, r3
 8016ce4:	3710      	adds	r7, #16
 8016ce6:	46bd      	mov	sp, r7
 8016ce8:	bd80      	pop	{r7, pc}

08016cea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016cea:	b580      	push	{r7, lr}
 8016cec:	b084      	sub	sp, #16
 8016cee:	af00      	add	r7, sp, #0
 8016cf0:	6078      	str	r0, [r7, #4]
 8016cf2:	4608      	mov	r0, r1
 8016cf4:	4611      	mov	r1, r2
 8016cf6:	461a      	mov	r2, r3
 8016cf8:	4603      	mov	r3, r0
 8016cfa:	70fb      	strb	r3, [r7, #3]
 8016cfc:	460b      	mov	r3, r1
 8016cfe:	70bb      	strb	r3, [r7, #2]
 8016d00:	4613      	mov	r3, r2
 8016d02:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d04:	2300      	movs	r3, #0
 8016d06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d08:	2300      	movs	r3, #0
 8016d0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016d12:	78bb      	ldrb	r3, [r7, #2]
 8016d14:	883a      	ldrh	r2, [r7, #0]
 8016d16:	78f9      	ldrb	r1, [r7, #3]
 8016d18:	f7f2 f8ab 	bl	8008e72 <HAL_PCD_EP_Open>
 8016d1c:	4603      	mov	r3, r0
 8016d1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d20:	7bfb      	ldrb	r3, [r7, #15]
 8016d22:	4618      	mov	r0, r3
 8016d24:	f000 f91c 	bl	8016f60 <USBD_Get_USB_Status>
 8016d28:	4603      	mov	r3, r0
 8016d2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016d2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8016d2e:	4618      	mov	r0, r3
 8016d30:	3710      	adds	r7, #16
 8016d32:	46bd      	mov	sp, r7
 8016d34:	bd80      	pop	{r7, pc}

08016d36 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016d36:	b580      	push	{r7, lr}
 8016d38:	b084      	sub	sp, #16
 8016d3a:	af00      	add	r7, sp, #0
 8016d3c:	6078      	str	r0, [r7, #4]
 8016d3e:	460b      	mov	r3, r1
 8016d40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d42:	2300      	movs	r3, #0
 8016d44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d46:	2300      	movs	r3, #0
 8016d48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016d50:	78fa      	ldrb	r2, [r7, #3]
 8016d52:	4611      	mov	r1, r2
 8016d54:	4618      	mov	r0, r3
 8016d56:	f7f2 f8f4 	bl	8008f42 <HAL_PCD_EP_Close>
 8016d5a:	4603      	mov	r3, r0
 8016d5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d5e:	7bfb      	ldrb	r3, [r7, #15]
 8016d60:	4618      	mov	r0, r3
 8016d62:	f000 f8fd 	bl	8016f60 <USBD_Get_USB_Status>
 8016d66:	4603      	mov	r3, r0
 8016d68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016d6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8016d6c:	4618      	mov	r0, r3
 8016d6e:	3710      	adds	r7, #16
 8016d70:	46bd      	mov	sp, r7
 8016d72:	bd80      	pop	{r7, pc}

08016d74 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016d74:	b580      	push	{r7, lr}
 8016d76:	b084      	sub	sp, #16
 8016d78:	af00      	add	r7, sp, #0
 8016d7a:	6078      	str	r0, [r7, #4]
 8016d7c:	460b      	mov	r3, r1
 8016d7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d80:	2300      	movs	r3, #0
 8016d82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d84:	2300      	movs	r3, #0
 8016d86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016d8e:	78fa      	ldrb	r2, [r7, #3]
 8016d90:	4611      	mov	r1, r2
 8016d92:	4618      	mov	r0, r3
 8016d94:	f7f2 f9ae 	bl	80090f4 <HAL_PCD_EP_SetStall>
 8016d98:	4603      	mov	r3, r0
 8016d9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d9c:	7bfb      	ldrb	r3, [r7, #15]
 8016d9e:	4618      	mov	r0, r3
 8016da0:	f000 f8de 	bl	8016f60 <USBD_Get_USB_Status>
 8016da4:	4603      	mov	r3, r0
 8016da6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016da8:	7bbb      	ldrb	r3, [r7, #14]
}
 8016daa:	4618      	mov	r0, r3
 8016dac:	3710      	adds	r7, #16
 8016dae:	46bd      	mov	sp, r7
 8016db0:	bd80      	pop	{r7, pc}

08016db2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016db2:	b580      	push	{r7, lr}
 8016db4:	b084      	sub	sp, #16
 8016db6:	af00      	add	r7, sp, #0
 8016db8:	6078      	str	r0, [r7, #4]
 8016dba:	460b      	mov	r3, r1
 8016dbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016dbe:	2300      	movs	r3, #0
 8016dc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016dc2:	2300      	movs	r3, #0
 8016dc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016dcc:	78fa      	ldrb	r2, [r7, #3]
 8016dce:	4611      	mov	r1, r2
 8016dd0:	4618      	mov	r0, r3
 8016dd2:	f7f2 f9f3 	bl	80091bc <HAL_PCD_EP_ClrStall>
 8016dd6:	4603      	mov	r3, r0
 8016dd8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016dda:	7bfb      	ldrb	r3, [r7, #15]
 8016ddc:	4618      	mov	r0, r3
 8016dde:	f000 f8bf 	bl	8016f60 <USBD_Get_USB_Status>
 8016de2:	4603      	mov	r3, r0
 8016de4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016de6:	7bbb      	ldrb	r3, [r7, #14]
}
 8016de8:	4618      	mov	r0, r3
 8016dea:	3710      	adds	r7, #16
 8016dec:	46bd      	mov	sp, r7
 8016dee:	bd80      	pop	{r7, pc}

08016df0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016df0:	b480      	push	{r7}
 8016df2:	b085      	sub	sp, #20
 8016df4:	af00      	add	r7, sp, #0
 8016df6:	6078      	str	r0, [r7, #4]
 8016df8:	460b      	mov	r3, r1
 8016dfa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016e02:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016e04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	da0b      	bge.n	8016e24 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016e0c:	78fb      	ldrb	r3, [r7, #3]
 8016e0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016e12:	68f9      	ldr	r1, [r7, #12]
 8016e14:	4613      	mov	r3, r2
 8016e16:	00db      	lsls	r3, r3, #3
 8016e18:	4413      	add	r3, r2
 8016e1a:	009b      	lsls	r3, r3, #2
 8016e1c:	440b      	add	r3, r1
 8016e1e:	333e      	adds	r3, #62	; 0x3e
 8016e20:	781b      	ldrb	r3, [r3, #0]
 8016e22:	e00b      	b.n	8016e3c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016e24:	78fb      	ldrb	r3, [r7, #3]
 8016e26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016e2a:	68f9      	ldr	r1, [r7, #12]
 8016e2c:	4613      	mov	r3, r2
 8016e2e:	00db      	lsls	r3, r3, #3
 8016e30:	4413      	add	r3, r2
 8016e32:	009b      	lsls	r3, r3, #2
 8016e34:	440b      	add	r3, r1
 8016e36:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8016e3a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016e3c:	4618      	mov	r0, r3
 8016e3e:	3714      	adds	r7, #20
 8016e40:	46bd      	mov	sp, r7
 8016e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e46:	4770      	bx	lr

08016e48 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016e48:	b580      	push	{r7, lr}
 8016e4a:	b084      	sub	sp, #16
 8016e4c:	af00      	add	r7, sp, #0
 8016e4e:	6078      	str	r0, [r7, #4]
 8016e50:	460b      	mov	r3, r1
 8016e52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e54:	2300      	movs	r3, #0
 8016e56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e58:	2300      	movs	r3, #0
 8016e5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016e62:	78fa      	ldrb	r2, [r7, #3]
 8016e64:	4611      	mov	r1, r2
 8016e66:	4618      	mov	r0, r3
 8016e68:	f7f1 ffde 	bl	8008e28 <HAL_PCD_SetAddress>
 8016e6c:	4603      	mov	r3, r0
 8016e6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e70:	7bfb      	ldrb	r3, [r7, #15]
 8016e72:	4618      	mov	r0, r3
 8016e74:	f000 f874 	bl	8016f60 <USBD_Get_USB_Status>
 8016e78:	4603      	mov	r3, r0
 8016e7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016e7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8016e7e:	4618      	mov	r0, r3
 8016e80:	3710      	adds	r7, #16
 8016e82:	46bd      	mov	sp, r7
 8016e84:	bd80      	pop	{r7, pc}

08016e86 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016e86:	b580      	push	{r7, lr}
 8016e88:	b086      	sub	sp, #24
 8016e8a:	af00      	add	r7, sp, #0
 8016e8c:	60f8      	str	r0, [r7, #12]
 8016e8e:	607a      	str	r2, [r7, #4]
 8016e90:	603b      	str	r3, [r7, #0]
 8016e92:	460b      	mov	r3, r1
 8016e94:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e96:	2300      	movs	r3, #0
 8016e98:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e9a:	2300      	movs	r3, #0
 8016e9c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016e9e:	68fb      	ldr	r3, [r7, #12]
 8016ea0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016ea4:	7af9      	ldrb	r1, [r7, #11]
 8016ea6:	683b      	ldr	r3, [r7, #0]
 8016ea8:	687a      	ldr	r2, [r7, #4]
 8016eaa:	f7f2 f8e8 	bl	800907e <HAL_PCD_EP_Transmit>
 8016eae:	4603      	mov	r3, r0
 8016eb0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016eb2:	7dfb      	ldrb	r3, [r7, #23]
 8016eb4:	4618      	mov	r0, r3
 8016eb6:	f000 f853 	bl	8016f60 <USBD_Get_USB_Status>
 8016eba:	4603      	mov	r3, r0
 8016ebc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016ebe:	7dbb      	ldrb	r3, [r7, #22]
}
 8016ec0:	4618      	mov	r0, r3
 8016ec2:	3718      	adds	r7, #24
 8016ec4:	46bd      	mov	sp, r7
 8016ec6:	bd80      	pop	{r7, pc}

08016ec8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016ec8:	b580      	push	{r7, lr}
 8016eca:	b086      	sub	sp, #24
 8016ecc:	af00      	add	r7, sp, #0
 8016ece:	60f8      	str	r0, [r7, #12]
 8016ed0:	607a      	str	r2, [r7, #4]
 8016ed2:	603b      	str	r3, [r7, #0]
 8016ed4:	460b      	mov	r3, r1
 8016ed6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ed8:	2300      	movs	r3, #0
 8016eda:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016edc:	2300      	movs	r3, #0
 8016ede:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016ee0:	68fb      	ldr	r3, [r7, #12]
 8016ee2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016ee6:	7af9      	ldrb	r1, [r7, #11]
 8016ee8:	683b      	ldr	r3, [r7, #0]
 8016eea:	687a      	ldr	r2, [r7, #4]
 8016eec:	f7f2 f873 	bl	8008fd6 <HAL_PCD_EP_Receive>
 8016ef0:	4603      	mov	r3, r0
 8016ef2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016ef4:	7dfb      	ldrb	r3, [r7, #23]
 8016ef6:	4618      	mov	r0, r3
 8016ef8:	f000 f832 	bl	8016f60 <USBD_Get_USB_Status>
 8016efc:	4603      	mov	r3, r0
 8016efe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016f00:	7dbb      	ldrb	r3, [r7, #22]
}
 8016f02:	4618      	mov	r0, r3
 8016f04:	3718      	adds	r7, #24
 8016f06:	46bd      	mov	sp, r7
 8016f08:	bd80      	pop	{r7, pc}

08016f0a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016f0a:	b580      	push	{r7, lr}
 8016f0c:	b082      	sub	sp, #8
 8016f0e:	af00      	add	r7, sp, #0
 8016f10:	6078      	str	r0, [r7, #4]
 8016f12:	460b      	mov	r3, r1
 8016f14:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016f1c:	78fa      	ldrb	r2, [r7, #3]
 8016f1e:	4611      	mov	r1, r2
 8016f20:	4618      	mov	r0, r3
 8016f22:	f7f2 f894 	bl	800904e <HAL_PCD_EP_GetRxCount>
 8016f26:	4603      	mov	r3, r0
}
 8016f28:	4618      	mov	r0, r3
 8016f2a:	3708      	adds	r7, #8
 8016f2c:	46bd      	mov	sp, r7
 8016f2e:	bd80      	pop	{r7, pc}

08016f30 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016f30:	b480      	push	{r7}
 8016f32:	b083      	sub	sp, #12
 8016f34:	af00      	add	r7, sp, #0
 8016f36:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016f38:	4b03      	ldr	r3, [pc, #12]	; (8016f48 <USBD_static_malloc+0x18>)
}
 8016f3a:	4618      	mov	r0, r3
 8016f3c:	370c      	adds	r7, #12
 8016f3e:	46bd      	mov	sp, r7
 8016f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f44:	4770      	bx	lr
 8016f46:	bf00      	nop
 8016f48:	24002fdc 	.word	0x24002fdc

08016f4c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016f4c:	b480      	push	{r7}
 8016f4e:	b083      	sub	sp, #12
 8016f50:	af00      	add	r7, sp, #0
 8016f52:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8016f54:	bf00      	nop
 8016f56:	370c      	adds	r7, #12
 8016f58:	46bd      	mov	sp, r7
 8016f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f5e:	4770      	bx	lr

08016f60 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016f60:	b480      	push	{r7}
 8016f62:	b085      	sub	sp, #20
 8016f64:	af00      	add	r7, sp, #0
 8016f66:	4603      	mov	r3, r0
 8016f68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016f6a:	2300      	movs	r3, #0
 8016f6c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016f6e:	79fb      	ldrb	r3, [r7, #7]
 8016f70:	2b03      	cmp	r3, #3
 8016f72:	d817      	bhi.n	8016fa4 <USBD_Get_USB_Status+0x44>
 8016f74:	a201      	add	r2, pc, #4	; (adr r2, 8016f7c <USBD_Get_USB_Status+0x1c>)
 8016f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f7a:	bf00      	nop
 8016f7c:	08016f8d 	.word	0x08016f8d
 8016f80:	08016f93 	.word	0x08016f93
 8016f84:	08016f99 	.word	0x08016f99
 8016f88:	08016f9f 	.word	0x08016f9f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016f8c:	2300      	movs	r3, #0
 8016f8e:	73fb      	strb	r3, [r7, #15]
    break;
 8016f90:	e00b      	b.n	8016faa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016f92:	2303      	movs	r3, #3
 8016f94:	73fb      	strb	r3, [r7, #15]
    break;
 8016f96:	e008      	b.n	8016faa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016f98:	2301      	movs	r3, #1
 8016f9a:	73fb      	strb	r3, [r7, #15]
    break;
 8016f9c:	e005      	b.n	8016faa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016f9e:	2303      	movs	r3, #3
 8016fa0:	73fb      	strb	r3, [r7, #15]
    break;
 8016fa2:	e002      	b.n	8016faa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016fa4:	2303      	movs	r3, #3
 8016fa6:	73fb      	strb	r3, [r7, #15]
    break;
 8016fa8:	bf00      	nop
  }
  return usb_status;
 8016faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8016fac:	4618      	mov	r0, r3
 8016fae:	3714      	adds	r7, #20
 8016fb0:	46bd      	mov	sp, r7
 8016fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fb6:	4770      	bx	lr

08016fb8 <siprintf>:
 8016fb8:	b40e      	push	{r1, r2, r3}
 8016fba:	b500      	push	{lr}
 8016fbc:	b09c      	sub	sp, #112	; 0x70
 8016fbe:	ab1d      	add	r3, sp, #116	; 0x74
 8016fc0:	9002      	str	r0, [sp, #8]
 8016fc2:	9006      	str	r0, [sp, #24]
 8016fc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016fc8:	4809      	ldr	r0, [pc, #36]	; (8016ff0 <siprintf+0x38>)
 8016fca:	9107      	str	r1, [sp, #28]
 8016fcc:	9104      	str	r1, [sp, #16]
 8016fce:	4909      	ldr	r1, [pc, #36]	; (8016ff4 <siprintf+0x3c>)
 8016fd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8016fd4:	9105      	str	r1, [sp, #20]
 8016fd6:	6800      	ldr	r0, [r0, #0]
 8016fd8:	9301      	str	r3, [sp, #4]
 8016fda:	a902      	add	r1, sp, #8
 8016fdc:	f000 f9d6 	bl	801738c <_svfiprintf_r>
 8016fe0:	9b02      	ldr	r3, [sp, #8]
 8016fe2:	2200      	movs	r2, #0
 8016fe4:	701a      	strb	r2, [r3, #0]
 8016fe6:	b01c      	add	sp, #112	; 0x70
 8016fe8:	f85d eb04 	ldr.w	lr, [sp], #4
 8016fec:	b003      	add	sp, #12
 8016fee:	4770      	bx	lr
 8016ff0:	2400014c 	.word	0x2400014c
 8016ff4:	ffff0208 	.word	0xffff0208

08016ff8 <siscanf>:
 8016ff8:	b40e      	push	{r1, r2, r3}
 8016ffa:	b510      	push	{r4, lr}
 8016ffc:	b09f      	sub	sp, #124	; 0x7c
 8016ffe:	ac21      	add	r4, sp, #132	; 0x84
 8017000:	f44f 7101 	mov.w	r1, #516	; 0x204
 8017004:	f854 2b04 	ldr.w	r2, [r4], #4
 8017008:	9201      	str	r2, [sp, #4]
 801700a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801700e:	9004      	str	r0, [sp, #16]
 8017010:	9008      	str	r0, [sp, #32]
 8017012:	f7e9 f987 	bl	8000324 <strlen>
 8017016:	4b0c      	ldr	r3, [pc, #48]	; (8017048 <siscanf+0x50>)
 8017018:	9005      	str	r0, [sp, #20]
 801701a:	9009      	str	r0, [sp, #36]	; 0x24
 801701c:	930d      	str	r3, [sp, #52]	; 0x34
 801701e:	480b      	ldr	r0, [pc, #44]	; (801704c <siscanf+0x54>)
 8017020:	9a01      	ldr	r2, [sp, #4]
 8017022:	6800      	ldr	r0, [r0, #0]
 8017024:	9403      	str	r4, [sp, #12]
 8017026:	2300      	movs	r3, #0
 8017028:	9311      	str	r3, [sp, #68]	; 0x44
 801702a:	9316      	str	r3, [sp, #88]	; 0x58
 801702c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017030:	f8ad 301e 	strh.w	r3, [sp, #30]
 8017034:	a904      	add	r1, sp, #16
 8017036:	4623      	mov	r3, r4
 8017038:	f000 fb00 	bl	801763c <__ssvfiscanf_r>
 801703c:	b01f      	add	sp, #124	; 0x7c
 801703e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017042:	b003      	add	sp, #12
 8017044:	4770      	bx	lr
 8017046:	bf00      	nop
 8017048:	08017051 	.word	0x08017051
 801704c:	2400014c 	.word	0x2400014c

08017050 <__seofread>:
 8017050:	2000      	movs	r0, #0
 8017052:	4770      	bx	lr

08017054 <memset>:
 8017054:	4402      	add	r2, r0
 8017056:	4603      	mov	r3, r0
 8017058:	4293      	cmp	r3, r2
 801705a:	d100      	bne.n	801705e <memset+0xa>
 801705c:	4770      	bx	lr
 801705e:	f803 1b01 	strb.w	r1, [r3], #1
 8017062:	e7f9      	b.n	8017058 <memset+0x4>

08017064 <__errno>:
 8017064:	4b01      	ldr	r3, [pc, #4]	; (801706c <__errno+0x8>)
 8017066:	6818      	ldr	r0, [r3, #0]
 8017068:	4770      	bx	lr
 801706a:	bf00      	nop
 801706c:	2400014c 	.word	0x2400014c

08017070 <__libc_init_array>:
 8017070:	b570      	push	{r4, r5, r6, lr}
 8017072:	4d0d      	ldr	r5, [pc, #52]	; (80170a8 <__libc_init_array+0x38>)
 8017074:	4c0d      	ldr	r4, [pc, #52]	; (80170ac <__libc_init_array+0x3c>)
 8017076:	1b64      	subs	r4, r4, r5
 8017078:	10a4      	asrs	r4, r4, #2
 801707a:	2600      	movs	r6, #0
 801707c:	42a6      	cmp	r6, r4
 801707e:	d109      	bne.n	8017094 <__libc_init_array+0x24>
 8017080:	4d0b      	ldr	r5, [pc, #44]	; (80170b0 <__libc_init_array+0x40>)
 8017082:	4c0c      	ldr	r4, [pc, #48]	; (80170b4 <__libc_init_array+0x44>)
 8017084:	f001 f8fe 	bl	8018284 <_init>
 8017088:	1b64      	subs	r4, r4, r5
 801708a:	10a4      	asrs	r4, r4, #2
 801708c:	2600      	movs	r6, #0
 801708e:	42a6      	cmp	r6, r4
 8017090:	d105      	bne.n	801709e <__libc_init_array+0x2e>
 8017092:	bd70      	pop	{r4, r5, r6, pc}
 8017094:	f855 3b04 	ldr.w	r3, [r5], #4
 8017098:	4798      	blx	r3
 801709a:	3601      	adds	r6, #1
 801709c:	e7ee      	b.n	801707c <__libc_init_array+0xc>
 801709e:	f855 3b04 	ldr.w	r3, [r5], #4
 80170a2:	4798      	blx	r3
 80170a4:	3601      	adds	r6, #1
 80170a6:	e7f2      	b.n	801708e <__libc_init_array+0x1e>
 80170a8:	08018630 	.word	0x08018630
 80170ac:	08018630 	.word	0x08018630
 80170b0:	08018630 	.word	0x08018630
 80170b4:	08018634 	.word	0x08018634

080170b8 <__retarget_lock_acquire_recursive>:
 80170b8:	4770      	bx	lr

080170ba <__retarget_lock_release_recursive>:
 80170ba:	4770      	bx	lr

080170bc <strcpy>:
 80170bc:	4603      	mov	r3, r0
 80170be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80170c2:	f803 2b01 	strb.w	r2, [r3], #1
 80170c6:	2a00      	cmp	r2, #0
 80170c8:	d1f9      	bne.n	80170be <strcpy+0x2>
 80170ca:	4770      	bx	lr

080170cc <memcpy>:
 80170cc:	440a      	add	r2, r1
 80170ce:	4291      	cmp	r1, r2
 80170d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80170d4:	d100      	bne.n	80170d8 <memcpy+0xc>
 80170d6:	4770      	bx	lr
 80170d8:	b510      	push	{r4, lr}
 80170da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80170de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80170e2:	4291      	cmp	r1, r2
 80170e4:	d1f9      	bne.n	80170da <memcpy+0xe>
 80170e6:	bd10      	pop	{r4, pc}

080170e8 <_free_r>:
 80170e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80170ea:	2900      	cmp	r1, #0
 80170ec:	d044      	beq.n	8017178 <_free_r+0x90>
 80170ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80170f2:	9001      	str	r0, [sp, #4]
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	f1a1 0404 	sub.w	r4, r1, #4
 80170fa:	bfb8      	it	lt
 80170fc:	18e4      	addlt	r4, r4, r3
 80170fe:	f000 f8df 	bl	80172c0 <__malloc_lock>
 8017102:	4a1e      	ldr	r2, [pc, #120]	; (801717c <_free_r+0x94>)
 8017104:	9801      	ldr	r0, [sp, #4]
 8017106:	6813      	ldr	r3, [r2, #0]
 8017108:	b933      	cbnz	r3, 8017118 <_free_r+0x30>
 801710a:	6063      	str	r3, [r4, #4]
 801710c:	6014      	str	r4, [r2, #0]
 801710e:	b003      	add	sp, #12
 8017110:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017114:	f000 b8da 	b.w	80172cc <__malloc_unlock>
 8017118:	42a3      	cmp	r3, r4
 801711a:	d908      	bls.n	801712e <_free_r+0x46>
 801711c:	6825      	ldr	r5, [r4, #0]
 801711e:	1961      	adds	r1, r4, r5
 8017120:	428b      	cmp	r3, r1
 8017122:	bf01      	itttt	eq
 8017124:	6819      	ldreq	r1, [r3, #0]
 8017126:	685b      	ldreq	r3, [r3, #4]
 8017128:	1949      	addeq	r1, r1, r5
 801712a:	6021      	streq	r1, [r4, #0]
 801712c:	e7ed      	b.n	801710a <_free_r+0x22>
 801712e:	461a      	mov	r2, r3
 8017130:	685b      	ldr	r3, [r3, #4]
 8017132:	b10b      	cbz	r3, 8017138 <_free_r+0x50>
 8017134:	42a3      	cmp	r3, r4
 8017136:	d9fa      	bls.n	801712e <_free_r+0x46>
 8017138:	6811      	ldr	r1, [r2, #0]
 801713a:	1855      	adds	r5, r2, r1
 801713c:	42a5      	cmp	r5, r4
 801713e:	d10b      	bne.n	8017158 <_free_r+0x70>
 8017140:	6824      	ldr	r4, [r4, #0]
 8017142:	4421      	add	r1, r4
 8017144:	1854      	adds	r4, r2, r1
 8017146:	42a3      	cmp	r3, r4
 8017148:	6011      	str	r1, [r2, #0]
 801714a:	d1e0      	bne.n	801710e <_free_r+0x26>
 801714c:	681c      	ldr	r4, [r3, #0]
 801714e:	685b      	ldr	r3, [r3, #4]
 8017150:	6053      	str	r3, [r2, #4]
 8017152:	440c      	add	r4, r1
 8017154:	6014      	str	r4, [r2, #0]
 8017156:	e7da      	b.n	801710e <_free_r+0x26>
 8017158:	d902      	bls.n	8017160 <_free_r+0x78>
 801715a:	230c      	movs	r3, #12
 801715c:	6003      	str	r3, [r0, #0]
 801715e:	e7d6      	b.n	801710e <_free_r+0x26>
 8017160:	6825      	ldr	r5, [r4, #0]
 8017162:	1961      	adds	r1, r4, r5
 8017164:	428b      	cmp	r3, r1
 8017166:	bf04      	itt	eq
 8017168:	6819      	ldreq	r1, [r3, #0]
 801716a:	685b      	ldreq	r3, [r3, #4]
 801716c:	6063      	str	r3, [r4, #4]
 801716e:	bf04      	itt	eq
 8017170:	1949      	addeq	r1, r1, r5
 8017172:	6021      	streq	r1, [r4, #0]
 8017174:	6054      	str	r4, [r2, #4]
 8017176:	e7ca      	b.n	801710e <_free_r+0x26>
 8017178:	b003      	add	sp, #12
 801717a:	bd30      	pop	{r4, r5, pc}
 801717c:	2400333c 	.word	0x2400333c

08017180 <sbrk_aligned>:
 8017180:	b570      	push	{r4, r5, r6, lr}
 8017182:	4e0e      	ldr	r6, [pc, #56]	; (80171bc <sbrk_aligned+0x3c>)
 8017184:	460c      	mov	r4, r1
 8017186:	6831      	ldr	r1, [r6, #0]
 8017188:	4605      	mov	r5, r0
 801718a:	b911      	cbnz	r1, 8017192 <sbrk_aligned+0x12>
 801718c:	f000 ff3a 	bl	8018004 <_sbrk_r>
 8017190:	6030      	str	r0, [r6, #0]
 8017192:	4621      	mov	r1, r4
 8017194:	4628      	mov	r0, r5
 8017196:	f000 ff35 	bl	8018004 <_sbrk_r>
 801719a:	1c43      	adds	r3, r0, #1
 801719c:	d00a      	beq.n	80171b4 <sbrk_aligned+0x34>
 801719e:	1cc4      	adds	r4, r0, #3
 80171a0:	f024 0403 	bic.w	r4, r4, #3
 80171a4:	42a0      	cmp	r0, r4
 80171a6:	d007      	beq.n	80171b8 <sbrk_aligned+0x38>
 80171a8:	1a21      	subs	r1, r4, r0
 80171aa:	4628      	mov	r0, r5
 80171ac:	f000 ff2a 	bl	8018004 <_sbrk_r>
 80171b0:	3001      	adds	r0, #1
 80171b2:	d101      	bne.n	80171b8 <sbrk_aligned+0x38>
 80171b4:	f04f 34ff 	mov.w	r4, #4294967295
 80171b8:	4620      	mov	r0, r4
 80171ba:	bd70      	pop	{r4, r5, r6, pc}
 80171bc:	24003340 	.word	0x24003340

080171c0 <_malloc_r>:
 80171c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80171c4:	1ccd      	adds	r5, r1, #3
 80171c6:	f025 0503 	bic.w	r5, r5, #3
 80171ca:	3508      	adds	r5, #8
 80171cc:	2d0c      	cmp	r5, #12
 80171ce:	bf38      	it	cc
 80171d0:	250c      	movcc	r5, #12
 80171d2:	2d00      	cmp	r5, #0
 80171d4:	4607      	mov	r7, r0
 80171d6:	db01      	blt.n	80171dc <_malloc_r+0x1c>
 80171d8:	42a9      	cmp	r1, r5
 80171da:	d905      	bls.n	80171e8 <_malloc_r+0x28>
 80171dc:	230c      	movs	r3, #12
 80171de:	603b      	str	r3, [r7, #0]
 80171e0:	2600      	movs	r6, #0
 80171e2:	4630      	mov	r0, r6
 80171e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80171e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80172bc <_malloc_r+0xfc>
 80171ec:	f000 f868 	bl	80172c0 <__malloc_lock>
 80171f0:	f8d8 3000 	ldr.w	r3, [r8]
 80171f4:	461c      	mov	r4, r3
 80171f6:	bb5c      	cbnz	r4, 8017250 <_malloc_r+0x90>
 80171f8:	4629      	mov	r1, r5
 80171fa:	4638      	mov	r0, r7
 80171fc:	f7ff ffc0 	bl	8017180 <sbrk_aligned>
 8017200:	1c43      	adds	r3, r0, #1
 8017202:	4604      	mov	r4, r0
 8017204:	d155      	bne.n	80172b2 <_malloc_r+0xf2>
 8017206:	f8d8 4000 	ldr.w	r4, [r8]
 801720a:	4626      	mov	r6, r4
 801720c:	2e00      	cmp	r6, #0
 801720e:	d145      	bne.n	801729c <_malloc_r+0xdc>
 8017210:	2c00      	cmp	r4, #0
 8017212:	d048      	beq.n	80172a6 <_malloc_r+0xe6>
 8017214:	6823      	ldr	r3, [r4, #0]
 8017216:	4631      	mov	r1, r6
 8017218:	4638      	mov	r0, r7
 801721a:	eb04 0903 	add.w	r9, r4, r3
 801721e:	f000 fef1 	bl	8018004 <_sbrk_r>
 8017222:	4581      	cmp	r9, r0
 8017224:	d13f      	bne.n	80172a6 <_malloc_r+0xe6>
 8017226:	6821      	ldr	r1, [r4, #0]
 8017228:	1a6d      	subs	r5, r5, r1
 801722a:	4629      	mov	r1, r5
 801722c:	4638      	mov	r0, r7
 801722e:	f7ff ffa7 	bl	8017180 <sbrk_aligned>
 8017232:	3001      	adds	r0, #1
 8017234:	d037      	beq.n	80172a6 <_malloc_r+0xe6>
 8017236:	6823      	ldr	r3, [r4, #0]
 8017238:	442b      	add	r3, r5
 801723a:	6023      	str	r3, [r4, #0]
 801723c:	f8d8 3000 	ldr.w	r3, [r8]
 8017240:	2b00      	cmp	r3, #0
 8017242:	d038      	beq.n	80172b6 <_malloc_r+0xf6>
 8017244:	685a      	ldr	r2, [r3, #4]
 8017246:	42a2      	cmp	r2, r4
 8017248:	d12b      	bne.n	80172a2 <_malloc_r+0xe2>
 801724a:	2200      	movs	r2, #0
 801724c:	605a      	str	r2, [r3, #4]
 801724e:	e00f      	b.n	8017270 <_malloc_r+0xb0>
 8017250:	6822      	ldr	r2, [r4, #0]
 8017252:	1b52      	subs	r2, r2, r5
 8017254:	d41f      	bmi.n	8017296 <_malloc_r+0xd6>
 8017256:	2a0b      	cmp	r2, #11
 8017258:	d917      	bls.n	801728a <_malloc_r+0xca>
 801725a:	1961      	adds	r1, r4, r5
 801725c:	42a3      	cmp	r3, r4
 801725e:	6025      	str	r5, [r4, #0]
 8017260:	bf18      	it	ne
 8017262:	6059      	strne	r1, [r3, #4]
 8017264:	6863      	ldr	r3, [r4, #4]
 8017266:	bf08      	it	eq
 8017268:	f8c8 1000 	streq.w	r1, [r8]
 801726c:	5162      	str	r2, [r4, r5]
 801726e:	604b      	str	r3, [r1, #4]
 8017270:	4638      	mov	r0, r7
 8017272:	f104 060b 	add.w	r6, r4, #11
 8017276:	f000 f829 	bl	80172cc <__malloc_unlock>
 801727a:	f026 0607 	bic.w	r6, r6, #7
 801727e:	1d23      	adds	r3, r4, #4
 8017280:	1af2      	subs	r2, r6, r3
 8017282:	d0ae      	beq.n	80171e2 <_malloc_r+0x22>
 8017284:	1b9b      	subs	r3, r3, r6
 8017286:	50a3      	str	r3, [r4, r2]
 8017288:	e7ab      	b.n	80171e2 <_malloc_r+0x22>
 801728a:	42a3      	cmp	r3, r4
 801728c:	6862      	ldr	r2, [r4, #4]
 801728e:	d1dd      	bne.n	801724c <_malloc_r+0x8c>
 8017290:	f8c8 2000 	str.w	r2, [r8]
 8017294:	e7ec      	b.n	8017270 <_malloc_r+0xb0>
 8017296:	4623      	mov	r3, r4
 8017298:	6864      	ldr	r4, [r4, #4]
 801729a:	e7ac      	b.n	80171f6 <_malloc_r+0x36>
 801729c:	4634      	mov	r4, r6
 801729e:	6876      	ldr	r6, [r6, #4]
 80172a0:	e7b4      	b.n	801720c <_malloc_r+0x4c>
 80172a2:	4613      	mov	r3, r2
 80172a4:	e7cc      	b.n	8017240 <_malloc_r+0x80>
 80172a6:	230c      	movs	r3, #12
 80172a8:	603b      	str	r3, [r7, #0]
 80172aa:	4638      	mov	r0, r7
 80172ac:	f000 f80e 	bl	80172cc <__malloc_unlock>
 80172b0:	e797      	b.n	80171e2 <_malloc_r+0x22>
 80172b2:	6025      	str	r5, [r4, #0]
 80172b4:	e7dc      	b.n	8017270 <_malloc_r+0xb0>
 80172b6:	605b      	str	r3, [r3, #4]
 80172b8:	deff      	udf	#255	; 0xff
 80172ba:	bf00      	nop
 80172bc:	2400333c 	.word	0x2400333c

080172c0 <__malloc_lock>:
 80172c0:	4801      	ldr	r0, [pc, #4]	; (80172c8 <__malloc_lock+0x8>)
 80172c2:	f7ff bef9 	b.w	80170b8 <__retarget_lock_acquire_recursive>
 80172c6:	bf00      	nop
 80172c8:	24003338 	.word	0x24003338

080172cc <__malloc_unlock>:
 80172cc:	4801      	ldr	r0, [pc, #4]	; (80172d4 <__malloc_unlock+0x8>)
 80172ce:	f7ff bef4 	b.w	80170ba <__retarget_lock_release_recursive>
 80172d2:	bf00      	nop
 80172d4:	24003338 	.word	0x24003338

080172d8 <__ssputs_r>:
 80172d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80172dc:	688e      	ldr	r6, [r1, #8]
 80172de:	461f      	mov	r7, r3
 80172e0:	42be      	cmp	r6, r7
 80172e2:	680b      	ldr	r3, [r1, #0]
 80172e4:	4682      	mov	sl, r0
 80172e6:	460c      	mov	r4, r1
 80172e8:	4690      	mov	r8, r2
 80172ea:	d82c      	bhi.n	8017346 <__ssputs_r+0x6e>
 80172ec:	898a      	ldrh	r2, [r1, #12]
 80172ee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80172f2:	d026      	beq.n	8017342 <__ssputs_r+0x6a>
 80172f4:	6965      	ldr	r5, [r4, #20]
 80172f6:	6909      	ldr	r1, [r1, #16]
 80172f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80172fc:	eba3 0901 	sub.w	r9, r3, r1
 8017300:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017304:	1c7b      	adds	r3, r7, #1
 8017306:	444b      	add	r3, r9
 8017308:	106d      	asrs	r5, r5, #1
 801730a:	429d      	cmp	r5, r3
 801730c:	bf38      	it	cc
 801730e:	461d      	movcc	r5, r3
 8017310:	0553      	lsls	r3, r2, #21
 8017312:	d527      	bpl.n	8017364 <__ssputs_r+0x8c>
 8017314:	4629      	mov	r1, r5
 8017316:	f7ff ff53 	bl	80171c0 <_malloc_r>
 801731a:	4606      	mov	r6, r0
 801731c:	b360      	cbz	r0, 8017378 <__ssputs_r+0xa0>
 801731e:	6921      	ldr	r1, [r4, #16]
 8017320:	464a      	mov	r2, r9
 8017322:	f7ff fed3 	bl	80170cc <memcpy>
 8017326:	89a3      	ldrh	r3, [r4, #12]
 8017328:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801732c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017330:	81a3      	strh	r3, [r4, #12]
 8017332:	6126      	str	r6, [r4, #16]
 8017334:	6165      	str	r5, [r4, #20]
 8017336:	444e      	add	r6, r9
 8017338:	eba5 0509 	sub.w	r5, r5, r9
 801733c:	6026      	str	r6, [r4, #0]
 801733e:	60a5      	str	r5, [r4, #8]
 8017340:	463e      	mov	r6, r7
 8017342:	42be      	cmp	r6, r7
 8017344:	d900      	bls.n	8017348 <__ssputs_r+0x70>
 8017346:	463e      	mov	r6, r7
 8017348:	6820      	ldr	r0, [r4, #0]
 801734a:	4632      	mov	r2, r6
 801734c:	4641      	mov	r1, r8
 801734e:	f000 fe3e 	bl	8017fce <memmove>
 8017352:	68a3      	ldr	r3, [r4, #8]
 8017354:	1b9b      	subs	r3, r3, r6
 8017356:	60a3      	str	r3, [r4, #8]
 8017358:	6823      	ldr	r3, [r4, #0]
 801735a:	4433      	add	r3, r6
 801735c:	6023      	str	r3, [r4, #0]
 801735e:	2000      	movs	r0, #0
 8017360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017364:	462a      	mov	r2, r5
 8017366:	f000 fe5d 	bl	8018024 <_realloc_r>
 801736a:	4606      	mov	r6, r0
 801736c:	2800      	cmp	r0, #0
 801736e:	d1e0      	bne.n	8017332 <__ssputs_r+0x5a>
 8017370:	6921      	ldr	r1, [r4, #16]
 8017372:	4650      	mov	r0, sl
 8017374:	f7ff feb8 	bl	80170e8 <_free_r>
 8017378:	230c      	movs	r3, #12
 801737a:	f8ca 3000 	str.w	r3, [sl]
 801737e:	89a3      	ldrh	r3, [r4, #12]
 8017380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017384:	81a3      	strh	r3, [r4, #12]
 8017386:	f04f 30ff 	mov.w	r0, #4294967295
 801738a:	e7e9      	b.n	8017360 <__ssputs_r+0x88>

0801738c <_svfiprintf_r>:
 801738c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017390:	4698      	mov	r8, r3
 8017392:	898b      	ldrh	r3, [r1, #12]
 8017394:	061b      	lsls	r3, r3, #24
 8017396:	b09d      	sub	sp, #116	; 0x74
 8017398:	4607      	mov	r7, r0
 801739a:	460d      	mov	r5, r1
 801739c:	4614      	mov	r4, r2
 801739e:	d50e      	bpl.n	80173be <_svfiprintf_r+0x32>
 80173a0:	690b      	ldr	r3, [r1, #16]
 80173a2:	b963      	cbnz	r3, 80173be <_svfiprintf_r+0x32>
 80173a4:	2140      	movs	r1, #64	; 0x40
 80173a6:	f7ff ff0b 	bl	80171c0 <_malloc_r>
 80173aa:	6028      	str	r0, [r5, #0]
 80173ac:	6128      	str	r0, [r5, #16]
 80173ae:	b920      	cbnz	r0, 80173ba <_svfiprintf_r+0x2e>
 80173b0:	230c      	movs	r3, #12
 80173b2:	603b      	str	r3, [r7, #0]
 80173b4:	f04f 30ff 	mov.w	r0, #4294967295
 80173b8:	e0d0      	b.n	801755c <_svfiprintf_r+0x1d0>
 80173ba:	2340      	movs	r3, #64	; 0x40
 80173bc:	616b      	str	r3, [r5, #20]
 80173be:	2300      	movs	r3, #0
 80173c0:	9309      	str	r3, [sp, #36]	; 0x24
 80173c2:	2320      	movs	r3, #32
 80173c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80173c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80173cc:	2330      	movs	r3, #48	; 0x30
 80173ce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8017574 <_svfiprintf_r+0x1e8>
 80173d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80173d6:	f04f 0901 	mov.w	r9, #1
 80173da:	4623      	mov	r3, r4
 80173dc:	469a      	mov	sl, r3
 80173de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80173e2:	b10a      	cbz	r2, 80173e8 <_svfiprintf_r+0x5c>
 80173e4:	2a25      	cmp	r2, #37	; 0x25
 80173e6:	d1f9      	bne.n	80173dc <_svfiprintf_r+0x50>
 80173e8:	ebba 0b04 	subs.w	fp, sl, r4
 80173ec:	d00b      	beq.n	8017406 <_svfiprintf_r+0x7a>
 80173ee:	465b      	mov	r3, fp
 80173f0:	4622      	mov	r2, r4
 80173f2:	4629      	mov	r1, r5
 80173f4:	4638      	mov	r0, r7
 80173f6:	f7ff ff6f 	bl	80172d8 <__ssputs_r>
 80173fa:	3001      	adds	r0, #1
 80173fc:	f000 80a9 	beq.w	8017552 <_svfiprintf_r+0x1c6>
 8017400:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017402:	445a      	add	r2, fp
 8017404:	9209      	str	r2, [sp, #36]	; 0x24
 8017406:	f89a 3000 	ldrb.w	r3, [sl]
 801740a:	2b00      	cmp	r3, #0
 801740c:	f000 80a1 	beq.w	8017552 <_svfiprintf_r+0x1c6>
 8017410:	2300      	movs	r3, #0
 8017412:	f04f 32ff 	mov.w	r2, #4294967295
 8017416:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801741a:	f10a 0a01 	add.w	sl, sl, #1
 801741e:	9304      	str	r3, [sp, #16]
 8017420:	9307      	str	r3, [sp, #28]
 8017422:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017426:	931a      	str	r3, [sp, #104]	; 0x68
 8017428:	4654      	mov	r4, sl
 801742a:	2205      	movs	r2, #5
 801742c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017430:	4850      	ldr	r0, [pc, #320]	; (8017574 <_svfiprintf_r+0x1e8>)
 8017432:	f7e8 ff85 	bl	8000340 <memchr>
 8017436:	9a04      	ldr	r2, [sp, #16]
 8017438:	b9d8      	cbnz	r0, 8017472 <_svfiprintf_r+0xe6>
 801743a:	06d0      	lsls	r0, r2, #27
 801743c:	bf44      	itt	mi
 801743e:	2320      	movmi	r3, #32
 8017440:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017444:	0711      	lsls	r1, r2, #28
 8017446:	bf44      	itt	mi
 8017448:	232b      	movmi	r3, #43	; 0x2b
 801744a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801744e:	f89a 3000 	ldrb.w	r3, [sl]
 8017452:	2b2a      	cmp	r3, #42	; 0x2a
 8017454:	d015      	beq.n	8017482 <_svfiprintf_r+0xf6>
 8017456:	9a07      	ldr	r2, [sp, #28]
 8017458:	4654      	mov	r4, sl
 801745a:	2000      	movs	r0, #0
 801745c:	f04f 0c0a 	mov.w	ip, #10
 8017460:	4621      	mov	r1, r4
 8017462:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017466:	3b30      	subs	r3, #48	; 0x30
 8017468:	2b09      	cmp	r3, #9
 801746a:	d94d      	bls.n	8017508 <_svfiprintf_r+0x17c>
 801746c:	b1b0      	cbz	r0, 801749c <_svfiprintf_r+0x110>
 801746e:	9207      	str	r2, [sp, #28]
 8017470:	e014      	b.n	801749c <_svfiprintf_r+0x110>
 8017472:	eba0 0308 	sub.w	r3, r0, r8
 8017476:	fa09 f303 	lsl.w	r3, r9, r3
 801747a:	4313      	orrs	r3, r2
 801747c:	9304      	str	r3, [sp, #16]
 801747e:	46a2      	mov	sl, r4
 8017480:	e7d2      	b.n	8017428 <_svfiprintf_r+0x9c>
 8017482:	9b03      	ldr	r3, [sp, #12]
 8017484:	1d19      	adds	r1, r3, #4
 8017486:	681b      	ldr	r3, [r3, #0]
 8017488:	9103      	str	r1, [sp, #12]
 801748a:	2b00      	cmp	r3, #0
 801748c:	bfbb      	ittet	lt
 801748e:	425b      	neglt	r3, r3
 8017490:	f042 0202 	orrlt.w	r2, r2, #2
 8017494:	9307      	strge	r3, [sp, #28]
 8017496:	9307      	strlt	r3, [sp, #28]
 8017498:	bfb8      	it	lt
 801749a:	9204      	strlt	r2, [sp, #16]
 801749c:	7823      	ldrb	r3, [r4, #0]
 801749e:	2b2e      	cmp	r3, #46	; 0x2e
 80174a0:	d10c      	bne.n	80174bc <_svfiprintf_r+0x130>
 80174a2:	7863      	ldrb	r3, [r4, #1]
 80174a4:	2b2a      	cmp	r3, #42	; 0x2a
 80174a6:	d134      	bne.n	8017512 <_svfiprintf_r+0x186>
 80174a8:	9b03      	ldr	r3, [sp, #12]
 80174aa:	1d1a      	adds	r2, r3, #4
 80174ac:	681b      	ldr	r3, [r3, #0]
 80174ae:	9203      	str	r2, [sp, #12]
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	bfb8      	it	lt
 80174b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80174b8:	3402      	adds	r4, #2
 80174ba:	9305      	str	r3, [sp, #20]
 80174bc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8017584 <_svfiprintf_r+0x1f8>
 80174c0:	7821      	ldrb	r1, [r4, #0]
 80174c2:	2203      	movs	r2, #3
 80174c4:	4650      	mov	r0, sl
 80174c6:	f7e8 ff3b 	bl	8000340 <memchr>
 80174ca:	b138      	cbz	r0, 80174dc <_svfiprintf_r+0x150>
 80174cc:	9b04      	ldr	r3, [sp, #16]
 80174ce:	eba0 000a 	sub.w	r0, r0, sl
 80174d2:	2240      	movs	r2, #64	; 0x40
 80174d4:	4082      	lsls	r2, r0
 80174d6:	4313      	orrs	r3, r2
 80174d8:	3401      	adds	r4, #1
 80174da:	9304      	str	r3, [sp, #16]
 80174dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80174e0:	4825      	ldr	r0, [pc, #148]	; (8017578 <_svfiprintf_r+0x1ec>)
 80174e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80174e6:	2206      	movs	r2, #6
 80174e8:	f7e8 ff2a 	bl	8000340 <memchr>
 80174ec:	2800      	cmp	r0, #0
 80174ee:	d038      	beq.n	8017562 <_svfiprintf_r+0x1d6>
 80174f0:	4b22      	ldr	r3, [pc, #136]	; (801757c <_svfiprintf_r+0x1f0>)
 80174f2:	bb1b      	cbnz	r3, 801753c <_svfiprintf_r+0x1b0>
 80174f4:	9b03      	ldr	r3, [sp, #12]
 80174f6:	3307      	adds	r3, #7
 80174f8:	f023 0307 	bic.w	r3, r3, #7
 80174fc:	3308      	adds	r3, #8
 80174fe:	9303      	str	r3, [sp, #12]
 8017500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017502:	4433      	add	r3, r6
 8017504:	9309      	str	r3, [sp, #36]	; 0x24
 8017506:	e768      	b.n	80173da <_svfiprintf_r+0x4e>
 8017508:	fb0c 3202 	mla	r2, ip, r2, r3
 801750c:	460c      	mov	r4, r1
 801750e:	2001      	movs	r0, #1
 8017510:	e7a6      	b.n	8017460 <_svfiprintf_r+0xd4>
 8017512:	2300      	movs	r3, #0
 8017514:	3401      	adds	r4, #1
 8017516:	9305      	str	r3, [sp, #20]
 8017518:	4619      	mov	r1, r3
 801751a:	f04f 0c0a 	mov.w	ip, #10
 801751e:	4620      	mov	r0, r4
 8017520:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017524:	3a30      	subs	r2, #48	; 0x30
 8017526:	2a09      	cmp	r2, #9
 8017528:	d903      	bls.n	8017532 <_svfiprintf_r+0x1a6>
 801752a:	2b00      	cmp	r3, #0
 801752c:	d0c6      	beq.n	80174bc <_svfiprintf_r+0x130>
 801752e:	9105      	str	r1, [sp, #20]
 8017530:	e7c4      	b.n	80174bc <_svfiprintf_r+0x130>
 8017532:	fb0c 2101 	mla	r1, ip, r1, r2
 8017536:	4604      	mov	r4, r0
 8017538:	2301      	movs	r3, #1
 801753a:	e7f0      	b.n	801751e <_svfiprintf_r+0x192>
 801753c:	ab03      	add	r3, sp, #12
 801753e:	9300      	str	r3, [sp, #0]
 8017540:	462a      	mov	r2, r5
 8017542:	4b0f      	ldr	r3, [pc, #60]	; (8017580 <_svfiprintf_r+0x1f4>)
 8017544:	a904      	add	r1, sp, #16
 8017546:	4638      	mov	r0, r7
 8017548:	f3af 8000 	nop.w
 801754c:	1c42      	adds	r2, r0, #1
 801754e:	4606      	mov	r6, r0
 8017550:	d1d6      	bne.n	8017500 <_svfiprintf_r+0x174>
 8017552:	89ab      	ldrh	r3, [r5, #12]
 8017554:	065b      	lsls	r3, r3, #25
 8017556:	f53f af2d 	bmi.w	80173b4 <_svfiprintf_r+0x28>
 801755a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801755c:	b01d      	add	sp, #116	; 0x74
 801755e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017562:	ab03      	add	r3, sp, #12
 8017564:	9300      	str	r3, [sp, #0]
 8017566:	462a      	mov	r2, r5
 8017568:	4b05      	ldr	r3, [pc, #20]	; (8017580 <_svfiprintf_r+0x1f4>)
 801756a:	a904      	add	r1, sp, #16
 801756c:	4638      	mov	r0, r7
 801756e:	f000 fa4b 	bl	8017a08 <_printf_i>
 8017572:	e7eb      	b.n	801754c <_svfiprintf_r+0x1c0>
 8017574:	080184d8 	.word	0x080184d8
 8017578:	080184e2 	.word	0x080184e2
 801757c:	00000000 	.word	0x00000000
 8017580:	080172d9 	.word	0x080172d9
 8017584:	080184de 	.word	0x080184de

08017588 <_sungetc_r>:
 8017588:	b538      	push	{r3, r4, r5, lr}
 801758a:	1c4b      	adds	r3, r1, #1
 801758c:	4614      	mov	r4, r2
 801758e:	d103      	bne.n	8017598 <_sungetc_r+0x10>
 8017590:	f04f 35ff 	mov.w	r5, #4294967295
 8017594:	4628      	mov	r0, r5
 8017596:	bd38      	pop	{r3, r4, r5, pc}
 8017598:	8993      	ldrh	r3, [r2, #12]
 801759a:	f023 0320 	bic.w	r3, r3, #32
 801759e:	8193      	strh	r3, [r2, #12]
 80175a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80175a2:	6852      	ldr	r2, [r2, #4]
 80175a4:	b2cd      	uxtb	r5, r1
 80175a6:	b18b      	cbz	r3, 80175cc <_sungetc_r+0x44>
 80175a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80175aa:	4293      	cmp	r3, r2
 80175ac:	dd08      	ble.n	80175c0 <_sungetc_r+0x38>
 80175ae:	6823      	ldr	r3, [r4, #0]
 80175b0:	1e5a      	subs	r2, r3, #1
 80175b2:	6022      	str	r2, [r4, #0]
 80175b4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80175b8:	6863      	ldr	r3, [r4, #4]
 80175ba:	3301      	adds	r3, #1
 80175bc:	6063      	str	r3, [r4, #4]
 80175be:	e7e9      	b.n	8017594 <_sungetc_r+0xc>
 80175c0:	4621      	mov	r1, r4
 80175c2:	f000 fcca 	bl	8017f5a <__submore>
 80175c6:	2800      	cmp	r0, #0
 80175c8:	d0f1      	beq.n	80175ae <_sungetc_r+0x26>
 80175ca:	e7e1      	b.n	8017590 <_sungetc_r+0x8>
 80175cc:	6921      	ldr	r1, [r4, #16]
 80175ce:	6823      	ldr	r3, [r4, #0]
 80175d0:	b151      	cbz	r1, 80175e8 <_sungetc_r+0x60>
 80175d2:	4299      	cmp	r1, r3
 80175d4:	d208      	bcs.n	80175e8 <_sungetc_r+0x60>
 80175d6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80175da:	42a9      	cmp	r1, r5
 80175dc:	d104      	bne.n	80175e8 <_sungetc_r+0x60>
 80175de:	3b01      	subs	r3, #1
 80175e0:	3201      	adds	r2, #1
 80175e2:	6023      	str	r3, [r4, #0]
 80175e4:	6062      	str	r2, [r4, #4]
 80175e6:	e7d5      	b.n	8017594 <_sungetc_r+0xc>
 80175e8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80175ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80175f0:	6363      	str	r3, [r4, #52]	; 0x34
 80175f2:	2303      	movs	r3, #3
 80175f4:	63a3      	str	r3, [r4, #56]	; 0x38
 80175f6:	4623      	mov	r3, r4
 80175f8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80175fc:	6023      	str	r3, [r4, #0]
 80175fe:	2301      	movs	r3, #1
 8017600:	e7dc      	b.n	80175bc <_sungetc_r+0x34>

08017602 <__ssrefill_r>:
 8017602:	b510      	push	{r4, lr}
 8017604:	460c      	mov	r4, r1
 8017606:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017608:	b169      	cbz	r1, 8017626 <__ssrefill_r+0x24>
 801760a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801760e:	4299      	cmp	r1, r3
 8017610:	d001      	beq.n	8017616 <__ssrefill_r+0x14>
 8017612:	f7ff fd69 	bl	80170e8 <_free_r>
 8017616:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017618:	6063      	str	r3, [r4, #4]
 801761a:	2000      	movs	r0, #0
 801761c:	6360      	str	r0, [r4, #52]	; 0x34
 801761e:	b113      	cbz	r3, 8017626 <__ssrefill_r+0x24>
 8017620:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017622:	6023      	str	r3, [r4, #0]
 8017624:	bd10      	pop	{r4, pc}
 8017626:	6923      	ldr	r3, [r4, #16]
 8017628:	6023      	str	r3, [r4, #0]
 801762a:	2300      	movs	r3, #0
 801762c:	6063      	str	r3, [r4, #4]
 801762e:	89a3      	ldrh	r3, [r4, #12]
 8017630:	f043 0320 	orr.w	r3, r3, #32
 8017634:	81a3      	strh	r3, [r4, #12]
 8017636:	f04f 30ff 	mov.w	r0, #4294967295
 801763a:	e7f3      	b.n	8017624 <__ssrefill_r+0x22>

0801763c <__ssvfiscanf_r>:
 801763c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017640:	460c      	mov	r4, r1
 8017642:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8017646:	2100      	movs	r1, #0
 8017648:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801764c:	49a6      	ldr	r1, [pc, #664]	; (80178e8 <__ssvfiscanf_r+0x2ac>)
 801764e:	91a0      	str	r1, [sp, #640]	; 0x280
 8017650:	f10d 0804 	add.w	r8, sp, #4
 8017654:	49a5      	ldr	r1, [pc, #660]	; (80178ec <__ssvfiscanf_r+0x2b0>)
 8017656:	4fa6      	ldr	r7, [pc, #664]	; (80178f0 <__ssvfiscanf_r+0x2b4>)
 8017658:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80178f4 <__ssvfiscanf_r+0x2b8>
 801765c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8017660:	4606      	mov	r6, r0
 8017662:	91a1      	str	r1, [sp, #644]	; 0x284
 8017664:	9300      	str	r3, [sp, #0]
 8017666:	7813      	ldrb	r3, [r2, #0]
 8017668:	2b00      	cmp	r3, #0
 801766a:	f000 815a 	beq.w	8017922 <__ssvfiscanf_r+0x2e6>
 801766e:	5cf9      	ldrb	r1, [r7, r3]
 8017670:	f011 0108 	ands.w	r1, r1, #8
 8017674:	f102 0501 	add.w	r5, r2, #1
 8017678:	d019      	beq.n	80176ae <__ssvfiscanf_r+0x72>
 801767a:	6863      	ldr	r3, [r4, #4]
 801767c:	2b00      	cmp	r3, #0
 801767e:	dd0f      	ble.n	80176a0 <__ssvfiscanf_r+0x64>
 8017680:	6823      	ldr	r3, [r4, #0]
 8017682:	781a      	ldrb	r2, [r3, #0]
 8017684:	5cba      	ldrb	r2, [r7, r2]
 8017686:	0712      	lsls	r2, r2, #28
 8017688:	d401      	bmi.n	801768e <__ssvfiscanf_r+0x52>
 801768a:	462a      	mov	r2, r5
 801768c:	e7eb      	b.n	8017666 <__ssvfiscanf_r+0x2a>
 801768e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017690:	3201      	adds	r2, #1
 8017692:	9245      	str	r2, [sp, #276]	; 0x114
 8017694:	6862      	ldr	r2, [r4, #4]
 8017696:	3301      	adds	r3, #1
 8017698:	3a01      	subs	r2, #1
 801769a:	6062      	str	r2, [r4, #4]
 801769c:	6023      	str	r3, [r4, #0]
 801769e:	e7ec      	b.n	801767a <__ssvfiscanf_r+0x3e>
 80176a0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80176a2:	4621      	mov	r1, r4
 80176a4:	4630      	mov	r0, r6
 80176a6:	4798      	blx	r3
 80176a8:	2800      	cmp	r0, #0
 80176aa:	d0e9      	beq.n	8017680 <__ssvfiscanf_r+0x44>
 80176ac:	e7ed      	b.n	801768a <__ssvfiscanf_r+0x4e>
 80176ae:	2b25      	cmp	r3, #37	; 0x25
 80176b0:	d012      	beq.n	80176d8 <__ssvfiscanf_r+0x9c>
 80176b2:	469a      	mov	sl, r3
 80176b4:	6863      	ldr	r3, [r4, #4]
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	f340 8091 	ble.w	80177de <__ssvfiscanf_r+0x1a2>
 80176bc:	6822      	ldr	r2, [r4, #0]
 80176be:	7813      	ldrb	r3, [r2, #0]
 80176c0:	4553      	cmp	r3, sl
 80176c2:	f040 812e 	bne.w	8017922 <__ssvfiscanf_r+0x2e6>
 80176c6:	6863      	ldr	r3, [r4, #4]
 80176c8:	3b01      	subs	r3, #1
 80176ca:	6063      	str	r3, [r4, #4]
 80176cc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80176ce:	3201      	adds	r2, #1
 80176d0:	3301      	adds	r3, #1
 80176d2:	6022      	str	r2, [r4, #0]
 80176d4:	9345      	str	r3, [sp, #276]	; 0x114
 80176d6:	e7d8      	b.n	801768a <__ssvfiscanf_r+0x4e>
 80176d8:	9141      	str	r1, [sp, #260]	; 0x104
 80176da:	9143      	str	r1, [sp, #268]	; 0x10c
 80176dc:	7853      	ldrb	r3, [r2, #1]
 80176de:	2b2a      	cmp	r3, #42	; 0x2a
 80176e0:	bf02      	ittt	eq
 80176e2:	2310      	moveq	r3, #16
 80176e4:	1c95      	addeq	r5, r2, #2
 80176e6:	9341      	streq	r3, [sp, #260]	; 0x104
 80176e8:	220a      	movs	r2, #10
 80176ea:	46aa      	mov	sl, r5
 80176ec:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80176f0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80176f4:	2b09      	cmp	r3, #9
 80176f6:	d91c      	bls.n	8017732 <__ssvfiscanf_r+0xf6>
 80176f8:	487e      	ldr	r0, [pc, #504]	; (80178f4 <__ssvfiscanf_r+0x2b8>)
 80176fa:	2203      	movs	r2, #3
 80176fc:	f7e8 fe20 	bl	8000340 <memchr>
 8017700:	b138      	cbz	r0, 8017712 <__ssvfiscanf_r+0xd6>
 8017702:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017704:	eba0 0009 	sub.w	r0, r0, r9
 8017708:	2301      	movs	r3, #1
 801770a:	4083      	lsls	r3, r0
 801770c:	4313      	orrs	r3, r2
 801770e:	9341      	str	r3, [sp, #260]	; 0x104
 8017710:	4655      	mov	r5, sl
 8017712:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017716:	2b78      	cmp	r3, #120	; 0x78
 8017718:	d806      	bhi.n	8017728 <__ssvfiscanf_r+0xec>
 801771a:	2b57      	cmp	r3, #87	; 0x57
 801771c:	d810      	bhi.n	8017740 <__ssvfiscanf_r+0x104>
 801771e:	2b25      	cmp	r3, #37	; 0x25
 8017720:	d0c7      	beq.n	80176b2 <__ssvfiscanf_r+0x76>
 8017722:	d857      	bhi.n	80177d4 <__ssvfiscanf_r+0x198>
 8017724:	2b00      	cmp	r3, #0
 8017726:	d065      	beq.n	80177f4 <__ssvfiscanf_r+0x1b8>
 8017728:	2303      	movs	r3, #3
 801772a:	9347      	str	r3, [sp, #284]	; 0x11c
 801772c:	230a      	movs	r3, #10
 801772e:	9342      	str	r3, [sp, #264]	; 0x108
 8017730:	e076      	b.n	8017820 <__ssvfiscanf_r+0x1e4>
 8017732:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017734:	fb02 1103 	mla	r1, r2, r3, r1
 8017738:	3930      	subs	r1, #48	; 0x30
 801773a:	9143      	str	r1, [sp, #268]	; 0x10c
 801773c:	4655      	mov	r5, sl
 801773e:	e7d4      	b.n	80176ea <__ssvfiscanf_r+0xae>
 8017740:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8017744:	2a20      	cmp	r2, #32
 8017746:	d8ef      	bhi.n	8017728 <__ssvfiscanf_r+0xec>
 8017748:	a101      	add	r1, pc, #4	; (adr r1, 8017750 <__ssvfiscanf_r+0x114>)
 801774a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801774e:	bf00      	nop
 8017750:	08017803 	.word	0x08017803
 8017754:	08017729 	.word	0x08017729
 8017758:	08017729 	.word	0x08017729
 801775c:	08017861 	.word	0x08017861
 8017760:	08017729 	.word	0x08017729
 8017764:	08017729 	.word	0x08017729
 8017768:	08017729 	.word	0x08017729
 801776c:	08017729 	.word	0x08017729
 8017770:	08017729 	.word	0x08017729
 8017774:	08017729 	.word	0x08017729
 8017778:	08017729 	.word	0x08017729
 801777c:	08017877 	.word	0x08017877
 8017780:	0801785d 	.word	0x0801785d
 8017784:	080177db 	.word	0x080177db
 8017788:	080177db 	.word	0x080177db
 801778c:	080177db 	.word	0x080177db
 8017790:	08017729 	.word	0x08017729
 8017794:	08017819 	.word	0x08017819
 8017798:	08017729 	.word	0x08017729
 801779c:	08017729 	.word	0x08017729
 80177a0:	08017729 	.word	0x08017729
 80177a4:	08017729 	.word	0x08017729
 80177a8:	08017887 	.word	0x08017887
 80177ac:	08017855 	.word	0x08017855
 80177b0:	080177fb 	.word	0x080177fb
 80177b4:	08017729 	.word	0x08017729
 80177b8:	08017729 	.word	0x08017729
 80177bc:	08017883 	.word	0x08017883
 80177c0:	08017729 	.word	0x08017729
 80177c4:	0801785d 	.word	0x0801785d
 80177c8:	08017729 	.word	0x08017729
 80177cc:	08017729 	.word	0x08017729
 80177d0:	08017803 	.word	0x08017803
 80177d4:	3b45      	subs	r3, #69	; 0x45
 80177d6:	2b02      	cmp	r3, #2
 80177d8:	d8a6      	bhi.n	8017728 <__ssvfiscanf_r+0xec>
 80177da:	2305      	movs	r3, #5
 80177dc:	e01f      	b.n	801781e <__ssvfiscanf_r+0x1e2>
 80177de:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80177e0:	4621      	mov	r1, r4
 80177e2:	4630      	mov	r0, r6
 80177e4:	4798      	blx	r3
 80177e6:	2800      	cmp	r0, #0
 80177e8:	f43f af68 	beq.w	80176bc <__ssvfiscanf_r+0x80>
 80177ec:	9844      	ldr	r0, [sp, #272]	; 0x110
 80177ee:	2800      	cmp	r0, #0
 80177f0:	f040 808d 	bne.w	801790e <__ssvfiscanf_r+0x2d2>
 80177f4:	f04f 30ff 	mov.w	r0, #4294967295
 80177f8:	e08f      	b.n	801791a <__ssvfiscanf_r+0x2de>
 80177fa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80177fc:	f042 0220 	orr.w	r2, r2, #32
 8017800:	9241      	str	r2, [sp, #260]	; 0x104
 8017802:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017804:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017808:	9241      	str	r2, [sp, #260]	; 0x104
 801780a:	2210      	movs	r2, #16
 801780c:	2b6f      	cmp	r3, #111	; 0x6f
 801780e:	9242      	str	r2, [sp, #264]	; 0x108
 8017810:	bf34      	ite	cc
 8017812:	2303      	movcc	r3, #3
 8017814:	2304      	movcs	r3, #4
 8017816:	e002      	b.n	801781e <__ssvfiscanf_r+0x1e2>
 8017818:	2300      	movs	r3, #0
 801781a:	9342      	str	r3, [sp, #264]	; 0x108
 801781c:	2303      	movs	r3, #3
 801781e:	9347      	str	r3, [sp, #284]	; 0x11c
 8017820:	6863      	ldr	r3, [r4, #4]
 8017822:	2b00      	cmp	r3, #0
 8017824:	dd3d      	ble.n	80178a2 <__ssvfiscanf_r+0x266>
 8017826:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017828:	0659      	lsls	r1, r3, #25
 801782a:	d404      	bmi.n	8017836 <__ssvfiscanf_r+0x1fa>
 801782c:	6823      	ldr	r3, [r4, #0]
 801782e:	781a      	ldrb	r2, [r3, #0]
 8017830:	5cba      	ldrb	r2, [r7, r2]
 8017832:	0712      	lsls	r2, r2, #28
 8017834:	d43c      	bmi.n	80178b0 <__ssvfiscanf_r+0x274>
 8017836:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8017838:	2b02      	cmp	r3, #2
 801783a:	dc4b      	bgt.n	80178d4 <__ssvfiscanf_r+0x298>
 801783c:	466b      	mov	r3, sp
 801783e:	4622      	mov	r2, r4
 8017840:	a941      	add	r1, sp, #260	; 0x104
 8017842:	4630      	mov	r0, r6
 8017844:	f000 fa02 	bl	8017c4c <_scanf_chars>
 8017848:	2801      	cmp	r0, #1
 801784a:	d06a      	beq.n	8017922 <__ssvfiscanf_r+0x2e6>
 801784c:	2802      	cmp	r0, #2
 801784e:	f47f af1c 	bne.w	801768a <__ssvfiscanf_r+0x4e>
 8017852:	e7cb      	b.n	80177ec <__ssvfiscanf_r+0x1b0>
 8017854:	2308      	movs	r3, #8
 8017856:	9342      	str	r3, [sp, #264]	; 0x108
 8017858:	2304      	movs	r3, #4
 801785a:	e7e0      	b.n	801781e <__ssvfiscanf_r+0x1e2>
 801785c:	220a      	movs	r2, #10
 801785e:	e7d5      	b.n	801780c <__ssvfiscanf_r+0x1d0>
 8017860:	4629      	mov	r1, r5
 8017862:	4640      	mov	r0, r8
 8017864:	f000 fb40 	bl	8017ee8 <__sccl>
 8017868:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801786a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801786e:	9341      	str	r3, [sp, #260]	; 0x104
 8017870:	4605      	mov	r5, r0
 8017872:	2301      	movs	r3, #1
 8017874:	e7d3      	b.n	801781e <__ssvfiscanf_r+0x1e2>
 8017876:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801787c:	9341      	str	r3, [sp, #260]	; 0x104
 801787e:	2300      	movs	r3, #0
 8017880:	e7cd      	b.n	801781e <__ssvfiscanf_r+0x1e2>
 8017882:	2302      	movs	r3, #2
 8017884:	e7cb      	b.n	801781e <__ssvfiscanf_r+0x1e2>
 8017886:	9841      	ldr	r0, [sp, #260]	; 0x104
 8017888:	06c3      	lsls	r3, r0, #27
 801788a:	f53f aefe 	bmi.w	801768a <__ssvfiscanf_r+0x4e>
 801788e:	9b00      	ldr	r3, [sp, #0]
 8017890:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017892:	1d19      	adds	r1, r3, #4
 8017894:	9100      	str	r1, [sp, #0]
 8017896:	681b      	ldr	r3, [r3, #0]
 8017898:	07c0      	lsls	r0, r0, #31
 801789a:	bf4c      	ite	mi
 801789c:	801a      	strhmi	r2, [r3, #0]
 801789e:	601a      	strpl	r2, [r3, #0]
 80178a0:	e6f3      	b.n	801768a <__ssvfiscanf_r+0x4e>
 80178a2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80178a4:	4621      	mov	r1, r4
 80178a6:	4630      	mov	r0, r6
 80178a8:	4798      	blx	r3
 80178aa:	2800      	cmp	r0, #0
 80178ac:	d0bb      	beq.n	8017826 <__ssvfiscanf_r+0x1ea>
 80178ae:	e79d      	b.n	80177ec <__ssvfiscanf_r+0x1b0>
 80178b0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80178b2:	3201      	adds	r2, #1
 80178b4:	9245      	str	r2, [sp, #276]	; 0x114
 80178b6:	6862      	ldr	r2, [r4, #4]
 80178b8:	3a01      	subs	r2, #1
 80178ba:	2a00      	cmp	r2, #0
 80178bc:	6062      	str	r2, [r4, #4]
 80178be:	dd02      	ble.n	80178c6 <__ssvfiscanf_r+0x28a>
 80178c0:	3301      	adds	r3, #1
 80178c2:	6023      	str	r3, [r4, #0]
 80178c4:	e7b2      	b.n	801782c <__ssvfiscanf_r+0x1f0>
 80178c6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80178c8:	4621      	mov	r1, r4
 80178ca:	4630      	mov	r0, r6
 80178cc:	4798      	blx	r3
 80178ce:	2800      	cmp	r0, #0
 80178d0:	d0ac      	beq.n	801782c <__ssvfiscanf_r+0x1f0>
 80178d2:	e78b      	b.n	80177ec <__ssvfiscanf_r+0x1b0>
 80178d4:	2b04      	cmp	r3, #4
 80178d6:	dc0f      	bgt.n	80178f8 <__ssvfiscanf_r+0x2bc>
 80178d8:	466b      	mov	r3, sp
 80178da:	4622      	mov	r2, r4
 80178dc:	a941      	add	r1, sp, #260	; 0x104
 80178de:	4630      	mov	r0, r6
 80178e0:	f000 fa0e 	bl	8017d00 <_scanf_i>
 80178e4:	e7b0      	b.n	8017848 <__ssvfiscanf_r+0x20c>
 80178e6:	bf00      	nop
 80178e8:	08017589 	.word	0x08017589
 80178ec:	08017603 	.word	0x08017603
 80178f0:	08018527 	.word	0x08018527
 80178f4:	080184de 	.word	0x080184de
 80178f8:	4b0b      	ldr	r3, [pc, #44]	; (8017928 <__ssvfiscanf_r+0x2ec>)
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	f43f aec5 	beq.w	801768a <__ssvfiscanf_r+0x4e>
 8017900:	466b      	mov	r3, sp
 8017902:	4622      	mov	r2, r4
 8017904:	a941      	add	r1, sp, #260	; 0x104
 8017906:	4630      	mov	r0, r6
 8017908:	f3af 8000 	nop.w
 801790c:	e79c      	b.n	8017848 <__ssvfiscanf_r+0x20c>
 801790e:	89a3      	ldrh	r3, [r4, #12]
 8017910:	f013 0f40 	tst.w	r3, #64	; 0x40
 8017914:	bf18      	it	ne
 8017916:	f04f 30ff 	movne.w	r0, #4294967295
 801791a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801791e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017922:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017924:	e7f9      	b.n	801791a <__ssvfiscanf_r+0x2de>
 8017926:	bf00      	nop
 8017928:	00000000 	.word	0x00000000

0801792c <_printf_common>:
 801792c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017930:	4616      	mov	r6, r2
 8017932:	4699      	mov	r9, r3
 8017934:	688a      	ldr	r2, [r1, #8]
 8017936:	690b      	ldr	r3, [r1, #16]
 8017938:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801793c:	4293      	cmp	r3, r2
 801793e:	bfb8      	it	lt
 8017940:	4613      	movlt	r3, r2
 8017942:	6033      	str	r3, [r6, #0]
 8017944:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017948:	4607      	mov	r7, r0
 801794a:	460c      	mov	r4, r1
 801794c:	b10a      	cbz	r2, 8017952 <_printf_common+0x26>
 801794e:	3301      	adds	r3, #1
 8017950:	6033      	str	r3, [r6, #0]
 8017952:	6823      	ldr	r3, [r4, #0]
 8017954:	0699      	lsls	r1, r3, #26
 8017956:	bf42      	ittt	mi
 8017958:	6833      	ldrmi	r3, [r6, #0]
 801795a:	3302      	addmi	r3, #2
 801795c:	6033      	strmi	r3, [r6, #0]
 801795e:	6825      	ldr	r5, [r4, #0]
 8017960:	f015 0506 	ands.w	r5, r5, #6
 8017964:	d106      	bne.n	8017974 <_printf_common+0x48>
 8017966:	f104 0a19 	add.w	sl, r4, #25
 801796a:	68e3      	ldr	r3, [r4, #12]
 801796c:	6832      	ldr	r2, [r6, #0]
 801796e:	1a9b      	subs	r3, r3, r2
 8017970:	42ab      	cmp	r3, r5
 8017972:	dc26      	bgt.n	80179c2 <_printf_common+0x96>
 8017974:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017978:	1e13      	subs	r3, r2, #0
 801797a:	6822      	ldr	r2, [r4, #0]
 801797c:	bf18      	it	ne
 801797e:	2301      	movne	r3, #1
 8017980:	0692      	lsls	r2, r2, #26
 8017982:	d42b      	bmi.n	80179dc <_printf_common+0xb0>
 8017984:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017988:	4649      	mov	r1, r9
 801798a:	4638      	mov	r0, r7
 801798c:	47c0      	blx	r8
 801798e:	3001      	adds	r0, #1
 8017990:	d01e      	beq.n	80179d0 <_printf_common+0xa4>
 8017992:	6823      	ldr	r3, [r4, #0]
 8017994:	6922      	ldr	r2, [r4, #16]
 8017996:	f003 0306 	and.w	r3, r3, #6
 801799a:	2b04      	cmp	r3, #4
 801799c:	bf02      	ittt	eq
 801799e:	68e5      	ldreq	r5, [r4, #12]
 80179a0:	6833      	ldreq	r3, [r6, #0]
 80179a2:	1aed      	subeq	r5, r5, r3
 80179a4:	68a3      	ldr	r3, [r4, #8]
 80179a6:	bf0c      	ite	eq
 80179a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80179ac:	2500      	movne	r5, #0
 80179ae:	4293      	cmp	r3, r2
 80179b0:	bfc4      	itt	gt
 80179b2:	1a9b      	subgt	r3, r3, r2
 80179b4:	18ed      	addgt	r5, r5, r3
 80179b6:	2600      	movs	r6, #0
 80179b8:	341a      	adds	r4, #26
 80179ba:	42b5      	cmp	r5, r6
 80179bc:	d11a      	bne.n	80179f4 <_printf_common+0xc8>
 80179be:	2000      	movs	r0, #0
 80179c0:	e008      	b.n	80179d4 <_printf_common+0xa8>
 80179c2:	2301      	movs	r3, #1
 80179c4:	4652      	mov	r2, sl
 80179c6:	4649      	mov	r1, r9
 80179c8:	4638      	mov	r0, r7
 80179ca:	47c0      	blx	r8
 80179cc:	3001      	adds	r0, #1
 80179ce:	d103      	bne.n	80179d8 <_printf_common+0xac>
 80179d0:	f04f 30ff 	mov.w	r0, #4294967295
 80179d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80179d8:	3501      	adds	r5, #1
 80179da:	e7c6      	b.n	801796a <_printf_common+0x3e>
 80179dc:	18e1      	adds	r1, r4, r3
 80179de:	1c5a      	adds	r2, r3, #1
 80179e0:	2030      	movs	r0, #48	; 0x30
 80179e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80179e6:	4422      	add	r2, r4
 80179e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80179ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80179f0:	3302      	adds	r3, #2
 80179f2:	e7c7      	b.n	8017984 <_printf_common+0x58>
 80179f4:	2301      	movs	r3, #1
 80179f6:	4622      	mov	r2, r4
 80179f8:	4649      	mov	r1, r9
 80179fa:	4638      	mov	r0, r7
 80179fc:	47c0      	blx	r8
 80179fe:	3001      	adds	r0, #1
 8017a00:	d0e6      	beq.n	80179d0 <_printf_common+0xa4>
 8017a02:	3601      	adds	r6, #1
 8017a04:	e7d9      	b.n	80179ba <_printf_common+0x8e>
	...

08017a08 <_printf_i>:
 8017a08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017a0c:	7e0f      	ldrb	r7, [r1, #24]
 8017a0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017a10:	2f78      	cmp	r7, #120	; 0x78
 8017a12:	4691      	mov	r9, r2
 8017a14:	4680      	mov	r8, r0
 8017a16:	460c      	mov	r4, r1
 8017a18:	469a      	mov	sl, r3
 8017a1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017a1e:	d807      	bhi.n	8017a30 <_printf_i+0x28>
 8017a20:	2f62      	cmp	r7, #98	; 0x62
 8017a22:	d80a      	bhi.n	8017a3a <_printf_i+0x32>
 8017a24:	2f00      	cmp	r7, #0
 8017a26:	f000 80d4 	beq.w	8017bd2 <_printf_i+0x1ca>
 8017a2a:	2f58      	cmp	r7, #88	; 0x58
 8017a2c:	f000 80c0 	beq.w	8017bb0 <_printf_i+0x1a8>
 8017a30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017a34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017a38:	e03a      	b.n	8017ab0 <_printf_i+0xa8>
 8017a3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017a3e:	2b15      	cmp	r3, #21
 8017a40:	d8f6      	bhi.n	8017a30 <_printf_i+0x28>
 8017a42:	a101      	add	r1, pc, #4	; (adr r1, 8017a48 <_printf_i+0x40>)
 8017a44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017a48:	08017aa1 	.word	0x08017aa1
 8017a4c:	08017ab5 	.word	0x08017ab5
 8017a50:	08017a31 	.word	0x08017a31
 8017a54:	08017a31 	.word	0x08017a31
 8017a58:	08017a31 	.word	0x08017a31
 8017a5c:	08017a31 	.word	0x08017a31
 8017a60:	08017ab5 	.word	0x08017ab5
 8017a64:	08017a31 	.word	0x08017a31
 8017a68:	08017a31 	.word	0x08017a31
 8017a6c:	08017a31 	.word	0x08017a31
 8017a70:	08017a31 	.word	0x08017a31
 8017a74:	08017bb9 	.word	0x08017bb9
 8017a78:	08017ae1 	.word	0x08017ae1
 8017a7c:	08017b73 	.word	0x08017b73
 8017a80:	08017a31 	.word	0x08017a31
 8017a84:	08017a31 	.word	0x08017a31
 8017a88:	08017bdb 	.word	0x08017bdb
 8017a8c:	08017a31 	.word	0x08017a31
 8017a90:	08017ae1 	.word	0x08017ae1
 8017a94:	08017a31 	.word	0x08017a31
 8017a98:	08017a31 	.word	0x08017a31
 8017a9c:	08017b7b 	.word	0x08017b7b
 8017aa0:	682b      	ldr	r3, [r5, #0]
 8017aa2:	1d1a      	adds	r2, r3, #4
 8017aa4:	681b      	ldr	r3, [r3, #0]
 8017aa6:	602a      	str	r2, [r5, #0]
 8017aa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017aac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017ab0:	2301      	movs	r3, #1
 8017ab2:	e09f      	b.n	8017bf4 <_printf_i+0x1ec>
 8017ab4:	6820      	ldr	r0, [r4, #0]
 8017ab6:	682b      	ldr	r3, [r5, #0]
 8017ab8:	0607      	lsls	r7, r0, #24
 8017aba:	f103 0104 	add.w	r1, r3, #4
 8017abe:	6029      	str	r1, [r5, #0]
 8017ac0:	d501      	bpl.n	8017ac6 <_printf_i+0xbe>
 8017ac2:	681e      	ldr	r6, [r3, #0]
 8017ac4:	e003      	b.n	8017ace <_printf_i+0xc6>
 8017ac6:	0646      	lsls	r6, r0, #25
 8017ac8:	d5fb      	bpl.n	8017ac2 <_printf_i+0xba>
 8017aca:	f9b3 6000 	ldrsh.w	r6, [r3]
 8017ace:	2e00      	cmp	r6, #0
 8017ad0:	da03      	bge.n	8017ada <_printf_i+0xd2>
 8017ad2:	232d      	movs	r3, #45	; 0x2d
 8017ad4:	4276      	negs	r6, r6
 8017ad6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017ada:	485a      	ldr	r0, [pc, #360]	; (8017c44 <_printf_i+0x23c>)
 8017adc:	230a      	movs	r3, #10
 8017ade:	e012      	b.n	8017b06 <_printf_i+0xfe>
 8017ae0:	682b      	ldr	r3, [r5, #0]
 8017ae2:	6820      	ldr	r0, [r4, #0]
 8017ae4:	1d19      	adds	r1, r3, #4
 8017ae6:	6029      	str	r1, [r5, #0]
 8017ae8:	0605      	lsls	r5, r0, #24
 8017aea:	d501      	bpl.n	8017af0 <_printf_i+0xe8>
 8017aec:	681e      	ldr	r6, [r3, #0]
 8017aee:	e002      	b.n	8017af6 <_printf_i+0xee>
 8017af0:	0641      	lsls	r1, r0, #25
 8017af2:	d5fb      	bpl.n	8017aec <_printf_i+0xe4>
 8017af4:	881e      	ldrh	r6, [r3, #0]
 8017af6:	4853      	ldr	r0, [pc, #332]	; (8017c44 <_printf_i+0x23c>)
 8017af8:	2f6f      	cmp	r7, #111	; 0x6f
 8017afa:	bf0c      	ite	eq
 8017afc:	2308      	moveq	r3, #8
 8017afe:	230a      	movne	r3, #10
 8017b00:	2100      	movs	r1, #0
 8017b02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017b06:	6865      	ldr	r5, [r4, #4]
 8017b08:	60a5      	str	r5, [r4, #8]
 8017b0a:	2d00      	cmp	r5, #0
 8017b0c:	bfa2      	ittt	ge
 8017b0e:	6821      	ldrge	r1, [r4, #0]
 8017b10:	f021 0104 	bicge.w	r1, r1, #4
 8017b14:	6021      	strge	r1, [r4, #0]
 8017b16:	b90e      	cbnz	r6, 8017b1c <_printf_i+0x114>
 8017b18:	2d00      	cmp	r5, #0
 8017b1a:	d04b      	beq.n	8017bb4 <_printf_i+0x1ac>
 8017b1c:	4615      	mov	r5, r2
 8017b1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8017b22:	fb03 6711 	mls	r7, r3, r1, r6
 8017b26:	5dc7      	ldrb	r7, [r0, r7]
 8017b28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017b2c:	4637      	mov	r7, r6
 8017b2e:	42bb      	cmp	r3, r7
 8017b30:	460e      	mov	r6, r1
 8017b32:	d9f4      	bls.n	8017b1e <_printf_i+0x116>
 8017b34:	2b08      	cmp	r3, #8
 8017b36:	d10b      	bne.n	8017b50 <_printf_i+0x148>
 8017b38:	6823      	ldr	r3, [r4, #0]
 8017b3a:	07de      	lsls	r6, r3, #31
 8017b3c:	d508      	bpl.n	8017b50 <_printf_i+0x148>
 8017b3e:	6923      	ldr	r3, [r4, #16]
 8017b40:	6861      	ldr	r1, [r4, #4]
 8017b42:	4299      	cmp	r1, r3
 8017b44:	bfde      	ittt	le
 8017b46:	2330      	movle	r3, #48	; 0x30
 8017b48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017b4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017b50:	1b52      	subs	r2, r2, r5
 8017b52:	6122      	str	r2, [r4, #16]
 8017b54:	f8cd a000 	str.w	sl, [sp]
 8017b58:	464b      	mov	r3, r9
 8017b5a:	aa03      	add	r2, sp, #12
 8017b5c:	4621      	mov	r1, r4
 8017b5e:	4640      	mov	r0, r8
 8017b60:	f7ff fee4 	bl	801792c <_printf_common>
 8017b64:	3001      	adds	r0, #1
 8017b66:	d14a      	bne.n	8017bfe <_printf_i+0x1f6>
 8017b68:	f04f 30ff 	mov.w	r0, #4294967295
 8017b6c:	b004      	add	sp, #16
 8017b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b72:	6823      	ldr	r3, [r4, #0]
 8017b74:	f043 0320 	orr.w	r3, r3, #32
 8017b78:	6023      	str	r3, [r4, #0]
 8017b7a:	4833      	ldr	r0, [pc, #204]	; (8017c48 <_printf_i+0x240>)
 8017b7c:	2778      	movs	r7, #120	; 0x78
 8017b7e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017b82:	6823      	ldr	r3, [r4, #0]
 8017b84:	6829      	ldr	r1, [r5, #0]
 8017b86:	061f      	lsls	r7, r3, #24
 8017b88:	f851 6b04 	ldr.w	r6, [r1], #4
 8017b8c:	d402      	bmi.n	8017b94 <_printf_i+0x18c>
 8017b8e:	065f      	lsls	r7, r3, #25
 8017b90:	bf48      	it	mi
 8017b92:	b2b6      	uxthmi	r6, r6
 8017b94:	07df      	lsls	r7, r3, #31
 8017b96:	bf48      	it	mi
 8017b98:	f043 0320 	orrmi.w	r3, r3, #32
 8017b9c:	6029      	str	r1, [r5, #0]
 8017b9e:	bf48      	it	mi
 8017ba0:	6023      	strmi	r3, [r4, #0]
 8017ba2:	b91e      	cbnz	r6, 8017bac <_printf_i+0x1a4>
 8017ba4:	6823      	ldr	r3, [r4, #0]
 8017ba6:	f023 0320 	bic.w	r3, r3, #32
 8017baa:	6023      	str	r3, [r4, #0]
 8017bac:	2310      	movs	r3, #16
 8017bae:	e7a7      	b.n	8017b00 <_printf_i+0xf8>
 8017bb0:	4824      	ldr	r0, [pc, #144]	; (8017c44 <_printf_i+0x23c>)
 8017bb2:	e7e4      	b.n	8017b7e <_printf_i+0x176>
 8017bb4:	4615      	mov	r5, r2
 8017bb6:	e7bd      	b.n	8017b34 <_printf_i+0x12c>
 8017bb8:	682b      	ldr	r3, [r5, #0]
 8017bba:	6826      	ldr	r6, [r4, #0]
 8017bbc:	6961      	ldr	r1, [r4, #20]
 8017bbe:	1d18      	adds	r0, r3, #4
 8017bc0:	6028      	str	r0, [r5, #0]
 8017bc2:	0635      	lsls	r5, r6, #24
 8017bc4:	681b      	ldr	r3, [r3, #0]
 8017bc6:	d501      	bpl.n	8017bcc <_printf_i+0x1c4>
 8017bc8:	6019      	str	r1, [r3, #0]
 8017bca:	e002      	b.n	8017bd2 <_printf_i+0x1ca>
 8017bcc:	0670      	lsls	r0, r6, #25
 8017bce:	d5fb      	bpl.n	8017bc8 <_printf_i+0x1c0>
 8017bd0:	8019      	strh	r1, [r3, #0]
 8017bd2:	2300      	movs	r3, #0
 8017bd4:	6123      	str	r3, [r4, #16]
 8017bd6:	4615      	mov	r5, r2
 8017bd8:	e7bc      	b.n	8017b54 <_printf_i+0x14c>
 8017bda:	682b      	ldr	r3, [r5, #0]
 8017bdc:	1d1a      	adds	r2, r3, #4
 8017bde:	602a      	str	r2, [r5, #0]
 8017be0:	681d      	ldr	r5, [r3, #0]
 8017be2:	6862      	ldr	r2, [r4, #4]
 8017be4:	2100      	movs	r1, #0
 8017be6:	4628      	mov	r0, r5
 8017be8:	f7e8 fbaa 	bl	8000340 <memchr>
 8017bec:	b108      	cbz	r0, 8017bf2 <_printf_i+0x1ea>
 8017bee:	1b40      	subs	r0, r0, r5
 8017bf0:	6060      	str	r0, [r4, #4]
 8017bf2:	6863      	ldr	r3, [r4, #4]
 8017bf4:	6123      	str	r3, [r4, #16]
 8017bf6:	2300      	movs	r3, #0
 8017bf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017bfc:	e7aa      	b.n	8017b54 <_printf_i+0x14c>
 8017bfe:	6923      	ldr	r3, [r4, #16]
 8017c00:	462a      	mov	r2, r5
 8017c02:	4649      	mov	r1, r9
 8017c04:	4640      	mov	r0, r8
 8017c06:	47d0      	blx	sl
 8017c08:	3001      	adds	r0, #1
 8017c0a:	d0ad      	beq.n	8017b68 <_printf_i+0x160>
 8017c0c:	6823      	ldr	r3, [r4, #0]
 8017c0e:	079b      	lsls	r3, r3, #30
 8017c10:	d413      	bmi.n	8017c3a <_printf_i+0x232>
 8017c12:	68e0      	ldr	r0, [r4, #12]
 8017c14:	9b03      	ldr	r3, [sp, #12]
 8017c16:	4298      	cmp	r0, r3
 8017c18:	bfb8      	it	lt
 8017c1a:	4618      	movlt	r0, r3
 8017c1c:	e7a6      	b.n	8017b6c <_printf_i+0x164>
 8017c1e:	2301      	movs	r3, #1
 8017c20:	4632      	mov	r2, r6
 8017c22:	4649      	mov	r1, r9
 8017c24:	4640      	mov	r0, r8
 8017c26:	47d0      	blx	sl
 8017c28:	3001      	adds	r0, #1
 8017c2a:	d09d      	beq.n	8017b68 <_printf_i+0x160>
 8017c2c:	3501      	adds	r5, #1
 8017c2e:	68e3      	ldr	r3, [r4, #12]
 8017c30:	9903      	ldr	r1, [sp, #12]
 8017c32:	1a5b      	subs	r3, r3, r1
 8017c34:	42ab      	cmp	r3, r5
 8017c36:	dcf2      	bgt.n	8017c1e <_printf_i+0x216>
 8017c38:	e7eb      	b.n	8017c12 <_printf_i+0x20a>
 8017c3a:	2500      	movs	r5, #0
 8017c3c:	f104 0619 	add.w	r6, r4, #25
 8017c40:	e7f5      	b.n	8017c2e <_printf_i+0x226>
 8017c42:	bf00      	nop
 8017c44:	080184e9 	.word	0x080184e9
 8017c48:	080184fa 	.word	0x080184fa

08017c4c <_scanf_chars>:
 8017c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017c50:	4615      	mov	r5, r2
 8017c52:	688a      	ldr	r2, [r1, #8]
 8017c54:	4680      	mov	r8, r0
 8017c56:	460c      	mov	r4, r1
 8017c58:	b932      	cbnz	r2, 8017c68 <_scanf_chars+0x1c>
 8017c5a:	698a      	ldr	r2, [r1, #24]
 8017c5c:	2a00      	cmp	r2, #0
 8017c5e:	bf0c      	ite	eq
 8017c60:	2201      	moveq	r2, #1
 8017c62:	f04f 32ff 	movne.w	r2, #4294967295
 8017c66:	608a      	str	r2, [r1, #8]
 8017c68:	6822      	ldr	r2, [r4, #0]
 8017c6a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8017cfc <_scanf_chars+0xb0>
 8017c6e:	06d1      	lsls	r1, r2, #27
 8017c70:	bf5f      	itttt	pl
 8017c72:	681a      	ldrpl	r2, [r3, #0]
 8017c74:	1d11      	addpl	r1, r2, #4
 8017c76:	6019      	strpl	r1, [r3, #0]
 8017c78:	6816      	ldrpl	r6, [r2, #0]
 8017c7a:	2700      	movs	r7, #0
 8017c7c:	69a0      	ldr	r0, [r4, #24]
 8017c7e:	b188      	cbz	r0, 8017ca4 <_scanf_chars+0x58>
 8017c80:	2801      	cmp	r0, #1
 8017c82:	d107      	bne.n	8017c94 <_scanf_chars+0x48>
 8017c84:	682a      	ldr	r2, [r5, #0]
 8017c86:	7811      	ldrb	r1, [r2, #0]
 8017c88:	6962      	ldr	r2, [r4, #20]
 8017c8a:	5c52      	ldrb	r2, [r2, r1]
 8017c8c:	b952      	cbnz	r2, 8017ca4 <_scanf_chars+0x58>
 8017c8e:	2f00      	cmp	r7, #0
 8017c90:	d031      	beq.n	8017cf6 <_scanf_chars+0xaa>
 8017c92:	e022      	b.n	8017cda <_scanf_chars+0x8e>
 8017c94:	2802      	cmp	r0, #2
 8017c96:	d120      	bne.n	8017cda <_scanf_chars+0x8e>
 8017c98:	682b      	ldr	r3, [r5, #0]
 8017c9a:	781b      	ldrb	r3, [r3, #0]
 8017c9c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8017ca0:	071b      	lsls	r3, r3, #28
 8017ca2:	d41a      	bmi.n	8017cda <_scanf_chars+0x8e>
 8017ca4:	6823      	ldr	r3, [r4, #0]
 8017ca6:	06da      	lsls	r2, r3, #27
 8017ca8:	bf5e      	ittt	pl
 8017caa:	682b      	ldrpl	r3, [r5, #0]
 8017cac:	781b      	ldrbpl	r3, [r3, #0]
 8017cae:	f806 3b01 	strbpl.w	r3, [r6], #1
 8017cb2:	682a      	ldr	r2, [r5, #0]
 8017cb4:	686b      	ldr	r3, [r5, #4]
 8017cb6:	3201      	adds	r2, #1
 8017cb8:	602a      	str	r2, [r5, #0]
 8017cba:	68a2      	ldr	r2, [r4, #8]
 8017cbc:	3b01      	subs	r3, #1
 8017cbe:	3a01      	subs	r2, #1
 8017cc0:	606b      	str	r3, [r5, #4]
 8017cc2:	3701      	adds	r7, #1
 8017cc4:	60a2      	str	r2, [r4, #8]
 8017cc6:	b142      	cbz	r2, 8017cda <_scanf_chars+0x8e>
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	dcd7      	bgt.n	8017c7c <_scanf_chars+0x30>
 8017ccc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017cd0:	4629      	mov	r1, r5
 8017cd2:	4640      	mov	r0, r8
 8017cd4:	4798      	blx	r3
 8017cd6:	2800      	cmp	r0, #0
 8017cd8:	d0d0      	beq.n	8017c7c <_scanf_chars+0x30>
 8017cda:	6823      	ldr	r3, [r4, #0]
 8017cdc:	f013 0310 	ands.w	r3, r3, #16
 8017ce0:	d105      	bne.n	8017cee <_scanf_chars+0xa2>
 8017ce2:	68e2      	ldr	r2, [r4, #12]
 8017ce4:	3201      	adds	r2, #1
 8017ce6:	60e2      	str	r2, [r4, #12]
 8017ce8:	69a2      	ldr	r2, [r4, #24]
 8017cea:	b102      	cbz	r2, 8017cee <_scanf_chars+0xa2>
 8017cec:	7033      	strb	r3, [r6, #0]
 8017cee:	6923      	ldr	r3, [r4, #16]
 8017cf0:	443b      	add	r3, r7
 8017cf2:	6123      	str	r3, [r4, #16]
 8017cf4:	2000      	movs	r0, #0
 8017cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017cfa:	bf00      	nop
 8017cfc:	08018527 	.word	0x08018527

08017d00 <_scanf_i>:
 8017d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d04:	4698      	mov	r8, r3
 8017d06:	4b74      	ldr	r3, [pc, #464]	; (8017ed8 <_scanf_i+0x1d8>)
 8017d08:	460c      	mov	r4, r1
 8017d0a:	4682      	mov	sl, r0
 8017d0c:	4616      	mov	r6, r2
 8017d0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017d12:	b087      	sub	sp, #28
 8017d14:	ab03      	add	r3, sp, #12
 8017d16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017d1a:	4b70      	ldr	r3, [pc, #448]	; (8017edc <_scanf_i+0x1dc>)
 8017d1c:	69a1      	ldr	r1, [r4, #24]
 8017d1e:	4a70      	ldr	r2, [pc, #448]	; (8017ee0 <_scanf_i+0x1e0>)
 8017d20:	2903      	cmp	r1, #3
 8017d22:	bf18      	it	ne
 8017d24:	461a      	movne	r2, r3
 8017d26:	68a3      	ldr	r3, [r4, #8]
 8017d28:	9201      	str	r2, [sp, #4]
 8017d2a:	1e5a      	subs	r2, r3, #1
 8017d2c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8017d30:	bf88      	it	hi
 8017d32:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017d36:	4627      	mov	r7, r4
 8017d38:	bf82      	ittt	hi
 8017d3a:	eb03 0905 	addhi.w	r9, r3, r5
 8017d3e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017d42:	60a3      	strhi	r3, [r4, #8]
 8017d44:	f857 3b1c 	ldr.w	r3, [r7], #28
 8017d48:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8017d4c:	bf98      	it	ls
 8017d4e:	f04f 0900 	movls.w	r9, #0
 8017d52:	6023      	str	r3, [r4, #0]
 8017d54:	463d      	mov	r5, r7
 8017d56:	f04f 0b00 	mov.w	fp, #0
 8017d5a:	6831      	ldr	r1, [r6, #0]
 8017d5c:	ab03      	add	r3, sp, #12
 8017d5e:	7809      	ldrb	r1, [r1, #0]
 8017d60:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8017d64:	2202      	movs	r2, #2
 8017d66:	f7e8 faeb 	bl	8000340 <memchr>
 8017d6a:	b328      	cbz	r0, 8017db8 <_scanf_i+0xb8>
 8017d6c:	f1bb 0f01 	cmp.w	fp, #1
 8017d70:	d159      	bne.n	8017e26 <_scanf_i+0x126>
 8017d72:	6862      	ldr	r2, [r4, #4]
 8017d74:	b92a      	cbnz	r2, 8017d82 <_scanf_i+0x82>
 8017d76:	6822      	ldr	r2, [r4, #0]
 8017d78:	2308      	movs	r3, #8
 8017d7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017d7e:	6063      	str	r3, [r4, #4]
 8017d80:	6022      	str	r2, [r4, #0]
 8017d82:	6822      	ldr	r2, [r4, #0]
 8017d84:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8017d88:	6022      	str	r2, [r4, #0]
 8017d8a:	68a2      	ldr	r2, [r4, #8]
 8017d8c:	1e51      	subs	r1, r2, #1
 8017d8e:	60a1      	str	r1, [r4, #8]
 8017d90:	b192      	cbz	r2, 8017db8 <_scanf_i+0xb8>
 8017d92:	6832      	ldr	r2, [r6, #0]
 8017d94:	1c51      	adds	r1, r2, #1
 8017d96:	6031      	str	r1, [r6, #0]
 8017d98:	7812      	ldrb	r2, [r2, #0]
 8017d9a:	f805 2b01 	strb.w	r2, [r5], #1
 8017d9e:	6872      	ldr	r2, [r6, #4]
 8017da0:	3a01      	subs	r2, #1
 8017da2:	2a00      	cmp	r2, #0
 8017da4:	6072      	str	r2, [r6, #4]
 8017da6:	dc07      	bgt.n	8017db8 <_scanf_i+0xb8>
 8017da8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8017dac:	4631      	mov	r1, r6
 8017dae:	4650      	mov	r0, sl
 8017db0:	4790      	blx	r2
 8017db2:	2800      	cmp	r0, #0
 8017db4:	f040 8085 	bne.w	8017ec2 <_scanf_i+0x1c2>
 8017db8:	f10b 0b01 	add.w	fp, fp, #1
 8017dbc:	f1bb 0f03 	cmp.w	fp, #3
 8017dc0:	d1cb      	bne.n	8017d5a <_scanf_i+0x5a>
 8017dc2:	6863      	ldr	r3, [r4, #4]
 8017dc4:	b90b      	cbnz	r3, 8017dca <_scanf_i+0xca>
 8017dc6:	230a      	movs	r3, #10
 8017dc8:	6063      	str	r3, [r4, #4]
 8017dca:	6863      	ldr	r3, [r4, #4]
 8017dcc:	4945      	ldr	r1, [pc, #276]	; (8017ee4 <_scanf_i+0x1e4>)
 8017dce:	6960      	ldr	r0, [r4, #20]
 8017dd0:	1ac9      	subs	r1, r1, r3
 8017dd2:	f000 f889 	bl	8017ee8 <__sccl>
 8017dd6:	f04f 0b00 	mov.w	fp, #0
 8017dda:	68a3      	ldr	r3, [r4, #8]
 8017ddc:	6822      	ldr	r2, [r4, #0]
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	d03d      	beq.n	8017e5e <_scanf_i+0x15e>
 8017de2:	6831      	ldr	r1, [r6, #0]
 8017de4:	6960      	ldr	r0, [r4, #20]
 8017de6:	f891 c000 	ldrb.w	ip, [r1]
 8017dea:	f810 000c 	ldrb.w	r0, [r0, ip]
 8017dee:	2800      	cmp	r0, #0
 8017df0:	d035      	beq.n	8017e5e <_scanf_i+0x15e>
 8017df2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8017df6:	d124      	bne.n	8017e42 <_scanf_i+0x142>
 8017df8:	0510      	lsls	r0, r2, #20
 8017dfa:	d522      	bpl.n	8017e42 <_scanf_i+0x142>
 8017dfc:	f10b 0b01 	add.w	fp, fp, #1
 8017e00:	f1b9 0f00 	cmp.w	r9, #0
 8017e04:	d003      	beq.n	8017e0e <_scanf_i+0x10e>
 8017e06:	3301      	adds	r3, #1
 8017e08:	f109 39ff 	add.w	r9, r9, #4294967295
 8017e0c:	60a3      	str	r3, [r4, #8]
 8017e0e:	6873      	ldr	r3, [r6, #4]
 8017e10:	3b01      	subs	r3, #1
 8017e12:	2b00      	cmp	r3, #0
 8017e14:	6073      	str	r3, [r6, #4]
 8017e16:	dd1b      	ble.n	8017e50 <_scanf_i+0x150>
 8017e18:	6833      	ldr	r3, [r6, #0]
 8017e1a:	3301      	adds	r3, #1
 8017e1c:	6033      	str	r3, [r6, #0]
 8017e1e:	68a3      	ldr	r3, [r4, #8]
 8017e20:	3b01      	subs	r3, #1
 8017e22:	60a3      	str	r3, [r4, #8]
 8017e24:	e7d9      	b.n	8017dda <_scanf_i+0xda>
 8017e26:	f1bb 0f02 	cmp.w	fp, #2
 8017e2a:	d1ae      	bne.n	8017d8a <_scanf_i+0x8a>
 8017e2c:	6822      	ldr	r2, [r4, #0]
 8017e2e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8017e32:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8017e36:	d1bf      	bne.n	8017db8 <_scanf_i+0xb8>
 8017e38:	2310      	movs	r3, #16
 8017e3a:	6063      	str	r3, [r4, #4]
 8017e3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017e40:	e7a2      	b.n	8017d88 <_scanf_i+0x88>
 8017e42:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8017e46:	6022      	str	r2, [r4, #0]
 8017e48:	780b      	ldrb	r3, [r1, #0]
 8017e4a:	f805 3b01 	strb.w	r3, [r5], #1
 8017e4e:	e7de      	b.n	8017e0e <_scanf_i+0x10e>
 8017e50:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017e54:	4631      	mov	r1, r6
 8017e56:	4650      	mov	r0, sl
 8017e58:	4798      	blx	r3
 8017e5a:	2800      	cmp	r0, #0
 8017e5c:	d0df      	beq.n	8017e1e <_scanf_i+0x11e>
 8017e5e:	6823      	ldr	r3, [r4, #0]
 8017e60:	05d9      	lsls	r1, r3, #23
 8017e62:	d50d      	bpl.n	8017e80 <_scanf_i+0x180>
 8017e64:	42bd      	cmp	r5, r7
 8017e66:	d909      	bls.n	8017e7c <_scanf_i+0x17c>
 8017e68:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017e6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017e70:	4632      	mov	r2, r6
 8017e72:	4650      	mov	r0, sl
 8017e74:	4798      	blx	r3
 8017e76:	f105 39ff 	add.w	r9, r5, #4294967295
 8017e7a:	464d      	mov	r5, r9
 8017e7c:	42bd      	cmp	r5, r7
 8017e7e:	d028      	beq.n	8017ed2 <_scanf_i+0x1d2>
 8017e80:	6822      	ldr	r2, [r4, #0]
 8017e82:	f012 0210 	ands.w	r2, r2, #16
 8017e86:	d113      	bne.n	8017eb0 <_scanf_i+0x1b0>
 8017e88:	702a      	strb	r2, [r5, #0]
 8017e8a:	6863      	ldr	r3, [r4, #4]
 8017e8c:	9e01      	ldr	r6, [sp, #4]
 8017e8e:	4639      	mov	r1, r7
 8017e90:	4650      	mov	r0, sl
 8017e92:	47b0      	blx	r6
 8017e94:	f8d8 3000 	ldr.w	r3, [r8]
 8017e98:	6821      	ldr	r1, [r4, #0]
 8017e9a:	1d1a      	adds	r2, r3, #4
 8017e9c:	f8c8 2000 	str.w	r2, [r8]
 8017ea0:	f011 0f20 	tst.w	r1, #32
 8017ea4:	681b      	ldr	r3, [r3, #0]
 8017ea6:	d00f      	beq.n	8017ec8 <_scanf_i+0x1c8>
 8017ea8:	6018      	str	r0, [r3, #0]
 8017eaa:	68e3      	ldr	r3, [r4, #12]
 8017eac:	3301      	adds	r3, #1
 8017eae:	60e3      	str	r3, [r4, #12]
 8017eb0:	6923      	ldr	r3, [r4, #16]
 8017eb2:	1bed      	subs	r5, r5, r7
 8017eb4:	445d      	add	r5, fp
 8017eb6:	442b      	add	r3, r5
 8017eb8:	6123      	str	r3, [r4, #16]
 8017eba:	2000      	movs	r0, #0
 8017ebc:	b007      	add	sp, #28
 8017ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ec2:	f04f 0b00 	mov.w	fp, #0
 8017ec6:	e7ca      	b.n	8017e5e <_scanf_i+0x15e>
 8017ec8:	07ca      	lsls	r2, r1, #31
 8017eca:	bf4c      	ite	mi
 8017ecc:	8018      	strhmi	r0, [r3, #0]
 8017ece:	6018      	strpl	r0, [r3, #0]
 8017ed0:	e7eb      	b.n	8017eaa <_scanf_i+0x1aa>
 8017ed2:	2001      	movs	r0, #1
 8017ed4:	e7f2      	b.n	8017ebc <_scanf_i+0x1bc>
 8017ed6:	bf00      	nop
 8017ed8:	08018408 	.word	0x08018408
 8017edc:	08018271 	.word	0x08018271
 8017ee0:	08018189 	.word	0x08018189
 8017ee4:	0801851b 	.word	0x0801851b

08017ee8 <__sccl>:
 8017ee8:	b570      	push	{r4, r5, r6, lr}
 8017eea:	780b      	ldrb	r3, [r1, #0]
 8017eec:	4604      	mov	r4, r0
 8017eee:	2b5e      	cmp	r3, #94	; 0x5e
 8017ef0:	bf0b      	itete	eq
 8017ef2:	784b      	ldrbeq	r3, [r1, #1]
 8017ef4:	1c4a      	addne	r2, r1, #1
 8017ef6:	1c8a      	addeq	r2, r1, #2
 8017ef8:	2100      	movne	r1, #0
 8017efa:	bf08      	it	eq
 8017efc:	2101      	moveq	r1, #1
 8017efe:	3801      	subs	r0, #1
 8017f00:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8017f04:	f800 1f01 	strb.w	r1, [r0, #1]!
 8017f08:	42a8      	cmp	r0, r5
 8017f0a:	d1fb      	bne.n	8017f04 <__sccl+0x1c>
 8017f0c:	b90b      	cbnz	r3, 8017f12 <__sccl+0x2a>
 8017f0e:	1e50      	subs	r0, r2, #1
 8017f10:	bd70      	pop	{r4, r5, r6, pc}
 8017f12:	f081 0101 	eor.w	r1, r1, #1
 8017f16:	54e1      	strb	r1, [r4, r3]
 8017f18:	4610      	mov	r0, r2
 8017f1a:	4602      	mov	r2, r0
 8017f1c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8017f20:	2d2d      	cmp	r5, #45	; 0x2d
 8017f22:	d005      	beq.n	8017f30 <__sccl+0x48>
 8017f24:	2d5d      	cmp	r5, #93	; 0x5d
 8017f26:	d016      	beq.n	8017f56 <__sccl+0x6e>
 8017f28:	2d00      	cmp	r5, #0
 8017f2a:	d0f1      	beq.n	8017f10 <__sccl+0x28>
 8017f2c:	462b      	mov	r3, r5
 8017f2e:	e7f2      	b.n	8017f16 <__sccl+0x2e>
 8017f30:	7846      	ldrb	r6, [r0, #1]
 8017f32:	2e5d      	cmp	r6, #93	; 0x5d
 8017f34:	d0fa      	beq.n	8017f2c <__sccl+0x44>
 8017f36:	42b3      	cmp	r3, r6
 8017f38:	dcf8      	bgt.n	8017f2c <__sccl+0x44>
 8017f3a:	3002      	adds	r0, #2
 8017f3c:	461a      	mov	r2, r3
 8017f3e:	3201      	adds	r2, #1
 8017f40:	4296      	cmp	r6, r2
 8017f42:	54a1      	strb	r1, [r4, r2]
 8017f44:	dcfb      	bgt.n	8017f3e <__sccl+0x56>
 8017f46:	1af2      	subs	r2, r6, r3
 8017f48:	3a01      	subs	r2, #1
 8017f4a:	1c5d      	adds	r5, r3, #1
 8017f4c:	42b3      	cmp	r3, r6
 8017f4e:	bfa8      	it	ge
 8017f50:	2200      	movge	r2, #0
 8017f52:	18ab      	adds	r3, r5, r2
 8017f54:	e7e1      	b.n	8017f1a <__sccl+0x32>
 8017f56:	4610      	mov	r0, r2
 8017f58:	e7da      	b.n	8017f10 <__sccl+0x28>

08017f5a <__submore>:
 8017f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f5e:	460c      	mov	r4, r1
 8017f60:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017f62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017f66:	4299      	cmp	r1, r3
 8017f68:	d11d      	bne.n	8017fa6 <__submore+0x4c>
 8017f6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017f6e:	f7ff f927 	bl	80171c0 <_malloc_r>
 8017f72:	b918      	cbnz	r0, 8017f7c <__submore+0x22>
 8017f74:	f04f 30ff 	mov.w	r0, #4294967295
 8017f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017f80:	63a3      	str	r3, [r4, #56]	; 0x38
 8017f82:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8017f86:	6360      	str	r0, [r4, #52]	; 0x34
 8017f88:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8017f8c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8017f90:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8017f94:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017f98:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8017f9c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8017fa0:	6020      	str	r0, [r4, #0]
 8017fa2:	2000      	movs	r0, #0
 8017fa4:	e7e8      	b.n	8017f78 <__submore+0x1e>
 8017fa6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8017fa8:	0077      	lsls	r7, r6, #1
 8017faa:	463a      	mov	r2, r7
 8017fac:	f000 f83a 	bl	8018024 <_realloc_r>
 8017fb0:	4605      	mov	r5, r0
 8017fb2:	2800      	cmp	r0, #0
 8017fb4:	d0de      	beq.n	8017f74 <__submore+0x1a>
 8017fb6:	eb00 0806 	add.w	r8, r0, r6
 8017fba:	4601      	mov	r1, r0
 8017fbc:	4632      	mov	r2, r6
 8017fbe:	4640      	mov	r0, r8
 8017fc0:	f7ff f884 	bl	80170cc <memcpy>
 8017fc4:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8017fc8:	f8c4 8000 	str.w	r8, [r4]
 8017fcc:	e7e9      	b.n	8017fa2 <__submore+0x48>

08017fce <memmove>:
 8017fce:	4288      	cmp	r0, r1
 8017fd0:	b510      	push	{r4, lr}
 8017fd2:	eb01 0402 	add.w	r4, r1, r2
 8017fd6:	d902      	bls.n	8017fde <memmove+0x10>
 8017fd8:	4284      	cmp	r4, r0
 8017fda:	4623      	mov	r3, r4
 8017fdc:	d807      	bhi.n	8017fee <memmove+0x20>
 8017fde:	1e43      	subs	r3, r0, #1
 8017fe0:	42a1      	cmp	r1, r4
 8017fe2:	d008      	beq.n	8017ff6 <memmove+0x28>
 8017fe4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017fe8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017fec:	e7f8      	b.n	8017fe0 <memmove+0x12>
 8017fee:	4402      	add	r2, r0
 8017ff0:	4601      	mov	r1, r0
 8017ff2:	428a      	cmp	r2, r1
 8017ff4:	d100      	bne.n	8017ff8 <memmove+0x2a>
 8017ff6:	bd10      	pop	{r4, pc}
 8017ff8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017ffc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018000:	e7f7      	b.n	8017ff2 <memmove+0x24>
	...

08018004 <_sbrk_r>:
 8018004:	b538      	push	{r3, r4, r5, lr}
 8018006:	4d06      	ldr	r5, [pc, #24]	; (8018020 <_sbrk_r+0x1c>)
 8018008:	2300      	movs	r3, #0
 801800a:	4604      	mov	r4, r0
 801800c:	4608      	mov	r0, r1
 801800e:	602b      	str	r3, [r5, #0]
 8018010:	f7eb fb6e 	bl	80036f0 <_sbrk>
 8018014:	1c43      	adds	r3, r0, #1
 8018016:	d102      	bne.n	801801e <_sbrk_r+0x1a>
 8018018:	682b      	ldr	r3, [r5, #0]
 801801a:	b103      	cbz	r3, 801801e <_sbrk_r+0x1a>
 801801c:	6023      	str	r3, [r4, #0]
 801801e:	bd38      	pop	{r3, r4, r5, pc}
 8018020:	24003334 	.word	0x24003334

08018024 <_realloc_r>:
 8018024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018028:	4680      	mov	r8, r0
 801802a:	4614      	mov	r4, r2
 801802c:	460e      	mov	r6, r1
 801802e:	b921      	cbnz	r1, 801803a <_realloc_r+0x16>
 8018030:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018034:	4611      	mov	r1, r2
 8018036:	f7ff b8c3 	b.w	80171c0 <_malloc_r>
 801803a:	b92a      	cbnz	r2, 8018048 <_realloc_r+0x24>
 801803c:	f7ff f854 	bl	80170e8 <_free_r>
 8018040:	4625      	mov	r5, r4
 8018042:	4628      	mov	r0, r5
 8018044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018048:	f000 f914 	bl	8018274 <_malloc_usable_size_r>
 801804c:	4284      	cmp	r4, r0
 801804e:	4607      	mov	r7, r0
 8018050:	d802      	bhi.n	8018058 <_realloc_r+0x34>
 8018052:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018056:	d812      	bhi.n	801807e <_realloc_r+0x5a>
 8018058:	4621      	mov	r1, r4
 801805a:	4640      	mov	r0, r8
 801805c:	f7ff f8b0 	bl	80171c0 <_malloc_r>
 8018060:	4605      	mov	r5, r0
 8018062:	2800      	cmp	r0, #0
 8018064:	d0ed      	beq.n	8018042 <_realloc_r+0x1e>
 8018066:	42bc      	cmp	r4, r7
 8018068:	4622      	mov	r2, r4
 801806a:	4631      	mov	r1, r6
 801806c:	bf28      	it	cs
 801806e:	463a      	movcs	r2, r7
 8018070:	f7ff f82c 	bl	80170cc <memcpy>
 8018074:	4631      	mov	r1, r6
 8018076:	4640      	mov	r0, r8
 8018078:	f7ff f836 	bl	80170e8 <_free_r>
 801807c:	e7e1      	b.n	8018042 <_realloc_r+0x1e>
 801807e:	4635      	mov	r5, r6
 8018080:	e7df      	b.n	8018042 <_realloc_r+0x1e>
	...

08018084 <_strtol_l.constprop.0>:
 8018084:	2b01      	cmp	r3, #1
 8018086:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801808a:	d001      	beq.n	8018090 <_strtol_l.constprop.0+0xc>
 801808c:	2b24      	cmp	r3, #36	; 0x24
 801808e:	d906      	bls.n	801809e <_strtol_l.constprop.0+0x1a>
 8018090:	f7fe ffe8 	bl	8017064 <__errno>
 8018094:	2316      	movs	r3, #22
 8018096:	6003      	str	r3, [r0, #0]
 8018098:	2000      	movs	r0, #0
 801809a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801809e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8018184 <_strtol_l.constprop.0+0x100>
 80180a2:	460d      	mov	r5, r1
 80180a4:	462e      	mov	r6, r5
 80180a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80180aa:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80180ae:	f017 0708 	ands.w	r7, r7, #8
 80180b2:	d1f7      	bne.n	80180a4 <_strtol_l.constprop.0+0x20>
 80180b4:	2c2d      	cmp	r4, #45	; 0x2d
 80180b6:	d132      	bne.n	801811e <_strtol_l.constprop.0+0x9a>
 80180b8:	782c      	ldrb	r4, [r5, #0]
 80180ba:	2701      	movs	r7, #1
 80180bc:	1cb5      	adds	r5, r6, #2
 80180be:	2b00      	cmp	r3, #0
 80180c0:	d05b      	beq.n	801817a <_strtol_l.constprop.0+0xf6>
 80180c2:	2b10      	cmp	r3, #16
 80180c4:	d109      	bne.n	80180da <_strtol_l.constprop.0+0x56>
 80180c6:	2c30      	cmp	r4, #48	; 0x30
 80180c8:	d107      	bne.n	80180da <_strtol_l.constprop.0+0x56>
 80180ca:	782c      	ldrb	r4, [r5, #0]
 80180cc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80180d0:	2c58      	cmp	r4, #88	; 0x58
 80180d2:	d14d      	bne.n	8018170 <_strtol_l.constprop.0+0xec>
 80180d4:	786c      	ldrb	r4, [r5, #1]
 80180d6:	2310      	movs	r3, #16
 80180d8:	3502      	adds	r5, #2
 80180da:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80180de:	f108 38ff 	add.w	r8, r8, #4294967295
 80180e2:	f04f 0e00 	mov.w	lr, #0
 80180e6:	fbb8 f9f3 	udiv	r9, r8, r3
 80180ea:	4676      	mov	r6, lr
 80180ec:	fb03 8a19 	mls	sl, r3, r9, r8
 80180f0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80180f4:	f1bc 0f09 	cmp.w	ip, #9
 80180f8:	d816      	bhi.n	8018128 <_strtol_l.constprop.0+0xa4>
 80180fa:	4664      	mov	r4, ip
 80180fc:	42a3      	cmp	r3, r4
 80180fe:	dd24      	ble.n	801814a <_strtol_l.constprop.0+0xc6>
 8018100:	f1be 3fff 	cmp.w	lr, #4294967295
 8018104:	d008      	beq.n	8018118 <_strtol_l.constprop.0+0x94>
 8018106:	45b1      	cmp	r9, r6
 8018108:	d31c      	bcc.n	8018144 <_strtol_l.constprop.0+0xc0>
 801810a:	d101      	bne.n	8018110 <_strtol_l.constprop.0+0x8c>
 801810c:	45a2      	cmp	sl, r4
 801810e:	db19      	blt.n	8018144 <_strtol_l.constprop.0+0xc0>
 8018110:	fb06 4603 	mla	r6, r6, r3, r4
 8018114:	f04f 0e01 	mov.w	lr, #1
 8018118:	f815 4b01 	ldrb.w	r4, [r5], #1
 801811c:	e7e8      	b.n	80180f0 <_strtol_l.constprop.0+0x6c>
 801811e:	2c2b      	cmp	r4, #43	; 0x2b
 8018120:	bf04      	itt	eq
 8018122:	782c      	ldrbeq	r4, [r5, #0]
 8018124:	1cb5      	addeq	r5, r6, #2
 8018126:	e7ca      	b.n	80180be <_strtol_l.constprop.0+0x3a>
 8018128:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801812c:	f1bc 0f19 	cmp.w	ip, #25
 8018130:	d801      	bhi.n	8018136 <_strtol_l.constprop.0+0xb2>
 8018132:	3c37      	subs	r4, #55	; 0x37
 8018134:	e7e2      	b.n	80180fc <_strtol_l.constprop.0+0x78>
 8018136:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801813a:	f1bc 0f19 	cmp.w	ip, #25
 801813e:	d804      	bhi.n	801814a <_strtol_l.constprop.0+0xc6>
 8018140:	3c57      	subs	r4, #87	; 0x57
 8018142:	e7db      	b.n	80180fc <_strtol_l.constprop.0+0x78>
 8018144:	f04f 3eff 	mov.w	lr, #4294967295
 8018148:	e7e6      	b.n	8018118 <_strtol_l.constprop.0+0x94>
 801814a:	f1be 3fff 	cmp.w	lr, #4294967295
 801814e:	d105      	bne.n	801815c <_strtol_l.constprop.0+0xd8>
 8018150:	2322      	movs	r3, #34	; 0x22
 8018152:	6003      	str	r3, [r0, #0]
 8018154:	4646      	mov	r6, r8
 8018156:	b942      	cbnz	r2, 801816a <_strtol_l.constprop.0+0xe6>
 8018158:	4630      	mov	r0, r6
 801815a:	e79e      	b.n	801809a <_strtol_l.constprop.0+0x16>
 801815c:	b107      	cbz	r7, 8018160 <_strtol_l.constprop.0+0xdc>
 801815e:	4276      	negs	r6, r6
 8018160:	2a00      	cmp	r2, #0
 8018162:	d0f9      	beq.n	8018158 <_strtol_l.constprop.0+0xd4>
 8018164:	f1be 0f00 	cmp.w	lr, #0
 8018168:	d000      	beq.n	801816c <_strtol_l.constprop.0+0xe8>
 801816a:	1e69      	subs	r1, r5, #1
 801816c:	6011      	str	r1, [r2, #0]
 801816e:	e7f3      	b.n	8018158 <_strtol_l.constprop.0+0xd4>
 8018170:	2430      	movs	r4, #48	; 0x30
 8018172:	2b00      	cmp	r3, #0
 8018174:	d1b1      	bne.n	80180da <_strtol_l.constprop.0+0x56>
 8018176:	2308      	movs	r3, #8
 8018178:	e7af      	b.n	80180da <_strtol_l.constprop.0+0x56>
 801817a:	2c30      	cmp	r4, #48	; 0x30
 801817c:	d0a5      	beq.n	80180ca <_strtol_l.constprop.0+0x46>
 801817e:	230a      	movs	r3, #10
 8018180:	e7ab      	b.n	80180da <_strtol_l.constprop.0+0x56>
 8018182:	bf00      	nop
 8018184:	08018527 	.word	0x08018527

08018188 <_strtol_r>:
 8018188:	f7ff bf7c 	b.w	8018084 <_strtol_l.constprop.0>

0801818c <_strtoul_l.constprop.0>:
 801818c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018190:	4f36      	ldr	r7, [pc, #216]	; (801826c <_strtoul_l.constprop.0+0xe0>)
 8018192:	4686      	mov	lr, r0
 8018194:	460d      	mov	r5, r1
 8018196:	4628      	mov	r0, r5
 8018198:	f815 4b01 	ldrb.w	r4, [r5], #1
 801819c:	5d3e      	ldrb	r6, [r7, r4]
 801819e:	f016 0608 	ands.w	r6, r6, #8
 80181a2:	d1f8      	bne.n	8018196 <_strtoul_l.constprop.0+0xa>
 80181a4:	2c2d      	cmp	r4, #45	; 0x2d
 80181a6:	d130      	bne.n	801820a <_strtoul_l.constprop.0+0x7e>
 80181a8:	782c      	ldrb	r4, [r5, #0]
 80181aa:	2601      	movs	r6, #1
 80181ac:	1c85      	adds	r5, r0, #2
 80181ae:	2b00      	cmp	r3, #0
 80181b0:	d057      	beq.n	8018262 <_strtoul_l.constprop.0+0xd6>
 80181b2:	2b10      	cmp	r3, #16
 80181b4:	d109      	bne.n	80181ca <_strtoul_l.constprop.0+0x3e>
 80181b6:	2c30      	cmp	r4, #48	; 0x30
 80181b8:	d107      	bne.n	80181ca <_strtoul_l.constprop.0+0x3e>
 80181ba:	7828      	ldrb	r0, [r5, #0]
 80181bc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80181c0:	2858      	cmp	r0, #88	; 0x58
 80181c2:	d149      	bne.n	8018258 <_strtoul_l.constprop.0+0xcc>
 80181c4:	786c      	ldrb	r4, [r5, #1]
 80181c6:	2310      	movs	r3, #16
 80181c8:	3502      	adds	r5, #2
 80181ca:	f04f 38ff 	mov.w	r8, #4294967295
 80181ce:	2700      	movs	r7, #0
 80181d0:	fbb8 f8f3 	udiv	r8, r8, r3
 80181d4:	fb03 f908 	mul.w	r9, r3, r8
 80181d8:	ea6f 0909 	mvn.w	r9, r9
 80181dc:	4638      	mov	r0, r7
 80181de:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80181e2:	f1bc 0f09 	cmp.w	ip, #9
 80181e6:	d815      	bhi.n	8018214 <_strtoul_l.constprop.0+0x88>
 80181e8:	4664      	mov	r4, ip
 80181ea:	42a3      	cmp	r3, r4
 80181ec:	dd23      	ble.n	8018236 <_strtoul_l.constprop.0+0xaa>
 80181ee:	f1b7 3fff 	cmp.w	r7, #4294967295
 80181f2:	d007      	beq.n	8018204 <_strtoul_l.constprop.0+0x78>
 80181f4:	4580      	cmp	r8, r0
 80181f6:	d31b      	bcc.n	8018230 <_strtoul_l.constprop.0+0xa4>
 80181f8:	d101      	bne.n	80181fe <_strtoul_l.constprop.0+0x72>
 80181fa:	45a1      	cmp	r9, r4
 80181fc:	db18      	blt.n	8018230 <_strtoul_l.constprop.0+0xa4>
 80181fe:	fb00 4003 	mla	r0, r0, r3, r4
 8018202:	2701      	movs	r7, #1
 8018204:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018208:	e7e9      	b.n	80181de <_strtoul_l.constprop.0+0x52>
 801820a:	2c2b      	cmp	r4, #43	; 0x2b
 801820c:	bf04      	itt	eq
 801820e:	782c      	ldrbeq	r4, [r5, #0]
 8018210:	1c85      	addeq	r5, r0, #2
 8018212:	e7cc      	b.n	80181ae <_strtoul_l.constprop.0+0x22>
 8018214:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8018218:	f1bc 0f19 	cmp.w	ip, #25
 801821c:	d801      	bhi.n	8018222 <_strtoul_l.constprop.0+0x96>
 801821e:	3c37      	subs	r4, #55	; 0x37
 8018220:	e7e3      	b.n	80181ea <_strtoul_l.constprop.0+0x5e>
 8018222:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8018226:	f1bc 0f19 	cmp.w	ip, #25
 801822a:	d804      	bhi.n	8018236 <_strtoul_l.constprop.0+0xaa>
 801822c:	3c57      	subs	r4, #87	; 0x57
 801822e:	e7dc      	b.n	80181ea <_strtoul_l.constprop.0+0x5e>
 8018230:	f04f 37ff 	mov.w	r7, #4294967295
 8018234:	e7e6      	b.n	8018204 <_strtoul_l.constprop.0+0x78>
 8018236:	1c7b      	adds	r3, r7, #1
 8018238:	d106      	bne.n	8018248 <_strtoul_l.constprop.0+0xbc>
 801823a:	2322      	movs	r3, #34	; 0x22
 801823c:	f8ce 3000 	str.w	r3, [lr]
 8018240:	4638      	mov	r0, r7
 8018242:	b932      	cbnz	r2, 8018252 <_strtoul_l.constprop.0+0xc6>
 8018244:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018248:	b106      	cbz	r6, 801824c <_strtoul_l.constprop.0+0xc0>
 801824a:	4240      	negs	r0, r0
 801824c:	2a00      	cmp	r2, #0
 801824e:	d0f9      	beq.n	8018244 <_strtoul_l.constprop.0+0xb8>
 8018250:	b107      	cbz	r7, 8018254 <_strtoul_l.constprop.0+0xc8>
 8018252:	1e69      	subs	r1, r5, #1
 8018254:	6011      	str	r1, [r2, #0]
 8018256:	e7f5      	b.n	8018244 <_strtoul_l.constprop.0+0xb8>
 8018258:	2430      	movs	r4, #48	; 0x30
 801825a:	2b00      	cmp	r3, #0
 801825c:	d1b5      	bne.n	80181ca <_strtoul_l.constprop.0+0x3e>
 801825e:	2308      	movs	r3, #8
 8018260:	e7b3      	b.n	80181ca <_strtoul_l.constprop.0+0x3e>
 8018262:	2c30      	cmp	r4, #48	; 0x30
 8018264:	d0a9      	beq.n	80181ba <_strtoul_l.constprop.0+0x2e>
 8018266:	230a      	movs	r3, #10
 8018268:	e7af      	b.n	80181ca <_strtoul_l.constprop.0+0x3e>
 801826a:	bf00      	nop
 801826c:	08018527 	.word	0x08018527

08018270 <_strtoul_r>:
 8018270:	f7ff bf8c 	b.w	801818c <_strtoul_l.constprop.0>

08018274 <_malloc_usable_size_r>:
 8018274:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018278:	1f18      	subs	r0, r3, #4
 801827a:	2b00      	cmp	r3, #0
 801827c:	bfbc      	itt	lt
 801827e:	580b      	ldrlt	r3, [r1, r0]
 8018280:	18c0      	addlt	r0, r0, r3
 8018282:	4770      	bx	lr

08018284 <_init>:
 8018284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018286:	bf00      	nop
 8018288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801828a:	bc08      	pop	{r3}
 801828c:	469e      	mov	lr, r3
 801828e:	4770      	bx	lr

08018290 <_fini>:
 8018290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018292:	bf00      	nop
 8018294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018296:	bc08      	pop	{r3}
 8018298:	469e      	mov	lr, r3
 801829a:	4770      	bx	lr
