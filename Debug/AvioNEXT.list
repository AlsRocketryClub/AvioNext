
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b6b0  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f80  0801b980  0801b980  0002b980  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801d900  0801d900  0002d900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801d908  0801d908  0002d908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801d90c  0801d90c  0002d90c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002d4  24000000  0801d910  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002f78  240002d4  0801dbe4  000302d4  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  2400324c  0801dbe4  0003324c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000302d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00038c2b  00000000  00000000  00030302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006483  00000000  00000000  00068f2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002bd0  00000000  00000000  0006f3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000029d8  00000000  00000000  00071f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003f0ed  00000000  00000000  00074958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003a9e6  00000000  00000000  000b3a45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017ec73  00000000  00000000  000ee42b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0026d09e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000d3f4  00000000  00000000  0026d0f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002d4 	.word	0x240002d4
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801b968 	.word	0x0801b968

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002d8 	.word	0x240002d8
 800030c:	0801b968 	.word	0x0801b968

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	; 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295
 8000768:	f04f 30ff 	movne.w	r0, #4294967295
 800076c:	f000 b9ac 	b.w	8000ac8 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f83e 	bl	80007f8 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__aeabi_d2lz>:
 8000788:	b508      	push	{r3, lr}
 800078a:	4602      	mov	r2, r0
 800078c:	460b      	mov	r3, r1
 800078e:	ec43 2b17 	vmov	d7, r2, r3
 8000792:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079a:	d403      	bmi.n	80007a4 <__aeabi_d2lz+0x1c>
 800079c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007a0:	f000 b80a 	b.w	80007b8 <__aeabi_d2ulz>
 80007a4:	eeb1 7b47 	vneg.f64	d7, d7
 80007a8:	ec51 0b17 	vmov	r0, r1, d7
 80007ac:	f000 f804 	bl	80007b8 <__aeabi_d2ulz>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	bd08      	pop	{r3, pc}

080007b8 <__aeabi_d2ulz>:
 80007b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007e8 <__aeabi_d2ulz+0x30>
 80007bc:	ec41 0b17 	vmov	d7, r0, r1
 80007c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007f0 <__aeabi_d2ulz+0x38>
 80007c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007d8:	ee16 1a10 	vmov	r1, s12
 80007dc:	ee17 0a90 	vmov	r0, s15
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	f3af 8000 	nop.w
 80007e8:	00000000 	.word	0x00000000
 80007ec:	3df00000 	.word	0x3df00000
 80007f0:	00000000 	.word	0x00000000
 80007f4:	41f00000 	.word	0x41f00000

080007f8 <__udivmoddi4>:
 80007f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007fc:	9d08      	ldr	r5, [sp, #32]
 80007fe:	4604      	mov	r4, r0
 8000800:	468e      	mov	lr, r1
 8000802:	2b00      	cmp	r3, #0
 8000804:	d14d      	bne.n	80008a2 <__udivmoddi4+0xaa>
 8000806:	428a      	cmp	r2, r1
 8000808:	4694      	mov	ip, r2
 800080a:	d969      	bls.n	80008e0 <__udivmoddi4+0xe8>
 800080c:	fab2 f282 	clz	r2, r2
 8000810:	b152      	cbz	r2, 8000828 <__udivmoddi4+0x30>
 8000812:	fa01 f302 	lsl.w	r3, r1, r2
 8000816:	f1c2 0120 	rsb	r1, r2, #32
 800081a:	fa20 f101 	lsr.w	r1, r0, r1
 800081e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000822:	ea41 0e03 	orr.w	lr, r1, r3
 8000826:	4094      	lsls	r4, r2
 8000828:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800082c:	0c21      	lsrs	r1, r4, #16
 800082e:	fbbe f6f8 	udiv	r6, lr, r8
 8000832:	fa1f f78c 	uxth.w	r7, ip
 8000836:	fb08 e316 	mls	r3, r8, r6, lr
 800083a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800083e:	fb06 f107 	mul.w	r1, r6, r7
 8000842:	4299      	cmp	r1, r3
 8000844:	d90a      	bls.n	800085c <__udivmoddi4+0x64>
 8000846:	eb1c 0303 	adds.w	r3, ip, r3
 800084a:	f106 30ff 	add.w	r0, r6, #4294967295
 800084e:	f080 811f 	bcs.w	8000a90 <__udivmoddi4+0x298>
 8000852:	4299      	cmp	r1, r3
 8000854:	f240 811c 	bls.w	8000a90 <__udivmoddi4+0x298>
 8000858:	3e02      	subs	r6, #2
 800085a:	4463      	add	r3, ip
 800085c:	1a5b      	subs	r3, r3, r1
 800085e:	b2a4      	uxth	r4, r4
 8000860:	fbb3 f0f8 	udiv	r0, r3, r8
 8000864:	fb08 3310 	mls	r3, r8, r0, r3
 8000868:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800086c:	fb00 f707 	mul.w	r7, r0, r7
 8000870:	42a7      	cmp	r7, r4
 8000872:	d90a      	bls.n	800088a <__udivmoddi4+0x92>
 8000874:	eb1c 0404 	adds.w	r4, ip, r4
 8000878:	f100 33ff 	add.w	r3, r0, #4294967295
 800087c:	f080 810a 	bcs.w	8000a94 <__udivmoddi4+0x29c>
 8000880:	42a7      	cmp	r7, r4
 8000882:	f240 8107 	bls.w	8000a94 <__udivmoddi4+0x29c>
 8000886:	4464      	add	r4, ip
 8000888:	3802      	subs	r0, #2
 800088a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800088e:	1be4      	subs	r4, r4, r7
 8000890:	2600      	movs	r6, #0
 8000892:	b11d      	cbz	r5, 800089c <__udivmoddi4+0xa4>
 8000894:	40d4      	lsrs	r4, r2
 8000896:	2300      	movs	r3, #0
 8000898:	e9c5 4300 	strd	r4, r3, [r5]
 800089c:	4631      	mov	r1, r6
 800089e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d909      	bls.n	80008ba <__udivmoddi4+0xc2>
 80008a6:	2d00      	cmp	r5, #0
 80008a8:	f000 80ef 	beq.w	8000a8a <__udivmoddi4+0x292>
 80008ac:	2600      	movs	r6, #0
 80008ae:	e9c5 0100 	strd	r0, r1, [r5]
 80008b2:	4630      	mov	r0, r6
 80008b4:	4631      	mov	r1, r6
 80008b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ba:	fab3 f683 	clz	r6, r3
 80008be:	2e00      	cmp	r6, #0
 80008c0:	d14a      	bne.n	8000958 <__udivmoddi4+0x160>
 80008c2:	428b      	cmp	r3, r1
 80008c4:	d302      	bcc.n	80008cc <__udivmoddi4+0xd4>
 80008c6:	4282      	cmp	r2, r0
 80008c8:	f200 80f9 	bhi.w	8000abe <__udivmoddi4+0x2c6>
 80008cc:	1a84      	subs	r4, r0, r2
 80008ce:	eb61 0303 	sbc.w	r3, r1, r3
 80008d2:	2001      	movs	r0, #1
 80008d4:	469e      	mov	lr, r3
 80008d6:	2d00      	cmp	r5, #0
 80008d8:	d0e0      	beq.n	800089c <__udivmoddi4+0xa4>
 80008da:	e9c5 4e00 	strd	r4, lr, [r5]
 80008de:	e7dd      	b.n	800089c <__udivmoddi4+0xa4>
 80008e0:	b902      	cbnz	r2, 80008e4 <__udivmoddi4+0xec>
 80008e2:	deff      	udf	#255	; 0xff
 80008e4:	fab2 f282 	clz	r2, r2
 80008e8:	2a00      	cmp	r2, #0
 80008ea:	f040 8092 	bne.w	8000a12 <__udivmoddi4+0x21a>
 80008ee:	eba1 010c 	sub.w	r1, r1, ip
 80008f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008f6:	fa1f fe8c 	uxth.w	lr, ip
 80008fa:	2601      	movs	r6, #1
 80008fc:	0c20      	lsrs	r0, r4, #16
 80008fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000902:	fb07 1113 	mls	r1, r7, r3, r1
 8000906:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800090a:	fb0e f003 	mul.w	r0, lr, r3
 800090e:	4288      	cmp	r0, r1
 8000910:	d908      	bls.n	8000924 <__udivmoddi4+0x12c>
 8000912:	eb1c 0101 	adds.w	r1, ip, r1
 8000916:	f103 38ff 	add.w	r8, r3, #4294967295
 800091a:	d202      	bcs.n	8000922 <__udivmoddi4+0x12a>
 800091c:	4288      	cmp	r0, r1
 800091e:	f200 80cb 	bhi.w	8000ab8 <__udivmoddi4+0x2c0>
 8000922:	4643      	mov	r3, r8
 8000924:	1a09      	subs	r1, r1, r0
 8000926:	b2a4      	uxth	r4, r4
 8000928:	fbb1 f0f7 	udiv	r0, r1, r7
 800092c:	fb07 1110 	mls	r1, r7, r0, r1
 8000930:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000934:	fb0e fe00 	mul.w	lr, lr, r0
 8000938:	45a6      	cmp	lr, r4
 800093a:	d908      	bls.n	800094e <__udivmoddi4+0x156>
 800093c:	eb1c 0404 	adds.w	r4, ip, r4
 8000940:	f100 31ff 	add.w	r1, r0, #4294967295
 8000944:	d202      	bcs.n	800094c <__udivmoddi4+0x154>
 8000946:	45a6      	cmp	lr, r4
 8000948:	f200 80bb 	bhi.w	8000ac2 <__udivmoddi4+0x2ca>
 800094c:	4608      	mov	r0, r1
 800094e:	eba4 040e 	sub.w	r4, r4, lr
 8000952:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000956:	e79c      	b.n	8000892 <__udivmoddi4+0x9a>
 8000958:	f1c6 0720 	rsb	r7, r6, #32
 800095c:	40b3      	lsls	r3, r6
 800095e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000962:	ea4c 0c03 	orr.w	ip, ip, r3
 8000966:	fa20 f407 	lsr.w	r4, r0, r7
 800096a:	fa01 f306 	lsl.w	r3, r1, r6
 800096e:	431c      	orrs	r4, r3
 8000970:	40f9      	lsrs	r1, r7
 8000972:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000976:	fa00 f306 	lsl.w	r3, r0, r6
 800097a:	fbb1 f8f9 	udiv	r8, r1, r9
 800097e:	0c20      	lsrs	r0, r4, #16
 8000980:	fa1f fe8c 	uxth.w	lr, ip
 8000984:	fb09 1118 	mls	r1, r9, r8, r1
 8000988:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800098c:	fb08 f00e 	mul.w	r0, r8, lr
 8000990:	4288      	cmp	r0, r1
 8000992:	fa02 f206 	lsl.w	r2, r2, r6
 8000996:	d90b      	bls.n	80009b0 <__udivmoddi4+0x1b8>
 8000998:	eb1c 0101 	adds.w	r1, ip, r1
 800099c:	f108 3aff 	add.w	sl, r8, #4294967295
 80009a0:	f080 8088 	bcs.w	8000ab4 <__udivmoddi4+0x2bc>
 80009a4:	4288      	cmp	r0, r1
 80009a6:	f240 8085 	bls.w	8000ab4 <__udivmoddi4+0x2bc>
 80009aa:	f1a8 0802 	sub.w	r8, r8, #2
 80009ae:	4461      	add	r1, ip
 80009b0:	1a09      	subs	r1, r1, r0
 80009b2:	b2a4      	uxth	r4, r4
 80009b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80009b8:	fb09 1110 	mls	r1, r9, r0, r1
 80009bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80009c4:	458e      	cmp	lr, r1
 80009c6:	d908      	bls.n	80009da <__udivmoddi4+0x1e2>
 80009c8:	eb1c 0101 	adds.w	r1, ip, r1
 80009cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80009d0:	d26c      	bcs.n	8000aac <__udivmoddi4+0x2b4>
 80009d2:	458e      	cmp	lr, r1
 80009d4:	d96a      	bls.n	8000aac <__udivmoddi4+0x2b4>
 80009d6:	3802      	subs	r0, #2
 80009d8:	4461      	add	r1, ip
 80009da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009de:	fba0 9402 	umull	r9, r4, r0, r2
 80009e2:	eba1 010e 	sub.w	r1, r1, lr
 80009e6:	42a1      	cmp	r1, r4
 80009e8:	46c8      	mov	r8, r9
 80009ea:	46a6      	mov	lr, r4
 80009ec:	d356      	bcc.n	8000a9c <__udivmoddi4+0x2a4>
 80009ee:	d053      	beq.n	8000a98 <__udivmoddi4+0x2a0>
 80009f0:	b15d      	cbz	r5, 8000a0a <__udivmoddi4+0x212>
 80009f2:	ebb3 0208 	subs.w	r2, r3, r8
 80009f6:	eb61 010e 	sbc.w	r1, r1, lr
 80009fa:	fa01 f707 	lsl.w	r7, r1, r7
 80009fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000a02:	40f1      	lsrs	r1, r6
 8000a04:	431f      	orrs	r7, r3
 8000a06:	e9c5 7100 	strd	r7, r1, [r5]
 8000a0a:	2600      	movs	r6, #0
 8000a0c:	4631      	mov	r1, r6
 8000a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a12:	f1c2 0320 	rsb	r3, r2, #32
 8000a16:	40d8      	lsrs	r0, r3
 8000a18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000a20:	4091      	lsls	r1, r2
 8000a22:	4301      	orrs	r1, r0
 8000a24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a28:	fa1f fe8c 	uxth.w	lr, ip
 8000a2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a30:	fb07 3610 	mls	r6, r7, r0, r3
 8000a34:	0c0b      	lsrs	r3, r1, #16
 8000a36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000a3e:	429e      	cmp	r6, r3
 8000a40:	fa04 f402 	lsl.w	r4, r4, r2
 8000a44:	d908      	bls.n	8000a58 <__udivmoddi4+0x260>
 8000a46:	eb1c 0303 	adds.w	r3, ip, r3
 8000a4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a4e:	d22f      	bcs.n	8000ab0 <__udivmoddi4+0x2b8>
 8000a50:	429e      	cmp	r6, r3
 8000a52:	d92d      	bls.n	8000ab0 <__udivmoddi4+0x2b8>
 8000a54:	3802      	subs	r0, #2
 8000a56:	4463      	add	r3, ip
 8000a58:	1b9b      	subs	r3, r3, r6
 8000a5a:	b289      	uxth	r1, r1
 8000a5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a60:	fb07 3316 	mls	r3, r7, r6, r3
 8000a64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a68:	fb06 f30e 	mul.w	r3, r6, lr
 8000a6c:	428b      	cmp	r3, r1
 8000a6e:	d908      	bls.n	8000a82 <__udivmoddi4+0x28a>
 8000a70:	eb1c 0101 	adds.w	r1, ip, r1
 8000a74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a78:	d216      	bcs.n	8000aa8 <__udivmoddi4+0x2b0>
 8000a7a:	428b      	cmp	r3, r1
 8000a7c:	d914      	bls.n	8000aa8 <__udivmoddi4+0x2b0>
 8000a7e:	3e02      	subs	r6, #2
 8000a80:	4461      	add	r1, ip
 8000a82:	1ac9      	subs	r1, r1, r3
 8000a84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a88:	e738      	b.n	80008fc <__udivmoddi4+0x104>
 8000a8a:	462e      	mov	r6, r5
 8000a8c:	4628      	mov	r0, r5
 8000a8e:	e705      	b.n	800089c <__udivmoddi4+0xa4>
 8000a90:	4606      	mov	r6, r0
 8000a92:	e6e3      	b.n	800085c <__udivmoddi4+0x64>
 8000a94:	4618      	mov	r0, r3
 8000a96:	e6f8      	b.n	800088a <__udivmoddi4+0x92>
 8000a98:	454b      	cmp	r3, r9
 8000a9a:	d2a9      	bcs.n	80009f0 <__udivmoddi4+0x1f8>
 8000a9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000aa0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000aa4:	3801      	subs	r0, #1
 8000aa6:	e7a3      	b.n	80009f0 <__udivmoddi4+0x1f8>
 8000aa8:	4646      	mov	r6, r8
 8000aaa:	e7ea      	b.n	8000a82 <__udivmoddi4+0x28a>
 8000aac:	4620      	mov	r0, r4
 8000aae:	e794      	b.n	80009da <__udivmoddi4+0x1e2>
 8000ab0:	4640      	mov	r0, r8
 8000ab2:	e7d1      	b.n	8000a58 <__udivmoddi4+0x260>
 8000ab4:	46d0      	mov	r8, sl
 8000ab6:	e77b      	b.n	80009b0 <__udivmoddi4+0x1b8>
 8000ab8:	3b02      	subs	r3, #2
 8000aba:	4461      	add	r1, ip
 8000abc:	e732      	b.n	8000924 <__udivmoddi4+0x12c>
 8000abe:	4630      	mov	r0, r6
 8000ac0:	e709      	b.n	80008d6 <__udivmoddi4+0xde>
 8000ac2:	4464      	add	r4, ip
 8000ac4:	3802      	subs	r0, #2
 8000ac6:	e742      	b.n	800094e <__udivmoddi4+0x156>

08000ac8 <__aeabi_idiv0>:
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <HG2_Write_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);

	return reg_value;
}

void HG2_Write_Register(uint8_t addr, uint8_t data){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	460a      	mov	r2, r1
 8000ad6:	71fb      	strb	r3, [r7, #7]
 8000ad8:	4613      	mov	r3, r2
 8000ada:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 8000adc:	2200      	movs	r2, #0
 8000ade:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ae2:	480c      	ldr	r0, [pc, #48]	; (8000b14 <HG2_Write_Register+0x48>)
 8000ae4:	f007 f99a 	bl	8007e1c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000ae8:	1df9      	adds	r1, r7, #7
 8000aea:	2364      	movs	r3, #100	; 0x64
 8000aec:	2201      	movs	r2, #1
 8000aee:	480a      	ldr	r0, [pc, #40]	; (8000b18 <HG2_Write_Register+0x4c>)
 8000af0:	f00d ff30 	bl	800e954 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000af4:	1db9      	adds	r1, r7, #6
 8000af6:	2364      	movs	r3, #100	; 0x64
 8000af8:	2201      	movs	r2, #1
 8000afa:	4807      	ldr	r0, [pc, #28]	; (8000b18 <HG2_Write_Register+0x4c>)
 8000afc:	f00d ff2a 	bl	800e954 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 8000b00:	2201      	movs	r2, #1
 8000b02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b06:	4803      	ldr	r0, [pc, #12]	; (8000b14 <HG2_Write_Register+0x48>)
 8000b08:	f007 f988 	bl	8007e1c <HAL_GPIO_WritePin>

}
 8000b0c:	bf00      	nop
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	58020c00 	.word	0x58020c00
 8000b18:	24000fd4 	.word	0x24000fd4

08000b1c <LG2_Write_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);

	return reg_value;
}

void LG2_Write_Register(uint8_t addr, uint8_t data){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	460a      	mov	r2, r1
 8000b26:	71fb      	strb	r3, [r7, #7]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b32:	480c      	ldr	r0, [pc, #48]	; (8000b64 <LG2_Write_Register+0x48>)
 8000b34:	f007 f972 	bl	8007e1c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000b38:	1df9      	adds	r1, r7, #7
 8000b3a:	2364      	movs	r3, #100	; 0x64
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	480a      	ldr	r0, [pc, #40]	; (8000b68 <LG2_Write_Register+0x4c>)
 8000b40:	f00d ff08 	bl	800e954 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000b44:	1db9      	adds	r1, r7, #6
 8000b46:	2364      	movs	r3, #100	; 0x64
 8000b48:	2201      	movs	r2, #1
 8000b4a:	4807      	ldr	r0, [pc, #28]	; (8000b68 <LG2_Write_Register+0x4c>)
 8000b4c:	f00d ff02 	bl	800e954 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000b50:	2201      	movs	r2, #1
 8000b52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b56:	4803      	ldr	r0, [pc, #12]	; (8000b64 <LG2_Write_Register+0x48>)
 8000b58:	f007 f960 	bl	8007e1c <HAL_GPIO_WritePin>

}
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	58020c00 	.word	0x58020c00
 8000b68:	24000fd4 	.word	0x24000fd4

08000b6c <setLEDs>:
	uint8_t data;
	HAL_I2C_Mem_Read(&hi2c2, writeAddress, memAddr, 2, &data, 1, 100);
	return data;
}

void setLEDs(uint8_t LED_Color_Data[14][3]) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b090      	sub	sp, #64	; 0x40
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
	static uint32_t LED_PWM_Data_0[(NUM_LEDS_0 * 24) + 58];
	static uint32_t LED_PWM_Data_1[(NUM_LEDS_1 * 24) + 58];
	static uint32_t LED_PWM_Data_2[(NUM_LEDS_2 * 24) + 58];
	static uint32_t LED_PWM_Data_3[(NUM_LEDS_3 * 24) + 58];

	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3;
 8000b74:	2300      	movs	r3, #0
 8000b76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000b78:	e184      	b.n	8000e84 <setLEDs+0x318>
			i++) {
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 8000b7a:	4aa4      	ldr	r2, [pc, #656]	; (8000e0c <setLEDs+0x2a0>)
 8000b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b7e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000b82:	2b03      	cmp	r3, #3
 8000b84:	f200 817a 	bhi.w	8000e7c <setLEDs+0x310>
 8000b88:	a201      	add	r2, pc, #4	; (adr r2, 8000b90 <setLEDs+0x24>)
 8000b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b8e:	bf00      	nop
 8000b90:	08000ba1 	.word	0x08000ba1
 8000b94:	08000c53 	.word	0x08000c53
 8000b98:	08000d05 	.word	0x08000d05
 8000b9c:	08000db7 	.word	0x08000db7
		case 0:
			for (int j = 0; j < 3; j++) {
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ba4:	e043      	b.n	8000c2e <setLEDs+0xc2>
				for (int n = 0; n < 8; n++) {
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	637b      	str	r3, [r7, #52]	; 0x34
 8000baa:	e03a      	b.n	8000c22 <setLEDs+0xb6>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000bac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000bae:	4613      	mov	r3, r2
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	4413      	add	r3, r2
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	441a      	add	r2, r3
 8000bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bba:	4413      	add	r3, r2
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	2280      	movs	r2, #128	; 0x80
 8000bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bc4:	fa42 f303 	asr.w	r3, r2, r3
 8000bc8:	400b      	ands	r3, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d013      	beq.n	8000bf6 <setLEDs+0x8a>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bd0:	00da      	lsls	r2, r3, #3
 8000bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bd4:	18d1      	adds	r1, r2, r3
 8000bd6:	4a8d      	ldr	r2, [pc, #564]	; (8000e0c <setLEDs+0x2a0>)
 8000bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bda:	00db      	lsls	r3, r3, #3
 8000bdc:	4413      	add	r3, r2
 8000bde:	685a      	ldr	r2, [r3, #4]
 8000be0:	4613      	mov	r3, r2
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	4413      	add	r3, r2
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	440b      	add	r3, r1
								+ 8] = 60;
 8000bea:	3308      	adds	r3, #8
 8000bec:	4a88      	ldr	r2, [pc, #544]	; (8000e10 <setLEDs+0x2a4>)
 8000bee:	213c      	movs	r1, #60	; 0x3c
 8000bf0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000bf4:	e012      	b.n	8000c1c <setLEDs+0xb0>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bf8:	00da      	lsls	r2, r3, #3
 8000bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bfc:	18d1      	adds	r1, r2, r3
 8000bfe:	4a83      	ldr	r2, [pc, #524]	; (8000e0c <setLEDs+0x2a0>)
 8000c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c02:	00db      	lsls	r3, r3, #3
 8000c04:	4413      	add	r3, r2
 8000c06:	685a      	ldr	r2, [r3, #4]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	4413      	add	r3, r2
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	440b      	add	r3, r1
								+ 8] = 30;
 8000c12:	3308      	adds	r3, #8
 8000c14:	4a7e      	ldr	r2, [pc, #504]	; (8000e10 <setLEDs+0x2a4>)
 8000c16:	211e      	movs	r1, #30
 8000c18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c1e:	3301      	adds	r3, #1
 8000c20:	637b      	str	r3, [r7, #52]	; 0x34
 8000c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c24:	2b07      	cmp	r3, #7
 8000c26:	ddc1      	ble.n	8000bac <setLEDs+0x40>
			for (int j = 0; j < 3; j++) {
 8000c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8000c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	ddb8      	ble.n	8000ba6 <setLEDs+0x3a>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58;
 8000c34:	2380      	movs	r3, #128	; 0x80
 8000c36:	633b      	str	r3, [r7, #48]	; 0x30
 8000c38:	e007      	b.n	8000c4a <setLEDs+0xde>
					i++) {
				LED_PWM_Data_0[i] = 0;
 8000c3a:	4a75      	ldr	r2, [pc, #468]	; (8000e10 <setLEDs+0x2a4>)
 8000c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c3e:	2100      	movs	r1, #0
 8000c40:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c46:	3301      	adds	r3, #1
 8000c48:	633b      	str	r3, [r7, #48]	; 0x30
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58;
 8000c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c4c:	2bb1      	cmp	r3, #177	; 0xb1
 8000c4e:	ddf4      	ble.n	8000c3a <setLEDs+0xce>
			}
			break;
 8000c50:	e115      	b.n	8000e7e <setLEDs+0x312>
		case 1:
			for (int j = 0; j < 3; j++) {
 8000c52:	2300      	movs	r3, #0
 8000c54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c56:	e043      	b.n	8000ce0 <setLEDs+0x174>
				for (int n = 0; n < 8; n++) {
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c5c:	e03a      	b.n	8000cd4 <setLEDs+0x168>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000c5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000c60:	4613      	mov	r3, r2
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	4413      	add	r3, r2
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	441a      	add	r2, r3
 8000c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c6c:	4413      	add	r3, r2
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	4619      	mov	r1, r3
 8000c72:	2280      	movs	r2, #128	; 0x80
 8000c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c76:	fa42 f303 	asr.w	r3, r2, r3
 8000c7a:	400b      	ands	r3, r1
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d013      	beq.n	8000ca8 <setLEDs+0x13c>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c82:	00da      	lsls	r2, r3, #3
 8000c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c86:	18d1      	adds	r1, r2, r3
 8000c88:	4a60      	ldr	r2, [pc, #384]	; (8000e0c <setLEDs+0x2a0>)
 8000c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	4413      	add	r3, r2
 8000c90:	685a      	ldr	r2, [r3, #4]
 8000c92:	4613      	mov	r3, r2
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	4413      	add	r3, r2
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	440b      	add	r3, r1
								+ 8] = 60;
 8000c9c:	3308      	adds	r3, #8
 8000c9e:	4a5d      	ldr	r2, [pc, #372]	; (8000e14 <setLEDs+0x2a8>)
 8000ca0:	213c      	movs	r1, #60	; 0x3c
 8000ca2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000ca6:	e012      	b.n	8000cce <setLEDs+0x162>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000caa:	00da      	lsls	r2, r3, #3
 8000cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cae:	18d1      	adds	r1, r2, r3
 8000cb0:	4a56      	ldr	r2, [pc, #344]	; (8000e0c <setLEDs+0x2a0>)
 8000cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	4413      	add	r3, r2
 8000cb8:	685a      	ldr	r2, [r3, #4]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	4413      	add	r3, r2
 8000cc0:	00db      	lsls	r3, r3, #3
 8000cc2:	440b      	add	r3, r1
								+ 8] = 30;
 8000cc4:	3308      	adds	r3, #8
 8000cc6:	4a53      	ldr	r2, [pc, #332]	; (8000e14 <setLEDs+0x2a8>)
 8000cc8:	211e      	movs	r1, #30
 8000cca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cd6:	2b07      	cmp	r3, #7
 8000cd8:	ddc1      	ble.n	8000c5e <setLEDs+0xf2>
			for (int j = 0; j < 3; j++) {
 8000cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cdc:	3301      	adds	r3, #1
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	ddb8      	ble.n	8000c58 <setLEDs+0xec>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58;
 8000ce6:	2380      	movs	r3, #128	; 0x80
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8000cea:	e007      	b.n	8000cfc <setLEDs+0x190>
					i++) {
				LED_PWM_Data_1[i] = 0;
 8000cec:	4a49      	ldr	r2, [pc, #292]	; (8000e14 <setLEDs+0x2a8>)
 8000cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58;
 8000cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfe:	2bb1      	cmp	r3, #177	; 0xb1
 8000d00:	ddf4      	ble.n	8000cec <setLEDs+0x180>
			}
			break;
 8000d02:	e0bc      	b.n	8000e7e <setLEDs+0x312>
		case 2:
			for (int j = 0; j < 3; j++) {
 8000d04:	2300      	movs	r3, #0
 8000d06:	623b      	str	r3, [r7, #32]
 8000d08:	e043      	b.n	8000d92 <setLEDs+0x226>
				for (int n = 0; n < 8; n++) {
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
 8000d0e:	e03a      	b.n	8000d86 <setLEDs+0x21a>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000d10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d12:	4613      	mov	r3, r2
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	4413      	add	r3, r2
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	441a      	add	r2, r3
 8000d1c:	6a3b      	ldr	r3, [r7, #32]
 8000d1e:	4413      	add	r3, r2
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	4619      	mov	r1, r3
 8000d24:	2280      	movs	r2, #128	; 0x80
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	fa42 f303 	asr.w	r3, r2, r3
 8000d2c:	400b      	ands	r3, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d013      	beq.n	8000d5a <setLEDs+0x1ee>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000d32:	6a3b      	ldr	r3, [r7, #32]
 8000d34:	00da      	lsls	r2, r3, #3
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	18d1      	adds	r1, r2, r3
 8000d3a:	4a34      	ldr	r2, [pc, #208]	; (8000e0c <setLEDs+0x2a0>)
 8000d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d3e:	00db      	lsls	r3, r3, #3
 8000d40:	4413      	add	r3, r2
 8000d42:	685a      	ldr	r2, [r3, #4]
 8000d44:	4613      	mov	r3, r2
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	4413      	add	r3, r2
 8000d4a:	00db      	lsls	r3, r3, #3
 8000d4c:	440b      	add	r3, r1
								+ 8] = 60;
 8000d4e:	3308      	adds	r3, #8
 8000d50:	4a31      	ldr	r2, [pc, #196]	; (8000e18 <setLEDs+0x2ac>)
 8000d52:	213c      	movs	r1, #60	; 0x3c
 8000d54:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000d58:	e012      	b.n	8000d80 <setLEDs+0x214>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000d5a:	6a3b      	ldr	r3, [r7, #32]
 8000d5c:	00da      	lsls	r2, r3, #3
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	18d1      	adds	r1, r2, r3
 8000d62:	4a2a      	ldr	r2, [pc, #168]	; (8000e0c <setLEDs+0x2a0>)
 8000d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d66:	00db      	lsls	r3, r3, #3
 8000d68:	4413      	add	r3, r2
 8000d6a:	685a      	ldr	r2, [r3, #4]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	4413      	add	r3, r2
 8000d72:	00db      	lsls	r3, r3, #3
 8000d74:	440b      	add	r3, r1
								+ 8] = 30;
 8000d76:	3308      	adds	r3, #8
 8000d78:	4a27      	ldr	r2, [pc, #156]	; (8000e18 <setLEDs+0x2ac>)
 8000d7a:	211e      	movs	r1, #30
 8000d7c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	3301      	adds	r3, #1
 8000d84:	61fb      	str	r3, [r7, #28]
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	2b07      	cmp	r3, #7
 8000d8a:	ddc1      	ble.n	8000d10 <setLEDs+0x1a4>
			for (int j = 0; j < 3; j++) {
 8000d8c:	6a3b      	ldr	r3, [r7, #32]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	623b      	str	r3, [r7, #32]
 8000d92:	6a3b      	ldr	r3, [r7, #32]
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	ddb8      	ble.n	8000d0a <setLEDs+0x19e>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58;
 8000d98:	2338      	movs	r3, #56	; 0x38
 8000d9a:	61bb      	str	r3, [r7, #24]
 8000d9c:	e007      	b.n	8000dae <setLEDs+0x242>
					i++) {
				LED_PWM_Data_2[i] = 0;
 8000d9e:	4a1e      	ldr	r2, [pc, #120]	; (8000e18 <setLEDs+0x2ac>)
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	2100      	movs	r1, #0
 8000da4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	3301      	adds	r3, #1
 8000dac:	61bb      	str	r3, [r7, #24]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58;
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	2b69      	cmp	r3, #105	; 0x69
 8000db2:	ddf4      	ble.n	8000d9e <setLEDs+0x232>
			}
			break;
 8000db4:	e063      	b.n	8000e7e <setLEDs+0x312>
		case 3:
			for (int j = 0; j < 3; j++) {
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
 8000dba:	e04d      	b.n	8000e58 <setLEDs+0x2ec>
				for (int n = 0; n < 8; n++) {
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	e044      	b.n	8000e4c <setLEDs+0x2e0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000dc2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	4413      	add	r3, r2
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	441a      	add	r2, r3
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	2280      	movs	r2, #128	; 0x80
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	fa42 f303 	asr.w	r3, r2, r3
 8000dde:	400b      	ands	r3, r1
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d01d      	beq.n	8000e20 <setLEDs+0x2b4>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	00da      	lsls	r2, r3, #3
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	18d1      	adds	r1, r2, r3
 8000dec:	4a07      	ldr	r2, [pc, #28]	; (8000e0c <setLEDs+0x2a0>)
 8000dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000df0:	00db      	lsls	r3, r3, #3
 8000df2:	4413      	add	r3, r2
 8000df4:	685a      	ldr	r2, [r3, #4]
 8000df6:	4613      	mov	r3, r2
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	4413      	add	r3, r2
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	440b      	add	r3, r1
								+ 8] = 60;
 8000e00:	3308      	adds	r3, #8
 8000e02:	4a06      	ldr	r2, [pc, #24]	; (8000e1c <setLEDs+0x2b0>)
 8000e04:	213c      	movs	r1, #60	; 0x3c
 8000e06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000e0a:	e01c      	b.n	8000e46 <setLEDs+0x2da>
 8000e0c:	0801bad8 	.word	0x0801bad8
 8000e10:	240002f0 	.word	0x240002f0
 8000e14:	240005b8 	.word	0x240005b8
 8000e18:	24000880 	.word	0x24000880
 8000e1c:	24000a28 	.word	0x24000a28
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	00da      	lsls	r2, r3, #3
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	18d1      	adds	r1, r2, r3
 8000e28:	4a26      	ldr	r2, [pc, #152]	; (8000ec4 <setLEDs+0x358>)
 8000e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	4413      	add	r3, r2
 8000e30:	685a      	ldr	r2, [r3, #4]
 8000e32:	4613      	mov	r3, r2
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	4413      	add	r3, r2
 8000e38:	00db      	lsls	r3, r3, #3
 8000e3a:	440b      	add	r3, r1
								+ 8] = 30;
 8000e3c:	3308      	adds	r3, #8
 8000e3e:	4a22      	ldr	r2, [pc, #136]	; (8000ec8 <setLEDs+0x35c>)
 8000e40:	211e      	movs	r1, #30
 8000e42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	2b07      	cmp	r3, #7
 8000e50:	ddb7      	ble.n	8000dc2 <setLEDs+0x256>
			for (int j = 0; j < 3; j++) {
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	3301      	adds	r3, #1
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	ddae      	ble.n	8000dbc <setLEDs+0x250>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58;
 8000e5e:	2338      	movs	r3, #56	; 0x38
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	e007      	b.n	8000e74 <setLEDs+0x308>
					i++) {
				LED_PWM_Data_3[i] = 0;
 8000e64:	4a18      	ldr	r2, [pc, #96]	; (8000ec8 <setLEDs+0x35c>)
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	2100      	movs	r1, #0
 8000e6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	3301      	adds	r3, #1
 8000e72:	60fb      	str	r3, [r7, #12]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	2b69      	cmp	r3, #105	; 0x69
 8000e78:	ddf4      	ble.n	8000e64 <setLEDs+0x2f8>
			}
			break;
 8000e7a:	e000      	b.n	8000e7e <setLEDs+0x312>
		default:
			break;
 8000e7c:	bf00      	nop
			i++) {
 8000e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e80:	3301      	adds	r3, #1
 8000e82:	63fb      	str	r3, [r7, #60]	; 0x3c
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3;
 8000e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e86:	2b0d      	cmp	r3, #13
 8000e88:	f77f ae77 	ble.w	8000b7a <setLEDs+0xe>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0,
 8000e8c:	23b2      	movs	r3, #178	; 0xb2
 8000e8e:	4a0f      	ldr	r2, [pc, #60]	; (8000ecc <setLEDs+0x360>)
 8000e90:	210c      	movs	r1, #12
 8000e92:	480f      	ldr	r0, [pc, #60]	; (8000ed0 <setLEDs+0x364>)
 8000e94:	f00e fa82 	bl	800f39c <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1,
 8000e98:	23b2      	movs	r3, #178	; 0xb2
 8000e9a:	4a0e      	ldr	r2, [pc, #56]	; (8000ed4 <setLEDs+0x368>)
 8000e9c:	2108      	movs	r1, #8
 8000e9e:	480e      	ldr	r0, [pc, #56]	; (8000ed8 <setLEDs+0x36c>)
 8000ea0:	f00e fa7c 	bl	800f39c <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2,
 8000ea4:	236a      	movs	r3, #106	; 0x6a
 8000ea6:	4a0d      	ldr	r2, [pc, #52]	; (8000edc <setLEDs+0x370>)
 8000ea8:	2104      	movs	r1, #4
 8000eaa:	480d      	ldr	r0, [pc, #52]	; (8000ee0 <setLEDs+0x374>)
 8000eac:	f00e fa76 	bl	800f39c <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3,
 8000eb0:	236a      	movs	r3, #106	; 0x6a
 8000eb2:	4a05      	ldr	r2, [pc, #20]	; (8000ec8 <setLEDs+0x35c>)
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	480a      	ldr	r0, [pc, #40]	; (8000ee0 <setLEDs+0x374>)
 8000eb8:	f00e fa70 	bl	800f39c <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3

}
 8000ebc:	bf00      	nop
 8000ebe:	3740      	adds	r7, #64	; 0x40
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	0801bad8 	.word	0x0801bad8
 8000ec8:	24000a28 	.word	0x24000a28
 8000ecc:	240002f0 	.word	0x240002f0
 8000ed0:	240011c8 	.word	0x240011c8
 8000ed4:	240005b8 	.word	0x240005b8
 8000ed8:	240010e4 	.word	0x240010e4
 8000edc:	24000880 	.word	0x24000880
 8000ee0:	24001130 	.word	0x24001130

08000ee4 <setStatus>:
uint8_t LED_Color_Data_Staus[14][3];
uint8_t statusArray[14];

const float brightness = 0.4;

void setStatus(char *ModuleName, uint8_t status) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	70fb      	strb	r3, [r7, #3]

	if (strcmp(ModuleName, "CAN") == 0) {
 8000ef0:	494e      	ldr	r1, [pc, #312]	; (800102c <setStatus+0x148>)
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff fa0c 	bl	8000310 <strcmp>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d103      	bne.n	8000f06 <setStatus+0x22>
		statusArray[0] = status;
 8000efe:	4a4c      	ldr	r2, [pc, #304]	; (8001030 <setStatus+0x14c>)
 8000f00:	78fb      	ldrb	r3, [r7, #3]
 8000f02:	7013      	strb	r3, [r2, #0]
	} else if (strcmp(ModuleName, "BATT") == 0) {
		statusArray[13] = status;

	}

}
 8000f04:	e08d      	b.n	8001022 <setStatus+0x13e>
	} else if (strcmp(ModuleName, "GPS") == 0) {
 8000f06:	494b      	ldr	r1, [pc, #300]	; (8001034 <setStatus+0x150>)
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff fa01 	bl	8000310 <strcmp>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d103      	bne.n	8000f1c <setStatus+0x38>
		statusArray[1] = status;
 8000f14:	4a46      	ldr	r2, [pc, #280]	; (8001030 <setStatus+0x14c>)
 8000f16:	78fb      	ldrb	r3, [r7, #3]
 8000f18:	7053      	strb	r3, [r2, #1]
}
 8000f1a:	e082      	b.n	8001022 <setStatus+0x13e>
	} else if (strcmp(ModuleName, "LoRA") == 0) {
 8000f1c:	4946      	ldr	r1, [pc, #280]	; (8001038 <setStatus+0x154>)
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff f9f6 	bl	8000310 <strcmp>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d103      	bne.n	8000f32 <setStatus+0x4e>
		statusArray[2] = status;
 8000f2a:	4a41      	ldr	r2, [pc, #260]	; (8001030 <setStatus+0x14c>)
 8000f2c:	78fb      	ldrb	r3, [r7, #3]
 8000f2e:	7093      	strb	r3, [r2, #2]
}
 8000f30:	e077      	b.n	8001022 <setStatus+0x13e>
	} else if (strcmp(ModuleName, "SD CARD") == 0) {
 8000f32:	4942      	ldr	r1, [pc, #264]	; (800103c <setStatus+0x158>)
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff f9eb 	bl	8000310 <strcmp>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d103      	bne.n	8000f48 <setStatus+0x64>
		statusArray[3] = status;
 8000f40:	4a3b      	ldr	r2, [pc, #236]	; (8001030 <setStatus+0x14c>)
 8000f42:	78fb      	ldrb	r3, [r7, #3]
 8000f44:	70d3      	strb	r3, [r2, #3]
}
 8000f46:	e06c      	b.n	8001022 <setStatus+0x13e>
	} else if (strcmp(ModuleName, "HG 1") == 0) {
 8000f48:	493d      	ldr	r1, [pc, #244]	; (8001040 <setStatus+0x15c>)
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f7ff f9e0 	bl	8000310 <strcmp>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d103      	bne.n	8000f5e <setStatus+0x7a>
		statusArray[4] = status;
 8000f56:	4a36      	ldr	r2, [pc, #216]	; (8001030 <setStatus+0x14c>)
 8000f58:	78fb      	ldrb	r3, [r7, #3]
 8000f5a:	7113      	strb	r3, [r2, #4]
}
 8000f5c:	e061      	b.n	8001022 <setStatus+0x13e>
	} else if (strcmp(ModuleName, "LG 1") == 0) {
 8000f5e:	4939      	ldr	r1, [pc, #228]	; (8001044 <setStatus+0x160>)
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f7ff f9d5 	bl	8000310 <strcmp>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d103      	bne.n	8000f74 <setStatus+0x90>
		statusArray[5] = status;
 8000f6c:	4a30      	ldr	r2, [pc, #192]	; (8001030 <setStatus+0x14c>)
 8000f6e:	78fb      	ldrb	r3, [r7, #3]
 8000f70:	7153      	strb	r3, [r2, #5]
}
 8000f72:	e056      	b.n	8001022 <setStatus+0x13e>
	} else if (strcmp(ModuleName, "BAR 1") == 0) {
 8000f74:	4934      	ldr	r1, [pc, #208]	; (8001048 <setStatus+0x164>)
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff f9ca 	bl	8000310 <strcmp>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d103      	bne.n	8000f8a <setStatus+0xa6>
		statusArray[6] = status;
 8000f82:	4a2b      	ldr	r2, [pc, #172]	; (8001030 <setStatus+0x14c>)
 8000f84:	78fb      	ldrb	r3, [r7, #3]
 8000f86:	7193      	strb	r3, [r2, #6]
}
 8000f88:	e04b      	b.n	8001022 <setStatus+0x13e>
	} else if (strcmp(ModuleName, "ARM") == 0) {
 8000f8a:	4930      	ldr	r1, [pc, #192]	; (800104c <setStatus+0x168>)
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff f9bf 	bl	8000310 <strcmp>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d103      	bne.n	8000fa0 <setStatus+0xbc>
		statusArray[7] = status;
 8000f98:	4a25      	ldr	r2, [pc, #148]	; (8001030 <setStatus+0x14c>)
 8000f9a:	78fb      	ldrb	r3, [r7, #3]
 8000f9c:	71d3      	strb	r3, [r2, #7]
}
 8000f9e:	e040      	b.n	8001022 <setStatus+0x13e>
	} else if (strcmp(ModuleName, "HG2") == 0) {
 8000fa0:	492b      	ldr	r1, [pc, #172]	; (8001050 <setStatus+0x16c>)
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff f9b4 	bl	8000310 <strcmp>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d103      	bne.n	8000fb6 <setStatus+0xd2>
		statusArray[8] = status;
 8000fae:	4a20      	ldr	r2, [pc, #128]	; (8001030 <setStatus+0x14c>)
 8000fb0:	78fb      	ldrb	r3, [r7, #3]
 8000fb2:	7213      	strb	r3, [r2, #8]
}
 8000fb4:	e035      	b.n	8001022 <setStatus+0x13e>
	} else if (strcmp(ModuleName, "LG2") == 0) {
 8000fb6:	4927      	ldr	r1, [pc, #156]	; (8001054 <setStatus+0x170>)
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff f9a9 	bl	8000310 <strcmp>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d103      	bne.n	8000fcc <setStatus+0xe8>
		statusArray[9] = status;
 8000fc4:	4a1a      	ldr	r2, [pc, #104]	; (8001030 <setStatus+0x14c>)
 8000fc6:	78fb      	ldrb	r3, [r7, #3]
 8000fc8:	7253      	strb	r3, [r2, #9]
}
 8000fca:	e02a      	b.n	8001022 <setStatus+0x13e>
	} else if (strcmp(ModuleName, "BAR 2") == 0) {
 8000fcc:	4922      	ldr	r1, [pc, #136]	; (8001058 <setStatus+0x174>)
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff f99e 	bl	8000310 <strcmp>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d103      	bne.n	8000fe2 <setStatus+0xfe>
		statusArray[10] = status;
 8000fda:	4a15      	ldr	r2, [pc, #84]	; (8001030 <setStatus+0x14c>)
 8000fdc:	78fb      	ldrb	r3, [r7, #3]
 8000fde:	7293      	strb	r3, [r2, #10]
}
 8000fe0:	e01f      	b.n	8001022 <setStatus+0x13e>
	} else if (strcmp(ModuleName, "REG 1") == 0) {
 8000fe2:	491e      	ldr	r1, [pc, #120]	; (800105c <setStatus+0x178>)
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff f993 	bl	8000310 <strcmp>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d103      	bne.n	8000ff8 <setStatus+0x114>
		statusArray[11] = status;
 8000ff0:	4a0f      	ldr	r2, [pc, #60]	; (8001030 <setStatus+0x14c>)
 8000ff2:	78fb      	ldrb	r3, [r7, #3]
 8000ff4:	72d3      	strb	r3, [r2, #11]
}
 8000ff6:	e014      	b.n	8001022 <setStatus+0x13e>
	} else if (strcmp(ModuleName, "REG 2") == 0) {
 8000ff8:	4919      	ldr	r1, [pc, #100]	; (8001060 <setStatus+0x17c>)
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff f988 	bl	8000310 <strcmp>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d103      	bne.n	800100e <setStatus+0x12a>
		statusArray[12] = status;
 8001006:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <setStatus+0x14c>)
 8001008:	78fb      	ldrb	r3, [r7, #3]
 800100a:	7313      	strb	r3, [r2, #12]
}
 800100c:	e009      	b.n	8001022 <setStatus+0x13e>
	} else if (strcmp(ModuleName, "BATT") == 0) {
 800100e:	4915      	ldr	r1, [pc, #84]	; (8001064 <setStatus+0x180>)
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff f97d 	bl	8000310 <strcmp>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d102      	bne.n	8001022 <setStatus+0x13e>
		statusArray[13] = status;
 800101c:	4a04      	ldr	r2, [pc, #16]	; (8001030 <setStatus+0x14c>)
 800101e:	78fb      	ldrb	r3, [r7, #3]
 8001020:	7353      	strb	r3, [r2, #13]
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	0801b980 	.word	0x0801b980
 8001030:	24000bfc 	.word	0x24000bfc
 8001034:	0801b984 	.word	0x0801b984
 8001038:	0801b988 	.word	0x0801b988
 800103c:	0801b990 	.word	0x0801b990
 8001040:	0801b998 	.word	0x0801b998
 8001044:	0801b9a0 	.word	0x0801b9a0
 8001048:	0801b9a8 	.word	0x0801b9a8
 800104c:	0801b9b0 	.word	0x0801b9b0
 8001050:	0801b9b4 	.word	0x0801b9b4
 8001054:	0801b9b8 	.word	0x0801b9b8
 8001058:	0801b9bc 	.word	0x0801b9bc
 800105c:	0801b9c4 	.word	0x0801b9c4
 8001060:	0801b9cc 	.word	0x0801b9cc
 8001064:	0801b9d4 	.word	0x0801b9d4

08001068 <updateStatus>:

void updateStatus() {
 8001068:	b580      	push	{r7, lr}
 800106a:	b09c      	sub	sp, #112	; 0x70
 800106c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 14; i++) {
 800106e:	2300      	movs	r3, #0
 8001070:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001072:	e0c7      	b.n	8001204 <updateStatus+0x19c>
		switch (statusArray[i]) {
 8001074:	4a69      	ldr	r2, [pc, #420]	; (800121c <updateStatus+0x1b4>)
 8001076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001078:	4413      	add	r3, r2
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b02      	cmp	r3, #2
 800107e:	f000 8098 	beq.w	80011b2 <updateStatus+0x14a>
 8001082:	2b02      	cmp	r3, #2
 8001084:	f300 80ba 	bgt.w	80011fc <updateStatus+0x194>
 8001088:	2b00      	cmp	r3, #0
 800108a:	d002      	beq.n	8001092 <updateStatus+0x2a>
 800108c:	2b01      	cmp	r3, #1
 800108e:	d026      	beq.n	80010de <updateStatus+0x76>
		case 2:
			LED_Color_Data_Staus[i][0] = (int)(255 * brightness);
			LED_Color_Data_Staus[i][1] = 0;
			LED_Color_Data_Staus[i][2] = 0;
		default:
			break;
 8001090:	e0b4      	b.n	80011fc <updateStatus+0x194>
			LED_Color_Data_Staus[i][0] = 0;
 8001092:	4963      	ldr	r1, [pc, #396]	; (8001220 <updateStatus+0x1b8>)
 8001094:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001096:	4613      	mov	r3, r2
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	4413      	add	r3, r2
 800109c:	440b      	add	r3, r1
 800109e:	2200      	movs	r2, #0
 80010a0:	701a      	strb	r2, [r3, #0]
			LED_Color_Data_Staus[i][1] = (int)(255 * brightness);
 80010a2:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8001224 <updateStatus+0x1bc>
 80010a6:	eddf 7a60 	vldr	s15, [pc, #384]	; 8001228 <updateStatus+0x1c0>
 80010aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010b2:	edc7 7a01 	vstr	s15, [r7, #4]
 80010b6:	7938      	ldrb	r0, [r7, #4]
 80010b8:	4959      	ldr	r1, [pc, #356]	; (8001220 <updateStatus+0x1b8>)
 80010ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80010bc:	4613      	mov	r3, r2
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	4413      	add	r3, r2
 80010c2:	440b      	add	r3, r1
 80010c4:	3301      	adds	r3, #1
 80010c6:	4602      	mov	r2, r0
 80010c8:	701a      	strb	r2, [r3, #0]
			LED_Color_Data_Staus[i][2] = 0;
 80010ca:	4955      	ldr	r1, [pc, #340]	; (8001220 <updateStatus+0x1b8>)
 80010cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80010ce:	4613      	mov	r3, r2
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	4413      	add	r3, r2
 80010d4:	440b      	add	r3, r1
 80010d6:	3302      	adds	r3, #2
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
			break;
 80010dc:	e08f      	b.n	80011fe <updateStatus+0x196>
			if ((HAL_GetTick() / 1000) % 2) {
 80010de:	f002 fbdd 	bl	800389c <HAL_GetTick>
 80010e2:	4603      	mov	r3, r0
 80010e4:	4a51      	ldr	r2, [pc, #324]	; (800122c <updateStatus+0x1c4>)
 80010e6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ea:	099b      	lsrs	r3, r3, #6
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d043      	beq.n	800117c <updateStatus+0x114>
				sprintf(data_gyro, "%d\n", i);
 80010f4:	f107 0308 	add.w	r3, r7, #8
 80010f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80010fa:	494d      	ldr	r1, [pc, #308]	; (8001230 <updateStatus+0x1c8>)
 80010fc:	4618      	mov	r0, r3
 80010fe:	f016 fc31 	bl	8017964 <siprintf>
				CDC_Transmit_HS(data_gyro, strlen(data_gyro));
 8001102:	f107 0308 	add.w	r3, r7, #8
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff f90c 	bl	8000324 <strlen>
 800110c:	4602      	mov	r2, r0
 800110e:	f107 0308 	add.w	r3, r7, #8
 8001112:	4611      	mov	r1, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f015 f943 	bl	80163a0 <CDC_Transmit_HS>
				LED_Color_Data_Staus[i][0] = (int)(50 * brightness);
 800111a:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001224 <updateStatus+0x1bc>
 800111e:	eddf 7a45 	vldr	s15, [pc, #276]	; 8001234 <updateStatus+0x1cc>
 8001122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001126:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800112a:	edc7 7a01 	vstr	s15, [r7, #4]
 800112e:	7938      	ldrb	r0, [r7, #4]
 8001130:	493b      	ldr	r1, [pc, #236]	; (8001220 <updateStatus+0x1b8>)
 8001132:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001134:	4613      	mov	r3, r2
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	4413      	add	r3, r2
 800113a:	440b      	add	r3, r1
 800113c:	4602      	mov	r2, r0
 800113e:	701a      	strb	r2, [r3, #0]
				LED_Color_Data_Staus[i][1] = (int)(255 * brightness);
 8001140:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8001224 <updateStatus+0x1bc>
 8001144:	eddf 7a38 	vldr	s15, [pc, #224]	; 8001228 <updateStatus+0x1c0>
 8001148:	ee67 7a27 	vmul.f32	s15, s14, s15
 800114c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001150:	edc7 7a01 	vstr	s15, [r7, #4]
 8001154:	7938      	ldrb	r0, [r7, #4]
 8001156:	4932      	ldr	r1, [pc, #200]	; (8001220 <updateStatus+0x1b8>)
 8001158:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800115a:	4613      	mov	r3, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	4413      	add	r3, r2
 8001160:	440b      	add	r3, r1
 8001162:	3301      	adds	r3, #1
 8001164:	4602      	mov	r2, r0
 8001166:	701a      	strb	r2, [r3, #0]
				LED_Color_Data_Staus[i][2] = 0;
 8001168:	492d      	ldr	r1, [pc, #180]	; (8001220 <updateStatus+0x1b8>)
 800116a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800116c:	4613      	mov	r3, r2
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	4413      	add	r3, r2
 8001172:	440b      	add	r3, r1
 8001174:	3302      	adds	r3, #2
 8001176:	2200      	movs	r2, #0
 8001178:	701a      	strb	r2, [r3, #0]
			break;
 800117a:	e040      	b.n	80011fe <updateStatus+0x196>
				LED_Color_Data_Staus[i][0] = 0;
 800117c:	4928      	ldr	r1, [pc, #160]	; (8001220 <updateStatus+0x1b8>)
 800117e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001180:	4613      	mov	r3, r2
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	4413      	add	r3, r2
 8001186:	440b      	add	r3, r1
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]
				LED_Color_Data_Staus[i][1] = 0;
 800118c:	4924      	ldr	r1, [pc, #144]	; (8001220 <updateStatus+0x1b8>)
 800118e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001190:	4613      	mov	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4413      	add	r3, r2
 8001196:	440b      	add	r3, r1
 8001198:	3301      	adds	r3, #1
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]
				LED_Color_Data_Staus[i][2] = 0;
 800119e:	4920      	ldr	r1, [pc, #128]	; (8001220 <updateStatus+0x1b8>)
 80011a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80011a2:	4613      	mov	r3, r2
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	4413      	add	r3, r2
 80011a8:	440b      	add	r3, r1
 80011aa:	3302      	adds	r3, #2
 80011ac:	2200      	movs	r2, #0
 80011ae:	701a      	strb	r2, [r3, #0]
			break;
 80011b0:	e025      	b.n	80011fe <updateStatus+0x196>
			LED_Color_Data_Staus[i][0] = (int)(255 * brightness);
 80011b2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001224 <updateStatus+0x1bc>
 80011b6:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8001228 <updateStatus+0x1c0>
 80011ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011c2:	edc7 7a01 	vstr	s15, [r7, #4]
 80011c6:	7938      	ldrb	r0, [r7, #4]
 80011c8:	4915      	ldr	r1, [pc, #84]	; (8001220 <updateStatus+0x1b8>)
 80011ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80011cc:	4613      	mov	r3, r2
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	4413      	add	r3, r2
 80011d2:	440b      	add	r3, r1
 80011d4:	4602      	mov	r2, r0
 80011d6:	701a      	strb	r2, [r3, #0]
			LED_Color_Data_Staus[i][1] = 0;
 80011d8:	4911      	ldr	r1, [pc, #68]	; (8001220 <updateStatus+0x1b8>)
 80011da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80011dc:	4613      	mov	r3, r2
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	4413      	add	r3, r2
 80011e2:	440b      	add	r3, r1
 80011e4:	3301      	adds	r3, #1
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]
			LED_Color_Data_Staus[i][2] = 0;
 80011ea:	490d      	ldr	r1, [pc, #52]	; (8001220 <updateStatus+0x1b8>)
 80011ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80011ee:	4613      	mov	r3, r2
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	4413      	add	r3, r2
 80011f4:	440b      	add	r3, r1
 80011f6:	3302      	adds	r3, #2
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]
			break;
 80011fc:	bf00      	nop
	for (int i = 0; i < 14; i++) {
 80011fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001200:	3301      	adds	r3, #1
 8001202:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001206:	2b0d      	cmp	r3, #13
 8001208:	f77f af34 	ble.w	8001074 <updateStatus+0xc>
		}
	}
	setLEDs(LED_Color_Data_Staus);
 800120c:	4804      	ldr	r0, [pc, #16]	; (8001220 <updateStatus+0x1b8>)
 800120e:	f7ff fcad 	bl	8000b6c <setLEDs>
}
 8001212:	bf00      	nop
 8001214:	3770      	adds	r7, #112	; 0x70
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	24000bfc 	.word	0x24000bfc
 8001220:	24000bd0 	.word	0x24000bd0
 8001224:	3ecccccd 	.word	0x3ecccccd
 8001228:	437f0000 	.word	0x437f0000
 800122c:	10624dd3 	.word	0x10624dd3
 8001230:	0801b9dc 	.word	0x0801b9dc
 8001234:	42480000 	.word	0x42480000

08001238 <disarm>:
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;
uint8_t LED_Color_Data[14][3];

int disarm(char *state) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 8001240:	2200      	movs	r2, #0
 8001242:	2102      	movs	r1, #2
 8001244:	4823      	ldr	r0, [pc, #140]	; (80012d4 <disarm+0x9c>)
 8001246:	f006 fde9 	bl	8007e1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	2104      	movs	r1, #4
 800124e:	4821      	ldr	r0, [pc, #132]	; (80012d4 <disarm+0x9c>)
 8001250:	f006 fde4 	bl	8007e1c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 8001254:	2200      	movs	r2, #0
 8001256:	2102      	movs	r1, #2
 8001258:	481f      	ldr	r0, [pc, #124]	; (80012d8 <disarm+0xa0>)
 800125a:	f006 fddf 	bl	8007e1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001264:	481d      	ldr	r0, [pc, #116]	; (80012dc <disarm+0xa4>)
 8001266:	f006 fdd9 	bl	8007e1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001270:	481a      	ldr	r0, [pc, #104]	; (80012dc <disarm+0xa4>)
 8001272:	f006 fdd3 	bl	8007e1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800127c:	4817      	ldr	r0, [pc, #92]	; (80012dc <disarm+0xa4>)
 800127e:	f006 fdcd 	bl	8007e1c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	2102      	movs	r1, #2
 8001286:	4816      	ldr	r0, [pc, #88]	; (80012e0 <disarm+0xa8>)
 8001288:	f006 fdc8 	bl	8007e1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 800128c:	2200      	movs	r2, #0
 800128e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001292:	4814      	ldr	r0, [pc, #80]	; (80012e4 <disarm+0xac>)
 8001294:	f006 fdc2 	bl	8007e1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 8001298:	2200      	movs	r2, #0
 800129a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800129e:	4811      	ldr	r0, [pc, #68]	; (80012e4 <disarm+0xac>)
 80012a0:	f006 fdbc 	bl	8007e1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 80012a4:	2200      	movs	r2, #0
 80012a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012aa:	480e      	ldr	r0, [pc, #56]	; (80012e4 <disarm+0xac>)
 80012ac:	f006 fdb6 	bl	8007e1c <HAL_GPIO_WritePin>


	setStatus("ARM", 2);
 80012b0:	2102      	movs	r1, #2
 80012b2:	480d      	ldr	r0, [pc, #52]	; (80012e8 <disarm+0xb0>)
 80012b4:	f7ff fe16 	bl	8000ee4 <setStatus>

	strcpy(state, "DISARMED");
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	490c      	ldr	r1, [pc, #48]	; (80012ec <disarm+0xb4>)
 80012bc:	461a      	mov	r2, r3
 80012be:	460b      	mov	r3, r1
 80012c0:	cb03      	ldmia	r3!, {r0, r1}
 80012c2:	6010      	str	r0, [r2, #0]
 80012c4:	6051      	str	r1, [r2, #4]
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	7213      	strb	r3, [r2, #8]
	return 0;
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	58020000 	.word	0x58020000
 80012d8:	58020400 	.word	0x58020400
 80012dc:	58021400 	.word	0x58021400
 80012e0:	58021800 	.word	0x58021800
 80012e4:	58021000 	.word	0x58021000
 80012e8:	0801b9e0 	.word	0x0801b9e0
 80012ec:	0801b9e4 	.word	0x0801b9e4

080012f0 <Baro2_Read_Register>:
	for (int i = 0; i < 4; i++) {
		x[i] = temp[i];
	}
}

uint8_t Baro2_Read_Register(uint8_t addr) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	addr |= (1 << 7);
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001300:	b2db      	uxtb	r3, r3
 8001302:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, 0);
 8001304:	2200      	movs	r2, #0
 8001306:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800130a:	480d      	ldr	r0, [pc, #52]	; (8001340 <Baro2_Read_Register+0x50>)
 800130c:	f006 fd86 	bl	8007e1c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8001310:	1df9      	adds	r1, r7, #7
 8001312:	2364      	movs	r3, #100	; 0x64
 8001314:	2201      	movs	r2, #1
 8001316:	480b      	ldr	r0, [pc, #44]	; (8001344 <Baro2_Read_Register+0x54>)
 8001318:	f00d fb1c 	bl	800e954 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &reg_value, 1, 100);
 800131c:	f107 010f 	add.w	r1, r7, #15
 8001320:	2364      	movs	r3, #100	; 0x64
 8001322:	2201      	movs	r2, #1
 8001324:	4807      	ldr	r0, [pc, #28]	; (8001344 <Baro2_Read_Register+0x54>)
 8001326:	f00d fd11 	bl	800ed4c <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, 1);
 800132a:	2201      	movs	r2, #1
 800132c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001330:	4803      	ldr	r0, [pc, #12]	; (8001340 <Baro2_Read_Register+0x50>)
 8001332:	f006 fd73 	bl	8007e1c <HAL_GPIO_WritePin>

	return reg_value;
 8001336:	7bfb      	ldrb	r3, [r7, #15]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	58020c00 	.word	0x58020c00
 8001344:	24000fd4 	.word	0x24000fd4

08001348 <Baro2_Write_Register>:

void Baro2_Write_Register(uint8_t addr, uint8_t data) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	460a      	mov	r2, r1
 8001352:	71fb      	strb	r3, [r7, #7]
 8001354:	4613      	mov	r3, r2
 8001356:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, 0);
 8001358:	2200      	movs	r2, #0
 800135a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800135e:	480c      	ldr	r0, [pc, #48]	; (8001390 <Baro2_Write_Register+0x48>)
 8001360:	f006 fd5c 	bl	8007e1c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8001364:	1df9      	adds	r1, r7, #7
 8001366:	2364      	movs	r3, #100	; 0x64
 8001368:	2201      	movs	r2, #1
 800136a:	480a      	ldr	r0, [pc, #40]	; (8001394 <Baro2_Write_Register+0x4c>)
 800136c:	f00d faf2 	bl	800e954 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8001370:	1db9      	adds	r1, r7, #6
 8001372:	2364      	movs	r3, #100	; 0x64
 8001374:	2201      	movs	r2, #1
 8001376:	4807      	ldr	r0, [pc, #28]	; (8001394 <Baro2_Write_Register+0x4c>)
 8001378:	f00d faec 	bl	800e954 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, 1);
 800137c:	2201      	movs	r2, #1
 800137e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001382:	4803      	ldr	r0, [pc, #12]	; (8001390 <Baro2_Write_Register+0x48>)
 8001384:	f006 fd4a 	bl	8007e1c <HAL_GPIO_WritePin>

}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	58020c00 	.word	0x58020c00
 8001394:	24000fd4 	.word	0x24000fd4

08001398 <Baro2_Configure>:

void Baro2_Configure(){
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
	int16_t cal_val = 0; //calibration value for soldering stresses, measured on 19/08/2024
 800139e:	2300      	movs	r3, #0
 80013a0:	80fb      	strh	r3, [r7, #6]
	int8_t cal_L = (int8_t)cal_val;
 80013a2:	88fb      	ldrh	r3, [r7, #6]
 80013a4:	717b      	strb	r3, [r7, #5]
	int8_t cal_H = (int8_t)(cal_val>>8);
 80013a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013aa:	121b      	asrs	r3, r3, #8
 80013ac:	b21b      	sxth	r3, r3
 80013ae:	713b      	strb	r3, [r7, #4]

	Baro2_Write_Register(0x18, cal_L);
 80013b0:	797b      	ldrb	r3, [r7, #5]
 80013b2:	4619      	mov	r1, r3
 80013b4:	2018      	movs	r0, #24
 80013b6:	f7ff ffc7 	bl	8001348 <Baro2_Write_Register>
	Baro2_Write_Register(0x19, cal_H);
 80013ba:	793b      	ldrb	r3, [r7, #4]
 80013bc:	4619      	mov	r1, r3
 80013be:	2019      	movs	r0, #25
 80013c0:	f7ff ffc2 	bl	8001348 <Baro2_Write_Register>


	Baro2_Write_Register(0x10, 0b01000000); //50Hz refresh rate, low pass off
 80013c4:	2140      	movs	r1, #64	; 0x40
 80013c6:	2010      	movs	r0, #16
 80013c8:	f7ff ffbe 	bl	8001348 <Baro2_Write_Register>
	Baro2_Write_Register(0x11, 0b00000010); //enables low noise mode
 80013cc:	2102      	movs	r1, #2
 80013ce:	2011      	movs	r0, #17
 80013d0:	f7ff ffba 	bl	8001348 <Baro2_Write_Register>
}
 80013d4:	bf00      	nop
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <Baro2_Get_Pressure>:

int32_t Baro2_Get_Pressure(){
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
	uint8_t BARO_L = Baro2_Read_Register(0x28);
 80013e2:	2028      	movs	r0, #40	; 0x28
 80013e4:	f7ff ff84 	bl	80012f0 <Baro2_Read_Register>
 80013e8:	4603      	mov	r3, r0
 80013ea:	71fb      	strb	r3, [r7, #7]
	uint8_t BARO_M = Baro2_Read_Register(0x29);
 80013ec:	2029      	movs	r0, #41	; 0x29
 80013ee:	f7ff ff7f 	bl	80012f0 <Baro2_Read_Register>
 80013f2:	4603      	mov	r3, r0
 80013f4:	71bb      	strb	r3, [r7, #6]
	uint8_t BARO_H = Baro2_Read_Register(0x2A);
 80013f6:	202a      	movs	r0, #42	; 0x2a
 80013f8:	f7ff ff7a 	bl	80012f0 <Baro2_Read_Register>
 80013fc:	4603      	mov	r3, r0
 80013fe:	717b      	strb	r3, [r7, #5]

	int32_t BARO = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	603b      	str	r3, [r7, #0]
	BARO = ((int32_t)BARO_H << 24) | ((int32_t)BARO_M << 16) | ((int32_t)BARO_L << 8);
 8001404:	797b      	ldrb	r3, [r7, #5]
 8001406:	061a      	lsls	r2, r3, #24
 8001408:	79bb      	ldrb	r3, [r7, #6]
 800140a:	041b      	lsls	r3, r3, #16
 800140c:	431a      	orrs	r2, r3
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	021b      	lsls	r3, r3, #8
 8001412:	4313      	orrs	r3, r2
 8001414:	603b      	str	r3, [r7, #0]
	return BARO;
 8001416:	683b      	ldr	r3, [r7, #0]

}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001420:	b5b0      	push	{r4, r5, r7, lr}
 8001422:	ed2d 8b02 	vpush	{d8}
 8001426:	f5ad 6dd0 	sub.w	sp, sp, #1664	; 0x680
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char state[50] = "DISARMED";
 800142c:	4ac6      	ldr	r2, [pc, #792]	; (8001748 <main+0x328>)
 800142e:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 8001432:	ca07      	ldmia	r2, {r0, r1, r2}
 8001434:	c303      	stmia	r3!, {r0, r1}
 8001436:	701a      	strb	r2, [r3, #0]
 8001438:	f207 53ed 	addw	r3, r7, #1517	; 0x5ed
 800143c:	2229      	movs	r2, #41	; 0x29
 800143e:	2100      	movs	r1, #0
 8001440:	4618      	mov	r0, r3
 8001442:	f015 fc39 	bl	8016cb8 <memset>


	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 8001446:	4bc1      	ldr	r3, [pc, #772]	; (800174c <main+0x32c>)
 8001448:	f507 64b9 	add.w	r4, r7, #1480	; 0x5c8
 800144c:	461d      	mov	r5, r3
 800144e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001450:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001452:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001456:	c403      	stmia	r4!, {r0, r1}
 8001458:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800145a:	f002 f999 	bl	8003790 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800145e:	f000 f97d 	bl	800175c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001462:	f000 f9f7 	bl	8001854 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001466:	f000 ff7f 	bl	8002368 <MX_GPIO_Init>
  MX_DMA_Init();
 800146a:	f000 ff1d 	bl	80022a8 <MX_DMA_Init>
  MX_SPI3_Init();
 800146e:	f000 fc77 	bl	8001d60 <MX_SPI3_Init>
  MX_FDCAN3_Init();
 8001472:	f000 fb07 	bl	8001a84 <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 8001476:	f000 fecb 	bl	8002210 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800147a:	f000 fa1d 	bl	80018b8 <MX_ADC1_Init>
  MX_TIM4_Init();
 800147e:	f000 fd81 	bl	8001f84 <MX_TIM4_Init>
  MX_ADC3_Init();
 8001482:	f000 fa91 	bl	80019a8 <MX_ADC3_Init>
  MX_SPI2_Init();
 8001486:	f000 fc15 	bl	8001cb4 <MX_SPI2_Init>
  MX_I2C2_Init();
 800148a:	f000 fb5f 	bl	8001b4c <MX_I2C2_Init>
  MX_TIM2_Init();
 800148e:	f000 fcbd 	bl	8001e0c <MX_TIM2_Init>
  MX_TIM5_Init();
 8001492:	f000 fdf3 	bl	800207c <MX_TIM5_Init>
  MX_TIM3_Init();
 8001496:	f000 fd11 	bl	8001ebc <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 800149a:	f014 fec1 	bl	8016220 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 800149e:	f000 fbb3 	bl	8001c08 <MX_SPI1_Init>
  MX_UART4_Init();
 80014a2:	f000 fe69 	bl	8002178 <MX_UART4_Init>
  MX_FATFS_Init();
 80014a6:	f012 fc4f 	bl	8013d48 <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 80014aa:	f000 fb8f 	bl	8001bcc <MX_SDMMC2_SD_Init>
  MX_TIM13_Init();
 80014ae:	f000 fe3f 	bl	8002130 <MX_TIM13_Init>

	//if (MAX_M10s_init(&hi2c2))
	//	Error_Handler();

	//MAX_M10S_init(&hi2c2);
	const int MAX = 50;
 80014b2:	2332      	movs	r3, #50	; 0x32
 80014b4:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
	const double SPEED = 2.0 / 2000;
 80014b8:	a395      	add	r3, pc, #596	; (adr r3, 8001710 <main+0x2f0>)
 80014ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014be:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 80014c2:	e9c1 2300 	strd	r2, r3, [r1]
	const double r_offset = 0;
 80014c6:	f04f 0200 	mov.w	r2, #0
 80014ca:	f04f 0300 	mov.w	r3, #0
 80014ce:	f507 61c5 	add.w	r1, r7, #1576	; 0x628
 80014d2:	e9c1 2300 	strd	r2, r3, [r1]
	const double g_offset = 1;
 80014d6:	f04f 0200 	mov.w	r2, #0
 80014da:	4b9d      	ldr	r3, [pc, #628]	; (8001750 <main+0x330>)
 80014dc:	f507 61c4 	add.w	r1, r7, #1568	; 0x620
 80014e0:	e9c1 2300 	strd	r2, r3, [r1]
	const double b_offset = 2;
 80014e4:	f04f 0200 	mov.w	r2, #0
 80014e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014ec:	f507 61c3 	add.w	r1, r7, #1560	; 0x618
 80014f0:	e9c1 2300 	strd	r2, r3, [r1]


	LG2_Write_Register(0x10, 0b00111100); //Accelerometer setup - CTRL1_XL
 80014f4:	213c      	movs	r1, #60	; 0x3c
 80014f6:	2010      	movs	r0, #16
 80014f8:	f7ff fb10 	bl	8000b1c <LG2_Write_Register>
	LG2_Write_Register(0x11, 0b01101000); //Gyroscope setup - CTRL2_G
 80014fc:	2168      	movs	r1, #104	; 0x68
 80014fe:	2011      	movs	r0, #17
 8001500:	f7ff fb0c 	bl	8000b1c <LG2_Write_Register>
	LG2_Write_Register(0x13, 0b00001100); //disables I2C - CTRL4_C
 8001504:	210c      	movs	r1, #12
 8001506:	2013      	movs	r0, #19
 8001508:	f7ff fb08 	bl	8000b1c <LG2_Write_Register>

	HAL_Delay(3000);
 800150c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001510:	f002 f9d0 	bl	80038b4 <HAL_Delay>
	HG2_Write_Register(0x1C, 0b10111111);
 8001514:	21bf      	movs	r1, #191	; 0xbf
 8001516:	201c      	movs	r0, #28
 8001518:	f7ff fad8 	bl	8000acc <HG2_Write_Register>
	HAL_Delay(2);
 800151c:	2002      	movs	r0, #2
 800151e:	f002 f9c9 	bl	80038b4 <HAL_Delay>

	HG2_Write_Register(0x1B, 0b01011000);
 8001522:	2158      	movs	r1, #88	; 0x58
 8001524:	201b      	movs	r0, #27
 8001526:	f7ff fad1 	bl	8000acc <HG2_Write_Register>
	HG2_Write_Register(0x1B, 0b11011000);
 800152a:	21d8      	movs	r1, #216	; 0xd8
 800152c:	201b      	movs	r0, #27
 800152e:	f7ff facd 	bl	8000acc <HG2_Write_Register>

	Baro2_Configure();
 8001532:	f7ff ff31 	bl	8001398 <Baro2_Configure>

	double temperature = 275.15;
 8001536:	a378      	add	r3, pc, #480	; (adr r3, 8001718 <main+0x2f8>)
 8001538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153c:	f507 61cf 	add.w	r1, r7, #1656	; 0x678
 8001540:	e9c1 2300 	strd	r2, r3, [r1]
	double sea_level_pressure = 101.7;
 8001544:	a376      	add	r3, pc, #472	; (adr r3, 8001720 <main+0x300>)
 8001546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154a:	f507 61ce 	add.w	r1, r7, #1648	; 0x670
 800154e:	e9c1 2300 	strd	r2, r3, [r1]

	int index = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	f8c7 366c 	str.w	r3, [r7, #1644]	; 0x66c
	double avg_tab[100];

	for(int i = 0; i < 14; i++){
 8001558:	2300      	movs	r3, #0
 800155a:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668
 800155e:	e021      	b.n	80015a4 <main+0x184>
		LED_Color_Data[i][0] = 0;
 8001560:	497c      	ldr	r1, [pc, #496]	; (8001754 <main+0x334>)
 8001562:	f8d7 2668 	ldr.w	r2, [r7, #1640]	; 0x668
 8001566:	4613      	mov	r3, r2
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	4413      	add	r3, r2
 800156c:	440b      	add	r3, r1
 800156e:	2200      	movs	r2, #0
 8001570:	701a      	strb	r2, [r3, #0]
		LED_Color_Data[i][1] = 255;
 8001572:	4978      	ldr	r1, [pc, #480]	; (8001754 <main+0x334>)
 8001574:	f8d7 2668 	ldr.w	r2, [r7, #1640]	; 0x668
 8001578:	4613      	mov	r3, r2
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	4413      	add	r3, r2
 800157e:	440b      	add	r3, r1
 8001580:	3301      	adds	r3, #1
 8001582:	22ff      	movs	r2, #255	; 0xff
 8001584:	701a      	strb	r2, [r3, #0]
		LED_Color_Data[i][2] = 0;
 8001586:	4973      	ldr	r1, [pc, #460]	; (8001754 <main+0x334>)
 8001588:	f8d7 2668 	ldr.w	r2, [r7, #1640]	; 0x668
 800158c:	4613      	mov	r3, r2
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	4413      	add	r3, r2
 8001592:	440b      	add	r3, r1
 8001594:	3302      	adds	r3, #2
 8001596:	2200      	movs	r2, #0
 8001598:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 14; i++){
 800159a:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 800159e:	3301      	adds	r3, #1
 80015a0:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668
 80015a4:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 80015a8:	2b0d      	cmp	r3, #13
 80015aa:	ddd9      	ble.n	8001560 <main+0x140>

	}
	disarm(state);
 80015ac:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fe41 	bl	8001238 <disarm>
	setLEDs(LED_Color_Data);
 80015b6:	4867      	ldr	r0, [pc, #412]	; (8001754 <main+0x334>)
 80015b8:	f7ff fad8 	bl	8000b6c <setLEDs>
	setStatus("CAN", 1);
 80015bc:	2101      	movs	r1, #1
 80015be:	4866      	ldr	r0, [pc, #408]	; (8001758 <main+0x338>)
 80015c0:	f7ff fc90 	bl	8000ee4 <setStatus>
	for(int i = 0; i < 100; i++){
 80015c4:	2300      	movs	r3, #0
 80015c6:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 80015ca:	e012      	b.n	80015f2 <main+0x1d2>
		avg_tab[i] = 0;
 80015cc:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 80015d0:	f5a3 62bb 	sub.w	r2, r3, #1496	; 0x5d8
 80015d4:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	18d1      	adds	r1, r2, r3
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	f04f 0300 	mov.w	r3, #0
 80015e4:	e9c1 2300 	strd	r2, r3, [r1]
	for(int i = 0; i < 100; i++){
 80015e8:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 80015ec:	3301      	adds	r3, #1
 80015ee:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 80015f2:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 80015f6:	2b63      	cmp	r3, #99	; 0x63
 80015f8:	dde8      	ble.n	80015cc <main+0x1ac>
	}
	while (1) {
		int32_t int_pressure = Baro2_Get_Pressure();
 80015fa:	f7ff feef 	bl	80013dc <Baro2_Get_Pressure>
 80015fe:	f8c7 0660 	str.w	r0, [r7, #1632]	; 0x660
		double float_pressure = (double)int_pressure / (40960.0 * 256.0);
 8001602:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 8001606:	ee07 3a90 	vmov	s15, r3
 800160a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800160e:	ed9f 5b46 	vldr	d5, [pc, #280]	; 8001728 <main+0x308>
 8001612:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001616:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800161a:	ed83 7b00 	vstr	d7, [r3]

		avg_tab[index] = float_pressure;
 800161e:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 8001622:	f5a3 62bb 	sub.w	r2, r3, #1496	; 0x5d8
 8001626:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	18d1      	adds	r1, r2, r3
 800162e:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8001632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001636:	e9c1 2300 	strd	r2, r3, [r1]
		index++;
 800163a:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 800163e:	3301      	adds	r3, #1
 8001640:	f8c7 366c 	str.w	r3, [r7, #1644]	; 0x66c
		if(index > 99){
 8001644:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 8001648:	2b63      	cmp	r3, #99	; 0x63
 800164a:	dd02      	ble.n	8001652 <main+0x232>
			index = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	f8c7 366c 	str.w	r3, [r7, #1644]	; 0x66c
		}

		double sum = 0;
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	f04f 0300 	mov.w	r3, #0
 800165a:	f507 61ca 	add.w	r1, r7, #1616	; 0x650
 800165e:	e9c1 2300 	strd	r2, r3, [r1]
		for(int i = 0; i < 100; i++){
 8001662:	2300      	movs	r3, #0
 8001664:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
 8001668:	e018      	b.n	800169c <main+0x27c>
			sum += avg_tab[i];
 800166a:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 800166e:	f5a3 62bb 	sub.w	r2, r3, #1496	; 0x5d8
 8001672:	f8d7 364c 	ldr.w	r3, [r7, #1612]	; 0x64c
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	4413      	add	r3, r2
 800167a:	ed93 7b00 	vldr	d7, [r3]
 800167e:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8001682:	ed93 6b00 	vldr	d6, [r3]
 8001686:	ee36 7b07 	vadd.f64	d7, d6, d7
 800168a:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800168e:	ed83 7b00 	vstr	d7, [r3]
		for(int i = 0; i < 100; i++){
 8001692:	f8d7 364c 	ldr.w	r3, [r7, #1612]	; 0x64c
 8001696:	3301      	adds	r3, #1
 8001698:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
 800169c:	f8d7 364c 	ldr.w	r3, [r7, #1612]	; 0x64c
 80016a0:	2b63      	cmp	r3, #99	; 0x63
 80016a2:	dde2      	ble.n	800166a <main+0x24a>
		}

		sum /= 100;
 80016a4:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80016a8:	ed93 6b00 	vldr	d6, [r3]
 80016ac:	ed9f 5b20 	vldr	d5, [pc, #128]	; 8001730 <main+0x310>
 80016b0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016b4:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80016b8:	ed83 7b00 	vstr	d7, [r3]
		double altitude = (temperature/0.0065) *(1- pow((sum/sea_level_pressure), (1/5.256)));
 80016bc:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80016c0:	ed93 7b00 	vldr	d7, [r3]
 80016c4:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8001738 <main+0x318>
 80016c8:	ee87 8b06 	vdiv.f64	d8, d7, d6
 80016cc:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80016d0:	ed93 6b00 	vldr	d6, [r3]
 80016d4:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80016d8:	ed93 7b00 	vldr	d7, [r3]
 80016dc:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80016e0:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8001740 <main+0x320>
 80016e4:	eeb0 0b45 	vmov.f64	d0, d5
 80016e8:	f019 fe7a 	bl	801b3e0 <pow>
 80016ec:	eeb0 7b40 	vmov.f64	d7, d0
 80016f0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80016f4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80016f8:	ee28 7b07 	vmul.f64	d7, d8, d7
 80016fc:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8001700:	ed83 7b00 	vstr	d7, [r3]

		char data_gyro[50];
		//sprintf(data_gyro, "%f\n", altitude);
		//CDC_Transmit_HS(data_gyro, strlen(data_gyro));
		HAL_Delay(20);
 8001704:	2014      	movs	r0, #20
 8001706:	f002 f8d5 	bl	80038b4 <HAL_Delay>
		updateStatus();
 800170a:	f7ff fcad 	bl	8001068 <updateStatus>
	while (1) {
 800170e:	e774      	b.n	80015fa <main+0x1da>
 8001710:	d2f1a9fc 	.word	0xd2f1a9fc
 8001714:	3f50624d 	.word	0x3f50624d
 8001718:	66666666 	.word	0x66666666
 800171c:	40713266 	.word	0x40713266
 8001720:	cccccccd 	.word	0xcccccccd
 8001724:	40596ccc 	.word	0x40596ccc
 8001728:	00000000 	.word	0x00000000
 800172c:	41640000 	.word	0x41640000
 8001730:	00000000 	.word	0x00000000
 8001734:	40590000 	.word	0x40590000
 8001738:	76c8b439 	.word	0x76c8b439
 800173c:	3f7a9fbe 	.word	0x3f7a9fbe
 8001740:	169985a6 	.word	0x169985a6
 8001744:	3fc85a66 	.word	0x3fc85a66
 8001748:	0801b9fc 	.word	0x0801b9fc
 800174c:	0801ba30 	.word	0x0801ba30
 8001750:	3ff00000 	.word	0x3ff00000
 8001754:	240015e0 	.word	0x240015e0
 8001758:	0801b9f8 	.word	0x0801b9f8

0800175c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b09c      	sub	sp, #112	; 0x70
 8001760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001766:	224c      	movs	r2, #76	; 0x4c
 8001768:	2100      	movs	r1, #0
 800176a:	4618      	mov	r0, r3
 800176c:	f015 faa4 	bl	8016cb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001770:	1d3b      	adds	r3, r7, #4
 8001772:	2220      	movs	r2, #32
 8001774:	2100      	movs	r1, #0
 8001776:	4618      	mov	r0, r3
 8001778:	f015 fa9e 	bl	8016cb8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800177c:	2002      	movs	r0, #2
 800177e:	f007 ff61 	bl	8009644 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001782:	2300      	movs	r3, #0
 8001784:	603b      	str	r3, [r7, #0]
 8001786:	4b32      	ldr	r3, [pc, #200]	; (8001850 <SystemClock_Config+0xf4>)
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800178e:	4a30      	ldr	r2, [pc, #192]	; (8001850 <SystemClock_Config+0xf4>)
 8001790:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001794:	6193      	str	r3, [r2, #24]
 8001796:	4b2e      	ldr	r3, [pc, #184]	; (8001850 <SystemClock_Config+0xf4>)
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800179e:	603b      	str	r3, [r7, #0]
 80017a0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80017a2:	bf00      	nop
 80017a4:	4b2a      	ldr	r3, [pc, #168]	; (8001850 <SystemClock_Config+0xf4>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017b0:	d1f8      	bne.n	80017a4 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80017b2:	2323      	movs	r3, #35	; 0x23
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80017bc:	2301      	movs	r3, #1
 80017be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80017c0:	2340      	movs	r3, #64	; 0x40
 80017c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80017c4:	2301      	movs	r3, #1
 80017c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017c8:	2302      	movs	r3, #2
 80017ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017cc:	2300      	movs	r3, #0
 80017ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80017d0:	2304      	movs	r3, #4
 80017d2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80017d4:	230c      	movs	r3, #12
 80017d6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80017d8:	2301      	movs	r3, #1
 80017da:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 80017dc:	230c      	movs	r3, #12
 80017de:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80017e0:	2302      	movs	r3, #2
 80017e2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80017e4:	230c      	movs	r3, #12
 80017e6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80017e8:	2300      	movs	r3, #0
 80017ea:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f4:	4618      	mov	r0, r3
 80017f6:	f007 ff6f 	bl	80096d8 <HAL_RCC_OscConfig>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001800:	f000 ff2a 	bl	8002658 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001804:	233f      	movs	r3, #63	; 0x3f
 8001806:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001808:	2303      	movs	r3, #3
 800180a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800180c:	2300      	movs	r3, #0
 800180e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001810:	2308      	movs	r3, #8
 8001812:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001814:	2340      	movs	r3, #64	; 0x40
 8001816:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001818:	2340      	movs	r3, #64	; 0x40
 800181a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800181c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001820:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001822:	2340      	movs	r3, #64	; 0x40
 8001824:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001826:	1d3b      	adds	r3, r7, #4
 8001828:	2101      	movs	r1, #1
 800182a:	4618      	mov	r0, r3
 800182c:	f008 fb2e 	bl	8009e8c <HAL_RCC_ClockConfig>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <SystemClock_Config+0xde>
  {
    Error_Handler();
 8001836:	f000 ff0f 	bl	8002658 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800183a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800183e:	2100      	movs	r1, #0
 8001840:	2000      	movs	r0, #0
 8001842:	f008 fcd9 	bl	800a1f8 <HAL_RCC_MCOConfig>
}
 8001846:	bf00      	nop
 8001848:	3770      	adds	r7, #112	; 0x70
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	58024800 	.word	0x58024800

08001854 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b0ae      	sub	sp, #184	; 0xb8
 8001858:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800185a:	463b      	mov	r3, r7
 800185c:	22b8      	movs	r2, #184	; 0xb8
 800185e:	2100      	movs	r1, #0
 8001860:	4618      	mov	r0, r3
 8001862:	f015 fa29 	bl	8016cb8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 8001866:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 800186a:	f04f 0300 	mov.w	r3, #0
 800186e:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001872:	2304      	movs	r3, #4
 8001874:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001876:	230c      	movs	r3, #12
 8001878:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 800187a:	2304      	movs	r3, #4
 800187c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800187e:	2302      	movs	r3, #2
 8001880:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001882:	2302      	movs	r3, #2
 8001884:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001886:	23c0      	movs	r3, #192	; 0xc0
 8001888:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800188a:	2300      	movs	r3, #0
 800188c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001892:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001896:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001898:	2300      	movs	r3, #0
 800189a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800189e:	463b      	mov	r3, r7
 80018a0:	4618      	mov	r0, r3
 80018a2:	f008 fee9 	bl	800a678 <HAL_RCCEx_PeriphCLKConfig>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 80018ac:	f000 fed4 	bl	8002658 <Error_Handler>
  }
}
 80018b0:	bf00      	nop
 80018b2:	37b8      	adds	r7, #184	; 0xb8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08c      	sub	sp, #48	; 0x30
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80018be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80018ca:	463b      	mov	r3, r7
 80018cc:	2224      	movs	r2, #36	; 0x24
 80018ce:	2100      	movs	r1, #0
 80018d0:	4618      	mov	r0, r3
 80018d2:	f015 f9f1 	bl	8016cb8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80018d6:	4b31      	ldr	r3, [pc, #196]	; (800199c <MX_ADC1_Init+0xe4>)
 80018d8:	4a31      	ldr	r2, [pc, #196]	; (80019a0 <MX_ADC1_Init+0xe8>)
 80018da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80018dc:	4b2f      	ldr	r3, [pc, #188]	; (800199c <MX_ADC1_Init+0xe4>)
 80018de:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 80018e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80018e4:	4b2d      	ldr	r3, [pc, #180]	; (800199c <MX_ADC1_Init+0xe4>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018ea:	4b2c      	ldr	r3, [pc, #176]	; (800199c <MX_ADC1_Init+0xe4>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018f0:	4b2a      	ldr	r3, [pc, #168]	; (800199c <MX_ADC1_Init+0xe4>)
 80018f2:	2204      	movs	r2, #4
 80018f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80018f6:	4b29      	ldr	r3, [pc, #164]	; (800199c <MX_ADC1_Init+0xe4>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80018fc:	4b27      	ldr	r3, [pc, #156]	; (800199c <MX_ADC1_Init+0xe4>)
 80018fe:	2200      	movs	r2, #0
 8001900:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001902:	4b26      	ldr	r3, [pc, #152]	; (800199c <MX_ADC1_Init+0xe4>)
 8001904:	2201      	movs	r2, #1
 8001906:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001908:	4b24      	ldr	r3, [pc, #144]	; (800199c <MX_ADC1_Init+0xe4>)
 800190a:	2200      	movs	r2, #0
 800190c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001910:	4b22      	ldr	r3, [pc, #136]	; (800199c <MX_ADC1_Init+0xe4>)
 8001912:	2200      	movs	r2, #0
 8001914:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001916:	4b21      	ldr	r3, [pc, #132]	; (800199c <MX_ADC1_Init+0xe4>)
 8001918:	2200      	movs	r2, #0
 800191a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800191c:	4b1f      	ldr	r3, [pc, #124]	; (800199c <MX_ADC1_Init+0xe4>)
 800191e:	2200      	movs	r2, #0
 8001920:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001922:	4b1e      	ldr	r3, [pc, #120]	; (800199c <MX_ADC1_Init+0xe4>)
 8001924:	2200      	movs	r2, #0
 8001926:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001928:	4b1c      	ldr	r3, [pc, #112]	; (800199c <MX_ADC1_Init+0xe4>)
 800192a:	2200      	movs	r2, #0
 800192c:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800192e:	4b1b      	ldr	r3, [pc, #108]	; (800199c <MX_ADC1_Init+0xe4>)
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001936:	4819      	ldr	r0, [pc, #100]	; (800199c <MX_ADC1_Init+0xe4>)
 8001938:	f002 fa3c 	bl	8003db4 <HAL_ADC_Init>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001942:	f000 fe89 	bl	8002658 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001946:	2300      	movs	r3, #0
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800194a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800194e:	4619      	mov	r1, r3
 8001950:	4812      	ldr	r0, [pc, #72]	; (800199c <MX_ADC1_Init+0xe4>)
 8001952:	f003 fa77 	bl	8004e44 <HAL_ADCEx_MultiModeConfigChannel>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 800195c:	f000 fe7c 	bl	8002658 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001960:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <MX_ADC1_Init+0xec>)
 8001962:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001964:	2306      	movs	r3, #6
 8001966:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8001968:	2303      	movs	r3, #3
 800196a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800196c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001970:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001972:	2304      	movs	r3, #4
 8001974:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001976:	2300      	movs	r3, #0
 8001978:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800197a:	2300      	movs	r3, #0
 800197c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001980:	463b      	mov	r3, r7
 8001982:	4619      	mov	r1, r3
 8001984:	4805      	ldr	r0, [pc, #20]	; (800199c <MX_ADC1_Init+0xe4>)
 8001986:	f002 fc1d 	bl	80041c4 <HAL_ADC_ConfigChannel>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001990:	f000 fe62 	bl	8002658 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001994:	bf00      	nop
 8001996:	3730      	adds	r7, #48	; 0x30
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	24000c0c 	.word	0x24000c0c
 80019a0:	40022000 	.word	0x40022000
 80019a4:	2a000400 	.word	0x2a000400

080019a8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08a      	sub	sp, #40	; 0x28
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019ae:	1d3b      	adds	r3, r7, #4
 80019b0:	2224      	movs	r2, #36	; 0x24
 80019b2:	2100      	movs	r1, #0
 80019b4:	4618      	mov	r0, r3
 80019b6:	f015 f97f 	bl	8016cb8 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80019ba:	4b2f      	ldr	r3, [pc, #188]	; (8001a78 <MX_ADC3_Init+0xd0>)
 80019bc:	4a2f      	ldr	r2, [pc, #188]	; (8001a7c <MX_ADC3_Init+0xd4>)
 80019be:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80019c0:	4b2d      	ldr	r3, [pc, #180]	; (8001a78 <MX_ADC3_Init+0xd0>)
 80019c2:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 80019c6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80019c8:	4b2b      	ldr	r3, [pc, #172]	; (8001a78 <MX_ADC3_Init+0xd0>)
 80019ca:	2208      	movs	r2, #8
 80019cc:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80019ce:	4b2a      	ldr	r3, [pc, #168]	; (8001a78 <MX_ADC3_Init+0xd0>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80019d4:	4b28      	ldr	r3, [pc, #160]	; (8001a78 <MX_ADC3_Init+0xd0>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019da:	4b27      	ldr	r3, [pc, #156]	; (8001a78 <MX_ADC3_Init+0xd0>)
 80019dc:	2204      	movs	r2, #4
 80019de:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80019e0:	4b25      	ldr	r3, [pc, #148]	; (8001a78 <MX_ADC3_Init+0xd0>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80019e6:	4b24      	ldr	r3, [pc, #144]	; (8001a78 <MX_ADC3_Init+0xd0>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80019ec:	4b22      	ldr	r3, [pc, #136]	; (8001a78 <MX_ADC3_Init+0xd0>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80019f2:	4b21      	ldr	r3, [pc, #132]	; (8001a78 <MX_ADC3_Init+0xd0>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019fa:	4b1f      	ldr	r3, [pc, #124]	; (8001a78 <MX_ADC3_Init+0xd0>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a00:	4b1d      	ldr	r3, [pc, #116]	; (8001a78 <MX_ADC3_Init+0xd0>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001a06:	4b1c      	ldr	r3, [pc, #112]	; (8001a78 <MX_ADC3_Init+0xd0>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001a0e:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <MX_ADC3_Init+0xd0>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001a14:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <MX_ADC3_Init+0xd0>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a1a:	4b17      	ldr	r3, [pc, #92]	; (8001a78 <MX_ADC3_Init+0xd0>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001a20:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <MX_ADC3_Init+0xd0>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001a26:	4b14      	ldr	r3, [pc, #80]	; (8001a78 <MX_ADC3_Init+0xd0>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001a2e:	4812      	ldr	r0, [pc, #72]	; (8001a78 <MX_ADC3_Init+0xd0>)
 8001a30:	f002 f9c0 	bl	8003db4 <HAL_ADC_Init>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001a3a:	f000 fe0d 	bl	8002658 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001a3e:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <MX_ADC3_Init+0xd8>)
 8001a40:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a42:	2306      	movs	r3, #6
 8001a44:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a4a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001a4e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a50:	2304      	movs	r3, #4
 8001a52:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001a5c:	1d3b      	adds	r3, r7, #4
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4805      	ldr	r0, [pc, #20]	; (8001a78 <MX_ADC3_Init+0xd0>)
 8001a62:	f002 fbaf 	bl	80041c4 <HAL_ADC_ConfigChannel>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8001a6c:	f000 fdf4 	bl	8002658 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001a70:	bf00      	nop
 8001a72:	3728      	adds	r7, #40	; 0x28
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	24000c7c 	.word	0x24000c7c
 8001a7c:	58026000 	.word	0x58026000
 8001a80:	04300002 	.word	0x04300002

08001a84 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001a88:	4b2e      	ldr	r3, [pc, #184]	; (8001b44 <MX_FDCAN3_Init+0xc0>)
 8001a8a:	4a2f      	ldr	r2, [pc, #188]	; (8001b48 <MX_FDCAN3_Init+0xc4>)
 8001a8c:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001a8e:	4b2d      	ldr	r3, [pc, #180]	; (8001b44 <MX_FDCAN3_Init+0xc0>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001a94:	4b2b      	ldr	r3, [pc, #172]	; (8001b44 <MX_FDCAN3_Init+0xc0>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8001a9a:	4b2a      	ldr	r3, [pc, #168]	; (8001b44 <MX_FDCAN3_Init+0xc0>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001aa0:	4b28      	ldr	r3, [pc, #160]	; (8001b44 <MX_FDCAN3_Init+0xc0>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001aa6:	4b27      	ldr	r3, [pc, #156]	; (8001b44 <MX_FDCAN3_Init+0xc0>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8001aac:	4b25      	ldr	r3, [pc, #148]	; (8001b44 <MX_FDCAN3_Init+0xc0>)
 8001aae:	2210      	movs	r2, #16
 8001ab0:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8001ab2:	4b24      	ldr	r3, [pc, #144]	; (8001b44 <MX_FDCAN3_Init+0xc0>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8001ab8:	4b22      	ldr	r3, [pc, #136]	; (8001b44 <MX_FDCAN3_Init+0xc0>)
 8001aba:	2202      	movs	r2, #2
 8001abc:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8001abe:	4b21      	ldr	r3, [pc, #132]	; (8001b44 <MX_FDCAN3_Init+0xc0>)
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8001ac4:	4b1f      	ldr	r3, [pc, #124]	; (8001b44 <MX_FDCAN3_Init+0xc0>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8001aca:	4b1e      	ldr	r3, [pc, #120]	; (8001b44 <MX_FDCAN3_Init+0xc0>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8001ad0:	4b1c      	ldr	r3, [pc, #112]	; (8001b44 <MX_FDCAN3_Init+0xc0>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8001ad6:	4b1b      	ldr	r3, [pc, #108]	; (8001b44 <MX_FDCAN3_Init+0xc0>)
 8001ad8:	2201      	movs	r2, #1
 8001ada:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8001adc:	4b19      	ldr	r3, [pc, #100]	; (8001b44 <MX_FDCAN3_Init+0xc0>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8001ae2:	4b18      	ldr	r3, [pc, #96]	; (8001b44 <MX_FDCAN3_Init+0xc0>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8001ae8:	4b16      	ldr	r3, [pc, #88]	; (8001b44 <MX_FDCAN3_Init+0xc0>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8001aee:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <MX_FDCAN3_Init+0xc0>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001af4:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <MX_FDCAN3_Init+0xc0>)
 8001af6:	2204      	movs	r2, #4
 8001af8:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8001afa:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <MX_FDCAN3_Init+0xc0>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001b00:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <MX_FDCAN3_Init+0xc0>)
 8001b02:	2204      	movs	r2, #4
 8001b04:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8001b06:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <MX_FDCAN3_Init+0xc0>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001b0c:	4b0d      	ldr	r3, [pc, #52]	; (8001b44 <MX_FDCAN3_Init+0xc0>)
 8001b0e:	2204      	movs	r2, #4
 8001b10:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8001b12:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <MX_FDCAN3_Init+0xc0>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8001b18:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <MX_FDCAN3_Init+0xc0>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8001b1e:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <MX_FDCAN3_Init+0xc0>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001b24:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <MX_FDCAN3_Init+0xc0>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001b2a:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <MX_FDCAN3_Init+0xc0>)
 8001b2c:	2204      	movs	r2, #4
 8001b2e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001b30:	4804      	ldr	r0, [pc, #16]	; (8001b44 <MX_FDCAN3_Init+0xc0>)
 8001b32:	f005 fc4f 	bl	80073d4 <HAL_FDCAN_Init>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8001b3c:	f000 fd8c 	bl	8002658 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8001b40:	bf00      	nop
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	24000ddc 	.word	0x24000ddc
 8001b48:	4000d400 	.word	0x4000d400

08001b4c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b50:	4b1b      	ldr	r3, [pc, #108]	; (8001bc0 <MX_I2C2_Init+0x74>)
 8001b52:	4a1c      	ldr	r2, [pc, #112]	; (8001bc4 <MX_I2C2_Init+0x78>)
 8001b54:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001b56:	4b1a      	ldr	r3, [pc, #104]	; (8001bc0 <MX_I2C2_Init+0x74>)
 8001b58:	4a1b      	ldr	r2, [pc, #108]	; (8001bc8 <MX_I2C2_Init+0x7c>)
 8001b5a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001b5c:	4b18      	ldr	r3, [pc, #96]	; (8001bc0 <MX_I2C2_Init+0x74>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b62:	4b17      	ldr	r3, [pc, #92]	; (8001bc0 <MX_I2C2_Init+0x74>)
 8001b64:	2201      	movs	r2, #1
 8001b66:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b68:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <MX_I2C2_Init+0x74>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001b6e:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <MX_I2C2_Init+0x74>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b74:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <MX_I2C2_Init+0x74>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b7a:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <MX_I2C2_Init+0x74>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b80:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <MX_I2C2_Init+0x74>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b86:	480e      	ldr	r0, [pc, #56]	; (8001bc0 <MX_I2C2_Init+0x74>)
 8001b88:	f006 f962 	bl	8007e50 <HAL_I2C_Init>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001b92:	f000 fd61 	bl	8002658 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b96:	2100      	movs	r1, #0
 8001b98:	4809      	ldr	r0, [pc, #36]	; (8001bc0 <MX_I2C2_Init+0x74>)
 8001b9a:	f006 fa03 	bl	8007fa4 <HAL_I2CEx_ConfigAnalogFilter>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001ba4:	f000 fd58 	bl	8002658 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001ba8:	2100      	movs	r1, #0
 8001baa:	4805      	ldr	r0, [pc, #20]	; (8001bc0 <MX_I2C2_Init+0x74>)
 8001bac:	f006 fa45 	bl	800803a <HAL_I2CEx_ConfigDigitalFilter>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001bb6:	f000 fd4f 	bl	8002658 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	24000e7c 	.word	0x24000e7c
 8001bc4:	40005800 	.word	0x40005800
 8001bc8:	20303e5d 	.word	0x20303e5d

08001bcc <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8001bd0:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <MX_SDMMC2_SD_Init+0x34>)
 8001bd2:	4a0c      	ldr	r2, [pc, #48]	; (8001c04 <MX_SDMMC2_SD_Init+0x38>)
 8001bd4:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001bd6:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <MX_SDMMC2_SD_Init+0x34>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001bdc:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <MX_SDMMC2_SD_Init+0x34>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001be2:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <MX_SDMMC2_SD_Init+0x34>)
 8001be4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001be8:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001bea:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <MX_SDMMC2_SD_Init+0x34>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 8001bf0:	4b03      	ldr	r3, [pc, #12]	; (8001c00 <MX_SDMMC2_SD_Init+0x34>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8001bf6:	bf00      	nop
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	24000ed0 	.word	0x24000ed0
 8001c04:	48022400 	.word	0x48022400

08001c08 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c0c:	4b27      	ldr	r3, [pc, #156]	; (8001cac <MX_SPI1_Init+0xa4>)
 8001c0e:	4a28      	ldr	r2, [pc, #160]	; (8001cb0 <MX_SPI1_Init+0xa8>)
 8001c10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c12:	4b26      	ldr	r3, [pc, #152]	; (8001cac <MX_SPI1_Init+0xa4>)
 8001c14:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001c18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c1a:	4b24      	ldr	r3, [pc, #144]	; (8001cac <MX_SPI1_Init+0xa4>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c20:	4b22      	ldr	r3, [pc, #136]	; (8001cac <MX_SPI1_Init+0xa4>)
 8001c22:	2207      	movs	r2, #7
 8001c24:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c26:	4b21      	ldr	r3, [pc, #132]	; (8001cac <MX_SPI1_Init+0xa4>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c2c:	4b1f      	ldr	r3, [pc, #124]	; (8001cac <MX_SPI1_Init+0xa4>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c32:	4b1e      	ldr	r3, [pc, #120]	; (8001cac <MX_SPI1_Init+0xa4>)
 8001c34:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c38:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001c3a:	4b1c      	ldr	r3, [pc, #112]	; (8001cac <MX_SPI1_Init+0xa4>)
 8001c3c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001c40:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c42:	4b1a      	ldr	r3, [pc, #104]	; (8001cac <MX_SPI1_Init+0xa4>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c48:	4b18      	ldr	r3, [pc, #96]	; (8001cac <MX_SPI1_Init+0xa4>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c4e:	4b17      	ldr	r3, [pc, #92]	; (8001cac <MX_SPI1_Init+0xa4>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001c54:	4b15      	ldr	r3, [pc, #84]	; (8001cac <MX_SPI1_Init+0xa4>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c5a:	4b14      	ldr	r3, [pc, #80]	; (8001cac <MX_SPI1_Init+0xa4>)
 8001c5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c60:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001c62:	4b12      	ldr	r3, [pc, #72]	; (8001cac <MX_SPI1_Init+0xa4>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001c68:	4b10      	ldr	r3, [pc, #64]	; (8001cac <MX_SPI1_Init+0xa4>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001c6e:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <MX_SPI1_Init+0xa4>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001c74:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <MX_SPI1_Init+0xa4>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <MX_SPI1_Init+0xa4>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001c80:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <MX_SPI1_Init+0xa4>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001c86:	4b09      	ldr	r3, [pc, #36]	; (8001cac <MX_SPI1_Init+0xa4>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001c8c:	4b07      	ldr	r3, [pc, #28]	; (8001cac <MX_SPI1_Init+0xa4>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001c92:	4b06      	ldr	r3, [pc, #24]	; (8001cac <MX_SPI1_Init+0xa4>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c98:	4804      	ldr	r0, [pc, #16]	; (8001cac <MX_SPI1_Init+0xa4>)
 8001c9a:	f00c fd37 	bl	800e70c <HAL_SPI_Init>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001ca4:	f000 fcd8 	bl	8002658 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	24000f4c 	.word	0x24000f4c
 8001cb0:	40013000 	.word	0x40013000

08001cb4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001cb8:	4b27      	ldr	r3, [pc, #156]	; (8001d58 <MX_SPI2_Init+0xa4>)
 8001cba:	4a28      	ldr	r2, [pc, #160]	; (8001d5c <MX_SPI2_Init+0xa8>)
 8001cbc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001cbe:	4b26      	ldr	r3, [pc, #152]	; (8001d58 <MX_SPI2_Init+0xa4>)
 8001cc0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001cc4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001cc6:	4b24      	ldr	r3, [pc, #144]	; (8001d58 <MX_SPI2_Init+0xa4>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ccc:	4b22      	ldr	r3, [pc, #136]	; (8001d58 <MX_SPI2_Init+0xa4>)
 8001cce:	2207      	movs	r2, #7
 8001cd0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cd2:	4b21      	ldr	r3, [pc, #132]	; (8001d58 <MX_SPI2_Init+0xa4>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cd8:	4b1f      	ldr	r3, [pc, #124]	; (8001d58 <MX_SPI2_Init+0xa4>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001cde:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <MX_SPI2_Init+0xa4>)
 8001ce0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ce4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001ce6:	4b1c      	ldr	r3, [pc, #112]	; (8001d58 <MX_SPI2_Init+0xa4>)
 8001ce8:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001cec:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cee:	4b1a      	ldr	r3, [pc, #104]	; (8001d58 <MX_SPI2_Init+0xa4>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cf4:	4b18      	ldr	r3, [pc, #96]	; (8001d58 <MX_SPI2_Init+0xa4>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cfa:	4b17      	ldr	r3, [pc, #92]	; (8001d58 <MX_SPI2_Init+0xa4>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001d00:	4b15      	ldr	r3, [pc, #84]	; (8001d58 <MX_SPI2_Init+0xa4>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d06:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <MX_SPI2_Init+0xa4>)
 8001d08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d0c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001d0e:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <MX_SPI2_Init+0xa4>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001d14:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <MX_SPI2_Init+0xa4>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d1a:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <MX_SPI2_Init+0xa4>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d20:	4b0d      	ldr	r3, [pc, #52]	; (8001d58 <MX_SPI2_Init+0xa4>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001d26:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <MX_SPI2_Init+0xa4>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001d2c:	4b0a      	ldr	r3, [pc, #40]	; (8001d58 <MX_SPI2_Init+0xa4>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001d32:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <MX_SPI2_Init+0xa4>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001d38:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <MX_SPI2_Init+0xa4>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001d3e:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <MX_SPI2_Init+0xa4>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d44:	4804      	ldr	r0, [pc, #16]	; (8001d58 <MX_SPI2_Init+0xa4>)
 8001d46:	f00c fce1 	bl	800e70c <HAL_SPI_Init>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001d50:	f000 fc82 	bl	8002658 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d54:	bf00      	nop
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	24000fd4 	.word	0x24000fd4
 8001d5c:	40003800 	.word	0x40003800

08001d60 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001d64:	4b27      	ldr	r3, [pc, #156]	; (8001e04 <MX_SPI3_Init+0xa4>)
 8001d66:	4a28      	ldr	r2, [pc, #160]	; (8001e08 <MX_SPI3_Init+0xa8>)
 8001d68:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001d6a:	4b26      	ldr	r3, [pc, #152]	; (8001e04 <MX_SPI3_Init+0xa4>)
 8001d6c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001d70:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001d72:	4b24      	ldr	r3, [pc, #144]	; (8001e04 <MX_SPI3_Init+0xa4>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d78:	4b22      	ldr	r3, [pc, #136]	; (8001e04 <MX_SPI3_Init+0xa4>)
 8001d7a:	2207      	movs	r2, #7
 8001d7c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d7e:	4b21      	ldr	r3, [pc, #132]	; (8001e04 <MX_SPI3_Init+0xa4>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d84:	4b1f      	ldr	r3, [pc, #124]	; (8001e04 <MX_SPI3_Init+0xa4>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001d8a:	4b1e      	ldr	r3, [pc, #120]	; (8001e04 <MX_SPI3_Init+0xa4>)
 8001d8c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d90:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001d92:	4b1c      	ldr	r3, [pc, #112]	; (8001e04 <MX_SPI3_Init+0xa4>)
 8001d94:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001d98:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d9a:	4b1a      	ldr	r3, [pc, #104]	; (8001e04 <MX_SPI3_Init+0xa4>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001da0:	4b18      	ldr	r3, [pc, #96]	; (8001e04 <MX_SPI3_Init+0xa4>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001da6:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <MX_SPI3_Init+0xa4>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001dac:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <MX_SPI3_Init+0xa4>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001db2:	4b14      	ldr	r3, [pc, #80]	; (8001e04 <MX_SPI3_Init+0xa4>)
 8001db4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001db8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001dba:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <MX_SPI3_Init+0xa4>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001dc0:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <MX_SPI3_Init+0xa4>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001dc6:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <MX_SPI3_Init+0xa4>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001dcc:	4b0d      	ldr	r3, [pc, #52]	; (8001e04 <MX_SPI3_Init+0xa4>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001dd2:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <MX_SPI3_Init+0xa4>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001dd8:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <MX_SPI3_Init+0xa4>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001dde:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <MX_SPI3_Init+0xa4>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001de4:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <MX_SPI3_Init+0xa4>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <MX_SPI3_Init+0xa4>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001df0:	4804      	ldr	r0, [pc, #16]	; (8001e04 <MX_SPI3_Init+0xa4>)
 8001df2:	f00c fc8b 	bl	800e70c <HAL_SPI_Init>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8001dfc:	f000 fc2c 	bl	8002658 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001e00:	bf00      	nop
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	2400105c 	.word	0x2400105c
 8001e08:	40003c00 	.word	0x40003c00

08001e0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08a      	sub	sp, #40	; 0x28
 8001e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e12:	f107 031c 	add.w	r3, r7, #28
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	605a      	str	r2, [r3, #4]
 8001e1c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e1e:	463b      	mov	r3, r7
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]
 8001e2c:	615a      	str	r2, [r3, #20]
 8001e2e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e30:	4b21      	ldr	r3, [pc, #132]	; (8001eb8 <MX_TIM2_Init+0xac>)
 8001e32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e38:	4b1f      	ldr	r3, [pc, #124]	; (8001eb8 <MX_TIM2_Init+0xac>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e3e:	4b1e      	ldr	r3, [pc, #120]	; (8001eb8 <MX_TIM2_Init+0xac>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 8001e44:	4b1c      	ldr	r3, [pc, #112]	; (8001eb8 <MX_TIM2_Init+0xac>)
 8001e46:	225a      	movs	r2, #90	; 0x5a
 8001e48:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e4a:	4b1b      	ldr	r3, [pc, #108]	; (8001eb8 <MX_TIM2_Init+0xac>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e50:	4b19      	ldr	r3, [pc, #100]	; (8001eb8 <MX_TIM2_Init+0xac>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e56:	4818      	ldr	r0, [pc, #96]	; (8001eb8 <MX_TIM2_Init+0xac>)
 8001e58:	f00d fa48 	bl	800f2ec <HAL_TIM_PWM_Init>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001e62:	f000 fbf9 	bl	8002658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e6e:	f107 031c 	add.w	r3, r7, #28
 8001e72:	4619      	mov	r1, r3
 8001e74:	4810      	ldr	r0, [pc, #64]	; (8001eb8 <MX_TIM2_Init+0xac>)
 8001e76:	f00e fbb3 	bl	80105e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001e80:	f000 fbea 	bl	8002658 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e84:	2360      	movs	r3, #96	; 0x60
 8001e86:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e90:	2300      	movs	r3, #0
 8001e92:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e94:	463b      	mov	r3, r7
 8001e96:	2208      	movs	r2, #8
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4807      	ldr	r0, [pc, #28]	; (8001eb8 <MX_TIM2_Init+0xac>)
 8001e9c:	f00d fdd2 	bl	800fa44 <HAL_TIM_PWM_ConfigChannel>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001ea6:	f000 fbd7 	bl	8002658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001eaa:	4803      	ldr	r0, [pc, #12]	; (8001eb8 <MX_TIM2_Init+0xac>)
 8001eac:	f001 f8f2 	bl	8003094 <HAL_TIM_MspPostInit>

}
 8001eb0:	bf00      	nop
 8001eb2:	3728      	adds	r7, #40	; 0x28
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	240010e4 	.word	0x240010e4

08001ebc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08a      	sub	sp, #40	; 0x28
 8001ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ec2:	f107 031c 	add.w	r3, r7, #28
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	605a      	str	r2, [r3, #4]
 8001ecc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ece:	463b      	mov	r3, r7
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	611a      	str	r2, [r3, #16]
 8001edc:	615a      	str	r2, [r3, #20]
 8001ede:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ee0:	4b26      	ldr	r3, [pc, #152]	; (8001f7c <MX_TIM3_Init+0xc0>)
 8001ee2:	4a27      	ldr	r2, [pc, #156]	; (8001f80 <MX_TIM3_Init+0xc4>)
 8001ee4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ee6:	4b25      	ldr	r3, [pc, #148]	; (8001f7c <MX_TIM3_Init+0xc0>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eec:	4b23      	ldr	r3, [pc, #140]	; (8001f7c <MX_TIM3_Init+0xc0>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 8001ef2:	4b22      	ldr	r3, [pc, #136]	; (8001f7c <MX_TIM3_Init+0xc0>)
 8001ef4:	225a      	movs	r2, #90	; 0x5a
 8001ef6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ef8:	4b20      	ldr	r3, [pc, #128]	; (8001f7c <MX_TIM3_Init+0xc0>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001efe:	4b1f      	ldr	r3, [pc, #124]	; (8001f7c <MX_TIM3_Init+0xc0>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f04:	481d      	ldr	r0, [pc, #116]	; (8001f7c <MX_TIM3_Init+0xc0>)
 8001f06:	f00d f9f1 	bl	800f2ec <HAL_TIM_PWM_Init>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001f10:	f000 fba2 	bl	8002658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f14:	2300      	movs	r3, #0
 8001f16:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f1c:	f107 031c 	add.w	r3, r7, #28
 8001f20:	4619      	mov	r1, r3
 8001f22:	4816      	ldr	r0, [pc, #88]	; (8001f7c <MX_TIM3_Init+0xc0>)
 8001f24:	f00e fb5c 	bl	80105e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001f2e:	f000 fb93 	bl	8002658 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f32:	2360      	movs	r3, #96	; 0x60
 8001f34:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f42:	463b      	mov	r3, r7
 8001f44:	2200      	movs	r2, #0
 8001f46:	4619      	mov	r1, r3
 8001f48:	480c      	ldr	r0, [pc, #48]	; (8001f7c <MX_TIM3_Init+0xc0>)
 8001f4a:	f00d fd7b 	bl	800fa44 <HAL_TIM_PWM_ConfigChannel>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001f54:	f000 fb80 	bl	8002658 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f58:	463b      	mov	r3, r7
 8001f5a:	2204      	movs	r2, #4
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4807      	ldr	r0, [pc, #28]	; (8001f7c <MX_TIM3_Init+0xc0>)
 8001f60:	f00d fd70 	bl	800fa44 <HAL_TIM_PWM_ConfigChannel>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001f6a:	f000 fb75 	bl	8002658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f6e:	4803      	ldr	r0, [pc, #12]	; (8001f7c <MX_TIM3_Init+0xc0>)
 8001f70:	f001 f890 	bl	8003094 <HAL_TIM_MspPostInit>

}
 8001f74:	bf00      	nop
 8001f76:	3728      	adds	r7, #40	; 0x28
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	24001130 	.word	0x24001130
 8001f80:	40000400 	.word	0x40000400

08001f84 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08a      	sub	sp, #40	; 0x28
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f8a:	f107 031c 	add.w	r3, r7, #28
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	605a      	str	r2, [r3, #4]
 8001f94:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f96:	463b      	mov	r3, r7
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	611a      	str	r2, [r3, #16]
 8001fa4:	615a      	str	r2, [r3, #20]
 8001fa6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001fa8:	4b32      	ldr	r3, [pc, #200]	; (8002074 <MX_TIM4_Init+0xf0>)
 8001faa:	4a33      	ldr	r2, [pc, #204]	; (8002078 <MX_TIM4_Init+0xf4>)
 8001fac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 28;
 8001fae:	4b31      	ldr	r3, [pc, #196]	; (8002074 <MX_TIM4_Init+0xf0>)
 8001fb0:	221c      	movs	r2, #28
 8001fb2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb4:	4b2f      	ldr	r3, [pc, #188]	; (8002074 <MX_TIM4_Init+0xf0>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001fba:	4b2e      	ldr	r3, [pc, #184]	; (8002074 <MX_TIM4_Init+0xf0>)
 8001fbc:	f242 720f 	movw	r2, #9999	; 0x270f
 8001fc0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fc2:	4b2c      	ldr	r3, [pc, #176]	; (8002074 <MX_TIM4_Init+0xf0>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc8:	4b2a      	ldr	r3, [pc, #168]	; (8002074 <MX_TIM4_Init+0xf0>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001fce:	4829      	ldr	r0, [pc, #164]	; (8002074 <MX_TIM4_Init+0xf0>)
 8001fd0:	f00d f98c 	bl	800f2ec <HAL_TIM_PWM_Init>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001fda:	f000 fb3d 	bl	8002658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001fe6:	f107 031c 	add.w	r3, r7, #28
 8001fea:	4619      	mov	r1, r3
 8001fec:	4821      	ldr	r0, [pc, #132]	; (8002074 <MX_TIM4_Init+0xf0>)
 8001fee:	f00e faf7 	bl	80105e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001ff8:	f000 fb2e 	bl	8002658 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ffc:	2360      	movs	r3, #96	; 0x60
 8001ffe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002000:	2300      	movs	r3, #0
 8002002:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002004:	2300      	movs	r3, #0
 8002006:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002008:	2300      	movs	r3, #0
 800200a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800200c:	463b      	mov	r3, r7
 800200e:	2200      	movs	r2, #0
 8002010:	4619      	mov	r1, r3
 8002012:	4818      	ldr	r0, [pc, #96]	; (8002074 <MX_TIM4_Init+0xf0>)
 8002014:	f00d fd16 	bl	800fa44 <HAL_TIM_PWM_ConfigChannel>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800201e:	f000 fb1b 	bl	8002658 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002022:	463b      	mov	r3, r7
 8002024:	2204      	movs	r2, #4
 8002026:	4619      	mov	r1, r3
 8002028:	4812      	ldr	r0, [pc, #72]	; (8002074 <MX_TIM4_Init+0xf0>)
 800202a:	f00d fd0b 	bl	800fa44 <HAL_TIM_PWM_ConfigChannel>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002034:	f000 fb10 	bl	8002658 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002038:	463b      	mov	r3, r7
 800203a:	2208      	movs	r2, #8
 800203c:	4619      	mov	r1, r3
 800203e:	480d      	ldr	r0, [pc, #52]	; (8002074 <MX_TIM4_Init+0xf0>)
 8002040:	f00d fd00 	bl	800fa44 <HAL_TIM_PWM_ConfigChannel>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 800204a:	f000 fb05 	bl	8002658 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800204e:	463b      	mov	r3, r7
 8002050:	220c      	movs	r2, #12
 8002052:	4619      	mov	r1, r3
 8002054:	4807      	ldr	r0, [pc, #28]	; (8002074 <MX_TIM4_Init+0xf0>)
 8002056:	f00d fcf5 	bl	800fa44 <HAL_TIM_PWM_ConfigChannel>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8002060:	f000 fafa 	bl	8002658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002064:	4803      	ldr	r0, [pc, #12]	; (8002074 <MX_TIM4_Init+0xf0>)
 8002066:	f001 f815 	bl	8003094 <HAL_TIM_MspPostInit>

}
 800206a:	bf00      	nop
 800206c:	3728      	adds	r7, #40	; 0x28
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	2400117c 	.word	0x2400117c
 8002078:	40000800 	.word	0x40000800

0800207c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08a      	sub	sp, #40	; 0x28
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002082:	f107 031c 	add.w	r3, r7, #28
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	605a      	str	r2, [r3, #4]
 800208c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800208e:	463b      	mov	r3, r7
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
 800209a:	611a      	str	r2, [r3, #16]
 800209c:	615a      	str	r2, [r3, #20]
 800209e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80020a0:	4b21      	ldr	r3, [pc, #132]	; (8002128 <MX_TIM5_Init+0xac>)
 80020a2:	4a22      	ldr	r2, [pc, #136]	; (800212c <MX_TIM5_Init+0xb0>)
 80020a4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80020a6:	4b20      	ldr	r3, [pc, #128]	; (8002128 <MX_TIM5_Init+0xac>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ac:	4b1e      	ldr	r3, [pc, #120]	; (8002128 <MX_TIM5_Init+0xac>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 80020b2:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <MX_TIM5_Init+0xac>)
 80020b4:	225a      	movs	r2, #90	; 0x5a
 80020b6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b8:	4b1b      	ldr	r3, [pc, #108]	; (8002128 <MX_TIM5_Init+0xac>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020be:	4b1a      	ldr	r3, [pc, #104]	; (8002128 <MX_TIM5_Init+0xac>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80020c4:	4818      	ldr	r0, [pc, #96]	; (8002128 <MX_TIM5_Init+0xac>)
 80020c6:	f00d f911 	bl	800f2ec <HAL_TIM_PWM_Init>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80020d0:	f000 fac2 	bl	8002658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d4:	2300      	movs	r3, #0
 80020d6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020d8:	2300      	movs	r3, #0
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80020dc:	f107 031c 	add.w	r3, r7, #28
 80020e0:	4619      	mov	r1, r3
 80020e2:	4811      	ldr	r0, [pc, #68]	; (8002128 <MX_TIM5_Init+0xac>)
 80020e4:	f00e fa7c 	bl	80105e0 <HAL_TIMEx_MasterConfigSynchronization>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80020ee:	f000 fab3 	bl	8002658 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020f2:	2360      	movs	r3, #96	; 0x60
 80020f4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020fa:	2300      	movs	r3, #0
 80020fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020fe:	2300      	movs	r3, #0
 8002100:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002102:	463b      	mov	r3, r7
 8002104:	220c      	movs	r2, #12
 8002106:	4619      	mov	r1, r3
 8002108:	4807      	ldr	r0, [pc, #28]	; (8002128 <MX_TIM5_Init+0xac>)
 800210a:	f00d fc9b 	bl	800fa44 <HAL_TIM_PWM_ConfigChannel>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002114:	f000 faa0 	bl	8002658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002118:	4803      	ldr	r0, [pc, #12]	; (8002128 <MX_TIM5_Init+0xac>)
 800211a:	f000 ffbb 	bl	8003094 <HAL_TIM_MspPostInit>

}
 800211e:	bf00      	nop
 8002120:	3728      	adds	r7, #40	; 0x28
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	240011c8 	.word	0x240011c8
 800212c:	40000c00 	.word	0x40000c00

08002130 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002134:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <MX_TIM13_Init+0x40>)
 8002136:	4a0f      	ldr	r2, [pc, #60]	; (8002174 <MX_TIM13_Init+0x44>)
 8002138:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 95;
 800213a:	4b0d      	ldr	r3, [pc, #52]	; (8002170 <MX_TIM13_Init+0x40>)
 800213c:	225f      	movs	r2, #95	; 0x5f
 800213e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002140:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <MX_TIM13_Init+0x40>)
 8002142:	2200      	movs	r2, #0
 8002144:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8002146:	4b0a      	ldr	r3, [pc, #40]	; (8002170 <MX_TIM13_Init+0x40>)
 8002148:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800214c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800214e:	4b08      	ldr	r3, [pc, #32]	; (8002170 <MX_TIM13_Init+0x40>)
 8002150:	2200      	movs	r2, #0
 8002152:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002154:	4b06      	ldr	r3, [pc, #24]	; (8002170 <MX_TIM13_Init+0x40>)
 8002156:	2200      	movs	r2, #0
 8002158:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800215a:	4805      	ldr	r0, [pc, #20]	; (8002170 <MX_TIM13_Init+0x40>)
 800215c:	f00d f86f 	bl	800f23e <HAL_TIM_Base_Init>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8002166:	f000 fa77 	bl	8002658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	24001214 	.word	0x24001214
 8002174:	40001c00 	.word	0x40001c00

08002178 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800217c:	4b22      	ldr	r3, [pc, #136]	; (8002208 <MX_UART4_Init+0x90>)
 800217e:	4a23      	ldr	r2, [pc, #140]	; (800220c <MX_UART4_Init+0x94>)
 8002180:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002182:	4b21      	ldr	r3, [pc, #132]	; (8002208 <MX_UART4_Init+0x90>)
 8002184:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002188:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800218a:	4b1f      	ldr	r3, [pc, #124]	; (8002208 <MX_UART4_Init+0x90>)
 800218c:	2200      	movs	r2, #0
 800218e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002190:	4b1d      	ldr	r3, [pc, #116]	; (8002208 <MX_UART4_Init+0x90>)
 8002192:	2200      	movs	r2, #0
 8002194:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002196:	4b1c      	ldr	r3, [pc, #112]	; (8002208 <MX_UART4_Init+0x90>)
 8002198:	2200      	movs	r2, #0
 800219a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800219c:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <MX_UART4_Init+0x90>)
 800219e:	220c      	movs	r2, #12
 80021a0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021a2:	4b19      	ldr	r3, [pc, #100]	; (8002208 <MX_UART4_Init+0x90>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80021a8:	4b17      	ldr	r3, [pc, #92]	; (8002208 <MX_UART4_Init+0x90>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021ae:	4b16      	ldr	r3, [pc, #88]	; (8002208 <MX_UART4_Init+0x90>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021b4:	4b14      	ldr	r3, [pc, #80]	; (8002208 <MX_UART4_Init+0x90>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021ba:	4b13      	ldr	r3, [pc, #76]	; (8002208 <MX_UART4_Init+0x90>)
 80021bc:	2200      	movs	r2, #0
 80021be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80021c0:	4811      	ldr	r0, [pc, #68]	; (8002208 <MX_UART4_Init+0x90>)
 80021c2:	f00e fac7 	bl	8010754 <HAL_UART_Init>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80021cc:	f000 fa44 	bl	8002658 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021d0:	2100      	movs	r1, #0
 80021d2:	480d      	ldr	r0, [pc, #52]	; (8002208 <MX_UART4_Init+0x90>)
 80021d4:	f00f fbcd 	bl	8011972 <HAL_UARTEx_SetTxFifoThreshold>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80021de:	f000 fa3b 	bl	8002658 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021e2:	2100      	movs	r1, #0
 80021e4:	4808      	ldr	r0, [pc, #32]	; (8002208 <MX_UART4_Init+0x90>)
 80021e6:	f00f fc02 	bl	80119ee <HAL_UARTEx_SetRxFifoThreshold>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80021f0:	f000 fa32 	bl	8002658 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80021f4:	4804      	ldr	r0, [pc, #16]	; (8002208 <MX_UART4_Init+0x90>)
 80021f6:	f00f fb83 	bl	8011900 <HAL_UARTEx_DisableFifoMode>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002200:	f000 fa2a 	bl	8002658 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002204:	bf00      	nop
 8002206:	bd80      	pop	{r7, pc}
 8002208:	240014b8 	.word	0x240014b8
 800220c:	40004c00 	.word	0x40004c00

08002210 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002214:	4b22      	ldr	r3, [pc, #136]	; (80022a0 <MX_USART6_UART_Init+0x90>)
 8002216:	4a23      	ldr	r2, [pc, #140]	; (80022a4 <MX_USART6_UART_Init+0x94>)
 8002218:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800221a:	4b21      	ldr	r3, [pc, #132]	; (80022a0 <MX_USART6_UART_Init+0x90>)
 800221c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002220:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002222:	4b1f      	ldr	r3, [pc, #124]	; (80022a0 <MX_USART6_UART_Init+0x90>)
 8002224:	2200      	movs	r2, #0
 8002226:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002228:	4b1d      	ldr	r3, [pc, #116]	; (80022a0 <MX_USART6_UART_Init+0x90>)
 800222a:	2200      	movs	r2, #0
 800222c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800222e:	4b1c      	ldr	r3, [pc, #112]	; (80022a0 <MX_USART6_UART_Init+0x90>)
 8002230:	2200      	movs	r2, #0
 8002232:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002234:	4b1a      	ldr	r3, [pc, #104]	; (80022a0 <MX_USART6_UART_Init+0x90>)
 8002236:	220c      	movs	r2, #12
 8002238:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800223a:	4b19      	ldr	r3, [pc, #100]	; (80022a0 <MX_USART6_UART_Init+0x90>)
 800223c:	2200      	movs	r2, #0
 800223e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002240:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <MX_USART6_UART_Init+0x90>)
 8002242:	2200      	movs	r2, #0
 8002244:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002246:	4b16      	ldr	r3, [pc, #88]	; (80022a0 <MX_USART6_UART_Init+0x90>)
 8002248:	2200      	movs	r2, #0
 800224a:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800224c:	4b14      	ldr	r3, [pc, #80]	; (80022a0 <MX_USART6_UART_Init+0x90>)
 800224e:	2200      	movs	r2, #0
 8002250:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002252:	4b13      	ldr	r3, [pc, #76]	; (80022a0 <MX_USART6_UART_Init+0x90>)
 8002254:	2200      	movs	r2, #0
 8002256:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002258:	4811      	ldr	r0, [pc, #68]	; (80022a0 <MX_USART6_UART_Init+0x90>)
 800225a:	f00e fa7b 	bl	8010754 <HAL_UART_Init>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002264:	f000 f9f8 	bl	8002658 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002268:	2100      	movs	r1, #0
 800226a:	480d      	ldr	r0, [pc, #52]	; (80022a0 <MX_USART6_UART_Init+0x90>)
 800226c:	f00f fb81 	bl	8011972 <HAL_UARTEx_SetTxFifoThreshold>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8002276:	f000 f9ef 	bl	8002658 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800227a:	2100      	movs	r1, #0
 800227c:	4808      	ldr	r0, [pc, #32]	; (80022a0 <MX_USART6_UART_Init+0x90>)
 800227e:	f00f fbb6 	bl	80119ee <HAL_UARTEx_SetRxFifoThreshold>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8002288:	f000 f9e6 	bl	8002658 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 800228c:	4804      	ldr	r0, [pc, #16]	; (80022a0 <MX_USART6_UART_Init+0x90>)
 800228e:	f00f fb37 	bl	8011900 <HAL_UARTEx_DisableFifoMode>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002298:	f000 f9de 	bl	8002658 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800229c:	bf00      	nop
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	2400154c 	.word	0x2400154c
 80022a4:	40011400 	.word	0x40011400

080022a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022ae:	4b2d      	ldr	r3, [pc, #180]	; (8002364 <MX_DMA_Init+0xbc>)
 80022b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022b4:	4a2b      	ldr	r2, [pc, #172]	; (8002364 <MX_DMA_Init+0xbc>)
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80022be:	4b29      	ldr	r3, [pc, #164]	; (8002364 <MX_DMA_Init+0xbc>)
 80022c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	607b      	str	r3, [r7, #4]
 80022ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80022cc:	4b25      	ldr	r3, [pc, #148]	; (8002364 <MX_DMA_Init+0xbc>)
 80022ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022d2:	4a24      	ldr	r2, [pc, #144]	; (8002364 <MX_DMA_Init+0xbc>)
 80022d4:	f043 0302 	orr.w	r3, r3, #2
 80022d8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80022dc:	4b21      	ldr	r3, [pc, #132]	; (8002364 <MX_DMA_Init+0xbc>)
 80022de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	603b      	str	r3, [r7, #0]
 80022e8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80022ea:	2200      	movs	r2, #0
 80022ec:	2100      	movs	r1, #0
 80022ee:	200b      	movs	r0, #11
 80022f0:	f002 ff65 	bl	80051be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80022f4:	200b      	movs	r0, #11
 80022f6:	f002 ff7c 	bl	80051f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80022fa:	2200      	movs	r2, #0
 80022fc:	2100      	movs	r1, #0
 80022fe:	200c      	movs	r0, #12
 8002300:	f002 ff5d 	bl	80051be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002304:	200c      	movs	r0, #12
 8002306:	f002 ff74 	bl	80051f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800230a:	2200      	movs	r2, #0
 800230c:	2100      	movs	r1, #0
 800230e:	200d      	movs	r0, #13
 8002310:	f002 ff55 	bl	80051be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002314:	200d      	movs	r0, #13
 8002316:	f002 ff6c 	bl	80051f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800231a:	2200      	movs	r2, #0
 800231c:	2100      	movs	r1, #0
 800231e:	200e      	movs	r0, #14
 8002320:	f002 ff4d 	bl	80051be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002324:	200e      	movs	r0, #14
 8002326:	f002 ff64 	bl	80051f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800232a:	2200      	movs	r2, #0
 800232c:	2100      	movs	r1, #0
 800232e:	200f      	movs	r0, #15
 8002330:	f002 ff45 	bl	80051be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002334:	200f      	movs	r0, #15
 8002336:	f002 ff5c 	bl	80051f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800233a:	2200      	movs	r2, #0
 800233c:	2100      	movs	r1, #0
 800233e:	2010      	movs	r0, #16
 8002340:	f002 ff3d 	bl	80051be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002344:	2010      	movs	r0, #16
 8002346:	f002 ff54 	bl	80051f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800234a:	2200      	movs	r2, #0
 800234c:	2100      	movs	r1, #0
 800234e:	2046      	movs	r0, #70	; 0x46
 8002350:	f002 ff35 	bl	80051be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002354:	2046      	movs	r0, #70	; 0x46
 8002356:	f002 ff4c 	bl	80051f2 <HAL_NVIC_EnableIRQ>

}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	58024400 	.word	0x58024400

08002368 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b08e      	sub	sp, #56	; 0x38
 800236c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	605a      	str	r2, [r3, #4]
 8002378:	609a      	str	r2, [r3, #8]
 800237a:	60da      	str	r2, [r3, #12]
 800237c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800237e:	4bae      	ldr	r3, [pc, #696]	; (8002638 <MX_GPIO_Init+0x2d0>)
 8002380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002384:	4aac      	ldr	r2, [pc, #688]	; (8002638 <MX_GPIO_Init+0x2d0>)
 8002386:	f043 0310 	orr.w	r3, r3, #16
 800238a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800238e:	4baa      	ldr	r3, [pc, #680]	; (8002638 <MX_GPIO_Init+0x2d0>)
 8002390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002394:	f003 0310 	and.w	r3, r3, #16
 8002398:	623b      	str	r3, [r7, #32]
 800239a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800239c:	4ba6      	ldr	r3, [pc, #664]	; (8002638 <MX_GPIO_Init+0x2d0>)
 800239e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023a2:	4aa5      	ldr	r2, [pc, #660]	; (8002638 <MX_GPIO_Init+0x2d0>)
 80023a4:	f043 0320 	orr.w	r3, r3, #32
 80023a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023ac:	4ba2      	ldr	r3, [pc, #648]	; (8002638 <MX_GPIO_Init+0x2d0>)
 80023ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023b2:	f003 0320 	and.w	r3, r3, #32
 80023b6:	61fb      	str	r3, [r7, #28]
 80023b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023ba:	4b9f      	ldr	r3, [pc, #636]	; (8002638 <MX_GPIO_Init+0x2d0>)
 80023bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023c0:	4a9d      	ldr	r2, [pc, #628]	; (8002638 <MX_GPIO_Init+0x2d0>)
 80023c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023ca:	4b9b      	ldr	r3, [pc, #620]	; (8002638 <MX_GPIO_Init+0x2d0>)
 80023cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d4:	61bb      	str	r3, [r7, #24]
 80023d6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023d8:	4b97      	ldr	r3, [pc, #604]	; (8002638 <MX_GPIO_Init+0x2d0>)
 80023da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023de:	4a96      	ldr	r2, [pc, #600]	; (8002638 <MX_GPIO_Init+0x2d0>)
 80023e0:	f043 0304 	orr.w	r3, r3, #4
 80023e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023e8:	4b93      	ldr	r3, [pc, #588]	; (8002638 <MX_GPIO_Init+0x2d0>)
 80023ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ee:	f003 0304 	and.w	r3, r3, #4
 80023f2:	617b      	str	r3, [r7, #20]
 80023f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f6:	4b90      	ldr	r3, [pc, #576]	; (8002638 <MX_GPIO_Init+0x2d0>)
 80023f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023fc:	4a8e      	ldr	r2, [pc, #568]	; (8002638 <MX_GPIO_Init+0x2d0>)
 80023fe:	f043 0301 	orr.w	r3, r3, #1
 8002402:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002406:	4b8c      	ldr	r3, [pc, #560]	; (8002638 <MX_GPIO_Init+0x2d0>)
 8002408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	613b      	str	r3, [r7, #16]
 8002412:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002414:	4b88      	ldr	r3, [pc, #544]	; (8002638 <MX_GPIO_Init+0x2d0>)
 8002416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800241a:	4a87      	ldr	r2, [pc, #540]	; (8002638 <MX_GPIO_Init+0x2d0>)
 800241c:	f043 0302 	orr.w	r3, r3, #2
 8002420:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002424:	4b84      	ldr	r3, [pc, #528]	; (8002638 <MX_GPIO_Init+0x2d0>)
 8002426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002432:	4b81      	ldr	r3, [pc, #516]	; (8002638 <MX_GPIO_Init+0x2d0>)
 8002434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002438:	4a7f      	ldr	r2, [pc, #508]	; (8002638 <MX_GPIO_Init+0x2d0>)
 800243a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800243e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002442:	4b7d      	ldr	r3, [pc, #500]	; (8002638 <MX_GPIO_Init+0x2d0>)
 8002444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800244c:	60bb      	str	r3, [r7, #8]
 800244e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002450:	4b79      	ldr	r3, [pc, #484]	; (8002638 <MX_GPIO_Init+0x2d0>)
 8002452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002456:	4a78      	ldr	r2, [pc, #480]	; (8002638 <MX_GPIO_Init+0x2d0>)
 8002458:	f043 0308 	orr.w	r3, r3, #8
 800245c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002460:	4b75      	ldr	r3, [pc, #468]	; (8002638 <MX_GPIO_Init+0x2d0>)
 8002462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	607b      	str	r3, [r7, #4]
 800246c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 800246e:	2200      	movs	r2, #0
 8002470:	f241 5104 	movw	r1, #5380	; 0x1504
 8002474:	4871      	ldr	r0, [pc, #452]	; (800263c <MX_GPIO_Init+0x2d4>)
 8002476:	f005 fcd1 	bl	8007e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|ARM2_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 800247a:	2200      	movs	r2, #0
 800247c:	f248 0106 	movw	r1, #32774	; 0x8006
 8002480:	486f      	ldr	r0, [pc, #444]	; (8002640 <MX_GPIO_Init+0x2d8>)
 8002482:	f005 fccb 	bl	8007e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002486:	2200      	movs	r2, #0
 8002488:	2130      	movs	r1, #48	; 0x30
 800248a:	486e      	ldr	r0, [pc, #440]	; (8002644 <MX_GPIO_Init+0x2dc>)
 800248c:	f005 fcc6 	bl	8007e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, GPIO_PIN_RESET);
 8002490:	2200      	movs	r2, #0
 8002492:	2102      	movs	r1, #2
 8002494:	486c      	ldr	r0, [pc, #432]	; (8002648 <MX_GPIO_Init+0x2e0>)
 8002496:	f005 fcc1 	bl	8007e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 800249a:	2200      	movs	r2, #0
 800249c:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 80024a0:	486a      	ldr	r0, [pc, #424]	; (800264c <MX_GPIO_Init+0x2e4>)
 80024a2:	f005 fcbb 	bl	8007e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80024a6:	2200      	movs	r2, #0
 80024a8:	210e      	movs	r1, #14
 80024aa:	4869      	ldr	r0, [pc, #420]	; (8002650 <MX_GPIO_Init+0x2e8>)
 80024ac:	f005 fcb6 	bl	8007e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_SET);
 80024b0:	2201      	movs	r2, #1
 80024b2:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80024b6:	4867      	ldr	r0, [pc, #412]	; (8002654 <MX_GPIO_Init+0x2ec>)
 80024b8:	f005 fcb0 	bl	8007e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 80024bc:	2200      	movs	r2, #0
 80024be:	2101      	movs	r1, #1
 80024c0:	4864      	ldr	r0, [pc, #400]	; (8002654 <MX_GPIO_Init+0x2ec>)
 80024c2:	f005 fcab 	bl	8007e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 80024c6:	f241 5304 	movw	r3, #5380	; 0x1504
 80024ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024cc:	2301      	movs	r3, #1
 80024ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d4:	2300      	movs	r3, #0
 80024d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024dc:	4619      	mov	r1, r3
 80024de:	4857      	ldr	r0, [pc, #348]	; (800263c <MX_GPIO_Init+0x2d4>)
 80024e0:	f005 fadc 	bl	8007a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin ARM2_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|ARM2_Pin|GPIO_PIN_15;
 80024e4:	f248 0306 	movw	r3, #32774	; 0x8006
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ea:	2301      	movs	r3, #1
 80024ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f2:	2300      	movs	r3, #0
 80024f4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024fa:	4619      	mov	r1, r3
 80024fc:	4850      	ldr	r0, [pc, #320]	; (8002640 <MX_GPIO_Init+0x2d8>)
 80024fe:	f005 facd 	bl	8007a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002502:	2330      	movs	r3, #48	; 0x30
 8002504:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002506:	2301      	movs	r3, #1
 8002508:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250a:	2300      	movs	r3, #0
 800250c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250e:	2300      	movs	r3, #0
 8002510:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002512:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002516:	4619      	mov	r1, r3
 8002518:	484a      	ldr	r0, [pc, #296]	; (8002644 <MX_GPIO_Init+0x2dc>)
 800251a:	f005 fabf 	bl	8007a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PYRO1_Pin */
  GPIO_InitStruct.Pin = PYRO1_Pin;
 800251e:	2302      	movs	r3, #2
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002522:	2301      	movs	r3, #1
 8002524:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002526:	2300      	movs	r3, #0
 8002528:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252a:	2300      	movs	r3, #0
 800252c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PYRO1_GPIO_Port, &GPIO_InitStruct);
 800252e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002532:	4619      	mov	r1, r3
 8002534:	4844      	ldr	r0, [pc, #272]	; (8002648 <MX_GPIO_Init+0x2e0>)
 8002536:	f005 fab1 	bl	8007a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 800253a:	2304      	movs	r3, #4
 800253c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800253e:	2300      	movs	r3, #0
 8002540:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002542:	2301      	movs	r3, #1
 8002544:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 8002546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800254a:	4619      	mov	r1, r3
 800254c:	483e      	ldr	r0, [pc, #248]	; (8002648 <MX_GPIO_Init+0x2e0>)
 800254e:	f005 faa5 	bl	8007a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 8002552:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8002556:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002558:	2301      	movs	r3, #1
 800255a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255c:	2300      	movs	r3, #0
 800255e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002560:	2300      	movs	r3, #0
 8002562:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002564:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002568:	4619      	mov	r1, r3
 800256a:	4838      	ldr	r0, [pc, #224]	; (800264c <MX_GPIO_Init+0x2e4>)
 800256c:	f005 fa96 	bl	8007a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 8002570:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002574:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002576:	2300      	movs	r3, #0
 8002578:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800257a:	2301      	movs	r3, #1
 800257c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800257e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002582:	4619      	mov	r1, r3
 8002584:	4831      	ldr	r0, [pc, #196]	; (800264c <MX_GPIO_Init+0x2e4>)
 8002586:	f005 fa89 	bl	8007a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 800258a:	2301      	movs	r3, #1
 800258c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800258e:	2300      	movs	r3, #0
 8002590:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002592:	2301      	movs	r3, #1
 8002594:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 8002596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800259a:	4619      	mov	r1, r3
 800259c:	482c      	ldr	r0, [pc, #176]	; (8002650 <MX_GPIO_Init+0x2e8>)
 800259e:	f005 fa7d 	bl	8007a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 80025a2:	230e      	movs	r3, #14
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025a6:	2301      	movs	r3, #1
 80025a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ae:	2300      	movs	r3, #0
 80025b0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025b6:	4619      	mov	r1, r3
 80025b8:	4825      	ldr	r0, [pc, #148]	; (8002650 <MX_GPIO_Init+0x2e8>)
 80025ba:	f005 fa6f 	bl	8007a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 80025be:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 80025c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025c4:	2300      	movs	r3, #0
 80025c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025c8:	2301      	movs	r3, #1
 80025ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025d0:	4619      	mov	r1, r3
 80025d2:	481a      	ldr	r0, [pc, #104]	; (800263c <MX_GPIO_Init+0x2d4>)
 80025d4:	f005 fa62 	bl	8007a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0;
 80025d8:	f240 7301 	movw	r3, #1793	; 0x701
 80025dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025de:	2301      	movs	r3, #1
 80025e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e6:	2300      	movs	r3, #0
 80025e8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025ee:	4619      	mov	r1, r3
 80025f0:	4818      	ldr	r0, [pc, #96]	; (8002654 <MX_GPIO_Init+0x2ec>)
 80025f2:	f005 fa53 	bl	8007a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 80025f6:	2310      	movs	r3, #16
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025fa:	2300      	movs	r3, #0
 80025fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002606:	4619      	mov	r1, r3
 8002608:	4811      	ldr	r0, [pc, #68]	; (8002650 <MX_GPIO_Init+0x2e8>)
 800260a:	f005 fa47 	bl	8007a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800260e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002612:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002614:	2302      	movs	r3, #2
 8002616:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002618:	2300      	movs	r3, #0
 800261a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261c:	2300      	movs	r3, #0
 800261e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002620:	2300      	movs	r3, #0
 8002622:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002628:	4619      	mov	r1, r3
 800262a:	4805      	ldr	r0, [pc, #20]	; (8002640 <MX_GPIO_Init+0x2d8>)
 800262c:	f005 fa36 	bl	8007a9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002630:	bf00      	nop
 8002632:	3738      	adds	r7, #56	; 0x38
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	58024400 	.word	0x58024400
 800263c:	58021000 	.word	0x58021000
 8002640:	58020000 	.word	0x58020000
 8002644:	58020800 	.word	0x58020800
 8002648:	58020400 	.word	0x58020400
 800264c:	58021400 	.word	0x58021400
 8002650:	58021800 	.word	0x58021800
 8002654:	58020c00 	.word	0x58020c00

08002658 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800265c:	b672      	cpsid	i
}
 800265e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 8002660:	e7fe      	b.n	8002660 <Error_Handler+0x8>
	...

08002664 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800266a:	4b0a      	ldr	r3, [pc, #40]	; (8002694 <HAL_MspInit+0x30>)
 800266c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002670:	4a08      	ldr	r2, [pc, #32]	; (8002694 <HAL_MspInit+0x30>)
 8002672:	f043 0302 	orr.w	r3, r3, #2
 8002676:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800267a:	4b06      	ldr	r3, [pc, #24]	; (8002694 <HAL_MspInit+0x30>)
 800267c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	607b      	str	r3, [r7, #4]
 8002686:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	58024400 	.word	0x58024400

08002698 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08c      	sub	sp, #48	; 0x30
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a0:	f107 031c 	add.w	r3, r7, #28
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	605a      	str	r2, [r3, #4]
 80026aa:	609a      	str	r2, [r3, #8]
 80026ac:	60da      	str	r2, [r3, #12]
 80026ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a5d      	ldr	r2, [pc, #372]	; (800282c <HAL_ADC_MspInit+0x194>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d159      	bne.n	800276e <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80026ba:	4b5d      	ldr	r3, [pc, #372]	; (8002830 <HAL_ADC_MspInit+0x198>)
 80026bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80026c0:	4a5b      	ldr	r2, [pc, #364]	; (8002830 <HAL_ADC_MspInit+0x198>)
 80026c2:	f043 0320 	orr.w	r3, r3, #32
 80026c6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80026ca:	4b59      	ldr	r3, [pc, #356]	; (8002830 <HAL_ADC_MspInit+0x198>)
 80026cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80026d0:	f003 0320 	and.w	r3, r3, #32
 80026d4:	61bb      	str	r3, [r7, #24]
 80026d6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026d8:	4b55      	ldr	r3, [pc, #340]	; (8002830 <HAL_ADC_MspInit+0x198>)
 80026da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026de:	4a54      	ldr	r2, [pc, #336]	; (8002830 <HAL_ADC_MspInit+0x198>)
 80026e0:	f043 0304 	orr.w	r3, r3, #4
 80026e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026e8:	4b51      	ldr	r3, [pc, #324]	; (8002830 <HAL_ADC_MspInit+0x198>)
 80026ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ee:	f003 0304 	and.w	r3, r3, #4
 80026f2:	617b      	str	r3, [r7, #20]
 80026f4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = ARM_CHECK_Pin;
 80026f6:	2301      	movs	r3, #1
 80026f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026fa:	2303      	movs	r3, #3
 80026fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fe:	2300      	movs	r3, #0
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002702:	f107 031c 	add.w	r3, r7, #28
 8002706:	4619      	mov	r1, r3
 8002708:	484a      	ldr	r0, [pc, #296]	; (8002834 <HAL_ADC_MspInit+0x19c>)
 800270a:	f005 f9c7 	bl	8007a9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 800270e:	4b4a      	ldr	r3, [pc, #296]	; (8002838 <HAL_ADC_MspInit+0x1a0>)
 8002710:	4a4a      	ldr	r2, [pc, #296]	; (800283c <HAL_ADC_MspInit+0x1a4>)
 8002712:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002714:	4b48      	ldr	r3, [pc, #288]	; (8002838 <HAL_ADC_MspInit+0x1a0>)
 8002716:	2209      	movs	r2, #9
 8002718:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800271a:	4b47      	ldr	r3, [pc, #284]	; (8002838 <HAL_ADC_MspInit+0x1a0>)
 800271c:	2200      	movs	r2, #0
 800271e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002720:	4b45      	ldr	r3, [pc, #276]	; (8002838 <HAL_ADC_MspInit+0x1a0>)
 8002722:	2200      	movs	r2, #0
 8002724:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002726:	4b44      	ldr	r3, [pc, #272]	; (8002838 <HAL_ADC_MspInit+0x1a0>)
 8002728:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800272c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800272e:	4b42      	ldr	r3, [pc, #264]	; (8002838 <HAL_ADC_MspInit+0x1a0>)
 8002730:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002734:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002736:	4b40      	ldr	r3, [pc, #256]	; (8002838 <HAL_ADC_MspInit+0x1a0>)
 8002738:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800273c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800273e:	4b3e      	ldr	r3, [pc, #248]	; (8002838 <HAL_ADC_MspInit+0x1a0>)
 8002740:	2200      	movs	r2, #0
 8002742:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002744:	4b3c      	ldr	r3, [pc, #240]	; (8002838 <HAL_ADC_MspInit+0x1a0>)
 8002746:	2200      	movs	r2, #0
 8002748:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800274a:	4b3b      	ldr	r3, [pc, #236]	; (8002838 <HAL_ADC_MspInit+0x1a0>)
 800274c:	2200      	movs	r2, #0
 800274e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002750:	4839      	ldr	r0, [pc, #228]	; (8002838 <HAL_ADC_MspInit+0x1a0>)
 8002752:	f002 fd69 	bl	8005228 <HAL_DMA_Init>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 800275c:	f7ff ff7c 	bl	8002658 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a35      	ldr	r2, [pc, #212]	; (8002838 <HAL_ADC_MspInit+0x1a0>)
 8002764:	659a      	str	r2, [r3, #88]	; 0x58
 8002766:	4a34      	ldr	r2, [pc, #208]	; (8002838 <HAL_ADC_MspInit+0x1a0>)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800276c:	e059      	b.n	8002822 <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a33      	ldr	r2, [pc, #204]	; (8002840 <HAL_ADC_MspInit+0x1a8>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d154      	bne.n	8002822 <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002778:	4b2d      	ldr	r3, [pc, #180]	; (8002830 <HAL_ADC_MspInit+0x198>)
 800277a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800277e:	4a2c      	ldr	r2, [pc, #176]	; (8002830 <HAL_ADC_MspInit+0x198>)
 8002780:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002784:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002788:	4b29      	ldr	r3, [pc, #164]	; (8002830 <HAL_ADC_MspInit+0x198>)
 800278a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800278e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002792:	613b      	str	r3, [r7, #16]
 8002794:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002796:	4b26      	ldr	r3, [pc, #152]	; (8002830 <HAL_ADC_MspInit+0x198>)
 8002798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800279c:	4a24      	ldr	r2, [pc, #144]	; (8002830 <HAL_ADC_MspInit+0x198>)
 800279e:	f043 0304 	orr.w	r3, r3, #4
 80027a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027a6:	4b22      	ldr	r3, [pc, #136]	; (8002830 <HAL_ADC_MspInit+0x198>)
 80027a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ac:	f003 0304 	and.w	r3, r3, #4
 80027b0:	60fb      	str	r3, [r7, #12]
 80027b2:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80027b4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80027b8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80027bc:	f001 f89e 	bl	80038fc <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 80027c0:	4b20      	ldr	r3, [pc, #128]	; (8002844 <HAL_ADC_MspInit+0x1ac>)
 80027c2:	4a21      	ldr	r2, [pc, #132]	; (8002848 <HAL_ADC_MspInit+0x1b0>)
 80027c4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80027c6:	4b1f      	ldr	r3, [pc, #124]	; (8002844 <HAL_ADC_MspInit+0x1ac>)
 80027c8:	2273      	movs	r2, #115	; 0x73
 80027ca:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027cc:	4b1d      	ldr	r3, [pc, #116]	; (8002844 <HAL_ADC_MspInit+0x1ac>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80027d2:	4b1c      	ldr	r3, [pc, #112]	; (8002844 <HAL_ADC_MspInit+0x1ac>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80027d8:	4b1a      	ldr	r3, [pc, #104]	; (8002844 <HAL_ADC_MspInit+0x1ac>)
 80027da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027de:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027e0:	4b18      	ldr	r3, [pc, #96]	; (8002844 <HAL_ADC_MspInit+0x1ac>)
 80027e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027e6:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027e8:	4b16      	ldr	r3, [pc, #88]	; (8002844 <HAL_ADC_MspInit+0x1ac>)
 80027ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027ee:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80027f0:	4b14      	ldr	r3, [pc, #80]	; (8002844 <HAL_ADC_MspInit+0x1ac>)
 80027f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027f6:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 80027f8:	4b12      	ldr	r3, [pc, #72]	; (8002844 <HAL_ADC_MspInit+0x1ac>)
 80027fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80027fe:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002800:	4b10      	ldr	r3, [pc, #64]	; (8002844 <HAL_ADC_MspInit+0x1ac>)
 8002802:	2200      	movs	r2, #0
 8002804:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002806:	480f      	ldr	r0, [pc, #60]	; (8002844 <HAL_ADC_MspInit+0x1ac>)
 8002808:	f002 fd0e 	bl	8005228 <HAL_DMA_Init>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 8002812:	f7ff ff21 	bl	8002658 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a0a      	ldr	r2, [pc, #40]	; (8002844 <HAL_ADC_MspInit+0x1ac>)
 800281a:	659a      	str	r2, [r3, #88]	; 0x58
 800281c:	4a09      	ldr	r2, [pc, #36]	; (8002844 <HAL_ADC_MspInit+0x1ac>)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002822:	bf00      	nop
 8002824:	3730      	adds	r7, #48	; 0x30
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40022000 	.word	0x40022000
 8002830:	58024400 	.word	0x58024400
 8002834:	58020800 	.word	0x58020800
 8002838:	24000cec 	.word	0x24000cec
 800283c:	40020088 	.word	0x40020088
 8002840:	58026000 	.word	0x58026000
 8002844:	24000d64 	.word	0x24000d64
 8002848:	400204b8 	.word	0x400204b8

0800284c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b0b8      	sub	sp, #224	; 0xe0
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002854:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	60da      	str	r2, [r3, #12]
 8002862:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002864:	f107 0310 	add.w	r3, r7, #16
 8002868:	22b8      	movs	r2, #184	; 0xb8
 800286a:	2100      	movs	r1, #0
 800286c:	4618      	mov	r0, r3
 800286e:	f014 fa23 	bl	8016cb8 <memset>
  if(hfdcan->Instance==FDCAN3)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a26      	ldr	r2, [pc, #152]	; (8002910 <HAL_FDCAN_MspInit+0xc4>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d144      	bne.n	8002906 <HAL_FDCAN_MspInit+0xba>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800287c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002880:	f04f 0300 	mov.w	r3, #0
 8002884:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002888:	2300      	movs	r3, #0
 800288a:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800288c:	f107 0310 	add.w	r3, r7, #16
 8002890:	4618      	mov	r0, r3
 8002892:	f007 fef1 	bl	800a678 <HAL_RCCEx_PeriphCLKConfig>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <HAL_FDCAN_MspInit+0x54>
    {
      Error_Handler();
 800289c:	f7ff fedc 	bl	8002658 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80028a0:	4b1c      	ldr	r3, [pc, #112]	; (8002914 <HAL_FDCAN_MspInit+0xc8>)
 80028a2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80028a6:	4a1b      	ldr	r2, [pc, #108]	; (8002914 <HAL_FDCAN_MspInit+0xc8>)
 80028a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ac:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80028b0:	4b18      	ldr	r3, [pc, #96]	; (8002914 <HAL_FDCAN_MspInit+0xc8>)
 80028b2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80028b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80028be:	4b15      	ldr	r3, [pc, #84]	; (8002914 <HAL_FDCAN_MspInit+0xc8>)
 80028c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028c4:	4a13      	ldr	r2, [pc, #76]	; (8002914 <HAL_FDCAN_MspInit+0xc8>)
 80028c6:	f043 0320 	orr.w	r3, r3, #32
 80028ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028ce:	4b11      	ldr	r3, [pc, #68]	; (8002914 <HAL_FDCAN_MspInit+0xc8>)
 80028d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028d4:	f003 0320 	and.w	r3, r3, #32
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028dc:	23c0      	movs	r3, #192	; 0xc0
 80028de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e2:	2302      	movs	r3, #2
 80028e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ee:	2300      	movs	r3, #0
 80028f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 80028f4:	2302      	movs	r3, #2
 80028f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028fa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80028fe:	4619      	mov	r1, r3
 8002900:	4805      	ldr	r0, [pc, #20]	; (8002918 <HAL_FDCAN_MspInit+0xcc>)
 8002902:	f005 f8cb 	bl	8007a9c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8002906:	bf00      	nop
 8002908:	37e0      	adds	r7, #224	; 0xe0
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	4000d400 	.word	0x4000d400
 8002914:	58024400 	.word	0x58024400
 8002918:	58021400 	.word	0x58021400

0800291c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b0b8      	sub	sp, #224	; 0xe0
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002924:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	60da      	str	r2, [r3, #12]
 8002932:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002934:	f107 0310 	add.w	r3, r7, #16
 8002938:	22b8      	movs	r2, #184	; 0xb8
 800293a:	2100      	movs	r1, #0
 800293c:	4618      	mov	r0, r3
 800293e:	f014 f9bb 	bl	8016cb8 <memset>
  if(hi2c->Instance==I2C2)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a2a      	ldr	r2, [pc, #168]	; (80029f0 <HAL_I2C_MspInit+0xd4>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d14d      	bne.n	80029e8 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800294c:	f04f 0208 	mov.w	r2, #8
 8002950:	f04f 0300 	mov.w	r3, #0
 8002954:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002958:	2300      	movs	r3, #0
 800295a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800295e:	f107 0310 	add.w	r3, r7, #16
 8002962:	4618      	mov	r0, r3
 8002964:	f007 fe88 	bl	800a678 <HAL_RCCEx_PeriphCLKConfig>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800296e:	f7ff fe73 	bl	8002658 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002972:	4b20      	ldr	r3, [pc, #128]	; (80029f4 <HAL_I2C_MspInit+0xd8>)
 8002974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002978:	4a1e      	ldr	r2, [pc, #120]	; (80029f4 <HAL_I2C_MspInit+0xd8>)
 800297a:	f043 0320 	orr.w	r3, r3, #32
 800297e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002982:	4b1c      	ldr	r3, [pc, #112]	; (80029f4 <HAL_I2C_MspInit+0xd8>)
 8002984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002988:	f003 0320 	and.w	r3, r3, #32
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002990:	2303      	movs	r3, #3
 8002992:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002996:	2312      	movs	r3, #18
 8002998:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299c:	2300      	movs	r3, #0
 800299e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a2:	2300      	movs	r3, #0
 80029a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80029a8:	2304      	movs	r3, #4
 80029aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80029ae:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029b2:	4619      	mov	r1, r3
 80029b4:	4810      	ldr	r0, [pc, #64]	; (80029f8 <HAL_I2C_MspInit+0xdc>)
 80029b6:	f005 f871 	bl	8007a9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80029ba:	4b0e      	ldr	r3, [pc, #56]	; (80029f4 <HAL_I2C_MspInit+0xd8>)
 80029bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029c0:	4a0c      	ldr	r2, [pc, #48]	; (80029f4 <HAL_I2C_MspInit+0xd8>)
 80029c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80029ca:	4b0a      	ldr	r3, [pc, #40]	; (80029f4 <HAL_I2C_MspInit+0xd8>)
 80029cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029d4:	60bb      	str	r3, [r7, #8]
 80029d6:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 80029d8:	2200      	movs	r2, #0
 80029da:	2101      	movs	r1, #1
 80029dc:	2021      	movs	r0, #33	; 0x21
 80029de:	f002 fbee 	bl	80051be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80029e2:	2021      	movs	r0, #33	; 0x21
 80029e4:	f002 fc05 	bl	80051f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80029e8:	bf00      	nop
 80029ea:	37e0      	adds	r7, #224	; 0xe0
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40005800 	.word	0x40005800
 80029f4:	58024400 	.word	0x58024400
 80029f8:	58021400 	.word	0x58021400

080029fc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b0ba      	sub	sp, #232	; 0xe8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a04:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	60da      	str	r2, [r3, #12]
 8002a12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a14:	f107 0318 	add.w	r3, r7, #24
 8002a18:	22b8      	movs	r2, #184	; 0xb8
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f014 f94b 	bl	8016cb8 <memset>
  if(hsd->Instance==SDMMC2)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a5d      	ldr	r2, [pc, #372]	; (8002b9c <HAL_SD_MspInit+0x1a0>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	f040 80b3 	bne.w	8002b94 <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002a2e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a32:	f04f 0300 	mov.w	r3, #0
 8002a36:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a3e:	f107 0318 	add.w	r3, r7, #24
 8002a42:	4618      	mov	r0, r3
 8002a44:	f007 fe18 	bl	800a678 <HAL_RCCEx_PeriphCLKConfig>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8002a4e:	f7ff fe03 	bl	8002658 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8002a52:	4b53      	ldr	r3, [pc, #332]	; (8002ba0 <HAL_SD_MspInit+0x1a4>)
 8002a54:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002a58:	4a51      	ldr	r2, [pc, #324]	; (8002ba0 <HAL_SD_MspInit+0x1a4>)
 8002a5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a5e:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002a62:	4b4f      	ldr	r3, [pc, #316]	; (8002ba0 <HAL_SD_MspInit+0x1a4>)
 8002a64:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002a68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a6c:	617b      	str	r3, [r7, #20]
 8002a6e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a70:	4b4b      	ldr	r3, [pc, #300]	; (8002ba0 <HAL_SD_MspInit+0x1a4>)
 8002a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a76:	4a4a      	ldr	r2, [pc, #296]	; (8002ba0 <HAL_SD_MspInit+0x1a4>)
 8002a78:	f043 0308 	orr.w	r3, r3, #8
 8002a7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a80:	4b47      	ldr	r3, [pc, #284]	; (8002ba0 <HAL_SD_MspInit+0x1a4>)
 8002a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	613b      	str	r3, [r7, #16]
 8002a8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a8e:	4b44      	ldr	r3, [pc, #272]	; (8002ba0 <HAL_SD_MspInit+0x1a4>)
 8002a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a94:	4a42      	ldr	r2, [pc, #264]	; (8002ba0 <HAL_SD_MspInit+0x1a4>)
 8002a96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a9e:	4b40      	ldr	r3, [pc, #256]	; (8002ba0 <HAL_SD_MspInit+0x1a4>)
 8002aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002aac:	2340      	movs	r3, #64	; 0x40
 8002aae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002ac4:	230b      	movs	r3, #11
 8002ac6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002aca:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4834      	ldr	r0, [pc, #208]	; (8002ba4 <HAL_SD_MspInit+0x1a8>)
 8002ad2:	f004 ffe3 	bl	8007a9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002ad6:	2380      	movs	r3, #128	; 0x80
 8002ad8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002adc:	2302      	movs	r3, #2
 8002ade:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002aee:	230b      	movs	r3, #11
 8002af0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002af4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002af8:	4619      	mov	r1, r3
 8002afa:	482a      	ldr	r0, [pc, #168]	; (8002ba4 <HAL_SD_MspInit+0x1a8>)
 8002afc:	f004 ffce 	bl	8007a9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b08:	2302      	movs	r3, #2
 8002b0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b14:	2303      	movs	r3, #3
 8002b16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002b1a:	230b      	movs	r3, #11
 8002b1c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b20:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b24:	4619      	mov	r1, r3
 8002b26:	4820      	ldr	r0, [pc, #128]	; (8002ba8 <HAL_SD_MspInit+0x1ac>)
 8002b28:	f004 ffb8 	bl	8007a9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b34:	2302      	movs	r3, #2
 8002b36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b40:	2303      	movs	r3, #3
 8002b42:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002b46:	230b      	movs	r3, #11
 8002b48:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b4c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b50:	4619      	mov	r1, r3
 8002b52:	4815      	ldr	r0, [pc, #84]	; (8002ba8 <HAL_SD_MspInit+0x1ac>)
 8002b54:	f004 ffa2 	bl	8007a9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002b58:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002b5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b60:	2302      	movs	r3, #2
 8002b62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b66:	2300      	movs	r3, #0
 8002b68:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8002b72:	230a      	movs	r3, #10
 8002b74:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b78:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	480a      	ldr	r0, [pc, #40]	; (8002ba8 <HAL_SD_MspInit+0x1ac>)
 8002b80:	f004 ff8c 	bl	8007a9c <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8002b84:	2200      	movs	r2, #0
 8002b86:	2100      	movs	r1, #0
 8002b88:	207c      	movs	r0, #124	; 0x7c
 8002b8a:	f002 fb18 	bl	80051be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8002b8e:	207c      	movs	r0, #124	; 0x7c
 8002b90:	f002 fb2f 	bl	80051f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8002b94:	bf00      	nop
 8002b96:	37e8      	adds	r7, #232	; 0xe8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	48022400 	.word	0x48022400
 8002ba0:	58024400 	.word	0x58024400
 8002ba4:	58020c00 	.word	0x58020c00
 8002ba8:	58021800 	.word	0x58021800

08002bac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08e      	sub	sp, #56	; 0x38
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	605a      	str	r2, [r3, #4]
 8002bbe:	609a      	str	r2, [r3, #8]
 8002bc0:	60da      	str	r2, [r3, #12]
 8002bc2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a4f      	ldr	r2, [pc, #316]	; (8002d08 <HAL_SPI_MspInit+0x15c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d12e      	bne.n	8002c2c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002bce:	4b4f      	ldr	r3, [pc, #316]	; (8002d0c <HAL_SPI_MspInit+0x160>)
 8002bd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bd4:	4a4d      	ldr	r2, [pc, #308]	; (8002d0c <HAL_SPI_MspInit+0x160>)
 8002bd6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bda:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002bde:	4b4b      	ldr	r3, [pc, #300]	; (8002d0c <HAL_SPI_MspInit+0x160>)
 8002be0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002be4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002be8:	623b      	str	r3, [r7, #32]
 8002bea:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bec:	4b47      	ldr	r3, [pc, #284]	; (8002d0c <HAL_SPI_MspInit+0x160>)
 8002bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bf2:	4a46      	ldr	r2, [pc, #280]	; (8002d0c <HAL_SPI_MspInit+0x160>)
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bfc:	4b43      	ldr	r3, [pc, #268]	; (8002d0c <HAL_SPI_MspInit+0x160>)
 8002bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	61fb      	str	r3, [r7, #28]
 8002c08:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002c0a:	23e0      	movs	r3, #224	; 0xe0
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0e:	2302      	movs	r3, #2
 8002c10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c16:	2300      	movs	r3, #0
 8002c18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c1a:	2305      	movs	r3, #5
 8002c1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c22:	4619      	mov	r1, r3
 8002c24:	483a      	ldr	r0, [pc, #232]	; (8002d10 <HAL_SPI_MspInit+0x164>)
 8002c26:	f004 ff39 	bl	8007a9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002c2a:	e068      	b.n	8002cfe <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a38      	ldr	r2, [pc, #224]	; (8002d14 <HAL_SPI_MspInit+0x168>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d12f      	bne.n	8002c96 <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002c36:	4b35      	ldr	r3, [pc, #212]	; (8002d0c <HAL_SPI_MspInit+0x160>)
 8002c38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c3c:	4a33      	ldr	r2, [pc, #204]	; (8002d0c <HAL_SPI_MspInit+0x160>)
 8002c3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c42:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c46:	4b31      	ldr	r3, [pc, #196]	; (8002d0c <HAL_SPI_MspInit+0x160>)
 8002c48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c50:	61bb      	str	r3, [r7, #24]
 8002c52:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c54:	4b2d      	ldr	r3, [pc, #180]	; (8002d0c <HAL_SPI_MspInit+0x160>)
 8002c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c5a:	4a2c      	ldr	r2, [pc, #176]	; (8002d0c <HAL_SPI_MspInit+0x160>)
 8002c5c:	f043 0302 	orr.w	r3, r3, #2
 8002c60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c64:	4b29      	ldr	r3, [pc, #164]	; (8002d0c <HAL_SPI_MspInit+0x160>)
 8002c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002c72:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002c76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c78:	2302      	movs	r3, #2
 8002c7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c80:	2300      	movs	r3, #0
 8002c82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c84:	2305      	movs	r3, #5
 8002c86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4822      	ldr	r0, [pc, #136]	; (8002d18 <HAL_SPI_MspInit+0x16c>)
 8002c90:	f004 ff04 	bl	8007a9c <HAL_GPIO_Init>
}
 8002c94:	e033      	b.n	8002cfe <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a20      	ldr	r2, [pc, #128]	; (8002d1c <HAL_SPI_MspInit+0x170>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d12e      	bne.n	8002cfe <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002ca0:	4b1a      	ldr	r3, [pc, #104]	; (8002d0c <HAL_SPI_MspInit+0x160>)
 8002ca2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ca6:	4a19      	ldr	r2, [pc, #100]	; (8002d0c <HAL_SPI_MspInit+0x160>)
 8002ca8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002cb0:	4b16      	ldr	r3, [pc, #88]	; (8002d0c <HAL_SPI_MspInit+0x160>)
 8002cb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cba:	613b      	str	r3, [r7, #16]
 8002cbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cbe:	4b13      	ldr	r3, [pc, #76]	; (8002d0c <HAL_SPI_MspInit+0x160>)
 8002cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cc4:	4a11      	ldr	r2, [pc, #68]	; (8002d0c <HAL_SPI_MspInit+0x160>)
 8002cc6:	f043 0304 	orr.w	r3, r3, #4
 8002cca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cce:	4b0f      	ldr	r3, [pc, #60]	; (8002d0c <HAL_SPI_MspInit+0x160>)
 8002cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002cdc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cea:	2300      	movs	r3, #0
 8002cec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002cee:	2306      	movs	r3, #6
 8002cf0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4809      	ldr	r0, [pc, #36]	; (8002d20 <HAL_SPI_MspInit+0x174>)
 8002cfa:	f004 fecf 	bl	8007a9c <HAL_GPIO_Init>
}
 8002cfe:	bf00      	nop
 8002d00:	3738      	adds	r7, #56	; 0x38
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40013000 	.word	0x40013000
 8002d0c:	58024400 	.word	0x58024400
 8002d10:	58020000 	.word	0x58020000
 8002d14:	40003800 	.word	0x40003800
 8002d18:	58020400 	.word	0x58020400
 8002d1c:	40003c00 	.word	0x40003c00
 8002d20:	58020800 	.word	0x58020800

08002d24 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b08c      	sub	sp, #48	; 0x30
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d2c:	f107 031c 	add.w	r3, r7, #28
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	605a      	str	r2, [r3, #4]
 8002d36:	609a      	str	r2, [r3, #8]
 8002d38:	60da      	str	r2, [r3, #12]
 8002d3a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d44:	d15d      	bne.n	8002e02 <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d46:	4b8e      	ldr	r3, [pc, #568]	; (8002f80 <HAL_TIM_PWM_MspInit+0x25c>)
 8002d48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d4c:	4a8c      	ldr	r2, [pc, #560]	; (8002f80 <HAL_TIM_PWM_MspInit+0x25c>)
 8002d4e:	f043 0301 	orr.w	r3, r3, #1
 8002d52:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d56:	4b8a      	ldr	r3, [pc, #552]	; (8002f80 <HAL_TIM_PWM_MspInit+0x25c>)
 8002d58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	61bb      	str	r3, [r7, #24]
 8002d62:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d64:	4b86      	ldr	r3, [pc, #536]	; (8002f80 <HAL_TIM_PWM_MspInit+0x25c>)
 8002d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d6a:	4a85      	ldr	r2, [pc, #532]	; (8002f80 <HAL_TIM_PWM_MspInit+0x25c>)
 8002d6c:	f043 0301 	orr.w	r3, r3, #1
 8002d70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d74:	4b82      	ldr	r3, [pc, #520]	; (8002f80 <HAL_TIM_PWM_MspInit+0x25c>)
 8002d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d82:	2301      	movs	r3, #1
 8002d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d86:	2302      	movs	r3, #2
 8002d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d92:	2301      	movs	r3, #1
 8002d94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d96:	f107 031c 	add.w	r3, r7, #28
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4879      	ldr	r0, [pc, #484]	; (8002f84 <HAL_TIM_PWM_MspInit+0x260>)
 8002d9e:	f004 fe7d 	bl	8007a9c <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 8002da2:	4b79      	ldr	r3, [pc, #484]	; (8002f88 <HAL_TIM_PWM_MspInit+0x264>)
 8002da4:	4a79      	ldr	r2, [pc, #484]	; (8002f8c <HAL_TIM_PWM_MspInit+0x268>)
 8002da6:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 8002da8:	4b77      	ldr	r3, [pc, #476]	; (8002f88 <HAL_TIM_PWM_MspInit+0x264>)
 8002daa:	2214      	movs	r2, #20
 8002dac:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002dae:	4b76      	ldr	r3, [pc, #472]	; (8002f88 <HAL_TIM_PWM_MspInit+0x264>)
 8002db0:	2240      	movs	r2, #64	; 0x40
 8002db2:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002db4:	4b74      	ldr	r3, [pc, #464]	; (8002f88 <HAL_TIM_PWM_MspInit+0x264>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002dba:	4b73      	ldr	r3, [pc, #460]	; (8002f88 <HAL_TIM_PWM_MspInit+0x264>)
 8002dbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dc0:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002dc2:	4b71      	ldr	r3, [pc, #452]	; (8002f88 <HAL_TIM_PWM_MspInit+0x264>)
 8002dc4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002dc8:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002dca:	4b6f      	ldr	r3, [pc, #444]	; (8002f88 <HAL_TIM_PWM_MspInit+0x264>)
 8002dcc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002dd0:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8002dd2:	4b6d      	ldr	r3, [pc, #436]	; (8002f88 <HAL_TIM_PWM_MspInit+0x264>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002dd8:	4b6b      	ldr	r3, [pc, #428]	; (8002f88 <HAL_TIM_PWM_MspInit+0x264>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dde:	4b6a      	ldr	r3, [pc, #424]	; (8002f88 <HAL_TIM_PWM_MspInit+0x264>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8002de4:	4868      	ldr	r0, [pc, #416]	; (8002f88 <HAL_TIM_PWM_MspInit+0x264>)
 8002de6:	f002 fa1f 	bl	8005228 <HAL_DMA_Init>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 8002df0:	f7ff fc32 	bl	8002658 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a64      	ldr	r2, [pc, #400]	; (8002f88 <HAL_TIM_PWM_MspInit+0x264>)
 8002df8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002dfa:	4a63      	ldr	r2, [pc, #396]	; (8002f88 <HAL_TIM_PWM_MspInit+0x264>)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002e00:	e119      	b.n	8003036 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a62      	ldr	r2, [pc, #392]	; (8002f90 <HAL_TIM_PWM_MspInit+0x26c>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d16d      	bne.n	8002ee8 <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e0c:	4b5c      	ldr	r3, [pc, #368]	; (8002f80 <HAL_TIM_PWM_MspInit+0x25c>)
 8002e0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e12:	4a5b      	ldr	r2, [pc, #364]	; (8002f80 <HAL_TIM_PWM_MspInit+0x25c>)
 8002e14:	f043 0302 	orr.w	r3, r3, #2
 8002e18:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e1c:	4b58      	ldr	r3, [pc, #352]	; (8002f80 <HAL_TIM_PWM_MspInit+0x25c>)
 8002e1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	613b      	str	r3, [r7, #16]
 8002e28:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 8002e2a:	4b5a      	ldr	r3, [pc, #360]	; (8002f94 <HAL_TIM_PWM_MspInit+0x270>)
 8002e2c:	4a5a      	ldr	r2, [pc, #360]	; (8002f98 <HAL_TIM_PWM_MspInit+0x274>)
 8002e2e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8002e30:	4b58      	ldr	r3, [pc, #352]	; (8002f94 <HAL_TIM_PWM_MspInit+0x270>)
 8002e32:	2218      	movs	r2, #24
 8002e34:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e36:	4b57      	ldr	r3, [pc, #348]	; (8002f94 <HAL_TIM_PWM_MspInit+0x270>)
 8002e38:	2240      	movs	r2, #64	; 0x40
 8002e3a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e3c:	4b55      	ldr	r3, [pc, #340]	; (8002f94 <HAL_TIM_PWM_MspInit+0x270>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002e42:	4b54      	ldr	r3, [pc, #336]	; (8002f94 <HAL_TIM_PWM_MspInit+0x270>)
 8002e44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e48:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002e4a:	4b52      	ldr	r3, [pc, #328]	; (8002f94 <HAL_TIM_PWM_MspInit+0x270>)
 8002e4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e50:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002e52:	4b50      	ldr	r3, [pc, #320]	; (8002f94 <HAL_TIM_PWM_MspInit+0x270>)
 8002e54:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e58:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8002e5a:	4b4e      	ldr	r3, [pc, #312]	; (8002f94 <HAL_TIM_PWM_MspInit+0x270>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002e60:	4b4c      	ldr	r3, [pc, #304]	; (8002f94 <HAL_TIM_PWM_MspInit+0x270>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e66:	4b4b      	ldr	r3, [pc, #300]	; (8002f94 <HAL_TIM_PWM_MspInit+0x270>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8002e6c:	4849      	ldr	r0, [pc, #292]	; (8002f94 <HAL_TIM_PWM_MspInit+0x270>)
 8002e6e:	f002 f9db 	bl	8005228 <HAL_DMA_Init>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 8002e78:	f7ff fbee 	bl	8002658 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a45      	ldr	r2, [pc, #276]	; (8002f94 <HAL_TIM_PWM_MspInit+0x270>)
 8002e80:	629a      	str	r2, [r3, #40]	; 0x28
 8002e82:	4a44      	ldr	r2, [pc, #272]	; (8002f94 <HAL_TIM_PWM_MspInit+0x270>)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 8002e88:	4b44      	ldr	r3, [pc, #272]	; (8002f9c <HAL_TIM_PWM_MspInit+0x278>)
 8002e8a:	4a45      	ldr	r2, [pc, #276]	; (8002fa0 <HAL_TIM_PWM_MspInit+0x27c>)
 8002e8c:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8002e8e:	4b43      	ldr	r3, [pc, #268]	; (8002f9c <HAL_TIM_PWM_MspInit+0x278>)
 8002e90:	2217      	movs	r2, #23
 8002e92:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e94:	4b41      	ldr	r3, [pc, #260]	; (8002f9c <HAL_TIM_PWM_MspInit+0x278>)
 8002e96:	2240      	movs	r2, #64	; 0x40
 8002e98:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e9a:	4b40      	ldr	r3, [pc, #256]	; (8002f9c <HAL_TIM_PWM_MspInit+0x278>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002ea0:	4b3e      	ldr	r3, [pc, #248]	; (8002f9c <HAL_TIM_PWM_MspInit+0x278>)
 8002ea2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ea6:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ea8:	4b3c      	ldr	r3, [pc, #240]	; (8002f9c <HAL_TIM_PWM_MspInit+0x278>)
 8002eaa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002eae:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002eb0:	4b3a      	ldr	r3, [pc, #232]	; (8002f9c <HAL_TIM_PWM_MspInit+0x278>)
 8002eb2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002eb6:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8002eb8:	4b38      	ldr	r3, [pc, #224]	; (8002f9c <HAL_TIM_PWM_MspInit+0x278>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002ebe:	4b37      	ldr	r3, [pc, #220]	; (8002f9c <HAL_TIM_PWM_MspInit+0x278>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ec4:	4b35      	ldr	r3, [pc, #212]	; (8002f9c <HAL_TIM_PWM_MspInit+0x278>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8002eca:	4834      	ldr	r0, [pc, #208]	; (8002f9c <HAL_TIM_PWM_MspInit+0x278>)
 8002ecc:	f002 f9ac 	bl	8005228 <HAL_DMA_Init>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 8002ed6:	f7ff fbbf 	bl	8002658 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a2f      	ldr	r2, [pc, #188]	; (8002f9c <HAL_TIM_PWM_MspInit+0x278>)
 8002ede:	625a      	str	r2, [r3, #36]	; 0x24
 8002ee0:	4a2e      	ldr	r2, [pc, #184]	; (8002f9c <HAL_TIM_PWM_MspInit+0x278>)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002ee6:	e0a6      	b.n	8003036 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a2d      	ldr	r2, [pc, #180]	; (8002fa4 <HAL_TIM_PWM_MspInit+0x280>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d15e      	bne.n	8002fb0 <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002ef2:	4b23      	ldr	r3, [pc, #140]	; (8002f80 <HAL_TIM_PWM_MspInit+0x25c>)
 8002ef4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ef8:	4a21      	ldr	r2, [pc, #132]	; (8002f80 <HAL_TIM_PWM_MspInit+0x25c>)
 8002efa:	f043 0304 	orr.w	r3, r3, #4
 8002efe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f02:	4b1f      	ldr	r3, [pc, #124]	; (8002f80 <HAL_TIM_PWM_MspInit+0x25c>)
 8002f04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	60fb      	str	r3, [r7, #12]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 8002f10:	4b25      	ldr	r3, [pc, #148]	; (8002fa8 <HAL_TIM_PWM_MspInit+0x284>)
 8002f12:	4a26      	ldr	r2, [pc, #152]	; (8002fac <HAL_TIM_PWM_MspInit+0x288>)
 8002f14:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 8002f16:	4b24      	ldr	r3, [pc, #144]	; (8002fa8 <HAL_TIM_PWM_MspInit+0x284>)
 8002f18:	221f      	movs	r2, #31
 8002f1a:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f1c:	4b22      	ldr	r3, [pc, #136]	; (8002fa8 <HAL_TIM_PWM_MspInit+0x284>)
 8002f1e:	2240      	movs	r2, #64	; 0x40
 8002f20:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f22:	4b21      	ldr	r3, [pc, #132]	; (8002fa8 <HAL_TIM_PWM_MspInit+0x284>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002f28:	4b1f      	ldr	r3, [pc, #124]	; (8002fa8 <HAL_TIM_PWM_MspInit+0x284>)
 8002f2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f2e:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f30:	4b1d      	ldr	r3, [pc, #116]	; (8002fa8 <HAL_TIM_PWM_MspInit+0x284>)
 8002f32:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f36:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002f38:	4b1b      	ldr	r3, [pc, #108]	; (8002fa8 <HAL_TIM_PWM_MspInit+0x284>)
 8002f3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f3e:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8002f40:	4b19      	ldr	r3, [pc, #100]	; (8002fa8 <HAL_TIM_PWM_MspInit+0x284>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002f46:	4b18      	ldr	r3, [pc, #96]	; (8002fa8 <HAL_TIM_PWM_MspInit+0x284>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f4c:	4b16      	ldr	r3, [pc, #88]	; (8002fa8 <HAL_TIM_PWM_MspInit+0x284>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8002f52:	4815      	ldr	r0, [pc, #84]	; (8002fa8 <HAL_TIM_PWM_MspInit+0x284>)
 8002f54:	f002 f968 	bl	8005228 <HAL_DMA_Init>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 8002f5e:	f7ff fb7b 	bl	8002658 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a10      	ldr	r2, [pc, #64]	; (8002fa8 <HAL_TIM_PWM_MspInit+0x284>)
 8002f66:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f68:	4a0f      	ldr	r2, [pc, #60]	; (8002fa8 <HAL_TIM_PWM_MspInit+0x284>)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002f6e:	2200      	movs	r2, #0
 8002f70:	2100      	movs	r1, #0
 8002f72:	201e      	movs	r0, #30
 8002f74:	f002 f923 	bl	80051be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002f78:	201e      	movs	r0, #30
 8002f7a:	f002 f93a 	bl	80051f2 <HAL_NVIC_EnableIRQ>
}
 8002f7e:	e05a      	b.n	8003036 <HAL_TIM_PWM_MspInit+0x312>
 8002f80:	58024400 	.word	0x58024400
 8002f84:	58020000 	.word	0x58020000
 8002f88:	24001260 	.word	0x24001260
 8002f8c:	40020028 	.word	0x40020028
 8002f90:	40000400 	.word	0x40000400
 8002f94:	240012d8 	.word	0x240012d8
 8002f98:	40020058 	.word	0x40020058
 8002f9c:	24001350 	.word	0x24001350
 8002fa0:	40020070 	.word	0x40020070
 8002fa4:	40000800 	.word	0x40000800
 8002fa8:	240013c8 	.word	0x240013c8
 8002fac:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a22      	ldr	r2, [pc, #136]	; (8003040 <HAL_TIM_PWM_MspInit+0x31c>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d13d      	bne.n	8003036 <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002fba:	4b22      	ldr	r3, [pc, #136]	; (8003044 <HAL_TIM_PWM_MspInit+0x320>)
 8002fbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fc0:	4a20      	ldr	r2, [pc, #128]	; (8003044 <HAL_TIM_PWM_MspInit+0x320>)
 8002fc2:	f043 0308 	orr.w	r3, r3, #8
 8002fc6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002fca:	4b1e      	ldr	r3, [pc, #120]	; (8003044 <HAL_TIM_PWM_MspInit+0x320>)
 8002fcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fd0:	f003 0308 	and.w	r3, r3, #8
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 8002fd8:	4b1b      	ldr	r3, [pc, #108]	; (8003048 <HAL_TIM_PWM_MspInit+0x324>)
 8002fda:	4a1c      	ldr	r2, [pc, #112]	; (800304c <HAL_TIM_PWM_MspInit+0x328>)
 8002fdc:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 8002fde:	4b1a      	ldr	r3, [pc, #104]	; (8003048 <HAL_TIM_PWM_MspInit+0x324>)
 8002fe0:	223a      	movs	r2, #58	; 0x3a
 8002fe2:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fe4:	4b18      	ldr	r3, [pc, #96]	; (8003048 <HAL_TIM_PWM_MspInit+0x324>)
 8002fe6:	2240      	movs	r2, #64	; 0x40
 8002fe8:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fea:	4b17      	ldr	r3, [pc, #92]	; (8003048 <HAL_TIM_PWM_MspInit+0x324>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002ff0:	4b15      	ldr	r3, [pc, #84]	; (8003048 <HAL_TIM_PWM_MspInit+0x324>)
 8002ff2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ff6:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ff8:	4b13      	ldr	r3, [pc, #76]	; (8003048 <HAL_TIM_PWM_MspInit+0x324>)
 8002ffa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ffe:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003000:	4b11      	ldr	r3, [pc, #68]	; (8003048 <HAL_TIM_PWM_MspInit+0x324>)
 8003002:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003006:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 8003008:	4b0f      	ldr	r3, [pc, #60]	; (8003048 <HAL_TIM_PWM_MspInit+0x324>)
 800300a:	2200      	movs	r2, #0
 800300c:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 800300e:	4b0e      	ldr	r3, [pc, #56]	; (8003048 <HAL_TIM_PWM_MspInit+0x324>)
 8003010:	2200      	movs	r2, #0
 8003012:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003014:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <HAL_TIM_PWM_MspInit+0x324>)
 8003016:	2200      	movs	r2, #0
 8003018:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 800301a:	480b      	ldr	r0, [pc, #44]	; (8003048 <HAL_TIM_PWM_MspInit+0x324>)
 800301c:	f002 f904 	bl	8005228 <HAL_DMA_Init>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 8003026:	f7ff fb17 	bl	8002658 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a06      	ldr	r2, [pc, #24]	; (8003048 <HAL_TIM_PWM_MspInit+0x324>)
 800302e:	631a      	str	r2, [r3, #48]	; 0x30
 8003030:	4a05      	ldr	r2, [pc, #20]	; (8003048 <HAL_TIM_PWM_MspInit+0x324>)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003036:	bf00      	nop
 8003038:	3730      	adds	r7, #48	; 0x30
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	40000c00 	.word	0x40000c00
 8003044:	58024400 	.word	0x58024400
 8003048:	24001440 	.word	0x24001440
 800304c:	40020040 	.word	0x40020040

08003050 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a0b      	ldr	r2, [pc, #44]	; (800308c <HAL_TIM_Base_MspInit+0x3c>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d10e      	bne.n	8003080 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003062:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <HAL_TIM_Base_MspInit+0x40>)
 8003064:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003068:	4a09      	ldr	r2, [pc, #36]	; (8003090 <HAL_TIM_Base_MspInit+0x40>)
 800306a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800306e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003072:	4b07      	ldr	r3, [pc, #28]	; (8003090 <HAL_TIM_Base_MspInit+0x40>)
 8003074:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8003080:	bf00      	nop
 8003082:	3714      	adds	r7, #20
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	40001c00 	.word	0x40001c00
 8003090:	58024400 	.word	0x58024400

08003094 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b08c      	sub	sp, #48	; 0x30
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800309c:	f107 031c 	add.w	r3, r7, #28
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	605a      	str	r2, [r3, #4]
 80030a6:	609a      	str	r2, [r3, #8]
 80030a8:	60da      	str	r2, [r3, #12]
 80030aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b4:	d120      	bne.n	80030f8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030b6:	4b52      	ldr	r3, [pc, #328]	; (8003200 <HAL_TIM_MspPostInit+0x16c>)
 80030b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030bc:	4a50      	ldr	r2, [pc, #320]	; (8003200 <HAL_TIM_MspPostInit+0x16c>)
 80030be:	f043 0302 	orr.w	r3, r3, #2
 80030c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030c6:	4b4e      	ldr	r3, [pc, #312]	; (8003200 <HAL_TIM_MspPostInit+0x16c>)
 80030c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	61bb      	str	r3, [r7, #24]
 80030d2:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80030d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030da:	2302      	movs	r3, #2
 80030dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80030de:	2302      	movs	r3, #2
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e2:	2300      	movs	r3, #0
 80030e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80030e6:	2301      	movs	r3, #1
 80030e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030ea:	f107 031c 	add.w	r3, r7, #28
 80030ee:	4619      	mov	r1, r3
 80030f0:	4844      	ldr	r0, [pc, #272]	; (8003204 <HAL_TIM_MspPostInit+0x170>)
 80030f2:	f004 fcd3 	bl	8007a9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80030f6:	e07f      	b.n	80031f8 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a42      	ldr	r2, [pc, #264]	; (8003208 <HAL_TIM_MspPostInit+0x174>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d11f      	bne.n	8003142 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003102:	4b3f      	ldr	r3, [pc, #252]	; (8003200 <HAL_TIM_MspPostInit+0x16c>)
 8003104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003108:	4a3d      	ldr	r2, [pc, #244]	; (8003200 <HAL_TIM_MspPostInit+0x16c>)
 800310a:	f043 0302 	orr.w	r3, r3, #2
 800310e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003112:	4b3b      	ldr	r3, [pc, #236]	; (8003200 <HAL_TIM_MspPostInit+0x16c>)
 8003114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	617b      	str	r3, [r7, #20]
 800311e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003120:	2330      	movs	r3, #48	; 0x30
 8003122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003124:	2302      	movs	r3, #2
 8003126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003128:	2302      	movs	r3, #2
 800312a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800312c:	2300      	movs	r3, #0
 800312e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003130:	2302      	movs	r3, #2
 8003132:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003134:	f107 031c 	add.w	r3, r7, #28
 8003138:	4619      	mov	r1, r3
 800313a:	4832      	ldr	r0, [pc, #200]	; (8003204 <HAL_TIM_MspPostInit+0x170>)
 800313c:	f004 fcae 	bl	8007a9c <HAL_GPIO_Init>
}
 8003140:	e05a      	b.n	80031f8 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a31      	ldr	r2, [pc, #196]	; (800320c <HAL_TIM_MspPostInit+0x178>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d131      	bne.n	80031b0 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800314c:	4b2c      	ldr	r3, [pc, #176]	; (8003200 <HAL_TIM_MspPostInit+0x16c>)
 800314e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003152:	4a2b      	ldr	r2, [pc, #172]	; (8003200 <HAL_TIM_MspPostInit+0x16c>)
 8003154:	f043 0308 	orr.w	r3, r3, #8
 8003158:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800315c:	4b28      	ldr	r3, [pc, #160]	; (8003200 <HAL_TIM_MspPostInit+0x16c>)
 800315e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003162:	f003 0308 	and.w	r3, r3, #8
 8003166:	613b      	str	r3, [r7, #16]
 8003168:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800316a:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800316e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003170:	2302      	movs	r3, #2
 8003172:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003174:	2300      	movs	r3, #0
 8003176:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003178:	2300      	movs	r3, #0
 800317a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800317c:	2302      	movs	r3, #2
 800317e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003180:	f107 031c 	add.w	r3, r7, #28
 8003184:	4619      	mov	r1, r3
 8003186:	4822      	ldr	r0, [pc, #136]	; (8003210 <HAL_TIM_MspPostInit+0x17c>)
 8003188:	f004 fc88 	bl	8007a9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800318c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003192:	2302      	movs	r3, #2
 8003194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003196:	2302      	movs	r3, #2
 8003198:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800319a:	2300      	movs	r3, #0
 800319c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800319e:	2302      	movs	r3, #2
 80031a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031a2:	f107 031c 	add.w	r3, r7, #28
 80031a6:	4619      	mov	r1, r3
 80031a8:	4819      	ldr	r0, [pc, #100]	; (8003210 <HAL_TIM_MspPostInit+0x17c>)
 80031aa:	f004 fc77 	bl	8007a9c <HAL_GPIO_Init>
}
 80031ae:	e023      	b.n	80031f8 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a17      	ldr	r2, [pc, #92]	; (8003214 <HAL_TIM_MspPostInit+0x180>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d11e      	bne.n	80031f8 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ba:	4b11      	ldr	r3, [pc, #68]	; (8003200 <HAL_TIM_MspPostInit+0x16c>)
 80031bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031c0:	4a0f      	ldr	r2, [pc, #60]	; (8003200 <HAL_TIM_MspPostInit+0x16c>)
 80031c2:	f043 0301 	orr.w	r3, r3, #1
 80031c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031ca:	4b0d      	ldr	r3, [pc, #52]	; (8003200 <HAL_TIM_MspPostInit+0x16c>)
 80031cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80031d8:	2308      	movs	r3, #8
 80031da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031dc:	2302      	movs	r3, #2
 80031de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80031e0:	2302      	movs	r3, #2
 80031e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e4:	2300      	movs	r3, #0
 80031e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80031e8:	2302      	movs	r3, #2
 80031ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ec:	f107 031c 	add.w	r3, r7, #28
 80031f0:	4619      	mov	r1, r3
 80031f2:	4809      	ldr	r0, [pc, #36]	; (8003218 <HAL_TIM_MspPostInit+0x184>)
 80031f4:	f004 fc52 	bl	8007a9c <HAL_GPIO_Init>
}
 80031f8:	bf00      	nop
 80031fa:	3730      	adds	r7, #48	; 0x30
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	58024400 	.word	0x58024400
 8003204:	58020400 	.word	0x58020400
 8003208:	40000400 	.word	0x40000400
 800320c:	40000800 	.word	0x40000800
 8003210:	58020c00 	.word	0x58020c00
 8003214:	40000c00 	.word	0x40000c00
 8003218:	58020000 	.word	0x58020000

0800321c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b0ba      	sub	sp, #232	; 0xe8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003224:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	605a      	str	r2, [r3, #4]
 800322e:	609a      	str	r2, [r3, #8]
 8003230:	60da      	str	r2, [r3, #12]
 8003232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003234:	f107 0318 	add.w	r3, r7, #24
 8003238:	22b8      	movs	r2, #184	; 0xb8
 800323a:	2100      	movs	r1, #0
 800323c:	4618      	mov	r0, r3
 800323e:	f013 fd3b 	bl	8016cb8 <memset>
  if(huart->Instance==UART4)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a4d      	ldr	r2, [pc, #308]	; (800337c <HAL_UART_MspInit+0x160>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d147      	bne.n	80032dc <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800324c:	f04f 0202 	mov.w	r2, #2
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003258:	2300      	movs	r3, #0
 800325a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800325e:	f107 0318 	add.w	r3, r7, #24
 8003262:	4618      	mov	r0, r3
 8003264:	f007 fa08 	bl	800a678 <HAL_RCCEx_PeriphCLKConfig>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800326e:	f7ff f9f3 	bl	8002658 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003272:	4b43      	ldr	r3, [pc, #268]	; (8003380 <HAL_UART_MspInit+0x164>)
 8003274:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003278:	4a41      	ldr	r2, [pc, #260]	; (8003380 <HAL_UART_MspInit+0x164>)
 800327a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800327e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003282:	4b3f      	ldr	r3, [pc, #252]	; (8003380 <HAL_UART_MspInit+0x164>)
 8003284:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003288:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800328c:	617b      	str	r3, [r7, #20]
 800328e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003290:	4b3b      	ldr	r3, [pc, #236]	; (8003380 <HAL_UART_MspInit+0x164>)
 8003292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003296:	4a3a      	ldr	r2, [pc, #232]	; (8003380 <HAL_UART_MspInit+0x164>)
 8003298:	f043 0302 	orr.w	r3, r3, #2
 800329c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032a0:	4b37      	ldr	r3, [pc, #220]	; (8003380 <HAL_UART_MspInit+0x164>)
 80032a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	613b      	str	r3, [r7, #16]
 80032ac:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80032ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80032b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b6:	2302      	movs	r3, #2
 80032b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032bc:	2300      	movs	r3, #0
 80032be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c2:	2300      	movs	r3, #0
 80032c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80032c8:	2308      	movs	r3, #8
 80032ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032ce:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80032d2:	4619      	mov	r1, r3
 80032d4:	482b      	ldr	r0, [pc, #172]	; (8003384 <HAL_UART_MspInit+0x168>)
 80032d6:	f004 fbe1 	bl	8007a9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80032da:	e04a      	b.n	8003372 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a29      	ldr	r2, [pc, #164]	; (8003388 <HAL_UART_MspInit+0x16c>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d145      	bne.n	8003372 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80032e6:	f04f 0201 	mov.w	r2, #1
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80032f2:	2300      	movs	r3, #0
 80032f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032f8:	f107 0318 	add.w	r3, r7, #24
 80032fc:	4618      	mov	r0, r3
 80032fe:	f007 f9bb 	bl	800a678 <HAL_RCCEx_PeriphCLKConfig>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8003308:	f7ff f9a6 	bl	8002658 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800330c:	4b1c      	ldr	r3, [pc, #112]	; (8003380 <HAL_UART_MspInit+0x164>)
 800330e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003312:	4a1b      	ldr	r2, [pc, #108]	; (8003380 <HAL_UART_MspInit+0x164>)
 8003314:	f043 0320 	orr.w	r3, r3, #32
 8003318:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800331c:	4b18      	ldr	r3, [pc, #96]	; (8003380 <HAL_UART_MspInit+0x164>)
 800331e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003322:	f003 0320 	and.w	r3, r3, #32
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800332a:	4b15      	ldr	r3, [pc, #84]	; (8003380 <HAL_UART_MspInit+0x164>)
 800332c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003330:	4a13      	ldr	r2, [pc, #76]	; (8003380 <HAL_UART_MspInit+0x164>)
 8003332:	f043 0304 	orr.w	r3, r3, #4
 8003336:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800333a:	4b11      	ldr	r3, [pc, #68]	; (8003380 <HAL_UART_MspInit+0x164>)
 800333c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	60bb      	str	r3, [r7, #8]
 8003346:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003348:	23c0      	movs	r3, #192	; 0xc0
 800334a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334e:	2302      	movs	r3, #2
 8003350:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003354:	2300      	movs	r3, #0
 8003356:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800335a:	2300      	movs	r3, #0
 800335c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8003360:	2307      	movs	r3, #7
 8003362:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003366:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800336a:	4619      	mov	r1, r3
 800336c:	4807      	ldr	r0, [pc, #28]	; (800338c <HAL_UART_MspInit+0x170>)
 800336e:	f004 fb95 	bl	8007a9c <HAL_GPIO_Init>
}
 8003372:	bf00      	nop
 8003374:	37e8      	adds	r7, #232	; 0xe8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	40004c00 	.word	0x40004c00
 8003380:	58024400 	.word	0x58024400
 8003384:	58020400 	.word	0x58020400
 8003388:	40011400 	.word	0x40011400
 800338c:	58020800 	.word	0x58020800

08003390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003394:	e7fe      	b.n	8003394 <NMI_Handler+0x4>

08003396 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003396:	b480      	push	{r7}
 8003398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800339a:	e7fe      	b.n	800339a <HardFault_Handler+0x4>

0800339c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033a0:	e7fe      	b.n	80033a0 <MemManage_Handler+0x4>

080033a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033a2:	b480      	push	{r7}
 80033a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033a6:	e7fe      	b.n	80033a6 <BusFault_Handler+0x4>

080033a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033ac:	e7fe      	b.n	80033ac <UsageFault_Handler+0x4>

080033ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033ae:	b480      	push	{r7}
 80033b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033b2:	bf00      	nop
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033c0:	bf00      	nop
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033ca:	b480      	push	{r7}
 80033cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033ce:	bf00      	nop
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033dc:	f000 fa4a 	bl	8003874 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033e0:	bf00      	nop
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 80033e8:	4802      	ldr	r0, [pc, #8]	; (80033f4 <DMA1_Stream0_IRQHandler+0x10>)
 80033ea:	f002 fce1 	bl	8005db0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	240013c8 	.word	0x240013c8

080033f8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 80033fc:	4802      	ldr	r0, [pc, #8]	; (8003408 <DMA1_Stream1_IRQHandler+0x10>)
 80033fe:	f002 fcd7 	bl	8005db0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003402:	bf00      	nop
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	24001260 	.word	0x24001260

0800340c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8003410:	4802      	ldr	r0, [pc, #8]	; (800341c <DMA1_Stream2_IRQHandler+0x10>)
 8003412:	f002 fccd 	bl	8005db0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003416:	bf00      	nop
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	24001440 	.word	0x24001440

08003420 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003424:	4802      	ldr	r0, [pc, #8]	; (8003430 <DMA1_Stream3_IRQHandler+0x10>)
 8003426:	f002 fcc3 	bl	8005db0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800342a:	bf00      	nop
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	240012d8 	.word	0x240012d8

08003434 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8003438:	4802      	ldr	r0, [pc, #8]	; (8003444 <DMA1_Stream4_IRQHandler+0x10>)
 800343a:	f002 fcb9 	bl	8005db0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800343e:	bf00      	nop
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	24001350 	.word	0x24001350

08003448 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800344c:	4802      	ldr	r0, [pc, #8]	; (8003458 <DMA1_Stream5_IRQHandler+0x10>)
 800344e:	f002 fcaf 	bl	8005db0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003452:	bf00      	nop
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	24000cec 	.word	0x24000cec

0800345c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003460:	4802      	ldr	r0, [pc, #8]	; (800346c <TIM4_IRQHandler+0x10>)
 8003462:	f00c f9cf 	bl	800f804 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003466:	bf00      	nop
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	2400117c 	.word	0x2400117c

08003470 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003474:	4802      	ldr	r0, [pc, #8]	; (8003480 <I2C2_EV_IRQHandler+0x10>)
 8003476:	f004 fd7b 	bl	8007f70 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800347a:	bf00      	nop
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	24000e7c 	.word	0x24000e7c

08003484 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003488:	4802      	ldr	r0, [pc, #8]	; (8003494 <DMA2_Stream7_IRQHandler+0x10>)
 800348a:	f002 fc91 	bl	8005db0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800348e:	bf00      	nop
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	24000d64 	.word	0x24000d64

08003498 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800349c:	4802      	ldr	r0, [pc, #8]	; (80034a8 <OTG_HS_IRQHandler+0x10>)
 800349e:	f004 ff71 	bl	8008384 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80034a2:	bf00      	nop
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	24002b10 	.word	0x24002b10

080034ac <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 80034b0:	4802      	ldr	r0, [pc, #8]	; (80034bc <SDMMC2_IRQHandler+0x10>)
 80034b2:	f009 ff37 	bl	800d324 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 80034b6:	bf00      	nop
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	24000ed0 	.word	0x24000ed0

080034c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  return 1;
 80034c4:	2301      	movs	r3, #1
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <_kill>:

int _kill(int pid, int sig)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80034da:	f013 fbb5 	bl	8016c48 <__errno>
 80034de:	4603      	mov	r3, r0
 80034e0:	2216      	movs	r2, #22
 80034e2:	601a      	str	r2, [r3, #0]
  return -1;
 80034e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <_exit>:

void _exit (int status)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80034f8:	f04f 31ff 	mov.w	r1, #4294967295
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f7ff ffe7 	bl	80034d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003502:	e7fe      	b.n	8003502 <_exit+0x12>

08003504 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003510:	2300      	movs	r3, #0
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	e00a      	b.n	800352c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003516:	f3af 8000 	nop.w
 800351a:	4601      	mov	r1, r0
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	1c5a      	adds	r2, r3, #1
 8003520:	60ba      	str	r2, [r7, #8]
 8003522:	b2ca      	uxtb	r2, r1
 8003524:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	3301      	adds	r3, #1
 800352a:	617b      	str	r3, [r7, #20]
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	429a      	cmp	r2, r3
 8003532:	dbf0      	blt.n	8003516 <_read+0x12>
  }

  return len;
 8003534:	687b      	ldr	r3, [r7, #4]
}
 8003536:	4618      	mov	r0, r3
 8003538:	3718      	adds	r7, #24
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b086      	sub	sp, #24
 8003542:	af00      	add	r7, sp, #0
 8003544:	60f8      	str	r0, [r7, #12]
 8003546:	60b9      	str	r1, [r7, #8]
 8003548:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800354a:	2300      	movs	r3, #0
 800354c:	617b      	str	r3, [r7, #20]
 800354e:	e009      	b.n	8003564 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	1c5a      	adds	r2, r3, #1
 8003554:	60ba      	str	r2, [r7, #8]
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	4618      	mov	r0, r3
 800355a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	3301      	adds	r3, #1
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	429a      	cmp	r2, r3
 800356a:	dbf1      	blt.n	8003550 <_write+0x12>
  }
  return len;
 800356c:	687b      	ldr	r3, [r7, #4]
}
 800356e:	4618      	mov	r0, r3
 8003570:	3718      	adds	r7, #24
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <_close>:

int _close(int file)
{
 8003576:	b480      	push	{r7}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800357e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003582:	4618      	mov	r0, r3
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
 8003596:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800359e:	605a      	str	r2, [r3, #4]
  return 0;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <_isatty>:

int _isatty(int file)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80035b6:	2301      	movs	r3, #1
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
	...

080035e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035e8:	4a14      	ldr	r2, [pc, #80]	; (800363c <_sbrk+0x5c>)
 80035ea:	4b15      	ldr	r3, [pc, #84]	; (8003640 <_sbrk+0x60>)
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035f4:	4b13      	ldr	r3, [pc, #76]	; (8003644 <_sbrk+0x64>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d102      	bne.n	8003602 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035fc:	4b11      	ldr	r3, [pc, #68]	; (8003644 <_sbrk+0x64>)
 80035fe:	4a12      	ldr	r2, [pc, #72]	; (8003648 <_sbrk+0x68>)
 8003600:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003602:	4b10      	ldr	r3, [pc, #64]	; (8003644 <_sbrk+0x64>)
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4413      	add	r3, r2
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	429a      	cmp	r2, r3
 800360e:	d207      	bcs.n	8003620 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003610:	f013 fb1a 	bl	8016c48 <__errno>
 8003614:	4603      	mov	r3, r0
 8003616:	220c      	movs	r2, #12
 8003618:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800361a:	f04f 33ff 	mov.w	r3, #4294967295
 800361e:	e009      	b.n	8003634 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003620:	4b08      	ldr	r3, [pc, #32]	; (8003644 <_sbrk+0x64>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003626:	4b07      	ldr	r3, [pc, #28]	; (8003644 <_sbrk+0x64>)
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4413      	add	r3, r2
 800362e:	4a05      	ldr	r2, [pc, #20]	; (8003644 <_sbrk+0x64>)
 8003630:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003632:	68fb      	ldr	r3, [r7, #12]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	24050000 	.word	0x24050000
 8003640:	00000800 	.word	0x00000800
 8003644:	2400160c 	.word	0x2400160c
 8003648:	24003250 	.word	0x24003250

0800364c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003650:	4b32      	ldr	r3, [pc, #200]	; (800371c <SystemInit+0xd0>)
 8003652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003656:	4a31      	ldr	r2, [pc, #196]	; (800371c <SystemInit+0xd0>)
 8003658:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800365c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003660:	4b2f      	ldr	r3, [pc, #188]	; (8003720 <SystemInit+0xd4>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 030f 	and.w	r3, r3, #15
 8003668:	2b06      	cmp	r3, #6
 800366a:	d807      	bhi.n	800367c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800366c:	4b2c      	ldr	r3, [pc, #176]	; (8003720 <SystemInit+0xd4>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f023 030f 	bic.w	r3, r3, #15
 8003674:	4a2a      	ldr	r2, [pc, #168]	; (8003720 <SystemInit+0xd4>)
 8003676:	f043 0307 	orr.w	r3, r3, #7
 800367a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800367c:	4b29      	ldr	r3, [pc, #164]	; (8003724 <SystemInit+0xd8>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a28      	ldr	r2, [pc, #160]	; (8003724 <SystemInit+0xd8>)
 8003682:	f043 0301 	orr.w	r3, r3, #1
 8003686:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003688:	4b26      	ldr	r3, [pc, #152]	; (8003724 <SystemInit+0xd8>)
 800368a:	2200      	movs	r2, #0
 800368c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800368e:	4b25      	ldr	r3, [pc, #148]	; (8003724 <SystemInit+0xd8>)
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	4924      	ldr	r1, [pc, #144]	; (8003724 <SystemInit+0xd8>)
 8003694:	4b24      	ldr	r3, [pc, #144]	; (8003728 <SystemInit+0xdc>)
 8003696:	4013      	ands	r3, r2
 8003698:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800369a:	4b21      	ldr	r3, [pc, #132]	; (8003720 <SystemInit+0xd4>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0308 	and.w	r3, r3, #8
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d007      	beq.n	80036b6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80036a6:	4b1e      	ldr	r3, [pc, #120]	; (8003720 <SystemInit+0xd4>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f023 030f 	bic.w	r3, r3, #15
 80036ae:	4a1c      	ldr	r2, [pc, #112]	; (8003720 <SystemInit+0xd4>)
 80036b0:	f043 0307 	orr.w	r3, r3, #7
 80036b4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80036b6:	4b1b      	ldr	r3, [pc, #108]	; (8003724 <SystemInit+0xd8>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80036bc:	4b19      	ldr	r3, [pc, #100]	; (8003724 <SystemInit+0xd8>)
 80036be:	2200      	movs	r2, #0
 80036c0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80036c2:	4b18      	ldr	r3, [pc, #96]	; (8003724 <SystemInit+0xd8>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80036c8:	4b16      	ldr	r3, [pc, #88]	; (8003724 <SystemInit+0xd8>)
 80036ca:	4a18      	ldr	r2, [pc, #96]	; (800372c <SystemInit+0xe0>)
 80036cc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80036ce:	4b15      	ldr	r3, [pc, #84]	; (8003724 <SystemInit+0xd8>)
 80036d0:	4a17      	ldr	r2, [pc, #92]	; (8003730 <SystemInit+0xe4>)
 80036d2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80036d4:	4b13      	ldr	r3, [pc, #76]	; (8003724 <SystemInit+0xd8>)
 80036d6:	4a17      	ldr	r2, [pc, #92]	; (8003734 <SystemInit+0xe8>)
 80036d8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80036da:	4b12      	ldr	r3, [pc, #72]	; (8003724 <SystemInit+0xd8>)
 80036dc:	2200      	movs	r2, #0
 80036de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80036e0:	4b10      	ldr	r3, [pc, #64]	; (8003724 <SystemInit+0xd8>)
 80036e2:	4a14      	ldr	r2, [pc, #80]	; (8003734 <SystemInit+0xe8>)
 80036e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80036e6:	4b0f      	ldr	r3, [pc, #60]	; (8003724 <SystemInit+0xd8>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80036ec:	4b0d      	ldr	r3, [pc, #52]	; (8003724 <SystemInit+0xd8>)
 80036ee:	4a11      	ldr	r2, [pc, #68]	; (8003734 <SystemInit+0xe8>)
 80036f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80036f2:	4b0c      	ldr	r3, [pc, #48]	; (8003724 <SystemInit+0xd8>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80036f8:	4b0a      	ldr	r3, [pc, #40]	; (8003724 <SystemInit+0xd8>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a09      	ldr	r2, [pc, #36]	; (8003724 <SystemInit+0xd8>)
 80036fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003702:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003704:	4b07      	ldr	r3, [pc, #28]	; (8003724 <SystemInit+0xd8>)
 8003706:	2200      	movs	r2, #0
 8003708:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800370a:	4b0b      	ldr	r3, [pc, #44]	; (8003738 <SystemInit+0xec>)
 800370c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003710:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003712:	bf00      	nop
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	e000ed00 	.word	0xe000ed00
 8003720:	52002000 	.word	0x52002000
 8003724:	58024400 	.word	0x58024400
 8003728:	eaf6ed7f 	.word	0xeaf6ed7f
 800372c:	02020200 	.word	0x02020200
 8003730:	01ff0000 	.word	0x01ff0000
 8003734:	01010280 	.word	0x01010280
 8003738:	52004000 	.word	0x52004000

0800373c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800373c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003774 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003740:	f7ff ff84 	bl	800364c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003744:	480c      	ldr	r0, [pc, #48]	; (8003778 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003746:	490d      	ldr	r1, [pc, #52]	; (800377c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003748:	4a0d      	ldr	r2, [pc, #52]	; (8003780 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800374a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800374c:	e002      	b.n	8003754 <LoopCopyDataInit>

0800374e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800374e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003752:	3304      	adds	r3, #4

08003754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003758:	d3f9      	bcc.n	800374e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800375a:	4a0a      	ldr	r2, [pc, #40]	; (8003784 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800375c:	4c0a      	ldr	r4, [pc, #40]	; (8003788 <LoopFillZerobss+0x22>)
  movs r3, #0
 800375e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003760:	e001      	b.n	8003766 <LoopFillZerobss>

08003762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003764:	3204      	adds	r2, #4

08003766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003768:	d3fb      	bcc.n	8003762 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800376a:	f013 fa73 	bl	8016c54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800376e:	f7fd fe57 	bl	8001420 <main>
  bx  lr
 8003772:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003774:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003778:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800377c:	240002d4 	.word	0x240002d4
  ldr r2, =_sidata
 8003780:	0801d910 	.word	0x0801d910
  ldr r2, =_sbss
 8003784:	240002d4 	.word	0x240002d4
  ldr r4, =_ebss
 8003788:	2400324c 	.word	0x2400324c

0800378c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800378c:	e7fe      	b.n	800378c <ADC3_IRQHandler>
	...

08003790 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003796:	2003      	movs	r0, #3
 8003798:	f001 fd06 	bl	80051a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800379c:	f006 fd96 	bl	800a2cc <HAL_RCC_GetSysClockFreq>
 80037a0:	4602      	mov	r2, r0
 80037a2:	4b15      	ldr	r3, [pc, #84]	; (80037f8 <HAL_Init+0x68>)
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	0a1b      	lsrs	r3, r3, #8
 80037a8:	f003 030f 	and.w	r3, r3, #15
 80037ac:	4913      	ldr	r1, [pc, #76]	; (80037fc <HAL_Init+0x6c>)
 80037ae:	5ccb      	ldrb	r3, [r1, r3]
 80037b0:	f003 031f 	and.w	r3, r3, #31
 80037b4:	fa22 f303 	lsr.w	r3, r2, r3
 80037b8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037ba:	4b0f      	ldr	r3, [pc, #60]	; (80037f8 <HAL_Init+0x68>)
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	4a0e      	ldr	r2, [pc, #56]	; (80037fc <HAL_Init+0x6c>)
 80037c4:	5cd3      	ldrb	r3, [r2, r3]
 80037c6:	f003 031f 	and.w	r3, r3, #31
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	fa22 f303 	lsr.w	r3, r2, r3
 80037d0:	4a0b      	ldr	r2, [pc, #44]	; (8003800 <HAL_Init+0x70>)
 80037d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80037d4:	4a0b      	ldr	r2, [pc, #44]	; (8003804 <HAL_Init+0x74>)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037da:	200f      	movs	r0, #15
 80037dc:	f000 f814 	bl	8003808 <HAL_InitTick>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e002      	b.n	80037f0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80037ea:	f7fe ff3b 	bl	8002664 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	58024400 	.word	0x58024400
 80037fc:	0801bb48 	.word	0x0801bb48
 8003800:	24000004 	.word	0x24000004
 8003804:	24000000 	.word	0x24000000

08003808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003810:	4b15      	ldr	r3, [pc, #84]	; (8003868 <HAL_InitTick+0x60>)
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e021      	b.n	8003860 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800381c:	4b13      	ldr	r3, [pc, #76]	; (800386c <HAL_InitTick+0x64>)
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	4b11      	ldr	r3, [pc, #68]	; (8003868 <HAL_InitTick+0x60>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	4619      	mov	r1, r3
 8003826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800382a:	fbb3 f3f1 	udiv	r3, r3, r1
 800382e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003832:	4618      	mov	r0, r3
 8003834:	f001 fceb 	bl	800520e <HAL_SYSTICK_Config>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e00e      	b.n	8003860 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b0f      	cmp	r3, #15
 8003846:	d80a      	bhi.n	800385e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003848:	2200      	movs	r2, #0
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	f04f 30ff 	mov.w	r0, #4294967295
 8003850:	f001 fcb5 	bl	80051be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003854:	4a06      	ldr	r2, [pc, #24]	; (8003870 <HAL_InitTick+0x68>)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800385a:	2300      	movs	r3, #0
 800385c:	e000      	b.n	8003860 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
}
 8003860:	4618      	mov	r0, r3
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	2400000c 	.word	0x2400000c
 800386c:	24000000 	.word	0x24000000
 8003870:	24000008 	.word	0x24000008

08003874 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003878:	4b06      	ldr	r3, [pc, #24]	; (8003894 <HAL_IncTick+0x20>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	461a      	mov	r2, r3
 800387e:	4b06      	ldr	r3, [pc, #24]	; (8003898 <HAL_IncTick+0x24>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4413      	add	r3, r2
 8003884:	4a04      	ldr	r2, [pc, #16]	; (8003898 <HAL_IncTick+0x24>)
 8003886:	6013      	str	r3, [r2, #0]
}
 8003888:	bf00      	nop
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	2400000c 	.word	0x2400000c
 8003898:	24001610 	.word	0x24001610

0800389c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
  return uwTick;
 80038a0:	4b03      	ldr	r3, [pc, #12]	; (80038b0 <HAL_GetTick+0x14>)
 80038a2:	681b      	ldr	r3, [r3, #0]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	24001610 	.word	0x24001610

080038b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038bc:	f7ff ffee 	bl	800389c <HAL_GetTick>
 80038c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038cc:	d005      	beq.n	80038da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038ce:	4b0a      	ldr	r3, [pc, #40]	; (80038f8 <HAL_Delay+0x44>)
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	461a      	mov	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4413      	add	r3, r2
 80038d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038da:	bf00      	nop
 80038dc:	f7ff ffde 	bl	800389c <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d8f7      	bhi.n	80038dc <HAL_Delay+0x28>
  {
  }
}
 80038ec:	bf00      	nop
 80038ee:	bf00      	nop
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	2400000c 	.word	0x2400000c

080038fc <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003906:	4b07      	ldr	r3, [pc, #28]	; (8003924 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	43db      	mvns	r3, r3
 800390e:	401a      	ands	r2, r3
 8003910:	4904      	ldr	r1, [pc, #16]	; (8003924 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	4313      	orrs	r3, r2
 8003916:	604b      	str	r3, [r1, #4]
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr
 8003924:	58000400 	.word	0x58000400

08003928 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	431a      	orrs	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	609a      	str	r2, [r3, #8]
}
 8003942:	bf00      	nop
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800394e:	b480      	push	{r7}
 8003950:	b083      	sub	sp, #12
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
 8003956:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	431a      	orrs	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	609a      	str	r2, [r3, #8]
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003984:	4618      	mov	r0, r3
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003990:	b480      	push	{r7}
 8003992:	b087      	sub	sp, #28
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
 800399c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	3360      	adds	r3, #96	; 0x60
 80039a2:	461a      	mov	r2, r3
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	4a10      	ldr	r2, [pc, #64]	; (80039f0 <LL_ADC_SetOffset+0x60>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d10b      	bne.n	80039cc <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80039ca:	e00b      	b.n	80039e4 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	430b      	orrs	r3, r1
 80039de:	431a      	orrs	r2, r3
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	601a      	str	r2, [r3, #0]
}
 80039e4:	bf00      	nop
 80039e6:	371c      	adds	r7, #28
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	58026000 	.word	0x58026000

080039f4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	3360      	adds	r3, #96	; 0x60
 8003a02:	461a      	mov	r2, r3
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	f003 031f 	and.w	r3, r3, #31
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a40:	431a      	orrs	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	611a      	str	r2, [r3, #16]
}
 8003a46:	bf00      	nop
 8003a48:	3714      	adds	r7, #20
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
	...

08003a54 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b087      	sub	sp, #28
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	4a0c      	ldr	r2, [pc, #48]	; (8003a94 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d00e      	beq.n	8003a86 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	3360      	adds	r3, #96	; 0x60
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4413      	add	r3, r2
 8003a74:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	431a      	orrs	r2, r3
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	601a      	str	r2, [r3, #0]
  }
}
 8003a86:	bf00      	nop
 8003a88:	371c      	adds	r7, #28
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	58026000 	.word	0x58026000

08003a98 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b087      	sub	sp, #28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4a0c      	ldr	r2, [pc, #48]	; (8003ad8 <LL_ADC_SetOffsetSaturation+0x40>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d10e      	bne.n	8003aca <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	3360      	adds	r3, #96	; 0x60
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	4413      	add	r3, r2
 8003ab8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003aca:	bf00      	nop
 8003acc:	371c      	adds	r7, #28
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	58026000 	.word	0x58026000

08003adc <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4a0c      	ldr	r2, [pc, #48]	; (8003b1c <LL_ADC_SetOffsetSign+0x40>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d10e      	bne.n	8003b0e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	3360      	adds	r3, #96	; 0x60
 8003af4:	461a      	mov	r2, r3
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	4413      	add	r3, r2
 8003afc:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003b0e:	bf00      	nop
 8003b10:	371c      	adds	r7, #28
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	58026000 	.word	0x58026000

08003b20 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b087      	sub	sp, #28
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	3360      	adds	r3, #96	; 0x60
 8003b30:	461a      	mov	r2, r3
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4413      	add	r3, r2
 8003b38:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	4a0c      	ldr	r2, [pc, #48]	; (8003b70 <LL_ADC_SetOffsetState+0x50>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d108      	bne.n	8003b54 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003b52:	e007      	b.n	8003b64 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	601a      	str	r2, [r3, #0]
}
 8003b64:	bf00      	nop
 8003b66:	371c      	adds	r7, #28
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	58026000 	.word	0x58026000

08003b74 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b087      	sub	sp, #28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	3330      	adds	r3, #48	; 0x30
 8003b84:	461a      	mov	r2, r3
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	0a1b      	lsrs	r3, r3, #8
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	f003 030c 	and.w	r3, r3, #12
 8003b90:	4413      	add	r3, r2
 8003b92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	f003 031f 	and.w	r3, r3, #31
 8003b9e:	211f      	movs	r1, #31
 8003ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	401a      	ands	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	0e9b      	lsrs	r3, r3, #26
 8003bac:	f003 011f 	and.w	r1, r3, #31
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	f003 031f 	and.w	r3, r3, #31
 8003bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003bc0:	bf00      	nop
 8003bc2:	371c      	adds	r7, #28
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b087      	sub	sp, #28
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	3314      	adds	r3, #20
 8003bdc:	461a      	mov	r2, r3
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	0e5b      	lsrs	r3, r3, #25
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	4413      	add	r3, r2
 8003bea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	0d1b      	lsrs	r3, r3, #20
 8003bf4:	f003 031f 	and.w	r3, r3, #31
 8003bf8:	2107      	movs	r1, #7
 8003bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfe:	43db      	mvns	r3, r3
 8003c00:	401a      	ands	r2, r3
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	0d1b      	lsrs	r3, r3, #20
 8003c06:	f003 031f 	and.w	r3, r3, #31
 8003c0a:	6879      	ldr	r1, [r7, #4]
 8003c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c10:	431a      	orrs	r2, r3
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003c16:	bf00      	nop
 8003c18:	371c      	adds	r7, #28
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
	...

08003c24 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4a1a      	ldr	r2, [pc, #104]	; (8003c9c <LL_ADC_SetChannelSingleDiff+0x78>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d115      	bne.n	8003c64 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c44:	43db      	mvns	r3, r3
 8003c46:	401a      	ands	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f003 0318 	and.w	r3, r3, #24
 8003c4e:	4914      	ldr	r1, [pc, #80]	; (8003ca0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003c50:	40d9      	lsrs	r1, r3
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	400b      	ands	r3, r1
 8003c56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003c62:	e014      	b.n	8003c8e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c70:	43db      	mvns	r3, r3
 8003c72:	401a      	ands	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f003 0318 	and.w	r3, r3, #24
 8003c7a:	4909      	ldr	r1, [pc, #36]	; (8003ca0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003c7c:	40d9      	lsrs	r1, r3
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	400b      	ands	r3, r1
 8003c82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c86:	431a      	orrs	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003c8e:	bf00      	nop
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	58026000 	.word	0x58026000
 8003ca0:	000fffff 	.word	0x000fffff

08003ca4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	4b04      	ldr	r3, [pc, #16]	; (8003cc4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	6093      	str	r3, [r2, #8]
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	5fffffc0 	.word	0x5fffffc0

08003cc8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cdc:	d101      	bne.n	8003ce2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e000      	b.n	8003ce4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <LL_ADC_EnableInternalRegulator+0x24>)
 8003cfe:	4013      	ands	r3, r2
 8003d00:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	6fffffc0 	.word	0x6fffffc0

08003d18 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d2c:	d101      	bne.n	8003d32 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e000      	b.n	8003d34 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d101      	bne.n	8003d58 <LL_ADC_IsEnabled+0x18>
 8003d54:	2301      	movs	r3, #1
 8003d56:	e000      	b.n	8003d5a <LL_ADC_IsEnabled+0x1a>
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr

08003d66 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003d66:	b480      	push	{r7}
 8003d68:	b083      	sub	sp, #12
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f003 0304 	and.w	r3, r3, #4
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	d101      	bne.n	8003d7e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e000      	b.n	8003d80 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f003 0308 	and.w	r3, r3, #8
 8003d9c:	2b08      	cmp	r3, #8
 8003d9e:	d101      	bne.n	8003da4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003da0:	2301      	movs	r3, #1
 8003da2:	e000      	b.n	8003da6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
	...

08003db4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003db4:	b590      	push	{r4, r7, lr}
 8003db6:	b089      	sub	sp, #36	; 0x24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e1ee      	b.n	80041ac <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d109      	bne.n	8003df0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f7fe fc5b 	bl	8002698 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7ff ff67 	bl	8003cc8 <LL_ADC_IsDeepPowerDownEnabled>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d004      	beq.n	8003e0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff ff4d 	bl	8003ca4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7ff ff82 	bl	8003d18 <LL_ADC_IsInternalRegulatorEnabled>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d114      	bne.n	8003e44 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7ff ff66 	bl	8003cf0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e24:	4b8e      	ldr	r3, [pc, #568]	; (8004060 <HAL_ADC_Init+0x2ac>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	099b      	lsrs	r3, r3, #6
 8003e2a:	4a8e      	ldr	r2, [pc, #568]	; (8004064 <HAL_ADC_Init+0x2b0>)
 8003e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e30:	099b      	lsrs	r3, r3, #6
 8003e32:	3301      	adds	r3, #1
 8003e34:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003e36:	e002      	b.n	8003e3e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1f9      	bne.n	8003e38 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7ff ff65 	bl	8003d18 <LL_ADC_IsInternalRegulatorEnabled>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10d      	bne.n	8003e70 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e58:	f043 0210 	orr.w	r2, r3, #16
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e64:	f043 0201 	orr.w	r2, r3, #1
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff ff76 	bl	8003d66 <LL_ADC_REG_IsConversionOngoing>
 8003e7a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e80:	f003 0310 	and.w	r3, r3, #16
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f040 8188 	bne.w	800419a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f040 8184 	bne.w	800419a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e96:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003e9a:	f043 0202 	orr.w	r2, r3, #2
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7ff ff4a 	bl	8003d40 <LL_ADC_IsEnabled>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d136      	bne.n	8003f20 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a6c      	ldr	r2, [pc, #432]	; (8004068 <HAL_ADC_Init+0x2b4>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d004      	beq.n	8003ec6 <HAL_ADC_Init+0x112>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a6a      	ldr	r2, [pc, #424]	; (800406c <HAL_ADC_Init+0x2b8>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d10e      	bne.n	8003ee4 <HAL_ADC_Init+0x130>
 8003ec6:	4868      	ldr	r0, [pc, #416]	; (8004068 <HAL_ADC_Init+0x2b4>)
 8003ec8:	f7ff ff3a 	bl	8003d40 <LL_ADC_IsEnabled>
 8003ecc:	4604      	mov	r4, r0
 8003ece:	4867      	ldr	r0, [pc, #412]	; (800406c <HAL_ADC_Init+0x2b8>)
 8003ed0:	f7ff ff36 	bl	8003d40 <LL_ADC_IsEnabled>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	4323      	orrs	r3, r4
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	bf0c      	ite	eq
 8003edc:	2301      	moveq	r3, #1
 8003ede:	2300      	movne	r3, #0
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	e008      	b.n	8003ef6 <HAL_ADC_Init+0x142>
 8003ee4:	4862      	ldr	r0, [pc, #392]	; (8004070 <HAL_ADC_Init+0x2bc>)
 8003ee6:	f7ff ff2b 	bl	8003d40 <LL_ADC_IsEnabled>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	bf0c      	ite	eq
 8003ef0:	2301      	moveq	r3, #1
 8003ef2:	2300      	movne	r3, #0
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d012      	beq.n	8003f20 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a5a      	ldr	r2, [pc, #360]	; (8004068 <HAL_ADC_Init+0x2b4>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d004      	beq.n	8003f0e <HAL_ADC_Init+0x15a>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a58      	ldr	r2, [pc, #352]	; (800406c <HAL_ADC_Init+0x2b8>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d101      	bne.n	8003f12 <HAL_ADC_Init+0x15e>
 8003f0e:	4a59      	ldr	r2, [pc, #356]	; (8004074 <HAL_ADC_Init+0x2c0>)
 8003f10:	e000      	b.n	8003f14 <HAL_ADC_Init+0x160>
 8003f12:	4a59      	ldr	r2, [pc, #356]	; (8004078 <HAL_ADC_Init+0x2c4>)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4610      	mov	r0, r2
 8003f1c:	f7ff fd04 	bl	8003928 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a52      	ldr	r2, [pc, #328]	; (8004070 <HAL_ADC_Init+0x2bc>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d129      	bne.n	8003f7e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	7e5b      	ldrb	r3, [r3, #25]
 8003f2e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003f34:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003f3a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	2b08      	cmp	r3, #8
 8003f42:	d013      	beq.n	8003f6c <HAL_ADC_Init+0x1b8>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	2b0c      	cmp	r3, #12
 8003f4a:	d00d      	beq.n	8003f68 <HAL_ADC_Init+0x1b4>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	2b1c      	cmp	r3, #28
 8003f52:	d007      	beq.n	8003f64 <HAL_ADC_Init+0x1b0>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	2b18      	cmp	r3, #24
 8003f5a:	d101      	bne.n	8003f60 <HAL_ADC_Init+0x1ac>
 8003f5c:	2318      	movs	r3, #24
 8003f5e:	e006      	b.n	8003f6e <HAL_ADC_Init+0x1ba>
 8003f60:	2300      	movs	r3, #0
 8003f62:	e004      	b.n	8003f6e <HAL_ADC_Init+0x1ba>
 8003f64:	2310      	movs	r3, #16
 8003f66:	e002      	b.n	8003f6e <HAL_ADC_Init+0x1ba>
 8003f68:	2308      	movs	r3, #8
 8003f6a:	e000      	b.n	8003f6e <HAL_ADC_Init+0x1ba>
 8003f6c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003f6e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f76:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	61bb      	str	r3, [r7, #24]
 8003f7c:	e00e      	b.n	8003f9c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	7e5b      	ldrb	r3, [r3, #25]
 8003f82:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003f88:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003f8e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f96:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d106      	bne.n	8003fb4 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	3b01      	subs	r3, #1
 8003fac:	045b      	lsls	r3, r3, #17
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d009      	beq.n	8003fd0 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a26      	ldr	r2, [pc, #152]	; (8004070 <HAL_ADC_Init+0x2bc>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d115      	bne.n	8004006 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68da      	ldr	r2, [r3, #12]
 8003fe0:	4b26      	ldr	r3, [pc, #152]	; (800407c <HAL_ADC_Init+0x2c8>)
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6812      	ldr	r2, [r2, #0]
 8003fe8:	69b9      	ldr	r1, [r7, #24]
 8003fea:	430b      	orrs	r3, r1
 8003fec:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	611a      	str	r2, [r3, #16]
 8004004:	e009      	b.n	800401a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68da      	ldr	r2, [r3, #12]
 800400c:	4b1c      	ldr	r3, [pc, #112]	; (8004080 <HAL_ADC_Init+0x2cc>)
 800400e:	4013      	ands	r3, r2
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	6812      	ldr	r2, [r2, #0]
 8004014:	69b9      	ldr	r1, [r7, #24]
 8004016:	430b      	orrs	r3, r1
 8004018:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4618      	mov	r0, r3
 8004020:	f7ff fea1 	bl	8003d66 <LL_ADC_REG_IsConversionOngoing>
 8004024:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff feae 	bl	8003d8c <LL_ADC_INJ_IsConversionOngoing>
 8004030:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	2b00      	cmp	r3, #0
 8004036:	f040 808e 	bne.w	8004156 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2b00      	cmp	r3, #0
 800403e:	f040 808a 	bne.w	8004156 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a0a      	ldr	r2, [pc, #40]	; (8004070 <HAL_ADC_Init+0x2bc>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d11b      	bne.n	8004084 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	7e1b      	ldrb	r3, [r3, #24]
 8004050:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004058:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800405a:	4313      	orrs	r3, r2
 800405c:	61bb      	str	r3, [r7, #24]
 800405e:	e018      	b.n	8004092 <HAL_ADC_Init+0x2de>
 8004060:	24000000 	.word	0x24000000
 8004064:	053e2d63 	.word	0x053e2d63
 8004068:	40022000 	.word	0x40022000
 800406c:	40022100 	.word	0x40022100
 8004070:	58026000 	.word	0x58026000
 8004074:	40022300 	.word	0x40022300
 8004078:	58026300 	.word	0x58026300
 800407c:	fff04007 	.word	0xfff04007
 8004080:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	7e1b      	ldrb	r3, [r3, #24]
 8004088:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 800408e:	4313      	orrs	r3, r2
 8004090:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68da      	ldr	r2, [r3, #12]
 8004098:	4b46      	ldr	r3, [pc, #280]	; (80041b4 <HAL_ADC_Init+0x400>)
 800409a:	4013      	ands	r3, r2
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6812      	ldr	r2, [r2, #0]
 80040a0:	69b9      	ldr	r1, [r7, #24]
 80040a2:	430b      	orrs	r3, r1
 80040a4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d137      	bne.n	8004120 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b4:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a3f      	ldr	r2, [pc, #252]	; (80041b8 <HAL_ADC_Init+0x404>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d116      	bne.n	80040ee <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	691a      	ldr	r2, [r3, #16]
 80040c6:	4b3d      	ldr	r3, [pc, #244]	; (80041bc <HAL_ADC_Init+0x408>)
 80040c8:	4013      	ands	r3, r2
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80040d2:	4311      	orrs	r1, r2
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80040d8:	4311      	orrs	r1, r2
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80040de:	430a      	orrs	r2, r1
 80040e0:	431a      	orrs	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f042 0201 	orr.w	r2, r2, #1
 80040ea:	611a      	str	r2, [r3, #16]
 80040ec:	e020      	b.n	8004130 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	691a      	ldr	r2, [r3, #16]
 80040f4:	4b32      	ldr	r3, [pc, #200]	; (80041c0 <HAL_ADC_Init+0x40c>)
 80040f6:	4013      	ands	r3, r2
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80040fc:	3a01      	subs	r2, #1
 80040fe:	0411      	lsls	r1, r2, #16
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004104:	4311      	orrs	r1, r2
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800410a:	4311      	orrs	r1, r2
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004110:	430a      	orrs	r2, r1
 8004112:	431a      	orrs	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f042 0201 	orr.w	r2, r2, #1
 800411c:	611a      	str	r2, [r3, #16]
 800411e:	e007      	b.n	8004130 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	691a      	ldr	r2, [r3, #16]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 0201 	bic.w	r2, r2, #1
 800412e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a1b      	ldr	r2, [pc, #108]	; (80041b8 <HAL_ADC_Init+0x404>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d002      	beq.n	8004156 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 fd63 	bl	8004c1c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d10c      	bne.n	8004178 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004164:	f023 010f 	bic.w	r1, r3, #15
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	69db      	ldr	r3, [r3, #28]
 800416c:	1e5a      	subs	r2, r3, #1
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	430a      	orrs	r2, r1
 8004174:	631a      	str	r2, [r3, #48]	; 0x30
 8004176:	e007      	b.n	8004188 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f022 020f 	bic.w	r2, r2, #15
 8004186:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800418c:	f023 0303 	bic.w	r3, r3, #3
 8004190:	f043 0201 	orr.w	r2, r3, #1
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	661a      	str	r2, [r3, #96]	; 0x60
 8004198:	e007      	b.n	80041aa <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800419e:	f043 0210 	orr.w	r2, r3, #16
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80041aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3724      	adds	r7, #36	; 0x24
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd90      	pop	{r4, r7, pc}
 80041b4:	ffffbffc 	.word	0xffffbffc
 80041b8:	58026000 	.word	0x58026000
 80041bc:	fc00f81f 	.word	0xfc00f81f
 80041c0:	fc00f81e 	.word	0xfc00f81e

080041c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80041c4:	b590      	push	{r4, r7, lr}
 80041c6:	b0b9      	sub	sp, #228	; 0xe4
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041ce:	2300      	movs	r3, #0
 80041d0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80041d4:	2300      	movs	r3, #0
 80041d6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041de:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	4aa9      	ldr	r2, [pc, #676]	; (800448c <HAL_ADC_ConfigChannel+0x2c8>)
 80041e6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d102      	bne.n	80041f8 <HAL_ADC_ConfigChannel+0x34>
 80041f2:	2302      	movs	r3, #2
 80041f4:	f000 bcfa 	b.w	8004bec <HAL_ADC_ConfigChannel+0xa28>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4618      	mov	r0, r3
 8004206:	f7ff fdae 	bl	8003d66 <LL_ADC_REG_IsConversionOngoing>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	f040 84de 	bne.w	8004bce <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a9e      	ldr	r2, [pc, #632]	; (8004490 <HAL_ADC_ConfigChannel+0x2cc>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d033      	beq.n	8004284 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004224:	2b00      	cmp	r3, #0
 8004226:	d108      	bne.n	800423a <HAL_ADC_ConfigChannel+0x76>
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	0e9b      	lsrs	r3, r3, #26
 800422e:	f003 031f 	and.w	r3, r3, #31
 8004232:	2201      	movs	r2, #1
 8004234:	fa02 f303 	lsl.w	r3, r2, r3
 8004238:	e01d      	b.n	8004276 <HAL_ADC_ConfigChannel+0xb2>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004242:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004246:	fa93 f3a3 	rbit	r3, r3
 800424a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800424e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004252:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004256:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 800425e:	2320      	movs	r3, #32
 8004260:	e004      	b.n	800426c <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8004262:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004266:	fab3 f383 	clz	r3, r3
 800426a:	b2db      	uxtb	r3, r3
 800426c:	f003 031f 	and.w	r3, r3, #31
 8004270:	2201      	movs	r2, #1
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	6812      	ldr	r2, [r2, #0]
 800427a:	69d1      	ldr	r1, [r2, #28]
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6812      	ldr	r2, [r2, #0]
 8004280:	430b      	orrs	r3, r1
 8004282:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6818      	ldr	r0, [r3, #0]
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	6859      	ldr	r1, [r3, #4]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	461a      	mov	r2, r3
 8004292:	f7ff fc6f 	bl	8003b74 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4618      	mov	r0, r3
 800429c:	f7ff fd63 	bl	8003d66 <LL_ADC_REG_IsConversionOngoing>
 80042a0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7ff fd6f 	bl	8003d8c <LL_ADC_INJ_IsConversionOngoing>
 80042ae:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80042b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f040 8270 	bne.w	800479c <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80042bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f040 826b 	bne.w	800479c <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6818      	ldr	r0, [r3, #0]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	6819      	ldr	r1, [r3, #0]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	461a      	mov	r2, r3
 80042d4:	f7ff fc7a 	bl	8003bcc <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a6c      	ldr	r2, [pc, #432]	; (8004490 <HAL_ADC_ConfigChannel+0x2cc>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d10d      	bne.n	80042fe <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	695a      	ldr	r2, [r3, #20]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	08db      	lsrs	r3, r3, #3
 80042ee:	f003 0303 	and.w	r3, r3, #3
 80042f2:	005b      	lsls	r3, r3, #1
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80042fc:	e032      	b.n	8004364 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80042fe:	4b65      	ldr	r3, [pc, #404]	; (8004494 <HAL_ADC_ConfigChannel+0x2d0>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004306:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800430a:	d10b      	bne.n	8004324 <HAL_ADC_ConfigChannel+0x160>
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	695a      	ldr	r2, [r3, #20]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	089b      	lsrs	r3, r3, #2
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	fa02 f303 	lsl.w	r3, r2, r3
 8004322:	e01d      	b.n	8004360 <HAL_ADC_ConfigChannel+0x19c>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	f003 0310 	and.w	r3, r3, #16
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10b      	bne.n	800434a <HAL_ADC_ConfigChannel+0x186>
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	695a      	ldr	r2, [r3, #20]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	089b      	lsrs	r3, r3, #2
 800433e:	f003 0307 	and.w	r3, r3, #7
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	fa02 f303 	lsl.w	r3, r2, r3
 8004348:	e00a      	b.n	8004360 <HAL_ADC_ConfigChannel+0x19c>
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	695a      	ldr	r2, [r3, #20]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	089b      	lsrs	r3, r3, #2
 8004356:	f003 0304 	and.w	r3, r3, #4
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	fa02 f303 	lsl.w	r3, r2, r3
 8004360:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	2b04      	cmp	r3, #4
 800436a:	d048      	beq.n	80043fe <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6818      	ldr	r0, [r3, #0]
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	6919      	ldr	r1, [r3, #16]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800437c:	f7ff fb08 	bl	8003990 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a42      	ldr	r2, [pc, #264]	; (8004490 <HAL_ADC_ConfigChannel+0x2cc>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d119      	bne.n	80043be <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6818      	ldr	r0, [r3, #0]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	6919      	ldr	r1, [r3, #16]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	461a      	mov	r2, r3
 8004398:	f7ff fba0 	bl	8003adc <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6818      	ldr	r0, [r3, #0]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	6919      	ldr	r1, [r3, #16]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d102      	bne.n	80043b4 <HAL_ADC_ConfigChannel+0x1f0>
 80043ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043b2:	e000      	b.n	80043b6 <HAL_ADC_ConfigChannel+0x1f2>
 80043b4:	2300      	movs	r3, #0
 80043b6:	461a      	mov	r2, r3
 80043b8:	f7ff fb6e 	bl	8003a98 <LL_ADC_SetOffsetSaturation>
 80043bc:	e1ee      	b.n	800479c <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6818      	ldr	r0, [r3, #0]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	6919      	ldr	r1, [r3, #16]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d102      	bne.n	80043d6 <HAL_ADC_ConfigChannel+0x212>
 80043d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80043d4:	e000      	b.n	80043d8 <HAL_ADC_ConfigChannel+0x214>
 80043d6:	2300      	movs	r3, #0
 80043d8:	461a      	mov	r2, r3
 80043da:	f7ff fb3b 	bl	8003a54 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6818      	ldr	r0, [r3, #0]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	6919      	ldr	r1, [r3, #16]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	7e1b      	ldrb	r3, [r3, #24]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d102      	bne.n	80043f4 <HAL_ADC_ConfigChannel+0x230>
 80043ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80043f2:	e000      	b.n	80043f6 <HAL_ADC_ConfigChannel+0x232>
 80043f4:	2300      	movs	r3, #0
 80043f6:	461a      	mov	r2, r3
 80043f8:	f7ff fb12 	bl	8003a20 <LL_ADC_SetDataRightShift>
 80043fc:	e1ce      	b.n	800479c <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a23      	ldr	r2, [pc, #140]	; (8004490 <HAL_ADC_ConfigChannel+0x2cc>)
 8004404:	4293      	cmp	r3, r2
 8004406:	f040 8181 	bne.w	800470c <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2100      	movs	r1, #0
 8004410:	4618      	mov	r0, r3
 8004412:	f7ff faef 	bl	80039f4 <LL_ADC_GetOffsetChannel>
 8004416:	4603      	mov	r3, r0
 8004418:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10a      	bne.n	8004436 <HAL_ADC_ConfigChannel+0x272>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2100      	movs	r1, #0
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff fae4 	bl	80039f4 <LL_ADC_GetOffsetChannel>
 800442c:	4603      	mov	r3, r0
 800442e:	0e9b      	lsrs	r3, r3, #26
 8004430:	f003 021f 	and.w	r2, r3, #31
 8004434:	e01e      	b.n	8004474 <HAL_ADC_ConfigChannel+0x2b0>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2100      	movs	r1, #0
 800443c:	4618      	mov	r0, r3
 800443e:	f7ff fad9 	bl	80039f4 <LL_ADC_GetOffsetChannel>
 8004442:	4603      	mov	r3, r0
 8004444:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004448:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800444c:	fa93 f3a3 	rbit	r3, r3
 8004450:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8004454:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004458:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 800445c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8004464:	2320      	movs	r3, #32
 8004466:	e004      	b.n	8004472 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8004468:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800446c:	fab3 f383 	clz	r3, r3
 8004470:	b2db      	uxtb	r3, r3
 8004472:	461a      	mov	r2, r3
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800447c:	2b00      	cmp	r3, #0
 800447e:	d10b      	bne.n	8004498 <HAL_ADC_ConfigChannel+0x2d4>
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	0e9b      	lsrs	r3, r3, #26
 8004486:	f003 031f 	and.w	r3, r3, #31
 800448a:	e01e      	b.n	80044ca <HAL_ADC_ConfigChannel+0x306>
 800448c:	47ff0000 	.word	0x47ff0000
 8004490:	58026000 	.word	0x58026000
 8004494:	5c001000 	.word	0x5c001000
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044a4:	fa93 f3a3 	rbit	r3, r3
 80044a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80044ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80044b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80044b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 80044bc:	2320      	movs	r3, #32
 80044be:	e004      	b.n	80044ca <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 80044c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80044c4:	fab3 f383 	clz	r3, r3
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d106      	bne.n	80044dc <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2200      	movs	r2, #0
 80044d4:	2100      	movs	r1, #0
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7ff fb22 	bl	8003b20 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2101      	movs	r1, #1
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7ff fa86 	bl	80039f4 <LL_ADC_GetOffsetChannel>
 80044e8:	4603      	mov	r3, r0
 80044ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10a      	bne.n	8004508 <HAL_ADC_ConfigChannel+0x344>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2101      	movs	r1, #1
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7ff fa7b 	bl	80039f4 <LL_ADC_GetOffsetChannel>
 80044fe:	4603      	mov	r3, r0
 8004500:	0e9b      	lsrs	r3, r3, #26
 8004502:	f003 021f 	and.w	r2, r3, #31
 8004506:	e01e      	b.n	8004546 <HAL_ADC_ConfigChannel+0x382>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2101      	movs	r1, #1
 800450e:	4618      	mov	r0, r3
 8004510:	f7ff fa70 	bl	80039f4 <LL_ADC_GetOffsetChannel>
 8004514:	4603      	mov	r3, r0
 8004516:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800451a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800451e:	fa93 f3a3 	rbit	r3, r3
 8004522:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004526:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800452a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800452e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8004536:	2320      	movs	r3, #32
 8004538:	e004      	b.n	8004544 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800453a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800453e:	fab3 f383 	clz	r3, r3
 8004542:	b2db      	uxtb	r3, r3
 8004544:	461a      	mov	r2, r3
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800454e:	2b00      	cmp	r3, #0
 8004550:	d105      	bne.n	800455e <HAL_ADC_ConfigChannel+0x39a>
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	0e9b      	lsrs	r3, r3, #26
 8004558:	f003 031f 	and.w	r3, r3, #31
 800455c:	e018      	b.n	8004590 <HAL_ADC_ConfigChannel+0x3cc>
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004566:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800456a:	fa93 f3a3 	rbit	r3, r3
 800456e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004572:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004576:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800457a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8004582:	2320      	movs	r3, #32
 8004584:	e004      	b.n	8004590 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8004586:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800458a:	fab3 f383 	clz	r3, r3
 800458e:	b2db      	uxtb	r3, r3
 8004590:	429a      	cmp	r2, r3
 8004592:	d106      	bne.n	80045a2 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2200      	movs	r2, #0
 800459a:	2101      	movs	r1, #1
 800459c:	4618      	mov	r0, r3
 800459e:	f7ff fabf 	bl	8003b20 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2102      	movs	r1, #2
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7ff fa23 	bl	80039f4 <LL_ADC_GetOffsetChannel>
 80045ae:	4603      	mov	r3, r0
 80045b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10a      	bne.n	80045ce <HAL_ADC_ConfigChannel+0x40a>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2102      	movs	r1, #2
 80045be:	4618      	mov	r0, r3
 80045c0:	f7ff fa18 	bl	80039f4 <LL_ADC_GetOffsetChannel>
 80045c4:	4603      	mov	r3, r0
 80045c6:	0e9b      	lsrs	r3, r3, #26
 80045c8:	f003 021f 	and.w	r2, r3, #31
 80045cc:	e01e      	b.n	800460c <HAL_ADC_ConfigChannel+0x448>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2102      	movs	r1, #2
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff fa0d 	bl	80039f4 <LL_ADC_GetOffsetChannel>
 80045da:	4603      	mov	r3, r0
 80045dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045e4:	fa93 f3a3 	rbit	r3, r3
 80045e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80045ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80045f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 80045fc:	2320      	movs	r3, #32
 80045fe:	e004      	b.n	800460a <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8004600:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004604:	fab3 f383 	clz	r3, r3
 8004608:	b2db      	uxtb	r3, r3
 800460a:	461a      	mov	r2, r3
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004614:	2b00      	cmp	r3, #0
 8004616:	d105      	bne.n	8004624 <HAL_ADC_ConfigChannel+0x460>
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	0e9b      	lsrs	r3, r3, #26
 800461e:	f003 031f 	and.w	r3, r3, #31
 8004622:	e014      	b.n	800464e <HAL_ADC_ConfigChannel+0x48a>
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800462c:	fa93 f3a3 	rbit	r3, r3
 8004630:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004632:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004634:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004638:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8004640:	2320      	movs	r3, #32
 8004642:	e004      	b.n	800464e <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8004644:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004648:	fab3 f383 	clz	r3, r3
 800464c:	b2db      	uxtb	r3, r3
 800464e:	429a      	cmp	r2, r3
 8004650:	d106      	bne.n	8004660 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2200      	movs	r2, #0
 8004658:	2102      	movs	r1, #2
 800465a:	4618      	mov	r0, r3
 800465c:	f7ff fa60 	bl	8003b20 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2103      	movs	r1, #3
 8004666:	4618      	mov	r0, r3
 8004668:	f7ff f9c4 	bl	80039f4 <LL_ADC_GetOffsetChannel>
 800466c:	4603      	mov	r3, r0
 800466e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10a      	bne.n	800468c <HAL_ADC_ConfigChannel+0x4c8>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2103      	movs	r1, #3
 800467c:	4618      	mov	r0, r3
 800467e:	f7ff f9b9 	bl	80039f4 <LL_ADC_GetOffsetChannel>
 8004682:	4603      	mov	r3, r0
 8004684:	0e9b      	lsrs	r3, r3, #26
 8004686:	f003 021f 	and.w	r2, r3, #31
 800468a:	e017      	b.n	80046bc <HAL_ADC_ConfigChannel+0x4f8>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2103      	movs	r1, #3
 8004692:	4618      	mov	r0, r3
 8004694:	f7ff f9ae 	bl	80039f4 <LL_ADC_GetOffsetChannel>
 8004698:	4603      	mov	r3, r0
 800469a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800469e:	fa93 f3a3 	rbit	r3, r3
 80046a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80046a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046a6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80046a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80046ae:	2320      	movs	r3, #32
 80046b0:	e003      	b.n	80046ba <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80046b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046b4:	fab3 f383 	clz	r3, r3
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	461a      	mov	r2, r3
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d105      	bne.n	80046d4 <HAL_ADC_ConfigChannel+0x510>
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	0e9b      	lsrs	r3, r3, #26
 80046ce:	f003 031f 	and.w	r3, r3, #31
 80046d2:	e011      	b.n	80046f8 <HAL_ADC_ConfigChannel+0x534>
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046dc:	fa93 f3a3 	rbit	r3, r3
 80046e0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80046e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046e4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80046e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 80046ec:	2320      	movs	r3, #32
 80046ee:	e003      	b.n	80046f8 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 80046f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046f2:	fab3 f383 	clz	r3, r3
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d14f      	bne.n	800479c <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2200      	movs	r2, #0
 8004702:	2103      	movs	r1, #3
 8004704:	4618      	mov	r0, r3
 8004706:	f7ff fa0b 	bl	8003b20 <LL_ADC_SetOffsetState>
 800470a:	e047      	b.n	800479c <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004712:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	069b      	lsls	r3, r3, #26
 800471c:	429a      	cmp	r2, r3
 800471e:	d107      	bne.n	8004730 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800472e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004736:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	069b      	lsls	r3, r3, #26
 8004740:	429a      	cmp	r2, r3
 8004742:	d107      	bne.n	8004754 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004752:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800475a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	069b      	lsls	r3, r3, #26
 8004764:	429a      	cmp	r2, r3
 8004766:	d107      	bne.n	8004778 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004776:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800477e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	069b      	lsls	r3, r3, #26
 8004788:	429a      	cmp	r2, r3
 800478a:	d107      	bne.n	800479c <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800479a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7ff facd 	bl	8003d40 <LL_ADC_IsEnabled>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f040 8219 	bne.w	8004be0 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6818      	ldr	r0, [r3, #0]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	6819      	ldr	r1, [r3, #0]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	461a      	mov	r2, r3
 80047bc:	f7ff fa32 	bl	8003c24 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	4aa1      	ldr	r2, [pc, #644]	; (8004a4c <HAL_ADC_ConfigChannel+0x888>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	f040 812e 	bne.w	8004a28 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10b      	bne.n	80047f4 <HAL_ADC_ConfigChannel+0x630>
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	0e9b      	lsrs	r3, r3, #26
 80047e2:	3301      	adds	r3, #1
 80047e4:	f003 031f 	and.w	r3, r3, #31
 80047e8:	2b09      	cmp	r3, #9
 80047ea:	bf94      	ite	ls
 80047ec:	2301      	movls	r3, #1
 80047ee:	2300      	movhi	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	e019      	b.n	8004828 <HAL_ADC_ConfigChannel+0x664>
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047fc:	fa93 f3a3 	rbit	r3, r3
 8004800:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004804:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004806:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 800480c:	2320      	movs	r3, #32
 800480e:	e003      	b.n	8004818 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8004810:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004812:	fab3 f383 	clz	r3, r3
 8004816:	b2db      	uxtb	r3, r3
 8004818:	3301      	adds	r3, #1
 800481a:	f003 031f 	and.w	r3, r3, #31
 800481e:	2b09      	cmp	r3, #9
 8004820:	bf94      	ite	ls
 8004822:	2301      	movls	r3, #1
 8004824:	2300      	movhi	r3, #0
 8004826:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004828:	2b00      	cmp	r3, #0
 800482a:	d079      	beq.n	8004920 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004834:	2b00      	cmp	r3, #0
 8004836:	d107      	bne.n	8004848 <HAL_ADC_ConfigChannel+0x684>
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	0e9b      	lsrs	r3, r3, #26
 800483e:	3301      	adds	r3, #1
 8004840:	069b      	lsls	r3, r3, #26
 8004842:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004846:	e015      	b.n	8004874 <HAL_ADC_ConfigChannel+0x6b0>
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800484e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004850:	fa93 f3a3 	rbit	r3, r3
 8004854:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004858:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800485a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800485c:	2b00      	cmp	r3, #0
 800485e:	d101      	bne.n	8004864 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004860:	2320      	movs	r3, #32
 8004862:	e003      	b.n	800486c <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004866:	fab3 f383 	clz	r3, r3
 800486a:	b2db      	uxtb	r3, r3
 800486c:	3301      	adds	r3, #1
 800486e:	069b      	lsls	r3, r3, #26
 8004870:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800487c:	2b00      	cmp	r3, #0
 800487e:	d109      	bne.n	8004894 <HAL_ADC_ConfigChannel+0x6d0>
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	0e9b      	lsrs	r3, r3, #26
 8004886:	3301      	adds	r3, #1
 8004888:	f003 031f 	and.w	r3, r3, #31
 800488c:	2101      	movs	r1, #1
 800488e:	fa01 f303 	lsl.w	r3, r1, r3
 8004892:	e017      	b.n	80048c4 <HAL_ADC_ConfigChannel+0x700>
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800489a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800489c:	fa93 f3a3 	rbit	r3, r3
 80048a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80048a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048a4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80048a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d101      	bne.n	80048b0 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 80048ac:	2320      	movs	r3, #32
 80048ae:	e003      	b.n	80048b8 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 80048b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048b2:	fab3 f383 	clz	r3, r3
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	3301      	adds	r3, #1
 80048ba:	f003 031f 	and.w	r3, r3, #31
 80048be:	2101      	movs	r1, #1
 80048c0:	fa01 f303 	lsl.w	r3, r1, r3
 80048c4:	ea42 0103 	orr.w	r1, r2, r3
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d10a      	bne.n	80048ea <HAL_ADC_ConfigChannel+0x726>
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	0e9b      	lsrs	r3, r3, #26
 80048da:	3301      	adds	r3, #1
 80048dc:	f003 021f 	and.w	r2, r3, #31
 80048e0:	4613      	mov	r3, r2
 80048e2:	005b      	lsls	r3, r3, #1
 80048e4:	4413      	add	r3, r2
 80048e6:	051b      	lsls	r3, r3, #20
 80048e8:	e018      	b.n	800491c <HAL_ADC_ConfigChannel+0x758>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048f2:	fa93 f3a3 	rbit	r3, r3
 80048f6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80048f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80048fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8004902:	2320      	movs	r3, #32
 8004904:	e003      	b.n	800490e <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8004906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004908:	fab3 f383 	clz	r3, r3
 800490c:	b2db      	uxtb	r3, r3
 800490e:	3301      	adds	r3, #1
 8004910:	f003 021f 	and.w	r2, r3, #31
 8004914:	4613      	mov	r3, r2
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	4413      	add	r3, r2
 800491a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800491c:	430b      	orrs	r3, r1
 800491e:	e07e      	b.n	8004a1e <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004928:	2b00      	cmp	r3, #0
 800492a:	d107      	bne.n	800493c <HAL_ADC_ConfigChannel+0x778>
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	0e9b      	lsrs	r3, r3, #26
 8004932:	3301      	adds	r3, #1
 8004934:	069b      	lsls	r3, r3, #26
 8004936:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800493a:	e015      	b.n	8004968 <HAL_ADC_ConfigChannel+0x7a4>
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004944:	fa93 f3a3 	rbit	r3, r3
 8004948:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800494e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004954:	2320      	movs	r3, #32
 8004956:	e003      	b.n	8004960 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800495a:	fab3 f383 	clz	r3, r3
 800495e:	b2db      	uxtb	r3, r3
 8004960:	3301      	adds	r3, #1
 8004962:	069b      	lsls	r3, r3, #26
 8004964:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004970:	2b00      	cmp	r3, #0
 8004972:	d109      	bne.n	8004988 <HAL_ADC_ConfigChannel+0x7c4>
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	0e9b      	lsrs	r3, r3, #26
 800497a:	3301      	adds	r3, #1
 800497c:	f003 031f 	and.w	r3, r3, #31
 8004980:	2101      	movs	r1, #1
 8004982:	fa01 f303 	lsl.w	r3, r1, r3
 8004986:	e017      	b.n	80049b8 <HAL_ADC_ConfigChannel+0x7f4>
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	fa93 f3a3 	rbit	r3, r3
 8004994:	61bb      	str	r3, [r7, #24]
  return result;
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800499a:	6a3b      	ldr	r3, [r7, #32]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d101      	bne.n	80049a4 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 80049a0:	2320      	movs	r3, #32
 80049a2:	e003      	b.n	80049ac <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 80049a4:	6a3b      	ldr	r3, [r7, #32]
 80049a6:	fab3 f383 	clz	r3, r3
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	3301      	adds	r3, #1
 80049ae:	f003 031f 	and.w	r3, r3, #31
 80049b2:	2101      	movs	r1, #1
 80049b4:	fa01 f303 	lsl.w	r3, r1, r3
 80049b8:	ea42 0103 	orr.w	r1, r2, r3
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10d      	bne.n	80049e4 <HAL_ADC_ConfigChannel+0x820>
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	0e9b      	lsrs	r3, r3, #26
 80049ce:	3301      	adds	r3, #1
 80049d0:	f003 021f 	and.w	r2, r3, #31
 80049d4:	4613      	mov	r3, r2
 80049d6:	005b      	lsls	r3, r3, #1
 80049d8:	4413      	add	r3, r2
 80049da:	3b1e      	subs	r3, #30
 80049dc:	051b      	lsls	r3, r3, #20
 80049de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80049e2:	e01b      	b.n	8004a1c <HAL_ADC_ConfigChannel+0x858>
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	fa93 f3a3 	rbit	r3, r3
 80049f0:	60fb      	str	r3, [r7, #12]
  return result;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d101      	bne.n	8004a00 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 80049fc:	2320      	movs	r3, #32
 80049fe:	e003      	b.n	8004a08 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	fab3 f383 	clz	r3, r3
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	3301      	adds	r3, #1
 8004a0a:	f003 021f 	and.w	r2, r3, #31
 8004a0e:	4613      	mov	r3, r2
 8004a10:	005b      	lsls	r3, r3, #1
 8004a12:	4413      	add	r3, r2
 8004a14:	3b1e      	subs	r3, #30
 8004a16:	051b      	lsls	r3, r3, #20
 8004a18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a1c:	430b      	orrs	r3, r1
 8004a1e:	683a      	ldr	r2, [r7, #0]
 8004a20:	6892      	ldr	r2, [r2, #8]
 8004a22:	4619      	mov	r1, r3
 8004a24:	f7ff f8d2 	bl	8003bcc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f280 80d7 	bge.w	8004be0 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a06      	ldr	r2, [pc, #24]	; (8004a50 <HAL_ADC_ConfigChannel+0x88c>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d004      	beq.n	8004a46 <HAL_ADC_ConfigChannel+0x882>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a04      	ldr	r2, [pc, #16]	; (8004a54 <HAL_ADC_ConfigChannel+0x890>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d10a      	bne.n	8004a5c <HAL_ADC_ConfigChannel+0x898>
 8004a46:	4b04      	ldr	r3, [pc, #16]	; (8004a58 <HAL_ADC_ConfigChannel+0x894>)
 8004a48:	e009      	b.n	8004a5e <HAL_ADC_ConfigChannel+0x89a>
 8004a4a:	bf00      	nop
 8004a4c:	47ff0000 	.word	0x47ff0000
 8004a50:	40022000 	.word	0x40022000
 8004a54:	40022100 	.word	0x40022100
 8004a58:	40022300 	.word	0x40022300
 8004a5c:	4b65      	ldr	r3, [pc, #404]	; (8004bf4 <HAL_ADC_ConfigChannel+0xa30>)
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7fe ff88 	bl	8003974 <LL_ADC_GetCommonPathInternalCh>
 8004a64:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a62      	ldr	r2, [pc, #392]	; (8004bf8 <HAL_ADC_ConfigChannel+0xa34>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d004      	beq.n	8004a7c <HAL_ADC_ConfigChannel+0x8b8>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a61      	ldr	r2, [pc, #388]	; (8004bfc <HAL_ADC_ConfigChannel+0xa38>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d10e      	bne.n	8004a9a <HAL_ADC_ConfigChannel+0x8d6>
 8004a7c:	485e      	ldr	r0, [pc, #376]	; (8004bf8 <HAL_ADC_ConfigChannel+0xa34>)
 8004a7e:	f7ff f95f 	bl	8003d40 <LL_ADC_IsEnabled>
 8004a82:	4604      	mov	r4, r0
 8004a84:	485d      	ldr	r0, [pc, #372]	; (8004bfc <HAL_ADC_ConfigChannel+0xa38>)
 8004a86:	f7ff f95b 	bl	8003d40 <LL_ADC_IsEnabled>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	4323      	orrs	r3, r4
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	bf0c      	ite	eq
 8004a92:	2301      	moveq	r3, #1
 8004a94:	2300      	movne	r3, #0
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	e008      	b.n	8004aac <HAL_ADC_ConfigChannel+0x8e8>
 8004a9a:	4859      	ldr	r0, [pc, #356]	; (8004c00 <HAL_ADC_ConfigChannel+0xa3c>)
 8004a9c:	f7ff f950 	bl	8003d40 <LL_ADC_IsEnabled>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	bf0c      	ite	eq
 8004aa6:	2301      	moveq	r3, #1
 8004aa8:	2300      	movne	r3, #0
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 8084 	beq.w	8004bba <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a53      	ldr	r2, [pc, #332]	; (8004c04 <HAL_ADC_ConfigChannel+0xa40>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d132      	bne.n	8004b22 <HAL_ADC_ConfigChannel+0x95e>
 8004abc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ac0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d12c      	bne.n	8004b22 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a4c      	ldr	r2, [pc, #304]	; (8004c00 <HAL_ADC_ConfigChannel+0xa3c>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	f040 8086 	bne.w	8004be0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a47      	ldr	r2, [pc, #284]	; (8004bf8 <HAL_ADC_ConfigChannel+0xa34>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d004      	beq.n	8004ae8 <HAL_ADC_ConfigChannel+0x924>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a46      	ldr	r2, [pc, #280]	; (8004bfc <HAL_ADC_ConfigChannel+0xa38>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d101      	bne.n	8004aec <HAL_ADC_ConfigChannel+0x928>
 8004ae8:	4a47      	ldr	r2, [pc, #284]	; (8004c08 <HAL_ADC_ConfigChannel+0xa44>)
 8004aea:	e000      	b.n	8004aee <HAL_ADC_ConfigChannel+0x92a>
 8004aec:	4a41      	ldr	r2, [pc, #260]	; (8004bf4 <HAL_ADC_ConfigChannel+0xa30>)
 8004aee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004af2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004af6:	4619      	mov	r1, r3
 8004af8:	4610      	mov	r0, r2
 8004afa:	f7fe ff28 	bl	800394e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004afe:	4b43      	ldr	r3, [pc, #268]	; (8004c0c <HAL_ADC_ConfigChannel+0xa48>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	099b      	lsrs	r3, r3, #6
 8004b04:	4a42      	ldr	r2, [pc, #264]	; (8004c10 <HAL_ADC_ConfigChannel+0xa4c>)
 8004b06:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0a:	099b      	lsrs	r3, r3, #6
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004b12:	e002      	b.n	8004b1a <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	3b01      	subs	r3, #1
 8004b18:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1f9      	bne.n	8004b14 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b20:	e05e      	b.n	8004be0 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a3b      	ldr	r2, [pc, #236]	; (8004c14 <HAL_ADC_ConfigChannel+0xa50>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d120      	bne.n	8004b6e <HAL_ADC_ConfigChannel+0x9aa>
 8004b2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d11a      	bne.n	8004b6e <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a30      	ldr	r2, [pc, #192]	; (8004c00 <HAL_ADC_ConfigChannel+0xa3c>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d14e      	bne.n	8004be0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a2c      	ldr	r2, [pc, #176]	; (8004bf8 <HAL_ADC_ConfigChannel+0xa34>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d004      	beq.n	8004b56 <HAL_ADC_ConfigChannel+0x992>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a2a      	ldr	r2, [pc, #168]	; (8004bfc <HAL_ADC_ConfigChannel+0xa38>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d101      	bne.n	8004b5a <HAL_ADC_ConfigChannel+0x996>
 8004b56:	4a2c      	ldr	r2, [pc, #176]	; (8004c08 <HAL_ADC_ConfigChannel+0xa44>)
 8004b58:	e000      	b.n	8004b5c <HAL_ADC_ConfigChannel+0x998>
 8004b5a:	4a26      	ldr	r2, [pc, #152]	; (8004bf4 <HAL_ADC_ConfigChannel+0xa30>)
 8004b5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b64:	4619      	mov	r1, r3
 8004b66:	4610      	mov	r0, r2
 8004b68:	f7fe fef1 	bl	800394e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b6c:	e038      	b.n	8004be0 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a29      	ldr	r2, [pc, #164]	; (8004c18 <HAL_ADC_ConfigChannel+0xa54>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d133      	bne.n	8004be0 <HAL_ADC_ConfigChannel+0xa1c>
 8004b78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d12d      	bne.n	8004be0 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a1d      	ldr	r2, [pc, #116]	; (8004c00 <HAL_ADC_ConfigChannel+0xa3c>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d128      	bne.n	8004be0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a19      	ldr	r2, [pc, #100]	; (8004bf8 <HAL_ADC_ConfigChannel+0xa34>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d004      	beq.n	8004ba2 <HAL_ADC_ConfigChannel+0x9de>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a17      	ldr	r2, [pc, #92]	; (8004bfc <HAL_ADC_ConfigChannel+0xa38>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d101      	bne.n	8004ba6 <HAL_ADC_ConfigChannel+0x9e2>
 8004ba2:	4a19      	ldr	r2, [pc, #100]	; (8004c08 <HAL_ADC_ConfigChannel+0xa44>)
 8004ba4:	e000      	b.n	8004ba8 <HAL_ADC_ConfigChannel+0x9e4>
 8004ba6:	4a13      	ldr	r2, [pc, #76]	; (8004bf4 <HAL_ADC_ConfigChannel+0xa30>)
 8004ba8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004bac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	4610      	mov	r0, r2
 8004bb4:	f7fe fecb 	bl	800394e <LL_ADC_SetCommonPathInternalCh>
 8004bb8:	e012      	b.n	8004be0 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bbe:	f043 0220 	orr.w	r2, r3, #32
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004bcc:	e008      	b.n	8004be0 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bd2:	f043 0220 	orr.w	r2, r3, #32
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004be8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	37e4      	adds	r7, #228	; 0xe4
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd90      	pop	{r4, r7, pc}
 8004bf4:	58026300 	.word	0x58026300
 8004bf8:	40022000 	.word	0x40022000
 8004bfc:	40022100 	.word	0x40022100
 8004c00:	58026000 	.word	0x58026000
 8004c04:	c7520000 	.word	0xc7520000
 8004c08:	40022300 	.word	0x40022300
 8004c0c:	24000000 	.word	0x24000000
 8004c10:	053e2d63 	.word	0x053e2d63
 8004c14:	c3210000 	.word	0xc3210000
 8004c18:	cb840000 	.word	0xcb840000

08004c1c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a6c      	ldr	r2, [pc, #432]	; (8004ddc <ADC_ConfigureBoostMode+0x1c0>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d004      	beq.n	8004c38 <ADC_ConfigureBoostMode+0x1c>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a6b      	ldr	r2, [pc, #428]	; (8004de0 <ADC_ConfigureBoostMode+0x1c4>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d109      	bne.n	8004c4c <ADC_ConfigureBoostMode+0x30>
 8004c38:	4b6a      	ldr	r3, [pc, #424]	; (8004de4 <ADC_ConfigureBoostMode+0x1c8>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	bf14      	ite	ne
 8004c44:	2301      	movne	r3, #1
 8004c46:	2300      	moveq	r3, #0
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	e008      	b.n	8004c5e <ADC_ConfigureBoostMode+0x42>
 8004c4c:	4b66      	ldr	r3, [pc, #408]	; (8004de8 <ADC_ConfigureBoostMode+0x1cc>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	bf14      	ite	ne
 8004c58:	2301      	movne	r3, #1
 8004c5a:	2300      	moveq	r3, #0
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d01c      	beq.n	8004c9c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004c62:	f005 fcad 	bl	800a5c0 <HAL_RCC_GetHCLKFreq>
 8004c66:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c70:	d010      	beq.n	8004c94 <ADC_ConfigureBoostMode+0x78>
 8004c72:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c76:	d873      	bhi.n	8004d60 <ADC_ConfigureBoostMode+0x144>
 8004c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c7c:	d002      	beq.n	8004c84 <ADC_ConfigureBoostMode+0x68>
 8004c7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c82:	d16d      	bne.n	8004d60 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	0c1b      	lsrs	r3, r3, #16
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c90:	60fb      	str	r3, [r7, #12]
        break;
 8004c92:	e068      	b.n	8004d66 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	089b      	lsrs	r3, r3, #2
 8004c98:	60fb      	str	r3, [r7, #12]
        break;
 8004c9a:	e064      	b.n	8004d66 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004c9c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004ca0:	f04f 0100 	mov.w	r1, #0
 8004ca4:	f006 fe88 	bl	800b9b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004ca8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004cb2:	d051      	beq.n	8004d58 <ADC_ConfigureBoostMode+0x13c>
 8004cb4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004cb8:	d854      	bhi.n	8004d64 <ADC_ConfigureBoostMode+0x148>
 8004cba:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004cbe:	d047      	beq.n	8004d50 <ADC_ConfigureBoostMode+0x134>
 8004cc0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004cc4:	d84e      	bhi.n	8004d64 <ADC_ConfigureBoostMode+0x148>
 8004cc6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004cca:	d03d      	beq.n	8004d48 <ADC_ConfigureBoostMode+0x12c>
 8004ccc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004cd0:	d848      	bhi.n	8004d64 <ADC_ConfigureBoostMode+0x148>
 8004cd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cd6:	d033      	beq.n	8004d40 <ADC_ConfigureBoostMode+0x124>
 8004cd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cdc:	d842      	bhi.n	8004d64 <ADC_ConfigureBoostMode+0x148>
 8004cde:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004ce2:	d029      	beq.n	8004d38 <ADC_ConfigureBoostMode+0x11c>
 8004ce4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004ce8:	d83c      	bhi.n	8004d64 <ADC_ConfigureBoostMode+0x148>
 8004cea:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004cee:	d01a      	beq.n	8004d26 <ADC_ConfigureBoostMode+0x10a>
 8004cf0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004cf4:	d836      	bhi.n	8004d64 <ADC_ConfigureBoostMode+0x148>
 8004cf6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004cfa:	d014      	beq.n	8004d26 <ADC_ConfigureBoostMode+0x10a>
 8004cfc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004d00:	d830      	bhi.n	8004d64 <ADC_ConfigureBoostMode+0x148>
 8004d02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d06:	d00e      	beq.n	8004d26 <ADC_ConfigureBoostMode+0x10a>
 8004d08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d0c:	d82a      	bhi.n	8004d64 <ADC_ConfigureBoostMode+0x148>
 8004d0e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004d12:	d008      	beq.n	8004d26 <ADC_ConfigureBoostMode+0x10a>
 8004d14:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004d18:	d824      	bhi.n	8004d64 <ADC_ConfigureBoostMode+0x148>
 8004d1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d1e:	d002      	beq.n	8004d26 <ADC_ConfigureBoostMode+0x10a>
 8004d20:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004d24:	d11e      	bne.n	8004d64 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	0c9b      	lsrs	r3, r3, #18
 8004d2c:	005b      	lsls	r3, r3, #1
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d34:	60fb      	str	r3, [r7, #12]
        break;
 8004d36:	e016      	b.n	8004d66 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	091b      	lsrs	r3, r3, #4
 8004d3c:	60fb      	str	r3, [r7, #12]
        break;
 8004d3e:	e012      	b.n	8004d66 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	095b      	lsrs	r3, r3, #5
 8004d44:	60fb      	str	r3, [r7, #12]
        break;
 8004d46:	e00e      	b.n	8004d66 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	099b      	lsrs	r3, r3, #6
 8004d4c:	60fb      	str	r3, [r7, #12]
        break;
 8004d4e:	e00a      	b.n	8004d66 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	09db      	lsrs	r3, r3, #7
 8004d54:	60fb      	str	r3, [r7, #12]
        break;
 8004d56:	e006      	b.n	8004d66 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	0a1b      	lsrs	r3, r3, #8
 8004d5c:	60fb      	str	r3, [r7, #12]
        break;
 8004d5e:	e002      	b.n	8004d66 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004d60:	bf00      	nop
 8004d62:	e000      	b.n	8004d66 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004d64:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	085b      	lsrs	r3, r3, #1
 8004d6a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4a1f      	ldr	r2, [pc, #124]	; (8004dec <ADC_ConfigureBoostMode+0x1d0>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d808      	bhi.n	8004d86 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689a      	ldr	r2, [r3, #8]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004d82:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004d84:	e025      	b.n	8004dd2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	4a19      	ldr	r2, [pc, #100]	; (8004df0 <ADC_ConfigureBoostMode+0x1d4>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d80a      	bhi.n	8004da4 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004da0:	609a      	str	r2, [r3, #8]
}
 8004da2:	e016      	b.n	8004dd2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	4a13      	ldr	r2, [pc, #76]	; (8004df4 <ADC_ConfigureBoostMode+0x1d8>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d80a      	bhi.n	8004dc2 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dbe:	609a      	str	r2, [r3, #8]
}
 8004dc0:	e007      	b.n	8004dd2 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004dd0:	609a      	str	r2, [r3, #8]
}
 8004dd2:	bf00      	nop
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	40022000 	.word	0x40022000
 8004de0:	40022100 	.word	0x40022100
 8004de4:	40022300 	.word	0x40022300
 8004de8:	58026300 	.word	0x58026300
 8004dec:	005f5e10 	.word	0x005f5e10
 8004df0:	00bebc20 	.word	0x00bebc20
 8004df4:	017d7840 	.word	0x017d7840

08004df8 <LL_ADC_IsEnabled>:
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d101      	bne.n	8004e10 <LL_ADC_IsEnabled+0x18>
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e000      	b.n	8004e12 <LL_ADC_IsEnabled+0x1a>
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <LL_ADC_REG_IsConversionOngoing>:
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f003 0304 	and.w	r3, r3, #4
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	d101      	bne.n	8004e36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004e32:	2301      	movs	r3, #1
 8004e34:	e000      	b.n	8004e38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004e44:	b590      	push	{r4, r7, lr}
 8004e46:	b0a3      	sub	sp, #140	; 0x8c
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d101      	bne.n	8004e62 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004e5e:	2302      	movs	r3, #2
 8004e60:	e0c1      	b.n	8004fe6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a5e      	ldr	r2, [pc, #376]	; (8004ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d102      	bne.n	8004e82 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004e7c:	4b5d      	ldr	r3, [pc, #372]	; (8004ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004e7e:	60fb      	str	r3, [r7, #12]
 8004e80:	e001      	b.n	8004e86 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004e82:	2300      	movs	r3, #0
 8004e84:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10b      	bne.n	8004ea4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e90:	f043 0220 	orr.w	r2, r3, #32
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e0a0      	b.n	8004fe6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7ff ffb9 	bl	8004e1e <LL_ADC_REG_IsConversionOngoing>
 8004eac:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7ff ffb2 	bl	8004e1e <LL_ADC_REG_IsConversionOngoing>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f040 8081 	bne.w	8004fc4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004ec2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d17c      	bne.n	8004fc4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a48      	ldr	r2, [pc, #288]	; (8004ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d004      	beq.n	8004ede <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a46      	ldr	r2, [pc, #280]	; (8004ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d101      	bne.n	8004ee2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004ede:	4b46      	ldr	r3, [pc, #280]	; (8004ff8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004ee0:	e000      	b.n	8004ee4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004ee2:	4b46      	ldr	r3, [pc, #280]	; (8004ffc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004ee4:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d039      	beq.n	8004f62 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004eee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	431a      	orrs	r2, r3
 8004efc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004efe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a3a      	ldr	r2, [pc, #232]	; (8004ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d004      	beq.n	8004f14 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a39      	ldr	r2, [pc, #228]	; (8004ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d10e      	bne.n	8004f32 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004f14:	4836      	ldr	r0, [pc, #216]	; (8004ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004f16:	f7ff ff6f 	bl	8004df8 <LL_ADC_IsEnabled>
 8004f1a:	4604      	mov	r4, r0
 8004f1c:	4835      	ldr	r0, [pc, #212]	; (8004ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004f1e:	f7ff ff6b 	bl	8004df8 <LL_ADC_IsEnabled>
 8004f22:	4603      	mov	r3, r0
 8004f24:	4323      	orrs	r3, r4
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	bf0c      	ite	eq
 8004f2a:	2301      	moveq	r3, #1
 8004f2c:	2300      	movne	r3, #0
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	e008      	b.n	8004f44 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004f32:	4833      	ldr	r0, [pc, #204]	; (8005000 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004f34:	f7ff ff60 	bl	8004df8 <LL_ADC_IsEnabled>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	bf0c      	ite	eq
 8004f3e:	2301      	moveq	r3, #1
 8004f40:	2300      	movne	r3, #0
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d047      	beq.n	8004fd8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004f48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	4b2d      	ldr	r3, [pc, #180]	; (8005004 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004f4e:	4013      	ands	r3, r2
 8004f50:	683a      	ldr	r2, [r7, #0]
 8004f52:	6811      	ldr	r1, [r2, #0]
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	6892      	ldr	r2, [r2, #8]
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f5e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f60:	e03a      	b.n	8004fd8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004f62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f6c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a1f      	ldr	r2, [pc, #124]	; (8004ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d004      	beq.n	8004f82 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a1d      	ldr	r2, [pc, #116]	; (8004ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d10e      	bne.n	8004fa0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004f82:	481b      	ldr	r0, [pc, #108]	; (8004ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004f84:	f7ff ff38 	bl	8004df8 <LL_ADC_IsEnabled>
 8004f88:	4604      	mov	r4, r0
 8004f8a:	481a      	ldr	r0, [pc, #104]	; (8004ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004f8c:	f7ff ff34 	bl	8004df8 <LL_ADC_IsEnabled>
 8004f90:	4603      	mov	r3, r0
 8004f92:	4323      	orrs	r3, r4
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	bf0c      	ite	eq
 8004f98:	2301      	moveq	r3, #1
 8004f9a:	2300      	movne	r3, #0
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	e008      	b.n	8004fb2 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004fa0:	4817      	ldr	r0, [pc, #92]	; (8005000 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004fa2:	f7ff ff29 	bl	8004df8 <LL_ADC_IsEnabled>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	bf0c      	ite	eq
 8004fac:	2301      	moveq	r3, #1
 8004fae:	2300      	movne	r3, #0
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d010      	beq.n	8004fd8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004fb6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fb8:	689a      	ldr	r2, [r3, #8]
 8004fba:	4b12      	ldr	r3, [pc, #72]	; (8005004 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004fc0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004fc2:	e009      	b.n	8004fd8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fc8:	f043 0220 	orr.w	r2, r3, #32
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8004fd6:	e000      	b.n	8004fda <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004fd8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004fe2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	378c      	adds	r7, #140	; 0x8c
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd90      	pop	{r4, r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	40022000 	.word	0x40022000
 8004ff4:	40022100 	.word	0x40022100
 8004ff8:	40022300 	.word	0x40022300
 8004ffc:	58026300 	.word	0x58026300
 8005000:	58026000 	.word	0x58026000
 8005004:	fffff0e0 	.word	0xfffff0e0

08005008 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f003 0307 	and.w	r3, r3, #7
 8005016:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005018:	4b0b      	ldr	r3, [pc, #44]	; (8005048 <__NVIC_SetPriorityGrouping+0x40>)
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005024:	4013      	ands	r3, r2
 8005026:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005030:	4b06      	ldr	r3, [pc, #24]	; (800504c <__NVIC_SetPriorityGrouping+0x44>)
 8005032:	4313      	orrs	r3, r2
 8005034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005036:	4a04      	ldr	r2, [pc, #16]	; (8005048 <__NVIC_SetPriorityGrouping+0x40>)
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	60d3      	str	r3, [r2, #12]
}
 800503c:	bf00      	nop
 800503e:	3714      	adds	r7, #20
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr
 8005048:	e000ed00 	.word	0xe000ed00
 800504c:	05fa0000 	.word	0x05fa0000

08005050 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005050:	b480      	push	{r7}
 8005052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005054:	4b04      	ldr	r3, [pc, #16]	; (8005068 <__NVIC_GetPriorityGrouping+0x18>)
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	0a1b      	lsrs	r3, r3, #8
 800505a:	f003 0307 	and.w	r3, r3, #7
}
 800505e:	4618      	mov	r0, r3
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	e000ed00 	.word	0xe000ed00

0800506c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	4603      	mov	r3, r0
 8005074:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005076:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800507a:	2b00      	cmp	r3, #0
 800507c:	db0b      	blt.n	8005096 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800507e:	88fb      	ldrh	r3, [r7, #6]
 8005080:	f003 021f 	and.w	r2, r3, #31
 8005084:	4907      	ldr	r1, [pc, #28]	; (80050a4 <__NVIC_EnableIRQ+0x38>)
 8005086:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800508a:	095b      	lsrs	r3, r3, #5
 800508c:	2001      	movs	r0, #1
 800508e:	fa00 f202 	lsl.w	r2, r0, r2
 8005092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005096:	bf00      	nop
 8005098:	370c      	adds	r7, #12
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	e000e100 	.word	0xe000e100

080050a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	4603      	mov	r3, r0
 80050b0:	6039      	str	r1, [r7, #0]
 80050b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80050b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	db0a      	blt.n	80050d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	490c      	ldr	r1, [pc, #48]	; (80050f4 <__NVIC_SetPriority+0x4c>)
 80050c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050c6:	0112      	lsls	r2, r2, #4
 80050c8:	b2d2      	uxtb	r2, r2
 80050ca:	440b      	add	r3, r1
 80050cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050d0:	e00a      	b.n	80050e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	b2da      	uxtb	r2, r3
 80050d6:	4908      	ldr	r1, [pc, #32]	; (80050f8 <__NVIC_SetPriority+0x50>)
 80050d8:	88fb      	ldrh	r3, [r7, #6]
 80050da:	f003 030f 	and.w	r3, r3, #15
 80050de:	3b04      	subs	r3, #4
 80050e0:	0112      	lsls	r2, r2, #4
 80050e2:	b2d2      	uxtb	r2, r2
 80050e4:	440b      	add	r3, r1
 80050e6:	761a      	strb	r2, [r3, #24]
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	e000e100 	.word	0xe000e100
 80050f8:	e000ed00 	.word	0xe000ed00

080050fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b089      	sub	sp, #36	; 0x24
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f003 0307 	and.w	r3, r3, #7
 800510e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	f1c3 0307 	rsb	r3, r3, #7
 8005116:	2b04      	cmp	r3, #4
 8005118:	bf28      	it	cs
 800511a:	2304      	movcs	r3, #4
 800511c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	3304      	adds	r3, #4
 8005122:	2b06      	cmp	r3, #6
 8005124:	d902      	bls.n	800512c <NVIC_EncodePriority+0x30>
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	3b03      	subs	r3, #3
 800512a:	e000      	b.n	800512e <NVIC_EncodePriority+0x32>
 800512c:	2300      	movs	r3, #0
 800512e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005130:	f04f 32ff 	mov.w	r2, #4294967295
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	fa02 f303 	lsl.w	r3, r2, r3
 800513a:	43da      	mvns	r2, r3
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	401a      	ands	r2, r3
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005144:	f04f 31ff 	mov.w	r1, #4294967295
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	fa01 f303 	lsl.w	r3, r1, r3
 800514e:	43d9      	mvns	r1, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005154:	4313      	orrs	r3, r2
         );
}
 8005156:	4618      	mov	r0, r3
 8005158:	3724      	adds	r7, #36	; 0x24
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
	...

08005164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	3b01      	subs	r3, #1
 8005170:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005174:	d301      	bcc.n	800517a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005176:	2301      	movs	r3, #1
 8005178:	e00f      	b.n	800519a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800517a:	4a0a      	ldr	r2, [pc, #40]	; (80051a4 <SysTick_Config+0x40>)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	3b01      	subs	r3, #1
 8005180:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005182:	210f      	movs	r1, #15
 8005184:	f04f 30ff 	mov.w	r0, #4294967295
 8005188:	f7ff ff8e 	bl	80050a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800518c:	4b05      	ldr	r3, [pc, #20]	; (80051a4 <SysTick_Config+0x40>)
 800518e:	2200      	movs	r2, #0
 8005190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005192:	4b04      	ldr	r3, [pc, #16]	; (80051a4 <SysTick_Config+0x40>)
 8005194:	2207      	movs	r2, #7
 8005196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3708      	adds	r7, #8
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	e000e010 	.word	0xe000e010

080051a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f7ff ff29 	bl	8005008 <__NVIC_SetPriorityGrouping>
}
 80051b6:	bf00      	nop
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b086      	sub	sp, #24
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	4603      	mov	r3, r0
 80051c6:	60b9      	str	r1, [r7, #8]
 80051c8:	607a      	str	r2, [r7, #4]
 80051ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80051cc:	f7ff ff40 	bl	8005050 <__NVIC_GetPriorityGrouping>
 80051d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	68b9      	ldr	r1, [r7, #8]
 80051d6:	6978      	ldr	r0, [r7, #20]
 80051d8:	f7ff ff90 	bl	80050fc <NVIC_EncodePriority>
 80051dc:	4602      	mov	r2, r0
 80051de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80051e2:	4611      	mov	r1, r2
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7ff ff5f 	bl	80050a8 <__NVIC_SetPriority>
}
 80051ea:	bf00      	nop
 80051ec:	3718      	adds	r7, #24
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b082      	sub	sp, #8
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	4603      	mov	r3, r0
 80051fa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005200:	4618      	mov	r0, r3
 8005202:	f7ff ff33 	bl	800506c <__NVIC_EnableIRQ>
}
 8005206:	bf00      	nop
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b082      	sub	sp, #8
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f7ff ffa4 	bl	8005164 <SysTick_Config>
 800521c:	4603      	mov	r3, r0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3708      	adds	r7, #8
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
	...

08005228 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005230:	f7fe fb34 	bl	800389c <HAL_GetTick>
 8005234:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d101      	bne.n	8005240 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e314      	b.n	800586a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a66      	ldr	r2, [pc, #408]	; (80053e0 <HAL_DMA_Init+0x1b8>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d04a      	beq.n	80052e0 <HAL_DMA_Init+0xb8>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a65      	ldr	r2, [pc, #404]	; (80053e4 <HAL_DMA_Init+0x1bc>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d045      	beq.n	80052e0 <HAL_DMA_Init+0xb8>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a63      	ldr	r2, [pc, #396]	; (80053e8 <HAL_DMA_Init+0x1c0>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d040      	beq.n	80052e0 <HAL_DMA_Init+0xb8>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a62      	ldr	r2, [pc, #392]	; (80053ec <HAL_DMA_Init+0x1c4>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d03b      	beq.n	80052e0 <HAL_DMA_Init+0xb8>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a60      	ldr	r2, [pc, #384]	; (80053f0 <HAL_DMA_Init+0x1c8>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d036      	beq.n	80052e0 <HAL_DMA_Init+0xb8>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a5f      	ldr	r2, [pc, #380]	; (80053f4 <HAL_DMA_Init+0x1cc>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d031      	beq.n	80052e0 <HAL_DMA_Init+0xb8>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a5d      	ldr	r2, [pc, #372]	; (80053f8 <HAL_DMA_Init+0x1d0>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d02c      	beq.n	80052e0 <HAL_DMA_Init+0xb8>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a5c      	ldr	r2, [pc, #368]	; (80053fc <HAL_DMA_Init+0x1d4>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d027      	beq.n	80052e0 <HAL_DMA_Init+0xb8>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a5a      	ldr	r2, [pc, #360]	; (8005400 <HAL_DMA_Init+0x1d8>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d022      	beq.n	80052e0 <HAL_DMA_Init+0xb8>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a59      	ldr	r2, [pc, #356]	; (8005404 <HAL_DMA_Init+0x1dc>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d01d      	beq.n	80052e0 <HAL_DMA_Init+0xb8>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a57      	ldr	r2, [pc, #348]	; (8005408 <HAL_DMA_Init+0x1e0>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d018      	beq.n	80052e0 <HAL_DMA_Init+0xb8>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a56      	ldr	r2, [pc, #344]	; (800540c <HAL_DMA_Init+0x1e4>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d013      	beq.n	80052e0 <HAL_DMA_Init+0xb8>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a54      	ldr	r2, [pc, #336]	; (8005410 <HAL_DMA_Init+0x1e8>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d00e      	beq.n	80052e0 <HAL_DMA_Init+0xb8>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a53      	ldr	r2, [pc, #332]	; (8005414 <HAL_DMA_Init+0x1ec>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d009      	beq.n	80052e0 <HAL_DMA_Init+0xb8>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a51      	ldr	r2, [pc, #324]	; (8005418 <HAL_DMA_Init+0x1f0>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d004      	beq.n	80052e0 <HAL_DMA_Init+0xb8>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a50      	ldr	r2, [pc, #320]	; (800541c <HAL_DMA_Init+0x1f4>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d101      	bne.n	80052e4 <HAL_DMA_Init+0xbc>
 80052e0:	2301      	movs	r3, #1
 80052e2:	e000      	b.n	80052e6 <HAL_DMA_Init+0xbe>
 80052e4:	2300      	movs	r3, #0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	f000 813c 	beq.w	8005564 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2202      	movs	r2, #2
 80052f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a37      	ldr	r2, [pc, #220]	; (80053e0 <HAL_DMA_Init+0x1b8>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d04a      	beq.n	800539c <HAL_DMA_Init+0x174>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a36      	ldr	r2, [pc, #216]	; (80053e4 <HAL_DMA_Init+0x1bc>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d045      	beq.n	800539c <HAL_DMA_Init+0x174>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a34      	ldr	r2, [pc, #208]	; (80053e8 <HAL_DMA_Init+0x1c0>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d040      	beq.n	800539c <HAL_DMA_Init+0x174>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a33      	ldr	r2, [pc, #204]	; (80053ec <HAL_DMA_Init+0x1c4>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d03b      	beq.n	800539c <HAL_DMA_Init+0x174>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a31      	ldr	r2, [pc, #196]	; (80053f0 <HAL_DMA_Init+0x1c8>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d036      	beq.n	800539c <HAL_DMA_Init+0x174>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a30      	ldr	r2, [pc, #192]	; (80053f4 <HAL_DMA_Init+0x1cc>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d031      	beq.n	800539c <HAL_DMA_Init+0x174>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a2e      	ldr	r2, [pc, #184]	; (80053f8 <HAL_DMA_Init+0x1d0>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d02c      	beq.n	800539c <HAL_DMA_Init+0x174>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a2d      	ldr	r2, [pc, #180]	; (80053fc <HAL_DMA_Init+0x1d4>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d027      	beq.n	800539c <HAL_DMA_Init+0x174>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a2b      	ldr	r2, [pc, #172]	; (8005400 <HAL_DMA_Init+0x1d8>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d022      	beq.n	800539c <HAL_DMA_Init+0x174>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a2a      	ldr	r2, [pc, #168]	; (8005404 <HAL_DMA_Init+0x1dc>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d01d      	beq.n	800539c <HAL_DMA_Init+0x174>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a28      	ldr	r2, [pc, #160]	; (8005408 <HAL_DMA_Init+0x1e0>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d018      	beq.n	800539c <HAL_DMA_Init+0x174>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a27      	ldr	r2, [pc, #156]	; (800540c <HAL_DMA_Init+0x1e4>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d013      	beq.n	800539c <HAL_DMA_Init+0x174>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a25      	ldr	r2, [pc, #148]	; (8005410 <HAL_DMA_Init+0x1e8>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d00e      	beq.n	800539c <HAL_DMA_Init+0x174>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a24      	ldr	r2, [pc, #144]	; (8005414 <HAL_DMA_Init+0x1ec>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d009      	beq.n	800539c <HAL_DMA_Init+0x174>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a22      	ldr	r2, [pc, #136]	; (8005418 <HAL_DMA_Init+0x1f0>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d004      	beq.n	800539c <HAL_DMA_Init+0x174>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a21      	ldr	r2, [pc, #132]	; (800541c <HAL_DMA_Init+0x1f4>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d108      	bne.n	80053ae <HAL_DMA_Init+0x186>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f022 0201 	bic.w	r2, r2, #1
 80053aa:	601a      	str	r2, [r3, #0]
 80053ac:	e007      	b.n	80053be <HAL_DMA_Init+0x196>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f022 0201 	bic.w	r2, r2, #1
 80053bc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80053be:	e02f      	b.n	8005420 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80053c0:	f7fe fa6c 	bl	800389c <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2b05      	cmp	r3, #5
 80053cc:	d928      	bls.n	8005420 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2220      	movs	r2, #32
 80053d2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2203      	movs	r2, #3
 80053d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e244      	b.n	800586a <HAL_DMA_Init+0x642>
 80053e0:	40020010 	.word	0x40020010
 80053e4:	40020028 	.word	0x40020028
 80053e8:	40020040 	.word	0x40020040
 80053ec:	40020058 	.word	0x40020058
 80053f0:	40020070 	.word	0x40020070
 80053f4:	40020088 	.word	0x40020088
 80053f8:	400200a0 	.word	0x400200a0
 80053fc:	400200b8 	.word	0x400200b8
 8005400:	40020410 	.word	0x40020410
 8005404:	40020428 	.word	0x40020428
 8005408:	40020440 	.word	0x40020440
 800540c:	40020458 	.word	0x40020458
 8005410:	40020470 	.word	0x40020470
 8005414:	40020488 	.word	0x40020488
 8005418:	400204a0 	.word	0x400204a0
 800541c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1c8      	bne.n	80053c0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	4b84      	ldr	r3, [pc, #528]	; (800564c <HAL_DMA_Init+0x424>)
 800543a:	4013      	ands	r3, r2
 800543c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005446:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005452:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800545e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	4313      	orrs	r3, r2
 800546a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005470:	2b04      	cmp	r3, #4
 8005472:	d107      	bne.n	8005484 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547c:	4313      	orrs	r3, r2
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	4313      	orrs	r3, r2
 8005482:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	2b28      	cmp	r3, #40	; 0x28
 800548a:	d903      	bls.n	8005494 <HAL_DMA_Init+0x26c>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	2b2e      	cmp	r3, #46	; 0x2e
 8005492:	d91f      	bls.n	80054d4 <HAL_DMA_Init+0x2ac>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	2b3e      	cmp	r3, #62	; 0x3e
 800549a:	d903      	bls.n	80054a4 <HAL_DMA_Init+0x27c>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	2b42      	cmp	r3, #66	; 0x42
 80054a2:	d917      	bls.n	80054d4 <HAL_DMA_Init+0x2ac>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	2b46      	cmp	r3, #70	; 0x46
 80054aa:	d903      	bls.n	80054b4 <HAL_DMA_Init+0x28c>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	2b48      	cmp	r3, #72	; 0x48
 80054b2:	d90f      	bls.n	80054d4 <HAL_DMA_Init+0x2ac>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	2b4e      	cmp	r3, #78	; 0x4e
 80054ba:	d903      	bls.n	80054c4 <HAL_DMA_Init+0x29c>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	2b52      	cmp	r3, #82	; 0x52
 80054c2:	d907      	bls.n	80054d4 <HAL_DMA_Init+0x2ac>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	2b73      	cmp	r3, #115	; 0x73
 80054ca:	d905      	bls.n	80054d8 <HAL_DMA_Init+0x2b0>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	2b77      	cmp	r3, #119	; 0x77
 80054d2:	d801      	bhi.n	80054d8 <HAL_DMA_Init+0x2b0>
 80054d4:	2301      	movs	r3, #1
 80054d6:	e000      	b.n	80054da <HAL_DMA_Init+0x2b2>
 80054d8:	2300      	movs	r3, #0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d003      	beq.n	80054e6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054e4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f023 0307 	bic.w	r3, r3, #7
 80054fc:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	4313      	orrs	r3, r2
 8005506:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550c:	2b04      	cmp	r3, #4
 800550e:	d117      	bne.n	8005540 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	4313      	orrs	r3, r2
 8005518:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00e      	beq.n	8005540 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f001 fdcc 	bl	80070c0 <DMA_CheckFifoParam>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d008      	beq.n	8005540 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2240      	movs	r2, #64	; 0x40
 8005532:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e194      	b.n	800586a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f001 fd07 	bl	8006f5c <DMA_CalcBaseAndBitshift>
 800554e:	4603      	mov	r3, r0
 8005550:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005556:	f003 031f 	and.w	r3, r3, #31
 800555a:	223f      	movs	r2, #63	; 0x3f
 800555c:	409a      	lsls	r2, r3
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	609a      	str	r2, [r3, #8]
 8005562:	e0ca      	b.n	80056fa <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a39      	ldr	r2, [pc, #228]	; (8005650 <HAL_DMA_Init+0x428>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d022      	beq.n	80055b4 <HAL_DMA_Init+0x38c>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a38      	ldr	r2, [pc, #224]	; (8005654 <HAL_DMA_Init+0x42c>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d01d      	beq.n	80055b4 <HAL_DMA_Init+0x38c>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a36      	ldr	r2, [pc, #216]	; (8005658 <HAL_DMA_Init+0x430>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d018      	beq.n	80055b4 <HAL_DMA_Init+0x38c>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a35      	ldr	r2, [pc, #212]	; (800565c <HAL_DMA_Init+0x434>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d013      	beq.n	80055b4 <HAL_DMA_Init+0x38c>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a33      	ldr	r2, [pc, #204]	; (8005660 <HAL_DMA_Init+0x438>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d00e      	beq.n	80055b4 <HAL_DMA_Init+0x38c>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a32      	ldr	r2, [pc, #200]	; (8005664 <HAL_DMA_Init+0x43c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d009      	beq.n	80055b4 <HAL_DMA_Init+0x38c>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a30      	ldr	r2, [pc, #192]	; (8005668 <HAL_DMA_Init+0x440>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d004      	beq.n	80055b4 <HAL_DMA_Init+0x38c>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a2f      	ldr	r2, [pc, #188]	; (800566c <HAL_DMA_Init+0x444>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d101      	bne.n	80055b8 <HAL_DMA_Init+0x390>
 80055b4:	2301      	movs	r3, #1
 80055b6:	e000      	b.n	80055ba <HAL_DMA_Init+0x392>
 80055b8:	2300      	movs	r3, #0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f000 8094 	beq.w	80056e8 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a22      	ldr	r2, [pc, #136]	; (8005650 <HAL_DMA_Init+0x428>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d021      	beq.n	800560e <HAL_DMA_Init+0x3e6>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a21      	ldr	r2, [pc, #132]	; (8005654 <HAL_DMA_Init+0x42c>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d01c      	beq.n	800560e <HAL_DMA_Init+0x3e6>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a1f      	ldr	r2, [pc, #124]	; (8005658 <HAL_DMA_Init+0x430>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d017      	beq.n	800560e <HAL_DMA_Init+0x3e6>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a1e      	ldr	r2, [pc, #120]	; (800565c <HAL_DMA_Init+0x434>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d012      	beq.n	800560e <HAL_DMA_Init+0x3e6>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a1c      	ldr	r2, [pc, #112]	; (8005660 <HAL_DMA_Init+0x438>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d00d      	beq.n	800560e <HAL_DMA_Init+0x3e6>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a1b      	ldr	r2, [pc, #108]	; (8005664 <HAL_DMA_Init+0x43c>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d008      	beq.n	800560e <HAL_DMA_Init+0x3e6>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a19      	ldr	r2, [pc, #100]	; (8005668 <HAL_DMA_Init+0x440>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d003      	beq.n	800560e <HAL_DMA_Init+0x3e6>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a18      	ldr	r2, [pc, #96]	; (800566c <HAL_DMA_Init+0x444>)
 800560c:	4293      	cmp	r3, r2
 800560e:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2202      	movs	r2, #2
 8005614:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005628:	697a      	ldr	r2, [r7, #20]
 800562a:	4b11      	ldr	r3, [pc, #68]	; (8005670 <HAL_DMA_Init+0x448>)
 800562c:	4013      	ands	r3, r2
 800562e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	2b40      	cmp	r3, #64	; 0x40
 8005636:	d01d      	beq.n	8005674 <HAL_DMA_Init+0x44c>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	2b80      	cmp	r3, #128	; 0x80
 800563e:	d102      	bne.n	8005646 <HAL_DMA_Init+0x41e>
 8005640:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005644:	e017      	b.n	8005676 <HAL_DMA_Init+0x44e>
 8005646:	2300      	movs	r3, #0
 8005648:	e015      	b.n	8005676 <HAL_DMA_Init+0x44e>
 800564a:	bf00      	nop
 800564c:	fe10803f 	.word	0xfe10803f
 8005650:	58025408 	.word	0x58025408
 8005654:	5802541c 	.word	0x5802541c
 8005658:	58025430 	.word	0x58025430
 800565c:	58025444 	.word	0x58025444
 8005660:	58025458 	.word	0x58025458
 8005664:	5802546c 	.word	0x5802546c
 8005668:	58025480 	.word	0x58025480
 800566c:	58025494 	.word	0x58025494
 8005670:	fffe000f 	.word	0xfffe000f
 8005674:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	68d2      	ldr	r2, [r2, #12]
 800567a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800567c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005684:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800568c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005694:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800569c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80056a4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	461a      	mov	r2, r3
 80056ba:	4b6e      	ldr	r3, [pc, #440]	; (8005874 <HAL_DMA_Init+0x64c>)
 80056bc:	4413      	add	r3, r2
 80056be:	4a6e      	ldr	r2, [pc, #440]	; (8005878 <HAL_DMA_Init+0x650>)
 80056c0:	fba2 2303 	umull	r2, r3, r2, r3
 80056c4:	091b      	lsrs	r3, r3, #4
 80056c6:	009a      	lsls	r2, r3, #2
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f001 fc45 	bl	8006f5c <DMA_CalcBaseAndBitshift>
 80056d2:	4603      	mov	r3, r0
 80056d4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056da:	f003 031f 	and.w	r3, r3, #31
 80056de:	2201      	movs	r2, #1
 80056e0:	409a      	lsls	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	605a      	str	r2, [r3, #4]
 80056e6:	e008      	b.n	80056fa <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2240      	movs	r2, #64	; 0x40
 80056ec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2203      	movs	r2, #3
 80056f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e0b7      	b.n	800586a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a5f      	ldr	r2, [pc, #380]	; (800587c <HAL_DMA_Init+0x654>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d072      	beq.n	80057ea <HAL_DMA_Init+0x5c2>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a5d      	ldr	r2, [pc, #372]	; (8005880 <HAL_DMA_Init+0x658>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d06d      	beq.n	80057ea <HAL_DMA_Init+0x5c2>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a5c      	ldr	r2, [pc, #368]	; (8005884 <HAL_DMA_Init+0x65c>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d068      	beq.n	80057ea <HAL_DMA_Init+0x5c2>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a5a      	ldr	r2, [pc, #360]	; (8005888 <HAL_DMA_Init+0x660>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d063      	beq.n	80057ea <HAL_DMA_Init+0x5c2>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a59      	ldr	r2, [pc, #356]	; (800588c <HAL_DMA_Init+0x664>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d05e      	beq.n	80057ea <HAL_DMA_Init+0x5c2>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a57      	ldr	r2, [pc, #348]	; (8005890 <HAL_DMA_Init+0x668>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d059      	beq.n	80057ea <HAL_DMA_Init+0x5c2>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a56      	ldr	r2, [pc, #344]	; (8005894 <HAL_DMA_Init+0x66c>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d054      	beq.n	80057ea <HAL_DMA_Init+0x5c2>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a54      	ldr	r2, [pc, #336]	; (8005898 <HAL_DMA_Init+0x670>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d04f      	beq.n	80057ea <HAL_DMA_Init+0x5c2>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a53      	ldr	r2, [pc, #332]	; (800589c <HAL_DMA_Init+0x674>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d04a      	beq.n	80057ea <HAL_DMA_Init+0x5c2>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a51      	ldr	r2, [pc, #324]	; (80058a0 <HAL_DMA_Init+0x678>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d045      	beq.n	80057ea <HAL_DMA_Init+0x5c2>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a50      	ldr	r2, [pc, #320]	; (80058a4 <HAL_DMA_Init+0x67c>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d040      	beq.n	80057ea <HAL_DMA_Init+0x5c2>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a4e      	ldr	r2, [pc, #312]	; (80058a8 <HAL_DMA_Init+0x680>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d03b      	beq.n	80057ea <HAL_DMA_Init+0x5c2>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a4d      	ldr	r2, [pc, #308]	; (80058ac <HAL_DMA_Init+0x684>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d036      	beq.n	80057ea <HAL_DMA_Init+0x5c2>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a4b      	ldr	r2, [pc, #300]	; (80058b0 <HAL_DMA_Init+0x688>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d031      	beq.n	80057ea <HAL_DMA_Init+0x5c2>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a4a      	ldr	r2, [pc, #296]	; (80058b4 <HAL_DMA_Init+0x68c>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d02c      	beq.n	80057ea <HAL_DMA_Init+0x5c2>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a48      	ldr	r2, [pc, #288]	; (80058b8 <HAL_DMA_Init+0x690>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d027      	beq.n	80057ea <HAL_DMA_Init+0x5c2>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a47      	ldr	r2, [pc, #284]	; (80058bc <HAL_DMA_Init+0x694>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d022      	beq.n	80057ea <HAL_DMA_Init+0x5c2>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a45      	ldr	r2, [pc, #276]	; (80058c0 <HAL_DMA_Init+0x698>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d01d      	beq.n	80057ea <HAL_DMA_Init+0x5c2>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a44      	ldr	r2, [pc, #272]	; (80058c4 <HAL_DMA_Init+0x69c>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d018      	beq.n	80057ea <HAL_DMA_Init+0x5c2>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a42      	ldr	r2, [pc, #264]	; (80058c8 <HAL_DMA_Init+0x6a0>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d013      	beq.n	80057ea <HAL_DMA_Init+0x5c2>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a41      	ldr	r2, [pc, #260]	; (80058cc <HAL_DMA_Init+0x6a4>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d00e      	beq.n	80057ea <HAL_DMA_Init+0x5c2>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a3f      	ldr	r2, [pc, #252]	; (80058d0 <HAL_DMA_Init+0x6a8>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d009      	beq.n	80057ea <HAL_DMA_Init+0x5c2>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a3e      	ldr	r2, [pc, #248]	; (80058d4 <HAL_DMA_Init+0x6ac>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d004      	beq.n	80057ea <HAL_DMA_Init+0x5c2>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a3c      	ldr	r2, [pc, #240]	; (80058d8 <HAL_DMA_Init+0x6b0>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d101      	bne.n	80057ee <HAL_DMA_Init+0x5c6>
 80057ea:	2301      	movs	r3, #1
 80057ec:	e000      	b.n	80057f0 <HAL_DMA_Init+0x5c8>
 80057ee:	2300      	movs	r3, #0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d032      	beq.n	800585a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f001 fcdf 	bl	80071b8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	2b80      	cmp	r3, #128	; 0x80
 8005800:	d102      	bne.n	8005808 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685a      	ldr	r2, [r3, #4]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005810:	b2d2      	uxtb	r2, r2
 8005812:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800581c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d010      	beq.n	8005848 <HAL_DMA_Init+0x620>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	2b08      	cmp	r3, #8
 800582c:	d80c      	bhi.n	8005848 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f001 fd5c 	bl	80072ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005838:	2200      	movs	r2, #0
 800583a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005844:	605a      	str	r2, [r3, #4]
 8005846:	e008      	b.n	800585a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3718      	adds	r7, #24
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	a7fdabf8 	.word	0xa7fdabf8
 8005878:	cccccccd 	.word	0xcccccccd
 800587c:	40020010 	.word	0x40020010
 8005880:	40020028 	.word	0x40020028
 8005884:	40020040 	.word	0x40020040
 8005888:	40020058 	.word	0x40020058
 800588c:	40020070 	.word	0x40020070
 8005890:	40020088 	.word	0x40020088
 8005894:	400200a0 	.word	0x400200a0
 8005898:	400200b8 	.word	0x400200b8
 800589c:	40020410 	.word	0x40020410
 80058a0:	40020428 	.word	0x40020428
 80058a4:	40020440 	.word	0x40020440
 80058a8:	40020458 	.word	0x40020458
 80058ac:	40020470 	.word	0x40020470
 80058b0:	40020488 	.word	0x40020488
 80058b4:	400204a0 	.word	0x400204a0
 80058b8:	400204b8 	.word	0x400204b8
 80058bc:	58025408 	.word	0x58025408
 80058c0:	5802541c 	.word	0x5802541c
 80058c4:	58025430 	.word	0x58025430
 80058c8:	58025444 	.word	0x58025444
 80058cc:	58025458 	.word	0x58025458
 80058d0:	5802546c 	.word	0x5802546c
 80058d4:	58025480 	.word	0x58025480
 80058d8:	58025494 	.word	0x58025494

080058dc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b086      	sub	sp, #24
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
 80058e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058ea:	2300      	movs	r3, #0
 80058ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d101      	bne.n	80058f8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e226      	b.n	8005d46 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d101      	bne.n	8005906 <HAL_DMA_Start_IT+0x2a>
 8005902:	2302      	movs	r3, #2
 8005904:	e21f      	b.n	8005d46 <HAL_DMA_Start_IT+0x46a>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b01      	cmp	r3, #1
 8005918:	f040 820a 	bne.w	8005d30 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2202      	movs	r2, #2
 8005920:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a68      	ldr	r2, [pc, #416]	; (8005ad0 <HAL_DMA_Start_IT+0x1f4>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d04a      	beq.n	80059ca <HAL_DMA_Start_IT+0xee>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a66      	ldr	r2, [pc, #408]	; (8005ad4 <HAL_DMA_Start_IT+0x1f8>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d045      	beq.n	80059ca <HAL_DMA_Start_IT+0xee>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a65      	ldr	r2, [pc, #404]	; (8005ad8 <HAL_DMA_Start_IT+0x1fc>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d040      	beq.n	80059ca <HAL_DMA_Start_IT+0xee>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a63      	ldr	r2, [pc, #396]	; (8005adc <HAL_DMA_Start_IT+0x200>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d03b      	beq.n	80059ca <HAL_DMA_Start_IT+0xee>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a62      	ldr	r2, [pc, #392]	; (8005ae0 <HAL_DMA_Start_IT+0x204>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d036      	beq.n	80059ca <HAL_DMA_Start_IT+0xee>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a60      	ldr	r2, [pc, #384]	; (8005ae4 <HAL_DMA_Start_IT+0x208>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d031      	beq.n	80059ca <HAL_DMA_Start_IT+0xee>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a5f      	ldr	r2, [pc, #380]	; (8005ae8 <HAL_DMA_Start_IT+0x20c>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d02c      	beq.n	80059ca <HAL_DMA_Start_IT+0xee>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a5d      	ldr	r2, [pc, #372]	; (8005aec <HAL_DMA_Start_IT+0x210>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d027      	beq.n	80059ca <HAL_DMA_Start_IT+0xee>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a5c      	ldr	r2, [pc, #368]	; (8005af0 <HAL_DMA_Start_IT+0x214>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d022      	beq.n	80059ca <HAL_DMA_Start_IT+0xee>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a5a      	ldr	r2, [pc, #360]	; (8005af4 <HAL_DMA_Start_IT+0x218>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d01d      	beq.n	80059ca <HAL_DMA_Start_IT+0xee>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a59      	ldr	r2, [pc, #356]	; (8005af8 <HAL_DMA_Start_IT+0x21c>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d018      	beq.n	80059ca <HAL_DMA_Start_IT+0xee>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a57      	ldr	r2, [pc, #348]	; (8005afc <HAL_DMA_Start_IT+0x220>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d013      	beq.n	80059ca <HAL_DMA_Start_IT+0xee>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a56      	ldr	r2, [pc, #344]	; (8005b00 <HAL_DMA_Start_IT+0x224>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d00e      	beq.n	80059ca <HAL_DMA_Start_IT+0xee>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a54      	ldr	r2, [pc, #336]	; (8005b04 <HAL_DMA_Start_IT+0x228>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d009      	beq.n	80059ca <HAL_DMA_Start_IT+0xee>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a53      	ldr	r2, [pc, #332]	; (8005b08 <HAL_DMA_Start_IT+0x22c>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d004      	beq.n	80059ca <HAL_DMA_Start_IT+0xee>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a51      	ldr	r2, [pc, #324]	; (8005b0c <HAL_DMA_Start_IT+0x230>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d108      	bne.n	80059dc <HAL_DMA_Start_IT+0x100>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f022 0201 	bic.w	r2, r2, #1
 80059d8:	601a      	str	r2, [r3, #0]
 80059da:	e007      	b.n	80059ec <HAL_DMA_Start_IT+0x110>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f022 0201 	bic.w	r2, r2, #1
 80059ea:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	68b9      	ldr	r1, [r7, #8]
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f001 f906 	bl	8006c04 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a34      	ldr	r2, [pc, #208]	; (8005ad0 <HAL_DMA_Start_IT+0x1f4>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d04a      	beq.n	8005a98 <HAL_DMA_Start_IT+0x1bc>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a33      	ldr	r2, [pc, #204]	; (8005ad4 <HAL_DMA_Start_IT+0x1f8>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d045      	beq.n	8005a98 <HAL_DMA_Start_IT+0x1bc>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a31      	ldr	r2, [pc, #196]	; (8005ad8 <HAL_DMA_Start_IT+0x1fc>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d040      	beq.n	8005a98 <HAL_DMA_Start_IT+0x1bc>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a30      	ldr	r2, [pc, #192]	; (8005adc <HAL_DMA_Start_IT+0x200>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d03b      	beq.n	8005a98 <HAL_DMA_Start_IT+0x1bc>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a2e      	ldr	r2, [pc, #184]	; (8005ae0 <HAL_DMA_Start_IT+0x204>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d036      	beq.n	8005a98 <HAL_DMA_Start_IT+0x1bc>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a2d      	ldr	r2, [pc, #180]	; (8005ae4 <HAL_DMA_Start_IT+0x208>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d031      	beq.n	8005a98 <HAL_DMA_Start_IT+0x1bc>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a2b      	ldr	r2, [pc, #172]	; (8005ae8 <HAL_DMA_Start_IT+0x20c>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d02c      	beq.n	8005a98 <HAL_DMA_Start_IT+0x1bc>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a2a      	ldr	r2, [pc, #168]	; (8005aec <HAL_DMA_Start_IT+0x210>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d027      	beq.n	8005a98 <HAL_DMA_Start_IT+0x1bc>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a28      	ldr	r2, [pc, #160]	; (8005af0 <HAL_DMA_Start_IT+0x214>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d022      	beq.n	8005a98 <HAL_DMA_Start_IT+0x1bc>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a27      	ldr	r2, [pc, #156]	; (8005af4 <HAL_DMA_Start_IT+0x218>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d01d      	beq.n	8005a98 <HAL_DMA_Start_IT+0x1bc>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a25      	ldr	r2, [pc, #148]	; (8005af8 <HAL_DMA_Start_IT+0x21c>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d018      	beq.n	8005a98 <HAL_DMA_Start_IT+0x1bc>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a24      	ldr	r2, [pc, #144]	; (8005afc <HAL_DMA_Start_IT+0x220>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d013      	beq.n	8005a98 <HAL_DMA_Start_IT+0x1bc>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a22      	ldr	r2, [pc, #136]	; (8005b00 <HAL_DMA_Start_IT+0x224>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d00e      	beq.n	8005a98 <HAL_DMA_Start_IT+0x1bc>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a21      	ldr	r2, [pc, #132]	; (8005b04 <HAL_DMA_Start_IT+0x228>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d009      	beq.n	8005a98 <HAL_DMA_Start_IT+0x1bc>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a1f      	ldr	r2, [pc, #124]	; (8005b08 <HAL_DMA_Start_IT+0x22c>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d004      	beq.n	8005a98 <HAL_DMA_Start_IT+0x1bc>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a1e      	ldr	r2, [pc, #120]	; (8005b0c <HAL_DMA_Start_IT+0x230>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d101      	bne.n	8005a9c <HAL_DMA_Start_IT+0x1c0>
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e000      	b.n	8005a9e <HAL_DMA_Start_IT+0x1c2>
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d036      	beq.n	8005b10 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f023 021e 	bic.w	r2, r3, #30
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f042 0216 	orr.w	r2, r2, #22
 8005ab4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d03e      	beq.n	8005b3c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f042 0208 	orr.w	r2, r2, #8
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	e035      	b.n	8005b3c <HAL_DMA_Start_IT+0x260>
 8005ad0:	40020010 	.word	0x40020010
 8005ad4:	40020028 	.word	0x40020028
 8005ad8:	40020040 	.word	0x40020040
 8005adc:	40020058 	.word	0x40020058
 8005ae0:	40020070 	.word	0x40020070
 8005ae4:	40020088 	.word	0x40020088
 8005ae8:	400200a0 	.word	0x400200a0
 8005aec:	400200b8 	.word	0x400200b8
 8005af0:	40020410 	.word	0x40020410
 8005af4:	40020428 	.word	0x40020428
 8005af8:	40020440 	.word	0x40020440
 8005afc:	40020458 	.word	0x40020458
 8005b00:	40020470 	.word	0x40020470
 8005b04:	40020488 	.word	0x40020488
 8005b08:	400204a0 	.word	0x400204a0
 8005b0c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f023 020e 	bic.w	r2, r3, #14
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f042 020a 	orr.w	r2, r2, #10
 8005b22:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d007      	beq.n	8005b3c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f042 0204 	orr.w	r2, r2, #4
 8005b3a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a83      	ldr	r2, [pc, #524]	; (8005d50 <HAL_DMA_Start_IT+0x474>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d072      	beq.n	8005c2c <HAL_DMA_Start_IT+0x350>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a82      	ldr	r2, [pc, #520]	; (8005d54 <HAL_DMA_Start_IT+0x478>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d06d      	beq.n	8005c2c <HAL_DMA_Start_IT+0x350>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a80      	ldr	r2, [pc, #512]	; (8005d58 <HAL_DMA_Start_IT+0x47c>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d068      	beq.n	8005c2c <HAL_DMA_Start_IT+0x350>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a7f      	ldr	r2, [pc, #508]	; (8005d5c <HAL_DMA_Start_IT+0x480>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d063      	beq.n	8005c2c <HAL_DMA_Start_IT+0x350>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a7d      	ldr	r2, [pc, #500]	; (8005d60 <HAL_DMA_Start_IT+0x484>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d05e      	beq.n	8005c2c <HAL_DMA_Start_IT+0x350>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a7c      	ldr	r2, [pc, #496]	; (8005d64 <HAL_DMA_Start_IT+0x488>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d059      	beq.n	8005c2c <HAL_DMA_Start_IT+0x350>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a7a      	ldr	r2, [pc, #488]	; (8005d68 <HAL_DMA_Start_IT+0x48c>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d054      	beq.n	8005c2c <HAL_DMA_Start_IT+0x350>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a79      	ldr	r2, [pc, #484]	; (8005d6c <HAL_DMA_Start_IT+0x490>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d04f      	beq.n	8005c2c <HAL_DMA_Start_IT+0x350>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a77      	ldr	r2, [pc, #476]	; (8005d70 <HAL_DMA_Start_IT+0x494>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d04a      	beq.n	8005c2c <HAL_DMA_Start_IT+0x350>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a76      	ldr	r2, [pc, #472]	; (8005d74 <HAL_DMA_Start_IT+0x498>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d045      	beq.n	8005c2c <HAL_DMA_Start_IT+0x350>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a74      	ldr	r2, [pc, #464]	; (8005d78 <HAL_DMA_Start_IT+0x49c>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d040      	beq.n	8005c2c <HAL_DMA_Start_IT+0x350>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a73      	ldr	r2, [pc, #460]	; (8005d7c <HAL_DMA_Start_IT+0x4a0>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d03b      	beq.n	8005c2c <HAL_DMA_Start_IT+0x350>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a71      	ldr	r2, [pc, #452]	; (8005d80 <HAL_DMA_Start_IT+0x4a4>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d036      	beq.n	8005c2c <HAL_DMA_Start_IT+0x350>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a70      	ldr	r2, [pc, #448]	; (8005d84 <HAL_DMA_Start_IT+0x4a8>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d031      	beq.n	8005c2c <HAL_DMA_Start_IT+0x350>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a6e      	ldr	r2, [pc, #440]	; (8005d88 <HAL_DMA_Start_IT+0x4ac>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d02c      	beq.n	8005c2c <HAL_DMA_Start_IT+0x350>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a6d      	ldr	r2, [pc, #436]	; (8005d8c <HAL_DMA_Start_IT+0x4b0>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d027      	beq.n	8005c2c <HAL_DMA_Start_IT+0x350>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a6b      	ldr	r2, [pc, #428]	; (8005d90 <HAL_DMA_Start_IT+0x4b4>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d022      	beq.n	8005c2c <HAL_DMA_Start_IT+0x350>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a6a      	ldr	r2, [pc, #424]	; (8005d94 <HAL_DMA_Start_IT+0x4b8>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d01d      	beq.n	8005c2c <HAL_DMA_Start_IT+0x350>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a68      	ldr	r2, [pc, #416]	; (8005d98 <HAL_DMA_Start_IT+0x4bc>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d018      	beq.n	8005c2c <HAL_DMA_Start_IT+0x350>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a67      	ldr	r2, [pc, #412]	; (8005d9c <HAL_DMA_Start_IT+0x4c0>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d013      	beq.n	8005c2c <HAL_DMA_Start_IT+0x350>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a65      	ldr	r2, [pc, #404]	; (8005da0 <HAL_DMA_Start_IT+0x4c4>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d00e      	beq.n	8005c2c <HAL_DMA_Start_IT+0x350>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a64      	ldr	r2, [pc, #400]	; (8005da4 <HAL_DMA_Start_IT+0x4c8>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d009      	beq.n	8005c2c <HAL_DMA_Start_IT+0x350>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a62      	ldr	r2, [pc, #392]	; (8005da8 <HAL_DMA_Start_IT+0x4cc>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d004      	beq.n	8005c2c <HAL_DMA_Start_IT+0x350>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a61      	ldr	r2, [pc, #388]	; (8005dac <HAL_DMA_Start_IT+0x4d0>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d101      	bne.n	8005c30 <HAL_DMA_Start_IT+0x354>
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e000      	b.n	8005c32 <HAL_DMA_Start_IT+0x356>
 8005c30:	2300      	movs	r3, #0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d01a      	beq.n	8005c6c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d007      	beq.n	8005c54 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c52:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d007      	beq.n	8005c6c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c6a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a37      	ldr	r2, [pc, #220]	; (8005d50 <HAL_DMA_Start_IT+0x474>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d04a      	beq.n	8005d0c <HAL_DMA_Start_IT+0x430>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a36      	ldr	r2, [pc, #216]	; (8005d54 <HAL_DMA_Start_IT+0x478>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d045      	beq.n	8005d0c <HAL_DMA_Start_IT+0x430>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a34      	ldr	r2, [pc, #208]	; (8005d58 <HAL_DMA_Start_IT+0x47c>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d040      	beq.n	8005d0c <HAL_DMA_Start_IT+0x430>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a33      	ldr	r2, [pc, #204]	; (8005d5c <HAL_DMA_Start_IT+0x480>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d03b      	beq.n	8005d0c <HAL_DMA_Start_IT+0x430>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a31      	ldr	r2, [pc, #196]	; (8005d60 <HAL_DMA_Start_IT+0x484>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d036      	beq.n	8005d0c <HAL_DMA_Start_IT+0x430>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a30      	ldr	r2, [pc, #192]	; (8005d64 <HAL_DMA_Start_IT+0x488>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d031      	beq.n	8005d0c <HAL_DMA_Start_IT+0x430>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a2e      	ldr	r2, [pc, #184]	; (8005d68 <HAL_DMA_Start_IT+0x48c>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d02c      	beq.n	8005d0c <HAL_DMA_Start_IT+0x430>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a2d      	ldr	r2, [pc, #180]	; (8005d6c <HAL_DMA_Start_IT+0x490>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d027      	beq.n	8005d0c <HAL_DMA_Start_IT+0x430>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a2b      	ldr	r2, [pc, #172]	; (8005d70 <HAL_DMA_Start_IT+0x494>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d022      	beq.n	8005d0c <HAL_DMA_Start_IT+0x430>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a2a      	ldr	r2, [pc, #168]	; (8005d74 <HAL_DMA_Start_IT+0x498>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d01d      	beq.n	8005d0c <HAL_DMA_Start_IT+0x430>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a28      	ldr	r2, [pc, #160]	; (8005d78 <HAL_DMA_Start_IT+0x49c>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d018      	beq.n	8005d0c <HAL_DMA_Start_IT+0x430>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a27      	ldr	r2, [pc, #156]	; (8005d7c <HAL_DMA_Start_IT+0x4a0>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d013      	beq.n	8005d0c <HAL_DMA_Start_IT+0x430>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a25      	ldr	r2, [pc, #148]	; (8005d80 <HAL_DMA_Start_IT+0x4a4>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d00e      	beq.n	8005d0c <HAL_DMA_Start_IT+0x430>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a24      	ldr	r2, [pc, #144]	; (8005d84 <HAL_DMA_Start_IT+0x4a8>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d009      	beq.n	8005d0c <HAL_DMA_Start_IT+0x430>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a22      	ldr	r2, [pc, #136]	; (8005d88 <HAL_DMA_Start_IT+0x4ac>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d004      	beq.n	8005d0c <HAL_DMA_Start_IT+0x430>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a21      	ldr	r2, [pc, #132]	; (8005d8c <HAL_DMA_Start_IT+0x4b0>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d108      	bne.n	8005d1e <HAL_DMA_Start_IT+0x442>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f042 0201 	orr.w	r2, r2, #1
 8005d1a:	601a      	str	r2, [r3, #0]
 8005d1c:	e012      	b.n	8005d44 <HAL_DMA_Start_IT+0x468>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f042 0201 	orr.w	r2, r2, #1
 8005d2c:	601a      	str	r2, [r3, #0]
 8005d2e:	e009      	b.n	8005d44 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d36:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005d44:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3718      	adds	r7, #24
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	40020010 	.word	0x40020010
 8005d54:	40020028 	.word	0x40020028
 8005d58:	40020040 	.word	0x40020040
 8005d5c:	40020058 	.word	0x40020058
 8005d60:	40020070 	.word	0x40020070
 8005d64:	40020088 	.word	0x40020088
 8005d68:	400200a0 	.word	0x400200a0
 8005d6c:	400200b8 	.word	0x400200b8
 8005d70:	40020410 	.word	0x40020410
 8005d74:	40020428 	.word	0x40020428
 8005d78:	40020440 	.word	0x40020440
 8005d7c:	40020458 	.word	0x40020458
 8005d80:	40020470 	.word	0x40020470
 8005d84:	40020488 	.word	0x40020488
 8005d88:	400204a0 	.word	0x400204a0
 8005d8c:	400204b8 	.word	0x400204b8
 8005d90:	58025408 	.word	0x58025408
 8005d94:	5802541c 	.word	0x5802541c
 8005d98:	58025430 	.word	0x58025430
 8005d9c:	58025444 	.word	0x58025444
 8005da0:	58025458 	.word	0x58025458
 8005da4:	5802546c 	.word	0x5802546c
 8005da8:	58025480 	.word	0x58025480
 8005dac:	58025494 	.word	0x58025494

08005db0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b08a      	sub	sp, #40	; 0x28
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005db8:	2300      	movs	r3, #0
 8005dba:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005dbc:	4b67      	ldr	r3, [pc, #412]	; (8005f5c <HAL_DMA_IRQHandler+0x1ac>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a67      	ldr	r2, [pc, #412]	; (8005f60 <HAL_DMA_IRQHandler+0x1b0>)
 8005dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc6:	0a9b      	lsrs	r3, r3, #10
 8005dc8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dce:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dd4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005dd6:	6a3b      	ldr	r3, [r7, #32]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a5f      	ldr	r2, [pc, #380]	; (8005f64 <HAL_DMA_IRQHandler+0x1b4>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d04a      	beq.n	8005e82 <HAL_DMA_IRQHandler+0xd2>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a5d      	ldr	r2, [pc, #372]	; (8005f68 <HAL_DMA_IRQHandler+0x1b8>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d045      	beq.n	8005e82 <HAL_DMA_IRQHandler+0xd2>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a5c      	ldr	r2, [pc, #368]	; (8005f6c <HAL_DMA_IRQHandler+0x1bc>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d040      	beq.n	8005e82 <HAL_DMA_IRQHandler+0xd2>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a5a      	ldr	r2, [pc, #360]	; (8005f70 <HAL_DMA_IRQHandler+0x1c0>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d03b      	beq.n	8005e82 <HAL_DMA_IRQHandler+0xd2>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a59      	ldr	r2, [pc, #356]	; (8005f74 <HAL_DMA_IRQHandler+0x1c4>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d036      	beq.n	8005e82 <HAL_DMA_IRQHandler+0xd2>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a57      	ldr	r2, [pc, #348]	; (8005f78 <HAL_DMA_IRQHandler+0x1c8>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d031      	beq.n	8005e82 <HAL_DMA_IRQHandler+0xd2>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a56      	ldr	r2, [pc, #344]	; (8005f7c <HAL_DMA_IRQHandler+0x1cc>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d02c      	beq.n	8005e82 <HAL_DMA_IRQHandler+0xd2>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a54      	ldr	r2, [pc, #336]	; (8005f80 <HAL_DMA_IRQHandler+0x1d0>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d027      	beq.n	8005e82 <HAL_DMA_IRQHandler+0xd2>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a53      	ldr	r2, [pc, #332]	; (8005f84 <HAL_DMA_IRQHandler+0x1d4>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d022      	beq.n	8005e82 <HAL_DMA_IRQHandler+0xd2>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a51      	ldr	r2, [pc, #324]	; (8005f88 <HAL_DMA_IRQHandler+0x1d8>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d01d      	beq.n	8005e82 <HAL_DMA_IRQHandler+0xd2>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a50      	ldr	r2, [pc, #320]	; (8005f8c <HAL_DMA_IRQHandler+0x1dc>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d018      	beq.n	8005e82 <HAL_DMA_IRQHandler+0xd2>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a4e      	ldr	r2, [pc, #312]	; (8005f90 <HAL_DMA_IRQHandler+0x1e0>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d013      	beq.n	8005e82 <HAL_DMA_IRQHandler+0xd2>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a4d      	ldr	r2, [pc, #308]	; (8005f94 <HAL_DMA_IRQHandler+0x1e4>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d00e      	beq.n	8005e82 <HAL_DMA_IRQHandler+0xd2>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a4b      	ldr	r2, [pc, #300]	; (8005f98 <HAL_DMA_IRQHandler+0x1e8>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d009      	beq.n	8005e82 <HAL_DMA_IRQHandler+0xd2>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a4a      	ldr	r2, [pc, #296]	; (8005f9c <HAL_DMA_IRQHandler+0x1ec>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d004      	beq.n	8005e82 <HAL_DMA_IRQHandler+0xd2>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a48      	ldr	r2, [pc, #288]	; (8005fa0 <HAL_DMA_IRQHandler+0x1f0>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d101      	bne.n	8005e86 <HAL_DMA_IRQHandler+0xd6>
 8005e82:	2301      	movs	r3, #1
 8005e84:	e000      	b.n	8005e88 <HAL_DMA_IRQHandler+0xd8>
 8005e86:	2300      	movs	r3, #0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f000 842b 	beq.w	80066e4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e92:	f003 031f 	and.w	r3, r3, #31
 8005e96:	2208      	movs	r2, #8
 8005e98:	409a      	lsls	r2, r3
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f000 80a2 	beq.w	8005fe8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a2e      	ldr	r2, [pc, #184]	; (8005f64 <HAL_DMA_IRQHandler+0x1b4>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d04a      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x194>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a2d      	ldr	r2, [pc, #180]	; (8005f68 <HAL_DMA_IRQHandler+0x1b8>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d045      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x194>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a2b      	ldr	r2, [pc, #172]	; (8005f6c <HAL_DMA_IRQHandler+0x1bc>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d040      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x194>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a2a      	ldr	r2, [pc, #168]	; (8005f70 <HAL_DMA_IRQHandler+0x1c0>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d03b      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x194>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a28      	ldr	r2, [pc, #160]	; (8005f74 <HAL_DMA_IRQHandler+0x1c4>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d036      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x194>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a27      	ldr	r2, [pc, #156]	; (8005f78 <HAL_DMA_IRQHandler+0x1c8>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d031      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x194>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a25      	ldr	r2, [pc, #148]	; (8005f7c <HAL_DMA_IRQHandler+0x1cc>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d02c      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x194>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a24      	ldr	r2, [pc, #144]	; (8005f80 <HAL_DMA_IRQHandler+0x1d0>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d027      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x194>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a22      	ldr	r2, [pc, #136]	; (8005f84 <HAL_DMA_IRQHandler+0x1d4>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d022      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x194>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a21      	ldr	r2, [pc, #132]	; (8005f88 <HAL_DMA_IRQHandler+0x1d8>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d01d      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x194>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a1f      	ldr	r2, [pc, #124]	; (8005f8c <HAL_DMA_IRQHandler+0x1dc>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d018      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x194>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a1e      	ldr	r2, [pc, #120]	; (8005f90 <HAL_DMA_IRQHandler+0x1e0>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d013      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x194>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a1c      	ldr	r2, [pc, #112]	; (8005f94 <HAL_DMA_IRQHandler+0x1e4>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d00e      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x194>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a1b      	ldr	r2, [pc, #108]	; (8005f98 <HAL_DMA_IRQHandler+0x1e8>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d009      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x194>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a19      	ldr	r2, [pc, #100]	; (8005f9c <HAL_DMA_IRQHandler+0x1ec>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d004      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x194>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a18      	ldr	r2, [pc, #96]	; (8005fa0 <HAL_DMA_IRQHandler+0x1f0>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d12f      	bne.n	8005fa4 <HAL_DMA_IRQHandler+0x1f4>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0304 	and.w	r3, r3, #4
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	bf14      	ite	ne
 8005f52:	2301      	movne	r3, #1
 8005f54:	2300      	moveq	r3, #0
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	e02e      	b.n	8005fb8 <HAL_DMA_IRQHandler+0x208>
 8005f5a:	bf00      	nop
 8005f5c:	24000000 	.word	0x24000000
 8005f60:	1b4e81b5 	.word	0x1b4e81b5
 8005f64:	40020010 	.word	0x40020010
 8005f68:	40020028 	.word	0x40020028
 8005f6c:	40020040 	.word	0x40020040
 8005f70:	40020058 	.word	0x40020058
 8005f74:	40020070 	.word	0x40020070
 8005f78:	40020088 	.word	0x40020088
 8005f7c:	400200a0 	.word	0x400200a0
 8005f80:	400200b8 	.word	0x400200b8
 8005f84:	40020410 	.word	0x40020410
 8005f88:	40020428 	.word	0x40020428
 8005f8c:	40020440 	.word	0x40020440
 8005f90:	40020458 	.word	0x40020458
 8005f94:	40020470 	.word	0x40020470
 8005f98:	40020488 	.word	0x40020488
 8005f9c:	400204a0 	.word	0x400204a0
 8005fa0:	400204b8 	.word	0x400204b8
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0308 	and.w	r3, r3, #8
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	bf14      	ite	ne
 8005fb2:	2301      	movne	r3, #1
 8005fb4:	2300      	moveq	r3, #0
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d015      	beq.n	8005fe8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f022 0204 	bic.w	r2, r2, #4
 8005fca:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fd0:	f003 031f 	and.w	r3, r3, #31
 8005fd4:	2208      	movs	r2, #8
 8005fd6:	409a      	lsls	r2, r3
 8005fd8:	6a3b      	ldr	r3, [r7, #32]
 8005fda:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe0:	f043 0201 	orr.w	r2, r3, #1
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fec:	f003 031f 	and.w	r3, r3, #31
 8005ff0:	69ba      	ldr	r2, [r7, #24]
 8005ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d06e      	beq.n	80060dc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a69      	ldr	r2, [pc, #420]	; (80061a8 <HAL_DMA_IRQHandler+0x3f8>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d04a      	beq.n	800609e <HAL_DMA_IRQHandler+0x2ee>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a67      	ldr	r2, [pc, #412]	; (80061ac <HAL_DMA_IRQHandler+0x3fc>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d045      	beq.n	800609e <HAL_DMA_IRQHandler+0x2ee>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a66      	ldr	r2, [pc, #408]	; (80061b0 <HAL_DMA_IRQHandler+0x400>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d040      	beq.n	800609e <HAL_DMA_IRQHandler+0x2ee>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a64      	ldr	r2, [pc, #400]	; (80061b4 <HAL_DMA_IRQHandler+0x404>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d03b      	beq.n	800609e <HAL_DMA_IRQHandler+0x2ee>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a63      	ldr	r2, [pc, #396]	; (80061b8 <HAL_DMA_IRQHandler+0x408>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d036      	beq.n	800609e <HAL_DMA_IRQHandler+0x2ee>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a61      	ldr	r2, [pc, #388]	; (80061bc <HAL_DMA_IRQHandler+0x40c>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d031      	beq.n	800609e <HAL_DMA_IRQHandler+0x2ee>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a60      	ldr	r2, [pc, #384]	; (80061c0 <HAL_DMA_IRQHandler+0x410>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d02c      	beq.n	800609e <HAL_DMA_IRQHandler+0x2ee>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a5e      	ldr	r2, [pc, #376]	; (80061c4 <HAL_DMA_IRQHandler+0x414>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d027      	beq.n	800609e <HAL_DMA_IRQHandler+0x2ee>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a5d      	ldr	r2, [pc, #372]	; (80061c8 <HAL_DMA_IRQHandler+0x418>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d022      	beq.n	800609e <HAL_DMA_IRQHandler+0x2ee>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a5b      	ldr	r2, [pc, #364]	; (80061cc <HAL_DMA_IRQHandler+0x41c>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d01d      	beq.n	800609e <HAL_DMA_IRQHandler+0x2ee>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a5a      	ldr	r2, [pc, #360]	; (80061d0 <HAL_DMA_IRQHandler+0x420>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d018      	beq.n	800609e <HAL_DMA_IRQHandler+0x2ee>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a58      	ldr	r2, [pc, #352]	; (80061d4 <HAL_DMA_IRQHandler+0x424>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d013      	beq.n	800609e <HAL_DMA_IRQHandler+0x2ee>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a57      	ldr	r2, [pc, #348]	; (80061d8 <HAL_DMA_IRQHandler+0x428>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d00e      	beq.n	800609e <HAL_DMA_IRQHandler+0x2ee>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a55      	ldr	r2, [pc, #340]	; (80061dc <HAL_DMA_IRQHandler+0x42c>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d009      	beq.n	800609e <HAL_DMA_IRQHandler+0x2ee>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a54      	ldr	r2, [pc, #336]	; (80061e0 <HAL_DMA_IRQHandler+0x430>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d004      	beq.n	800609e <HAL_DMA_IRQHandler+0x2ee>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a52      	ldr	r2, [pc, #328]	; (80061e4 <HAL_DMA_IRQHandler+0x434>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d10a      	bne.n	80060b4 <HAL_DMA_IRQHandler+0x304>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	695b      	ldr	r3, [r3, #20]
 80060a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	bf14      	ite	ne
 80060ac:	2301      	movne	r3, #1
 80060ae:	2300      	moveq	r3, #0
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	e003      	b.n	80060bc <HAL_DMA_IRQHandler+0x30c>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2300      	movs	r3, #0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00d      	beq.n	80060dc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060c4:	f003 031f 	and.w	r3, r3, #31
 80060c8:	2201      	movs	r2, #1
 80060ca:	409a      	lsls	r2, r3
 80060cc:	6a3b      	ldr	r3, [r7, #32]
 80060ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d4:	f043 0202 	orr.w	r2, r3, #2
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060e0:	f003 031f 	and.w	r3, r3, #31
 80060e4:	2204      	movs	r2, #4
 80060e6:	409a      	lsls	r2, r3
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	4013      	ands	r3, r2
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f000 808f 	beq.w	8006210 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a2c      	ldr	r2, [pc, #176]	; (80061a8 <HAL_DMA_IRQHandler+0x3f8>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d04a      	beq.n	8006192 <HAL_DMA_IRQHandler+0x3e2>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a2a      	ldr	r2, [pc, #168]	; (80061ac <HAL_DMA_IRQHandler+0x3fc>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d045      	beq.n	8006192 <HAL_DMA_IRQHandler+0x3e2>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a29      	ldr	r2, [pc, #164]	; (80061b0 <HAL_DMA_IRQHandler+0x400>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d040      	beq.n	8006192 <HAL_DMA_IRQHandler+0x3e2>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a27      	ldr	r2, [pc, #156]	; (80061b4 <HAL_DMA_IRQHandler+0x404>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d03b      	beq.n	8006192 <HAL_DMA_IRQHandler+0x3e2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a26      	ldr	r2, [pc, #152]	; (80061b8 <HAL_DMA_IRQHandler+0x408>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d036      	beq.n	8006192 <HAL_DMA_IRQHandler+0x3e2>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a24      	ldr	r2, [pc, #144]	; (80061bc <HAL_DMA_IRQHandler+0x40c>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d031      	beq.n	8006192 <HAL_DMA_IRQHandler+0x3e2>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a23      	ldr	r2, [pc, #140]	; (80061c0 <HAL_DMA_IRQHandler+0x410>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d02c      	beq.n	8006192 <HAL_DMA_IRQHandler+0x3e2>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a21      	ldr	r2, [pc, #132]	; (80061c4 <HAL_DMA_IRQHandler+0x414>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d027      	beq.n	8006192 <HAL_DMA_IRQHandler+0x3e2>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a20      	ldr	r2, [pc, #128]	; (80061c8 <HAL_DMA_IRQHandler+0x418>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d022      	beq.n	8006192 <HAL_DMA_IRQHandler+0x3e2>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a1e      	ldr	r2, [pc, #120]	; (80061cc <HAL_DMA_IRQHandler+0x41c>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d01d      	beq.n	8006192 <HAL_DMA_IRQHandler+0x3e2>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a1d      	ldr	r2, [pc, #116]	; (80061d0 <HAL_DMA_IRQHandler+0x420>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d018      	beq.n	8006192 <HAL_DMA_IRQHandler+0x3e2>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a1b      	ldr	r2, [pc, #108]	; (80061d4 <HAL_DMA_IRQHandler+0x424>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d013      	beq.n	8006192 <HAL_DMA_IRQHandler+0x3e2>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a1a      	ldr	r2, [pc, #104]	; (80061d8 <HAL_DMA_IRQHandler+0x428>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d00e      	beq.n	8006192 <HAL_DMA_IRQHandler+0x3e2>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a18      	ldr	r2, [pc, #96]	; (80061dc <HAL_DMA_IRQHandler+0x42c>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d009      	beq.n	8006192 <HAL_DMA_IRQHandler+0x3e2>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a17      	ldr	r2, [pc, #92]	; (80061e0 <HAL_DMA_IRQHandler+0x430>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d004      	beq.n	8006192 <HAL_DMA_IRQHandler+0x3e2>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a15      	ldr	r2, [pc, #84]	; (80061e4 <HAL_DMA_IRQHandler+0x434>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d12a      	bne.n	80061e8 <HAL_DMA_IRQHandler+0x438>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0302 	and.w	r3, r3, #2
 800619c:	2b00      	cmp	r3, #0
 800619e:	bf14      	ite	ne
 80061a0:	2301      	movne	r3, #1
 80061a2:	2300      	moveq	r3, #0
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	e023      	b.n	80061f0 <HAL_DMA_IRQHandler+0x440>
 80061a8:	40020010 	.word	0x40020010
 80061ac:	40020028 	.word	0x40020028
 80061b0:	40020040 	.word	0x40020040
 80061b4:	40020058 	.word	0x40020058
 80061b8:	40020070 	.word	0x40020070
 80061bc:	40020088 	.word	0x40020088
 80061c0:	400200a0 	.word	0x400200a0
 80061c4:	400200b8 	.word	0x400200b8
 80061c8:	40020410 	.word	0x40020410
 80061cc:	40020428 	.word	0x40020428
 80061d0:	40020440 	.word	0x40020440
 80061d4:	40020458 	.word	0x40020458
 80061d8:	40020470 	.word	0x40020470
 80061dc:	40020488 	.word	0x40020488
 80061e0:	400204a0 	.word	0x400204a0
 80061e4:	400204b8 	.word	0x400204b8
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2300      	movs	r3, #0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00d      	beq.n	8006210 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061f8:	f003 031f 	and.w	r3, r3, #31
 80061fc:	2204      	movs	r2, #4
 80061fe:	409a      	lsls	r2, r3
 8006200:	6a3b      	ldr	r3, [r7, #32]
 8006202:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006208:	f043 0204 	orr.w	r2, r3, #4
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006214:	f003 031f 	and.w	r3, r3, #31
 8006218:	2210      	movs	r2, #16
 800621a:	409a      	lsls	r2, r3
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	4013      	ands	r3, r2
 8006220:	2b00      	cmp	r3, #0
 8006222:	f000 80a6 	beq.w	8006372 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a85      	ldr	r2, [pc, #532]	; (8006440 <HAL_DMA_IRQHandler+0x690>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d04a      	beq.n	80062c6 <HAL_DMA_IRQHandler+0x516>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a83      	ldr	r2, [pc, #524]	; (8006444 <HAL_DMA_IRQHandler+0x694>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d045      	beq.n	80062c6 <HAL_DMA_IRQHandler+0x516>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a82      	ldr	r2, [pc, #520]	; (8006448 <HAL_DMA_IRQHandler+0x698>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d040      	beq.n	80062c6 <HAL_DMA_IRQHandler+0x516>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a80      	ldr	r2, [pc, #512]	; (800644c <HAL_DMA_IRQHandler+0x69c>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d03b      	beq.n	80062c6 <HAL_DMA_IRQHandler+0x516>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a7f      	ldr	r2, [pc, #508]	; (8006450 <HAL_DMA_IRQHandler+0x6a0>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d036      	beq.n	80062c6 <HAL_DMA_IRQHandler+0x516>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a7d      	ldr	r2, [pc, #500]	; (8006454 <HAL_DMA_IRQHandler+0x6a4>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d031      	beq.n	80062c6 <HAL_DMA_IRQHandler+0x516>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a7c      	ldr	r2, [pc, #496]	; (8006458 <HAL_DMA_IRQHandler+0x6a8>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d02c      	beq.n	80062c6 <HAL_DMA_IRQHandler+0x516>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a7a      	ldr	r2, [pc, #488]	; (800645c <HAL_DMA_IRQHandler+0x6ac>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d027      	beq.n	80062c6 <HAL_DMA_IRQHandler+0x516>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a79      	ldr	r2, [pc, #484]	; (8006460 <HAL_DMA_IRQHandler+0x6b0>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d022      	beq.n	80062c6 <HAL_DMA_IRQHandler+0x516>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a77      	ldr	r2, [pc, #476]	; (8006464 <HAL_DMA_IRQHandler+0x6b4>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d01d      	beq.n	80062c6 <HAL_DMA_IRQHandler+0x516>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a76      	ldr	r2, [pc, #472]	; (8006468 <HAL_DMA_IRQHandler+0x6b8>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d018      	beq.n	80062c6 <HAL_DMA_IRQHandler+0x516>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a74      	ldr	r2, [pc, #464]	; (800646c <HAL_DMA_IRQHandler+0x6bc>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d013      	beq.n	80062c6 <HAL_DMA_IRQHandler+0x516>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a73      	ldr	r2, [pc, #460]	; (8006470 <HAL_DMA_IRQHandler+0x6c0>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d00e      	beq.n	80062c6 <HAL_DMA_IRQHandler+0x516>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a71      	ldr	r2, [pc, #452]	; (8006474 <HAL_DMA_IRQHandler+0x6c4>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d009      	beq.n	80062c6 <HAL_DMA_IRQHandler+0x516>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a70      	ldr	r2, [pc, #448]	; (8006478 <HAL_DMA_IRQHandler+0x6c8>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d004      	beq.n	80062c6 <HAL_DMA_IRQHandler+0x516>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a6e      	ldr	r2, [pc, #440]	; (800647c <HAL_DMA_IRQHandler+0x6cc>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d10a      	bne.n	80062dc <HAL_DMA_IRQHandler+0x52c>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0308 	and.w	r3, r3, #8
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	bf14      	ite	ne
 80062d4:	2301      	movne	r3, #1
 80062d6:	2300      	moveq	r3, #0
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	e009      	b.n	80062f0 <HAL_DMA_IRQHandler+0x540>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0304 	and.w	r3, r3, #4
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	bf14      	ite	ne
 80062ea:	2301      	movne	r3, #1
 80062ec:	2300      	moveq	r3, #0
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d03e      	beq.n	8006372 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062f8:	f003 031f 	and.w	r3, r3, #31
 80062fc:	2210      	movs	r2, #16
 80062fe:	409a      	lsls	r2, r3
 8006300:	6a3b      	ldr	r3, [r7, #32]
 8006302:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d018      	beq.n	8006344 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d108      	bne.n	8006332 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006324:	2b00      	cmp	r3, #0
 8006326:	d024      	beq.n	8006372 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	4798      	blx	r3
 8006330:	e01f      	b.n	8006372 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006336:	2b00      	cmp	r3, #0
 8006338:	d01b      	beq.n	8006372 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	4798      	blx	r3
 8006342:	e016      	b.n	8006372 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800634e:	2b00      	cmp	r3, #0
 8006350:	d107      	bne.n	8006362 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f022 0208 	bic.w	r2, r2, #8
 8006360:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006366:	2b00      	cmp	r3, #0
 8006368:	d003      	beq.n	8006372 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006376:	f003 031f 	and.w	r3, r3, #31
 800637a:	2220      	movs	r2, #32
 800637c:	409a      	lsls	r2, r3
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	4013      	ands	r3, r2
 8006382:	2b00      	cmp	r3, #0
 8006384:	f000 8110 	beq.w	80065a8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a2c      	ldr	r2, [pc, #176]	; (8006440 <HAL_DMA_IRQHandler+0x690>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d04a      	beq.n	8006428 <HAL_DMA_IRQHandler+0x678>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a2b      	ldr	r2, [pc, #172]	; (8006444 <HAL_DMA_IRQHandler+0x694>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d045      	beq.n	8006428 <HAL_DMA_IRQHandler+0x678>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a29      	ldr	r2, [pc, #164]	; (8006448 <HAL_DMA_IRQHandler+0x698>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d040      	beq.n	8006428 <HAL_DMA_IRQHandler+0x678>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a28      	ldr	r2, [pc, #160]	; (800644c <HAL_DMA_IRQHandler+0x69c>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d03b      	beq.n	8006428 <HAL_DMA_IRQHandler+0x678>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a26      	ldr	r2, [pc, #152]	; (8006450 <HAL_DMA_IRQHandler+0x6a0>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d036      	beq.n	8006428 <HAL_DMA_IRQHandler+0x678>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a25      	ldr	r2, [pc, #148]	; (8006454 <HAL_DMA_IRQHandler+0x6a4>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d031      	beq.n	8006428 <HAL_DMA_IRQHandler+0x678>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a23      	ldr	r2, [pc, #140]	; (8006458 <HAL_DMA_IRQHandler+0x6a8>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d02c      	beq.n	8006428 <HAL_DMA_IRQHandler+0x678>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a22      	ldr	r2, [pc, #136]	; (800645c <HAL_DMA_IRQHandler+0x6ac>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d027      	beq.n	8006428 <HAL_DMA_IRQHandler+0x678>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a20      	ldr	r2, [pc, #128]	; (8006460 <HAL_DMA_IRQHandler+0x6b0>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d022      	beq.n	8006428 <HAL_DMA_IRQHandler+0x678>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a1f      	ldr	r2, [pc, #124]	; (8006464 <HAL_DMA_IRQHandler+0x6b4>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d01d      	beq.n	8006428 <HAL_DMA_IRQHandler+0x678>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a1d      	ldr	r2, [pc, #116]	; (8006468 <HAL_DMA_IRQHandler+0x6b8>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d018      	beq.n	8006428 <HAL_DMA_IRQHandler+0x678>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a1c      	ldr	r2, [pc, #112]	; (800646c <HAL_DMA_IRQHandler+0x6bc>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d013      	beq.n	8006428 <HAL_DMA_IRQHandler+0x678>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a1a      	ldr	r2, [pc, #104]	; (8006470 <HAL_DMA_IRQHandler+0x6c0>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d00e      	beq.n	8006428 <HAL_DMA_IRQHandler+0x678>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a19      	ldr	r2, [pc, #100]	; (8006474 <HAL_DMA_IRQHandler+0x6c4>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d009      	beq.n	8006428 <HAL_DMA_IRQHandler+0x678>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a17      	ldr	r2, [pc, #92]	; (8006478 <HAL_DMA_IRQHandler+0x6c8>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d004      	beq.n	8006428 <HAL_DMA_IRQHandler+0x678>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a16      	ldr	r2, [pc, #88]	; (800647c <HAL_DMA_IRQHandler+0x6cc>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d12b      	bne.n	8006480 <HAL_DMA_IRQHandler+0x6d0>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0310 	and.w	r3, r3, #16
 8006432:	2b00      	cmp	r3, #0
 8006434:	bf14      	ite	ne
 8006436:	2301      	movne	r3, #1
 8006438:	2300      	moveq	r3, #0
 800643a:	b2db      	uxtb	r3, r3
 800643c:	e02a      	b.n	8006494 <HAL_DMA_IRQHandler+0x6e4>
 800643e:	bf00      	nop
 8006440:	40020010 	.word	0x40020010
 8006444:	40020028 	.word	0x40020028
 8006448:	40020040 	.word	0x40020040
 800644c:	40020058 	.word	0x40020058
 8006450:	40020070 	.word	0x40020070
 8006454:	40020088 	.word	0x40020088
 8006458:	400200a0 	.word	0x400200a0
 800645c:	400200b8 	.word	0x400200b8
 8006460:	40020410 	.word	0x40020410
 8006464:	40020428 	.word	0x40020428
 8006468:	40020440 	.word	0x40020440
 800646c:	40020458 	.word	0x40020458
 8006470:	40020470 	.word	0x40020470
 8006474:	40020488 	.word	0x40020488
 8006478:	400204a0 	.word	0x400204a0
 800647c:	400204b8 	.word	0x400204b8
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0302 	and.w	r3, r3, #2
 800648a:	2b00      	cmp	r3, #0
 800648c:	bf14      	ite	ne
 800648e:	2301      	movne	r3, #1
 8006490:	2300      	moveq	r3, #0
 8006492:	b2db      	uxtb	r3, r3
 8006494:	2b00      	cmp	r3, #0
 8006496:	f000 8087 	beq.w	80065a8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800649e:	f003 031f 	and.w	r3, r3, #31
 80064a2:	2220      	movs	r2, #32
 80064a4:	409a      	lsls	r2, r3
 80064a6:	6a3b      	ldr	r3, [r7, #32]
 80064a8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	2b04      	cmp	r3, #4
 80064b4:	d139      	bne.n	800652a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f022 0216 	bic.w	r2, r2, #22
 80064c4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	695a      	ldr	r2, [r3, #20]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064d4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d103      	bne.n	80064e6 <HAL_DMA_IRQHandler+0x736>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d007      	beq.n	80064f6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f022 0208 	bic.w	r2, r2, #8
 80064f4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064fa:	f003 031f 	and.w	r3, r3, #31
 80064fe:	223f      	movs	r2, #63	; 0x3f
 8006500:	409a      	lsls	r2, r3
 8006502:	6a3b      	ldr	r3, [r7, #32]
 8006504:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2201      	movs	r2, #1
 800650a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800651a:	2b00      	cmp	r3, #0
 800651c:	f000 834a 	beq.w	8006bb4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	4798      	blx	r3
          }
          return;
 8006528:	e344      	b.n	8006bb4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006534:	2b00      	cmp	r3, #0
 8006536:	d018      	beq.n	800656a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d108      	bne.n	8006558 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800654a:	2b00      	cmp	r3, #0
 800654c:	d02c      	beq.n	80065a8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	4798      	blx	r3
 8006556:	e027      	b.n	80065a8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800655c:	2b00      	cmp	r3, #0
 800655e:	d023      	beq.n	80065a8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	4798      	blx	r3
 8006568:	e01e      	b.n	80065a8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006574:	2b00      	cmp	r3, #0
 8006576:	d10f      	bne.n	8006598 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f022 0210 	bic.w	r2, r2, #16
 8006586:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800659c:	2b00      	cmp	r3, #0
 800659e:	d003      	beq.n	80065a8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f000 8306 	beq.w	8006bbe <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f000 8088 	beq.w	80066d0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2204      	movs	r2, #4
 80065c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a7a      	ldr	r2, [pc, #488]	; (80067b8 <HAL_DMA_IRQHandler+0xa08>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d04a      	beq.n	8006668 <HAL_DMA_IRQHandler+0x8b8>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a79      	ldr	r2, [pc, #484]	; (80067bc <HAL_DMA_IRQHandler+0xa0c>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d045      	beq.n	8006668 <HAL_DMA_IRQHandler+0x8b8>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a77      	ldr	r2, [pc, #476]	; (80067c0 <HAL_DMA_IRQHandler+0xa10>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d040      	beq.n	8006668 <HAL_DMA_IRQHandler+0x8b8>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a76      	ldr	r2, [pc, #472]	; (80067c4 <HAL_DMA_IRQHandler+0xa14>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d03b      	beq.n	8006668 <HAL_DMA_IRQHandler+0x8b8>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a74      	ldr	r2, [pc, #464]	; (80067c8 <HAL_DMA_IRQHandler+0xa18>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d036      	beq.n	8006668 <HAL_DMA_IRQHandler+0x8b8>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a73      	ldr	r2, [pc, #460]	; (80067cc <HAL_DMA_IRQHandler+0xa1c>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d031      	beq.n	8006668 <HAL_DMA_IRQHandler+0x8b8>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a71      	ldr	r2, [pc, #452]	; (80067d0 <HAL_DMA_IRQHandler+0xa20>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d02c      	beq.n	8006668 <HAL_DMA_IRQHandler+0x8b8>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a70      	ldr	r2, [pc, #448]	; (80067d4 <HAL_DMA_IRQHandler+0xa24>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d027      	beq.n	8006668 <HAL_DMA_IRQHandler+0x8b8>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a6e      	ldr	r2, [pc, #440]	; (80067d8 <HAL_DMA_IRQHandler+0xa28>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d022      	beq.n	8006668 <HAL_DMA_IRQHandler+0x8b8>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a6d      	ldr	r2, [pc, #436]	; (80067dc <HAL_DMA_IRQHandler+0xa2c>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d01d      	beq.n	8006668 <HAL_DMA_IRQHandler+0x8b8>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a6b      	ldr	r2, [pc, #428]	; (80067e0 <HAL_DMA_IRQHandler+0xa30>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d018      	beq.n	8006668 <HAL_DMA_IRQHandler+0x8b8>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a6a      	ldr	r2, [pc, #424]	; (80067e4 <HAL_DMA_IRQHandler+0xa34>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d013      	beq.n	8006668 <HAL_DMA_IRQHandler+0x8b8>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a68      	ldr	r2, [pc, #416]	; (80067e8 <HAL_DMA_IRQHandler+0xa38>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d00e      	beq.n	8006668 <HAL_DMA_IRQHandler+0x8b8>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a67      	ldr	r2, [pc, #412]	; (80067ec <HAL_DMA_IRQHandler+0xa3c>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d009      	beq.n	8006668 <HAL_DMA_IRQHandler+0x8b8>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a65      	ldr	r2, [pc, #404]	; (80067f0 <HAL_DMA_IRQHandler+0xa40>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d004      	beq.n	8006668 <HAL_DMA_IRQHandler+0x8b8>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a64      	ldr	r2, [pc, #400]	; (80067f4 <HAL_DMA_IRQHandler+0xa44>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d108      	bne.n	800667a <HAL_DMA_IRQHandler+0x8ca>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f022 0201 	bic.w	r2, r2, #1
 8006676:	601a      	str	r2, [r3, #0]
 8006678:	e007      	b.n	800668a <HAL_DMA_IRQHandler+0x8da>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f022 0201 	bic.w	r2, r2, #1
 8006688:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	3301      	adds	r3, #1
 800668e:	60fb      	str	r3, [r7, #12]
 8006690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006692:	429a      	cmp	r2, r3
 8006694:	d307      	bcc.n	80066a6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 0301 	and.w	r3, r3, #1
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1f2      	bne.n	800668a <HAL_DMA_IRQHandler+0x8da>
 80066a4:	e000      	b.n	80066a8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80066a6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 0301 	and.w	r3, r3, #1
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d004      	beq.n	80066c0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2203      	movs	r2, #3
 80066ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80066be:	e003      	b.n	80066c8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f000 8272 	beq.w	8006bbe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	4798      	blx	r3
 80066e2:	e26c      	b.n	8006bbe <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a43      	ldr	r2, [pc, #268]	; (80067f8 <HAL_DMA_IRQHandler+0xa48>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d022      	beq.n	8006734 <HAL_DMA_IRQHandler+0x984>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a42      	ldr	r2, [pc, #264]	; (80067fc <HAL_DMA_IRQHandler+0xa4c>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d01d      	beq.n	8006734 <HAL_DMA_IRQHandler+0x984>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a40      	ldr	r2, [pc, #256]	; (8006800 <HAL_DMA_IRQHandler+0xa50>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d018      	beq.n	8006734 <HAL_DMA_IRQHandler+0x984>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a3f      	ldr	r2, [pc, #252]	; (8006804 <HAL_DMA_IRQHandler+0xa54>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d013      	beq.n	8006734 <HAL_DMA_IRQHandler+0x984>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a3d      	ldr	r2, [pc, #244]	; (8006808 <HAL_DMA_IRQHandler+0xa58>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d00e      	beq.n	8006734 <HAL_DMA_IRQHandler+0x984>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a3c      	ldr	r2, [pc, #240]	; (800680c <HAL_DMA_IRQHandler+0xa5c>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d009      	beq.n	8006734 <HAL_DMA_IRQHandler+0x984>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a3a      	ldr	r2, [pc, #232]	; (8006810 <HAL_DMA_IRQHandler+0xa60>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d004      	beq.n	8006734 <HAL_DMA_IRQHandler+0x984>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a39      	ldr	r2, [pc, #228]	; (8006814 <HAL_DMA_IRQHandler+0xa64>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d101      	bne.n	8006738 <HAL_DMA_IRQHandler+0x988>
 8006734:	2301      	movs	r3, #1
 8006736:	e000      	b.n	800673a <HAL_DMA_IRQHandler+0x98a>
 8006738:	2300      	movs	r3, #0
 800673a:	2b00      	cmp	r3, #0
 800673c:	f000 823f 	beq.w	8006bbe <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800674c:	f003 031f 	and.w	r3, r3, #31
 8006750:	2204      	movs	r2, #4
 8006752:	409a      	lsls	r2, r3
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	4013      	ands	r3, r2
 8006758:	2b00      	cmp	r3, #0
 800675a:	f000 80cd 	beq.w	80068f8 <HAL_DMA_IRQHandler+0xb48>
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	f003 0304 	and.w	r3, r3, #4
 8006764:	2b00      	cmp	r3, #0
 8006766:	f000 80c7 	beq.w	80068f8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800676e:	f003 031f 	and.w	r3, r3, #31
 8006772:	2204      	movs	r2, #4
 8006774:	409a      	lsls	r2, r3
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d049      	beq.n	8006818 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d109      	bne.n	80067a2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006792:	2b00      	cmp	r3, #0
 8006794:	f000 8210 	beq.w	8006bb8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067a0:	e20a      	b.n	8006bb8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	f000 8206 	beq.w	8006bb8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067b4:	e200      	b.n	8006bb8 <HAL_DMA_IRQHandler+0xe08>
 80067b6:	bf00      	nop
 80067b8:	40020010 	.word	0x40020010
 80067bc:	40020028 	.word	0x40020028
 80067c0:	40020040 	.word	0x40020040
 80067c4:	40020058 	.word	0x40020058
 80067c8:	40020070 	.word	0x40020070
 80067cc:	40020088 	.word	0x40020088
 80067d0:	400200a0 	.word	0x400200a0
 80067d4:	400200b8 	.word	0x400200b8
 80067d8:	40020410 	.word	0x40020410
 80067dc:	40020428 	.word	0x40020428
 80067e0:	40020440 	.word	0x40020440
 80067e4:	40020458 	.word	0x40020458
 80067e8:	40020470 	.word	0x40020470
 80067ec:	40020488 	.word	0x40020488
 80067f0:	400204a0 	.word	0x400204a0
 80067f4:	400204b8 	.word	0x400204b8
 80067f8:	58025408 	.word	0x58025408
 80067fc:	5802541c 	.word	0x5802541c
 8006800:	58025430 	.word	0x58025430
 8006804:	58025444 	.word	0x58025444
 8006808:	58025458 	.word	0x58025458
 800680c:	5802546c 	.word	0x5802546c
 8006810:	58025480 	.word	0x58025480
 8006814:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	f003 0320 	and.w	r3, r3, #32
 800681e:	2b00      	cmp	r3, #0
 8006820:	d160      	bne.n	80068e4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a7f      	ldr	r2, [pc, #508]	; (8006a24 <HAL_DMA_IRQHandler+0xc74>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d04a      	beq.n	80068c2 <HAL_DMA_IRQHandler+0xb12>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a7d      	ldr	r2, [pc, #500]	; (8006a28 <HAL_DMA_IRQHandler+0xc78>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d045      	beq.n	80068c2 <HAL_DMA_IRQHandler+0xb12>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a7c      	ldr	r2, [pc, #496]	; (8006a2c <HAL_DMA_IRQHandler+0xc7c>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d040      	beq.n	80068c2 <HAL_DMA_IRQHandler+0xb12>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a7a      	ldr	r2, [pc, #488]	; (8006a30 <HAL_DMA_IRQHandler+0xc80>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d03b      	beq.n	80068c2 <HAL_DMA_IRQHandler+0xb12>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a79      	ldr	r2, [pc, #484]	; (8006a34 <HAL_DMA_IRQHandler+0xc84>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d036      	beq.n	80068c2 <HAL_DMA_IRQHandler+0xb12>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a77      	ldr	r2, [pc, #476]	; (8006a38 <HAL_DMA_IRQHandler+0xc88>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d031      	beq.n	80068c2 <HAL_DMA_IRQHandler+0xb12>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a76      	ldr	r2, [pc, #472]	; (8006a3c <HAL_DMA_IRQHandler+0xc8c>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d02c      	beq.n	80068c2 <HAL_DMA_IRQHandler+0xb12>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a74      	ldr	r2, [pc, #464]	; (8006a40 <HAL_DMA_IRQHandler+0xc90>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d027      	beq.n	80068c2 <HAL_DMA_IRQHandler+0xb12>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a73      	ldr	r2, [pc, #460]	; (8006a44 <HAL_DMA_IRQHandler+0xc94>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d022      	beq.n	80068c2 <HAL_DMA_IRQHandler+0xb12>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a71      	ldr	r2, [pc, #452]	; (8006a48 <HAL_DMA_IRQHandler+0xc98>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d01d      	beq.n	80068c2 <HAL_DMA_IRQHandler+0xb12>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a70      	ldr	r2, [pc, #448]	; (8006a4c <HAL_DMA_IRQHandler+0xc9c>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d018      	beq.n	80068c2 <HAL_DMA_IRQHandler+0xb12>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a6e      	ldr	r2, [pc, #440]	; (8006a50 <HAL_DMA_IRQHandler+0xca0>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d013      	beq.n	80068c2 <HAL_DMA_IRQHandler+0xb12>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a6d      	ldr	r2, [pc, #436]	; (8006a54 <HAL_DMA_IRQHandler+0xca4>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d00e      	beq.n	80068c2 <HAL_DMA_IRQHandler+0xb12>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a6b      	ldr	r2, [pc, #428]	; (8006a58 <HAL_DMA_IRQHandler+0xca8>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d009      	beq.n	80068c2 <HAL_DMA_IRQHandler+0xb12>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a6a      	ldr	r2, [pc, #424]	; (8006a5c <HAL_DMA_IRQHandler+0xcac>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d004      	beq.n	80068c2 <HAL_DMA_IRQHandler+0xb12>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a68      	ldr	r2, [pc, #416]	; (8006a60 <HAL_DMA_IRQHandler+0xcb0>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d108      	bne.n	80068d4 <HAL_DMA_IRQHandler+0xb24>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f022 0208 	bic.w	r2, r2, #8
 80068d0:	601a      	str	r2, [r3, #0]
 80068d2:	e007      	b.n	80068e4 <HAL_DMA_IRQHandler+0xb34>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f022 0204 	bic.w	r2, r2, #4
 80068e2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	f000 8165 	beq.w	8006bb8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068f6:	e15f      	b.n	8006bb8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068fc:	f003 031f 	and.w	r3, r3, #31
 8006900:	2202      	movs	r2, #2
 8006902:	409a      	lsls	r2, r3
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	4013      	ands	r3, r2
 8006908:	2b00      	cmp	r3, #0
 800690a:	f000 80c5 	beq.w	8006a98 <HAL_DMA_IRQHandler+0xce8>
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	f003 0302 	and.w	r3, r3, #2
 8006914:	2b00      	cmp	r3, #0
 8006916:	f000 80bf 	beq.w	8006a98 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800691e:	f003 031f 	and.w	r3, r3, #31
 8006922:	2202      	movs	r2, #2
 8006924:	409a      	lsls	r2, r3
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d018      	beq.n	8006966 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d109      	bne.n	8006952 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006942:	2b00      	cmp	r3, #0
 8006944:	f000 813a 	beq.w	8006bbc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006950:	e134      	b.n	8006bbc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006956:	2b00      	cmp	r3, #0
 8006958:	f000 8130 	beq.w	8006bbc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006964:	e12a      	b.n	8006bbc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	f003 0320 	and.w	r3, r3, #32
 800696c:	2b00      	cmp	r3, #0
 800696e:	f040 8089 	bne.w	8006a84 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a2b      	ldr	r2, [pc, #172]	; (8006a24 <HAL_DMA_IRQHandler+0xc74>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d04a      	beq.n	8006a12 <HAL_DMA_IRQHandler+0xc62>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a29      	ldr	r2, [pc, #164]	; (8006a28 <HAL_DMA_IRQHandler+0xc78>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d045      	beq.n	8006a12 <HAL_DMA_IRQHandler+0xc62>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a28      	ldr	r2, [pc, #160]	; (8006a2c <HAL_DMA_IRQHandler+0xc7c>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d040      	beq.n	8006a12 <HAL_DMA_IRQHandler+0xc62>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a26      	ldr	r2, [pc, #152]	; (8006a30 <HAL_DMA_IRQHandler+0xc80>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d03b      	beq.n	8006a12 <HAL_DMA_IRQHandler+0xc62>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a25      	ldr	r2, [pc, #148]	; (8006a34 <HAL_DMA_IRQHandler+0xc84>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d036      	beq.n	8006a12 <HAL_DMA_IRQHandler+0xc62>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a23      	ldr	r2, [pc, #140]	; (8006a38 <HAL_DMA_IRQHandler+0xc88>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d031      	beq.n	8006a12 <HAL_DMA_IRQHandler+0xc62>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a22      	ldr	r2, [pc, #136]	; (8006a3c <HAL_DMA_IRQHandler+0xc8c>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d02c      	beq.n	8006a12 <HAL_DMA_IRQHandler+0xc62>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a20      	ldr	r2, [pc, #128]	; (8006a40 <HAL_DMA_IRQHandler+0xc90>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d027      	beq.n	8006a12 <HAL_DMA_IRQHandler+0xc62>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a1f      	ldr	r2, [pc, #124]	; (8006a44 <HAL_DMA_IRQHandler+0xc94>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d022      	beq.n	8006a12 <HAL_DMA_IRQHandler+0xc62>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a1d      	ldr	r2, [pc, #116]	; (8006a48 <HAL_DMA_IRQHandler+0xc98>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d01d      	beq.n	8006a12 <HAL_DMA_IRQHandler+0xc62>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a1c      	ldr	r2, [pc, #112]	; (8006a4c <HAL_DMA_IRQHandler+0xc9c>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d018      	beq.n	8006a12 <HAL_DMA_IRQHandler+0xc62>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a1a      	ldr	r2, [pc, #104]	; (8006a50 <HAL_DMA_IRQHandler+0xca0>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d013      	beq.n	8006a12 <HAL_DMA_IRQHandler+0xc62>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a19      	ldr	r2, [pc, #100]	; (8006a54 <HAL_DMA_IRQHandler+0xca4>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d00e      	beq.n	8006a12 <HAL_DMA_IRQHandler+0xc62>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a17      	ldr	r2, [pc, #92]	; (8006a58 <HAL_DMA_IRQHandler+0xca8>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d009      	beq.n	8006a12 <HAL_DMA_IRQHandler+0xc62>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a16      	ldr	r2, [pc, #88]	; (8006a5c <HAL_DMA_IRQHandler+0xcac>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d004      	beq.n	8006a12 <HAL_DMA_IRQHandler+0xc62>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a14      	ldr	r2, [pc, #80]	; (8006a60 <HAL_DMA_IRQHandler+0xcb0>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d128      	bne.n	8006a64 <HAL_DMA_IRQHandler+0xcb4>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f022 0214 	bic.w	r2, r2, #20
 8006a20:	601a      	str	r2, [r3, #0]
 8006a22:	e027      	b.n	8006a74 <HAL_DMA_IRQHandler+0xcc4>
 8006a24:	40020010 	.word	0x40020010
 8006a28:	40020028 	.word	0x40020028
 8006a2c:	40020040 	.word	0x40020040
 8006a30:	40020058 	.word	0x40020058
 8006a34:	40020070 	.word	0x40020070
 8006a38:	40020088 	.word	0x40020088
 8006a3c:	400200a0 	.word	0x400200a0
 8006a40:	400200b8 	.word	0x400200b8
 8006a44:	40020410 	.word	0x40020410
 8006a48:	40020428 	.word	0x40020428
 8006a4c:	40020440 	.word	0x40020440
 8006a50:	40020458 	.word	0x40020458
 8006a54:	40020470 	.word	0x40020470
 8006a58:	40020488 	.word	0x40020488
 8006a5c:	400204a0 	.word	0x400204a0
 8006a60:	400204b8 	.word	0x400204b8
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f022 020a 	bic.w	r2, r2, #10
 8006a72:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f000 8097 	beq.w	8006bbc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a96:	e091      	b.n	8006bbc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a9c:	f003 031f 	and.w	r3, r3, #31
 8006aa0:	2208      	movs	r2, #8
 8006aa2:	409a      	lsls	r2, r3
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f000 8088 	beq.w	8006bbe <HAL_DMA_IRQHandler+0xe0e>
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	f003 0308 	and.w	r3, r3, #8
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	f000 8082 	beq.w	8006bbe <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a41      	ldr	r2, [pc, #260]	; (8006bc4 <HAL_DMA_IRQHandler+0xe14>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d04a      	beq.n	8006b5a <HAL_DMA_IRQHandler+0xdaa>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a3f      	ldr	r2, [pc, #252]	; (8006bc8 <HAL_DMA_IRQHandler+0xe18>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d045      	beq.n	8006b5a <HAL_DMA_IRQHandler+0xdaa>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a3e      	ldr	r2, [pc, #248]	; (8006bcc <HAL_DMA_IRQHandler+0xe1c>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d040      	beq.n	8006b5a <HAL_DMA_IRQHandler+0xdaa>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a3c      	ldr	r2, [pc, #240]	; (8006bd0 <HAL_DMA_IRQHandler+0xe20>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d03b      	beq.n	8006b5a <HAL_DMA_IRQHandler+0xdaa>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a3b      	ldr	r2, [pc, #236]	; (8006bd4 <HAL_DMA_IRQHandler+0xe24>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d036      	beq.n	8006b5a <HAL_DMA_IRQHandler+0xdaa>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a39      	ldr	r2, [pc, #228]	; (8006bd8 <HAL_DMA_IRQHandler+0xe28>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d031      	beq.n	8006b5a <HAL_DMA_IRQHandler+0xdaa>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a38      	ldr	r2, [pc, #224]	; (8006bdc <HAL_DMA_IRQHandler+0xe2c>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d02c      	beq.n	8006b5a <HAL_DMA_IRQHandler+0xdaa>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a36      	ldr	r2, [pc, #216]	; (8006be0 <HAL_DMA_IRQHandler+0xe30>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d027      	beq.n	8006b5a <HAL_DMA_IRQHandler+0xdaa>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a35      	ldr	r2, [pc, #212]	; (8006be4 <HAL_DMA_IRQHandler+0xe34>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d022      	beq.n	8006b5a <HAL_DMA_IRQHandler+0xdaa>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a33      	ldr	r2, [pc, #204]	; (8006be8 <HAL_DMA_IRQHandler+0xe38>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d01d      	beq.n	8006b5a <HAL_DMA_IRQHandler+0xdaa>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a32      	ldr	r2, [pc, #200]	; (8006bec <HAL_DMA_IRQHandler+0xe3c>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d018      	beq.n	8006b5a <HAL_DMA_IRQHandler+0xdaa>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a30      	ldr	r2, [pc, #192]	; (8006bf0 <HAL_DMA_IRQHandler+0xe40>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d013      	beq.n	8006b5a <HAL_DMA_IRQHandler+0xdaa>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a2f      	ldr	r2, [pc, #188]	; (8006bf4 <HAL_DMA_IRQHandler+0xe44>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d00e      	beq.n	8006b5a <HAL_DMA_IRQHandler+0xdaa>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a2d      	ldr	r2, [pc, #180]	; (8006bf8 <HAL_DMA_IRQHandler+0xe48>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d009      	beq.n	8006b5a <HAL_DMA_IRQHandler+0xdaa>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a2c      	ldr	r2, [pc, #176]	; (8006bfc <HAL_DMA_IRQHandler+0xe4c>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d004      	beq.n	8006b5a <HAL_DMA_IRQHandler+0xdaa>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a2a      	ldr	r2, [pc, #168]	; (8006c00 <HAL_DMA_IRQHandler+0xe50>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d108      	bne.n	8006b6c <HAL_DMA_IRQHandler+0xdbc>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f022 021c 	bic.w	r2, r2, #28
 8006b68:	601a      	str	r2, [r3, #0]
 8006b6a:	e007      	b.n	8006b7c <HAL_DMA_IRQHandler+0xdcc>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f022 020e 	bic.w	r2, r2, #14
 8006b7a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b80:	f003 031f 	and.w	r3, r3, #31
 8006b84:	2201      	movs	r2, #1
 8006b86:	409a      	lsls	r2, r3
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d009      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	4798      	blx	r3
 8006bb2:	e004      	b.n	8006bbe <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006bb4:	bf00      	nop
 8006bb6:	e002      	b.n	8006bbe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bb8:	bf00      	nop
 8006bba:	e000      	b.n	8006bbe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bbc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006bbe:	3728      	adds	r7, #40	; 0x28
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	40020010 	.word	0x40020010
 8006bc8:	40020028 	.word	0x40020028
 8006bcc:	40020040 	.word	0x40020040
 8006bd0:	40020058 	.word	0x40020058
 8006bd4:	40020070 	.word	0x40020070
 8006bd8:	40020088 	.word	0x40020088
 8006bdc:	400200a0 	.word	0x400200a0
 8006be0:	400200b8 	.word	0x400200b8
 8006be4:	40020410 	.word	0x40020410
 8006be8:	40020428 	.word	0x40020428
 8006bec:	40020440 	.word	0x40020440
 8006bf0:	40020458 	.word	0x40020458
 8006bf4:	40020470 	.word	0x40020470
 8006bf8:	40020488 	.word	0x40020488
 8006bfc:	400204a0 	.word	0x400204a0
 8006c00:	400204b8 	.word	0x400204b8

08006c04 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b087      	sub	sp, #28
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	607a      	str	r2, [r7, #4]
 8006c10:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c16:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c1c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a7f      	ldr	r2, [pc, #508]	; (8006e20 <DMA_SetConfig+0x21c>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d072      	beq.n	8006d0e <DMA_SetConfig+0x10a>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a7d      	ldr	r2, [pc, #500]	; (8006e24 <DMA_SetConfig+0x220>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d06d      	beq.n	8006d0e <DMA_SetConfig+0x10a>
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a7c      	ldr	r2, [pc, #496]	; (8006e28 <DMA_SetConfig+0x224>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d068      	beq.n	8006d0e <DMA_SetConfig+0x10a>
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a7a      	ldr	r2, [pc, #488]	; (8006e2c <DMA_SetConfig+0x228>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d063      	beq.n	8006d0e <DMA_SetConfig+0x10a>
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a79      	ldr	r2, [pc, #484]	; (8006e30 <DMA_SetConfig+0x22c>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d05e      	beq.n	8006d0e <DMA_SetConfig+0x10a>
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a77      	ldr	r2, [pc, #476]	; (8006e34 <DMA_SetConfig+0x230>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d059      	beq.n	8006d0e <DMA_SetConfig+0x10a>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a76      	ldr	r2, [pc, #472]	; (8006e38 <DMA_SetConfig+0x234>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d054      	beq.n	8006d0e <DMA_SetConfig+0x10a>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a74      	ldr	r2, [pc, #464]	; (8006e3c <DMA_SetConfig+0x238>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d04f      	beq.n	8006d0e <DMA_SetConfig+0x10a>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a73      	ldr	r2, [pc, #460]	; (8006e40 <DMA_SetConfig+0x23c>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d04a      	beq.n	8006d0e <DMA_SetConfig+0x10a>
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a71      	ldr	r2, [pc, #452]	; (8006e44 <DMA_SetConfig+0x240>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d045      	beq.n	8006d0e <DMA_SetConfig+0x10a>
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a70      	ldr	r2, [pc, #448]	; (8006e48 <DMA_SetConfig+0x244>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d040      	beq.n	8006d0e <DMA_SetConfig+0x10a>
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a6e      	ldr	r2, [pc, #440]	; (8006e4c <DMA_SetConfig+0x248>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d03b      	beq.n	8006d0e <DMA_SetConfig+0x10a>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a6d      	ldr	r2, [pc, #436]	; (8006e50 <DMA_SetConfig+0x24c>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d036      	beq.n	8006d0e <DMA_SetConfig+0x10a>
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a6b      	ldr	r2, [pc, #428]	; (8006e54 <DMA_SetConfig+0x250>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d031      	beq.n	8006d0e <DMA_SetConfig+0x10a>
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a6a      	ldr	r2, [pc, #424]	; (8006e58 <DMA_SetConfig+0x254>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d02c      	beq.n	8006d0e <DMA_SetConfig+0x10a>
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a68      	ldr	r2, [pc, #416]	; (8006e5c <DMA_SetConfig+0x258>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d027      	beq.n	8006d0e <DMA_SetConfig+0x10a>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a67      	ldr	r2, [pc, #412]	; (8006e60 <DMA_SetConfig+0x25c>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d022      	beq.n	8006d0e <DMA_SetConfig+0x10a>
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a65      	ldr	r2, [pc, #404]	; (8006e64 <DMA_SetConfig+0x260>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d01d      	beq.n	8006d0e <DMA_SetConfig+0x10a>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a64      	ldr	r2, [pc, #400]	; (8006e68 <DMA_SetConfig+0x264>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d018      	beq.n	8006d0e <DMA_SetConfig+0x10a>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a62      	ldr	r2, [pc, #392]	; (8006e6c <DMA_SetConfig+0x268>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d013      	beq.n	8006d0e <DMA_SetConfig+0x10a>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a61      	ldr	r2, [pc, #388]	; (8006e70 <DMA_SetConfig+0x26c>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d00e      	beq.n	8006d0e <DMA_SetConfig+0x10a>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a5f      	ldr	r2, [pc, #380]	; (8006e74 <DMA_SetConfig+0x270>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d009      	beq.n	8006d0e <DMA_SetConfig+0x10a>
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a5e      	ldr	r2, [pc, #376]	; (8006e78 <DMA_SetConfig+0x274>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d004      	beq.n	8006d0e <DMA_SetConfig+0x10a>
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a5c      	ldr	r2, [pc, #368]	; (8006e7c <DMA_SetConfig+0x278>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d101      	bne.n	8006d12 <DMA_SetConfig+0x10e>
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e000      	b.n	8006d14 <DMA_SetConfig+0x110>
 8006d12:	2300      	movs	r3, #0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00d      	beq.n	8006d34 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006d20:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d004      	beq.n	8006d34 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006d32:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a39      	ldr	r2, [pc, #228]	; (8006e20 <DMA_SetConfig+0x21c>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d04a      	beq.n	8006dd4 <DMA_SetConfig+0x1d0>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a38      	ldr	r2, [pc, #224]	; (8006e24 <DMA_SetConfig+0x220>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d045      	beq.n	8006dd4 <DMA_SetConfig+0x1d0>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a36      	ldr	r2, [pc, #216]	; (8006e28 <DMA_SetConfig+0x224>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d040      	beq.n	8006dd4 <DMA_SetConfig+0x1d0>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a35      	ldr	r2, [pc, #212]	; (8006e2c <DMA_SetConfig+0x228>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d03b      	beq.n	8006dd4 <DMA_SetConfig+0x1d0>
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a33      	ldr	r2, [pc, #204]	; (8006e30 <DMA_SetConfig+0x22c>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d036      	beq.n	8006dd4 <DMA_SetConfig+0x1d0>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a32      	ldr	r2, [pc, #200]	; (8006e34 <DMA_SetConfig+0x230>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d031      	beq.n	8006dd4 <DMA_SetConfig+0x1d0>
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a30      	ldr	r2, [pc, #192]	; (8006e38 <DMA_SetConfig+0x234>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d02c      	beq.n	8006dd4 <DMA_SetConfig+0x1d0>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a2f      	ldr	r2, [pc, #188]	; (8006e3c <DMA_SetConfig+0x238>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d027      	beq.n	8006dd4 <DMA_SetConfig+0x1d0>
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a2d      	ldr	r2, [pc, #180]	; (8006e40 <DMA_SetConfig+0x23c>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d022      	beq.n	8006dd4 <DMA_SetConfig+0x1d0>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a2c      	ldr	r2, [pc, #176]	; (8006e44 <DMA_SetConfig+0x240>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d01d      	beq.n	8006dd4 <DMA_SetConfig+0x1d0>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a2a      	ldr	r2, [pc, #168]	; (8006e48 <DMA_SetConfig+0x244>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d018      	beq.n	8006dd4 <DMA_SetConfig+0x1d0>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a29      	ldr	r2, [pc, #164]	; (8006e4c <DMA_SetConfig+0x248>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d013      	beq.n	8006dd4 <DMA_SetConfig+0x1d0>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a27      	ldr	r2, [pc, #156]	; (8006e50 <DMA_SetConfig+0x24c>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d00e      	beq.n	8006dd4 <DMA_SetConfig+0x1d0>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a26      	ldr	r2, [pc, #152]	; (8006e54 <DMA_SetConfig+0x250>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d009      	beq.n	8006dd4 <DMA_SetConfig+0x1d0>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a24      	ldr	r2, [pc, #144]	; (8006e58 <DMA_SetConfig+0x254>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d004      	beq.n	8006dd4 <DMA_SetConfig+0x1d0>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a23      	ldr	r2, [pc, #140]	; (8006e5c <DMA_SetConfig+0x258>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d101      	bne.n	8006dd8 <DMA_SetConfig+0x1d4>
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e000      	b.n	8006dda <DMA_SetConfig+0x1d6>
 8006dd8:	2300      	movs	r3, #0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d059      	beq.n	8006e92 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006de2:	f003 031f 	and.w	r3, r3, #31
 8006de6:	223f      	movs	r2, #63	; 0x3f
 8006de8:	409a      	lsls	r2, r3
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006dfc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	2b40      	cmp	r3, #64	; 0x40
 8006e0c:	d138      	bne.n	8006e80 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006e1e:	e086      	b.n	8006f2e <DMA_SetConfig+0x32a>
 8006e20:	40020010 	.word	0x40020010
 8006e24:	40020028 	.word	0x40020028
 8006e28:	40020040 	.word	0x40020040
 8006e2c:	40020058 	.word	0x40020058
 8006e30:	40020070 	.word	0x40020070
 8006e34:	40020088 	.word	0x40020088
 8006e38:	400200a0 	.word	0x400200a0
 8006e3c:	400200b8 	.word	0x400200b8
 8006e40:	40020410 	.word	0x40020410
 8006e44:	40020428 	.word	0x40020428
 8006e48:	40020440 	.word	0x40020440
 8006e4c:	40020458 	.word	0x40020458
 8006e50:	40020470 	.word	0x40020470
 8006e54:	40020488 	.word	0x40020488
 8006e58:	400204a0 	.word	0x400204a0
 8006e5c:	400204b8 	.word	0x400204b8
 8006e60:	58025408 	.word	0x58025408
 8006e64:	5802541c 	.word	0x5802541c
 8006e68:	58025430 	.word	0x58025430
 8006e6c:	58025444 	.word	0x58025444
 8006e70:	58025458 	.word	0x58025458
 8006e74:	5802546c 	.word	0x5802546c
 8006e78:	58025480 	.word	0x58025480
 8006e7c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68ba      	ldr	r2, [r7, #8]
 8006e86:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	60da      	str	r2, [r3, #12]
}
 8006e90:	e04d      	b.n	8006f2e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a29      	ldr	r2, [pc, #164]	; (8006f3c <DMA_SetConfig+0x338>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d022      	beq.n	8006ee2 <DMA_SetConfig+0x2de>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a27      	ldr	r2, [pc, #156]	; (8006f40 <DMA_SetConfig+0x33c>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d01d      	beq.n	8006ee2 <DMA_SetConfig+0x2de>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a26      	ldr	r2, [pc, #152]	; (8006f44 <DMA_SetConfig+0x340>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d018      	beq.n	8006ee2 <DMA_SetConfig+0x2de>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a24      	ldr	r2, [pc, #144]	; (8006f48 <DMA_SetConfig+0x344>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d013      	beq.n	8006ee2 <DMA_SetConfig+0x2de>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a23      	ldr	r2, [pc, #140]	; (8006f4c <DMA_SetConfig+0x348>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d00e      	beq.n	8006ee2 <DMA_SetConfig+0x2de>
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a21      	ldr	r2, [pc, #132]	; (8006f50 <DMA_SetConfig+0x34c>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d009      	beq.n	8006ee2 <DMA_SetConfig+0x2de>
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a20      	ldr	r2, [pc, #128]	; (8006f54 <DMA_SetConfig+0x350>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d004      	beq.n	8006ee2 <DMA_SetConfig+0x2de>
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a1e      	ldr	r2, [pc, #120]	; (8006f58 <DMA_SetConfig+0x354>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d101      	bne.n	8006ee6 <DMA_SetConfig+0x2e2>
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e000      	b.n	8006ee8 <DMA_SetConfig+0x2e4>
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d020      	beq.n	8006f2e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ef0:	f003 031f 	and.w	r3, r3, #31
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	409a      	lsls	r2, r3
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	683a      	ldr	r2, [r7, #0]
 8006f02:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	2b40      	cmp	r3, #64	; 0x40
 8006f0a:	d108      	bne.n	8006f1e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68ba      	ldr	r2, [r7, #8]
 8006f1a:	60da      	str	r2, [r3, #12]
}
 8006f1c:	e007      	b.n	8006f2e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68ba      	ldr	r2, [r7, #8]
 8006f24:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	60da      	str	r2, [r3, #12]
}
 8006f2e:	bf00      	nop
 8006f30:	371c      	adds	r7, #28
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	58025408 	.word	0x58025408
 8006f40:	5802541c 	.word	0x5802541c
 8006f44:	58025430 	.word	0x58025430
 8006f48:	58025444 	.word	0x58025444
 8006f4c:	58025458 	.word	0x58025458
 8006f50:	5802546c 	.word	0x5802546c
 8006f54:	58025480 	.word	0x58025480
 8006f58:	58025494 	.word	0x58025494

08006f5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b085      	sub	sp, #20
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a42      	ldr	r2, [pc, #264]	; (8007074 <DMA_CalcBaseAndBitshift+0x118>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d04a      	beq.n	8007004 <DMA_CalcBaseAndBitshift+0xa8>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a41      	ldr	r2, [pc, #260]	; (8007078 <DMA_CalcBaseAndBitshift+0x11c>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d045      	beq.n	8007004 <DMA_CalcBaseAndBitshift+0xa8>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a3f      	ldr	r2, [pc, #252]	; (800707c <DMA_CalcBaseAndBitshift+0x120>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d040      	beq.n	8007004 <DMA_CalcBaseAndBitshift+0xa8>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a3e      	ldr	r2, [pc, #248]	; (8007080 <DMA_CalcBaseAndBitshift+0x124>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d03b      	beq.n	8007004 <DMA_CalcBaseAndBitshift+0xa8>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a3c      	ldr	r2, [pc, #240]	; (8007084 <DMA_CalcBaseAndBitshift+0x128>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d036      	beq.n	8007004 <DMA_CalcBaseAndBitshift+0xa8>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a3b      	ldr	r2, [pc, #236]	; (8007088 <DMA_CalcBaseAndBitshift+0x12c>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d031      	beq.n	8007004 <DMA_CalcBaseAndBitshift+0xa8>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a39      	ldr	r2, [pc, #228]	; (800708c <DMA_CalcBaseAndBitshift+0x130>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d02c      	beq.n	8007004 <DMA_CalcBaseAndBitshift+0xa8>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a38      	ldr	r2, [pc, #224]	; (8007090 <DMA_CalcBaseAndBitshift+0x134>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d027      	beq.n	8007004 <DMA_CalcBaseAndBitshift+0xa8>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a36      	ldr	r2, [pc, #216]	; (8007094 <DMA_CalcBaseAndBitshift+0x138>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d022      	beq.n	8007004 <DMA_CalcBaseAndBitshift+0xa8>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a35      	ldr	r2, [pc, #212]	; (8007098 <DMA_CalcBaseAndBitshift+0x13c>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d01d      	beq.n	8007004 <DMA_CalcBaseAndBitshift+0xa8>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a33      	ldr	r2, [pc, #204]	; (800709c <DMA_CalcBaseAndBitshift+0x140>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d018      	beq.n	8007004 <DMA_CalcBaseAndBitshift+0xa8>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a32      	ldr	r2, [pc, #200]	; (80070a0 <DMA_CalcBaseAndBitshift+0x144>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d013      	beq.n	8007004 <DMA_CalcBaseAndBitshift+0xa8>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a30      	ldr	r2, [pc, #192]	; (80070a4 <DMA_CalcBaseAndBitshift+0x148>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d00e      	beq.n	8007004 <DMA_CalcBaseAndBitshift+0xa8>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a2f      	ldr	r2, [pc, #188]	; (80070a8 <DMA_CalcBaseAndBitshift+0x14c>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d009      	beq.n	8007004 <DMA_CalcBaseAndBitshift+0xa8>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a2d      	ldr	r2, [pc, #180]	; (80070ac <DMA_CalcBaseAndBitshift+0x150>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d004      	beq.n	8007004 <DMA_CalcBaseAndBitshift+0xa8>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a2c      	ldr	r2, [pc, #176]	; (80070b0 <DMA_CalcBaseAndBitshift+0x154>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d101      	bne.n	8007008 <DMA_CalcBaseAndBitshift+0xac>
 8007004:	2301      	movs	r3, #1
 8007006:	e000      	b.n	800700a <DMA_CalcBaseAndBitshift+0xae>
 8007008:	2300      	movs	r3, #0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d024      	beq.n	8007058 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	b2db      	uxtb	r3, r3
 8007014:	3b10      	subs	r3, #16
 8007016:	4a27      	ldr	r2, [pc, #156]	; (80070b4 <DMA_CalcBaseAndBitshift+0x158>)
 8007018:	fba2 2303 	umull	r2, r3, r2, r3
 800701c:	091b      	lsrs	r3, r3, #4
 800701e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f003 0307 	and.w	r3, r3, #7
 8007026:	4a24      	ldr	r2, [pc, #144]	; (80070b8 <DMA_CalcBaseAndBitshift+0x15c>)
 8007028:	5cd3      	ldrb	r3, [r2, r3]
 800702a:	461a      	mov	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2b03      	cmp	r3, #3
 8007034:	d908      	bls.n	8007048 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	461a      	mov	r2, r3
 800703c:	4b1f      	ldr	r3, [pc, #124]	; (80070bc <DMA_CalcBaseAndBitshift+0x160>)
 800703e:	4013      	ands	r3, r2
 8007040:	1d1a      	adds	r2, r3, #4
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	659a      	str	r2, [r3, #88]	; 0x58
 8007046:	e00d      	b.n	8007064 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	461a      	mov	r2, r3
 800704e:	4b1b      	ldr	r3, [pc, #108]	; (80070bc <DMA_CalcBaseAndBitshift+0x160>)
 8007050:	4013      	ands	r3, r2
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	6593      	str	r3, [r2, #88]	; 0x58
 8007056:	e005      	b.n	8007064 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007068:	4618      	mov	r0, r3
 800706a:	3714      	adds	r7, #20
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr
 8007074:	40020010 	.word	0x40020010
 8007078:	40020028 	.word	0x40020028
 800707c:	40020040 	.word	0x40020040
 8007080:	40020058 	.word	0x40020058
 8007084:	40020070 	.word	0x40020070
 8007088:	40020088 	.word	0x40020088
 800708c:	400200a0 	.word	0x400200a0
 8007090:	400200b8 	.word	0x400200b8
 8007094:	40020410 	.word	0x40020410
 8007098:	40020428 	.word	0x40020428
 800709c:	40020440 	.word	0x40020440
 80070a0:	40020458 	.word	0x40020458
 80070a4:	40020470 	.word	0x40020470
 80070a8:	40020488 	.word	0x40020488
 80070ac:	400204a0 	.word	0x400204a0
 80070b0:	400204b8 	.word	0x400204b8
 80070b4:	aaaaaaab 	.word	0xaaaaaaab
 80070b8:	0801bb58 	.word	0x0801bb58
 80070bc:	fffffc00 	.word	0xfffffc00

080070c0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070c8:	2300      	movs	r3, #0
 80070ca:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d120      	bne.n	8007116 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d8:	2b03      	cmp	r3, #3
 80070da:	d858      	bhi.n	800718e <DMA_CheckFifoParam+0xce>
 80070dc:	a201      	add	r2, pc, #4	; (adr r2, 80070e4 <DMA_CheckFifoParam+0x24>)
 80070de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e2:	bf00      	nop
 80070e4:	080070f5 	.word	0x080070f5
 80070e8:	08007107 	.word	0x08007107
 80070ec:	080070f5 	.word	0x080070f5
 80070f0:	0800718f 	.word	0x0800718f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d048      	beq.n	8007192 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007104:	e045      	b.n	8007192 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800710e:	d142      	bne.n	8007196 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007114:	e03f      	b.n	8007196 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800711e:	d123      	bne.n	8007168 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007124:	2b03      	cmp	r3, #3
 8007126:	d838      	bhi.n	800719a <DMA_CheckFifoParam+0xda>
 8007128:	a201      	add	r2, pc, #4	; (adr r2, 8007130 <DMA_CheckFifoParam+0x70>)
 800712a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712e:	bf00      	nop
 8007130:	08007141 	.word	0x08007141
 8007134:	08007147 	.word	0x08007147
 8007138:	08007141 	.word	0x08007141
 800713c:	08007159 	.word	0x08007159
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	73fb      	strb	r3, [r7, #15]
        break;
 8007144:	e030      	b.n	80071a8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800714a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800714e:	2b00      	cmp	r3, #0
 8007150:	d025      	beq.n	800719e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007156:	e022      	b.n	800719e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007160:	d11f      	bne.n	80071a2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007166:	e01c      	b.n	80071a2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800716c:	2b02      	cmp	r3, #2
 800716e:	d902      	bls.n	8007176 <DMA_CheckFifoParam+0xb6>
 8007170:	2b03      	cmp	r3, #3
 8007172:	d003      	beq.n	800717c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007174:	e018      	b.n	80071a8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	73fb      	strb	r3, [r7, #15]
        break;
 800717a:	e015      	b.n	80071a8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007180:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007184:	2b00      	cmp	r3, #0
 8007186:	d00e      	beq.n	80071a6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	73fb      	strb	r3, [r7, #15]
    break;
 800718c:	e00b      	b.n	80071a6 <DMA_CheckFifoParam+0xe6>
        break;
 800718e:	bf00      	nop
 8007190:	e00a      	b.n	80071a8 <DMA_CheckFifoParam+0xe8>
        break;
 8007192:	bf00      	nop
 8007194:	e008      	b.n	80071a8 <DMA_CheckFifoParam+0xe8>
        break;
 8007196:	bf00      	nop
 8007198:	e006      	b.n	80071a8 <DMA_CheckFifoParam+0xe8>
        break;
 800719a:	bf00      	nop
 800719c:	e004      	b.n	80071a8 <DMA_CheckFifoParam+0xe8>
        break;
 800719e:	bf00      	nop
 80071a0:	e002      	b.n	80071a8 <DMA_CheckFifoParam+0xe8>
        break;
 80071a2:	bf00      	nop
 80071a4:	e000      	b.n	80071a8 <DMA_CheckFifoParam+0xe8>
    break;
 80071a6:	bf00      	nop
    }
  }

  return status;
 80071a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3714      	adds	r7, #20
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop

080071b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b085      	sub	sp, #20
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a38      	ldr	r2, [pc, #224]	; (80072ac <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d022      	beq.n	8007216 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a36      	ldr	r2, [pc, #216]	; (80072b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d01d      	beq.n	8007216 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a35      	ldr	r2, [pc, #212]	; (80072b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d018      	beq.n	8007216 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a33      	ldr	r2, [pc, #204]	; (80072b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d013      	beq.n	8007216 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a32      	ldr	r2, [pc, #200]	; (80072bc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d00e      	beq.n	8007216 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a30      	ldr	r2, [pc, #192]	; (80072c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d009      	beq.n	8007216 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a2f      	ldr	r2, [pc, #188]	; (80072c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d004      	beq.n	8007216 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a2d      	ldr	r2, [pc, #180]	; (80072c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d101      	bne.n	800721a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007216:	2301      	movs	r3, #1
 8007218:	e000      	b.n	800721c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800721a:	2300      	movs	r3, #0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d01a      	beq.n	8007256 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	b2db      	uxtb	r3, r3
 8007226:	3b08      	subs	r3, #8
 8007228:	4a28      	ldr	r2, [pc, #160]	; (80072cc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800722a:	fba2 2303 	umull	r2, r3, r2, r3
 800722e:	091b      	lsrs	r3, r3, #4
 8007230:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	4b26      	ldr	r3, [pc, #152]	; (80072d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007236:	4413      	add	r3, r2
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	461a      	mov	r2, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a24      	ldr	r2, [pc, #144]	; (80072d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007244:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f003 031f 	and.w	r3, r3, #31
 800724c:	2201      	movs	r2, #1
 800724e:	409a      	lsls	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007254:	e024      	b.n	80072a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	b2db      	uxtb	r3, r3
 800725c:	3b10      	subs	r3, #16
 800725e:	4a1e      	ldr	r2, [pc, #120]	; (80072d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007260:	fba2 2303 	umull	r2, r3, r2, r3
 8007264:	091b      	lsrs	r3, r3, #4
 8007266:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	4a1c      	ldr	r2, [pc, #112]	; (80072dc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d806      	bhi.n	800727e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	4a1b      	ldr	r2, [pc, #108]	; (80072e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d902      	bls.n	800727e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	3308      	adds	r3, #8
 800727c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800727e:	68fa      	ldr	r2, [r7, #12]
 8007280:	4b18      	ldr	r3, [pc, #96]	; (80072e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007282:	4413      	add	r3, r2
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	461a      	mov	r2, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a16      	ldr	r2, [pc, #88]	; (80072e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007290:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f003 031f 	and.w	r3, r3, #31
 8007298:	2201      	movs	r2, #1
 800729a:	409a      	lsls	r2, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	669a      	str	r2, [r3, #104]	; 0x68
}
 80072a0:	bf00      	nop
 80072a2:	3714      	adds	r7, #20
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr
 80072ac:	58025408 	.word	0x58025408
 80072b0:	5802541c 	.word	0x5802541c
 80072b4:	58025430 	.word	0x58025430
 80072b8:	58025444 	.word	0x58025444
 80072bc:	58025458 	.word	0x58025458
 80072c0:	5802546c 	.word	0x5802546c
 80072c4:	58025480 	.word	0x58025480
 80072c8:	58025494 	.word	0x58025494
 80072cc:	cccccccd 	.word	0xcccccccd
 80072d0:	16009600 	.word	0x16009600
 80072d4:	58025880 	.word	0x58025880
 80072d8:	aaaaaaab 	.word	0xaaaaaaab
 80072dc:	400204b8 	.word	0x400204b8
 80072e0:	4002040f 	.word	0x4002040f
 80072e4:	10008200 	.word	0x10008200
 80072e8:	40020880 	.word	0x40020880

080072ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b085      	sub	sp, #20
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d04a      	beq.n	8007398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2b08      	cmp	r3, #8
 8007306:	d847      	bhi.n	8007398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a25      	ldr	r2, [pc, #148]	; (80073a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d022      	beq.n	8007358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a24      	ldr	r2, [pc, #144]	; (80073a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d01d      	beq.n	8007358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a22      	ldr	r2, [pc, #136]	; (80073ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d018      	beq.n	8007358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a21      	ldr	r2, [pc, #132]	; (80073b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d013      	beq.n	8007358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a1f      	ldr	r2, [pc, #124]	; (80073b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d00e      	beq.n	8007358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a1e      	ldr	r2, [pc, #120]	; (80073b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d009      	beq.n	8007358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a1c      	ldr	r2, [pc, #112]	; (80073bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d004      	beq.n	8007358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a1b      	ldr	r2, [pc, #108]	; (80073c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d101      	bne.n	800735c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007358:	2301      	movs	r3, #1
 800735a:	e000      	b.n	800735e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800735c:	2300      	movs	r3, #0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00a      	beq.n	8007378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	4b17      	ldr	r3, [pc, #92]	; (80073c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007366:	4413      	add	r3, r2
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	461a      	mov	r2, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a15      	ldr	r2, [pc, #84]	; (80073c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007374:	671a      	str	r2, [r3, #112]	; 0x70
 8007376:	e009      	b.n	800738c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	4b14      	ldr	r3, [pc, #80]	; (80073cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800737c:	4413      	add	r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	461a      	mov	r2, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a11      	ldr	r2, [pc, #68]	; (80073d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800738a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	3b01      	subs	r3, #1
 8007390:	2201      	movs	r2, #1
 8007392:	409a      	lsls	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007398:	bf00      	nop
 800739a:	3714      	adds	r7, #20
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr
 80073a4:	58025408 	.word	0x58025408
 80073a8:	5802541c 	.word	0x5802541c
 80073ac:	58025430 	.word	0x58025430
 80073b0:	58025444 	.word	0x58025444
 80073b4:	58025458 	.word	0x58025458
 80073b8:	5802546c 	.word	0x5802546c
 80073bc:	58025480 	.word	0x58025480
 80073c0:	58025494 	.word	0x58025494
 80073c4:	1600963f 	.word	0x1600963f
 80073c8:	58025940 	.word	0x58025940
 80073cc:	1000823f 	.word	0x1000823f
 80073d0:	40020940 	.word	0x40020940

080073d4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b098      	sub	sp, #96	; 0x60
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80073dc:	4a84      	ldr	r2, [pc, #528]	; (80075f0 <HAL_FDCAN_Init+0x21c>)
 80073de:	f107 030c 	add.w	r3, r7, #12
 80073e2:	4611      	mov	r1, r2
 80073e4:	224c      	movs	r2, #76	; 0x4c
 80073e6:	4618      	mov	r0, r3
 80073e8:	f00f fc58 	bl	8016c9c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d101      	bne.n	80073f6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e1c6      	b.n	8007784 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a7e      	ldr	r2, [pc, #504]	; (80075f4 <HAL_FDCAN_Init+0x220>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d106      	bne.n	800740e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007408:	461a      	mov	r2, r3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007414:	b2db      	uxtb	r3, r3
 8007416:	2b00      	cmp	r3, #0
 8007418:	d106      	bne.n	8007428 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f7fb fa12 	bl	800284c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	699a      	ldr	r2, [r3, #24]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f022 0210 	bic.w	r2, r2, #16
 8007436:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007438:	f7fc fa30 	bl	800389c <HAL_GetTick>
 800743c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800743e:	e014      	b.n	800746a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007440:	f7fc fa2c 	bl	800389c <HAL_GetTick>
 8007444:	4602      	mov	r2, r0
 8007446:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	2b0a      	cmp	r3, #10
 800744c:	d90d      	bls.n	800746a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007454:	f043 0201 	orr.w	r2, r3, #1
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2203      	movs	r2, #3
 8007462:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e18c      	b.n	8007784 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	699b      	ldr	r3, [r3, #24]
 8007470:	f003 0308 	and.w	r3, r3, #8
 8007474:	2b08      	cmp	r3, #8
 8007476:	d0e3      	beq.n	8007440 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	699a      	ldr	r2, [r3, #24]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f042 0201 	orr.w	r2, r2, #1
 8007486:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007488:	f7fc fa08 	bl	800389c <HAL_GetTick>
 800748c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800748e:	e014      	b.n	80074ba <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007490:	f7fc fa04 	bl	800389c <HAL_GetTick>
 8007494:	4602      	mov	r2, r0
 8007496:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007498:	1ad3      	subs	r3, r2, r3
 800749a:	2b0a      	cmp	r3, #10
 800749c:	d90d      	bls.n	80074ba <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80074a4:	f043 0201 	orr.w	r2, r3, #1
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2203      	movs	r2, #3
 80074b2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	e164      	b.n	8007784 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	f003 0301 	and.w	r3, r3, #1
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d0e3      	beq.n	8007490 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	699a      	ldr	r2, [r3, #24]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f042 0202 	orr.w	r2, r2, #2
 80074d6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	7c1b      	ldrb	r3, [r3, #16]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d108      	bne.n	80074f2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	699a      	ldr	r2, [r3, #24]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074ee:	619a      	str	r2, [r3, #24]
 80074f0:	e007      	b.n	8007502 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	699a      	ldr	r2, [r3, #24]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007500:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	7c5b      	ldrb	r3, [r3, #17]
 8007506:	2b01      	cmp	r3, #1
 8007508:	d108      	bne.n	800751c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	699a      	ldr	r2, [r3, #24]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007518:	619a      	str	r2, [r3, #24]
 800751a:	e007      	b.n	800752c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	699a      	ldr	r2, [r3, #24]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800752a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	7c9b      	ldrb	r3, [r3, #18]
 8007530:	2b01      	cmp	r3, #1
 8007532:	d108      	bne.n	8007546 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	699a      	ldr	r2, [r3, #24]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007542:	619a      	str	r2, [r3, #24]
 8007544:	e007      	b.n	8007556 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	699a      	ldr	r2, [r3, #24]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007554:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	699b      	ldr	r3, [r3, #24]
 800755c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	689a      	ldr	r2, [r3, #8]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	430a      	orrs	r2, r1
 800756a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	699a      	ldr	r2, [r3, #24]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800757a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	691a      	ldr	r2, [r3, #16]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f022 0210 	bic.w	r2, r2, #16
 800758a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d108      	bne.n	80075a6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	699a      	ldr	r2, [r3, #24]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f042 0204 	orr.w	r2, r2, #4
 80075a2:	619a      	str	r2, [r3, #24]
 80075a4:	e030      	b.n	8007608 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d02c      	beq.n	8007608 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	2b02      	cmp	r3, #2
 80075b4:	d020      	beq.n	80075f8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	699a      	ldr	r2, [r3, #24]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80075c4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	691a      	ldr	r2, [r3, #16]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f042 0210 	orr.w	r2, r2, #16
 80075d4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	2b03      	cmp	r3, #3
 80075dc:	d114      	bne.n	8007608 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	699a      	ldr	r2, [r3, #24]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f042 0220 	orr.w	r2, r2, #32
 80075ec:	619a      	str	r2, [r3, #24]
 80075ee:	e00b      	b.n	8007608 <HAL_FDCAN_Init+0x234>
 80075f0:	0801ba50 	.word	0x0801ba50
 80075f4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	699a      	ldr	r2, [r3, #24]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f042 0220 	orr.w	r2, r2, #32
 8007606:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	699b      	ldr	r3, [r3, #24]
 800760c:	3b01      	subs	r3, #1
 800760e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	69db      	ldr	r3, [r3, #28]
 8007614:	3b01      	subs	r3, #1
 8007616:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007618:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a1b      	ldr	r3, [r3, #32]
 800761e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007620:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	695b      	ldr	r3, [r3, #20]
 8007628:	3b01      	subs	r3, #1
 800762a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007630:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007632:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800763c:	d115      	bne.n	800766a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007642:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007648:	3b01      	subs	r3, #1
 800764a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800764c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007652:	3b01      	subs	r3, #1
 8007654:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007656:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765e:	3b01      	subs	r3, #1
 8007660:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007666:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007668:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00a      	beq.n	8007688 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	430a      	orrs	r2, r1
 8007684:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007690:	4413      	add	r3, r2
 8007692:	2b00      	cmp	r3, #0
 8007694:	d011      	beq.n	80076ba <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800769e:	f023 0107 	bic.w	r1, r3, #7
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	3360      	adds	r3, #96	; 0x60
 80076aa:	443b      	add	r3, r7
 80076ac:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	430a      	orrs	r2, r1
 80076b6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d011      	beq.n	80076e6 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80076ca:	f023 0107 	bic.w	r1, r3, #7
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	3360      	adds	r3, #96	; 0x60
 80076d6:	443b      	add	r3, r7
 80076d8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	430a      	orrs	r2, r1
 80076e2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d012      	beq.n	8007714 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80076f6:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	3360      	adds	r3, #96	; 0x60
 8007702:	443b      	add	r3, r7
 8007704:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007708:	011a      	lsls	r2, r3, #4
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	430a      	orrs	r2, r1
 8007710:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007718:	2b00      	cmp	r3, #0
 800771a:	d012      	beq.n	8007742 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007724:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	3360      	adds	r3, #96	; 0x60
 8007730:	443b      	add	r3, r7
 8007732:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007736:	021a      	lsls	r2, r3, #8
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	430a      	orrs	r2, r1
 800773e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a11      	ldr	r2, [pc, #68]	; (800778c <HAL_FDCAN_Init+0x3b8>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d107      	bne.n	800775c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	689a      	ldr	r2, [r3, #8]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	f022 0203 	bic.w	r2, r2, #3
 800775a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 f80b 	bl	8007790 <FDCAN_CalcultateRamBlockAddresses>
 800777a:	4603      	mov	r3, r0
 800777c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8007780:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8007784:	4618      	mov	r0, r3
 8007786:	3760      	adds	r7, #96	; 0x60
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	4000a000 	.word	0x4000a000

08007790 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007790:	b480      	push	{r7}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800779c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80077a6:	4ba7      	ldr	r3, [pc, #668]	; (8007a44 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80077a8:	4013      	ands	r3, r2
 80077aa:	68ba      	ldr	r2, [r7, #8]
 80077ac:	0091      	lsls	r1, r2, #2
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	6812      	ldr	r2, [r2, #0]
 80077b2:	430b      	orrs	r3, r1
 80077b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077c0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c8:	041a      	lsls	r2, r3, #16
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	430a      	orrs	r2, r1
 80077d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d8:	68ba      	ldr	r2, [r7, #8]
 80077da:	4413      	add	r3, r2
 80077dc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80077e6:	4b97      	ldr	r3, [pc, #604]	; (8007a44 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80077e8:	4013      	ands	r3, r2
 80077ea:	68ba      	ldr	r2, [r7, #8]
 80077ec:	0091      	lsls	r1, r2, #2
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	6812      	ldr	r2, [r2, #0]
 80077f2:	430b      	orrs	r3, r1
 80077f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007800:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007808:	041a      	lsls	r2, r3, #16
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	430a      	orrs	r2, r1
 8007810:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007818:	005b      	lsls	r3, r3, #1
 800781a:	68ba      	ldr	r2, [r7, #8]
 800781c:	4413      	add	r3, r2
 800781e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007828:	4b86      	ldr	r3, [pc, #536]	; (8007a44 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800782a:	4013      	ands	r3, r2
 800782c:	68ba      	ldr	r2, [r7, #8]
 800782e:	0091      	lsls	r1, r2, #2
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	6812      	ldr	r2, [r2, #0]
 8007834:	430b      	orrs	r3, r1
 8007836:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007842:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784a:	041a      	lsls	r2, r3, #16
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	430a      	orrs	r2, r1
 8007852:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800785e:	fb02 f303 	mul.w	r3, r2, r3
 8007862:	68ba      	ldr	r2, [r7, #8]
 8007864:	4413      	add	r3, r2
 8007866:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007870:	4b74      	ldr	r3, [pc, #464]	; (8007a44 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007872:	4013      	ands	r3, r2
 8007874:	68ba      	ldr	r2, [r7, #8]
 8007876:	0091      	lsls	r1, r2, #2
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	6812      	ldr	r2, [r2, #0]
 800787c:	430b      	orrs	r3, r1
 800787e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800788a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007892:	041a      	lsls	r2, r3, #16
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	430a      	orrs	r2, r1
 800789a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80078a6:	fb02 f303 	mul.w	r3, r2, r3
 80078aa:	68ba      	ldr	r2, [r7, #8]
 80078ac:	4413      	add	r3, r2
 80078ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80078b8:	4b62      	ldr	r3, [pc, #392]	; (8007a44 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80078ba:	4013      	ands	r3, r2
 80078bc:	68ba      	ldr	r2, [r7, #8]
 80078be:	0091      	lsls	r1, r2, #2
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	6812      	ldr	r2, [r2, #0]
 80078c4:	430b      	orrs	r3, r1
 80078c6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80078d2:	fb02 f303 	mul.w	r3, r2, r3
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	4413      	add	r3, r2
 80078da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80078e4:	4b57      	ldr	r3, [pc, #348]	; (8007a44 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80078e6:	4013      	ands	r3, r2
 80078e8:	68ba      	ldr	r2, [r7, #8]
 80078ea:	0091      	lsls	r1, r2, #2
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	6812      	ldr	r2, [r2, #0]
 80078f0:	430b      	orrs	r3, r1
 80078f2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80078fe:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007906:	041a      	lsls	r2, r3, #16
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	430a      	orrs	r2, r1
 800790e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007916:	005b      	lsls	r3, r3, #1
 8007918:	68ba      	ldr	r2, [r7, #8]
 800791a:	4413      	add	r3, r2
 800791c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007926:	4b47      	ldr	r3, [pc, #284]	; (8007a44 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007928:	4013      	ands	r3, r2
 800792a:	68ba      	ldr	r2, [r7, #8]
 800792c:	0091      	lsls	r1, r2, #2
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	6812      	ldr	r2, [r2, #0]
 8007932:	430b      	orrs	r3, r1
 8007934:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007940:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007948:	041a      	lsls	r2, r3, #16
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	430a      	orrs	r2, r1
 8007950:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800795c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007964:	061a      	lsls	r2, r3, #24
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	430a      	orrs	r2, r1
 800796c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007974:	4b34      	ldr	r3, [pc, #208]	; (8007a48 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007976:	4413      	add	r3, r2
 8007978:	009a      	lsls	r2, r3, #2
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	441a      	add	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007996:	00db      	lsls	r3, r3, #3
 8007998:	441a      	add	r2, r3
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a6:	6879      	ldr	r1, [r7, #4]
 80079a8:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80079aa:	fb01 f303 	mul.w	r3, r1, r3
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	441a      	add	r2, r3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079be:	6879      	ldr	r1, [r7, #4]
 80079c0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80079c2:	fb01 f303 	mul.w	r3, r1, r3
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	441a      	add	r2, r3
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079d6:	6879      	ldr	r1, [r7, #4]
 80079d8:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80079da:	fb01 f303 	mul.w	r3, r1, r3
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	441a      	add	r2, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079f2:	00db      	lsls	r3, r3, #3
 80079f4:	441a      	add	r2, r3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a06:	6879      	ldr	r1, [r7, #4]
 8007a08:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007a0a:	fb01 f303 	mul.w	r3, r1, r3
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	441a      	add	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a22:	6879      	ldr	r1, [r7, #4]
 8007a24:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007a26:	fb01 f303 	mul.w	r3, r1, r3
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	441a      	add	r2, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a3a:	4a04      	ldr	r2, [pc, #16]	; (8007a4c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d915      	bls.n	8007a6c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007a40:	e006      	b.n	8007a50 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007a42:	bf00      	nop
 8007a44:	ffff0003 	.word	0xffff0003
 8007a48:	10002b00 	.word	0x10002b00
 8007a4c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a56:	f043 0220 	orr.w	r2, r3, #32
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2203      	movs	r2, #3
 8007a64:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e010      	b.n	8007a8e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a70:	60fb      	str	r3, [r7, #12]
 8007a72:	e005      	b.n	8007a80 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2200      	movs	r2, #0
 8007a78:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	3304      	adds	r3, #4
 8007a7e:	60fb      	str	r3, [r7, #12]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d3f3      	bcc.n	8007a74 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3714      	adds	r7, #20
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop

08007a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b089      	sub	sp, #36	; 0x24
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007aaa:	4b86      	ldr	r3, [pc, #536]	; (8007cc4 <HAL_GPIO_Init+0x228>)
 8007aac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007aae:	e18c      	b.n	8007dca <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	2101      	movs	r1, #1
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8007abc:	4013      	ands	r3, r2
 8007abe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	f000 817e 	beq.w	8007dc4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	f003 0303 	and.w	r3, r3, #3
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d005      	beq.n	8007ae0 <HAL_GPIO_Init+0x44>
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	f003 0303 	and.w	r3, r3, #3
 8007adc:	2b02      	cmp	r3, #2
 8007ade:	d130      	bne.n	8007b42 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	005b      	lsls	r3, r3, #1
 8007aea:	2203      	movs	r2, #3
 8007aec:	fa02 f303 	lsl.w	r3, r2, r3
 8007af0:	43db      	mvns	r3, r3
 8007af2:	69ba      	ldr	r2, [r7, #24]
 8007af4:	4013      	ands	r3, r2
 8007af6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	68da      	ldr	r2, [r3, #12]
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	005b      	lsls	r3, r3, #1
 8007b00:	fa02 f303 	lsl.w	r3, r2, r3
 8007b04:	69ba      	ldr	r2, [r7, #24]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	69ba      	ldr	r2, [r7, #24]
 8007b0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007b16:	2201      	movs	r2, #1
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b1e:	43db      	mvns	r3, r3
 8007b20:	69ba      	ldr	r2, [r7, #24]
 8007b22:	4013      	ands	r3, r2
 8007b24:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	091b      	lsrs	r3, r3, #4
 8007b2c:	f003 0201 	and.w	r2, r3, #1
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	fa02 f303 	lsl.w	r3, r2, r3
 8007b36:	69ba      	ldr	r2, [r7, #24]
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	69ba      	ldr	r2, [r7, #24]
 8007b40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	f003 0303 	and.w	r3, r3, #3
 8007b4a:	2b03      	cmp	r3, #3
 8007b4c:	d017      	beq.n	8007b7e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	005b      	lsls	r3, r3, #1
 8007b58:	2203      	movs	r2, #3
 8007b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b5e:	43db      	mvns	r3, r3
 8007b60:	69ba      	ldr	r2, [r7, #24]
 8007b62:	4013      	ands	r3, r2
 8007b64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	689a      	ldr	r2, [r3, #8]
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	005b      	lsls	r3, r3, #1
 8007b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b72:	69ba      	ldr	r2, [r7, #24]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	69ba      	ldr	r2, [r7, #24]
 8007b7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	f003 0303 	and.w	r3, r3, #3
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	d123      	bne.n	8007bd2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	08da      	lsrs	r2, r3, #3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	3208      	adds	r2, #8
 8007b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	f003 0307 	and.w	r3, r3, #7
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	220f      	movs	r2, #15
 8007ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba6:	43db      	mvns	r3, r3
 8007ba8:	69ba      	ldr	r2, [r7, #24]
 8007baa:	4013      	ands	r3, r2
 8007bac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	691a      	ldr	r2, [r3, #16]
 8007bb2:	69fb      	ldr	r3, [r7, #28]
 8007bb4:	f003 0307 	and.w	r3, r3, #7
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	fa02 f303 	lsl.w	r3, r2, r3
 8007bbe:	69ba      	ldr	r2, [r7, #24]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	08da      	lsrs	r2, r3, #3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	3208      	adds	r2, #8
 8007bcc:	69b9      	ldr	r1, [r7, #24]
 8007bce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	005b      	lsls	r3, r3, #1
 8007bdc:	2203      	movs	r2, #3
 8007bde:	fa02 f303 	lsl.w	r3, r2, r3
 8007be2:	43db      	mvns	r3, r3
 8007be4:	69ba      	ldr	r2, [r7, #24]
 8007be6:	4013      	ands	r3, r2
 8007be8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	f003 0203 	and.w	r2, r3, #3
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	005b      	lsls	r3, r3, #1
 8007bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bfa:	69ba      	ldr	r2, [r7, #24]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	69ba      	ldr	r2, [r7, #24]
 8007c04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	f000 80d8 	beq.w	8007dc4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c14:	4b2c      	ldr	r3, [pc, #176]	; (8007cc8 <HAL_GPIO_Init+0x22c>)
 8007c16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007c1a:	4a2b      	ldr	r2, [pc, #172]	; (8007cc8 <HAL_GPIO_Init+0x22c>)
 8007c1c:	f043 0302 	orr.w	r3, r3, #2
 8007c20:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007c24:	4b28      	ldr	r3, [pc, #160]	; (8007cc8 <HAL_GPIO_Init+0x22c>)
 8007c26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007c2a:	f003 0302 	and.w	r3, r3, #2
 8007c2e:	60fb      	str	r3, [r7, #12]
 8007c30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007c32:	4a26      	ldr	r2, [pc, #152]	; (8007ccc <HAL_GPIO_Init+0x230>)
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	089b      	lsrs	r3, r3, #2
 8007c38:	3302      	adds	r3, #2
 8007c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	f003 0303 	and.w	r3, r3, #3
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	220f      	movs	r2, #15
 8007c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c4e:	43db      	mvns	r3, r3
 8007c50:	69ba      	ldr	r2, [r7, #24]
 8007c52:	4013      	ands	r3, r2
 8007c54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a1d      	ldr	r2, [pc, #116]	; (8007cd0 <HAL_GPIO_Init+0x234>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d04a      	beq.n	8007cf4 <HAL_GPIO_Init+0x258>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a1c      	ldr	r2, [pc, #112]	; (8007cd4 <HAL_GPIO_Init+0x238>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d02b      	beq.n	8007cbe <HAL_GPIO_Init+0x222>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	4a1b      	ldr	r2, [pc, #108]	; (8007cd8 <HAL_GPIO_Init+0x23c>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d025      	beq.n	8007cba <HAL_GPIO_Init+0x21e>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4a1a      	ldr	r2, [pc, #104]	; (8007cdc <HAL_GPIO_Init+0x240>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d01f      	beq.n	8007cb6 <HAL_GPIO_Init+0x21a>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4a19      	ldr	r2, [pc, #100]	; (8007ce0 <HAL_GPIO_Init+0x244>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d019      	beq.n	8007cb2 <HAL_GPIO_Init+0x216>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a18      	ldr	r2, [pc, #96]	; (8007ce4 <HAL_GPIO_Init+0x248>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d013      	beq.n	8007cae <HAL_GPIO_Init+0x212>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4a17      	ldr	r2, [pc, #92]	; (8007ce8 <HAL_GPIO_Init+0x24c>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d00d      	beq.n	8007caa <HAL_GPIO_Init+0x20e>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4a16      	ldr	r2, [pc, #88]	; (8007cec <HAL_GPIO_Init+0x250>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d007      	beq.n	8007ca6 <HAL_GPIO_Init+0x20a>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4a15      	ldr	r2, [pc, #84]	; (8007cf0 <HAL_GPIO_Init+0x254>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d101      	bne.n	8007ca2 <HAL_GPIO_Init+0x206>
 8007c9e:	2309      	movs	r3, #9
 8007ca0:	e029      	b.n	8007cf6 <HAL_GPIO_Init+0x25a>
 8007ca2:	230a      	movs	r3, #10
 8007ca4:	e027      	b.n	8007cf6 <HAL_GPIO_Init+0x25a>
 8007ca6:	2307      	movs	r3, #7
 8007ca8:	e025      	b.n	8007cf6 <HAL_GPIO_Init+0x25a>
 8007caa:	2306      	movs	r3, #6
 8007cac:	e023      	b.n	8007cf6 <HAL_GPIO_Init+0x25a>
 8007cae:	2305      	movs	r3, #5
 8007cb0:	e021      	b.n	8007cf6 <HAL_GPIO_Init+0x25a>
 8007cb2:	2304      	movs	r3, #4
 8007cb4:	e01f      	b.n	8007cf6 <HAL_GPIO_Init+0x25a>
 8007cb6:	2303      	movs	r3, #3
 8007cb8:	e01d      	b.n	8007cf6 <HAL_GPIO_Init+0x25a>
 8007cba:	2302      	movs	r3, #2
 8007cbc:	e01b      	b.n	8007cf6 <HAL_GPIO_Init+0x25a>
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e019      	b.n	8007cf6 <HAL_GPIO_Init+0x25a>
 8007cc2:	bf00      	nop
 8007cc4:	58000080 	.word	0x58000080
 8007cc8:	58024400 	.word	0x58024400
 8007ccc:	58000400 	.word	0x58000400
 8007cd0:	58020000 	.word	0x58020000
 8007cd4:	58020400 	.word	0x58020400
 8007cd8:	58020800 	.word	0x58020800
 8007cdc:	58020c00 	.word	0x58020c00
 8007ce0:	58021000 	.word	0x58021000
 8007ce4:	58021400 	.word	0x58021400
 8007ce8:	58021800 	.word	0x58021800
 8007cec:	58021c00 	.word	0x58021c00
 8007cf0:	58022400 	.word	0x58022400
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	69fa      	ldr	r2, [r7, #28]
 8007cf8:	f002 0203 	and.w	r2, r2, #3
 8007cfc:	0092      	lsls	r2, r2, #2
 8007cfe:	4093      	lsls	r3, r2
 8007d00:	69ba      	ldr	r2, [r7, #24]
 8007d02:	4313      	orrs	r3, r2
 8007d04:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007d06:	4938      	ldr	r1, [pc, #224]	; (8007de8 <HAL_GPIO_Init+0x34c>)
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	089b      	lsrs	r3, r3, #2
 8007d0c:	3302      	adds	r3, #2
 8007d0e:	69ba      	ldr	r2, [r7, #24]
 8007d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	43db      	mvns	r3, r3
 8007d20:	69ba      	ldr	r2, [r7, #24]
 8007d22:	4013      	ands	r3, r2
 8007d24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d003      	beq.n	8007d3a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007d32:	69ba      	ldr	r2, [r7, #24]
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007d3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	43db      	mvns	r3, r3
 8007d4e:	69ba      	ldr	r2, [r7, #24]
 8007d50:	4013      	ands	r3, r2
 8007d52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d003      	beq.n	8007d68 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007d60:	69ba      	ldr	r2, [r7, #24]
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	4313      	orrs	r3, r2
 8007d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007d68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	43db      	mvns	r3, r3
 8007d7a:	69ba      	ldr	r2, [r7, #24]
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d003      	beq.n	8007d94 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007d8c:	69ba      	ldr	r2, [r7, #24]
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	4313      	orrs	r3, r2
 8007d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	69ba      	ldr	r2, [r7, #24]
 8007d98:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	43db      	mvns	r3, r3
 8007da4:	69ba      	ldr	r2, [r7, #24]
 8007da6:	4013      	ands	r3, r2
 8007da8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d003      	beq.n	8007dbe <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007db6:	69ba      	ldr	r2, [r7, #24]
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	69ba      	ldr	r2, [r7, #24]
 8007dc2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	69fb      	ldr	r3, [r7, #28]
 8007dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	f47f ae6b 	bne.w	8007ab0 <HAL_GPIO_Init+0x14>
  }
}
 8007dda:	bf00      	nop
 8007ddc:	bf00      	nop
 8007dde:	3724      	adds	r7, #36	; 0x24
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr
 8007de8:	58000400 	.word	0x58000400

08007dec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b085      	sub	sp, #20
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	460b      	mov	r3, r1
 8007df6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	691a      	ldr	r2, [r3, #16]
 8007dfc:	887b      	ldrh	r3, [r7, #2]
 8007dfe:	4013      	ands	r3, r2
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d002      	beq.n	8007e0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007e04:	2301      	movs	r3, #1
 8007e06:	73fb      	strb	r3, [r7, #15]
 8007e08:	e001      	b.n	8007e0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3714      	adds	r7, #20
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	460b      	mov	r3, r1
 8007e26:	807b      	strh	r3, [r7, #2]
 8007e28:	4613      	mov	r3, r2
 8007e2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007e2c:	787b      	ldrb	r3, [r7, #1]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d003      	beq.n	8007e3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007e32:	887a      	ldrh	r2, [r7, #2]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007e38:	e003      	b.n	8007e42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007e3a:	887b      	ldrh	r3, [r7, #2]
 8007e3c:	041a      	lsls	r2, r3, #16
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	619a      	str	r2, [r3, #24]
}
 8007e42:	bf00      	nop
 8007e44:	370c      	adds	r7, #12
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr
	...

08007e50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d101      	bne.n	8007e62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e07f      	b.n	8007f62 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d106      	bne.n	8007e7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f7fa fd50 	bl	800291c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2224      	movs	r2, #36	; 0x24
 8007e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f022 0201 	bic.w	r2, r2, #1
 8007e92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	685a      	ldr	r2, [r3, #4]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007ea0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	689a      	ldr	r2, [r3, #8]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007eb0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d107      	bne.n	8007eca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	689a      	ldr	r2, [r3, #8]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ec6:	609a      	str	r2, [r3, #8]
 8007ec8:	e006      	b.n	8007ed8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	689a      	ldr	r2, [r3, #8]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007ed6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	2b02      	cmp	r3, #2
 8007ede:	d104      	bne.n	8007eea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ee8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	6859      	ldr	r1, [r3, #4]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	4b1d      	ldr	r3, [pc, #116]	; (8007f6c <HAL_I2C_Init+0x11c>)
 8007ef6:	430b      	orrs	r3, r1
 8007ef8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	68da      	ldr	r2, [r3, #12]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007f08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	691a      	ldr	r2, [r3, #16]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	695b      	ldr	r3, [r3, #20]
 8007f12:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	699b      	ldr	r3, [r3, #24]
 8007f1a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	430a      	orrs	r2, r1
 8007f22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	69d9      	ldr	r1, [r3, #28]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6a1a      	ldr	r2, [r3, #32]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	430a      	orrs	r2, r1
 8007f32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f042 0201 	orr.w	r2, r2, #1
 8007f42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2220      	movs	r2, #32
 8007f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3708      	adds	r7, #8
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	02008000 	.word	0x02008000

08007f70 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	699b      	ldr	r3, [r3, #24]
 8007f7e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d005      	beq.n	8007f9c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f94:	68ba      	ldr	r2, [r7, #8]
 8007f96:	68f9      	ldr	r1, [r7, #12]
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	4798      	blx	r3
  }
}
 8007f9c:	bf00      	nop
 8007f9e:	3710      	adds	r7, #16
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	2b20      	cmp	r3, #32
 8007fb8:	d138      	bne.n	800802c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d101      	bne.n	8007fc8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007fc4:	2302      	movs	r3, #2
 8007fc6:	e032      	b.n	800802e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2224      	movs	r2, #36	; 0x24
 8007fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f022 0201 	bic.w	r2, r2, #1
 8007fe6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007ff6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	6819      	ldr	r1, [r3, #0]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	683a      	ldr	r2, [r7, #0]
 8008004:	430a      	orrs	r2, r1
 8008006:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f042 0201 	orr.w	r2, r2, #1
 8008016:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2220      	movs	r2, #32
 800801c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008028:	2300      	movs	r3, #0
 800802a:	e000      	b.n	800802e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800802c:	2302      	movs	r3, #2
  }
}
 800802e:	4618      	mov	r0, r3
 8008030:	370c      	adds	r7, #12
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr

0800803a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800803a:	b480      	push	{r7}
 800803c:	b085      	sub	sp, #20
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
 8008042:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800804a:	b2db      	uxtb	r3, r3
 800804c:	2b20      	cmp	r3, #32
 800804e:	d139      	bne.n	80080c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008056:	2b01      	cmp	r3, #1
 8008058:	d101      	bne.n	800805e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800805a:	2302      	movs	r3, #2
 800805c:	e033      	b.n	80080c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2201      	movs	r2, #1
 8008062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2224      	movs	r2, #36	; 0x24
 800806a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f022 0201 	bic.w	r2, r2, #1
 800807c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800808c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	021b      	lsls	r3, r3, #8
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	4313      	orrs	r3, r2
 8008096:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	68fa      	ldr	r2, [r7, #12]
 800809e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f042 0201 	orr.w	r2, r2, #1
 80080ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2220      	movs	r2, #32
 80080b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80080c0:	2300      	movs	r3, #0
 80080c2:	e000      	b.n	80080c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80080c4:	2302      	movs	r3, #2
  }
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3714      	adds	r7, #20
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr

080080d2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80080d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080d4:	b08f      	sub	sp, #60	; 0x3c
 80080d6:	af0a      	add	r7, sp, #40	; 0x28
 80080d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d101      	bne.n	80080e4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80080e0:	2301      	movs	r3, #1
 80080e2:	e116      	b.n	8008312 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d106      	bne.n	8008104 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f00e fa96 	bl	8016630 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2203      	movs	r2, #3
 8008108:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008114:	2b00      	cmp	r3, #0
 8008116:	d102      	bne.n	800811e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4618      	mov	r0, r3
 8008124:	f00a fbdb 	bl	80128de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	603b      	str	r3, [r7, #0]
 800812e:	687e      	ldr	r6, [r7, #4]
 8008130:	466d      	mov	r5, sp
 8008132:	f106 0410 	add.w	r4, r6, #16
 8008136:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008138:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800813a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800813c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800813e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008142:	e885 0003 	stmia.w	r5, {r0, r1}
 8008146:	1d33      	adds	r3, r6, #4
 8008148:	cb0e      	ldmia	r3, {r1, r2, r3}
 800814a:	6838      	ldr	r0, [r7, #0]
 800814c:	f00a faa6 	bl	801269c <USB_CoreInit>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d005      	beq.n	8008162 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2202      	movs	r2, #2
 800815a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	e0d7      	b.n	8008312 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2100      	movs	r1, #0
 8008168:	4618      	mov	r0, r3
 800816a:	f00a fbc9 	bl	8012900 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800816e:	2300      	movs	r3, #0
 8008170:	73fb      	strb	r3, [r7, #15]
 8008172:	e04a      	b.n	800820a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008174:	7bfa      	ldrb	r2, [r7, #15]
 8008176:	6879      	ldr	r1, [r7, #4]
 8008178:	4613      	mov	r3, r2
 800817a:	00db      	lsls	r3, r3, #3
 800817c:	4413      	add	r3, r2
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	440b      	add	r3, r1
 8008182:	333d      	adds	r3, #61	; 0x3d
 8008184:	2201      	movs	r2, #1
 8008186:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008188:	7bfa      	ldrb	r2, [r7, #15]
 800818a:	6879      	ldr	r1, [r7, #4]
 800818c:	4613      	mov	r3, r2
 800818e:	00db      	lsls	r3, r3, #3
 8008190:	4413      	add	r3, r2
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	440b      	add	r3, r1
 8008196:	333c      	adds	r3, #60	; 0x3c
 8008198:	7bfa      	ldrb	r2, [r7, #15]
 800819a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800819c:	7bfa      	ldrb	r2, [r7, #15]
 800819e:	7bfb      	ldrb	r3, [r7, #15]
 80081a0:	b298      	uxth	r0, r3
 80081a2:	6879      	ldr	r1, [r7, #4]
 80081a4:	4613      	mov	r3, r2
 80081a6:	00db      	lsls	r3, r3, #3
 80081a8:	4413      	add	r3, r2
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	440b      	add	r3, r1
 80081ae:	3356      	adds	r3, #86	; 0x56
 80081b0:	4602      	mov	r2, r0
 80081b2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80081b4:	7bfa      	ldrb	r2, [r7, #15]
 80081b6:	6879      	ldr	r1, [r7, #4]
 80081b8:	4613      	mov	r3, r2
 80081ba:	00db      	lsls	r3, r3, #3
 80081bc:	4413      	add	r3, r2
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	440b      	add	r3, r1
 80081c2:	3340      	adds	r3, #64	; 0x40
 80081c4:	2200      	movs	r2, #0
 80081c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80081c8:	7bfa      	ldrb	r2, [r7, #15]
 80081ca:	6879      	ldr	r1, [r7, #4]
 80081cc:	4613      	mov	r3, r2
 80081ce:	00db      	lsls	r3, r3, #3
 80081d0:	4413      	add	r3, r2
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	440b      	add	r3, r1
 80081d6:	3344      	adds	r3, #68	; 0x44
 80081d8:	2200      	movs	r2, #0
 80081da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80081dc:	7bfa      	ldrb	r2, [r7, #15]
 80081de:	6879      	ldr	r1, [r7, #4]
 80081e0:	4613      	mov	r3, r2
 80081e2:	00db      	lsls	r3, r3, #3
 80081e4:	4413      	add	r3, r2
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	440b      	add	r3, r1
 80081ea:	3348      	adds	r3, #72	; 0x48
 80081ec:	2200      	movs	r2, #0
 80081ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80081f0:	7bfa      	ldrb	r2, [r7, #15]
 80081f2:	6879      	ldr	r1, [r7, #4]
 80081f4:	4613      	mov	r3, r2
 80081f6:	00db      	lsls	r3, r3, #3
 80081f8:	4413      	add	r3, r2
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	440b      	add	r3, r1
 80081fe:	334c      	adds	r3, #76	; 0x4c
 8008200:	2200      	movs	r2, #0
 8008202:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008204:	7bfb      	ldrb	r3, [r7, #15]
 8008206:	3301      	adds	r3, #1
 8008208:	73fb      	strb	r3, [r7, #15]
 800820a:	7bfa      	ldrb	r2, [r7, #15]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	429a      	cmp	r2, r3
 8008212:	d3af      	bcc.n	8008174 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008214:	2300      	movs	r3, #0
 8008216:	73fb      	strb	r3, [r7, #15]
 8008218:	e044      	b.n	80082a4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800821a:	7bfa      	ldrb	r2, [r7, #15]
 800821c:	6879      	ldr	r1, [r7, #4]
 800821e:	4613      	mov	r3, r2
 8008220:	00db      	lsls	r3, r3, #3
 8008222:	4413      	add	r3, r2
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	440b      	add	r3, r1
 8008228:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800822c:	2200      	movs	r2, #0
 800822e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008230:	7bfa      	ldrb	r2, [r7, #15]
 8008232:	6879      	ldr	r1, [r7, #4]
 8008234:	4613      	mov	r3, r2
 8008236:	00db      	lsls	r3, r3, #3
 8008238:	4413      	add	r3, r2
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	440b      	add	r3, r1
 800823e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8008242:	7bfa      	ldrb	r2, [r7, #15]
 8008244:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008246:	7bfa      	ldrb	r2, [r7, #15]
 8008248:	6879      	ldr	r1, [r7, #4]
 800824a:	4613      	mov	r3, r2
 800824c:	00db      	lsls	r3, r3, #3
 800824e:	4413      	add	r3, r2
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	440b      	add	r3, r1
 8008254:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008258:	2200      	movs	r2, #0
 800825a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800825c:	7bfa      	ldrb	r2, [r7, #15]
 800825e:	6879      	ldr	r1, [r7, #4]
 8008260:	4613      	mov	r3, r2
 8008262:	00db      	lsls	r3, r3, #3
 8008264:	4413      	add	r3, r2
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	440b      	add	r3, r1
 800826a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800826e:	2200      	movs	r2, #0
 8008270:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008272:	7bfa      	ldrb	r2, [r7, #15]
 8008274:	6879      	ldr	r1, [r7, #4]
 8008276:	4613      	mov	r3, r2
 8008278:	00db      	lsls	r3, r3, #3
 800827a:	4413      	add	r3, r2
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	440b      	add	r3, r1
 8008280:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008284:	2200      	movs	r2, #0
 8008286:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008288:	7bfa      	ldrb	r2, [r7, #15]
 800828a:	6879      	ldr	r1, [r7, #4]
 800828c:	4613      	mov	r3, r2
 800828e:	00db      	lsls	r3, r3, #3
 8008290:	4413      	add	r3, r2
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	440b      	add	r3, r1
 8008296:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800829a:	2200      	movs	r2, #0
 800829c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800829e:	7bfb      	ldrb	r3, [r7, #15]
 80082a0:	3301      	adds	r3, #1
 80082a2:	73fb      	strb	r3, [r7, #15]
 80082a4:	7bfa      	ldrb	r2, [r7, #15]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d3b5      	bcc.n	800821a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	603b      	str	r3, [r7, #0]
 80082b4:	687e      	ldr	r6, [r7, #4]
 80082b6:	466d      	mov	r5, sp
 80082b8:	f106 0410 	add.w	r4, r6, #16
 80082bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80082be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80082c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80082c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80082c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80082c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80082cc:	1d33      	adds	r3, r6, #4
 80082ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80082d0:	6838      	ldr	r0, [r7, #0]
 80082d2:	f00a fb61 	bl	8012998 <USB_DevInit>
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d005      	beq.n	80082e8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2202      	movs	r2, #2
 80082e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	e014      	b.n	8008312 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d102      	bne.n	8008306 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f001 f96f 	bl	80095e4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4618      	mov	r0, r3
 800830c:	f00b fba3 	bl	8013a56 <USB_DevDisconnect>

  return HAL_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	3714      	adds	r7, #20
 8008316:	46bd      	mov	sp, r7
 8008318:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800831a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b084      	sub	sp, #16
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800832e:	2b01      	cmp	r3, #1
 8008330:	d101      	bne.n	8008336 <HAL_PCD_Start+0x1c>
 8008332:	2302      	movs	r3, #2
 8008334:	e022      	b.n	800837c <HAL_PCD_Start+0x62>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2201      	movs	r2, #1
 800833a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008346:	2b00      	cmp	r3, #0
 8008348:	d109      	bne.n	800835e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800834e:	2b01      	cmp	r3, #1
 8008350:	d105      	bne.n	800835e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008356:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4618      	mov	r0, r3
 8008364:	f00a faaa 	bl	80128bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4618      	mov	r0, r3
 800836e:	f00b fb51 	bl	8013a14 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	3710      	adds	r7, #16
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008384:	b590      	push	{r4, r7, lr}
 8008386:	b08d      	sub	sp, #52	; 0x34
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008392:	6a3b      	ldr	r3, [r7, #32]
 8008394:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4618      	mov	r0, r3
 800839c:	f00b fc0f 	bl	8013bbe <USB_GetMode>
 80083a0:	4603      	mov	r3, r0
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	f040 84b7 	bne.w	8008d16 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4618      	mov	r0, r3
 80083ae:	f00b fb73 	bl	8013a98 <USB_ReadInterrupts>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	f000 84ad 	beq.w	8008d14 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80083ba:	69fb      	ldr	r3, [r7, #28]
 80083bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	0a1b      	lsrs	r3, r3, #8
 80083c4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4618      	mov	r0, r3
 80083d4:	f00b fb60 	bl	8013a98 <USB_ReadInterrupts>
 80083d8:	4603      	mov	r3, r0
 80083da:	f003 0302 	and.w	r3, r3, #2
 80083de:	2b02      	cmp	r3, #2
 80083e0:	d107      	bne.n	80083f2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	695a      	ldr	r2, [r3, #20]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f002 0202 	and.w	r2, r2, #2
 80083f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4618      	mov	r0, r3
 80083f8:	f00b fb4e 	bl	8013a98 <USB_ReadInterrupts>
 80083fc:	4603      	mov	r3, r0
 80083fe:	f003 0310 	and.w	r3, r3, #16
 8008402:	2b10      	cmp	r3, #16
 8008404:	d161      	bne.n	80084ca <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	699a      	ldr	r2, [r3, #24]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f022 0210 	bic.w	r2, r2, #16
 8008414:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008416:	6a3b      	ldr	r3, [r7, #32]
 8008418:	6a1b      	ldr	r3, [r3, #32]
 800841a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	f003 020f 	and.w	r2, r3, #15
 8008422:	4613      	mov	r3, r2
 8008424:	00db      	lsls	r3, r3, #3
 8008426:	4413      	add	r3, r2
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	4413      	add	r3, r2
 8008432:	3304      	adds	r3, #4
 8008434:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	0c5b      	lsrs	r3, r3, #17
 800843a:	f003 030f 	and.w	r3, r3, #15
 800843e:	2b02      	cmp	r3, #2
 8008440:	d124      	bne.n	800848c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008442:	69ba      	ldr	r2, [r7, #24]
 8008444:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008448:	4013      	ands	r3, r2
 800844a:	2b00      	cmp	r3, #0
 800844c:	d035      	beq.n	80084ba <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008452:	69bb      	ldr	r3, [r7, #24]
 8008454:	091b      	lsrs	r3, r3, #4
 8008456:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008458:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800845c:	b29b      	uxth	r3, r3
 800845e:	461a      	mov	r2, r3
 8008460:	6a38      	ldr	r0, [r7, #32]
 8008462:	f00b f985 	bl	8013770 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	68da      	ldr	r2, [r3, #12]
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	091b      	lsrs	r3, r3, #4
 800846e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008472:	441a      	add	r2, r3
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	695a      	ldr	r2, [r3, #20]
 800847c:	69bb      	ldr	r3, [r7, #24]
 800847e:	091b      	lsrs	r3, r3, #4
 8008480:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008484:	441a      	add	r2, r3
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	615a      	str	r2, [r3, #20]
 800848a:	e016      	b.n	80084ba <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800848c:	69bb      	ldr	r3, [r7, #24]
 800848e:	0c5b      	lsrs	r3, r3, #17
 8008490:	f003 030f 	and.w	r3, r3, #15
 8008494:	2b06      	cmp	r3, #6
 8008496:	d110      	bne.n	80084ba <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800849e:	2208      	movs	r2, #8
 80084a0:	4619      	mov	r1, r3
 80084a2:	6a38      	ldr	r0, [r7, #32]
 80084a4:	f00b f964 	bl	8013770 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	695a      	ldr	r2, [r3, #20]
 80084ac:	69bb      	ldr	r3, [r7, #24]
 80084ae:	091b      	lsrs	r3, r3, #4
 80084b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80084b4:	441a      	add	r2, r3
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	699a      	ldr	r2, [r3, #24]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f042 0210 	orr.w	r2, r2, #16
 80084c8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4618      	mov	r0, r3
 80084d0:	f00b fae2 	bl	8013a98 <USB_ReadInterrupts>
 80084d4:	4603      	mov	r3, r0
 80084d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80084da:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80084de:	f040 80a7 	bne.w	8008630 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80084e2:	2300      	movs	r3, #0
 80084e4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4618      	mov	r0, r3
 80084ec:	f00b fae7 	bl	8013abe <USB_ReadDevAllOutEpInterrupt>
 80084f0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80084f2:	e099      	b.n	8008628 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80084f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f6:	f003 0301 	and.w	r3, r3, #1
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	f000 808e 	beq.w	800861c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008506:	b2d2      	uxtb	r2, r2
 8008508:	4611      	mov	r1, r2
 800850a:	4618      	mov	r0, r3
 800850c:	f00b fb0b 	bl	8013b26 <USB_ReadDevOutEPInterrupt>
 8008510:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	f003 0301 	and.w	r3, r3, #1
 8008518:	2b00      	cmp	r3, #0
 800851a:	d00c      	beq.n	8008536 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800851c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851e:	015a      	lsls	r2, r3, #5
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	4413      	add	r3, r2
 8008524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008528:	461a      	mov	r2, r3
 800852a:	2301      	movs	r3, #1
 800852c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800852e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 fed1 	bl	80092d8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	f003 0308 	and.w	r3, r3, #8
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00c      	beq.n	800855a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008542:	015a      	lsls	r2, r3, #5
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	4413      	add	r3, r2
 8008548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800854c:	461a      	mov	r2, r3
 800854e:	2308      	movs	r3, #8
 8008550:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008552:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 ffa7 	bl	80094a8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	f003 0310 	and.w	r3, r3, #16
 8008560:	2b00      	cmp	r3, #0
 8008562:	d008      	beq.n	8008576 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008566:	015a      	lsls	r2, r3, #5
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	4413      	add	r3, r2
 800856c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008570:	461a      	mov	r2, r3
 8008572:	2310      	movs	r3, #16
 8008574:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	f003 0302 	and.w	r3, r3, #2
 800857c:	2b00      	cmp	r3, #0
 800857e:	d030      	beq.n	80085e2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008580:	6a3b      	ldr	r3, [r7, #32]
 8008582:	695b      	ldr	r3, [r3, #20]
 8008584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008588:	2b80      	cmp	r3, #128	; 0x80
 800858a:	d109      	bne.n	80085a0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	69fa      	ldr	r2, [r7, #28]
 8008596:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800859a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800859e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80085a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085a2:	4613      	mov	r3, r2
 80085a4:	00db      	lsls	r3, r3, #3
 80085a6:	4413      	add	r3, r2
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	4413      	add	r3, r2
 80085b2:	3304      	adds	r3, #4
 80085b4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	78db      	ldrb	r3, [r3, #3]
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d108      	bne.n	80085d0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	2200      	movs	r2, #0
 80085c2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80085c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	4619      	mov	r1, r3
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f00e f928 	bl	8016820 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80085d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d2:	015a      	lsls	r2, r3, #5
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	4413      	add	r3, r2
 80085d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085dc:	461a      	mov	r2, r3
 80085de:	2302      	movs	r3, #2
 80085e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	f003 0320 	and.w	r3, r3, #32
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d008      	beq.n	80085fe <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80085ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ee:	015a      	lsls	r2, r3, #5
 80085f0:	69fb      	ldr	r3, [r7, #28]
 80085f2:	4413      	add	r3, r2
 80085f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085f8:	461a      	mov	r2, r3
 80085fa:	2320      	movs	r3, #32
 80085fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008604:	2b00      	cmp	r3, #0
 8008606:	d009      	beq.n	800861c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860a:	015a      	lsls	r2, r3, #5
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	4413      	add	r3, r2
 8008610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008614:	461a      	mov	r2, r3
 8008616:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800861a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800861c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861e:	3301      	adds	r3, #1
 8008620:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008624:	085b      	lsrs	r3, r3, #1
 8008626:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862a:	2b00      	cmp	r3, #0
 800862c:	f47f af62 	bne.w	80084f4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4618      	mov	r0, r3
 8008636:	f00b fa2f 	bl	8013a98 <USB_ReadInterrupts>
 800863a:	4603      	mov	r3, r0
 800863c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008640:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008644:	f040 80db 	bne.w	80087fe <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4618      	mov	r0, r3
 800864e:	f00b fa50 	bl	8013af2 <USB_ReadDevAllInEpInterrupt>
 8008652:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008654:	2300      	movs	r3, #0
 8008656:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008658:	e0cd      	b.n	80087f6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800865a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865c:	f003 0301 	and.w	r3, r3, #1
 8008660:	2b00      	cmp	r3, #0
 8008662:	f000 80c2 	beq.w	80087ea <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800866c:	b2d2      	uxtb	r2, r2
 800866e:	4611      	mov	r1, r2
 8008670:	4618      	mov	r0, r3
 8008672:	f00b fa76 	bl	8013b62 <USB_ReadDevInEPInterrupt>
 8008676:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	f003 0301 	and.w	r3, r3, #1
 800867e:	2b00      	cmp	r3, #0
 8008680:	d057      	beq.n	8008732 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008684:	f003 030f 	and.w	r3, r3, #15
 8008688:	2201      	movs	r2, #1
 800868a:	fa02 f303 	lsl.w	r3, r2, r3
 800868e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008690:	69fb      	ldr	r3, [r7, #28]
 8008692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008696:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	43db      	mvns	r3, r3
 800869c:	69f9      	ldr	r1, [r7, #28]
 800869e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086a2:	4013      	ands	r3, r2
 80086a4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80086a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a8:	015a      	lsls	r2, r3, #5
 80086aa:	69fb      	ldr	r3, [r7, #28]
 80086ac:	4413      	add	r3, r2
 80086ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086b2:	461a      	mov	r2, r3
 80086b4:	2301      	movs	r3, #1
 80086b6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d132      	bne.n	8008726 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80086c0:	6879      	ldr	r1, [r7, #4]
 80086c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086c4:	4613      	mov	r3, r2
 80086c6:	00db      	lsls	r3, r3, #3
 80086c8:	4413      	add	r3, r2
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	440b      	add	r3, r1
 80086ce:	3348      	adds	r3, #72	; 0x48
 80086d0:	6819      	ldr	r1, [r3, #0]
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086d6:	4613      	mov	r3, r2
 80086d8:	00db      	lsls	r3, r3, #3
 80086da:	4413      	add	r3, r2
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	4403      	add	r3, r0
 80086e0:	3344      	adds	r3, #68	; 0x44
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4419      	add	r1, r3
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086ea:	4613      	mov	r3, r2
 80086ec:	00db      	lsls	r3, r3, #3
 80086ee:	4413      	add	r3, r2
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	4403      	add	r3, r0
 80086f4:	3348      	adds	r3, #72	; 0x48
 80086f6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80086f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d113      	bne.n	8008726 <HAL_PCD_IRQHandler+0x3a2>
 80086fe:	6879      	ldr	r1, [r7, #4]
 8008700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008702:	4613      	mov	r3, r2
 8008704:	00db      	lsls	r3, r3, #3
 8008706:	4413      	add	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	440b      	add	r3, r1
 800870c:	334c      	adds	r3, #76	; 0x4c
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d108      	bne.n	8008726 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6818      	ldr	r0, [r3, #0]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800871e:	461a      	mov	r2, r3
 8008720:	2101      	movs	r1, #1
 8008722:	f00b fa7f 	bl	8013c24 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008728:	b2db      	uxtb	r3, r3
 800872a:	4619      	mov	r1, r3
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f00d fff2 	bl	8016716 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	f003 0308 	and.w	r3, r3, #8
 8008738:	2b00      	cmp	r3, #0
 800873a:	d008      	beq.n	800874e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800873c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873e:	015a      	lsls	r2, r3, #5
 8008740:	69fb      	ldr	r3, [r7, #28]
 8008742:	4413      	add	r3, r2
 8008744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008748:	461a      	mov	r2, r3
 800874a:	2308      	movs	r3, #8
 800874c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	f003 0310 	and.w	r3, r3, #16
 8008754:	2b00      	cmp	r3, #0
 8008756:	d008      	beq.n	800876a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875a:	015a      	lsls	r2, r3, #5
 800875c:	69fb      	ldr	r3, [r7, #28]
 800875e:	4413      	add	r3, r2
 8008760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008764:	461a      	mov	r2, r3
 8008766:	2310      	movs	r3, #16
 8008768:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008770:	2b00      	cmp	r3, #0
 8008772:	d008      	beq.n	8008786 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008776:	015a      	lsls	r2, r3, #5
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	4413      	add	r3, r2
 800877c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008780:	461a      	mov	r2, r3
 8008782:	2340      	movs	r3, #64	; 0x40
 8008784:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	f003 0302 	and.w	r3, r3, #2
 800878c:	2b00      	cmp	r3, #0
 800878e:	d023      	beq.n	80087d8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008790:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008792:	6a38      	ldr	r0, [r7, #32]
 8008794:	f00a fa5e 	bl	8012c54 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800879a:	4613      	mov	r3, r2
 800879c:	00db      	lsls	r3, r3, #3
 800879e:	4413      	add	r3, r2
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	3338      	adds	r3, #56	; 0x38
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	4413      	add	r3, r2
 80087a8:	3304      	adds	r3, #4
 80087aa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	78db      	ldrb	r3, [r3, #3]
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d108      	bne.n	80087c6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	2200      	movs	r2, #0
 80087b8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80087ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	4619      	mov	r1, r3
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f00e f83f 	bl	8016844 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80087c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c8:	015a      	lsls	r2, r3, #5
 80087ca:	69fb      	ldr	r3, [r7, #28]
 80087cc:	4413      	add	r3, r2
 80087ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087d2:	461a      	mov	r2, r3
 80087d4:	2302      	movs	r3, #2
 80087d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d003      	beq.n	80087ea <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80087e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 fcea 	bl	80091be <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80087ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ec:	3301      	adds	r3, #1
 80087ee:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80087f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f2:	085b      	lsrs	r3, r3, #1
 80087f4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80087f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	f47f af2e 	bne.w	800865a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4618      	mov	r0, r3
 8008804:	f00b f948 	bl	8013a98 <USB_ReadInterrupts>
 8008808:	4603      	mov	r3, r0
 800880a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800880e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008812:	d122      	bne.n	800885a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008814:	69fb      	ldr	r3, [r7, #28]
 8008816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	69fa      	ldr	r2, [r7, #28]
 800881e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008822:	f023 0301 	bic.w	r3, r3, #1
 8008826:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800882e:	2b01      	cmp	r3, #1
 8008830:	d108      	bne.n	8008844 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800883a:	2100      	movs	r1, #0
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 fef5 	bl	800962c <HAL_PCDEx_LPM_Callback>
 8008842:	e002      	b.n	800884a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f00d ffdd 	bl	8016804 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	695a      	ldr	r2, [r3, #20]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008858:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4618      	mov	r0, r3
 8008860:	f00b f91a 	bl	8013a98 <USB_ReadInterrupts>
 8008864:	4603      	mov	r3, r0
 8008866:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800886a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800886e:	d112      	bne.n	8008896 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008876:	689b      	ldr	r3, [r3, #8]
 8008878:	f003 0301 	and.w	r3, r3, #1
 800887c:	2b01      	cmp	r3, #1
 800887e:	d102      	bne.n	8008886 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f00d ff99 	bl	80167b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	695a      	ldr	r2, [r3, #20]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008894:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4618      	mov	r0, r3
 800889c:	f00b f8fc 	bl	8013a98 <USB_ReadInterrupts>
 80088a0:	4603      	mov	r3, r0
 80088a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088aa:	d121      	bne.n	80088f0 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	695a      	ldr	r2, [r3, #20]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80088ba:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d111      	bne.n	80088ea <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2201      	movs	r2, #1
 80088ca:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088d4:	089b      	lsrs	r3, r3, #2
 80088d6:	f003 020f 	and.w	r2, r3, #15
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80088e0:	2101      	movs	r1, #1
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 fea2 	bl	800962c <HAL_PCDEx_LPM_Callback>
 80088e8:	e002      	b.n	80088f0 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f00d ff64 	bl	80167b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4618      	mov	r0, r3
 80088f6:	f00b f8cf 	bl	8013a98 <USB_ReadInterrupts>
 80088fa:	4603      	mov	r3, r0
 80088fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008904:	f040 80b7 	bne.w	8008a76 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008908:	69fb      	ldr	r3, [r7, #28]
 800890a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	69fa      	ldr	r2, [r7, #28]
 8008912:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008916:	f023 0301 	bic.w	r3, r3, #1
 800891a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	2110      	movs	r1, #16
 8008922:	4618      	mov	r0, r3
 8008924:	f00a f996 	bl	8012c54 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008928:	2300      	movs	r3, #0
 800892a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800892c:	e046      	b.n	80089bc <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800892e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008930:	015a      	lsls	r2, r3, #5
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	4413      	add	r3, r2
 8008936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800893a:	461a      	mov	r2, r3
 800893c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008940:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008944:	015a      	lsls	r2, r3, #5
 8008946:	69fb      	ldr	r3, [r7, #28]
 8008948:	4413      	add	r3, r2
 800894a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008952:	0151      	lsls	r1, r2, #5
 8008954:	69fa      	ldr	r2, [r7, #28]
 8008956:	440a      	add	r2, r1
 8008958:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800895c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008960:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008964:	015a      	lsls	r2, r3, #5
 8008966:	69fb      	ldr	r3, [r7, #28]
 8008968:	4413      	add	r3, r2
 800896a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800896e:	461a      	mov	r2, r3
 8008970:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008974:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008978:	015a      	lsls	r2, r3, #5
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	4413      	add	r3, r2
 800897e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008986:	0151      	lsls	r1, r2, #5
 8008988:	69fa      	ldr	r2, [r7, #28]
 800898a:	440a      	add	r2, r1
 800898c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008990:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008994:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008998:	015a      	lsls	r2, r3, #5
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	4413      	add	r3, r2
 800899e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089a6:	0151      	lsls	r1, r2, #5
 80089a8:	69fa      	ldr	r2, [r7, #28]
 80089aa:	440a      	add	r2, r1
 80089ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80089b4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80089b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b8:	3301      	adds	r3, #1
 80089ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d3b3      	bcc.n	800892e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80089c6:	69fb      	ldr	r3, [r7, #28]
 80089c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089cc:	69db      	ldr	r3, [r3, #28]
 80089ce:	69fa      	ldr	r2, [r7, #28]
 80089d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089d4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80089d8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d016      	beq.n	8008a10 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089ec:	69fa      	ldr	r2, [r7, #28]
 80089ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089f2:	f043 030b 	orr.w	r3, r3, #11
 80089f6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80089fa:	69fb      	ldr	r3, [r7, #28]
 80089fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a02:	69fa      	ldr	r2, [r7, #28]
 8008a04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a08:	f043 030b 	orr.w	r3, r3, #11
 8008a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8008a0e:	e015      	b.n	8008a3c <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008a10:	69fb      	ldr	r3, [r7, #28]
 8008a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a16:	695a      	ldr	r2, [r3, #20]
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a1e:	4619      	mov	r1, r3
 8008a20:	f242 032b 	movw	r3, #8235	; 0x202b
 8008a24:	4313      	orrs	r3, r2
 8008a26:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	69fa      	ldr	r2, [r7, #28]
 8008a32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a36:	f043 030b 	orr.w	r3, r3, #11
 8008a3a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	69fa      	ldr	r2, [r7, #28]
 8008a46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a4a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008a4e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6818      	ldr	r0, [r3, #0]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008a60:	461a      	mov	r2, r3
 8008a62:	f00b f8df 	bl	8013c24 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	695a      	ldr	r2, [r3, #20]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008a74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f00b f80c 	bl	8013a98 <USB_ReadInterrupts>
 8008a80:	4603      	mov	r3, r0
 8008a82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a8a:	d124      	bne.n	8008ad6 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4618      	mov	r0, r3
 8008a92:	f00b f8a3 	bl	8013bdc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f00a f957 	bl	8012d4e <USB_GetDevSpeed>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681c      	ldr	r4, [r3, #0]
 8008aac:	f001 fd88 	bl	800a5c0 <HAL_RCC_GetHCLKFreq>
 8008ab0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	461a      	mov	r2, r3
 8008aba:	4620      	mov	r0, r4
 8008abc:	f009 fe5c 	bl	8012778 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f00d fe50 	bl	8016766 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	695a      	ldr	r2, [r3, #20]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008ad4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4618      	mov	r0, r3
 8008adc:	f00a ffdc 	bl	8013a98 <USB_ReadInterrupts>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	f003 0308 	and.w	r3, r3, #8
 8008ae6:	2b08      	cmp	r3, #8
 8008ae8:	d10a      	bne.n	8008b00 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f00d fe2d 	bl	801674a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	695a      	ldr	r2, [r3, #20]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f002 0208 	and.w	r2, r2, #8
 8008afe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4618      	mov	r0, r3
 8008b06:	f00a ffc7 	bl	8013a98 <USB_ReadInterrupts>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b10:	2b80      	cmp	r3, #128	; 0x80
 8008b12:	d122      	bne.n	8008b5a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008b14:	6a3b      	ldr	r3, [r7, #32]
 8008b16:	699b      	ldr	r3, [r3, #24]
 8008b18:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008b1c:	6a3b      	ldr	r3, [r7, #32]
 8008b1e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008b20:	2301      	movs	r3, #1
 8008b22:	627b      	str	r3, [r7, #36]	; 0x24
 8008b24:	e014      	b.n	8008b50 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008b26:	6879      	ldr	r1, [r7, #4]
 8008b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b2a:	4613      	mov	r3, r2
 8008b2c:	00db      	lsls	r3, r3, #3
 8008b2e:	4413      	add	r3, r2
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	440b      	add	r3, r1
 8008b34:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d105      	bne.n	8008b4a <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	4619      	mov	r1, r3
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 fb09 	bl	800915c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d3e5      	bcc.n	8008b26 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f00a ff9a 	bl	8013a98 <USB_ReadInterrupts>
 8008b64:	4603      	mov	r3, r0
 8008b66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b6e:	d13b      	bne.n	8008be8 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008b70:	2301      	movs	r3, #1
 8008b72:	627b      	str	r3, [r7, #36]	; 0x24
 8008b74:	e02b      	b.n	8008bce <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b78:	015a      	lsls	r2, r3, #5
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008b86:	6879      	ldr	r1, [r7, #4]
 8008b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b8a:	4613      	mov	r3, r2
 8008b8c:	00db      	lsls	r3, r3, #3
 8008b8e:	4413      	add	r3, r2
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	440b      	add	r3, r1
 8008b94:	3340      	adds	r3, #64	; 0x40
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d115      	bne.n	8008bc8 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008b9c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	da12      	bge.n	8008bc8 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008ba2:	6879      	ldr	r1, [r7, #4]
 8008ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ba6:	4613      	mov	r3, r2
 8008ba8:	00db      	lsls	r3, r3, #3
 8008baa:	4413      	add	r3, r2
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	440b      	add	r3, r1
 8008bb0:	333f      	adds	r3, #63	; 0x3f
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 faca 	bl	800915c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bca:	3301      	adds	r3, #1
 8008bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d3ce      	bcc.n	8008b76 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	695a      	ldr	r2, [r3, #20]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008be6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4618      	mov	r0, r3
 8008bee:	f00a ff53 	bl	8013a98 <USB_ReadInterrupts>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008bf8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bfc:	d155      	bne.n	8008caa <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008bfe:	2301      	movs	r3, #1
 8008c00:	627b      	str	r3, [r7, #36]	; 0x24
 8008c02:	e045      	b.n	8008c90 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c06:	015a      	lsls	r2, r3, #5
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	4413      	add	r3, r2
 8008c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008c14:	6879      	ldr	r1, [r7, #4]
 8008c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c18:	4613      	mov	r3, r2
 8008c1a:	00db      	lsls	r3, r3, #3
 8008c1c:	4413      	add	r3, r2
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	440b      	add	r3, r1
 8008c22:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d12e      	bne.n	8008c8a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008c2c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	da2b      	bge.n	8008c8a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008c32:	69bb      	ldr	r3, [r7, #24]
 8008c34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8008c3e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d121      	bne.n	8008c8a <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008c46:	6879      	ldr	r1, [r7, #4]
 8008c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c4a:	4613      	mov	r3, r2
 8008c4c:	00db      	lsls	r3, r3, #3
 8008c4e:	4413      	add	r3, r2
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	440b      	add	r3, r1
 8008c54:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008c58:	2201      	movs	r2, #1
 8008c5a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008c5c:	6a3b      	ldr	r3, [r7, #32]
 8008c5e:	699b      	ldr	r3, [r3, #24]
 8008c60:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008c64:	6a3b      	ldr	r3, [r7, #32]
 8008c66:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008c68:	6a3b      	ldr	r3, [r7, #32]
 8008c6a:	695b      	ldr	r3, [r3, #20]
 8008c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d10a      	bne.n	8008c8a <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008c74:	69fb      	ldr	r3, [r7, #28]
 8008c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	69fa      	ldr	r2, [r7, #28]
 8008c7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008c86:	6053      	str	r3, [r2, #4]
            break;
 8008c88:	e007      	b.n	8008c9a <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d3b4      	bcc.n	8008c04 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	695a      	ldr	r2, [r3, #20]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008ca8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f00a fef2 	bl	8013a98 <USB_ReadInterrupts>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cbe:	d10a      	bne.n	8008cd6 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f00d fdd1 	bl	8016868 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	695a      	ldr	r2, [r3, #20]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008cd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f00a fedc 	bl	8013a98 <USB_ReadInterrupts>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	f003 0304 	and.w	r3, r3, #4
 8008ce6:	2b04      	cmp	r3, #4
 8008ce8:	d115      	bne.n	8008d16 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008cf2:	69bb      	ldr	r3, [r7, #24]
 8008cf4:	f003 0304 	and.w	r3, r3, #4
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d002      	beq.n	8008d02 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f00d fdc1 	bl	8016884 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	6859      	ldr	r1, [r3, #4]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	69ba      	ldr	r2, [r7, #24]
 8008d0e:	430a      	orrs	r2, r1
 8008d10:	605a      	str	r2, [r3, #4]
 8008d12:	e000      	b.n	8008d16 <HAL_PCD_IRQHandler+0x992>
      return;
 8008d14:	bf00      	nop
    }
  }
}
 8008d16:	3734      	adds	r7, #52	; 0x34
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd90      	pop	{r4, r7, pc}

08008d1c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	460b      	mov	r3, r1
 8008d26:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d101      	bne.n	8008d36 <HAL_PCD_SetAddress+0x1a>
 8008d32:	2302      	movs	r3, #2
 8008d34:	e013      	b.n	8008d5e <HAL_PCD_SetAddress+0x42>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	78fa      	ldrb	r2, [r7, #3]
 8008d42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	78fa      	ldrb	r2, [r7, #3]
 8008d4c:	4611      	mov	r1, r2
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f00a fe3a 	bl	80139c8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2200      	movs	r2, #0
 8008d58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008d5c:	2300      	movs	r3, #0
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3708      	adds	r7, #8
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}

08008d66 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b084      	sub	sp, #16
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
 8008d6e:	4608      	mov	r0, r1
 8008d70:	4611      	mov	r1, r2
 8008d72:	461a      	mov	r2, r3
 8008d74:	4603      	mov	r3, r0
 8008d76:	70fb      	strb	r3, [r7, #3]
 8008d78:	460b      	mov	r3, r1
 8008d7a:	803b      	strh	r3, [r7, #0]
 8008d7c:	4613      	mov	r3, r2
 8008d7e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008d80:	2300      	movs	r3, #0
 8008d82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008d84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	da0f      	bge.n	8008dac <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d8c:	78fb      	ldrb	r3, [r7, #3]
 8008d8e:	f003 020f 	and.w	r2, r3, #15
 8008d92:	4613      	mov	r3, r2
 8008d94:	00db      	lsls	r3, r3, #3
 8008d96:	4413      	add	r3, r2
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	3338      	adds	r3, #56	; 0x38
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	4413      	add	r3, r2
 8008da0:	3304      	adds	r3, #4
 8008da2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2201      	movs	r2, #1
 8008da8:	705a      	strb	r2, [r3, #1]
 8008daa:	e00f      	b.n	8008dcc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008dac:	78fb      	ldrb	r3, [r7, #3]
 8008dae:	f003 020f 	and.w	r2, r3, #15
 8008db2:	4613      	mov	r3, r2
 8008db4:	00db      	lsls	r3, r3, #3
 8008db6:	4413      	add	r3, r2
 8008db8:	009b      	lsls	r3, r3, #2
 8008dba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	4413      	add	r3, r2
 8008dc2:	3304      	adds	r3, #4
 8008dc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008dcc:	78fb      	ldrb	r3, [r7, #3]
 8008dce:	f003 030f 	and.w	r3, r3, #15
 8008dd2:	b2da      	uxtb	r2, r3
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008dd8:	883a      	ldrh	r2, [r7, #0]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	78ba      	ldrb	r2, [r7, #2]
 8008de2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	785b      	ldrb	r3, [r3, #1]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d004      	beq.n	8008df6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	b29a      	uxth	r2, r3
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008df6:	78bb      	ldrb	r3, [r7, #2]
 8008df8:	2b02      	cmp	r3, #2
 8008dfa:	d102      	bne.n	8008e02 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d101      	bne.n	8008e10 <HAL_PCD_EP_Open+0xaa>
 8008e0c:	2302      	movs	r3, #2
 8008e0e:	e00e      	b.n	8008e2e <HAL_PCD_EP_Open+0xc8>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2201      	movs	r2, #1
 8008e14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	68f9      	ldr	r1, [r7, #12]
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f009 ffba 	bl	8012d98 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8008e2c:	7afb      	ldrb	r3, [r7, #11]
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3710      	adds	r7, #16
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b084      	sub	sp, #16
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
 8008e3e:	460b      	mov	r3, r1
 8008e40:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008e42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	da0f      	bge.n	8008e6a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008e4a:	78fb      	ldrb	r3, [r7, #3]
 8008e4c:	f003 020f 	and.w	r2, r3, #15
 8008e50:	4613      	mov	r3, r2
 8008e52:	00db      	lsls	r3, r3, #3
 8008e54:	4413      	add	r3, r2
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	3338      	adds	r3, #56	; 0x38
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	3304      	adds	r3, #4
 8008e60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2201      	movs	r2, #1
 8008e66:	705a      	strb	r2, [r3, #1]
 8008e68:	e00f      	b.n	8008e8a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008e6a:	78fb      	ldrb	r3, [r7, #3]
 8008e6c:	f003 020f 	and.w	r2, r3, #15
 8008e70:	4613      	mov	r3, r2
 8008e72:	00db      	lsls	r3, r3, #3
 8008e74:	4413      	add	r3, r2
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	4413      	add	r3, r2
 8008e80:	3304      	adds	r3, #4
 8008e82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2200      	movs	r2, #0
 8008e88:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008e8a:	78fb      	ldrb	r3, [r7, #3]
 8008e8c:	f003 030f 	and.w	r3, r3, #15
 8008e90:	b2da      	uxtb	r2, r3
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d101      	bne.n	8008ea4 <HAL_PCD_EP_Close+0x6e>
 8008ea0:	2302      	movs	r3, #2
 8008ea2:	e00e      	b.n	8008ec2 <HAL_PCD_EP_Close+0x8c>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	68f9      	ldr	r1, [r7, #12]
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f009 fff8 	bl	8012ea8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8008ec0:	2300      	movs	r3, #0
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3710      	adds	r7, #16
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}

08008eca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008eca:	b580      	push	{r7, lr}
 8008ecc:	b086      	sub	sp, #24
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	60f8      	str	r0, [r7, #12]
 8008ed2:	607a      	str	r2, [r7, #4]
 8008ed4:	603b      	str	r3, [r7, #0]
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008eda:	7afb      	ldrb	r3, [r7, #11]
 8008edc:	f003 020f 	and.w	r2, r3, #15
 8008ee0:	4613      	mov	r3, r2
 8008ee2:	00db      	lsls	r3, r3, #3
 8008ee4:	4413      	add	r3, r2
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008eec:	68fa      	ldr	r2, [r7, #12]
 8008eee:	4413      	add	r3, r2
 8008ef0:	3304      	adds	r3, #4
 8008ef2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	683a      	ldr	r2, [r7, #0]
 8008efe:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	2200      	movs	r2, #0
 8008f04:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008f0c:	7afb      	ldrb	r3, [r7, #11]
 8008f0e:	f003 030f 	and.w	r3, r3, #15
 8008f12:	b2da      	uxtb	r2, r3
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d102      	bne.n	8008f26 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6818      	ldr	r0, [r3, #0]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	68db      	ldr	r3, [r3, #12]
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	461a      	mov	r2, r3
 8008f32:	6979      	ldr	r1, [r7, #20]
 8008f34:	f00a f894 	bl	8013060 <USB_EPStartXfer>

  return HAL_OK;
 8008f38:	2300      	movs	r3, #0
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3718      	adds	r7, #24
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008f42:	b480      	push	{r7}
 8008f44:	b083      	sub	sp, #12
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008f4e:	78fb      	ldrb	r3, [r7, #3]
 8008f50:	f003 020f 	and.w	r2, r3, #15
 8008f54:	6879      	ldr	r1, [r7, #4]
 8008f56:	4613      	mov	r3, r2
 8008f58:	00db      	lsls	r3, r3, #3
 8008f5a:	4413      	add	r3, r2
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	440b      	add	r3, r1
 8008f60:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8008f64:	681b      	ldr	r3, [r3, #0]
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	370c      	adds	r7, #12
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr

08008f72 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008f72:	b580      	push	{r7, lr}
 8008f74:	b086      	sub	sp, #24
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	60f8      	str	r0, [r7, #12]
 8008f7a:	607a      	str	r2, [r7, #4]
 8008f7c:	603b      	str	r3, [r7, #0]
 8008f7e:	460b      	mov	r3, r1
 8008f80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f82:	7afb      	ldrb	r3, [r7, #11]
 8008f84:	f003 020f 	and.w	r2, r3, #15
 8008f88:	4613      	mov	r3, r2
 8008f8a:	00db      	lsls	r3, r3, #3
 8008f8c:	4413      	add	r3, r2
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	3338      	adds	r3, #56	; 0x38
 8008f92:	68fa      	ldr	r2, [r7, #12]
 8008f94:	4413      	add	r3, r2
 8008f96:	3304      	adds	r3, #4
 8008f98:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	683a      	ldr	r2, [r7, #0]
 8008fa4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008fb2:	7afb      	ldrb	r3, [r7, #11]
 8008fb4:	f003 030f 	and.w	r3, r3, #15
 8008fb8:	b2da      	uxtb	r2, r3
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d102      	bne.n	8008fcc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008fc6:	687a      	ldr	r2, [r7, #4]
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6818      	ldr	r0, [r3, #0]
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	6979      	ldr	r1, [r7, #20]
 8008fda:	f00a f841 	bl	8013060 <USB_EPStartXfer>

  return HAL_OK;
 8008fde:	2300      	movs	r3, #0
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3718      	adds	r7, #24
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008ff4:	78fb      	ldrb	r3, [r7, #3]
 8008ff6:	f003 020f 	and.w	r2, r3, #15
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d901      	bls.n	8009006 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009002:	2301      	movs	r3, #1
 8009004:	e050      	b.n	80090a8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009006:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800900a:	2b00      	cmp	r3, #0
 800900c:	da0f      	bge.n	800902e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800900e:	78fb      	ldrb	r3, [r7, #3]
 8009010:	f003 020f 	and.w	r2, r3, #15
 8009014:	4613      	mov	r3, r2
 8009016:	00db      	lsls	r3, r3, #3
 8009018:	4413      	add	r3, r2
 800901a:	009b      	lsls	r3, r3, #2
 800901c:	3338      	adds	r3, #56	; 0x38
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	4413      	add	r3, r2
 8009022:	3304      	adds	r3, #4
 8009024:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2201      	movs	r2, #1
 800902a:	705a      	strb	r2, [r3, #1]
 800902c:	e00d      	b.n	800904a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800902e:	78fa      	ldrb	r2, [r7, #3]
 8009030:	4613      	mov	r3, r2
 8009032:	00db      	lsls	r3, r3, #3
 8009034:	4413      	add	r3, r2
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	4413      	add	r3, r2
 8009040:	3304      	adds	r3, #4
 8009042:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2200      	movs	r2, #0
 8009048:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2201      	movs	r2, #1
 800904e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009050:	78fb      	ldrb	r3, [r7, #3]
 8009052:	f003 030f 	and.w	r3, r3, #15
 8009056:	b2da      	uxtb	r2, r3
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009062:	2b01      	cmp	r3, #1
 8009064:	d101      	bne.n	800906a <HAL_PCD_EP_SetStall+0x82>
 8009066:	2302      	movs	r3, #2
 8009068:	e01e      	b.n	80090a8 <HAL_PCD_EP_SetStall+0xc0>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2201      	movs	r2, #1
 800906e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	68f9      	ldr	r1, [r7, #12]
 8009078:	4618      	mov	r0, r3
 800907a:	f00a fbd1 	bl	8013820 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800907e:	78fb      	ldrb	r3, [r7, #3]
 8009080:	f003 030f 	and.w	r3, r3, #15
 8009084:	2b00      	cmp	r3, #0
 8009086:	d10a      	bne.n	800909e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6818      	ldr	r0, [r3, #0]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	68db      	ldr	r3, [r3, #12]
 8009090:	b2d9      	uxtb	r1, r3
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009098:	461a      	mov	r2, r3
 800909a:	f00a fdc3 	bl	8013c24 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3710      	adds	r7, #16
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	460b      	mov	r3, r1
 80090ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80090bc:	78fb      	ldrb	r3, [r7, #3]
 80090be:	f003 020f 	and.w	r2, r3, #15
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d901      	bls.n	80090ce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80090ca:	2301      	movs	r3, #1
 80090cc:	e042      	b.n	8009154 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80090ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	da0f      	bge.n	80090f6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80090d6:	78fb      	ldrb	r3, [r7, #3]
 80090d8:	f003 020f 	and.w	r2, r3, #15
 80090dc:	4613      	mov	r3, r2
 80090de:	00db      	lsls	r3, r3, #3
 80090e0:	4413      	add	r3, r2
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	3338      	adds	r3, #56	; 0x38
 80090e6:	687a      	ldr	r2, [r7, #4]
 80090e8:	4413      	add	r3, r2
 80090ea:	3304      	adds	r3, #4
 80090ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2201      	movs	r2, #1
 80090f2:	705a      	strb	r2, [r3, #1]
 80090f4:	e00f      	b.n	8009116 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80090f6:	78fb      	ldrb	r3, [r7, #3]
 80090f8:	f003 020f 	and.w	r2, r3, #15
 80090fc:	4613      	mov	r3, r2
 80090fe:	00db      	lsls	r3, r3, #3
 8009100:	4413      	add	r3, r2
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	4413      	add	r3, r2
 800910c:	3304      	adds	r3, #4
 800910e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2200      	movs	r2, #0
 8009114:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2200      	movs	r2, #0
 800911a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800911c:	78fb      	ldrb	r3, [r7, #3]
 800911e:	f003 030f 	and.w	r3, r3, #15
 8009122:	b2da      	uxtb	r2, r3
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800912e:	2b01      	cmp	r3, #1
 8009130:	d101      	bne.n	8009136 <HAL_PCD_EP_ClrStall+0x86>
 8009132:	2302      	movs	r3, #2
 8009134:	e00e      	b.n	8009154 <HAL_PCD_EP_ClrStall+0xa4>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2201      	movs	r2, #1
 800913a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	68f9      	ldr	r1, [r7, #12]
 8009144:	4618      	mov	r0, r3
 8009146:	f00a fbd9 	bl	80138fc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2200      	movs	r2, #0
 800914e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009152:	2300      	movs	r3, #0
}
 8009154:	4618      	mov	r0, r3
 8009156:	3710      	adds	r7, #16
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	460b      	mov	r3, r1
 8009166:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009168:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800916c:	2b00      	cmp	r3, #0
 800916e:	da0c      	bge.n	800918a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009170:	78fb      	ldrb	r3, [r7, #3]
 8009172:	f003 020f 	and.w	r2, r3, #15
 8009176:	4613      	mov	r3, r2
 8009178:	00db      	lsls	r3, r3, #3
 800917a:	4413      	add	r3, r2
 800917c:	009b      	lsls	r3, r3, #2
 800917e:	3338      	adds	r3, #56	; 0x38
 8009180:	687a      	ldr	r2, [r7, #4]
 8009182:	4413      	add	r3, r2
 8009184:	3304      	adds	r3, #4
 8009186:	60fb      	str	r3, [r7, #12]
 8009188:	e00c      	b.n	80091a4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800918a:	78fb      	ldrb	r3, [r7, #3]
 800918c:	f003 020f 	and.w	r2, r3, #15
 8009190:	4613      	mov	r3, r2
 8009192:	00db      	lsls	r3, r3, #3
 8009194:	4413      	add	r3, r2
 8009196:	009b      	lsls	r3, r3, #2
 8009198:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	4413      	add	r3, r2
 80091a0:	3304      	adds	r3, #4
 80091a2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	68f9      	ldr	r1, [r7, #12]
 80091aa:	4618      	mov	r0, r3
 80091ac:	f00a f9f8 	bl	80135a0 <USB_EPStopXfer>
 80091b0:	4603      	mov	r3, r0
 80091b2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80091b4:	7afb      	ldrb	r3, [r7, #11]
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3710      	adds	r7, #16
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}

080091be <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80091be:	b580      	push	{r7, lr}
 80091c0:	b08a      	sub	sp, #40	; 0x28
 80091c2:	af02      	add	r7, sp, #8
 80091c4:	6078      	str	r0, [r7, #4]
 80091c6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80091d2:	683a      	ldr	r2, [r7, #0]
 80091d4:	4613      	mov	r3, r2
 80091d6:	00db      	lsls	r3, r3, #3
 80091d8:	4413      	add	r3, r2
 80091da:	009b      	lsls	r3, r3, #2
 80091dc:	3338      	adds	r3, #56	; 0x38
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	4413      	add	r3, r2
 80091e2:	3304      	adds	r3, #4
 80091e4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	695a      	ldr	r2, [r3, #20]
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	691b      	ldr	r3, [r3, #16]
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d901      	bls.n	80091f6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80091f2:	2301      	movs	r3, #1
 80091f4:	e06c      	b.n	80092d0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	691a      	ldr	r2, [r3, #16]
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	695b      	ldr	r3, [r3, #20]
 80091fe:	1ad3      	subs	r3, r2, r3
 8009200:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	69fa      	ldr	r2, [r7, #28]
 8009208:	429a      	cmp	r2, r3
 800920a:	d902      	bls.n	8009212 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009212:	69fb      	ldr	r3, [r7, #28]
 8009214:	3303      	adds	r3, #3
 8009216:	089b      	lsrs	r3, r3, #2
 8009218:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800921a:	e02b      	b.n	8009274 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	691a      	ldr	r2, [r3, #16]
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	695b      	ldr	r3, [r3, #20]
 8009224:	1ad3      	subs	r3, r2, r3
 8009226:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	689b      	ldr	r3, [r3, #8]
 800922c:	69fa      	ldr	r2, [r7, #28]
 800922e:	429a      	cmp	r2, r3
 8009230:	d902      	bls.n	8009238 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	3303      	adds	r3, #3
 800923c:	089b      	lsrs	r3, r3, #2
 800923e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	68d9      	ldr	r1, [r3, #12]
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	b2da      	uxtb	r2, r3
 8009248:	69fb      	ldr	r3, [r7, #28]
 800924a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009250:	b2db      	uxtb	r3, r3
 8009252:	9300      	str	r3, [sp, #0]
 8009254:	4603      	mov	r3, r0
 8009256:	6978      	ldr	r0, [r7, #20]
 8009258:	f00a fa4c 	bl	80136f4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	68da      	ldr	r2, [r3, #12]
 8009260:	69fb      	ldr	r3, [r7, #28]
 8009262:	441a      	add	r2, r3
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	695a      	ldr	r2, [r3, #20]
 800926c:	69fb      	ldr	r3, [r7, #28]
 800926e:	441a      	add	r2, r3
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	015a      	lsls	r2, r3, #5
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	4413      	add	r3, r2
 800927c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009280:	699b      	ldr	r3, [r3, #24]
 8009282:	b29b      	uxth	r3, r3
 8009284:	69ba      	ldr	r2, [r7, #24]
 8009286:	429a      	cmp	r2, r3
 8009288:	d809      	bhi.n	800929e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	695a      	ldr	r2, [r3, #20]
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009292:	429a      	cmp	r2, r3
 8009294:	d203      	bcs.n	800929e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	691b      	ldr	r3, [r3, #16]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d1be      	bne.n	800921c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	691a      	ldr	r2, [r3, #16]
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	695b      	ldr	r3, [r3, #20]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d811      	bhi.n	80092ce <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	f003 030f 	and.w	r3, r3, #15
 80092b0:	2201      	movs	r2, #1
 80092b2:	fa02 f303 	lsl.w	r3, r2, r3
 80092b6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	43db      	mvns	r3, r3
 80092c4:	6939      	ldr	r1, [r7, #16]
 80092c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092ca:	4013      	ands	r3, r2
 80092cc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80092ce:	2300      	movs	r3, #0
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3720      	adds	r7, #32
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b088      	sub	sp, #32
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	333c      	adds	r3, #60	; 0x3c
 80092f0:	3304      	adds	r3, #4
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	015a      	lsls	r2, r3, #5
 80092fa:	69bb      	ldr	r3, [r7, #24]
 80092fc:	4413      	add	r3, r2
 80092fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	2b01      	cmp	r3, #1
 800930c:	d17b      	bne.n	8009406 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	f003 0308 	and.w	r3, r3, #8
 8009314:	2b00      	cmp	r3, #0
 8009316:	d015      	beq.n	8009344 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	4a61      	ldr	r2, [pc, #388]	; (80094a0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800931c:	4293      	cmp	r3, r2
 800931e:	f240 80b9 	bls.w	8009494 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009328:	2b00      	cmp	r3, #0
 800932a:	f000 80b3 	beq.w	8009494 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	015a      	lsls	r2, r3, #5
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	4413      	add	r3, r2
 8009336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800933a:	461a      	mov	r2, r3
 800933c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009340:	6093      	str	r3, [r2, #8]
 8009342:	e0a7      	b.n	8009494 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	f003 0320 	and.w	r3, r3, #32
 800934a:	2b00      	cmp	r3, #0
 800934c:	d009      	beq.n	8009362 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	015a      	lsls	r2, r3, #5
 8009352:	69bb      	ldr	r3, [r7, #24]
 8009354:	4413      	add	r3, r2
 8009356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800935a:	461a      	mov	r2, r3
 800935c:	2320      	movs	r3, #32
 800935e:	6093      	str	r3, [r2, #8]
 8009360:	e098      	b.n	8009494 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009368:	2b00      	cmp	r3, #0
 800936a:	f040 8093 	bne.w	8009494 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	4a4b      	ldr	r2, [pc, #300]	; (80094a0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d90f      	bls.n	8009396 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800937c:	2b00      	cmp	r3, #0
 800937e:	d00a      	beq.n	8009396 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	015a      	lsls	r2, r3, #5
 8009384:	69bb      	ldr	r3, [r7, #24]
 8009386:	4413      	add	r3, r2
 8009388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800938c:	461a      	mov	r2, r3
 800938e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009392:	6093      	str	r3, [r2, #8]
 8009394:	e07e      	b.n	8009494 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8009396:	683a      	ldr	r2, [r7, #0]
 8009398:	4613      	mov	r3, r2
 800939a:	00db      	lsls	r3, r3, #3
 800939c:	4413      	add	r3, r2
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	4413      	add	r3, r2
 80093a8:	3304      	adds	r3, #4
 80093aa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	6a1a      	ldr	r2, [r3, #32]
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	0159      	lsls	r1, r3, #5
 80093b4:	69bb      	ldr	r3, [r7, #24]
 80093b6:	440b      	add	r3, r1
 80093b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093bc:	691b      	ldr	r3, [r3, #16]
 80093be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093c2:	1ad2      	subs	r2, r2, r3
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d114      	bne.n	80093f8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	691b      	ldr	r3, [r3, #16]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d109      	bne.n	80093ea <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6818      	ldr	r0, [r3, #0]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80093e0:	461a      	mov	r2, r3
 80093e2:	2101      	movs	r1, #1
 80093e4:	f00a fc1e 	bl	8013c24 <USB_EP0_OutStart>
 80093e8:	e006      	b.n	80093f8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	68da      	ldr	r2, [r3, #12]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	695b      	ldr	r3, [r3, #20]
 80093f2:	441a      	add	r2, r3
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	4619      	mov	r1, r3
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f00d f96e 	bl	80166e0 <HAL_PCD_DataOutStageCallback>
 8009404:	e046      	b.n	8009494 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	4a26      	ldr	r2, [pc, #152]	; (80094a4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d124      	bne.n	8009458 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009414:	2b00      	cmp	r3, #0
 8009416:	d00a      	beq.n	800942e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	015a      	lsls	r2, r3, #5
 800941c:	69bb      	ldr	r3, [r7, #24]
 800941e:	4413      	add	r3, r2
 8009420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009424:	461a      	mov	r2, r3
 8009426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800942a:	6093      	str	r3, [r2, #8]
 800942c:	e032      	b.n	8009494 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	f003 0320 	and.w	r3, r3, #32
 8009434:	2b00      	cmp	r3, #0
 8009436:	d008      	beq.n	800944a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	015a      	lsls	r2, r3, #5
 800943c:	69bb      	ldr	r3, [r7, #24]
 800943e:	4413      	add	r3, r2
 8009440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009444:	461a      	mov	r2, r3
 8009446:	2320      	movs	r3, #32
 8009448:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	b2db      	uxtb	r3, r3
 800944e:	4619      	mov	r1, r3
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f00d f945 	bl	80166e0 <HAL_PCD_DataOutStageCallback>
 8009456:	e01d      	b.n	8009494 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d114      	bne.n	8009488 <PCD_EP_OutXfrComplete_int+0x1b0>
 800945e:	6879      	ldr	r1, [r7, #4]
 8009460:	683a      	ldr	r2, [r7, #0]
 8009462:	4613      	mov	r3, r2
 8009464:	00db      	lsls	r3, r3, #3
 8009466:	4413      	add	r3, r2
 8009468:	009b      	lsls	r3, r3, #2
 800946a:	440b      	add	r3, r1
 800946c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d108      	bne.n	8009488 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6818      	ldr	r0, [r3, #0]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009480:	461a      	mov	r2, r3
 8009482:	2100      	movs	r1, #0
 8009484:	f00a fbce 	bl	8013c24 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	b2db      	uxtb	r3, r3
 800948c:	4619      	mov	r1, r3
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f00d f926 	bl	80166e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009494:	2300      	movs	r3, #0
}
 8009496:	4618      	mov	r0, r3
 8009498:	3720      	adds	r7, #32
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop
 80094a0:	4f54300a 	.word	0x4f54300a
 80094a4:	4f54310a 	.word	0x4f54310a

080094a8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b086      	sub	sp, #24
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	333c      	adds	r3, #60	; 0x3c
 80094c0:	3304      	adds	r3, #4
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	015a      	lsls	r2, r3, #5
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	4413      	add	r3, r2
 80094ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	4a15      	ldr	r2, [pc, #84]	; (8009530 <PCD_EP_OutSetupPacket_int+0x88>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d90e      	bls.n	80094fc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d009      	beq.n	80094fc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	015a      	lsls	r2, r3, #5
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	4413      	add	r3, r2
 80094f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094f4:	461a      	mov	r2, r3
 80094f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094fa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f00d f8dd 	bl	80166bc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	4a0a      	ldr	r2, [pc, #40]	; (8009530 <PCD_EP_OutSetupPacket_int+0x88>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d90c      	bls.n	8009524 <PCD_EP_OutSetupPacket_int+0x7c>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	68db      	ldr	r3, [r3, #12]
 800950e:	2b01      	cmp	r3, #1
 8009510:	d108      	bne.n	8009524 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6818      	ldr	r0, [r3, #0]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800951c:	461a      	mov	r2, r3
 800951e:	2101      	movs	r1, #1
 8009520:	f00a fb80 	bl	8013c24 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009524:	2300      	movs	r3, #0
}
 8009526:	4618      	mov	r0, r3
 8009528:	3718      	adds	r7, #24
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	4f54300a 	.word	0x4f54300a

08009534 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009534:	b480      	push	{r7}
 8009536:	b085      	sub	sp, #20
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	460b      	mov	r3, r1
 800953e:	70fb      	strb	r3, [r7, #3]
 8009540:	4613      	mov	r3, r2
 8009542:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800954a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800954c:	78fb      	ldrb	r3, [r7, #3]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d107      	bne.n	8009562 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009552:	883b      	ldrh	r3, [r7, #0]
 8009554:	0419      	lsls	r1, r3, #16
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	68ba      	ldr	r2, [r7, #8]
 800955c:	430a      	orrs	r2, r1
 800955e:	629a      	str	r2, [r3, #40]	; 0x28
 8009560:	e028      	b.n	80095b4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009568:	0c1b      	lsrs	r3, r3, #16
 800956a:	68ba      	ldr	r2, [r7, #8]
 800956c:	4413      	add	r3, r2
 800956e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009570:	2300      	movs	r3, #0
 8009572:	73fb      	strb	r3, [r7, #15]
 8009574:	e00d      	b.n	8009592 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681a      	ldr	r2, [r3, #0]
 800957a:	7bfb      	ldrb	r3, [r7, #15]
 800957c:	3340      	adds	r3, #64	; 0x40
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	4413      	add	r3, r2
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	0c1b      	lsrs	r3, r3, #16
 8009586:	68ba      	ldr	r2, [r7, #8]
 8009588:	4413      	add	r3, r2
 800958a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800958c:	7bfb      	ldrb	r3, [r7, #15]
 800958e:	3301      	adds	r3, #1
 8009590:	73fb      	strb	r3, [r7, #15]
 8009592:	7bfa      	ldrb	r2, [r7, #15]
 8009594:	78fb      	ldrb	r3, [r7, #3]
 8009596:	3b01      	subs	r3, #1
 8009598:	429a      	cmp	r2, r3
 800959a:	d3ec      	bcc.n	8009576 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800959c:	883b      	ldrh	r3, [r7, #0]
 800959e:	0418      	lsls	r0, r3, #16
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6819      	ldr	r1, [r3, #0]
 80095a4:	78fb      	ldrb	r3, [r7, #3]
 80095a6:	3b01      	subs	r3, #1
 80095a8:	68ba      	ldr	r2, [r7, #8]
 80095aa:	4302      	orrs	r2, r0
 80095ac:	3340      	adds	r3, #64	; 0x40
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	440b      	add	r3, r1
 80095b2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80095b4:	2300      	movs	r3, #0
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3714      	adds	r7, #20
 80095ba:	46bd      	mov	sp, r7
 80095bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c0:	4770      	bx	lr

080095c2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80095c2:	b480      	push	{r7}
 80095c4:	b083      	sub	sp, #12
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
 80095ca:	460b      	mov	r3, r1
 80095cc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	887a      	ldrh	r2, [r7, #2]
 80095d4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80095d6:	2300      	movs	r3, #0
}
 80095d8:	4618      	mov	r0, r3
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b085      	sub	sp, #20
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2201      	movs	r2, #1
 80095f6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2200      	movs	r2, #0
 80095fe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	699b      	ldr	r3, [r3, #24]
 8009606:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009612:	4b05      	ldr	r3, [pc, #20]	; (8009628 <HAL_PCDEx_ActivateLPM+0x44>)
 8009614:	4313      	orrs	r3, r2
 8009616:	68fa      	ldr	r2, [r7, #12]
 8009618:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800961a:	2300      	movs	r3, #0
}
 800961c:	4618      	mov	r0, r3
 800961e:	3714      	adds	r7, #20
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr
 8009628:	10000003 	.word	0x10000003

0800962c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800962c:	b480      	push	{r7}
 800962e:	b083      	sub	sp, #12
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	460b      	mov	r3, r1
 8009636:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009638:	bf00      	nop
 800963a:	370c      	adds	r7, #12
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b084      	sub	sp, #16
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800964c:	4b19      	ldr	r3, [pc, #100]	; (80096b4 <HAL_PWREx_ConfigSupply+0x70>)
 800964e:	68db      	ldr	r3, [r3, #12]
 8009650:	f003 0304 	and.w	r3, r3, #4
 8009654:	2b04      	cmp	r3, #4
 8009656:	d00a      	beq.n	800966e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009658:	4b16      	ldr	r3, [pc, #88]	; (80096b4 <HAL_PWREx_ConfigSupply+0x70>)
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	f003 0307 	and.w	r3, r3, #7
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	429a      	cmp	r2, r3
 8009664:	d001      	beq.n	800966a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009666:	2301      	movs	r3, #1
 8009668:	e01f      	b.n	80096aa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800966a:	2300      	movs	r3, #0
 800966c:	e01d      	b.n	80096aa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800966e:	4b11      	ldr	r3, [pc, #68]	; (80096b4 <HAL_PWREx_ConfigSupply+0x70>)
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	f023 0207 	bic.w	r2, r3, #7
 8009676:	490f      	ldr	r1, [pc, #60]	; (80096b4 <HAL_PWREx_ConfigSupply+0x70>)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	4313      	orrs	r3, r2
 800967c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800967e:	f7fa f90d 	bl	800389c <HAL_GetTick>
 8009682:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009684:	e009      	b.n	800969a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009686:	f7fa f909 	bl	800389c <HAL_GetTick>
 800968a:	4602      	mov	r2, r0
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	1ad3      	subs	r3, r2, r3
 8009690:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009694:	d901      	bls.n	800969a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009696:	2301      	movs	r3, #1
 8009698:	e007      	b.n	80096aa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800969a:	4b06      	ldr	r3, [pc, #24]	; (80096b4 <HAL_PWREx_ConfigSupply+0x70>)
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80096a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096a6:	d1ee      	bne.n	8009686 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80096a8:	2300      	movs	r3, #0
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3710      	adds	r7, #16
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	58024800 	.word	0x58024800

080096b8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80096b8:	b480      	push	{r7}
 80096ba:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80096bc:	4b05      	ldr	r3, [pc, #20]	; (80096d4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80096be:	68db      	ldr	r3, [r3, #12]
 80096c0:	4a04      	ldr	r2, [pc, #16]	; (80096d4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80096c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80096c6:	60d3      	str	r3, [r2, #12]
}
 80096c8:	bf00      	nop
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr
 80096d2:	bf00      	nop
 80096d4:	58024800 	.word	0x58024800

080096d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b08c      	sub	sp, #48	; 0x30
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d101      	bne.n	80096ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80096e6:	2301      	movs	r3, #1
 80096e8:	e3c8      	b.n	8009e7c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f003 0301 	and.w	r3, r3, #1
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	f000 8087 	beq.w	8009806 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80096f8:	4b88      	ldr	r3, [pc, #544]	; (800991c <HAL_RCC_OscConfig+0x244>)
 80096fa:	691b      	ldr	r3, [r3, #16]
 80096fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009700:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009702:	4b86      	ldr	r3, [pc, #536]	; (800991c <HAL_RCC_OscConfig+0x244>)
 8009704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009706:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800970a:	2b10      	cmp	r3, #16
 800970c:	d007      	beq.n	800971e <HAL_RCC_OscConfig+0x46>
 800970e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009710:	2b18      	cmp	r3, #24
 8009712:	d110      	bne.n	8009736 <HAL_RCC_OscConfig+0x5e>
 8009714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009716:	f003 0303 	and.w	r3, r3, #3
 800971a:	2b02      	cmp	r3, #2
 800971c:	d10b      	bne.n	8009736 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800971e:	4b7f      	ldr	r3, [pc, #508]	; (800991c <HAL_RCC_OscConfig+0x244>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009726:	2b00      	cmp	r3, #0
 8009728:	d06c      	beq.n	8009804 <HAL_RCC_OscConfig+0x12c>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d168      	bne.n	8009804 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009732:	2301      	movs	r3, #1
 8009734:	e3a2      	b.n	8009e7c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	685b      	ldr	r3, [r3, #4]
 800973a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800973e:	d106      	bne.n	800974e <HAL_RCC_OscConfig+0x76>
 8009740:	4b76      	ldr	r3, [pc, #472]	; (800991c <HAL_RCC_OscConfig+0x244>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4a75      	ldr	r2, [pc, #468]	; (800991c <HAL_RCC_OscConfig+0x244>)
 8009746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800974a:	6013      	str	r3, [r2, #0]
 800974c:	e02e      	b.n	80097ac <HAL_RCC_OscConfig+0xd4>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d10c      	bne.n	8009770 <HAL_RCC_OscConfig+0x98>
 8009756:	4b71      	ldr	r3, [pc, #452]	; (800991c <HAL_RCC_OscConfig+0x244>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4a70      	ldr	r2, [pc, #448]	; (800991c <HAL_RCC_OscConfig+0x244>)
 800975c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009760:	6013      	str	r3, [r2, #0]
 8009762:	4b6e      	ldr	r3, [pc, #440]	; (800991c <HAL_RCC_OscConfig+0x244>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a6d      	ldr	r2, [pc, #436]	; (800991c <HAL_RCC_OscConfig+0x244>)
 8009768:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800976c:	6013      	str	r3, [r2, #0]
 800976e:	e01d      	b.n	80097ac <HAL_RCC_OscConfig+0xd4>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009778:	d10c      	bne.n	8009794 <HAL_RCC_OscConfig+0xbc>
 800977a:	4b68      	ldr	r3, [pc, #416]	; (800991c <HAL_RCC_OscConfig+0x244>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4a67      	ldr	r2, [pc, #412]	; (800991c <HAL_RCC_OscConfig+0x244>)
 8009780:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009784:	6013      	str	r3, [r2, #0]
 8009786:	4b65      	ldr	r3, [pc, #404]	; (800991c <HAL_RCC_OscConfig+0x244>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a64      	ldr	r2, [pc, #400]	; (800991c <HAL_RCC_OscConfig+0x244>)
 800978c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009790:	6013      	str	r3, [r2, #0]
 8009792:	e00b      	b.n	80097ac <HAL_RCC_OscConfig+0xd4>
 8009794:	4b61      	ldr	r3, [pc, #388]	; (800991c <HAL_RCC_OscConfig+0x244>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a60      	ldr	r2, [pc, #384]	; (800991c <HAL_RCC_OscConfig+0x244>)
 800979a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800979e:	6013      	str	r3, [r2, #0]
 80097a0:	4b5e      	ldr	r3, [pc, #376]	; (800991c <HAL_RCC_OscConfig+0x244>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a5d      	ldr	r2, [pc, #372]	; (800991c <HAL_RCC_OscConfig+0x244>)
 80097a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80097aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d013      	beq.n	80097dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097b4:	f7fa f872 	bl	800389c <HAL_GetTick>
 80097b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80097ba:	e008      	b.n	80097ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80097bc:	f7fa f86e 	bl	800389c <HAL_GetTick>
 80097c0:	4602      	mov	r2, r0
 80097c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c4:	1ad3      	subs	r3, r2, r3
 80097c6:	2b64      	cmp	r3, #100	; 0x64
 80097c8:	d901      	bls.n	80097ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80097ca:	2303      	movs	r3, #3
 80097cc:	e356      	b.n	8009e7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80097ce:	4b53      	ldr	r3, [pc, #332]	; (800991c <HAL_RCC_OscConfig+0x244>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d0f0      	beq.n	80097bc <HAL_RCC_OscConfig+0xe4>
 80097da:	e014      	b.n	8009806 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097dc:	f7fa f85e 	bl	800389c <HAL_GetTick>
 80097e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80097e2:	e008      	b.n	80097f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80097e4:	f7fa f85a 	bl	800389c <HAL_GetTick>
 80097e8:	4602      	mov	r2, r0
 80097ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ec:	1ad3      	subs	r3, r2, r3
 80097ee:	2b64      	cmp	r3, #100	; 0x64
 80097f0:	d901      	bls.n	80097f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80097f2:	2303      	movs	r3, #3
 80097f4:	e342      	b.n	8009e7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80097f6:	4b49      	ldr	r3, [pc, #292]	; (800991c <HAL_RCC_OscConfig+0x244>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d1f0      	bne.n	80097e4 <HAL_RCC_OscConfig+0x10c>
 8009802:	e000      	b.n	8009806 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009804:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f003 0302 	and.w	r3, r3, #2
 800980e:	2b00      	cmp	r3, #0
 8009810:	f000 808c 	beq.w	800992c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009814:	4b41      	ldr	r3, [pc, #260]	; (800991c <HAL_RCC_OscConfig+0x244>)
 8009816:	691b      	ldr	r3, [r3, #16]
 8009818:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800981c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800981e:	4b3f      	ldr	r3, [pc, #252]	; (800991c <HAL_RCC_OscConfig+0x244>)
 8009820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009822:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009824:	6a3b      	ldr	r3, [r7, #32]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d007      	beq.n	800983a <HAL_RCC_OscConfig+0x162>
 800982a:	6a3b      	ldr	r3, [r7, #32]
 800982c:	2b18      	cmp	r3, #24
 800982e:	d137      	bne.n	80098a0 <HAL_RCC_OscConfig+0x1c8>
 8009830:	69fb      	ldr	r3, [r7, #28]
 8009832:	f003 0303 	and.w	r3, r3, #3
 8009836:	2b00      	cmp	r3, #0
 8009838:	d132      	bne.n	80098a0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800983a:	4b38      	ldr	r3, [pc, #224]	; (800991c <HAL_RCC_OscConfig+0x244>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f003 0304 	and.w	r3, r3, #4
 8009842:	2b00      	cmp	r3, #0
 8009844:	d005      	beq.n	8009852 <HAL_RCC_OscConfig+0x17a>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	68db      	ldr	r3, [r3, #12]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d101      	bne.n	8009852 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800984e:	2301      	movs	r3, #1
 8009850:	e314      	b.n	8009e7c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009852:	4b32      	ldr	r3, [pc, #200]	; (800991c <HAL_RCC_OscConfig+0x244>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f023 0219 	bic.w	r2, r3, #25
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	68db      	ldr	r3, [r3, #12]
 800985e:	492f      	ldr	r1, [pc, #188]	; (800991c <HAL_RCC_OscConfig+0x244>)
 8009860:	4313      	orrs	r3, r2
 8009862:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009864:	f7fa f81a 	bl	800389c <HAL_GetTick>
 8009868:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800986a:	e008      	b.n	800987e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800986c:	f7fa f816 	bl	800389c <HAL_GetTick>
 8009870:	4602      	mov	r2, r0
 8009872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009874:	1ad3      	subs	r3, r2, r3
 8009876:	2b02      	cmp	r3, #2
 8009878:	d901      	bls.n	800987e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800987a:	2303      	movs	r3, #3
 800987c:	e2fe      	b.n	8009e7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800987e:	4b27      	ldr	r3, [pc, #156]	; (800991c <HAL_RCC_OscConfig+0x244>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f003 0304 	and.w	r3, r3, #4
 8009886:	2b00      	cmp	r3, #0
 8009888:	d0f0      	beq.n	800986c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800988a:	4b24      	ldr	r3, [pc, #144]	; (800991c <HAL_RCC_OscConfig+0x244>)
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	691b      	ldr	r3, [r3, #16]
 8009896:	061b      	lsls	r3, r3, #24
 8009898:	4920      	ldr	r1, [pc, #128]	; (800991c <HAL_RCC_OscConfig+0x244>)
 800989a:	4313      	orrs	r3, r2
 800989c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800989e:	e045      	b.n	800992c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d026      	beq.n	80098f6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80098a8:	4b1c      	ldr	r3, [pc, #112]	; (800991c <HAL_RCC_OscConfig+0x244>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f023 0219 	bic.w	r2, r3, #25
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	68db      	ldr	r3, [r3, #12]
 80098b4:	4919      	ldr	r1, [pc, #100]	; (800991c <HAL_RCC_OscConfig+0x244>)
 80098b6:	4313      	orrs	r3, r2
 80098b8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098ba:	f7f9 ffef 	bl	800389c <HAL_GetTick>
 80098be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80098c0:	e008      	b.n	80098d4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80098c2:	f7f9 ffeb 	bl	800389c <HAL_GetTick>
 80098c6:	4602      	mov	r2, r0
 80098c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ca:	1ad3      	subs	r3, r2, r3
 80098cc:	2b02      	cmp	r3, #2
 80098ce:	d901      	bls.n	80098d4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80098d0:	2303      	movs	r3, #3
 80098d2:	e2d3      	b.n	8009e7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80098d4:	4b11      	ldr	r3, [pc, #68]	; (800991c <HAL_RCC_OscConfig+0x244>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f003 0304 	and.w	r3, r3, #4
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d0f0      	beq.n	80098c2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098e0:	4b0e      	ldr	r3, [pc, #56]	; (800991c <HAL_RCC_OscConfig+0x244>)
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	691b      	ldr	r3, [r3, #16]
 80098ec:	061b      	lsls	r3, r3, #24
 80098ee:	490b      	ldr	r1, [pc, #44]	; (800991c <HAL_RCC_OscConfig+0x244>)
 80098f0:	4313      	orrs	r3, r2
 80098f2:	604b      	str	r3, [r1, #4]
 80098f4:	e01a      	b.n	800992c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80098f6:	4b09      	ldr	r3, [pc, #36]	; (800991c <HAL_RCC_OscConfig+0x244>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a08      	ldr	r2, [pc, #32]	; (800991c <HAL_RCC_OscConfig+0x244>)
 80098fc:	f023 0301 	bic.w	r3, r3, #1
 8009900:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009902:	f7f9 ffcb 	bl	800389c <HAL_GetTick>
 8009906:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009908:	e00a      	b.n	8009920 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800990a:	f7f9 ffc7 	bl	800389c <HAL_GetTick>
 800990e:	4602      	mov	r2, r0
 8009910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009912:	1ad3      	subs	r3, r2, r3
 8009914:	2b02      	cmp	r3, #2
 8009916:	d903      	bls.n	8009920 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009918:	2303      	movs	r3, #3
 800991a:	e2af      	b.n	8009e7c <HAL_RCC_OscConfig+0x7a4>
 800991c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009920:	4b96      	ldr	r3, [pc, #600]	; (8009b7c <HAL_RCC_OscConfig+0x4a4>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f003 0304 	and.w	r3, r3, #4
 8009928:	2b00      	cmp	r3, #0
 800992a:	d1ee      	bne.n	800990a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f003 0310 	and.w	r3, r3, #16
 8009934:	2b00      	cmp	r3, #0
 8009936:	d06a      	beq.n	8009a0e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009938:	4b90      	ldr	r3, [pc, #576]	; (8009b7c <HAL_RCC_OscConfig+0x4a4>)
 800993a:	691b      	ldr	r3, [r3, #16]
 800993c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009940:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009942:	4b8e      	ldr	r3, [pc, #568]	; (8009b7c <HAL_RCC_OscConfig+0x4a4>)
 8009944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009946:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009948:	69bb      	ldr	r3, [r7, #24]
 800994a:	2b08      	cmp	r3, #8
 800994c:	d007      	beq.n	800995e <HAL_RCC_OscConfig+0x286>
 800994e:	69bb      	ldr	r3, [r7, #24]
 8009950:	2b18      	cmp	r3, #24
 8009952:	d11b      	bne.n	800998c <HAL_RCC_OscConfig+0x2b4>
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	f003 0303 	and.w	r3, r3, #3
 800995a:	2b01      	cmp	r3, #1
 800995c:	d116      	bne.n	800998c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800995e:	4b87      	ldr	r3, [pc, #540]	; (8009b7c <HAL_RCC_OscConfig+0x4a4>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009966:	2b00      	cmp	r3, #0
 8009968:	d005      	beq.n	8009976 <HAL_RCC_OscConfig+0x29e>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	69db      	ldr	r3, [r3, #28]
 800996e:	2b80      	cmp	r3, #128	; 0x80
 8009970:	d001      	beq.n	8009976 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009972:	2301      	movs	r3, #1
 8009974:	e282      	b.n	8009e7c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009976:	4b81      	ldr	r3, [pc, #516]	; (8009b7c <HAL_RCC_OscConfig+0x4a4>)
 8009978:	68db      	ldr	r3, [r3, #12]
 800997a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6a1b      	ldr	r3, [r3, #32]
 8009982:	061b      	lsls	r3, r3, #24
 8009984:	497d      	ldr	r1, [pc, #500]	; (8009b7c <HAL_RCC_OscConfig+0x4a4>)
 8009986:	4313      	orrs	r3, r2
 8009988:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800998a:	e040      	b.n	8009a0e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	69db      	ldr	r3, [r3, #28]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d023      	beq.n	80099dc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009994:	4b79      	ldr	r3, [pc, #484]	; (8009b7c <HAL_RCC_OscConfig+0x4a4>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4a78      	ldr	r2, [pc, #480]	; (8009b7c <HAL_RCC_OscConfig+0x4a4>)
 800999a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800999e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099a0:	f7f9 ff7c 	bl	800389c <HAL_GetTick>
 80099a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80099a6:	e008      	b.n	80099ba <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80099a8:	f7f9 ff78 	bl	800389c <HAL_GetTick>
 80099ac:	4602      	mov	r2, r0
 80099ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b0:	1ad3      	subs	r3, r2, r3
 80099b2:	2b02      	cmp	r3, #2
 80099b4:	d901      	bls.n	80099ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80099b6:	2303      	movs	r3, #3
 80099b8:	e260      	b.n	8009e7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80099ba:	4b70      	ldr	r3, [pc, #448]	; (8009b7c <HAL_RCC_OscConfig+0x4a4>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d0f0      	beq.n	80099a8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80099c6:	4b6d      	ldr	r3, [pc, #436]	; (8009b7c <HAL_RCC_OscConfig+0x4a4>)
 80099c8:	68db      	ldr	r3, [r3, #12]
 80099ca:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6a1b      	ldr	r3, [r3, #32]
 80099d2:	061b      	lsls	r3, r3, #24
 80099d4:	4969      	ldr	r1, [pc, #420]	; (8009b7c <HAL_RCC_OscConfig+0x4a4>)
 80099d6:	4313      	orrs	r3, r2
 80099d8:	60cb      	str	r3, [r1, #12]
 80099da:	e018      	b.n	8009a0e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80099dc:	4b67      	ldr	r3, [pc, #412]	; (8009b7c <HAL_RCC_OscConfig+0x4a4>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a66      	ldr	r2, [pc, #408]	; (8009b7c <HAL_RCC_OscConfig+0x4a4>)
 80099e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099e8:	f7f9 ff58 	bl	800389c <HAL_GetTick>
 80099ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80099ee:	e008      	b.n	8009a02 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80099f0:	f7f9 ff54 	bl	800389c <HAL_GetTick>
 80099f4:	4602      	mov	r2, r0
 80099f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f8:	1ad3      	subs	r3, r2, r3
 80099fa:	2b02      	cmp	r3, #2
 80099fc:	d901      	bls.n	8009a02 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80099fe:	2303      	movs	r3, #3
 8009a00:	e23c      	b.n	8009e7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009a02:	4b5e      	ldr	r3, [pc, #376]	; (8009b7c <HAL_RCC_OscConfig+0x4a4>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d1f0      	bne.n	80099f0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f003 0308 	and.w	r3, r3, #8
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d036      	beq.n	8009a88 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	695b      	ldr	r3, [r3, #20]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d019      	beq.n	8009a56 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009a22:	4b56      	ldr	r3, [pc, #344]	; (8009b7c <HAL_RCC_OscConfig+0x4a4>)
 8009a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a26:	4a55      	ldr	r2, [pc, #340]	; (8009b7c <HAL_RCC_OscConfig+0x4a4>)
 8009a28:	f043 0301 	orr.w	r3, r3, #1
 8009a2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a2e:	f7f9 ff35 	bl	800389c <HAL_GetTick>
 8009a32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009a34:	e008      	b.n	8009a48 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009a36:	f7f9 ff31 	bl	800389c <HAL_GetTick>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3e:	1ad3      	subs	r3, r2, r3
 8009a40:	2b02      	cmp	r3, #2
 8009a42:	d901      	bls.n	8009a48 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009a44:	2303      	movs	r3, #3
 8009a46:	e219      	b.n	8009e7c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009a48:	4b4c      	ldr	r3, [pc, #304]	; (8009b7c <HAL_RCC_OscConfig+0x4a4>)
 8009a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a4c:	f003 0302 	and.w	r3, r3, #2
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d0f0      	beq.n	8009a36 <HAL_RCC_OscConfig+0x35e>
 8009a54:	e018      	b.n	8009a88 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009a56:	4b49      	ldr	r3, [pc, #292]	; (8009b7c <HAL_RCC_OscConfig+0x4a4>)
 8009a58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a5a:	4a48      	ldr	r2, [pc, #288]	; (8009b7c <HAL_RCC_OscConfig+0x4a4>)
 8009a5c:	f023 0301 	bic.w	r3, r3, #1
 8009a60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a62:	f7f9 ff1b 	bl	800389c <HAL_GetTick>
 8009a66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009a68:	e008      	b.n	8009a7c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009a6a:	f7f9 ff17 	bl	800389c <HAL_GetTick>
 8009a6e:	4602      	mov	r2, r0
 8009a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a72:	1ad3      	subs	r3, r2, r3
 8009a74:	2b02      	cmp	r3, #2
 8009a76:	d901      	bls.n	8009a7c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009a78:	2303      	movs	r3, #3
 8009a7a:	e1ff      	b.n	8009e7c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009a7c:	4b3f      	ldr	r3, [pc, #252]	; (8009b7c <HAL_RCC_OscConfig+0x4a4>)
 8009a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a80:	f003 0302 	and.w	r3, r3, #2
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d1f0      	bne.n	8009a6a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f003 0320 	and.w	r3, r3, #32
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d036      	beq.n	8009b02 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	699b      	ldr	r3, [r3, #24]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d019      	beq.n	8009ad0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009a9c:	4b37      	ldr	r3, [pc, #220]	; (8009b7c <HAL_RCC_OscConfig+0x4a4>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a36      	ldr	r2, [pc, #216]	; (8009b7c <HAL_RCC_OscConfig+0x4a4>)
 8009aa2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009aa6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009aa8:	f7f9 fef8 	bl	800389c <HAL_GetTick>
 8009aac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009aae:	e008      	b.n	8009ac2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009ab0:	f7f9 fef4 	bl	800389c <HAL_GetTick>
 8009ab4:	4602      	mov	r2, r0
 8009ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab8:	1ad3      	subs	r3, r2, r3
 8009aba:	2b02      	cmp	r3, #2
 8009abc:	d901      	bls.n	8009ac2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009abe:	2303      	movs	r3, #3
 8009ac0:	e1dc      	b.n	8009e7c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009ac2:	4b2e      	ldr	r3, [pc, #184]	; (8009b7c <HAL_RCC_OscConfig+0x4a4>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d0f0      	beq.n	8009ab0 <HAL_RCC_OscConfig+0x3d8>
 8009ace:	e018      	b.n	8009b02 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009ad0:	4b2a      	ldr	r3, [pc, #168]	; (8009b7c <HAL_RCC_OscConfig+0x4a4>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4a29      	ldr	r2, [pc, #164]	; (8009b7c <HAL_RCC_OscConfig+0x4a4>)
 8009ad6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ada:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009adc:	f7f9 fede 	bl	800389c <HAL_GetTick>
 8009ae0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009ae2:	e008      	b.n	8009af6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009ae4:	f7f9 feda 	bl	800389c <HAL_GetTick>
 8009ae8:	4602      	mov	r2, r0
 8009aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aec:	1ad3      	subs	r3, r2, r3
 8009aee:	2b02      	cmp	r3, #2
 8009af0:	d901      	bls.n	8009af6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009af2:	2303      	movs	r3, #3
 8009af4:	e1c2      	b.n	8009e7c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009af6:	4b21      	ldr	r3, [pc, #132]	; (8009b7c <HAL_RCC_OscConfig+0x4a4>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d1f0      	bne.n	8009ae4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f003 0304 	and.w	r3, r3, #4
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	f000 8086 	beq.w	8009c1c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009b10:	4b1b      	ldr	r3, [pc, #108]	; (8009b80 <HAL_RCC_OscConfig+0x4a8>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4a1a      	ldr	r2, [pc, #104]	; (8009b80 <HAL_RCC_OscConfig+0x4a8>)
 8009b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009b1c:	f7f9 febe 	bl	800389c <HAL_GetTick>
 8009b20:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b22:	e008      	b.n	8009b36 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b24:	f7f9 feba 	bl	800389c <HAL_GetTick>
 8009b28:	4602      	mov	r2, r0
 8009b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2c:	1ad3      	subs	r3, r2, r3
 8009b2e:	2b64      	cmp	r3, #100	; 0x64
 8009b30:	d901      	bls.n	8009b36 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009b32:	2303      	movs	r3, #3
 8009b34:	e1a2      	b.n	8009e7c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b36:	4b12      	ldr	r3, [pc, #72]	; (8009b80 <HAL_RCC_OscConfig+0x4a8>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d0f0      	beq.n	8009b24 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	2b01      	cmp	r3, #1
 8009b48:	d106      	bne.n	8009b58 <HAL_RCC_OscConfig+0x480>
 8009b4a:	4b0c      	ldr	r3, [pc, #48]	; (8009b7c <HAL_RCC_OscConfig+0x4a4>)
 8009b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b4e:	4a0b      	ldr	r2, [pc, #44]	; (8009b7c <HAL_RCC_OscConfig+0x4a4>)
 8009b50:	f043 0301 	orr.w	r3, r3, #1
 8009b54:	6713      	str	r3, [r2, #112]	; 0x70
 8009b56:	e032      	b.n	8009bbe <HAL_RCC_OscConfig+0x4e6>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d111      	bne.n	8009b84 <HAL_RCC_OscConfig+0x4ac>
 8009b60:	4b06      	ldr	r3, [pc, #24]	; (8009b7c <HAL_RCC_OscConfig+0x4a4>)
 8009b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b64:	4a05      	ldr	r2, [pc, #20]	; (8009b7c <HAL_RCC_OscConfig+0x4a4>)
 8009b66:	f023 0301 	bic.w	r3, r3, #1
 8009b6a:	6713      	str	r3, [r2, #112]	; 0x70
 8009b6c:	4b03      	ldr	r3, [pc, #12]	; (8009b7c <HAL_RCC_OscConfig+0x4a4>)
 8009b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b70:	4a02      	ldr	r2, [pc, #8]	; (8009b7c <HAL_RCC_OscConfig+0x4a4>)
 8009b72:	f023 0304 	bic.w	r3, r3, #4
 8009b76:	6713      	str	r3, [r2, #112]	; 0x70
 8009b78:	e021      	b.n	8009bbe <HAL_RCC_OscConfig+0x4e6>
 8009b7a:	bf00      	nop
 8009b7c:	58024400 	.word	0x58024400
 8009b80:	58024800 	.word	0x58024800
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	689b      	ldr	r3, [r3, #8]
 8009b88:	2b05      	cmp	r3, #5
 8009b8a:	d10c      	bne.n	8009ba6 <HAL_RCC_OscConfig+0x4ce>
 8009b8c:	4b83      	ldr	r3, [pc, #524]	; (8009d9c <HAL_RCC_OscConfig+0x6c4>)
 8009b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b90:	4a82      	ldr	r2, [pc, #520]	; (8009d9c <HAL_RCC_OscConfig+0x6c4>)
 8009b92:	f043 0304 	orr.w	r3, r3, #4
 8009b96:	6713      	str	r3, [r2, #112]	; 0x70
 8009b98:	4b80      	ldr	r3, [pc, #512]	; (8009d9c <HAL_RCC_OscConfig+0x6c4>)
 8009b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b9c:	4a7f      	ldr	r2, [pc, #508]	; (8009d9c <HAL_RCC_OscConfig+0x6c4>)
 8009b9e:	f043 0301 	orr.w	r3, r3, #1
 8009ba2:	6713      	str	r3, [r2, #112]	; 0x70
 8009ba4:	e00b      	b.n	8009bbe <HAL_RCC_OscConfig+0x4e6>
 8009ba6:	4b7d      	ldr	r3, [pc, #500]	; (8009d9c <HAL_RCC_OscConfig+0x6c4>)
 8009ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009baa:	4a7c      	ldr	r2, [pc, #496]	; (8009d9c <HAL_RCC_OscConfig+0x6c4>)
 8009bac:	f023 0301 	bic.w	r3, r3, #1
 8009bb0:	6713      	str	r3, [r2, #112]	; 0x70
 8009bb2:	4b7a      	ldr	r3, [pc, #488]	; (8009d9c <HAL_RCC_OscConfig+0x6c4>)
 8009bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bb6:	4a79      	ldr	r2, [pc, #484]	; (8009d9c <HAL_RCC_OscConfig+0x6c4>)
 8009bb8:	f023 0304 	bic.w	r3, r3, #4
 8009bbc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	689b      	ldr	r3, [r3, #8]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d015      	beq.n	8009bf2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bc6:	f7f9 fe69 	bl	800389c <HAL_GetTick>
 8009bca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009bcc:	e00a      	b.n	8009be4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009bce:	f7f9 fe65 	bl	800389c <HAL_GetTick>
 8009bd2:	4602      	mov	r2, r0
 8009bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd6:	1ad3      	subs	r3, r2, r3
 8009bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d901      	bls.n	8009be4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009be0:	2303      	movs	r3, #3
 8009be2:	e14b      	b.n	8009e7c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009be4:	4b6d      	ldr	r3, [pc, #436]	; (8009d9c <HAL_RCC_OscConfig+0x6c4>)
 8009be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009be8:	f003 0302 	and.w	r3, r3, #2
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d0ee      	beq.n	8009bce <HAL_RCC_OscConfig+0x4f6>
 8009bf0:	e014      	b.n	8009c1c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bf2:	f7f9 fe53 	bl	800389c <HAL_GetTick>
 8009bf6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009bf8:	e00a      	b.n	8009c10 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009bfa:	f7f9 fe4f 	bl	800389c <HAL_GetTick>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c02:	1ad3      	subs	r3, r2, r3
 8009c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d901      	bls.n	8009c10 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009c0c:	2303      	movs	r3, #3
 8009c0e:	e135      	b.n	8009e7c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009c10:	4b62      	ldr	r3, [pc, #392]	; (8009d9c <HAL_RCC_OscConfig+0x6c4>)
 8009c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c14:	f003 0302 	and.w	r3, r3, #2
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d1ee      	bne.n	8009bfa <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	f000 812a 	beq.w	8009e7a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009c26:	4b5d      	ldr	r3, [pc, #372]	; (8009d9c <HAL_RCC_OscConfig+0x6c4>)
 8009c28:	691b      	ldr	r3, [r3, #16]
 8009c2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c2e:	2b18      	cmp	r3, #24
 8009c30:	f000 80ba 	beq.w	8009da8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c38:	2b02      	cmp	r3, #2
 8009c3a:	f040 8095 	bne.w	8009d68 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c3e:	4b57      	ldr	r3, [pc, #348]	; (8009d9c <HAL_RCC_OscConfig+0x6c4>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4a56      	ldr	r2, [pc, #344]	; (8009d9c <HAL_RCC_OscConfig+0x6c4>)
 8009c44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009c48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c4a:	f7f9 fe27 	bl	800389c <HAL_GetTick>
 8009c4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009c50:	e008      	b.n	8009c64 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c52:	f7f9 fe23 	bl	800389c <HAL_GetTick>
 8009c56:	4602      	mov	r2, r0
 8009c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5a:	1ad3      	subs	r3, r2, r3
 8009c5c:	2b02      	cmp	r3, #2
 8009c5e:	d901      	bls.n	8009c64 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009c60:	2303      	movs	r3, #3
 8009c62:	e10b      	b.n	8009e7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009c64:	4b4d      	ldr	r3, [pc, #308]	; (8009d9c <HAL_RCC_OscConfig+0x6c4>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d1f0      	bne.n	8009c52 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009c70:	4b4a      	ldr	r3, [pc, #296]	; (8009d9c <HAL_RCC_OscConfig+0x6c4>)
 8009c72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c74:	4b4a      	ldr	r3, [pc, #296]	; (8009da0 <HAL_RCC_OscConfig+0x6c8>)
 8009c76:	4013      	ands	r3, r2
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009c80:	0112      	lsls	r2, r2, #4
 8009c82:	430a      	orrs	r2, r1
 8009c84:	4945      	ldr	r1, [pc, #276]	; (8009d9c <HAL_RCC_OscConfig+0x6c4>)
 8009c86:	4313      	orrs	r3, r2
 8009c88:	628b      	str	r3, [r1, #40]	; 0x28
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c8e:	3b01      	subs	r3, #1
 8009c90:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c98:	3b01      	subs	r3, #1
 8009c9a:	025b      	lsls	r3, r3, #9
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	431a      	orrs	r2, r3
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ca4:	3b01      	subs	r3, #1
 8009ca6:	041b      	lsls	r3, r3, #16
 8009ca8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009cac:	431a      	orrs	r2, r3
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cb2:	3b01      	subs	r3, #1
 8009cb4:	061b      	lsls	r3, r3, #24
 8009cb6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009cba:	4938      	ldr	r1, [pc, #224]	; (8009d9c <HAL_RCC_OscConfig+0x6c4>)
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009cc0:	4b36      	ldr	r3, [pc, #216]	; (8009d9c <HAL_RCC_OscConfig+0x6c4>)
 8009cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc4:	4a35      	ldr	r2, [pc, #212]	; (8009d9c <HAL_RCC_OscConfig+0x6c4>)
 8009cc6:	f023 0301 	bic.w	r3, r3, #1
 8009cca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009ccc:	4b33      	ldr	r3, [pc, #204]	; (8009d9c <HAL_RCC_OscConfig+0x6c4>)
 8009cce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009cd0:	4b34      	ldr	r3, [pc, #208]	; (8009da4 <HAL_RCC_OscConfig+0x6cc>)
 8009cd2:	4013      	ands	r3, r2
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009cd8:	00d2      	lsls	r2, r2, #3
 8009cda:	4930      	ldr	r1, [pc, #192]	; (8009d9c <HAL_RCC_OscConfig+0x6c4>)
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009ce0:	4b2e      	ldr	r3, [pc, #184]	; (8009d9c <HAL_RCC_OscConfig+0x6c4>)
 8009ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce4:	f023 020c 	bic.w	r2, r3, #12
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cec:	492b      	ldr	r1, [pc, #172]	; (8009d9c <HAL_RCC_OscConfig+0x6c4>)
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009cf2:	4b2a      	ldr	r3, [pc, #168]	; (8009d9c <HAL_RCC_OscConfig+0x6c4>)
 8009cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cf6:	f023 0202 	bic.w	r2, r3, #2
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cfe:	4927      	ldr	r1, [pc, #156]	; (8009d9c <HAL_RCC_OscConfig+0x6c4>)
 8009d00:	4313      	orrs	r3, r2
 8009d02:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009d04:	4b25      	ldr	r3, [pc, #148]	; (8009d9c <HAL_RCC_OscConfig+0x6c4>)
 8009d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d08:	4a24      	ldr	r2, [pc, #144]	; (8009d9c <HAL_RCC_OscConfig+0x6c4>)
 8009d0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d10:	4b22      	ldr	r3, [pc, #136]	; (8009d9c <HAL_RCC_OscConfig+0x6c4>)
 8009d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d14:	4a21      	ldr	r2, [pc, #132]	; (8009d9c <HAL_RCC_OscConfig+0x6c4>)
 8009d16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009d1c:	4b1f      	ldr	r3, [pc, #124]	; (8009d9c <HAL_RCC_OscConfig+0x6c4>)
 8009d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d20:	4a1e      	ldr	r2, [pc, #120]	; (8009d9c <HAL_RCC_OscConfig+0x6c4>)
 8009d22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009d26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009d28:	4b1c      	ldr	r3, [pc, #112]	; (8009d9c <HAL_RCC_OscConfig+0x6c4>)
 8009d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d2c:	4a1b      	ldr	r2, [pc, #108]	; (8009d9c <HAL_RCC_OscConfig+0x6c4>)
 8009d2e:	f043 0301 	orr.w	r3, r3, #1
 8009d32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009d34:	4b19      	ldr	r3, [pc, #100]	; (8009d9c <HAL_RCC_OscConfig+0x6c4>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a18      	ldr	r2, [pc, #96]	; (8009d9c <HAL_RCC_OscConfig+0x6c4>)
 8009d3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009d3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d40:	f7f9 fdac 	bl	800389c <HAL_GetTick>
 8009d44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009d46:	e008      	b.n	8009d5a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d48:	f7f9 fda8 	bl	800389c <HAL_GetTick>
 8009d4c:	4602      	mov	r2, r0
 8009d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d50:	1ad3      	subs	r3, r2, r3
 8009d52:	2b02      	cmp	r3, #2
 8009d54:	d901      	bls.n	8009d5a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009d56:	2303      	movs	r3, #3
 8009d58:	e090      	b.n	8009e7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009d5a:	4b10      	ldr	r3, [pc, #64]	; (8009d9c <HAL_RCC_OscConfig+0x6c4>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d0f0      	beq.n	8009d48 <HAL_RCC_OscConfig+0x670>
 8009d66:	e088      	b.n	8009e7a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d68:	4b0c      	ldr	r3, [pc, #48]	; (8009d9c <HAL_RCC_OscConfig+0x6c4>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4a0b      	ldr	r2, [pc, #44]	; (8009d9c <HAL_RCC_OscConfig+0x6c4>)
 8009d6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d74:	f7f9 fd92 	bl	800389c <HAL_GetTick>
 8009d78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009d7a:	e008      	b.n	8009d8e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d7c:	f7f9 fd8e 	bl	800389c <HAL_GetTick>
 8009d80:	4602      	mov	r2, r0
 8009d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d84:	1ad3      	subs	r3, r2, r3
 8009d86:	2b02      	cmp	r3, #2
 8009d88:	d901      	bls.n	8009d8e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8009d8a:	2303      	movs	r3, #3
 8009d8c:	e076      	b.n	8009e7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009d8e:	4b03      	ldr	r3, [pc, #12]	; (8009d9c <HAL_RCC_OscConfig+0x6c4>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d1f0      	bne.n	8009d7c <HAL_RCC_OscConfig+0x6a4>
 8009d9a:	e06e      	b.n	8009e7a <HAL_RCC_OscConfig+0x7a2>
 8009d9c:	58024400 	.word	0x58024400
 8009da0:	fffffc0c 	.word	0xfffffc0c
 8009da4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009da8:	4b36      	ldr	r3, [pc, #216]	; (8009e84 <HAL_RCC_OscConfig+0x7ac>)
 8009daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009dae:	4b35      	ldr	r3, [pc, #212]	; (8009e84 <HAL_RCC_OscConfig+0x7ac>)
 8009db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009db2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d031      	beq.n	8009e20 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	f003 0203 	and.w	r2, r3, #3
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d12a      	bne.n	8009e20 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	091b      	lsrs	r3, r3, #4
 8009dce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d122      	bne.n	8009e20 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009de4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d11a      	bne.n	8009e20 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	0a5b      	lsrs	r3, r3, #9
 8009dee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009df6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d111      	bne.n	8009e20 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	0c1b      	lsrs	r3, r3, #16
 8009e00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e08:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d108      	bne.n	8009e20 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	0e1b      	lsrs	r3, r3, #24
 8009e12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e1a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d001      	beq.n	8009e24 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009e20:	2301      	movs	r3, #1
 8009e22:	e02b      	b.n	8009e7c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009e24:	4b17      	ldr	r3, [pc, #92]	; (8009e84 <HAL_RCC_OscConfig+0x7ac>)
 8009e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e28:	08db      	lsrs	r3, r3, #3
 8009e2a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009e2e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e34:	693a      	ldr	r2, [r7, #16]
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d01f      	beq.n	8009e7a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009e3a:	4b12      	ldr	r3, [pc, #72]	; (8009e84 <HAL_RCC_OscConfig+0x7ac>)
 8009e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e3e:	4a11      	ldr	r2, [pc, #68]	; (8009e84 <HAL_RCC_OscConfig+0x7ac>)
 8009e40:	f023 0301 	bic.w	r3, r3, #1
 8009e44:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009e46:	f7f9 fd29 	bl	800389c <HAL_GetTick>
 8009e4a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009e4c:	bf00      	nop
 8009e4e:	f7f9 fd25 	bl	800389c <HAL_GetTick>
 8009e52:	4602      	mov	r2, r0
 8009e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d0f9      	beq.n	8009e4e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009e5a:	4b0a      	ldr	r3, [pc, #40]	; (8009e84 <HAL_RCC_OscConfig+0x7ac>)
 8009e5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e5e:	4b0a      	ldr	r3, [pc, #40]	; (8009e88 <HAL_RCC_OscConfig+0x7b0>)
 8009e60:	4013      	ands	r3, r2
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009e66:	00d2      	lsls	r2, r2, #3
 8009e68:	4906      	ldr	r1, [pc, #24]	; (8009e84 <HAL_RCC_OscConfig+0x7ac>)
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009e6e:	4b05      	ldr	r3, [pc, #20]	; (8009e84 <HAL_RCC_OscConfig+0x7ac>)
 8009e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e72:	4a04      	ldr	r2, [pc, #16]	; (8009e84 <HAL_RCC_OscConfig+0x7ac>)
 8009e74:	f043 0301 	orr.w	r3, r3, #1
 8009e78:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009e7a:	2300      	movs	r3, #0
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3730      	adds	r7, #48	; 0x30
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}
 8009e84:	58024400 	.word	0x58024400
 8009e88:	ffff0007 	.word	0xffff0007

08009e8c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b086      	sub	sp, #24
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d101      	bne.n	8009ea0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	e19c      	b.n	800a1da <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009ea0:	4b8a      	ldr	r3, [pc, #552]	; (800a0cc <HAL_RCC_ClockConfig+0x240>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f003 030f 	and.w	r3, r3, #15
 8009ea8:	683a      	ldr	r2, [r7, #0]
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d910      	bls.n	8009ed0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009eae:	4b87      	ldr	r3, [pc, #540]	; (800a0cc <HAL_RCC_ClockConfig+0x240>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f023 020f 	bic.w	r2, r3, #15
 8009eb6:	4985      	ldr	r1, [pc, #532]	; (800a0cc <HAL_RCC_ClockConfig+0x240>)
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ebe:	4b83      	ldr	r3, [pc, #524]	; (800a0cc <HAL_RCC_ClockConfig+0x240>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f003 030f 	and.w	r3, r3, #15
 8009ec6:	683a      	ldr	r2, [r7, #0]
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d001      	beq.n	8009ed0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	e184      	b.n	800a1da <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f003 0304 	and.w	r3, r3, #4
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d010      	beq.n	8009efe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	691a      	ldr	r2, [r3, #16]
 8009ee0:	4b7b      	ldr	r3, [pc, #492]	; (800a0d0 <HAL_RCC_ClockConfig+0x244>)
 8009ee2:	699b      	ldr	r3, [r3, #24]
 8009ee4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d908      	bls.n	8009efe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009eec:	4b78      	ldr	r3, [pc, #480]	; (800a0d0 <HAL_RCC_ClockConfig+0x244>)
 8009eee:	699b      	ldr	r3, [r3, #24]
 8009ef0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	691b      	ldr	r3, [r3, #16]
 8009ef8:	4975      	ldr	r1, [pc, #468]	; (800a0d0 <HAL_RCC_ClockConfig+0x244>)
 8009efa:	4313      	orrs	r3, r2
 8009efc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f003 0308 	and.w	r3, r3, #8
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d010      	beq.n	8009f2c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	695a      	ldr	r2, [r3, #20]
 8009f0e:	4b70      	ldr	r3, [pc, #448]	; (800a0d0 <HAL_RCC_ClockConfig+0x244>)
 8009f10:	69db      	ldr	r3, [r3, #28]
 8009f12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d908      	bls.n	8009f2c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009f1a:	4b6d      	ldr	r3, [pc, #436]	; (800a0d0 <HAL_RCC_ClockConfig+0x244>)
 8009f1c:	69db      	ldr	r3, [r3, #28]
 8009f1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	695b      	ldr	r3, [r3, #20]
 8009f26:	496a      	ldr	r1, [pc, #424]	; (800a0d0 <HAL_RCC_ClockConfig+0x244>)
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f003 0310 	and.w	r3, r3, #16
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d010      	beq.n	8009f5a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	699a      	ldr	r2, [r3, #24]
 8009f3c:	4b64      	ldr	r3, [pc, #400]	; (800a0d0 <HAL_RCC_ClockConfig+0x244>)
 8009f3e:	69db      	ldr	r3, [r3, #28]
 8009f40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d908      	bls.n	8009f5a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009f48:	4b61      	ldr	r3, [pc, #388]	; (800a0d0 <HAL_RCC_ClockConfig+0x244>)
 8009f4a:	69db      	ldr	r3, [r3, #28]
 8009f4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	699b      	ldr	r3, [r3, #24]
 8009f54:	495e      	ldr	r1, [pc, #376]	; (800a0d0 <HAL_RCC_ClockConfig+0x244>)
 8009f56:	4313      	orrs	r3, r2
 8009f58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f003 0320 	and.w	r3, r3, #32
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d010      	beq.n	8009f88 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	69da      	ldr	r2, [r3, #28]
 8009f6a:	4b59      	ldr	r3, [pc, #356]	; (800a0d0 <HAL_RCC_ClockConfig+0x244>)
 8009f6c:	6a1b      	ldr	r3, [r3, #32]
 8009f6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d908      	bls.n	8009f88 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009f76:	4b56      	ldr	r3, [pc, #344]	; (800a0d0 <HAL_RCC_ClockConfig+0x244>)
 8009f78:	6a1b      	ldr	r3, [r3, #32]
 8009f7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	69db      	ldr	r3, [r3, #28]
 8009f82:	4953      	ldr	r1, [pc, #332]	; (800a0d0 <HAL_RCC_ClockConfig+0x244>)
 8009f84:	4313      	orrs	r3, r2
 8009f86:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f003 0302 	and.w	r3, r3, #2
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d010      	beq.n	8009fb6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	68da      	ldr	r2, [r3, #12]
 8009f98:	4b4d      	ldr	r3, [pc, #308]	; (800a0d0 <HAL_RCC_ClockConfig+0x244>)
 8009f9a:	699b      	ldr	r3, [r3, #24]
 8009f9c:	f003 030f 	and.w	r3, r3, #15
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d908      	bls.n	8009fb6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009fa4:	4b4a      	ldr	r3, [pc, #296]	; (800a0d0 <HAL_RCC_ClockConfig+0x244>)
 8009fa6:	699b      	ldr	r3, [r3, #24]
 8009fa8:	f023 020f 	bic.w	r2, r3, #15
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	4947      	ldr	r1, [pc, #284]	; (800a0d0 <HAL_RCC_ClockConfig+0x244>)
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f003 0301 	and.w	r3, r3, #1
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d055      	beq.n	800a06e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009fc2:	4b43      	ldr	r3, [pc, #268]	; (800a0d0 <HAL_RCC_ClockConfig+0x244>)
 8009fc4:	699b      	ldr	r3, [r3, #24]
 8009fc6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	689b      	ldr	r3, [r3, #8]
 8009fce:	4940      	ldr	r1, [pc, #256]	; (800a0d0 <HAL_RCC_ClockConfig+0x244>)
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	685b      	ldr	r3, [r3, #4]
 8009fd8:	2b02      	cmp	r3, #2
 8009fda:	d107      	bne.n	8009fec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009fdc:	4b3c      	ldr	r3, [pc, #240]	; (800a0d0 <HAL_RCC_ClockConfig+0x244>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d121      	bne.n	800a02c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	e0f6      	b.n	800a1da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	2b03      	cmp	r3, #3
 8009ff2:	d107      	bne.n	800a004 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009ff4:	4b36      	ldr	r3, [pc, #216]	; (800a0d0 <HAL_RCC_ClockConfig+0x244>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d115      	bne.n	800a02c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a000:	2301      	movs	r3, #1
 800a002:	e0ea      	b.n	800a1da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d107      	bne.n	800a01c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a00c:	4b30      	ldr	r3, [pc, #192]	; (800a0d0 <HAL_RCC_ClockConfig+0x244>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a014:	2b00      	cmp	r3, #0
 800a016:	d109      	bne.n	800a02c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a018:	2301      	movs	r3, #1
 800a01a:	e0de      	b.n	800a1da <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a01c:	4b2c      	ldr	r3, [pc, #176]	; (800a0d0 <HAL_RCC_ClockConfig+0x244>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f003 0304 	and.w	r3, r3, #4
 800a024:	2b00      	cmp	r3, #0
 800a026:	d101      	bne.n	800a02c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a028:	2301      	movs	r3, #1
 800a02a:	e0d6      	b.n	800a1da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a02c:	4b28      	ldr	r3, [pc, #160]	; (800a0d0 <HAL_RCC_ClockConfig+0x244>)
 800a02e:	691b      	ldr	r3, [r3, #16]
 800a030:	f023 0207 	bic.w	r2, r3, #7
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	4925      	ldr	r1, [pc, #148]	; (800a0d0 <HAL_RCC_ClockConfig+0x244>)
 800a03a:	4313      	orrs	r3, r2
 800a03c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a03e:	f7f9 fc2d 	bl	800389c <HAL_GetTick>
 800a042:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a044:	e00a      	b.n	800a05c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a046:	f7f9 fc29 	bl	800389c <HAL_GetTick>
 800a04a:	4602      	mov	r2, r0
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	1ad3      	subs	r3, r2, r3
 800a050:	f241 3288 	movw	r2, #5000	; 0x1388
 800a054:	4293      	cmp	r3, r2
 800a056:	d901      	bls.n	800a05c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a058:	2303      	movs	r3, #3
 800a05a:	e0be      	b.n	800a1da <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a05c:	4b1c      	ldr	r3, [pc, #112]	; (800a0d0 <HAL_RCC_ClockConfig+0x244>)
 800a05e:	691b      	ldr	r3, [r3, #16]
 800a060:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	685b      	ldr	r3, [r3, #4]
 800a068:	00db      	lsls	r3, r3, #3
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d1eb      	bne.n	800a046 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f003 0302 	and.w	r3, r3, #2
 800a076:	2b00      	cmp	r3, #0
 800a078:	d010      	beq.n	800a09c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	68da      	ldr	r2, [r3, #12]
 800a07e:	4b14      	ldr	r3, [pc, #80]	; (800a0d0 <HAL_RCC_ClockConfig+0x244>)
 800a080:	699b      	ldr	r3, [r3, #24]
 800a082:	f003 030f 	and.w	r3, r3, #15
 800a086:	429a      	cmp	r2, r3
 800a088:	d208      	bcs.n	800a09c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a08a:	4b11      	ldr	r3, [pc, #68]	; (800a0d0 <HAL_RCC_ClockConfig+0x244>)
 800a08c:	699b      	ldr	r3, [r3, #24]
 800a08e:	f023 020f 	bic.w	r2, r3, #15
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	68db      	ldr	r3, [r3, #12]
 800a096:	490e      	ldr	r1, [pc, #56]	; (800a0d0 <HAL_RCC_ClockConfig+0x244>)
 800a098:	4313      	orrs	r3, r2
 800a09a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a09c:	4b0b      	ldr	r3, [pc, #44]	; (800a0cc <HAL_RCC_ClockConfig+0x240>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f003 030f 	and.w	r3, r3, #15
 800a0a4:	683a      	ldr	r2, [r7, #0]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d214      	bcs.n	800a0d4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a0aa:	4b08      	ldr	r3, [pc, #32]	; (800a0cc <HAL_RCC_ClockConfig+0x240>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f023 020f 	bic.w	r2, r3, #15
 800a0b2:	4906      	ldr	r1, [pc, #24]	; (800a0cc <HAL_RCC_ClockConfig+0x240>)
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0ba:	4b04      	ldr	r3, [pc, #16]	; (800a0cc <HAL_RCC_ClockConfig+0x240>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f003 030f 	and.w	r3, r3, #15
 800a0c2:	683a      	ldr	r2, [r7, #0]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d005      	beq.n	800a0d4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	e086      	b.n	800a1da <HAL_RCC_ClockConfig+0x34e>
 800a0cc:	52002000 	.word	0x52002000
 800a0d0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f003 0304 	and.w	r3, r3, #4
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d010      	beq.n	800a102 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	691a      	ldr	r2, [r3, #16]
 800a0e4:	4b3f      	ldr	r3, [pc, #252]	; (800a1e4 <HAL_RCC_ClockConfig+0x358>)
 800a0e6:	699b      	ldr	r3, [r3, #24]
 800a0e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d208      	bcs.n	800a102 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a0f0:	4b3c      	ldr	r3, [pc, #240]	; (800a1e4 <HAL_RCC_ClockConfig+0x358>)
 800a0f2:	699b      	ldr	r3, [r3, #24]
 800a0f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	691b      	ldr	r3, [r3, #16]
 800a0fc:	4939      	ldr	r1, [pc, #228]	; (800a1e4 <HAL_RCC_ClockConfig+0x358>)
 800a0fe:	4313      	orrs	r3, r2
 800a100:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f003 0308 	and.w	r3, r3, #8
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d010      	beq.n	800a130 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	695a      	ldr	r2, [r3, #20]
 800a112:	4b34      	ldr	r3, [pc, #208]	; (800a1e4 <HAL_RCC_ClockConfig+0x358>)
 800a114:	69db      	ldr	r3, [r3, #28]
 800a116:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d208      	bcs.n	800a130 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a11e:	4b31      	ldr	r3, [pc, #196]	; (800a1e4 <HAL_RCC_ClockConfig+0x358>)
 800a120:	69db      	ldr	r3, [r3, #28]
 800a122:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	695b      	ldr	r3, [r3, #20]
 800a12a:	492e      	ldr	r1, [pc, #184]	; (800a1e4 <HAL_RCC_ClockConfig+0x358>)
 800a12c:	4313      	orrs	r3, r2
 800a12e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f003 0310 	and.w	r3, r3, #16
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d010      	beq.n	800a15e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	699a      	ldr	r2, [r3, #24]
 800a140:	4b28      	ldr	r3, [pc, #160]	; (800a1e4 <HAL_RCC_ClockConfig+0x358>)
 800a142:	69db      	ldr	r3, [r3, #28]
 800a144:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a148:	429a      	cmp	r2, r3
 800a14a:	d208      	bcs.n	800a15e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a14c:	4b25      	ldr	r3, [pc, #148]	; (800a1e4 <HAL_RCC_ClockConfig+0x358>)
 800a14e:	69db      	ldr	r3, [r3, #28]
 800a150:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	699b      	ldr	r3, [r3, #24]
 800a158:	4922      	ldr	r1, [pc, #136]	; (800a1e4 <HAL_RCC_ClockConfig+0x358>)
 800a15a:	4313      	orrs	r3, r2
 800a15c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f003 0320 	and.w	r3, r3, #32
 800a166:	2b00      	cmp	r3, #0
 800a168:	d010      	beq.n	800a18c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	69da      	ldr	r2, [r3, #28]
 800a16e:	4b1d      	ldr	r3, [pc, #116]	; (800a1e4 <HAL_RCC_ClockConfig+0x358>)
 800a170:	6a1b      	ldr	r3, [r3, #32]
 800a172:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a176:	429a      	cmp	r2, r3
 800a178:	d208      	bcs.n	800a18c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a17a:	4b1a      	ldr	r3, [pc, #104]	; (800a1e4 <HAL_RCC_ClockConfig+0x358>)
 800a17c:	6a1b      	ldr	r3, [r3, #32]
 800a17e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	69db      	ldr	r3, [r3, #28]
 800a186:	4917      	ldr	r1, [pc, #92]	; (800a1e4 <HAL_RCC_ClockConfig+0x358>)
 800a188:	4313      	orrs	r3, r2
 800a18a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a18c:	f000 f89e 	bl	800a2cc <HAL_RCC_GetSysClockFreq>
 800a190:	4602      	mov	r2, r0
 800a192:	4b14      	ldr	r3, [pc, #80]	; (800a1e4 <HAL_RCC_ClockConfig+0x358>)
 800a194:	699b      	ldr	r3, [r3, #24]
 800a196:	0a1b      	lsrs	r3, r3, #8
 800a198:	f003 030f 	and.w	r3, r3, #15
 800a19c:	4912      	ldr	r1, [pc, #72]	; (800a1e8 <HAL_RCC_ClockConfig+0x35c>)
 800a19e:	5ccb      	ldrb	r3, [r1, r3]
 800a1a0:	f003 031f 	and.w	r3, r3, #31
 800a1a4:	fa22 f303 	lsr.w	r3, r2, r3
 800a1a8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a1aa:	4b0e      	ldr	r3, [pc, #56]	; (800a1e4 <HAL_RCC_ClockConfig+0x358>)
 800a1ac:	699b      	ldr	r3, [r3, #24]
 800a1ae:	f003 030f 	and.w	r3, r3, #15
 800a1b2:	4a0d      	ldr	r2, [pc, #52]	; (800a1e8 <HAL_RCC_ClockConfig+0x35c>)
 800a1b4:	5cd3      	ldrb	r3, [r2, r3]
 800a1b6:	f003 031f 	and.w	r3, r3, #31
 800a1ba:	693a      	ldr	r2, [r7, #16]
 800a1bc:	fa22 f303 	lsr.w	r3, r2, r3
 800a1c0:	4a0a      	ldr	r2, [pc, #40]	; (800a1ec <HAL_RCC_ClockConfig+0x360>)
 800a1c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a1c4:	4a0a      	ldr	r2, [pc, #40]	; (800a1f0 <HAL_RCC_ClockConfig+0x364>)
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a1ca:	4b0a      	ldr	r3, [pc, #40]	; (800a1f4 <HAL_RCC_ClockConfig+0x368>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f7f9 fb1a 	bl	8003808 <HAL_InitTick>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a1d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3718      	adds	r7, #24
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
 800a1e2:	bf00      	nop
 800a1e4:	58024400 	.word	0x58024400
 800a1e8:	0801bb48 	.word	0x0801bb48
 800a1ec:	24000004 	.word	0x24000004
 800a1f0:	24000000 	.word	0x24000000
 800a1f4:	24000008 	.word	0x24000008

0800a1f8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b08c      	sub	sp, #48	; 0x30
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	60f8      	str	r0, [r7, #12]
 800a200:	60b9      	str	r1, [r7, #8]
 800a202:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d12a      	bne.n	800a260 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800a20a:	4b2d      	ldr	r3, [pc, #180]	; (800a2c0 <HAL_RCC_MCOConfig+0xc8>)
 800a20c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a210:	4a2b      	ldr	r2, [pc, #172]	; (800a2c0 <HAL_RCC_MCOConfig+0xc8>)
 800a212:	f043 0301 	orr.w	r3, r3, #1
 800a216:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a21a:	4b29      	ldr	r3, [pc, #164]	; (800a2c0 <HAL_RCC_MCOConfig+0xc8>)
 800a21c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a220:	f003 0301 	and.w	r3, r3, #1
 800a224:	61bb      	str	r3, [r7, #24]
 800a226:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a228:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a22c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a22e:	2302      	movs	r3, #2
 800a230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a232:	2303      	movs	r3, #3
 800a234:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a236:	2300      	movs	r3, #0
 800a238:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a23a:	2300      	movs	r3, #0
 800a23c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a23e:	f107 031c 	add.w	r3, r7, #28
 800a242:	4619      	mov	r1, r3
 800a244:	481f      	ldr	r0, [pc, #124]	; (800a2c4 <HAL_RCC_MCOConfig+0xcc>)
 800a246:	f7fd fc29 	bl	8007a9c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a24a:	4b1d      	ldr	r3, [pc, #116]	; (800a2c0 <HAL_RCC_MCOConfig+0xc8>)
 800a24c:	691b      	ldr	r3, [r3, #16]
 800a24e:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800a252:	68b9      	ldr	r1, [r7, #8]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	430b      	orrs	r3, r1
 800a258:	4919      	ldr	r1, [pc, #100]	; (800a2c0 <HAL_RCC_MCOConfig+0xc8>)
 800a25a:	4313      	orrs	r3, r2
 800a25c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800a25e:	e02a      	b.n	800a2b6 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800a260:	4b17      	ldr	r3, [pc, #92]	; (800a2c0 <HAL_RCC_MCOConfig+0xc8>)
 800a262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a266:	4a16      	ldr	r2, [pc, #88]	; (800a2c0 <HAL_RCC_MCOConfig+0xc8>)
 800a268:	f043 0304 	orr.w	r3, r3, #4
 800a26c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a270:	4b13      	ldr	r3, [pc, #76]	; (800a2c0 <HAL_RCC_MCOConfig+0xc8>)
 800a272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a276:	f003 0304 	and.w	r3, r3, #4
 800a27a:	617b      	str	r3, [r7, #20]
 800a27c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a27e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a284:	2302      	movs	r3, #2
 800a286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a288:	2303      	movs	r3, #3
 800a28a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a28c:	2300      	movs	r3, #0
 800a28e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a290:	2300      	movs	r3, #0
 800a292:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a294:	f107 031c 	add.w	r3, r7, #28
 800a298:	4619      	mov	r1, r3
 800a29a:	480b      	ldr	r0, [pc, #44]	; (800a2c8 <HAL_RCC_MCOConfig+0xd0>)
 800a29c:	f7fd fbfe 	bl	8007a9c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a2a0:	4b07      	ldr	r3, [pc, #28]	; (800a2c0 <HAL_RCC_MCOConfig+0xc8>)
 800a2a2:	691b      	ldr	r3, [r3, #16]
 800a2a4:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	01d9      	lsls	r1, r3, #7
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	430b      	orrs	r3, r1
 800a2b0:	4903      	ldr	r1, [pc, #12]	; (800a2c0 <HAL_RCC_MCOConfig+0xc8>)
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	610b      	str	r3, [r1, #16]
}
 800a2b6:	bf00      	nop
 800a2b8:	3730      	adds	r7, #48	; 0x30
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	58024400 	.word	0x58024400
 800a2c4:	58020000 	.word	0x58020000
 800a2c8:	58020800 	.word	0x58020800

0800a2cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b089      	sub	sp, #36	; 0x24
 800a2d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a2d2:	4bb3      	ldr	r3, [pc, #716]	; (800a5a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2d4:	691b      	ldr	r3, [r3, #16]
 800a2d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a2da:	2b18      	cmp	r3, #24
 800a2dc:	f200 8155 	bhi.w	800a58a <HAL_RCC_GetSysClockFreq+0x2be>
 800a2e0:	a201      	add	r2, pc, #4	; (adr r2, 800a2e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a2e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2e6:	bf00      	nop
 800a2e8:	0800a34d 	.word	0x0800a34d
 800a2ec:	0800a58b 	.word	0x0800a58b
 800a2f0:	0800a58b 	.word	0x0800a58b
 800a2f4:	0800a58b 	.word	0x0800a58b
 800a2f8:	0800a58b 	.word	0x0800a58b
 800a2fc:	0800a58b 	.word	0x0800a58b
 800a300:	0800a58b 	.word	0x0800a58b
 800a304:	0800a58b 	.word	0x0800a58b
 800a308:	0800a373 	.word	0x0800a373
 800a30c:	0800a58b 	.word	0x0800a58b
 800a310:	0800a58b 	.word	0x0800a58b
 800a314:	0800a58b 	.word	0x0800a58b
 800a318:	0800a58b 	.word	0x0800a58b
 800a31c:	0800a58b 	.word	0x0800a58b
 800a320:	0800a58b 	.word	0x0800a58b
 800a324:	0800a58b 	.word	0x0800a58b
 800a328:	0800a379 	.word	0x0800a379
 800a32c:	0800a58b 	.word	0x0800a58b
 800a330:	0800a58b 	.word	0x0800a58b
 800a334:	0800a58b 	.word	0x0800a58b
 800a338:	0800a58b 	.word	0x0800a58b
 800a33c:	0800a58b 	.word	0x0800a58b
 800a340:	0800a58b 	.word	0x0800a58b
 800a344:	0800a58b 	.word	0x0800a58b
 800a348:	0800a37f 	.word	0x0800a37f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a34c:	4b94      	ldr	r3, [pc, #592]	; (800a5a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f003 0320 	and.w	r3, r3, #32
 800a354:	2b00      	cmp	r3, #0
 800a356:	d009      	beq.n	800a36c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a358:	4b91      	ldr	r3, [pc, #580]	; (800a5a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	08db      	lsrs	r3, r3, #3
 800a35e:	f003 0303 	and.w	r3, r3, #3
 800a362:	4a90      	ldr	r2, [pc, #576]	; (800a5a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a364:	fa22 f303 	lsr.w	r3, r2, r3
 800a368:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a36a:	e111      	b.n	800a590 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a36c:	4b8d      	ldr	r3, [pc, #564]	; (800a5a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a36e:	61bb      	str	r3, [r7, #24]
      break;
 800a370:	e10e      	b.n	800a590 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a372:	4b8d      	ldr	r3, [pc, #564]	; (800a5a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a374:	61bb      	str	r3, [r7, #24]
      break;
 800a376:	e10b      	b.n	800a590 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a378:	4b8c      	ldr	r3, [pc, #560]	; (800a5ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a37a:	61bb      	str	r3, [r7, #24]
      break;
 800a37c:	e108      	b.n	800a590 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a37e:	4b88      	ldr	r3, [pc, #544]	; (800a5a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a382:	f003 0303 	and.w	r3, r3, #3
 800a386:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a388:	4b85      	ldr	r3, [pc, #532]	; (800a5a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a38a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a38c:	091b      	lsrs	r3, r3, #4
 800a38e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a392:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a394:	4b82      	ldr	r3, [pc, #520]	; (800a5a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a398:	f003 0301 	and.w	r3, r3, #1
 800a39c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a39e:	4b80      	ldr	r3, [pc, #512]	; (800a5a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a3a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3a2:	08db      	lsrs	r3, r3, #3
 800a3a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a3a8:	68fa      	ldr	r2, [r7, #12]
 800a3aa:	fb02 f303 	mul.w	r3, r2, r3
 800a3ae:	ee07 3a90 	vmov	s15, r3
 800a3b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3b6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	f000 80e1 	beq.w	800a584 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	2b02      	cmp	r3, #2
 800a3c6:	f000 8083 	beq.w	800a4d0 <HAL_RCC_GetSysClockFreq+0x204>
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	2b02      	cmp	r3, #2
 800a3ce:	f200 80a1 	bhi.w	800a514 <HAL_RCC_GetSysClockFreq+0x248>
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d003      	beq.n	800a3e0 <HAL_RCC_GetSysClockFreq+0x114>
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	2b01      	cmp	r3, #1
 800a3dc:	d056      	beq.n	800a48c <HAL_RCC_GetSysClockFreq+0x1c0>
 800a3de:	e099      	b.n	800a514 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3e0:	4b6f      	ldr	r3, [pc, #444]	; (800a5a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f003 0320 	and.w	r3, r3, #32
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d02d      	beq.n	800a448 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a3ec:	4b6c      	ldr	r3, [pc, #432]	; (800a5a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	08db      	lsrs	r3, r3, #3
 800a3f2:	f003 0303 	and.w	r3, r3, #3
 800a3f6:	4a6b      	ldr	r2, [pc, #428]	; (800a5a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a3f8:	fa22 f303 	lsr.w	r3, r2, r3
 800a3fc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	ee07 3a90 	vmov	s15, r3
 800a404:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	ee07 3a90 	vmov	s15, r3
 800a40e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a416:	4b62      	ldr	r3, [pc, #392]	; (800a5a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a41a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a41e:	ee07 3a90 	vmov	s15, r3
 800a422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a426:	ed97 6a02 	vldr	s12, [r7, #8]
 800a42a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a5b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a42e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a43a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a43e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a442:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a446:	e087      	b.n	800a558 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	ee07 3a90 	vmov	s15, r3
 800a44e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a452:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a5b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a45a:	4b51      	ldr	r3, [pc, #324]	; (800a5a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a45c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a45e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a462:	ee07 3a90 	vmov	s15, r3
 800a466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a46a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a46e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a5b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a47a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a47e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a482:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a486:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a48a:	e065      	b.n	800a558 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	ee07 3a90 	vmov	s15, r3
 800a492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a496:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a5b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a49a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a49e:	4b40      	ldr	r3, [pc, #256]	; (800a5a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4a6:	ee07 3a90 	vmov	s15, r3
 800a4aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4ae:	ed97 6a02 	vldr	s12, [r7, #8]
 800a4b2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a5b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a4b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a4ce:	e043      	b.n	800a558 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	ee07 3a90 	vmov	s15, r3
 800a4d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4da:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a5bc <HAL_RCC_GetSysClockFreq+0x2f0>
 800a4de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4e2:	4b2f      	ldr	r3, [pc, #188]	; (800a5a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4ea:	ee07 3a90 	vmov	s15, r3
 800a4ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4f2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a4f6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a5b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a4fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a502:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a50a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a50e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a512:	e021      	b.n	800a558 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	ee07 3a90 	vmov	s15, r3
 800a51a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a51e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a5b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a526:	4b1e      	ldr	r3, [pc, #120]	; (800a5a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a52a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a52e:	ee07 3a90 	vmov	s15, r3
 800a532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a536:	ed97 6a02 	vldr	s12, [r7, #8]
 800a53a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a5b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a53e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a546:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a54a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a54e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a552:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a556:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a558:	4b11      	ldr	r3, [pc, #68]	; (800a5a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a55a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a55c:	0a5b      	lsrs	r3, r3, #9
 800a55e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a562:	3301      	adds	r3, #1
 800a564:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	ee07 3a90 	vmov	s15, r3
 800a56c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a570:	edd7 6a07 	vldr	s13, [r7, #28]
 800a574:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a578:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a57c:	ee17 3a90 	vmov	r3, s15
 800a580:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a582:	e005      	b.n	800a590 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a584:	2300      	movs	r3, #0
 800a586:	61bb      	str	r3, [r7, #24]
      break;
 800a588:	e002      	b.n	800a590 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a58a:	4b07      	ldr	r3, [pc, #28]	; (800a5a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a58c:	61bb      	str	r3, [r7, #24]
      break;
 800a58e:	bf00      	nop
  }

  return sysclockfreq;
 800a590:	69bb      	ldr	r3, [r7, #24]
}
 800a592:	4618      	mov	r0, r3
 800a594:	3724      	adds	r7, #36	; 0x24
 800a596:	46bd      	mov	sp, r7
 800a598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59c:	4770      	bx	lr
 800a59e:	bf00      	nop
 800a5a0:	58024400 	.word	0x58024400
 800a5a4:	03d09000 	.word	0x03d09000
 800a5a8:	003d0900 	.word	0x003d0900
 800a5ac:	02faf080 	.word	0x02faf080
 800a5b0:	46000000 	.word	0x46000000
 800a5b4:	4c742400 	.word	0x4c742400
 800a5b8:	4a742400 	.word	0x4a742400
 800a5bc:	4c3ebc20 	.word	0x4c3ebc20

0800a5c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b082      	sub	sp, #8
 800a5c4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a5c6:	f7ff fe81 	bl	800a2cc <HAL_RCC_GetSysClockFreq>
 800a5ca:	4602      	mov	r2, r0
 800a5cc:	4b10      	ldr	r3, [pc, #64]	; (800a610 <HAL_RCC_GetHCLKFreq+0x50>)
 800a5ce:	699b      	ldr	r3, [r3, #24]
 800a5d0:	0a1b      	lsrs	r3, r3, #8
 800a5d2:	f003 030f 	and.w	r3, r3, #15
 800a5d6:	490f      	ldr	r1, [pc, #60]	; (800a614 <HAL_RCC_GetHCLKFreq+0x54>)
 800a5d8:	5ccb      	ldrb	r3, [r1, r3]
 800a5da:	f003 031f 	and.w	r3, r3, #31
 800a5de:	fa22 f303 	lsr.w	r3, r2, r3
 800a5e2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a5e4:	4b0a      	ldr	r3, [pc, #40]	; (800a610 <HAL_RCC_GetHCLKFreq+0x50>)
 800a5e6:	699b      	ldr	r3, [r3, #24]
 800a5e8:	f003 030f 	and.w	r3, r3, #15
 800a5ec:	4a09      	ldr	r2, [pc, #36]	; (800a614 <HAL_RCC_GetHCLKFreq+0x54>)
 800a5ee:	5cd3      	ldrb	r3, [r2, r3]
 800a5f0:	f003 031f 	and.w	r3, r3, #31
 800a5f4:	687a      	ldr	r2, [r7, #4]
 800a5f6:	fa22 f303 	lsr.w	r3, r2, r3
 800a5fa:	4a07      	ldr	r2, [pc, #28]	; (800a618 <HAL_RCC_GetHCLKFreq+0x58>)
 800a5fc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a5fe:	4a07      	ldr	r2, [pc, #28]	; (800a61c <HAL_RCC_GetHCLKFreq+0x5c>)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a604:	4b04      	ldr	r3, [pc, #16]	; (800a618 <HAL_RCC_GetHCLKFreq+0x58>)
 800a606:	681b      	ldr	r3, [r3, #0]
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3708      	adds	r7, #8
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}
 800a610:	58024400 	.word	0x58024400
 800a614:	0801bb48 	.word	0x0801bb48
 800a618:	24000004 	.word	0x24000004
 800a61c:	24000000 	.word	0x24000000

0800a620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a624:	f7ff ffcc 	bl	800a5c0 <HAL_RCC_GetHCLKFreq>
 800a628:	4602      	mov	r2, r0
 800a62a:	4b06      	ldr	r3, [pc, #24]	; (800a644 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a62c:	69db      	ldr	r3, [r3, #28]
 800a62e:	091b      	lsrs	r3, r3, #4
 800a630:	f003 0307 	and.w	r3, r3, #7
 800a634:	4904      	ldr	r1, [pc, #16]	; (800a648 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a636:	5ccb      	ldrb	r3, [r1, r3]
 800a638:	f003 031f 	and.w	r3, r3, #31
 800a63c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a640:	4618      	mov	r0, r3
 800a642:	bd80      	pop	{r7, pc}
 800a644:	58024400 	.word	0x58024400
 800a648:	0801bb48 	.word	0x0801bb48

0800a64c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a650:	f7ff ffb6 	bl	800a5c0 <HAL_RCC_GetHCLKFreq>
 800a654:	4602      	mov	r2, r0
 800a656:	4b06      	ldr	r3, [pc, #24]	; (800a670 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a658:	69db      	ldr	r3, [r3, #28]
 800a65a:	0a1b      	lsrs	r3, r3, #8
 800a65c:	f003 0307 	and.w	r3, r3, #7
 800a660:	4904      	ldr	r1, [pc, #16]	; (800a674 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a662:	5ccb      	ldrb	r3, [r1, r3]
 800a664:	f003 031f 	and.w	r3, r3, #31
 800a668:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	bd80      	pop	{r7, pc}
 800a670:	58024400 	.word	0x58024400
 800a674:	0801bb48 	.word	0x0801bb48

0800a678 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a67c:	b0c6      	sub	sp, #280	; 0x118
 800a67e:	af00      	add	r7, sp, #0
 800a680:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a684:	2300      	movs	r3, #0
 800a686:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a68a:	2300      	movs	r3, #0
 800a68c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a698:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a69c:	2500      	movs	r5, #0
 800a69e:	ea54 0305 	orrs.w	r3, r4, r5
 800a6a2:	d049      	beq.n	800a738 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a6a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a6ae:	d02f      	beq.n	800a710 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a6b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a6b4:	d828      	bhi.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a6b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a6ba:	d01a      	beq.n	800a6f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a6bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a6c0:	d822      	bhi.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d003      	beq.n	800a6ce <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a6c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a6ca:	d007      	beq.n	800a6dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a6cc:	e01c      	b.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6ce:	4bab      	ldr	r3, [pc, #684]	; (800a97c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a6d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6d2:	4aaa      	ldr	r2, [pc, #680]	; (800a97c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a6d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a6d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a6da:	e01a      	b.n	800a712 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a6dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6e0:	3308      	adds	r3, #8
 800a6e2:	2102      	movs	r1, #2
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f002 fa49 	bl	800cb7c <RCCEx_PLL2_Config>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a6f0:	e00f      	b.n	800a712 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a6f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6f6:	3328      	adds	r3, #40	; 0x28
 800a6f8:	2102      	movs	r1, #2
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f002 faf0 	bl	800cce0 <RCCEx_PLL3_Config>
 800a700:	4603      	mov	r3, r0
 800a702:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a706:	e004      	b.n	800a712 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a708:	2301      	movs	r3, #1
 800a70a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a70e:	e000      	b.n	800a712 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a710:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a712:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a716:	2b00      	cmp	r3, #0
 800a718:	d10a      	bne.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a71a:	4b98      	ldr	r3, [pc, #608]	; (800a97c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a71c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a71e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a722:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a726:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a728:	4a94      	ldr	r2, [pc, #592]	; (800a97c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a72a:	430b      	orrs	r3, r1
 800a72c:	6513      	str	r3, [r2, #80]	; 0x50
 800a72e:	e003      	b.n	800a738 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a730:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a734:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a738:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a740:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800a744:	f04f 0900 	mov.w	r9, #0
 800a748:	ea58 0309 	orrs.w	r3, r8, r9
 800a74c:	d047      	beq.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a74e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a754:	2b04      	cmp	r3, #4
 800a756:	d82a      	bhi.n	800a7ae <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a758:	a201      	add	r2, pc, #4	; (adr r2, 800a760 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a75a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a75e:	bf00      	nop
 800a760:	0800a775 	.word	0x0800a775
 800a764:	0800a783 	.word	0x0800a783
 800a768:	0800a799 	.word	0x0800a799
 800a76c:	0800a7b7 	.word	0x0800a7b7
 800a770:	0800a7b7 	.word	0x0800a7b7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a774:	4b81      	ldr	r3, [pc, #516]	; (800a97c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a778:	4a80      	ldr	r2, [pc, #512]	; (800a97c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a77a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a77e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a780:	e01a      	b.n	800a7b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a782:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a786:	3308      	adds	r3, #8
 800a788:	2100      	movs	r1, #0
 800a78a:	4618      	mov	r0, r3
 800a78c:	f002 f9f6 	bl	800cb7c <RCCEx_PLL2_Config>
 800a790:	4603      	mov	r3, r0
 800a792:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a796:	e00f      	b.n	800a7b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a798:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a79c:	3328      	adds	r3, #40	; 0x28
 800a79e:	2100      	movs	r1, #0
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f002 fa9d 	bl	800cce0 <RCCEx_PLL3_Config>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a7ac:	e004      	b.n	800a7b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a7b4:	e000      	b.n	800a7b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a7b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d10a      	bne.n	800a7d6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a7c0:	4b6e      	ldr	r3, [pc, #440]	; (800a97c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a7c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7c4:	f023 0107 	bic.w	r1, r3, #7
 800a7c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7ce:	4a6b      	ldr	r2, [pc, #428]	; (800a97c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a7d0:	430b      	orrs	r3, r1
 800a7d2:	6513      	str	r3, [r2, #80]	; 0x50
 800a7d4:	e003      	b.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a7da:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a7de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e6:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800a7ea:	f04f 0b00 	mov.w	fp, #0
 800a7ee:	ea5a 030b 	orrs.w	r3, sl, fp
 800a7f2:	d05b      	beq.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a7f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a7fc:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a800:	d03b      	beq.n	800a87a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a802:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a806:	d834      	bhi.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a808:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a80c:	d037      	beq.n	800a87e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a80e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a812:	d82e      	bhi.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a814:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a818:	d033      	beq.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a81a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a81e:	d828      	bhi.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a820:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a824:	d01a      	beq.n	800a85c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800a826:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a82a:	d822      	bhi.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d003      	beq.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800a830:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a834:	d007      	beq.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800a836:	e01c      	b.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a838:	4b50      	ldr	r3, [pc, #320]	; (800a97c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a83a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a83c:	4a4f      	ldr	r2, [pc, #316]	; (800a97c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a83e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a842:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a844:	e01e      	b.n	800a884 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a846:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a84a:	3308      	adds	r3, #8
 800a84c:	2100      	movs	r1, #0
 800a84e:	4618      	mov	r0, r3
 800a850:	f002 f994 	bl	800cb7c <RCCEx_PLL2_Config>
 800a854:	4603      	mov	r3, r0
 800a856:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a85a:	e013      	b.n	800a884 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a85c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a860:	3328      	adds	r3, #40	; 0x28
 800a862:	2100      	movs	r1, #0
 800a864:	4618      	mov	r0, r3
 800a866:	f002 fa3b 	bl	800cce0 <RCCEx_PLL3_Config>
 800a86a:	4603      	mov	r3, r0
 800a86c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a870:	e008      	b.n	800a884 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a872:	2301      	movs	r3, #1
 800a874:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a878:	e004      	b.n	800a884 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a87a:	bf00      	nop
 800a87c:	e002      	b.n	800a884 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a87e:	bf00      	nop
 800a880:	e000      	b.n	800a884 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a882:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a884:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d10b      	bne.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a88c:	4b3b      	ldr	r3, [pc, #236]	; (800a97c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a88e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a890:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800a894:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a898:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a89c:	4a37      	ldr	r2, [pc, #220]	; (800a97c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a89e:	430b      	orrs	r3, r1
 800a8a0:	6593      	str	r3, [r2, #88]	; 0x58
 800a8a2:	e003      	b.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a8a8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a8ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b4:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800a8b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a8bc:	2300      	movs	r3, #0
 800a8be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a8c2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800a8c6:	460b      	mov	r3, r1
 800a8c8:	4313      	orrs	r3, r2
 800a8ca:	d05d      	beq.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a8cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a8d4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a8d8:	d03b      	beq.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800a8da:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a8de:	d834      	bhi.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a8e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a8e4:	d037      	beq.n	800a956 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800a8e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a8ea:	d82e      	bhi.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a8ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a8f0:	d033      	beq.n	800a95a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800a8f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a8f6:	d828      	bhi.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a8f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a8fc:	d01a      	beq.n	800a934 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800a8fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a902:	d822      	bhi.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a904:	2b00      	cmp	r3, #0
 800a906:	d003      	beq.n	800a910 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a908:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a90c:	d007      	beq.n	800a91e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a90e:	e01c      	b.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a910:	4b1a      	ldr	r3, [pc, #104]	; (800a97c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a914:	4a19      	ldr	r2, [pc, #100]	; (800a97c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a916:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a91a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a91c:	e01e      	b.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a91e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a922:	3308      	adds	r3, #8
 800a924:	2100      	movs	r1, #0
 800a926:	4618      	mov	r0, r3
 800a928:	f002 f928 	bl	800cb7c <RCCEx_PLL2_Config>
 800a92c:	4603      	mov	r3, r0
 800a92e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a932:	e013      	b.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a938:	3328      	adds	r3, #40	; 0x28
 800a93a:	2100      	movs	r1, #0
 800a93c:	4618      	mov	r0, r3
 800a93e:	f002 f9cf 	bl	800cce0 <RCCEx_PLL3_Config>
 800a942:	4603      	mov	r3, r0
 800a944:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a948:	e008      	b.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a94a:	2301      	movs	r3, #1
 800a94c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a950:	e004      	b.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a952:	bf00      	nop
 800a954:	e002      	b.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a956:	bf00      	nop
 800a958:	e000      	b.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a95a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a95c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a960:	2b00      	cmp	r3, #0
 800a962:	d10d      	bne.n	800a980 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a964:	4b05      	ldr	r3, [pc, #20]	; (800a97c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a968:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800a96c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a970:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a974:	4a01      	ldr	r2, [pc, #4]	; (800a97c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a976:	430b      	orrs	r3, r1
 800a978:	6593      	str	r3, [r2, #88]	; 0x58
 800a97a:	e005      	b.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800a97c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a980:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a984:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a988:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a990:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800a994:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a998:	2300      	movs	r3, #0
 800a99a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a99e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800a9a2:	460b      	mov	r3, r1
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	d03a      	beq.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800a9a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9ae:	2b30      	cmp	r3, #48	; 0x30
 800a9b0:	d01f      	beq.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800a9b2:	2b30      	cmp	r3, #48	; 0x30
 800a9b4:	d819      	bhi.n	800a9ea <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a9b6:	2b20      	cmp	r3, #32
 800a9b8:	d00c      	beq.n	800a9d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a9ba:	2b20      	cmp	r3, #32
 800a9bc:	d815      	bhi.n	800a9ea <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d019      	beq.n	800a9f6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a9c2:	2b10      	cmp	r3, #16
 800a9c4:	d111      	bne.n	800a9ea <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9c6:	4baa      	ldr	r3, [pc, #680]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a9c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ca:	4aa9      	ldr	r2, [pc, #676]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a9cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a9d2:	e011      	b.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a9d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9d8:	3308      	adds	r3, #8
 800a9da:	2102      	movs	r1, #2
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f002 f8cd 	bl	800cb7c <RCCEx_PLL2_Config>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a9e8:	e006      	b.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a9f0:	e002      	b.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a9f2:	bf00      	nop
 800a9f4:	e000      	b.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a9f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d10a      	bne.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800aa00:	4b9b      	ldr	r3, [pc, #620]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aa02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa04:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800aa08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa0e:	4a98      	ldr	r2, [pc, #608]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aa10:	430b      	orrs	r3, r1
 800aa12:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aa14:	e003      	b.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa16:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa1a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800aa1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa26:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800aa2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800aa2e:	2300      	movs	r3, #0
 800aa30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800aa34:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800aa38:	460b      	mov	r3, r1
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	d051      	beq.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800aa3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa48:	d035      	beq.n	800aab6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800aa4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa4e:	d82e      	bhi.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0x436>
 800aa50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aa54:	d031      	beq.n	800aaba <HAL_RCCEx_PeriphCLKConfig+0x442>
 800aa56:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aa5a:	d828      	bhi.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0x436>
 800aa5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa60:	d01a      	beq.n	800aa98 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800aa62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa66:	d822      	bhi.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0x436>
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d003      	beq.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800aa6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa70:	d007      	beq.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800aa72:	e01c      	b.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa74:	4b7e      	ldr	r3, [pc, #504]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aa76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa78:	4a7d      	ldr	r2, [pc, #500]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aa7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800aa80:	e01c      	b.n	800aabc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa86:	3308      	adds	r3, #8
 800aa88:	2100      	movs	r1, #0
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f002 f876 	bl	800cb7c <RCCEx_PLL2_Config>
 800aa90:	4603      	mov	r3, r0
 800aa92:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800aa96:	e011      	b.n	800aabc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa9c:	3328      	adds	r3, #40	; 0x28
 800aa9e:	2100      	movs	r1, #0
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f002 f91d 	bl	800cce0 <RCCEx_PLL3_Config>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800aaac:	e006      	b.n	800aabc <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aaae:	2301      	movs	r3, #1
 800aab0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aab4:	e002      	b.n	800aabc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800aab6:	bf00      	nop
 800aab8:	e000      	b.n	800aabc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800aaba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aabc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d10a      	bne.n	800aada <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800aac4:	4b6a      	ldr	r3, [pc, #424]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aac8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800aacc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aad2:	4a67      	ldr	r2, [pc, #412]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aad4:	430b      	orrs	r3, r1
 800aad6:	6513      	str	r3, [r2, #80]	; 0x50
 800aad8:	e003      	b.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aada:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aade:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800aae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaea:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800aaee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aaf8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800aafc:	460b      	mov	r3, r1
 800aafe:	4313      	orrs	r3, r2
 800ab00:	d053      	beq.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ab02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ab0c:	d033      	beq.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800ab0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ab12:	d82c      	bhi.n	800ab6e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ab14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ab18:	d02f      	beq.n	800ab7a <HAL_RCCEx_PeriphCLKConfig+0x502>
 800ab1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ab1e:	d826      	bhi.n	800ab6e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ab20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ab24:	d02b      	beq.n	800ab7e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800ab26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ab2a:	d820      	bhi.n	800ab6e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ab2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab30:	d012      	beq.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800ab32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab36:	d81a      	bhi.n	800ab6e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d022      	beq.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800ab3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab40:	d115      	bne.n	800ab6e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ab42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab46:	3308      	adds	r3, #8
 800ab48:	2101      	movs	r1, #1
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f002 f816 	bl	800cb7c <RCCEx_PLL2_Config>
 800ab50:	4603      	mov	r3, r0
 800ab52:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ab56:	e015      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ab58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab5c:	3328      	adds	r3, #40	; 0x28
 800ab5e:	2101      	movs	r1, #1
 800ab60:	4618      	mov	r0, r3
 800ab62:	f002 f8bd 	bl	800cce0 <RCCEx_PLL3_Config>
 800ab66:	4603      	mov	r3, r0
 800ab68:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ab6c:	e00a      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab6e:	2301      	movs	r3, #1
 800ab70:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ab74:	e006      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ab76:	bf00      	nop
 800ab78:	e004      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ab7a:	bf00      	nop
 800ab7c:	e002      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ab7e:	bf00      	nop
 800ab80:	e000      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ab82:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d10a      	bne.n	800aba2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ab8c:	4b38      	ldr	r3, [pc, #224]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ab8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab90:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800ab94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab9a:	4a35      	ldr	r2, [pc, #212]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ab9c:	430b      	orrs	r3, r1
 800ab9e:	6513      	str	r3, [r2, #80]	; 0x50
 800aba0:	e003      	b.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aba2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aba6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800abaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800abb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800abba:	2300      	movs	r3, #0
 800abbc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800abc0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800abc4:	460b      	mov	r3, r1
 800abc6:	4313      	orrs	r3, r2
 800abc8:	d058      	beq.n	800ac7c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800abca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800abd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800abd6:	d033      	beq.n	800ac40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800abd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800abdc:	d82c      	bhi.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800abde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abe2:	d02f      	beq.n	800ac44 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800abe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abe8:	d826      	bhi.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800abea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800abee:	d02b      	beq.n	800ac48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800abf0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800abf4:	d820      	bhi.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800abf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abfa:	d012      	beq.n	800ac22 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800abfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac00:	d81a      	bhi.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d022      	beq.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800ac06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac0a:	d115      	bne.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ac0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac10:	3308      	adds	r3, #8
 800ac12:	2101      	movs	r1, #1
 800ac14:	4618      	mov	r0, r3
 800ac16:	f001 ffb1 	bl	800cb7c <RCCEx_PLL2_Config>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ac20:	e015      	b.n	800ac4e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ac22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac26:	3328      	adds	r3, #40	; 0x28
 800ac28:	2101      	movs	r1, #1
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f002 f858 	bl	800cce0 <RCCEx_PLL3_Config>
 800ac30:	4603      	mov	r3, r0
 800ac32:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ac36:	e00a      	b.n	800ac4e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ac38:	2301      	movs	r3, #1
 800ac3a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ac3e:	e006      	b.n	800ac4e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ac40:	bf00      	nop
 800ac42:	e004      	b.n	800ac4e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ac44:	bf00      	nop
 800ac46:	e002      	b.n	800ac4e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ac48:	bf00      	nop
 800ac4a:	e000      	b.n	800ac4e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ac4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac4e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d10e      	bne.n	800ac74 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ac56:	4b06      	ldr	r3, [pc, #24]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac5a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800ac5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ac66:	4a02      	ldr	r2, [pc, #8]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac68:	430b      	orrs	r3, r1
 800ac6a:	6593      	str	r3, [r2, #88]	; 0x58
 800ac6c:	e006      	b.n	800ac7c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800ac6e:	bf00      	nop
 800ac70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac78:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ac7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac84:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800ac88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ac92:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800ac96:	460b      	mov	r3, r1
 800ac98:	4313      	orrs	r3, r2
 800ac9a:	d037      	beq.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800ac9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aca0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aca2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aca6:	d00e      	beq.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800aca8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acac:	d816      	bhi.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x664>
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d018      	beq.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800acb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800acb6:	d111      	bne.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acb8:	4bc4      	ldr	r3, [pc, #784]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800acba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acbc:	4ac3      	ldr	r2, [pc, #780]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800acbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800acc4:	e00f      	b.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800acc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acca:	3308      	adds	r3, #8
 800accc:	2101      	movs	r1, #1
 800acce:	4618      	mov	r0, r3
 800acd0:	f001 ff54 	bl	800cb7c <RCCEx_PLL2_Config>
 800acd4:	4603      	mov	r3, r0
 800acd6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800acda:	e004      	b.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800acdc:	2301      	movs	r3, #1
 800acde:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ace2:	e000      	b.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800ace4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ace6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800acea:	2b00      	cmp	r3, #0
 800acec:	d10a      	bne.n	800ad04 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800acee:	4bb7      	ldr	r3, [pc, #732]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800acf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acf2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800acf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acfc:	4ab3      	ldr	r2, [pc, #716]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800acfe:	430b      	orrs	r3, r1
 800ad00:	6513      	str	r3, [r2, #80]	; 0x50
 800ad02:	e003      	b.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad08:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ad0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad14:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800ad18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ad22:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800ad26:	460b      	mov	r3, r1
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	d039      	beq.n	800ada0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800ad2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad32:	2b03      	cmp	r3, #3
 800ad34:	d81c      	bhi.n	800ad70 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800ad36:	a201      	add	r2, pc, #4	; (adr r2, 800ad3c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800ad38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad3c:	0800ad79 	.word	0x0800ad79
 800ad40:	0800ad4d 	.word	0x0800ad4d
 800ad44:	0800ad5b 	.word	0x0800ad5b
 800ad48:	0800ad79 	.word	0x0800ad79
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad4c:	4b9f      	ldr	r3, [pc, #636]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad50:	4a9e      	ldr	r2, [pc, #632]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ad58:	e00f      	b.n	800ad7a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ad5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad5e:	3308      	adds	r3, #8
 800ad60:	2102      	movs	r1, #2
 800ad62:	4618      	mov	r0, r3
 800ad64:	f001 ff0a 	bl	800cb7c <RCCEx_PLL2_Config>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ad6e:	e004      	b.n	800ad7a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ad70:	2301      	movs	r3, #1
 800ad72:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ad76:	e000      	b.n	800ad7a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800ad78:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad7a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d10a      	bne.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ad82:	4b92      	ldr	r3, [pc, #584]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad86:	f023 0103 	bic.w	r1, r3, #3
 800ad8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad90:	4a8e      	ldr	r2, [pc, #568]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad92:	430b      	orrs	r3, r1
 800ad94:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ad96:	e003      	b.n	800ada0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad9c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ada0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ada4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800adac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800adb0:	2300      	movs	r3, #0
 800adb2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800adb6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800adba:	460b      	mov	r3, r1
 800adbc:	4313      	orrs	r3, r2
 800adbe:	f000 8099 	beq.w	800aef4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800adc2:	4b83      	ldr	r3, [pc, #524]	; (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4a82      	ldr	r2, [pc, #520]	; (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800adc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800adcc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800adce:	f7f8 fd65 	bl	800389c <HAL_GetTick>
 800add2:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800add6:	e00b      	b.n	800adf0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800add8:	f7f8 fd60 	bl	800389c <HAL_GetTick>
 800addc:	4602      	mov	r2, r0
 800adde:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ade2:	1ad3      	subs	r3, r2, r3
 800ade4:	2b64      	cmp	r3, #100	; 0x64
 800ade6:	d903      	bls.n	800adf0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800ade8:	2303      	movs	r3, #3
 800adea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800adee:	e005      	b.n	800adfc <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800adf0:	4b77      	ldr	r3, [pc, #476]	; (800afd0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d0ed      	beq.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800adfc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d173      	bne.n	800aeec <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ae04:	4b71      	ldr	r3, [pc, #452]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ae08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ae10:	4053      	eors	r3, r2
 800ae12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d015      	beq.n	800ae46 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ae1a:	4b6c      	ldr	r3, [pc, #432]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae22:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ae26:	4b69      	ldr	r3, [pc, #420]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae2a:	4a68      	ldr	r2, [pc, #416]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae30:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ae32:	4b66      	ldr	r3, [pc, #408]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae36:	4a65      	ldr	r2, [pc, #404]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ae3c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ae3e:	4a63      	ldr	r2, [pc, #396]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ae44:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ae46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ae4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae52:	d118      	bne.n	800ae86 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae54:	f7f8 fd22 	bl	800389c <HAL_GetTick>
 800ae58:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ae5c:	e00d      	b.n	800ae7a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae5e:	f7f8 fd1d 	bl	800389c <HAL_GetTick>
 800ae62:	4602      	mov	r2, r0
 800ae64:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ae68:	1ad2      	subs	r2, r2, r3
 800ae6a:	f241 3388 	movw	r3, #5000	; 0x1388
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d903      	bls.n	800ae7a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800ae72:	2303      	movs	r3, #3
 800ae74:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800ae78:	e005      	b.n	800ae86 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ae7a:	4b54      	ldr	r3, [pc, #336]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae7e:	f003 0302 	and.w	r3, r3, #2
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d0eb      	beq.n	800ae5e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800ae86:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d129      	bne.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ae8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ae96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae9e:	d10e      	bne.n	800aebe <HAL_RCCEx_PeriphCLKConfig+0x846>
 800aea0:	4b4a      	ldr	r3, [pc, #296]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aea2:	691b      	ldr	r3, [r3, #16]
 800aea4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800aea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aeb0:	091a      	lsrs	r2, r3, #4
 800aeb2:	4b48      	ldr	r3, [pc, #288]	; (800afd4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800aeb4:	4013      	ands	r3, r2
 800aeb6:	4a45      	ldr	r2, [pc, #276]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aeb8:	430b      	orrs	r3, r1
 800aeba:	6113      	str	r3, [r2, #16]
 800aebc:	e005      	b.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0x852>
 800aebe:	4b43      	ldr	r3, [pc, #268]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aec0:	691b      	ldr	r3, [r3, #16]
 800aec2:	4a42      	ldr	r2, [pc, #264]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aec4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800aec8:	6113      	str	r3, [r2, #16]
 800aeca:	4b40      	ldr	r3, [pc, #256]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aecc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800aece:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aed2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aed6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aeda:	4a3c      	ldr	r2, [pc, #240]	; (800afcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aedc:	430b      	orrs	r3, r1
 800aede:	6713      	str	r3, [r2, #112]	; 0x70
 800aee0:	e008      	b.n	800aef4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800aee2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aee6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800aeea:	e003      	b.n	800aef4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aef0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800aef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefc:	f002 0301 	and.w	r3, r2, #1
 800af00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800af04:	2300      	movs	r3, #0
 800af06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800af0a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800af0e:	460b      	mov	r3, r1
 800af10:	4313      	orrs	r3, r2
 800af12:	f000 808f 	beq.w	800b034 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800af16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af1c:	2b28      	cmp	r3, #40	; 0x28
 800af1e:	d871      	bhi.n	800b004 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800af20:	a201      	add	r2, pc, #4	; (adr r2, 800af28 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800af22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af26:	bf00      	nop
 800af28:	0800b00d 	.word	0x0800b00d
 800af2c:	0800b005 	.word	0x0800b005
 800af30:	0800b005 	.word	0x0800b005
 800af34:	0800b005 	.word	0x0800b005
 800af38:	0800b005 	.word	0x0800b005
 800af3c:	0800b005 	.word	0x0800b005
 800af40:	0800b005 	.word	0x0800b005
 800af44:	0800b005 	.word	0x0800b005
 800af48:	0800afd9 	.word	0x0800afd9
 800af4c:	0800b005 	.word	0x0800b005
 800af50:	0800b005 	.word	0x0800b005
 800af54:	0800b005 	.word	0x0800b005
 800af58:	0800b005 	.word	0x0800b005
 800af5c:	0800b005 	.word	0x0800b005
 800af60:	0800b005 	.word	0x0800b005
 800af64:	0800b005 	.word	0x0800b005
 800af68:	0800afef 	.word	0x0800afef
 800af6c:	0800b005 	.word	0x0800b005
 800af70:	0800b005 	.word	0x0800b005
 800af74:	0800b005 	.word	0x0800b005
 800af78:	0800b005 	.word	0x0800b005
 800af7c:	0800b005 	.word	0x0800b005
 800af80:	0800b005 	.word	0x0800b005
 800af84:	0800b005 	.word	0x0800b005
 800af88:	0800b00d 	.word	0x0800b00d
 800af8c:	0800b005 	.word	0x0800b005
 800af90:	0800b005 	.word	0x0800b005
 800af94:	0800b005 	.word	0x0800b005
 800af98:	0800b005 	.word	0x0800b005
 800af9c:	0800b005 	.word	0x0800b005
 800afa0:	0800b005 	.word	0x0800b005
 800afa4:	0800b005 	.word	0x0800b005
 800afa8:	0800b00d 	.word	0x0800b00d
 800afac:	0800b005 	.word	0x0800b005
 800afb0:	0800b005 	.word	0x0800b005
 800afb4:	0800b005 	.word	0x0800b005
 800afb8:	0800b005 	.word	0x0800b005
 800afbc:	0800b005 	.word	0x0800b005
 800afc0:	0800b005 	.word	0x0800b005
 800afc4:	0800b005 	.word	0x0800b005
 800afc8:	0800b00d 	.word	0x0800b00d
 800afcc:	58024400 	.word	0x58024400
 800afd0:	58024800 	.word	0x58024800
 800afd4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800afd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afdc:	3308      	adds	r3, #8
 800afde:	2101      	movs	r1, #1
 800afe0:	4618      	mov	r0, r3
 800afe2:	f001 fdcb 	bl	800cb7c <RCCEx_PLL2_Config>
 800afe6:	4603      	mov	r3, r0
 800afe8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800afec:	e00f      	b.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800afee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aff2:	3328      	adds	r3, #40	; 0x28
 800aff4:	2101      	movs	r1, #1
 800aff6:	4618      	mov	r0, r3
 800aff8:	f001 fe72 	bl	800cce0 <RCCEx_PLL3_Config>
 800affc:	4603      	mov	r3, r0
 800affe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b002:	e004      	b.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b004:	2301      	movs	r3, #1
 800b006:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b00a:	e000      	b.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800b00c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b00e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b012:	2b00      	cmp	r3, #0
 800b014:	d10a      	bne.n	800b02c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b016:	4bbf      	ldr	r3, [pc, #764]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b01a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b01e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b022:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b024:	4abb      	ldr	r2, [pc, #748]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b026:	430b      	orrs	r3, r1
 800b028:	6553      	str	r3, [r2, #84]	; 0x54
 800b02a:	e003      	b.n	800b034 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b02c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b030:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b034:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b03c:	f002 0302 	and.w	r3, r2, #2
 800b040:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b044:	2300      	movs	r3, #0
 800b046:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b04a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b04e:	460b      	mov	r3, r1
 800b050:	4313      	orrs	r3, r2
 800b052:	d041      	beq.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b054:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b058:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b05a:	2b05      	cmp	r3, #5
 800b05c:	d824      	bhi.n	800b0a8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800b05e:	a201      	add	r2, pc, #4	; (adr r2, 800b064 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800b060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b064:	0800b0b1 	.word	0x0800b0b1
 800b068:	0800b07d 	.word	0x0800b07d
 800b06c:	0800b093 	.word	0x0800b093
 800b070:	0800b0b1 	.word	0x0800b0b1
 800b074:	0800b0b1 	.word	0x0800b0b1
 800b078:	0800b0b1 	.word	0x0800b0b1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b07c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b080:	3308      	adds	r3, #8
 800b082:	2101      	movs	r1, #1
 800b084:	4618      	mov	r0, r3
 800b086:	f001 fd79 	bl	800cb7c <RCCEx_PLL2_Config>
 800b08a:	4603      	mov	r3, r0
 800b08c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b090:	e00f      	b.n	800b0b2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b092:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b096:	3328      	adds	r3, #40	; 0x28
 800b098:	2101      	movs	r1, #1
 800b09a:	4618      	mov	r0, r3
 800b09c:	f001 fe20 	bl	800cce0 <RCCEx_PLL3_Config>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b0a6:	e004      	b.n	800b0b2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b0ae:	e000      	b.n	800b0b2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800b0b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d10a      	bne.n	800b0d0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b0ba:	4b96      	ldr	r3, [pc, #600]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b0bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0be:	f023 0107 	bic.w	r1, r3, #7
 800b0c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0c8:	4a92      	ldr	r2, [pc, #584]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b0ca:	430b      	orrs	r3, r1
 800b0cc:	6553      	str	r3, [r2, #84]	; 0x54
 800b0ce:	e003      	b.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0d4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b0d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e0:	f002 0304 	and.w	r3, r2, #4
 800b0e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b0ee:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b0f2:	460b      	mov	r3, r1
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	d044      	beq.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b0f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b100:	2b05      	cmp	r3, #5
 800b102:	d825      	bhi.n	800b150 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800b104:	a201      	add	r2, pc, #4	; (adr r2, 800b10c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800b106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b10a:	bf00      	nop
 800b10c:	0800b159 	.word	0x0800b159
 800b110:	0800b125 	.word	0x0800b125
 800b114:	0800b13b 	.word	0x0800b13b
 800b118:	0800b159 	.word	0x0800b159
 800b11c:	0800b159 	.word	0x0800b159
 800b120:	0800b159 	.word	0x0800b159
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b124:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b128:	3308      	adds	r3, #8
 800b12a:	2101      	movs	r1, #1
 800b12c:	4618      	mov	r0, r3
 800b12e:	f001 fd25 	bl	800cb7c <RCCEx_PLL2_Config>
 800b132:	4603      	mov	r3, r0
 800b134:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b138:	e00f      	b.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b13a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b13e:	3328      	adds	r3, #40	; 0x28
 800b140:	2101      	movs	r1, #1
 800b142:	4618      	mov	r0, r3
 800b144:	f001 fdcc 	bl	800cce0 <RCCEx_PLL3_Config>
 800b148:	4603      	mov	r3, r0
 800b14a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b14e:	e004      	b.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b150:	2301      	movs	r3, #1
 800b152:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b156:	e000      	b.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800b158:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b15a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d10b      	bne.n	800b17a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b162:	4b6c      	ldr	r3, [pc, #432]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b166:	f023 0107 	bic.w	r1, r3, #7
 800b16a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b16e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b172:	4a68      	ldr	r2, [pc, #416]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b174:	430b      	orrs	r3, r1
 800b176:	6593      	str	r3, [r2, #88]	; 0x58
 800b178:	e003      	b.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b17a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b17e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b182:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b18a:	f002 0320 	and.w	r3, r2, #32
 800b18e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b192:	2300      	movs	r3, #0
 800b194:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b198:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b19c:	460b      	mov	r3, r1
 800b19e:	4313      	orrs	r3, r2
 800b1a0:	d055      	beq.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b1a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b1ae:	d033      	beq.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800b1b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b1b4:	d82c      	bhi.n	800b210 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b1b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1ba:	d02f      	beq.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b1bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1c0:	d826      	bhi.n	800b210 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b1c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b1c6:	d02b      	beq.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b1c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b1cc:	d820      	bhi.n	800b210 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b1ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1d2:	d012      	beq.n	800b1fa <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800b1d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1d8:	d81a      	bhi.n	800b210 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d022      	beq.n	800b224 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b1de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b1e2:	d115      	bne.n	800b210 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b1e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1e8:	3308      	adds	r3, #8
 800b1ea:	2100      	movs	r1, #0
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f001 fcc5 	bl	800cb7c <RCCEx_PLL2_Config>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b1f8:	e015      	b.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b1fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1fe:	3328      	adds	r3, #40	; 0x28
 800b200:	2102      	movs	r1, #2
 800b202:	4618      	mov	r0, r3
 800b204:	f001 fd6c 	bl	800cce0 <RCCEx_PLL3_Config>
 800b208:	4603      	mov	r3, r0
 800b20a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b20e:	e00a      	b.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b210:	2301      	movs	r3, #1
 800b212:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b216:	e006      	b.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b218:	bf00      	nop
 800b21a:	e004      	b.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b21c:	bf00      	nop
 800b21e:	e002      	b.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b220:	bf00      	nop
 800b222:	e000      	b.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b224:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b226:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d10b      	bne.n	800b246 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b22e:	4b39      	ldr	r3, [pc, #228]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b232:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b236:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b23a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b23e:	4a35      	ldr	r2, [pc, #212]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b240:	430b      	orrs	r3, r1
 800b242:	6553      	str	r3, [r2, #84]	; 0x54
 800b244:	e003      	b.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b246:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b24a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b24e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b256:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b25a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b25e:	2300      	movs	r3, #0
 800b260:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b264:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b268:	460b      	mov	r3, r1
 800b26a:	4313      	orrs	r3, r2
 800b26c:	d058      	beq.n	800b320 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b26e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b272:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b276:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b27a:	d033      	beq.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b27c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b280:	d82c      	bhi.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b286:	d02f      	beq.n	800b2e8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b28c:	d826      	bhi.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b28e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b292:	d02b      	beq.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b294:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b298:	d820      	bhi.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b29a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b29e:	d012      	beq.n	800b2c6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800b2a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2a4:	d81a      	bhi.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d022      	beq.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b2aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2ae:	d115      	bne.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b2b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2b4:	3308      	adds	r3, #8
 800b2b6:	2100      	movs	r1, #0
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f001 fc5f 	bl	800cb7c <RCCEx_PLL2_Config>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b2c4:	e015      	b.n	800b2f2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b2c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2ca:	3328      	adds	r3, #40	; 0x28
 800b2cc:	2102      	movs	r1, #2
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f001 fd06 	bl	800cce0 <RCCEx_PLL3_Config>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b2da:	e00a      	b.n	800b2f2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2dc:	2301      	movs	r3, #1
 800b2de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b2e2:	e006      	b.n	800b2f2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b2e4:	bf00      	nop
 800b2e6:	e004      	b.n	800b2f2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b2e8:	bf00      	nop
 800b2ea:	e002      	b.n	800b2f2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b2ec:	bf00      	nop
 800b2ee:	e000      	b.n	800b2f2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b2f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d10e      	bne.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b2fa:	4b06      	ldr	r3, [pc, #24]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b2fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2fe:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b302:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b306:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b30a:	4a02      	ldr	r2, [pc, #8]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b30c:	430b      	orrs	r3, r1
 800b30e:	6593      	str	r3, [r2, #88]	; 0x58
 800b310:	e006      	b.n	800b320 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800b312:	bf00      	nop
 800b314:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b318:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b31c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b320:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b328:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b32c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b330:	2300      	movs	r3, #0
 800b332:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b336:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b33a:	460b      	mov	r3, r1
 800b33c:	4313      	orrs	r3, r2
 800b33e:	d055      	beq.n	800b3ec <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b340:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b344:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b348:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b34c:	d033      	beq.n	800b3b6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800b34e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b352:	d82c      	bhi.n	800b3ae <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b354:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b358:	d02f      	beq.n	800b3ba <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b35a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b35e:	d826      	bhi.n	800b3ae <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b360:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b364:	d02b      	beq.n	800b3be <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b366:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b36a:	d820      	bhi.n	800b3ae <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b36c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b370:	d012      	beq.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800b372:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b376:	d81a      	bhi.n	800b3ae <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d022      	beq.n	800b3c2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b37c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b380:	d115      	bne.n	800b3ae <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b382:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b386:	3308      	adds	r3, #8
 800b388:	2100      	movs	r1, #0
 800b38a:	4618      	mov	r0, r3
 800b38c:	f001 fbf6 	bl	800cb7c <RCCEx_PLL2_Config>
 800b390:	4603      	mov	r3, r0
 800b392:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b396:	e015      	b.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b398:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b39c:	3328      	adds	r3, #40	; 0x28
 800b39e:	2102      	movs	r1, #2
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f001 fc9d 	bl	800cce0 <RCCEx_PLL3_Config>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b3ac:	e00a      	b.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b3b4:	e006      	b.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b3b6:	bf00      	nop
 800b3b8:	e004      	b.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b3ba:	bf00      	nop
 800b3bc:	e002      	b.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b3be:	bf00      	nop
 800b3c0:	e000      	b.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b3c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d10b      	bne.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b3cc:	4ba0      	ldr	r3, [pc, #640]	; (800b650 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b3ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3d0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b3d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b3dc:	4a9c      	ldr	r2, [pc, #624]	; (800b650 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b3de:	430b      	orrs	r3, r1
 800b3e0:	6593      	str	r3, [r2, #88]	; 0x58
 800b3e2:	e003      	b.n	800b3ec <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3e8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b3ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f4:	f002 0308 	and.w	r3, r2, #8
 800b3f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b402:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b406:	460b      	mov	r3, r1
 800b408:	4313      	orrs	r3, r2
 800b40a:	d01e      	beq.n	800b44a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800b40c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b410:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b414:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b418:	d10c      	bne.n	800b434 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b41a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b41e:	3328      	adds	r3, #40	; 0x28
 800b420:	2102      	movs	r1, #2
 800b422:	4618      	mov	r0, r3
 800b424:	f001 fc5c 	bl	800cce0 <RCCEx_PLL3_Config>
 800b428:	4603      	mov	r3, r0
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d002      	beq.n	800b434 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800b42e:	2301      	movs	r3, #1
 800b430:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b434:	4b86      	ldr	r3, [pc, #536]	; (800b650 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b438:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b43c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b440:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b444:	4a82      	ldr	r2, [pc, #520]	; (800b650 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b446:	430b      	orrs	r3, r1
 800b448:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b44a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b452:	f002 0310 	and.w	r3, r2, #16
 800b456:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b45a:	2300      	movs	r3, #0
 800b45c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b460:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b464:	460b      	mov	r3, r1
 800b466:	4313      	orrs	r3, r2
 800b468:	d01e      	beq.n	800b4a8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b46a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b46e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b476:	d10c      	bne.n	800b492 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b478:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b47c:	3328      	adds	r3, #40	; 0x28
 800b47e:	2102      	movs	r1, #2
 800b480:	4618      	mov	r0, r3
 800b482:	f001 fc2d 	bl	800cce0 <RCCEx_PLL3_Config>
 800b486:	4603      	mov	r3, r0
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d002      	beq.n	800b492 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800b48c:	2301      	movs	r3, #1
 800b48e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b492:	4b6f      	ldr	r3, [pc, #444]	; (800b650 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b496:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b49a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b49e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b4a2:	4a6b      	ldr	r2, [pc, #428]	; (800b650 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b4a4:	430b      	orrs	r3, r1
 800b4a6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b4a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b4b4:	67bb      	str	r3, [r7, #120]	; 0x78
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b4ba:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b4be:	460b      	mov	r3, r1
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	d03e      	beq.n	800b542 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b4c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b4cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4d0:	d022      	beq.n	800b518 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b4d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4d6:	d81b      	bhi.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d003      	beq.n	800b4e4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800b4dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4e0:	d00b      	beq.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800b4e2:	e015      	b.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b4e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4e8:	3308      	adds	r3, #8
 800b4ea:	2100      	movs	r1, #0
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f001 fb45 	bl	800cb7c <RCCEx_PLL2_Config>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b4f8:	e00f      	b.n	800b51a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b4fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4fe:	3328      	adds	r3, #40	; 0x28
 800b500:	2102      	movs	r1, #2
 800b502:	4618      	mov	r0, r3
 800b504:	f001 fbec 	bl	800cce0 <RCCEx_PLL3_Config>
 800b508:	4603      	mov	r3, r0
 800b50a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b50e:	e004      	b.n	800b51a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b510:	2301      	movs	r3, #1
 800b512:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b516:	e000      	b.n	800b51a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800b518:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b51a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d10b      	bne.n	800b53a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b522:	4b4b      	ldr	r3, [pc, #300]	; (800b650 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b526:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b52a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b52e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b532:	4a47      	ldr	r2, [pc, #284]	; (800b650 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b534:	430b      	orrs	r3, r1
 800b536:	6593      	str	r3, [r2, #88]	; 0x58
 800b538:	e003      	b.n	800b542 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b53a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b53e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b542:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b54a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b54e:	673b      	str	r3, [r7, #112]	; 0x70
 800b550:	2300      	movs	r3, #0
 800b552:	677b      	str	r3, [r7, #116]	; 0x74
 800b554:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b558:	460b      	mov	r3, r1
 800b55a:	4313      	orrs	r3, r2
 800b55c:	d03b      	beq.n	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b55e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b562:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b566:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b56a:	d01f      	beq.n	800b5ac <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b56c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b570:	d818      	bhi.n	800b5a4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800b572:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b576:	d003      	beq.n	800b580 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800b578:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b57c:	d007      	beq.n	800b58e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800b57e:	e011      	b.n	800b5a4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b580:	4b33      	ldr	r3, [pc, #204]	; (800b650 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b584:	4a32      	ldr	r2, [pc, #200]	; (800b650 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b586:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b58a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b58c:	e00f      	b.n	800b5ae <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b58e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b592:	3328      	adds	r3, #40	; 0x28
 800b594:	2101      	movs	r1, #1
 800b596:	4618      	mov	r0, r3
 800b598:	f001 fba2 	bl	800cce0 <RCCEx_PLL3_Config>
 800b59c:	4603      	mov	r3, r0
 800b59e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800b5a2:	e004      	b.n	800b5ae <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b5aa:	e000      	b.n	800b5ae <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800b5ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5ae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d10b      	bne.n	800b5ce <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b5b6:	4b26      	ldr	r3, [pc, #152]	; (800b650 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b5b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5ba:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b5be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b5c6:	4a22      	ldr	r2, [pc, #136]	; (800b650 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b5c8:	430b      	orrs	r3, r1
 800b5ca:	6553      	str	r3, [r2, #84]	; 0x54
 800b5cc:	e003      	b.n	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5ce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5d2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b5d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5de:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b5e2:	66bb      	str	r3, [r7, #104]	; 0x68
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b5e8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b5ec:	460b      	mov	r3, r1
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	d034      	beq.n	800b65c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b5f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d003      	beq.n	800b604 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800b5fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b600:	d007      	beq.n	800b612 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800b602:	e011      	b.n	800b628 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b604:	4b12      	ldr	r3, [pc, #72]	; (800b650 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b608:	4a11      	ldr	r2, [pc, #68]	; (800b650 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b60a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b60e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b610:	e00e      	b.n	800b630 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b616:	3308      	adds	r3, #8
 800b618:	2102      	movs	r1, #2
 800b61a:	4618      	mov	r0, r3
 800b61c:	f001 faae 	bl	800cb7c <RCCEx_PLL2_Config>
 800b620:	4603      	mov	r3, r0
 800b622:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b626:	e003      	b.n	800b630 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800b628:	2301      	movs	r3, #1
 800b62a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b62e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b630:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b634:	2b00      	cmp	r3, #0
 800b636:	d10d      	bne.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b638:	4b05      	ldr	r3, [pc, #20]	; (800b650 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b63a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b63c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b640:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b646:	4a02      	ldr	r2, [pc, #8]	; (800b650 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b648:	430b      	orrs	r3, r1
 800b64a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b64c:	e006      	b.n	800b65c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800b64e:	bf00      	nop
 800b650:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b654:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b658:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b65c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b664:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b668:	663b      	str	r3, [r7, #96]	; 0x60
 800b66a:	2300      	movs	r3, #0
 800b66c:	667b      	str	r3, [r7, #100]	; 0x64
 800b66e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b672:	460b      	mov	r3, r1
 800b674:	4313      	orrs	r3, r2
 800b676:	d00c      	beq.n	800b692 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b678:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b67c:	3328      	adds	r3, #40	; 0x28
 800b67e:	2102      	movs	r1, #2
 800b680:	4618      	mov	r0, r3
 800b682:	f001 fb2d 	bl	800cce0 <RCCEx_PLL3_Config>
 800b686:	4603      	mov	r3, r0
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d002      	beq.n	800b692 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800b68c:	2301      	movs	r3, #1
 800b68e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b692:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b69a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b69e:	65bb      	str	r3, [r7, #88]	; 0x58
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b6a4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800b6a8:	460b      	mov	r3, r1
 800b6aa:	4313      	orrs	r3, r2
 800b6ac:	d036      	beq.n	800b71c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b6ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b6b8:	d018      	beq.n	800b6ec <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800b6ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b6be:	d811      	bhi.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b6c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6c4:	d014      	beq.n	800b6f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800b6c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6ca:	d80b      	bhi.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d011      	beq.n	800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800b6d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6d4:	d106      	bne.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6d6:	4bb7      	ldr	r3, [pc, #732]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b6d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6da:	4ab6      	ldr	r2, [pc, #728]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b6dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b6e2:	e008      	b.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b6ea:	e004      	b.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b6ec:	bf00      	nop
 800b6ee:	e002      	b.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b6f0:	bf00      	nop
 800b6f2:	e000      	b.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b6f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d10a      	bne.n	800b714 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b6fe:	4bad      	ldr	r3, [pc, #692]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b702:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b706:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b70a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b70c:	4aa9      	ldr	r2, [pc, #676]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b70e:	430b      	orrs	r3, r1
 800b710:	6553      	str	r3, [r2, #84]	; 0x54
 800b712:	e003      	b.n	800b71c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b714:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b718:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b71c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b724:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800b728:	653b      	str	r3, [r7, #80]	; 0x50
 800b72a:	2300      	movs	r3, #0
 800b72c:	657b      	str	r3, [r7, #84]	; 0x54
 800b72e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b732:	460b      	mov	r3, r1
 800b734:	4313      	orrs	r3, r2
 800b736:	d009      	beq.n	800b74c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b738:	4b9e      	ldr	r3, [pc, #632]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b73a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b73c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b740:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b746:	4a9b      	ldr	r2, [pc, #620]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b748:	430b      	orrs	r3, r1
 800b74a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b74c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b754:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800b758:	64bb      	str	r3, [r7, #72]	; 0x48
 800b75a:	2300      	movs	r3, #0
 800b75c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b75e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800b762:	460b      	mov	r3, r1
 800b764:	4313      	orrs	r3, r2
 800b766:	d009      	beq.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b768:	4b92      	ldr	r3, [pc, #584]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b76a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b76c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800b770:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b774:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b776:	4a8f      	ldr	r2, [pc, #572]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b778:	430b      	orrs	r3, r1
 800b77a:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b77c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b784:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800b788:	643b      	str	r3, [r7, #64]	; 0x40
 800b78a:	2300      	movs	r3, #0
 800b78c:	647b      	str	r3, [r7, #68]	; 0x44
 800b78e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b792:	460b      	mov	r3, r1
 800b794:	4313      	orrs	r3, r2
 800b796:	d00e      	beq.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b798:	4b86      	ldr	r3, [pc, #536]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b79a:	691b      	ldr	r3, [r3, #16]
 800b79c:	4a85      	ldr	r2, [pc, #532]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b79e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b7a2:	6113      	str	r3, [r2, #16]
 800b7a4:	4b83      	ldr	r3, [pc, #524]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b7a6:	6919      	ldr	r1, [r3, #16]
 800b7a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b7b0:	4a80      	ldr	r2, [pc, #512]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b7b2:	430b      	orrs	r3, r1
 800b7b4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b7b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7be:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800b7c2:	63bb      	str	r3, [r7, #56]	; 0x38
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b7c8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b7cc:	460b      	mov	r3, r1
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	d009      	beq.n	800b7e6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b7d2:	4b78      	ldr	r3, [pc, #480]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b7d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7d6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b7da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7e0:	4a74      	ldr	r2, [pc, #464]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b7e2:	430b      	orrs	r3, r1
 800b7e4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b7e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ee:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800b7f2:	633b      	str	r3, [r7, #48]	; 0x30
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	637b      	str	r3, [r7, #52]	; 0x34
 800b7f8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800b7fc:	460b      	mov	r3, r1
 800b7fe:	4313      	orrs	r3, r2
 800b800:	d00a      	beq.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b802:	4b6c      	ldr	r3, [pc, #432]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b806:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800b80a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b80e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b812:	4a68      	ldr	r2, [pc, #416]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b814:	430b      	orrs	r3, r1
 800b816:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b818:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b820:	2100      	movs	r1, #0
 800b822:	62b9      	str	r1, [r7, #40]	; 0x28
 800b824:	f003 0301 	and.w	r3, r3, #1
 800b828:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b82a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800b82e:	460b      	mov	r3, r1
 800b830:	4313      	orrs	r3, r2
 800b832:	d011      	beq.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b838:	3308      	adds	r3, #8
 800b83a:	2100      	movs	r1, #0
 800b83c:	4618      	mov	r0, r3
 800b83e:	f001 f99d 	bl	800cb7c <RCCEx_PLL2_Config>
 800b842:	4603      	mov	r3, r0
 800b844:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b848:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d003      	beq.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b850:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b854:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b858:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b860:	2100      	movs	r1, #0
 800b862:	6239      	str	r1, [r7, #32]
 800b864:	f003 0302 	and.w	r3, r3, #2
 800b868:	627b      	str	r3, [r7, #36]	; 0x24
 800b86a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b86e:	460b      	mov	r3, r1
 800b870:	4313      	orrs	r3, r2
 800b872:	d011      	beq.n	800b898 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b874:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b878:	3308      	adds	r3, #8
 800b87a:	2101      	movs	r1, #1
 800b87c:	4618      	mov	r0, r3
 800b87e:	f001 f97d 	bl	800cb7c <RCCEx_PLL2_Config>
 800b882:	4603      	mov	r3, r0
 800b884:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b888:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d003      	beq.n	800b898 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b890:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b894:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b898:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a0:	2100      	movs	r1, #0
 800b8a2:	61b9      	str	r1, [r7, #24]
 800b8a4:	f003 0304 	and.w	r3, r3, #4
 800b8a8:	61fb      	str	r3, [r7, #28]
 800b8aa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b8ae:	460b      	mov	r3, r1
 800b8b0:	4313      	orrs	r3, r2
 800b8b2:	d011      	beq.n	800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b8b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8b8:	3308      	adds	r3, #8
 800b8ba:	2102      	movs	r1, #2
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f001 f95d 	bl	800cb7c <RCCEx_PLL2_Config>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b8c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d003      	beq.n	800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8d4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b8d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e0:	2100      	movs	r1, #0
 800b8e2:	6139      	str	r1, [r7, #16]
 800b8e4:	f003 0308 	and.w	r3, r3, #8
 800b8e8:	617b      	str	r3, [r7, #20]
 800b8ea:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b8ee:	460b      	mov	r3, r1
 800b8f0:	4313      	orrs	r3, r2
 800b8f2:	d011      	beq.n	800b918 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b8f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8f8:	3328      	adds	r3, #40	; 0x28
 800b8fa:	2100      	movs	r1, #0
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f001 f9ef 	bl	800cce0 <RCCEx_PLL3_Config>
 800b902:	4603      	mov	r3, r0
 800b904:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800b908:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d003      	beq.n	800b918 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b910:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b914:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b918:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b920:	2100      	movs	r1, #0
 800b922:	60b9      	str	r1, [r7, #8]
 800b924:	f003 0310 	and.w	r3, r3, #16
 800b928:	60fb      	str	r3, [r7, #12]
 800b92a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b92e:	460b      	mov	r3, r1
 800b930:	4313      	orrs	r3, r2
 800b932:	d011      	beq.n	800b958 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b938:	3328      	adds	r3, #40	; 0x28
 800b93a:	2101      	movs	r1, #1
 800b93c:	4618      	mov	r0, r3
 800b93e:	f001 f9cf 	bl	800cce0 <RCCEx_PLL3_Config>
 800b942:	4603      	mov	r3, r0
 800b944:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b948:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d003      	beq.n	800b958 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b950:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b954:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b958:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b960:	2100      	movs	r1, #0
 800b962:	6039      	str	r1, [r7, #0]
 800b964:	f003 0320 	and.w	r3, r3, #32
 800b968:	607b      	str	r3, [r7, #4]
 800b96a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b96e:	460b      	mov	r3, r1
 800b970:	4313      	orrs	r3, r2
 800b972:	d011      	beq.n	800b998 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b974:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b978:	3328      	adds	r3, #40	; 0x28
 800b97a:	2102      	movs	r1, #2
 800b97c:	4618      	mov	r0, r3
 800b97e:	f001 f9af 	bl	800cce0 <RCCEx_PLL3_Config>
 800b982:	4603      	mov	r3, r0
 800b984:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b988:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d003      	beq.n	800b998 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b990:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b994:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800b998:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d101      	bne.n	800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	e000      	b.n	800b9a6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800b9a4:	2301      	movs	r3, #1
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b9b2:	bf00      	nop
 800b9b4:	58024400 	.word	0x58024400

0800b9b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b090      	sub	sp, #64	; 0x40
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b9c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9c6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800b9ca:	430b      	orrs	r3, r1
 800b9cc:	f040 8094 	bne.w	800baf8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b9d0:	4b9b      	ldr	r3, [pc, #620]	; (800bc40 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b9d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9d4:	f003 0307 	and.w	r3, r3, #7
 800b9d8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9dc:	2b04      	cmp	r3, #4
 800b9de:	f200 8087 	bhi.w	800baf0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b9e2:	a201      	add	r2, pc, #4	; (adr r2, 800b9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b9e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9e8:	0800b9fd 	.word	0x0800b9fd
 800b9ec:	0800ba25 	.word	0x0800ba25
 800b9f0:	0800ba4d 	.word	0x0800ba4d
 800b9f4:	0800bae9 	.word	0x0800bae9
 800b9f8:	0800ba75 	.word	0x0800ba75
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b9fc:	4b90      	ldr	r3, [pc, #576]	; (800bc40 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba08:	d108      	bne.n	800ba1c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ba0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f000 ff62 	bl	800c8d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ba14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba18:	f000 bc93 	b.w	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba20:	f000 bc8f 	b.w	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ba24:	4b86      	ldr	r3, [pc, #536]	; (800bc40 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba30:	d108      	bne.n	800ba44 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba32:	f107 0318 	add.w	r3, r7, #24
 800ba36:	4618      	mov	r0, r3
 800ba38:	f000 fca6 	bl	800c388 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ba3c:	69bb      	ldr	r3, [r7, #24]
 800ba3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba40:	f000 bc7f 	b.w	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba44:	2300      	movs	r3, #0
 800ba46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba48:	f000 bc7b 	b.w	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ba4c:	4b7c      	ldr	r3, [pc, #496]	; (800bc40 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba58:	d108      	bne.n	800ba6c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba5a:	f107 030c 	add.w	r3, r7, #12
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f000 fde6 	bl	800c630 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba68:	f000 bc6b 	b.w	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba70:	f000 bc67 	b.w	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ba74:	4b72      	ldr	r3, [pc, #456]	; (800bc40 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ba76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ba7c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ba7e:	4b70      	ldr	r3, [pc, #448]	; (800bc40 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f003 0304 	and.w	r3, r3, #4
 800ba86:	2b04      	cmp	r3, #4
 800ba88:	d10c      	bne.n	800baa4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800ba8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d109      	bne.n	800baa4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ba90:	4b6b      	ldr	r3, [pc, #428]	; (800bc40 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	08db      	lsrs	r3, r3, #3
 800ba96:	f003 0303 	and.w	r3, r3, #3
 800ba9a:	4a6a      	ldr	r2, [pc, #424]	; (800bc44 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800ba9c:	fa22 f303 	lsr.w	r3, r2, r3
 800baa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800baa2:	e01f      	b.n	800bae4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800baa4:	4b66      	ldr	r3, [pc, #408]	; (800bc40 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800baac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bab0:	d106      	bne.n	800bac0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800bab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bab4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bab8:	d102      	bne.n	800bac0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800baba:	4b63      	ldr	r3, [pc, #396]	; (800bc48 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800babc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800babe:	e011      	b.n	800bae4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bac0:	4b5f      	ldr	r3, [pc, #380]	; (800bc40 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bac8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bacc:	d106      	bne.n	800badc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bad0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bad4:	d102      	bne.n	800badc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bad6:	4b5d      	ldr	r3, [pc, #372]	; (800bc4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bad8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bada:	e003      	b.n	800bae4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800badc:	2300      	movs	r3, #0
 800bade:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bae0:	f000 bc2f 	b.w	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bae4:	f000 bc2d 	b.w	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bae8:	4b59      	ldr	r3, [pc, #356]	; (800bc50 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800baea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800baec:	f000 bc29 	b.w	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800baf0:	2300      	movs	r3, #0
 800baf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800baf4:	f000 bc25 	b.w	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800baf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bafc:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800bb00:	430b      	orrs	r3, r1
 800bb02:	f040 80a7 	bne.w	800bc54 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800bb06:	4b4e      	ldr	r3, [pc, #312]	; (800bc40 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb0a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800bb0e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bb10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bb16:	d054      	beq.n	800bbc2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800bb18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bb1e:	f200 808b 	bhi.w	800bc38 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bb22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb24:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bb28:	f000 8083 	beq.w	800bc32 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800bb2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb2e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bb32:	f200 8081 	bhi.w	800bc38 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bb36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bb3c:	d02f      	beq.n	800bb9e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800bb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bb44:	d878      	bhi.n	800bc38 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bb46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d004      	beq.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800bb4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bb52:	d012      	beq.n	800bb7a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800bb54:	e070      	b.n	800bc38 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bb56:	4b3a      	ldr	r3, [pc, #232]	; (800bc40 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb62:	d107      	bne.n	800bb74 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f000 feb5 	bl	800c8d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bb6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb72:	e3e6      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bb74:	2300      	movs	r3, #0
 800bb76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb78:	e3e3      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bb7a:	4b31      	ldr	r3, [pc, #196]	; (800bc40 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb86:	d107      	bne.n	800bb98 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb88:	f107 0318 	add.w	r3, r7, #24
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f000 fbfb 	bl	800c388 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bb92:	69bb      	ldr	r3, [r7, #24]
 800bb94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb96:	e3d4      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb9c:	e3d1      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bb9e:	4b28      	ldr	r3, [pc, #160]	; (800bc40 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bba6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbaa:	d107      	bne.n	800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bbac:	f107 030c 	add.w	r3, r7, #12
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f000 fd3d 	bl	800c630 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbba:	e3c2      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbc0:	e3bf      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bbc2:	4b1f      	ldr	r3, [pc, #124]	; (800bc40 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bbc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbc6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bbca:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bbcc:	4b1c      	ldr	r3, [pc, #112]	; (800bc40 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f003 0304 	and.w	r3, r3, #4
 800bbd4:	2b04      	cmp	r3, #4
 800bbd6:	d10c      	bne.n	800bbf2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800bbd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d109      	bne.n	800bbf2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bbde:	4b18      	ldr	r3, [pc, #96]	; (800bc40 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	08db      	lsrs	r3, r3, #3
 800bbe4:	f003 0303 	and.w	r3, r3, #3
 800bbe8:	4a16      	ldr	r2, [pc, #88]	; (800bc44 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800bbea:	fa22 f303 	lsr.w	r3, r2, r3
 800bbee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbf0:	e01e      	b.n	800bc30 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bbf2:	4b13      	ldr	r3, [pc, #76]	; (800bc40 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbfe:	d106      	bne.n	800bc0e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800bc00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc06:	d102      	bne.n	800bc0e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bc08:	4b0f      	ldr	r3, [pc, #60]	; (800bc48 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800bc0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc0c:	e010      	b.n	800bc30 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bc0e:	4b0c      	ldr	r3, [pc, #48]	; (800bc40 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc1a:	d106      	bne.n	800bc2a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800bc1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc22:	d102      	bne.n	800bc2a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bc24:	4b09      	ldr	r3, [pc, #36]	; (800bc4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc28:	e002      	b.n	800bc30 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bc2e:	e388      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bc30:	e387      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bc32:	4b07      	ldr	r3, [pc, #28]	; (800bc50 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bc34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc36:	e384      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc3c:	e381      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bc3e:	bf00      	nop
 800bc40:	58024400 	.word	0x58024400
 800bc44:	03d09000 	.word	0x03d09000
 800bc48:	003d0900 	.word	0x003d0900
 800bc4c:	02faf080 	.word	0x02faf080
 800bc50:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800bc54:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc58:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800bc5c:	430b      	orrs	r3, r1
 800bc5e:	f040 809c 	bne.w	800bd9a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800bc62:	4b9e      	ldr	r3, [pc, #632]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bc64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc66:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800bc6a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bc6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bc72:	d054      	beq.n	800bd1e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800bc74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bc7a:	f200 808b 	bhi.w	800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc80:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bc84:	f000 8083 	beq.w	800bd8e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800bc88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc8a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bc8e:	f200 8081 	bhi.w	800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bc92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc98:	d02f      	beq.n	800bcfa <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800bc9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bca0:	d878      	bhi.n	800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d004      	beq.n	800bcb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800bca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcaa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bcae:	d012      	beq.n	800bcd6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800bcb0:	e070      	b.n	800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bcb2:	4b8a      	ldr	r3, [pc, #552]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bcba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bcbe:	d107      	bne.n	800bcd0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bcc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	f000 fe07 	bl	800c8d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bcca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bccc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bcce:	e338      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bcd4:	e335      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bcd6:	4b81      	ldr	r3, [pc, #516]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bcde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bce2:	d107      	bne.n	800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bce4:	f107 0318 	add.w	r3, r7, #24
 800bce8:	4618      	mov	r0, r3
 800bcea:	f000 fb4d 	bl	800c388 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bcee:	69bb      	ldr	r3, [r7, #24]
 800bcf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bcf2:	e326      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bcf8:	e323      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bcfa:	4b78      	ldr	r3, [pc, #480]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bd02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd06:	d107      	bne.n	800bd18 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd08:	f107 030c 	add.w	r3, r7, #12
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f000 fc8f 	bl	800c630 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd16:	e314      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd18:	2300      	movs	r3, #0
 800bd1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd1c:	e311      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bd1e:	4b6f      	ldr	r3, [pc, #444]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bd20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bd26:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bd28:	4b6c      	ldr	r3, [pc, #432]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	f003 0304 	and.w	r3, r3, #4
 800bd30:	2b04      	cmp	r3, #4
 800bd32:	d10c      	bne.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800bd34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d109      	bne.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bd3a:	4b68      	ldr	r3, [pc, #416]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	08db      	lsrs	r3, r3, #3
 800bd40:	f003 0303 	and.w	r3, r3, #3
 800bd44:	4a66      	ldr	r2, [pc, #408]	; (800bee0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800bd46:	fa22 f303 	lsr.w	r3, r2, r3
 800bd4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd4c:	e01e      	b.n	800bd8c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bd4e:	4b63      	ldr	r3, [pc, #396]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd5a:	d106      	bne.n	800bd6a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800bd5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd62:	d102      	bne.n	800bd6a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bd64:	4b5f      	ldr	r3, [pc, #380]	; (800bee4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800bd66:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd68:	e010      	b.n	800bd8c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bd6a:	4b5c      	ldr	r3, [pc, #368]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd76:	d106      	bne.n	800bd86 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800bd78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd7e:	d102      	bne.n	800bd86 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bd80:	4b59      	ldr	r3, [pc, #356]	; (800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bd82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd84:	e002      	b.n	800bd8c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bd86:	2300      	movs	r3, #0
 800bd88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bd8a:	e2da      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bd8c:	e2d9      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bd8e:	4b57      	ldr	r3, [pc, #348]	; (800beec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bd90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd92:	e2d6      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bd94:	2300      	movs	r3, #0
 800bd96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd98:	e2d3      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800bd9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd9e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800bda2:	430b      	orrs	r3, r1
 800bda4:	f040 80a7 	bne.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800bda8:	4b4c      	ldr	r3, [pc, #304]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bdaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdac:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800bdb0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bdb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bdb8:	d055      	beq.n	800be66 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800bdba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bdc0:	f200 8096 	bhi.w	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bdc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bdca:	f000 8084 	beq.w	800bed6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800bdce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bdd4:	f200 808c 	bhi.w	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bdd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bdde:	d030      	beq.n	800be42 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800bde0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bde2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bde6:	f200 8083 	bhi.w	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bdea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d004      	beq.n	800bdfa <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800bdf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdf6:	d012      	beq.n	800be1e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800bdf8:	e07a      	b.n	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bdfa:	4b38      	ldr	r3, [pc, #224]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be06:	d107      	bne.n	800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be0c:	4618      	mov	r0, r3
 800be0e:	f000 fd63 	bl	800c8d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800be12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be16:	e294      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be18:	2300      	movs	r3, #0
 800be1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be1c:	e291      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800be1e:	4b2f      	ldr	r3, [pc, #188]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be2a:	d107      	bne.n	800be3c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be2c:	f107 0318 	add.w	r3, r7, #24
 800be30:	4618      	mov	r0, r3
 800be32:	f000 faa9 	bl	800c388 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800be36:	69bb      	ldr	r3, [r7, #24]
 800be38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be3a:	e282      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be3c:	2300      	movs	r3, #0
 800be3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be40:	e27f      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800be42:	4b26      	ldr	r3, [pc, #152]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be4e:	d107      	bne.n	800be60 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be50:	f107 030c 	add.w	r3, r7, #12
 800be54:	4618      	mov	r0, r3
 800be56:	f000 fbeb 	bl	800c630 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be5e:	e270      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be60:	2300      	movs	r3, #0
 800be62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be64:	e26d      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800be66:	4b1d      	ldr	r3, [pc, #116]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800be6e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800be70:	4b1a      	ldr	r3, [pc, #104]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f003 0304 	and.w	r3, r3, #4
 800be78:	2b04      	cmp	r3, #4
 800be7a:	d10c      	bne.n	800be96 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800be7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d109      	bne.n	800be96 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be82:	4b16      	ldr	r3, [pc, #88]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	08db      	lsrs	r3, r3, #3
 800be88:	f003 0303 	and.w	r3, r3, #3
 800be8c:	4a14      	ldr	r2, [pc, #80]	; (800bee0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800be8e:	fa22 f303 	lsr.w	r3, r2, r3
 800be92:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be94:	e01e      	b.n	800bed4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800be96:	4b11      	ldr	r3, [pc, #68]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bea2:	d106      	bne.n	800beb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800bea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bea6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800beaa:	d102      	bne.n	800beb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800beac:	4b0d      	ldr	r3, [pc, #52]	; (800bee4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800beae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800beb0:	e010      	b.n	800bed4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800beb2:	4b0a      	ldr	r3, [pc, #40]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800beba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bebe:	d106      	bne.n	800bece <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800bec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bec2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bec6:	d102      	bne.n	800bece <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bec8:	4b07      	ldr	r3, [pc, #28]	; (800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800beca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800becc:	e002      	b.n	800bed4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bece:	2300      	movs	r3, #0
 800bed0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bed2:	e236      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bed4:	e235      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bed6:	4b05      	ldr	r3, [pc, #20]	; (800beec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bed8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800beda:	e232      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bedc:	58024400 	.word	0x58024400
 800bee0:	03d09000 	.word	0x03d09000
 800bee4:	003d0900 	.word	0x003d0900
 800bee8:	02faf080 	.word	0x02faf080
 800beec:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800bef0:	2300      	movs	r3, #0
 800bef2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bef4:	e225      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800bef6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800befa:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800befe:	430b      	orrs	r3, r1
 800bf00:	f040 8085 	bne.w	800c00e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800bf04:	4b9c      	ldr	r3, [pc, #624]	; (800c178 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bf06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf08:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800bf0c:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800bf0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bf14:	d06b      	beq.n	800bfee <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800bf16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bf1c:	d874      	bhi.n	800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800bf1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bf24:	d056      	beq.n	800bfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800bf26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bf2c:	d86c      	bhi.n	800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800bf2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bf34:	d03b      	beq.n	800bfae <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800bf36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bf3c:	d864      	bhi.n	800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800bf3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf44:	d021      	beq.n	800bf8a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800bf46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf4c:	d85c      	bhi.n	800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800bf4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d004      	beq.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800bf54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf5a:	d004      	beq.n	800bf66 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800bf5c:	e054      	b.n	800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800bf5e:	f7fe fb5f 	bl	800a620 <HAL_RCC_GetPCLK1Freq>
 800bf62:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bf64:	e1ed      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf66:	4b84      	ldr	r3, [pc, #528]	; (800c178 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf72:	d107      	bne.n	800bf84 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf74:	f107 0318 	add.w	r3, r7, #24
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f000 fa05 	bl	800c388 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bf7e:	69fb      	ldr	r3, [r7, #28]
 800bf80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf82:	e1de      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf84:	2300      	movs	r3, #0
 800bf86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf88:	e1db      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bf8a:	4b7b      	ldr	r3, [pc, #492]	; (800c178 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf96:	d107      	bne.n	800bfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf98:	f107 030c 	add.w	r3, r7, #12
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f000 fb47 	bl	800c630 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfa6:	e1cc      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfac:	e1c9      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bfae:	4b72      	ldr	r3, [pc, #456]	; (800c178 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	f003 0304 	and.w	r3, r3, #4
 800bfb6:	2b04      	cmp	r3, #4
 800bfb8:	d109      	bne.n	800bfce <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bfba:	4b6f      	ldr	r3, [pc, #444]	; (800c178 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	08db      	lsrs	r3, r3, #3
 800bfc0:	f003 0303 	and.w	r3, r3, #3
 800bfc4:	4a6d      	ldr	r2, [pc, #436]	; (800c17c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800bfc6:	fa22 f303 	lsr.w	r3, r2, r3
 800bfca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfcc:	e1b9      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfd2:	e1b6      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800bfd4:	4b68      	ldr	r3, [pc, #416]	; (800c178 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfe0:	d102      	bne.n	800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800bfe2:	4b67      	ldr	r3, [pc, #412]	; (800c180 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800bfe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfe6:	e1ac      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfec:	e1a9      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bfee:	4b62      	ldr	r3, [pc, #392]	; (800c178 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bff6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bffa:	d102      	bne.n	800c002 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800bffc:	4b61      	ldr	r3, [pc, #388]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800bffe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c000:	e19f      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c002:	2300      	movs	r3, #0
 800c004:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c006:	e19c      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c008:	2300      	movs	r3, #0
 800c00a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c00c:	e199      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c00e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c012:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c016:	430b      	orrs	r3, r1
 800c018:	d173      	bne.n	800c102 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c01a:	4b57      	ldr	r3, [pc, #348]	; (800c178 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c01c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c01e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c022:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c026:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c02a:	d02f      	beq.n	800c08c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800c02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c02e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c032:	d863      	bhi.n	800c0fc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800c034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c036:	2b00      	cmp	r3, #0
 800c038:	d004      	beq.n	800c044 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800c03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c03c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c040:	d012      	beq.n	800c068 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800c042:	e05b      	b.n	800c0fc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c044:	4b4c      	ldr	r3, [pc, #304]	; (800c178 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c04c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c050:	d107      	bne.n	800c062 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c052:	f107 0318 	add.w	r3, r7, #24
 800c056:	4618      	mov	r0, r3
 800c058:	f000 f996 	bl	800c388 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c05c:	69bb      	ldr	r3, [r7, #24]
 800c05e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c060:	e16f      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c062:	2300      	movs	r3, #0
 800c064:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c066:	e16c      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c068:	4b43      	ldr	r3, [pc, #268]	; (800c178 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c070:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c074:	d107      	bne.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c076:	f107 030c 	add.w	r3, r7, #12
 800c07a:	4618      	mov	r0, r3
 800c07c:	f000 fad8 	bl	800c630 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c084:	e15d      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c086:	2300      	movs	r3, #0
 800c088:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c08a:	e15a      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c08c:	4b3a      	ldr	r3, [pc, #232]	; (800c178 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c08e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c090:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c094:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c096:	4b38      	ldr	r3, [pc, #224]	; (800c178 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f003 0304 	and.w	r3, r3, #4
 800c09e:	2b04      	cmp	r3, #4
 800c0a0:	d10c      	bne.n	800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800c0a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d109      	bne.n	800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c0a8:	4b33      	ldr	r3, [pc, #204]	; (800c178 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	08db      	lsrs	r3, r3, #3
 800c0ae:	f003 0303 	and.w	r3, r3, #3
 800c0b2:	4a32      	ldr	r2, [pc, #200]	; (800c17c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c0b4:	fa22 f303 	lsr.w	r3, r2, r3
 800c0b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0ba:	e01e      	b.n	800c0fa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c0bc:	4b2e      	ldr	r3, [pc, #184]	; (800c178 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0c8:	d106      	bne.n	800c0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800c0ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c0d0:	d102      	bne.n	800c0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c0d2:	4b2b      	ldr	r3, [pc, #172]	; (800c180 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c0d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0d6:	e010      	b.n	800c0fa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c0d8:	4b27      	ldr	r3, [pc, #156]	; (800c178 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0e4:	d106      	bne.n	800c0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800c0e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0ec:	d102      	bne.n	800c0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c0ee:	4b25      	ldr	r3, [pc, #148]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c0f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0f2:	e002      	b.n	800c0fa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c0f8:	e123      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c0fa:	e122      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c100:	e11f      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c102:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c106:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c10a:	430b      	orrs	r3, r1
 800c10c:	d13c      	bne.n	800c188 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c10e:	4b1a      	ldr	r3, [pc, #104]	; (800c178 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c116:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d004      	beq.n	800c128 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800c11e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c124:	d012      	beq.n	800c14c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800c126:	e023      	b.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c128:	4b13      	ldr	r3, [pc, #76]	; (800c178 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c130:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c134:	d107      	bne.n	800c146 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c13a:	4618      	mov	r0, r3
 800c13c:	f000 fbcc 	bl	800c8d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c142:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c144:	e0fd      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c146:	2300      	movs	r3, #0
 800c148:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c14a:	e0fa      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c14c:	4b0a      	ldr	r3, [pc, #40]	; (800c178 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c154:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c158:	d107      	bne.n	800c16a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c15a:	f107 0318 	add.w	r3, r7, #24
 800c15e:	4618      	mov	r0, r3
 800c160:	f000 f912 	bl	800c388 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c164:	6a3b      	ldr	r3, [r7, #32]
 800c166:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c168:	e0eb      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c16a:	2300      	movs	r3, #0
 800c16c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c16e:	e0e8      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c170:	2300      	movs	r3, #0
 800c172:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c174:	e0e5      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c176:	bf00      	nop
 800c178:	58024400 	.word	0x58024400
 800c17c:	03d09000 	.word	0x03d09000
 800c180:	003d0900 	.word	0x003d0900
 800c184:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c188:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c18c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c190:	430b      	orrs	r3, r1
 800c192:	f040 8085 	bne.w	800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c196:	4b6d      	ldr	r3, [pc, #436]	; (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c19a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c19e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c1a6:	d06b      	beq.n	800c280 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800c1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c1ae:	d874      	bhi.n	800c29a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1b6:	d056      	beq.n	800c266 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800c1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1be:	d86c      	bhi.n	800c29a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c1c6:	d03b      	beq.n	800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800c1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c1ce:	d864      	bhi.n	800c29a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1d6:	d021      	beq.n	800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800c1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1de:	d85c      	bhi.n	800c29a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d004      	beq.n	800c1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800c1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c1ec:	d004      	beq.n	800c1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800c1ee:	e054      	b.n	800c29a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c1f0:	f000 f8b4 	bl	800c35c <HAL_RCCEx_GetD3PCLK1Freq>
 800c1f4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c1f6:	e0a4      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c1f8:	4b54      	ldr	r3, [pc, #336]	; (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c200:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c204:	d107      	bne.n	800c216 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c206:	f107 0318 	add.w	r3, r7, #24
 800c20a:	4618      	mov	r0, r3
 800c20c:	f000 f8bc 	bl	800c388 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c210:	69fb      	ldr	r3, [r7, #28]
 800c212:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c214:	e095      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c216:	2300      	movs	r3, #0
 800c218:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c21a:	e092      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c21c:	4b4b      	ldr	r3, [pc, #300]	; (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c224:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c228:	d107      	bne.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c22a:	f107 030c 	add.w	r3, r7, #12
 800c22e:	4618      	mov	r0, r3
 800c230:	f000 f9fe 	bl	800c630 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c238:	e083      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c23a:	2300      	movs	r3, #0
 800c23c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c23e:	e080      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c240:	4b42      	ldr	r3, [pc, #264]	; (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f003 0304 	and.w	r3, r3, #4
 800c248:	2b04      	cmp	r3, #4
 800c24a:	d109      	bne.n	800c260 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c24c:	4b3f      	ldr	r3, [pc, #252]	; (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	08db      	lsrs	r3, r3, #3
 800c252:	f003 0303 	and.w	r3, r3, #3
 800c256:	4a3e      	ldr	r2, [pc, #248]	; (800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c258:	fa22 f303 	lsr.w	r3, r2, r3
 800c25c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c25e:	e070      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c260:	2300      	movs	r3, #0
 800c262:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c264:	e06d      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c266:	4b39      	ldr	r3, [pc, #228]	; (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c26e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c272:	d102      	bne.n	800c27a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800c274:	4b37      	ldr	r3, [pc, #220]	; (800c354 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c276:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c278:	e063      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c27a:	2300      	movs	r3, #0
 800c27c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c27e:	e060      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c280:	4b32      	ldr	r3, [pc, #200]	; (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c288:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c28c:	d102      	bne.n	800c294 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800c28e:	4b32      	ldr	r3, [pc, #200]	; (800c358 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c290:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c292:	e056      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c294:	2300      	movs	r3, #0
 800c296:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c298:	e053      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c29a:	2300      	movs	r3, #0
 800c29c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c29e:	e050      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c2a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2a4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c2a8:	430b      	orrs	r3, r1
 800c2aa:	d148      	bne.n	800c33e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c2ac:	4b27      	ldr	r3, [pc, #156]	; (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c2ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c2b4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c2b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2bc:	d02a      	beq.n	800c314 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2c4:	d838      	bhi.n	800c338 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c2c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d004      	beq.n	800c2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c2d2:	d00d      	beq.n	800c2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800c2d4:	e030      	b.n	800c338 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c2d6:	4b1d      	ldr	r3, [pc, #116]	; (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c2e2:	d102      	bne.n	800c2ea <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800c2e4:	4b1c      	ldr	r3, [pc, #112]	; (800c358 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c2e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2e8:	e02b      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2ee:	e028      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c2f0:	4b16      	ldr	r3, [pc, #88]	; (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c2f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c2fc:	d107      	bne.n	800c30e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c2fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c302:	4618      	mov	r0, r3
 800c304:	f000 fae8 	bl	800c8d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c30a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c30c:	e019      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c30e:	2300      	movs	r3, #0
 800c310:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c312:	e016      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c314:	4b0d      	ldr	r3, [pc, #52]	; (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c31c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c320:	d107      	bne.n	800c332 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c322:	f107 0318 	add.w	r3, r7, #24
 800c326:	4618      	mov	r0, r3
 800c328:	f000 f82e 	bl	800c388 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c32c:	69fb      	ldr	r3, [r7, #28]
 800c32e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c330:	e007      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c332:	2300      	movs	r3, #0
 800c334:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c336:	e004      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c338:	2300      	movs	r3, #0
 800c33a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c33c:	e001      	b.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800c33e:	2300      	movs	r3, #0
 800c340:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c344:	4618      	mov	r0, r3
 800c346:	3740      	adds	r7, #64	; 0x40
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}
 800c34c:	58024400 	.word	0x58024400
 800c350:	03d09000 	.word	0x03d09000
 800c354:	003d0900 	.word	0x003d0900
 800c358:	02faf080 	.word	0x02faf080

0800c35c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c360:	f7fe f92e 	bl	800a5c0 <HAL_RCC_GetHCLKFreq>
 800c364:	4602      	mov	r2, r0
 800c366:	4b06      	ldr	r3, [pc, #24]	; (800c380 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c368:	6a1b      	ldr	r3, [r3, #32]
 800c36a:	091b      	lsrs	r3, r3, #4
 800c36c:	f003 0307 	and.w	r3, r3, #7
 800c370:	4904      	ldr	r1, [pc, #16]	; (800c384 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c372:	5ccb      	ldrb	r3, [r1, r3]
 800c374:	f003 031f 	and.w	r3, r3, #31
 800c378:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	bd80      	pop	{r7, pc}
 800c380:	58024400 	.word	0x58024400
 800c384:	0801bb48 	.word	0x0801bb48

0800c388 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c388:	b480      	push	{r7}
 800c38a:	b089      	sub	sp, #36	; 0x24
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c390:	4ba1      	ldr	r3, [pc, #644]	; (800c618 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c394:	f003 0303 	and.w	r3, r3, #3
 800c398:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c39a:	4b9f      	ldr	r3, [pc, #636]	; (800c618 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c39c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c39e:	0b1b      	lsrs	r3, r3, #12
 800c3a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c3a4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c3a6:	4b9c      	ldr	r3, [pc, #624]	; (800c618 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c3a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3aa:	091b      	lsrs	r3, r3, #4
 800c3ac:	f003 0301 	and.w	r3, r3, #1
 800c3b0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c3b2:	4b99      	ldr	r3, [pc, #612]	; (800c618 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c3b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3b6:	08db      	lsrs	r3, r3, #3
 800c3b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c3bc:	693a      	ldr	r2, [r7, #16]
 800c3be:	fb02 f303 	mul.w	r3, r2, r3
 800c3c2:	ee07 3a90 	vmov	s15, r3
 800c3c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c3ce:	697b      	ldr	r3, [r7, #20]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	f000 8111 	beq.w	800c5f8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c3d6:	69bb      	ldr	r3, [r7, #24]
 800c3d8:	2b02      	cmp	r3, #2
 800c3da:	f000 8083 	beq.w	800c4e4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c3de:	69bb      	ldr	r3, [r7, #24]
 800c3e0:	2b02      	cmp	r3, #2
 800c3e2:	f200 80a1 	bhi.w	800c528 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c3e6:	69bb      	ldr	r3, [r7, #24]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d003      	beq.n	800c3f4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c3ec:	69bb      	ldr	r3, [r7, #24]
 800c3ee:	2b01      	cmp	r3, #1
 800c3f0:	d056      	beq.n	800c4a0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c3f2:	e099      	b.n	800c528 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c3f4:	4b88      	ldr	r3, [pc, #544]	; (800c618 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f003 0320 	and.w	r3, r3, #32
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d02d      	beq.n	800c45c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c400:	4b85      	ldr	r3, [pc, #532]	; (800c618 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	08db      	lsrs	r3, r3, #3
 800c406:	f003 0303 	and.w	r3, r3, #3
 800c40a:	4a84      	ldr	r2, [pc, #528]	; (800c61c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c40c:	fa22 f303 	lsr.w	r3, r2, r3
 800c410:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	ee07 3a90 	vmov	s15, r3
 800c418:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	ee07 3a90 	vmov	s15, r3
 800c422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c42a:	4b7b      	ldr	r3, [pc, #492]	; (800c618 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c42c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c42e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c432:	ee07 3a90 	vmov	s15, r3
 800c436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c43a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c43e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c620 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c44a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c44e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c452:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c456:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c45a:	e087      	b.n	800c56c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	ee07 3a90 	vmov	s15, r3
 800c462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c466:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c624 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c46a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c46e:	4b6a      	ldr	r3, [pc, #424]	; (800c618 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c476:	ee07 3a90 	vmov	s15, r3
 800c47a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c47e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c482:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c620 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c48a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c48e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c49a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c49e:	e065      	b.n	800c56c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c4a0:	697b      	ldr	r3, [r7, #20]
 800c4a2:	ee07 3a90 	vmov	s15, r3
 800c4a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4aa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c628 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c4ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4b2:	4b59      	ldr	r3, [pc, #356]	; (800c618 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4ba:	ee07 3a90 	vmov	s15, r3
 800c4be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c4c6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c620 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c4ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c4d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c4e2:	e043      	b.n	800c56c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	ee07 3a90 	vmov	s15, r3
 800c4ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4ee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c62c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c4f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4f6:	4b48      	ldr	r3, [pc, #288]	; (800c618 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4fe:	ee07 3a90 	vmov	s15, r3
 800c502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c506:	ed97 6a03 	vldr	s12, [r7, #12]
 800c50a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c620 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c50e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c516:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c51a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c51e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c522:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c526:	e021      	b.n	800c56c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	ee07 3a90 	vmov	s15, r3
 800c52e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c532:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c628 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c53a:	4b37      	ldr	r3, [pc, #220]	; (800c618 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c53c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c53e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c542:	ee07 3a90 	vmov	s15, r3
 800c546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c54a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c54e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c620 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c55a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c55e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c562:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c566:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c56a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c56c:	4b2a      	ldr	r3, [pc, #168]	; (800c618 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c56e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c570:	0a5b      	lsrs	r3, r3, #9
 800c572:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c576:	ee07 3a90 	vmov	s15, r3
 800c57a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c57e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c582:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c586:	edd7 6a07 	vldr	s13, [r7, #28]
 800c58a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c58e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c592:	ee17 2a90 	vmov	r2, s15
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c59a:	4b1f      	ldr	r3, [pc, #124]	; (800c618 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c59c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c59e:	0c1b      	lsrs	r3, r3, #16
 800c5a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5a4:	ee07 3a90 	vmov	s15, r3
 800c5a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c5b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c5b4:	edd7 6a07 	vldr	s13, [r7, #28]
 800c5b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c5bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c5c0:	ee17 2a90 	vmov	r2, s15
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c5c8:	4b13      	ldr	r3, [pc, #76]	; (800c618 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5cc:	0e1b      	lsrs	r3, r3, #24
 800c5ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5d2:	ee07 3a90 	vmov	s15, r3
 800c5d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c5de:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c5e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c5e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c5ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c5ee:	ee17 2a90 	vmov	r2, s15
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c5f6:	e008      	b.n	800c60a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2200      	movs	r2, #0
 800c602:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2200      	movs	r2, #0
 800c608:	609a      	str	r2, [r3, #8]
}
 800c60a:	bf00      	nop
 800c60c:	3724      	adds	r7, #36	; 0x24
 800c60e:	46bd      	mov	sp, r7
 800c610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c614:	4770      	bx	lr
 800c616:	bf00      	nop
 800c618:	58024400 	.word	0x58024400
 800c61c:	03d09000 	.word	0x03d09000
 800c620:	46000000 	.word	0x46000000
 800c624:	4c742400 	.word	0x4c742400
 800c628:	4a742400 	.word	0x4a742400
 800c62c:	4c3ebc20 	.word	0x4c3ebc20

0800c630 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c630:	b480      	push	{r7}
 800c632:	b089      	sub	sp, #36	; 0x24
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c638:	4ba1      	ldr	r3, [pc, #644]	; (800c8c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c63a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c63c:	f003 0303 	and.w	r3, r3, #3
 800c640:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c642:	4b9f      	ldr	r3, [pc, #636]	; (800c8c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c646:	0d1b      	lsrs	r3, r3, #20
 800c648:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c64c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c64e:	4b9c      	ldr	r3, [pc, #624]	; (800c8c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c652:	0a1b      	lsrs	r3, r3, #8
 800c654:	f003 0301 	and.w	r3, r3, #1
 800c658:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c65a:	4b99      	ldr	r3, [pc, #612]	; (800c8c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c65c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c65e:	08db      	lsrs	r3, r3, #3
 800c660:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c664:	693a      	ldr	r2, [r7, #16]
 800c666:	fb02 f303 	mul.w	r3, r2, r3
 800c66a:	ee07 3a90 	vmov	s15, r3
 800c66e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c672:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	f000 8111 	beq.w	800c8a0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c67e:	69bb      	ldr	r3, [r7, #24]
 800c680:	2b02      	cmp	r3, #2
 800c682:	f000 8083 	beq.w	800c78c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c686:	69bb      	ldr	r3, [r7, #24]
 800c688:	2b02      	cmp	r3, #2
 800c68a:	f200 80a1 	bhi.w	800c7d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c68e:	69bb      	ldr	r3, [r7, #24]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d003      	beq.n	800c69c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c694:	69bb      	ldr	r3, [r7, #24]
 800c696:	2b01      	cmp	r3, #1
 800c698:	d056      	beq.n	800c748 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c69a:	e099      	b.n	800c7d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c69c:	4b88      	ldr	r3, [pc, #544]	; (800c8c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f003 0320 	and.w	r3, r3, #32
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d02d      	beq.n	800c704 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c6a8:	4b85      	ldr	r3, [pc, #532]	; (800c8c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	08db      	lsrs	r3, r3, #3
 800c6ae:	f003 0303 	and.w	r3, r3, #3
 800c6b2:	4a84      	ldr	r2, [pc, #528]	; (800c8c4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c6b4:	fa22 f303 	lsr.w	r3, r2, r3
 800c6b8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	ee07 3a90 	vmov	s15, r3
 800c6c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	ee07 3a90 	vmov	s15, r3
 800c6ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6d2:	4b7b      	ldr	r3, [pc, #492]	; (800c8c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c6d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6da:	ee07 3a90 	vmov	s15, r3
 800c6de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6e6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c8c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c6ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c702:	e087      	b.n	800c814 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	ee07 3a90 	vmov	s15, r3
 800c70a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c70e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c8cc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c716:	4b6a      	ldr	r3, [pc, #424]	; (800c8c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c71a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c71e:	ee07 3a90 	vmov	s15, r3
 800c722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c726:	ed97 6a03 	vldr	s12, [r7, #12]
 800c72a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c8c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c72e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c736:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c73a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c73e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c742:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c746:	e065      	b.n	800c814 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	ee07 3a90 	vmov	s15, r3
 800c74e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c752:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c8d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c75a:	4b59      	ldr	r3, [pc, #356]	; (800c8c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c75c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c75e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c762:	ee07 3a90 	vmov	s15, r3
 800c766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c76a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c76e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c8c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c77a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c77e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c782:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c786:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c78a:	e043      	b.n	800c814 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c78c:	697b      	ldr	r3, [r7, #20]
 800c78e:	ee07 3a90 	vmov	s15, r3
 800c792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c796:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c8d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c79a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c79e:	4b48      	ldr	r3, [pc, #288]	; (800c8c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7a6:	ee07 3a90 	vmov	s15, r3
 800c7aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7b2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c8c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c7b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c7ce:	e021      	b.n	800c814 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	ee07 3a90 	vmov	s15, r3
 800c7d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7da:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c8d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c7de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7e2:	4b37      	ldr	r3, [pc, #220]	; (800c8c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7ea:	ee07 3a90 	vmov	s15, r3
 800c7ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7f6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c8c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c7fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c802:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c80a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c80e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c812:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c814:	4b2a      	ldr	r3, [pc, #168]	; (800c8c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c818:	0a5b      	lsrs	r3, r3, #9
 800c81a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c81e:	ee07 3a90 	vmov	s15, r3
 800c822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c826:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c82a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c82e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c832:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c836:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c83a:	ee17 2a90 	vmov	r2, s15
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c842:	4b1f      	ldr	r3, [pc, #124]	; (800c8c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c846:	0c1b      	lsrs	r3, r3, #16
 800c848:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c84c:	ee07 3a90 	vmov	s15, r3
 800c850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c854:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c858:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c85c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c860:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c864:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c868:	ee17 2a90 	vmov	r2, s15
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c870:	4b13      	ldr	r3, [pc, #76]	; (800c8c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c874:	0e1b      	lsrs	r3, r3, #24
 800c876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c87a:	ee07 3a90 	vmov	s15, r3
 800c87e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c882:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c886:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c88a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c88e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c892:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c896:	ee17 2a90 	vmov	r2, s15
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c89e:	e008      	b.n	800c8b2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	609a      	str	r2, [r3, #8]
}
 800c8b2:	bf00      	nop
 800c8b4:	3724      	adds	r7, #36	; 0x24
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8bc:	4770      	bx	lr
 800c8be:	bf00      	nop
 800c8c0:	58024400 	.word	0x58024400
 800c8c4:	03d09000 	.word	0x03d09000
 800c8c8:	46000000 	.word	0x46000000
 800c8cc:	4c742400 	.word	0x4c742400
 800c8d0:	4a742400 	.word	0x4a742400
 800c8d4:	4c3ebc20 	.word	0x4c3ebc20

0800c8d8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b089      	sub	sp, #36	; 0x24
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c8e0:	4ba0      	ldr	r3, [pc, #640]	; (800cb64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c8e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8e4:	f003 0303 	and.w	r3, r3, #3
 800c8e8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c8ea:	4b9e      	ldr	r3, [pc, #632]	; (800cb64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c8ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8ee:	091b      	lsrs	r3, r3, #4
 800c8f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8f4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c8f6:	4b9b      	ldr	r3, [pc, #620]	; (800cb64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c8f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8fa:	f003 0301 	and.w	r3, r3, #1
 800c8fe:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c900:	4b98      	ldr	r3, [pc, #608]	; (800cb64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c904:	08db      	lsrs	r3, r3, #3
 800c906:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c90a:	693a      	ldr	r2, [r7, #16]
 800c90c:	fb02 f303 	mul.w	r3, r2, r3
 800c910:	ee07 3a90 	vmov	s15, r3
 800c914:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c918:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c91c:	697b      	ldr	r3, [r7, #20]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	f000 8111 	beq.w	800cb46 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c924:	69bb      	ldr	r3, [r7, #24]
 800c926:	2b02      	cmp	r3, #2
 800c928:	f000 8083 	beq.w	800ca32 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c92c:	69bb      	ldr	r3, [r7, #24]
 800c92e:	2b02      	cmp	r3, #2
 800c930:	f200 80a1 	bhi.w	800ca76 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c934:	69bb      	ldr	r3, [r7, #24]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d003      	beq.n	800c942 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c93a:	69bb      	ldr	r3, [r7, #24]
 800c93c:	2b01      	cmp	r3, #1
 800c93e:	d056      	beq.n	800c9ee <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c940:	e099      	b.n	800ca76 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c942:	4b88      	ldr	r3, [pc, #544]	; (800cb64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f003 0320 	and.w	r3, r3, #32
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d02d      	beq.n	800c9aa <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c94e:	4b85      	ldr	r3, [pc, #532]	; (800cb64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	08db      	lsrs	r3, r3, #3
 800c954:	f003 0303 	and.w	r3, r3, #3
 800c958:	4a83      	ldr	r2, [pc, #524]	; (800cb68 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c95a:	fa22 f303 	lsr.w	r3, r2, r3
 800c95e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	ee07 3a90 	vmov	s15, r3
 800c966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c96a:	697b      	ldr	r3, [r7, #20]
 800c96c:	ee07 3a90 	vmov	s15, r3
 800c970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c974:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c978:	4b7a      	ldr	r3, [pc, #488]	; (800cb64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c97a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c97c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c980:	ee07 3a90 	vmov	s15, r3
 800c984:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c988:	ed97 6a03 	vldr	s12, [r7, #12]
 800c98c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800cb6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c990:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c994:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c998:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c99c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9a4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c9a8:	e087      	b.n	800caba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	ee07 3a90 	vmov	s15, r3
 800c9b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9b4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800cb70 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c9b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9bc:	4b69      	ldr	r3, [pc, #420]	; (800cb64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c9be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9c4:	ee07 3a90 	vmov	s15, r3
 800c9c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9d0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800cb6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c9d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9ec:	e065      	b.n	800caba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	ee07 3a90 	vmov	s15, r3
 800c9f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9f8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800cb74 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c9fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca00:	4b58      	ldr	r3, [pc, #352]	; (800cb64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca08:	ee07 3a90 	vmov	s15, r3
 800ca0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca10:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca14:	eddf 5a55 	vldr	s11, [pc, #340]	; 800cb6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ca18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca28:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca2c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca30:	e043      	b.n	800caba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	ee07 3a90 	vmov	s15, r3
 800ca38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca3c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800cb78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800ca40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca44:	4b47      	ldr	r3, [pc, #284]	; (800cb64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca4c:	ee07 3a90 	vmov	s15, r3
 800ca50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca54:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca58:	eddf 5a44 	vldr	s11, [pc, #272]	; 800cb6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ca5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca70:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca74:	e021      	b.n	800caba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	ee07 3a90 	vmov	s15, r3
 800ca7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca80:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800cb70 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ca84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca88:	4b36      	ldr	r3, [pc, #216]	; (800cb64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca90:	ee07 3a90 	vmov	s15, r3
 800ca94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca98:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca9c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800cb6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800caa0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800caa4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800caa8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800caac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cab0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cab4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cab8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800caba:	4b2a      	ldr	r3, [pc, #168]	; (800cb64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cabc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cabe:	0a5b      	lsrs	r3, r3, #9
 800cac0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cac4:	ee07 3a90 	vmov	s15, r3
 800cac8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cacc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cad0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cad4:	edd7 6a07 	vldr	s13, [r7, #28]
 800cad8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cadc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cae0:	ee17 2a90 	vmov	r2, s15
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800cae8:	4b1e      	ldr	r3, [pc, #120]	; (800cb64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800caea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caec:	0c1b      	lsrs	r3, r3, #16
 800caee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800caf2:	ee07 3a90 	vmov	s15, r3
 800caf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cafa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cafe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb02:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb0e:	ee17 2a90 	vmov	r2, s15
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800cb16:	4b13      	ldr	r3, [pc, #76]	; (800cb64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb1a:	0e1b      	lsrs	r3, r3, #24
 800cb1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb20:	ee07 3a90 	vmov	s15, r3
 800cb24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb30:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb3c:	ee17 2a90 	vmov	r2, s15
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800cb44:	e008      	b.n	800cb58 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2200      	movs	r2, #0
 800cb4a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2200      	movs	r2, #0
 800cb56:	609a      	str	r2, [r3, #8]
}
 800cb58:	bf00      	nop
 800cb5a:	3724      	adds	r7, #36	; 0x24
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb62:	4770      	bx	lr
 800cb64:	58024400 	.word	0x58024400
 800cb68:	03d09000 	.word	0x03d09000
 800cb6c:	46000000 	.word	0x46000000
 800cb70:	4c742400 	.word	0x4c742400
 800cb74:	4a742400 	.word	0x4a742400
 800cb78:	4c3ebc20 	.word	0x4c3ebc20

0800cb7c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b084      	sub	sp, #16
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
 800cb84:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cb86:	2300      	movs	r3, #0
 800cb88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cb8a:	4b53      	ldr	r3, [pc, #332]	; (800ccd8 <RCCEx_PLL2_Config+0x15c>)
 800cb8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb8e:	f003 0303 	and.w	r3, r3, #3
 800cb92:	2b03      	cmp	r3, #3
 800cb94:	d101      	bne.n	800cb9a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cb96:	2301      	movs	r3, #1
 800cb98:	e099      	b.n	800ccce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cb9a:	4b4f      	ldr	r3, [pc, #316]	; (800ccd8 <RCCEx_PLL2_Config+0x15c>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	4a4e      	ldr	r2, [pc, #312]	; (800ccd8 <RCCEx_PLL2_Config+0x15c>)
 800cba0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cba4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cba6:	f7f6 fe79 	bl	800389c <HAL_GetTick>
 800cbaa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cbac:	e008      	b.n	800cbc0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cbae:	f7f6 fe75 	bl	800389c <HAL_GetTick>
 800cbb2:	4602      	mov	r2, r0
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	1ad3      	subs	r3, r2, r3
 800cbb8:	2b02      	cmp	r3, #2
 800cbba:	d901      	bls.n	800cbc0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cbbc:	2303      	movs	r3, #3
 800cbbe:	e086      	b.n	800ccce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cbc0:	4b45      	ldr	r3, [pc, #276]	; (800ccd8 <RCCEx_PLL2_Config+0x15c>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d1f0      	bne.n	800cbae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cbcc:	4b42      	ldr	r3, [pc, #264]	; (800ccd8 <RCCEx_PLL2_Config+0x15c>)
 800cbce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbd0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	031b      	lsls	r3, r3, #12
 800cbda:	493f      	ldr	r1, [pc, #252]	; (800ccd8 <RCCEx_PLL2_Config+0x15c>)
 800cbdc:	4313      	orrs	r3, r2
 800cbde:	628b      	str	r3, [r1, #40]	; 0x28
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	685b      	ldr	r3, [r3, #4]
 800cbe4:	3b01      	subs	r3, #1
 800cbe6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	689b      	ldr	r3, [r3, #8]
 800cbee:	3b01      	subs	r3, #1
 800cbf0:	025b      	lsls	r3, r3, #9
 800cbf2:	b29b      	uxth	r3, r3
 800cbf4:	431a      	orrs	r2, r3
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	68db      	ldr	r3, [r3, #12]
 800cbfa:	3b01      	subs	r3, #1
 800cbfc:	041b      	lsls	r3, r3, #16
 800cbfe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cc02:	431a      	orrs	r2, r3
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	691b      	ldr	r3, [r3, #16]
 800cc08:	3b01      	subs	r3, #1
 800cc0a:	061b      	lsls	r3, r3, #24
 800cc0c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cc10:	4931      	ldr	r1, [pc, #196]	; (800ccd8 <RCCEx_PLL2_Config+0x15c>)
 800cc12:	4313      	orrs	r3, r2
 800cc14:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cc16:	4b30      	ldr	r3, [pc, #192]	; (800ccd8 <RCCEx_PLL2_Config+0x15c>)
 800cc18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc1a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	695b      	ldr	r3, [r3, #20]
 800cc22:	492d      	ldr	r1, [pc, #180]	; (800ccd8 <RCCEx_PLL2_Config+0x15c>)
 800cc24:	4313      	orrs	r3, r2
 800cc26:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cc28:	4b2b      	ldr	r3, [pc, #172]	; (800ccd8 <RCCEx_PLL2_Config+0x15c>)
 800cc2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc2c:	f023 0220 	bic.w	r2, r3, #32
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	699b      	ldr	r3, [r3, #24]
 800cc34:	4928      	ldr	r1, [pc, #160]	; (800ccd8 <RCCEx_PLL2_Config+0x15c>)
 800cc36:	4313      	orrs	r3, r2
 800cc38:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cc3a:	4b27      	ldr	r3, [pc, #156]	; (800ccd8 <RCCEx_PLL2_Config+0x15c>)
 800cc3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc3e:	4a26      	ldr	r2, [pc, #152]	; (800ccd8 <RCCEx_PLL2_Config+0x15c>)
 800cc40:	f023 0310 	bic.w	r3, r3, #16
 800cc44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cc46:	4b24      	ldr	r3, [pc, #144]	; (800ccd8 <RCCEx_PLL2_Config+0x15c>)
 800cc48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cc4a:	4b24      	ldr	r3, [pc, #144]	; (800ccdc <RCCEx_PLL2_Config+0x160>)
 800cc4c:	4013      	ands	r3, r2
 800cc4e:	687a      	ldr	r2, [r7, #4]
 800cc50:	69d2      	ldr	r2, [r2, #28]
 800cc52:	00d2      	lsls	r2, r2, #3
 800cc54:	4920      	ldr	r1, [pc, #128]	; (800ccd8 <RCCEx_PLL2_Config+0x15c>)
 800cc56:	4313      	orrs	r3, r2
 800cc58:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cc5a:	4b1f      	ldr	r3, [pc, #124]	; (800ccd8 <RCCEx_PLL2_Config+0x15c>)
 800cc5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc5e:	4a1e      	ldr	r2, [pc, #120]	; (800ccd8 <RCCEx_PLL2_Config+0x15c>)
 800cc60:	f043 0310 	orr.w	r3, r3, #16
 800cc64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d106      	bne.n	800cc7a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cc6c:	4b1a      	ldr	r3, [pc, #104]	; (800ccd8 <RCCEx_PLL2_Config+0x15c>)
 800cc6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc70:	4a19      	ldr	r2, [pc, #100]	; (800ccd8 <RCCEx_PLL2_Config+0x15c>)
 800cc72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cc76:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cc78:	e00f      	b.n	800cc9a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	2b01      	cmp	r3, #1
 800cc7e:	d106      	bne.n	800cc8e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cc80:	4b15      	ldr	r3, [pc, #84]	; (800ccd8 <RCCEx_PLL2_Config+0x15c>)
 800cc82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc84:	4a14      	ldr	r2, [pc, #80]	; (800ccd8 <RCCEx_PLL2_Config+0x15c>)
 800cc86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cc8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cc8c:	e005      	b.n	800cc9a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cc8e:	4b12      	ldr	r3, [pc, #72]	; (800ccd8 <RCCEx_PLL2_Config+0x15c>)
 800cc90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc92:	4a11      	ldr	r2, [pc, #68]	; (800ccd8 <RCCEx_PLL2_Config+0x15c>)
 800cc94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cc98:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cc9a:	4b0f      	ldr	r3, [pc, #60]	; (800ccd8 <RCCEx_PLL2_Config+0x15c>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	4a0e      	ldr	r2, [pc, #56]	; (800ccd8 <RCCEx_PLL2_Config+0x15c>)
 800cca0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cca4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cca6:	f7f6 fdf9 	bl	800389c <HAL_GetTick>
 800ccaa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ccac:	e008      	b.n	800ccc0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ccae:	f7f6 fdf5 	bl	800389c <HAL_GetTick>
 800ccb2:	4602      	mov	r2, r0
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	1ad3      	subs	r3, r2, r3
 800ccb8:	2b02      	cmp	r3, #2
 800ccba:	d901      	bls.n	800ccc0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ccbc:	2303      	movs	r3, #3
 800ccbe:	e006      	b.n	800ccce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ccc0:	4b05      	ldr	r3, [pc, #20]	; (800ccd8 <RCCEx_PLL2_Config+0x15c>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d0f0      	beq.n	800ccae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cccc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3710      	adds	r7, #16
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}
 800ccd6:	bf00      	nop
 800ccd8:	58024400 	.word	0x58024400
 800ccdc:	ffff0007 	.word	0xffff0007

0800cce0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b084      	sub	sp, #16
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
 800cce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ccea:	2300      	movs	r3, #0
 800ccec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ccee:	4b53      	ldr	r3, [pc, #332]	; (800ce3c <RCCEx_PLL3_Config+0x15c>)
 800ccf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccf2:	f003 0303 	and.w	r3, r3, #3
 800ccf6:	2b03      	cmp	r3, #3
 800ccf8:	d101      	bne.n	800ccfe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	e099      	b.n	800ce32 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ccfe:	4b4f      	ldr	r3, [pc, #316]	; (800ce3c <RCCEx_PLL3_Config+0x15c>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	4a4e      	ldr	r2, [pc, #312]	; (800ce3c <RCCEx_PLL3_Config+0x15c>)
 800cd04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cd08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cd0a:	f7f6 fdc7 	bl	800389c <HAL_GetTick>
 800cd0e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cd10:	e008      	b.n	800cd24 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cd12:	f7f6 fdc3 	bl	800389c <HAL_GetTick>
 800cd16:	4602      	mov	r2, r0
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	1ad3      	subs	r3, r2, r3
 800cd1c:	2b02      	cmp	r3, #2
 800cd1e:	d901      	bls.n	800cd24 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cd20:	2303      	movs	r3, #3
 800cd22:	e086      	b.n	800ce32 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cd24:	4b45      	ldr	r3, [pc, #276]	; (800ce3c <RCCEx_PLL3_Config+0x15c>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d1f0      	bne.n	800cd12 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cd30:	4b42      	ldr	r3, [pc, #264]	; (800ce3c <RCCEx_PLL3_Config+0x15c>)
 800cd32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd34:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	051b      	lsls	r3, r3, #20
 800cd3e:	493f      	ldr	r1, [pc, #252]	; (800ce3c <RCCEx_PLL3_Config+0x15c>)
 800cd40:	4313      	orrs	r3, r2
 800cd42:	628b      	str	r3, [r1, #40]	; 0x28
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	685b      	ldr	r3, [r3, #4]
 800cd48:	3b01      	subs	r3, #1
 800cd4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	689b      	ldr	r3, [r3, #8]
 800cd52:	3b01      	subs	r3, #1
 800cd54:	025b      	lsls	r3, r3, #9
 800cd56:	b29b      	uxth	r3, r3
 800cd58:	431a      	orrs	r2, r3
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	68db      	ldr	r3, [r3, #12]
 800cd5e:	3b01      	subs	r3, #1
 800cd60:	041b      	lsls	r3, r3, #16
 800cd62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cd66:	431a      	orrs	r2, r3
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	691b      	ldr	r3, [r3, #16]
 800cd6c:	3b01      	subs	r3, #1
 800cd6e:	061b      	lsls	r3, r3, #24
 800cd70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cd74:	4931      	ldr	r1, [pc, #196]	; (800ce3c <RCCEx_PLL3_Config+0x15c>)
 800cd76:	4313      	orrs	r3, r2
 800cd78:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cd7a:	4b30      	ldr	r3, [pc, #192]	; (800ce3c <RCCEx_PLL3_Config+0x15c>)
 800cd7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd7e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	695b      	ldr	r3, [r3, #20]
 800cd86:	492d      	ldr	r1, [pc, #180]	; (800ce3c <RCCEx_PLL3_Config+0x15c>)
 800cd88:	4313      	orrs	r3, r2
 800cd8a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cd8c:	4b2b      	ldr	r3, [pc, #172]	; (800ce3c <RCCEx_PLL3_Config+0x15c>)
 800cd8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd90:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	699b      	ldr	r3, [r3, #24]
 800cd98:	4928      	ldr	r1, [pc, #160]	; (800ce3c <RCCEx_PLL3_Config+0x15c>)
 800cd9a:	4313      	orrs	r3, r2
 800cd9c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cd9e:	4b27      	ldr	r3, [pc, #156]	; (800ce3c <RCCEx_PLL3_Config+0x15c>)
 800cda0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cda2:	4a26      	ldr	r2, [pc, #152]	; (800ce3c <RCCEx_PLL3_Config+0x15c>)
 800cda4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cda8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cdaa:	4b24      	ldr	r3, [pc, #144]	; (800ce3c <RCCEx_PLL3_Config+0x15c>)
 800cdac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cdae:	4b24      	ldr	r3, [pc, #144]	; (800ce40 <RCCEx_PLL3_Config+0x160>)
 800cdb0:	4013      	ands	r3, r2
 800cdb2:	687a      	ldr	r2, [r7, #4]
 800cdb4:	69d2      	ldr	r2, [r2, #28]
 800cdb6:	00d2      	lsls	r2, r2, #3
 800cdb8:	4920      	ldr	r1, [pc, #128]	; (800ce3c <RCCEx_PLL3_Config+0x15c>)
 800cdba:	4313      	orrs	r3, r2
 800cdbc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cdbe:	4b1f      	ldr	r3, [pc, #124]	; (800ce3c <RCCEx_PLL3_Config+0x15c>)
 800cdc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdc2:	4a1e      	ldr	r2, [pc, #120]	; (800ce3c <RCCEx_PLL3_Config+0x15c>)
 800cdc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cdc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d106      	bne.n	800cdde <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cdd0:	4b1a      	ldr	r3, [pc, #104]	; (800ce3c <RCCEx_PLL3_Config+0x15c>)
 800cdd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdd4:	4a19      	ldr	r2, [pc, #100]	; (800ce3c <RCCEx_PLL3_Config+0x15c>)
 800cdd6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cdda:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cddc:	e00f      	b.n	800cdfe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	2b01      	cmp	r3, #1
 800cde2:	d106      	bne.n	800cdf2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cde4:	4b15      	ldr	r3, [pc, #84]	; (800ce3c <RCCEx_PLL3_Config+0x15c>)
 800cde6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cde8:	4a14      	ldr	r2, [pc, #80]	; (800ce3c <RCCEx_PLL3_Config+0x15c>)
 800cdea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cdee:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cdf0:	e005      	b.n	800cdfe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cdf2:	4b12      	ldr	r3, [pc, #72]	; (800ce3c <RCCEx_PLL3_Config+0x15c>)
 800cdf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdf6:	4a11      	ldr	r2, [pc, #68]	; (800ce3c <RCCEx_PLL3_Config+0x15c>)
 800cdf8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cdfc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cdfe:	4b0f      	ldr	r3, [pc, #60]	; (800ce3c <RCCEx_PLL3_Config+0x15c>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	4a0e      	ldr	r2, [pc, #56]	; (800ce3c <RCCEx_PLL3_Config+0x15c>)
 800ce04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ce08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce0a:	f7f6 fd47 	bl	800389c <HAL_GetTick>
 800ce0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ce10:	e008      	b.n	800ce24 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ce12:	f7f6 fd43 	bl	800389c <HAL_GetTick>
 800ce16:	4602      	mov	r2, r0
 800ce18:	68bb      	ldr	r3, [r7, #8]
 800ce1a:	1ad3      	subs	r3, r2, r3
 800ce1c:	2b02      	cmp	r3, #2
 800ce1e:	d901      	bls.n	800ce24 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ce20:	2303      	movs	r3, #3
 800ce22:	e006      	b.n	800ce32 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ce24:	4b05      	ldr	r3, [pc, #20]	; (800ce3c <RCCEx_PLL3_Config+0x15c>)
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d0f0      	beq.n	800ce12 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ce30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	3710      	adds	r7, #16
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}
 800ce3a:	bf00      	nop
 800ce3c:	58024400 	.word	0x58024400
 800ce40:	ffff0007 	.word	0xffff0007

0800ce44 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b08a      	sub	sp, #40	; 0x28
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d101      	bne.n	800ce56 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800ce52:	2301      	movs	r3, #1
 800ce54:	e075      	b.n	800cf42 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ce5c:	b2db      	uxtb	r3, r3
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d105      	bne.n	800ce6e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2200      	movs	r2, #0
 800ce66:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800ce68:	6878      	ldr	r0, [r7, #4]
 800ce6a:	f7f5 fdc7 	bl	80029fc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	2204      	movs	r2, #4
 800ce72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f000 f868 	bl	800cf4c <HAL_SD_InitCard>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d001      	beq.n	800ce86 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800ce82:	2301      	movs	r3, #1
 800ce84:	e05d      	b.n	800cf42 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800ce86:	f107 0308 	add.w	r3, r7, #8
 800ce8a:	4619      	mov	r1, r3
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f000 fdaf 	bl	800d9f0 <HAL_SD_GetCardStatus>
 800ce92:	4603      	mov	r3, r0
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d001      	beq.n	800ce9c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800ce98:	2301      	movs	r3, #1
 800ce9a:	e052      	b.n	800cf42 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800ce9c:	7e3b      	ldrb	r3, [r7, #24]
 800ce9e:	b2db      	uxtb	r3, r3
 800cea0:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800cea2:	7e7b      	ldrb	r3, [r7, #25]
 800cea4:	b2db      	uxtb	r3, r3
 800cea6:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceac:	2b01      	cmp	r3, #1
 800ceae:	d10a      	bne.n	800cec6 <HAL_SD_Init+0x82>
 800ceb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d102      	bne.n	800cebc <HAL_SD_Init+0x78>
 800ceb6:	6a3b      	ldr	r3, [r7, #32]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d004      	beq.n	800cec6 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cec2:	659a      	str	r2, [r3, #88]	; 0x58
 800cec4:	e00b      	b.n	800cede <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceca:	2b01      	cmp	r3, #1
 800cecc:	d104      	bne.n	800ced8 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ced4:	659a      	str	r2, [r3, #88]	; 0x58
 800ced6:	e002      	b.n	800cede <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2200      	movs	r2, #0
 800cedc:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	68db      	ldr	r3, [r3, #12]
 800cee2:	4619      	mov	r1, r3
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f000 fe6d 	bl	800dbc4 <HAL_SD_ConfigWideBusOperation>
 800ceea:	4603      	mov	r3, r0
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d001      	beq.n	800cef4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800cef0:	2301      	movs	r3, #1
 800cef2:	e026      	b.n	800cf42 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800cef4:	f7f6 fcd2 	bl	800389c <HAL_GetTick>
 800cef8:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800cefa:	e011      	b.n	800cf20 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cefc:	f7f6 fcce 	bl	800389c <HAL_GetTick>
 800cf00:	4602      	mov	r2, r0
 800cf02:	69fb      	ldr	r3, [r7, #28]
 800cf04:	1ad3      	subs	r3, r2, r3
 800cf06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf0a:	d109      	bne.n	800cf20 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cf12:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2201      	movs	r2, #1
 800cf18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800cf1c:	2303      	movs	r3, #3
 800cf1e:	e010      	b.n	800cf42 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f000 ff61 	bl	800dde8 <HAL_SD_GetCardState>
 800cf26:	4603      	mov	r3, r0
 800cf28:	2b04      	cmp	r3, #4
 800cf2a:	d1e7      	bne.n	800cefc <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	2200      	movs	r2, #0
 800cf36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2201      	movs	r2, #1
 800cf3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800cf40:	2300      	movs	r3, #0
}
 800cf42:	4618      	mov	r0, r3
 800cf44:	3728      	adds	r7, #40	; 0x28
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}
	...

0800cf4c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cf4c:	b590      	push	{r4, r7, lr}
 800cf4e:	b08d      	sub	sp, #52	; 0x34
 800cf50:	af02      	add	r7, sp, #8
 800cf52:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800cf54:	2300      	movs	r3, #0
 800cf56:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800cf58:	2300      	movs	r3, #0
 800cf5a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800cf60:	2300      	movs	r3, #0
 800cf62:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800cf64:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800cf68:	f04f 0100 	mov.w	r1, #0
 800cf6c:	f7fe fd24 	bl	800b9b8 <HAL_RCCEx_GetPeriphCLKFreq>
 800cf70:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800cf72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d109      	bne.n	800cf8c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2201      	movs	r2, #1
 800cf7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800cf86:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cf88:	2301      	movs	r3, #1
 800cf8a:	e070      	b.n	800d06e <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800cf8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf8e:	0a1b      	lsrs	r3, r3, #8
 800cf90:	4a39      	ldr	r2, [pc, #228]	; (800d078 <HAL_SD_InitCard+0x12c>)
 800cf92:	fba2 2303 	umull	r2, r3, r2, r3
 800cf96:	091b      	lsrs	r3, r3, #4
 800cf98:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681c      	ldr	r4, [r3, #0]
 800cf9e:	466a      	mov	r2, sp
 800cfa0:	f107 0318 	add.w	r3, r7, #24
 800cfa4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cfa8:	e882 0003 	stmia.w	r2, {r0, r1}
 800cfac:	f107 030c 	add.w	r3, r7, #12
 800cfb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cfb2:	4620      	mov	r0, r4
 800cfb4:	f004 fda8 	bl	8011b08 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	f004 fdeb 	bl	8011b98 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800cfc2:	69fb      	ldr	r3, [r7, #28]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d005      	beq.n	800cfd4 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800cfc8:	69fb      	ldr	r3, [r7, #28]
 800cfca:	005b      	lsls	r3, r3, #1
 800cfcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfce:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfd2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800cfd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d007      	beq.n	800cfea <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800cfda:	4a28      	ldr	r2, [pc, #160]	; (800d07c <HAL_SD_InitCard+0x130>)
 800cfdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfde:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfe2:	3301      	adds	r3, #1
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	f7f6 fc65 	bl	80038b4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	f000 ffea 	bl	800dfc4 <SD_PowerON>
 800cff0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cff2:	6a3b      	ldr	r3, [r7, #32]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d00b      	beq.n	800d010 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2201      	movs	r2, #1
 800cffc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d004:	6a3b      	ldr	r3, [r7, #32]
 800d006:	431a      	orrs	r2, r3
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d00c:	2301      	movs	r3, #1
 800d00e:	e02e      	b.n	800d06e <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d010:	6878      	ldr	r0, [r7, #4]
 800d012:	f000 ff09 	bl	800de28 <SD_InitCard>
 800d016:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d018:	6a3b      	ldr	r3, [r7, #32]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d00b      	beq.n	800d036 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2201      	movs	r2, #1
 800d022:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d02a:	6a3b      	ldr	r3, [r7, #32]
 800d02c:	431a      	orrs	r2, r3
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d032:	2301      	movs	r3, #1
 800d034:	e01b      	b.n	800d06e <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d03e:	4618      	mov	r0, r3
 800d040:	f004 fe40 	bl	8011cc4 <SDMMC_CmdBlockLength>
 800d044:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d046:	6a3b      	ldr	r3, [r7, #32]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d00f      	beq.n	800d06c <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	4a0b      	ldr	r2, [pc, #44]	; (800d080 <HAL_SD_InitCard+0x134>)
 800d052:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d058:	6a3b      	ldr	r3, [r7, #32]
 800d05a:	431a      	orrs	r2, r3
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2201      	movs	r2, #1
 800d064:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d068:	2301      	movs	r3, #1
 800d06a:	e000      	b.n	800d06e <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800d06c:	2300      	movs	r3, #0
}
 800d06e:	4618      	mov	r0, r3
 800d070:	372c      	adds	r7, #44	; 0x2c
 800d072:	46bd      	mov	sp, r7
 800d074:	bd90      	pop	{r4, r7, pc}
 800d076:	bf00      	nop
 800d078:	014f8b59 	.word	0x014f8b59
 800d07c:	00012110 	.word	0x00012110
 800d080:	1fe00fff 	.word	0x1fe00fff

0800d084 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b08c      	sub	sp, #48	; 0x30
 800d088:	af00      	add	r7, sp, #0
 800d08a:	60f8      	str	r0, [r7, #12]
 800d08c:	60b9      	str	r1, [r7, #8]
 800d08e:	607a      	str	r2, [r7, #4]
 800d090:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d096:	68bb      	ldr	r3, [r7, #8]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d107      	bne.n	800d0ac <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0a0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	e08d      	b.n	800d1c8 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d0b2:	b2db      	uxtb	r3, r3
 800d0b4:	2b01      	cmp	r3, #1
 800d0b6:	f040 8086 	bne.w	800d1c6 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	2200      	movs	r2, #0
 800d0be:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d0c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	441a      	add	r2, r3
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0ca:	429a      	cmp	r2, r3
 800d0cc:	d907      	bls.n	800d0de <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0d2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d0da:	2301      	movs	r3, #1
 800d0dc:	e074      	b.n	800d1c8 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	2203      	movs	r2, #3
 800d0e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	68ba      	ldr	r2, [r7, #8]
 800d0f2:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	025a      	lsls	r2, r3, #9
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d100:	2b01      	cmp	r3, #1
 800d102:	d002      	beq.n	800d10a <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800d104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d106:	025b      	lsls	r3, r3, #9
 800d108:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d10a:	f04f 33ff 	mov.w	r3, #4294967295
 800d10e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	025b      	lsls	r3, r3, #9
 800d114:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d116:	2390      	movs	r3, #144	; 0x90
 800d118:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d11a:	2302      	movs	r3, #2
 800d11c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d11e:	2300      	movs	r3, #0
 800d120:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d122:	2300      	movs	r3, #0
 800d124:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	f107 0210 	add.w	r2, r7, #16
 800d12e:	4611      	mov	r1, r2
 800d130:	4618      	mov	r0, r3
 800d132:	f004 fd9b 	bl	8011c6c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	68da      	ldr	r2, [r3, #12]
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d144:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	68ba      	ldr	r2, [r7, #8]
 800d14c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	2201      	movs	r2, #1
 800d154:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	2b01      	cmp	r3, #1
 800d15a:	d90a      	bls.n	800d172 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	2282      	movs	r2, #130	; 0x82
 800d160:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d168:	4618      	mov	r0, r3
 800d16a:	f004 fdf1 	bl	8011d50 <SDMMC_CmdReadMultiBlock>
 800d16e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d170:	e009      	b.n	800d186 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	2281      	movs	r2, #129	; 0x81
 800d176:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d17e:	4618      	mov	r0, r3
 800d180:	f004 fdc3 	bl	8011d0a <SDMMC_CmdReadSingleBlock>
 800d184:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d012      	beq.n	800d1b2 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	4a0f      	ldr	r2, [pc, #60]	; (800d1d0 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d192:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d19a:	431a      	orrs	r2, r3
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	2201      	movs	r2, #1
 800d1a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	e00a      	b.n	800d1c8 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d1c0:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	e000      	b.n	800d1c8 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d1c6:	2302      	movs	r3, #2
  }
}
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	3730      	adds	r7, #48	; 0x30
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}
 800d1d0:	1fe00fff 	.word	0x1fe00fff

0800d1d4 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b08c      	sub	sp, #48	; 0x30
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	60f8      	str	r0, [r7, #12]
 800d1dc:	60b9      	str	r1, [r7, #8]
 800d1de:	607a      	str	r2, [r7, #4]
 800d1e0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d1e6:	68bb      	ldr	r3, [r7, #8]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d107      	bne.n	800d1fc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1f0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d1f8:	2301      	movs	r3, #1
 800d1fa:	e08d      	b.n	800d318 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d202:	b2db      	uxtb	r3, r3
 800d204:	2b01      	cmp	r3, #1
 800d206:	f040 8086 	bne.w	800d316 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	2200      	movs	r2, #0
 800d20e:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d210:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	441a      	add	r2, r3
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d21a:	429a      	cmp	r2, r3
 800d21c:	d907      	bls.n	800d22e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d222:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d22a:	2301      	movs	r3, #1
 800d22c:	e074      	b.n	800d318 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	2203      	movs	r2, #3
 800d232:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	2200      	movs	r2, #0
 800d23c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	68ba      	ldr	r2, [r7, #8]
 800d242:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d244:	683b      	ldr	r3, [r7, #0]
 800d246:	025a      	lsls	r2, r3, #9
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d250:	2b01      	cmp	r3, #1
 800d252:	d002      	beq.n	800d25a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800d254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d256:	025b      	lsls	r3, r3, #9
 800d258:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d25a:	f04f 33ff 	mov.w	r3, #4294967295
 800d25e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	025b      	lsls	r3, r3, #9
 800d264:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d266:	2390      	movs	r3, #144	; 0x90
 800d268:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d26a:	2300      	movs	r3, #0
 800d26c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d26e:	2300      	movs	r3, #0
 800d270:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d272:	2300      	movs	r3, #0
 800d274:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	f107 0210 	add.w	r2, r7, #16
 800d27e:	4611      	mov	r1, r2
 800d280:	4618      	mov	r0, r3
 800d282:	f004 fcf3 	bl	8011c6c <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	68da      	ldr	r2, [r3, #12]
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d294:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	68ba      	ldr	r2, [r7, #8]
 800d29c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	2201      	movs	r2, #1
 800d2a4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	2b01      	cmp	r3, #1
 800d2aa:	d90a      	bls.n	800d2c2 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	22a0      	movs	r2, #160	; 0xa0
 800d2b0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f004 fd8f 	bl	8011ddc <SDMMC_CmdWriteMultiBlock>
 800d2be:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d2c0:	e009      	b.n	800d2d6 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	2290      	movs	r2, #144	; 0x90
 800d2c6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f004 fd61 	bl	8011d96 <SDMMC_CmdWriteSingleBlock>
 800d2d4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d012      	beq.n	800d302 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	4a0f      	ldr	r2, [pc, #60]	; (800d320 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800d2e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ea:	431a      	orrs	r2, r3
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	2201      	movs	r2, #1
 800d2f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d2fe:	2301      	movs	r3, #1
 800d300:	e00a      	b.n	800d318 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800d310:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d312:	2300      	movs	r3, #0
 800d314:	e000      	b.n	800d318 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d316:	2302      	movs	r3, #2
  }
}
 800d318:	4618      	mov	r0, r3
 800d31a:	3730      	adds	r7, #48	; 0x30
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}
 800d320:	1fe00fff 	.word	0x1fe00fff

0800d324 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b084      	sub	sp, #16
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d330:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d338:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d008      	beq.n	800d352 <HAL_SD_IRQHandler+0x2e>
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	f003 0308 	and.w	r3, r3, #8
 800d346:	2b00      	cmp	r3, #0
 800d348:	d003      	beq.n	800d352 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d34a:	6878      	ldr	r0, [r7, #4]
 800d34c:	f001 f926 	bl	800e59c <SD_Read_IT>
 800d350:	e19a      	b.n	800d688 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	f000 80ac 	beq.w	800d4ba <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d36a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681a      	ldr	r2, [r3, #0]
 800d376:	4b59      	ldr	r3, [pc, #356]	; (800d4dc <HAL_SD_IRQHandler+0x1b8>)
 800d378:	400b      	ands	r3, r1
 800d37a:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d38a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	68da      	ldr	r2, [r3, #12]
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d39a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	f003 0308 	and.w	r3, r3, #8
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d038      	beq.n	800d418 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	f003 0302 	and.w	r3, r3, #2
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d104      	bne.n	800d3ba <HAL_SD_IRQHandler+0x96>
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	f003 0320 	and.w	r3, r3, #32
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d011      	beq.n	800d3de <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f004 fd30 	bl	8011e24 <SDMMC_CmdStopTransfer>
 800d3c4:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d3c6:	68bb      	ldr	r3, [r7, #8]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d008      	beq.n	800d3de <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	431a      	orrs	r2, r3
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d3d8:	6878      	ldr	r0, [r7, #4]
 800d3da:	f000 f95b 	bl	800d694 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	4a3f      	ldr	r2, [pc, #252]	; (800d4e0 <HAL_SD_IRQHandler+0x1bc>)
 800d3e4:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2201      	movs	r2, #1
 800d3ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	f003 0301 	and.w	r3, r3, #1
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d104      	bne.n	800d408 <HAL_SD_IRQHandler+0xe4>
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	f003 0302 	and.w	r3, r3, #2
 800d404:	2b00      	cmp	r3, #0
 800d406:	d003      	beq.n	800d410 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d408:	6878      	ldr	r0, [r7, #4]
 800d40a:	f006 fd31 	bl	8013e70 <HAL_SD_RxCpltCallback>
 800d40e:	e13b      	b.n	800d688 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d410:	6878      	ldr	r0, [r7, #4]
 800d412:	f006 fd23 	bl	8013e5c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d416:	e137      	b.n	800d688 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d41e:	2b00      	cmp	r3, #0
 800d420:	f000 8132 	beq.w	800d688 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	2200      	movs	r2, #0
 800d42a:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	2200      	movs	r2, #0
 800d432:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	2200      	movs	r2, #0
 800d43a:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	f003 0302 	and.w	r3, r3, #2
 800d442:	2b00      	cmp	r3, #0
 800d444:	d104      	bne.n	800d450 <HAL_SD_IRQHandler+0x12c>
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	f003 0320 	and.w	r3, r3, #32
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d011      	beq.n	800d474 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	4618      	mov	r0, r3
 800d456:	f004 fce5 	bl	8011e24 <SDMMC_CmdStopTransfer>
 800d45a:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d008      	beq.n	800d474 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	431a      	orrs	r2, r3
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	f000 f910 	bl	800d694 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2201      	movs	r2, #1
 800d478:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2200      	movs	r2, #0
 800d480:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	f003 0310 	and.w	r3, r3, #16
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d104      	bne.n	800d496 <HAL_SD_IRQHandler+0x172>
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	f003 0320 	and.w	r3, r3, #32
 800d492:	2b00      	cmp	r3, #0
 800d494:	d002      	beq.n	800d49c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800d496:	6878      	ldr	r0, [r7, #4]
 800d498:	f006 fce0 	bl	8013e5c <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	f003 0301 	and.w	r3, r3, #1
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d105      	bne.n	800d4b2 <HAL_SD_IRQHandler+0x18e>
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	f003 0302 	and.w	r3, r3, #2
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	f000 80eb 	beq.w	800d688 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f006 fcdc 	bl	8013e70 <HAL_SD_RxCpltCallback>
}
 800d4b8:	e0e6      	b.n	800d688 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d00d      	beq.n	800d4e4 <HAL_SD_IRQHandler+0x1c0>
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	f003 0308 	and.w	r3, r3, #8
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d008      	beq.n	800d4e4 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800d4d2:	6878      	ldr	r0, [r7, #4]
 800d4d4:	f001 f8a8 	bl	800e628 <SD_Write_IT>
 800d4d8:	e0d6      	b.n	800d688 <HAL_SD_IRQHandler+0x364>
 800d4da:	bf00      	nop
 800d4dc:	ffff3ec5 	.word	0xffff3ec5
 800d4e0:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4ea:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	f000 809d 	beq.w	800d62e <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4fa:	f003 0302 	and.w	r3, r3, #2
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d005      	beq.n	800d50e <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d506:	f043 0202 	orr.w	r2, r3, #2
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d514:	f003 0308 	and.w	r3, r3, #8
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d005      	beq.n	800d528 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d520:	f043 0208 	orr.w	r2, r3, #8
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d52e:	f003 0320 	and.w	r3, r3, #32
 800d532:	2b00      	cmp	r3, #0
 800d534:	d005      	beq.n	800d542 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d53a:	f043 0220 	orr.w	r2, r3, #32
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d548:	f003 0310 	and.w	r3, r3, #16
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d005      	beq.n	800d55c <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d554:	f043 0210 	orr.w	r2, r3, #16
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	4a4b      	ldr	r2, [pc, #300]	; (800d690 <HAL_SD_IRQHandler+0x36c>)
 800d562:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d572:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	68da      	ldr	r2, [r3, #12]
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d582:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d592:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	68da      	ldr	r2, [r3, #12]
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d5a2:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f004 fc3b 	bl	8011e24 <SDMMC_CmdStopTransfer>
 800d5ae:	4602      	mov	r2, r0
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5b4:	431a      	orrs	r2, r3
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	68da      	ldr	r2, [r3, #12]
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d5c8:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d5d2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	f003 0308 	and.w	r3, r3, #8
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d00a      	beq.n	800d5f4 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2201      	movs	r2, #1
 800d5e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	f000 f851 	bl	800d694 <HAL_SD_ErrorCallback>
}
 800d5f2:	e049      	b.n	800d688 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d044      	beq.n	800d688 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d602:	2b00      	cmp	r3, #0
 800d604:	d040      	beq.n	800d688 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d614:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	2200      	movs	r2, #0
 800d61c:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2201      	movs	r2, #1
 800d622:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800d626:	6878      	ldr	r0, [r7, #4]
 800d628:	f000 f834 	bl	800d694 <HAL_SD_ErrorCallback>
}
 800d62c:	e02c      	b.n	800d688 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d025      	beq.n	800d688 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d644:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d64c:	f003 0304 	and.w	r3, r3, #4
 800d650:	2b00      	cmp	r3, #0
 800d652:	d10c      	bne.n	800d66e <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	f003 0320 	and.w	r3, r3, #32
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d003      	beq.n	800d666 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f001 f84a 	bl	800e6f8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800d664:	e010      	b.n	800d688 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f001 f832 	bl	800e6d0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800d66c:	e00c      	b.n	800d688 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	f003 0320 	and.w	r3, r3, #32
 800d674:	2b00      	cmp	r3, #0
 800d676:	d003      	beq.n	800d680 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800d678:	6878      	ldr	r0, [r7, #4]
 800d67a:	f001 f833 	bl	800e6e4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800d67e:	e003      	b.n	800d688 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f001 f81b 	bl	800e6bc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800d686:	e7ff      	b.n	800d688 <HAL_SD_IRQHandler+0x364>
 800d688:	bf00      	nop
 800d68a:	3710      	adds	r7, #16
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}
 800d690:	18000f3a 	.word	0x18000f3a

0800d694 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d694:	b480      	push	{r7}
 800d696:	b083      	sub	sp, #12
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d69c:	bf00      	nop
 800d69e:	370c      	adds	r7, #12
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a6:	4770      	bx	lr

0800d6a8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d6a8:	b480      	push	{r7}
 800d6aa:	b083      	sub	sp, #12
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
 800d6b0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d6b6:	0f9b      	lsrs	r3, r3, #30
 800d6b8:	b2da      	uxtb	r2, r3
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d6c2:	0e9b      	lsrs	r3, r3, #26
 800d6c4:	b2db      	uxtb	r3, r3
 800d6c6:	f003 030f 	and.w	r3, r3, #15
 800d6ca:	b2da      	uxtb	r2, r3
 800d6cc:	683b      	ldr	r3, [r7, #0]
 800d6ce:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d6d4:	0e1b      	lsrs	r3, r3, #24
 800d6d6:	b2db      	uxtb	r3, r3
 800d6d8:	f003 0303 	and.w	r3, r3, #3
 800d6dc:	b2da      	uxtb	r2, r3
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d6e6:	0c1b      	lsrs	r3, r3, #16
 800d6e8:	b2da      	uxtb	r2, r3
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d6f2:	0a1b      	lsrs	r3, r3, #8
 800d6f4:	b2da      	uxtb	r2, r3
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d6fe:	b2da      	uxtb	r2, r3
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d708:	0d1b      	lsrs	r3, r3, #20
 800d70a:	b29a      	uxth	r2, r3
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d714:	0c1b      	lsrs	r3, r3, #16
 800d716:	b2db      	uxtb	r3, r3
 800d718:	f003 030f 	and.w	r3, r3, #15
 800d71c:	b2da      	uxtb	r2, r3
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d726:	0bdb      	lsrs	r3, r3, #15
 800d728:	b2db      	uxtb	r3, r3
 800d72a:	f003 0301 	and.w	r3, r3, #1
 800d72e:	b2da      	uxtb	r2, r3
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d738:	0b9b      	lsrs	r3, r3, #14
 800d73a:	b2db      	uxtb	r3, r3
 800d73c:	f003 0301 	and.w	r3, r3, #1
 800d740:	b2da      	uxtb	r2, r3
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d74a:	0b5b      	lsrs	r3, r3, #13
 800d74c:	b2db      	uxtb	r3, r3
 800d74e:	f003 0301 	and.w	r3, r3, #1
 800d752:	b2da      	uxtb	r2, r3
 800d754:	683b      	ldr	r3, [r7, #0]
 800d756:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d75c:	0b1b      	lsrs	r3, r3, #12
 800d75e:	b2db      	uxtb	r3, r3
 800d760:	f003 0301 	and.w	r3, r3, #1
 800d764:	b2da      	uxtb	r2, r3
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	2200      	movs	r2, #0
 800d76e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d774:	2b00      	cmp	r3, #0
 800d776:	d163      	bne.n	800d840 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d77c:	009a      	lsls	r2, r3, #2
 800d77e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d782:	4013      	ands	r3, r2
 800d784:	687a      	ldr	r2, [r7, #4]
 800d786:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800d788:	0f92      	lsrs	r2, r2, #30
 800d78a:	431a      	orrs	r2, r3
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d794:	0edb      	lsrs	r3, r3, #27
 800d796:	b2db      	uxtb	r3, r3
 800d798:	f003 0307 	and.w	r3, r3, #7
 800d79c:	b2da      	uxtb	r2, r3
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d7a6:	0e1b      	lsrs	r3, r3, #24
 800d7a8:	b2db      	uxtb	r3, r3
 800d7aa:	f003 0307 	and.w	r3, r3, #7
 800d7ae:	b2da      	uxtb	r2, r3
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d7b8:	0d5b      	lsrs	r3, r3, #21
 800d7ba:	b2db      	uxtb	r3, r3
 800d7bc:	f003 0307 	and.w	r3, r3, #7
 800d7c0:	b2da      	uxtb	r2, r3
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d7ca:	0c9b      	lsrs	r3, r3, #18
 800d7cc:	b2db      	uxtb	r3, r3
 800d7ce:	f003 0307 	and.w	r3, r3, #7
 800d7d2:	b2da      	uxtb	r2, r3
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d7dc:	0bdb      	lsrs	r3, r3, #15
 800d7de:	b2db      	uxtb	r3, r3
 800d7e0:	f003 0307 	and.w	r3, r3, #7
 800d7e4:	b2da      	uxtb	r2, r3
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	691b      	ldr	r3, [r3, #16]
 800d7ee:	1c5a      	adds	r2, r3, #1
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	7e1b      	ldrb	r3, [r3, #24]
 800d7f8:	b2db      	uxtb	r3, r3
 800d7fa:	f003 0307 	and.w	r3, r3, #7
 800d7fe:	3302      	adds	r3, #2
 800d800:	2201      	movs	r2, #1
 800d802:	fa02 f303 	lsl.w	r3, r2, r3
 800d806:	687a      	ldr	r2, [r7, #4]
 800d808:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d80a:	fb03 f202 	mul.w	r2, r3, r2
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	7a1b      	ldrb	r3, [r3, #8]
 800d816:	b2db      	uxtb	r3, r3
 800d818:	f003 030f 	and.w	r3, r3, #15
 800d81c:	2201      	movs	r2, #1
 800d81e:	409a      	lsls	r2, r3
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d828:	687a      	ldr	r2, [r7, #4]
 800d82a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800d82c:	0a52      	lsrs	r2, r2, #9
 800d82e:	fb03 f202 	mul.w	r2, r3, r2
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d83c:	655a      	str	r2, [r3, #84]	; 0x54
 800d83e:	e031      	b.n	800d8a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d844:	2b01      	cmp	r3, #1
 800d846:	d11d      	bne.n	800d884 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d84c:	041b      	lsls	r3, r3, #16
 800d84e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d856:	0c1b      	lsrs	r3, r3, #16
 800d858:	431a      	orrs	r2, r3
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	691b      	ldr	r3, [r3, #16]
 800d862:	3301      	adds	r3, #1
 800d864:	029a      	lsls	r2, r3, #10
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d878:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	655a      	str	r2, [r3, #84]	; 0x54
 800d882:	e00f      	b.n	800d8a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	4a58      	ldr	r2, [pc, #352]	; (800d9ec <HAL_SD_GetCardCSD+0x344>)
 800d88a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d890:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2201      	movs	r2, #1
 800d89c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d8a0:	2301      	movs	r3, #1
 800d8a2:	e09d      	b.n	800d9e0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8a8:	0b9b      	lsrs	r3, r3, #14
 800d8aa:	b2db      	uxtb	r3, r3
 800d8ac:	f003 0301 	and.w	r3, r3, #1
 800d8b0:	b2da      	uxtb	r2, r3
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8ba:	09db      	lsrs	r3, r3, #7
 800d8bc:	b2db      	uxtb	r3, r3
 800d8be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8c2:	b2da      	uxtb	r2, r3
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8cc:	b2db      	uxtb	r3, r3
 800d8ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8d2:	b2da      	uxtb	r2, r3
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d8dc:	0fdb      	lsrs	r3, r3, #31
 800d8de:	b2da      	uxtb	r2, r3
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d8e8:	0f5b      	lsrs	r3, r3, #29
 800d8ea:	b2db      	uxtb	r3, r3
 800d8ec:	f003 0303 	and.w	r3, r3, #3
 800d8f0:	b2da      	uxtb	r2, r3
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d8fa:	0e9b      	lsrs	r3, r3, #26
 800d8fc:	b2db      	uxtb	r3, r3
 800d8fe:	f003 0307 	and.w	r3, r3, #7
 800d902:	b2da      	uxtb	r2, r3
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d90c:	0d9b      	lsrs	r3, r3, #22
 800d90e:	b2db      	uxtb	r3, r3
 800d910:	f003 030f 	and.w	r3, r3, #15
 800d914:	b2da      	uxtb	r2, r3
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d91e:	0d5b      	lsrs	r3, r3, #21
 800d920:	b2db      	uxtb	r3, r3
 800d922:	f003 0301 	and.w	r3, r3, #1
 800d926:	b2da      	uxtb	r2, r3
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d92e:	683b      	ldr	r3, [r7, #0]
 800d930:	2200      	movs	r2, #0
 800d932:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d93a:	0c1b      	lsrs	r3, r3, #16
 800d93c:	b2db      	uxtb	r3, r3
 800d93e:	f003 0301 	and.w	r3, r3, #1
 800d942:	b2da      	uxtb	r2, r3
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d94e:	0bdb      	lsrs	r3, r3, #15
 800d950:	b2db      	uxtb	r3, r3
 800d952:	f003 0301 	and.w	r3, r3, #1
 800d956:	b2da      	uxtb	r2, r3
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d962:	0b9b      	lsrs	r3, r3, #14
 800d964:	b2db      	uxtb	r3, r3
 800d966:	f003 0301 	and.w	r3, r3, #1
 800d96a:	b2da      	uxtb	r2, r3
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d976:	0b5b      	lsrs	r3, r3, #13
 800d978:	b2db      	uxtb	r3, r3
 800d97a:	f003 0301 	and.w	r3, r3, #1
 800d97e:	b2da      	uxtb	r2, r3
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d98a:	0b1b      	lsrs	r3, r3, #12
 800d98c:	b2db      	uxtb	r3, r3
 800d98e:	f003 0301 	and.w	r3, r3, #1
 800d992:	b2da      	uxtb	r2, r3
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d99e:	0a9b      	lsrs	r3, r3, #10
 800d9a0:	b2db      	uxtb	r3, r3
 800d9a2:	f003 0303 	and.w	r3, r3, #3
 800d9a6:	b2da      	uxtb	r2, r3
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9b2:	0a1b      	lsrs	r3, r3, #8
 800d9b4:	b2db      	uxtb	r3, r3
 800d9b6:	f003 0303 	and.w	r3, r3, #3
 800d9ba:	b2da      	uxtb	r2, r3
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9c6:	085b      	lsrs	r3, r3, #1
 800d9c8:	b2db      	uxtb	r3, r3
 800d9ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9ce:	b2da      	uxtb	r2, r3
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d9d6:	683b      	ldr	r3, [r7, #0]
 800d9d8:	2201      	movs	r2, #1
 800d9da:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d9de:	2300      	movs	r3, #0
}
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	370c      	adds	r7, #12
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ea:	4770      	bx	lr
 800d9ec:	1fe00fff 	.word	0x1fe00fff

0800d9f0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b094      	sub	sp, #80	; 0x50
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
 800d9f8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800da06:	b2db      	uxtb	r3, r3
 800da08:	2b03      	cmp	r3, #3
 800da0a:	d101      	bne.n	800da10 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800da0c:	2301      	movs	r3, #1
 800da0e:	e0a7      	b.n	800db60 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800da10:	f107 0308 	add.w	r3, r7, #8
 800da14:	4619      	mov	r1, r3
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	f000 fb62 	bl	800e0e0 <SD_SendSDStatus>
 800da1c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800da1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da20:	2b00      	cmp	r3, #0
 800da22:	d011      	beq.n	800da48 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	4a4f      	ldr	r2, [pc, #316]	; (800db68 <HAL_SD_GetCardStatus+0x178>)
 800da2a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da32:	431a      	orrs	r2, r3
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2201      	movs	r2, #1
 800da3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800da40:	2301      	movs	r3, #1
 800da42:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800da46:	e070      	b.n	800db2a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800da48:	68bb      	ldr	r3, [r7, #8]
 800da4a:	099b      	lsrs	r3, r3, #6
 800da4c:	b2db      	uxtb	r3, r3
 800da4e:	f003 0303 	and.w	r3, r3, #3
 800da52:	b2da      	uxtb	r2, r3
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	095b      	lsrs	r3, r3, #5
 800da5c:	b2db      	uxtb	r3, r3
 800da5e:	f003 0301 	and.w	r3, r3, #1
 800da62:	b2da      	uxtb	r2, r3
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800da68:	68bb      	ldr	r3, [r7, #8]
 800da6a:	0a1b      	lsrs	r3, r3, #8
 800da6c:	b29b      	uxth	r3, r3
 800da6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800da72:	b29a      	uxth	r2, r3
 800da74:	68bb      	ldr	r3, [r7, #8]
 800da76:	0e1b      	lsrs	r3, r3, #24
 800da78:	b29b      	uxth	r3, r3
 800da7a:	4313      	orrs	r3, r2
 800da7c:	b29a      	uxth	r2, r3
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	061a      	lsls	r2, r3, #24
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	021b      	lsls	r3, r3, #8
 800da8a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800da8e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	0a1b      	lsrs	r3, r3, #8
 800da94:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800da98:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	0e1b      	lsrs	r3, r3, #24
 800da9e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800daa4:	693b      	ldr	r3, [r7, #16]
 800daa6:	b2da      	uxtb	r2, r3
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800daac:	693b      	ldr	r3, [r7, #16]
 800daae:	0a1b      	lsrs	r3, r3, #8
 800dab0:	b2da      	uxtb	r2, r3
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800dab6:	693b      	ldr	r3, [r7, #16]
 800dab8:	0d1b      	lsrs	r3, r3, #20
 800daba:	b2db      	uxtb	r3, r3
 800dabc:	f003 030f 	and.w	r3, r3, #15
 800dac0:	b2da      	uxtb	r2, r3
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800dac6:	693b      	ldr	r3, [r7, #16]
 800dac8:	0c1b      	lsrs	r3, r3, #16
 800daca:	b29b      	uxth	r3, r3
 800dacc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dad0:	b29a      	uxth	r2, r3
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	b29b      	uxth	r3, r3
 800dad6:	b2db      	uxtb	r3, r3
 800dad8:	b29b      	uxth	r3, r3
 800dada:	4313      	orrs	r3, r2
 800dadc:	b29a      	uxth	r2, r3
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	0a9b      	lsrs	r3, r3, #10
 800dae6:	b2db      	uxtb	r3, r3
 800dae8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800daec:	b2da      	uxtb	r2, r3
 800daee:	683b      	ldr	r3, [r7, #0]
 800daf0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800daf2:	697b      	ldr	r3, [r7, #20]
 800daf4:	0a1b      	lsrs	r3, r3, #8
 800daf6:	b2db      	uxtb	r3, r3
 800daf8:	f003 0303 	and.w	r3, r3, #3
 800dafc:	b2da      	uxtb	r2, r3
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800db02:	697b      	ldr	r3, [r7, #20]
 800db04:	091b      	lsrs	r3, r3, #4
 800db06:	b2db      	uxtb	r3, r3
 800db08:	f003 030f 	and.w	r3, r3, #15
 800db0c:	b2da      	uxtb	r2, r3
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	b2db      	uxtb	r3, r3
 800db16:	f003 030f 	and.w	r3, r3, #15
 800db1a:	b2da      	uxtb	r2, r3
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800db20:	69bb      	ldr	r3, [r7, #24]
 800db22:	0e1b      	lsrs	r3, r3, #24
 800db24:	b2da      	uxtb	r2, r3
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800db32:	4618      	mov	r0, r3
 800db34:	f004 f8c6 	bl	8011cc4 <SDMMC_CmdBlockLength>
 800db38:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800db3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d00d      	beq.n	800db5c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	4a08      	ldr	r2, [pc, #32]	; (800db68 <HAL_SD_GetCardStatus+0x178>)
 800db46:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800db4c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2201      	movs	r2, #1
 800db52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800db56:	2301      	movs	r3, #1
 800db58:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800db5c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800db60:	4618      	mov	r0, r3
 800db62:	3750      	adds	r7, #80	; 0x50
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}
 800db68:	1fe00fff 	.word	0x1fe00fff

0800db6c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800db6c:	b480      	push	{r7}
 800db6e:	b083      	sub	sp, #12
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
 800db74:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800db8a:	683b      	ldr	r3, [r7, #0]
 800db8c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800dbb6:	2300      	movs	r3, #0
}
 800dbb8:	4618      	mov	r0, r3
 800dbba:	370c      	adds	r7, #12
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc2:	4770      	bx	lr

0800dbc4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800dbc4:	b590      	push	{r4, r7, lr}
 800dbc6:	b08d      	sub	sp, #52	; 0x34
 800dbc8:	af02      	add	r7, sp, #8
 800dbca:	6078      	str	r0, [r7, #4]
 800dbcc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2203      	movs	r2, #3
 800dbd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbe0:	2b03      	cmp	r3, #3
 800dbe2:	d02e      	beq.n	800dc42 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dbea:	d106      	bne.n	800dbfa <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbf0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	635a      	str	r2, [r3, #52]	; 0x34
 800dbf8:	e029      	b.n	800dc4e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800dbfa:	683b      	ldr	r3, [r7, #0]
 800dbfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dc00:	d10a      	bne.n	800dc18 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f000 fb64 	bl	800e2d0 <SD_WideBus_Enable>
 800dc08:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc0e:	6a3b      	ldr	r3, [r7, #32]
 800dc10:	431a      	orrs	r2, r3
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	635a      	str	r2, [r3, #52]	; 0x34
 800dc16:	e01a      	b.n	800dc4e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d10a      	bne.n	800dc34 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800dc1e:	6878      	ldr	r0, [r7, #4]
 800dc20:	f000 fba1 	bl	800e366 <SD_WideBus_Disable>
 800dc24:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc2a:	6a3b      	ldr	r3, [r7, #32]
 800dc2c:	431a      	orrs	r2, r3
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	635a      	str	r2, [r3, #52]	; 0x34
 800dc32:	e00c      	b.n	800dc4e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc38:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	635a      	str	r2, [r3, #52]	; 0x34
 800dc40:	e005      	b.n	800dc4e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc46:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d007      	beq.n	800dc66 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	4a5f      	ldr	r2, [pc, #380]	; (800ddd8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800dc5c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800dc5e:	2301      	movs	r3, #1
 800dc60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dc64:	e096      	b.n	800dd94 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800dc66:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800dc6a:	f04f 0100 	mov.w	r1, #0
 800dc6e:	f7fd fea3 	bl	800b9b8 <HAL_RCCEx_GetPeriphCLKFreq>
 800dc72:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800dc74:	69fb      	ldr	r3, [r7, #28]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	f000 8083 	beq.w	800dd82 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	685b      	ldr	r3, [r3, #4]
 800dc80:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	689b      	ldr	r3, [r3, #8]
 800dc86:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	691b      	ldr	r3, [r3, #16]
 800dc90:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	695a      	ldr	r2, [r3, #20]
 800dc96:	69fb      	ldr	r3, [r7, #28]
 800dc98:	4950      	ldr	r1, [pc, #320]	; (800dddc <HAL_SD_ConfigWideBusOperation+0x218>)
 800dc9a:	fba1 1303 	umull	r1, r3, r1, r3
 800dc9e:	0e1b      	lsrs	r3, r3, #24
 800dca0:	429a      	cmp	r2, r3
 800dca2:	d303      	bcc.n	800dcac <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	695b      	ldr	r3, [r3, #20]
 800dca8:	61bb      	str	r3, [r7, #24]
 800dcaa:	e05a      	b.n	800dd62 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dcb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dcb4:	d103      	bne.n	800dcbe <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	695b      	ldr	r3, [r3, #20]
 800dcba:	61bb      	str	r3, [r7, #24]
 800dcbc:	e051      	b.n	800dd62 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dcc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dcc6:	d126      	bne.n	800dd16 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	695b      	ldr	r3, [r3, #20]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d10e      	bne.n	800dcee <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800dcd0:	69fb      	ldr	r3, [r7, #28]
 800dcd2:	4a43      	ldr	r2, [pc, #268]	; (800dde0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800dcd4:	4293      	cmp	r3, r2
 800dcd6:	d906      	bls.n	800dce6 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800dcd8:	69fb      	ldr	r3, [r7, #28]
 800dcda:	4a40      	ldr	r2, [pc, #256]	; (800dddc <HAL_SD_ConfigWideBusOperation+0x218>)
 800dcdc:	fba2 2303 	umull	r2, r3, r2, r3
 800dce0:	0e5b      	lsrs	r3, r3, #25
 800dce2:	61bb      	str	r3, [r7, #24]
 800dce4:	e03d      	b.n	800dd62 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	695b      	ldr	r3, [r3, #20]
 800dcea:	61bb      	str	r3, [r7, #24]
 800dcec:	e039      	b.n	800dd62 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	695b      	ldr	r3, [r3, #20]
 800dcf2:	005b      	lsls	r3, r3, #1
 800dcf4:	69fa      	ldr	r2, [r7, #28]
 800dcf6:	fbb2 f3f3 	udiv	r3, r2, r3
 800dcfa:	4a39      	ldr	r2, [pc, #228]	; (800dde0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800dcfc:	4293      	cmp	r3, r2
 800dcfe:	d906      	bls.n	800dd0e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800dd00:	69fb      	ldr	r3, [r7, #28]
 800dd02:	4a36      	ldr	r2, [pc, #216]	; (800dddc <HAL_SD_ConfigWideBusOperation+0x218>)
 800dd04:	fba2 2303 	umull	r2, r3, r2, r3
 800dd08:	0e5b      	lsrs	r3, r3, #25
 800dd0a:	61bb      	str	r3, [r7, #24]
 800dd0c:	e029      	b.n	800dd62 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	695b      	ldr	r3, [r3, #20]
 800dd12:	61bb      	str	r3, [r7, #24]
 800dd14:	e025      	b.n	800dd62 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	695b      	ldr	r3, [r3, #20]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d10e      	bne.n	800dd3c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800dd1e:	69fb      	ldr	r3, [r7, #28]
 800dd20:	4a30      	ldr	r2, [pc, #192]	; (800dde4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800dd22:	4293      	cmp	r3, r2
 800dd24:	d906      	bls.n	800dd34 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800dd26:	69fb      	ldr	r3, [r7, #28]
 800dd28:	4a2c      	ldr	r2, [pc, #176]	; (800dddc <HAL_SD_ConfigWideBusOperation+0x218>)
 800dd2a:	fba2 2303 	umull	r2, r3, r2, r3
 800dd2e:	0e1b      	lsrs	r3, r3, #24
 800dd30:	61bb      	str	r3, [r7, #24]
 800dd32:	e016      	b.n	800dd62 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	695b      	ldr	r3, [r3, #20]
 800dd38:	61bb      	str	r3, [r7, #24]
 800dd3a:	e012      	b.n	800dd62 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	695b      	ldr	r3, [r3, #20]
 800dd40:	005b      	lsls	r3, r3, #1
 800dd42:	69fa      	ldr	r2, [r7, #28]
 800dd44:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd48:	4a26      	ldr	r2, [pc, #152]	; (800dde4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800dd4a:	4293      	cmp	r3, r2
 800dd4c:	d906      	bls.n	800dd5c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800dd4e:	69fb      	ldr	r3, [r7, #28]
 800dd50:	4a22      	ldr	r2, [pc, #136]	; (800dddc <HAL_SD_ConfigWideBusOperation+0x218>)
 800dd52:	fba2 2303 	umull	r2, r3, r2, r3
 800dd56:	0e1b      	lsrs	r3, r3, #24
 800dd58:	61bb      	str	r3, [r7, #24]
 800dd5a:	e002      	b.n	800dd62 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	695b      	ldr	r3, [r3, #20]
 800dd60:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681c      	ldr	r4, [r3, #0]
 800dd66:	466a      	mov	r2, sp
 800dd68:	f107 0314 	add.w	r3, r7, #20
 800dd6c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800dd70:	e882 0003 	stmia.w	r2, {r0, r1}
 800dd74:	f107 0308 	add.w	r3, r7, #8
 800dd78:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dd7a:	4620      	mov	r0, r4
 800dd7c:	f003 fec4 	bl	8011b08 <SDMMC_Init>
 800dd80:	e008      	b.n	800dd94 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd86:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800dd8e:	2301      	movs	r3, #1
 800dd90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f003 ff91 	bl	8011cc4 <SDMMC_CmdBlockLength>
 800dda2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dda4:	6a3b      	ldr	r3, [r7, #32]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d00c      	beq.n	800ddc4 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	4a0a      	ldr	r2, [pc, #40]	; (800ddd8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800ddb0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ddb6:	6a3b      	ldr	r3, [r7, #32]
 800ddb8:	431a      	orrs	r2, r3
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800ddbe:	2301      	movs	r3, #1
 800ddc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2201      	movs	r2, #1
 800ddc8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800ddcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	372c      	adds	r7, #44	; 0x2c
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd90      	pop	{r4, r7, pc}
 800ddd8:	1fe00fff 	.word	0x1fe00fff
 800dddc:	55e63b89 	.word	0x55e63b89
 800dde0:	02faf080 	.word	0x02faf080
 800dde4:	017d7840 	.word	0x017d7840

0800dde8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b086      	sub	sp, #24
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ddf4:	f107 030c 	add.w	r3, r7, #12
 800ddf8:	4619      	mov	r1, r3
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	f000 fa40 	bl	800e280 <SD_SendStatus>
 800de00:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800de02:	697b      	ldr	r3, [r7, #20]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d005      	beq.n	800de14 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800de0c:	697b      	ldr	r3, [r7, #20]
 800de0e:	431a      	orrs	r2, r3
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	0a5b      	lsrs	r3, r3, #9
 800de18:	f003 030f 	and.w	r3, r3, #15
 800de1c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800de1e:	693b      	ldr	r3, [r7, #16]
}
 800de20:	4618      	mov	r0, r3
 800de22:	3718      	adds	r7, #24
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}

0800de28 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b090      	sub	sp, #64	; 0x40
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800de30:	2300      	movs	r3, #0
 800de32:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800de34:	f7f5 fd32 	bl	800389c <HAL_GetTick>
 800de38:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	4618      	mov	r0, r3
 800de40:	f003 febb 	bl	8011bba <SDMMC_GetPowerState>
 800de44:	4603      	mov	r3, r0
 800de46:	2b00      	cmp	r3, #0
 800de48:	d102      	bne.n	800de50 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800de4a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800de4e:	e0b5      	b.n	800dfbc <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de54:	2b03      	cmp	r3, #3
 800de56:	d02e      	beq.n	800deb6 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	4618      	mov	r0, r3
 800de5e:	f004 f906 	bl	801206e <SDMMC_CmdSendCID>
 800de62:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800de64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de66:	2b00      	cmp	r3, #0
 800de68:	d001      	beq.n	800de6e <SD_InitCard+0x46>
    {
      return errorstate;
 800de6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de6c:	e0a6      	b.n	800dfbc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	2100      	movs	r1, #0
 800de74:	4618      	mov	r0, r3
 800de76:	f003 fee6 	bl	8011c46 <SDMMC_GetResponse>
 800de7a:	4602      	mov	r2, r0
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	2104      	movs	r1, #4
 800de86:	4618      	mov	r0, r3
 800de88:	f003 fedd 	bl	8011c46 <SDMMC_GetResponse>
 800de8c:	4602      	mov	r2, r0
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	2108      	movs	r1, #8
 800de98:	4618      	mov	r0, r3
 800de9a:	f003 fed4 	bl	8011c46 <SDMMC_GetResponse>
 800de9e:	4602      	mov	r2, r0
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	210c      	movs	r1, #12
 800deaa:	4618      	mov	r0, r3
 800deac:	f003 fecb 	bl	8011c46 <SDMMC_GetResponse>
 800deb0:	4602      	mov	r2, r0
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deba:	2b03      	cmp	r3, #3
 800debc:	d01d      	beq.n	800defa <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800debe:	e019      	b.n	800def4 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	f107 020a 	add.w	r2, r7, #10
 800dec8:	4611      	mov	r1, r2
 800deca:	4618      	mov	r0, r3
 800decc:	f004 f90e 	bl	80120ec <SDMMC_CmdSetRelAdd>
 800ded0:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800ded2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d001      	beq.n	800dedc <SD_InitCard+0xb4>
      {
        return errorstate;
 800ded8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deda:	e06f      	b.n	800dfbc <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800dedc:	f7f5 fcde 	bl	800389c <HAL_GetTick>
 800dee0:	4602      	mov	r2, r0
 800dee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dee4:	1ad3      	subs	r3, r2, r3
 800dee6:	f241 3287 	movw	r2, #4999	; 0x1387
 800deea:	4293      	cmp	r3, r2
 800deec:	d902      	bls.n	800def4 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800deee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800def2:	e063      	b.n	800dfbc <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800def4:	897b      	ldrh	r3, [r7, #10]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d0e2      	beq.n	800dec0 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800defe:	2b03      	cmp	r3, #3
 800df00:	d036      	beq.n	800df70 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800df02:	897b      	ldrh	r3, [r7, #10]
 800df04:	461a      	mov	r2, r3
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681a      	ldr	r2, [r3, #0]
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df12:	041b      	lsls	r3, r3, #16
 800df14:	4619      	mov	r1, r3
 800df16:	4610      	mov	r0, r2
 800df18:	f004 f8c8 	bl	80120ac <SDMMC_CmdSendCSD>
 800df1c:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800df1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df20:	2b00      	cmp	r3, #0
 800df22:	d001      	beq.n	800df28 <SD_InitCard+0x100>
    {
      return errorstate;
 800df24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df26:	e049      	b.n	800dfbc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	2100      	movs	r1, #0
 800df2e:	4618      	mov	r0, r3
 800df30:	f003 fe89 	bl	8011c46 <SDMMC_GetResponse>
 800df34:	4602      	mov	r2, r0
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	2104      	movs	r1, #4
 800df40:	4618      	mov	r0, r3
 800df42:	f003 fe80 	bl	8011c46 <SDMMC_GetResponse>
 800df46:	4602      	mov	r2, r0
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	2108      	movs	r1, #8
 800df52:	4618      	mov	r0, r3
 800df54:	f003 fe77 	bl	8011c46 <SDMMC_GetResponse>
 800df58:	4602      	mov	r2, r0
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	210c      	movs	r1, #12
 800df64:	4618      	mov	r0, r3
 800df66:	f003 fe6e 	bl	8011c46 <SDMMC_GetResponse>
 800df6a:	4602      	mov	r2, r0
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	2104      	movs	r1, #4
 800df76:	4618      	mov	r0, r3
 800df78:	f003 fe65 	bl	8011c46 <SDMMC_GetResponse>
 800df7c:	4603      	mov	r3, r0
 800df7e:	0d1a      	lsrs	r2, r3, #20
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800df84:	f107 030c 	add.w	r3, r7, #12
 800df88:	4619      	mov	r1, r3
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	f7ff fb8c 	bl	800d6a8 <HAL_SD_GetCardCSD>
 800df90:	4603      	mov	r3, r0
 800df92:	2b00      	cmp	r3, #0
 800df94:	d002      	beq.n	800df9c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800df96:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800df9a:	e00f      	b.n	800dfbc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681a      	ldr	r2, [r3, #0]
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfa4:	041b      	lsls	r3, r3, #16
 800dfa6:	4619      	mov	r1, r3
 800dfa8:	4610      	mov	r0, r2
 800dfaa:	f003 ff77 	bl	8011e9c <SDMMC_CmdSelDesel>
 800dfae:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800dfb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d001      	beq.n	800dfba <SD_InitCard+0x192>
  {
    return errorstate;
 800dfb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfb8:	e000      	b.n	800dfbc <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800dfba:	2300      	movs	r3, #0
}
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	3740      	adds	r7, #64	; 0x40
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bd80      	pop	{r7, pc}

0800dfc4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b086      	sub	sp, #24
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f003 ff80 	bl	8011ee2 <SDMMC_CmdGoIdleState>
 800dfe2:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d001      	beq.n	800dfee <SD_PowerON+0x2a>
  {
    return errorstate;
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	e072      	b.n	800e0d4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	4618      	mov	r0, r3
 800dff4:	f003 ff93 	bl	8011f1e <SDMMC_CmdOperCond>
 800dff8:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e000:	d10d      	bne.n	800e01e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	2200      	movs	r2, #0
 800e006:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	4618      	mov	r0, r3
 800e00e:	f003 ff68 	bl	8011ee2 <SDMMC_CmdGoIdleState>
 800e012:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d004      	beq.n	800e024 <SD_PowerON+0x60>
    {
      return errorstate;
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	e05a      	b.n	800e0d4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	2201      	movs	r2, #1
 800e022:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e028:	2b01      	cmp	r3, #1
 800e02a:	d137      	bne.n	800e09c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	2100      	movs	r1, #0
 800e032:	4618      	mov	r0, r3
 800e034:	f003 ff93 	bl	8011f5e <SDMMC_CmdAppCommand>
 800e038:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d02d      	beq.n	800e09c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e040:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e044:	e046      	b.n	800e0d4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	2100      	movs	r1, #0
 800e04c:	4618      	mov	r0, r3
 800e04e:	f003 ff86 	bl	8011f5e <SDMMC_CmdAppCommand>
 800e052:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d001      	beq.n	800e05e <SD_PowerON+0x9a>
    {
      return errorstate;
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	e03a      	b.n	800e0d4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	491e      	ldr	r1, [pc, #120]	; (800e0dc <SD_PowerON+0x118>)
 800e064:	4618      	mov	r0, r3
 800e066:	f003 ff9d 	bl	8011fa4 <SDMMC_CmdAppOperCommand>
 800e06a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d002      	beq.n	800e078 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e072:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e076:	e02d      	b.n	800e0d4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	2100      	movs	r1, #0
 800e07e:	4618      	mov	r0, r3
 800e080:	f003 fde1 	bl	8011c46 <SDMMC_GetResponse>
 800e084:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e086:	697b      	ldr	r3, [r7, #20]
 800e088:	0fdb      	lsrs	r3, r3, #31
 800e08a:	2b01      	cmp	r3, #1
 800e08c:	d101      	bne.n	800e092 <SD_PowerON+0xce>
 800e08e:	2301      	movs	r3, #1
 800e090:	e000      	b.n	800e094 <SD_PowerON+0xd0>
 800e092:	2300      	movs	r3, #0
 800e094:	613b      	str	r3, [r7, #16]

    count++;
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	3301      	adds	r3, #1
 800e09a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e09c:	68bb      	ldr	r3, [r7, #8]
 800e09e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e0a2:	4293      	cmp	r3, r2
 800e0a4:	d802      	bhi.n	800e0ac <SD_PowerON+0xe8>
 800e0a6:	693b      	ldr	r3, [r7, #16]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d0cc      	beq.n	800e046 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e0b2:	4293      	cmp	r3, r2
 800e0b4:	d902      	bls.n	800e0bc <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e0b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e0ba:	e00b      	b.n	800e0d4 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	2200      	movs	r2, #0
 800e0c0:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800e0c2:	697b      	ldr	r3, [r7, #20]
 800e0c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d002      	beq.n	800e0d2 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	2201      	movs	r2, #1
 800e0d0:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e0d2:	2300      	movs	r3, #0
}
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	3718      	adds	r7, #24
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bd80      	pop	{r7, pc}
 800e0dc:	c1100000 	.word	0xc1100000

0800e0e0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b08c      	sub	sp, #48	; 0x30
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
 800e0e8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e0ea:	f7f5 fbd7 	bl	800389c <HAL_GetTick>
 800e0ee:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e0f0:	683b      	ldr	r3, [r7, #0]
 800e0f2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	2100      	movs	r1, #0
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f003 fda3 	bl	8011c46 <SDMMC_GetResponse>
 800e100:	4603      	mov	r3, r0
 800e102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e106:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e10a:	d102      	bne.n	800e112 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e10c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e110:	e0b0      	b.n	800e274 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	2140      	movs	r1, #64	; 0x40
 800e118:	4618      	mov	r0, r3
 800e11a:	f003 fdd3 	bl	8011cc4 <SDMMC_CmdBlockLength>
 800e11e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e120:	6a3b      	ldr	r3, [r7, #32]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d005      	beq.n	800e132 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e12e:	6a3b      	ldr	r3, [r7, #32]
 800e130:	e0a0      	b.n	800e274 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681a      	ldr	r2, [r3, #0]
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e13a:	041b      	lsls	r3, r3, #16
 800e13c:	4619      	mov	r1, r3
 800e13e:	4610      	mov	r0, r2
 800e140:	f003 ff0d 	bl	8011f5e <SDMMC_CmdAppCommand>
 800e144:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e146:	6a3b      	ldr	r3, [r7, #32]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d005      	beq.n	800e158 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e154:	6a3b      	ldr	r3, [r7, #32]
 800e156:	e08d      	b.n	800e274 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e158:	f04f 33ff 	mov.w	r3, #4294967295
 800e15c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e15e:	2340      	movs	r3, #64	; 0x40
 800e160:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e162:	2360      	movs	r3, #96	; 0x60
 800e164:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e166:	2302      	movs	r3, #2
 800e168:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e16a:	2300      	movs	r3, #0
 800e16c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e16e:	2301      	movs	r3, #1
 800e170:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	f107 0208 	add.w	r2, r7, #8
 800e17a:	4611      	mov	r1, r2
 800e17c:	4618      	mov	r0, r3
 800e17e:	f003 fd75 	bl	8011c6c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	4618      	mov	r0, r3
 800e188:	f003 fff5 	bl	8012176 <SDMMC_CmdStatusRegister>
 800e18c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e18e:	6a3b      	ldr	r3, [r7, #32]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d02b      	beq.n	800e1ec <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e19c:	6a3b      	ldr	r3, [r7, #32]
 800e19e:	e069      	b.n	800e274 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d013      	beq.n	800e1d6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e1b2:	e00d      	b.n	800e1d0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f003 fccf 	bl	8011b5c <SDMMC_ReadFIFO>
 800e1be:	4602      	mov	r2, r0
 800e1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1c2:	601a      	str	r2, [r3, #0]
        pData++;
 800e1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1c6:	3304      	adds	r3, #4
 800e1c8:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800e1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1cc:	3301      	adds	r3, #1
 800e1ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1d2:	2b07      	cmp	r3, #7
 800e1d4:	d9ee      	bls.n	800e1b4 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e1d6:	f7f5 fb61 	bl	800389c <HAL_GetTick>
 800e1da:	4602      	mov	r2, r0
 800e1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1de:	1ad3      	subs	r3, r2, r3
 800e1e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1e4:	d102      	bne.n	800e1ec <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e1e6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e1ea:	e043      	b.n	800e274 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1f2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d0d2      	beq.n	800e1a0 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e200:	f003 0308 	and.w	r3, r3, #8
 800e204:	2b00      	cmp	r3, #0
 800e206:	d001      	beq.n	800e20c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e208:	2308      	movs	r3, #8
 800e20a:	e033      	b.n	800e274 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e212:	f003 0302 	and.w	r3, r3, #2
 800e216:	2b00      	cmp	r3, #0
 800e218:	d001      	beq.n	800e21e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e21a:	2302      	movs	r3, #2
 800e21c:	e02a      	b.n	800e274 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e224:	f003 0320 	and.w	r3, r3, #32
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d017      	beq.n	800e25c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e22c:	2320      	movs	r3, #32
 800e22e:	e021      	b.n	800e274 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	4618      	mov	r0, r3
 800e236:	f003 fc91 	bl	8011b5c <SDMMC_ReadFIFO>
 800e23a:	4602      	mov	r2, r0
 800e23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e23e:	601a      	str	r2, [r3, #0]
    pData++;
 800e240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e242:	3304      	adds	r3, #4
 800e244:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e246:	f7f5 fb29 	bl	800389c <HAL_GetTick>
 800e24a:	4602      	mov	r2, r0
 800e24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e24e:	1ad3      	subs	r3, r2, r3
 800e250:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e254:	d102      	bne.n	800e25c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e256:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e25a:	e00b      	b.n	800e274 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e262:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e266:	2b00      	cmp	r3, #0
 800e268:	d1e2      	bne.n	800e230 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	4a03      	ldr	r2, [pc, #12]	; (800e27c <SD_SendSDStatus+0x19c>)
 800e270:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800e272:	2300      	movs	r3, #0
}
 800e274:	4618      	mov	r0, r3
 800e276:	3730      	adds	r7, #48	; 0x30
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}
 800e27c:	18000f3a 	.word	0x18000f3a

0800e280 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b084      	sub	sp, #16
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
 800e288:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d102      	bne.n	800e296 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e290:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e294:	e018      	b.n	800e2c8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	681a      	ldr	r2, [r3, #0]
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e29e:	041b      	lsls	r3, r3, #16
 800e2a0:	4619      	mov	r1, r3
 800e2a2:	4610      	mov	r0, r2
 800e2a4:	f003 ff44 	bl	8012130 <SDMMC_CmdSendStatus>
 800e2a8:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d001      	beq.n	800e2b4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	e009      	b.n	800e2c8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	2100      	movs	r1, #0
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	f003 fcc3 	bl	8011c46 <SDMMC_GetResponse>
 800e2c0:	4602      	mov	r2, r0
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e2c6:	2300      	movs	r3, #0
}
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	3710      	adds	r7, #16
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd80      	pop	{r7, pc}

0800e2d0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b086      	sub	sp, #24
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e2d8:	2300      	movs	r3, #0
 800e2da:	60fb      	str	r3, [r7, #12]
 800e2dc:	2300      	movs	r3, #0
 800e2de:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	2100      	movs	r1, #0
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	f003 fcad 	bl	8011c46 <SDMMC_GetResponse>
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e2f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e2f6:	d102      	bne.n	800e2fe <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e2f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e2fc:	e02f      	b.n	800e35e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e2fe:	f107 030c 	add.w	r3, r7, #12
 800e302:	4619      	mov	r1, r3
 800e304:	6878      	ldr	r0, [r7, #4]
 800e306:	f000 f879 	bl	800e3fc <SD_FindSCR>
 800e30a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e30c:	697b      	ldr	r3, [r7, #20]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d001      	beq.n	800e316 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e312:	697b      	ldr	r3, [r7, #20]
 800e314:	e023      	b.n	800e35e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e316:	693b      	ldr	r3, [r7, #16]
 800e318:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d01c      	beq.n	800e35a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681a      	ldr	r2, [r3, #0]
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e328:	041b      	lsls	r3, r3, #16
 800e32a:	4619      	mov	r1, r3
 800e32c:	4610      	mov	r0, r2
 800e32e:	f003 fe16 	bl	8011f5e <SDMMC_CmdAppCommand>
 800e332:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e334:	697b      	ldr	r3, [r7, #20]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d001      	beq.n	800e33e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e33a:	697b      	ldr	r3, [r7, #20]
 800e33c:	e00f      	b.n	800e35e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	2102      	movs	r1, #2
 800e344:	4618      	mov	r0, r3
 800e346:	f003 fe4d 	bl	8011fe4 <SDMMC_CmdBusWidth>
 800e34a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e34c:	697b      	ldr	r3, [r7, #20]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d001      	beq.n	800e356 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e352:	697b      	ldr	r3, [r7, #20]
 800e354:	e003      	b.n	800e35e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e356:	2300      	movs	r3, #0
 800e358:	e001      	b.n	800e35e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e35a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e35e:	4618      	mov	r0, r3
 800e360:	3718      	adds	r7, #24
 800e362:	46bd      	mov	sp, r7
 800e364:	bd80      	pop	{r7, pc}

0800e366 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e366:	b580      	push	{r7, lr}
 800e368:	b086      	sub	sp, #24
 800e36a:	af00      	add	r7, sp, #0
 800e36c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e36e:	2300      	movs	r3, #0
 800e370:	60fb      	str	r3, [r7, #12]
 800e372:	2300      	movs	r3, #0
 800e374:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	2100      	movs	r1, #0
 800e37c:	4618      	mov	r0, r3
 800e37e:	f003 fc62 	bl	8011c46 <SDMMC_GetResponse>
 800e382:	4603      	mov	r3, r0
 800e384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e388:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e38c:	d102      	bne.n	800e394 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e38e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e392:	e02f      	b.n	800e3f4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e394:	f107 030c 	add.w	r3, r7, #12
 800e398:	4619      	mov	r1, r3
 800e39a:	6878      	ldr	r0, [r7, #4]
 800e39c:	f000 f82e 	bl	800e3fc <SD_FindSCR>
 800e3a0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e3a2:	697b      	ldr	r3, [r7, #20]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d001      	beq.n	800e3ac <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e3a8:	697b      	ldr	r3, [r7, #20]
 800e3aa:	e023      	b.n	800e3f4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e3ac:	693b      	ldr	r3, [r7, #16]
 800e3ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d01c      	beq.n	800e3f0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681a      	ldr	r2, [r3, #0]
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3be:	041b      	lsls	r3, r3, #16
 800e3c0:	4619      	mov	r1, r3
 800e3c2:	4610      	mov	r0, r2
 800e3c4:	f003 fdcb 	bl	8011f5e <SDMMC_CmdAppCommand>
 800e3c8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e3ca:	697b      	ldr	r3, [r7, #20]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d001      	beq.n	800e3d4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e3d0:	697b      	ldr	r3, [r7, #20]
 800e3d2:	e00f      	b.n	800e3f4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	2100      	movs	r1, #0
 800e3da:	4618      	mov	r0, r3
 800e3dc:	f003 fe02 	bl	8011fe4 <SDMMC_CmdBusWidth>
 800e3e0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e3e2:	697b      	ldr	r3, [r7, #20]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d001      	beq.n	800e3ec <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e3e8:	697b      	ldr	r3, [r7, #20]
 800e3ea:	e003      	b.n	800e3f4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	e001      	b.n	800e3f4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e3f0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	3718      	adds	r7, #24
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	bd80      	pop	{r7, pc}

0800e3fc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b08e      	sub	sp, #56	; 0x38
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e406:	f7f5 fa49 	bl	800389c <HAL_GetTick>
 800e40a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e40c:	2300      	movs	r3, #0
 800e40e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800e410:	2300      	movs	r3, #0
 800e412:	60bb      	str	r3, [r7, #8]
 800e414:	2300      	movs	r3, #0
 800e416:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	2108      	movs	r1, #8
 800e422:	4618      	mov	r0, r3
 800e424:	f003 fc4e 	bl	8011cc4 <SDMMC_CmdBlockLength>
 800e428:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d001      	beq.n	800e434 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e432:	e0ad      	b.n	800e590 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681a      	ldr	r2, [r3, #0]
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e43c:	041b      	lsls	r3, r3, #16
 800e43e:	4619      	mov	r1, r3
 800e440:	4610      	mov	r0, r2
 800e442:	f003 fd8c 	bl	8011f5e <SDMMC_CmdAppCommand>
 800e446:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d001      	beq.n	800e452 <SD_FindSCR+0x56>
  {
    return errorstate;
 800e44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e450:	e09e      	b.n	800e590 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e452:	f04f 33ff 	mov.w	r3, #4294967295
 800e456:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e458:	2308      	movs	r3, #8
 800e45a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e45c:	2330      	movs	r3, #48	; 0x30
 800e45e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e460:	2302      	movs	r3, #2
 800e462:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e464:	2300      	movs	r3, #0
 800e466:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e468:	2301      	movs	r3, #1
 800e46a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	f107 0210 	add.w	r2, r7, #16
 800e474:	4611      	mov	r1, r2
 800e476:	4618      	mov	r0, r3
 800e478:	f003 fbf8 	bl	8011c6c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	4618      	mov	r0, r3
 800e482:	f003 fdd2 	bl	801202a <SDMMC_CmdSendSCR>
 800e486:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d027      	beq.n	800e4de <SD_FindSCR+0xe2>
  {
    return errorstate;
 800e48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e490:	e07e      	b.n	800e590 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e498:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d113      	bne.n	800e4c8 <SD_FindSCR+0xcc>
 800e4a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d110      	bne.n	800e4c8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f003 fb56 	bl	8011b5c <SDMMC_ReadFIFO>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	f003 fb4f 	bl	8011b5c <SDMMC_ReadFIFO>
 800e4be:	4603      	mov	r3, r0
 800e4c0:	60fb      	str	r3, [r7, #12]
      index++;
 800e4c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4c4:	3301      	adds	r3, #1
 800e4c6:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e4c8:	f7f5 f9e8 	bl	800389c <HAL_GetTick>
 800e4cc:	4602      	mov	r2, r0
 800e4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4d0:	1ad3      	subs	r3, r2, r3
 800e4d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4d6:	d102      	bne.n	800e4de <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e4d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e4dc:	e058      	b.n	800e590 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e4e4:	f240 532a 	movw	r3, #1322	; 0x52a
 800e4e8:	4013      	ands	r3, r2
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d0d1      	beq.n	800e492 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4f4:	f003 0308 	and.w	r3, r3, #8
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d005      	beq.n	800e508 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	2208      	movs	r2, #8
 800e502:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e504:	2308      	movs	r3, #8
 800e506:	e043      	b.n	800e590 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e50e:	f003 0302 	and.w	r3, r3, #2
 800e512:	2b00      	cmp	r3, #0
 800e514:	d005      	beq.n	800e522 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	2202      	movs	r2, #2
 800e51c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e51e:	2302      	movs	r3, #2
 800e520:	e036      	b.n	800e590 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e528:	f003 0320 	and.w	r3, r3, #32
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d005      	beq.n	800e53c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	2220      	movs	r2, #32
 800e536:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e538:	2320      	movs	r3, #32
 800e53a:	e029      	b.n	800e590 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	4a15      	ldr	r2, [pc, #84]	; (800e598 <SD_FindSCR+0x19c>)
 800e542:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	061a      	lsls	r2, r3, #24
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	021b      	lsls	r3, r3, #8
 800e54c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e550:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	0a1b      	lsrs	r3, r3, #8
 800e556:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e55a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	0e1b      	lsrs	r3, r3, #24
 800e560:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e564:	601a      	str	r2, [r3, #0]
    scr++;
 800e566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e568:	3304      	adds	r3, #4
 800e56a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e56c:	68bb      	ldr	r3, [r7, #8]
 800e56e:	061a      	lsls	r2, r3, #24
 800e570:	68bb      	ldr	r3, [r7, #8]
 800e572:	021b      	lsls	r3, r3, #8
 800e574:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e578:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e57a:	68bb      	ldr	r3, [r7, #8]
 800e57c:	0a1b      	lsrs	r3, r3, #8
 800e57e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e582:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e584:	68bb      	ldr	r3, [r7, #8]
 800e586:	0e1b      	lsrs	r3, r3, #24
 800e588:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e58c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e58e:	2300      	movs	r3, #0
}
 800e590:	4618      	mov	r0, r3
 800e592:	3738      	adds	r7, #56	; 0x38
 800e594:	46bd      	mov	sp, r7
 800e596:	bd80      	pop	{r7, pc}
 800e598:	18000f3a 	.word	0x18000f3a

0800e59c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b086      	sub	sp, #24
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5a8:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5ae:	2b1f      	cmp	r3, #31
 800e5b0:	d936      	bls.n	800e620 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	617b      	str	r3, [r7, #20]
 800e5b6:	e027      	b.n	800e608 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f003 facd 	bl	8011b5c <SDMMC_ReadFIFO>
 800e5c2:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	b2da      	uxtb	r2, r3
 800e5c8:	693b      	ldr	r3, [r7, #16]
 800e5ca:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e5cc:	693b      	ldr	r3, [r7, #16]
 800e5ce:	3301      	adds	r3, #1
 800e5d0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	0a1b      	lsrs	r3, r3, #8
 800e5d6:	b2da      	uxtb	r2, r3
 800e5d8:	693b      	ldr	r3, [r7, #16]
 800e5da:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e5dc:	693b      	ldr	r3, [r7, #16]
 800e5de:	3301      	adds	r3, #1
 800e5e0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	0c1b      	lsrs	r3, r3, #16
 800e5e6:	b2da      	uxtb	r2, r3
 800e5e8:	693b      	ldr	r3, [r7, #16]
 800e5ea:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e5ec:	693b      	ldr	r3, [r7, #16]
 800e5ee:	3301      	adds	r3, #1
 800e5f0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	0e1b      	lsrs	r3, r3, #24
 800e5f6:	b2da      	uxtb	r2, r3
 800e5f8:	693b      	ldr	r3, [r7, #16]
 800e5fa:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e5fc:	693b      	ldr	r3, [r7, #16]
 800e5fe:	3301      	adds	r3, #1
 800e600:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800e602:	697b      	ldr	r3, [r7, #20]
 800e604:	3301      	adds	r3, #1
 800e606:	617b      	str	r3, [r7, #20]
 800e608:	697b      	ldr	r3, [r7, #20]
 800e60a:	2b07      	cmp	r3, #7
 800e60c:	d9d4      	bls.n	800e5b8 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	693a      	ldr	r2, [r7, #16]
 800e612:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e618:	f1a3 0220 	sub.w	r2, r3, #32
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800e620:	bf00      	nop
 800e622:	3718      	adds	r7, #24
 800e624:	46bd      	mov	sp, r7
 800e626:	bd80      	pop	{r7, pc}

0800e628 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b086      	sub	sp, #24
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	69db      	ldr	r3, [r3, #28]
 800e634:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	6a1b      	ldr	r3, [r3, #32]
 800e63a:	2b1f      	cmp	r3, #31
 800e63c:	d93a      	bls.n	800e6b4 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800e63e:	2300      	movs	r3, #0
 800e640:	617b      	str	r3, [r7, #20]
 800e642:	e02b      	b.n	800e69c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800e644:	693b      	ldr	r3, [r7, #16]
 800e646:	781b      	ldrb	r3, [r3, #0]
 800e648:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e64a:	693b      	ldr	r3, [r7, #16]
 800e64c:	3301      	adds	r3, #1
 800e64e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e650:	693b      	ldr	r3, [r7, #16]
 800e652:	781b      	ldrb	r3, [r3, #0]
 800e654:	021a      	lsls	r2, r3, #8
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	4313      	orrs	r3, r2
 800e65a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e65c:	693b      	ldr	r3, [r7, #16]
 800e65e:	3301      	adds	r3, #1
 800e660:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e662:	693b      	ldr	r3, [r7, #16]
 800e664:	781b      	ldrb	r3, [r3, #0]
 800e666:	041a      	lsls	r2, r3, #16
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	4313      	orrs	r3, r2
 800e66c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e66e:	693b      	ldr	r3, [r7, #16]
 800e670:	3301      	adds	r3, #1
 800e672:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e674:	693b      	ldr	r3, [r7, #16]
 800e676:	781b      	ldrb	r3, [r3, #0]
 800e678:	061a      	lsls	r2, r3, #24
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	4313      	orrs	r3, r2
 800e67e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e680:	693b      	ldr	r3, [r7, #16]
 800e682:	3301      	adds	r3, #1
 800e684:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	f107 020c 	add.w	r2, r7, #12
 800e68e:	4611      	mov	r1, r2
 800e690:	4618      	mov	r0, r3
 800e692:	f003 fa70 	bl	8011b76 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800e696:	697b      	ldr	r3, [r7, #20]
 800e698:	3301      	adds	r3, #1
 800e69a:	617b      	str	r3, [r7, #20]
 800e69c:	697b      	ldr	r3, [r7, #20]
 800e69e:	2b07      	cmp	r3, #7
 800e6a0:	d9d0      	bls.n	800e644 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	693a      	ldr	r2, [r7, #16]
 800e6a6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	6a1b      	ldr	r3, [r3, #32]
 800e6ac:	f1a3 0220 	sub.w	r2, r3, #32
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	621a      	str	r2, [r3, #32]
  }
}
 800e6b4:	bf00      	nop
 800e6b6:	3718      	adds	r7, #24
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	bd80      	pop	{r7, pc}

0800e6bc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e6bc:	b480      	push	{r7}
 800e6be:	b083      	sub	sp, #12
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e6c4:	bf00      	nop
 800e6c6:	370c      	adds	r7, #12
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ce:	4770      	bx	lr

0800e6d0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e6d0:	b480      	push	{r7}
 800e6d2:	b083      	sub	sp, #12
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e6d8:	bf00      	nop
 800e6da:	370c      	adds	r7, #12
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e2:	4770      	bx	lr

0800e6e4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e6e4:	b480      	push	{r7}
 800e6e6:	b083      	sub	sp, #12
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e6ec:	bf00      	nop
 800e6ee:	370c      	adds	r7, #12
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f6:	4770      	bx	lr

0800e6f8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e6f8:	b480      	push	{r7}
 800e6fa:	b083      	sub	sp, #12
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e700:	bf00      	nop
 800e702:	370c      	adds	r7, #12
 800e704:	46bd      	mov	sp, r7
 800e706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70a:	4770      	bx	lr

0800e70c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b084      	sub	sp, #16
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d101      	bne.n	800e71e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e71a:	2301      	movs	r3, #1
 800e71c:	e10f      	b.n	800e93e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	2200      	movs	r2, #0
 800e722:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	4a87      	ldr	r2, [pc, #540]	; (800e948 <HAL_SPI_Init+0x23c>)
 800e72a:	4293      	cmp	r3, r2
 800e72c:	d00f      	beq.n	800e74e <HAL_SPI_Init+0x42>
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	4a86      	ldr	r2, [pc, #536]	; (800e94c <HAL_SPI_Init+0x240>)
 800e734:	4293      	cmp	r3, r2
 800e736:	d00a      	beq.n	800e74e <HAL_SPI_Init+0x42>
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	4a84      	ldr	r2, [pc, #528]	; (800e950 <HAL_SPI_Init+0x244>)
 800e73e:	4293      	cmp	r3, r2
 800e740:	d005      	beq.n	800e74e <HAL_SPI_Init+0x42>
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	68db      	ldr	r3, [r3, #12]
 800e746:	2b0f      	cmp	r3, #15
 800e748:	d901      	bls.n	800e74e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e74a:	2301      	movs	r3, #1
 800e74c:	e0f7      	b.n	800e93e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e74e:	6878      	ldr	r0, [r7, #4]
 800e750:	f000 fd5a 	bl	800f208 <SPI_GetPacketSize>
 800e754:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	4a7b      	ldr	r2, [pc, #492]	; (800e948 <HAL_SPI_Init+0x23c>)
 800e75c:	4293      	cmp	r3, r2
 800e75e:	d00c      	beq.n	800e77a <HAL_SPI_Init+0x6e>
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	4a79      	ldr	r2, [pc, #484]	; (800e94c <HAL_SPI_Init+0x240>)
 800e766:	4293      	cmp	r3, r2
 800e768:	d007      	beq.n	800e77a <HAL_SPI_Init+0x6e>
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	4a78      	ldr	r2, [pc, #480]	; (800e950 <HAL_SPI_Init+0x244>)
 800e770:	4293      	cmp	r3, r2
 800e772:	d002      	beq.n	800e77a <HAL_SPI_Init+0x6e>
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	2b08      	cmp	r3, #8
 800e778:	d811      	bhi.n	800e79e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e77e:	4a72      	ldr	r2, [pc, #456]	; (800e948 <HAL_SPI_Init+0x23c>)
 800e780:	4293      	cmp	r3, r2
 800e782:	d009      	beq.n	800e798 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	4a70      	ldr	r2, [pc, #448]	; (800e94c <HAL_SPI_Init+0x240>)
 800e78a:	4293      	cmp	r3, r2
 800e78c:	d004      	beq.n	800e798 <HAL_SPI_Init+0x8c>
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	4a6f      	ldr	r2, [pc, #444]	; (800e950 <HAL_SPI_Init+0x244>)
 800e794:	4293      	cmp	r3, r2
 800e796:	d104      	bne.n	800e7a2 <HAL_SPI_Init+0x96>
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	2b10      	cmp	r3, #16
 800e79c:	d901      	bls.n	800e7a2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e79e:	2301      	movs	r3, #1
 800e7a0:	e0cd      	b.n	800e93e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e7a8:	b2db      	uxtb	r3, r3
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d106      	bne.n	800e7bc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e7b6:	6878      	ldr	r0, [r7, #4]
 800e7b8:	f7f4 f9f8 	bl	8002bac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	2202      	movs	r2, #2
 800e7c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	681a      	ldr	r2, [r3, #0]
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	f022 0201 	bic.w	r2, r2, #1
 800e7d2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	689b      	ldr	r3, [r3, #8]
 800e7da:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e7de:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	699b      	ldr	r3, [r3, #24]
 800e7e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e7e8:	d119      	bne.n	800e81e <HAL_SPI_Init+0x112>
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	685b      	ldr	r3, [r3, #4]
 800e7ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e7f2:	d103      	bne.n	800e7fc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d008      	beq.n	800e80e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e800:	2b00      	cmp	r3, #0
 800e802:	d10c      	bne.n	800e81e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e808:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e80c:	d107      	bne.n	800e81e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	681a      	ldr	r2, [r3, #0]
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e81c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	685b      	ldr	r3, [r3, #4]
 800e822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e826:	2b00      	cmp	r3, #0
 800e828:	d00f      	beq.n	800e84a <HAL_SPI_Init+0x13e>
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	68db      	ldr	r3, [r3, #12]
 800e82e:	2b06      	cmp	r3, #6
 800e830:	d90b      	bls.n	800e84a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	430a      	orrs	r2, r1
 800e846:	601a      	str	r2, [r3, #0]
 800e848:	e007      	b.n	800e85a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	681a      	ldr	r2, [r3, #0]
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e858:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	69da      	ldr	r2, [r3, #28]
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e862:	431a      	orrs	r2, r3
 800e864:	68bb      	ldr	r3, [r7, #8]
 800e866:	431a      	orrs	r2, r3
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e86c:	ea42 0103 	orr.w	r1, r2, r3
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	68da      	ldr	r2, [r3, #12]
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	430a      	orrs	r2, r1
 800e87a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e884:	431a      	orrs	r2, r3
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e88a:	431a      	orrs	r2, r3
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	699b      	ldr	r3, [r3, #24]
 800e890:	431a      	orrs	r2, r3
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	691b      	ldr	r3, [r3, #16]
 800e896:	431a      	orrs	r2, r3
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	695b      	ldr	r3, [r3, #20]
 800e89c:	431a      	orrs	r2, r3
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	6a1b      	ldr	r3, [r3, #32]
 800e8a2:	431a      	orrs	r2, r3
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	685b      	ldr	r3, [r3, #4]
 800e8a8:	431a      	orrs	r2, r3
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e8ae:	431a      	orrs	r2, r3
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	689b      	ldr	r3, [r3, #8]
 800e8b4:	431a      	orrs	r2, r3
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e8ba:	ea42 0103 	orr.w	r1, r2, r3
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	430a      	orrs	r2, r1
 800e8c8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	685b      	ldr	r3, [r3, #4]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d113      	bne.n	800e8fa <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	689b      	ldr	r3, [r3, #8]
 800e8d8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e8e4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	689b      	ldr	r3, [r3, #8]
 800e8ec:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e8f8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	f022 0201 	bic.w	r2, r2, #1
 800e908:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	685b      	ldr	r3, [r3, #4]
 800e90e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e912:	2b00      	cmp	r3, #0
 800e914:	d00a      	beq.n	800e92c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	68db      	ldr	r3, [r3, #12]
 800e91c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	430a      	orrs	r2, r1
 800e92a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2200      	movs	r2, #0
 800e930:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2201      	movs	r2, #1
 800e938:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e93c:	2300      	movs	r3, #0
}
 800e93e:	4618      	mov	r0, r3
 800e940:	3710      	adds	r7, #16
 800e942:	46bd      	mov	sp, r7
 800e944:	bd80      	pop	{r7, pc}
 800e946:	bf00      	nop
 800e948:	40013000 	.word	0x40013000
 800e94c:	40003800 	.word	0x40003800
 800e950:	40003c00 	.word	0x40003c00

0800e954 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b08a      	sub	sp, #40	; 0x28
 800e958:	af02      	add	r7, sp, #8
 800e95a:	60f8      	str	r0, [r7, #12]
 800e95c:	60b9      	str	r1, [r7, #8]
 800e95e:	603b      	str	r3, [r7, #0]
 800e960:	4613      	mov	r3, r2
 800e962:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	3320      	adds	r3, #32
 800e96a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e96c:	2300      	movs	r3, #0
 800e96e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e976:	2b01      	cmp	r3, #1
 800e978:	d101      	bne.n	800e97e <HAL_SPI_Transmit+0x2a>
 800e97a:	2302      	movs	r3, #2
 800e97c:	e1e1      	b.n	800ed42 <HAL_SPI_Transmit+0x3ee>
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	2201      	movs	r2, #1
 800e982:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e986:	f7f4 ff89 	bl	800389c <HAL_GetTick>
 800e98a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e992:	b2db      	uxtb	r3, r3
 800e994:	2b01      	cmp	r3, #1
 800e996:	d007      	beq.n	800e9a8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800e998:	2302      	movs	r3, #2
 800e99a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	2200      	movs	r2, #0
 800e9a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e9a4:	7efb      	ldrb	r3, [r7, #27]
 800e9a6:	e1cc      	b.n	800ed42 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e9a8:	68bb      	ldr	r3, [r7, #8]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d002      	beq.n	800e9b4 <HAL_SPI_Transmit+0x60>
 800e9ae:	88fb      	ldrh	r3, [r7, #6]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d107      	bne.n	800e9c4 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800e9b4:	2301      	movs	r3, #1
 800e9b6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e9c0:	7efb      	ldrb	r3, [r7, #27]
 800e9c2:	e1be      	b.n	800ed42 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	2203      	movs	r2, #3
 800e9c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	68ba      	ldr	r2, [r7, #8]
 800e9d8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	88fa      	ldrh	r2, [r7, #6]
 800e9de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	88fa      	ldrh	r2, [r7, #6]
 800e9e6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	2200      	movs	r2, #0
 800ea04:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	2200      	movs	r2, #0
 800ea0a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	689b      	ldr	r3, [r3, #8]
 800ea10:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ea14:	d108      	bne.n	800ea28 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	681a      	ldr	r2, [r3, #0]
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ea24:	601a      	str	r2, [r3, #0]
 800ea26:	e009      	b.n	800ea3c <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	68db      	ldr	r3, [r3, #12]
 800ea2e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ea3a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	685a      	ldr	r2, [r3, #4]
 800ea42:	4b96      	ldr	r3, [pc, #600]	; (800ec9c <HAL_SPI_Transmit+0x348>)
 800ea44:	4013      	ands	r3, r2
 800ea46:	88f9      	ldrh	r1, [r7, #6]
 800ea48:	68fa      	ldr	r2, [r7, #12]
 800ea4a:	6812      	ldr	r2, [r2, #0]
 800ea4c:	430b      	orrs	r3, r1
 800ea4e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	681a      	ldr	r2, [r3, #0]
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	f042 0201 	orr.w	r2, r2, #1
 800ea5e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	685b      	ldr	r3, [r3, #4]
 800ea64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ea68:	d107      	bne.n	800ea7a <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	681a      	ldr	r2, [r3, #0]
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ea78:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	68db      	ldr	r3, [r3, #12]
 800ea7e:	2b0f      	cmp	r3, #15
 800ea80:	d947      	bls.n	800eb12 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ea82:	e03f      	b.n	800eb04 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	695b      	ldr	r3, [r3, #20]
 800ea8a:	f003 0302 	and.w	r3, r3, #2
 800ea8e:	2b02      	cmp	r3, #2
 800ea90:	d114      	bne.n	800eabc <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	6812      	ldr	r2, [r2, #0]
 800ea9c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eaa2:	1d1a      	adds	r2, r3, #4
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eaae:	b29b      	uxth	r3, r3
 800eab0:	3b01      	subs	r3, #1
 800eab2:	b29a      	uxth	r2, r3
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800eaba:	e023      	b.n	800eb04 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eabc:	f7f4 feee 	bl	800389c <HAL_GetTick>
 800eac0:	4602      	mov	r2, r0
 800eac2:	697b      	ldr	r3, [r7, #20]
 800eac4:	1ad3      	subs	r3, r2, r3
 800eac6:	683a      	ldr	r2, [r7, #0]
 800eac8:	429a      	cmp	r2, r3
 800eaca:	d803      	bhi.n	800ead4 <HAL_SPI_Transmit+0x180>
 800eacc:	683b      	ldr	r3, [r7, #0]
 800eace:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ead2:	d102      	bne.n	800eada <HAL_SPI_Transmit+0x186>
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d114      	bne.n	800eb04 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800eada:	68f8      	ldr	r0, [r7, #12]
 800eadc:	f000 fac6 	bl	800f06c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	2200      	movs	r2, #0
 800eae4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eaee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	2201      	movs	r2, #1
 800eafc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800eb00:	2303      	movs	r3, #3
 800eb02:	e11e      	b.n	800ed42 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eb0a:	b29b      	uxth	r3, r3
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d1b9      	bne.n	800ea84 <HAL_SPI_Transmit+0x130>
 800eb10:	e0f1      	b.n	800ecf6 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	68db      	ldr	r3, [r3, #12]
 800eb16:	2b07      	cmp	r3, #7
 800eb18:	f240 80e6 	bls.w	800ece8 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800eb1c:	e05d      	b.n	800ebda <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	695b      	ldr	r3, [r3, #20]
 800eb24:	f003 0302 	and.w	r3, r3, #2
 800eb28:	2b02      	cmp	r3, #2
 800eb2a:	d132      	bne.n	800eb92 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eb32:	b29b      	uxth	r3, r3
 800eb34:	2b01      	cmp	r3, #1
 800eb36:	d918      	bls.n	800eb6a <HAL_SPI_Transmit+0x216>
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d014      	beq.n	800eb6a <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	6812      	ldr	r2, [r2, #0]
 800eb4a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eb50:	1d1a      	adds	r2, r3, #4
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eb5c:	b29b      	uxth	r3, r3
 800eb5e:	3b02      	subs	r3, #2
 800eb60:	b29a      	uxth	r2, r3
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800eb68:	e037      	b.n	800ebda <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eb6e:	881a      	ldrh	r2, [r3, #0]
 800eb70:	69fb      	ldr	r3, [r7, #28]
 800eb72:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eb78:	1c9a      	adds	r2, r3, #2
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eb84:	b29b      	uxth	r3, r3
 800eb86:	3b01      	subs	r3, #1
 800eb88:	b29a      	uxth	r2, r3
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800eb90:	e023      	b.n	800ebda <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eb92:	f7f4 fe83 	bl	800389c <HAL_GetTick>
 800eb96:	4602      	mov	r2, r0
 800eb98:	697b      	ldr	r3, [r7, #20]
 800eb9a:	1ad3      	subs	r3, r2, r3
 800eb9c:	683a      	ldr	r2, [r7, #0]
 800eb9e:	429a      	cmp	r2, r3
 800eba0:	d803      	bhi.n	800ebaa <HAL_SPI_Transmit+0x256>
 800eba2:	683b      	ldr	r3, [r7, #0]
 800eba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eba8:	d102      	bne.n	800ebb0 <HAL_SPI_Transmit+0x25c>
 800ebaa:	683b      	ldr	r3, [r7, #0]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d114      	bne.n	800ebda <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ebb0:	68f8      	ldr	r0, [r7, #12]
 800ebb2:	f000 fa5b 	bl	800f06c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	2200      	movs	r2, #0
 800ebba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ebc4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	2201      	movs	r2, #1
 800ebd2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ebd6:	2303      	movs	r3, #3
 800ebd8:	e0b3      	b.n	800ed42 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ebe0:	b29b      	uxth	r3, r3
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d19b      	bne.n	800eb1e <HAL_SPI_Transmit+0x1ca>
 800ebe6:	e086      	b.n	800ecf6 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	695b      	ldr	r3, [r3, #20]
 800ebee:	f003 0302 	and.w	r3, r3, #2
 800ebf2:	2b02      	cmp	r3, #2
 800ebf4:	d154      	bne.n	800eca0 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ebfc:	b29b      	uxth	r3, r3
 800ebfe:	2b03      	cmp	r3, #3
 800ec00:	d918      	bls.n	800ec34 <HAL_SPI_Transmit+0x2e0>
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec06:	2b40      	cmp	r3, #64	; 0x40
 800ec08:	d914      	bls.n	800ec34 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	6812      	ldr	r2, [r2, #0]
 800ec14:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec1a:	1d1a      	adds	r2, r3, #4
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ec26:	b29b      	uxth	r3, r3
 800ec28:	3b04      	subs	r3, #4
 800ec2a:	b29a      	uxth	r2, r3
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ec32:	e059      	b.n	800ece8 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ec3a:	b29b      	uxth	r3, r3
 800ec3c:	2b01      	cmp	r3, #1
 800ec3e:	d917      	bls.n	800ec70 <HAL_SPI_Transmit+0x31c>
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d013      	beq.n	800ec70 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec4c:	881a      	ldrh	r2, [r3, #0]
 800ec4e:	69fb      	ldr	r3, [r7, #28]
 800ec50:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec56:	1c9a      	adds	r2, r3, #2
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ec62:	b29b      	uxth	r3, r3
 800ec64:	3b02      	subs	r3, #2
 800ec66:	b29a      	uxth	r2, r3
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ec6e:	e03b      	b.n	800ece8 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	3320      	adds	r3, #32
 800ec7a:	7812      	ldrb	r2, [r2, #0]
 800ec7c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec82:	1c5a      	adds	r2, r3, #1
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ec8e:	b29b      	uxth	r3, r3
 800ec90:	3b01      	subs	r3, #1
 800ec92:	b29a      	uxth	r2, r3
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ec9a:	e025      	b.n	800ece8 <HAL_SPI_Transmit+0x394>
 800ec9c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eca0:	f7f4 fdfc 	bl	800389c <HAL_GetTick>
 800eca4:	4602      	mov	r2, r0
 800eca6:	697b      	ldr	r3, [r7, #20]
 800eca8:	1ad3      	subs	r3, r2, r3
 800ecaa:	683a      	ldr	r2, [r7, #0]
 800ecac:	429a      	cmp	r2, r3
 800ecae:	d803      	bhi.n	800ecb8 <HAL_SPI_Transmit+0x364>
 800ecb0:	683b      	ldr	r3, [r7, #0]
 800ecb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecb6:	d102      	bne.n	800ecbe <HAL_SPI_Transmit+0x36a>
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d114      	bne.n	800ece8 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ecbe:	68f8      	ldr	r0, [r7, #12]
 800ecc0:	f000 f9d4 	bl	800f06c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ecd2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	2201      	movs	r2, #1
 800ece0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ece4:	2303      	movs	r3, #3
 800ece6:	e02c      	b.n	800ed42 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ecee:	b29b      	uxth	r3, r3
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	f47f af79 	bne.w	800ebe8 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800ecf6:	697b      	ldr	r3, [r7, #20]
 800ecf8:	9300      	str	r3, [sp, #0]
 800ecfa:	683b      	ldr	r3, [r7, #0]
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	2108      	movs	r1, #8
 800ed00:	68f8      	ldr	r0, [r7, #12]
 800ed02:	f000 fa53 	bl	800f1ac <SPI_WaitOnFlagUntilTimeout>
 800ed06:	4603      	mov	r3, r0
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d007      	beq.n	800ed1c <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed12:	f043 0220 	orr.w	r2, r3, #32
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ed1c:	68f8      	ldr	r0, [r7, #12]
 800ed1e:	f000 f9a5 	bl	800f06c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	2200      	movs	r2, #0
 800ed26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	2201      	movs	r2, #1
 800ed2e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d001      	beq.n	800ed40 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800ed3c:	2301      	movs	r3, #1
 800ed3e:	e000      	b.n	800ed42 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800ed40:	7efb      	ldrb	r3, [r7, #27]
}
 800ed42:	4618      	mov	r0, r3
 800ed44:	3720      	adds	r7, #32
 800ed46:	46bd      	mov	sp, r7
 800ed48:	bd80      	pop	{r7, pc}
 800ed4a:	bf00      	nop

0800ed4c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b088      	sub	sp, #32
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	60f8      	str	r0, [r7, #12]
 800ed54:	60b9      	str	r1, [r7, #8]
 800ed56:	603b      	str	r3, [r7, #0]
 800ed58:	4613      	mov	r3, r2
 800ed5a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	3330      	adds	r3, #48	; 0x30
 800ed66:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ed6e:	2b01      	cmp	r3, #1
 800ed70:	d101      	bne.n	800ed76 <HAL_SPI_Receive+0x2a>
 800ed72:	2302      	movs	r3, #2
 800ed74:	e173      	b.n	800f05e <HAL_SPI_Receive+0x312>
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	2201      	movs	r2, #1
 800ed7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ed7e:	f7f4 fd8d 	bl	800389c <HAL_GetTick>
 800ed82:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ed8a:	b2db      	uxtb	r3, r3
 800ed8c:	2b01      	cmp	r3, #1
 800ed8e:	d007      	beq.n	800eda0 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800ed90:	2302      	movs	r3, #2
 800ed92:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	2200      	movs	r2, #0
 800ed98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ed9c:	7ffb      	ldrb	r3, [r7, #31]
 800ed9e:	e15e      	b.n	800f05e <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800eda0:	68bb      	ldr	r3, [r7, #8]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d002      	beq.n	800edac <HAL_SPI_Receive+0x60>
 800eda6:	88fb      	ldrh	r3, [r7, #6]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d107      	bne.n	800edbc <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800edac:	2301      	movs	r3, #1
 800edae:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	2200      	movs	r2, #0
 800edb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800edb8:	7ffb      	ldrb	r3, [r7, #31]
 800edba:	e150      	b.n	800f05e <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	2204      	movs	r2, #4
 800edc0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	2200      	movs	r2, #0
 800edc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	68ba      	ldr	r2, [r7, #8]
 800edd0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	88fa      	ldrh	r2, [r7, #6]
 800edd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	88fa      	ldrh	r2, [r7, #6]
 800edde:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	2200      	movs	r2, #0
 800ede6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	2200      	movs	r2, #0
 800edec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	2200      	movs	r2, #0
 800edf4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	2200      	movs	r2, #0
 800edfc:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	2200      	movs	r2, #0
 800ee02:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	689b      	ldr	r3, [r3, #8]
 800ee08:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ee0c:	d108      	bne.n	800ee20 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	681a      	ldr	r2, [r3, #0]
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ee1c:	601a      	str	r2, [r3, #0]
 800ee1e:	e009      	b.n	800ee34 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	68db      	ldr	r3, [r3, #12]
 800ee26:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ee32:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	685a      	ldr	r2, [r3, #4]
 800ee3a:	4b8b      	ldr	r3, [pc, #556]	; (800f068 <HAL_SPI_Receive+0x31c>)
 800ee3c:	4013      	ands	r3, r2
 800ee3e:	88f9      	ldrh	r1, [r7, #6]
 800ee40:	68fa      	ldr	r2, [r7, #12]
 800ee42:	6812      	ldr	r2, [r2, #0]
 800ee44:	430b      	orrs	r3, r1
 800ee46:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	681a      	ldr	r2, [r3, #0]
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	f042 0201 	orr.w	r2, r2, #1
 800ee56:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	685b      	ldr	r3, [r3, #4]
 800ee5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ee60:	d107      	bne.n	800ee72 <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	681a      	ldr	r2, [r3, #0]
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ee70:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	68db      	ldr	r3, [r3, #12]
 800ee76:	2b0f      	cmp	r3, #15
 800ee78:	d948      	bls.n	800ef0c <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ee7a:	e040      	b.n	800eefe <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	695a      	ldr	r2, [r3, #20]
 800ee82:	f248 0308 	movw	r3, #32776	; 0x8008
 800ee86:	4013      	ands	r3, r2
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d014      	beq.n	800eeb6 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	681a      	ldr	r2, [r3, #0]
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee94:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ee96:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee9c:	1d1a      	adds	r2, r3, #4
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800eea8:	b29b      	uxth	r3, r3
 800eeaa:	3b01      	subs	r3, #1
 800eeac:	b29a      	uxth	r2, r3
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800eeb4:	e023      	b.n	800eefe <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eeb6:	f7f4 fcf1 	bl	800389c <HAL_GetTick>
 800eeba:	4602      	mov	r2, r0
 800eebc:	697b      	ldr	r3, [r7, #20]
 800eebe:	1ad3      	subs	r3, r2, r3
 800eec0:	683a      	ldr	r2, [r7, #0]
 800eec2:	429a      	cmp	r2, r3
 800eec4:	d803      	bhi.n	800eece <HAL_SPI_Receive+0x182>
 800eec6:	683b      	ldr	r3, [r7, #0]
 800eec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eecc:	d102      	bne.n	800eed4 <HAL_SPI_Receive+0x188>
 800eece:	683b      	ldr	r3, [r7, #0]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d114      	bne.n	800eefe <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800eed4:	68f8      	ldr	r0, [r7, #12]
 800eed6:	f000 f8c9 	bl	800f06c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	2200      	movs	r2, #0
 800eede:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eee8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	2201      	movs	r2, #1
 800eef6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800eefa:	2303      	movs	r3, #3
 800eefc:	e0af      	b.n	800f05e <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ef04:	b29b      	uxth	r3, r3
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d1b8      	bne.n	800ee7c <HAL_SPI_Receive+0x130>
 800ef0a:	e095      	b.n	800f038 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	68db      	ldr	r3, [r3, #12]
 800ef10:	2b07      	cmp	r3, #7
 800ef12:	f240 808b 	bls.w	800f02c <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ef16:	e03f      	b.n	800ef98 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	695b      	ldr	r3, [r3, #20]
 800ef1e:	f003 0301 	and.w	r3, r3, #1
 800ef22:	2b01      	cmp	r3, #1
 800ef24:	d114      	bne.n	800ef50 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef2a:	69ba      	ldr	r2, [r7, #24]
 800ef2c:	8812      	ldrh	r2, [r2, #0]
 800ef2e:	b292      	uxth	r2, r2
 800ef30:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef36:	1c9a      	adds	r2, r3, #2
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ef42:	b29b      	uxth	r3, r3
 800ef44:	3b01      	subs	r3, #1
 800ef46:	b29a      	uxth	r2, r3
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ef4e:	e023      	b.n	800ef98 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ef50:	f7f4 fca4 	bl	800389c <HAL_GetTick>
 800ef54:	4602      	mov	r2, r0
 800ef56:	697b      	ldr	r3, [r7, #20]
 800ef58:	1ad3      	subs	r3, r2, r3
 800ef5a:	683a      	ldr	r2, [r7, #0]
 800ef5c:	429a      	cmp	r2, r3
 800ef5e:	d803      	bhi.n	800ef68 <HAL_SPI_Receive+0x21c>
 800ef60:	683b      	ldr	r3, [r7, #0]
 800ef62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef66:	d102      	bne.n	800ef6e <HAL_SPI_Receive+0x222>
 800ef68:	683b      	ldr	r3, [r7, #0]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d114      	bne.n	800ef98 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ef6e:	68f8      	ldr	r0, [r7, #12]
 800ef70:	f000 f87c 	bl	800f06c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	2200      	movs	r2, #0
 800ef78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	2201      	movs	r2, #1
 800ef90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ef94:	2303      	movs	r3, #3
 800ef96:	e062      	b.n	800f05e <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ef9e:	b29b      	uxth	r3, r3
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d1b9      	bne.n	800ef18 <HAL_SPI_Receive+0x1cc>
 800efa4:	e048      	b.n	800f038 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	695b      	ldr	r3, [r3, #20]
 800efac:	f003 0301 	and.w	r3, r3, #1
 800efb0:	2b01      	cmp	r3, #1
 800efb2:	d117      	bne.n	800efe4 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800efc0:	7812      	ldrb	r2, [r2, #0]
 800efc2:	b2d2      	uxtb	r2, r2
 800efc4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800efca:	1c5a      	adds	r2, r3, #1
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800efd6:	b29b      	uxth	r3, r3
 800efd8:	3b01      	subs	r3, #1
 800efda:	b29a      	uxth	r2, r3
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800efe2:	e023      	b.n	800f02c <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800efe4:	f7f4 fc5a 	bl	800389c <HAL_GetTick>
 800efe8:	4602      	mov	r2, r0
 800efea:	697b      	ldr	r3, [r7, #20]
 800efec:	1ad3      	subs	r3, r2, r3
 800efee:	683a      	ldr	r2, [r7, #0]
 800eff0:	429a      	cmp	r2, r3
 800eff2:	d803      	bhi.n	800effc <HAL_SPI_Receive+0x2b0>
 800eff4:	683b      	ldr	r3, [r7, #0]
 800eff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800effa:	d102      	bne.n	800f002 <HAL_SPI_Receive+0x2b6>
 800effc:	683b      	ldr	r3, [r7, #0]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d114      	bne.n	800f02c <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f002:	68f8      	ldr	r0, [r7, #12]
 800f004:	f000 f832 	bl	800f06c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	2200      	movs	r2, #0
 800f00c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f016:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	2201      	movs	r2, #1
 800f024:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f028:	2303      	movs	r3, #3
 800f02a:	e018      	b.n	800f05e <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f032:	b29b      	uxth	r3, r3
 800f034:	2b00      	cmp	r3, #0
 800f036:	d1b6      	bne.n	800efa6 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f038:	68f8      	ldr	r0, [r7, #12]
 800f03a:	f000 f817 	bl	800f06c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	2200      	movs	r2, #0
 800f042:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	2201      	movs	r2, #1
 800f04a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f054:	2b00      	cmp	r3, #0
 800f056:	d001      	beq.n	800f05c <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800f058:	2301      	movs	r3, #1
 800f05a:	e000      	b.n	800f05e <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800f05c:	7ffb      	ldrb	r3, [r7, #31]
}
 800f05e:	4618      	mov	r0, r3
 800f060:	3720      	adds	r7, #32
 800f062:	46bd      	mov	sp, r7
 800f064:	bd80      	pop	{r7, pc}
 800f066:	bf00      	nop
 800f068:	ffff0000 	.word	0xffff0000

0800f06c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f06c:	b480      	push	{r7}
 800f06e:	b085      	sub	sp, #20
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	695b      	ldr	r3, [r3, #20]
 800f07a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	699a      	ldr	r2, [r3, #24]
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	f042 0208 	orr.w	r2, r2, #8
 800f08a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	699a      	ldr	r2, [r3, #24]
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	f042 0210 	orr.w	r2, r2, #16
 800f09a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	681a      	ldr	r2, [r3, #0]
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	f022 0201 	bic.w	r2, r2, #1
 800f0aa:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	6919      	ldr	r1, [r3, #16]
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681a      	ldr	r2, [r3, #0]
 800f0b6:	4b3c      	ldr	r3, [pc, #240]	; (800f1a8 <SPI_CloseTransfer+0x13c>)
 800f0b8:	400b      	ands	r3, r1
 800f0ba:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	689a      	ldr	r2, [r3, #8]
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f0ca:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f0d2:	b2db      	uxtb	r3, r3
 800f0d4:	2b04      	cmp	r3, #4
 800f0d6:	d014      	beq.n	800f102 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	f003 0320 	and.w	r3, r3, #32
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d00f      	beq.n	800f102 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f0e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	699a      	ldr	r2, [r3, #24]
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	f042 0220 	orr.w	r2, r2, #32
 800f100:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f108:	b2db      	uxtb	r3, r3
 800f10a:	2b03      	cmp	r3, #3
 800f10c:	d014      	beq.n	800f138 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f114:	2b00      	cmp	r3, #0
 800f116:	d00f      	beq.n	800f138 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f11e:	f043 0204 	orr.w	r2, r3, #4
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	699a      	ldr	r2, [r3, #24]
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f136:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d00f      	beq.n	800f162 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f148:	f043 0201 	orr.w	r2, r3, #1
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	699a      	ldr	r2, [r3, #24]
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f160:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d00f      	beq.n	800f18c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f172:	f043 0208 	orr.w	r2, r3, #8
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	699a      	ldr	r2, [r3, #24]
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f18a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	2200      	movs	r2, #0
 800f190:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2200      	movs	r2, #0
 800f198:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800f19c:	bf00      	nop
 800f19e:	3714      	adds	r7, #20
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a6:	4770      	bx	lr
 800f1a8:	fffffc90 	.word	0xfffffc90

0800f1ac <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b084      	sub	sp, #16
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	60f8      	str	r0, [r7, #12]
 800f1b4:	60b9      	str	r1, [r7, #8]
 800f1b6:	603b      	str	r3, [r7, #0]
 800f1b8:	4613      	mov	r3, r2
 800f1ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f1bc:	e010      	b.n	800f1e0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f1be:	f7f4 fb6d 	bl	800389c <HAL_GetTick>
 800f1c2:	4602      	mov	r2, r0
 800f1c4:	69bb      	ldr	r3, [r7, #24]
 800f1c6:	1ad3      	subs	r3, r2, r3
 800f1c8:	683a      	ldr	r2, [r7, #0]
 800f1ca:	429a      	cmp	r2, r3
 800f1cc:	d803      	bhi.n	800f1d6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1d4:	d102      	bne.n	800f1dc <SPI_WaitOnFlagUntilTimeout+0x30>
 800f1d6:	683b      	ldr	r3, [r7, #0]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d101      	bne.n	800f1e0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800f1dc:	2303      	movs	r3, #3
 800f1de:	e00f      	b.n	800f200 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	695a      	ldr	r2, [r3, #20]
 800f1e6:	68bb      	ldr	r3, [r7, #8]
 800f1e8:	4013      	ands	r3, r2
 800f1ea:	68ba      	ldr	r2, [r7, #8]
 800f1ec:	429a      	cmp	r2, r3
 800f1ee:	bf0c      	ite	eq
 800f1f0:	2301      	moveq	r3, #1
 800f1f2:	2300      	movne	r3, #0
 800f1f4:	b2db      	uxtb	r3, r3
 800f1f6:	461a      	mov	r2, r3
 800f1f8:	79fb      	ldrb	r3, [r7, #7]
 800f1fa:	429a      	cmp	r2, r3
 800f1fc:	d0df      	beq.n	800f1be <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800f1fe:	2300      	movs	r3, #0
}
 800f200:	4618      	mov	r0, r3
 800f202:	3710      	adds	r7, #16
 800f204:	46bd      	mov	sp, r7
 800f206:	bd80      	pop	{r7, pc}

0800f208 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800f208:	b480      	push	{r7}
 800f20a:	b085      	sub	sp, #20
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f214:	095b      	lsrs	r3, r3, #5
 800f216:	3301      	adds	r3, #1
 800f218:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	68db      	ldr	r3, [r3, #12]
 800f21e:	3301      	adds	r3, #1
 800f220:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f222:	68bb      	ldr	r3, [r7, #8]
 800f224:	3307      	adds	r3, #7
 800f226:	08db      	lsrs	r3, r3, #3
 800f228:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	68fa      	ldr	r2, [r7, #12]
 800f22e:	fb02 f303 	mul.w	r3, r2, r3
}
 800f232:	4618      	mov	r0, r3
 800f234:	3714      	adds	r7, #20
 800f236:	46bd      	mov	sp, r7
 800f238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23c:	4770      	bx	lr

0800f23e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f23e:	b580      	push	{r7, lr}
 800f240:	b082      	sub	sp, #8
 800f242:	af00      	add	r7, sp, #0
 800f244:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d101      	bne.n	800f250 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f24c:	2301      	movs	r3, #1
 800f24e:	e049      	b.n	800f2e4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f256:	b2db      	uxtb	r3, r3
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d106      	bne.n	800f26a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	2200      	movs	r2, #0
 800f260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f7f3 fef3 	bl	8003050 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	2202      	movs	r2, #2
 800f26e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681a      	ldr	r2, [r3, #0]
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	3304      	adds	r3, #4
 800f27a:	4619      	mov	r1, r3
 800f27c:	4610      	mov	r0, r2
 800f27e:	f000 fe0d 	bl	800fe9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	2201      	movs	r2, #1
 800f286:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	2201      	movs	r2, #1
 800f28e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	2201      	movs	r2, #1
 800f296:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	2201      	movs	r2, #1
 800f29e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	2201      	movs	r2, #1
 800f2a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	2201      	movs	r2, #1
 800f2ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	2201      	movs	r2, #1
 800f2b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	2201      	movs	r2, #1
 800f2be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	2201      	movs	r2, #1
 800f2c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	2201      	movs	r2, #1
 800f2ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	2201      	movs	r2, #1
 800f2d6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	2201      	movs	r2, #1
 800f2de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f2e2:	2300      	movs	r3, #0
}
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	3708      	adds	r7, #8
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	bd80      	pop	{r7, pc}

0800f2ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b082      	sub	sp, #8
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d101      	bne.n	800f2fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f2fa:	2301      	movs	r3, #1
 800f2fc:	e049      	b.n	800f392 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f304:	b2db      	uxtb	r3, r3
 800f306:	2b00      	cmp	r3, #0
 800f308:	d106      	bne.n	800f318 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	2200      	movs	r2, #0
 800f30e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	f7f3 fd06 	bl	8002d24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	2202      	movs	r2, #2
 800f31c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681a      	ldr	r2, [r3, #0]
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	3304      	adds	r3, #4
 800f328:	4619      	mov	r1, r3
 800f32a:	4610      	mov	r0, r2
 800f32c:	f000 fdb6 	bl	800fe9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	2201      	movs	r2, #1
 800f334:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	2201      	movs	r2, #1
 800f33c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	2201      	movs	r2, #1
 800f344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2201      	movs	r2, #1
 800f34c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	2201      	movs	r2, #1
 800f354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	2201      	movs	r2, #1
 800f35c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	2201      	movs	r2, #1
 800f364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	2201      	movs	r2, #1
 800f36c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	2201      	movs	r2, #1
 800f374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2201      	movs	r2, #1
 800f37c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2201      	movs	r2, #1
 800f384:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	2201      	movs	r2, #1
 800f38c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f390:	2300      	movs	r3, #0
}
 800f392:	4618      	mov	r0, r3
 800f394:	3708      	adds	r7, #8
 800f396:	46bd      	mov	sp, r7
 800f398:	bd80      	pop	{r7, pc}
	...

0800f39c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b086      	sub	sp, #24
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	60f8      	str	r0, [r7, #12]
 800f3a4:	60b9      	str	r1, [r7, #8]
 800f3a6:	607a      	str	r2, [r7, #4]
 800f3a8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800f3ae:	68bb      	ldr	r3, [r7, #8]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d109      	bne.n	800f3c8 <HAL_TIM_PWM_Start_DMA+0x2c>
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f3ba:	b2db      	uxtb	r3, r3
 800f3bc:	2b02      	cmp	r3, #2
 800f3be:	bf0c      	ite	eq
 800f3c0:	2301      	moveq	r3, #1
 800f3c2:	2300      	movne	r3, #0
 800f3c4:	b2db      	uxtb	r3, r3
 800f3c6:	e03c      	b.n	800f442 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f3c8:	68bb      	ldr	r3, [r7, #8]
 800f3ca:	2b04      	cmp	r3, #4
 800f3cc:	d109      	bne.n	800f3e2 <HAL_TIM_PWM_Start_DMA+0x46>
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f3d4:	b2db      	uxtb	r3, r3
 800f3d6:	2b02      	cmp	r3, #2
 800f3d8:	bf0c      	ite	eq
 800f3da:	2301      	moveq	r3, #1
 800f3dc:	2300      	movne	r3, #0
 800f3de:	b2db      	uxtb	r3, r3
 800f3e0:	e02f      	b.n	800f442 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f3e2:	68bb      	ldr	r3, [r7, #8]
 800f3e4:	2b08      	cmp	r3, #8
 800f3e6:	d109      	bne.n	800f3fc <HAL_TIM_PWM_Start_DMA+0x60>
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f3ee:	b2db      	uxtb	r3, r3
 800f3f0:	2b02      	cmp	r3, #2
 800f3f2:	bf0c      	ite	eq
 800f3f4:	2301      	moveq	r3, #1
 800f3f6:	2300      	movne	r3, #0
 800f3f8:	b2db      	uxtb	r3, r3
 800f3fa:	e022      	b.n	800f442 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f3fc:	68bb      	ldr	r3, [r7, #8]
 800f3fe:	2b0c      	cmp	r3, #12
 800f400:	d109      	bne.n	800f416 <HAL_TIM_PWM_Start_DMA+0x7a>
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f408:	b2db      	uxtb	r3, r3
 800f40a:	2b02      	cmp	r3, #2
 800f40c:	bf0c      	ite	eq
 800f40e:	2301      	moveq	r3, #1
 800f410:	2300      	movne	r3, #0
 800f412:	b2db      	uxtb	r3, r3
 800f414:	e015      	b.n	800f442 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f416:	68bb      	ldr	r3, [r7, #8]
 800f418:	2b10      	cmp	r3, #16
 800f41a:	d109      	bne.n	800f430 <HAL_TIM_PWM_Start_DMA+0x94>
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f422:	b2db      	uxtb	r3, r3
 800f424:	2b02      	cmp	r3, #2
 800f426:	bf0c      	ite	eq
 800f428:	2301      	moveq	r3, #1
 800f42a:	2300      	movne	r3, #0
 800f42c:	b2db      	uxtb	r3, r3
 800f42e:	e008      	b.n	800f442 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f436:	b2db      	uxtb	r3, r3
 800f438:	2b02      	cmp	r3, #2
 800f43a:	bf0c      	ite	eq
 800f43c:	2301      	moveq	r3, #1
 800f43e:	2300      	movne	r3, #0
 800f440:	b2db      	uxtb	r3, r3
 800f442:	2b00      	cmp	r3, #0
 800f444:	d001      	beq.n	800f44a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800f446:	2302      	movs	r3, #2
 800f448:	e1ba      	b.n	800f7c0 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800f44a:	68bb      	ldr	r3, [r7, #8]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d109      	bne.n	800f464 <HAL_TIM_PWM_Start_DMA+0xc8>
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f456:	b2db      	uxtb	r3, r3
 800f458:	2b01      	cmp	r3, #1
 800f45a:	bf0c      	ite	eq
 800f45c:	2301      	moveq	r3, #1
 800f45e:	2300      	movne	r3, #0
 800f460:	b2db      	uxtb	r3, r3
 800f462:	e03c      	b.n	800f4de <HAL_TIM_PWM_Start_DMA+0x142>
 800f464:	68bb      	ldr	r3, [r7, #8]
 800f466:	2b04      	cmp	r3, #4
 800f468:	d109      	bne.n	800f47e <HAL_TIM_PWM_Start_DMA+0xe2>
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f470:	b2db      	uxtb	r3, r3
 800f472:	2b01      	cmp	r3, #1
 800f474:	bf0c      	ite	eq
 800f476:	2301      	moveq	r3, #1
 800f478:	2300      	movne	r3, #0
 800f47a:	b2db      	uxtb	r3, r3
 800f47c:	e02f      	b.n	800f4de <HAL_TIM_PWM_Start_DMA+0x142>
 800f47e:	68bb      	ldr	r3, [r7, #8]
 800f480:	2b08      	cmp	r3, #8
 800f482:	d109      	bne.n	800f498 <HAL_TIM_PWM_Start_DMA+0xfc>
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f48a:	b2db      	uxtb	r3, r3
 800f48c:	2b01      	cmp	r3, #1
 800f48e:	bf0c      	ite	eq
 800f490:	2301      	moveq	r3, #1
 800f492:	2300      	movne	r3, #0
 800f494:	b2db      	uxtb	r3, r3
 800f496:	e022      	b.n	800f4de <HAL_TIM_PWM_Start_DMA+0x142>
 800f498:	68bb      	ldr	r3, [r7, #8]
 800f49a:	2b0c      	cmp	r3, #12
 800f49c:	d109      	bne.n	800f4b2 <HAL_TIM_PWM_Start_DMA+0x116>
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f4a4:	b2db      	uxtb	r3, r3
 800f4a6:	2b01      	cmp	r3, #1
 800f4a8:	bf0c      	ite	eq
 800f4aa:	2301      	moveq	r3, #1
 800f4ac:	2300      	movne	r3, #0
 800f4ae:	b2db      	uxtb	r3, r3
 800f4b0:	e015      	b.n	800f4de <HAL_TIM_PWM_Start_DMA+0x142>
 800f4b2:	68bb      	ldr	r3, [r7, #8]
 800f4b4:	2b10      	cmp	r3, #16
 800f4b6:	d109      	bne.n	800f4cc <HAL_TIM_PWM_Start_DMA+0x130>
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f4be:	b2db      	uxtb	r3, r3
 800f4c0:	2b01      	cmp	r3, #1
 800f4c2:	bf0c      	ite	eq
 800f4c4:	2301      	moveq	r3, #1
 800f4c6:	2300      	movne	r3, #0
 800f4c8:	b2db      	uxtb	r3, r3
 800f4ca:	e008      	b.n	800f4de <HAL_TIM_PWM_Start_DMA+0x142>
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f4d2:	b2db      	uxtb	r3, r3
 800f4d4:	2b01      	cmp	r3, #1
 800f4d6:	bf0c      	ite	eq
 800f4d8:	2301      	moveq	r3, #1
 800f4da:	2300      	movne	r3, #0
 800f4dc:	b2db      	uxtb	r3, r3
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d034      	beq.n	800f54c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d002      	beq.n	800f4ee <HAL_TIM_PWM_Start_DMA+0x152>
 800f4e8:	887b      	ldrh	r3, [r7, #2]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d101      	bne.n	800f4f2 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800f4ee:	2301      	movs	r3, #1
 800f4f0:	e166      	b.n	800f7c0 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f4f2:	68bb      	ldr	r3, [r7, #8]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d104      	bne.n	800f502 <HAL_TIM_PWM_Start_DMA+0x166>
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	2202      	movs	r2, #2
 800f4fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f500:	e026      	b.n	800f550 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f502:	68bb      	ldr	r3, [r7, #8]
 800f504:	2b04      	cmp	r3, #4
 800f506:	d104      	bne.n	800f512 <HAL_TIM_PWM_Start_DMA+0x176>
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	2202      	movs	r2, #2
 800f50c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f510:	e01e      	b.n	800f550 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f512:	68bb      	ldr	r3, [r7, #8]
 800f514:	2b08      	cmp	r3, #8
 800f516:	d104      	bne.n	800f522 <HAL_TIM_PWM_Start_DMA+0x186>
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	2202      	movs	r2, #2
 800f51c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f520:	e016      	b.n	800f550 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f522:	68bb      	ldr	r3, [r7, #8]
 800f524:	2b0c      	cmp	r3, #12
 800f526:	d104      	bne.n	800f532 <HAL_TIM_PWM_Start_DMA+0x196>
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	2202      	movs	r2, #2
 800f52c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f530:	e00e      	b.n	800f550 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f532:	68bb      	ldr	r3, [r7, #8]
 800f534:	2b10      	cmp	r3, #16
 800f536:	d104      	bne.n	800f542 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	2202      	movs	r2, #2
 800f53c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f540:	e006      	b.n	800f550 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	2202      	movs	r2, #2
 800f546:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f54a:	e001      	b.n	800f550 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800f54c:	2301      	movs	r3, #1
 800f54e:	e137      	b.n	800f7c0 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800f550:	68bb      	ldr	r3, [r7, #8]
 800f552:	2b0c      	cmp	r3, #12
 800f554:	f200 80ae 	bhi.w	800f6b4 <HAL_TIM_PWM_Start_DMA+0x318>
 800f558:	a201      	add	r2, pc, #4	; (adr r2, 800f560 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800f55a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f55e:	bf00      	nop
 800f560:	0800f595 	.word	0x0800f595
 800f564:	0800f6b5 	.word	0x0800f6b5
 800f568:	0800f6b5 	.word	0x0800f6b5
 800f56c:	0800f6b5 	.word	0x0800f6b5
 800f570:	0800f5dd 	.word	0x0800f5dd
 800f574:	0800f6b5 	.word	0x0800f6b5
 800f578:	0800f6b5 	.word	0x0800f6b5
 800f57c:	0800f6b5 	.word	0x0800f6b5
 800f580:	0800f625 	.word	0x0800f625
 800f584:	0800f6b5 	.word	0x0800f6b5
 800f588:	0800f6b5 	.word	0x0800f6b5
 800f58c:	0800f6b5 	.word	0x0800f6b5
 800f590:	0800f66d 	.word	0x0800f66d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f598:	4a8b      	ldr	r2, [pc, #556]	; (800f7c8 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f59a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5a0:	4a8a      	ldr	r2, [pc, #552]	; (800f7cc <HAL_TIM_PWM_Start_DMA+0x430>)
 800f5a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5a8:	4a89      	ldr	r2, [pc, #548]	; (800f7d0 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f5aa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f5b0:	6879      	ldr	r1, [r7, #4]
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	3334      	adds	r3, #52	; 0x34
 800f5b8:	461a      	mov	r2, r3
 800f5ba:	887b      	ldrh	r3, [r7, #2]
 800f5bc:	f7f6 f98e 	bl	80058dc <HAL_DMA_Start_IT>
 800f5c0:	4603      	mov	r3, r0
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d001      	beq.n	800f5ca <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f5c6:	2301      	movs	r3, #1
 800f5c8:	e0fa      	b.n	800f7c0 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	68da      	ldr	r2, [r3, #12]
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f5d8:	60da      	str	r2, [r3, #12]
      break;
 800f5da:	e06e      	b.n	800f6ba <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5e0:	4a79      	ldr	r2, [pc, #484]	; (800f7c8 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f5e2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5e8:	4a78      	ldr	r2, [pc, #480]	; (800f7cc <HAL_TIM_PWM_Start_DMA+0x430>)
 800f5ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5f0:	4a77      	ldr	r2, [pc, #476]	; (800f7d0 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f5f2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800f5f8:	6879      	ldr	r1, [r7, #4]
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	3338      	adds	r3, #56	; 0x38
 800f600:	461a      	mov	r2, r3
 800f602:	887b      	ldrh	r3, [r7, #2]
 800f604:	f7f6 f96a 	bl	80058dc <HAL_DMA_Start_IT>
 800f608:	4603      	mov	r3, r0
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d001      	beq.n	800f612 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f60e:	2301      	movs	r3, #1
 800f610:	e0d6      	b.n	800f7c0 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	68da      	ldr	r2, [r3, #12]
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f620:	60da      	str	r2, [r3, #12]
      break;
 800f622:	e04a      	b.n	800f6ba <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f628:	4a67      	ldr	r2, [pc, #412]	; (800f7c8 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f62a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f630:	4a66      	ldr	r2, [pc, #408]	; (800f7cc <HAL_TIM_PWM_Start_DMA+0x430>)
 800f632:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f638:	4a65      	ldr	r2, [pc, #404]	; (800f7d0 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f63a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800f640:	6879      	ldr	r1, [r7, #4]
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	333c      	adds	r3, #60	; 0x3c
 800f648:	461a      	mov	r2, r3
 800f64a:	887b      	ldrh	r3, [r7, #2]
 800f64c:	f7f6 f946 	bl	80058dc <HAL_DMA_Start_IT>
 800f650:	4603      	mov	r3, r0
 800f652:	2b00      	cmp	r3, #0
 800f654:	d001      	beq.n	800f65a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f656:	2301      	movs	r3, #1
 800f658:	e0b2      	b.n	800f7c0 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	68da      	ldr	r2, [r3, #12]
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f668:	60da      	str	r2, [r3, #12]
      break;
 800f66a:	e026      	b.n	800f6ba <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f670:	4a55      	ldr	r2, [pc, #340]	; (800f7c8 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f672:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f678:	4a54      	ldr	r2, [pc, #336]	; (800f7cc <HAL_TIM_PWM_Start_DMA+0x430>)
 800f67a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f680:	4a53      	ldr	r2, [pc, #332]	; (800f7d0 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f682:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f688:	6879      	ldr	r1, [r7, #4]
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	3340      	adds	r3, #64	; 0x40
 800f690:	461a      	mov	r2, r3
 800f692:	887b      	ldrh	r3, [r7, #2]
 800f694:	f7f6 f922 	bl	80058dc <HAL_DMA_Start_IT>
 800f698:	4603      	mov	r3, r0
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d001      	beq.n	800f6a2 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f69e:	2301      	movs	r3, #1
 800f6a0:	e08e      	b.n	800f7c0 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	68da      	ldr	r2, [r3, #12]
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f6b0:	60da      	str	r2, [r3, #12]
      break;
 800f6b2:	e002      	b.n	800f6ba <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800f6b4:	2301      	movs	r3, #1
 800f6b6:	75fb      	strb	r3, [r7, #23]
      break;
 800f6b8:	bf00      	nop
  }

  if (status == HAL_OK)
 800f6ba:	7dfb      	ldrb	r3, [r7, #23]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d17e      	bne.n	800f7be <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	2201      	movs	r2, #1
 800f6c6:	68b9      	ldr	r1, [r7, #8]
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	f000 ff63 	bl	8010594 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	4a40      	ldr	r2, [pc, #256]	; (800f7d4 <HAL_TIM_PWM_Start_DMA+0x438>)
 800f6d4:	4293      	cmp	r3, r2
 800f6d6:	d013      	beq.n	800f700 <HAL_TIM_PWM_Start_DMA+0x364>
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	4a3e      	ldr	r2, [pc, #248]	; (800f7d8 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800f6de:	4293      	cmp	r3, r2
 800f6e0:	d00e      	beq.n	800f700 <HAL_TIM_PWM_Start_DMA+0x364>
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	4a3d      	ldr	r2, [pc, #244]	; (800f7dc <HAL_TIM_PWM_Start_DMA+0x440>)
 800f6e8:	4293      	cmp	r3, r2
 800f6ea:	d009      	beq.n	800f700 <HAL_TIM_PWM_Start_DMA+0x364>
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	4a3b      	ldr	r2, [pc, #236]	; (800f7e0 <HAL_TIM_PWM_Start_DMA+0x444>)
 800f6f2:	4293      	cmp	r3, r2
 800f6f4:	d004      	beq.n	800f700 <HAL_TIM_PWM_Start_DMA+0x364>
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	4a3a      	ldr	r2, [pc, #232]	; (800f7e4 <HAL_TIM_PWM_Start_DMA+0x448>)
 800f6fc:	4293      	cmp	r3, r2
 800f6fe:	d101      	bne.n	800f704 <HAL_TIM_PWM_Start_DMA+0x368>
 800f700:	2301      	movs	r3, #1
 800f702:	e000      	b.n	800f706 <HAL_TIM_PWM_Start_DMA+0x36a>
 800f704:	2300      	movs	r3, #0
 800f706:	2b00      	cmp	r3, #0
 800f708:	d007      	beq.n	800f71a <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f718:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	4a2d      	ldr	r2, [pc, #180]	; (800f7d4 <HAL_TIM_PWM_Start_DMA+0x438>)
 800f720:	4293      	cmp	r3, r2
 800f722:	d02c      	beq.n	800f77e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f72c:	d027      	beq.n	800f77e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	4a2d      	ldr	r2, [pc, #180]	; (800f7e8 <HAL_TIM_PWM_Start_DMA+0x44c>)
 800f734:	4293      	cmp	r3, r2
 800f736:	d022      	beq.n	800f77e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	4a2b      	ldr	r2, [pc, #172]	; (800f7ec <HAL_TIM_PWM_Start_DMA+0x450>)
 800f73e:	4293      	cmp	r3, r2
 800f740:	d01d      	beq.n	800f77e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	4a2a      	ldr	r2, [pc, #168]	; (800f7f0 <HAL_TIM_PWM_Start_DMA+0x454>)
 800f748:	4293      	cmp	r3, r2
 800f74a:	d018      	beq.n	800f77e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	4a21      	ldr	r2, [pc, #132]	; (800f7d8 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800f752:	4293      	cmp	r3, r2
 800f754:	d013      	beq.n	800f77e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	4a26      	ldr	r2, [pc, #152]	; (800f7f4 <HAL_TIM_PWM_Start_DMA+0x458>)
 800f75c:	4293      	cmp	r3, r2
 800f75e:	d00e      	beq.n	800f77e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	4a1d      	ldr	r2, [pc, #116]	; (800f7dc <HAL_TIM_PWM_Start_DMA+0x440>)
 800f766:	4293      	cmp	r3, r2
 800f768:	d009      	beq.n	800f77e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	4a22      	ldr	r2, [pc, #136]	; (800f7f8 <HAL_TIM_PWM_Start_DMA+0x45c>)
 800f770:	4293      	cmp	r3, r2
 800f772:	d004      	beq.n	800f77e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	4a20      	ldr	r2, [pc, #128]	; (800f7fc <HAL_TIM_PWM_Start_DMA+0x460>)
 800f77a:	4293      	cmp	r3, r2
 800f77c:	d115      	bne.n	800f7aa <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	689a      	ldr	r2, [r3, #8]
 800f784:	4b1e      	ldr	r3, [pc, #120]	; (800f800 <HAL_TIM_PWM_Start_DMA+0x464>)
 800f786:	4013      	ands	r3, r2
 800f788:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f78a:	693b      	ldr	r3, [r7, #16]
 800f78c:	2b06      	cmp	r3, #6
 800f78e:	d015      	beq.n	800f7bc <HAL_TIM_PWM_Start_DMA+0x420>
 800f790:	693b      	ldr	r3, [r7, #16]
 800f792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f796:	d011      	beq.n	800f7bc <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	681a      	ldr	r2, [r3, #0]
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	f042 0201 	orr.w	r2, r2, #1
 800f7a6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f7a8:	e008      	b.n	800f7bc <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	681a      	ldr	r2, [r3, #0]
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	f042 0201 	orr.w	r2, r2, #1
 800f7b8:	601a      	str	r2, [r3, #0]
 800f7ba:	e000      	b.n	800f7be <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f7bc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800f7be:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	3718      	adds	r7, #24
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	bd80      	pop	{r7, pc}
 800f7c8:	0800fd8b 	.word	0x0800fd8b
 800f7cc:	0800fe33 	.word	0x0800fe33
 800f7d0:	0800fcf9 	.word	0x0800fcf9
 800f7d4:	40010000 	.word	0x40010000
 800f7d8:	40010400 	.word	0x40010400
 800f7dc:	40014000 	.word	0x40014000
 800f7e0:	40014400 	.word	0x40014400
 800f7e4:	40014800 	.word	0x40014800
 800f7e8:	40000400 	.word	0x40000400
 800f7ec:	40000800 	.word	0x40000800
 800f7f0:	40000c00 	.word	0x40000c00
 800f7f4:	40001800 	.word	0x40001800
 800f7f8:	4000e000 	.word	0x4000e000
 800f7fc:	4000e400 	.word	0x4000e400
 800f800:	00010007 	.word	0x00010007

0800f804 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f804:	b580      	push	{r7, lr}
 800f806:	b082      	sub	sp, #8
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	691b      	ldr	r3, [r3, #16]
 800f812:	f003 0302 	and.w	r3, r3, #2
 800f816:	2b02      	cmp	r3, #2
 800f818:	d122      	bne.n	800f860 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	68db      	ldr	r3, [r3, #12]
 800f820:	f003 0302 	and.w	r3, r3, #2
 800f824:	2b02      	cmp	r3, #2
 800f826:	d11b      	bne.n	800f860 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	f06f 0202 	mvn.w	r2, #2
 800f830:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	2201      	movs	r2, #1
 800f836:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	699b      	ldr	r3, [r3, #24]
 800f83e:	f003 0303 	and.w	r3, r3, #3
 800f842:	2b00      	cmp	r3, #0
 800f844:	d003      	beq.n	800f84e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f846:	6878      	ldr	r0, [r7, #4]
 800f848:	f000 fa24 	bl	800fc94 <HAL_TIM_IC_CaptureCallback>
 800f84c:	e005      	b.n	800f85a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f84e:	6878      	ldr	r0, [r7, #4]
 800f850:	f000 fa16 	bl	800fc80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f854:	6878      	ldr	r0, [r7, #4]
 800f856:	f000 fa27 	bl	800fca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	2200      	movs	r2, #0
 800f85e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	691b      	ldr	r3, [r3, #16]
 800f866:	f003 0304 	and.w	r3, r3, #4
 800f86a:	2b04      	cmp	r3, #4
 800f86c:	d122      	bne.n	800f8b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	68db      	ldr	r3, [r3, #12]
 800f874:	f003 0304 	and.w	r3, r3, #4
 800f878:	2b04      	cmp	r3, #4
 800f87a:	d11b      	bne.n	800f8b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	f06f 0204 	mvn.w	r2, #4
 800f884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	2202      	movs	r2, #2
 800f88a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	699b      	ldr	r3, [r3, #24]
 800f892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f896:	2b00      	cmp	r3, #0
 800f898:	d003      	beq.n	800f8a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f89a:	6878      	ldr	r0, [r7, #4]
 800f89c:	f000 f9fa 	bl	800fc94 <HAL_TIM_IC_CaptureCallback>
 800f8a0:	e005      	b.n	800f8ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f8a2:	6878      	ldr	r0, [r7, #4]
 800f8a4:	f000 f9ec 	bl	800fc80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f8a8:	6878      	ldr	r0, [r7, #4]
 800f8aa:	f000 f9fd 	bl	800fca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	691b      	ldr	r3, [r3, #16]
 800f8ba:	f003 0308 	and.w	r3, r3, #8
 800f8be:	2b08      	cmp	r3, #8
 800f8c0:	d122      	bne.n	800f908 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	68db      	ldr	r3, [r3, #12]
 800f8c8:	f003 0308 	and.w	r3, r3, #8
 800f8cc:	2b08      	cmp	r3, #8
 800f8ce:	d11b      	bne.n	800f908 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	f06f 0208 	mvn.w	r2, #8
 800f8d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	2204      	movs	r2, #4
 800f8de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	69db      	ldr	r3, [r3, #28]
 800f8e6:	f003 0303 	and.w	r3, r3, #3
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d003      	beq.n	800f8f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f8ee:	6878      	ldr	r0, [r7, #4]
 800f8f0:	f000 f9d0 	bl	800fc94 <HAL_TIM_IC_CaptureCallback>
 800f8f4:	e005      	b.n	800f902 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f8f6:	6878      	ldr	r0, [r7, #4]
 800f8f8:	f000 f9c2 	bl	800fc80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f8fc:	6878      	ldr	r0, [r7, #4]
 800f8fe:	f000 f9d3 	bl	800fca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	2200      	movs	r2, #0
 800f906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	691b      	ldr	r3, [r3, #16]
 800f90e:	f003 0310 	and.w	r3, r3, #16
 800f912:	2b10      	cmp	r3, #16
 800f914:	d122      	bne.n	800f95c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	68db      	ldr	r3, [r3, #12]
 800f91c:	f003 0310 	and.w	r3, r3, #16
 800f920:	2b10      	cmp	r3, #16
 800f922:	d11b      	bne.n	800f95c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	f06f 0210 	mvn.w	r2, #16
 800f92c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	2208      	movs	r2, #8
 800f932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	69db      	ldr	r3, [r3, #28]
 800f93a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d003      	beq.n	800f94a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f942:	6878      	ldr	r0, [r7, #4]
 800f944:	f000 f9a6 	bl	800fc94 <HAL_TIM_IC_CaptureCallback>
 800f948:	e005      	b.n	800f956 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f94a:	6878      	ldr	r0, [r7, #4]
 800f94c:	f000 f998 	bl	800fc80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f950:	6878      	ldr	r0, [r7, #4]
 800f952:	f000 f9a9 	bl	800fca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	2200      	movs	r2, #0
 800f95a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	691b      	ldr	r3, [r3, #16]
 800f962:	f003 0301 	and.w	r3, r3, #1
 800f966:	2b01      	cmp	r3, #1
 800f968:	d10e      	bne.n	800f988 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	68db      	ldr	r3, [r3, #12]
 800f970:	f003 0301 	and.w	r3, r3, #1
 800f974:	2b01      	cmp	r3, #1
 800f976:	d107      	bne.n	800f988 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	f06f 0201 	mvn.w	r2, #1
 800f980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f982:	6878      	ldr	r0, [r7, #4]
 800f984:	f000 f972 	bl	800fc6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	691b      	ldr	r3, [r3, #16]
 800f98e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f992:	2b80      	cmp	r3, #128	; 0x80
 800f994:	d10e      	bne.n	800f9b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	68db      	ldr	r3, [r3, #12]
 800f99c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f9a0:	2b80      	cmp	r3, #128	; 0x80
 800f9a2:	d107      	bne.n	800f9b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f9ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f9ae:	6878      	ldr	r0, [r7, #4]
 800f9b0:	f000 febc 	bl	801072c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	691b      	ldr	r3, [r3, #16]
 800f9ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f9be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f9c2:	d10e      	bne.n	800f9e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	68db      	ldr	r3, [r3, #12]
 800f9ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f9ce:	2b80      	cmp	r3, #128	; 0x80
 800f9d0:	d107      	bne.n	800f9e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f9da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f9dc:	6878      	ldr	r0, [r7, #4]
 800f9de:	f000 feaf 	bl	8010740 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	691b      	ldr	r3, [r3, #16]
 800f9e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9ec:	2b40      	cmp	r3, #64	; 0x40
 800f9ee:	d10e      	bne.n	800fa0e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	68db      	ldr	r3, [r3, #12]
 800f9f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9fa:	2b40      	cmp	r3, #64	; 0x40
 800f9fc:	d107      	bne.n	800fa0e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fa06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fa08:	6878      	ldr	r0, [r7, #4]
 800fa0a:	f000 f961 	bl	800fcd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	691b      	ldr	r3, [r3, #16]
 800fa14:	f003 0320 	and.w	r3, r3, #32
 800fa18:	2b20      	cmp	r3, #32
 800fa1a:	d10e      	bne.n	800fa3a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	68db      	ldr	r3, [r3, #12]
 800fa22:	f003 0320 	and.w	r3, r3, #32
 800fa26:	2b20      	cmp	r3, #32
 800fa28:	d107      	bne.n	800fa3a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	f06f 0220 	mvn.w	r2, #32
 800fa32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fa34:	6878      	ldr	r0, [r7, #4]
 800fa36:	f000 fe6f 	bl	8010718 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fa3a:	bf00      	nop
 800fa3c:	3708      	adds	r7, #8
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	bd80      	pop	{r7, pc}
	...

0800fa44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fa44:	b580      	push	{r7, lr}
 800fa46:	b086      	sub	sp, #24
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	60f8      	str	r0, [r7, #12]
 800fa4c:	60b9      	str	r1, [r7, #8]
 800fa4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fa50:	2300      	movs	r3, #0
 800fa52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fa5a:	2b01      	cmp	r3, #1
 800fa5c:	d101      	bne.n	800fa62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800fa5e:	2302      	movs	r3, #2
 800fa60:	e0ff      	b.n	800fc62 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	2201      	movs	r2, #1
 800fa66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	2b14      	cmp	r3, #20
 800fa6e:	f200 80f0 	bhi.w	800fc52 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800fa72:	a201      	add	r2, pc, #4	; (adr r2, 800fa78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800fa74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa78:	0800facd 	.word	0x0800facd
 800fa7c:	0800fc53 	.word	0x0800fc53
 800fa80:	0800fc53 	.word	0x0800fc53
 800fa84:	0800fc53 	.word	0x0800fc53
 800fa88:	0800fb0d 	.word	0x0800fb0d
 800fa8c:	0800fc53 	.word	0x0800fc53
 800fa90:	0800fc53 	.word	0x0800fc53
 800fa94:	0800fc53 	.word	0x0800fc53
 800fa98:	0800fb4f 	.word	0x0800fb4f
 800fa9c:	0800fc53 	.word	0x0800fc53
 800faa0:	0800fc53 	.word	0x0800fc53
 800faa4:	0800fc53 	.word	0x0800fc53
 800faa8:	0800fb8f 	.word	0x0800fb8f
 800faac:	0800fc53 	.word	0x0800fc53
 800fab0:	0800fc53 	.word	0x0800fc53
 800fab4:	0800fc53 	.word	0x0800fc53
 800fab8:	0800fbd1 	.word	0x0800fbd1
 800fabc:	0800fc53 	.word	0x0800fc53
 800fac0:	0800fc53 	.word	0x0800fc53
 800fac4:	0800fc53 	.word	0x0800fc53
 800fac8:	0800fc11 	.word	0x0800fc11
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	68b9      	ldr	r1, [r7, #8]
 800fad2:	4618      	mov	r0, r3
 800fad4:	f000 fa88 	bl	800ffe8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	699a      	ldr	r2, [r3, #24]
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	f042 0208 	orr.w	r2, r2, #8
 800fae6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	699a      	ldr	r2, [r3, #24]
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	f022 0204 	bic.w	r2, r2, #4
 800faf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	6999      	ldr	r1, [r3, #24]
 800fafe:	68bb      	ldr	r3, [r7, #8]
 800fb00:	691a      	ldr	r2, [r3, #16]
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	430a      	orrs	r2, r1
 800fb08:	619a      	str	r2, [r3, #24]
      break;
 800fb0a:	e0a5      	b.n	800fc58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	68b9      	ldr	r1, [r7, #8]
 800fb12:	4618      	mov	r0, r3
 800fb14:	f000 faf8 	bl	8010108 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	699a      	ldr	r2, [r3, #24]
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fb26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	699a      	ldr	r2, [r3, #24]
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fb36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	6999      	ldr	r1, [r3, #24]
 800fb3e:	68bb      	ldr	r3, [r7, #8]
 800fb40:	691b      	ldr	r3, [r3, #16]
 800fb42:	021a      	lsls	r2, r3, #8
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	430a      	orrs	r2, r1
 800fb4a:	619a      	str	r2, [r3, #24]
      break;
 800fb4c:	e084      	b.n	800fc58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	68b9      	ldr	r1, [r7, #8]
 800fb54:	4618      	mov	r0, r3
 800fb56:	f000 fb61 	bl	801021c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	69da      	ldr	r2, [r3, #28]
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	f042 0208 	orr.w	r2, r2, #8
 800fb68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	69da      	ldr	r2, [r3, #28]
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	f022 0204 	bic.w	r2, r2, #4
 800fb78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	69d9      	ldr	r1, [r3, #28]
 800fb80:	68bb      	ldr	r3, [r7, #8]
 800fb82:	691a      	ldr	r2, [r3, #16]
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	430a      	orrs	r2, r1
 800fb8a:	61da      	str	r2, [r3, #28]
      break;
 800fb8c:	e064      	b.n	800fc58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	68b9      	ldr	r1, [r7, #8]
 800fb94:	4618      	mov	r0, r3
 800fb96:	f000 fbc9 	bl	801032c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	69da      	ldr	r2, [r3, #28]
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fba8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	69da      	ldr	r2, [r3, #28]
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fbb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	69d9      	ldr	r1, [r3, #28]
 800fbc0:	68bb      	ldr	r3, [r7, #8]
 800fbc2:	691b      	ldr	r3, [r3, #16]
 800fbc4:	021a      	lsls	r2, r3, #8
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	430a      	orrs	r2, r1
 800fbcc:	61da      	str	r2, [r3, #28]
      break;
 800fbce:	e043      	b.n	800fc58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	68b9      	ldr	r1, [r7, #8]
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	f000 fc12 	bl	8010400 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	f042 0208 	orr.w	r2, r2, #8
 800fbea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	f022 0204 	bic.w	r2, r2, #4
 800fbfa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fc02:	68bb      	ldr	r3, [r7, #8]
 800fc04:	691a      	ldr	r2, [r3, #16]
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	430a      	orrs	r2, r1
 800fc0c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fc0e:	e023      	b.n	800fc58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	68b9      	ldr	r1, [r7, #8]
 800fc16:	4618      	mov	r0, r3
 800fc18:	f000 fc56 	bl	80104c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fc2a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fc3a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fc42:	68bb      	ldr	r3, [r7, #8]
 800fc44:	691b      	ldr	r3, [r3, #16]
 800fc46:	021a      	lsls	r2, r3, #8
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	430a      	orrs	r2, r1
 800fc4e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fc50:	e002      	b.n	800fc58 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800fc52:	2301      	movs	r3, #1
 800fc54:	75fb      	strb	r3, [r7, #23]
      break;
 800fc56:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	2200      	movs	r2, #0
 800fc5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800fc60:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc62:	4618      	mov	r0, r3
 800fc64:	3718      	adds	r7, #24
 800fc66:	46bd      	mov	sp, r7
 800fc68:	bd80      	pop	{r7, pc}
 800fc6a:	bf00      	nop

0800fc6c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fc6c:	b480      	push	{r7}
 800fc6e:	b083      	sub	sp, #12
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800fc74:	bf00      	nop
 800fc76:	370c      	adds	r7, #12
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7e:	4770      	bx	lr

0800fc80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fc80:	b480      	push	{r7}
 800fc82:	b083      	sub	sp, #12
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fc88:	bf00      	nop
 800fc8a:	370c      	adds	r7, #12
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc92:	4770      	bx	lr

0800fc94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fc94:	b480      	push	{r7}
 800fc96:	b083      	sub	sp, #12
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fc9c:	bf00      	nop
 800fc9e:	370c      	adds	r7, #12
 800fca0:	46bd      	mov	sp, r7
 800fca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca6:	4770      	bx	lr

0800fca8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fca8:	b480      	push	{r7}
 800fcaa:	b083      	sub	sp, #12
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fcb0:	bf00      	nop
 800fcb2:	370c      	adds	r7, #12
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcba:	4770      	bx	lr

0800fcbc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800fcbc:	b480      	push	{r7}
 800fcbe:	b083      	sub	sp, #12
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800fcc4:	bf00      	nop
 800fcc6:	370c      	adds	r7, #12
 800fcc8:	46bd      	mov	sp, r7
 800fcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcce:	4770      	bx	lr

0800fcd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fcd0:	b480      	push	{r7}
 800fcd2:	b083      	sub	sp, #12
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fcd8:	bf00      	nop
 800fcda:	370c      	adds	r7, #12
 800fcdc:	46bd      	mov	sp, r7
 800fcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce2:	4770      	bx	lr

0800fce4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800fce4:	b480      	push	{r7}
 800fce6:	b083      	sub	sp, #12
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800fcec:	bf00      	nop
 800fcee:	370c      	adds	r7, #12
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf6:	4770      	bx	lr

0800fcf8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b084      	sub	sp, #16
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd04:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd0a:	687a      	ldr	r2, [r7, #4]
 800fd0c:	429a      	cmp	r2, r3
 800fd0e:	d107      	bne.n	800fd20 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	2201      	movs	r2, #1
 800fd14:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	2201      	movs	r2, #1
 800fd1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fd1e:	e02a      	b.n	800fd76 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd24:	687a      	ldr	r2, [r7, #4]
 800fd26:	429a      	cmp	r2, r3
 800fd28:	d107      	bne.n	800fd3a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	2202      	movs	r2, #2
 800fd2e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	2201      	movs	r2, #1
 800fd34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fd38:	e01d      	b.n	800fd76 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd3e:	687a      	ldr	r2, [r7, #4]
 800fd40:	429a      	cmp	r2, r3
 800fd42:	d107      	bne.n	800fd54 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	2204      	movs	r2, #4
 800fd48:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	2201      	movs	r2, #1
 800fd4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fd52:	e010      	b.n	800fd76 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd58:	687a      	ldr	r2, [r7, #4]
 800fd5a:	429a      	cmp	r2, r3
 800fd5c:	d107      	bne.n	800fd6e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	2208      	movs	r2, #8
 800fd62:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	2201      	movs	r2, #1
 800fd68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fd6c:	e003      	b.n	800fd76 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	2201      	movs	r2, #1
 800fd72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800fd76:	68f8      	ldr	r0, [r7, #12]
 800fd78:	f7ff ffb4 	bl	800fce4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	2200      	movs	r2, #0
 800fd80:	771a      	strb	r2, [r3, #28]
}
 800fd82:	bf00      	nop
 800fd84:	3710      	adds	r7, #16
 800fd86:	46bd      	mov	sp, r7
 800fd88:	bd80      	pop	{r7, pc}

0800fd8a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800fd8a:	b580      	push	{r7, lr}
 800fd8c:	b084      	sub	sp, #16
 800fd8e:	af00      	add	r7, sp, #0
 800fd90:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd96:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd9c:	687a      	ldr	r2, [r7, #4]
 800fd9e:	429a      	cmp	r2, r3
 800fda0:	d10b      	bne.n	800fdba <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	2201      	movs	r2, #1
 800fda6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	69db      	ldr	r3, [r3, #28]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d136      	bne.n	800fe1e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	2201      	movs	r2, #1
 800fdb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fdb8:	e031      	b.n	800fe1e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdbe:	687a      	ldr	r2, [r7, #4]
 800fdc0:	429a      	cmp	r2, r3
 800fdc2:	d10b      	bne.n	800fddc <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	2202      	movs	r2, #2
 800fdc8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	69db      	ldr	r3, [r3, #28]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d125      	bne.n	800fe1e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	2201      	movs	r2, #1
 800fdd6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fdda:	e020      	b.n	800fe1e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fde0:	687a      	ldr	r2, [r7, #4]
 800fde2:	429a      	cmp	r2, r3
 800fde4:	d10b      	bne.n	800fdfe <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	2204      	movs	r2, #4
 800fdea:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	69db      	ldr	r3, [r3, #28]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d114      	bne.n	800fe1e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	2201      	movs	r2, #1
 800fdf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fdfc:	e00f      	b.n	800fe1e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe02:	687a      	ldr	r2, [r7, #4]
 800fe04:	429a      	cmp	r2, r3
 800fe06:	d10a      	bne.n	800fe1e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	2208      	movs	r2, #8
 800fe0c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	69db      	ldr	r3, [r3, #28]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d103      	bne.n	800fe1e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	2201      	movs	r2, #1
 800fe1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fe1e:	68f8      	ldr	r0, [r7, #12]
 800fe20:	f7ff ff42 	bl	800fca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	2200      	movs	r2, #0
 800fe28:	771a      	strb	r2, [r3, #28]
}
 800fe2a:	bf00      	nop
 800fe2c:	3710      	adds	r7, #16
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	bd80      	pop	{r7, pc}

0800fe32 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fe32:	b580      	push	{r7, lr}
 800fe34:	b084      	sub	sp, #16
 800fe36:	af00      	add	r7, sp, #0
 800fe38:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe3e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe44:	687a      	ldr	r2, [r7, #4]
 800fe46:	429a      	cmp	r2, r3
 800fe48:	d103      	bne.n	800fe52 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	2201      	movs	r2, #1
 800fe4e:	771a      	strb	r2, [r3, #28]
 800fe50:	e019      	b.n	800fe86 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe56:	687a      	ldr	r2, [r7, #4]
 800fe58:	429a      	cmp	r2, r3
 800fe5a:	d103      	bne.n	800fe64 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	2202      	movs	r2, #2
 800fe60:	771a      	strb	r2, [r3, #28]
 800fe62:	e010      	b.n	800fe86 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe68:	687a      	ldr	r2, [r7, #4]
 800fe6a:	429a      	cmp	r2, r3
 800fe6c:	d103      	bne.n	800fe76 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	2204      	movs	r2, #4
 800fe72:	771a      	strb	r2, [r3, #28]
 800fe74:	e007      	b.n	800fe86 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe7a:	687a      	ldr	r2, [r7, #4]
 800fe7c:	429a      	cmp	r2, r3
 800fe7e:	d102      	bne.n	800fe86 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	2208      	movs	r2, #8
 800fe84:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800fe86:	68f8      	ldr	r0, [r7, #12]
 800fe88:	f7ff ff18 	bl	800fcbc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	2200      	movs	r2, #0
 800fe90:	771a      	strb	r2, [r3, #28]
}
 800fe92:	bf00      	nop
 800fe94:	3710      	adds	r7, #16
 800fe96:	46bd      	mov	sp, r7
 800fe98:	bd80      	pop	{r7, pc}
	...

0800fe9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fe9c:	b480      	push	{r7}
 800fe9e:	b085      	sub	sp, #20
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
 800fea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	4a44      	ldr	r2, [pc, #272]	; (800ffc0 <TIM_Base_SetConfig+0x124>)
 800feb0:	4293      	cmp	r3, r2
 800feb2:	d013      	beq.n	800fedc <TIM_Base_SetConfig+0x40>
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800feba:	d00f      	beq.n	800fedc <TIM_Base_SetConfig+0x40>
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	4a41      	ldr	r2, [pc, #260]	; (800ffc4 <TIM_Base_SetConfig+0x128>)
 800fec0:	4293      	cmp	r3, r2
 800fec2:	d00b      	beq.n	800fedc <TIM_Base_SetConfig+0x40>
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	4a40      	ldr	r2, [pc, #256]	; (800ffc8 <TIM_Base_SetConfig+0x12c>)
 800fec8:	4293      	cmp	r3, r2
 800feca:	d007      	beq.n	800fedc <TIM_Base_SetConfig+0x40>
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	4a3f      	ldr	r2, [pc, #252]	; (800ffcc <TIM_Base_SetConfig+0x130>)
 800fed0:	4293      	cmp	r3, r2
 800fed2:	d003      	beq.n	800fedc <TIM_Base_SetConfig+0x40>
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	4a3e      	ldr	r2, [pc, #248]	; (800ffd0 <TIM_Base_SetConfig+0x134>)
 800fed8:	4293      	cmp	r3, r2
 800feda:	d108      	bne.n	800feee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fee2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fee4:	683b      	ldr	r3, [r7, #0]
 800fee6:	685b      	ldr	r3, [r3, #4]
 800fee8:	68fa      	ldr	r2, [r7, #12]
 800feea:	4313      	orrs	r3, r2
 800feec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	4a33      	ldr	r2, [pc, #204]	; (800ffc0 <TIM_Base_SetConfig+0x124>)
 800fef2:	4293      	cmp	r3, r2
 800fef4:	d027      	beq.n	800ff46 <TIM_Base_SetConfig+0xaa>
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fefc:	d023      	beq.n	800ff46 <TIM_Base_SetConfig+0xaa>
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	4a30      	ldr	r2, [pc, #192]	; (800ffc4 <TIM_Base_SetConfig+0x128>)
 800ff02:	4293      	cmp	r3, r2
 800ff04:	d01f      	beq.n	800ff46 <TIM_Base_SetConfig+0xaa>
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	4a2f      	ldr	r2, [pc, #188]	; (800ffc8 <TIM_Base_SetConfig+0x12c>)
 800ff0a:	4293      	cmp	r3, r2
 800ff0c:	d01b      	beq.n	800ff46 <TIM_Base_SetConfig+0xaa>
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	4a2e      	ldr	r2, [pc, #184]	; (800ffcc <TIM_Base_SetConfig+0x130>)
 800ff12:	4293      	cmp	r3, r2
 800ff14:	d017      	beq.n	800ff46 <TIM_Base_SetConfig+0xaa>
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	4a2d      	ldr	r2, [pc, #180]	; (800ffd0 <TIM_Base_SetConfig+0x134>)
 800ff1a:	4293      	cmp	r3, r2
 800ff1c:	d013      	beq.n	800ff46 <TIM_Base_SetConfig+0xaa>
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	4a2c      	ldr	r2, [pc, #176]	; (800ffd4 <TIM_Base_SetConfig+0x138>)
 800ff22:	4293      	cmp	r3, r2
 800ff24:	d00f      	beq.n	800ff46 <TIM_Base_SetConfig+0xaa>
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	4a2b      	ldr	r2, [pc, #172]	; (800ffd8 <TIM_Base_SetConfig+0x13c>)
 800ff2a:	4293      	cmp	r3, r2
 800ff2c:	d00b      	beq.n	800ff46 <TIM_Base_SetConfig+0xaa>
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	4a2a      	ldr	r2, [pc, #168]	; (800ffdc <TIM_Base_SetConfig+0x140>)
 800ff32:	4293      	cmp	r3, r2
 800ff34:	d007      	beq.n	800ff46 <TIM_Base_SetConfig+0xaa>
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	4a29      	ldr	r2, [pc, #164]	; (800ffe0 <TIM_Base_SetConfig+0x144>)
 800ff3a:	4293      	cmp	r3, r2
 800ff3c:	d003      	beq.n	800ff46 <TIM_Base_SetConfig+0xaa>
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	4a28      	ldr	r2, [pc, #160]	; (800ffe4 <TIM_Base_SetConfig+0x148>)
 800ff42:	4293      	cmp	r3, r2
 800ff44:	d108      	bne.n	800ff58 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ff4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ff4e:	683b      	ldr	r3, [r7, #0]
 800ff50:	68db      	ldr	r3, [r3, #12]
 800ff52:	68fa      	ldr	r2, [r7, #12]
 800ff54:	4313      	orrs	r3, r2
 800ff56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ff5e:	683b      	ldr	r3, [r7, #0]
 800ff60:	695b      	ldr	r3, [r3, #20]
 800ff62:	4313      	orrs	r3, r2
 800ff64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	68fa      	ldr	r2, [r7, #12]
 800ff6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ff6c:	683b      	ldr	r3, [r7, #0]
 800ff6e:	689a      	ldr	r2, [r3, #8]
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ff74:	683b      	ldr	r3, [r7, #0]
 800ff76:	681a      	ldr	r2, [r3, #0]
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	4a10      	ldr	r2, [pc, #64]	; (800ffc0 <TIM_Base_SetConfig+0x124>)
 800ff80:	4293      	cmp	r3, r2
 800ff82:	d00f      	beq.n	800ffa4 <TIM_Base_SetConfig+0x108>
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	4a12      	ldr	r2, [pc, #72]	; (800ffd0 <TIM_Base_SetConfig+0x134>)
 800ff88:	4293      	cmp	r3, r2
 800ff8a:	d00b      	beq.n	800ffa4 <TIM_Base_SetConfig+0x108>
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	4a11      	ldr	r2, [pc, #68]	; (800ffd4 <TIM_Base_SetConfig+0x138>)
 800ff90:	4293      	cmp	r3, r2
 800ff92:	d007      	beq.n	800ffa4 <TIM_Base_SetConfig+0x108>
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	4a10      	ldr	r2, [pc, #64]	; (800ffd8 <TIM_Base_SetConfig+0x13c>)
 800ff98:	4293      	cmp	r3, r2
 800ff9a:	d003      	beq.n	800ffa4 <TIM_Base_SetConfig+0x108>
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	4a0f      	ldr	r2, [pc, #60]	; (800ffdc <TIM_Base_SetConfig+0x140>)
 800ffa0:	4293      	cmp	r3, r2
 800ffa2:	d103      	bne.n	800ffac <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ffa4:	683b      	ldr	r3, [r7, #0]
 800ffa6:	691a      	ldr	r2, [r3, #16]
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	2201      	movs	r2, #1
 800ffb0:	615a      	str	r2, [r3, #20]
}
 800ffb2:	bf00      	nop
 800ffb4:	3714      	adds	r7, #20
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffbc:	4770      	bx	lr
 800ffbe:	bf00      	nop
 800ffc0:	40010000 	.word	0x40010000
 800ffc4:	40000400 	.word	0x40000400
 800ffc8:	40000800 	.word	0x40000800
 800ffcc:	40000c00 	.word	0x40000c00
 800ffd0:	40010400 	.word	0x40010400
 800ffd4:	40014000 	.word	0x40014000
 800ffd8:	40014400 	.word	0x40014400
 800ffdc:	40014800 	.word	0x40014800
 800ffe0:	4000e000 	.word	0x4000e000
 800ffe4:	4000e400 	.word	0x4000e400

0800ffe8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ffe8:	b480      	push	{r7}
 800ffea:	b087      	sub	sp, #28
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
 800fff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	6a1b      	ldr	r3, [r3, #32]
 800fff6:	f023 0201 	bic.w	r2, r3, #1
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	6a1b      	ldr	r3, [r3, #32]
 8010002:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	685b      	ldr	r3, [r3, #4]
 8010008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	699b      	ldr	r3, [r3, #24]
 801000e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010010:	68fa      	ldr	r2, [r7, #12]
 8010012:	4b37      	ldr	r3, [pc, #220]	; (80100f0 <TIM_OC1_SetConfig+0x108>)
 8010014:	4013      	ands	r3, r2
 8010016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	f023 0303 	bic.w	r3, r3, #3
 801001e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010020:	683b      	ldr	r3, [r7, #0]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	68fa      	ldr	r2, [r7, #12]
 8010026:	4313      	orrs	r3, r2
 8010028:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801002a:	697b      	ldr	r3, [r7, #20]
 801002c:	f023 0302 	bic.w	r3, r3, #2
 8010030:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010032:	683b      	ldr	r3, [r7, #0]
 8010034:	689b      	ldr	r3, [r3, #8]
 8010036:	697a      	ldr	r2, [r7, #20]
 8010038:	4313      	orrs	r3, r2
 801003a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	4a2d      	ldr	r2, [pc, #180]	; (80100f4 <TIM_OC1_SetConfig+0x10c>)
 8010040:	4293      	cmp	r3, r2
 8010042:	d00f      	beq.n	8010064 <TIM_OC1_SetConfig+0x7c>
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	4a2c      	ldr	r2, [pc, #176]	; (80100f8 <TIM_OC1_SetConfig+0x110>)
 8010048:	4293      	cmp	r3, r2
 801004a:	d00b      	beq.n	8010064 <TIM_OC1_SetConfig+0x7c>
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	4a2b      	ldr	r2, [pc, #172]	; (80100fc <TIM_OC1_SetConfig+0x114>)
 8010050:	4293      	cmp	r3, r2
 8010052:	d007      	beq.n	8010064 <TIM_OC1_SetConfig+0x7c>
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	4a2a      	ldr	r2, [pc, #168]	; (8010100 <TIM_OC1_SetConfig+0x118>)
 8010058:	4293      	cmp	r3, r2
 801005a:	d003      	beq.n	8010064 <TIM_OC1_SetConfig+0x7c>
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	4a29      	ldr	r2, [pc, #164]	; (8010104 <TIM_OC1_SetConfig+0x11c>)
 8010060:	4293      	cmp	r3, r2
 8010062:	d10c      	bne.n	801007e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010064:	697b      	ldr	r3, [r7, #20]
 8010066:	f023 0308 	bic.w	r3, r3, #8
 801006a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801006c:	683b      	ldr	r3, [r7, #0]
 801006e:	68db      	ldr	r3, [r3, #12]
 8010070:	697a      	ldr	r2, [r7, #20]
 8010072:	4313      	orrs	r3, r2
 8010074:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010076:	697b      	ldr	r3, [r7, #20]
 8010078:	f023 0304 	bic.w	r3, r3, #4
 801007c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	4a1c      	ldr	r2, [pc, #112]	; (80100f4 <TIM_OC1_SetConfig+0x10c>)
 8010082:	4293      	cmp	r3, r2
 8010084:	d00f      	beq.n	80100a6 <TIM_OC1_SetConfig+0xbe>
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	4a1b      	ldr	r2, [pc, #108]	; (80100f8 <TIM_OC1_SetConfig+0x110>)
 801008a:	4293      	cmp	r3, r2
 801008c:	d00b      	beq.n	80100a6 <TIM_OC1_SetConfig+0xbe>
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	4a1a      	ldr	r2, [pc, #104]	; (80100fc <TIM_OC1_SetConfig+0x114>)
 8010092:	4293      	cmp	r3, r2
 8010094:	d007      	beq.n	80100a6 <TIM_OC1_SetConfig+0xbe>
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	4a19      	ldr	r2, [pc, #100]	; (8010100 <TIM_OC1_SetConfig+0x118>)
 801009a:	4293      	cmp	r3, r2
 801009c:	d003      	beq.n	80100a6 <TIM_OC1_SetConfig+0xbe>
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	4a18      	ldr	r2, [pc, #96]	; (8010104 <TIM_OC1_SetConfig+0x11c>)
 80100a2:	4293      	cmp	r3, r2
 80100a4:	d111      	bne.n	80100ca <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80100a6:	693b      	ldr	r3, [r7, #16]
 80100a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80100ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80100ae:	693b      	ldr	r3, [r7, #16]
 80100b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80100b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80100b6:	683b      	ldr	r3, [r7, #0]
 80100b8:	695b      	ldr	r3, [r3, #20]
 80100ba:	693a      	ldr	r2, [r7, #16]
 80100bc:	4313      	orrs	r3, r2
 80100be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80100c0:	683b      	ldr	r3, [r7, #0]
 80100c2:	699b      	ldr	r3, [r3, #24]
 80100c4:	693a      	ldr	r2, [r7, #16]
 80100c6:	4313      	orrs	r3, r2
 80100c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	693a      	ldr	r2, [r7, #16]
 80100ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	68fa      	ldr	r2, [r7, #12]
 80100d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80100d6:	683b      	ldr	r3, [r7, #0]
 80100d8:	685a      	ldr	r2, [r3, #4]
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	697a      	ldr	r2, [r7, #20]
 80100e2:	621a      	str	r2, [r3, #32]
}
 80100e4:	bf00      	nop
 80100e6:	371c      	adds	r7, #28
 80100e8:	46bd      	mov	sp, r7
 80100ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ee:	4770      	bx	lr
 80100f0:	fffeff8f 	.word	0xfffeff8f
 80100f4:	40010000 	.word	0x40010000
 80100f8:	40010400 	.word	0x40010400
 80100fc:	40014000 	.word	0x40014000
 8010100:	40014400 	.word	0x40014400
 8010104:	40014800 	.word	0x40014800

08010108 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010108:	b480      	push	{r7}
 801010a:	b087      	sub	sp, #28
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
 8010110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	6a1b      	ldr	r3, [r3, #32]
 8010116:	f023 0210 	bic.w	r2, r3, #16
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	6a1b      	ldr	r3, [r3, #32]
 8010122:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	685b      	ldr	r3, [r3, #4]
 8010128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	699b      	ldr	r3, [r3, #24]
 801012e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010130:	68fa      	ldr	r2, [r7, #12]
 8010132:	4b34      	ldr	r3, [pc, #208]	; (8010204 <TIM_OC2_SetConfig+0xfc>)
 8010134:	4013      	ands	r3, r2
 8010136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801013e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010140:	683b      	ldr	r3, [r7, #0]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	021b      	lsls	r3, r3, #8
 8010146:	68fa      	ldr	r2, [r7, #12]
 8010148:	4313      	orrs	r3, r2
 801014a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801014c:	697b      	ldr	r3, [r7, #20]
 801014e:	f023 0320 	bic.w	r3, r3, #32
 8010152:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010154:	683b      	ldr	r3, [r7, #0]
 8010156:	689b      	ldr	r3, [r3, #8]
 8010158:	011b      	lsls	r3, r3, #4
 801015a:	697a      	ldr	r2, [r7, #20]
 801015c:	4313      	orrs	r3, r2
 801015e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	4a29      	ldr	r2, [pc, #164]	; (8010208 <TIM_OC2_SetConfig+0x100>)
 8010164:	4293      	cmp	r3, r2
 8010166:	d003      	beq.n	8010170 <TIM_OC2_SetConfig+0x68>
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	4a28      	ldr	r2, [pc, #160]	; (801020c <TIM_OC2_SetConfig+0x104>)
 801016c:	4293      	cmp	r3, r2
 801016e:	d10d      	bne.n	801018c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010170:	697b      	ldr	r3, [r7, #20]
 8010172:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010176:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010178:	683b      	ldr	r3, [r7, #0]
 801017a:	68db      	ldr	r3, [r3, #12]
 801017c:	011b      	lsls	r3, r3, #4
 801017e:	697a      	ldr	r2, [r7, #20]
 8010180:	4313      	orrs	r3, r2
 8010182:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010184:	697b      	ldr	r3, [r7, #20]
 8010186:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801018a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	4a1e      	ldr	r2, [pc, #120]	; (8010208 <TIM_OC2_SetConfig+0x100>)
 8010190:	4293      	cmp	r3, r2
 8010192:	d00f      	beq.n	80101b4 <TIM_OC2_SetConfig+0xac>
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	4a1d      	ldr	r2, [pc, #116]	; (801020c <TIM_OC2_SetConfig+0x104>)
 8010198:	4293      	cmp	r3, r2
 801019a:	d00b      	beq.n	80101b4 <TIM_OC2_SetConfig+0xac>
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	4a1c      	ldr	r2, [pc, #112]	; (8010210 <TIM_OC2_SetConfig+0x108>)
 80101a0:	4293      	cmp	r3, r2
 80101a2:	d007      	beq.n	80101b4 <TIM_OC2_SetConfig+0xac>
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	4a1b      	ldr	r2, [pc, #108]	; (8010214 <TIM_OC2_SetConfig+0x10c>)
 80101a8:	4293      	cmp	r3, r2
 80101aa:	d003      	beq.n	80101b4 <TIM_OC2_SetConfig+0xac>
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	4a1a      	ldr	r2, [pc, #104]	; (8010218 <TIM_OC2_SetConfig+0x110>)
 80101b0:	4293      	cmp	r3, r2
 80101b2:	d113      	bne.n	80101dc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80101b4:	693b      	ldr	r3, [r7, #16]
 80101b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80101ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80101bc:	693b      	ldr	r3, [r7, #16]
 80101be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80101c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80101c4:	683b      	ldr	r3, [r7, #0]
 80101c6:	695b      	ldr	r3, [r3, #20]
 80101c8:	009b      	lsls	r3, r3, #2
 80101ca:	693a      	ldr	r2, [r7, #16]
 80101cc:	4313      	orrs	r3, r2
 80101ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80101d0:	683b      	ldr	r3, [r7, #0]
 80101d2:	699b      	ldr	r3, [r3, #24]
 80101d4:	009b      	lsls	r3, r3, #2
 80101d6:	693a      	ldr	r2, [r7, #16]
 80101d8:	4313      	orrs	r3, r2
 80101da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	693a      	ldr	r2, [r7, #16]
 80101e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	68fa      	ldr	r2, [r7, #12]
 80101e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80101e8:	683b      	ldr	r3, [r7, #0]
 80101ea:	685a      	ldr	r2, [r3, #4]
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	697a      	ldr	r2, [r7, #20]
 80101f4:	621a      	str	r2, [r3, #32]
}
 80101f6:	bf00      	nop
 80101f8:	371c      	adds	r7, #28
 80101fa:	46bd      	mov	sp, r7
 80101fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010200:	4770      	bx	lr
 8010202:	bf00      	nop
 8010204:	feff8fff 	.word	0xfeff8fff
 8010208:	40010000 	.word	0x40010000
 801020c:	40010400 	.word	0x40010400
 8010210:	40014000 	.word	0x40014000
 8010214:	40014400 	.word	0x40014400
 8010218:	40014800 	.word	0x40014800

0801021c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801021c:	b480      	push	{r7}
 801021e:	b087      	sub	sp, #28
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
 8010224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	6a1b      	ldr	r3, [r3, #32]
 801022a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	6a1b      	ldr	r3, [r3, #32]
 8010236:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	685b      	ldr	r3, [r3, #4]
 801023c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	69db      	ldr	r3, [r3, #28]
 8010242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010244:	68fa      	ldr	r2, [r7, #12]
 8010246:	4b33      	ldr	r3, [pc, #204]	; (8010314 <TIM_OC3_SetConfig+0xf8>)
 8010248:	4013      	ands	r3, r2
 801024a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	f023 0303 	bic.w	r3, r3, #3
 8010252:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010254:	683b      	ldr	r3, [r7, #0]
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	68fa      	ldr	r2, [r7, #12]
 801025a:	4313      	orrs	r3, r2
 801025c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801025e:	697b      	ldr	r3, [r7, #20]
 8010260:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010264:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010266:	683b      	ldr	r3, [r7, #0]
 8010268:	689b      	ldr	r3, [r3, #8]
 801026a:	021b      	lsls	r3, r3, #8
 801026c:	697a      	ldr	r2, [r7, #20]
 801026e:	4313      	orrs	r3, r2
 8010270:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	4a28      	ldr	r2, [pc, #160]	; (8010318 <TIM_OC3_SetConfig+0xfc>)
 8010276:	4293      	cmp	r3, r2
 8010278:	d003      	beq.n	8010282 <TIM_OC3_SetConfig+0x66>
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	4a27      	ldr	r2, [pc, #156]	; (801031c <TIM_OC3_SetConfig+0x100>)
 801027e:	4293      	cmp	r3, r2
 8010280:	d10d      	bne.n	801029e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010282:	697b      	ldr	r3, [r7, #20]
 8010284:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010288:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	68db      	ldr	r3, [r3, #12]
 801028e:	021b      	lsls	r3, r3, #8
 8010290:	697a      	ldr	r2, [r7, #20]
 8010292:	4313      	orrs	r3, r2
 8010294:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010296:	697b      	ldr	r3, [r7, #20]
 8010298:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801029c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	4a1d      	ldr	r2, [pc, #116]	; (8010318 <TIM_OC3_SetConfig+0xfc>)
 80102a2:	4293      	cmp	r3, r2
 80102a4:	d00f      	beq.n	80102c6 <TIM_OC3_SetConfig+0xaa>
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	4a1c      	ldr	r2, [pc, #112]	; (801031c <TIM_OC3_SetConfig+0x100>)
 80102aa:	4293      	cmp	r3, r2
 80102ac:	d00b      	beq.n	80102c6 <TIM_OC3_SetConfig+0xaa>
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	4a1b      	ldr	r2, [pc, #108]	; (8010320 <TIM_OC3_SetConfig+0x104>)
 80102b2:	4293      	cmp	r3, r2
 80102b4:	d007      	beq.n	80102c6 <TIM_OC3_SetConfig+0xaa>
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	4a1a      	ldr	r2, [pc, #104]	; (8010324 <TIM_OC3_SetConfig+0x108>)
 80102ba:	4293      	cmp	r3, r2
 80102bc:	d003      	beq.n	80102c6 <TIM_OC3_SetConfig+0xaa>
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	4a19      	ldr	r2, [pc, #100]	; (8010328 <TIM_OC3_SetConfig+0x10c>)
 80102c2:	4293      	cmp	r3, r2
 80102c4:	d113      	bne.n	80102ee <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80102c6:	693b      	ldr	r3, [r7, #16]
 80102c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80102cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80102ce:	693b      	ldr	r3, [r7, #16]
 80102d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80102d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80102d6:	683b      	ldr	r3, [r7, #0]
 80102d8:	695b      	ldr	r3, [r3, #20]
 80102da:	011b      	lsls	r3, r3, #4
 80102dc:	693a      	ldr	r2, [r7, #16]
 80102de:	4313      	orrs	r3, r2
 80102e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80102e2:	683b      	ldr	r3, [r7, #0]
 80102e4:	699b      	ldr	r3, [r3, #24]
 80102e6:	011b      	lsls	r3, r3, #4
 80102e8:	693a      	ldr	r2, [r7, #16]
 80102ea:	4313      	orrs	r3, r2
 80102ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	693a      	ldr	r2, [r7, #16]
 80102f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	68fa      	ldr	r2, [r7, #12]
 80102f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80102fa:	683b      	ldr	r3, [r7, #0]
 80102fc:	685a      	ldr	r2, [r3, #4]
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	697a      	ldr	r2, [r7, #20]
 8010306:	621a      	str	r2, [r3, #32]
}
 8010308:	bf00      	nop
 801030a:	371c      	adds	r7, #28
 801030c:	46bd      	mov	sp, r7
 801030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010312:	4770      	bx	lr
 8010314:	fffeff8f 	.word	0xfffeff8f
 8010318:	40010000 	.word	0x40010000
 801031c:	40010400 	.word	0x40010400
 8010320:	40014000 	.word	0x40014000
 8010324:	40014400 	.word	0x40014400
 8010328:	40014800 	.word	0x40014800

0801032c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801032c:	b480      	push	{r7}
 801032e:	b087      	sub	sp, #28
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
 8010334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	6a1b      	ldr	r3, [r3, #32]
 801033a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	6a1b      	ldr	r3, [r3, #32]
 8010346:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	685b      	ldr	r3, [r3, #4]
 801034c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	69db      	ldr	r3, [r3, #28]
 8010352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010354:	68fa      	ldr	r2, [r7, #12]
 8010356:	4b24      	ldr	r3, [pc, #144]	; (80103e8 <TIM_OC4_SetConfig+0xbc>)
 8010358:	4013      	ands	r3, r2
 801035a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010362:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010364:	683b      	ldr	r3, [r7, #0]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	021b      	lsls	r3, r3, #8
 801036a:	68fa      	ldr	r2, [r7, #12]
 801036c:	4313      	orrs	r3, r2
 801036e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010370:	693b      	ldr	r3, [r7, #16]
 8010372:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010376:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010378:	683b      	ldr	r3, [r7, #0]
 801037a:	689b      	ldr	r3, [r3, #8]
 801037c:	031b      	lsls	r3, r3, #12
 801037e:	693a      	ldr	r2, [r7, #16]
 8010380:	4313      	orrs	r3, r2
 8010382:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	4a19      	ldr	r2, [pc, #100]	; (80103ec <TIM_OC4_SetConfig+0xc0>)
 8010388:	4293      	cmp	r3, r2
 801038a:	d00f      	beq.n	80103ac <TIM_OC4_SetConfig+0x80>
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	4a18      	ldr	r2, [pc, #96]	; (80103f0 <TIM_OC4_SetConfig+0xc4>)
 8010390:	4293      	cmp	r3, r2
 8010392:	d00b      	beq.n	80103ac <TIM_OC4_SetConfig+0x80>
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	4a17      	ldr	r2, [pc, #92]	; (80103f4 <TIM_OC4_SetConfig+0xc8>)
 8010398:	4293      	cmp	r3, r2
 801039a:	d007      	beq.n	80103ac <TIM_OC4_SetConfig+0x80>
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	4a16      	ldr	r2, [pc, #88]	; (80103f8 <TIM_OC4_SetConfig+0xcc>)
 80103a0:	4293      	cmp	r3, r2
 80103a2:	d003      	beq.n	80103ac <TIM_OC4_SetConfig+0x80>
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	4a15      	ldr	r2, [pc, #84]	; (80103fc <TIM_OC4_SetConfig+0xd0>)
 80103a8:	4293      	cmp	r3, r2
 80103aa:	d109      	bne.n	80103c0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80103ac:	697b      	ldr	r3, [r7, #20]
 80103ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80103b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80103b4:	683b      	ldr	r3, [r7, #0]
 80103b6:	695b      	ldr	r3, [r3, #20]
 80103b8:	019b      	lsls	r3, r3, #6
 80103ba:	697a      	ldr	r2, [r7, #20]
 80103bc:	4313      	orrs	r3, r2
 80103be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	697a      	ldr	r2, [r7, #20]
 80103c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	68fa      	ldr	r2, [r7, #12]
 80103ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80103cc:	683b      	ldr	r3, [r7, #0]
 80103ce:	685a      	ldr	r2, [r3, #4]
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	693a      	ldr	r2, [r7, #16]
 80103d8:	621a      	str	r2, [r3, #32]
}
 80103da:	bf00      	nop
 80103dc:	371c      	adds	r7, #28
 80103de:	46bd      	mov	sp, r7
 80103e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e4:	4770      	bx	lr
 80103e6:	bf00      	nop
 80103e8:	feff8fff 	.word	0xfeff8fff
 80103ec:	40010000 	.word	0x40010000
 80103f0:	40010400 	.word	0x40010400
 80103f4:	40014000 	.word	0x40014000
 80103f8:	40014400 	.word	0x40014400
 80103fc:	40014800 	.word	0x40014800

08010400 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010400:	b480      	push	{r7}
 8010402:	b087      	sub	sp, #28
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
 8010408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	6a1b      	ldr	r3, [r3, #32]
 801040e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	6a1b      	ldr	r3, [r3, #32]
 801041a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	685b      	ldr	r3, [r3, #4]
 8010420:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010428:	68fa      	ldr	r2, [r7, #12]
 801042a:	4b21      	ldr	r3, [pc, #132]	; (80104b0 <TIM_OC5_SetConfig+0xb0>)
 801042c:	4013      	ands	r3, r2
 801042e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010430:	683b      	ldr	r3, [r7, #0]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	68fa      	ldr	r2, [r7, #12]
 8010436:	4313      	orrs	r3, r2
 8010438:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801043a:	693b      	ldr	r3, [r7, #16]
 801043c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010440:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010442:	683b      	ldr	r3, [r7, #0]
 8010444:	689b      	ldr	r3, [r3, #8]
 8010446:	041b      	lsls	r3, r3, #16
 8010448:	693a      	ldr	r2, [r7, #16]
 801044a:	4313      	orrs	r3, r2
 801044c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	4a18      	ldr	r2, [pc, #96]	; (80104b4 <TIM_OC5_SetConfig+0xb4>)
 8010452:	4293      	cmp	r3, r2
 8010454:	d00f      	beq.n	8010476 <TIM_OC5_SetConfig+0x76>
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	4a17      	ldr	r2, [pc, #92]	; (80104b8 <TIM_OC5_SetConfig+0xb8>)
 801045a:	4293      	cmp	r3, r2
 801045c:	d00b      	beq.n	8010476 <TIM_OC5_SetConfig+0x76>
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	4a16      	ldr	r2, [pc, #88]	; (80104bc <TIM_OC5_SetConfig+0xbc>)
 8010462:	4293      	cmp	r3, r2
 8010464:	d007      	beq.n	8010476 <TIM_OC5_SetConfig+0x76>
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	4a15      	ldr	r2, [pc, #84]	; (80104c0 <TIM_OC5_SetConfig+0xc0>)
 801046a:	4293      	cmp	r3, r2
 801046c:	d003      	beq.n	8010476 <TIM_OC5_SetConfig+0x76>
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	4a14      	ldr	r2, [pc, #80]	; (80104c4 <TIM_OC5_SetConfig+0xc4>)
 8010472:	4293      	cmp	r3, r2
 8010474:	d109      	bne.n	801048a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010476:	697b      	ldr	r3, [r7, #20]
 8010478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801047c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801047e:	683b      	ldr	r3, [r7, #0]
 8010480:	695b      	ldr	r3, [r3, #20]
 8010482:	021b      	lsls	r3, r3, #8
 8010484:	697a      	ldr	r2, [r7, #20]
 8010486:	4313      	orrs	r3, r2
 8010488:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	697a      	ldr	r2, [r7, #20]
 801048e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	68fa      	ldr	r2, [r7, #12]
 8010494:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8010496:	683b      	ldr	r3, [r7, #0]
 8010498:	685a      	ldr	r2, [r3, #4]
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	693a      	ldr	r2, [r7, #16]
 80104a2:	621a      	str	r2, [r3, #32]
}
 80104a4:	bf00      	nop
 80104a6:	371c      	adds	r7, #28
 80104a8:	46bd      	mov	sp, r7
 80104aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ae:	4770      	bx	lr
 80104b0:	fffeff8f 	.word	0xfffeff8f
 80104b4:	40010000 	.word	0x40010000
 80104b8:	40010400 	.word	0x40010400
 80104bc:	40014000 	.word	0x40014000
 80104c0:	40014400 	.word	0x40014400
 80104c4:	40014800 	.word	0x40014800

080104c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80104c8:	b480      	push	{r7}
 80104ca:	b087      	sub	sp, #28
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]
 80104d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	6a1b      	ldr	r3, [r3, #32]
 80104d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	6a1b      	ldr	r3, [r3, #32]
 80104e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	685b      	ldr	r3, [r3, #4]
 80104e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80104ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80104f0:	68fa      	ldr	r2, [r7, #12]
 80104f2:	4b22      	ldr	r3, [pc, #136]	; (801057c <TIM_OC6_SetConfig+0xb4>)
 80104f4:	4013      	ands	r3, r2
 80104f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80104f8:	683b      	ldr	r3, [r7, #0]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	021b      	lsls	r3, r3, #8
 80104fe:	68fa      	ldr	r2, [r7, #12]
 8010500:	4313      	orrs	r3, r2
 8010502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010504:	693b      	ldr	r3, [r7, #16]
 8010506:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801050a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801050c:	683b      	ldr	r3, [r7, #0]
 801050e:	689b      	ldr	r3, [r3, #8]
 8010510:	051b      	lsls	r3, r3, #20
 8010512:	693a      	ldr	r2, [r7, #16]
 8010514:	4313      	orrs	r3, r2
 8010516:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	4a19      	ldr	r2, [pc, #100]	; (8010580 <TIM_OC6_SetConfig+0xb8>)
 801051c:	4293      	cmp	r3, r2
 801051e:	d00f      	beq.n	8010540 <TIM_OC6_SetConfig+0x78>
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	4a18      	ldr	r2, [pc, #96]	; (8010584 <TIM_OC6_SetConfig+0xbc>)
 8010524:	4293      	cmp	r3, r2
 8010526:	d00b      	beq.n	8010540 <TIM_OC6_SetConfig+0x78>
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	4a17      	ldr	r2, [pc, #92]	; (8010588 <TIM_OC6_SetConfig+0xc0>)
 801052c:	4293      	cmp	r3, r2
 801052e:	d007      	beq.n	8010540 <TIM_OC6_SetConfig+0x78>
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	4a16      	ldr	r2, [pc, #88]	; (801058c <TIM_OC6_SetConfig+0xc4>)
 8010534:	4293      	cmp	r3, r2
 8010536:	d003      	beq.n	8010540 <TIM_OC6_SetConfig+0x78>
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	4a15      	ldr	r2, [pc, #84]	; (8010590 <TIM_OC6_SetConfig+0xc8>)
 801053c:	4293      	cmp	r3, r2
 801053e:	d109      	bne.n	8010554 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010540:	697b      	ldr	r3, [r7, #20]
 8010542:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010546:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010548:	683b      	ldr	r3, [r7, #0]
 801054a:	695b      	ldr	r3, [r3, #20]
 801054c:	029b      	lsls	r3, r3, #10
 801054e:	697a      	ldr	r2, [r7, #20]
 8010550:	4313      	orrs	r3, r2
 8010552:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	697a      	ldr	r2, [r7, #20]
 8010558:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	68fa      	ldr	r2, [r7, #12]
 801055e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010560:	683b      	ldr	r3, [r7, #0]
 8010562:	685a      	ldr	r2, [r3, #4]
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	693a      	ldr	r2, [r7, #16]
 801056c:	621a      	str	r2, [r3, #32]
}
 801056e:	bf00      	nop
 8010570:	371c      	adds	r7, #28
 8010572:	46bd      	mov	sp, r7
 8010574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010578:	4770      	bx	lr
 801057a:	bf00      	nop
 801057c:	feff8fff 	.word	0xfeff8fff
 8010580:	40010000 	.word	0x40010000
 8010584:	40010400 	.word	0x40010400
 8010588:	40014000 	.word	0x40014000
 801058c:	40014400 	.word	0x40014400
 8010590:	40014800 	.word	0x40014800

08010594 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010594:	b480      	push	{r7}
 8010596:	b087      	sub	sp, #28
 8010598:	af00      	add	r7, sp, #0
 801059a:	60f8      	str	r0, [r7, #12]
 801059c:	60b9      	str	r1, [r7, #8]
 801059e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80105a0:	68bb      	ldr	r3, [r7, #8]
 80105a2:	f003 031f 	and.w	r3, r3, #31
 80105a6:	2201      	movs	r2, #1
 80105a8:	fa02 f303 	lsl.w	r3, r2, r3
 80105ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	6a1a      	ldr	r2, [r3, #32]
 80105b2:	697b      	ldr	r3, [r7, #20]
 80105b4:	43db      	mvns	r3, r3
 80105b6:	401a      	ands	r2, r3
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	6a1a      	ldr	r2, [r3, #32]
 80105c0:	68bb      	ldr	r3, [r7, #8]
 80105c2:	f003 031f 	and.w	r3, r3, #31
 80105c6:	6879      	ldr	r1, [r7, #4]
 80105c8:	fa01 f303 	lsl.w	r3, r1, r3
 80105cc:	431a      	orrs	r2, r3
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	621a      	str	r2, [r3, #32]
}
 80105d2:	bf00      	nop
 80105d4:	371c      	adds	r7, #28
 80105d6:	46bd      	mov	sp, r7
 80105d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105dc:	4770      	bx	lr
	...

080105e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80105e0:	b480      	push	{r7}
 80105e2:	b085      	sub	sp, #20
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
 80105e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80105f0:	2b01      	cmp	r3, #1
 80105f2:	d101      	bne.n	80105f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80105f4:	2302      	movs	r3, #2
 80105f6:	e077      	b.n	80106e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	2201      	movs	r2, #1
 80105fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	2202      	movs	r2, #2
 8010604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	685b      	ldr	r3, [r3, #4]
 801060e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	689b      	ldr	r3, [r3, #8]
 8010616:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	4a35      	ldr	r2, [pc, #212]	; (80106f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801061e:	4293      	cmp	r3, r2
 8010620:	d004      	beq.n	801062c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	4a34      	ldr	r2, [pc, #208]	; (80106f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010628:	4293      	cmp	r3, r2
 801062a:	d108      	bne.n	801063e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010632:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010634:	683b      	ldr	r3, [r7, #0]
 8010636:	685b      	ldr	r3, [r3, #4]
 8010638:	68fa      	ldr	r2, [r7, #12]
 801063a:	4313      	orrs	r3, r2
 801063c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010644:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010646:	683b      	ldr	r3, [r7, #0]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	68fa      	ldr	r2, [r7, #12]
 801064c:	4313      	orrs	r3, r2
 801064e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	68fa      	ldr	r2, [r7, #12]
 8010656:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	4a25      	ldr	r2, [pc, #148]	; (80106f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801065e:	4293      	cmp	r3, r2
 8010660:	d02c      	beq.n	80106bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801066a:	d027      	beq.n	80106bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	4a22      	ldr	r2, [pc, #136]	; (80106fc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8010672:	4293      	cmp	r3, r2
 8010674:	d022      	beq.n	80106bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	4a21      	ldr	r2, [pc, #132]	; (8010700 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 801067c:	4293      	cmp	r3, r2
 801067e:	d01d      	beq.n	80106bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	4a1f      	ldr	r2, [pc, #124]	; (8010704 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8010686:	4293      	cmp	r3, r2
 8010688:	d018      	beq.n	80106bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	4a1a      	ldr	r2, [pc, #104]	; (80106f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010690:	4293      	cmp	r3, r2
 8010692:	d013      	beq.n	80106bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	4a1b      	ldr	r2, [pc, #108]	; (8010708 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 801069a:	4293      	cmp	r3, r2
 801069c:	d00e      	beq.n	80106bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	4a1a      	ldr	r2, [pc, #104]	; (801070c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80106a4:	4293      	cmp	r3, r2
 80106a6:	d009      	beq.n	80106bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	4a18      	ldr	r2, [pc, #96]	; (8010710 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80106ae:	4293      	cmp	r3, r2
 80106b0:	d004      	beq.n	80106bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	4a17      	ldr	r2, [pc, #92]	; (8010714 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80106b8:	4293      	cmp	r3, r2
 80106ba:	d10c      	bne.n	80106d6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80106bc:	68bb      	ldr	r3, [r7, #8]
 80106be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80106c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80106c4:	683b      	ldr	r3, [r7, #0]
 80106c6:	689b      	ldr	r3, [r3, #8]
 80106c8:	68ba      	ldr	r2, [r7, #8]
 80106ca:	4313      	orrs	r3, r2
 80106cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	68ba      	ldr	r2, [r7, #8]
 80106d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	2201      	movs	r2, #1
 80106da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	2200      	movs	r2, #0
 80106e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80106e6:	2300      	movs	r3, #0
}
 80106e8:	4618      	mov	r0, r3
 80106ea:	3714      	adds	r7, #20
 80106ec:	46bd      	mov	sp, r7
 80106ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f2:	4770      	bx	lr
 80106f4:	40010000 	.word	0x40010000
 80106f8:	40010400 	.word	0x40010400
 80106fc:	40000400 	.word	0x40000400
 8010700:	40000800 	.word	0x40000800
 8010704:	40000c00 	.word	0x40000c00
 8010708:	40001800 	.word	0x40001800
 801070c:	40014000 	.word	0x40014000
 8010710:	4000e000 	.word	0x4000e000
 8010714:	4000e400 	.word	0x4000e400

08010718 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010718:	b480      	push	{r7}
 801071a:	b083      	sub	sp, #12
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010720:	bf00      	nop
 8010722:	370c      	adds	r7, #12
 8010724:	46bd      	mov	sp, r7
 8010726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072a:	4770      	bx	lr

0801072c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801072c:	b480      	push	{r7}
 801072e:	b083      	sub	sp, #12
 8010730:	af00      	add	r7, sp, #0
 8010732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010734:	bf00      	nop
 8010736:	370c      	adds	r7, #12
 8010738:	46bd      	mov	sp, r7
 801073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073e:	4770      	bx	lr

08010740 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010740:	b480      	push	{r7}
 8010742:	b083      	sub	sp, #12
 8010744:	af00      	add	r7, sp, #0
 8010746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010748:	bf00      	nop
 801074a:	370c      	adds	r7, #12
 801074c:	46bd      	mov	sp, r7
 801074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010752:	4770      	bx	lr

08010754 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010754:	b580      	push	{r7, lr}
 8010756:	b082      	sub	sp, #8
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2b00      	cmp	r3, #0
 8010760:	d101      	bne.n	8010766 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010762:	2301      	movs	r3, #1
 8010764:	e042      	b.n	80107ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801076c:	2b00      	cmp	r3, #0
 801076e:	d106      	bne.n	801077e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	2200      	movs	r2, #0
 8010774:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010778:	6878      	ldr	r0, [r7, #4]
 801077a:	f7f2 fd4f 	bl	800321c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	2224      	movs	r2, #36	; 0x24
 8010782:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	681a      	ldr	r2, [r3, #0]
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	f022 0201 	bic.w	r2, r2, #1
 8010794:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010796:	6878      	ldr	r0, [r7, #4]
 8010798:	f000 f82c 	bl	80107f4 <UART_SetConfig>
 801079c:	4603      	mov	r3, r0
 801079e:	2b01      	cmp	r3, #1
 80107a0:	d101      	bne.n	80107a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80107a2:	2301      	movs	r3, #1
 80107a4:	e022      	b.n	80107ec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d002      	beq.n	80107b4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80107ae:	6878      	ldr	r0, [r7, #4]
 80107b0:	f000 fe8c 	bl	80114cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	685a      	ldr	r2, [r3, #4]
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80107c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	689a      	ldr	r2, [r3, #8]
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80107d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	681a      	ldr	r2, [r3, #0]
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	f042 0201 	orr.w	r2, r2, #1
 80107e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80107e4:	6878      	ldr	r0, [r7, #4]
 80107e6:	f000 ff13 	bl	8011610 <UART_CheckIdleState>
 80107ea:	4603      	mov	r3, r0
}
 80107ec:	4618      	mov	r0, r3
 80107ee:	3708      	adds	r7, #8
 80107f0:	46bd      	mov	sp, r7
 80107f2:	bd80      	pop	{r7, pc}

080107f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80107f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80107f8:	b092      	sub	sp, #72	; 0x48
 80107fa:	af00      	add	r7, sp, #0
 80107fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80107fe:	2300      	movs	r3, #0
 8010800:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010804:	697b      	ldr	r3, [r7, #20]
 8010806:	689a      	ldr	r2, [r3, #8]
 8010808:	697b      	ldr	r3, [r7, #20]
 801080a:	691b      	ldr	r3, [r3, #16]
 801080c:	431a      	orrs	r2, r3
 801080e:	697b      	ldr	r3, [r7, #20]
 8010810:	695b      	ldr	r3, [r3, #20]
 8010812:	431a      	orrs	r2, r3
 8010814:	697b      	ldr	r3, [r7, #20]
 8010816:	69db      	ldr	r3, [r3, #28]
 8010818:	4313      	orrs	r3, r2
 801081a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801081c:	697b      	ldr	r3, [r7, #20]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	681a      	ldr	r2, [r3, #0]
 8010822:	4bbe      	ldr	r3, [pc, #760]	; (8010b1c <UART_SetConfig+0x328>)
 8010824:	4013      	ands	r3, r2
 8010826:	697a      	ldr	r2, [r7, #20]
 8010828:	6812      	ldr	r2, [r2, #0]
 801082a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801082c:	430b      	orrs	r3, r1
 801082e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010830:	697b      	ldr	r3, [r7, #20]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	685b      	ldr	r3, [r3, #4]
 8010836:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801083a:	697b      	ldr	r3, [r7, #20]
 801083c:	68da      	ldr	r2, [r3, #12]
 801083e:	697b      	ldr	r3, [r7, #20]
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	430a      	orrs	r2, r1
 8010844:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010846:	697b      	ldr	r3, [r7, #20]
 8010848:	699b      	ldr	r3, [r3, #24]
 801084a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801084c:	697b      	ldr	r3, [r7, #20]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	4ab3      	ldr	r2, [pc, #716]	; (8010b20 <UART_SetConfig+0x32c>)
 8010852:	4293      	cmp	r3, r2
 8010854:	d004      	beq.n	8010860 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010856:	697b      	ldr	r3, [r7, #20]
 8010858:	6a1b      	ldr	r3, [r3, #32]
 801085a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801085c:	4313      	orrs	r3, r2
 801085e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010860:	697b      	ldr	r3, [r7, #20]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	689a      	ldr	r2, [r3, #8]
 8010866:	4baf      	ldr	r3, [pc, #700]	; (8010b24 <UART_SetConfig+0x330>)
 8010868:	4013      	ands	r3, r2
 801086a:	697a      	ldr	r2, [r7, #20]
 801086c:	6812      	ldr	r2, [r2, #0]
 801086e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010870:	430b      	orrs	r3, r1
 8010872:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010874:	697b      	ldr	r3, [r7, #20]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801087a:	f023 010f 	bic.w	r1, r3, #15
 801087e:	697b      	ldr	r3, [r7, #20]
 8010880:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010882:	697b      	ldr	r3, [r7, #20]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	430a      	orrs	r2, r1
 8010888:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801088a:	697b      	ldr	r3, [r7, #20]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	4aa6      	ldr	r2, [pc, #664]	; (8010b28 <UART_SetConfig+0x334>)
 8010890:	4293      	cmp	r3, r2
 8010892:	d177      	bne.n	8010984 <UART_SetConfig+0x190>
 8010894:	4ba5      	ldr	r3, [pc, #660]	; (8010b2c <UART_SetConfig+0x338>)
 8010896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010898:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801089c:	2b28      	cmp	r3, #40	; 0x28
 801089e:	d86d      	bhi.n	801097c <UART_SetConfig+0x188>
 80108a0:	a201      	add	r2, pc, #4	; (adr r2, 80108a8 <UART_SetConfig+0xb4>)
 80108a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108a6:	bf00      	nop
 80108a8:	0801094d 	.word	0x0801094d
 80108ac:	0801097d 	.word	0x0801097d
 80108b0:	0801097d 	.word	0x0801097d
 80108b4:	0801097d 	.word	0x0801097d
 80108b8:	0801097d 	.word	0x0801097d
 80108bc:	0801097d 	.word	0x0801097d
 80108c0:	0801097d 	.word	0x0801097d
 80108c4:	0801097d 	.word	0x0801097d
 80108c8:	08010955 	.word	0x08010955
 80108cc:	0801097d 	.word	0x0801097d
 80108d0:	0801097d 	.word	0x0801097d
 80108d4:	0801097d 	.word	0x0801097d
 80108d8:	0801097d 	.word	0x0801097d
 80108dc:	0801097d 	.word	0x0801097d
 80108e0:	0801097d 	.word	0x0801097d
 80108e4:	0801097d 	.word	0x0801097d
 80108e8:	0801095d 	.word	0x0801095d
 80108ec:	0801097d 	.word	0x0801097d
 80108f0:	0801097d 	.word	0x0801097d
 80108f4:	0801097d 	.word	0x0801097d
 80108f8:	0801097d 	.word	0x0801097d
 80108fc:	0801097d 	.word	0x0801097d
 8010900:	0801097d 	.word	0x0801097d
 8010904:	0801097d 	.word	0x0801097d
 8010908:	08010965 	.word	0x08010965
 801090c:	0801097d 	.word	0x0801097d
 8010910:	0801097d 	.word	0x0801097d
 8010914:	0801097d 	.word	0x0801097d
 8010918:	0801097d 	.word	0x0801097d
 801091c:	0801097d 	.word	0x0801097d
 8010920:	0801097d 	.word	0x0801097d
 8010924:	0801097d 	.word	0x0801097d
 8010928:	0801096d 	.word	0x0801096d
 801092c:	0801097d 	.word	0x0801097d
 8010930:	0801097d 	.word	0x0801097d
 8010934:	0801097d 	.word	0x0801097d
 8010938:	0801097d 	.word	0x0801097d
 801093c:	0801097d 	.word	0x0801097d
 8010940:	0801097d 	.word	0x0801097d
 8010944:	0801097d 	.word	0x0801097d
 8010948:	08010975 	.word	0x08010975
 801094c:	2301      	movs	r3, #1
 801094e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010952:	e326      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010954:	2304      	movs	r3, #4
 8010956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801095a:	e322      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 801095c:	2308      	movs	r3, #8
 801095e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010962:	e31e      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010964:	2310      	movs	r3, #16
 8010966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801096a:	e31a      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 801096c:	2320      	movs	r3, #32
 801096e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010972:	e316      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010974:	2340      	movs	r3, #64	; 0x40
 8010976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801097a:	e312      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 801097c:	2380      	movs	r3, #128	; 0x80
 801097e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010982:	e30e      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010984:	697b      	ldr	r3, [r7, #20]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	4a69      	ldr	r2, [pc, #420]	; (8010b30 <UART_SetConfig+0x33c>)
 801098a:	4293      	cmp	r3, r2
 801098c:	d130      	bne.n	80109f0 <UART_SetConfig+0x1fc>
 801098e:	4b67      	ldr	r3, [pc, #412]	; (8010b2c <UART_SetConfig+0x338>)
 8010990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010992:	f003 0307 	and.w	r3, r3, #7
 8010996:	2b05      	cmp	r3, #5
 8010998:	d826      	bhi.n	80109e8 <UART_SetConfig+0x1f4>
 801099a:	a201      	add	r2, pc, #4	; (adr r2, 80109a0 <UART_SetConfig+0x1ac>)
 801099c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109a0:	080109b9 	.word	0x080109b9
 80109a4:	080109c1 	.word	0x080109c1
 80109a8:	080109c9 	.word	0x080109c9
 80109ac:	080109d1 	.word	0x080109d1
 80109b0:	080109d9 	.word	0x080109d9
 80109b4:	080109e1 	.word	0x080109e1
 80109b8:	2300      	movs	r3, #0
 80109ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109be:	e2f0      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 80109c0:	2304      	movs	r3, #4
 80109c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109c6:	e2ec      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 80109c8:	2308      	movs	r3, #8
 80109ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109ce:	e2e8      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 80109d0:	2310      	movs	r3, #16
 80109d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109d6:	e2e4      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 80109d8:	2320      	movs	r3, #32
 80109da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109de:	e2e0      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 80109e0:	2340      	movs	r3, #64	; 0x40
 80109e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109e6:	e2dc      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 80109e8:	2380      	movs	r3, #128	; 0x80
 80109ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109ee:	e2d8      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 80109f0:	697b      	ldr	r3, [r7, #20]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	4a4f      	ldr	r2, [pc, #316]	; (8010b34 <UART_SetConfig+0x340>)
 80109f6:	4293      	cmp	r3, r2
 80109f8:	d130      	bne.n	8010a5c <UART_SetConfig+0x268>
 80109fa:	4b4c      	ldr	r3, [pc, #304]	; (8010b2c <UART_SetConfig+0x338>)
 80109fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109fe:	f003 0307 	and.w	r3, r3, #7
 8010a02:	2b05      	cmp	r3, #5
 8010a04:	d826      	bhi.n	8010a54 <UART_SetConfig+0x260>
 8010a06:	a201      	add	r2, pc, #4	; (adr r2, 8010a0c <UART_SetConfig+0x218>)
 8010a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a0c:	08010a25 	.word	0x08010a25
 8010a10:	08010a2d 	.word	0x08010a2d
 8010a14:	08010a35 	.word	0x08010a35
 8010a18:	08010a3d 	.word	0x08010a3d
 8010a1c:	08010a45 	.word	0x08010a45
 8010a20:	08010a4d 	.word	0x08010a4d
 8010a24:	2300      	movs	r3, #0
 8010a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a2a:	e2ba      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010a2c:	2304      	movs	r3, #4
 8010a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a32:	e2b6      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010a34:	2308      	movs	r3, #8
 8010a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a3a:	e2b2      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010a3c:	2310      	movs	r3, #16
 8010a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a42:	e2ae      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010a44:	2320      	movs	r3, #32
 8010a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a4a:	e2aa      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010a4c:	2340      	movs	r3, #64	; 0x40
 8010a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a52:	e2a6      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010a54:	2380      	movs	r3, #128	; 0x80
 8010a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a5a:	e2a2      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010a5c:	697b      	ldr	r3, [r7, #20]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	4a35      	ldr	r2, [pc, #212]	; (8010b38 <UART_SetConfig+0x344>)
 8010a62:	4293      	cmp	r3, r2
 8010a64:	d130      	bne.n	8010ac8 <UART_SetConfig+0x2d4>
 8010a66:	4b31      	ldr	r3, [pc, #196]	; (8010b2c <UART_SetConfig+0x338>)
 8010a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a6a:	f003 0307 	and.w	r3, r3, #7
 8010a6e:	2b05      	cmp	r3, #5
 8010a70:	d826      	bhi.n	8010ac0 <UART_SetConfig+0x2cc>
 8010a72:	a201      	add	r2, pc, #4	; (adr r2, 8010a78 <UART_SetConfig+0x284>)
 8010a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a78:	08010a91 	.word	0x08010a91
 8010a7c:	08010a99 	.word	0x08010a99
 8010a80:	08010aa1 	.word	0x08010aa1
 8010a84:	08010aa9 	.word	0x08010aa9
 8010a88:	08010ab1 	.word	0x08010ab1
 8010a8c:	08010ab9 	.word	0x08010ab9
 8010a90:	2300      	movs	r3, #0
 8010a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a96:	e284      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010a98:	2304      	movs	r3, #4
 8010a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a9e:	e280      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010aa0:	2308      	movs	r3, #8
 8010aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010aa6:	e27c      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010aa8:	2310      	movs	r3, #16
 8010aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010aae:	e278      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010ab0:	2320      	movs	r3, #32
 8010ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ab6:	e274      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010ab8:	2340      	movs	r3, #64	; 0x40
 8010aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010abe:	e270      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010ac0:	2380      	movs	r3, #128	; 0x80
 8010ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ac6:	e26c      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010ac8:	697b      	ldr	r3, [r7, #20]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	4a1b      	ldr	r2, [pc, #108]	; (8010b3c <UART_SetConfig+0x348>)
 8010ace:	4293      	cmp	r3, r2
 8010ad0:	d142      	bne.n	8010b58 <UART_SetConfig+0x364>
 8010ad2:	4b16      	ldr	r3, [pc, #88]	; (8010b2c <UART_SetConfig+0x338>)
 8010ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ad6:	f003 0307 	and.w	r3, r3, #7
 8010ada:	2b05      	cmp	r3, #5
 8010adc:	d838      	bhi.n	8010b50 <UART_SetConfig+0x35c>
 8010ade:	a201      	add	r2, pc, #4	; (adr r2, 8010ae4 <UART_SetConfig+0x2f0>)
 8010ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ae4:	08010afd 	.word	0x08010afd
 8010ae8:	08010b05 	.word	0x08010b05
 8010aec:	08010b0d 	.word	0x08010b0d
 8010af0:	08010b15 	.word	0x08010b15
 8010af4:	08010b41 	.word	0x08010b41
 8010af8:	08010b49 	.word	0x08010b49
 8010afc:	2300      	movs	r3, #0
 8010afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b02:	e24e      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010b04:	2304      	movs	r3, #4
 8010b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b0a:	e24a      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010b0c:	2308      	movs	r3, #8
 8010b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b12:	e246      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010b14:	2310      	movs	r3, #16
 8010b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b1a:	e242      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010b1c:	cfff69f3 	.word	0xcfff69f3
 8010b20:	58000c00 	.word	0x58000c00
 8010b24:	11fff4ff 	.word	0x11fff4ff
 8010b28:	40011000 	.word	0x40011000
 8010b2c:	58024400 	.word	0x58024400
 8010b30:	40004400 	.word	0x40004400
 8010b34:	40004800 	.word	0x40004800
 8010b38:	40004c00 	.word	0x40004c00
 8010b3c:	40005000 	.word	0x40005000
 8010b40:	2320      	movs	r3, #32
 8010b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b46:	e22c      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010b48:	2340      	movs	r3, #64	; 0x40
 8010b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b4e:	e228      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010b50:	2380      	movs	r3, #128	; 0x80
 8010b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b56:	e224      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010b58:	697b      	ldr	r3, [r7, #20]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	4ab1      	ldr	r2, [pc, #708]	; (8010e24 <UART_SetConfig+0x630>)
 8010b5e:	4293      	cmp	r3, r2
 8010b60:	d176      	bne.n	8010c50 <UART_SetConfig+0x45c>
 8010b62:	4bb1      	ldr	r3, [pc, #708]	; (8010e28 <UART_SetConfig+0x634>)
 8010b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010b6a:	2b28      	cmp	r3, #40	; 0x28
 8010b6c:	d86c      	bhi.n	8010c48 <UART_SetConfig+0x454>
 8010b6e:	a201      	add	r2, pc, #4	; (adr r2, 8010b74 <UART_SetConfig+0x380>)
 8010b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b74:	08010c19 	.word	0x08010c19
 8010b78:	08010c49 	.word	0x08010c49
 8010b7c:	08010c49 	.word	0x08010c49
 8010b80:	08010c49 	.word	0x08010c49
 8010b84:	08010c49 	.word	0x08010c49
 8010b88:	08010c49 	.word	0x08010c49
 8010b8c:	08010c49 	.word	0x08010c49
 8010b90:	08010c49 	.word	0x08010c49
 8010b94:	08010c21 	.word	0x08010c21
 8010b98:	08010c49 	.word	0x08010c49
 8010b9c:	08010c49 	.word	0x08010c49
 8010ba0:	08010c49 	.word	0x08010c49
 8010ba4:	08010c49 	.word	0x08010c49
 8010ba8:	08010c49 	.word	0x08010c49
 8010bac:	08010c49 	.word	0x08010c49
 8010bb0:	08010c49 	.word	0x08010c49
 8010bb4:	08010c29 	.word	0x08010c29
 8010bb8:	08010c49 	.word	0x08010c49
 8010bbc:	08010c49 	.word	0x08010c49
 8010bc0:	08010c49 	.word	0x08010c49
 8010bc4:	08010c49 	.word	0x08010c49
 8010bc8:	08010c49 	.word	0x08010c49
 8010bcc:	08010c49 	.word	0x08010c49
 8010bd0:	08010c49 	.word	0x08010c49
 8010bd4:	08010c31 	.word	0x08010c31
 8010bd8:	08010c49 	.word	0x08010c49
 8010bdc:	08010c49 	.word	0x08010c49
 8010be0:	08010c49 	.word	0x08010c49
 8010be4:	08010c49 	.word	0x08010c49
 8010be8:	08010c49 	.word	0x08010c49
 8010bec:	08010c49 	.word	0x08010c49
 8010bf0:	08010c49 	.word	0x08010c49
 8010bf4:	08010c39 	.word	0x08010c39
 8010bf8:	08010c49 	.word	0x08010c49
 8010bfc:	08010c49 	.word	0x08010c49
 8010c00:	08010c49 	.word	0x08010c49
 8010c04:	08010c49 	.word	0x08010c49
 8010c08:	08010c49 	.word	0x08010c49
 8010c0c:	08010c49 	.word	0x08010c49
 8010c10:	08010c49 	.word	0x08010c49
 8010c14:	08010c41 	.word	0x08010c41
 8010c18:	2301      	movs	r3, #1
 8010c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c1e:	e1c0      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010c20:	2304      	movs	r3, #4
 8010c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c26:	e1bc      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010c28:	2308      	movs	r3, #8
 8010c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c2e:	e1b8      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010c30:	2310      	movs	r3, #16
 8010c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c36:	e1b4      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010c38:	2320      	movs	r3, #32
 8010c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c3e:	e1b0      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010c40:	2340      	movs	r3, #64	; 0x40
 8010c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c46:	e1ac      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010c48:	2380      	movs	r3, #128	; 0x80
 8010c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c4e:	e1a8      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010c50:	697b      	ldr	r3, [r7, #20]
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	4a75      	ldr	r2, [pc, #468]	; (8010e2c <UART_SetConfig+0x638>)
 8010c56:	4293      	cmp	r3, r2
 8010c58:	d130      	bne.n	8010cbc <UART_SetConfig+0x4c8>
 8010c5a:	4b73      	ldr	r3, [pc, #460]	; (8010e28 <UART_SetConfig+0x634>)
 8010c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c5e:	f003 0307 	and.w	r3, r3, #7
 8010c62:	2b05      	cmp	r3, #5
 8010c64:	d826      	bhi.n	8010cb4 <UART_SetConfig+0x4c0>
 8010c66:	a201      	add	r2, pc, #4	; (adr r2, 8010c6c <UART_SetConfig+0x478>)
 8010c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c6c:	08010c85 	.word	0x08010c85
 8010c70:	08010c8d 	.word	0x08010c8d
 8010c74:	08010c95 	.word	0x08010c95
 8010c78:	08010c9d 	.word	0x08010c9d
 8010c7c:	08010ca5 	.word	0x08010ca5
 8010c80:	08010cad 	.word	0x08010cad
 8010c84:	2300      	movs	r3, #0
 8010c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c8a:	e18a      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010c8c:	2304      	movs	r3, #4
 8010c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c92:	e186      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010c94:	2308      	movs	r3, #8
 8010c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c9a:	e182      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010c9c:	2310      	movs	r3, #16
 8010c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ca2:	e17e      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010ca4:	2320      	movs	r3, #32
 8010ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010caa:	e17a      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010cac:	2340      	movs	r3, #64	; 0x40
 8010cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cb2:	e176      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010cb4:	2380      	movs	r3, #128	; 0x80
 8010cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cba:	e172      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010cbc:	697b      	ldr	r3, [r7, #20]
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	4a5b      	ldr	r2, [pc, #364]	; (8010e30 <UART_SetConfig+0x63c>)
 8010cc2:	4293      	cmp	r3, r2
 8010cc4:	d130      	bne.n	8010d28 <UART_SetConfig+0x534>
 8010cc6:	4b58      	ldr	r3, [pc, #352]	; (8010e28 <UART_SetConfig+0x634>)
 8010cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010cca:	f003 0307 	and.w	r3, r3, #7
 8010cce:	2b05      	cmp	r3, #5
 8010cd0:	d826      	bhi.n	8010d20 <UART_SetConfig+0x52c>
 8010cd2:	a201      	add	r2, pc, #4	; (adr r2, 8010cd8 <UART_SetConfig+0x4e4>)
 8010cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cd8:	08010cf1 	.word	0x08010cf1
 8010cdc:	08010cf9 	.word	0x08010cf9
 8010ce0:	08010d01 	.word	0x08010d01
 8010ce4:	08010d09 	.word	0x08010d09
 8010ce8:	08010d11 	.word	0x08010d11
 8010cec:	08010d19 	.word	0x08010d19
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cf6:	e154      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010cf8:	2304      	movs	r3, #4
 8010cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cfe:	e150      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010d00:	2308      	movs	r3, #8
 8010d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d06:	e14c      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010d08:	2310      	movs	r3, #16
 8010d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d0e:	e148      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010d10:	2320      	movs	r3, #32
 8010d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d16:	e144      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010d18:	2340      	movs	r3, #64	; 0x40
 8010d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d1e:	e140      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010d20:	2380      	movs	r3, #128	; 0x80
 8010d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d26:	e13c      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010d28:	697b      	ldr	r3, [r7, #20]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	4a41      	ldr	r2, [pc, #260]	; (8010e34 <UART_SetConfig+0x640>)
 8010d2e:	4293      	cmp	r3, r2
 8010d30:	f040 8082 	bne.w	8010e38 <UART_SetConfig+0x644>
 8010d34:	4b3c      	ldr	r3, [pc, #240]	; (8010e28 <UART_SetConfig+0x634>)
 8010d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010d3c:	2b28      	cmp	r3, #40	; 0x28
 8010d3e:	d86d      	bhi.n	8010e1c <UART_SetConfig+0x628>
 8010d40:	a201      	add	r2, pc, #4	; (adr r2, 8010d48 <UART_SetConfig+0x554>)
 8010d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d46:	bf00      	nop
 8010d48:	08010ded 	.word	0x08010ded
 8010d4c:	08010e1d 	.word	0x08010e1d
 8010d50:	08010e1d 	.word	0x08010e1d
 8010d54:	08010e1d 	.word	0x08010e1d
 8010d58:	08010e1d 	.word	0x08010e1d
 8010d5c:	08010e1d 	.word	0x08010e1d
 8010d60:	08010e1d 	.word	0x08010e1d
 8010d64:	08010e1d 	.word	0x08010e1d
 8010d68:	08010df5 	.word	0x08010df5
 8010d6c:	08010e1d 	.word	0x08010e1d
 8010d70:	08010e1d 	.word	0x08010e1d
 8010d74:	08010e1d 	.word	0x08010e1d
 8010d78:	08010e1d 	.word	0x08010e1d
 8010d7c:	08010e1d 	.word	0x08010e1d
 8010d80:	08010e1d 	.word	0x08010e1d
 8010d84:	08010e1d 	.word	0x08010e1d
 8010d88:	08010dfd 	.word	0x08010dfd
 8010d8c:	08010e1d 	.word	0x08010e1d
 8010d90:	08010e1d 	.word	0x08010e1d
 8010d94:	08010e1d 	.word	0x08010e1d
 8010d98:	08010e1d 	.word	0x08010e1d
 8010d9c:	08010e1d 	.word	0x08010e1d
 8010da0:	08010e1d 	.word	0x08010e1d
 8010da4:	08010e1d 	.word	0x08010e1d
 8010da8:	08010e05 	.word	0x08010e05
 8010dac:	08010e1d 	.word	0x08010e1d
 8010db0:	08010e1d 	.word	0x08010e1d
 8010db4:	08010e1d 	.word	0x08010e1d
 8010db8:	08010e1d 	.word	0x08010e1d
 8010dbc:	08010e1d 	.word	0x08010e1d
 8010dc0:	08010e1d 	.word	0x08010e1d
 8010dc4:	08010e1d 	.word	0x08010e1d
 8010dc8:	08010e0d 	.word	0x08010e0d
 8010dcc:	08010e1d 	.word	0x08010e1d
 8010dd0:	08010e1d 	.word	0x08010e1d
 8010dd4:	08010e1d 	.word	0x08010e1d
 8010dd8:	08010e1d 	.word	0x08010e1d
 8010ddc:	08010e1d 	.word	0x08010e1d
 8010de0:	08010e1d 	.word	0x08010e1d
 8010de4:	08010e1d 	.word	0x08010e1d
 8010de8:	08010e15 	.word	0x08010e15
 8010dec:	2301      	movs	r3, #1
 8010dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010df2:	e0d6      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010df4:	2304      	movs	r3, #4
 8010df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dfa:	e0d2      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010dfc:	2308      	movs	r3, #8
 8010dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e02:	e0ce      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010e04:	2310      	movs	r3, #16
 8010e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e0a:	e0ca      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010e0c:	2320      	movs	r3, #32
 8010e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e12:	e0c6      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010e14:	2340      	movs	r3, #64	; 0x40
 8010e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e1a:	e0c2      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010e1c:	2380      	movs	r3, #128	; 0x80
 8010e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e22:	e0be      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010e24:	40011400 	.word	0x40011400
 8010e28:	58024400 	.word	0x58024400
 8010e2c:	40007800 	.word	0x40007800
 8010e30:	40007c00 	.word	0x40007c00
 8010e34:	40011800 	.word	0x40011800
 8010e38:	697b      	ldr	r3, [r7, #20]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	4aad      	ldr	r2, [pc, #692]	; (80110f4 <UART_SetConfig+0x900>)
 8010e3e:	4293      	cmp	r3, r2
 8010e40:	d176      	bne.n	8010f30 <UART_SetConfig+0x73c>
 8010e42:	4bad      	ldr	r3, [pc, #692]	; (80110f8 <UART_SetConfig+0x904>)
 8010e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010e4a:	2b28      	cmp	r3, #40	; 0x28
 8010e4c:	d86c      	bhi.n	8010f28 <UART_SetConfig+0x734>
 8010e4e:	a201      	add	r2, pc, #4	; (adr r2, 8010e54 <UART_SetConfig+0x660>)
 8010e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e54:	08010ef9 	.word	0x08010ef9
 8010e58:	08010f29 	.word	0x08010f29
 8010e5c:	08010f29 	.word	0x08010f29
 8010e60:	08010f29 	.word	0x08010f29
 8010e64:	08010f29 	.word	0x08010f29
 8010e68:	08010f29 	.word	0x08010f29
 8010e6c:	08010f29 	.word	0x08010f29
 8010e70:	08010f29 	.word	0x08010f29
 8010e74:	08010f01 	.word	0x08010f01
 8010e78:	08010f29 	.word	0x08010f29
 8010e7c:	08010f29 	.word	0x08010f29
 8010e80:	08010f29 	.word	0x08010f29
 8010e84:	08010f29 	.word	0x08010f29
 8010e88:	08010f29 	.word	0x08010f29
 8010e8c:	08010f29 	.word	0x08010f29
 8010e90:	08010f29 	.word	0x08010f29
 8010e94:	08010f09 	.word	0x08010f09
 8010e98:	08010f29 	.word	0x08010f29
 8010e9c:	08010f29 	.word	0x08010f29
 8010ea0:	08010f29 	.word	0x08010f29
 8010ea4:	08010f29 	.word	0x08010f29
 8010ea8:	08010f29 	.word	0x08010f29
 8010eac:	08010f29 	.word	0x08010f29
 8010eb0:	08010f29 	.word	0x08010f29
 8010eb4:	08010f11 	.word	0x08010f11
 8010eb8:	08010f29 	.word	0x08010f29
 8010ebc:	08010f29 	.word	0x08010f29
 8010ec0:	08010f29 	.word	0x08010f29
 8010ec4:	08010f29 	.word	0x08010f29
 8010ec8:	08010f29 	.word	0x08010f29
 8010ecc:	08010f29 	.word	0x08010f29
 8010ed0:	08010f29 	.word	0x08010f29
 8010ed4:	08010f19 	.word	0x08010f19
 8010ed8:	08010f29 	.word	0x08010f29
 8010edc:	08010f29 	.word	0x08010f29
 8010ee0:	08010f29 	.word	0x08010f29
 8010ee4:	08010f29 	.word	0x08010f29
 8010ee8:	08010f29 	.word	0x08010f29
 8010eec:	08010f29 	.word	0x08010f29
 8010ef0:	08010f29 	.word	0x08010f29
 8010ef4:	08010f21 	.word	0x08010f21
 8010ef8:	2301      	movs	r3, #1
 8010efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010efe:	e050      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010f00:	2304      	movs	r3, #4
 8010f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f06:	e04c      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010f08:	2308      	movs	r3, #8
 8010f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f0e:	e048      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010f10:	2310      	movs	r3, #16
 8010f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f16:	e044      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010f18:	2320      	movs	r3, #32
 8010f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f1e:	e040      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010f20:	2340      	movs	r3, #64	; 0x40
 8010f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f26:	e03c      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010f28:	2380      	movs	r3, #128	; 0x80
 8010f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f2e:	e038      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010f30:	697b      	ldr	r3, [r7, #20]
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	4a71      	ldr	r2, [pc, #452]	; (80110fc <UART_SetConfig+0x908>)
 8010f36:	4293      	cmp	r3, r2
 8010f38:	d130      	bne.n	8010f9c <UART_SetConfig+0x7a8>
 8010f3a:	4b6f      	ldr	r3, [pc, #444]	; (80110f8 <UART_SetConfig+0x904>)
 8010f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010f3e:	f003 0307 	and.w	r3, r3, #7
 8010f42:	2b05      	cmp	r3, #5
 8010f44:	d826      	bhi.n	8010f94 <UART_SetConfig+0x7a0>
 8010f46:	a201      	add	r2, pc, #4	; (adr r2, 8010f4c <UART_SetConfig+0x758>)
 8010f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f4c:	08010f65 	.word	0x08010f65
 8010f50:	08010f6d 	.word	0x08010f6d
 8010f54:	08010f75 	.word	0x08010f75
 8010f58:	08010f7d 	.word	0x08010f7d
 8010f5c:	08010f85 	.word	0x08010f85
 8010f60:	08010f8d 	.word	0x08010f8d
 8010f64:	2302      	movs	r3, #2
 8010f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f6a:	e01a      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010f6c:	2304      	movs	r3, #4
 8010f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f72:	e016      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010f74:	2308      	movs	r3, #8
 8010f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f7a:	e012      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010f7c:	2310      	movs	r3, #16
 8010f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f82:	e00e      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010f84:	2320      	movs	r3, #32
 8010f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f8a:	e00a      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010f8c:	2340      	movs	r3, #64	; 0x40
 8010f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f92:	e006      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010f94:	2380      	movs	r3, #128	; 0x80
 8010f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f9a:	e002      	b.n	8010fa2 <UART_SetConfig+0x7ae>
 8010f9c:	2380      	movs	r3, #128	; 0x80
 8010f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010fa2:	697b      	ldr	r3, [r7, #20]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	4a55      	ldr	r2, [pc, #340]	; (80110fc <UART_SetConfig+0x908>)
 8010fa8:	4293      	cmp	r3, r2
 8010faa:	f040 80f8 	bne.w	801119e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010fae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010fb2:	2b20      	cmp	r3, #32
 8010fb4:	dc46      	bgt.n	8011044 <UART_SetConfig+0x850>
 8010fb6:	2b02      	cmp	r3, #2
 8010fb8:	db75      	blt.n	80110a6 <UART_SetConfig+0x8b2>
 8010fba:	3b02      	subs	r3, #2
 8010fbc:	2b1e      	cmp	r3, #30
 8010fbe:	d872      	bhi.n	80110a6 <UART_SetConfig+0x8b2>
 8010fc0:	a201      	add	r2, pc, #4	; (adr r2, 8010fc8 <UART_SetConfig+0x7d4>)
 8010fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fc6:	bf00      	nop
 8010fc8:	0801104b 	.word	0x0801104b
 8010fcc:	080110a7 	.word	0x080110a7
 8010fd0:	08011053 	.word	0x08011053
 8010fd4:	080110a7 	.word	0x080110a7
 8010fd8:	080110a7 	.word	0x080110a7
 8010fdc:	080110a7 	.word	0x080110a7
 8010fe0:	08011063 	.word	0x08011063
 8010fe4:	080110a7 	.word	0x080110a7
 8010fe8:	080110a7 	.word	0x080110a7
 8010fec:	080110a7 	.word	0x080110a7
 8010ff0:	080110a7 	.word	0x080110a7
 8010ff4:	080110a7 	.word	0x080110a7
 8010ff8:	080110a7 	.word	0x080110a7
 8010ffc:	080110a7 	.word	0x080110a7
 8011000:	08011073 	.word	0x08011073
 8011004:	080110a7 	.word	0x080110a7
 8011008:	080110a7 	.word	0x080110a7
 801100c:	080110a7 	.word	0x080110a7
 8011010:	080110a7 	.word	0x080110a7
 8011014:	080110a7 	.word	0x080110a7
 8011018:	080110a7 	.word	0x080110a7
 801101c:	080110a7 	.word	0x080110a7
 8011020:	080110a7 	.word	0x080110a7
 8011024:	080110a7 	.word	0x080110a7
 8011028:	080110a7 	.word	0x080110a7
 801102c:	080110a7 	.word	0x080110a7
 8011030:	080110a7 	.word	0x080110a7
 8011034:	080110a7 	.word	0x080110a7
 8011038:	080110a7 	.word	0x080110a7
 801103c:	080110a7 	.word	0x080110a7
 8011040:	08011099 	.word	0x08011099
 8011044:	2b40      	cmp	r3, #64	; 0x40
 8011046:	d02a      	beq.n	801109e <UART_SetConfig+0x8aa>
 8011048:	e02d      	b.n	80110a6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801104a:	f7fb f987 	bl	800c35c <HAL_RCCEx_GetD3PCLK1Freq>
 801104e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011050:	e02f      	b.n	80110b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011056:	4618      	mov	r0, r3
 8011058:	f7fb f996 	bl	800c388 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801105c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801105e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011060:	e027      	b.n	80110b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011062:	f107 0318 	add.w	r3, r7, #24
 8011066:	4618      	mov	r0, r3
 8011068:	f7fb fae2 	bl	800c630 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801106c:	69fb      	ldr	r3, [r7, #28]
 801106e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011070:	e01f      	b.n	80110b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011072:	4b21      	ldr	r3, [pc, #132]	; (80110f8 <UART_SetConfig+0x904>)
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	f003 0320 	and.w	r3, r3, #32
 801107a:	2b00      	cmp	r3, #0
 801107c:	d009      	beq.n	8011092 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801107e:	4b1e      	ldr	r3, [pc, #120]	; (80110f8 <UART_SetConfig+0x904>)
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	08db      	lsrs	r3, r3, #3
 8011084:	f003 0303 	and.w	r3, r3, #3
 8011088:	4a1d      	ldr	r2, [pc, #116]	; (8011100 <UART_SetConfig+0x90c>)
 801108a:	fa22 f303 	lsr.w	r3, r2, r3
 801108e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011090:	e00f      	b.n	80110b2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8011092:	4b1b      	ldr	r3, [pc, #108]	; (8011100 <UART_SetConfig+0x90c>)
 8011094:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011096:	e00c      	b.n	80110b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011098:	4b1a      	ldr	r3, [pc, #104]	; (8011104 <UART_SetConfig+0x910>)
 801109a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801109c:	e009      	b.n	80110b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801109e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80110a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80110a4:	e005      	b.n	80110b2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80110a6:	2300      	movs	r3, #0
 80110a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80110aa:	2301      	movs	r3, #1
 80110ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80110b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80110b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	f000 81ee 	beq.w	8011496 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80110ba:	697b      	ldr	r3, [r7, #20]
 80110bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110be:	4a12      	ldr	r2, [pc, #72]	; (8011108 <UART_SetConfig+0x914>)
 80110c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80110c4:	461a      	mov	r2, r3
 80110c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80110cc:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80110ce:	697b      	ldr	r3, [r7, #20]
 80110d0:	685a      	ldr	r2, [r3, #4]
 80110d2:	4613      	mov	r3, r2
 80110d4:	005b      	lsls	r3, r3, #1
 80110d6:	4413      	add	r3, r2
 80110d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80110da:	429a      	cmp	r2, r3
 80110dc:	d305      	bcc.n	80110ea <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80110de:	697b      	ldr	r3, [r7, #20]
 80110e0:	685b      	ldr	r3, [r3, #4]
 80110e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80110e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80110e6:	429a      	cmp	r2, r3
 80110e8:	d910      	bls.n	801110c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80110ea:	2301      	movs	r3, #1
 80110ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80110f0:	e1d1      	b.n	8011496 <UART_SetConfig+0xca2>
 80110f2:	bf00      	nop
 80110f4:	40011c00 	.word	0x40011c00
 80110f8:	58024400 	.word	0x58024400
 80110fc:	58000c00 	.word	0x58000c00
 8011100:	03d09000 	.word	0x03d09000
 8011104:	003d0900 	.word	0x003d0900
 8011108:	0801bb60 	.word	0x0801bb60
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801110c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801110e:	2200      	movs	r2, #0
 8011110:	60bb      	str	r3, [r7, #8]
 8011112:	60fa      	str	r2, [r7, #12]
 8011114:	697b      	ldr	r3, [r7, #20]
 8011116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011118:	4ac0      	ldr	r2, [pc, #768]	; (801141c <UART_SetConfig+0xc28>)
 801111a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801111e:	b29b      	uxth	r3, r3
 8011120:	2200      	movs	r2, #0
 8011122:	603b      	str	r3, [r7, #0]
 8011124:	607a      	str	r2, [r7, #4]
 8011126:	e9d7 2300 	ldrd	r2, r3, [r7]
 801112a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801112e:	f7ef fb13 	bl	8000758 <__aeabi_uldivmod>
 8011132:	4602      	mov	r2, r0
 8011134:	460b      	mov	r3, r1
 8011136:	4610      	mov	r0, r2
 8011138:	4619      	mov	r1, r3
 801113a:	f04f 0200 	mov.w	r2, #0
 801113e:	f04f 0300 	mov.w	r3, #0
 8011142:	020b      	lsls	r3, r1, #8
 8011144:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011148:	0202      	lsls	r2, r0, #8
 801114a:	6979      	ldr	r1, [r7, #20]
 801114c:	6849      	ldr	r1, [r1, #4]
 801114e:	0849      	lsrs	r1, r1, #1
 8011150:	2000      	movs	r0, #0
 8011152:	460c      	mov	r4, r1
 8011154:	4605      	mov	r5, r0
 8011156:	eb12 0804 	adds.w	r8, r2, r4
 801115a:	eb43 0905 	adc.w	r9, r3, r5
 801115e:	697b      	ldr	r3, [r7, #20]
 8011160:	685b      	ldr	r3, [r3, #4]
 8011162:	2200      	movs	r2, #0
 8011164:	469a      	mov	sl, r3
 8011166:	4693      	mov	fp, r2
 8011168:	4652      	mov	r2, sl
 801116a:	465b      	mov	r3, fp
 801116c:	4640      	mov	r0, r8
 801116e:	4649      	mov	r1, r9
 8011170:	f7ef faf2 	bl	8000758 <__aeabi_uldivmod>
 8011174:	4602      	mov	r2, r0
 8011176:	460b      	mov	r3, r1
 8011178:	4613      	mov	r3, r2
 801117a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801117c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801117e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011182:	d308      	bcc.n	8011196 <UART_SetConfig+0x9a2>
 8011184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011186:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801118a:	d204      	bcs.n	8011196 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 801118c:	697b      	ldr	r3, [r7, #20]
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011192:	60da      	str	r2, [r3, #12]
 8011194:	e17f      	b.n	8011496 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8011196:	2301      	movs	r3, #1
 8011198:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801119c:	e17b      	b.n	8011496 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801119e:	697b      	ldr	r3, [r7, #20]
 80111a0:	69db      	ldr	r3, [r3, #28]
 80111a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80111a6:	f040 80bd 	bne.w	8011324 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80111aa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80111ae:	2b20      	cmp	r3, #32
 80111b0:	dc48      	bgt.n	8011244 <UART_SetConfig+0xa50>
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	db7b      	blt.n	80112ae <UART_SetConfig+0xaba>
 80111b6:	2b20      	cmp	r3, #32
 80111b8:	d879      	bhi.n	80112ae <UART_SetConfig+0xaba>
 80111ba:	a201      	add	r2, pc, #4	; (adr r2, 80111c0 <UART_SetConfig+0x9cc>)
 80111bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111c0:	0801124b 	.word	0x0801124b
 80111c4:	08011253 	.word	0x08011253
 80111c8:	080112af 	.word	0x080112af
 80111cc:	080112af 	.word	0x080112af
 80111d0:	0801125b 	.word	0x0801125b
 80111d4:	080112af 	.word	0x080112af
 80111d8:	080112af 	.word	0x080112af
 80111dc:	080112af 	.word	0x080112af
 80111e0:	0801126b 	.word	0x0801126b
 80111e4:	080112af 	.word	0x080112af
 80111e8:	080112af 	.word	0x080112af
 80111ec:	080112af 	.word	0x080112af
 80111f0:	080112af 	.word	0x080112af
 80111f4:	080112af 	.word	0x080112af
 80111f8:	080112af 	.word	0x080112af
 80111fc:	080112af 	.word	0x080112af
 8011200:	0801127b 	.word	0x0801127b
 8011204:	080112af 	.word	0x080112af
 8011208:	080112af 	.word	0x080112af
 801120c:	080112af 	.word	0x080112af
 8011210:	080112af 	.word	0x080112af
 8011214:	080112af 	.word	0x080112af
 8011218:	080112af 	.word	0x080112af
 801121c:	080112af 	.word	0x080112af
 8011220:	080112af 	.word	0x080112af
 8011224:	080112af 	.word	0x080112af
 8011228:	080112af 	.word	0x080112af
 801122c:	080112af 	.word	0x080112af
 8011230:	080112af 	.word	0x080112af
 8011234:	080112af 	.word	0x080112af
 8011238:	080112af 	.word	0x080112af
 801123c:	080112af 	.word	0x080112af
 8011240:	080112a1 	.word	0x080112a1
 8011244:	2b40      	cmp	r3, #64	; 0x40
 8011246:	d02e      	beq.n	80112a6 <UART_SetConfig+0xab2>
 8011248:	e031      	b.n	80112ae <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801124a:	f7f9 f9e9 	bl	800a620 <HAL_RCC_GetPCLK1Freq>
 801124e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011250:	e033      	b.n	80112ba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011252:	f7f9 f9fb 	bl	800a64c <HAL_RCC_GetPCLK2Freq>
 8011256:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011258:	e02f      	b.n	80112ba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801125a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801125e:	4618      	mov	r0, r3
 8011260:	f7fb f892 	bl	800c388 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011266:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011268:	e027      	b.n	80112ba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801126a:	f107 0318 	add.w	r3, r7, #24
 801126e:	4618      	mov	r0, r3
 8011270:	f7fb f9de 	bl	800c630 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011274:	69fb      	ldr	r3, [r7, #28]
 8011276:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011278:	e01f      	b.n	80112ba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801127a:	4b69      	ldr	r3, [pc, #420]	; (8011420 <UART_SetConfig+0xc2c>)
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	f003 0320 	and.w	r3, r3, #32
 8011282:	2b00      	cmp	r3, #0
 8011284:	d009      	beq.n	801129a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011286:	4b66      	ldr	r3, [pc, #408]	; (8011420 <UART_SetConfig+0xc2c>)
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	08db      	lsrs	r3, r3, #3
 801128c:	f003 0303 	and.w	r3, r3, #3
 8011290:	4a64      	ldr	r2, [pc, #400]	; (8011424 <UART_SetConfig+0xc30>)
 8011292:	fa22 f303 	lsr.w	r3, r2, r3
 8011296:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011298:	e00f      	b.n	80112ba <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 801129a:	4b62      	ldr	r3, [pc, #392]	; (8011424 <UART_SetConfig+0xc30>)
 801129c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801129e:	e00c      	b.n	80112ba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80112a0:	4b61      	ldr	r3, [pc, #388]	; (8011428 <UART_SetConfig+0xc34>)
 80112a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112a4:	e009      	b.n	80112ba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80112a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80112aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112ac:	e005      	b.n	80112ba <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80112ae:	2300      	movs	r3, #0
 80112b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80112b2:	2301      	movs	r3, #1
 80112b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80112b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80112ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112bc:	2b00      	cmp	r3, #0
 80112be:	f000 80ea 	beq.w	8011496 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80112c2:	697b      	ldr	r3, [r7, #20]
 80112c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112c6:	4a55      	ldr	r2, [pc, #340]	; (801141c <UART_SetConfig+0xc28>)
 80112c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80112cc:	461a      	mov	r2, r3
 80112ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80112d4:	005a      	lsls	r2, r3, #1
 80112d6:	697b      	ldr	r3, [r7, #20]
 80112d8:	685b      	ldr	r3, [r3, #4]
 80112da:	085b      	lsrs	r3, r3, #1
 80112dc:	441a      	add	r2, r3
 80112de:	697b      	ldr	r3, [r7, #20]
 80112e0:	685b      	ldr	r3, [r3, #4]
 80112e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80112e6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80112e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112ea:	2b0f      	cmp	r3, #15
 80112ec:	d916      	bls.n	801131c <UART_SetConfig+0xb28>
 80112ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80112f4:	d212      	bcs.n	801131c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80112f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112f8:	b29b      	uxth	r3, r3
 80112fa:	f023 030f 	bic.w	r3, r3, #15
 80112fe:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011302:	085b      	lsrs	r3, r3, #1
 8011304:	b29b      	uxth	r3, r3
 8011306:	f003 0307 	and.w	r3, r3, #7
 801130a:	b29a      	uxth	r2, r3
 801130c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801130e:	4313      	orrs	r3, r2
 8011310:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011312:	697b      	ldr	r3, [r7, #20]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011318:	60da      	str	r2, [r3, #12]
 801131a:	e0bc      	b.n	8011496 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 801131c:	2301      	movs	r3, #1
 801131e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011322:	e0b8      	b.n	8011496 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011324:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011328:	2b20      	cmp	r3, #32
 801132a:	dc4b      	bgt.n	80113c4 <UART_SetConfig+0xbd0>
 801132c:	2b00      	cmp	r3, #0
 801132e:	f2c0 8087 	blt.w	8011440 <UART_SetConfig+0xc4c>
 8011332:	2b20      	cmp	r3, #32
 8011334:	f200 8084 	bhi.w	8011440 <UART_SetConfig+0xc4c>
 8011338:	a201      	add	r2, pc, #4	; (adr r2, 8011340 <UART_SetConfig+0xb4c>)
 801133a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801133e:	bf00      	nop
 8011340:	080113cb 	.word	0x080113cb
 8011344:	080113d3 	.word	0x080113d3
 8011348:	08011441 	.word	0x08011441
 801134c:	08011441 	.word	0x08011441
 8011350:	080113db 	.word	0x080113db
 8011354:	08011441 	.word	0x08011441
 8011358:	08011441 	.word	0x08011441
 801135c:	08011441 	.word	0x08011441
 8011360:	080113eb 	.word	0x080113eb
 8011364:	08011441 	.word	0x08011441
 8011368:	08011441 	.word	0x08011441
 801136c:	08011441 	.word	0x08011441
 8011370:	08011441 	.word	0x08011441
 8011374:	08011441 	.word	0x08011441
 8011378:	08011441 	.word	0x08011441
 801137c:	08011441 	.word	0x08011441
 8011380:	080113fb 	.word	0x080113fb
 8011384:	08011441 	.word	0x08011441
 8011388:	08011441 	.word	0x08011441
 801138c:	08011441 	.word	0x08011441
 8011390:	08011441 	.word	0x08011441
 8011394:	08011441 	.word	0x08011441
 8011398:	08011441 	.word	0x08011441
 801139c:	08011441 	.word	0x08011441
 80113a0:	08011441 	.word	0x08011441
 80113a4:	08011441 	.word	0x08011441
 80113a8:	08011441 	.word	0x08011441
 80113ac:	08011441 	.word	0x08011441
 80113b0:	08011441 	.word	0x08011441
 80113b4:	08011441 	.word	0x08011441
 80113b8:	08011441 	.word	0x08011441
 80113bc:	08011441 	.word	0x08011441
 80113c0:	08011433 	.word	0x08011433
 80113c4:	2b40      	cmp	r3, #64	; 0x40
 80113c6:	d037      	beq.n	8011438 <UART_SetConfig+0xc44>
 80113c8:	e03a      	b.n	8011440 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80113ca:	f7f9 f929 	bl	800a620 <HAL_RCC_GetPCLK1Freq>
 80113ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80113d0:	e03c      	b.n	801144c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80113d2:	f7f9 f93b 	bl	800a64c <HAL_RCC_GetPCLK2Freq>
 80113d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80113d8:	e038      	b.n	801144c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80113da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80113de:	4618      	mov	r0, r3
 80113e0:	f7fa ffd2 	bl	800c388 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80113e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113e8:	e030      	b.n	801144c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80113ea:	f107 0318 	add.w	r3, r7, #24
 80113ee:	4618      	mov	r0, r3
 80113f0:	f7fb f91e 	bl	800c630 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80113f4:	69fb      	ldr	r3, [r7, #28]
 80113f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113f8:	e028      	b.n	801144c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80113fa:	4b09      	ldr	r3, [pc, #36]	; (8011420 <UART_SetConfig+0xc2c>)
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	f003 0320 	and.w	r3, r3, #32
 8011402:	2b00      	cmp	r3, #0
 8011404:	d012      	beq.n	801142c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011406:	4b06      	ldr	r3, [pc, #24]	; (8011420 <UART_SetConfig+0xc2c>)
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	08db      	lsrs	r3, r3, #3
 801140c:	f003 0303 	and.w	r3, r3, #3
 8011410:	4a04      	ldr	r2, [pc, #16]	; (8011424 <UART_SetConfig+0xc30>)
 8011412:	fa22 f303 	lsr.w	r3, r2, r3
 8011416:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011418:	e018      	b.n	801144c <UART_SetConfig+0xc58>
 801141a:	bf00      	nop
 801141c:	0801bb60 	.word	0x0801bb60
 8011420:	58024400 	.word	0x58024400
 8011424:	03d09000 	.word	0x03d09000
 8011428:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 801142c:	4b24      	ldr	r3, [pc, #144]	; (80114c0 <UART_SetConfig+0xccc>)
 801142e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011430:	e00c      	b.n	801144c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011432:	4b24      	ldr	r3, [pc, #144]	; (80114c4 <UART_SetConfig+0xcd0>)
 8011434:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011436:	e009      	b.n	801144c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011438:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801143c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801143e:	e005      	b.n	801144c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8011440:	2300      	movs	r3, #0
 8011442:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011444:	2301      	movs	r3, #1
 8011446:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801144a:	bf00      	nop
    }

    if (pclk != 0U)
 801144c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801144e:	2b00      	cmp	r3, #0
 8011450:	d021      	beq.n	8011496 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011452:	697b      	ldr	r3, [r7, #20]
 8011454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011456:	4a1c      	ldr	r2, [pc, #112]	; (80114c8 <UART_SetConfig+0xcd4>)
 8011458:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801145c:	461a      	mov	r2, r3
 801145e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011460:	fbb3 f2f2 	udiv	r2, r3, r2
 8011464:	697b      	ldr	r3, [r7, #20]
 8011466:	685b      	ldr	r3, [r3, #4]
 8011468:	085b      	lsrs	r3, r3, #1
 801146a:	441a      	add	r2, r3
 801146c:	697b      	ldr	r3, [r7, #20]
 801146e:	685b      	ldr	r3, [r3, #4]
 8011470:	fbb2 f3f3 	udiv	r3, r2, r3
 8011474:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011478:	2b0f      	cmp	r3, #15
 801147a:	d909      	bls.n	8011490 <UART_SetConfig+0xc9c>
 801147c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801147e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011482:	d205      	bcs.n	8011490 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011486:	b29a      	uxth	r2, r3
 8011488:	697b      	ldr	r3, [r7, #20]
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	60da      	str	r2, [r3, #12]
 801148e:	e002      	b.n	8011496 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011490:	2301      	movs	r3, #1
 8011492:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011496:	697b      	ldr	r3, [r7, #20]
 8011498:	2201      	movs	r2, #1
 801149a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801149e:	697b      	ldr	r3, [r7, #20]
 80114a0:	2201      	movs	r2, #1
 80114a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80114a6:	697b      	ldr	r3, [r7, #20]
 80114a8:	2200      	movs	r2, #0
 80114aa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80114ac:	697b      	ldr	r3, [r7, #20]
 80114ae:	2200      	movs	r2, #0
 80114b0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80114b2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80114b6:	4618      	mov	r0, r3
 80114b8:	3748      	adds	r7, #72	; 0x48
 80114ba:	46bd      	mov	sp, r7
 80114bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80114c0:	03d09000 	.word	0x03d09000
 80114c4:	003d0900 	.word	0x003d0900
 80114c8:	0801bb60 	.word	0x0801bb60

080114cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80114cc:	b480      	push	{r7}
 80114ce:	b083      	sub	sp, #12
 80114d0:	af00      	add	r7, sp, #0
 80114d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114d8:	f003 0301 	and.w	r3, r3, #1
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d00a      	beq.n	80114f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	685b      	ldr	r3, [r3, #4]
 80114e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	430a      	orrs	r2, r1
 80114f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114fa:	f003 0302 	and.w	r3, r3, #2
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d00a      	beq.n	8011518 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	685b      	ldr	r3, [r3, #4]
 8011508:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	430a      	orrs	r2, r1
 8011516:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801151c:	f003 0304 	and.w	r3, r3, #4
 8011520:	2b00      	cmp	r3, #0
 8011522:	d00a      	beq.n	801153a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	685b      	ldr	r3, [r3, #4]
 801152a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	430a      	orrs	r2, r1
 8011538:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801153e:	f003 0308 	and.w	r3, r3, #8
 8011542:	2b00      	cmp	r3, #0
 8011544:	d00a      	beq.n	801155c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	685b      	ldr	r3, [r3, #4]
 801154c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	430a      	orrs	r2, r1
 801155a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011560:	f003 0310 	and.w	r3, r3, #16
 8011564:	2b00      	cmp	r3, #0
 8011566:	d00a      	beq.n	801157e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	689b      	ldr	r3, [r3, #8]
 801156e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	430a      	orrs	r2, r1
 801157c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011582:	f003 0320 	and.w	r3, r3, #32
 8011586:	2b00      	cmp	r3, #0
 8011588:	d00a      	beq.n	80115a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	689b      	ldr	r3, [r3, #8]
 8011590:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	430a      	orrs	r2, r1
 801159e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d01a      	beq.n	80115e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	685b      	ldr	r3, [r3, #4]
 80115b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	430a      	orrs	r2, r1
 80115c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80115c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80115ca:	d10a      	bne.n	80115e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	685b      	ldr	r3, [r3, #4]
 80115d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	430a      	orrs	r2, r1
 80115e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d00a      	beq.n	8011604 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	685b      	ldr	r3, [r3, #4]
 80115f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	430a      	orrs	r2, r1
 8011602:	605a      	str	r2, [r3, #4]
  }
}
 8011604:	bf00      	nop
 8011606:	370c      	adds	r7, #12
 8011608:	46bd      	mov	sp, r7
 801160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801160e:	4770      	bx	lr

08011610 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011610:	b580      	push	{r7, lr}
 8011612:	b098      	sub	sp, #96	; 0x60
 8011614:	af02      	add	r7, sp, #8
 8011616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	2200      	movs	r2, #0
 801161c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011620:	f7f2 f93c 	bl	800389c <HAL_GetTick>
 8011624:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	f003 0308 	and.w	r3, r3, #8
 8011630:	2b08      	cmp	r3, #8
 8011632:	d12f      	bne.n	8011694 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011634:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011638:	9300      	str	r3, [sp, #0]
 801163a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801163c:	2200      	movs	r2, #0
 801163e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011642:	6878      	ldr	r0, [r7, #4]
 8011644:	f000 f88e 	bl	8011764 <UART_WaitOnFlagUntilTimeout>
 8011648:	4603      	mov	r3, r0
 801164a:	2b00      	cmp	r3, #0
 801164c:	d022      	beq.n	8011694 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011656:	e853 3f00 	ldrex	r3, [r3]
 801165a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801165c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801165e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011662:	653b      	str	r3, [r7, #80]	; 0x50
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	461a      	mov	r2, r3
 801166a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801166c:	647b      	str	r3, [r7, #68]	; 0x44
 801166e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011670:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011672:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011674:	e841 2300 	strex	r3, r2, [r1]
 8011678:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801167a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801167c:	2b00      	cmp	r3, #0
 801167e:	d1e6      	bne.n	801164e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	2220      	movs	r2, #32
 8011684:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	2200      	movs	r2, #0
 801168c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011690:	2303      	movs	r3, #3
 8011692:	e063      	b.n	801175c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	f003 0304 	and.w	r3, r3, #4
 801169e:	2b04      	cmp	r3, #4
 80116a0:	d149      	bne.n	8011736 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80116a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80116a6:	9300      	str	r3, [sp, #0]
 80116a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116aa:	2200      	movs	r2, #0
 80116ac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80116b0:	6878      	ldr	r0, [r7, #4]
 80116b2:	f000 f857 	bl	8011764 <UART_WaitOnFlagUntilTimeout>
 80116b6:	4603      	mov	r3, r0
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d03c      	beq.n	8011736 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116c4:	e853 3f00 	ldrex	r3, [r3]
 80116c8:	623b      	str	r3, [r7, #32]
   return(result);
 80116ca:	6a3b      	ldr	r3, [r7, #32]
 80116cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80116d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	461a      	mov	r2, r3
 80116d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116da:	633b      	str	r3, [r7, #48]	; 0x30
 80116dc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80116e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80116e2:	e841 2300 	strex	r3, r2, [r1]
 80116e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80116e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d1e6      	bne.n	80116bc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	3308      	adds	r3, #8
 80116f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116f6:	693b      	ldr	r3, [r7, #16]
 80116f8:	e853 3f00 	ldrex	r3, [r3]
 80116fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	f023 0301 	bic.w	r3, r3, #1
 8011704:	64bb      	str	r3, [r7, #72]	; 0x48
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	3308      	adds	r3, #8
 801170c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801170e:	61fa      	str	r2, [r7, #28]
 8011710:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011712:	69b9      	ldr	r1, [r7, #24]
 8011714:	69fa      	ldr	r2, [r7, #28]
 8011716:	e841 2300 	strex	r3, r2, [r1]
 801171a:	617b      	str	r3, [r7, #20]
   return(result);
 801171c:	697b      	ldr	r3, [r7, #20]
 801171e:	2b00      	cmp	r3, #0
 8011720:	d1e5      	bne.n	80116ee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	2220      	movs	r2, #32
 8011726:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	2200      	movs	r2, #0
 801172e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011732:	2303      	movs	r3, #3
 8011734:	e012      	b.n	801175c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	2220      	movs	r2, #32
 801173a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	2220      	movs	r2, #32
 8011742:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	2200      	movs	r2, #0
 801174a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	2200      	movs	r2, #0
 8011750:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	2200      	movs	r2, #0
 8011756:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801175a:	2300      	movs	r3, #0
}
 801175c:	4618      	mov	r0, r3
 801175e:	3758      	adds	r7, #88	; 0x58
 8011760:	46bd      	mov	sp, r7
 8011762:	bd80      	pop	{r7, pc}

08011764 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011764:	b580      	push	{r7, lr}
 8011766:	b084      	sub	sp, #16
 8011768:	af00      	add	r7, sp, #0
 801176a:	60f8      	str	r0, [r7, #12]
 801176c:	60b9      	str	r1, [r7, #8]
 801176e:	603b      	str	r3, [r7, #0]
 8011770:	4613      	mov	r3, r2
 8011772:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011774:	e049      	b.n	801180a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011776:	69bb      	ldr	r3, [r7, #24]
 8011778:	f1b3 3fff 	cmp.w	r3, #4294967295
 801177c:	d045      	beq.n	801180a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801177e:	f7f2 f88d 	bl	800389c <HAL_GetTick>
 8011782:	4602      	mov	r2, r0
 8011784:	683b      	ldr	r3, [r7, #0]
 8011786:	1ad3      	subs	r3, r2, r3
 8011788:	69ba      	ldr	r2, [r7, #24]
 801178a:	429a      	cmp	r2, r3
 801178c:	d302      	bcc.n	8011794 <UART_WaitOnFlagUntilTimeout+0x30>
 801178e:	69bb      	ldr	r3, [r7, #24]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d101      	bne.n	8011798 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011794:	2303      	movs	r3, #3
 8011796:	e048      	b.n	801182a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	f003 0304 	and.w	r3, r3, #4
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d031      	beq.n	801180a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	69db      	ldr	r3, [r3, #28]
 80117ac:	f003 0308 	and.w	r3, r3, #8
 80117b0:	2b08      	cmp	r3, #8
 80117b2:	d110      	bne.n	80117d6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	2208      	movs	r2, #8
 80117ba:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80117bc:	68f8      	ldr	r0, [r7, #12]
 80117be:	f000 f839 	bl	8011834 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	2208      	movs	r2, #8
 80117c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	2200      	movs	r2, #0
 80117ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80117d2:	2301      	movs	r3, #1
 80117d4:	e029      	b.n	801182a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	69db      	ldr	r3, [r3, #28]
 80117dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80117e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80117e4:	d111      	bne.n	801180a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80117ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80117f0:	68f8      	ldr	r0, [r7, #12]
 80117f2:	f000 f81f 	bl	8011834 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	2220      	movs	r2, #32
 80117fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	2200      	movs	r2, #0
 8011802:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011806:	2303      	movs	r3, #3
 8011808:	e00f      	b.n	801182a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	69da      	ldr	r2, [r3, #28]
 8011810:	68bb      	ldr	r3, [r7, #8]
 8011812:	4013      	ands	r3, r2
 8011814:	68ba      	ldr	r2, [r7, #8]
 8011816:	429a      	cmp	r2, r3
 8011818:	bf0c      	ite	eq
 801181a:	2301      	moveq	r3, #1
 801181c:	2300      	movne	r3, #0
 801181e:	b2db      	uxtb	r3, r3
 8011820:	461a      	mov	r2, r3
 8011822:	79fb      	ldrb	r3, [r7, #7]
 8011824:	429a      	cmp	r2, r3
 8011826:	d0a6      	beq.n	8011776 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011828:	2300      	movs	r3, #0
}
 801182a:	4618      	mov	r0, r3
 801182c:	3710      	adds	r7, #16
 801182e:	46bd      	mov	sp, r7
 8011830:	bd80      	pop	{r7, pc}
	...

08011834 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011834:	b480      	push	{r7}
 8011836:	b095      	sub	sp, #84	; 0x54
 8011838:	af00      	add	r7, sp, #0
 801183a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011844:	e853 3f00 	ldrex	r3, [r3]
 8011848:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801184a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801184c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011850:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	461a      	mov	r2, r3
 8011858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801185a:	643b      	str	r3, [r7, #64]	; 0x40
 801185c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801185e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011860:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011862:	e841 2300 	strex	r3, r2, [r1]
 8011866:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801186a:	2b00      	cmp	r3, #0
 801186c:	d1e6      	bne.n	801183c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	3308      	adds	r3, #8
 8011874:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011876:	6a3b      	ldr	r3, [r7, #32]
 8011878:	e853 3f00 	ldrex	r3, [r3]
 801187c:	61fb      	str	r3, [r7, #28]
   return(result);
 801187e:	69fa      	ldr	r2, [r7, #28]
 8011880:	4b1e      	ldr	r3, [pc, #120]	; (80118fc <UART_EndRxTransfer+0xc8>)
 8011882:	4013      	ands	r3, r2
 8011884:	64bb      	str	r3, [r7, #72]	; 0x48
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	3308      	adds	r3, #8
 801188c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801188e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011890:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011892:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011896:	e841 2300 	strex	r3, r2, [r1]
 801189a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d1e5      	bne.n	801186e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118a6:	2b01      	cmp	r3, #1
 80118a8:	d118      	bne.n	80118dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	e853 3f00 	ldrex	r3, [r3]
 80118b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80118b8:	68bb      	ldr	r3, [r7, #8]
 80118ba:	f023 0310 	bic.w	r3, r3, #16
 80118be:	647b      	str	r3, [r7, #68]	; 0x44
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	461a      	mov	r2, r3
 80118c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118c8:	61bb      	str	r3, [r7, #24]
 80118ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118cc:	6979      	ldr	r1, [r7, #20]
 80118ce:	69ba      	ldr	r2, [r7, #24]
 80118d0:	e841 2300 	strex	r3, r2, [r1]
 80118d4:	613b      	str	r3, [r7, #16]
   return(result);
 80118d6:	693b      	ldr	r3, [r7, #16]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d1e6      	bne.n	80118aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	2220      	movs	r2, #32
 80118e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	2200      	movs	r2, #0
 80118e8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	2200      	movs	r2, #0
 80118ee:	675a      	str	r2, [r3, #116]	; 0x74
}
 80118f0:	bf00      	nop
 80118f2:	3754      	adds	r7, #84	; 0x54
 80118f4:	46bd      	mov	sp, r7
 80118f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fa:	4770      	bx	lr
 80118fc:	effffffe 	.word	0xeffffffe

08011900 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011900:	b480      	push	{r7}
 8011902:	b085      	sub	sp, #20
 8011904:	af00      	add	r7, sp, #0
 8011906:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801190e:	2b01      	cmp	r3, #1
 8011910:	d101      	bne.n	8011916 <HAL_UARTEx_DisableFifoMode+0x16>
 8011912:	2302      	movs	r3, #2
 8011914:	e027      	b.n	8011966 <HAL_UARTEx_DisableFifoMode+0x66>
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	2201      	movs	r2, #1
 801191a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	2224      	movs	r2, #36	; 0x24
 8011922:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	681a      	ldr	r2, [r3, #0]
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	f022 0201 	bic.w	r2, r2, #1
 801193c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011944:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	2200      	movs	r2, #0
 801194a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	68fa      	ldr	r2, [r7, #12]
 8011952:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	2220      	movs	r2, #32
 8011958:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	2200      	movs	r2, #0
 8011960:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011964:	2300      	movs	r3, #0
}
 8011966:	4618      	mov	r0, r3
 8011968:	3714      	adds	r7, #20
 801196a:	46bd      	mov	sp, r7
 801196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011970:	4770      	bx	lr

08011972 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011972:	b580      	push	{r7, lr}
 8011974:	b084      	sub	sp, #16
 8011976:	af00      	add	r7, sp, #0
 8011978:	6078      	str	r0, [r7, #4]
 801197a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011982:	2b01      	cmp	r3, #1
 8011984:	d101      	bne.n	801198a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011986:	2302      	movs	r3, #2
 8011988:	e02d      	b.n	80119e6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	2201      	movs	r2, #1
 801198e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	2224      	movs	r2, #36	; 0x24
 8011996:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	681a      	ldr	r2, [r3, #0]
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	f022 0201 	bic.w	r2, r2, #1
 80119b0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	689b      	ldr	r3, [r3, #8]
 80119b8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	683a      	ldr	r2, [r7, #0]
 80119c2:	430a      	orrs	r2, r1
 80119c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80119c6:	6878      	ldr	r0, [r7, #4]
 80119c8:	f000 f850 	bl	8011a6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	68fa      	ldr	r2, [r7, #12]
 80119d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	2220      	movs	r2, #32
 80119d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	2200      	movs	r2, #0
 80119e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80119e4:	2300      	movs	r3, #0
}
 80119e6:	4618      	mov	r0, r3
 80119e8:	3710      	adds	r7, #16
 80119ea:	46bd      	mov	sp, r7
 80119ec:	bd80      	pop	{r7, pc}

080119ee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80119ee:	b580      	push	{r7, lr}
 80119f0:	b084      	sub	sp, #16
 80119f2:	af00      	add	r7, sp, #0
 80119f4:	6078      	str	r0, [r7, #4]
 80119f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80119fe:	2b01      	cmp	r3, #1
 8011a00:	d101      	bne.n	8011a06 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011a02:	2302      	movs	r3, #2
 8011a04:	e02d      	b.n	8011a62 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	2201      	movs	r2, #1
 8011a0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	2224      	movs	r2, #36	; 0x24
 8011a12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	681a      	ldr	r2, [r3, #0]
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	f022 0201 	bic.w	r2, r2, #1
 8011a2c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	689b      	ldr	r3, [r3, #8]
 8011a34:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	683a      	ldr	r2, [r7, #0]
 8011a3e:	430a      	orrs	r2, r1
 8011a40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011a42:	6878      	ldr	r0, [r7, #4]
 8011a44:	f000 f812 	bl	8011a6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	68fa      	ldr	r2, [r7, #12]
 8011a4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	2220      	movs	r2, #32
 8011a54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011a60:	2300      	movs	r3, #0
}
 8011a62:	4618      	mov	r0, r3
 8011a64:	3710      	adds	r7, #16
 8011a66:	46bd      	mov	sp, r7
 8011a68:	bd80      	pop	{r7, pc}
	...

08011a6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011a6c:	b480      	push	{r7}
 8011a6e:	b085      	sub	sp, #20
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d108      	bne.n	8011a8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	2201      	movs	r2, #1
 8011a80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	2201      	movs	r2, #1
 8011a88:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011a8c:	e031      	b.n	8011af2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011a8e:	2310      	movs	r3, #16
 8011a90:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011a92:	2310      	movs	r3, #16
 8011a94:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	689b      	ldr	r3, [r3, #8]
 8011a9c:	0e5b      	lsrs	r3, r3, #25
 8011a9e:	b2db      	uxtb	r3, r3
 8011aa0:	f003 0307 	and.w	r3, r3, #7
 8011aa4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	689b      	ldr	r3, [r3, #8]
 8011aac:	0f5b      	lsrs	r3, r3, #29
 8011aae:	b2db      	uxtb	r3, r3
 8011ab0:	f003 0307 	and.w	r3, r3, #7
 8011ab4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011ab6:	7bbb      	ldrb	r3, [r7, #14]
 8011ab8:	7b3a      	ldrb	r2, [r7, #12]
 8011aba:	4911      	ldr	r1, [pc, #68]	; (8011b00 <UARTEx_SetNbDataToProcess+0x94>)
 8011abc:	5c8a      	ldrb	r2, [r1, r2]
 8011abe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011ac2:	7b3a      	ldrb	r2, [r7, #12]
 8011ac4:	490f      	ldr	r1, [pc, #60]	; (8011b04 <UARTEx_SetNbDataToProcess+0x98>)
 8011ac6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011ac8:	fb93 f3f2 	sdiv	r3, r3, r2
 8011acc:	b29a      	uxth	r2, r3
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011ad4:	7bfb      	ldrb	r3, [r7, #15]
 8011ad6:	7b7a      	ldrb	r2, [r7, #13]
 8011ad8:	4909      	ldr	r1, [pc, #36]	; (8011b00 <UARTEx_SetNbDataToProcess+0x94>)
 8011ada:	5c8a      	ldrb	r2, [r1, r2]
 8011adc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011ae0:	7b7a      	ldrb	r2, [r7, #13]
 8011ae2:	4908      	ldr	r1, [pc, #32]	; (8011b04 <UARTEx_SetNbDataToProcess+0x98>)
 8011ae4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011ae6:	fb93 f3f2 	sdiv	r3, r3, r2
 8011aea:	b29a      	uxth	r2, r3
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011af2:	bf00      	nop
 8011af4:	3714      	adds	r7, #20
 8011af6:	46bd      	mov	sp, r7
 8011af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011afc:	4770      	bx	lr
 8011afe:	bf00      	nop
 8011b00:	0801bb78 	.word	0x0801bb78
 8011b04:	0801bb80 	.word	0x0801bb80

08011b08 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8011b08:	b084      	sub	sp, #16
 8011b0a:	b480      	push	{r7}
 8011b0c:	b085      	sub	sp, #20
 8011b0e:	af00      	add	r7, sp, #0
 8011b10:	6078      	str	r0, [r7, #4]
 8011b12:	f107 001c 	add.w	r0, r7, #28
 8011b16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8011b1e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8011b20:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8011b22:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8011b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8011b26:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8011b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8011b2a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8011b2e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8011b30:	68fa      	ldr	r2, [r7, #12]
 8011b32:	4313      	orrs	r3, r2
 8011b34:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	685a      	ldr	r2, [r3, #4]
 8011b3a:	4b07      	ldr	r3, [pc, #28]	; (8011b58 <SDMMC_Init+0x50>)
 8011b3c:	4013      	ands	r3, r2
 8011b3e:	68fa      	ldr	r2, [r7, #12]
 8011b40:	431a      	orrs	r2, r3
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8011b46:	2300      	movs	r3, #0
}
 8011b48:	4618      	mov	r0, r3
 8011b4a:	3714      	adds	r7, #20
 8011b4c:	46bd      	mov	sp, r7
 8011b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b52:	b004      	add	sp, #16
 8011b54:	4770      	bx	lr
 8011b56:	bf00      	nop
 8011b58:	ffc02c00 	.word	0xffc02c00

08011b5c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8011b5c:	b480      	push	{r7}
 8011b5e:	b083      	sub	sp, #12
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	370c      	adds	r7, #12
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b74:	4770      	bx	lr

08011b76 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8011b76:	b480      	push	{r7}
 8011b78:	b083      	sub	sp, #12
 8011b7a:	af00      	add	r7, sp, #0
 8011b7c:	6078      	str	r0, [r7, #4]
 8011b7e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8011b80:	683b      	ldr	r3, [r7, #0]
 8011b82:	681a      	ldr	r2, [r3, #0]
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011b8a:	2300      	movs	r3, #0
}
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	370c      	adds	r7, #12
 8011b90:	46bd      	mov	sp, r7
 8011b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b96:	4770      	bx	lr

08011b98 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8011b98:	b480      	push	{r7}
 8011b9a:	b083      	sub	sp, #12
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	f043 0203 	orr.w	r2, r3, #3
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8011bac:	2300      	movs	r3, #0
}
 8011bae:	4618      	mov	r0, r3
 8011bb0:	370c      	adds	r7, #12
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb8:	4770      	bx	lr

08011bba <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8011bba:	b480      	push	{r7}
 8011bbc:	b083      	sub	sp, #12
 8011bbe:	af00      	add	r7, sp, #0
 8011bc0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	f003 0303 	and.w	r3, r3, #3
}
 8011bca:	4618      	mov	r0, r3
 8011bcc:	370c      	adds	r7, #12
 8011bce:	46bd      	mov	sp, r7
 8011bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd4:	4770      	bx	lr
	...

08011bd8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8011bd8:	b480      	push	{r7}
 8011bda:	b085      	sub	sp, #20
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	6078      	str	r0, [r7, #4]
 8011be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011be2:	2300      	movs	r3, #0
 8011be4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8011be6:	683b      	ldr	r3, [r7, #0]
 8011be8:	681a      	ldr	r2, [r3, #0]
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011bee:	683b      	ldr	r3, [r7, #0]
 8011bf0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8011bf2:	683b      	ldr	r3, [r7, #0]
 8011bf4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011bf6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8011bf8:	683b      	ldr	r3, [r7, #0]
 8011bfa:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8011bfc:	431a      	orrs	r2, r3
                       Command->CPSM);
 8011bfe:	683b      	ldr	r3, [r7, #0]
 8011c00:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8011c02:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011c04:	68fa      	ldr	r2, [r7, #12]
 8011c06:	4313      	orrs	r3, r2
 8011c08:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	68da      	ldr	r2, [r3, #12]
 8011c0e:	4b06      	ldr	r3, [pc, #24]	; (8011c28 <SDMMC_SendCommand+0x50>)
 8011c10:	4013      	ands	r3, r2
 8011c12:	68fa      	ldr	r2, [r7, #12]
 8011c14:	431a      	orrs	r2, r3
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011c1a:	2300      	movs	r3, #0
}
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	3714      	adds	r7, #20
 8011c20:	46bd      	mov	sp, r7
 8011c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c26:	4770      	bx	lr
 8011c28:	fffee0c0 	.word	0xfffee0c0

08011c2c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8011c2c:	b480      	push	{r7}
 8011c2e:	b083      	sub	sp, #12
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	691b      	ldr	r3, [r3, #16]
 8011c38:	b2db      	uxtb	r3, r3
}
 8011c3a:	4618      	mov	r0, r3
 8011c3c:	370c      	adds	r7, #12
 8011c3e:	46bd      	mov	sp, r7
 8011c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c44:	4770      	bx	lr

08011c46 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8011c46:	b480      	push	{r7}
 8011c48:	b085      	sub	sp, #20
 8011c4a:	af00      	add	r7, sp, #0
 8011c4c:	6078      	str	r0, [r7, #4]
 8011c4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	3314      	adds	r3, #20
 8011c54:	461a      	mov	r2, r3
 8011c56:	683b      	ldr	r3, [r7, #0]
 8011c58:	4413      	add	r3, r2
 8011c5a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	681b      	ldr	r3, [r3, #0]
}
 8011c60:	4618      	mov	r0, r3
 8011c62:	3714      	adds	r7, #20
 8011c64:	46bd      	mov	sp, r7
 8011c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c6a:	4770      	bx	lr

08011c6c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8011c6c:	b480      	push	{r7}
 8011c6e:	b085      	sub	sp, #20
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	6078      	str	r0, [r7, #4]
 8011c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011c76:	2300      	movs	r3, #0
 8011c78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8011c7a:	683b      	ldr	r3, [r7, #0]
 8011c7c:	681a      	ldr	r2, [r3, #0]
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8011c82:	683b      	ldr	r3, [r7, #0]
 8011c84:	685a      	ldr	r2, [r3, #4]
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011c8a:	683b      	ldr	r3, [r7, #0]
 8011c8c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8011c8e:	683b      	ldr	r3, [r7, #0]
 8011c90:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011c92:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8011c94:	683b      	ldr	r3, [r7, #0]
 8011c96:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8011c98:	431a      	orrs	r2, r3
                       Data->DPSM);
 8011c9a:	683b      	ldr	r3, [r7, #0]
 8011c9c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8011c9e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011ca0:	68fa      	ldr	r2, [r7, #12]
 8011ca2:	4313      	orrs	r3, r2
 8011ca4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011caa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	431a      	orrs	r2, r3
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8011cb6:	2300      	movs	r3, #0

}
 8011cb8:	4618      	mov	r0, r3
 8011cba:	3714      	adds	r7, #20
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc2:	4770      	bx	lr

08011cc4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8011cc4:	b580      	push	{r7, lr}
 8011cc6:	b088      	sub	sp, #32
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	6078      	str	r0, [r7, #4]
 8011ccc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8011cce:	683b      	ldr	r3, [r7, #0]
 8011cd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8011cd2:	2310      	movs	r3, #16
 8011cd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011cd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011cda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011cdc:	2300      	movs	r3, #0
 8011cde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011ce0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011ce4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011ce6:	f107 0308 	add.w	r3, r7, #8
 8011cea:	4619      	mov	r1, r3
 8011cec:	6878      	ldr	r0, [r7, #4]
 8011cee:	f7ff ff73 	bl	8011bd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8011cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8011cf6:	2110      	movs	r1, #16
 8011cf8:	6878      	ldr	r0, [r7, #4]
 8011cfa:	f000 fa5f 	bl	80121bc <SDMMC_GetCmdResp1>
 8011cfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011d00:	69fb      	ldr	r3, [r7, #28]
}
 8011d02:	4618      	mov	r0, r3
 8011d04:	3720      	adds	r7, #32
 8011d06:	46bd      	mov	sp, r7
 8011d08:	bd80      	pop	{r7, pc}

08011d0a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011d0a:	b580      	push	{r7, lr}
 8011d0c:	b088      	sub	sp, #32
 8011d0e:	af00      	add	r7, sp, #0
 8011d10:	6078      	str	r0, [r7, #4]
 8011d12:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011d14:	683b      	ldr	r3, [r7, #0]
 8011d16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8011d18:	2311      	movs	r3, #17
 8011d1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011d1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011d20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011d22:	2300      	movs	r3, #0
 8011d24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011d26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011d2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011d2c:	f107 0308 	add.w	r3, r7, #8
 8011d30:	4619      	mov	r1, r3
 8011d32:	6878      	ldr	r0, [r7, #4]
 8011d34:	f7ff ff50 	bl	8011bd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8011d3c:	2111      	movs	r1, #17
 8011d3e:	6878      	ldr	r0, [r7, #4]
 8011d40:	f000 fa3c 	bl	80121bc <SDMMC_GetCmdResp1>
 8011d44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011d46:	69fb      	ldr	r3, [r7, #28]
}
 8011d48:	4618      	mov	r0, r3
 8011d4a:	3720      	adds	r7, #32
 8011d4c:	46bd      	mov	sp, r7
 8011d4e:	bd80      	pop	{r7, pc}

08011d50 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011d50:	b580      	push	{r7, lr}
 8011d52:	b088      	sub	sp, #32
 8011d54:	af00      	add	r7, sp, #0
 8011d56:	6078      	str	r0, [r7, #4]
 8011d58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011d5a:	683b      	ldr	r3, [r7, #0]
 8011d5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8011d5e:	2312      	movs	r3, #18
 8011d60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011d62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011d66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011d68:	2300      	movs	r3, #0
 8011d6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011d6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011d70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011d72:	f107 0308 	add.w	r3, r7, #8
 8011d76:	4619      	mov	r1, r3
 8011d78:	6878      	ldr	r0, [r7, #4]
 8011d7a:	f7ff ff2d 	bl	8011bd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011d82:	2112      	movs	r1, #18
 8011d84:	6878      	ldr	r0, [r7, #4]
 8011d86:	f000 fa19 	bl	80121bc <SDMMC_GetCmdResp1>
 8011d8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011d8c:	69fb      	ldr	r3, [r7, #28]
}
 8011d8e:	4618      	mov	r0, r3
 8011d90:	3720      	adds	r7, #32
 8011d92:	46bd      	mov	sp, r7
 8011d94:	bd80      	pop	{r7, pc}

08011d96 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011d96:	b580      	push	{r7, lr}
 8011d98:	b088      	sub	sp, #32
 8011d9a:	af00      	add	r7, sp, #0
 8011d9c:	6078      	str	r0, [r7, #4]
 8011d9e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011da0:	683b      	ldr	r3, [r7, #0]
 8011da2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8011da4:	2318      	movs	r3, #24
 8011da6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011da8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011dac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011dae:	2300      	movs	r3, #0
 8011db0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011db2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011db6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011db8:	f107 0308 	add.w	r3, r7, #8
 8011dbc:	4619      	mov	r1, r3
 8011dbe:	6878      	ldr	r0, [r7, #4]
 8011dc0:	f7ff ff0a 	bl	8011bd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8011dc8:	2118      	movs	r1, #24
 8011dca:	6878      	ldr	r0, [r7, #4]
 8011dcc:	f000 f9f6 	bl	80121bc <SDMMC_GetCmdResp1>
 8011dd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011dd2:	69fb      	ldr	r3, [r7, #28]
}
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	3720      	adds	r7, #32
 8011dd8:	46bd      	mov	sp, r7
 8011dda:	bd80      	pop	{r7, pc}

08011ddc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011ddc:	b580      	push	{r7, lr}
 8011dde:	b088      	sub	sp, #32
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	6078      	str	r0, [r7, #4]
 8011de4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011de6:	683b      	ldr	r3, [r7, #0]
 8011de8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8011dea:	2319      	movs	r3, #25
 8011dec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011dee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011df2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011df4:	2300      	movs	r3, #0
 8011df6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011df8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011dfc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011dfe:	f107 0308 	add.w	r3, r7, #8
 8011e02:	4619      	mov	r1, r3
 8011e04:	6878      	ldr	r0, [r7, #4]
 8011e06:	f7ff fee7 	bl	8011bd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8011e0e:	2119      	movs	r1, #25
 8011e10:	6878      	ldr	r0, [r7, #4]
 8011e12:	f000 f9d3 	bl	80121bc <SDMMC_GetCmdResp1>
 8011e16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011e18:	69fb      	ldr	r3, [r7, #28]
}
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	3720      	adds	r7, #32
 8011e1e:	46bd      	mov	sp, r7
 8011e20:	bd80      	pop	{r7, pc}
	...

08011e24 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8011e24:	b580      	push	{r7, lr}
 8011e26:	b088      	sub	sp, #32
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8011e2c:	2300      	movs	r3, #0
 8011e2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8011e30:	230c      	movs	r3, #12
 8011e32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011e34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011e38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011e3a:	2300      	movs	r3, #0
 8011e3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011e3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011e42:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	68db      	ldr	r3, [r3, #12]
 8011e48:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	68db      	ldr	r3, [r3, #12]
 8011e54:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011e5c:	f107 0308 	add.w	r3, r7, #8
 8011e60:	4619      	mov	r1, r3
 8011e62:	6878      	ldr	r0, [r7, #4]
 8011e64:	f7ff feb8 	bl	8011bd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8011e68:	4a0b      	ldr	r2, [pc, #44]	; (8011e98 <SDMMC_CmdStopTransfer+0x74>)
 8011e6a:	210c      	movs	r1, #12
 8011e6c:	6878      	ldr	r0, [r7, #4]
 8011e6e:	f000 f9a5 	bl	80121bc <SDMMC_GetCmdResp1>
 8011e72:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	68db      	ldr	r3, [r3, #12]
 8011e78:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8011e80:	69fb      	ldr	r3, [r7, #28]
 8011e82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011e86:	d101      	bne.n	8011e8c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8011e88:	2300      	movs	r3, #0
 8011e8a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8011e8c:	69fb      	ldr	r3, [r7, #28]
}
 8011e8e:	4618      	mov	r0, r3
 8011e90:	3720      	adds	r7, #32
 8011e92:	46bd      	mov	sp, r7
 8011e94:	bd80      	pop	{r7, pc}
 8011e96:	bf00      	nop
 8011e98:	05f5e100 	.word	0x05f5e100

08011e9c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8011e9c:	b580      	push	{r7, lr}
 8011e9e:	b088      	sub	sp, #32
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	6078      	str	r0, [r7, #4]
 8011ea4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8011ea6:	683b      	ldr	r3, [r7, #0]
 8011ea8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8011eaa:	2307      	movs	r3, #7
 8011eac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011eae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011eb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011eb4:	2300      	movs	r3, #0
 8011eb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011eb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011ebc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011ebe:	f107 0308 	add.w	r3, r7, #8
 8011ec2:	4619      	mov	r1, r3
 8011ec4:	6878      	ldr	r0, [r7, #4]
 8011ec6:	f7ff fe87 	bl	8011bd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8011eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8011ece:	2107      	movs	r1, #7
 8011ed0:	6878      	ldr	r0, [r7, #4]
 8011ed2:	f000 f973 	bl	80121bc <SDMMC_GetCmdResp1>
 8011ed6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011ed8:	69fb      	ldr	r3, [r7, #28]
}
 8011eda:	4618      	mov	r0, r3
 8011edc:	3720      	adds	r7, #32
 8011ede:	46bd      	mov	sp, r7
 8011ee0:	bd80      	pop	{r7, pc}

08011ee2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8011ee2:	b580      	push	{r7, lr}
 8011ee4:	b088      	sub	sp, #32
 8011ee6:	af00      	add	r7, sp, #0
 8011ee8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8011eea:	2300      	movs	r3, #0
 8011eec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8011eee:	2300      	movs	r3, #0
 8011ef0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011efa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011efe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011f00:	f107 0308 	add.w	r3, r7, #8
 8011f04:	4619      	mov	r1, r3
 8011f06:	6878      	ldr	r0, [r7, #4]
 8011f08:	f7ff fe66 	bl	8011bd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8011f0c:	6878      	ldr	r0, [r7, #4]
 8011f0e:	f000 fb97 	bl	8012640 <SDMMC_GetCmdError>
 8011f12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f14:	69fb      	ldr	r3, [r7, #28]
}
 8011f16:	4618      	mov	r0, r3
 8011f18:	3720      	adds	r7, #32
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	bd80      	pop	{r7, pc}

08011f1e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8011f1e:	b580      	push	{r7, lr}
 8011f20:	b088      	sub	sp, #32
 8011f22:	af00      	add	r7, sp, #0
 8011f24:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8011f26:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8011f2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8011f2c:	2308      	movs	r3, #8
 8011f2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011f30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011f34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011f36:	2300      	movs	r3, #0
 8011f38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011f3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011f3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011f40:	f107 0308 	add.w	r3, r7, #8
 8011f44:	4619      	mov	r1, r3
 8011f46:	6878      	ldr	r0, [r7, #4]
 8011f48:	f7ff fe46 	bl	8011bd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8011f4c:	6878      	ldr	r0, [r7, #4]
 8011f4e:	f000 fb29 	bl	80125a4 <SDMMC_GetCmdResp7>
 8011f52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f54:	69fb      	ldr	r3, [r7, #28]
}
 8011f56:	4618      	mov	r0, r3
 8011f58:	3720      	adds	r7, #32
 8011f5a:	46bd      	mov	sp, r7
 8011f5c:	bd80      	pop	{r7, pc}

08011f5e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011f5e:	b580      	push	{r7, lr}
 8011f60:	b088      	sub	sp, #32
 8011f62:	af00      	add	r7, sp, #0
 8011f64:	6078      	str	r0, [r7, #4]
 8011f66:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8011f68:	683b      	ldr	r3, [r7, #0]
 8011f6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8011f6c:	2337      	movs	r3, #55	; 0x37
 8011f6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011f70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011f74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011f76:	2300      	movs	r3, #0
 8011f78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011f7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011f7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011f80:	f107 0308 	add.w	r3, r7, #8
 8011f84:	4619      	mov	r1, r3
 8011f86:	6878      	ldr	r0, [r7, #4]
 8011f88:	f7ff fe26 	bl	8011bd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8011f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f90:	2137      	movs	r1, #55	; 0x37
 8011f92:	6878      	ldr	r0, [r7, #4]
 8011f94:	f000 f912 	bl	80121bc <SDMMC_GetCmdResp1>
 8011f98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f9a:	69fb      	ldr	r3, [r7, #28]
}
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	3720      	adds	r7, #32
 8011fa0:	46bd      	mov	sp, r7
 8011fa2:	bd80      	pop	{r7, pc}

08011fa4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	b088      	sub	sp, #32
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	6078      	str	r0, [r7, #4]
 8011fac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8011fae:	683b      	ldr	r3, [r7, #0]
 8011fb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8011fb2:	2329      	movs	r3, #41	; 0x29
 8011fb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011fb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011fba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011fc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011fc4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011fc6:	f107 0308 	add.w	r3, r7, #8
 8011fca:	4619      	mov	r1, r3
 8011fcc:	6878      	ldr	r0, [r7, #4]
 8011fce:	f7ff fe03 	bl	8011bd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8011fd2:	6878      	ldr	r0, [r7, #4]
 8011fd4:	f000 fa2e 	bl	8012434 <SDMMC_GetCmdResp3>
 8011fd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011fda:	69fb      	ldr	r3, [r7, #28]
}
 8011fdc:	4618      	mov	r0, r3
 8011fde:	3720      	adds	r7, #32
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bd80      	pop	{r7, pc}

08011fe4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b088      	sub	sp, #32
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	6078      	str	r0, [r7, #4]
 8011fec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8011fee:	683b      	ldr	r3, [r7, #0]
 8011ff0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8011ff2:	2306      	movs	r3, #6
 8011ff4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011ff6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011ffa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012000:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012004:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012006:	f107 0308 	add.w	r3, r7, #8
 801200a:	4619      	mov	r1, r3
 801200c:	6878      	ldr	r0, [r7, #4]
 801200e:	f7ff fde3 	bl	8011bd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8012012:	f241 3288 	movw	r2, #5000	; 0x1388
 8012016:	2106      	movs	r1, #6
 8012018:	6878      	ldr	r0, [r7, #4]
 801201a:	f000 f8cf 	bl	80121bc <SDMMC_GetCmdResp1>
 801201e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012020:	69fb      	ldr	r3, [r7, #28]
}
 8012022:	4618      	mov	r0, r3
 8012024:	3720      	adds	r7, #32
 8012026:	46bd      	mov	sp, r7
 8012028:	bd80      	pop	{r7, pc}

0801202a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801202a:	b580      	push	{r7, lr}
 801202c:	b088      	sub	sp, #32
 801202e:	af00      	add	r7, sp, #0
 8012030:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8012032:	2300      	movs	r3, #0
 8012034:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8012036:	2333      	movs	r3, #51	; 0x33
 8012038:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801203a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801203e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012040:	2300      	movs	r3, #0
 8012042:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012048:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801204a:	f107 0308 	add.w	r3, r7, #8
 801204e:	4619      	mov	r1, r3
 8012050:	6878      	ldr	r0, [r7, #4]
 8012052:	f7ff fdc1 	bl	8011bd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8012056:	f241 3288 	movw	r2, #5000	; 0x1388
 801205a:	2133      	movs	r1, #51	; 0x33
 801205c:	6878      	ldr	r0, [r7, #4]
 801205e:	f000 f8ad 	bl	80121bc <SDMMC_GetCmdResp1>
 8012062:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012064:	69fb      	ldr	r3, [r7, #28]
}
 8012066:	4618      	mov	r0, r3
 8012068:	3720      	adds	r7, #32
 801206a:	46bd      	mov	sp, r7
 801206c:	bd80      	pop	{r7, pc}

0801206e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 801206e:	b580      	push	{r7, lr}
 8012070:	b088      	sub	sp, #32
 8012072:	af00      	add	r7, sp, #0
 8012074:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8012076:	2300      	movs	r3, #0
 8012078:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801207a:	2302      	movs	r3, #2
 801207c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801207e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012082:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012084:	2300      	movs	r3, #0
 8012086:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012088:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801208c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801208e:	f107 0308 	add.w	r3, r7, #8
 8012092:	4619      	mov	r1, r3
 8012094:	6878      	ldr	r0, [r7, #4]
 8012096:	f7ff fd9f 	bl	8011bd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801209a:	6878      	ldr	r0, [r7, #4]
 801209c:	f000 f980 	bl	80123a0 <SDMMC_GetCmdResp2>
 80120a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80120a2:	69fb      	ldr	r3, [r7, #28]
}
 80120a4:	4618      	mov	r0, r3
 80120a6:	3720      	adds	r7, #32
 80120a8:	46bd      	mov	sp, r7
 80120aa:	bd80      	pop	{r7, pc}

080120ac <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80120ac:	b580      	push	{r7, lr}
 80120ae:	b088      	sub	sp, #32
 80120b0:	af00      	add	r7, sp, #0
 80120b2:	6078      	str	r0, [r7, #4]
 80120b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80120b6:	683b      	ldr	r3, [r7, #0]
 80120b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80120ba:	2309      	movs	r3, #9
 80120bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80120be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80120c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80120c4:	2300      	movs	r3, #0
 80120c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80120c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80120cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80120ce:	f107 0308 	add.w	r3, r7, #8
 80120d2:	4619      	mov	r1, r3
 80120d4:	6878      	ldr	r0, [r7, #4]
 80120d6:	f7ff fd7f 	bl	8011bd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80120da:	6878      	ldr	r0, [r7, #4]
 80120dc:	f000 f960 	bl	80123a0 <SDMMC_GetCmdResp2>
 80120e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80120e2:	69fb      	ldr	r3, [r7, #28]
}
 80120e4:	4618      	mov	r0, r3
 80120e6:	3720      	adds	r7, #32
 80120e8:	46bd      	mov	sp, r7
 80120ea:	bd80      	pop	{r7, pc}

080120ec <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80120ec:	b580      	push	{r7, lr}
 80120ee:	b088      	sub	sp, #32
 80120f0:	af00      	add	r7, sp, #0
 80120f2:	6078      	str	r0, [r7, #4]
 80120f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80120f6:	2300      	movs	r3, #0
 80120f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80120fa:	2303      	movs	r3, #3
 80120fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80120fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012102:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012104:	2300      	movs	r3, #0
 8012106:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801210c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801210e:	f107 0308 	add.w	r3, r7, #8
 8012112:	4619      	mov	r1, r3
 8012114:	6878      	ldr	r0, [r7, #4]
 8012116:	f7ff fd5f 	bl	8011bd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801211a:	683a      	ldr	r2, [r7, #0]
 801211c:	2103      	movs	r1, #3
 801211e:	6878      	ldr	r0, [r7, #4]
 8012120:	f000 f9c8 	bl	80124b4 <SDMMC_GetCmdResp6>
 8012124:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012126:	69fb      	ldr	r3, [r7, #28]
}
 8012128:	4618      	mov	r0, r3
 801212a:	3720      	adds	r7, #32
 801212c:	46bd      	mov	sp, r7
 801212e:	bd80      	pop	{r7, pc}

08012130 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012130:	b580      	push	{r7, lr}
 8012132:	b088      	sub	sp, #32
 8012134:	af00      	add	r7, sp, #0
 8012136:	6078      	str	r0, [r7, #4]
 8012138:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801213a:	683b      	ldr	r3, [r7, #0]
 801213c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801213e:	230d      	movs	r3, #13
 8012140:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012142:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012146:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012148:	2300      	movs	r3, #0
 801214a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801214c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012150:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012152:	f107 0308 	add.w	r3, r7, #8
 8012156:	4619      	mov	r1, r3
 8012158:	6878      	ldr	r0, [r7, #4]
 801215a:	f7ff fd3d 	bl	8011bd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801215e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012162:	210d      	movs	r1, #13
 8012164:	6878      	ldr	r0, [r7, #4]
 8012166:	f000 f829 	bl	80121bc <SDMMC_GetCmdResp1>
 801216a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801216c:	69fb      	ldr	r3, [r7, #28]
}
 801216e:	4618      	mov	r0, r3
 8012170:	3720      	adds	r7, #32
 8012172:	46bd      	mov	sp, r7
 8012174:	bd80      	pop	{r7, pc}

08012176 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8012176:	b580      	push	{r7, lr}
 8012178:	b088      	sub	sp, #32
 801217a:	af00      	add	r7, sp, #0
 801217c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801217e:	2300      	movs	r3, #0
 8012180:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8012182:	230d      	movs	r3, #13
 8012184:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012186:	f44f 7380 	mov.w	r3, #256	; 0x100
 801218a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801218c:	2300      	movs	r3, #0
 801218e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012190:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012194:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012196:	f107 0308 	add.w	r3, r7, #8
 801219a:	4619      	mov	r1, r3
 801219c:	6878      	ldr	r0, [r7, #4]
 801219e:	f7ff fd1b 	bl	8011bd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80121a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80121a6:	210d      	movs	r1, #13
 80121a8:	6878      	ldr	r0, [r7, #4]
 80121aa:	f000 f807 	bl	80121bc <SDMMC_GetCmdResp1>
 80121ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80121b0:	69fb      	ldr	r3, [r7, #28]
}
 80121b2:	4618      	mov	r0, r3
 80121b4:	3720      	adds	r7, #32
 80121b6:	46bd      	mov	sp, r7
 80121b8:	bd80      	pop	{r7, pc}
	...

080121bc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80121bc:	b580      	push	{r7, lr}
 80121be:	b088      	sub	sp, #32
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	60f8      	str	r0, [r7, #12]
 80121c4:	460b      	mov	r3, r1
 80121c6:	607a      	str	r2, [r7, #4]
 80121c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80121ca:	4b70      	ldr	r3, [pc, #448]	; (801238c <SDMMC_GetCmdResp1+0x1d0>)
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	4a70      	ldr	r2, [pc, #448]	; (8012390 <SDMMC_GetCmdResp1+0x1d4>)
 80121d0:	fba2 2303 	umull	r2, r3, r2, r3
 80121d4:	0a5a      	lsrs	r2, r3, #9
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	fb02 f303 	mul.w	r3, r2, r3
 80121dc:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80121de:	69fb      	ldr	r3, [r7, #28]
 80121e0:	1e5a      	subs	r2, r3, #1
 80121e2:	61fa      	str	r2, [r7, #28]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d102      	bne.n	80121ee <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80121e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80121ec:	e0c9      	b.n	8012382 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80121f2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80121f4:	69ba      	ldr	r2, [r7, #24]
 80121f6:	4b67      	ldr	r3, [pc, #412]	; (8012394 <SDMMC_GetCmdResp1+0x1d8>)
 80121f8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d0ef      	beq.n	80121de <SDMMC_GetCmdResp1+0x22>
 80121fe:	69bb      	ldr	r3, [r7, #24]
 8012200:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012204:	2b00      	cmp	r3, #0
 8012206:	d1ea      	bne.n	80121de <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012208:	68fb      	ldr	r3, [r7, #12]
 801220a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801220c:	f003 0304 	and.w	r3, r3, #4
 8012210:	2b00      	cmp	r3, #0
 8012212:	d004      	beq.n	801221e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	2204      	movs	r2, #4
 8012218:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801221a:	2304      	movs	r3, #4
 801221c:	e0b1      	b.n	8012382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012222:	f003 0301 	and.w	r3, r3, #1
 8012226:	2b00      	cmp	r3, #0
 8012228:	d004      	beq.n	8012234 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	2201      	movs	r2, #1
 801222e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012230:	2301      	movs	r3, #1
 8012232:	e0a6      	b.n	8012382 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	4a58      	ldr	r2, [pc, #352]	; (8012398 <SDMMC_GetCmdResp1+0x1dc>)
 8012238:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801223a:	68f8      	ldr	r0, [r7, #12]
 801223c:	f7ff fcf6 	bl	8011c2c <SDMMC_GetCommandResponse>
 8012240:	4603      	mov	r3, r0
 8012242:	461a      	mov	r2, r3
 8012244:	7afb      	ldrb	r3, [r7, #11]
 8012246:	4293      	cmp	r3, r2
 8012248:	d001      	beq.n	801224e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801224a:	2301      	movs	r3, #1
 801224c:	e099      	b.n	8012382 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801224e:	2100      	movs	r1, #0
 8012250:	68f8      	ldr	r0, [r7, #12]
 8012252:	f7ff fcf8 	bl	8011c46 <SDMMC_GetResponse>
 8012256:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012258:	697a      	ldr	r2, [r7, #20]
 801225a:	4b50      	ldr	r3, [pc, #320]	; (801239c <SDMMC_GetCmdResp1+0x1e0>)
 801225c:	4013      	ands	r3, r2
 801225e:	2b00      	cmp	r3, #0
 8012260:	d101      	bne.n	8012266 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8012262:	2300      	movs	r3, #0
 8012264:	e08d      	b.n	8012382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8012266:	697b      	ldr	r3, [r7, #20]
 8012268:	2b00      	cmp	r3, #0
 801226a:	da02      	bge.n	8012272 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801226c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012270:	e087      	b.n	8012382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8012272:	697b      	ldr	r3, [r7, #20]
 8012274:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012278:	2b00      	cmp	r3, #0
 801227a:	d001      	beq.n	8012280 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801227c:	2340      	movs	r3, #64	; 0x40
 801227e:	e080      	b.n	8012382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012280:	697b      	ldr	r3, [r7, #20]
 8012282:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012286:	2b00      	cmp	r3, #0
 8012288:	d001      	beq.n	801228e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801228a:	2380      	movs	r3, #128	; 0x80
 801228c:	e079      	b.n	8012382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801228e:	697b      	ldr	r3, [r7, #20]
 8012290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012294:	2b00      	cmp	r3, #0
 8012296:	d002      	beq.n	801229e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012298:	f44f 7380 	mov.w	r3, #256	; 0x100
 801229c:	e071      	b.n	8012382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801229e:	697b      	ldr	r3, [r7, #20]
 80122a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d002      	beq.n	80122ae <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80122a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80122ac:	e069      	b.n	8012382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80122ae:	697b      	ldr	r3, [r7, #20]
 80122b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d002      	beq.n	80122be <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80122b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80122bc:	e061      	b.n	8012382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80122be:	697b      	ldr	r3, [r7, #20]
 80122c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d002      	beq.n	80122ce <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80122c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80122cc:	e059      	b.n	8012382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80122ce:	697b      	ldr	r3, [r7, #20]
 80122d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d002      	beq.n	80122de <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80122d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80122dc:	e051      	b.n	8012382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80122de:	697b      	ldr	r3, [r7, #20]
 80122e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d002      	beq.n	80122ee <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80122e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80122ec:	e049      	b.n	8012382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80122ee:	697b      	ldr	r3, [r7, #20]
 80122f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d002      	beq.n	80122fe <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80122f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80122fc:	e041      	b.n	8012382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80122fe:	697b      	ldr	r3, [r7, #20]
 8012300:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012304:	2b00      	cmp	r3, #0
 8012306:	d002      	beq.n	801230e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8012308:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801230c:	e039      	b.n	8012382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801230e:	697b      	ldr	r3, [r7, #20]
 8012310:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012314:	2b00      	cmp	r3, #0
 8012316:	d002      	beq.n	801231e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012318:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801231c:	e031      	b.n	8012382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801231e:	697b      	ldr	r3, [r7, #20]
 8012320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012324:	2b00      	cmp	r3, #0
 8012326:	d002      	beq.n	801232e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012328:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801232c:	e029      	b.n	8012382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801232e:	697b      	ldr	r3, [r7, #20]
 8012330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012334:	2b00      	cmp	r3, #0
 8012336:	d002      	beq.n	801233e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012338:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801233c:	e021      	b.n	8012382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801233e:	697b      	ldr	r3, [r7, #20]
 8012340:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012344:	2b00      	cmp	r3, #0
 8012346:	d002      	beq.n	801234e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012348:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801234c:	e019      	b.n	8012382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801234e:	697b      	ldr	r3, [r7, #20]
 8012350:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012354:	2b00      	cmp	r3, #0
 8012356:	d002      	beq.n	801235e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012358:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801235c:	e011      	b.n	8012382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801235e:	697b      	ldr	r3, [r7, #20]
 8012360:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012364:	2b00      	cmp	r3, #0
 8012366:	d002      	beq.n	801236e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8012368:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801236c:	e009      	b.n	8012382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801236e:	697b      	ldr	r3, [r7, #20]
 8012370:	f003 0308 	and.w	r3, r3, #8
 8012374:	2b00      	cmp	r3, #0
 8012376:	d002      	beq.n	801237e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8012378:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801237c:	e001      	b.n	8012382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801237e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012382:	4618      	mov	r0, r3
 8012384:	3720      	adds	r7, #32
 8012386:	46bd      	mov	sp, r7
 8012388:	bd80      	pop	{r7, pc}
 801238a:	bf00      	nop
 801238c:	24000000 	.word	0x24000000
 8012390:	10624dd3 	.word	0x10624dd3
 8012394:	00200045 	.word	0x00200045
 8012398:	002000c5 	.word	0x002000c5
 801239c:	fdffe008 	.word	0xfdffe008

080123a0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80123a0:	b480      	push	{r7}
 80123a2:	b085      	sub	sp, #20
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80123a8:	4b1f      	ldr	r3, [pc, #124]	; (8012428 <SDMMC_GetCmdResp2+0x88>)
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	4a1f      	ldr	r2, [pc, #124]	; (801242c <SDMMC_GetCmdResp2+0x8c>)
 80123ae:	fba2 2303 	umull	r2, r3, r2, r3
 80123b2:	0a5b      	lsrs	r3, r3, #9
 80123b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80123b8:	fb02 f303 	mul.w	r3, r2, r3
 80123bc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	1e5a      	subs	r2, r3, #1
 80123c2:	60fa      	str	r2, [r7, #12]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d102      	bne.n	80123ce <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80123c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80123cc:	e026      	b.n	801241c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123d2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80123d4:	68bb      	ldr	r3, [r7, #8]
 80123d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d0ef      	beq.n	80123be <SDMMC_GetCmdResp2+0x1e>
 80123de:	68bb      	ldr	r3, [r7, #8]
 80123e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d1ea      	bne.n	80123be <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123ec:	f003 0304 	and.w	r3, r3, #4
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d004      	beq.n	80123fe <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	2204      	movs	r2, #4
 80123f8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80123fa:	2304      	movs	r3, #4
 80123fc:	e00e      	b.n	801241c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012402:	f003 0301 	and.w	r3, r3, #1
 8012406:	2b00      	cmp	r3, #0
 8012408:	d004      	beq.n	8012414 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	2201      	movs	r2, #1
 801240e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012410:	2301      	movs	r3, #1
 8012412:	e003      	b.n	801241c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	4a06      	ldr	r2, [pc, #24]	; (8012430 <SDMMC_GetCmdResp2+0x90>)
 8012418:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801241a:	2300      	movs	r3, #0
}
 801241c:	4618      	mov	r0, r3
 801241e:	3714      	adds	r7, #20
 8012420:	46bd      	mov	sp, r7
 8012422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012426:	4770      	bx	lr
 8012428:	24000000 	.word	0x24000000
 801242c:	10624dd3 	.word	0x10624dd3
 8012430:	002000c5 	.word	0x002000c5

08012434 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8012434:	b480      	push	{r7}
 8012436:	b085      	sub	sp, #20
 8012438:	af00      	add	r7, sp, #0
 801243a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801243c:	4b1a      	ldr	r3, [pc, #104]	; (80124a8 <SDMMC_GetCmdResp3+0x74>)
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	4a1a      	ldr	r2, [pc, #104]	; (80124ac <SDMMC_GetCmdResp3+0x78>)
 8012442:	fba2 2303 	umull	r2, r3, r2, r3
 8012446:	0a5b      	lsrs	r3, r3, #9
 8012448:	f241 3288 	movw	r2, #5000	; 0x1388
 801244c:	fb02 f303 	mul.w	r3, r2, r3
 8012450:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	1e5a      	subs	r2, r3, #1
 8012456:	60fa      	str	r2, [r7, #12]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d102      	bne.n	8012462 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801245c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012460:	e01b      	b.n	801249a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012466:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012468:	68bb      	ldr	r3, [r7, #8]
 801246a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801246e:	2b00      	cmp	r3, #0
 8012470:	d0ef      	beq.n	8012452 <SDMMC_GetCmdResp3+0x1e>
 8012472:	68bb      	ldr	r3, [r7, #8]
 8012474:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012478:	2b00      	cmp	r3, #0
 801247a:	d1ea      	bne.n	8012452 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012480:	f003 0304 	and.w	r3, r3, #4
 8012484:	2b00      	cmp	r3, #0
 8012486:	d004      	beq.n	8012492 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	2204      	movs	r2, #4
 801248c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801248e:	2304      	movs	r3, #4
 8012490:	e003      	b.n	801249a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	4a06      	ldr	r2, [pc, #24]	; (80124b0 <SDMMC_GetCmdResp3+0x7c>)
 8012496:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012498:	2300      	movs	r3, #0
}
 801249a:	4618      	mov	r0, r3
 801249c:	3714      	adds	r7, #20
 801249e:	46bd      	mov	sp, r7
 80124a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a4:	4770      	bx	lr
 80124a6:	bf00      	nop
 80124a8:	24000000 	.word	0x24000000
 80124ac:	10624dd3 	.word	0x10624dd3
 80124b0:	002000c5 	.word	0x002000c5

080124b4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80124b4:	b580      	push	{r7, lr}
 80124b6:	b088      	sub	sp, #32
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	60f8      	str	r0, [r7, #12]
 80124bc:	460b      	mov	r3, r1
 80124be:	607a      	str	r2, [r7, #4]
 80124c0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80124c2:	4b35      	ldr	r3, [pc, #212]	; (8012598 <SDMMC_GetCmdResp6+0xe4>)
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	4a35      	ldr	r2, [pc, #212]	; (801259c <SDMMC_GetCmdResp6+0xe8>)
 80124c8:	fba2 2303 	umull	r2, r3, r2, r3
 80124cc:	0a5b      	lsrs	r3, r3, #9
 80124ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80124d2:	fb02 f303 	mul.w	r3, r2, r3
 80124d6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80124d8:	69fb      	ldr	r3, [r7, #28]
 80124da:	1e5a      	subs	r2, r3, #1
 80124dc:	61fa      	str	r2, [r7, #28]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d102      	bne.n	80124e8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80124e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80124e6:	e052      	b.n	801258e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80124ec:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80124ee:	69bb      	ldr	r3, [r7, #24]
 80124f0:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d0ef      	beq.n	80124d8 <SDMMC_GetCmdResp6+0x24>
 80124f8:	69bb      	ldr	r3, [r7, #24]
 80124fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d1ea      	bne.n	80124d8 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012506:	f003 0304 	and.w	r3, r3, #4
 801250a:	2b00      	cmp	r3, #0
 801250c:	d004      	beq.n	8012518 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	2204      	movs	r2, #4
 8012512:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012514:	2304      	movs	r3, #4
 8012516:	e03a      	b.n	801258e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801251c:	f003 0301 	and.w	r3, r3, #1
 8012520:	2b00      	cmp	r3, #0
 8012522:	d004      	beq.n	801252e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	2201      	movs	r2, #1
 8012528:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801252a:	2301      	movs	r3, #1
 801252c:	e02f      	b.n	801258e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801252e:	68f8      	ldr	r0, [r7, #12]
 8012530:	f7ff fb7c 	bl	8011c2c <SDMMC_GetCommandResponse>
 8012534:	4603      	mov	r3, r0
 8012536:	461a      	mov	r2, r3
 8012538:	7afb      	ldrb	r3, [r7, #11]
 801253a:	4293      	cmp	r3, r2
 801253c:	d001      	beq.n	8012542 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801253e:	2301      	movs	r3, #1
 8012540:	e025      	b.n	801258e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	4a16      	ldr	r2, [pc, #88]	; (80125a0 <SDMMC_GetCmdResp6+0xec>)
 8012546:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012548:	2100      	movs	r1, #0
 801254a:	68f8      	ldr	r0, [r7, #12]
 801254c:	f7ff fb7b 	bl	8011c46 <SDMMC_GetResponse>
 8012550:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8012552:	697b      	ldr	r3, [r7, #20]
 8012554:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8012558:	2b00      	cmp	r3, #0
 801255a:	d106      	bne.n	801256a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 801255c:	697b      	ldr	r3, [r7, #20]
 801255e:	0c1b      	lsrs	r3, r3, #16
 8012560:	b29a      	uxth	r2, r3
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8012566:	2300      	movs	r3, #0
 8012568:	e011      	b.n	801258e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801256a:	697b      	ldr	r3, [r7, #20]
 801256c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012570:	2b00      	cmp	r3, #0
 8012572:	d002      	beq.n	801257a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012574:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012578:	e009      	b.n	801258e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801257a:	697b      	ldr	r3, [r7, #20]
 801257c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012580:	2b00      	cmp	r3, #0
 8012582:	d002      	beq.n	801258a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012584:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012588:	e001      	b.n	801258e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801258a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801258e:	4618      	mov	r0, r3
 8012590:	3720      	adds	r7, #32
 8012592:	46bd      	mov	sp, r7
 8012594:	bd80      	pop	{r7, pc}
 8012596:	bf00      	nop
 8012598:	24000000 	.word	0x24000000
 801259c:	10624dd3 	.word	0x10624dd3
 80125a0:	002000c5 	.word	0x002000c5

080125a4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80125a4:	b480      	push	{r7}
 80125a6:	b085      	sub	sp, #20
 80125a8:	af00      	add	r7, sp, #0
 80125aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80125ac:	4b22      	ldr	r3, [pc, #136]	; (8012638 <SDMMC_GetCmdResp7+0x94>)
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	4a22      	ldr	r2, [pc, #136]	; (801263c <SDMMC_GetCmdResp7+0x98>)
 80125b2:	fba2 2303 	umull	r2, r3, r2, r3
 80125b6:	0a5b      	lsrs	r3, r3, #9
 80125b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80125bc:	fb02 f303 	mul.w	r3, r2, r3
 80125c0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	1e5a      	subs	r2, r3, #1
 80125c6:	60fa      	str	r2, [r7, #12]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d102      	bne.n	80125d2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80125cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80125d0:	e02c      	b.n	801262c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125d6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80125d8:	68bb      	ldr	r3, [r7, #8]
 80125da:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d0ef      	beq.n	80125c2 <SDMMC_GetCmdResp7+0x1e>
 80125e2:	68bb      	ldr	r3, [r7, #8]
 80125e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d1ea      	bne.n	80125c2 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125f0:	f003 0304 	and.w	r3, r3, #4
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d004      	beq.n	8012602 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	2204      	movs	r2, #4
 80125fc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80125fe:	2304      	movs	r3, #4
 8012600:	e014      	b.n	801262c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012606:	f003 0301 	and.w	r3, r3, #1
 801260a:	2b00      	cmp	r3, #0
 801260c:	d004      	beq.n	8012618 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	2201      	movs	r2, #1
 8012612:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012614:	2301      	movs	r3, #1
 8012616:	e009      	b.n	801262c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801261c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012620:	2b00      	cmp	r3, #0
 8012622:	d002      	beq.n	801262a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	2240      	movs	r2, #64	; 0x40
 8012628:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801262a:	2300      	movs	r3, #0

}
 801262c:	4618      	mov	r0, r3
 801262e:	3714      	adds	r7, #20
 8012630:	46bd      	mov	sp, r7
 8012632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012636:	4770      	bx	lr
 8012638:	24000000 	.word	0x24000000
 801263c:	10624dd3 	.word	0x10624dd3

08012640 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8012640:	b480      	push	{r7}
 8012642:	b085      	sub	sp, #20
 8012644:	af00      	add	r7, sp, #0
 8012646:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012648:	4b11      	ldr	r3, [pc, #68]	; (8012690 <SDMMC_GetCmdError+0x50>)
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	4a11      	ldr	r2, [pc, #68]	; (8012694 <SDMMC_GetCmdError+0x54>)
 801264e:	fba2 2303 	umull	r2, r3, r2, r3
 8012652:	0a5b      	lsrs	r3, r3, #9
 8012654:	f241 3288 	movw	r2, #5000	; 0x1388
 8012658:	fb02 f303 	mul.w	r3, r2, r3
 801265c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	1e5a      	subs	r2, r3, #1
 8012662:	60fa      	str	r2, [r7, #12]
 8012664:	2b00      	cmp	r3, #0
 8012666:	d102      	bne.n	801266e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012668:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801266c:	e009      	b.n	8012682 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012676:	2b00      	cmp	r3, #0
 8012678:	d0f1      	beq.n	801265e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	4a06      	ldr	r2, [pc, #24]	; (8012698 <SDMMC_GetCmdError+0x58>)
 801267e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8012680:	2300      	movs	r3, #0
}
 8012682:	4618      	mov	r0, r3
 8012684:	3714      	adds	r7, #20
 8012686:	46bd      	mov	sp, r7
 8012688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801268c:	4770      	bx	lr
 801268e:	bf00      	nop
 8012690:	24000000 	.word	0x24000000
 8012694:	10624dd3 	.word	0x10624dd3
 8012698:	002000c5 	.word	0x002000c5

0801269c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801269c:	b084      	sub	sp, #16
 801269e:	b580      	push	{r7, lr}
 80126a0:	b084      	sub	sp, #16
 80126a2:	af00      	add	r7, sp, #0
 80126a4:	6078      	str	r0, [r7, #4]
 80126a6:	f107 001c 	add.w	r0, r7, #28
 80126aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80126ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126b0:	2b01      	cmp	r3, #1
 80126b2:	d120      	bne.n	80126f6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	68da      	ldr	r2, [r3, #12]
 80126c4:	4b2a      	ldr	r3, [pc, #168]	; (8012770 <USB_CoreInit+0xd4>)
 80126c6:	4013      	ands	r3, r2
 80126c8:	687a      	ldr	r2, [r7, #4]
 80126ca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	68db      	ldr	r3, [r3, #12]
 80126d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80126d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126da:	2b01      	cmp	r3, #1
 80126dc:	d105      	bne.n	80126ea <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	68db      	ldr	r3, [r3, #12]
 80126e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80126ea:	6878      	ldr	r0, [r7, #4]
 80126ec:	f001 faf8 	bl	8013ce0 <USB_CoreReset>
 80126f0:	4603      	mov	r3, r0
 80126f2:	73fb      	strb	r3, [r7, #15]
 80126f4:	e01a      	b.n	801272c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	68db      	ldr	r3, [r3, #12]
 80126fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012702:	6878      	ldr	r0, [r7, #4]
 8012704:	f001 faec 	bl	8013ce0 <USB_CoreReset>
 8012708:	4603      	mov	r3, r0
 801270a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801270c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801270e:	2b00      	cmp	r3, #0
 8012710:	d106      	bne.n	8012720 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012716:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	639a      	str	r2, [r3, #56]	; 0x38
 801271e:	e005      	b.n	801272c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012724:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801272e:	2b01      	cmp	r3, #1
 8012730:	d116      	bne.n	8012760 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012736:	b29a      	uxth	r2, r3
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012740:	4b0c      	ldr	r3, [pc, #48]	; (8012774 <USB_CoreInit+0xd8>)
 8012742:	4313      	orrs	r3, r2
 8012744:	687a      	ldr	r2, [r7, #4]
 8012746:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	689b      	ldr	r3, [r3, #8]
 801274c:	f043 0206 	orr.w	r2, r3, #6
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	689b      	ldr	r3, [r3, #8]
 8012758:	f043 0220 	orr.w	r2, r3, #32
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8012760:	7bfb      	ldrb	r3, [r7, #15]
}
 8012762:	4618      	mov	r0, r3
 8012764:	3710      	adds	r7, #16
 8012766:	46bd      	mov	sp, r7
 8012768:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801276c:	b004      	add	sp, #16
 801276e:	4770      	bx	lr
 8012770:	ffbdffbf 	.word	0xffbdffbf
 8012774:	03ee0000 	.word	0x03ee0000

08012778 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8012778:	b480      	push	{r7}
 801277a:	b087      	sub	sp, #28
 801277c:	af00      	add	r7, sp, #0
 801277e:	60f8      	str	r0, [r7, #12]
 8012780:	60b9      	str	r1, [r7, #8]
 8012782:	4613      	mov	r3, r2
 8012784:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8012786:	79fb      	ldrb	r3, [r7, #7]
 8012788:	2b02      	cmp	r3, #2
 801278a:	d165      	bne.n	8012858 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801278c:	68bb      	ldr	r3, [r7, #8]
 801278e:	4a41      	ldr	r2, [pc, #260]	; (8012894 <USB_SetTurnaroundTime+0x11c>)
 8012790:	4293      	cmp	r3, r2
 8012792:	d906      	bls.n	80127a2 <USB_SetTurnaroundTime+0x2a>
 8012794:	68bb      	ldr	r3, [r7, #8]
 8012796:	4a40      	ldr	r2, [pc, #256]	; (8012898 <USB_SetTurnaroundTime+0x120>)
 8012798:	4293      	cmp	r3, r2
 801279a:	d202      	bcs.n	80127a2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801279c:	230f      	movs	r3, #15
 801279e:	617b      	str	r3, [r7, #20]
 80127a0:	e062      	b.n	8012868 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80127a2:	68bb      	ldr	r3, [r7, #8]
 80127a4:	4a3c      	ldr	r2, [pc, #240]	; (8012898 <USB_SetTurnaroundTime+0x120>)
 80127a6:	4293      	cmp	r3, r2
 80127a8:	d306      	bcc.n	80127b8 <USB_SetTurnaroundTime+0x40>
 80127aa:	68bb      	ldr	r3, [r7, #8]
 80127ac:	4a3b      	ldr	r2, [pc, #236]	; (801289c <USB_SetTurnaroundTime+0x124>)
 80127ae:	4293      	cmp	r3, r2
 80127b0:	d202      	bcs.n	80127b8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80127b2:	230e      	movs	r3, #14
 80127b4:	617b      	str	r3, [r7, #20]
 80127b6:	e057      	b.n	8012868 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80127b8:	68bb      	ldr	r3, [r7, #8]
 80127ba:	4a38      	ldr	r2, [pc, #224]	; (801289c <USB_SetTurnaroundTime+0x124>)
 80127bc:	4293      	cmp	r3, r2
 80127be:	d306      	bcc.n	80127ce <USB_SetTurnaroundTime+0x56>
 80127c0:	68bb      	ldr	r3, [r7, #8]
 80127c2:	4a37      	ldr	r2, [pc, #220]	; (80128a0 <USB_SetTurnaroundTime+0x128>)
 80127c4:	4293      	cmp	r3, r2
 80127c6:	d202      	bcs.n	80127ce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80127c8:	230d      	movs	r3, #13
 80127ca:	617b      	str	r3, [r7, #20]
 80127cc:	e04c      	b.n	8012868 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80127ce:	68bb      	ldr	r3, [r7, #8]
 80127d0:	4a33      	ldr	r2, [pc, #204]	; (80128a0 <USB_SetTurnaroundTime+0x128>)
 80127d2:	4293      	cmp	r3, r2
 80127d4:	d306      	bcc.n	80127e4 <USB_SetTurnaroundTime+0x6c>
 80127d6:	68bb      	ldr	r3, [r7, #8]
 80127d8:	4a32      	ldr	r2, [pc, #200]	; (80128a4 <USB_SetTurnaroundTime+0x12c>)
 80127da:	4293      	cmp	r3, r2
 80127dc:	d802      	bhi.n	80127e4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80127de:	230c      	movs	r3, #12
 80127e0:	617b      	str	r3, [r7, #20]
 80127e2:	e041      	b.n	8012868 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80127e4:	68bb      	ldr	r3, [r7, #8]
 80127e6:	4a2f      	ldr	r2, [pc, #188]	; (80128a4 <USB_SetTurnaroundTime+0x12c>)
 80127e8:	4293      	cmp	r3, r2
 80127ea:	d906      	bls.n	80127fa <USB_SetTurnaroundTime+0x82>
 80127ec:	68bb      	ldr	r3, [r7, #8]
 80127ee:	4a2e      	ldr	r2, [pc, #184]	; (80128a8 <USB_SetTurnaroundTime+0x130>)
 80127f0:	4293      	cmp	r3, r2
 80127f2:	d802      	bhi.n	80127fa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80127f4:	230b      	movs	r3, #11
 80127f6:	617b      	str	r3, [r7, #20]
 80127f8:	e036      	b.n	8012868 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80127fa:	68bb      	ldr	r3, [r7, #8]
 80127fc:	4a2a      	ldr	r2, [pc, #168]	; (80128a8 <USB_SetTurnaroundTime+0x130>)
 80127fe:	4293      	cmp	r3, r2
 8012800:	d906      	bls.n	8012810 <USB_SetTurnaroundTime+0x98>
 8012802:	68bb      	ldr	r3, [r7, #8]
 8012804:	4a29      	ldr	r2, [pc, #164]	; (80128ac <USB_SetTurnaroundTime+0x134>)
 8012806:	4293      	cmp	r3, r2
 8012808:	d802      	bhi.n	8012810 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801280a:	230a      	movs	r3, #10
 801280c:	617b      	str	r3, [r7, #20]
 801280e:	e02b      	b.n	8012868 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8012810:	68bb      	ldr	r3, [r7, #8]
 8012812:	4a26      	ldr	r2, [pc, #152]	; (80128ac <USB_SetTurnaroundTime+0x134>)
 8012814:	4293      	cmp	r3, r2
 8012816:	d906      	bls.n	8012826 <USB_SetTurnaroundTime+0xae>
 8012818:	68bb      	ldr	r3, [r7, #8]
 801281a:	4a25      	ldr	r2, [pc, #148]	; (80128b0 <USB_SetTurnaroundTime+0x138>)
 801281c:	4293      	cmp	r3, r2
 801281e:	d202      	bcs.n	8012826 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8012820:	2309      	movs	r3, #9
 8012822:	617b      	str	r3, [r7, #20]
 8012824:	e020      	b.n	8012868 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8012826:	68bb      	ldr	r3, [r7, #8]
 8012828:	4a21      	ldr	r2, [pc, #132]	; (80128b0 <USB_SetTurnaroundTime+0x138>)
 801282a:	4293      	cmp	r3, r2
 801282c:	d306      	bcc.n	801283c <USB_SetTurnaroundTime+0xc4>
 801282e:	68bb      	ldr	r3, [r7, #8]
 8012830:	4a20      	ldr	r2, [pc, #128]	; (80128b4 <USB_SetTurnaroundTime+0x13c>)
 8012832:	4293      	cmp	r3, r2
 8012834:	d802      	bhi.n	801283c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8012836:	2308      	movs	r3, #8
 8012838:	617b      	str	r3, [r7, #20]
 801283a:	e015      	b.n	8012868 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801283c:	68bb      	ldr	r3, [r7, #8]
 801283e:	4a1d      	ldr	r2, [pc, #116]	; (80128b4 <USB_SetTurnaroundTime+0x13c>)
 8012840:	4293      	cmp	r3, r2
 8012842:	d906      	bls.n	8012852 <USB_SetTurnaroundTime+0xda>
 8012844:	68bb      	ldr	r3, [r7, #8]
 8012846:	4a1c      	ldr	r2, [pc, #112]	; (80128b8 <USB_SetTurnaroundTime+0x140>)
 8012848:	4293      	cmp	r3, r2
 801284a:	d202      	bcs.n	8012852 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 801284c:	2307      	movs	r3, #7
 801284e:	617b      	str	r3, [r7, #20]
 8012850:	e00a      	b.n	8012868 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8012852:	2306      	movs	r3, #6
 8012854:	617b      	str	r3, [r7, #20]
 8012856:	e007      	b.n	8012868 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8012858:	79fb      	ldrb	r3, [r7, #7]
 801285a:	2b00      	cmp	r3, #0
 801285c:	d102      	bne.n	8012864 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801285e:	2309      	movs	r3, #9
 8012860:	617b      	str	r3, [r7, #20]
 8012862:	e001      	b.n	8012868 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8012864:	2309      	movs	r3, #9
 8012866:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	68db      	ldr	r3, [r3, #12]
 801286c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	68da      	ldr	r2, [r3, #12]
 8012878:	697b      	ldr	r3, [r7, #20]
 801287a:	029b      	lsls	r3, r3, #10
 801287c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8012880:	431a      	orrs	r2, r3
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012886:	2300      	movs	r3, #0
}
 8012888:	4618      	mov	r0, r3
 801288a:	371c      	adds	r7, #28
 801288c:	46bd      	mov	sp, r7
 801288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012892:	4770      	bx	lr
 8012894:	00d8acbf 	.word	0x00d8acbf
 8012898:	00e4e1c0 	.word	0x00e4e1c0
 801289c:	00f42400 	.word	0x00f42400
 80128a0:	01067380 	.word	0x01067380
 80128a4:	011a499f 	.word	0x011a499f
 80128a8:	01312cff 	.word	0x01312cff
 80128ac:	014ca43f 	.word	0x014ca43f
 80128b0:	016e3600 	.word	0x016e3600
 80128b4:	01a6ab1f 	.word	0x01a6ab1f
 80128b8:	01e84800 	.word	0x01e84800

080128bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80128bc:	b480      	push	{r7}
 80128be:	b083      	sub	sp, #12
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	689b      	ldr	r3, [r3, #8]
 80128c8:	f043 0201 	orr.w	r2, r3, #1
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80128d0:	2300      	movs	r3, #0
}
 80128d2:	4618      	mov	r0, r3
 80128d4:	370c      	adds	r7, #12
 80128d6:	46bd      	mov	sp, r7
 80128d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128dc:	4770      	bx	lr

080128de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80128de:	b480      	push	{r7}
 80128e0:	b083      	sub	sp, #12
 80128e2:	af00      	add	r7, sp, #0
 80128e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	689b      	ldr	r3, [r3, #8]
 80128ea:	f023 0201 	bic.w	r2, r3, #1
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80128f2:	2300      	movs	r3, #0
}
 80128f4:	4618      	mov	r0, r3
 80128f6:	370c      	adds	r7, #12
 80128f8:	46bd      	mov	sp, r7
 80128fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128fe:	4770      	bx	lr

08012900 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012900:	b580      	push	{r7, lr}
 8012902:	b084      	sub	sp, #16
 8012904:	af00      	add	r7, sp, #0
 8012906:	6078      	str	r0, [r7, #4]
 8012908:	460b      	mov	r3, r1
 801290a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801290c:	2300      	movs	r3, #0
 801290e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	68db      	ldr	r3, [r3, #12]
 8012914:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801291c:	78fb      	ldrb	r3, [r7, #3]
 801291e:	2b01      	cmp	r3, #1
 8012920:	d115      	bne.n	801294e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	68db      	ldr	r3, [r3, #12]
 8012926:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801292e:	2001      	movs	r0, #1
 8012930:	f7f0 ffc0 	bl	80038b4 <HAL_Delay>
      ms++;
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	3301      	adds	r3, #1
 8012938:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801293a:	6878      	ldr	r0, [r7, #4]
 801293c:	f001 f93f 	bl	8013bbe <USB_GetMode>
 8012940:	4603      	mov	r3, r0
 8012942:	2b01      	cmp	r3, #1
 8012944:	d01e      	beq.n	8012984 <USB_SetCurrentMode+0x84>
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	2b31      	cmp	r3, #49	; 0x31
 801294a:	d9f0      	bls.n	801292e <USB_SetCurrentMode+0x2e>
 801294c:	e01a      	b.n	8012984 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801294e:	78fb      	ldrb	r3, [r7, #3]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d115      	bne.n	8012980 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	68db      	ldr	r3, [r3, #12]
 8012958:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012960:	2001      	movs	r0, #1
 8012962:	f7f0 ffa7 	bl	80038b4 <HAL_Delay>
      ms++;
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	3301      	adds	r3, #1
 801296a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 801296c:	6878      	ldr	r0, [r7, #4]
 801296e:	f001 f926 	bl	8013bbe <USB_GetMode>
 8012972:	4603      	mov	r3, r0
 8012974:	2b00      	cmp	r3, #0
 8012976:	d005      	beq.n	8012984 <USB_SetCurrentMode+0x84>
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	2b31      	cmp	r3, #49	; 0x31
 801297c:	d9f0      	bls.n	8012960 <USB_SetCurrentMode+0x60>
 801297e:	e001      	b.n	8012984 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8012980:	2301      	movs	r3, #1
 8012982:	e005      	b.n	8012990 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	2b32      	cmp	r3, #50	; 0x32
 8012988:	d101      	bne.n	801298e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801298a:	2301      	movs	r3, #1
 801298c:	e000      	b.n	8012990 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801298e:	2300      	movs	r3, #0
}
 8012990:	4618      	mov	r0, r3
 8012992:	3710      	adds	r7, #16
 8012994:	46bd      	mov	sp, r7
 8012996:	bd80      	pop	{r7, pc}

08012998 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012998:	b084      	sub	sp, #16
 801299a:	b580      	push	{r7, lr}
 801299c:	b086      	sub	sp, #24
 801299e:	af00      	add	r7, sp, #0
 80129a0:	6078      	str	r0, [r7, #4]
 80129a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80129a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80129aa:	2300      	movs	r3, #0
 80129ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80129b2:	2300      	movs	r3, #0
 80129b4:	613b      	str	r3, [r7, #16]
 80129b6:	e009      	b.n	80129cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80129b8:	687a      	ldr	r2, [r7, #4]
 80129ba:	693b      	ldr	r3, [r7, #16]
 80129bc:	3340      	adds	r3, #64	; 0x40
 80129be:	009b      	lsls	r3, r3, #2
 80129c0:	4413      	add	r3, r2
 80129c2:	2200      	movs	r2, #0
 80129c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80129c6:	693b      	ldr	r3, [r7, #16]
 80129c8:	3301      	adds	r3, #1
 80129ca:	613b      	str	r3, [r7, #16]
 80129cc:	693b      	ldr	r3, [r7, #16]
 80129ce:	2b0e      	cmp	r3, #14
 80129d0:	d9f2      	bls.n	80129b8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80129d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d11c      	bne.n	8012a12 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80129de:	685b      	ldr	r3, [r3, #4]
 80129e0:	68fa      	ldr	r2, [r7, #12]
 80129e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80129e6:	f043 0302 	orr.w	r3, r3, #2
 80129ea:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129f0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	601a      	str	r2, [r3, #0]
 8012a10:	e005      	b.n	8012a1e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a16:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012a24:	461a      	mov	r2, r3
 8012a26:	2300      	movs	r3, #0
 8012a28:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8012a2a:	68fb      	ldr	r3, [r7, #12]
 8012a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a30:	4619      	mov	r1, r3
 8012a32:	68fb      	ldr	r3, [r7, #12]
 8012a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a38:	461a      	mov	r2, r3
 8012a3a:	680b      	ldr	r3, [r1, #0]
 8012a3c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a40:	2b01      	cmp	r3, #1
 8012a42:	d10c      	bne.n	8012a5e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8012a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d104      	bne.n	8012a54 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8012a4a:	2100      	movs	r1, #0
 8012a4c:	6878      	ldr	r0, [r7, #4]
 8012a4e:	f000 f965 	bl	8012d1c <USB_SetDevSpeed>
 8012a52:	e008      	b.n	8012a66 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8012a54:	2101      	movs	r1, #1
 8012a56:	6878      	ldr	r0, [r7, #4]
 8012a58:	f000 f960 	bl	8012d1c <USB_SetDevSpeed>
 8012a5c:	e003      	b.n	8012a66 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8012a5e:	2103      	movs	r1, #3
 8012a60:	6878      	ldr	r0, [r7, #4]
 8012a62:	f000 f95b 	bl	8012d1c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012a66:	2110      	movs	r1, #16
 8012a68:	6878      	ldr	r0, [r7, #4]
 8012a6a:	f000 f8f3 	bl	8012c54 <USB_FlushTxFifo>
 8012a6e:	4603      	mov	r3, r0
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d001      	beq.n	8012a78 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8012a74:	2301      	movs	r3, #1
 8012a76:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012a78:	6878      	ldr	r0, [r7, #4]
 8012a7a:	f000 f91f 	bl	8012cbc <USB_FlushRxFifo>
 8012a7e:	4603      	mov	r3, r0
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d001      	beq.n	8012a88 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8012a84:	2301      	movs	r3, #1
 8012a86:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a8e:	461a      	mov	r2, r3
 8012a90:	2300      	movs	r3, #0
 8012a92:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a9a:	461a      	mov	r2, r3
 8012a9c:	2300      	movs	r3, #0
 8012a9e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012aa6:	461a      	mov	r2, r3
 8012aa8:	2300      	movs	r3, #0
 8012aaa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012aac:	2300      	movs	r3, #0
 8012aae:	613b      	str	r3, [r7, #16]
 8012ab0:	e043      	b.n	8012b3a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012ab2:	693b      	ldr	r3, [r7, #16]
 8012ab4:	015a      	lsls	r2, r3, #5
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	4413      	add	r3, r2
 8012aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012ac4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012ac8:	d118      	bne.n	8012afc <USB_DevInit+0x164>
    {
      if (i == 0U)
 8012aca:	693b      	ldr	r3, [r7, #16]
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d10a      	bne.n	8012ae6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8012ad0:	693b      	ldr	r3, [r7, #16]
 8012ad2:	015a      	lsls	r2, r3, #5
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	4413      	add	r3, r2
 8012ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012adc:	461a      	mov	r2, r3
 8012ade:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012ae2:	6013      	str	r3, [r2, #0]
 8012ae4:	e013      	b.n	8012b0e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8012ae6:	693b      	ldr	r3, [r7, #16]
 8012ae8:	015a      	lsls	r2, r3, #5
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	4413      	add	r3, r2
 8012aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012af2:	461a      	mov	r2, r3
 8012af4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012af8:	6013      	str	r3, [r2, #0]
 8012afa:	e008      	b.n	8012b0e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8012afc:	693b      	ldr	r3, [r7, #16]
 8012afe:	015a      	lsls	r2, r3, #5
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	4413      	add	r3, r2
 8012b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b08:	461a      	mov	r2, r3
 8012b0a:	2300      	movs	r3, #0
 8012b0c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8012b0e:	693b      	ldr	r3, [r7, #16]
 8012b10:	015a      	lsls	r2, r3, #5
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	4413      	add	r3, r2
 8012b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b1a:	461a      	mov	r2, r3
 8012b1c:	2300      	movs	r3, #0
 8012b1e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012b20:	693b      	ldr	r3, [r7, #16]
 8012b22:	015a      	lsls	r2, r3, #5
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	4413      	add	r3, r2
 8012b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b2c:	461a      	mov	r2, r3
 8012b2e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012b32:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012b34:	693b      	ldr	r3, [r7, #16]
 8012b36:	3301      	adds	r3, #1
 8012b38:	613b      	str	r3, [r7, #16]
 8012b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b3c:	693a      	ldr	r2, [r7, #16]
 8012b3e:	429a      	cmp	r2, r3
 8012b40:	d3b7      	bcc.n	8012ab2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012b42:	2300      	movs	r3, #0
 8012b44:	613b      	str	r3, [r7, #16]
 8012b46:	e043      	b.n	8012bd0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012b48:	693b      	ldr	r3, [r7, #16]
 8012b4a:	015a      	lsls	r2, r3, #5
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	4413      	add	r3, r2
 8012b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012b5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012b5e:	d118      	bne.n	8012b92 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8012b60:	693b      	ldr	r3, [r7, #16]
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d10a      	bne.n	8012b7c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8012b66:	693b      	ldr	r3, [r7, #16]
 8012b68:	015a      	lsls	r2, r3, #5
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	4413      	add	r3, r2
 8012b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b72:	461a      	mov	r2, r3
 8012b74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012b78:	6013      	str	r3, [r2, #0]
 8012b7a:	e013      	b.n	8012ba4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012b7c:	693b      	ldr	r3, [r7, #16]
 8012b7e:	015a      	lsls	r2, r3, #5
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	4413      	add	r3, r2
 8012b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b88:	461a      	mov	r2, r3
 8012b8a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012b8e:	6013      	str	r3, [r2, #0]
 8012b90:	e008      	b.n	8012ba4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012b92:	693b      	ldr	r3, [r7, #16]
 8012b94:	015a      	lsls	r2, r3, #5
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	4413      	add	r3, r2
 8012b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b9e:	461a      	mov	r2, r3
 8012ba0:	2300      	movs	r3, #0
 8012ba2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012ba4:	693b      	ldr	r3, [r7, #16]
 8012ba6:	015a      	lsls	r2, r3, #5
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	4413      	add	r3, r2
 8012bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012bb0:	461a      	mov	r2, r3
 8012bb2:	2300      	movs	r3, #0
 8012bb4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8012bb6:	693b      	ldr	r3, [r7, #16]
 8012bb8:	015a      	lsls	r2, r3, #5
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	4413      	add	r3, r2
 8012bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012bc2:	461a      	mov	r2, r3
 8012bc4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012bc8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012bca:	693b      	ldr	r3, [r7, #16]
 8012bcc:	3301      	adds	r3, #1
 8012bce:	613b      	str	r3, [r7, #16]
 8012bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bd2:	693a      	ldr	r2, [r7, #16]
 8012bd4:	429a      	cmp	r2, r3
 8012bd6:	d3b7      	bcc.n	8012b48 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012bde:	691b      	ldr	r3, [r3, #16]
 8012be0:	68fa      	ldr	r2, [r7, #12]
 8012be2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012be6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012bea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	2200      	movs	r2, #0
 8012bf0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8012bf8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8012bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d105      	bne.n	8012c0c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	699b      	ldr	r3, [r3, #24]
 8012c04:	f043 0210 	orr.w	r2, r3, #16
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	699a      	ldr	r2, [r3, #24]
 8012c10:	4b0e      	ldr	r3, [pc, #56]	; (8012c4c <USB_DevInit+0x2b4>)
 8012c12:	4313      	orrs	r3, r2
 8012c14:	687a      	ldr	r2, [r7, #4]
 8012c16:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8012c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d005      	beq.n	8012c2a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	699b      	ldr	r3, [r3, #24]
 8012c22:	f043 0208 	orr.w	r2, r3, #8
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8012c2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c2c:	2b01      	cmp	r3, #1
 8012c2e:	d105      	bne.n	8012c3c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	699a      	ldr	r2, [r3, #24]
 8012c34:	4b06      	ldr	r3, [pc, #24]	; (8012c50 <USB_DevInit+0x2b8>)
 8012c36:	4313      	orrs	r3, r2
 8012c38:	687a      	ldr	r2, [r7, #4]
 8012c3a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8012c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c3e:	4618      	mov	r0, r3
 8012c40:	3718      	adds	r7, #24
 8012c42:	46bd      	mov	sp, r7
 8012c44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012c48:	b004      	add	sp, #16
 8012c4a:	4770      	bx	lr
 8012c4c:	803c3800 	.word	0x803c3800
 8012c50:	40000004 	.word	0x40000004

08012c54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012c54:	b480      	push	{r7}
 8012c56:	b085      	sub	sp, #20
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	6078      	str	r0, [r7, #4]
 8012c5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012c5e:	2300      	movs	r3, #0
 8012c60:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	3301      	adds	r3, #1
 8012c66:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	4a13      	ldr	r2, [pc, #76]	; (8012cb8 <USB_FlushTxFifo+0x64>)
 8012c6c:	4293      	cmp	r3, r2
 8012c6e:	d901      	bls.n	8012c74 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8012c70:	2303      	movs	r3, #3
 8012c72:	e01b      	b.n	8012cac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	691b      	ldr	r3, [r3, #16]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	daf2      	bge.n	8012c62 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8012c7c:	2300      	movs	r3, #0
 8012c7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012c80:	683b      	ldr	r3, [r7, #0]
 8012c82:	019b      	lsls	r3, r3, #6
 8012c84:	f043 0220 	orr.w	r2, r3, #32
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	3301      	adds	r3, #1
 8012c90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	4a08      	ldr	r2, [pc, #32]	; (8012cb8 <USB_FlushTxFifo+0x64>)
 8012c96:	4293      	cmp	r3, r2
 8012c98:	d901      	bls.n	8012c9e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8012c9a:	2303      	movs	r3, #3
 8012c9c:	e006      	b.n	8012cac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	691b      	ldr	r3, [r3, #16]
 8012ca2:	f003 0320 	and.w	r3, r3, #32
 8012ca6:	2b20      	cmp	r3, #32
 8012ca8:	d0f0      	beq.n	8012c8c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8012caa:	2300      	movs	r3, #0
}
 8012cac:	4618      	mov	r0, r3
 8012cae:	3714      	adds	r7, #20
 8012cb0:	46bd      	mov	sp, r7
 8012cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb6:	4770      	bx	lr
 8012cb8:	00030d40 	.word	0x00030d40

08012cbc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012cbc:	b480      	push	{r7}
 8012cbe:	b085      	sub	sp, #20
 8012cc0:	af00      	add	r7, sp, #0
 8012cc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012cc4:	2300      	movs	r3, #0
 8012cc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	3301      	adds	r3, #1
 8012ccc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	4a11      	ldr	r2, [pc, #68]	; (8012d18 <USB_FlushRxFifo+0x5c>)
 8012cd2:	4293      	cmp	r3, r2
 8012cd4:	d901      	bls.n	8012cda <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8012cd6:	2303      	movs	r3, #3
 8012cd8:	e018      	b.n	8012d0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	691b      	ldr	r3, [r3, #16]
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	daf2      	bge.n	8012cc8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8012ce2:	2300      	movs	r3, #0
 8012ce4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	2210      	movs	r2, #16
 8012cea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	3301      	adds	r3, #1
 8012cf0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	4a08      	ldr	r2, [pc, #32]	; (8012d18 <USB_FlushRxFifo+0x5c>)
 8012cf6:	4293      	cmp	r3, r2
 8012cf8:	d901      	bls.n	8012cfe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8012cfa:	2303      	movs	r3, #3
 8012cfc:	e006      	b.n	8012d0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	691b      	ldr	r3, [r3, #16]
 8012d02:	f003 0310 	and.w	r3, r3, #16
 8012d06:	2b10      	cmp	r3, #16
 8012d08:	d0f0      	beq.n	8012cec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8012d0a:	2300      	movs	r3, #0
}
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	3714      	adds	r7, #20
 8012d10:	46bd      	mov	sp, r7
 8012d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d16:	4770      	bx	lr
 8012d18:	00030d40 	.word	0x00030d40

08012d1c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8012d1c:	b480      	push	{r7}
 8012d1e:	b085      	sub	sp, #20
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	6078      	str	r0, [r7, #4]
 8012d24:	460b      	mov	r3, r1
 8012d26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012d32:	681a      	ldr	r2, [r3, #0]
 8012d34:	78fb      	ldrb	r3, [r7, #3]
 8012d36:	68f9      	ldr	r1, [r7, #12]
 8012d38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012d3c:	4313      	orrs	r3, r2
 8012d3e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8012d40:	2300      	movs	r3, #0
}
 8012d42:	4618      	mov	r0, r3
 8012d44:	3714      	adds	r7, #20
 8012d46:	46bd      	mov	sp, r7
 8012d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d4c:	4770      	bx	lr

08012d4e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8012d4e:	b480      	push	{r7}
 8012d50:	b087      	sub	sp, #28
 8012d52:	af00      	add	r7, sp, #0
 8012d54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8012d5a:	693b      	ldr	r3, [r7, #16]
 8012d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012d60:	689b      	ldr	r3, [r3, #8]
 8012d62:	f003 0306 	and.w	r3, r3, #6
 8012d66:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d102      	bne.n	8012d74 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8012d6e:	2300      	movs	r3, #0
 8012d70:	75fb      	strb	r3, [r7, #23]
 8012d72:	e00a      	b.n	8012d8a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	2b02      	cmp	r3, #2
 8012d78:	d002      	beq.n	8012d80 <USB_GetDevSpeed+0x32>
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	2b06      	cmp	r3, #6
 8012d7e:	d102      	bne.n	8012d86 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8012d80:	2302      	movs	r3, #2
 8012d82:	75fb      	strb	r3, [r7, #23]
 8012d84:	e001      	b.n	8012d8a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8012d86:	230f      	movs	r3, #15
 8012d88:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8012d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d8c:	4618      	mov	r0, r3
 8012d8e:	371c      	adds	r7, #28
 8012d90:	46bd      	mov	sp, r7
 8012d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d96:	4770      	bx	lr

08012d98 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012d98:	b480      	push	{r7}
 8012d9a:	b085      	sub	sp, #20
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	6078      	str	r0, [r7, #4]
 8012da0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012da6:	683b      	ldr	r3, [r7, #0]
 8012da8:	781b      	ldrb	r3, [r3, #0]
 8012daa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012dac:	683b      	ldr	r3, [r7, #0]
 8012dae:	785b      	ldrb	r3, [r3, #1]
 8012db0:	2b01      	cmp	r3, #1
 8012db2:	d139      	bne.n	8012e28 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012dba:	69da      	ldr	r2, [r3, #28]
 8012dbc:	683b      	ldr	r3, [r7, #0]
 8012dbe:	781b      	ldrb	r3, [r3, #0]
 8012dc0:	f003 030f 	and.w	r3, r3, #15
 8012dc4:	2101      	movs	r1, #1
 8012dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8012dca:	b29b      	uxth	r3, r3
 8012dcc:	68f9      	ldr	r1, [r7, #12]
 8012dce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012dd2:	4313      	orrs	r3, r2
 8012dd4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8012dd6:	68bb      	ldr	r3, [r7, #8]
 8012dd8:	015a      	lsls	r2, r3, #5
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	4413      	add	r3, r2
 8012dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d153      	bne.n	8012e94 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012dec:	68bb      	ldr	r3, [r7, #8]
 8012dee:	015a      	lsls	r2, r3, #5
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	4413      	add	r3, r2
 8012df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012df8:	681a      	ldr	r2, [r3, #0]
 8012dfa:	683b      	ldr	r3, [r7, #0]
 8012dfc:	689b      	ldr	r3, [r3, #8]
 8012dfe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012e02:	683b      	ldr	r3, [r7, #0]
 8012e04:	791b      	ldrb	r3, [r3, #4]
 8012e06:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012e08:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012e0a:	68bb      	ldr	r3, [r7, #8]
 8012e0c:	059b      	lsls	r3, r3, #22
 8012e0e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012e10:	431a      	orrs	r2, r3
 8012e12:	68bb      	ldr	r3, [r7, #8]
 8012e14:	0159      	lsls	r1, r3, #5
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	440b      	add	r3, r1
 8012e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e1e:	4619      	mov	r1, r3
 8012e20:	4b20      	ldr	r3, [pc, #128]	; (8012ea4 <USB_ActivateEndpoint+0x10c>)
 8012e22:	4313      	orrs	r3, r2
 8012e24:	600b      	str	r3, [r1, #0]
 8012e26:	e035      	b.n	8012e94 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e2e:	69da      	ldr	r2, [r3, #28]
 8012e30:	683b      	ldr	r3, [r7, #0]
 8012e32:	781b      	ldrb	r3, [r3, #0]
 8012e34:	f003 030f 	and.w	r3, r3, #15
 8012e38:	2101      	movs	r1, #1
 8012e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8012e3e:	041b      	lsls	r3, r3, #16
 8012e40:	68f9      	ldr	r1, [r7, #12]
 8012e42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012e46:	4313      	orrs	r3, r2
 8012e48:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8012e4a:	68bb      	ldr	r3, [r7, #8]
 8012e4c:	015a      	lsls	r2, r3, #5
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	4413      	add	r3, r2
 8012e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d119      	bne.n	8012e94 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012e60:	68bb      	ldr	r3, [r7, #8]
 8012e62:	015a      	lsls	r2, r3, #5
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	4413      	add	r3, r2
 8012e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e6c:	681a      	ldr	r2, [r3, #0]
 8012e6e:	683b      	ldr	r3, [r7, #0]
 8012e70:	689b      	ldr	r3, [r3, #8]
 8012e72:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8012e76:	683b      	ldr	r3, [r7, #0]
 8012e78:	791b      	ldrb	r3, [r3, #4]
 8012e7a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012e7c:	430b      	orrs	r3, r1
 8012e7e:	431a      	orrs	r2, r3
 8012e80:	68bb      	ldr	r3, [r7, #8]
 8012e82:	0159      	lsls	r1, r3, #5
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	440b      	add	r3, r1
 8012e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e8c:	4619      	mov	r1, r3
 8012e8e:	4b05      	ldr	r3, [pc, #20]	; (8012ea4 <USB_ActivateEndpoint+0x10c>)
 8012e90:	4313      	orrs	r3, r2
 8012e92:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8012e94:	2300      	movs	r3, #0
}
 8012e96:	4618      	mov	r0, r3
 8012e98:	3714      	adds	r7, #20
 8012e9a:	46bd      	mov	sp, r7
 8012e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea0:	4770      	bx	lr
 8012ea2:	bf00      	nop
 8012ea4:	10008000 	.word	0x10008000

08012ea8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012ea8:	b480      	push	{r7}
 8012eaa:	b085      	sub	sp, #20
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	6078      	str	r0, [r7, #4]
 8012eb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012eb6:	683b      	ldr	r3, [r7, #0]
 8012eb8:	781b      	ldrb	r3, [r3, #0]
 8012eba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8012ebc:	683b      	ldr	r3, [r7, #0]
 8012ebe:	785b      	ldrb	r3, [r3, #1]
 8012ec0:	2b01      	cmp	r3, #1
 8012ec2:	d161      	bne.n	8012f88 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012ec4:	68bb      	ldr	r3, [r7, #8]
 8012ec6:	015a      	lsls	r2, r3, #5
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	4413      	add	r3, r2
 8012ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012ed6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012eda:	d11f      	bne.n	8012f1c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8012edc:	68bb      	ldr	r3, [r7, #8]
 8012ede:	015a      	lsls	r2, r3, #5
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	4413      	add	r3, r2
 8012ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	68ba      	ldr	r2, [r7, #8]
 8012eec:	0151      	lsls	r1, r2, #5
 8012eee:	68fa      	ldr	r2, [r7, #12]
 8012ef0:	440a      	add	r2, r1
 8012ef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012ef6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012efa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8012efc:	68bb      	ldr	r3, [r7, #8]
 8012efe:	015a      	lsls	r2, r3, #5
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	4413      	add	r3, r2
 8012f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	68ba      	ldr	r2, [r7, #8]
 8012f0c:	0151      	lsls	r1, r2, #5
 8012f0e:	68fa      	ldr	r2, [r7, #12]
 8012f10:	440a      	add	r2, r1
 8012f12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012f16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012f1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012f24:	683b      	ldr	r3, [r7, #0]
 8012f26:	781b      	ldrb	r3, [r3, #0]
 8012f28:	f003 030f 	and.w	r3, r3, #15
 8012f2c:	2101      	movs	r1, #1
 8012f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8012f32:	b29b      	uxth	r3, r3
 8012f34:	43db      	mvns	r3, r3
 8012f36:	68f9      	ldr	r1, [r7, #12]
 8012f38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012f3c:	4013      	ands	r3, r2
 8012f3e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f46:	69da      	ldr	r2, [r3, #28]
 8012f48:	683b      	ldr	r3, [r7, #0]
 8012f4a:	781b      	ldrb	r3, [r3, #0]
 8012f4c:	f003 030f 	and.w	r3, r3, #15
 8012f50:	2101      	movs	r1, #1
 8012f52:	fa01 f303 	lsl.w	r3, r1, r3
 8012f56:	b29b      	uxth	r3, r3
 8012f58:	43db      	mvns	r3, r3
 8012f5a:	68f9      	ldr	r1, [r7, #12]
 8012f5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012f60:	4013      	ands	r3, r2
 8012f62:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8012f64:	68bb      	ldr	r3, [r7, #8]
 8012f66:	015a      	lsls	r2, r3, #5
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	4413      	add	r3, r2
 8012f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f70:	681a      	ldr	r2, [r3, #0]
 8012f72:	68bb      	ldr	r3, [r7, #8]
 8012f74:	0159      	lsls	r1, r3, #5
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	440b      	add	r3, r1
 8012f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f7e:	4619      	mov	r1, r3
 8012f80:	4b35      	ldr	r3, [pc, #212]	; (8013058 <USB_DeactivateEndpoint+0x1b0>)
 8012f82:	4013      	ands	r3, r2
 8012f84:	600b      	str	r3, [r1, #0]
 8012f86:	e060      	b.n	801304a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012f88:	68bb      	ldr	r3, [r7, #8]
 8012f8a:	015a      	lsls	r2, r3, #5
 8012f8c:	68fb      	ldr	r3, [r7, #12]
 8012f8e:	4413      	add	r3, r2
 8012f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012f9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012f9e:	d11f      	bne.n	8012fe0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8012fa0:	68bb      	ldr	r3, [r7, #8]
 8012fa2:	015a      	lsls	r2, r3, #5
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	4413      	add	r3, r2
 8012fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	68ba      	ldr	r2, [r7, #8]
 8012fb0:	0151      	lsls	r1, r2, #5
 8012fb2:	68fa      	ldr	r2, [r7, #12]
 8012fb4:	440a      	add	r2, r1
 8012fb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012fba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012fbe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8012fc0:	68bb      	ldr	r3, [r7, #8]
 8012fc2:	015a      	lsls	r2, r3, #5
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	4413      	add	r3, r2
 8012fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	68ba      	ldr	r2, [r7, #8]
 8012fd0:	0151      	lsls	r1, r2, #5
 8012fd2:	68fa      	ldr	r2, [r7, #12]
 8012fd4:	440a      	add	r2, r1
 8012fd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012fda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012fde:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fe6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012fe8:	683b      	ldr	r3, [r7, #0]
 8012fea:	781b      	ldrb	r3, [r3, #0]
 8012fec:	f003 030f 	and.w	r3, r3, #15
 8012ff0:	2101      	movs	r1, #1
 8012ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8012ff6:	041b      	lsls	r3, r3, #16
 8012ff8:	43db      	mvns	r3, r3
 8012ffa:	68f9      	ldr	r1, [r7, #12]
 8012ffc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013000:	4013      	ands	r3, r2
 8013002:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801300a:	69da      	ldr	r2, [r3, #28]
 801300c:	683b      	ldr	r3, [r7, #0]
 801300e:	781b      	ldrb	r3, [r3, #0]
 8013010:	f003 030f 	and.w	r3, r3, #15
 8013014:	2101      	movs	r1, #1
 8013016:	fa01 f303 	lsl.w	r3, r1, r3
 801301a:	041b      	lsls	r3, r3, #16
 801301c:	43db      	mvns	r3, r3
 801301e:	68f9      	ldr	r1, [r7, #12]
 8013020:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013024:	4013      	ands	r3, r2
 8013026:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013028:	68bb      	ldr	r3, [r7, #8]
 801302a:	015a      	lsls	r2, r3, #5
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	4413      	add	r3, r2
 8013030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013034:	681a      	ldr	r2, [r3, #0]
 8013036:	68bb      	ldr	r3, [r7, #8]
 8013038:	0159      	lsls	r1, r3, #5
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	440b      	add	r3, r1
 801303e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013042:	4619      	mov	r1, r3
 8013044:	4b05      	ldr	r3, [pc, #20]	; (801305c <USB_DeactivateEndpoint+0x1b4>)
 8013046:	4013      	ands	r3, r2
 8013048:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801304a:	2300      	movs	r3, #0
}
 801304c:	4618      	mov	r0, r3
 801304e:	3714      	adds	r7, #20
 8013050:	46bd      	mov	sp, r7
 8013052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013056:	4770      	bx	lr
 8013058:	ec337800 	.word	0xec337800
 801305c:	eff37800 	.word	0xeff37800

08013060 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8013060:	b580      	push	{r7, lr}
 8013062:	b08a      	sub	sp, #40	; 0x28
 8013064:	af02      	add	r7, sp, #8
 8013066:	60f8      	str	r0, [r7, #12]
 8013068:	60b9      	str	r1, [r7, #8]
 801306a:	4613      	mov	r3, r2
 801306c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8013072:	68bb      	ldr	r3, [r7, #8]
 8013074:	781b      	ldrb	r3, [r3, #0]
 8013076:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013078:	68bb      	ldr	r3, [r7, #8]
 801307a:	785b      	ldrb	r3, [r3, #1]
 801307c:	2b01      	cmp	r3, #1
 801307e:	f040 8181 	bne.w	8013384 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8013082:	68bb      	ldr	r3, [r7, #8]
 8013084:	691b      	ldr	r3, [r3, #16]
 8013086:	2b00      	cmp	r3, #0
 8013088:	d132      	bne.n	80130f0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801308a:	69bb      	ldr	r3, [r7, #24]
 801308c:	015a      	lsls	r2, r3, #5
 801308e:	69fb      	ldr	r3, [r7, #28]
 8013090:	4413      	add	r3, r2
 8013092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013096:	691a      	ldr	r2, [r3, #16]
 8013098:	69bb      	ldr	r3, [r7, #24]
 801309a:	0159      	lsls	r1, r3, #5
 801309c:	69fb      	ldr	r3, [r7, #28]
 801309e:	440b      	add	r3, r1
 80130a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130a4:	4619      	mov	r1, r3
 80130a6:	4ba5      	ldr	r3, [pc, #660]	; (801333c <USB_EPStartXfer+0x2dc>)
 80130a8:	4013      	ands	r3, r2
 80130aa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80130ac:	69bb      	ldr	r3, [r7, #24]
 80130ae:	015a      	lsls	r2, r3, #5
 80130b0:	69fb      	ldr	r3, [r7, #28]
 80130b2:	4413      	add	r3, r2
 80130b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130b8:	691b      	ldr	r3, [r3, #16]
 80130ba:	69ba      	ldr	r2, [r7, #24]
 80130bc:	0151      	lsls	r1, r2, #5
 80130be:	69fa      	ldr	r2, [r7, #28]
 80130c0:	440a      	add	r2, r1
 80130c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80130c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80130ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80130cc:	69bb      	ldr	r3, [r7, #24]
 80130ce:	015a      	lsls	r2, r3, #5
 80130d0:	69fb      	ldr	r3, [r7, #28]
 80130d2:	4413      	add	r3, r2
 80130d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130d8:	691a      	ldr	r2, [r3, #16]
 80130da:	69bb      	ldr	r3, [r7, #24]
 80130dc:	0159      	lsls	r1, r3, #5
 80130de:	69fb      	ldr	r3, [r7, #28]
 80130e0:	440b      	add	r3, r1
 80130e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130e6:	4619      	mov	r1, r3
 80130e8:	4b95      	ldr	r3, [pc, #596]	; (8013340 <USB_EPStartXfer+0x2e0>)
 80130ea:	4013      	ands	r3, r2
 80130ec:	610b      	str	r3, [r1, #16]
 80130ee:	e092      	b.n	8013216 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80130f0:	69bb      	ldr	r3, [r7, #24]
 80130f2:	015a      	lsls	r2, r3, #5
 80130f4:	69fb      	ldr	r3, [r7, #28]
 80130f6:	4413      	add	r3, r2
 80130f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130fc:	691a      	ldr	r2, [r3, #16]
 80130fe:	69bb      	ldr	r3, [r7, #24]
 8013100:	0159      	lsls	r1, r3, #5
 8013102:	69fb      	ldr	r3, [r7, #28]
 8013104:	440b      	add	r3, r1
 8013106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801310a:	4619      	mov	r1, r3
 801310c:	4b8c      	ldr	r3, [pc, #560]	; (8013340 <USB_EPStartXfer+0x2e0>)
 801310e:	4013      	ands	r3, r2
 8013110:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013112:	69bb      	ldr	r3, [r7, #24]
 8013114:	015a      	lsls	r2, r3, #5
 8013116:	69fb      	ldr	r3, [r7, #28]
 8013118:	4413      	add	r3, r2
 801311a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801311e:	691a      	ldr	r2, [r3, #16]
 8013120:	69bb      	ldr	r3, [r7, #24]
 8013122:	0159      	lsls	r1, r3, #5
 8013124:	69fb      	ldr	r3, [r7, #28]
 8013126:	440b      	add	r3, r1
 8013128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801312c:	4619      	mov	r1, r3
 801312e:	4b83      	ldr	r3, [pc, #524]	; (801333c <USB_EPStartXfer+0x2dc>)
 8013130:	4013      	ands	r3, r2
 8013132:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8013134:	69bb      	ldr	r3, [r7, #24]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d11a      	bne.n	8013170 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 801313a:	68bb      	ldr	r3, [r7, #8]
 801313c:	691a      	ldr	r2, [r3, #16]
 801313e:	68bb      	ldr	r3, [r7, #8]
 8013140:	689b      	ldr	r3, [r3, #8]
 8013142:	429a      	cmp	r2, r3
 8013144:	d903      	bls.n	801314e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8013146:	68bb      	ldr	r3, [r7, #8]
 8013148:	689a      	ldr	r2, [r3, #8]
 801314a:	68bb      	ldr	r3, [r7, #8]
 801314c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801314e:	69bb      	ldr	r3, [r7, #24]
 8013150:	015a      	lsls	r2, r3, #5
 8013152:	69fb      	ldr	r3, [r7, #28]
 8013154:	4413      	add	r3, r2
 8013156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801315a:	691b      	ldr	r3, [r3, #16]
 801315c:	69ba      	ldr	r2, [r7, #24]
 801315e:	0151      	lsls	r1, r2, #5
 8013160:	69fa      	ldr	r2, [r7, #28]
 8013162:	440a      	add	r2, r1
 8013164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013168:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801316c:	6113      	str	r3, [r2, #16]
 801316e:	e01b      	b.n	80131a8 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013170:	69bb      	ldr	r3, [r7, #24]
 8013172:	015a      	lsls	r2, r3, #5
 8013174:	69fb      	ldr	r3, [r7, #28]
 8013176:	4413      	add	r3, r2
 8013178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801317c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801317e:	68bb      	ldr	r3, [r7, #8]
 8013180:	6919      	ldr	r1, [r3, #16]
 8013182:	68bb      	ldr	r3, [r7, #8]
 8013184:	689b      	ldr	r3, [r3, #8]
 8013186:	440b      	add	r3, r1
 8013188:	1e59      	subs	r1, r3, #1
 801318a:	68bb      	ldr	r3, [r7, #8]
 801318c:	689b      	ldr	r3, [r3, #8]
 801318e:	fbb1 f3f3 	udiv	r3, r1, r3
 8013192:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013194:	4b6b      	ldr	r3, [pc, #428]	; (8013344 <USB_EPStartXfer+0x2e4>)
 8013196:	400b      	ands	r3, r1
 8013198:	69b9      	ldr	r1, [r7, #24]
 801319a:	0148      	lsls	r0, r1, #5
 801319c:	69f9      	ldr	r1, [r7, #28]
 801319e:	4401      	add	r1, r0
 80131a0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80131a4:	4313      	orrs	r3, r2
 80131a6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80131a8:	69bb      	ldr	r3, [r7, #24]
 80131aa:	015a      	lsls	r2, r3, #5
 80131ac:	69fb      	ldr	r3, [r7, #28]
 80131ae:	4413      	add	r3, r2
 80131b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131b4:	691a      	ldr	r2, [r3, #16]
 80131b6:	68bb      	ldr	r3, [r7, #8]
 80131b8:	691b      	ldr	r3, [r3, #16]
 80131ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80131be:	69b9      	ldr	r1, [r7, #24]
 80131c0:	0148      	lsls	r0, r1, #5
 80131c2:	69f9      	ldr	r1, [r7, #28]
 80131c4:	4401      	add	r1, r0
 80131c6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80131ca:	4313      	orrs	r3, r2
 80131cc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80131ce:	68bb      	ldr	r3, [r7, #8]
 80131d0:	791b      	ldrb	r3, [r3, #4]
 80131d2:	2b01      	cmp	r3, #1
 80131d4:	d11f      	bne.n	8013216 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80131d6:	69bb      	ldr	r3, [r7, #24]
 80131d8:	015a      	lsls	r2, r3, #5
 80131da:	69fb      	ldr	r3, [r7, #28]
 80131dc:	4413      	add	r3, r2
 80131de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131e2:	691b      	ldr	r3, [r3, #16]
 80131e4:	69ba      	ldr	r2, [r7, #24]
 80131e6:	0151      	lsls	r1, r2, #5
 80131e8:	69fa      	ldr	r2, [r7, #28]
 80131ea:	440a      	add	r2, r1
 80131ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80131f0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80131f4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80131f6:	69bb      	ldr	r3, [r7, #24]
 80131f8:	015a      	lsls	r2, r3, #5
 80131fa:	69fb      	ldr	r3, [r7, #28]
 80131fc:	4413      	add	r3, r2
 80131fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013202:	691b      	ldr	r3, [r3, #16]
 8013204:	69ba      	ldr	r2, [r7, #24]
 8013206:	0151      	lsls	r1, r2, #5
 8013208:	69fa      	ldr	r2, [r7, #28]
 801320a:	440a      	add	r2, r1
 801320c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013210:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013214:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8013216:	79fb      	ldrb	r3, [r7, #7]
 8013218:	2b01      	cmp	r3, #1
 801321a:	d14b      	bne.n	80132b4 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801321c:	68bb      	ldr	r3, [r7, #8]
 801321e:	69db      	ldr	r3, [r3, #28]
 8013220:	2b00      	cmp	r3, #0
 8013222:	d009      	beq.n	8013238 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013224:	69bb      	ldr	r3, [r7, #24]
 8013226:	015a      	lsls	r2, r3, #5
 8013228:	69fb      	ldr	r3, [r7, #28]
 801322a:	4413      	add	r3, r2
 801322c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013230:	461a      	mov	r2, r3
 8013232:	68bb      	ldr	r3, [r7, #8]
 8013234:	69db      	ldr	r3, [r3, #28]
 8013236:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8013238:	68bb      	ldr	r3, [r7, #8]
 801323a:	791b      	ldrb	r3, [r3, #4]
 801323c:	2b01      	cmp	r3, #1
 801323e:	d128      	bne.n	8013292 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013240:	69fb      	ldr	r3, [r7, #28]
 8013242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013246:	689b      	ldr	r3, [r3, #8]
 8013248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801324c:	2b00      	cmp	r3, #0
 801324e:	d110      	bne.n	8013272 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013250:	69bb      	ldr	r3, [r7, #24]
 8013252:	015a      	lsls	r2, r3, #5
 8013254:	69fb      	ldr	r3, [r7, #28]
 8013256:	4413      	add	r3, r2
 8013258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	69ba      	ldr	r2, [r7, #24]
 8013260:	0151      	lsls	r1, r2, #5
 8013262:	69fa      	ldr	r2, [r7, #28]
 8013264:	440a      	add	r2, r1
 8013266:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801326a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801326e:	6013      	str	r3, [r2, #0]
 8013270:	e00f      	b.n	8013292 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013272:	69bb      	ldr	r3, [r7, #24]
 8013274:	015a      	lsls	r2, r3, #5
 8013276:	69fb      	ldr	r3, [r7, #28]
 8013278:	4413      	add	r3, r2
 801327a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	69ba      	ldr	r2, [r7, #24]
 8013282:	0151      	lsls	r1, r2, #5
 8013284:	69fa      	ldr	r2, [r7, #28]
 8013286:	440a      	add	r2, r1
 8013288:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801328c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013290:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013292:	69bb      	ldr	r3, [r7, #24]
 8013294:	015a      	lsls	r2, r3, #5
 8013296:	69fb      	ldr	r3, [r7, #28]
 8013298:	4413      	add	r3, r2
 801329a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	69ba      	ldr	r2, [r7, #24]
 80132a2:	0151      	lsls	r1, r2, #5
 80132a4:	69fa      	ldr	r2, [r7, #28]
 80132a6:	440a      	add	r2, r1
 80132a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80132ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80132b0:	6013      	str	r3, [r2, #0]
 80132b2:	e16a      	b.n	801358a <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80132b4:	69bb      	ldr	r3, [r7, #24]
 80132b6:	015a      	lsls	r2, r3, #5
 80132b8:	69fb      	ldr	r3, [r7, #28]
 80132ba:	4413      	add	r3, r2
 80132bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	69ba      	ldr	r2, [r7, #24]
 80132c4:	0151      	lsls	r1, r2, #5
 80132c6:	69fa      	ldr	r2, [r7, #28]
 80132c8:	440a      	add	r2, r1
 80132ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80132ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80132d2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80132d4:	68bb      	ldr	r3, [r7, #8]
 80132d6:	791b      	ldrb	r3, [r3, #4]
 80132d8:	2b01      	cmp	r3, #1
 80132da:	d015      	beq.n	8013308 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80132dc:	68bb      	ldr	r3, [r7, #8]
 80132de:	691b      	ldr	r3, [r3, #16]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	f000 8152 	beq.w	801358a <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80132e6:	69fb      	ldr	r3, [r7, #28]
 80132e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80132ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80132ee:	68bb      	ldr	r3, [r7, #8]
 80132f0:	781b      	ldrb	r3, [r3, #0]
 80132f2:	f003 030f 	and.w	r3, r3, #15
 80132f6:	2101      	movs	r1, #1
 80132f8:	fa01 f303 	lsl.w	r3, r1, r3
 80132fc:	69f9      	ldr	r1, [r7, #28]
 80132fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013302:	4313      	orrs	r3, r2
 8013304:	634b      	str	r3, [r1, #52]	; 0x34
 8013306:	e140      	b.n	801358a <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013308:	69fb      	ldr	r3, [r7, #28]
 801330a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801330e:	689b      	ldr	r3, [r3, #8]
 8013310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013314:	2b00      	cmp	r3, #0
 8013316:	d117      	bne.n	8013348 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013318:	69bb      	ldr	r3, [r7, #24]
 801331a:	015a      	lsls	r2, r3, #5
 801331c:	69fb      	ldr	r3, [r7, #28]
 801331e:	4413      	add	r3, r2
 8013320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	69ba      	ldr	r2, [r7, #24]
 8013328:	0151      	lsls	r1, r2, #5
 801332a:	69fa      	ldr	r2, [r7, #28]
 801332c:	440a      	add	r2, r1
 801332e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013332:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013336:	6013      	str	r3, [r2, #0]
 8013338:	e016      	b.n	8013368 <USB_EPStartXfer+0x308>
 801333a:	bf00      	nop
 801333c:	e007ffff 	.word	0xe007ffff
 8013340:	fff80000 	.word	0xfff80000
 8013344:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013348:	69bb      	ldr	r3, [r7, #24]
 801334a:	015a      	lsls	r2, r3, #5
 801334c:	69fb      	ldr	r3, [r7, #28]
 801334e:	4413      	add	r3, r2
 8013350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	69ba      	ldr	r2, [r7, #24]
 8013358:	0151      	lsls	r1, r2, #5
 801335a:	69fa      	ldr	r2, [r7, #28]
 801335c:	440a      	add	r2, r1
 801335e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013366:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8013368:	68bb      	ldr	r3, [r7, #8]
 801336a:	68d9      	ldr	r1, [r3, #12]
 801336c:	68bb      	ldr	r3, [r7, #8]
 801336e:	781a      	ldrb	r2, [r3, #0]
 8013370:	68bb      	ldr	r3, [r7, #8]
 8013372:	691b      	ldr	r3, [r3, #16]
 8013374:	b298      	uxth	r0, r3
 8013376:	79fb      	ldrb	r3, [r7, #7]
 8013378:	9300      	str	r3, [sp, #0]
 801337a:	4603      	mov	r3, r0
 801337c:	68f8      	ldr	r0, [r7, #12]
 801337e:	f000 f9b9 	bl	80136f4 <USB_WritePacket>
 8013382:	e102      	b.n	801358a <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013384:	69bb      	ldr	r3, [r7, #24]
 8013386:	015a      	lsls	r2, r3, #5
 8013388:	69fb      	ldr	r3, [r7, #28]
 801338a:	4413      	add	r3, r2
 801338c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013390:	691a      	ldr	r2, [r3, #16]
 8013392:	69bb      	ldr	r3, [r7, #24]
 8013394:	0159      	lsls	r1, r3, #5
 8013396:	69fb      	ldr	r3, [r7, #28]
 8013398:	440b      	add	r3, r1
 801339a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801339e:	4619      	mov	r1, r3
 80133a0:	4b7c      	ldr	r3, [pc, #496]	; (8013594 <USB_EPStartXfer+0x534>)
 80133a2:	4013      	ands	r3, r2
 80133a4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80133a6:	69bb      	ldr	r3, [r7, #24]
 80133a8:	015a      	lsls	r2, r3, #5
 80133aa:	69fb      	ldr	r3, [r7, #28]
 80133ac:	4413      	add	r3, r2
 80133ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133b2:	691a      	ldr	r2, [r3, #16]
 80133b4:	69bb      	ldr	r3, [r7, #24]
 80133b6:	0159      	lsls	r1, r3, #5
 80133b8:	69fb      	ldr	r3, [r7, #28]
 80133ba:	440b      	add	r3, r1
 80133bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133c0:	4619      	mov	r1, r3
 80133c2:	4b75      	ldr	r3, [pc, #468]	; (8013598 <USB_EPStartXfer+0x538>)
 80133c4:	4013      	ands	r3, r2
 80133c6:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80133c8:	69bb      	ldr	r3, [r7, #24]
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d12f      	bne.n	801342e <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80133ce:	68bb      	ldr	r3, [r7, #8]
 80133d0:	691b      	ldr	r3, [r3, #16]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d003      	beq.n	80133de <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 80133d6:	68bb      	ldr	r3, [r7, #8]
 80133d8:	689a      	ldr	r2, [r3, #8]
 80133da:	68bb      	ldr	r3, [r7, #8]
 80133dc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80133de:	68bb      	ldr	r3, [r7, #8]
 80133e0:	689a      	ldr	r2, [r3, #8]
 80133e2:	68bb      	ldr	r3, [r7, #8]
 80133e4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80133e6:	69bb      	ldr	r3, [r7, #24]
 80133e8:	015a      	lsls	r2, r3, #5
 80133ea:	69fb      	ldr	r3, [r7, #28]
 80133ec:	4413      	add	r3, r2
 80133ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133f2:	691a      	ldr	r2, [r3, #16]
 80133f4:	68bb      	ldr	r3, [r7, #8]
 80133f6:	6a1b      	ldr	r3, [r3, #32]
 80133f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80133fc:	69b9      	ldr	r1, [r7, #24]
 80133fe:	0148      	lsls	r0, r1, #5
 8013400:	69f9      	ldr	r1, [r7, #28]
 8013402:	4401      	add	r1, r0
 8013404:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013408:	4313      	orrs	r3, r2
 801340a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801340c:	69bb      	ldr	r3, [r7, #24]
 801340e:	015a      	lsls	r2, r3, #5
 8013410:	69fb      	ldr	r3, [r7, #28]
 8013412:	4413      	add	r3, r2
 8013414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013418:	691b      	ldr	r3, [r3, #16]
 801341a:	69ba      	ldr	r2, [r7, #24]
 801341c:	0151      	lsls	r1, r2, #5
 801341e:	69fa      	ldr	r2, [r7, #28]
 8013420:	440a      	add	r2, r1
 8013422:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013426:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801342a:	6113      	str	r3, [r2, #16]
 801342c:	e05f      	b.n	80134ee <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 801342e:	68bb      	ldr	r3, [r7, #8]
 8013430:	691b      	ldr	r3, [r3, #16]
 8013432:	2b00      	cmp	r3, #0
 8013434:	d123      	bne.n	801347e <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8013436:	69bb      	ldr	r3, [r7, #24]
 8013438:	015a      	lsls	r2, r3, #5
 801343a:	69fb      	ldr	r3, [r7, #28]
 801343c:	4413      	add	r3, r2
 801343e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013442:	691a      	ldr	r2, [r3, #16]
 8013444:	68bb      	ldr	r3, [r7, #8]
 8013446:	689b      	ldr	r3, [r3, #8]
 8013448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801344c:	69b9      	ldr	r1, [r7, #24]
 801344e:	0148      	lsls	r0, r1, #5
 8013450:	69f9      	ldr	r1, [r7, #28]
 8013452:	4401      	add	r1, r0
 8013454:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013458:	4313      	orrs	r3, r2
 801345a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801345c:	69bb      	ldr	r3, [r7, #24]
 801345e:	015a      	lsls	r2, r3, #5
 8013460:	69fb      	ldr	r3, [r7, #28]
 8013462:	4413      	add	r3, r2
 8013464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013468:	691b      	ldr	r3, [r3, #16]
 801346a:	69ba      	ldr	r2, [r7, #24]
 801346c:	0151      	lsls	r1, r2, #5
 801346e:	69fa      	ldr	r2, [r7, #28]
 8013470:	440a      	add	r2, r1
 8013472:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013476:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801347a:	6113      	str	r3, [r2, #16]
 801347c:	e037      	b.n	80134ee <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801347e:	68bb      	ldr	r3, [r7, #8]
 8013480:	691a      	ldr	r2, [r3, #16]
 8013482:	68bb      	ldr	r3, [r7, #8]
 8013484:	689b      	ldr	r3, [r3, #8]
 8013486:	4413      	add	r3, r2
 8013488:	1e5a      	subs	r2, r3, #1
 801348a:	68bb      	ldr	r3, [r7, #8]
 801348c:	689b      	ldr	r3, [r3, #8]
 801348e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013492:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8013494:	68bb      	ldr	r3, [r7, #8]
 8013496:	689b      	ldr	r3, [r3, #8]
 8013498:	8afa      	ldrh	r2, [r7, #22]
 801349a:	fb03 f202 	mul.w	r2, r3, r2
 801349e:	68bb      	ldr	r3, [r7, #8]
 80134a0:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80134a2:	69bb      	ldr	r3, [r7, #24]
 80134a4:	015a      	lsls	r2, r3, #5
 80134a6:	69fb      	ldr	r3, [r7, #28]
 80134a8:	4413      	add	r3, r2
 80134aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80134ae:	691a      	ldr	r2, [r3, #16]
 80134b0:	8afb      	ldrh	r3, [r7, #22]
 80134b2:	04d9      	lsls	r1, r3, #19
 80134b4:	4b39      	ldr	r3, [pc, #228]	; (801359c <USB_EPStartXfer+0x53c>)
 80134b6:	400b      	ands	r3, r1
 80134b8:	69b9      	ldr	r1, [r7, #24]
 80134ba:	0148      	lsls	r0, r1, #5
 80134bc:	69f9      	ldr	r1, [r7, #28]
 80134be:	4401      	add	r1, r0
 80134c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80134c4:	4313      	orrs	r3, r2
 80134c6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80134c8:	69bb      	ldr	r3, [r7, #24]
 80134ca:	015a      	lsls	r2, r3, #5
 80134cc:	69fb      	ldr	r3, [r7, #28]
 80134ce:	4413      	add	r3, r2
 80134d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80134d4:	691a      	ldr	r2, [r3, #16]
 80134d6:	68bb      	ldr	r3, [r7, #8]
 80134d8:	6a1b      	ldr	r3, [r3, #32]
 80134da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80134de:	69b9      	ldr	r1, [r7, #24]
 80134e0:	0148      	lsls	r0, r1, #5
 80134e2:	69f9      	ldr	r1, [r7, #28]
 80134e4:	4401      	add	r1, r0
 80134e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80134ea:	4313      	orrs	r3, r2
 80134ec:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80134ee:	79fb      	ldrb	r3, [r7, #7]
 80134f0:	2b01      	cmp	r3, #1
 80134f2:	d10d      	bne.n	8013510 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80134f4:	68bb      	ldr	r3, [r7, #8]
 80134f6:	68db      	ldr	r3, [r3, #12]
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d009      	beq.n	8013510 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80134fc:	68bb      	ldr	r3, [r7, #8]
 80134fe:	68d9      	ldr	r1, [r3, #12]
 8013500:	69bb      	ldr	r3, [r7, #24]
 8013502:	015a      	lsls	r2, r3, #5
 8013504:	69fb      	ldr	r3, [r7, #28]
 8013506:	4413      	add	r3, r2
 8013508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801350c:	460a      	mov	r2, r1
 801350e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8013510:	68bb      	ldr	r3, [r7, #8]
 8013512:	791b      	ldrb	r3, [r3, #4]
 8013514:	2b01      	cmp	r3, #1
 8013516:	d128      	bne.n	801356a <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013518:	69fb      	ldr	r3, [r7, #28]
 801351a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801351e:	689b      	ldr	r3, [r3, #8]
 8013520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013524:	2b00      	cmp	r3, #0
 8013526:	d110      	bne.n	801354a <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8013528:	69bb      	ldr	r3, [r7, #24]
 801352a:	015a      	lsls	r2, r3, #5
 801352c:	69fb      	ldr	r3, [r7, #28]
 801352e:	4413      	add	r3, r2
 8013530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	69ba      	ldr	r2, [r7, #24]
 8013538:	0151      	lsls	r1, r2, #5
 801353a:	69fa      	ldr	r2, [r7, #28]
 801353c:	440a      	add	r2, r1
 801353e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013542:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013546:	6013      	str	r3, [r2, #0]
 8013548:	e00f      	b.n	801356a <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801354a:	69bb      	ldr	r3, [r7, #24]
 801354c:	015a      	lsls	r2, r3, #5
 801354e:	69fb      	ldr	r3, [r7, #28]
 8013550:	4413      	add	r3, r2
 8013552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	69ba      	ldr	r2, [r7, #24]
 801355a:	0151      	lsls	r1, r2, #5
 801355c:	69fa      	ldr	r2, [r7, #28]
 801355e:	440a      	add	r2, r1
 8013560:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013568:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801356a:	69bb      	ldr	r3, [r7, #24]
 801356c:	015a      	lsls	r2, r3, #5
 801356e:	69fb      	ldr	r3, [r7, #28]
 8013570:	4413      	add	r3, r2
 8013572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013576:	681b      	ldr	r3, [r3, #0]
 8013578:	69ba      	ldr	r2, [r7, #24]
 801357a:	0151      	lsls	r1, r2, #5
 801357c:	69fa      	ldr	r2, [r7, #28]
 801357e:	440a      	add	r2, r1
 8013580:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013584:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013588:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801358a:	2300      	movs	r3, #0
}
 801358c:	4618      	mov	r0, r3
 801358e:	3720      	adds	r7, #32
 8013590:	46bd      	mov	sp, r7
 8013592:	bd80      	pop	{r7, pc}
 8013594:	fff80000 	.word	0xfff80000
 8013598:	e007ffff 	.word	0xe007ffff
 801359c:	1ff80000 	.word	0x1ff80000

080135a0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80135a0:	b480      	push	{r7}
 80135a2:	b087      	sub	sp, #28
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	6078      	str	r0, [r7, #4]
 80135a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80135aa:	2300      	movs	r3, #0
 80135ac:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80135ae:	2300      	movs	r3, #0
 80135b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80135b6:	683b      	ldr	r3, [r7, #0]
 80135b8:	785b      	ldrb	r3, [r3, #1]
 80135ba:	2b01      	cmp	r3, #1
 80135bc:	d14a      	bne.n	8013654 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80135be:	683b      	ldr	r3, [r7, #0]
 80135c0:	781b      	ldrb	r3, [r3, #0]
 80135c2:	015a      	lsls	r2, r3, #5
 80135c4:	693b      	ldr	r3, [r7, #16]
 80135c6:	4413      	add	r3, r2
 80135c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80135d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80135d6:	f040 8086 	bne.w	80136e6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80135da:	683b      	ldr	r3, [r7, #0]
 80135dc:	781b      	ldrb	r3, [r3, #0]
 80135de:	015a      	lsls	r2, r3, #5
 80135e0:	693b      	ldr	r3, [r7, #16]
 80135e2:	4413      	add	r3, r2
 80135e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	683a      	ldr	r2, [r7, #0]
 80135ec:	7812      	ldrb	r2, [r2, #0]
 80135ee:	0151      	lsls	r1, r2, #5
 80135f0:	693a      	ldr	r2, [r7, #16]
 80135f2:	440a      	add	r2, r1
 80135f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80135f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80135fc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80135fe:	683b      	ldr	r3, [r7, #0]
 8013600:	781b      	ldrb	r3, [r3, #0]
 8013602:	015a      	lsls	r2, r3, #5
 8013604:	693b      	ldr	r3, [r7, #16]
 8013606:	4413      	add	r3, r2
 8013608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	683a      	ldr	r2, [r7, #0]
 8013610:	7812      	ldrb	r2, [r2, #0]
 8013612:	0151      	lsls	r1, r2, #5
 8013614:	693a      	ldr	r2, [r7, #16]
 8013616:	440a      	add	r2, r1
 8013618:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801361c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013620:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	3301      	adds	r3, #1
 8013626:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	f242 7210 	movw	r2, #10000	; 0x2710
 801362e:	4293      	cmp	r3, r2
 8013630:	d902      	bls.n	8013638 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8013632:	2301      	movs	r3, #1
 8013634:	75fb      	strb	r3, [r7, #23]
          break;
 8013636:	e056      	b.n	80136e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8013638:	683b      	ldr	r3, [r7, #0]
 801363a:	781b      	ldrb	r3, [r3, #0]
 801363c:	015a      	lsls	r2, r3, #5
 801363e:	693b      	ldr	r3, [r7, #16]
 8013640:	4413      	add	r3, r2
 8013642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801364c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013650:	d0e7      	beq.n	8013622 <USB_EPStopXfer+0x82>
 8013652:	e048      	b.n	80136e6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013654:	683b      	ldr	r3, [r7, #0]
 8013656:	781b      	ldrb	r3, [r3, #0]
 8013658:	015a      	lsls	r2, r3, #5
 801365a:	693b      	ldr	r3, [r7, #16]
 801365c:	4413      	add	r3, r2
 801365e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013668:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801366c:	d13b      	bne.n	80136e6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801366e:	683b      	ldr	r3, [r7, #0]
 8013670:	781b      	ldrb	r3, [r3, #0]
 8013672:	015a      	lsls	r2, r3, #5
 8013674:	693b      	ldr	r3, [r7, #16]
 8013676:	4413      	add	r3, r2
 8013678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	683a      	ldr	r2, [r7, #0]
 8013680:	7812      	ldrb	r2, [r2, #0]
 8013682:	0151      	lsls	r1, r2, #5
 8013684:	693a      	ldr	r2, [r7, #16]
 8013686:	440a      	add	r2, r1
 8013688:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801368c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013690:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8013692:	683b      	ldr	r3, [r7, #0]
 8013694:	781b      	ldrb	r3, [r3, #0]
 8013696:	015a      	lsls	r2, r3, #5
 8013698:	693b      	ldr	r3, [r7, #16]
 801369a:	4413      	add	r3, r2
 801369c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	683a      	ldr	r2, [r7, #0]
 80136a4:	7812      	ldrb	r2, [r2, #0]
 80136a6:	0151      	lsls	r1, r2, #5
 80136a8:	693a      	ldr	r2, [r7, #16]
 80136aa:	440a      	add	r2, r1
 80136ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80136b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80136b4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	3301      	adds	r3, #1
 80136ba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	f242 7210 	movw	r2, #10000	; 0x2710
 80136c2:	4293      	cmp	r3, r2
 80136c4:	d902      	bls.n	80136cc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80136c6:	2301      	movs	r3, #1
 80136c8:	75fb      	strb	r3, [r7, #23]
          break;
 80136ca:	e00c      	b.n	80136e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80136cc:	683b      	ldr	r3, [r7, #0]
 80136ce:	781b      	ldrb	r3, [r3, #0]
 80136d0:	015a      	lsls	r2, r3, #5
 80136d2:	693b      	ldr	r3, [r7, #16]
 80136d4:	4413      	add	r3, r2
 80136d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80136e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80136e4:	d0e7      	beq.n	80136b6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80136e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80136e8:	4618      	mov	r0, r3
 80136ea:	371c      	adds	r7, #28
 80136ec:	46bd      	mov	sp, r7
 80136ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136f2:	4770      	bx	lr

080136f4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80136f4:	b480      	push	{r7}
 80136f6:	b089      	sub	sp, #36	; 0x24
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	60f8      	str	r0, [r7, #12]
 80136fc:	60b9      	str	r1, [r7, #8]
 80136fe:	4611      	mov	r1, r2
 8013700:	461a      	mov	r2, r3
 8013702:	460b      	mov	r3, r1
 8013704:	71fb      	strb	r3, [r7, #7]
 8013706:	4613      	mov	r3, r2
 8013708:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801370e:	68bb      	ldr	r3, [r7, #8]
 8013710:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8013712:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013716:	2b00      	cmp	r3, #0
 8013718:	d123      	bne.n	8013762 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801371a:	88bb      	ldrh	r3, [r7, #4]
 801371c:	3303      	adds	r3, #3
 801371e:	089b      	lsrs	r3, r3, #2
 8013720:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8013722:	2300      	movs	r3, #0
 8013724:	61bb      	str	r3, [r7, #24]
 8013726:	e018      	b.n	801375a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013728:	79fb      	ldrb	r3, [r7, #7]
 801372a:	031a      	lsls	r2, r3, #12
 801372c:	697b      	ldr	r3, [r7, #20]
 801372e:	4413      	add	r3, r2
 8013730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013734:	461a      	mov	r2, r3
 8013736:	69fb      	ldr	r3, [r7, #28]
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	6013      	str	r3, [r2, #0]
      pSrc++;
 801373c:	69fb      	ldr	r3, [r7, #28]
 801373e:	3301      	adds	r3, #1
 8013740:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013742:	69fb      	ldr	r3, [r7, #28]
 8013744:	3301      	adds	r3, #1
 8013746:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013748:	69fb      	ldr	r3, [r7, #28]
 801374a:	3301      	adds	r3, #1
 801374c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801374e:	69fb      	ldr	r3, [r7, #28]
 8013750:	3301      	adds	r3, #1
 8013752:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8013754:	69bb      	ldr	r3, [r7, #24]
 8013756:	3301      	adds	r3, #1
 8013758:	61bb      	str	r3, [r7, #24]
 801375a:	69ba      	ldr	r2, [r7, #24]
 801375c:	693b      	ldr	r3, [r7, #16]
 801375e:	429a      	cmp	r2, r3
 8013760:	d3e2      	bcc.n	8013728 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8013762:	2300      	movs	r3, #0
}
 8013764:	4618      	mov	r0, r3
 8013766:	3724      	adds	r7, #36	; 0x24
 8013768:	46bd      	mov	sp, r7
 801376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801376e:	4770      	bx	lr

08013770 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013770:	b480      	push	{r7}
 8013772:	b08b      	sub	sp, #44	; 0x2c
 8013774:	af00      	add	r7, sp, #0
 8013776:	60f8      	str	r0, [r7, #12]
 8013778:	60b9      	str	r1, [r7, #8]
 801377a:	4613      	mov	r3, r2
 801377c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8013782:	68bb      	ldr	r3, [r7, #8]
 8013784:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8013786:	88fb      	ldrh	r3, [r7, #6]
 8013788:	089b      	lsrs	r3, r3, #2
 801378a:	b29b      	uxth	r3, r3
 801378c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801378e:	88fb      	ldrh	r3, [r7, #6]
 8013790:	f003 0303 	and.w	r3, r3, #3
 8013794:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8013796:	2300      	movs	r3, #0
 8013798:	623b      	str	r3, [r7, #32]
 801379a:	e014      	b.n	80137c6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801379c:	69bb      	ldr	r3, [r7, #24]
 801379e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80137a2:	681a      	ldr	r2, [r3, #0]
 80137a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137a6:	601a      	str	r2, [r3, #0]
    pDest++;
 80137a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137aa:	3301      	adds	r3, #1
 80137ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80137ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137b0:	3301      	adds	r3, #1
 80137b2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80137b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137b6:	3301      	adds	r3, #1
 80137b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80137ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137bc:	3301      	adds	r3, #1
 80137be:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80137c0:	6a3b      	ldr	r3, [r7, #32]
 80137c2:	3301      	adds	r3, #1
 80137c4:	623b      	str	r3, [r7, #32]
 80137c6:	6a3a      	ldr	r2, [r7, #32]
 80137c8:	697b      	ldr	r3, [r7, #20]
 80137ca:	429a      	cmp	r2, r3
 80137cc:	d3e6      	bcc.n	801379c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80137ce:	8bfb      	ldrh	r3, [r7, #30]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d01e      	beq.n	8013812 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80137d4:	2300      	movs	r3, #0
 80137d6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80137d8:	69bb      	ldr	r3, [r7, #24]
 80137da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80137de:	461a      	mov	r2, r3
 80137e0:	f107 0310 	add.w	r3, r7, #16
 80137e4:	6812      	ldr	r2, [r2, #0]
 80137e6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80137e8:	693a      	ldr	r2, [r7, #16]
 80137ea:	6a3b      	ldr	r3, [r7, #32]
 80137ec:	b2db      	uxtb	r3, r3
 80137ee:	00db      	lsls	r3, r3, #3
 80137f0:	fa22 f303 	lsr.w	r3, r2, r3
 80137f4:	b2da      	uxtb	r2, r3
 80137f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137f8:	701a      	strb	r2, [r3, #0]
      i++;
 80137fa:	6a3b      	ldr	r3, [r7, #32]
 80137fc:	3301      	adds	r3, #1
 80137fe:	623b      	str	r3, [r7, #32]
      pDest++;
 8013800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013802:	3301      	adds	r3, #1
 8013804:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8013806:	8bfb      	ldrh	r3, [r7, #30]
 8013808:	3b01      	subs	r3, #1
 801380a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801380c:	8bfb      	ldrh	r3, [r7, #30]
 801380e:	2b00      	cmp	r3, #0
 8013810:	d1ea      	bne.n	80137e8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8013812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013814:	4618      	mov	r0, r3
 8013816:	372c      	adds	r7, #44	; 0x2c
 8013818:	46bd      	mov	sp, r7
 801381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801381e:	4770      	bx	lr

08013820 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013820:	b480      	push	{r7}
 8013822:	b085      	sub	sp, #20
 8013824:	af00      	add	r7, sp, #0
 8013826:	6078      	str	r0, [r7, #4]
 8013828:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801382e:	683b      	ldr	r3, [r7, #0]
 8013830:	781b      	ldrb	r3, [r3, #0]
 8013832:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013834:	683b      	ldr	r3, [r7, #0]
 8013836:	785b      	ldrb	r3, [r3, #1]
 8013838:	2b01      	cmp	r3, #1
 801383a:	d12c      	bne.n	8013896 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801383c:	68bb      	ldr	r3, [r7, #8]
 801383e:	015a      	lsls	r2, r3, #5
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	4413      	add	r3, r2
 8013844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	2b00      	cmp	r3, #0
 801384c:	db12      	blt.n	8013874 <USB_EPSetStall+0x54>
 801384e:	68bb      	ldr	r3, [r7, #8]
 8013850:	2b00      	cmp	r3, #0
 8013852:	d00f      	beq.n	8013874 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013854:	68bb      	ldr	r3, [r7, #8]
 8013856:	015a      	lsls	r2, r3, #5
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	4413      	add	r3, r2
 801385c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	68ba      	ldr	r2, [r7, #8]
 8013864:	0151      	lsls	r1, r2, #5
 8013866:	68fa      	ldr	r2, [r7, #12]
 8013868:	440a      	add	r2, r1
 801386a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801386e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013872:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013874:	68bb      	ldr	r3, [r7, #8]
 8013876:	015a      	lsls	r2, r3, #5
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	4413      	add	r3, r2
 801387c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	68ba      	ldr	r2, [r7, #8]
 8013884:	0151      	lsls	r1, r2, #5
 8013886:	68fa      	ldr	r2, [r7, #12]
 8013888:	440a      	add	r2, r1
 801388a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801388e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013892:	6013      	str	r3, [r2, #0]
 8013894:	e02b      	b.n	80138ee <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013896:	68bb      	ldr	r3, [r7, #8]
 8013898:	015a      	lsls	r2, r3, #5
 801389a:	68fb      	ldr	r3, [r7, #12]
 801389c:	4413      	add	r3, r2
 801389e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138a2:	681b      	ldr	r3, [r3, #0]
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	db12      	blt.n	80138ce <USB_EPSetStall+0xae>
 80138a8:	68bb      	ldr	r3, [r7, #8]
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d00f      	beq.n	80138ce <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80138ae:	68bb      	ldr	r3, [r7, #8]
 80138b0:	015a      	lsls	r2, r3, #5
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	4413      	add	r3, r2
 80138b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	68ba      	ldr	r2, [r7, #8]
 80138be:	0151      	lsls	r1, r2, #5
 80138c0:	68fa      	ldr	r2, [r7, #12]
 80138c2:	440a      	add	r2, r1
 80138c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80138c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80138cc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80138ce:	68bb      	ldr	r3, [r7, #8]
 80138d0:	015a      	lsls	r2, r3, #5
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	4413      	add	r3, r2
 80138d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	68ba      	ldr	r2, [r7, #8]
 80138de:	0151      	lsls	r1, r2, #5
 80138e0:	68fa      	ldr	r2, [r7, #12]
 80138e2:	440a      	add	r2, r1
 80138e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80138e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80138ec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80138ee:	2300      	movs	r3, #0
}
 80138f0:	4618      	mov	r0, r3
 80138f2:	3714      	adds	r7, #20
 80138f4:	46bd      	mov	sp, r7
 80138f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138fa:	4770      	bx	lr

080138fc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80138fc:	b480      	push	{r7}
 80138fe:	b085      	sub	sp, #20
 8013900:	af00      	add	r7, sp, #0
 8013902:	6078      	str	r0, [r7, #4]
 8013904:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801390a:	683b      	ldr	r3, [r7, #0]
 801390c:	781b      	ldrb	r3, [r3, #0]
 801390e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013910:	683b      	ldr	r3, [r7, #0]
 8013912:	785b      	ldrb	r3, [r3, #1]
 8013914:	2b01      	cmp	r3, #1
 8013916:	d128      	bne.n	801396a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013918:	68bb      	ldr	r3, [r7, #8]
 801391a:	015a      	lsls	r2, r3, #5
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	4413      	add	r3, r2
 8013920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	68ba      	ldr	r2, [r7, #8]
 8013928:	0151      	lsls	r1, r2, #5
 801392a:	68fa      	ldr	r2, [r7, #12]
 801392c:	440a      	add	r2, r1
 801392e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013932:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013936:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013938:	683b      	ldr	r3, [r7, #0]
 801393a:	791b      	ldrb	r3, [r3, #4]
 801393c:	2b03      	cmp	r3, #3
 801393e:	d003      	beq.n	8013948 <USB_EPClearStall+0x4c>
 8013940:	683b      	ldr	r3, [r7, #0]
 8013942:	791b      	ldrb	r3, [r3, #4]
 8013944:	2b02      	cmp	r3, #2
 8013946:	d138      	bne.n	80139ba <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013948:	68bb      	ldr	r3, [r7, #8]
 801394a:	015a      	lsls	r2, r3, #5
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	4413      	add	r3, r2
 8013950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	68ba      	ldr	r2, [r7, #8]
 8013958:	0151      	lsls	r1, r2, #5
 801395a:	68fa      	ldr	r2, [r7, #12]
 801395c:	440a      	add	r2, r1
 801395e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013966:	6013      	str	r3, [r2, #0]
 8013968:	e027      	b.n	80139ba <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801396a:	68bb      	ldr	r3, [r7, #8]
 801396c:	015a      	lsls	r2, r3, #5
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	4413      	add	r3, r2
 8013972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	68ba      	ldr	r2, [r7, #8]
 801397a:	0151      	lsls	r1, r2, #5
 801397c:	68fa      	ldr	r2, [r7, #12]
 801397e:	440a      	add	r2, r1
 8013980:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013984:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013988:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801398a:	683b      	ldr	r3, [r7, #0]
 801398c:	791b      	ldrb	r3, [r3, #4]
 801398e:	2b03      	cmp	r3, #3
 8013990:	d003      	beq.n	801399a <USB_EPClearStall+0x9e>
 8013992:	683b      	ldr	r3, [r7, #0]
 8013994:	791b      	ldrb	r3, [r3, #4]
 8013996:	2b02      	cmp	r3, #2
 8013998:	d10f      	bne.n	80139ba <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801399a:	68bb      	ldr	r3, [r7, #8]
 801399c:	015a      	lsls	r2, r3, #5
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	4413      	add	r3, r2
 80139a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	68ba      	ldr	r2, [r7, #8]
 80139aa:	0151      	lsls	r1, r2, #5
 80139ac:	68fa      	ldr	r2, [r7, #12]
 80139ae:	440a      	add	r2, r1
 80139b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80139b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80139b8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80139ba:	2300      	movs	r3, #0
}
 80139bc:	4618      	mov	r0, r3
 80139be:	3714      	adds	r7, #20
 80139c0:	46bd      	mov	sp, r7
 80139c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c6:	4770      	bx	lr

080139c8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80139c8:	b480      	push	{r7}
 80139ca:	b085      	sub	sp, #20
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	6078      	str	r0, [r7, #4]
 80139d0:	460b      	mov	r3, r1
 80139d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	68fa      	ldr	r2, [r7, #12]
 80139e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80139e6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80139ea:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80139f2:	681a      	ldr	r2, [r3, #0]
 80139f4:	78fb      	ldrb	r3, [r7, #3]
 80139f6:	011b      	lsls	r3, r3, #4
 80139f8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80139fc:	68f9      	ldr	r1, [r7, #12]
 80139fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013a02:	4313      	orrs	r3, r2
 8013a04:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8013a06:	2300      	movs	r3, #0
}
 8013a08:	4618      	mov	r0, r3
 8013a0a:	3714      	adds	r7, #20
 8013a0c:	46bd      	mov	sp, r7
 8013a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a12:	4770      	bx	lr

08013a14 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013a14:	b480      	push	{r7}
 8013a16:	b085      	sub	sp, #20
 8013a18:	af00      	add	r7, sp, #0
 8013a1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013a26:	681b      	ldr	r3, [r3, #0]
 8013a28:	68fa      	ldr	r2, [r7, #12]
 8013a2a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013a2e:	f023 0303 	bic.w	r3, r3, #3
 8013a32:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a3a:	685b      	ldr	r3, [r3, #4]
 8013a3c:	68fa      	ldr	r2, [r7, #12]
 8013a3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013a42:	f023 0302 	bic.w	r3, r3, #2
 8013a46:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013a48:	2300      	movs	r3, #0
}
 8013a4a:	4618      	mov	r0, r3
 8013a4c:	3714      	adds	r7, #20
 8013a4e:	46bd      	mov	sp, r7
 8013a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a54:	4770      	bx	lr

08013a56 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013a56:	b480      	push	{r7}
 8013a58:	b085      	sub	sp, #20
 8013a5a:	af00      	add	r7, sp, #0
 8013a5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	68fa      	ldr	r2, [r7, #12]
 8013a6c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013a70:	f023 0303 	bic.w	r3, r3, #3
 8013a74:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a7c:	685b      	ldr	r3, [r3, #4]
 8013a7e:	68fa      	ldr	r2, [r7, #12]
 8013a80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013a84:	f043 0302 	orr.w	r3, r3, #2
 8013a88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013a8a:	2300      	movs	r3, #0
}
 8013a8c:	4618      	mov	r0, r3
 8013a8e:	3714      	adds	r7, #20
 8013a90:	46bd      	mov	sp, r7
 8013a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a96:	4770      	bx	lr

08013a98 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8013a98:	b480      	push	{r7}
 8013a9a:	b085      	sub	sp, #20
 8013a9c:	af00      	add	r7, sp, #0
 8013a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	695b      	ldr	r3, [r3, #20]
 8013aa4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	699b      	ldr	r3, [r3, #24]
 8013aaa:	68fa      	ldr	r2, [r7, #12]
 8013aac:	4013      	ands	r3, r2
 8013aae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013ab0:	68fb      	ldr	r3, [r7, #12]
}
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	3714      	adds	r7, #20
 8013ab6:	46bd      	mov	sp, r7
 8013ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013abc:	4770      	bx	lr

08013abe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013abe:	b480      	push	{r7}
 8013ac0:	b085      	sub	sp, #20
 8013ac2:	af00      	add	r7, sp, #0
 8013ac4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ad0:	699b      	ldr	r3, [r3, #24]
 8013ad2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ada:	69db      	ldr	r3, [r3, #28]
 8013adc:	68ba      	ldr	r2, [r7, #8]
 8013ade:	4013      	ands	r3, r2
 8013ae0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8013ae2:	68bb      	ldr	r3, [r7, #8]
 8013ae4:	0c1b      	lsrs	r3, r3, #16
}
 8013ae6:	4618      	mov	r0, r3
 8013ae8:	3714      	adds	r7, #20
 8013aea:	46bd      	mov	sp, r7
 8013aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af0:	4770      	bx	lr

08013af2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013af2:	b480      	push	{r7}
 8013af4:	b085      	sub	sp, #20
 8013af6:	af00      	add	r7, sp, #0
 8013af8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b04:	699b      	ldr	r3, [r3, #24]
 8013b06:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b0e:	69db      	ldr	r3, [r3, #28]
 8013b10:	68ba      	ldr	r2, [r7, #8]
 8013b12:	4013      	ands	r3, r2
 8013b14:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8013b16:	68bb      	ldr	r3, [r7, #8]
 8013b18:	b29b      	uxth	r3, r3
}
 8013b1a:	4618      	mov	r0, r3
 8013b1c:	3714      	adds	r7, #20
 8013b1e:	46bd      	mov	sp, r7
 8013b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b24:	4770      	bx	lr

08013b26 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013b26:	b480      	push	{r7}
 8013b28:	b085      	sub	sp, #20
 8013b2a:	af00      	add	r7, sp, #0
 8013b2c:	6078      	str	r0, [r7, #4]
 8013b2e:	460b      	mov	r3, r1
 8013b30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8013b36:	78fb      	ldrb	r3, [r7, #3]
 8013b38:	015a      	lsls	r2, r3, #5
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	4413      	add	r3, r2
 8013b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b42:	689b      	ldr	r3, [r3, #8]
 8013b44:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b4c:	695b      	ldr	r3, [r3, #20]
 8013b4e:	68ba      	ldr	r2, [r7, #8]
 8013b50:	4013      	ands	r3, r2
 8013b52:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013b54:	68bb      	ldr	r3, [r7, #8]
}
 8013b56:	4618      	mov	r0, r3
 8013b58:	3714      	adds	r7, #20
 8013b5a:	46bd      	mov	sp, r7
 8013b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b60:	4770      	bx	lr

08013b62 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013b62:	b480      	push	{r7}
 8013b64:	b087      	sub	sp, #28
 8013b66:	af00      	add	r7, sp, #0
 8013b68:	6078      	str	r0, [r7, #4]
 8013b6a:	460b      	mov	r3, r1
 8013b6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8013b72:	697b      	ldr	r3, [r7, #20]
 8013b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b78:	691b      	ldr	r3, [r3, #16]
 8013b7a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013b7c:	697b      	ldr	r3, [r7, #20]
 8013b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013b84:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8013b86:	78fb      	ldrb	r3, [r7, #3]
 8013b88:	f003 030f 	and.w	r3, r3, #15
 8013b8c:	68fa      	ldr	r2, [r7, #12]
 8013b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8013b92:	01db      	lsls	r3, r3, #7
 8013b94:	b2db      	uxtb	r3, r3
 8013b96:	693a      	ldr	r2, [r7, #16]
 8013b98:	4313      	orrs	r3, r2
 8013b9a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013b9c:	78fb      	ldrb	r3, [r7, #3]
 8013b9e:	015a      	lsls	r2, r3, #5
 8013ba0:	697b      	ldr	r3, [r7, #20]
 8013ba2:	4413      	add	r3, r2
 8013ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ba8:	689b      	ldr	r3, [r3, #8]
 8013baa:	693a      	ldr	r2, [r7, #16]
 8013bac:	4013      	ands	r3, r2
 8013bae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013bb0:	68bb      	ldr	r3, [r7, #8]
}
 8013bb2:	4618      	mov	r0, r3
 8013bb4:	371c      	adds	r7, #28
 8013bb6:	46bd      	mov	sp, r7
 8013bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bbc:	4770      	bx	lr

08013bbe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013bbe:	b480      	push	{r7}
 8013bc0:	b083      	sub	sp, #12
 8013bc2:	af00      	add	r7, sp, #0
 8013bc4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	695b      	ldr	r3, [r3, #20]
 8013bca:	f003 0301 	and.w	r3, r3, #1
}
 8013bce:	4618      	mov	r0, r3
 8013bd0:	370c      	adds	r7, #12
 8013bd2:	46bd      	mov	sp, r7
 8013bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd8:	4770      	bx	lr
	...

08013bdc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8013bdc:	b480      	push	{r7}
 8013bde:	b085      	sub	sp, #20
 8013be0:	af00      	add	r7, sp, #0
 8013be2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013bee:	681a      	ldr	r2, [r3, #0]
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013bf6:	4619      	mov	r1, r3
 8013bf8:	4b09      	ldr	r3, [pc, #36]	; (8013c20 <USB_ActivateSetup+0x44>)
 8013bfa:	4013      	ands	r3, r2
 8013bfc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c04:	685b      	ldr	r3, [r3, #4]
 8013c06:	68fa      	ldr	r2, [r7, #12]
 8013c08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013c10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013c12:	2300      	movs	r3, #0
}
 8013c14:	4618      	mov	r0, r3
 8013c16:	3714      	adds	r7, #20
 8013c18:	46bd      	mov	sp, r7
 8013c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c1e:	4770      	bx	lr
 8013c20:	fffff800 	.word	0xfffff800

08013c24 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8013c24:	b480      	push	{r7}
 8013c26:	b087      	sub	sp, #28
 8013c28:	af00      	add	r7, sp, #0
 8013c2a:	60f8      	str	r0, [r7, #12]
 8013c2c:	460b      	mov	r3, r1
 8013c2e:	607a      	str	r2, [r7, #4]
 8013c30:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	333c      	adds	r3, #60	; 0x3c
 8013c3a:	3304      	adds	r3, #4
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8013c40:	693b      	ldr	r3, [r7, #16]
 8013c42:	4a26      	ldr	r2, [pc, #152]	; (8013cdc <USB_EP0_OutStart+0xb8>)
 8013c44:	4293      	cmp	r3, r2
 8013c46:	d90a      	bls.n	8013c5e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013c48:	697b      	ldr	r3, [r7, #20]
 8013c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013c54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013c58:	d101      	bne.n	8013c5e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8013c5a:	2300      	movs	r3, #0
 8013c5c:	e037      	b.n	8013cce <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8013c5e:	697b      	ldr	r3, [r7, #20]
 8013c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c64:	461a      	mov	r2, r3
 8013c66:	2300      	movs	r3, #0
 8013c68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013c6a:	697b      	ldr	r3, [r7, #20]
 8013c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c70:	691b      	ldr	r3, [r3, #16]
 8013c72:	697a      	ldr	r2, [r7, #20]
 8013c74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013c78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013c7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8013c7e:	697b      	ldr	r3, [r7, #20]
 8013c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c84:	691b      	ldr	r3, [r3, #16]
 8013c86:	697a      	ldr	r2, [r7, #20]
 8013c88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013c8c:	f043 0318 	orr.w	r3, r3, #24
 8013c90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8013c92:	697b      	ldr	r3, [r7, #20]
 8013c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c98:	691b      	ldr	r3, [r3, #16]
 8013c9a:	697a      	ldr	r2, [r7, #20]
 8013c9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013ca0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8013ca4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8013ca6:	7afb      	ldrb	r3, [r7, #11]
 8013ca8:	2b01      	cmp	r3, #1
 8013caa:	d10f      	bne.n	8013ccc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8013cac:	697b      	ldr	r3, [r7, #20]
 8013cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013cb2:	461a      	mov	r2, r3
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8013cb8:	697b      	ldr	r3, [r7, #20]
 8013cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	697a      	ldr	r2, [r7, #20]
 8013cc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013cc6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8013cca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013ccc:	2300      	movs	r3, #0
}
 8013cce:	4618      	mov	r0, r3
 8013cd0:	371c      	adds	r7, #28
 8013cd2:	46bd      	mov	sp, r7
 8013cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cd8:	4770      	bx	lr
 8013cda:	bf00      	nop
 8013cdc:	4f54300a 	.word	0x4f54300a

08013ce0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013ce0:	b480      	push	{r7}
 8013ce2:	b085      	sub	sp, #20
 8013ce4:	af00      	add	r7, sp, #0
 8013ce6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013ce8:	2300      	movs	r3, #0
 8013cea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	3301      	adds	r3, #1
 8013cf0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	4a13      	ldr	r2, [pc, #76]	; (8013d44 <USB_CoreReset+0x64>)
 8013cf6:	4293      	cmp	r3, r2
 8013cf8:	d901      	bls.n	8013cfe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8013cfa:	2303      	movs	r3, #3
 8013cfc:	e01b      	b.n	8013d36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	691b      	ldr	r3, [r3, #16]
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	daf2      	bge.n	8013cec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8013d06:	2300      	movs	r3, #0
 8013d08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	691b      	ldr	r3, [r3, #16]
 8013d0e:	f043 0201 	orr.w	r2, r3, #1
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	3301      	adds	r3, #1
 8013d1a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	4a09      	ldr	r2, [pc, #36]	; (8013d44 <USB_CoreReset+0x64>)
 8013d20:	4293      	cmp	r3, r2
 8013d22:	d901      	bls.n	8013d28 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8013d24:	2303      	movs	r3, #3
 8013d26:	e006      	b.n	8013d36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	691b      	ldr	r3, [r3, #16]
 8013d2c:	f003 0301 	and.w	r3, r3, #1
 8013d30:	2b01      	cmp	r3, #1
 8013d32:	d0f0      	beq.n	8013d16 <USB_CoreReset+0x36>

  return HAL_OK;
 8013d34:	2300      	movs	r3, #0
}
 8013d36:	4618      	mov	r0, r3
 8013d38:	3714      	adds	r7, #20
 8013d3a:	46bd      	mov	sp, r7
 8013d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d40:	4770      	bx	lr
 8013d42:	bf00      	nop
 8013d44:	00030d40 	.word	0x00030d40

08013d48 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8013d48:	b580      	push	{r7, lr}
 8013d4a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8013d4c:	4904      	ldr	r1, [pc, #16]	; (8013d60 <MX_FATFS_Init+0x18>)
 8013d4e:	4805      	ldr	r0, [pc, #20]	; (8013d64 <MX_FATFS_Init+0x1c>)
 8013d50:	f002 fa56 	bl	8016200 <FATFS_LinkDriver>
 8013d54:	4603      	mov	r3, r0
 8013d56:	461a      	mov	r2, r3
 8013d58:	4b03      	ldr	r3, [pc, #12]	; (8013d68 <MX_FATFS_Init+0x20>)
 8013d5a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8013d5c:	bf00      	nop
 8013d5e:	bd80      	pop	{r7, pc}
 8013d60:	24001618 	.word	0x24001618
 8013d64:	0801bb88 	.word	0x0801bb88
 8013d68:	24001614 	.word	0x24001614

08013d6c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8013d6c:	b580      	push	{r7, lr}
 8013d6e:	b082      	sub	sp, #8
 8013d70:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8013d72:	2300      	movs	r3, #0
 8013d74:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8013d76:	f000 f885 	bl	8013e84 <BSP_SD_IsDetected>
 8013d7a:	4603      	mov	r3, r0
 8013d7c:	2b01      	cmp	r3, #1
 8013d7e:	d001      	beq.n	8013d84 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8013d80:	2302      	movs	r3, #2
 8013d82:	e012      	b.n	8013daa <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 8013d84:	480b      	ldr	r0, [pc, #44]	; (8013db4 <BSP_SD_Init+0x48>)
 8013d86:	f7f9 f85d 	bl	800ce44 <HAL_SD_Init>
 8013d8a:	4603      	mov	r3, r0
 8013d8c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8013d8e:	79fb      	ldrb	r3, [r7, #7]
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d109      	bne.n	8013da8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8013d94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8013d98:	4806      	ldr	r0, [pc, #24]	; (8013db4 <BSP_SD_Init+0x48>)
 8013d9a:	f7f9 ff13 	bl	800dbc4 <HAL_SD_ConfigWideBusOperation>
 8013d9e:	4603      	mov	r3, r0
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d001      	beq.n	8013da8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8013da4:	2301      	movs	r3, #1
 8013da6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8013da8:	79fb      	ldrb	r3, [r7, #7]
}
 8013daa:	4618      	mov	r0, r3
 8013dac:	3708      	adds	r7, #8
 8013dae:	46bd      	mov	sp, r7
 8013db0:	bd80      	pop	{r7, pc}
 8013db2:	bf00      	nop
 8013db4:	24000ed0 	.word	0x24000ed0

08013db8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8013db8:	b580      	push	{r7, lr}
 8013dba:	b086      	sub	sp, #24
 8013dbc:	af00      	add	r7, sp, #0
 8013dbe:	60f8      	str	r0, [r7, #12]
 8013dc0:	60b9      	str	r1, [r7, #8]
 8013dc2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013dc4:	2300      	movs	r3, #0
 8013dc6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	68ba      	ldr	r2, [r7, #8]
 8013dcc:	68f9      	ldr	r1, [r7, #12]
 8013dce:	4806      	ldr	r0, [pc, #24]	; (8013de8 <BSP_SD_ReadBlocks_DMA+0x30>)
 8013dd0:	f7f9 f958 	bl	800d084 <HAL_SD_ReadBlocks_DMA>
 8013dd4:	4603      	mov	r3, r0
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d001      	beq.n	8013dde <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013dda:	2301      	movs	r3, #1
 8013ddc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8013de0:	4618      	mov	r0, r3
 8013de2:	3718      	adds	r7, #24
 8013de4:	46bd      	mov	sp, r7
 8013de6:	bd80      	pop	{r7, pc}
 8013de8:	24000ed0 	.word	0x24000ed0

08013dec <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8013dec:	b580      	push	{r7, lr}
 8013dee:	b086      	sub	sp, #24
 8013df0:	af00      	add	r7, sp, #0
 8013df2:	60f8      	str	r0, [r7, #12]
 8013df4:	60b9      	str	r1, [r7, #8]
 8013df6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013df8:	2300      	movs	r3, #0
 8013dfa:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	68ba      	ldr	r2, [r7, #8]
 8013e00:	68f9      	ldr	r1, [r7, #12]
 8013e02:	4806      	ldr	r0, [pc, #24]	; (8013e1c <BSP_SD_WriteBlocks_DMA+0x30>)
 8013e04:	f7f9 f9e6 	bl	800d1d4 <HAL_SD_WriteBlocks_DMA>
 8013e08:	4603      	mov	r3, r0
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d001      	beq.n	8013e12 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013e0e:	2301      	movs	r3, #1
 8013e10:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013e12:	7dfb      	ldrb	r3, [r7, #23]
}
 8013e14:	4618      	mov	r0, r3
 8013e16:	3718      	adds	r7, #24
 8013e18:	46bd      	mov	sp, r7
 8013e1a:	bd80      	pop	{r7, pc}
 8013e1c:	24000ed0 	.word	0x24000ed0

08013e20 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8013e20:	b580      	push	{r7, lr}
 8013e22:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8013e24:	4805      	ldr	r0, [pc, #20]	; (8013e3c <BSP_SD_GetCardState+0x1c>)
 8013e26:	f7f9 ffdf 	bl	800dde8 <HAL_SD_GetCardState>
 8013e2a:	4603      	mov	r3, r0
 8013e2c:	2b04      	cmp	r3, #4
 8013e2e:	bf14      	ite	ne
 8013e30:	2301      	movne	r3, #1
 8013e32:	2300      	moveq	r3, #0
 8013e34:	b2db      	uxtb	r3, r3
}
 8013e36:	4618      	mov	r0, r3
 8013e38:	bd80      	pop	{r7, pc}
 8013e3a:	bf00      	nop
 8013e3c:	24000ed0 	.word	0x24000ed0

08013e40 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8013e40:	b580      	push	{r7, lr}
 8013e42:	b082      	sub	sp, #8
 8013e44:	af00      	add	r7, sp, #0
 8013e46:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 8013e48:	6879      	ldr	r1, [r7, #4]
 8013e4a:	4803      	ldr	r0, [pc, #12]	; (8013e58 <BSP_SD_GetCardInfo+0x18>)
 8013e4c:	f7f9 fe8e 	bl	800db6c <HAL_SD_GetCardInfo>
}
 8013e50:	bf00      	nop
 8013e52:	3708      	adds	r7, #8
 8013e54:	46bd      	mov	sp, r7
 8013e56:	bd80      	pop	{r7, pc}
 8013e58:	24000ed0 	.word	0x24000ed0

08013e5c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013e5c:	b580      	push	{r7, lr}
 8013e5e:	b082      	sub	sp, #8
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8013e64:	f000 f9a0 	bl	80141a8 <BSP_SD_WriteCpltCallback>
}
 8013e68:	bf00      	nop
 8013e6a:	3708      	adds	r7, #8
 8013e6c:	46bd      	mov	sp, r7
 8013e6e:	bd80      	pop	{r7, pc}

08013e70 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013e70:	b580      	push	{r7, lr}
 8013e72:	b082      	sub	sp, #8
 8013e74:	af00      	add	r7, sp, #0
 8013e76:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8013e78:	f000 f9a2 	bl	80141c0 <BSP_SD_ReadCpltCallback>
}
 8013e7c:	bf00      	nop
 8013e7e:	3708      	adds	r7, #8
 8013e80:	46bd      	mov	sp, r7
 8013e82:	bd80      	pop	{r7, pc}

08013e84 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8013e84:	b580      	push	{r7, lr}
 8013e86:	b082      	sub	sp, #8
 8013e88:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8013e8a:	2301      	movs	r3, #1
 8013e8c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8013e8e:	f000 f80b 	bl	8013ea8 <BSP_PlatformIsDetected>
 8013e92:	4603      	mov	r3, r0
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d101      	bne.n	8013e9c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8013e98:	2300      	movs	r3, #0
 8013e9a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8013e9c:	79fb      	ldrb	r3, [r7, #7]
 8013e9e:	b2db      	uxtb	r3, r3
}
 8013ea0:	4618      	mov	r0, r3
 8013ea2:	3708      	adds	r7, #8
 8013ea4:	46bd      	mov	sp, r7
 8013ea6:	bd80      	pop	{r7, pc}

08013ea8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8013ea8:	b580      	push	{r7, lr}
 8013eaa:	b082      	sub	sp, #8
 8013eac:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8013eae:	2301      	movs	r3, #1
 8013eb0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8013eb2:	2104      	movs	r1, #4
 8013eb4:	4806      	ldr	r0, [pc, #24]	; (8013ed0 <BSP_PlatformIsDetected+0x28>)
 8013eb6:	f7f3 ff99 	bl	8007dec <HAL_GPIO_ReadPin>
 8013eba:	4603      	mov	r3, r0
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d001      	beq.n	8013ec4 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8013ec0:	2300      	movs	r3, #0
 8013ec2:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8013ec4:	79fb      	ldrb	r3, [r7, #7]
}
 8013ec6:	4618      	mov	r0, r3
 8013ec8:	3708      	adds	r7, #8
 8013eca:	46bd      	mov	sp, r7
 8013ecc:	bd80      	pop	{r7, pc}
 8013ece:	bf00      	nop
 8013ed0:	58020400 	.word	0x58020400

08013ed4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b084      	sub	sp, #16
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8013edc:	f7ef fcde 	bl	800389c <HAL_GetTick>
 8013ee0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8013ee2:	e006      	b.n	8013ef2 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013ee4:	f7ff ff9c 	bl	8013e20 <BSP_SD_GetCardState>
 8013ee8:	4603      	mov	r3, r0
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d101      	bne.n	8013ef2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8013eee:	2300      	movs	r3, #0
 8013ef0:	e009      	b.n	8013f06 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8013ef2:	f7ef fcd3 	bl	800389c <HAL_GetTick>
 8013ef6:	4602      	mov	r2, r0
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	1ad3      	subs	r3, r2, r3
 8013efc:	687a      	ldr	r2, [r7, #4]
 8013efe:	429a      	cmp	r2, r3
 8013f00:	d8f0      	bhi.n	8013ee4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8013f02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013f06:	4618      	mov	r0, r3
 8013f08:	3710      	adds	r7, #16
 8013f0a:	46bd      	mov	sp, r7
 8013f0c:	bd80      	pop	{r7, pc}
	...

08013f10 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8013f10:	b580      	push	{r7, lr}
 8013f12:	b082      	sub	sp, #8
 8013f14:	af00      	add	r7, sp, #0
 8013f16:	4603      	mov	r3, r0
 8013f18:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8013f1a:	4b0b      	ldr	r3, [pc, #44]	; (8013f48 <SD_CheckStatus+0x38>)
 8013f1c:	2201      	movs	r2, #1
 8013f1e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8013f20:	f7ff ff7e 	bl	8013e20 <BSP_SD_GetCardState>
 8013f24:	4603      	mov	r3, r0
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d107      	bne.n	8013f3a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8013f2a:	4b07      	ldr	r3, [pc, #28]	; (8013f48 <SD_CheckStatus+0x38>)
 8013f2c:	781b      	ldrb	r3, [r3, #0]
 8013f2e:	b2db      	uxtb	r3, r3
 8013f30:	f023 0301 	bic.w	r3, r3, #1
 8013f34:	b2da      	uxtb	r2, r3
 8013f36:	4b04      	ldr	r3, [pc, #16]	; (8013f48 <SD_CheckStatus+0x38>)
 8013f38:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8013f3a:	4b03      	ldr	r3, [pc, #12]	; (8013f48 <SD_CheckStatus+0x38>)
 8013f3c:	781b      	ldrb	r3, [r3, #0]
 8013f3e:	b2db      	uxtb	r3, r3
}
 8013f40:	4618      	mov	r0, r3
 8013f42:	3708      	adds	r7, #8
 8013f44:	46bd      	mov	sp, r7
 8013f46:	bd80      	pop	{r7, pc}
 8013f48:	2400000d 	.word	0x2400000d

08013f4c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8013f4c:	b580      	push	{r7, lr}
 8013f4e:	b082      	sub	sp, #8
 8013f50:	af00      	add	r7, sp, #0
 8013f52:	4603      	mov	r3, r0
 8013f54:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8013f56:	f7ff ff09 	bl	8013d6c <BSP_SD_Init>
 8013f5a:	4603      	mov	r3, r0
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d107      	bne.n	8013f70 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8013f60:	79fb      	ldrb	r3, [r7, #7]
 8013f62:	4618      	mov	r0, r3
 8013f64:	f7ff ffd4 	bl	8013f10 <SD_CheckStatus>
 8013f68:	4603      	mov	r3, r0
 8013f6a:	461a      	mov	r2, r3
 8013f6c:	4b04      	ldr	r3, [pc, #16]	; (8013f80 <SD_initialize+0x34>)
 8013f6e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8013f70:	4b03      	ldr	r3, [pc, #12]	; (8013f80 <SD_initialize+0x34>)
 8013f72:	781b      	ldrb	r3, [r3, #0]
 8013f74:	b2db      	uxtb	r3, r3
}
 8013f76:	4618      	mov	r0, r3
 8013f78:	3708      	adds	r7, #8
 8013f7a:	46bd      	mov	sp, r7
 8013f7c:	bd80      	pop	{r7, pc}
 8013f7e:	bf00      	nop
 8013f80:	2400000d 	.word	0x2400000d

08013f84 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8013f84:	b580      	push	{r7, lr}
 8013f86:	b082      	sub	sp, #8
 8013f88:	af00      	add	r7, sp, #0
 8013f8a:	4603      	mov	r3, r0
 8013f8c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8013f8e:	79fb      	ldrb	r3, [r7, #7]
 8013f90:	4618      	mov	r0, r3
 8013f92:	f7ff ffbd 	bl	8013f10 <SD_CheckStatus>
 8013f96:	4603      	mov	r3, r0
}
 8013f98:	4618      	mov	r0, r3
 8013f9a:	3708      	adds	r7, #8
 8013f9c:	46bd      	mov	sp, r7
 8013f9e:	bd80      	pop	{r7, pc}

08013fa0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8013fa0:	b580      	push	{r7, lr}
 8013fa2:	b086      	sub	sp, #24
 8013fa4:	af00      	add	r7, sp, #0
 8013fa6:	60b9      	str	r1, [r7, #8]
 8013fa8:	607a      	str	r2, [r7, #4]
 8013faa:	603b      	str	r3, [r7, #0]
 8013fac:	4603      	mov	r3, r0
 8013fae:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013fb0:	2301      	movs	r3, #1
 8013fb2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8013fb4:	f247 5030 	movw	r0, #30000	; 0x7530
 8013fb8:	f7ff ff8c 	bl	8013ed4 <SD_CheckStatusWithTimeout>
 8013fbc:	4603      	mov	r3, r0
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	da01      	bge.n	8013fc6 <SD_read+0x26>
  {
    return res;
 8013fc2:	7dfb      	ldrb	r3, [r7, #23]
 8013fc4:	e03b      	b.n	801403e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8013fc6:	683a      	ldr	r2, [r7, #0]
 8013fc8:	6879      	ldr	r1, [r7, #4]
 8013fca:	68b8      	ldr	r0, [r7, #8]
 8013fcc:	f7ff fef4 	bl	8013db8 <BSP_SD_ReadBlocks_DMA>
 8013fd0:	4603      	mov	r3, r0
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d132      	bne.n	801403c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8013fd6:	4b1c      	ldr	r3, [pc, #112]	; (8014048 <SD_read+0xa8>)
 8013fd8:	2200      	movs	r2, #0
 8013fda:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8013fdc:	f7ef fc5e 	bl	800389c <HAL_GetTick>
 8013fe0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8013fe2:	bf00      	nop
 8013fe4:	4b18      	ldr	r3, [pc, #96]	; (8014048 <SD_read+0xa8>)
 8013fe6:	681b      	ldr	r3, [r3, #0]
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d108      	bne.n	8013ffe <SD_read+0x5e>
 8013fec:	f7ef fc56 	bl	800389c <HAL_GetTick>
 8013ff0:	4602      	mov	r2, r0
 8013ff2:	693b      	ldr	r3, [r7, #16]
 8013ff4:	1ad3      	subs	r3, r2, r3
 8013ff6:	f247 522f 	movw	r2, #29999	; 0x752f
 8013ffa:	4293      	cmp	r3, r2
 8013ffc:	d9f2      	bls.n	8013fe4 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8013ffe:	4b12      	ldr	r3, [pc, #72]	; (8014048 <SD_read+0xa8>)
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	2b00      	cmp	r3, #0
 8014004:	d102      	bne.n	801400c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8014006:	2301      	movs	r3, #1
 8014008:	75fb      	strb	r3, [r7, #23]
 801400a:	e017      	b.n	801403c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 801400c:	4b0e      	ldr	r3, [pc, #56]	; (8014048 <SD_read+0xa8>)
 801400e:	2200      	movs	r2, #0
 8014010:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8014012:	f7ef fc43 	bl	800389c <HAL_GetTick>
 8014016:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014018:	e007      	b.n	801402a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801401a:	f7ff ff01 	bl	8013e20 <BSP_SD_GetCardState>
 801401e:	4603      	mov	r3, r0
 8014020:	2b00      	cmp	r3, #0
 8014022:	d102      	bne.n	801402a <SD_read+0x8a>
          {
            res = RES_OK;
 8014024:	2300      	movs	r3, #0
 8014026:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8014028:	e008      	b.n	801403c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801402a:	f7ef fc37 	bl	800389c <HAL_GetTick>
 801402e:	4602      	mov	r2, r0
 8014030:	693b      	ldr	r3, [r7, #16]
 8014032:	1ad3      	subs	r3, r2, r3
 8014034:	f247 522f 	movw	r2, #29999	; 0x752f
 8014038:	4293      	cmp	r3, r2
 801403a:	d9ee      	bls.n	801401a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 801403c:	7dfb      	ldrb	r3, [r7, #23]
}
 801403e:	4618      	mov	r0, r3
 8014040:	3718      	adds	r7, #24
 8014042:	46bd      	mov	sp, r7
 8014044:	bd80      	pop	{r7, pc}
 8014046:	bf00      	nop
 8014048:	24001620 	.word	0x24001620

0801404c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801404c:	b580      	push	{r7, lr}
 801404e:	b086      	sub	sp, #24
 8014050:	af00      	add	r7, sp, #0
 8014052:	60b9      	str	r1, [r7, #8]
 8014054:	607a      	str	r2, [r7, #4]
 8014056:	603b      	str	r3, [r7, #0]
 8014058:	4603      	mov	r3, r0
 801405a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801405c:	2301      	movs	r3, #1
 801405e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8014060:	4b24      	ldr	r3, [pc, #144]	; (80140f4 <SD_write+0xa8>)
 8014062:	2200      	movs	r2, #0
 8014064:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014066:	f247 5030 	movw	r0, #30000	; 0x7530
 801406a:	f7ff ff33 	bl	8013ed4 <SD_CheckStatusWithTimeout>
 801406e:	4603      	mov	r3, r0
 8014070:	2b00      	cmp	r3, #0
 8014072:	da01      	bge.n	8014078 <SD_write+0x2c>
  {
    return res;
 8014074:	7dfb      	ldrb	r3, [r7, #23]
 8014076:	e038      	b.n	80140ea <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8014078:	683a      	ldr	r2, [r7, #0]
 801407a:	6879      	ldr	r1, [r7, #4]
 801407c:	68b8      	ldr	r0, [r7, #8]
 801407e:	f7ff feb5 	bl	8013dec <BSP_SD_WriteBlocks_DMA>
 8014082:	4603      	mov	r3, r0
 8014084:	2b00      	cmp	r3, #0
 8014086:	d12f      	bne.n	80140e8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8014088:	f7ef fc08 	bl	800389c <HAL_GetTick>
 801408c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801408e:	bf00      	nop
 8014090:	4b18      	ldr	r3, [pc, #96]	; (80140f4 <SD_write+0xa8>)
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	2b00      	cmp	r3, #0
 8014096:	d108      	bne.n	80140aa <SD_write+0x5e>
 8014098:	f7ef fc00 	bl	800389c <HAL_GetTick>
 801409c:	4602      	mov	r2, r0
 801409e:	693b      	ldr	r3, [r7, #16]
 80140a0:	1ad3      	subs	r3, r2, r3
 80140a2:	f247 522f 	movw	r2, #29999	; 0x752f
 80140a6:	4293      	cmp	r3, r2
 80140a8:	d9f2      	bls.n	8014090 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80140aa:	4b12      	ldr	r3, [pc, #72]	; (80140f4 <SD_write+0xa8>)
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d102      	bne.n	80140b8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80140b2:	2301      	movs	r3, #1
 80140b4:	75fb      	strb	r3, [r7, #23]
 80140b6:	e017      	b.n	80140e8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80140b8:	4b0e      	ldr	r3, [pc, #56]	; (80140f4 <SD_write+0xa8>)
 80140ba:	2200      	movs	r2, #0
 80140bc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80140be:	f7ef fbed 	bl	800389c <HAL_GetTick>
 80140c2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80140c4:	e007      	b.n	80140d6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80140c6:	f7ff feab 	bl	8013e20 <BSP_SD_GetCardState>
 80140ca:	4603      	mov	r3, r0
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d102      	bne.n	80140d6 <SD_write+0x8a>
          {
            res = RES_OK;
 80140d0:	2300      	movs	r3, #0
 80140d2:	75fb      	strb	r3, [r7, #23]
            break;
 80140d4:	e008      	b.n	80140e8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80140d6:	f7ef fbe1 	bl	800389c <HAL_GetTick>
 80140da:	4602      	mov	r2, r0
 80140dc:	693b      	ldr	r3, [r7, #16]
 80140de:	1ad3      	subs	r3, r2, r3
 80140e0:	f247 522f 	movw	r2, #29999	; 0x752f
 80140e4:	4293      	cmp	r3, r2
 80140e6:	d9ee      	bls.n	80140c6 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80140e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80140ea:	4618      	mov	r0, r3
 80140ec:	3718      	adds	r7, #24
 80140ee:	46bd      	mov	sp, r7
 80140f0:	bd80      	pop	{r7, pc}
 80140f2:	bf00      	nop
 80140f4:	2400161c 	.word	0x2400161c

080140f8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80140f8:	b580      	push	{r7, lr}
 80140fa:	b08c      	sub	sp, #48	; 0x30
 80140fc:	af00      	add	r7, sp, #0
 80140fe:	4603      	mov	r3, r0
 8014100:	603a      	str	r2, [r7, #0]
 8014102:	71fb      	strb	r3, [r7, #7]
 8014104:	460b      	mov	r3, r1
 8014106:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8014108:	2301      	movs	r3, #1
 801410a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801410e:	4b25      	ldr	r3, [pc, #148]	; (80141a4 <SD_ioctl+0xac>)
 8014110:	781b      	ldrb	r3, [r3, #0]
 8014112:	b2db      	uxtb	r3, r3
 8014114:	f003 0301 	and.w	r3, r3, #1
 8014118:	2b00      	cmp	r3, #0
 801411a:	d001      	beq.n	8014120 <SD_ioctl+0x28>
 801411c:	2303      	movs	r3, #3
 801411e:	e03c      	b.n	801419a <SD_ioctl+0xa2>

  switch (cmd)
 8014120:	79bb      	ldrb	r3, [r7, #6]
 8014122:	2b03      	cmp	r3, #3
 8014124:	d834      	bhi.n	8014190 <SD_ioctl+0x98>
 8014126:	a201      	add	r2, pc, #4	; (adr r2, 801412c <SD_ioctl+0x34>)
 8014128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801412c:	0801413d 	.word	0x0801413d
 8014130:	08014145 	.word	0x08014145
 8014134:	0801415d 	.word	0x0801415d
 8014138:	08014177 	.word	0x08014177
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801413c:	2300      	movs	r3, #0
 801413e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014142:	e028      	b.n	8014196 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8014144:	f107 0308 	add.w	r3, r7, #8
 8014148:	4618      	mov	r0, r3
 801414a:	f7ff fe79 	bl	8013e40 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801414e:	6a3a      	ldr	r2, [r7, #32]
 8014150:	683b      	ldr	r3, [r7, #0]
 8014152:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014154:	2300      	movs	r3, #0
 8014156:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801415a:	e01c      	b.n	8014196 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801415c:	f107 0308 	add.w	r3, r7, #8
 8014160:	4618      	mov	r0, r3
 8014162:	f7ff fe6d 	bl	8013e40 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8014166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014168:	b29a      	uxth	r2, r3
 801416a:	683b      	ldr	r3, [r7, #0]
 801416c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801416e:	2300      	movs	r3, #0
 8014170:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014174:	e00f      	b.n	8014196 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014176:	f107 0308 	add.w	r3, r7, #8
 801417a:	4618      	mov	r0, r3
 801417c:	f7ff fe60 	bl	8013e40 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8014180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014182:	0a5a      	lsrs	r2, r3, #9
 8014184:	683b      	ldr	r3, [r7, #0]
 8014186:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014188:	2300      	movs	r3, #0
 801418a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801418e:	e002      	b.n	8014196 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8014190:	2304      	movs	r3, #4
 8014192:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8014196:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801419a:	4618      	mov	r0, r3
 801419c:	3730      	adds	r7, #48	; 0x30
 801419e:	46bd      	mov	sp, r7
 80141a0:	bd80      	pop	{r7, pc}
 80141a2:	bf00      	nop
 80141a4:	2400000d 	.word	0x2400000d

080141a8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80141a8:	b480      	push	{r7}
 80141aa:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80141ac:	4b03      	ldr	r3, [pc, #12]	; (80141bc <BSP_SD_WriteCpltCallback+0x14>)
 80141ae:	2201      	movs	r2, #1
 80141b0:	601a      	str	r2, [r3, #0]
}
 80141b2:	bf00      	nop
 80141b4:	46bd      	mov	sp, r7
 80141b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ba:	4770      	bx	lr
 80141bc:	2400161c 	.word	0x2400161c

080141c0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80141c0:	b480      	push	{r7}
 80141c2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80141c4:	4b03      	ldr	r3, [pc, #12]	; (80141d4 <BSP_SD_ReadCpltCallback+0x14>)
 80141c6:	2201      	movs	r2, #1
 80141c8:	601a      	str	r2, [r3, #0]
}
 80141ca:	bf00      	nop
 80141cc:	46bd      	mov	sp, r7
 80141ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d2:	4770      	bx	lr
 80141d4:	24001620 	.word	0x24001620

080141d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80141d8:	b580      	push	{r7, lr}
 80141da:	b084      	sub	sp, #16
 80141dc:	af00      	add	r7, sp, #0
 80141de:	6078      	str	r0, [r7, #4]
 80141e0:	460b      	mov	r3, r1
 80141e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80141e4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80141e8:	f002 fcea 	bl	8016bc0 <USBD_static_malloc>
 80141ec:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d109      	bne.n	8014208 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	32b0      	adds	r2, #176	; 0xb0
 80141fe:	2100      	movs	r1, #0
 8014200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8014204:	2302      	movs	r3, #2
 8014206:	e0d4      	b.n	80143b2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8014208:	f44f 7207 	mov.w	r2, #540	; 0x21c
 801420c:	2100      	movs	r1, #0
 801420e:	68f8      	ldr	r0, [r7, #12]
 8014210:	f002 fd52 	bl	8016cb8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	32b0      	adds	r2, #176	; 0xb0
 801421e:	68f9      	ldr	r1, [r7, #12]
 8014220:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	32b0      	adds	r2, #176	; 0xb0
 801422e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	7c1b      	ldrb	r3, [r3, #16]
 801423c:	2b00      	cmp	r3, #0
 801423e:	d138      	bne.n	80142b2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014240:	4b5e      	ldr	r3, [pc, #376]	; (80143bc <USBD_CDC_Init+0x1e4>)
 8014242:	7819      	ldrb	r1, [r3, #0]
 8014244:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014248:	2202      	movs	r2, #2
 801424a:	6878      	ldr	r0, [r7, #4]
 801424c:	f002 fb95 	bl	801697a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014250:	4b5a      	ldr	r3, [pc, #360]	; (80143bc <USBD_CDC_Init+0x1e4>)
 8014252:	781b      	ldrb	r3, [r3, #0]
 8014254:	f003 020f 	and.w	r2, r3, #15
 8014258:	6879      	ldr	r1, [r7, #4]
 801425a:	4613      	mov	r3, r2
 801425c:	009b      	lsls	r3, r3, #2
 801425e:	4413      	add	r3, r2
 8014260:	009b      	lsls	r3, r3, #2
 8014262:	440b      	add	r3, r1
 8014264:	3324      	adds	r3, #36	; 0x24
 8014266:	2201      	movs	r2, #1
 8014268:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801426a:	4b55      	ldr	r3, [pc, #340]	; (80143c0 <USBD_CDC_Init+0x1e8>)
 801426c:	7819      	ldrb	r1, [r3, #0]
 801426e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014272:	2202      	movs	r2, #2
 8014274:	6878      	ldr	r0, [r7, #4]
 8014276:	f002 fb80 	bl	801697a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801427a:	4b51      	ldr	r3, [pc, #324]	; (80143c0 <USBD_CDC_Init+0x1e8>)
 801427c:	781b      	ldrb	r3, [r3, #0]
 801427e:	f003 020f 	and.w	r2, r3, #15
 8014282:	6879      	ldr	r1, [r7, #4]
 8014284:	4613      	mov	r3, r2
 8014286:	009b      	lsls	r3, r3, #2
 8014288:	4413      	add	r3, r2
 801428a:	009b      	lsls	r3, r3, #2
 801428c:	440b      	add	r3, r1
 801428e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014292:	2201      	movs	r2, #1
 8014294:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8014296:	4b4b      	ldr	r3, [pc, #300]	; (80143c4 <USBD_CDC_Init+0x1ec>)
 8014298:	781b      	ldrb	r3, [r3, #0]
 801429a:	f003 020f 	and.w	r2, r3, #15
 801429e:	6879      	ldr	r1, [r7, #4]
 80142a0:	4613      	mov	r3, r2
 80142a2:	009b      	lsls	r3, r3, #2
 80142a4:	4413      	add	r3, r2
 80142a6:	009b      	lsls	r3, r3, #2
 80142a8:	440b      	add	r3, r1
 80142aa:	3326      	adds	r3, #38	; 0x26
 80142ac:	2210      	movs	r2, #16
 80142ae:	801a      	strh	r2, [r3, #0]
 80142b0:	e035      	b.n	801431e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80142b2:	4b42      	ldr	r3, [pc, #264]	; (80143bc <USBD_CDC_Init+0x1e4>)
 80142b4:	7819      	ldrb	r1, [r3, #0]
 80142b6:	2340      	movs	r3, #64	; 0x40
 80142b8:	2202      	movs	r2, #2
 80142ba:	6878      	ldr	r0, [r7, #4]
 80142bc:	f002 fb5d 	bl	801697a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80142c0:	4b3e      	ldr	r3, [pc, #248]	; (80143bc <USBD_CDC_Init+0x1e4>)
 80142c2:	781b      	ldrb	r3, [r3, #0]
 80142c4:	f003 020f 	and.w	r2, r3, #15
 80142c8:	6879      	ldr	r1, [r7, #4]
 80142ca:	4613      	mov	r3, r2
 80142cc:	009b      	lsls	r3, r3, #2
 80142ce:	4413      	add	r3, r2
 80142d0:	009b      	lsls	r3, r3, #2
 80142d2:	440b      	add	r3, r1
 80142d4:	3324      	adds	r3, #36	; 0x24
 80142d6:	2201      	movs	r2, #1
 80142d8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80142da:	4b39      	ldr	r3, [pc, #228]	; (80143c0 <USBD_CDC_Init+0x1e8>)
 80142dc:	7819      	ldrb	r1, [r3, #0]
 80142de:	2340      	movs	r3, #64	; 0x40
 80142e0:	2202      	movs	r2, #2
 80142e2:	6878      	ldr	r0, [r7, #4]
 80142e4:	f002 fb49 	bl	801697a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80142e8:	4b35      	ldr	r3, [pc, #212]	; (80143c0 <USBD_CDC_Init+0x1e8>)
 80142ea:	781b      	ldrb	r3, [r3, #0]
 80142ec:	f003 020f 	and.w	r2, r3, #15
 80142f0:	6879      	ldr	r1, [r7, #4]
 80142f2:	4613      	mov	r3, r2
 80142f4:	009b      	lsls	r3, r3, #2
 80142f6:	4413      	add	r3, r2
 80142f8:	009b      	lsls	r3, r3, #2
 80142fa:	440b      	add	r3, r1
 80142fc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014300:	2201      	movs	r2, #1
 8014302:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014304:	4b2f      	ldr	r3, [pc, #188]	; (80143c4 <USBD_CDC_Init+0x1ec>)
 8014306:	781b      	ldrb	r3, [r3, #0]
 8014308:	f003 020f 	and.w	r2, r3, #15
 801430c:	6879      	ldr	r1, [r7, #4]
 801430e:	4613      	mov	r3, r2
 8014310:	009b      	lsls	r3, r3, #2
 8014312:	4413      	add	r3, r2
 8014314:	009b      	lsls	r3, r3, #2
 8014316:	440b      	add	r3, r1
 8014318:	3326      	adds	r3, #38	; 0x26
 801431a:	2210      	movs	r2, #16
 801431c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801431e:	4b29      	ldr	r3, [pc, #164]	; (80143c4 <USBD_CDC_Init+0x1ec>)
 8014320:	7819      	ldrb	r1, [r3, #0]
 8014322:	2308      	movs	r3, #8
 8014324:	2203      	movs	r2, #3
 8014326:	6878      	ldr	r0, [r7, #4]
 8014328:	f002 fb27 	bl	801697a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801432c:	4b25      	ldr	r3, [pc, #148]	; (80143c4 <USBD_CDC_Init+0x1ec>)
 801432e:	781b      	ldrb	r3, [r3, #0]
 8014330:	f003 020f 	and.w	r2, r3, #15
 8014334:	6879      	ldr	r1, [r7, #4]
 8014336:	4613      	mov	r3, r2
 8014338:	009b      	lsls	r3, r3, #2
 801433a:	4413      	add	r3, r2
 801433c:	009b      	lsls	r3, r3, #2
 801433e:	440b      	add	r3, r1
 8014340:	3324      	adds	r3, #36	; 0x24
 8014342:	2201      	movs	r2, #1
 8014344:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	2200      	movs	r2, #0
 801434a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014354:	687a      	ldr	r2, [r7, #4]
 8014356:	33b0      	adds	r3, #176	; 0xb0
 8014358:	009b      	lsls	r3, r3, #2
 801435a:	4413      	add	r3, r2
 801435c:	685b      	ldr	r3, [r3, #4]
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8014362:	68fb      	ldr	r3, [r7, #12]
 8014364:	2200      	movs	r2, #0
 8014366:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801436a:	68fb      	ldr	r3, [r7, #12]
 801436c:	2200      	movs	r2, #0
 801436e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8014372:	68fb      	ldr	r3, [r7, #12]
 8014374:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8014378:	2b00      	cmp	r3, #0
 801437a:	d101      	bne.n	8014380 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 801437c:	2302      	movs	r3, #2
 801437e:	e018      	b.n	80143b2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	7c1b      	ldrb	r3, [r3, #16]
 8014384:	2b00      	cmp	r3, #0
 8014386:	d10a      	bne.n	801439e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014388:	4b0d      	ldr	r3, [pc, #52]	; (80143c0 <USBD_CDC_Init+0x1e8>)
 801438a:	7819      	ldrb	r1, [r3, #0]
 801438c:	68fb      	ldr	r3, [r7, #12]
 801438e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014392:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014396:	6878      	ldr	r0, [r7, #4]
 8014398:	f002 fbde 	bl	8016b58 <USBD_LL_PrepareReceive>
 801439c:	e008      	b.n	80143b0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801439e:	4b08      	ldr	r3, [pc, #32]	; (80143c0 <USBD_CDC_Init+0x1e8>)
 80143a0:	7819      	ldrb	r1, [r3, #0]
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80143a8:	2340      	movs	r3, #64	; 0x40
 80143aa:	6878      	ldr	r0, [r7, #4]
 80143ac:	f002 fbd4 	bl	8016b58 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80143b0:	2300      	movs	r3, #0
}
 80143b2:	4618      	mov	r0, r3
 80143b4:	3710      	adds	r7, #16
 80143b6:	46bd      	mov	sp, r7
 80143b8:	bd80      	pop	{r7, pc}
 80143ba:	bf00      	nop
 80143bc:	24000097 	.word	0x24000097
 80143c0:	24000098 	.word	0x24000098
 80143c4:	24000099 	.word	0x24000099

080143c8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80143c8:	b580      	push	{r7, lr}
 80143ca:	b082      	sub	sp, #8
 80143cc:	af00      	add	r7, sp, #0
 80143ce:	6078      	str	r0, [r7, #4]
 80143d0:	460b      	mov	r3, r1
 80143d2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80143d4:	4b3a      	ldr	r3, [pc, #232]	; (80144c0 <USBD_CDC_DeInit+0xf8>)
 80143d6:	781b      	ldrb	r3, [r3, #0]
 80143d8:	4619      	mov	r1, r3
 80143da:	6878      	ldr	r0, [r7, #4]
 80143dc:	f002 faf3 	bl	80169c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80143e0:	4b37      	ldr	r3, [pc, #220]	; (80144c0 <USBD_CDC_DeInit+0xf8>)
 80143e2:	781b      	ldrb	r3, [r3, #0]
 80143e4:	f003 020f 	and.w	r2, r3, #15
 80143e8:	6879      	ldr	r1, [r7, #4]
 80143ea:	4613      	mov	r3, r2
 80143ec:	009b      	lsls	r3, r3, #2
 80143ee:	4413      	add	r3, r2
 80143f0:	009b      	lsls	r3, r3, #2
 80143f2:	440b      	add	r3, r1
 80143f4:	3324      	adds	r3, #36	; 0x24
 80143f6:	2200      	movs	r2, #0
 80143f8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80143fa:	4b32      	ldr	r3, [pc, #200]	; (80144c4 <USBD_CDC_DeInit+0xfc>)
 80143fc:	781b      	ldrb	r3, [r3, #0]
 80143fe:	4619      	mov	r1, r3
 8014400:	6878      	ldr	r0, [r7, #4]
 8014402:	f002 fae0 	bl	80169c6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8014406:	4b2f      	ldr	r3, [pc, #188]	; (80144c4 <USBD_CDC_DeInit+0xfc>)
 8014408:	781b      	ldrb	r3, [r3, #0]
 801440a:	f003 020f 	and.w	r2, r3, #15
 801440e:	6879      	ldr	r1, [r7, #4]
 8014410:	4613      	mov	r3, r2
 8014412:	009b      	lsls	r3, r3, #2
 8014414:	4413      	add	r3, r2
 8014416:	009b      	lsls	r3, r3, #2
 8014418:	440b      	add	r3, r1
 801441a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801441e:	2200      	movs	r2, #0
 8014420:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8014422:	4b29      	ldr	r3, [pc, #164]	; (80144c8 <USBD_CDC_DeInit+0x100>)
 8014424:	781b      	ldrb	r3, [r3, #0]
 8014426:	4619      	mov	r1, r3
 8014428:	6878      	ldr	r0, [r7, #4]
 801442a:	f002 facc 	bl	80169c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801442e:	4b26      	ldr	r3, [pc, #152]	; (80144c8 <USBD_CDC_DeInit+0x100>)
 8014430:	781b      	ldrb	r3, [r3, #0]
 8014432:	f003 020f 	and.w	r2, r3, #15
 8014436:	6879      	ldr	r1, [r7, #4]
 8014438:	4613      	mov	r3, r2
 801443a:	009b      	lsls	r3, r3, #2
 801443c:	4413      	add	r3, r2
 801443e:	009b      	lsls	r3, r3, #2
 8014440:	440b      	add	r3, r1
 8014442:	3324      	adds	r3, #36	; 0x24
 8014444:	2200      	movs	r2, #0
 8014446:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8014448:	4b1f      	ldr	r3, [pc, #124]	; (80144c8 <USBD_CDC_DeInit+0x100>)
 801444a:	781b      	ldrb	r3, [r3, #0]
 801444c:	f003 020f 	and.w	r2, r3, #15
 8014450:	6879      	ldr	r1, [r7, #4]
 8014452:	4613      	mov	r3, r2
 8014454:	009b      	lsls	r3, r3, #2
 8014456:	4413      	add	r3, r2
 8014458:	009b      	lsls	r3, r3, #2
 801445a:	440b      	add	r3, r1
 801445c:	3326      	adds	r3, #38	; 0x26
 801445e:	2200      	movs	r2, #0
 8014460:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	32b0      	adds	r2, #176	; 0xb0
 801446c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014470:	2b00      	cmp	r3, #0
 8014472:	d01f      	beq.n	80144b4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801447a:	687a      	ldr	r2, [r7, #4]
 801447c:	33b0      	adds	r3, #176	; 0xb0
 801447e:	009b      	lsls	r3, r3, #2
 8014480:	4413      	add	r3, r2
 8014482:	685b      	ldr	r3, [r3, #4]
 8014484:	685b      	ldr	r3, [r3, #4]
 8014486:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	32b0      	adds	r2, #176	; 0xb0
 8014492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014496:	4618      	mov	r0, r3
 8014498:	f002 fba0 	bl	8016bdc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	32b0      	adds	r2, #176	; 0xb0
 80144a6:	2100      	movs	r1, #0
 80144a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	2200      	movs	r2, #0
 80144b0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80144b4:	2300      	movs	r3, #0
}
 80144b6:	4618      	mov	r0, r3
 80144b8:	3708      	adds	r7, #8
 80144ba:	46bd      	mov	sp, r7
 80144bc:	bd80      	pop	{r7, pc}
 80144be:	bf00      	nop
 80144c0:	24000097 	.word	0x24000097
 80144c4:	24000098 	.word	0x24000098
 80144c8:	24000099 	.word	0x24000099

080144cc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80144cc:	b580      	push	{r7, lr}
 80144ce:	b086      	sub	sp, #24
 80144d0:	af00      	add	r7, sp, #0
 80144d2:	6078      	str	r0, [r7, #4]
 80144d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	32b0      	adds	r2, #176	; 0xb0
 80144e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80144e4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80144e6:	2300      	movs	r3, #0
 80144e8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80144ea:	2300      	movs	r3, #0
 80144ec:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80144ee:	2300      	movs	r3, #0
 80144f0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80144f2:	693b      	ldr	r3, [r7, #16]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d101      	bne.n	80144fc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80144f8:	2303      	movs	r3, #3
 80144fa:	e0bf      	b.n	801467c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80144fc:	683b      	ldr	r3, [r7, #0]
 80144fe:	781b      	ldrb	r3, [r3, #0]
 8014500:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014504:	2b00      	cmp	r3, #0
 8014506:	d050      	beq.n	80145aa <USBD_CDC_Setup+0xde>
 8014508:	2b20      	cmp	r3, #32
 801450a:	f040 80af 	bne.w	801466c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801450e:	683b      	ldr	r3, [r7, #0]
 8014510:	88db      	ldrh	r3, [r3, #6]
 8014512:	2b00      	cmp	r3, #0
 8014514:	d03a      	beq.n	801458c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8014516:	683b      	ldr	r3, [r7, #0]
 8014518:	781b      	ldrb	r3, [r3, #0]
 801451a:	b25b      	sxtb	r3, r3
 801451c:	2b00      	cmp	r3, #0
 801451e:	da1b      	bge.n	8014558 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014526:	687a      	ldr	r2, [r7, #4]
 8014528:	33b0      	adds	r3, #176	; 0xb0
 801452a:	009b      	lsls	r3, r3, #2
 801452c:	4413      	add	r3, r2
 801452e:	685b      	ldr	r3, [r3, #4]
 8014530:	689b      	ldr	r3, [r3, #8]
 8014532:	683a      	ldr	r2, [r7, #0]
 8014534:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8014536:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014538:	683a      	ldr	r2, [r7, #0]
 801453a:	88d2      	ldrh	r2, [r2, #6]
 801453c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801453e:	683b      	ldr	r3, [r7, #0]
 8014540:	88db      	ldrh	r3, [r3, #6]
 8014542:	2b07      	cmp	r3, #7
 8014544:	bf28      	it	cs
 8014546:	2307      	movcs	r3, #7
 8014548:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801454a:	693b      	ldr	r3, [r7, #16]
 801454c:	89fa      	ldrh	r2, [r7, #14]
 801454e:	4619      	mov	r1, r3
 8014550:	6878      	ldr	r0, [r7, #4]
 8014552:	f001 fd89 	bl	8016068 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8014556:	e090      	b.n	801467a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8014558:	683b      	ldr	r3, [r7, #0]
 801455a:	785a      	ldrb	r2, [r3, #1]
 801455c:	693b      	ldr	r3, [r7, #16]
 801455e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8014562:	683b      	ldr	r3, [r7, #0]
 8014564:	88db      	ldrh	r3, [r3, #6]
 8014566:	2b3f      	cmp	r3, #63	; 0x3f
 8014568:	d803      	bhi.n	8014572 <USBD_CDC_Setup+0xa6>
 801456a:	683b      	ldr	r3, [r7, #0]
 801456c:	88db      	ldrh	r3, [r3, #6]
 801456e:	b2da      	uxtb	r2, r3
 8014570:	e000      	b.n	8014574 <USBD_CDC_Setup+0xa8>
 8014572:	2240      	movs	r2, #64	; 0x40
 8014574:	693b      	ldr	r3, [r7, #16]
 8014576:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801457a:	6939      	ldr	r1, [r7, #16]
 801457c:	693b      	ldr	r3, [r7, #16]
 801457e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8014582:	461a      	mov	r2, r3
 8014584:	6878      	ldr	r0, [r7, #4]
 8014586:	f001 fd9b 	bl	80160c0 <USBD_CtlPrepareRx>
      break;
 801458a:	e076      	b.n	801467a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014592:	687a      	ldr	r2, [r7, #4]
 8014594:	33b0      	adds	r3, #176	; 0xb0
 8014596:	009b      	lsls	r3, r3, #2
 8014598:	4413      	add	r3, r2
 801459a:	685b      	ldr	r3, [r3, #4]
 801459c:	689b      	ldr	r3, [r3, #8]
 801459e:	683a      	ldr	r2, [r7, #0]
 80145a0:	7850      	ldrb	r0, [r2, #1]
 80145a2:	2200      	movs	r2, #0
 80145a4:	6839      	ldr	r1, [r7, #0]
 80145a6:	4798      	blx	r3
      break;
 80145a8:	e067      	b.n	801467a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80145aa:	683b      	ldr	r3, [r7, #0]
 80145ac:	785b      	ldrb	r3, [r3, #1]
 80145ae:	2b0b      	cmp	r3, #11
 80145b0:	d851      	bhi.n	8014656 <USBD_CDC_Setup+0x18a>
 80145b2:	a201      	add	r2, pc, #4	; (adr r2, 80145b8 <USBD_CDC_Setup+0xec>)
 80145b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145b8:	080145e9 	.word	0x080145e9
 80145bc:	08014665 	.word	0x08014665
 80145c0:	08014657 	.word	0x08014657
 80145c4:	08014657 	.word	0x08014657
 80145c8:	08014657 	.word	0x08014657
 80145cc:	08014657 	.word	0x08014657
 80145d0:	08014657 	.word	0x08014657
 80145d4:	08014657 	.word	0x08014657
 80145d8:	08014657 	.word	0x08014657
 80145dc:	08014657 	.word	0x08014657
 80145e0:	08014613 	.word	0x08014613
 80145e4:	0801463d 	.word	0x0801463d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80145ee:	b2db      	uxtb	r3, r3
 80145f0:	2b03      	cmp	r3, #3
 80145f2:	d107      	bne.n	8014604 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80145f4:	f107 030a 	add.w	r3, r7, #10
 80145f8:	2202      	movs	r2, #2
 80145fa:	4619      	mov	r1, r3
 80145fc:	6878      	ldr	r0, [r7, #4]
 80145fe:	f001 fd33 	bl	8016068 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014602:	e032      	b.n	801466a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014604:	6839      	ldr	r1, [r7, #0]
 8014606:	6878      	ldr	r0, [r7, #4]
 8014608:	f001 fcbd 	bl	8015f86 <USBD_CtlError>
            ret = USBD_FAIL;
 801460c:	2303      	movs	r3, #3
 801460e:	75fb      	strb	r3, [r7, #23]
          break;
 8014610:	e02b      	b.n	801466a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014618:	b2db      	uxtb	r3, r3
 801461a:	2b03      	cmp	r3, #3
 801461c:	d107      	bne.n	801462e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801461e:	f107 030d 	add.w	r3, r7, #13
 8014622:	2201      	movs	r2, #1
 8014624:	4619      	mov	r1, r3
 8014626:	6878      	ldr	r0, [r7, #4]
 8014628:	f001 fd1e 	bl	8016068 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801462c:	e01d      	b.n	801466a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801462e:	6839      	ldr	r1, [r7, #0]
 8014630:	6878      	ldr	r0, [r7, #4]
 8014632:	f001 fca8 	bl	8015f86 <USBD_CtlError>
            ret = USBD_FAIL;
 8014636:	2303      	movs	r3, #3
 8014638:	75fb      	strb	r3, [r7, #23]
          break;
 801463a:	e016      	b.n	801466a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014642:	b2db      	uxtb	r3, r3
 8014644:	2b03      	cmp	r3, #3
 8014646:	d00f      	beq.n	8014668 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8014648:	6839      	ldr	r1, [r7, #0]
 801464a:	6878      	ldr	r0, [r7, #4]
 801464c:	f001 fc9b 	bl	8015f86 <USBD_CtlError>
            ret = USBD_FAIL;
 8014650:	2303      	movs	r3, #3
 8014652:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014654:	e008      	b.n	8014668 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8014656:	6839      	ldr	r1, [r7, #0]
 8014658:	6878      	ldr	r0, [r7, #4]
 801465a:	f001 fc94 	bl	8015f86 <USBD_CtlError>
          ret = USBD_FAIL;
 801465e:	2303      	movs	r3, #3
 8014660:	75fb      	strb	r3, [r7, #23]
          break;
 8014662:	e002      	b.n	801466a <USBD_CDC_Setup+0x19e>
          break;
 8014664:	bf00      	nop
 8014666:	e008      	b.n	801467a <USBD_CDC_Setup+0x1ae>
          break;
 8014668:	bf00      	nop
      }
      break;
 801466a:	e006      	b.n	801467a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 801466c:	6839      	ldr	r1, [r7, #0]
 801466e:	6878      	ldr	r0, [r7, #4]
 8014670:	f001 fc89 	bl	8015f86 <USBD_CtlError>
      ret = USBD_FAIL;
 8014674:	2303      	movs	r3, #3
 8014676:	75fb      	strb	r3, [r7, #23]
      break;
 8014678:	bf00      	nop
  }

  return (uint8_t)ret;
 801467a:	7dfb      	ldrb	r3, [r7, #23]
}
 801467c:	4618      	mov	r0, r3
 801467e:	3718      	adds	r7, #24
 8014680:	46bd      	mov	sp, r7
 8014682:	bd80      	pop	{r7, pc}

08014684 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014684:	b580      	push	{r7, lr}
 8014686:	b084      	sub	sp, #16
 8014688:	af00      	add	r7, sp, #0
 801468a:	6078      	str	r0, [r7, #4]
 801468c:	460b      	mov	r3, r1
 801468e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014696:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	32b0      	adds	r2, #176	; 0xb0
 80146a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d101      	bne.n	80146ae <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80146aa:	2303      	movs	r3, #3
 80146ac:	e065      	b.n	801477a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	32b0      	adds	r2, #176	; 0xb0
 80146b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146bc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80146be:	78fb      	ldrb	r3, [r7, #3]
 80146c0:	f003 020f 	and.w	r2, r3, #15
 80146c4:	6879      	ldr	r1, [r7, #4]
 80146c6:	4613      	mov	r3, r2
 80146c8:	009b      	lsls	r3, r3, #2
 80146ca:	4413      	add	r3, r2
 80146cc:	009b      	lsls	r3, r3, #2
 80146ce:	440b      	add	r3, r1
 80146d0:	3318      	adds	r3, #24
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d02f      	beq.n	8014738 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80146d8:	78fb      	ldrb	r3, [r7, #3]
 80146da:	f003 020f 	and.w	r2, r3, #15
 80146de:	6879      	ldr	r1, [r7, #4]
 80146e0:	4613      	mov	r3, r2
 80146e2:	009b      	lsls	r3, r3, #2
 80146e4:	4413      	add	r3, r2
 80146e6:	009b      	lsls	r3, r3, #2
 80146e8:	440b      	add	r3, r1
 80146ea:	3318      	adds	r3, #24
 80146ec:	681a      	ldr	r2, [r3, #0]
 80146ee:	78fb      	ldrb	r3, [r7, #3]
 80146f0:	f003 010f 	and.w	r1, r3, #15
 80146f4:	68f8      	ldr	r0, [r7, #12]
 80146f6:	460b      	mov	r3, r1
 80146f8:	00db      	lsls	r3, r3, #3
 80146fa:	440b      	add	r3, r1
 80146fc:	009b      	lsls	r3, r3, #2
 80146fe:	4403      	add	r3, r0
 8014700:	3344      	adds	r3, #68	; 0x44
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	fbb2 f1f3 	udiv	r1, r2, r3
 8014708:	fb01 f303 	mul.w	r3, r1, r3
 801470c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801470e:	2b00      	cmp	r3, #0
 8014710:	d112      	bne.n	8014738 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8014712:	78fb      	ldrb	r3, [r7, #3]
 8014714:	f003 020f 	and.w	r2, r3, #15
 8014718:	6879      	ldr	r1, [r7, #4]
 801471a:	4613      	mov	r3, r2
 801471c:	009b      	lsls	r3, r3, #2
 801471e:	4413      	add	r3, r2
 8014720:	009b      	lsls	r3, r3, #2
 8014722:	440b      	add	r3, r1
 8014724:	3318      	adds	r3, #24
 8014726:	2200      	movs	r2, #0
 8014728:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801472a:	78f9      	ldrb	r1, [r7, #3]
 801472c:	2300      	movs	r3, #0
 801472e:	2200      	movs	r2, #0
 8014730:	6878      	ldr	r0, [r7, #4]
 8014732:	f002 f9f0 	bl	8016b16 <USBD_LL_Transmit>
 8014736:	e01f      	b.n	8014778 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8014738:	68bb      	ldr	r3, [r7, #8]
 801473a:	2200      	movs	r2, #0
 801473c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014746:	687a      	ldr	r2, [r7, #4]
 8014748:	33b0      	adds	r3, #176	; 0xb0
 801474a:	009b      	lsls	r3, r3, #2
 801474c:	4413      	add	r3, r2
 801474e:	685b      	ldr	r3, [r3, #4]
 8014750:	691b      	ldr	r3, [r3, #16]
 8014752:	2b00      	cmp	r3, #0
 8014754:	d010      	beq.n	8014778 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801475c:	687a      	ldr	r2, [r7, #4]
 801475e:	33b0      	adds	r3, #176	; 0xb0
 8014760:	009b      	lsls	r3, r3, #2
 8014762:	4413      	add	r3, r2
 8014764:	685b      	ldr	r3, [r3, #4]
 8014766:	691b      	ldr	r3, [r3, #16]
 8014768:	68ba      	ldr	r2, [r7, #8]
 801476a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801476e:	68ba      	ldr	r2, [r7, #8]
 8014770:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8014774:	78fa      	ldrb	r2, [r7, #3]
 8014776:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8014778:	2300      	movs	r3, #0
}
 801477a:	4618      	mov	r0, r3
 801477c:	3710      	adds	r7, #16
 801477e:	46bd      	mov	sp, r7
 8014780:	bd80      	pop	{r7, pc}

08014782 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014782:	b580      	push	{r7, lr}
 8014784:	b084      	sub	sp, #16
 8014786:	af00      	add	r7, sp, #0
 8014788:	6078      	str	r0, [r7, #4]
 801478a:	460b      	mov	r3, r1
 801478c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	32b0      	adds	r2, #176	; 0xb0
 8014798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801479c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	32b0      	adds	r2, #176	; 0xb0
 80147a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d101      	bne.n	80147b4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80147b0:	2303      	movs	r3, #3
 80147b2:	e01a      	b.n	80147ea <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80147b4:	78fb      	ldrb	r3, [r7, #3]
 80147b6:	4619      	mov	r1, r3
 80147b8:	6878      	ldr	r0, [r7, #4]
 80147ba:	f002 f9ee 	bl	8016b9a <USBD_LL_GetRxDataSize>
 80147be:	4602      	mov	r2, r0
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80147cc:	687a      	ldr	r2, [r7, #4]
 80147ce:	33b0      	adds	r3, #176	; 0xb0
 80147d0:	009b      	lsls	r3, r3, #2
 80147d2:	4413      	add	r3, r2
 80147d4:	685b      	ldr	r3, [r3, #4]
 80147d6:	68db      	ldr	r3, [r3, #12]
 80147d8:	68fa      	ldr	r2, [r7, #12]
 80147da:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80147de:	68fa      	ldr	r2, [r7, #12]
 80147e0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80147e4:	4611      	mov	r1, r2
 80147e6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80147e8:	2300      	movs	r3, #0
}
 80147ea:	4618      	mov	r0, r3
 80147ec:	3710      	adds	r7, #16
 80147ee:	46bd      	mov	sp, r7
 80147f0:	bd80      	pop	{r7, pc}

080147f2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80147f2:	b580      	push	{r7, lr}
 80147f4:	b084      	sub	sp, #16
 80147f6:	af00      	add	r7, sp, #0
 80147f8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	32b0      	adds	r2, #176	; 0xb0
 8014804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014808:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	2b00      	cmp	r3, #0
 801480e:	d101      	bne.n	8014814 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014810:	2303      	movs	r3, #3
 8014812:	e025      	b.n	8014860 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801481a:	687a      	ldr	r2, [r7, #4]
 801481c:	33b0      	adds	r3, #176	; 0xb0
 801481e:	009b      	lsls	r3, r3, #2
 8014820:	4413      	add	r3, r2
 8014822:	685b      	ldr	r3, [r3, #4]
 8014824:	2b00      	cmp	r3, #0
 8014826:	d01a      	beq.n	801485e <USBD_CDC_EP0_RxReady+0x6c>
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801482e:	2bff      	cmp	r3, #255	; 0xff
 8014830:	d015      	beq.n	801485e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014838:	687a      	ldr	r2, [r7, #4]
 801483a:	33b0      	adds	r3, #176	; 0xb0
 801483c:	009b      	lsls	r3, r3, #2
 801483e:	4413      	add	r3, r2
 8014840:	685b      	ldr	r3, [r3, #4]
 8014842:	689b      	ldr	r3, [r3, #8]
 8014844:	68fa      	ldr	r2, [r7, #12]
 8014846:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 801484a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 801484c:	68fa      	ldr	r2, [r7, #12]
 801484e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014852:	b292      	uxth	r2, r2
 8014854:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	22ff      	movs	r2, #255	; 0xff
 801485a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 801485e:	2300      	movs	r3, #0
}
 8014860:	4618      	mov	r0, r3
 8014862:	3710      	adds	r7, #16
 8014864:	46bd      	mov	sp, r7
 8014866:	bd80      	pop	{r7, pc}

08014868 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014868:	b580      	push	{r7, lr}
 801486a:	b086      	sub	sp, #24
 801486c:	af00      	add	r7, sp, #0
 801486e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014870:	2182      	movs	r1, #130	; 0x82
 8014872:	4818      	ldr	r0, [pc, #96]	; (80148d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014874:	f000 fd4f 	bl	8015316 <USBD_GetEpDesc>
 8014878:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801487a:	2101      	movs	r1, #1
 801487c:	4815      	ldr	r0, [pc, #84]	; (80148d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801487e:	f000 fd4a 	bl	8015316 <USBD_GetEpDesc>
 8014882:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014884:	2181      	movs	r1, #129	; 0x81
 8014886:	4813      	ldr	r0, [pc, #76]	; (80148d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014888:	f000 fd45 	bl	8015316 <USBD_GetEpDesc>
 801488c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801488e:	697b      	ldr	r3, [r7, #20]
 8014890:	2b00      	cmp	r3, #0
 8014892:	d002      	beq.n	801489a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014894:	697b      	ldr	r3, [r7, #20]
 8014896:	2210      	movs	r2, #16
 8014898:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801489a:	693b      	ldr	r3, [r7, #16]
 801489c:	2b00      	cmp	r3, #0
 801489e:	d006      	beq.n	80148ae <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80148a0:	693b      	ldr	r3, [r7, #16]
 80148a2:	2200      	movs	r2, #0
 80148a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80148a8:	711a      	strb	r2, [r3, #4]
 80148aa:	2200      	movs	r2, #0
 80148ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80148ae:	68fb      	ldr	r3, [r7, #12]
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d006      	beq.n	80148c2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	2200      	movs	r2, #0
 80148b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80148bc:	711a      	strb	r2, [r3, #4]
 80148be:	2200      	movs	r2, #0
 80148c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	2243      	movs	r2, #67	; 0x43
 80148c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80148c8:	4b02      	ldr	r3, [pc, #8]	; (80148d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80148ca:	4618      	mov	r0, r3
 80148cc:	3718      	adds	r7, #24
 80148ce:	46bd      	mov	sp, r7
 80148d0:	bd80      	pop	{r7, pc}
 80148d2:	bf00      	nop
 80148d4:	24000054 	.word	0x24000054

080148d8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80148d8:	b580      	push	{r7, lr}
 80148da:	b086      	sub	sp, #24
 80148dc:	af00      	add	r7, sp, #0
 80148de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80148e0:	2182      	movs	r1, #130	; 0x82
 80148e2:	4818      	ldr	r0, [pc, #96]	; (8014944 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80148e4:	f000 fd17 	bl	8015316 <USBD_GetEpDesc>
 80148e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80148ea:	2101      	movs	r1, #1
 80148ec:	4815      	ldr	r0, [pc, #84]	; (8014944 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80148ee:	f000 fd12 	bl	8015316 <USBD_GetEpDesc>
 80148f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80148f4:	2181      	movs	r1, #129	; 0x81
 80148f6:	4813      	ldr	r0, [pc, #76]	; (8014944 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80148f8:	f000 fd0d 	bl	8015316 <USBD_GetEpDesc>
 80148fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80148fe:	697b      	ldr	r3, [r7, #20]
 8014900:	2b00      	cmp	r3, #0
 8014902:	d002      	beq.n	801490a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8014904:	697b      	ldr	r3, [r7, #20]
 8014906:	2210      	movs	r2, #16
 8014908:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801490a:	693b      	ldr	r3, [r7, #16]
 801490c:	2b00      	cmp	r3, #0
 801490e:	d006      	beq.n	801491e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014910:	693b      	ldr	r3, [r7, #16]
 8014912:	2200      	movs	r2, #0
 8014914:	711a      	strb	r2, [r3, #4]
 8014916:	2200      	movs	r2, #0
 8014918:	f042 0202 	orr.w	r2, r2, #2
 801491c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801491e:	68fb      	ldr	r3, [r7, #12]
 8014920:	2b00      	cmp	r3, #0
 8014922:	d006      	beq.n	8014932 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	2200      	movs	r2, #0
 8014928:	711a      	strb	r2, [r3, #4]
 801492a:	2200      	movs	r2, #0
 801492c:	f042 0202 	orr.w	r2, r2, #2
 8014930:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	2243      	movs	r2, #67	; 0x43
 8014936:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014938:	4b02      	ldr	r3, [pc, #8]	; (8014944 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801493a:	4618      	mov	r0, r3
 801493c:	3718      	adds	r7, #24
 801493e:	46bd      	mov	sp, r7
 8014940:	bd80      	pop	{r7, pc}
 8014942:	bf00      	nop
 8014944:	24000054 	.word	0x24000054

08014948 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014948:	b580      	push	{r7, lr}
 801494a:	b086      	sub	sp, #24
 801494c:	af00      	add	r7, sp, #0
 801494e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014950:	2182      	movs	r1, #130	; 0x82
 8014952:	4818      	ldr	r0, [pc, #96]	; (80149b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014954:	f000 fcdf 	bl	8015316 <USBD_GetEpDesc>
 8014958:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801495a:	2101      	movs	r1, #1
 801495c:	4815      	ldr	r0, [pc, #84]	; (80149b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801495e:	f000 fcda 	bl	8015316 <USBD_GetEpDesc>
 8014962:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014964:	2181      	movs	r1, #129	; 0x81
 8014966:	4813      	ldr	r0, [pc, #76]	; (80149b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014968:	f000 fcd5 	bl	8015316 <USBD_GetEpDesc>
 801496c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801496e:	697b      	ldr	r3, [r7, #20]
 8014970:	2b00      	cmp	r3, #0
 8014972:	d002      	beq.n	801497a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014974:	697b      	ldr	r3, [r7, #20]
 8014976:	2210      	movs	r2, #16
 8014978:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801497a:	693b      	ldr	r3, [r7, #16]
 801497c:	2b00      	cmp	r3, #0
 801497e:	d006      	beq.n	801498e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014980:	693b      	ldr	r3, [r7, #16]
 8014982:	2200      	movs	r2, #0
 8014984:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014988:	711a      	strb	r2, [r3, #4]
 801498a:	2200      	movs	r2, #0
 801498c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	2b00      	cmp	r3, #0
 8014992:	d006      	beq.n	80149a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014994:	68fb      	ldr	r3, [r7, #12]
 8014996:	2200      	movs	r2, #0
 8014998:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801499c:	711a      	strb	r2, [r3, #4]
 801499e:	2200      	movs	r2, #0
 80149a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	2243      	movs	r2, #67	; 0x43
 80149a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80149a8:	4b02      	ldr	r3, [pc, #8]	; (80149b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80149aa:	4618      	mov	r0, r3
 80149ac:	3718      	adds	r7, #24
 80149ae:	46bd      	mov	sp, r7
 80149b0:	bd80      	pop	{r7, pc}
 80149b2:	bf00      	nop
 80149b4:	24000054 	.word	0x24000054

080149b8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80149b8:	b480      	push	{r7}
 80149ba:	b083      	sub	sp, #12
 80149bc:	af00      	add	r7, sp, #0
 80149be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	220a      	movs	r2, #10
 80149c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80149c6:	4b03      	ldr	r3, [pc, #12]	; (80149d4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80149c8:	4618      	mov	r0, r3
 80149ca:	370c      	adds	r7, #12
 80149cc:	46bd      	mov	sp, r7
 80149ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149d2:	4770      	bx	lr
 80149d4:	24000010 	.word	0x24000010

080149d8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80149d8:	b480      	push	{r7}
 80149da:	b083      	sub	sp, #12
 80149dc:	af00      	add	r7, sp, #0
 80149de:	6078      	str	r0, [r7, #4]
 80149e0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80149e2:	683b      	ldr	r3, [r7, #0]
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d101      	bne.n	80149ec <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80149e8:	2303      	movs	r3, #3
 80149ea:	e009      	b.n	8014a00 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80149f2:	687a      	ldr	r2, [r7, #4]
 80149f4:	33b0      	adds	r3, #176	; 0xb0
 80149f6:	009b      	lsls	r3, r3, #2
 80149f8:	4413      	add	r3, r2
 80149fa:	683a      	ldr	r2, [r7, #0]
 80149fc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80149fe:	2300      	movs	r3, #0
}
 8014a00:	4618      	mov	r0, r3
 8014a02:	370c      	adds	r7, #12
 8014a04:	46bd      	mov	sp, r7
 8014a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a0a:	4770      	bx	lr

08014a0c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014a0c:	b480      	push	{r7}
 8014a0e:	b087      	sub	sp, #28
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	60f8      	str	r0, [r7, #12]
 8014a14:	60b9      	str	r1, [r7, #8]
 8014a16:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a1e:	68fb      	ldr	r3, [r7, #12]
 8014a20:	32b0      	adds	r2, #176	; 0xb0
 8014a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a26:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014a28:	697b      	ldr	r3, [r7, #20]
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d101      	bne.n	8014a32 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014a2e:	2303      	movs	r3, #3
 8014a30:	e008      	b.n	8014a44 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8014a32:	697b      	ldr	r3, [r7, #20]
 8014a34:	68ba      	ldr	r2, [r7, #8]
 8014a36:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8014a3a:	697b      	ldr	r3, [r7, #20]
 8014a3c:	687a      	ldr	r2, [r7, #4]
 8014a3e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8014a42:	2300      	movs	r3, #0
}
 8014a44:	4618      	mov	r0, r3
 8014a46:	371c      	adds	r7, #28
 8014a48:	46bd      	mov	sp, r7
 8014a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a4e:	4770      	bx	lr

08014a50 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014a50:	b480      	push	{r7}
 8014a52:	b085      	sub	sp, #20
 8014a54:	af00      	add	r7, sp, #0
 8014a56:	6078      	str	r0, [r7, #4]
 8014a58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	32b0      	adds	r2, #176	; 0xb0
 8014a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a68:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d101      	bne.n	8014a74 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8014a70:	2303      	movs	r3, #3
 8014a72:	e004      	b.n	8014a7e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	683a      	ldr	r2, [r7, #0]
 8014a78:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8014a7c:	2300      	movs	r3, #0
}
 8014a7e:	4618      	mov	r0, r3
 8014a80:	3714      	adds	r7, #20
 8014a82:	46bd      	mov	sp, r7
 8014a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a88:	4770      	bx	lr
	...

08014a8c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8014a8c:	b580      	push	{r7, lr}
 8014a8e:	b084      	sub	sp, #16
 8014a90:	af00      	add	r7, sp, #0
 8014a92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	32b0      	adds	r2, #176	; 0xb0
 8014a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014aa2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8014aa4:	2301      	movs	r3, #1
 8014aa6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014aa8:	68bb      	ldr	r3, [r7, #8]
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d101      	bne.n	8014ab2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014aae:	2303      	movs	r3, #3
 8014ab0:	e025      	b.n	8014afe <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8014ab2:	68bb      	ldr	r3, [r7, #8]
 8014ab4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d11f      	bne.n	8014afc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8014abc:	68bb      	ldr	r3, [r7, #8]
 8014abe:	2201      	movs	r2, #1
 8014ac0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8014ac4:	4b10      	ldr	r3, [pc, #64]	; (8014b08 <USBD_CDC_TransmitPacket+0x7c>)
 8014ac6:	781b      	ldrb	r3, [r3, #0]
 8014ac8:	f003 020f 	and.w	r2, r3, #15
 8014acc:	68bb      	ldr	r3, [r7, #8]
 8014ace:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8014ad2:	6878      	ldr	r0, [r7, #4]
 8014ad4:	4613      	mov	r3, r2
 8014ad6:	009b      	lsls	r3, r3, #2
 8014ad8:	4413      	add	r3, r2
 8014ada:	009b      	lsls	r3, r3, #2
 8014adc:	4403      	add	r3, r0
 8014ade:	3318      	adds	r3, #24
 8014ae0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8014ae2:	4b09      	ldr	r3, [pc, #36]	; (8014b08 <USBD_CDC_TransmitPacket+0x7c>)
 8014ae4:	7819      	ldrb	r1, [r3, #0]
 8014ae6:	68bb      	ldr	r3, [r7, #8]
 8014ae8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8014aec:	68bb      	ldr	r3, [r7, #8]
 8014aee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014af2:	6878      	ldr	r0, [r7, #4]
 8014af4:	f002 f80f 	bl	8016b16 <USBD_LL_Transmit>

    ret = USBD_OK;
 8014af8:	2300      	movs	r3, #0
 8014afa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8014afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8014afe:	4618      	mov	r0, r3
 8014b00:	3710      	adds	r7, #16
 8014b02:	46bd      	mov	sp, r7
 8014b04:	bd80      	pop	{r7, pc}
 8014b06:	bf00      	nop
 8014b08:	24000097 	.word	0x24000097

08014b0c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014b0c:	b580      	push	{r7, lr}
 8014b0e:	b084      	sub	sp, #16
 8014b10:	af00      	add	r7, sp, #0
 8014b12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	32b0      	adds	r2, #176	; 0xb0
 8014b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b22:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	32b0      	adds	r2, #176	; 0xb0
 8014b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d101      	bne.n	8014b3a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8014b36:	2303      	movs	r3, #3
 8014b38:	e018      	b.n	8014b6c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	7c1b      	ldrb	r3, [r3, #16]
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	d10a      	bne.n	8014b58 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014b42:	4b0c      	ldr	r3, [pc, #48]	; (8014b74 <USBD_CDC_ReceivePacket+0x68>)
 8014b44:	7819      	ldrb	r1, [r3, #0]
 8014b46:	68fb      	ldr	r3, [r7, #12]
 8014b48:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014b4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014b50:	6878      	ldr	r0, [r7, #4]
 8014b52:	f002 f801 	bl	8016b58 <USBD_LL_PrepareReceive>
 8014b56:	e008      	b.n	8014b6a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014b58:	4b06      	ldr	r3, [pc, #24]	; (8014b74 <USBD_CDC_ReceivePacket+0x68>)
 8014b5a:	7819      	ldrb	r1, [r3, #0]
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014b62:	2340      	movs	r3, #64	; 0x40
 8014b64:	6878      	ldr	r0, [r7, #4]
 8014b66:	f001 fff7 	bl	8016b58 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014b6a:	2300      	movs	r3, #0
}
 8014b6c:	4618      	mov	r0, r3
 8014b6e:	3710      	adds	r7, #16
 8014b70:	46bd      	mov	sp, r7
 8014b72:	bd80      	pop	{r7, pc}
 8014b74:	24000098 	.word	0x24000098

08014b78 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014b78:	b580      	push	{r7, lr}
 8014b7a:	b086      	sub	sp, #24
 8014b7c:	af00      	add	r7, sp, #0
 8014b7e:	60f8      	str	r0, [r7, #12]
 8014b80:	60b9      	str	r1, [r7, #8]
 8014b82:	4613      	mov	r3, r2
 8014b84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d101      	bne.n	8014b90 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014b8c:	2303      	movs	r3, #3
 8014b8e:	e01f      	b.n	8014bd0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	2200      	movs	r2, #0
 8014b94:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8014b98:	68fb      	ldr	r3, [r7, #12]
 8014b9a:	2200      	movs	r2, #0
 8014b9c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8014ba0:	68fb      	ldr	r3, [r7, #12]
 8014ba2:	2200      	movs	r2, #0
 8014ba4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014ba8:	68bb      	ldr	r3, [r7, #8]
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d003      	beq.n	8014bb6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8014bae:	68fb      	ldr	r3, [r7, #12]
 8014bb0:	68ba      	ldr	r2, [r7, #8]
 8014bb2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	2201      	movs	r2, #1
 8014bba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	79fa      	ldrb	r2, [r7, #7]
 8014bc2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014bc4:	68f8      	ldr	r0, [r7, #12]
 8014bc6:	f001 fe6b 	bl	80168a0 <USBD_LL_Init>
 8014bca:	4603      	mov	r3, r0
 8014bcc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8014bd0:	4618      	mov	r0, r3
 8014bd2:	3718      	adds	r7, #24
 8014bd4:	46bd      	mov	sp, r7
 8014bd6:	bd80      	pop	{r7, pc}

08014bd8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014bd8:	b580      	push	{r7, lr}
 8014bda:	b084      	sub	sp, #16
 8014bdc:	af00      	add	r7, sp, #0
 8014bde:	6078      	str	r0, [r7, #4]
 8014be0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014be2:	2300      	movs	r3, #0
 8014be4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8014be6:	683b      	ldr	r3, [r7, #0]
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d101      	bne.n	8014bf0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014bec:	2303      	movs	r3, #3
 8014bee:	e025      	b.n	8014c3c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	683a      	ldr	r2, [r7, #0]
 8014bf4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	32ae      	adds	r2, #174	; 0xae
 8014c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d00f      	beq.n	8014c2c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	32ae      	adds	r2, #174	; 0xae
 8014c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c1c:	f107 020e 	add.w	r2, r7, #14
 8014c20:	4610      	mov	r0, r2
 8014c22:	4798      	blx	r3
 8014c24:	4602      	mov	r2, r0
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8014c32:	1c5a      	adds	r2, r3, #1
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8014c3a:	2300      	movs	r3, #0
}
 8014c3c:	4618      	mov	r0, r3
 8014c3e:	3710      	adds	r7, #16
 8014c40:	46bd      	mov	sp, r7
 8014c42:	bd80      	pop	{r7, pc}

08014c44 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8014c44:	b580      	push	{r7, lr}
 8014c46:	b082      	sub	sp, #8
 8014c48:	af00      	add	r7, sp, #0
 8014c4a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8014c4c:	6878      	ldr	r0, [r7, #4]
 8014c4e:	f001 fe79 	bl	8016944 <USBD_LL_Start>
 8014c52:	4603      	mov	r3, r0
}
 8014c54:	4618      	mov	r0, r3
 8014c56:	3708      	adds	r7, #8
 8014c58:	46bd      	mov	sp, r7
 8014c5a:	bd80      	pop	{r7, pc}

08014c5c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8014c5c:	b480      	push	{r7}
 8014c5e:	b083      	sub	sp, #12
 8014c60:	af00      	add	r7, sp, #0
 8014c62:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014c64:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8014c66:	4618      	mov	r0, r3
 8014c68:	370c      	adds	r7, #12
 8014c6a:	46bd      	mov	sp, r7
 8014c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c70:	4770      	bx	lr

08014c72 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014c72:	b580      	push	{r7, lr}
 8014c74:	b084      	sub	sp, #16
 8014c76:	af00      	add	r7, sp, #0
 8014c78:	6078      	str	r0, [r7, #4]
 8014c7a:	460b      	mov	r3, r1
 8014c7c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014c7e:	2300      	movs	r3, #0
 8014c80:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d009      	beq.n	8014ca0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	78fa      	ldrb	r2, [r7, #3]
 8014c96:	4611      	mov	r1, r2
 8014c98:	6878      	ldr	r0, [r7, #4]
 8014c9a:	4798      	blx	r3
 8014c9c:	4603      	mov	r3, r0
 8014c9e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ca2:	4618      	mov	r0, r3
 8014ca4:	3710      	adds	r7, #16
 8014ca6:	46bd      	mov	sp, r7
 8014ca8:	bd80      	pop	{r7, pc}

08014caa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014caa:	b580      	push	{r7, lr}
 8014cac:	b084      	sub	sp, #16
 8014cae:	af00      	add	r7, sp, #0
 8014cb0:	6078      	str	r0, [r7, #4]
 8014cb2:	460b      	mov	r3, r1
 8014cb4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014cb6:	2300      	movs	r3, #0
 8014cb8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014cc0:	685b      	ldr	r3, [r3, #4]
 8014cc2:	78fa      	ldrb	r2, [r7, #3]
 8014cc4:	4611      	mov	r1, r2
 8014cc6:	6878      	ldr	r0, [r7, #4]
 8014cc8:	4798      	blx	r3
 8014cca:	4603      	mov	r3, r0
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d001      	beq.n	8014cd4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8014cd0:	2303      	movs	r3, #3
 8014cd2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8014cd6:	4618      	mov	r0, r3
 8014cd8:	3710      	adds	r7, #16
 8014cda:	46bd      	mov	sp, r7
 8014cdc:	bd80      	pop	{r7, pc}

08014cde <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014cde:	b580      	push	{r7, lr}
 8014ce0:	b084      	sub	sp, #16
 8014ce2:	af00      	add	r7, sp, #0
 8014ce4:	6078      	str	r0, [r7, #4]
 8014ce6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014cee:	6839      	ldr	r1, [r7, #0]
 8014cf0:	4618      	mov	r0, r3
 8014cf2:	f001 f90e 	bl	8015f12 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	2201      	movs	r2, #1
 8014cfa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8014d04:	461a      	mov	r2, r3
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014d12:	f003 031f 	and.w	r3, r3, #31
 8014d16:	2b02      	cmp	r3, #2
 8014d18:	d01a      	beq.n	8014d50 <USBD_LL_SetupStage+0x72>
 8014d1a:	2b02      	cmp	r3, #2
 8014d1c:	d822      	bhi.n	8014d64 <USBD_LL_SetupStage+0x86>
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d002      	beq.n	8014d28 <USBD_LL_SetupStage+0x4a>
 8014d22:	2b01      	cmp	r3, #1
 8014d24:	d00a      	beq.n	8014d3c <USBD_LL_SetupStage+0x5e>
 8014d26:	e01d      	b.n	8014d64 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014d2e:	4619      	mov	r1, r3
 8014d30:	6878      	ldr	r0, [r7, #4]
 8014d32:	f000 fb65 	bl	8015400 <USBD_StdDevReq>
 8014d36:	4603      	mov	r3, r0
 8014d38:	73fb      	strb	r3, [r7, #15]
      break;
 8014d3a:	e020      	b.n	8014d7e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014d42:	4619      	mov	r1, r3
 8014d44:	6878      	ldr	r0, [r7, #4]
 8014d46:	f000 fbcd 	bl	80154e4 <USBD_StdItfReq>
 8014d4a:	4603      	mov	r3, r0
 8014d4c:	73fb      	strb	r3, [r7, #15]
      break;
 8014d4e:	e016      	b.n	8014d7e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014d56:	4619      	mov	r1, r3
 8014d58:	6878      	ldr	r0, [r7, #4]
 8014d5a:	f000 fc2f 	bl	80155bc <USBD_StdEPReq>
 8014d5e:	4603      	mov	r3, r0
 8014d60:	73fb      	strb	r3, [r7, #15]
      break;
 8014d62:	e00c      	b.n	8014d7e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014d6a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014d6e:	b2db      	uxtb	r3, r3
 8014d70:	4619      	mov	r1, r3
 8014d72:	6878      	ldr	r0, [r7, #4]
 8014d74:	f001 fe46 	bl	8016a04 <USBD_LL_StallEP>
 8014d78:	4603      	mov	r3, r0
 8014d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8014d7c:	bf00      	nop
  }

  return ret;
 8014d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d80:	4618      	mov	r0, r3
 8014d82:	3710      	adds	r7, #16
 8014d84:	46bd      	mov	sp, r7
 8014d86:	bd80      	pop	{r7, pc}

08014d88 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8014d88:	b580      	push	{r7, lr}
 8014d8a:	b086      	sub	sp, #24
 8014d8c:	af00      	add	r7, sp, #0
 8014d8e:	60f8      	str	r0, [r7, #12]
 8014d90:	460b      	mov	r3, r1
 8014d92:	607a      	str	r2, [r7, #4]
 8014d94:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8014d96:	2300      	movs	r3, #0
 8014d98:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8014d9a:	7afb      	ldrb	r3, [r7, #11]
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d16e      	bne.n	8014e7e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8014da6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014dae:	2b03      	cmp	r3, #3
 8014db0:	f040 8098 	bne.w	8014ee4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8014db4:	693b      	ldr	r3, [r7, #16]
 8014db6:	689a      	ldr	r2, [r3, #8]
 8014db8:	693b      	ldr	r3, [r7, #16]
 8014dba:	68db      	ldr	r3, [r3, #12]
 8014dbc:	429a      	cmp	r2, r3
 8014dbe:	d913      	bls.n	8014de8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8014dc0:	693b      	ldr	r3, [r7, #16]
 8014dc2:	689a      	ldr	r2, [r3, #8]
 8014dc4:	693b      	ldr	r3, [r7, #16]
 8014dc6:	68db      	ldr	r3, [r3, #12]
 8014dc8:	1ad2      	subs	r2, r2, r3
 8014dca:	693b      	ldr	r3, [r7, #16]
 8014dcc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8014dce:	693b      	ldr	r3, [r7, #16]
 8014dd0:	68da      	ldr	r2, [r3, #12]
 8014dd2:	693b      	ldr	r3, [r7, #16]
 8014dd4:	689b      	ldr	r3, [r3, #8]
 8014dd6:	4293      	cmp	r3, r2
 8014dd8:	bf28      	it	cs
 8014dda:	4613      	movcs	r3, r2
 8014ddc:	461a      	mov	r2, r3
 8014dde:	6879      	ldr	r1, [r7, #4]
 8014de0:	68f8      	ldr	r0, [r7, #12]
 8014de2:	f001 f98a 	bl	80160fa <USBD_CtlContinueRx>
 8014de6:	e07d      	b.n	8014ee4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014dee:	f003 031f 	and.w	r3, r3, #31
 8014df2:	2b02      	cmp	r3, #2
 8014df4:	d014      	beq.n	8014e20 <USBD_LL_DataOutStage+0x98>
 8014df6:	2b02      	cmp	r3, #2
 8014df8:	d81d      	bhi.n	8014e36 <USBD_LL_DataOutStage+0xae>
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d002      	beq.n	8014e04 <USBD_LL_DataOutStage+0x7c>
 8014dfe:	2b01      	cmp	r3, #1
 8014e00:	d003      	beq.n	8014e0a <USBD_LL_DataOutStage+0x82>
 8014e02:	e018      	b.n	8014e36 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8014e04:	2300      	movs	r3, #0
 8014e06:	75bb      	strb	r3, [r7, #22]
            break;
 8014e08:	e018      	b.n	8014e3c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8014e0a:	68fb      	ldr	r3, [r7, #12]
 8014e0c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8014e10:	b2db      	uxtb	r3, r3
 8014e12:	4619      	mov	r1, r3
 8014e14:	68f8      	ldr	r0, [r7, #12]
 8014e16:	f000 fa64 	bl	80152e2 <USBD_CoreFindIF>
 8014e1a:	4603      	mov	r3, r0
 8014e1c:	75bb      	strb	r3, [r7, #22]
            break;
 8014e1e:	e00d      	b.n	8014e3c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8014e20:	68fb      	ldr	r3, [r7, #12]
 8014e22:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8014e26:	b2db      	uxtb	r3, r3
 8014e28:	4619      	mov	r1, r3
 8014e2a:	68f8      	ldr	r0, [r7, #12]
 8014e2c:	f000 fa66 	bl	80152fc <USBD_CoreFindEP>
 8014e30:	4603      	mov	r3, r0
 8014e32:	75bb      	strb	r3, [r7, #22]
            break;
 8014e34:	e002      	b.n	8014e3c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8014e36:	2300      	movs	r3, #0
 8014e38:	75bb      	strb	r3, [r7, #22]
            break;
 8014e3a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8014e3c:	7dbb      	ldrb	r3, [r7, #22]
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d119      	bne.n	8014e76 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014e42:	68fb      	ldr	r3, [r7, #12]
 8014e44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014e48:	b2db      	uxtb	r3, r3
 8014e4a:	2b03      	cmp	r3, #3
 8014e4c:	d113      	bne.n	8014e76 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8014e4e:	7dba      	ldrb	r2, [r7, #22]
 8014e50:	68fb      	ldr	r3, [r7, #12]
 8014e52:	32ae      	adds	r2, #174	; 0xae
 8014e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e58:	691b      	ldr	r3, [r3, #16]
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d00b      	beq.n	8014e76 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8014e5e:	7dba      	ldrb	r2, [r7, #22]
 8014e60:	68fb      	ldr	r3, [r7, #12]
 8014e62:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8014e66:	7dba      	ldrb	r2, [r7, #22]
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	32ae      	adds	r2, #174	; 0xae
 8014e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e70:	691b      	ldr	r3, [r3, #16]
 8014e72:	68f8      	ldr	r0, [r7, #12]
 8014e74:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8014e76:	68f8      	ldr	r0, [r7, #12]
 8014e78:	f001 f950 	bl	801611c <USBD_CtlSendStatus>
 8014e7c:	e032      	b.n	8014ee4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8014e7e:	7afb      	ldrb	r3, [r7, #11]
 8014e80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014e84:	b2db      	uxtb	r3, r3
 8014e86:	4619      	mov	r1, r3
 8014e88:	68f8      	ldr	r0, [r7, #12]
 8014e8a:	f000 fa37 	bl	80152fc <USBD_CoreFindEP>
 8014e8e:	4603      	mov	r3, r0
 8014e90:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014e92:	7dbb      	ldrb	r3, [r7, #22]
 8014e94:	2bff      	cmp	r3, #255	; 0xff
 8014e96:	d025      	beq.n	8014ee4 <USBD_LL_DataOutStage+0x15c>
 8014e98:	7dbb      	ldrb	r3, [r7, #22]
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d122      	bne.n	8014ee4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014ea4:	b2db      	uxtb	r3, r3
 8014ea6:	2b03      	cmp	r3, #3
 8014ea8:	d117      	bne.n	8014eda <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8014eaa:	7dba      	ldrb	r2, [r7, #22]
 8014eac:	68fb      	ldr	r3, [r7, #12]
 8014eae:	32ae      	adds	r2, #174	; 0xae
 8014eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014eb4:	699b      	ldr	r3, [r3, #24]
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d00f      	beq.n	8014eda <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8014eba:	7dba      	ldrb	r2, [r7, #22]
 8014ebc:	68fb      	ldr	r3, [r7, #12]
 8014ebe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8014ec2:	7dba      	ldrb	r2, [r7, #22]
 8014ec4:	68fb      	ldr	r3, [r7, #12]
 8014ec6:	32ae      	adds	r2, #174	; 0xae
 8014ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ecc:	699b      	ldr	r3, [r3, #24]
 8014ece:	7afa      	ldrb	r2, [r7, #11]
 8014ed0:	4611      	mov	r1, r2
 8014ed2:	68f8      	ldr	r0, [r7, #12]
 8014ed4:	4798      	blx	r3
 8014ed6:	4603      	mov	r3, r0
 8014ed8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8014eda:	7dfb      	ldrb	r3, [r7, #23]
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d001      	beq.n	8014ee4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8014ee0:	7dfb      	ldrb	r3, [r7, #23]
 8014ee2:	e000      	b.n	8014ee6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8014ee4:	2300      	movs	r3, #0
}
 8014ee6:	4618      	mov	r0, r3
 8014ee8:	3718      	adds	r7, #24
 8014eea:	46bd      	mov	sp, r7
 8014eec:	bd80      	pop	{r7, pc}

08014eee <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8014eee:	b580      	push	{r7, lr}
 8014ef0:	b086      	sub	sp, #24
 8014ef2:	af00      	add	r7, sp, #0
 8014ef4:	60f8      	str	r0, [r7, #12]
 8014ef6:	460b      	mov	r3, r1
 8014ef8:	607a      	str	r2, [r7, #4]
 8014efa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8014efc:	7afb      	ldrb	r3, [r7, #11]
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d16f      	bne.n	8014fe2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	3314      	adds	r3, #20
 8014f06:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014f0e:	2b02      	cmp	r3, #2
 8014f10:	d15a      	bne.n	8014fc8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8014f12:	693b      	ldr	r3, [r7, #16]
 8014f14:	689a      	ldr	r2, [r3, #8]
 8014f16:	693b      	ldr	r3, [r7, #16]
 8014f18:	68db      	ldr	r3, [r3, #12]
 8014f1a:	429a      	cmp	r2, r3
 8014f1c:	d914      	bls.n	8014f48 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8014f1e:	693b      	ldr	r3, [r7, #16]
 8014f20:	689a      	ldr	r2, [r3, #8]
 8014f22:	693b      	ldr	r3, [r7, #16]
 8014f24:	68db      	ldr	r3, [r3, #12]
 8014f26:	1ad2      	subs	r2, r2, r3
 8014f28:	693b      	ldr	r3, [r7, #16]
 8014f2a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8014f2c:	693b      	ldr	r3, [r7, #16]
 8014f2e:	689b      	ldr	r3, [r3, #8]
 8014f30:	461a      	mov	r2, r3
 8014f32:	6879      	ldr	r1, [r7, #4]
 8014f34:	68f8      	ldr	r0, [r7, #12]
 8014f36:	f001 f8b2 	bl	801609e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014f3a:	2300      	movs	r3, #0
 8014f3c:	2200      	movs	r2, #0
 8014f3e:	2100      	movs	r1, #0
 8014f40:	68f8      	ldr	r0, [r7, #12]
 8014f42:	f001 fe09 	bl	8016b58 <USBD_LL_PrepareReceive>
 8014f46:	e03f      	b.n	8014fc8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8014f48:	693b      	ldr	r3, [r7, #16]
 8014f4a:	68da      	ldr	r2, [r3, #12]
 8014f4c:	693b      	ldr	r3, [r7, #16]
 8014f4e:	689b      	ldr	r3, [r3, #8]
 8014f50:	429a      	cmp	r2, r3
 8014f52:	d11c      	bne.n	8014f8e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8014f54:	693b      	ldr	r3, [r7, #16]
 8014f56:	685a      	ldr	r2, [r3, #4]
 8014f58:	693b      	ldr	r3, [r7, #16]
 8014f5a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8014f5c:	429a      	cmp	r2, r3
 8014f5e:	d316      	bcc.n	8014f8e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8014f60:	693b      	ldr	r3, [r7, #16]
 8014f62:	685a      	ldr	r2, [r3, #4]
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8014f6a:	429a      	cmp	r2, r3
 8014f6c:	d20f      	bcs.n	8014f8e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8014f6e:	2200      	movs	r2, #0
 8014f70:	2100      	movs	r1, #0
 8014f72:	68f8      	ldr	r0, [r7, #12]
 8014f74:	f001 f893 	bl	801609e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8014f78:	68fb      	ldr	r3, [r7, #12]
 8014f7a:	2200      	movs	r2, #0
 8014f7c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014f80:	2300      	movs	r3, #0
 8014f82:	2200      	movs	r2, #0
 8014f84:	2100      	movs	r1, #0
 8014f86:	68f8      	ldr	r0, [r7, #12]
 8014f88:	f001 fde6 	bl	8016b58 <USBD_LL_PrepareReceive>
 8014f8c:	e01c      	b.n	8014fc8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014f94:	b2db      	uxtb	r3, r3
 8014f96:	2b03      	cmp	r3, #3
 8014f98:	d10f      	bne.n	8014fba <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014fa0:	68db      	ldr	r3, [r3, #12]
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d009      	beq.n	8014fba <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	2200      	movs	r2, #0
 8014faa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014fb4:	68db      	ldr	r3, [r3, #12]
 8014fb6:	68f8      	ldr	r0, [r7, #12]
 8014fb8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8014fba:	2180      	movs	r1, #128	; 0x80
 8014fbc:	68f8      	ldr	r0, [r7, #12]
 8014fbe:	f001 fd21 	bl	8016a04 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8014fc2:	68f8      	ldr	r0, [r7, #12]
 8014fc4:	f001 f8bd 	bl	8016142 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d03a      	beq.n	8015048 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8014fd2:	68f8      	ldr	r0, [r7, #12]
 8014fd4:	f7ff fe42 	bl	8014c5c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	2200      	movs	r2, #0
 8014fdc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8014fe0:	e032      	b.n	8015048 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8014fe2:	7afb      	ldrb	r3, [r7, #11]
 8014fe4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014fe8:	b2db      	uxtb	r3, r3
 8014fea:	4619      	mov	r1, r3
 8014fec:	68f8      	ldr	r0, [r7, #12]
 8014fee:	f000 f985 	bl	80152fc <USBD_CoreFindEP>
 8014ff2:	4603      	mov	r3, r0
 8014ff4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014ff6:	7dfb      	ldrb	r3, [r7, #23]
 8014ff8:	2bff      	cmp	r3, #255	; 0xff
 8014ffa:	d025      	beq.n	8015048 <USBD_LL_DataInStage+0x15a>
 8014ffc:	7dfb      	ldrb	r3, [r7, #23]
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d122      	bne.n	8015048 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015002:	68fb      	ldr	r3, [r7, #12]
 8015004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015008:	b2db      	uxtb	r3, r3
 801500a:	2b03      	cmp	r3, #3
 801500c:	d11c      	bne.n	8015048 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801500e:	7dfa      	ldrb	r2, [r7, #23]
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	32ae      	adds	r2, #174	; 0xae
 8015014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015018:	695b      	ldr	r3, [r3, #20]
 801501a:	2b00      	cmp	r3, #0
 801501c:	d014      	beq.n	8015048 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801501e:	7dfa      	ldrb	r2, [r7, #23]
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8015026:	7dfa      	ldrb	r2, [r7, #23]
 8015028:	68fb      	ldr	r3, [r7, #12]
 801502a:	32ae      	adds	r2, #174	; 0xae
 801502c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015030:	695b      	ldr	r3, [r3, #20]
 8015032:	7afa      	ldrb	r2, [r7, #11]
 8015034:	4611      	mov	r1, r2
 8015036:	68f8      	ldr	r0, [r7, #12]
 8015038:	4798      	blx	r3
 801503a:	4603      	mov	r3, r0
 801503c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801503e:	7dbb      	ldrb	r3, [r7, #22]
 8015040:	2b00      	cmp	r3, #0
 8015042:	d001      	beq.n	8015048 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8015044:	7dbb      	ldrb	r3, [r7, #22]
 8015046:	e000      	b.n	801504a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8015048:	2300      	movs	r3, #0
}
 801504a:	4618      	mov	r0, r3
 801504c:	3718      	adds	r7, #24
 801504e:	46bd      	mov	sp, r7
 8015050:	bd80      	pop	{r7, pc}

08015052 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015052:	b580      	push	{r7, lr}
 8015054:	b084      	sub	sp, #16
 8015056:	af00      	add	r7, sp, #0
 8015058:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801505a:	2300      	movs	r3, #0
 801505c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	2201      	movs	r2, #1
 8015062:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	2200      	movs	r2, #0
 801506a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	2200      	movs	r2, #0
 8015072:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	2200      	movs	r2, #0
 8015078:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	2200      	movs	r2, #0
 8015080:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801508a:	2b00      	cmp	r3, #0
 801508c:	d014      	beq.n	80150b8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015094:	685b      	ldr	r3, [r3, #4]
 8015096:	2b00      	cmp	r3, #0
 8015098:	d00e      	beq.n	80150b8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80150a0:	685b      	ldr	r3, [r3, #4]
 80150a2:	687a      	ldr	r2, [r7, #4]
 80150a4:	6852      	ldr	r2, [r2, #4]
 80150a6:	b2d2      	uxtb	r2, r2
 80150a8:	4611      	mov	r1, r2
 80150aa:	6878      	ldr	r0, [r7, #4]
 80150ac:	4798      	blx	r3
 80150ae:	4603      	mov	r3, r0
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d001      	beq.n	80150b8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80150b4:	2303      	movs	r3, #3
 80150b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80150b8:	2340      	movs	r3, #64	; 0x40
 80150ba:	2200      	movs	r2, #0
 80150bc:	2100      	movs	r1, #0
 80150be:	6878      	ldr	r0, [r7, #4]
 80150c0:	f001 fc5b 	bl	801697a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	2201      	movs	r2, #1
 80150c8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	2240      	movs	r2, #64	; 0x40
 80150d0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80150d4:	2340      	movs	r3, #64	; 0x40
 80150d6:	2200      	movs	r2, #0
 80150d8:	2180      	movs	r1, #128	; 0x80
 80150da:	6878      	ldr	r0, [r7, #4]
 80150dc:	f001 fc4d 	bl	801697a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	2201      	movs	r2, #1
 80150e4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	2240      	movs	r2, #64	; 0x40
 80150ea:	621a      	str	r2, [r3, #32]

  return ret;
 80150ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80150ee:	4618      	mov	r0, r3
 80150f0:	3710      	adds	r7, #16
 80150f2:	46bd      	mov	sp, r7
 80150f4:	bd80      	pop	{r7, pc}

080150f6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80150f6:	b480      	push	{r7}
 80150f8:	b083      	sub	sp, #12
 80150fa:	af00      	add	r7, sp, #0
 80150fc:	6078      	str	r0, [r7, #4]
 80150fe:	460b      	mov	r3, r1
 8015100:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	78fa      	ldrb	r2, [r7, #3]
 8015106:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015108:	2300      	movs	r3, #0
}
 801510a:	4618      	mov	r0, r3
 801510c:	370c      	adds	r7, #12
 801510e:	46bd      	mov	sp, r7
 8015110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015114:	4770      	bx	lr

08015116 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015116:	b480      	push	{r7}
 8015118:	b083      	sub	sp, #12
 801511a:	af00      	add	r7, sp, #0
 801511c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015124:	b2db      	uxtb	r3, r3
 8015126:	2b04      	cmp	r3, #4
 8015128:	d006      	beq.n	8015138 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015130:	b2da      	uxtb	r2, r3
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	2204      	movs	r2, #4
 801513c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015140:	2300      	movs	r3, #0
}
 8015142:	4618      	mov	r0, r3
 8015144:	370c      	adds	r7, #12
 8015146:	46bd      	mov	sp, r7
 8015148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801514c:	4770      	bx	lr

0801514e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801514e:	b480      	push	{r7}
 8015150:	b083      	sub	sp, #12
 8015152:	af00      	add	r7, sp, #0
 8015154:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801515c:	b2db      	uxtb	r3, r3
 801515e:	2b04      	cmp	r3, #4
 8015160:	d106      	bne.n	8015170 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8015168:	b2da      	uxtb	r2, r3
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8015170:	2300      	movs	r3, #0
}
 8015172:	4618      	mov	r0, r3
 8015174:	370c      	adds	r7, #12
 8015176:	46bd      	mov	sp, r7
 8015178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801517c:	4770      	bx	lr

0801517e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801517e:	b580      	push	{r7, lr}
 8015180:	b082      	sub	sp, #8
 8015182:	af00      	add	r7, sp, #0
 8015184:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801518c:	b2db      	uxtb	r3, r3
 801518e:	2b03      	cmp	r3, #3
 8015190:	d110      	bne.n	80151b4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015198:	2b00      	cmp	r3, #0
 801519a:	d00b      	beq.n	80151b4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80151a2:	69db      	ldr	r3, [r3, #28]
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d005      	beq.n	80151b4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80151ae:	69db      	ldr	r3, [r3, #28]
 80151b0:	6878      	ldr	r0, [r7, #4]
 80151b2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80151b4:	2300      	movs	r3, #0
}
 80151b6:	4618      	mov	r0, r3
 80151b8:	3708      	adds	r7, #8
 80151ba:	46bd      	mov	sp, r7
 80151bc:	bd80      	pop	{r7, pc}

080151be <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80151be:	b580      	push	{r7, lr}
 80151c0:	b082      	sub	sp, #8
 80151c2:	af00      	add	r7, sp, #0
 80151c4:	6078      	str	r0, [r7, #4]
 80151c6:	460b      	mov	r3, r1
 80151c8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	32ae      	adds	r2, #174	; 0xae
 80151d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d101      	bne.n	80151e0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80151dc:	2303      	movs	r3, #3
 80151de:	e01c      	b.n	801521a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80151e6:	b2db      	uxtb	r3, r3
 80151e8:	2b03      	cmp	r3, #3
 80151ea:	d115      	bne.n	8015218 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	32ae      	adds	r2, #174	; 0xae
 80151f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151fa:	6a1b      	ldr	r3, [r3, #32]
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d00b      	beq.n	8015218 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	32ae      	adds	r2, #174	; 0xae
 801520a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801520e:	6a1b      	ldr	r3, [r3, #32]
 8015210:	78fa      	ldrb	r2, [r7, #3]
 8015212:	4611      	mov	r1, r2
 8015214:	6878      	ldr	r0, [r7, #4]
 8015216:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015218:	2300      	movs	r3, #0
}
 801521a:	4618      	mov	r0, r3
 801521c:	3708      	adds	r7, #8
 801521e:	46bd      	mov	sp, r7
 8015220:	bd80      	pop	{r7, pc}

08015222 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015222:	b580      	push	{r7, lr}
 8015224:	b082      	sub	sp, #8
 8015226:	af00      	add	r7, sp, #0
 8015228:	6078      	str	r0, [r7, #4]
 801522a:	460b      	mov	r3, r1
 801522c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	32ae      	adds	r2, #174	; 0xae
 8015238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801523c:	2b00      	cmp	r3, #0
 801523e:	d101      	bne.n	8015244 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8015240:	2303      	movs	r3, #3
 8015242:	e01c      	b.n	801527e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801524a:	b2db      	uxtb	r3, r3
 801524c:	2b03      	cmp	r3, #3
 801524e:	d115      	bne.n	801527c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	32ae      	adds	r2, #174	; 0xae
 801525a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801525e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015260:	2b00      	cmp	r3, #0
 8015262:	d00b      	beq.n	801527c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	32ae      	adds	r2, #174	; 0xae
 801526e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015274:	78fa      	ldrb	r2, [r7, #3]
 8015276:	4611      	mov	r1, r2
 8015278:	6878      	ldr	r0, [r7, #4]
 801527a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801527c:	2300      	movs	r3, #0
}
 801527e:	4618      	mov	r0, r3
 8015280:	3708      	adds	r7, #8
 8015282:	46bd      	mov	sp, r7
 8015284:	bd80      	pop	{r7, pc}

08015286 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8015286:	b480      	push	{r7}
 8015288:	b083      	sub	sp, #12
 801528a:	af00      	add	r7, sp, #0
 801528c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801528e:	2300      	movs	r3, #0
}
 8015290:	4618      	mov	r0, r3
 8015292:	370c      	adds	r7, #12
 8015294:	46bd      	mov	sp, r7
 8015296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801529a:	4770      	bx	lr

0801529c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801529c:	b580      	push	{r7, lr}
 801529e:	b084      	sub	sp, #16
 80152a0:	af00      	add	r7, sp, #0
 80152a2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80152a4:	2300      	movs	r3, #0
 80152a6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	2201      	movs	r2, #1
 80152ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d00e      	beq.n	80152d8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80152c0:	685b      	ldr	r3, [r3, #4]
 80152c2:	687a      	ldr	r2, [r7, #4]
 80152c4:	6852      	ldr	r2, [r2, #4]
 80152c6:	b2d2      	uxtb	r2, r2
 80152c8:	4611      	mov	r1, r2
 80152ca:	6878      	ldr	r0, [r7, #4]
 80152cc:	4798      	blx	r3
 80152ce:	4603      	mov	r3, r0
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d001      	beq.n	80152d8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80152d4:	2303      	movs	r3, #3
 80152d6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80152d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80152da:	4618      	mov	r0, r3
 80152dc:	3710      	adds	r7, #16
 80152de:	46bd      	mov	sp, r7
 80152e0:	bd80      	pop	{r7, pc}

080152e2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80152e2:	b480      	push	{r7}
 80152e4:	b083      	sub	sp, #12
 80152e6:	af00      	add	r7, sp, #0
 80152e8:	6078      	str	r0, [r7, #4]
 80152ea:	460b      	mov	r3, r1
 80152ec:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80152ee:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80152f0:	4618      	mov	r0, r3
 80152f2:	370c      	adds	r7, #12
 80152f4:	46bd      	mov	sp, r7
 80152f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152fa:	4770      	bx	lr

080152fc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80152fc:	b480      	push	{r7}
 80152fe:	b083      	sub	sp, #12
 8015300:	af00      	add	r7, sp, #0
 8015302:	6078      	str	r0, [r7, #4]
 8015304:	460b      	mov	r3, r1
 8015306:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015308:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801530a:	4618      	mov	r0, r3
 801530c:	370c      	adds	r7, #12
 801530e:	46bd      	mov	sp, r7
 8015310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015314:	4770      	bx	lr

08015316 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8015316:	b580      	push	{r7, lr}
 8015318:	b086      	sub	sp, #24
 801531a:	af00      	add	r7, sp, #0
 801531c:	6078      	str	r0, [r7, #4]
 801531e:	460b      	mov	r3, r1
 8015320:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801532a:	2300      	movs	r3, #0
 801532c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	885b      	ldrh	r3, [r3, #2]
 8015332:	b29a      	uxth	r2, r3
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	781b      	ldrb	r3, [r3, #0]
 8015338:	b29b      	uxth	r3, r3
 801533a:	429a      	cmp	r2, r3
 801533c:	d920      	bls.n	8015380 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 801533e:	68fb      	ldr	r3, [r7, #12]
 8015340:	781b      	ldrb	r3, [r3, #0]
 8015342:	b29b      	uxth	r3, r3
 8015344:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8015346:	e013      	b.n	8015370 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8015348:	f107 030a 	add.w	r3, r7, #10
 801534c:	4619      	mov	r1, r3
 801534e:	6978      	ldr	r0, [r7, #20]
 8015350:	f000 f81b 	bl	801538a <USBD_GetNextDesc>
 8015354:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8015356:	697b      	ldr	r3, [r7, #20]
 8015358:	785b      	ldrb	r3, [r3, #1]
 801535a:	2b05      	cmp	r3, #5
 801535c:	d108      	bne.n	8015370 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801535e:	697b      	ldr	r3, [r7, #20]
 8015360:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8015362:	693b      	ldr	r3, [r7, #16]
 8015364:	789b      	ldrb	r3, [r3, #2]
 8015366:	78fa      	ldrb	r2, [r7, #3]
 8015368:	429a      	cmp	r2, r3
 801536a:	d008      	beq.n	801537e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801536c:	2300      	movs	r3, #0
 801536e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8015370:	68fb      	ldr	r3, [r7, #12]
 8015372:	885b      	ldrh	r3, [r3, #2]
 8015374:	b29a      	uxth	r2, r3
 8015376:	897b      	ldrh	r3, [r7, #10]
 8015378:	429a      	cmp	r2, r3
 801537a:	d8e5      	bhi.n	8015348 <USBD_GetEpDesc+0x32>
 801537c:	e000      	b.n	8015380 <USBD_GetEpDesc+0x6a>
          break;
 801537e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8015380:	693b      	ldr	r3, [r7, #16]
}
 8015382:	4618      	mov	r0, r3
 8015384:	3718      	adds	r7, #24
 8015386:	46bd      	mov	sp, r7
 8015388:	bd80      	pop	{r7, pc}

0801538a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801538a:	b480      	push	{r7}
 801538c:	b085      	sub	sp, #20
 801538e:	af00      	add	r7, sp, #0
 8015390:	6078      	str	r0, [r7, #4]
 8015392:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8015398:	683b      	ldr	r3, [r7, #0]
 801539a:	881a      	ldrh	r2, [r3, #0]
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	781b      	ldrb	r3, [r3, #0]
 80153a0:	b29b      	uxth	r3, r3
 80153a2:	4413      	add	r3, r2
 80153a4:	b29a      	uxth	r2, r3
 80153a6:	683b      	ldr	r3, [r7, #0]
 80153a8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80153aa:	68fb      	ldr	r3, [r7, #12]
 80153ac:	781b      	ldrb	r3, [r3, #0]
 80153ae:	461a      	mov	r2, r3
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	4413      	add	r3, r2
 80153b4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80153b6:	68fb      	ldr	r3, [r7, #12]
}
 80153b8:	4618      	mov	r0, r3
 80153ba:	3714      	adds	r7, #20
 80153bc:	46bd      	mov	sp, r7
 80153be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153c2:	4770      	bx	lr

080153c4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80153c4:	b480      	push	{r7}
 80153c6:	b087      	sub	sp, #28
 80153c8:	af00      	add	r7, sp, #0
 80153ca:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80153d0:	697b      	ldr	r3, [r7, #20]
 80153d2:	781b      	ldrb	r3, [r3, #0]
 80153d4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80153d6:	697b      	ldr	r3, [r7, #20]
 80153d8:	3301      	adds	r3, #1
 80153da:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80153dc:	697b      	ldr	r3, [r7, #20]
 80153de:	781b      	ldrb	r3, [r3, #0]
 80153e0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80153e2:	8a3b      	ldrh	r3, [r7, #16]
 80153e4:	021b      	lsls	r3, r3, #8
 80153e6:	b21a      	sxth	r2, r3
 80153e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80153ec:	4313      	orrs	r3, r2
 80153ee:	b21b      	sxth	r3, r3
 80153f0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80153f2:	89fb      	ldrh	r3, [r7, #14]
}
 80153f4:	4618      	mov	r0, r3
 80153f6:	371c      	adds	r7, #28
 80153f8:	46bd      	mov	sp, r7
 80153fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153fe:	4770      	bx	lr

08015400 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015400:	b580      	push	{r7, lr}
 8015402:	b084      	sub	sp, #16
 8015404:	af00      	add	r7, sp, #0
 8015406:	6078      	str	r0, [r7, #4]
 8015408:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801540a:	2300      	movs	r3, #0
 801540c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801540e:	683b      	ldr	r3, [r7, #0]
 8015410:	781b      	ldrb	r3, [r3, #0]
 8015412:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015416:	2b40      	cmp	r3, #64	; 0x40
 8015418:	d005      	beq.n	8015426 <USBD_StdDevReq+0x26>
 801541a:	2b40      	cmp	r3, #64	; 0x40
 801541c:	d857      	bhi.n	80154ce <USBD_StdDevReq+0xce>
 801541e:	2b00      	cmp	r3, #0
 8015420:	d00f      	beq.n	8015442 <USBD_StdDevReq+0x42>
 8015422:	2b20      	cmp	r3, #32
 8015424:	d153      	bne.n	80154ce <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	32ae      	adds	r2, #174	; 0xae
 8015430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015434:	689b      	ldr	r3, [r3, #8]
 8015436:	6839      	ldr	r1, [r7, #0]
 8015438:	6878      	ldr	r0, [r7, #4]
 801543a:	4798      	blx	r3
 801543c:	4603      	mov	r3, r0
 801543e:	73fb      	strb	r3, [r7, #15]
      break;
 8015440:	e04a      	b.n	80154d8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015442:	683b      	ldr	r3, [r7, #0]
 8015444:	785b      	ldrb	r3, [r3, #1]
 8015446:	2b09      	cmp	r3, #9
 8015448:	d83b      	bhi.n	80154c2 <USBD_StdDevReq+0xc2>
 801544a:	a201      	add	r2, pc, #4	; (adr r2, 8015450 <USBD_StdDevReq+0x50>)
 801544c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015450:	080154a5 	.word	0x080154a5
 8015454:	080154b9 	.word	0x080154b9
 8015458:	080154c3 	.word	0x080154c3
 801545c:	080154af 	.word	0x080154af
 8015460:	080154c3 	.word	0x080154c3
 8015464:	08015483 	.word	0x08015483
 8015468:	08015479 	.word	0x08015479
 801546c:	080154c3 	.word	0x080154c3
 8015470:	0801549b 	.word	0x0801549b
 8015474:	0801548d 	.word	0x0801548d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015478:	6839      	ldr	r1, [r7, #0]
 801547a:	6878      	ldr	r0, [r7, #4]
 801547c:	f000 fa3c 	bl	80158f8 <USBD_GetDescriptor>
          break;
 8015480:	e024      	b.n	80154cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8015482:	6839      	ldr	r1, [r7, #0]
 8015484:	6878      	ldr	r0, [r7, #4]
 8015486:	f000 fba1 	bl	8015bcc <USBD_SetAddress>
          break;
 801548a:	e01f      	b.n	80154cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801548c:	6839      	ldr	r1, [r7, #0]
 801548e:	6878      	ldr	r0, [r7, #4]
 8015490:	f000 fbe0 	bl	8015c54 <USBD_SetConfig>
 8015494:	4603      	mov	r3, r0
 8015496:	73fb      	strb	r3, [r7, #15]
          break;
 8015498:	e018      	b.n	80154cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801549a:	6839      	ldr	r1, [r7, #0]
 801549c:	6878      	ldr	r0, [r7, #4]
 801549e:	f000 fc83 	bl	8015da8 <USBD_GetConfig>
          break;
 80154a2:	e013      	b.n	80154cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80154a4:	6839      	ldr	r1, [r7, #0]
 80154a6:	6878      	ldr	r0, [r7, #4]
 80154a8:	f000 fcb4 	bl	8015e14 <USBD_GetStatus>
          break;
 80154ac:	e00e      	b.n	80154cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80154ae:	6839      	ldr	r1, [r7, #0]
 80154b0:	6878      	ldr	r0, [r7, #4]
 80154b2:	f000 fce3 	bl	8015e7c <USBD_SetFeature>
          break;
 80154b6:	e009      	b.n	80154cc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80154b8:	6839      	ldr	r1, [r7, #0]
 80154ba:	6878      	ldr	r0, [r7, #4]
 80154bc:	f000 fd07 	bl	8015ece <USBD_ClrFeature>
          break;
 80154c0:	e004      	b.n	80154cc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80154c2:	6839      	ldr	r1, [r7, #0]
 80154c4:	6878      	ldr	r0, [r7, #4]
 80154c6:	f000 fd5e 	bl	8015f86 <USBD_CtlError>
          break;
 80154ca:	bf00      	nop
      }
      break;
 80154cc:	e004      	b.n	80154d8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80154ce:	6839      	ldr	r1, [r7, #0]
 80154d0:	6878      	ldr	r0, [r7, #4]
 80154d2:	f000 fd58 	bl	8015f86 <USBD_CtlError>
      break;
 80154d6:	bf00      	nop
  }

  return ret;
 80154d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80154da:	4618      	mov	r0, r3
 80154dc:	3710      	adds	r7, #16
 80154de:	46bd      	mov	sp, r7
 80154e0:	bd80      	pop	{r7, pc}
 80154e2:	bf00      	nop

080154e4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80154e4:	b580      	push	{r7, lr}
 80154e6:	b084      	sub	sp, #16
 80154e8:	af00      	add	r7, sp, #0
 80154ea:	6078      	str	r0, [r7, #4]
 80154ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80154ee:	2300      	movs	r3, #0
 80154f0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80154f2:	683b      	ldr	r3, [r7, #0]
 80154f4:	781b      	ldrb	r3, [r3, #0]
 80154f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80154fa:	2b40      	cmp	r3, #64	; 0x40
 80154fc:	d005      	beq.n	801550a <USBD_StdItfReq+0x26>
 80154fe:	2b40      	cmp	r3, #64	; 0x40
 8015500:	d852      	bhi.n	80155a8 <USBD_StdItfReq+0xc4>
 8015502:	2b00      	cmp	r3, #0
 8015504:	d001      	beq.n	801550a <USBD_StdItfReq+0x26>
 8015506:	2b20      	cmp	r3, #32
 8015508:	d14e      	bne.n	80155a8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015510:	b2db      	uxtb	r3, r3
 8015512:	3b01      	subs	r3, #1
 8015514:	2b02      	cmp	r3, #2
 8015516:	d840      	bhi.n	801559a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015518:	683b      	ldr	r3, [r7, #0]
 801551a:	889b      	ldrh	r3, [r3, #4]
 801551c:	b2db      	uxtb	r3, r3
 801551e:	2b01      	cmp	r3, #1
 8015520:	d836      	bhi.n	8015590 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8015522:	683b      	ldr	r3, [r7, #0]
 8015524:	889b      	ldrh	r3, [r3, #4]
 8015526:	b2db      	uxtb	r3, r3
 8015528:	4619      	mov	r1, r3
 801552a:	6878      	ldr	r0, [r7, #4]
 801552c:	f7ff fed9 	bl	80152e2 <USBD_CoreFindIF>
 8015530:	4603      	mov	r3, r0
 8015532:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015534:	7bbb      	ldrb	r3, [r7, #14]
 8015536:	2bff      	cmp	r3, #255	; 0xff
 8015538:	d01d      	beq.n	8015576 <USBD_StdItfReq+0x92>
 801553a:	7bbb      	ldrb	r3, [r7, #14]
 801553c:	2b00      	cmp	r3, #0
 801553e:	d11a      	bne.n	8015576 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8015540:	7bba      	ldrb	r2, [r7, #14]
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	32ae      	adds	r2, #174	; 0xae
 8015546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801554a:	689b      	ldr	r3, [r3, #8]
 801554c:	2b00      	cmp	r3, #0
 801554e:	d00f      	beq.n	8015570 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8015550:	7bba      	ldrb	r2, [r7, #14]
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015558:	7bba      	ldrb	r2, [r7, #14]
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	32ae      	adds	r2, #174	; 0xae
 801555e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015562:	689b      	ldr	r3, [r3, #8]
 8015564:	6839      	ldr	r1, [r7, #0]
 8015566:	6878      	ldr	r0, [r7, #4]
 8015568:	4798      	blx	r3
 801556a:	4603      	mov	r3, r0
 801556c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801556e:	e004      	b.n	801557a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8015570:	2303      	movs	r3, #3
 8015572:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015574:	e001      	b.n	801557a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8015576:	2303      	movs	r3, #3
 8015578:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801557a:	683b      	ldr	r3, [r7, #0]
 801557c:	88db      	ldrh	r3, [r3, #6]
 801557e:	2b00      	cmp	r3, #0
 8015580:	d110      	bne.n	80155a4 <USBD_StdItfReq+0xc0>
 8015582:	7bfb      	ldrb	r3, [r7, #15]
 8015584:	2b00      	cmp	r3, #0
 8015586:	d10d      	bne.n	80155a4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8015588:	6878      	ldr	r0, [r7, #4]
 801558a:	f000 fdc7 	bl	801611c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801558e:	e009      	b.n	80155a4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8015590:	6839      	ldr	r1, [r7, #0]
 8015592:	6878      	ldr	r0, [r7, #4]
 8015594:	f000 fcf7 	bl	8015f86 <USBD_CtlError>
          break;
 8015598:	e004      	b.n	80155a4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801559a:	6839      	ldr	r1, [r7, #0]
 801559c:	6878      	ldr	r0, [r7, #4]
 801559e:	f000 fcf2 	bl	8015f86 <USBD_CtlError>
          break;
 80155a2:	e000      	b.n	80155a6 <USBD_StdItfReq+0xc2>
          break;
 80155a4:	bf00      	nop
      }
      break;
 80155a6:	e004      	b.n	80155b2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80155a8:	6839      	ldr	r1, [r7, #0]
 80155aa:	6878      	ldr	r0, [r7, #4]
 80155ac:	f000 fceb 	bl	8015f86 <USBD_CtlError>
      break;
 80155b0:	bf00      	nop
  }

  return ret;
 80155b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80155b4:	4618      	mov	r0, r3
 80155b6:	3710      	adds	r7, #16
 80155b8:	46bd      	mov	sp, r7
 80155ba:	bd80      	pop	{r7, pc}

080155bc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80155bc:	b580      	push	{r7, lr}
 80155be:	b084      	sub	sp, #16
 80155c0:	af00      	add	r7, sp, #0
 80155c2:	6078      	str	r0, [r7, #4]
 80155c4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80155c6:	2300      	movs	r3, #0
 80155c8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80155ca:	683b      	ldr	r3, [r7, #0]
 80155cc:	889b      	ldrh	r3, [r3, #4]
 80155ce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80155d0:	683b      	ldr	r3, [r7, #0]
 80155d2:	781b      	ldrb	r3, [r3, #0]
 80155d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80155d8:	2b40      	cmp	r3, #64	; 0x40
 80155da:	d007      	beq.n	80155ec <USBD_StdEPReq+0x30>
 80155dc:	2b40      	cmp	r3, #64	; 0x40
 80155de:	f200 817f 	bhi.w	80158e0 <USBD_StdEPReq+0x324>
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	d02a      	beq.n	801563c <USBD_StdEPReq+0x80>
 80155e6:	2b20      	cmp	r3, #32
 80155e8:	f040 817a 	bne.w	80158e0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80155ec:	7bbb      	ldrb	r3, [r7, #14]
 80155ee:	4619      	mov	r1, r3
 80155f0:	6878      	ldr	r0, [r7, #4]
 80155f2:	f7ff fe83 	bl	80152fc <USBD_CoreFindEP>
 80155f6:	4603      	mov	r3, r0
 80155f8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80155fa:	7b7b      	ldrb	r3, [r7, #13]
 80155fc:	2bff      	cmp	r3, #255	; 0xff
 80155fe:	f000 8174 	beq.w	80158ea <USBD_StdEPReq+0x32e>
 8015602:	7b7b      	ldrb	r3, [r7, #13]
 8015604:	2b00      	cmp	r3, #0
 8015606:	f040 8170 	bne.w	80158ea <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801560a:	7b7a      	ldrb	r2, [r7, #13]
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8015612:	7b7a      	ldrb	r2, [r7, #13]
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	32ae      	adds	r2, #174	; 0xae
 8015618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801561c:	689b      	ldr	r3, [r3, #8]
 801561e:	2b00      	cmp	r3, #0
 8015620:	f000 8163 	beq.w	80158ea <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015624:	7b7a      	ldrb	r2, [r7, #13]
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	32ae      	adds	r2, #174	; 0xae
 801562a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801562e:	689b      	ldr	r3, [r3, #8]
 8015630:	6839      	ldr	r1, [r7, #0]
 8015632:	6878      	ldr	r0, [r7, #4]
 8015634:	4798      	blx	r3
 8015636:	4603      	mov	r3, r0
 8015638:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801563a:	e156      	b.n	80158ea <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801563c:	683b      	ldr	r3, [r7, #0]
 801563e:	785b      	ldrb	r3, [r3, #1]
 8015640:	2b03      	cmp	r3, #3
 8015642:	d008      	beq.n	8015656 <USBD_StdEPReq+0x9a>
 8015644:	2b03      	cmp	r3, #3
 8015646:	f300 8145 	bgt.w	80158d4 <USBD_StdEPReq+0x318>
 801564a:	2b00      	cmp	r3, #0
 801564c:	f000 809b 	beq.w	8015786 <USBD_StdEPReq+0x1ca>
 8015650:	2b01      	cmp	r3, #1
 8015652:	d03c      	beq.n	80156ce <USBD_StdEPReq+0x112>
 8015654:	e13e      	b.n	80158d4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801565c:	b2db      	uxtb	r3, r3
 801565e:	2b02      	cmp	r3, #2
 8015660:	d002      	beq.n	8015668 <USBD_StdEPReq+0xac>
 8015662:	2b03      	cmp	r3, #3
 8015664:	d016      	beq.n	8015694 <USBD_StdEPReq+0xd8>
 8015666:	e02c      	b.n	80156c2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015668:	7bbb      	ldrb	r3, [r7, #14]
 801566a:	2b00      	cmp	r3, #0
 801566c:	d00d      	beq.n	801568a <USBD_StdEPReq+0xce>
 801566e:	7bbb      	ldrb	r3, [r7, #14]
 8015670:	2b80      	cmp	r3, #128	; 0x80
 8015672:	d00a      	beq.n	801568a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015674:	7bbb      	ldrb	r3, [r7, #14]
 8015676:	4619      	mov	r1, r3
 8015678:	6878      	ldr	r0, [r7, #4]
 801567a:	f001 f9c3 	bl	8016a04 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801567e:	2180      	movs	r1, #128	; 0x80
 8015680:	6878      	ldr	r0, [r7, #4]
 8015682:	f001 f9bf 	bl	8016a04 <USBD_LL_StallEP>
 8015686:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015688:	e020      	b.n	80156cc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801568a:	6839      	ldr	r1, [r7, #0]
 801568c:	6878      	ldr	r0, [r7, #4]
 801568e:	f000 fc7a 	bl	8015f86 <USBD_CtlError>
              break;
 8015692:	e01b      	b.n	80156cc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015694:	683b      	ldr	r3, [r7, #0]
 8015696:	885b      	ldrh	r3, [r3, #2]
 8015698:	2b00      	cmp	r3, #0
 801569a:	d10e      	bne.n	80156ba <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801569c:	7bbb      	ldrb	r3, [r7, #14]
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d00b      	beq.n	80156ba <USBD_StdEPReq+0xfe>
 80156a2:	7bbb      	ldrb	r3, [r7, #14]
 80156a4:	2b80      	cmp	r3, #128	; 0x80
 80156a6:	d008      	beq.n	80156ba <USBD_StdEPReq+0xfe>
 80156a8:	683b      	ldr	r3, [r7, #0]
 80156aa:	88db      	ldrh	r3, [r3, #6]
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d104      	bne.n	80156ba <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80156b0:	7bbb      	ldrb	r3, [r7, #14]
 80156b2:	4619      	mov	r1, r3
 80156b4:	6878      	ldr	r0, [r7, #4]
 80156b6:	f001 f9a5 	bl	8016a04 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80156ba:	6878      	ldr	r0, [r7, #4]
 80156bc:	f000 fd2e 	bl	801611c <USBD_CtlSendStatus>

              break;
 80156c0:	e004      	b.n	80156cc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80156c2:	6839      	ldr	r1, [r7, #0]
 80156c4:	6878      	ldr	r0, [r7, #4]
 80156c6:	f000 fc5e 	bl	8015f86 <USBD_CtlError>
              break;
 80156ca:	bf00      	nop
          }
          break;
 80156cc:	e107      	b.n	80158de <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80156d4:	b2db      	uxtb	r3, r3
 80156d6:	2b02      	cmp	r3, #2
 80156d8:	d002      	beq.n	80156e0 <USBD_StdEPReq+0x124>
 80156da:	2b03      	cmp	r3, #3
 80156dc:	d016      	beq.n	801570c <USBD_StdEPReq+0x150>
 80156de:	e04b      	b.n	8015778 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80156e0:	7bbb      	ldrb	r3, [r7, #14]
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d00d      	beq.n	8015702 <USBD_StdEPReq+0x146>
 80156e6:	7bbb      	ldrb	r3, [r7, #14]
 80156e8:	2b80      	cmp	r3, #128	; 0x80
 80156ea:	d00a      	beq.n	8015702 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80156ec:	7bbb      	ldrb	r3, [r7, #14]
 80156ee:	4619      	mov	r1, r3
 80156f0:	6878      	ldr	r0, [r7, #4]
 80156f2:	f001 f987 	bl	8016a04 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80156f6:	2180      	movs	r1, #128	; 0x80
 80156f8:	6878      	ldr	r0, [r7, #4]
 80156fa:	f001 f983 	bl	8016a04 <USBD_LL_StallEP>
 80156fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015700:	e040      	b.n	8015784 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8015702:	6839      	ldr	r1, [r7, #0]
 8015704:	6878      	ldr	r0, [r7, #4]
 8015706:	f000 fc3e 	bl	8015f86 <USBD_CtlError>
              break;
 801570a:	e03b      	b.n	8015784 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801570c:	683b      	ldr	r3, [r7, #0]
 801570e:	885b      	ldrh	r3, [r3, #2]
 8015710:	2b00      	cmp	r3, #0
 8015712:	d136      	bne.n	8015782 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015714:	7bbb      	ldrb	r3, [r7, #14]
 8015716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801571a:	2b00      	cmp	r3, #0
 801571c:	d004      	beq.n	8015728 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801571e:	7bbb      	ldrb	r3, [r7, #14]
 8015720:	4619      	mov	r1, r3
 8015722:	6878      	ldr	r0, [r7, #4]
 8015724:	f001 f98d 	bl	8016a42 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015728:	6878      	ldr	r0, [r7, #4]
 801572a:	f000 fcf7 	bl	801611c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801572e:	7bbb      	ldrb	r3, [r7, #14]
 8015730:	4619      	mov	r1, r3
 8015732:	6878      	ldr	r0, [r7, #4]
 8015734:	f7ff fde2 	bl	80152fc <USBD_CoreFindEP>
 8015738:	4603      	mov	r3, r0
 801573a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801573c:	7b7b      	ldrb	r3, [r7, #13]
 801573e:	2bff      	cmp	r3, #255	; 0xff
 8015740:	d01f      	beq.n	8015782 <USBD_StdEPReq+0x1c6>
 8015742:	7b7b      	ldrb	r3, [r7, #13]
 8015744:	2b00      	cmp	r3, #0
 8015746:	d11c      	bne.n	8015782 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8015748:	7b7a      	ldrb	r2, [r7, #13]
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8015750:	7b7a      	ldrb	r2, [r7, #13]
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	32ae      	adds	r2, #174	; 0xae
 8015756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801575a:	689b      	ldr	r3, [r3, #8]
 801575c:	2b00      	cmp	r3, #0
 801575e:	d010      	beq.n	8015782 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015760:	7b7a      	ldrb	r2, [r7, #13]
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	32ae      	adds	r2, #174	; 0xae
 8015766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801576a:	689b      	ldr	r3, [r3, #8]
 801576c:	6839      	ldr	r1, [r7, #0]
 801576e:	6878      	ldr	r0, [r7, #4]
 8015770:	4798      	blx	r3
 8015772:	4603      	mov	r3, r0
 8015774:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8015776:	e004      	b.n	8015782 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8015778:	6839      	ldr	r1, [r7, #0]
 801577a:	6878      	ldr	r0, [r7, #4]
 801577c:	f000 fc03 	bl	8015f86 <USBD_CtlError>
              break;
 8015780:	e000      	b.n	8015784 <USBD_StdEPReq+0x1c8>
              break;
 8015782:	bf00      	nop
          }
          break;
 8015784:	e0ab      	b.n	80158de <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801578c:	b2db      	uxtb	r3, r3
 801578e:	2b02      	cmp	r3, #2
 8015790:	d002      	beq.n	8015798 <USBD_StdEPReq+0x1dc>
 8015792:	2b03      	cmp	r3, #3
 8015794:	d032      	beq.n	80157fc <USBD_StdEPReq+0x240>
 8015796:	e097      	b.n	80158c8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015798:	7bbb      	ldrb	r3, [r7, #14]
 801579a:	2b00      	cmp	r3, #0
 801579c:	d007      	beq.n	80157ae <USBD_StdEPReq+0x1f2>
 801579e:	7bbb      	ldrb	r3, [r7, #14]
 80157a0:	2b80      	cmp	r3, #128	; 0x80
 80157a2:	d004      	beq.n	80157ae <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80157a4:	6839      	ldr	r1, [r7, #0]
 80157a6:	6878      	ldr	r0, [r7, #4]
 80157a8:	f000 fbed 	bl	8015f86 <USBD_CtlError>
                break;
 80157ac:	e091      	b.n	80158d2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80157ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	da0b      	bge.n	80157ce <USBD_StdEPReq+0x212>
 80157b6:	7bbb      	ldrb	r3, [r7, #14]
 80157b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80157bc:	4613      	mov	r3, r2
 80157be:	009b      	lsls	r3, r3, #2
 80157c0:	4413      	add	r3, r2
 80157c2:	009b      	lsls	r3, r3, #2
 80157c4:	3310      	adds	r3, #16
 80157c6:	687a      	ldr	r2, [r7, #4]
 80157c8:	4413      	add	r3, r2
 80157ca:	3304      	adds	r3, #4
 80157cc:	e00b      	b.n	80157e6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80157ce:	7bbb      	ldrb	r3, [r7, #14]
 80157d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80157d4:	4613      	mov	r3, r2
 80157d6:	009b      	lsls	r3, r3, #2
 80157d8:	4413      	add	r3, r2
 80157da:	009b      	lsls	r3, r3, #2
 80157dc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80157e0:	687a      	ldr	r2, [r7, #4]
 80157e2:	4413      	add	r3, r2
 80157e4:	3304      	adds	r3, #4
 80157e6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80157e8:	68bb      	ldr	r3, [r7, #8]
 80157ea:	2200      	movs	r2, #0
 80157ec:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80157ee:	68bb      	ldr	r3, [r7, #8]
 80157f0:	2202      	movs	r2, #2
 80157f2:	4619      	mov	r1, r3
 80157f4:	6878      	ldr	r0, [r7, #4]
 80157f6:	f000 fc37 	bl	8016068 <USBD_CtlSendData>
              break;
 80157fa:	e06a      	b.n	80158d2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80157fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015800:	2b00      	cmp	r3, #0
 8015802:	da11      	bge.n	8015828 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015804:	7bbb      	ldrb	r3, [r7, #14]
 8015806:	f003 020f 	and.w	r2, r3, #15
 801580a:	6879      	ldr	r1, [r7, #4]
 801580c:	4613      	mov	r3, r2
 801580e:	009b      	lsls	r3, r3, #2
 8015810:	4413      	add	r3, r2
 8015812:	009b      	lsls	r3, r3, #2
 8015814:	440b      	add	r3, r1
 8015816:	3324      	adds	r3, #36	; 0x24
 8015818:	881b      	ldrh	r3, [r3, #0]
 801581a:	2b00      	cmp	r3, #0
 801581c:	d117      	bne.n	801584e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801581e:	6839      	ldr	r1, [r7, #0]
 8015820:	6878      	ldr	r0, [r7, #4]
 8015822:	f000 fbb0 	bl	8015f86 <USBD_CtlError>
                  break;
 8015826:	e054      	b.n	80158d2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015828:	7bbb      	ldrb	r3, [r7, #14]
 801582a:	f003 020f 	and.w	r2, r3, #15
 801582e:	6879      	ldr	r1, [r7, #4]
 8015830:	4613      	mov	r3, r2
 8015832:	009b      	lsls	r3, r3, #2
 8015834:	4413      	add	r3, r2
 8015836:	009b      	lsls	r3, r3, #2
 8015838:	440b      	add	r3, r1
 801583a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801583e:	881b      	ldrh	r3, [r3, #0]
 8015840:	2b00      	cmp	r3, #0
 8015842:	d104      	bne.n	801584e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015844:	6839      	ldr	r1, [r7, #0]
 8015846:	6878      	ldr	r0, [r7, #4]
 8015848:	f000 fb9d 	bl	8015f86 <USBD_CtlError>
                  break;
 801584c:	e041      	b.n	80158d2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801584e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015852:	2b00      	cmp	r3, #0
 8015854:	da0b      	bge.n	801586e <USBD_StdEPReq+0x2b2>
 8015856:	7bbb      	ldrb	r3, [r7, #14]
 8015858:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801585c:	4613      	mov	r3, r2
 801585e:	009b      	lsls	r3, r3, #2
 8015860:	4413      	add	r3, r2
 8015862:	009b      	lsls	r3, r3, #2
 8015864:	3310      	adds	r3, #16
 8015866:	687a      	ldr	r2, [r7, #4]
 8015868:	4413      	add	r3, r2
 801586a:	3304      	adds	r3, #4
 801586c:	e00b      	b.n	8015886 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801586e:	7bbb      	ldrb	r3, [r7, #14]
 8015870:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015874:	4613      	mov	r3, r2
 8015876:	009b      	lsls	r3, r3, #2
 8015878:	4413      	add	r3, r2
 801587a:	009b      	lsls	r3, r3, #2
 801587c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015880:	687a      	ldr	r2, [r7, #4]
 8015882:	4413      	add	r3, r2
 8015884:	3304      	adds	r3, #4
 8015886:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015888:	7bbb      	ldrb	r3, [r7, #14]
 801588a:	2b00      	cmp	r3, #0
 801588c:	d002      	beq.n	8015894 <USBD_StdEPReq+0x2d8>
 801588e:	7bbb      	ldrb	r3, [r7, #14]
 8015890:	2b80      	cmp	r3, #128	; 0x80
 8015892:	d103      	bne.n	801589c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8015894:	68bb      	ldr	r3, [r7, #8]
 8015896:	2200      	movs	r2, #0
 8015898:	601a      	str	r2, [r3, #0]
 801589a:	e00e      	b.n	80158ba <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801589c:	7bbb      	ldrb	r3, [r7, #14]
 801589e:	4619      	mov	r1, r3
 80158a0:	6878      	ldr	r0, [r7, #4]
 80158a2:	f001 f8ed 	bl	8016a80 <USBD_LL_IsStallEP>
 80158a6:	4603      	mov	r3, r0
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d003      	beq.n	80158b4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80158ac:	68bb      	ldr	r3, [r7, #8]
 80158ae:	2201      	movs	r2, #1
 80158b0:	601a      	str	r2, [r3, #0]
 80158b2:	e002      	b.n	80158ba <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80158b4:	68bb      	ldr	r3, [r7, #8]
 80158b6:	2200      	movs	r2, #0
 80158b8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80158ba:	68bb      	ldr	r3, [r7, #8]
 80158bc:	2202      	movs	r2, #2
 80158be:	4619      	mov	r1, r3
 80158c0:	6878      	ldr	r0, [r7, #4]
 80158c2:	f000 fbd1 	bl	8016068 <USBD_CtlSendData>
              break;
 80158c6:	e004      	b.n	80158d2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80158c8:	6839      	ldr	r1, [r7, #0]
 80158ca:	6878      	ldr	r0, [r7, #4]
 80158cc:	f000 fb5b 	bl	8015f86 <USBD_CtlError>
              break;
 80158d0:	bf00      	nop
          }
          break;
 80158d2:	e004      	b.n	80158de <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80158d4:	6839      	ldr	r1, [r7, #0]
 80158d6:	6878      	ldr	r0, [r7, #4]
 80158d8:	f000 fb55 	bl	8015f86 <USBD_CtlError>
          break;
 80158dc:	bf00      	nop
      }
      break;
 80158de:	e005      	b.n	80158ec <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80158e0:	6839      	ldr	r1, [r7, #0]
 80158e2:	6878      	ldr	r0, [r7, #4]
 80158e4:	f000 fb4f 	bl	8015f86 <USBD_CtlError>
      break;
 80158e8:	e000      	b.n	80158ec <USBD_StdEPReq+0x330>
      break;
 80158ea:	bf00      	nop
  }

  return ret;
 80158ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80158ee:	4618      	mov	r0, r3
 80158f0:	3710      	adds	r7, #16
 80158f2:	46bd      	mov	sp, r7
 80158f4:	bd80      	pop	{r7, pc}
	...

080158f8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80158f8:	b580      	push	{r7, lr}
 80158fa:	b084      	sub	sp, #16
 80158fc:	af00      	add	r7, sp, #0
 80158fe:	6078      	str	r0, [r7, #4]
 8015900:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015902:	2300      	movs	r3, #0
 8015904:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015906:	2300      	movs	r3, #0
 8015908:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801590a:	2300      	movs	r3, #0
 801590c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801590e:	683b      	ldr	r3, [r7, #0]
 8015910:	885b      	ldrh	r3, [r3, #2]
 8015912:	0a1b      	lsrs	r3, r3, #8
 8015914:	b29b      	uxth	r3, r3
 8015916:	3b01      	subs	r3, #1
 8015918:	2b06      	cmp	r3, #6
 801591a:	f200 8128 	bhi.w	8015b6e <USBD_GetDescriptor+0x276>
 801591e:	a201      	add	r2, pc, #4	; (adr r2, 8015924 <USBD_GetDescriptor+0x2c>)
 8015920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015924:	08015941 	.word	0x08015941
 8015928:	08015959 	.word	0x08015959
 801592c:	08015999 	.word	0x08015999
 8015930:	08015b6f 	.word	0x08015b6f
 8015934:	08015b6f 	.word	0x08015b6f
 8015938:	08015b0f 	.word	0x08015b0f
 801593c:	08015b3b 	.word	0x08015b3b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015946:	681b      	ldr	r3, [r3, #0]
 8015948:	687a      	ldr	r2, [r7, #4]
 801594a:	7c12      	ldrb	r2, [r2, #16]
 801594c:	f107 0108 	add.w	r1, r7, #8
 8015950:	4610      	mov	r0, r2
 8015952:	4798      	blx	r3
 8015954:	60f8      	str	r0, [r7, #12]
      break;
 8015956:	e112      	b.n	8015b7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	7c1b      	ldrb	r3, [r3, #16]
 801595c:	2b00      	cmp	r3, #0
 801595e:	d10d      	bne.n	801597c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015968:	f107 0208 	add.w	r2, r7, #8
 801596c:	4610      	mov	r0, r2
 801596e:	4798      	blx	r3
 8015970:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015972:	68fb      	ldr	r3, [r7, #12]
 8015974:	3301      	adds	r3, #1
 8015976:	2202      	movs	r2, #2
 8015978:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801597a:	e100      	b.n	8015b7e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015984:	f107 0208 	add.w	r2, r7, #8
 8015988:	4610      	mov	r0, r2
 801598a:	4798      	blx	r3
 801598c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801598e:	68fb      	ldr	r3, [r7, #12]
 8015990:	3301      	adds	r3, #1
 8015992:	2202      	movs	r2, #2
 8015994:	701a      	strb	r2, [r3, #0]
      break;
 8015996:	e0f2      	b.n	8015b7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015998:	683b      	ldr	r3, [r7, #0]
 801599a:	885b      	ldrh	r3, [r3, #2]
 801599c:	b2db      	uxtb	r3, r3
 801599e:	2b05      	cmp	r3, #5
 80159a0:	f200 80ac 	bhi.w	8015afc <USBD_GetDescriptor+0x204>
 80159a4:	a201      	add	r2, pc, #4	; (adr r2, 80159ac <USBD_GetDescriptor+0xb4>)
 80159a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80159aa:	bf00      	nop
 80159ac:	080159c5 	.word	0x080159c5
 80159b0:	080159f9 	.word	0x080159f9
 80159b4:	08015a2d 	.word	0x08015a2d
 80159b8:	08015a61 	.word	0x08015a61
 80159bc:	08015a95 	.word	0x08015a95
 80159c0:	08015ac9 	.word	0x08015ac9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80159ca:	685b      	ldr	r3, [r3, #4]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d00b      	beq.n	80159e8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80159d6:	685b      	ldr	r3, [r3, #4]
 80159d8:	687a      	ldr	r2, [r7, #4]
 80159da:	7c12      	ldrb	r2, [r2, #16]
 80159dc:	f107 0108 	add.w	r1, r7, #8
 80159e0:	4610      	mov	r0, r2
 80159e2:	4798      	blx	r3
 80159e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80159e6:	e091      	b.n	8015b0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80159e8:	6839      	ldr	r1, [r7, #0]
 80159ea:	6878      	ldr	r0, [r7, #4]
 80159ec:	f000 facb 	bl	8015f86 <USBD_CtlError>
            err++;
 80159f0:	7afb      	ldrb	r3, [r7, #11]
 80159f2:	3301      	adds	r3, #1
 80159f4:	72fb      	strb	r3, [r7, #11]
          break;
 80159f6:	e089      	b.n	8015b0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80159fe:	689b      	ldr	r3, [r3, #8]
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d00b      	beq.n	8015a1c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015a0a:	689b      	ldr	r3, [r3, #8]
 8015a0c:	687a      	ldr	r2, [r7, #4]
 8015a0e:	7c12      	ldrb	r2, [r2, #16]
 8015a10:	f107 0108 	add.w	r1, r7, #8
 8015a14:	4610      	mov	r0, r2
 8015a16:	4798      	blx	r3
 8015a18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015a1a:	e077      	b.n	8015b0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015a1c:	6839      	ldr	r1, [r7, #0]
 8015a1e:	6878      	ldr	r0, [r7, #4]
 8015a20:	f000 fab1 	bl	8015f86 <USBD_CtlError>
            err++;
 8015a24:	7afb      	ldrb	r3, [r7, #11]
 8015a26:	3301      	adds	r3, #1
 8015a28:	72fb      	strb	r3, [r7, #11]
          break;
 8015a2a:	e06f      	b.n	8015b0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015a32:	68db      	ldr	r3, [r3, #12]
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	d00b      	beq.n	8015a50 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015a3e:	68db      	ldr	r3, [r3, #12]
 8015a40:	687a      	ldr	r2, [r7, #4]
 8015a42:	7c12      	ldrb	r2, [r2, #16]
 8015a44:	f107 0108 	add.w	r1, r7, #8
 8015a48:	4610      	mov	r0, r2
 8015a4a:	4798      	blx	r3
 8015a4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015a4e:	e05d      	b.n	8015b0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015a50:	6839      	ldr	r1, [r7, #0]
 8015a52:	6878      	ldr	r0, [r7, #4]
 8015a54:	f000 fa97 	bl	8015f86 <USBD_CtlError>
            err++;
 8015a58:	7afb      	ldrb	r3, [r7, #11]
 8015a5a:	3301      	adds	r3, #1
 8015a5c:	72fb      	strb	r3, [r7, #11]
          break;
 8015a5e:	e055      	b.n	8015b0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015a66:	691b      	ldr	r3, [r3, #16]
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d00b      	beq.n	8015a84 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015a72:	691b      	ldr	r3, [r3, #16]
 8015a74:	687a      	ldr	r2, [r7, #4]
 8015a76:	7c12      	ldrb	r2, [r2, #16]
 8015a78:	f107 0108 	add.w	r1, r7, #8
 8015a7c:	4610      	mov	r0, r2
 8015a7e:	4798      	blx	r3
 8015a80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015a82:	e043      	b.n	8015b0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015a84:	6839      	ldr	r1, [r7, #0]
 8015a86:	6878      	ldr	r0, [r7, #4]
 8015a88:	f000 fa7d 	bl	8015f86 <USBD_CtlError>
            err++;
 8015a8c:	7afb      	ldrb	r3, [r7, #11]
 8015a8e:	3301      	adds	r3, #1
 8015a90:	72fb      	strb	r3, [r7, #11]
          break;
 8015a92:	e03b      	b.n	8015b0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015a9a:	695b      	ldr	r3, [r3, #20]
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d00b      	beq.n	8015ab8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015aa6:	695b      	ldr	r3, [r3, #20]
 8015aa8:	687a      	ldr	r2, [r7, #4]
 8015aaa:	7c12      	ldrb	r2, [r2, #16]
 8015aac:	f107 0108 	add.w	r1, r7, #8
 8015ab0:	4610      	mov	r0, r2
 8015ab2:	4798      	blx	r3
 8015ab4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015ab6:	e029      	b.n	8015b0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015ab8:	6839      	ldr	r1, [r7, #0]
 8015aba:	6878      	ldr	r0, [r7, #4]
 8015abc:	f000 fa63 	bl	8015f86 <USBD_CtlError>
            err++;
 8015ac0:	7afb      	ldrb	r3, [r7, #11]
 8015ac2:	3301      	adds	r3, #1
 8015ac4:	72fb      	strb	r3, [r7, #11]
          break;
 8015ac6:	e021      	b.n	8015b0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015ace:	699b      	ldr	r3, [r3, #24]
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	d00b      	beq.n	8015aec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015ada:	699b      	ldr	r3, [r3, #24]
 8015adc:	687a      	ldr	r2, [r7, #4]
 8015ade:	7c12      	ldrb	r2, [r2, #16]
 8015ae0:	f107 0108 	add.w	r1, r7, #8
 8015ae4:	4610      	mov	r0, r2
 8015ae6:	4798      	blx	r3
 8015ae8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015aea:	e00f      	b.n	8015b0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015aec:	6839      	ldr	r1, [r7, #0]
 8015aee:	6878      	ldr	r0, [r7, #4]
 8015af0:	f000 fa49 	bl	8015f86 <USBD_CtlError>
            err++;
 8015af4:	7afb      	ldrb	r3, [r7, #11]
 8015af6:	3301      	adds	r3, #1
 8015af8:	72fb      	strb	r3, [r7, #11]
          break;
 8015afa:	e007      	b.n	8015b0c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015afc:	6839      	ldr	r1, [r7, #0]
 8015afe:	6878      	ldr	r0, [r7, #4]
 8015b00:	f000 fa41 	bl	8015f86 <USBD_CtlError>
          err++;
 8015b04:	7afb      	ldrb	r3, [r7, #11]
 8015b06:	3301      	adds	r3, #1
 8015b08:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8015b0a:	bf00      	nop
      }
      break;
 8015b0c:	e037      	b.n	8015b7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	7c1b      	ldrb	r3, [r3, #16]
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d109      	bne.n	8015b2a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015b1e:	f107 0208 	add.w	r2, r7, #8
 8015b22:	4610      	mov	r0, r2
 8015b24:	4798      	blx	r3
 8015b26:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015b28:	e029      	b.n	8015b7e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015b2a:	6839      	ldr	r1, [r7, #0]
 8015b2c:	6878      	ldr	r0, [r7, #4]
 8015b2e:	f000 fa2a 	bl	8015f86 <USBD_CtlError>
        err++;
 8015b32:	7afb      	ldrb	r3, [r7, #11]
 8015b34:	3301      	adds	r3, #1
 8015b36:	72fb      	strb	r3, [r7, #11]
      break;
 8015b38:	e021      	b.n	8015b7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	7c1b      	ldrb	r3, [r3, #16]
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d10d      	bne.n	8015b5e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b4a:	f107 0208 	add.w	r2, r7, #8
 8015b4e:	4610      	mov	r0, r2
 8015b50:	4798      	blx	r3
 8015b52:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015b54:	68fb      	ldr	r3, [r7, #12]
 8015b56:	3301      	adds	r3, #1
 8015b58:	2207      	movs	r2, #7
 8015b5a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015b5c:	e00f      	b.n	8015b7e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015b5e:	6839      	ldr	r1, [r7, #0]
 8015b60:	6878      	ldr	r0, [r7, #4]
 8015b62:	f000 fa10 	bl	8015f86 <USBD_CtlError>
        err++;
 8015b66:	7afb      	ldrb	r3, [r7, #11]
 8015b68:	3301      	adds	r3, #1
 8015b6a:	72fb      	strb	r3, [r7, #11]
      break;
 8015b6c:	e007      	b.n	8015b7e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8015b6e:	6839      	ldr	r1, [r7, #0]
 8015b70:	6878      	ldr	r0, [r7, #4]
 8015b72:	f000 fa08 	bl	8015f86 <USBD_CtlError>
      err++;
 8015b76:	7afb      	ldrb	r3, [r7, #11]
 8015b78:	3301      	adds	r3, #1
 8015b7a:	72fb      	strb	r3, [r7, #11]
      break;
 8015b7c:	bf00      	nop
  }

  if (err != 0U)
 8015b7e:	7afb      	ldrb	r3, [r7, #11]
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d11e      	bne.n	8015bc2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8015b84:	683b      	ldr	r3, [r7, #0]
 8015b86:	88db      	ldrh	r3, [r3, #6]
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d016      	beq.n	8015bba <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8015b8c:	893b      	ldrh	r3, [r7, #8]
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	d00e      	beq.n	8015bb0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8015b92:	683b      	ldr	r3, [r7, #0]
 8015b94:	88da      	ldrh	r2, [r3, #6]
 8015b96:	893b      	ldrh	r3, [r7, #8]
 8015b98:	4293      	cmp	r3, r2
 8015b9a:	bf28      	it	cs
 8015b9c:	4613      	movcs	r3, r2
 8015b9e:	b29b      	uxth	r3, r3
 8015ba0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015ba2:	893b      	ldrh	r3, [r7, #8]
 8015ba4:	461a      	mov	r2, r3
 8015ba6:	68f9      	ldr	r1, [r7, #12]
 8015ba8:	6878      	ldr	r0, [r7, #4]
 8015baa:	f000 fa5d 	bl	8016068 <USBD_CtlSendData>
 8015bae:	e009      	b.n	8015bc4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015bb0:	6839      	ldr	r1, [r7, #0]
 8015bb2:	6878      	ldr	r0, [r7, #4]
 8015bb4:	f000 f9e7 	bl	8015f86 <USBD_CtlError>
 8015bb8:	e004      	b.n	8015bc4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015bba:	6878      	ldr	r0, [r7, #4]
 8015bbc:	f000 faae 	bl	801611c <USBD_CtlSendStatus>
 8015bc0:	e000      	b.n	8015bc4 <USBD_GetDescriptor+0x2cc>
    return;
 8015bc2:	bf00      	nop
  }
}
 8015bc4:	3710      	adds	r7, #16
 8015bc6:	46bd      	mov	sp, r7
 8015bc8:	bd80      	pop	{r7, pc}
 8015bca:	bf00      	nop

08015bcc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015bcc:	b580      	push	{r7, lr}
 8015bce:	b084      	sub	sp, #16
 8015bd0:	af00      	add	r7, sp, #0
 8015bd2:	6078      	str	r0, [r7, #4]
 8015bd4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015bd6:	683b      	ldr	r3, [r7, #0]
 8015bd8:	889b      	ldrh	r3, [r3, #4]
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d131      	bne.n	8015c42 <USBD_SetAddress+0x76>
 8015bde:	683b      	ldr	r3, [r7, #0]
 8015be0:	88db      	ldrh	r3, [r3, #6]
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	d12d      	bne.n	8015c42 <USBD_SetAddress+0x76>
 8015be6:	683b      	ldr	r3, [r7, #0]
 8015be8:	885b      	ldrh	r3, [r3, #2]
 8015bea:	2b7f      	cmp	r3, #127	; 0x7f
 8015bec:	d829      	bhi.n	8015c42 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015bee:	683b      	ldr	r3, [r7, #0]
 8015bf0:	885b      	ldrh	r3, [r3, #2]
 8015bf2:	b2db      	uxtb	r3, r3
 8015bf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015bf8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015c00:	b2db      	uxtb	r3, r3
 8015c02:	2b03      	cmp	r3, #3
 8015c04:	d104      	bne.n	8015c10 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8015c06:	6839      	ldr	r1, [r7, #0]
 8015c08:	6878      	ldr	r0, [r7, #4]
 8015c0a:	f000 f9bc 	bl	8015f86 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015c0e:	e01d      	b.n	8015c4c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	7bfa      	ldrb	r2, [r7, #15]
 8015c14:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015c18:	7bfb      	ldrb	r3, [r7, #15]
 8015c1a:	4619      	mov	r1, r3
 8015c1c:	6878      	ldr	r0, [r7, #4]
 8015c1e:	f000 ff5b 	bl	8016ad8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015c22:	6878      	ldr	r0, [r7, #4]
 8015c24:	f000 fa7a 	bl	801611c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015c28:	7bfb      	ldrb	r3, [r7, #15]
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d004      	beq.n	8015c38 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	2202      	movs	r2, #2
 8015c32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015c36:	e009      	b.n	8015c4c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	2201      	movs	r2, #1
 8015c3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015c40:	e004      	b.n	8015c4c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8015c42:	6839      	ldr	r1, [r7, #0]
 8015c44:	6878      	ldr	r0, [r7, #4]
 8015c46:	f000 f99e 	bl	8015f86 <USBD_CtlError>
  }
}
 8015c4a:	bf00      	nop
 8015c4c:	bf00      	nop
 8015c4e:	3710      	adds	r7, #16
 8015c50:	46bd      	mov	sp, r7
 8015c52:	bd80      	pop	{r7, pc}

08015c54 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015c54:	b580      	push	{r7, lr}
 8015c56:	b084      	sub	sp, #16
 8015c58:	af00      	add	r7, sp, #0
 8015c5a:	6078      	str	r0, [r7, #4]
 8015c5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015c5e:	2300      	movs	r3, #0
 8015c60:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8015c62:	683b      	ldr	r3, [r7, #0]
 8015c64:	885b      	ldrh	r3, [r3, #2]
 8015c66:	b2da      	uxtb	r2, r3
 8015c68:	4b4e      	ldr	r3, [pc, #312]	; (8015da4 <USBD_SetConfig+0x150>)
 8015c6a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015c6c:	4b4d      	ldr	r3, [pc, #308]	; (8015da4 <USBD_SetConfig+0x150>)
 8015c6e:	781b      	ldrb	r3, [r3, #0]
 8015c70:	2b01      	cmp	r3, #1
 8015c72:	d905      	bls.n	8015c80 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015c74:	6839      	ldr	r1, [r7, #0]
 8015c76:	6878      	ldr	r0, [r7, #4]
 8015c78:	f000 f985 	bl	8015f86 <USBD_CtlError>
    return USBD_FAIL;
 8015c7c:	2303      	movs	r3, #3
 8015c7e:	e08c      	b.n	8015d9a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015c86:	b2db      	uxtb	r3, r3
 8015c88:	2b02      	cmp	r3, #2
 8015c8a:	d002      	beq.n	8015c92 <USBD_SetConfig+0x3e>
 8015c8c:	2b03      	cmp	r3, #3
 8015c8e:	d029      	beq.n	8015ce4 <USBD_SetConfig+0x90>
 8015c90:	e075      	b.n	8015d7e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8015c92:	4b44      	ldr	r3, [pc, #272]	; (8015da4 <USBD_SetConfig+0x150>)
 8015c94:	781b      	ldrb	r3, [r3, #0]
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d020      	beq.n	8015cdc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8015c9a:	4b42      	ldr	r3, [pc, #264]	; (8015da4 <USBD_SetConfig+0x150>)
 8015c9c:	781b      	ldrb	r3, [r3, #0]
 8015c9e:	461a      	mov	r2, r3
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015ca4:	4b3f      	ldr	r3, [pc, #252]	; (8015da4 <USBD_SetConfig+0x150>)
 8015ca6:	781b      	ldrb	r3, [r3, #0]
 8015ca8:	4619      	mov	r1, r3
 8015caa:	6878      	ldr	r0, [r7, #4]
 8015cac:	f7fe ffe1 	bl	8014c72 <USBD_SetClassConfig>
 8015cb0:	4603      	mov	r3, r0
 8015cb2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8015cb4:	7bfb      	ldrb	r3, [r7, #15]
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d008      	beq.n	8015ccc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8015cba:	6839      	ldr	r1, [r7, #0]
 8015cbc:	6878      	ldr	r0, [r7, #4]
 8015cbe:	f000 f962 	bl	8015f86 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	2202      	movs	r2, #2
 8015cc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015cca:	e065      	b.n	8015d98 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015ccc:	6878      	ldr	r0, [r7, #4]
 8015cce:	f000 fa25 	bl	801611c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	2203      	movs	r2, #3
 8015cd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015cda:	e05d      	b.n	8015d98 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015cdc:	6878      	ldr	r0, [r7, #4]
 8015cde:	f000 fa1d 	bl	801611c <USBD_CtlSendStatus>
      break;
 8015ce2:	e059      	b.n	8015d98 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8015ce4:	4b2f      	ldr	r3, [pc, #188]	; (8015da4 <USBD_SetConfig+0x150>)
 8015ce6:	781b      	ldrb	r3, [r3, #0]
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d112      	bne.n	8015d12 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	2202      	movs	r2, #2
 8015cf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8015cf4:	4b2b      	ldr	r3, [pc, #172]	; (8015da4 <USBD_SetConfig+0x150>)
 8015cf6:	781b      	ldrb	r3, [r3, #0]
 8015cf8:	461a      	mov	r2, r3
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015cfe:	4b29      	ldr	r3, [pc, #164]	; (8015da4 <USBD_SetConfig+0x150>)
 8015d00:	781b      	ldrb	r3, [r3, #0]
 8015d02:	4619      	mov	r1, r3
 8015d04:	6878      	ldr	r0, [r7, #4]
 8015d06:	f7fe ffd0 	bl	8014caa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8015d0a:	6878      	ldr	r0, [r7, #4]
 8015d0c:	f000 fa06 	bl	801611c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015d10:	e042      	b.n	8015d98 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8015d12:	4b24      	ldr	r3, [pc, #144]	; (8015da4 <USBD_SetConfig+0x150>)
 8015d14:	781b      	ldrb	r3, [r3, #0]
 8015d16:	461a      	mov	r2, r3
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	685b      	ldr	r3, [r3, #4]
 8015d1c:	429a      	cmp	r2, r3
 8015d1e:	d02a      	beq.n	8015d76 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	685b      	ldr	r3, [r3, #4]
 8015d24:	b2db      	uxtb	r3, r3
 8015d26:	4619      	mov	r1, r3
 8015d28:	6878      	ldr	r0, [r7, #4]
 8015d2a:	f7fe ffbe 	bl	8014caa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8015d2e:	4b1d      	ldr	r3, [pc, #116]	; (8015da4 <USBD_SetConfig+0x150>)
 8015d30:	781b      	ldrb	r3, [r3, #0]
 8015d32:	461a      	mov	r2, r3
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015d38:	4b1a      	ldr	r3, [pc, #104]	; (8015da4 <USBD_SetConfig+0x150>)
 8015d3a:	781b      	ldrb	r3, [r3, #0]
 8015d3c:	4619      	mov	r1, r3
 8015d3e:	6878      	ldr	r0, [r7, #4]
 8015d40:	f7fe ff97 	bl	8014c72 <USBD_SetClassConfig>
 8015d44:	4603      	mov	r3, r0
 8015d46:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8015d48:	7bfb      	ldrb	r3, [r7, #15]
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	d00f      	beq.n	8015d6e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8015d4e:	6839      	ldr	r1, [r7, #0]
 8015d50:	6878      	ldr	r0, [r7, #4]
 8015d52:	f000 f918 	bl	8015f86 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	685b      	ldr	r3, [r3, #4]
 8015d5a:	b2db      	uxtb	r3, r3
 8015d5c:	4619      	mov	r1, r3
 8015d5e:	6878      	ldr	r0, [r7, #4]
 8015d60:	f7fe ffa3 	bl	8014caa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	2202      	movs	r2, #2
 8015d68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015d6c:	e014      	b.n	8015d98 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015d6e:	6878      	ldr	r0, [r7, #4]
 8015d70:	f000 f9d4 	bl	801611c <USBD_CtlSendStatus>
      break;
 8015d74:	e010      	b.n	8015d98 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015d76:	6878      	ldr	r0, [r7, #4]
 8015d78:	f000 f9d0 	bl	801611c <USBD_CtlSendStatus>
      break;
 8015d7c:	e00c      	b.n	8015d98 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8015d7e:	6839      	ldr	r1, [r7, #0]
 8015d80:	6878      	ldr	r0, [r7, #4]
 8015d82:	f000 f900 	bl	8015f86 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015d86:	4b07      	ldr	r3, [pc, #28]	; (8015da4 <USBD_SetConfig+0x150>)
 8015d88:	781b      	ldrb	r3, [r3, #0]
 8015d8a:	4619      	mov	r1, r3
 8015d8c:	6878      	ldr	r0, [r7, #4]
 8015d8e:	f7fe ff8c 	bl	8014caa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8015d92:	2303      	movs	r3, #3
 8015d94:	73fb      	strb	r3, [r7, #15]
      break;
 8015d96:	bf00      	nop
  }

  return ret;
 8015d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d9a:	4618      	mov	r0, r3
 8015d9c:	3710      	adds	r7, #16
 8015d9e:	46bd      	mov	sp, r7
 8015da0:	bd80      	pop	{r7, pc}
 8015da2:	bf00      	nop
 8015da4:	24001624 	.word	0x24001624

08015da8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015da8:	b580      	push	{r7, lr}
 8015daa:	b082      	sub	sp, #8
 8015dac:	af00      	add	r7, sp, #0
 8015dae:	6078      	str	r0, [r7, #4]
 8015db0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8015db2:	683b      	ldr	r3, [r7, #0]
 8015db4:	88db      	ldrh	r3, [r3, #6]
 8015db6:	2b01      	cmp	r3, #1
 8015db8:	d004      	beq.n	8015dc4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8015dba:	6839      	ldr	r1, [r7, #0]
 8015dbc:	6878      	ldr	r0, [r7, #4]
 8015dbe:	f000 f8e2 	bl	8015f86 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8015dc2:	e023      	b.n	8015e0c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015dca:	b2db      	uxtb	r3, r3
 8015dcc:	2b02      	cmp	r3, #2
 8015dce:	dc02      	bgt.n	8015dd6 <USBD_GetConfig+0x2e>
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	dc03      	bgt.n	8015ddc <USBD_GetConfig+0x34>
 8015dd4:	e015      	b.n	8015e02 <USBD_GetConfig+0x5a>
 8015dd6:	2b03      	cmp	r3, #3
 8015dd8:	d00b      	beq.n	8015df2 <USBD_GetConfig+0x4a>
 8015dda:	e012      	b.n	8015e02 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	2200      	movs	r2, #0
 8015de0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	3308      	adds	r3, #8
 8015de6:	2201      	movs	r2, #1
 8015de8:	4619      	mov	r1, r3
 8015dea:	6878      	ldr	r0, [r7, #4]
 8015dec:	f000 f93c 	bl	8016068 <USBD_CtlSendData>
        break;
 8015df0:	e00c      	b.n	8015e0c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	3304      	adds	r3, #4
 8015df6:	2201      	movs	r2, #1
 8015df8:	4619      	mov	r1, r3
 8015dfa:	6878      	ldr	r0, [r7, #4]
 8015dfc:	f000 f934 	bl	8016068 <USBD_CtlSendData>
        break;
 8015e00:	e004      	b.n	8015e0c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8015e02:	6839      	ldr	r1, [r7, #0]
 8015e04:	6878      	ldr	r0, [r7, #4]
 8015e06:	f000 f8be 	bl	8015f86 <USBD_CtlError>
        break;
 8015e0a:	bf00      	nop
}
 8015e0c:	bf00      	nop
 8015e0e:	3708      	adds	r7, #8
 8015e10:	46bd      	mov	sp, r7
 8015e12:	bd80      	pop	{r7, pc}

08015e14 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e14:	b580      	push	{r7, lr}
 8015e16:	b082      	sub	sp, #8
 8015e18:	af00      	add	r7, sp, #0
 8015e1a:	6078      	str	r0, [r7, #4]
 8015e1c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015e24:	b2db      	uxtb	r3, r3
 8015e26:	3b01      	subs	r3, #1
 8015e28:	2b02      	cmp	r3, #2
 8015e2a:	d81e      	bhi.n	8015e6a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8015e2c:	683b      	ldr	r3, [r7, #0]
 8015e2e:	88db      	ldrh	r3, [r3, #6]
 8015e30:	2b02      	cmp	r3, #2
 8015e32:	d004      	beq.n	8015e3e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8015e34:	6839      	ldr	r1, [r7, #0]
 8015e36:	6878      	ldr	r0, [r7, #4]
 8015e38:	f000 f8a5 	bl	8015f86 <USBD_CtlError>
        break;
 8015e3c:	e01a      	b.n	8015e74 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	2201      	movs	r2, #1
 8015e42:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d005      	beq.n	8015e5a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	68db      	ldr	r3, [r3, #12]
 8015e52:	f043 0202 	orr.w	r2, r3, #2
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	330c      	adds	r3, #12
 8015e5e:	2202      	movs	r2, #2
 8015e60:	4619      	mov	r1, r3
 8015e62:	6878      	ldr	r0, [r7, #4]
 8015e64:	f000 f900 	bl	8016068 <USBD_CtlSendData>
      break;
 8015e68:	e004      	b.n	8015e74 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8015e6a:	6839      	ldr	r1, [r7, #0]
 8015e6c:	6878      	ldr	r0, [r7, #4]
 8015e6e:	f000 f88a 	bl	8015f86 <USBD_CtlError>
      break;
 8015e72:	bf00      	nop
  }
}
 8015e74:	bf00      	nop
 8015e76:	3708      	adds	r7, #8
 8015e78:	46bd      	mov	sp, r7
 8015e7a:	bd80      	pop	{r7, pc}

08015e7c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e7c:	b580      	push	{r7, lr}
 8015e7e:	b082      	sub	sp, #8
 8015e80:	af00      	add	r7, sp, #0
 8015e82:	6078      	str	r0, [r7, #4]
 8015e84:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015e86:	683b      	ldr	r3, [r7, #0]
 8015e88:	885b      	ldrh	r3, [r3, #2]
 8015e8a:	2b01      	cmp	r3, #1
 8015e8c:	d107      	bne.n	8015e9e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	2201      	movs	r2, #1
 8015e92:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8015e96:	6878      	ldr	r0, [r7, #4]
 8015e98:	f000 f940 	bl	801611c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8015e9c:	e013      	b.n	8015ec6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8015e9e:	683b      	ldr	r3, [r7, #0]
 8015ea0:	885b      	ldrh	r3, [r3, #2]
 8015ea2:	2b02      	cmp	r3, #2
 8015ea4:	d10b      	bne.n	8015ebe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8015ea6:	683b      	ldr	r3, [r7, #0]
 8015ea8:	889b      	ldrh	r3, [r3, #4]
 8015eaa:	0a1b      	lsrs	r3, r3, #8
 8015eac:	b29b      	uxth	r3, r3
 8015eae:	b2da      	uxtb	r2, r3
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8015eb6:	6878      	ldr	r0, [r7, #4]
 8015eb8:	f000 f930 	bl	801611c <USBD_CtlSendStatus>
}
 8015ebc:	e003      	b.n	8015ec6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8015ebe:	6839      	ldr	r1, [r7, #0]
 8015ec0:	6878      	ldr	r0, [r7, #4]
 8015ec2:	f000 f860 	bl	8015f86 <USBD_CtlError>
}
 8015ec6:	bf00      	nop
 8015ec8:	3708      	adds	r7, #8
 8015eca:	46bd      	mov	sp, r7
 8015ecc:	bd80      	pop	{r7, pc}

08015ece <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015ece:	b580      	push	{r7, lr}
 8015ed0:	b082      	sub	sp, #8
 8015ed2:	af00      	add	r7, sp, #0
 8015ed4:	6078      	str	r0, [r7, #4]
 8015ed6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ede:	b2db      	uxtb	r3, r3
 8015ee0:	3b01      	subs	r3, #1
 8015ee2:	2b02      	cmp	r3, #2
 8015ee4:	d80b      	bhi.n	8015efe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015ee6:	683b      	ldr	r3, [r7, #0]
 8015ee8:	885b      	ldrh	r3, [r3, #2]
 8015eea:	2b01      	cmp	r3, #1
 8015eec:	d10c      	bne.n	8015f08 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	2200      	movs	r2, #0
 8015ef2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8015ef6:	6878      	ldr	r0, [r7, #4]
 8015ef8:	f000 f910 	bl	801611c <USBD_CtlSendStatus>
      }
      break;
 8015efc:	e004      	b.n	8015f08 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8015efe:	6839      	ldr	r1, [r7, #0]
 8015f00:	6878      	ldr	r0, [r7, #4]
 8015f02:	f000 f840 	bl	8015f86 <USBD_CtlError>
      break;
 8015f06:	e000      	b.n	8015f0a <USBD_ClrFeature+0x3c>
      break;
 8015f08:	bf00      	nop
  }
}
 8015f0a:	bf00      	nop
 8015f0c:	3708      	adds	r7, #8
 8015f0e:	46bd      	mov	sp, r7
 8015f10:	bd80      	pop	{r7, pc}

08015f12 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8015f12:	b580      	push	{r7, lr}
 8015f14:	b084      	sub	sp, #16
 8015f16:	af00      	add	r7, sp, #0
 8015f18:	6078      	str	r0, [r7, #4]
 8015f1a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8015f1c:	683b      	ldr	r3, [r7, #0]
 8015f1e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8015f20:	68fb      	ldr	r3, [r7, #12]
 8015f22:	781a      	ldrb	r2, [r3, #0]
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8015f28:	68fb      	ldr	r3, [r7, #12]
 8015f2a:	3301      	adds	r3, #1
 8015f2c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8015f2e:	68fb      	ldr	r3, [r7, #12]
 8015f30:	781a      	ldrb	r2, [r3, #0]
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8015f36:	68fb      	ldr	r3, [r7, #12]
 8015f38:	3301      	adds	r3, #1
 8015f3a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8015f3c:	68f8      	ldr	r0, [r7, #12]
 8015f3e:	f7ff fa41 	bl	80153c4 <SWAPBYTE>
 8015f42:	4603      	mov	r3, r0
 8015f44:	461a      	mov	r2, r3
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8015f4a:	68fb      	ldr	r3, [r7, #12]
 8015f4c:	3301      	adds	r3, #1
 8015f4e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015f50:	68fb      	ldr	r3, [r7, #12]
 8015f52:	3301      	adds	r3, #1
 8015f54:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8015f56:	68f8      	ldr	r0, [r7, #12]
 8015f58:	f7ff fa34 	bl	80153c4 <SWAPBYTE>
 8015f5c:	4603      	mov	r3, r0
 8015f5e:	461a      	mov	r2, r3
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	3301      	adds	r3, #1
 8015f68:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015f6a:	68fb      	ldr	r3, [r7, #12]
 8015f6c:	3301      	adds	r3, #1
 8015f6e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8015f70:	68f8      	ldr	r0, [r7, #12]
 8015f72:	f7ff fa27 	bl	80153c4 <SWAPBYTE>
 8015f76:	4603      	mov	r3, r0
 8015f78:	461a      	mov	r2, r3
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	80da      	strh	r2, [r3, #6]
}
 8015f7e:	bf00      	nop
 8015f80:	3710      	adds	r7, #16
 8015f82:	46bd      	mov	sp, r7
 8015f84:	bd80      	pop	{r7, pc}

08015f86 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015f86:	b580      	push	{r7, lr}
 8015f88:	b082      	sub	sp, #8
 8015f8a:	af00      	add	r7, sp, #0
 8015f8c:	6078      	str	r0, [r7, #4]
 8015f8e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8015f90:	2180      	movs	r1, #128	; 0x80
 8015f92:	6878      	ldr	r0, [r7, #4]
 8015f94:	f000 fd36 	bl	8016a04 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8015f98:	2100      	movs	r1, #0
 8015f9a:	6878      	ldr	r0, [r7, #4]
 8015f9c:	f000 fd32 	bl	8016a04 <USBD_LL_StallEP>
}
 8015fa0:	bf00      	nop
 8015fa2:	3708      	adds	r7, #8
 8015fa4:	46bd      	mov	sp, r7
 8015fa6:	bd80      	pop	{r7, pc}

08015fa8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8015fa8:	b580      	push	{r7, lr}
 8015faa:	b086      	sub	sp, #24
 8015fac:	af00      	add	r7, sp, #0
 8015fae:	60f8      	str	r0, [r7, #12]
 8015fb0:	60b9      	str	r1, [r7, #8]
 8015fb2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8015fb4:	2300      	movs	r3, #0
 8015fb6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8015fb8:	68fb      	ldr	r3, [r7, #12]
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	d036      	beq.n	801602c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8015fbe:	68fb      	ldr	r3, [r7, #12]
 8015fc0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8015fc2:	6938      	ldr	r0, [r7, #16]
 8015fc4:	f000 f836 	bl	8016034 <USBD_GetLen>
 8015fc8:	4603      	mov	r3, r0
 8015fca:	3301      	adds	r3, #1
 8015fcc:	b29b      	uxth	r3, r3
 8015fce:	005b      	lsls	r3, r3, #1
 8015fd0:	b29a      	uxth	r2, r3
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8015fd6:	7dfb      	ldrb	r3, [r7, #23]
 8015fd8:	68ba      	ldr	r2, [r7, #8]
 8015fda:	4413      	add	r3, r2
 8015fdc:	687a      	ldr	r2, [r7, #4]
 8015fde:	7812      	ldrb	r2, [r2, #0]
 8015fe0:	701a      	strb	r2, [r3, #0]
  idx++;
 8015fe2:	7dfb      	ldrb	r3, [r7, #23]
 8015fe4:	3301      	adds	r3, #1
 8015fe6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8015fe8:	7dfb      	ldrb	r3, [r7, #23]
 8015fea:	68ba      	ldr	r2, [r7, #8]
 8015fec:	4413      	add	r3, r2
 8015fee:	2203      	movs	r2, #3
 8015ff0:	701a      	strb	r2, [r3, #0]
  idx++;
 8015ff2:	7dfb      	ldrb	r3, [r7, #23]
 8015ff4:	3301      	adds	r3, #1
 8015ff6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8015ff8:	e013      	b.n	8016022 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8015ffa:	7dfb      	ldrb	r3, [r7, #23]
 8015ffc:	68ba      	ldr	r2, [r7, #8]
 8015ffe:	4413      	add	r3, r2
 8016000:	693a      	ldr	r2, [r7, #16]
 8016002:	7812      	ldrb	r2, [r2, #0]
 8016004:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016006:	693b      	ldr	r3, [r7, #16]
 8016008:	3301      	adds	r3, #1
 801600a:	613b      	str	r3, [r7, #16]
    idx++;
 801600c:	7dfb      	ldrb	r3, [r7, #23]
 801600e:	3301      	adds	r3, #1
 8016010:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8016012:	7dfb      	ldrb	r3, [r7, #23]
 8016014:	68ba      	ldr	r2, [r7, #8]
 8016016:	4413      	add	r3, r2
 8016018:	2200      	movs	r2, #0
 801601a:	701a      	strb	r2, [r3, #0]
    idx++;
 801601c:	7dfb      	ldrb	r3, [r7, #23]
 801601e:	3301      	adds	r3, #1
 8016020:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016022:	693b      	ldr	r3, [r7, #16]
 8016024:	781b      	ldrb	r3, [r3, #0]
 8016026:	2b00      	cmp	r3, #0
 8016028:	d1e7      	bne.n	8015ffa <USBD_GetString+0x52>
 801602a:	e000      	b.n	801602e <USBD_GetString+0x86>
    return;
 801602c:	bf00      	nop
  }
}
 801602e:	3718      	adds	r7, #24
 8016030:	46bd      	mov	sp, r7
 8016032:	bd80      	pop	{r7, pc}

08016034 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016034:	b480      	push	{r7}
 8016036:	b085      	sub	sp, #20
 8016038:	af00      	add	r7, sp, #0
 801603a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801603c:	2300      	movs	r3, #0
 801603e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016044:	e005      	b.n	8016052 <USBD_GetLen+0x1e>
  {
    len++;
 8016046:	7bfb      	ldrb	r3, [r7, #15]
 8016048:	3301      	adds	r3, #1
 801604a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801604c:	68bb      	ldr	r3, [r7, #8]
 801604e:	3301      	adds	r3, #1
 8016050:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016052:	68bb      	ldr	r3, [r7, #8]
 8016054:	781b      	ldrb	r3, [r3, #0]
 8016056:	2b00      	cmp	r3, #0
 8016058:	d1f5      	bne.n	8016046 <USBD_GetLen+0x12>
  }

  return len;
 801605a:	7bfb      	ldrb	r3, [r7, #15]
}
 801605c:	4618      	mov	r0, r3
 801605e:	3714      	adds	r7, #20
 8016060:	46bd      	mov	sp, r7
 8016062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016066:	4770      	bx	lr

08016068 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8016068:	b580      	push	{r7, lr}
 801606a:	b084      	sub	sp, #16
 801606c:	af00      	add	r7, sp, #0
 801606e:	60f8      	str	r0, [r7, #12]
 8016070:	60b9      	str	r1, [r7, #8]
 8016072:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	2202      	movs	r2, #2
 8016078:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801607c:	68fb      	ldr	r3, [r7, #12]
 801607e:	687a      	ldr	r2, [r7, #4]
 8016080:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8016082:	68fb      	ldr	r3, [r7, #12]
 8016084:	687a      	ldr	r2, [r7, #4]
 8016086:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	68ba      	ldr	r2, [r7, #8]
 801608c:	2100      	movs	r1, #0
 801608e:	68f8      	ldr	r0, [r7, #12]
 8016090:	f000 fd41 	bl	8016b16 <USBD_LL_Transmit>

  return USBD_OK;
 8016094:	2300      	movs	r3, #0
}
 8016096:	4618      	mov	r0, r3
 8016098:	3710      	adds	r7, #16
 801609a:	46bd      	mov	sp, r7
 801609c:	bd80      	pop	{r7, pc}

0801609e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801609e:	b580      	push	{r7, lr}
 80160a0:	b084      	sub	sp, #16
 80160a2:	af00      	add	r7, sp, #0
 80160a4:	60f8      	str	r0, [r7, #12]
 80160a6:	60b9      	str	r1, [r7, #8]
 80160a8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	68ba      	ldr	r2, [r7, #8]
 80160ae:	2100      	movs	r1, #0
 80160b0:	68f8      	ldr	r0, [r7, #12]
 80160b2:	f000 fd30 	bl	8016b16 <USBD_LL_Transmit>

  return USBD_OK;
 80160b6:	2300      	movs	r3, #0
}
 80160b8:	4618      	mov	r0, r3
 80160ba:	3710      	adds	r7, #16
 80160bc:	46bd      	mov	sp, r7
 80160be:	bd80      	pop	{r7, pc}

080160c0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80160c0:	b580      	push	{r7, lr}
 80160c2:	b084      	sub	sp, #16
 80160c4:	af00      	add	r7, sp, #0
 80160c6:	60f8      	str	r0, [r7, #12]
 80160c8:	60b9      	str	r1, [r7, #8]
 80160ca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80160cc:	68fb      	ldr	r3, [r7, #12]
 80160ce:	2203      	movs	r2, #3
 80160d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80160d4:	68fb      	ldr	r3, [r7, #12]
 80160d6:	687a      	ldr	r2, [r7, #4]
 80160d8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80160dc:	68fb      	ldr	r3, [r7, #12]
 80160de:	687a      	ldr	r2, [r7, #4]
 80160e0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	68ba      	ldr	r2, [r7, #8]
 80160e8:	2100      	movs	r1, #0
 80160ea:	68f8      	ldr	r0, [r7, #12]
 80160ec:	f000 fd34 	bl	8016b58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80160f0:	2300      	movs	r3, #0
}
 80160f2:	4618      	mov	r0, r3
 80160f4:	3710      	adds	r7, #16
 80160f6:	46bd      	mov	sp, r7
 80160f8:	bd80      	pop	{r7, pc}

080160fa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80160fa:	b580      	push	{r7, lr}
 80160fc:	b084      	sub	sp, #16
 80160fe:	af00      	add	r7, sp, #0
 8016100:	60f8      	str	r0, [r7, #12]
 8016102:	60b9      	str	r1, [r7, #8]
 8016104:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	68ba      	ldr	r2, [r7, #8]
 801610a:	2100      	movs	r1, #0
 801610c:	68f8      	ldr	r0, [r7, #12]
 801610e:	f000 fd23 	bl	8016b58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016112:	2300      	movs	r3, #0
}
 8016114:	4618      	mov	r0, r3
 8016116:	3710      	adds	r7, #16
 8016118:	46bd      	mov	sp, r7
 801611a:	bd80      	pop	{r7, pc}

0801611c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801611c:	b580      	push	{r7, lr}
 801611e:	b082      	sub	sp, #8
 8016120:	af00      	add	r7, sp, #0
 8016122:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	2204      	movs	r2, #4
 8016128:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801612c:	2300      	movs	r3, #0
 801612e:	2200      	movs	r2, #0
 8016130:	2100      	movs	r1, #0
 8016132:	6878      	ldr	r0, [r7, #4]
 8016134:	f000 fcef 	bl	8016b16 <USBD_LL_Transmit>

  return USBD_OK;
 8016138:	2300      	movs	r3, #0
}
 801613a:	4618      	mov	r0, r3
 801613c:	3708      	adds	r7, #8
 801613e:	46bd      	mov	sp, r7
 8016140:	bd80      	pop	{r7, pc}

08016142 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016142:	b580      	push	{r7, lr}
 8016144:	b082      	sub	sp, #8
 8016146:	af00      	add	r7, sp, #0
 8016148:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	2205      	movs	r2, #5
 801614e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016152:	2300      	movs	r3, #0
 8016154:	2200      	movs	r2, #0
 8016156:	2100      	movs	r1, #0
 8016158:	6878      	ldr	r0, [r7, #4]
 801615a:	f000 fcfd 	bl	8016b58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801615e:	2300      	movs	r3, #0
}
 8016160:	4618      	mov	r0, r3
 8016162:	3708      	adds	r7, #8
 8016164:	46bd      	mov	sp, r7
 8016166:	bd80      	pop	{r7, pc}

08016168 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8016168:	b480      	push	{r7}
 801616a:	b087      	sub	sp, #28
 801616c:	af00      	add	r7, sp, #0
 801616e:	60f8      	str	r0, [r7, #12]
 8016170:	60b9      	str	r1, [r7, #8]
 8016172:	4613      	mov	r3, r2
 8016174:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8016176:	2301      	movs	r3, #1
 8016178:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801617a:	2300      	movs	r3, #0
 801617c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801617e:	4b1f      	ldr	r3, [pc, #124]	; (80161fc <FATFS_LinkDriverEx+0x94>)
 8016180:	7a5b      	ldrb	r3, [r3, #9]
 8016182:	b2db      	uxtb	r3, r3
 8016184:	2b00      	cmp	r3, #0
 8016186:	d131      	bne.n	80161ec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8016188:	4b1c      	ldr	r3, [pc, #112]	; (80161fc <FATFS_LinkDriverEx+0x94>)
 801618a:	7a5b      	ldrb	r3, [r3, #9]
 801618c:	b2db      	uxtb	r3, r3
 801618e:	461a      	mov	r2, r3
 8016190:	4b1a      	ldr	r3, [pc, #104]	; (80161fc <FATFS_LinkDriverEx+0x94>)
 8016192:	2100      	movs	r1, #0
 8016194:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8016196:	4b19      	ldr	r3, [pc, #100]	; (80161fc <FATFS_LinkDriverEx+0x94>)
 8016198:	7a5b      	ldrb	r3, [r3, #9]
 801619a:	b2db      	uxtb	r3, r3
 801619c:	4a17      	ldr	r2, [pc, #92]	; (80161fc <FATFS_LinkDriverEx+0x94>)
 801619e:	009b      	lsls	r3, r3, #2
 80161a0:	4413      	add	r3, r2
 80161a2:	68fa      	ldr	r2, [r7, #12]
 80161a4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80161a6:	4b15      	ldr	r3, [pc, #84]	; (80161fc <FATFS_LinkDriverEx+0x94>)
 80161a8:	7a5b      	ldrb	r3, [r3, #9]
 80161aa:	b2db      	uxtb	r3, r3
 80161ac:	461a      	mov	r2, r3
 80161ae:	4b13      	ldr	r3, [pc, #76]	; (80161fc <FATFS_LinkDriverEx+0x94>)
 80161b0:	4413      	add	r3, r2
 80161b2:	79fa      	ldrb	r2, [r7, #7]
 80161b4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80161b6:	4b11      	ldr	r3, [pc, #68]	; (80161fc <FATFS_LinkDriverEx+0x94>)
 80161b8:	7a5b      	ldrb	r3, [r3, #9]
 80161ba:	b2db      	uxtb	r3, r3
 80161bc:	1c5a      	adds	r2, r3, #1
 80161be:	b2d1      	uxtb	r1, r2
 80161c0:	4a0e      	ldr	r2, [pc, #56]	; (80161fc <FATFS_LinkDriverEx+0x94>)
 80161c2:	7251      	strb	r1, [r2, #9]
 80161c4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80161c6:	7dbb      	ldrb	r3, [r7, #22]
 80161c8:	3330      	adds	r3, #48	; 0x30
 80161ca:	b2da      	uxtb	r2, r3
 80161cc:	68bb      	ldr	r3, [r7, #8]
 80161ce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80161d0:	68bb      	ldr	r3, [r7, #8]
 80161d2:	3301      	adds	r3, #1
 80161d4:	223a      	movs	r2, #58	; 0x3a
 80161d6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80161d8:	68bb      	ldr	r3, [r7, #8]
 80161da:	3302      	adds	r3, #2
 80161dc:	222f      	movs	r2, #47	; 0x2f
 80161de:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80161e0:	68bb      	ldr	r3, [r7, #8]
 80161e2:	3303      	adds	r3, #3
 80161e4:	2200      	movs	r2, #0
 80161e6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80161e8:	2300      	movs	r3, #0
 80161ea:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80161ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80161ee:	4618      	mov	r0, r3
 80161f0:	371c      	adds	r7, #28
 80161f2:	46bd      	mov	sp, r7
 80161f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161f8:	4770      	bx	lr
 80161fa:	bf00      	nop
 80161fc:	24001628 	.word	0x24001628

08016200 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016200:	b580      	push	{r7, lr}
 8016202:	b082      	sub	sp, #8
 8016204:	af00      	add	r7, sp, #0
 8016206:	6078      	str	r0, [r7, #4]
 8016208:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801620a:	2200      	movs	r2, #0
 801620c:	6839      	ldr	r1, [r7, #0]
 801620e:	6878      	ldr	r0, [r7, #4]
 8016210:	f7ff ffaa 	bl	8016168 <FATFS_LinkDriverEx>
 8016214:	4603      	mov	r3, r0
}
 8016216:	4618      	mov	r0, r3
 8016218:	3708      	adds	r7, #8
 801621a:	46bd      	mov	sp, r7
 801621c:	bd80      	pop	{r7, pc}
	...

08016220 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016220:	b580      	push	{r7, lr}
 8016222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8016224:	2201      	movs	r2, #1
 8016226:	4913      	ldr	r1, [pc, #76]	; (8016274 <MX_USB_DEVICE_Init+0x54>)
 8016228:	4813      	ldr	r0, [pc, #76]	; (8016278 <MX_USB_DEVICE_Init+0x58>)
 801622a:	f7fe fca5 	bl	8014b78 <USBD_Init>
 801622e:	4603      	mov	r3, r0
 8016230:	2b00      	cmp	r3, #0
 8016232:	d001      	beq.n	8016238 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016234:	f7ec fa10 	bl	8002658 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8016238:	4910      	ldr	r1, [pc, #64]	; (801627c <MX_USB_DEVICE_Init+0x5c>)
 801623a:	480f      	ldr	r0, [pc, #60]	; (8016278 <MX_USB_DEVICE_Init+0x58>)
 801623c:	f7fe fccc 	bl	8014bd8 <USBD_RegisterClass>
 8016240:	4603      	mov	r3, r0
 8016242:	2b00      	cmp	r3, #0
 8016244:	d001      	beq.n	801624a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8016246:	f7ec fa07 	bl	8002658 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 801624a:	490d      	ldr	r1, [pc, #52]	; (8016280 <MX_USB_DEVICE_Init+0x60>)
 801624c:	480a      	ldr	r0, [pc, #40]	; (8016278 <MX_USB_DEVICE_Init+0x58>)
 801624e:	f7fe fbc3 	bl	80149d8 <USBD_CDC_RegisterInterface>
 8016252:	4603      	mov	r3, r0
 8016254:	2b00      	cmp	r3, #0
 8016256:	d001      	beq.n	801625c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016258:	f7ec f9fe 	bl	8002658 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 801625c:	4806      	ldr	r0, [pc, #24]	; (8016278 <MX_USB_DEVICE_Init+0x58>)
 801625e:	f7fe fcf1 	bl	8014c44 <USBD_Start>
 8016262:	4603      	mov	r3, r0
 8016264:	2b00      	cmp	r3, #0
 8016266:	d001      	beq.n	801626c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016268:	f7ec f9f6 	bl	8002658 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801626c:	f7f3 fa24 	bl	80096b8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016270:	bf00      	nop
 8016272:	bd80      	pop	{r7, pc}
 8016274:	240000b0 	.word	0x240000b0
 8016278:	24001634 	.word	0x24001634
 801627c:	2400001c 	.word	0x2400001c
 8016280:	2400009c 	.word	0x2400009c

08016284 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8016284:	b580      	push	{r7, lr}
 8016286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8016288:	2200      	movs	r2, #0
 801628a:	4905      	ldr	r1, [pc, #20]	; (80162a0 <CDC_Init_HS+0x1c>)
 801628c:	4805      	ldr	r0, [pc, #20]	; (80162a4 <CDC_Init_HS+0x20>)
 801628e:	f7fe fbbd 	bl	8014a0c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8016292:	4905      	ldr	r1, [pc, #20]	; (80162a8 <CDC_Init_HS+0x24>)
 8016294:	4803      	ldr	r0, [pc, #12]	; (80162a4 <CDC_Init_HS+0x20>)
 8016296:	f7fe fbdb 	bl	8014a50 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801629a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801629c:	4618      	mov	r0, r3
 801629e:	bd80      	pop	{r7, pc}
 80162a0:	24002110 	.word	0x24002110
 80162a4:	24001634 	.word	0x24001634
 80162a8:	24001910 	.word	0x24001910

080162ac <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 80162ac:	b480      	push	{r7}
 80162ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 80162b0:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80162b2:	4618      	mov	r0, r3
 80162b4:	46bd      	mov	sp, r7
 80162b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ba:	4770      	bx	lr

080162bc <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80162bc:	b480      	push	{r7}
 80162be:	b083      	sub	sp, #12
 80162c0:	af00      	add	r7, sp, #0
 80162c2:	4603      	mov	r3, r0
 80162c4:	6039      	str	r1, [r7, #0]
 80162c6:	71fb      	strb	r3, [r7, #7]
 80162c8:	4613      	mov	r3, r2
 80162ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 80162cc:	79fb      	ldrb	r3, [r7, #7]
 80162ce:	2b23      	cmp	r3, #35	; 0x23
 80162d0:	d84a      	bhi.n	8016368 <CDC_Control_HS+0xac>
 80162d2:	a201      	add	r2, pc, #4	; (adr r2, 80162d8 <CDC_Control_HS+0x1c>)
 80162d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80162d8:	08016369 	.word	0x08016369
 80162dc:	08016369 	.word	0x08016369
 80162e0:	08016369 	.word	0x08016369
 80162e4:	08016369 	.word	0x08016369
 80162e8:	08016369 	.word	0x08016369
 80162ec:	08016369 	.word	0x08016369
 80162f0:	08016369 	.word	0x08016369
 80162f4:	08016369 	.word	0x08016369
 80162f8:	08016369 	.word	0x08016369
 80162fc:	08016369 	.word	0x08016369
 8016300:	08016369 	.word	0x08016369
 8016304:	08016369 	.word	0x08016369
 8016308:	08016369 	.word	0x08016369
 801630c:	08016369 	.word	0x08016369
 8016310:	08016369 	.word	0x08016369
 8016314:	08016369 	.word	0x08016369
 8016318:	08016369 	.word	0x08016369
 801631c:	08016369 	.word	0x08016369
 8016320:	08016369 	.word	0x08016369
 8016324:	08016369 	.word	0x08016369
 8016328:	08016369 	.word	0x08016369
 801632c:	08016369 	.word	0x08016369
 8016330:	08016369 	.word	0x08016369
 8016334:	08016369 	.word	0x08016369
 8016338:	08016369 	.word	0x08016369
 801633c:	08016369 	.word	0x08016369
 8016340:	08016369 	.word	0x08016369
 8016344:	08016369 	.word	0x08016369
 8016348:	08016369 	.word	0x08016369
 801634c:	08016369 	.word	0x08016369
 8016350:	08016369 	.word	0x08016369
 8016354:	08016369 	.word	0x08016369
 8016358:	08016369 	.word	0x08016369
 801635c:	08016369 	.word	0x08016369
 8016360:	08016369 	.word	0x08016369
 8016364:	08016369 	.word	0x08016369
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016368:	bf00      	nop
  }

  return (USBD_OK);
 801636a:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 801636c:	4618      	mov	r0, r3
 801636e:	370c      	adds	r7, #12
 8016370:	46bd      	mov	sp, r7
 8016372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016376:	4770      	bx	lr

08016378 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8016378:	b580      	push	{r7, lr}
 801637a:	b082      	sub	sp, #8
 801637c:	af00      	add	r7, sp, #0
 801637e:	6078      	str	r0, [r7, #4]
 8016380:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8016382:	6879      	ldr	r1, [r7, #4]
 8016384:	4805      	ldr	r0, [pc, #20]	; (801639c <CDC_Receive_HS+0x24>)
 8016386:	f7fe fb63 	bl	8014a50 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 801638a:	4804      	ldr	r0, [pc, #16]	; (801639c <CDC_Receive_HS+0x24>)
 801638c:	f7fe fbbe 	bl	8014b0c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8016390:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8016392:	4618      	mov	r0, r3
 8016394:	3708      	adds	r7, #8
 8016396:	46bd      	mov	sp, r7
 8016398:	bd80      	pop	{r7, pc}
 801639a:	bf00      	nop
 801639c:	24001634 	.word	0x24001634

080163a0 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 80163a0:	b580      	push	{r7, lr}
 80163a2:	b084      	sub	sp, #16
 80163a4:	af00      	add	r7, sp, #0
 80163a6:	6078      	str	r0, [r7, #4]
 80163a8:	460b      	mov	r3, r1
 80163aa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80163ac:	2300      	movs	r3, #0
 80163ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 80163b0:	4b0d      	ldr	r3, [pc, #52]	; (80163e8 <CDC_Transmit_HS+0x48>)
 80163b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80163b6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80163b8:	68bb      	ldr	r3, [r7, #8]
 80163ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80163be:	2b00      	cmp	r3, #0
 80163c0:	d001      	beq.n	80163c6 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 80163c2:	2301      	movs	r3, #1
 80163c4:	e00b      	b.n	80163de <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 80163c6:	887b      	ldrh	r3, [r7, #2]
 80163c8:	461a      	mov	r2, r3
 80163ca:	6879      	ldr	r1, [r7, #4]
 80163cc:	4806      	ldr	r0, [pc, #24]	; (80163e8 <CDC_Transmit_HS+0x48>)
 80163ce:	f7fe fb1d 	bl	8014a0c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 80163d2:	4805      	ldr	r0, [pc, #20]	; (80163e8 <CDC_Transmit_HS+0x48>)
 80163d4:	f7fe fb5a 	bl	8014a8c <USBD_CDC_TransmitPacket>
 80163d8:	4603      	mov	r3, r0
 80163da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 80163dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80163de:	4618      	mov	r0, r3
 80163e0:	3710      	adds	r7, #16
 80163e2:	46bd      	mov	sp, r7
 80163e4:	bd80      	pop	{r7, pc}
 80163e6:	bf00      	nop
 80163e8:	24001634 	.word	0x24001634

080163ec <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80163ec:	b480      	push	{r7}
 80163ee:	b087      	sub	sp, #28
 80163f0:	af00      	add	r7, sp, #0
 80163f2:	60f8      	str	r0, [r7, #12]
 80163f4:	60b9      	str	r1, [r7, #8]
 80163f6:	4613      	mov	r3, r2
 80163f8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80163fa:	2300      	movs	r3, #0
 80163fc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 80163fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016402:	4618      	mov	r0, r3
 8016404:	371c      	adds	r7, #28
 8016406:	46bd      	mov	sp, r7
 8016408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801640c:	4770      	bx	lr
	...

08016410 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016410:	b480      	push	{r7}
 8016412:	b083      	sub	sp, #12
 8016414:	af00      	add	r7, sp, #0
 8016416:	4603      	mov	r3, r0
 8016418:	6039      	str	r1, [r7, #0]
 801641a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 801641c:	683b      	ldr	r3, [r7, #0]
 801641e:	2212      	movs	r2, #18
 8016420:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8016422:	4b03      	ldr	r3, [pc, #12]	; (8016430 <USBD_HS_DeviceDescriptor+0x20>)
}
 8016424:	4618      	mov	r0, r3
 8016426:	370c      	adds	r7, #12
 8016428:	46bd      	mov	sp, r7
 801642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801642e:	4770      	bx	lr
 8016430:	240000cc 	.word	0x240000cc

08016434 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016434:	b480      	push	{r7}
 8016436:	b083      	sub	sp, #12
 8016438:	af00      	add	r7, sp, #0
 801643a:	4603      	mov	r3, r0
 801643c:	6039      	str	r1, [r7, #0]
 801643e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016440:	683b      	ldr	r3, [r7, #0]
 8016442:	2204      	movs	r2, #4
 8016444:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016446:	4b03      	ldr	r3, [pc, #12]	; (8016454 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8016448:	4618      	mov	r0, r3
 801644a:	370c      	adds	r7, #12
 801644c:	46bd      	mov	sp, r7
 801644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016452:	4770      	bx	lr
 8016454:	240000e0 	.word	0x240000e0

08016458 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016458:	b580      	push	{r7, lr}
 801645a:	b082      	sub	sp, #8
 801645c:	af00      	add	r7, sp, #0
 801645e:	4603      	mov	r3, r0
 8016460:	6039      	str	r1, [r7, #0]
 8016462:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016464:	79fb      	ldrb	r3, [r7, #7]
 8016466:	2b00      	cmp	r3, #0
 8016468:	d105      	bne.n	8016476 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801646a:	683a      	ldr	r2, [r7, #0]
 801646c:	4907      	ldr	r1, [pc, #28]	; (801648c <USBD_HS_ProductStrDescriptor+0x34>)
 801646e:	4808      	ldr	r0, [pc, #32]	; (8016490 <USBD_HS_ProductStrDescriptor+0x38>)
 8016470:	f7ff fd9a 	bl	8015fa8 <USBD_GetString>
 8016474:	e004      	b.n	8016480 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8016476:	683a      	ldr	r2, [r7, #0]
 8016478:	4904      	ldr	r1, [pc, #16]	; (801648c <USBD_HS_ProductStrDescriptor+0x34>)
 801647a:	4805      	ldr	r0, [pc, #20]	; (8016490 <USBD_HS_ProductStrDescriptor+0x38>)
 801647c:	f7ff fd94 	bl	8015fa8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016480:	4b02      	ldr	r3, [pc, #8]	; (801648c <USBD_HS_ProductStrDescriptor+0x34>)
}
 8016482:	4618      	mov	r0, r3
 8016484:	3708      	adds	r7, #8
 8016486:	46bd      	mov	sp, r7
 8016488:	bd80      	pop	{r7, pc}
 801648a:	bf00      	nop
 801648c:	24002910 	.word	0x24002910
 8016490:	0801ba9c 	.word	0x0801ba9c

08016494 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016494:	b580      	push	{r7, lr}
 8016496:	b082      	sub	sp, #8
 8016498:	af00      	add	r7, sp, #0
 801649a:	4603      	mov	r3, r0
 801649c:	6039      	str	r1, [r7, #0]
 801649e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80164a0:	683a      	ldr	r2, [r7, #0]
 80164a2:	4904      	ldr	r1, [pc, #16]	; (80164b4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 80164a4:	4804      	ldr	r0, [pc, #16]	; (80164b8 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 80164a6:	f7ff fd7f 	bl	8015fa8 <USBD_GetString>
  return USBD_StrDesc;
 80164aa:	4b02      	ldr	r3, [pc, #8]	; (80164b4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 80164ac:	4618      	mov	r0, r3
 80164ae:	3708      	adds	r7, #8
 80164b0:	46bd      	mov	sp, r7
 80164b2:	bd80      	pop	{r7, pc}
 80164b4:	24002910 	.word	0x24002910
 80164b8:	0801bab8 	.word	0x0801bab8

080164bc <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80164bc:	b580      	push	{r7, lr}
 80164be:	b082      	sub	sp, #8
 80164c0:	af00      	add	r7, sp, #0
 80164c2:	4603      	mov	r3, r0
 80164c4:	6039      	str	r1, [r7, #0]
 80164c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80164c8:	683b      	ldr	r3, [r7, #0]
 80164ca:	221a      	movs	r2, #26
 80164cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80164ce:	f000 f843 	bl	8016558 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80164d2:	4b02      	ldr	r3, [pc, #8]	; (80164dc <USBD_HS_SerialStrDescriptor+0x20>)
}
 80164d4:	4618      	mov	r0, r3
 80164d6:	3708      	adds	r7, #8
 80164d8:	46bd      	mov	sp, r7
 80164da:	bd80      	pop	{r7, pc}
 80164dc:	240000e4 	.word	0x240000e4

080164e0 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80164e0:	b580      	push	{r7, lr}
 80164e2:	b082      	sub	sp, #8
 80164e4:	af00      	add	r7, sp, #0
 80164e6:	4603      	mov	r3, r0
 80164e8:	6039      	str	r1, [r7, #0]
 80164ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80164ec:	79fb      	ldrb	r3, [r7, #7]
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d105      	bne.n	80164fe <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80164f2:	683a      	ldr	r2, [r7, #0]
 80164f4:	4907      	ldr	r1, [pc, #28]	; (8016514 <USBD_HS_ConfigStrDescriptor+0x34>)
 80164f6:	4808      	ldr	r0, [pc, #32]	; (8016518 <USBD_HS_ConfigStrDescriptor+0x38>)
 80164f8:	f7ff fd56 	bl	8015fa8 <USBD_GetString>
 80164fc:	e004      	b.n	8016508 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80164fe:	683a      	ldr	r2, [r7, #0]
 8016500:	4904      	ldr	r1, [pc, #16]	; (8016514 <USBD_HS_ConfigStrDescriptor+0x34>)
 8016502:	4805      	ldr	r0, [pc, #20]	; (8016518 <USBD_HS_ConfigStrDescriptor+0x38>)
 8016504:	f7ff fd50 	bl	8015fa8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016508:	4b02      	ldr	r3, [pc, #8]	; (8016514 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801650a:	4618      	mov	r0, r3
 801650c:	3708      	adds	r7, #8
 801650e:	46bd      	mov	sp, r7
 8016510:	bd80      	pop	{r7, pc}
 8016512:	bf00      	nop
 8016514:	24002910 	.word	0x24002910
 8016518:	0801babc 	.word	0x0801babc

0801651c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801651c:	b580      	push	{r7, lr}
 801651e:	b082      	sub	sp, #8
 8016520:	af00      	add	r7, sp, #0
 8016522:	4603      	mov	r3, r0
 8016524:	6039      	str	r1, [r7, #0]
 8016526:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016528:	79fb      	ldrb	r3, [r7, #7]
 801652a:	2b00      	cmp	r3, #0
 801652c:	d105      	bne.n	801653a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801652e:	683a      	ldr	r2, [r7, #0]
 8016530:	4907      	ldr	r1, [pc, #28]	; (8016550 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8016532:	4808      	ldr	r0, [pc, #32]	; (8016554 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8016534:	f7ff fd38 	bl	8015fa8 <USBD_GetString>
 8016538:	e004      	b.n	8016544 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801653a:	683a      	ldr	r2, [r7, #0]
 801653c:	4904      	ldr	r1, [pc, #16]	; (8016550 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801653e:	4805      	ldr	r0, [pc, #20]	; (8016554 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8016540:	f7ff fd32 	bl	8015fa8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016544:	4b02      	ldr	r3, [pc, #8]	; (8016550 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8016546:	4618      	mov	r0, r3
 8016548:	3708      	adds	r7, #8
 801654a:	46bd      	mov	sp, r7
 801654c:	bd80      	pop	{r7, pc}
 801654e:	bf00      	nop
 8016550:	24002910 	.word	0x24002910
 8016554:	0801bac8 	.word	0x0801bac8

08016558 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016558:	b580      	push	{r7, lr}
 801655a:	b084      	sub	sp, #16
 801655c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801655e:	4b0f      	ldr	r3, [pc, #60]	; (801659c <Get_SerialNum+0x44>)
 8016560:	681b      	ldr	r3, [r3, #0]
 8016562:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016564:	4b0e      	ldr	r3, [pc, #56]	; (80165a0 <Get_SerialNum+0x48>)
 8016566:	681b      	ldr	r3, [r3, #0]
 8016568:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801656a:	4b0e      	ldr	r3, [pc, #56]	; (80165a4 <Get_SerialNum+0x4c>)
 801656c:	681b      	ldr	r3, [r3, #0]
 801656e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016570:	68fa      	ldr	r2, [r7, #12]
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	4413      	add	r3, r2
 8016576:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016578:	68fb      	ldr	r3, [r7, #12]
 801657a:	2b00      	cmp	r3, #0
 801657c:	d009      	beq.n	8016592 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801657e:	2208      	movs	r2, #8
 8016580:	4909      	ldr	r1, [pc, #36]	; (80165a8 <Get_SerialNum+0x50>)
 8016582:	68f8      	ldr	r0, [r7, #12]
 8016584:	f000 f814 	bl	80165b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016588:	2204      	movs	r2, #4
 801658a:	4908      	ldr	r1, [pc, #32]	; (80165ac <Get_SerialNum+0x54>)
 801658c:	68b8      	ldr	r0, [r7, #8]
 801658e:	f000 f80f 	bl	80165b0 <IntToUnicode>
  }
}
 8016592:	bf00      	nop
 8016594:	3710      	adds	r7, #16
 8016596:	46bd      	mov	sp, r7
 8016598:	bd80      	pop	{r7, pc}
 801659a:	bf00      	nop
 801659c:	1ff1e800 	.word	0x1ff1e800
 80165a0:	1ff1e804 	.word	0x1ff1e804
 80165a4:	1ff1e808 	.word	0x1ff1e808
 80165a8:	240000e6 	.word	0x240000e6
 80165ac:	240000f6 	.word	0x240000f6

080165b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80165b0:	b480      	push	{r7}
 80165b2:	b087      	sub	sp, #28
 80165b4:	af00      	add	r7, sp, #0
 80165b6:	60f8      	str	r0, [r7, #12]
 80165b8:	60b9      	str	r1, [r7, #8]
 80165ba:	4613      	mov	r3, r2
 80165bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80165be:	2300      	movs	r3, #0
 80165c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80165c2:	2300      	movs	r3, #0
 80165c4:	75fb      	strb	r3, [r7, #23]
 80165c6:	e027      	b.n	8016618 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80165c8:	68fb      	ldr	r3, [r7, #12]
 80165ca:	0f1b      	lsrs	r3, r3, #28
 80165cc:	2b09      	cmp	r3, #9
 80165ce:	d80b      	bhi.n	80165e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80165d0:	68fb      	ldr	r3, [r7, #12]
 80165d2:	0f1b      	lsrs	r3, r3, #28
 80165d4:	b2da      	uxtb	r2, r3
 80165d6:	7dfb      	ldrb	r3, [r7, #23]
 80165d8:	005b      	lsls	r3, r3, #1
 80165da:	4619      	mov	r1, r3
 80165dc:	68bb      	ldr	r3, [r7, #8]
 80165de:	440b      	add	r3, r1
 80165e0:	3230      	adds	r2, #48	; 0x30
 80165e2:	b2d2      	uxtb	r2, r2
 80165e4:	701a      	strb	r2, [r3, #0]
 80165e6:	e00a      	b.n	80165fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80165e8:	68fb      	ldr	r3, [r7, #12]
 80165ea:	0f1b      	lsrs	r3, r3, #28
 80165ec:	b2da      	uxtb	r2, r3
 80165ee:	7dfb      	ldrb	r3, [r7, #23]
 80165f0:	005b      	lsls	r3, r3, #1
 80165f2:	4619      	mov	r1, r3
 80165f4:	68bb      	ldr	r3, [r7, #8]
 80165f6:	440b      	add	r3, r1
 80165f8:	3237      	adds	r2, #55	; 0x37
 80165fa:	b2d2      	uxtb	r2, r2
 80165fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80165fe:	68fb      	ldr	r3, [r7, #12]
 8016600:	011b      	lsls	r3, r3, #4
 8016602:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016604:	7dfb      	ldrb	r3, [r7, #23]
 8016606:	005b      	lsls	r3, r3, #1
 8016608:	3301      	adds	r3, #1
 801660a:	68ba      	ldr	r2, [r7, #8]
 801660c:	4413      	add	r3, r2
 801660e:	2200      	movs	r2, #0
 8016610:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016612:	7dfb      	ldrb	r3, [r7, #23]
 8016614:	3301      	adds	r3, #1
 8016616:	75fb      	strb	r3, [r7, #23]
 8016618:	7dfa      	ldrb	r2, [r7, #23]
 801661a:	79fb      	ldrb	r3, [r7, #7]
 801661c:	429a      	cmp	r2, r3
 801661e:	d3d3      	bcc.n	80165c8 <IntToUnicode+0x18>
  }
}
 8016620:	bf00      	nop
 8016622:	bf00      	nop
 8016624:	371c      	adds	r7, #28
 8016626:	46bd      	mov	sp, r7
 8016628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801662c:	4770      	bx	lr
	...

08016630 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016630:	b580      	push	{r7, lr}
 8016632:	b0b2      	sub	sp, #200	; 0xc8
 8016634:	af00      	add	r7, sp, #0
 8016636:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8016638:	f107 0310 	add.w	r3, r7, #16
 801663c:	22b8      	movs	r2, #184	; 0xb8
 801663e:	2100      	movs	r1, #0
 8016640:	4618      	mov	r0, r3
 8016642:	f000 fb39 	bl	8016cb8 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	681b      	ldr	r3, [r3, #0]
 801664a:	4a1a      	ldr	r2, [pc, #104]	; (80166b4 <HAL_PCD_MspInit+0x84>)
 801664c:	4293      	cmp	r3, r2
 801664e:	d12c      	bne.n	80166aa <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8016650:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8016654:	f04f 0300 	mov.w	r3, #0
 8016658:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801665c:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8016660:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8016664:	f107 0310 	add.w	r3, r7, #16
 8016668:	4618      	mov	r0, r3
 801666a:	f7f4 f805 	bl	800a678 <HAL_RCCEx_PeriphCLKConfig>
 801666e:	4603      	mov	r3, r0
 8016670:	2b00      	cmp	r3, #0
 8016672:	d001      	beq.n	8016678 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8016674:	f7eb fff0 	bl	8002658 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8016678:	f7f3 f81e 	bl	80096b8 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 801667c:	4b0e      	ldr	r3, [pc, #56]	; (80166b8 <HAL_PCD_MspInit+0x88>)
 801667e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016682:	4a0d      	ldr	r2, [pc, #52]	; (80166b8 <HAL_PCD_MspInit+0x88>)
 8016684:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8016688:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801668c:	4b0a      	ldr	r3, [pc, #40]	; (80166b8 <HAL_PCD_MspInit+0x88>)
 801668e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016696:	60fb      	str	r3, [r7, #12]
 8016698:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 801669a:	2200      	movs	r2, #0
 801669c:	2100      	movs	r1, #0
 801669e:	204d      	movs	r0, #77	; 0x4d
 80166a0:	f7ee fd8d 	bl	80051be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80166a4:	204d      	movs	r0, #77	; 0x4d
 80166a6:	f7ee fda4 	bl	80051f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80166aa:	bf00      	nop
 80166ac:	37c8      	adds	r7, #200	; 0xc8
 80166ae:	46bd      	mov	sp, r7
 80166b0:	bd80      	pop	{r7, pc}
 80166b2:	bf00      	nop
 80166b4:	40040000 	.word	0x40040000
 80166b8:	58024400 	.word	0x58024400

080166bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80166bc:	b580      	push	{r7, lr}
 80166be:	b082      	sub	sp, #8
 80166c0:	af00      	add	r7, sp, #0
 80166c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80166d0:	4619      	mov	r1, r3
 80166d2:	4610      	mov	r0, r2
 80166d4:	f7fe fb03 	bl	8014cde <USBD_LL_SetupStage>
}
 80166d8:	bf00      	nop
 80166da:	3708      	adds	r7, #8
 80166dc:	46bd      	mov	sp, r7
 80166de:	bd80      	pop	{r7, pc}

080166e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80166e0:	b580      	push	{r7, lr}
 80166e2:	b082      	sub	sp, #8
 80166e4:	af00      	add	r7, sp, #0
 80166e6:	6078      	str	r0, [r7, #4]
 80166e8:	460b      	mov	r3, r1
 80166ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80166f2:	78fa      	ldrb	r2, [r7, #3]
 80166f4:	6879      	ldr	r1, [r7, #4]
 80166f6:	4613      	mov	r3, r2
 80166f8:	00db      	lsls	r3, r3, #3
 80166fa:	4413      	add	r3, r2
 80166fc:	009b      	lsls	r3, r3, #2
 80166fe:	440b      	add	r3, r1
 8016700:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8016704:	681a      	ldr	r2, [r3, #0]
 8016706:	78fb      	ldrb	r3, [r7, #3]
 8016708:	4619      	mov	r1, r3
 801670a:	f7fe fb3d 	bl	8014d88 <USBD_LL_DataOutStage>
}
 801670e:	bf00      	nop
 8016710:	3708      	adds	r7, #8
 8016712:	46bd      	mov	sp, r7
 8016714:	bd80      	pop	{r7, pc}

08016716 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016716:	b580      	push	{r7, lr}
 8016718:	b082      	sub	sp, #8
 801671a:	af00      	add	r7, sp, #0
 801671c:	6078      	str	r0, [r7, #4]
 801671e:	460b      	mov	r3, r1
 8016720:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016728:	78fa      	ldrb	r2, [r7, #3]
 801672a:	6879      	ldr	r1, [r7, #4]
 801672c:	4613      	mov	r3, r2
 801672e:	00db      	lsls	r3, r3, #3
 8016730:	4413      	add	r3, r2
 8016732:	009b      	lsls	r3, r3, #2
 8016734:	440b      	add	r3, r1
 8016736:	3348      	adds	r3, #72	; 0x48
 8016738:	681a      	ldr	r2, [r3, #0]
 801673a:	78fb      	ldrb	r3, [r7, #3]
 801673c:	4619      	mov	r1, r3
 801673e:	f7fe fbd6 	bl	8014eee <USBD_LL_DataInStage>
}
 8016742:	bf00      	nop
 8016744:	3708      	adds	r7, #8
 8016746:	46bd      	mov	sp, r7
 8016748:	bd80      	pop	{r7, pc}

0801674a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801674a:	b580      	push	{r7, lr}
 801674c:	b082      	sub	sp, #8
 801674e:	af00      	add	r7, sp, #0
 8016750:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016758:	4618      	mov	r0, r3
 801675a:	f7fe fd10 	bl	801517e <USBD_LL_SOF>
}
 801675e:	bf00      	nop
 8016760:	3708      	adds	r7, #8
 8016762:	46bd      	mov	sp, r7
 8016764:	bd80      	pop	{r7, pc}

08016766 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016766:	b580      	push	{r7, lr}
 8016768:	b084      	sub	sp, #16
 801676a:	af00      	add	r7, sp, #0
 801676c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801676e:	2301      	movs	r3, #1
 8016770:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	691b      	ldr	r3, [r3, #16]
 8016776:	2b00      	cmp	r3, #0
 8016778:	d102      	bne.n	8016780 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801677a:	2300      	movs	r3, #0
 801677c:	73fb      	strb	r3, [r7, #15]
 801677e:	e008      	b.n	8016792 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	691b      	ldr	r3, [r3, #16]
 8016784:	2b02      	cmp	r3, #2
 8016786:	d102      	bne.n	801678e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016788:	2301      	movs	r3, #1
 801678a:	73fb      	strb	r3, [r7, #15]
 801678c:	e001      	b.n	8016792 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801678e:	f7eb ff63 	bl	8002658 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016798:	7bfa      	ldrb	r2, [r7, #15]
 801679a:	4611      	mov	r1, r2
 801679c:	4618      	mov	r0, r3
 801679e:	f7fe fcaa 	bl	80150f6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80167a8:	4618      	mov	r0, r3
 80167aa:	f7fe fc52 	bl	8015052 <USBD_LL_Reset>
}
 80167ae:	bf00      	nop
 80167b0:	3710      	adds	r7, #16
 80167b2:	46bd      	mov	sp, r7
 80167b4:	bd80      	pop	{r7, pc}
	...

080167b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80167b8:	b580      	push	{r7, lr}
 80167ba:	b082      	sub	sp, #8
 80167bc:	af00      	add	r7, sp, #0
 80167be:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80167c6:	4618      	mov	r0, r3
 80167c8:	f7fe fca5 	bl	8015116 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80167d4:	681b      	ldr	r3, [r3, #0]
 80167d6:	687a      	ldr	r2, [r7, #4]
 80167d8:	6812      	ldr	r2, [r2, #0]
 80167da:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80167de:	f043 0301 	orr.w	r3, r3, #1
 80167e2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	6a1b      	ldr	r3, [r3, #32]
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d005      	beq.n	80167f8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80167ec:	4b04      	ldr	r3, [pc, #16]	; (8016800 <HAL_PCD_SuspendCallback+0x48>)
 80167ee:	691b      	ldr	r3, [r3, #16]
 80167f0:	4a03      	ldr	r2, [pc, #12]	; (8016800 <HAL_PCD_SuspendCallback+0x48>)
 80167f2:	f043 0306 	orr.w	r3, r3, #6
 80167f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80167f8:	bf00      	nop
 80167fa:	3708      	adds	r7, #8
 80167fc:	46bd      	mov	sp, r7
 80167fe:	bd80      	pop	{r7, pc}
 8016800:	e000ed00 	.word	0xe000ed00

08016804 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016804:	b580      	push	{r7, lr}
 8016806:	b082      	sub	sp, #8
 8016808:	af00      	add	r7, sp, #0
 801680a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016812:	4618      	mov	r0, r3
 8016814:	f7fe fc9b 	bl	801514e <USBD_LL_Resume>
}
 8016818:	bf00      	nop
 801681a:	3708      	adds	r7, #8
 801681c:	46bd      	mov	sp, r7
 801681e:	bd80      	pop	{r7, pc}

08016820 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016820:	b580      	push	{r7, lr}
 8016822:	b082      	sub	sp, #8
 8016824:	af00      	add	r7, sp, #0
 8016826:	6078      	str	r0, [r7, #4]
 8016828:	460b      	mov	r3, r1
 801682a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016832:	78fa      	ldrb	r2, [r7, #3]
 8016834:	4611      	mov	r1, r2
 8016836:	4618      	mov	r0, r3
 8016838:	f7fe fcf3 	bl	8015222 <USBD_LL_IsoOUTIncomplete>
}
 801683c:	bf00      	nop
 801683e:	3708      	adds	r7, #8
 8016840:	46bd      	mov	sp, r7
 8016842:	bd80      	pop	{r7, pc}

08016844 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016844:	b580      	push	{r7, lr}
 8016846:	b082      	sub	sp, #8
 8016848:	af00      	add	r7, sp, #0
 801684a:	6078      	str	r0, [r7, #4]
 801684c:	460b      	mov	r3, r1
 801684e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016856:	78fa      	ldrb	r2, [r7, #3]
 8016858:	4611      	mov	r1, r2
 801685a:	4618      	mov	r0, r3
 801685c:	f7fe fcaf 	bl	80151be <USBD_LL_IsoINIncomplete>
}
 8016860:	bf00      	nop
 8016862:	3708      	adds	r7, #8
 8016864:	46bd      	mov	sp, r7
 8016866:	bd80      	pop	{r7, pc}

08016868 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016868:	b580      	push	{r7, lr}
 801686a:	b082      	sub	sp, #8
 801686c:	af00      	add	r7, sp, #0
 801686e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016876:	4618      	mov	r0, r3
 8016878:	f7fe fd05 	bl	8015286 <USBD_LL_DevConnected>
}
 801687c:	bf00      	nop
 801687e:	3708      	adds	r7, #8
 8016880:	46bd      	mov	sp, r7
 8016882:	bd80      	pop	{r7, pc}

08016884 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016884:	b580      	push	{r7, lr}
 8016886:	b082      	sub	sp, #8
 8016888:	af00      	add	r7, sp, #0
 801688a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016892:	4618      	mov	r0, r3
 8016894:	f7fe fd02 	bl	801529c <USBD_LL_DevDisconnected>
}
 8016898:	bf00      	nop
 801689a:	3708      	adds	r7, #8
 801689c:	46bd      	mov	sp, r7
 801689e:	bd80      	pop	{r7, pc}

080168a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80168a0:	b580      	push	{r7, lr}
 80168a2:	b082      	sub	sp, #8
 80168a4:	af00      	add	r7, sp, #0
 80168a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	781b      	ldrb	r3, [r3, #0]
 80168ac:	2b01      	cmp	r3, #1
 80168ae:	d140      	bne.n	8016932 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 80168b0:	4a22      	ldr	r2, [pc, #136]	; (801693c <USBD_LL_Init+0x9c>)
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	4a20      	ldr	r2, [pc, #128]	; (801693c <USBD_LL_Init+0x9c>)
 80168bc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80168c0:	4b1e      	ldr	r3, [pc, #120]	; (801693c <USBD_LL_Init+0x9c>)
 80168c2:	4a1f      	ldr	r2, [pc, #124]	; (8016940 <USBD_LL_Init+0xa0>)
 80168c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80168c6:	4b1d      	ldr	r3, [pc, #116]	; (801693c <USBD_LL_Init+0x9c>)
 80168c8:	2209      	movs	r2, #9
 80168ca:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 80168cc:	4b1b      	ldr	r3, [pc, #108]	; (801693c <USBD_LL_Init+0x9c>)
 80168ce:	2202      	movs	r2, #2
 80168d0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80168d2:	4b1a      	ldr	r3, [pc, #104]	; (801693c <USBD_LL_Init+0x9c>)
 80168d4:	2200      	movs	r2, #0
 80168d6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80168d8:	4b18      	ldr	r3, [pc, #96]	; (801693c <USBD_LL_Init+0x9c>)
 80168da:	2202      	movs	r2, #2
 80168dc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80168de:	4b17      	ldr	r3, [pc, #92]	; (801693c <USBD_LL_Init+0x9c>)
 80168e0:	2200      	movs	r2, #0
 80168e2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80168e4:	4b15      	ldr	r3, [pc, #84]	; (801693c <USBD_LL_Init+0x9c>)
 80168e6:	2200      	movs	r2, #0
 80168e8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80168ea:	4b14      	ldr	r3, [pc, #80]	; (801693c <USBD_LL_Init+0x9c>)
 80168ec:	2200      	movs	r2, #0
 80168ee:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80168f0:	4b12      	ldr	r3, [pc, #72]	; (801693c <USBD_LL_Init+0x9c>)
 80168f2:	2200      	movs	r2, #0
 80168f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80168f6:	4b11      	ldr	r3, [pc, #68]	; (801693c <USBD_LL_Init+0x9c>)
 80168f8:	2200      	movs	r2, #0
 80168fa:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80168fc:	4b0f      	ldr	r3, [pc, #60]	; (801693c <USBD_LL_Init+0x9c>)
 80168fe:	2200      	movs	r2, #0
 8016900:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8016902:	480e      	ldr	r0, [pc, #56]	; (801693c <USBD_LL_Init+0x9c>)
 8016904:	f7f1 fbe5 	bl	80080d2 <HAL_PCD_Init>
 8016908:	4603      	mov	r3, r0
 801690a:	2b00      	cmp	r3, #0
 801690c:	d001      	beq.n	8016912 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801690e:	f7eb fea3 	bl	8002658 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8016912:	f44f 7100 	mov.w	r1, #512	; 0x200
 8016916:	4809      	ldr	r0, [pc, #36]	; (801693c <USBD_LL_Init+0x9c>)
 8016918:	f7f2 fe53 	bl	80095c2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 801691c:	2280      	movs	r2, #128	; 0x80
 801691e:	2100      	movs	r1, #0
 8016920:	4806      	ldr	r0, [pc, #24]	; (801693c <USBD_LL_Init+0x9c>)
 8016922:	f7f2 fe07 	bl	8009534 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8016926:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801692a:	2101      	movs	r1, #1
 801692c:	4803      	ldr	r0, [pc, #12]	; (801693c <USBD_LL_Init+0x9c>)
 801692e:	f7f2 fe01 	bl	8009534 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8016932:	2300      	movs	r3, #0
}
 8016934:	4618      	mov	r0, r3
 8016936:	3708      	adds	r7, #8
 8016938:	46bd      	mov	sp, r7
 801693a:	bd80      	pop	{r7, pc}
 801693c:	24002b10 	.word	0x24002b10
 8016940:	40040000 	.word	0x40040000

08016944 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016944:	b580      	push	{r7, lr}
 8016946:	b084      	sub	sp, #16
 8016948:	af00      	add	r7, sp, #0
 801694a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801694c:	2300      	movs	r3, #0
 801694e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016950:	2300      	movs	r3, #0
 8016952:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801695a:	4618      	mov	r0, r3
 801695c:	f7f1 fcdd 	bl	800831a <HAL_PCD_Start>
 8016960:	4603      	mov	r3, r0
 8016962:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016964:	7bfb      	ldrb	r3, [r7, #15]
 8016966:	4618      	mov	r0, r3
 8016968:	f000 f942 	bl	8016bf0 <USBD_Get_USB_Status>
 801696c:	4603      	mov	r3, r0
 801696e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016970:	7bbb      	ldrb	r3, [r7, #14]
}
 8016972:	4618      	mov	r0, r3
 8016974:	3710      	adds	r7, #16
 8016976:	46bd      	mov	sp, r7
 8016978:	bd80      	pop	{r7, pc}

0801697a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801697a:	b580      	push	{r7, lr}
 801697c:	b084      	sub	sp, #16
 801697e:	af00      	add	r7, sp, #0
 8016980:	6078      	str	r0, [r7, #4]
 8016982:	4608      	mov	r0, r1
 8016984:	4611      	mov	r1, r2
 8016986:	461a      	mov	r2, r3
 8016988:	4603      	mov	r3, r0
 801698a:	70fb      	strb	r3, [r7, #3]
 801698c:	460b      	mov	r3, r1
 801698e:	70bb      	strb	r3, [r7, #2]
 8016990:	4613      	mov	r3, r2
 8016992:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016994:	2300      	movs	r3, #0
 8016996:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016998:	2300      	movs	r3, #0
 801699a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80169a2:	78bb      	ldrb	r3, [r7, #2]
 80169a4:	883a      	ldrh	r2, [r7, #0]
 80169a6:	78f9      	ldrb	r1, [r7, #3]
 80169a8:	f7f2 f9dd 	bl	8008d66 <HAL_PCD_EP_Open>
 80169ac:	4603      	mov	r3, r0
 80169ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80169b0:	7bfb      	ldrb	r3, [r7, #15]
 80169b2:	4618      	mov	r0, r3
 80169b4:	f000 f91c 	bl	8016bf0 <USBD_Get_USB_Status>
 80169b8:	4603      	mov	r3, r0
 80169ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80169bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80169be:	4618      	mov	r0, r3
 80169c0:	3710      	adds	r7, #16
 80169c2:	46bd      	mov	sp, r7
 80169c4:	bd80      	pop	{r7, pc}

080169c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80169c6:	b580      	push	{r7, lr}
 80169c8:	b084      	sub	sp, #16
 80169ca:	af00      	add	r7, sp, #0
 80169cc:	6078      	str	r0, [r7, #4]
 80169ce:	460b      	mov	r3, r1
 80169d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80169d2:	2300      	movs	r3, #0
 80169d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80169d6:	2300      	movs	r3, #0
 80169d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80169e0:	78fa      	ldrb	r2, [r7, #3]
 80169e2:	4611      	mov	r1, r2
 80169e4:	4618      	mov	r0, r3
 80169e6:	f7f2 fa26 	bl	8008e36 <HAL_PCD_EP_Close>
 80169ea:	4603      	mov	r3, r0
 80169ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80169ee:	7bfb      	ldrb	r3, [r7, #15]
 80169f0:	4618      	mov	r0, r3
 80169f2:	f000 f8fd 	bl	8016bf0 <USBD_Get_USB_Status>
 80169f6:	4603      	mov	r3, r0
 80169f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80169fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80169fc:	4618      	mov	r0, r3
 80169fe:	3710      	adds	r7, #16
 8016a00:	46bd      	mov	sp, r7
 8016a02:	bd80      	pop	{r7, pc}

08016a04 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016a04:	b580      	push	{r7, lr}
 8016a06:	b084      	sub	sp, #16
 8016a08:	af00      	add	r7, sp, #0
 8016a0a:	6078      	str	r0, [r7, #4]
 8016a0c:	460b      	mov	r3, r1
 8016a0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a10:	2300      	movs	r3, #0
 8016a12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a14:	2300      	movs	r3, #0
 8016a16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016a1e:	78fa      	ldrb	r2, [r7, #3]
 8016a20:	4611      	mov	r1, r2
 8016a22:	4618      	mov	r0, r3
 8016a24:	f7f2 fae0 	bl	8008fe8 <HAL_PCD_EP_SetStall>
 8016a28:	4603      	mov	r3, r0
 8016a2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016a2c:	7bfb      	ldrb	r3, [r7, #15]
 8016a2e:	4618      	mov	r0, r3
 8016a30:	f000 f8de 	bl	8016bf0 <USBD_Get_USB_Status>
 8016a34:	4603      	mov	r3, r0
 8016a36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016a38:	7bbb      	ldrb	r3, [r7, #14]
}
 8016a3a:	4618      	mov	r0, r3
 8016a3c:	3710      	adds	r7, #16
 8016a3e:	46bd      	mov	sp, r7
 8016a40:	bd80      	pop	{r7, pc}

08016a42 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016a42:	b580      	push	{r7, lr}
 8016a44:	b084      	sub	sp, #16
 8016a46:	af00      	add	r7, sp, #0
 8016a48:	6078      	str	r0, [r7, #4]
 8016a4a:	460b      	mov	r3, r1
 8016a4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a4e:	2300      	movs	r3, #0
 8016a50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a52:	2300      	movs	r3, #0
 8016a54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016a5c:	78fa      	ldrb	r2, [r7, #3]
 8016a5e:	4611      	mov	r1, r2
 8016a60:	4618      	mov	r0, r3
 8016a62:	f7f2 fb25 	bl	80090b0 <HAL_PCD_EP_ClrStall>
 8016a66:	4603      	mov	r3, r0
 8016a68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016a6a:	7bfb      	ldrb	r3, [r7, #15]
 8016a6c:	4618      	mov	r0, r3
 8016a6e:	f000 f8bf 	bl	8016bf0 <USBD_Get_USB_Status>
 8016a72:	4603      	mov	r3, r0
 8016a74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016a76:	7bbb      	ldrb	r3, [r7, #14]
}
 8016a78:	4618      	mov	r0, r3
 8016a7a:	3710      	adds	r7, #16
 8016a7c:	46bd      	mov	sp, r7
 8016a7e:	bd80      	pop	{r7, pc}

08016a80 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016a80:	b480      	push	{r7}
 8016a82:	b085      	sub	sp, #20
 8016a84:	af00      	add	r7, sp, #0
 8016a86:	6078      	str	r0, [r7, #4]
 8016a88:	460b      	mov	r3, r1
 8016a8a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016a92:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016a94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	da0b      	bge.n	8016ab4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016a9c:	78fb      	ldrb	r3, [r7, #3]
 8016a9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016aa2:	68f9      	ldr	r1, [r7, #12]
 8016aa4:	4613      	mov	r3, r2
 8016aa6:	00db      	lsls	r3, r3, #3
 8016aa8:	4413      	add	r3, r2
 8016aaa:	009b      	lsls	r3, r3, #2
 8016aac:	440b      	add	r3, r1
 8016aae:	333e      	adds	r3, #62	; 0x3e
 8016ab0:	781b      	ldrb	r3, [r3, #0]
 8016ab2:	e00b      	b.n	8016acc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016ab4:	78fb      	ldrb	r3, [r7, #3]
 8016ab6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016aba:	68f9      	ldr	r1, [r7, #12]
 8016abc:	4613      	mov	r3, r2
 8016abe:	00db      	lsls	r3, r3, #3
 8016ac0:	4413      	add	r3, r2
 8016ac2:	009b      	lsls	r3, r3, #2
 8016ac4:	440b      	add	r3, r1
 8016ac6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8016aca:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016acc:	4618      	mov	r0, r3
 8016ace:	3714      	adds	r7, #20
 8016ad0:	46bd      	mov	sp, r7
 8016ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ad6:	4770      	bx	lr

08016ad8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016ad8:	b580      	push	{r7, lr}
 8016ada:	b084      	sub	sp, #16
 8016adc:	af00      	add	r7, sp, #0
 8016ade:	6078      	str	r0, [r7, #4]
 8016ae0:	460b      	mov	r3, r1
 8016ae2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ae4:	2300      	movs	r3, #0
 8016ae6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ae8:	2300      	movs	r3, #0
 8016aea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016af2:	78fa      	ldrb	r2, [r7, #3]
 8016af4:	4611      	mov	r1, r2
 8016af6:	4618      	mov	r0, r3
 8016af8:	f7f2 f910 	bl	8008d1c <HAL_PCD_SetAddress>
 8016afc:	4603      	mov	r3, r0
 8016afe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016b00:	7bfb      	ldrb	r3, [r7, #15]
 8016b02:	4618      	mov	r0, r3
 8016b04:	f000 f874 	bl	8016bf0 <USBD_Get_USB_Status>
 8016b08:	4603      	mov	r3, r0
 8016b0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016b0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8016b0e:	4618      	mov	r0, r3
 8016b10:	3710      	adds	r7, #16
 8016b12:	46bd      	mov	sp, r7
 8016b14:	bd80      	pop	{r7, pc}

08016b16 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016b16:	b580      	push	{r7, lr}
 8016b18:	b086      	sub	sp, #24
 8016b1a:	af00      	add	r7, sp, #0
 8016b1c:	60f8      	str	r0, [r7, #12]
 8016b1e:	607a      	str	r2, [r7, #4]
 8016b20:	603b      	str	r3, [r7, #0]
 8016b22:	460b      	mov	r3, r1
 8016b24:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b26:	2300      	movs	r3, #0
 8016b28:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b2a:	2300      	movs	r3, #0
 8016b2c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016b2e:	68fb      	ldr	r3, [r7, #12]
 8016b30:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016b34:	7af9      	ldrb	r1, [r7, #11]
 8016b36:	683b      	ldr	r3, [r7, #0]
 8016b38:	687a      	ldr	r2, [r7, #4]
 8016b3a:	f7f2 fa1a 	bl	8008f72 <HAL_PCD_EP_Transmit>
 8016b3e:	4603      	mov	r3, r0
 8016b40:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016b42:	7dfb      	ldrb	r3, [r7, #23]
 8016b44:	4618      	mov	r0, r3
 8016b46:	f000 f853 	bl	8016bf0 <USBD_Get_USB_Status>
 8016b4a:	4603      	mov	r3, r0
 8016b4c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016b4e:	7dbb      	ldrb	r3, [r7, #22]
}
 8016b50:	4618      	mov	r0, r3
 8016b52:	3718      	adds	r7, #24
 8016b54:	46bd      	mov	sp, r7
 8016b56:	bd80      	pop	{r7, pc}

08016b58 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016b58:	b580      	push	{r7, lr}
 8016b5a:	b086      	sub	sp, #24
 8016b5c:	af00      	add	r7, sp, #0
 8016b5e:	60f8      	str	r0, [r7, #12]
 8016b60:	607a      	str	r2, [r7, #4]
 8016b62:	603b      	str	r3, [r7, #0]
 8016b64:	460b      	mov	r3, r1
 8016b66:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b68:	2300      	movs	r3, #0
 8016b6a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b6c:	2300      	movs	r3, #0
 8016b6e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016b70:	68fb      	ldr	r3, [r7, #12]
 8016b72:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016b76:	7af9      	ldrb	r1, [r7, #11]
 8016b78:	683b      	ldr	r3, [r7, #0]
 8016b7a:	687a      	ldr	r2, [r7, #4]
 8016b7c:	f7f2 f9a5 	bl	8008eca <HAL_PCD_EP_Receive>
 8016b80:	4603      	mov	r3, r0
 8016b82:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016b84:	7dfb      	ldrb	r3, [r7, #23]
 8016b86:	4618      	mov	r0, r3
 8016b88:	f000 f832 	bl	8016bf0 <USBD_Get_USB_Status>
 8016b8c:	4603      	mov	r3, r0
 8016b8e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016b90:	7dbb      	ldrb	r3, [r7, #22]
}
 8016b92:	4618      	mov	r0, r3
 8016b94:	3718      	adds	r7, #24
 8016b96:	46bd      	mov	sp, r7
 8016b98:	bd80      	pop	{r7, pc}

08016b9a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016b9a:	b580      	push	{r7, lr}
 8016b9c:	b082      	sub	sp, #8
 8016b9e:	af00      	add	r7, sp, #0
 8016ba0:	6078      	str	r0, [r7, #4]
 8016ba2:	460b      	mov	r3, r1
 8016ba4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016bac:	78fa      	ldrb	r2, [r7, #3]
 8016bae:	4611      	mov	r1, r2
 8016bb0:	4618      	mov	r0, r3
 8016bb2:	f7f2 f9c6 	bl	8008f42 <HAL_PCD_EP_GetRxCount>
 8016bb6:	4603      	mov	r3, r0
}
 8016bb8:	4618      	mov	r0, r3
 8016bba:	3708      	adds	r7, #8
 8016bbc:	46bd      	mov	sp, r7
 8016bbe:	bd80      	pop	{r7, pc}

08016bc0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016bc0:	b480      	push	{r7}
 8016bc2:	b083      	sub	sp, #12
 8016bc4:	af00      	add	r7, sp, #0
 8016bc6:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016bc8:	4b03      	ldr	r3, [pc, #12]	; (8016bd8 <USBD_static_malloc+0x18>)
}
 8016bca:	4618      	mov	r0, r3
 8016bcc:	370c      	adds	r7, #12
 8016bce:	46bd      	mov	sp, r7
 8016bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bd4:	4770      	bx	lr
 8016bd6:	bf00      	nop
 8016bd8:	2400301c 	.word	0x2400301c

08016bdc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016bdc:	b480      	push	{r7}
 8016bde:	b083      	sub	sp, #12
 8016be0:	af00      	add	r7, sp, #0
 8016be2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8016be4:	bf00      	nop
 8016be6:	370c      	adds	r7, #12
 8016be8:	46bd      	mov	sp, r7
 8016bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bee:	4770      	bx	lr

08016bf0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016bf0:	b480      	push	{r7}
 8016bf2:	b085      	sub	sp, #20
 8016bf4:	af00      	add	r7, sp, #0
 8016bf6:	4603      	mov	r3, r0
 8016bf8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016bfa:	2300      	movs	r3, #0
 8016bfc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016bfe:	79fb      	ldrb	r3, [r7, #7]
 8016c00:	2b03      	cmp	r3, #3
 8016c02:	d817      	bhi.n	8016c34 <USBD_Get_USB_Status+0x44>
 8016c04:	a201      	add	r2, pc, #4	; (adr r2, 8016c0c <USBD_Get_USB_Status+0x1c>)
 8016c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c0a:	bf00      	nop
 8016c0c:	08016c1d 	.word	0x08016c1d
 8016c10:	08016c23 	.word	0x08016c23
 8016c14:	08016c29 	.word	0x08016c29
 8016c18:	08016c2f 	.word	0x08016c2f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016c1c:	2300      	movs	r3, #0
 8016c1e:	73fb      	strb	r3, [r7, #15]
    break;
 8016c20:	e00b      	b.n	8016c3a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016c22:	2303      	movs	r3, #3
 8016c24:	73fb      	strb	r3, [r7, #15]
    break;
 8016c26:	e008      	b.n	8016c3a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016c28:	2301      	movs	r3, #1
 8016c2a:	73fb      	strb	r3, [r7, #15]
    break;
 8016c2c:	e005      	b.n	8016c3a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016c2e:	2303      	movs	r3, #3
 8016c30:	73fb      	strb	r3, [r7, #15]
    break;
 8016c32:	e002      	b.n	8016c3a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016c34:	2303      	movs	r3, #3
 8016c36:	73fb      	strb	r3, [r7, #15]
    break;
 8016c38:	bf00      	nop
  }
  return usb_status;
 8016c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8016c3c:	4618      	mov	r0, r3
 8016c3e:	3714      	adds	r7, #20
 8016c40:	46bd      	mov	sp, r7
 8016c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c46:	4770      	bx	lr

08016c48 <__errno>:
 8016c48:	4b01      	ldr	r3, [pc, #4]	; (8016c50 <__errno+0x8>)
 8016c4a:	6818      	ldr	r0, [r3, #0]
 8016c4c:	4770      	bx	lr
 8016c4e:	bf00      	nop
 8016c50:	24000100 	.word	0x24000100

08016c54 <__libc_init_array>:
 8016c54:	b570      	push	{r4, r5, r6, lr}
 8016c56:	4d0d      	ldr	r5, [pc, #52]	; (8016c8c <__libc_init_array+0x38>)
 8016c58:	4c0d      	ldr	r4, [pc, #52]	; (8016c90 <__libc_init_array+0x3c>)
 8016c5a:	1b64      	subs	r4, r4, r5
 8016c5c:	10a4      	asrs	r4, r4, #2
 8016c5e:	2600      	movs	r6, #0
 8016c60:	42a6      	cmp	r6, r4
 8016c62:	d109      	bne.n	8016c78 <__libc_init_array+0x24>
 8016c64:	4d0b      	ldr	r5, [pc, #44]	; (8016c94 <__libc_init_array+0x40>)
 8016c66:	4c0c      	ldr	r4, [pc, #48]	; (8016c98 <__libc_init_array+0x44>)
 8016c68:	f004 fe7e 	bl	801b968 <_init>
 8016c6c:	1b64      	subs	r4, r4, r5
 8016c6e:	10a4      	asrs	r4, r4, #2
 8016c70:	2600      	movs	r6, #0
 8016c72:	42a6      	cmp	r6, r4
 8016c74:	d105      	bne.n	8016c82 <__libc_init_array+0x2e>
 8016c76:	bd70      	pop	{r4, r5, r6, pc}
 8016c78:	f855 3b04 	ldr.w	r3, [r5], #4
 8016c7c:	4798      	blx	r3
 8016c7e:	3601      	adds	r6, #1
 8016c80:	e7ee      	b.n	8016c60 <__libc_init_array+0xc>
 8016c82:	f855 3b04 	ldr.w	r3, [r5], #4
 8016c86:	4798      	blx	r3
 8016c88:	3601      	adds	r6, #1
 8016c8a:	e7f2      	b.n	8016c72 <__libc_init_array+0x1e>
 8016c8c:	0801d908 	.word	0x0801d908
 8016c90:	0801d908 	.word	0x0801d908
 8016c94:	0801d908 	.word	0x0801d908
 8016c98:	0801d90c 	.word	0x0801d90c

08016c9c <memcpy>:
 8016c9c:	440a      	add	r2, r1
 8016c9e:	4291      	cmp	r1, r2
 8016ca0:	f100 33ff 	add.w	r3, r0, #4294967295
 8016ca4:	d100      	bne.n	8016ca8 <memcpy+0xc>
 8016ca6:	4770      	bx	lr
 8016ca8:	b510      	push	{r4, lr}
 8016caa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016cae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016cb2:	4291      	cmp	r1, r2
 8016cb4:	d1f9      	bne.n	8016caa <memcpy+0xe>
 8016cb6:	bd10      	pop	{r4, pc}

08016cb8 <memset>:
 8016cb8:	4402      	add	r2, r0
 8016cba:	4603      	mov	r3, r0
 8016cbc:	4293      	cmp	r3, r2
 8016cbe:	d100      	bne.n	8016cc2 <memset+0xa>
 8016cc0:	4770      	bx	lr
 8016cc2:	f803 1b01 	strb.w	r1, [r3], #1
 8016cc6:	e7f9      	b.n	8016cbc <memset+0x4>

08016cc8 <__cvt>:
 8016cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016cca:	ed2d 8b02 	vpush	{d8}
 8016cce:	eeb0 8b40 	vmov.f64	d8, d0
 8016cd2:	b085      	sub	sp, #20
 8016cd4:	4617      	mov	r7, r2
 8016cd6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8016cd8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8016cda:	ee18 2a90 	vmov	r2, s17
 8016cde:	f025 0520 	bic.w	r5, r5, #32
 8016ce2:	2a00      	cmp	r2, #0
 8016ce4:	bfb6      	itet	lt
 8016ce6:	222d      	movlt	r2, #45	; 0x2d
 8016ce8:	2200      	movge	r2, #0
 8016cea:	eeb1 8b40 	vneglt.f64	d8, d0
 8016cee:	2d46      	cmp	r5, #70	; 0x46
 8016cf0:	460c      	mov	r4, r1
 8016cf2:	701a      	strb	r2, [r3, #0]
 8016cf4:	d004      	beq.n	8016d00 <__cvt+0x38>
 8016cf6:	2d45      	cmp	r5, #69	; 0x45
 8016cf8:	d100      	bne.n	8016cfc <__cvt+0x34>
 8016cfa:	3401      	adds	r4, #1
 8016cfc:	2102      	movs	r1, #2
 8016cfe:	e000      	b.n	8016d02 <__cvt+0x3a>
 8016d00:	2103      	movs	r1, #3
 8016d02:	ab03      	add	r3, sp, #12
 8016d04:	9301      	str	r3, [sp, #4]
 8016d06:	ab02      	add	r3, sp, #8
 8016d08:	9300      	str	r3, [sp, #0]
 8016d0a:	4622      	mov	r2, r4
 8016d0c:	4633      	mov	r3, r6
 8016d0e:	eeb0 0b48 	vmov.f64	d0, d8
 8016d12:	f001 fd95 	bl	8018840 <_dtoa_r>
 8016d16:	2d47      	cmp	r5, #71	; 0x47
 8016d18:	d101      	bne.n	8016d1e <__cvt+0x56>
 8016d1a:	07fb      	lsls	r3, r7, #31
 8016d1c:	d51a      	bpl.n	8016d54 <__cvt+0x8c>
 8016d1e:	2d46      	cmp	r5, #70	; 0x46
 8016d20:	eb00 0204 	add.w	r2, r0, r4
 8016d24:	d10c      	bne.n	8016d40 <__cvt+0x78>
 8016d26:	7803      	ldrb	r3, [r0, #0]
 8016d28:	2b30      	cmp	r3, #48	; 0x30
 8016d2a:	d107      	bne.n	8016d3c <__cvt+0x74>
 8016d2c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8016d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d34:	bf1c      	itt	ne
 8016d36:	f1c4 0401 	rsbne	r4, r4, #1
 8016d3a:	6034      	strne	r4, [r6, #0]
 8016d3c:	6833      	ldr	r3, [r6, #0]
 8016d3e:	441a      	add	r2, r3
 8016d40:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8016d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d48:	bf08      	it	eq
 8016d4a:	9203      	streq	r2, [sp, #12]
 8016d4c:	2130      	movs	r1, #48	; 0x30
 8016d4e:	9b03      	ldr	r3, [sp, #12]
 8016d50:	4293      	cmp	r3, r2
 8016d52:	d307      	bcc.n	8016d64 <__cvt+0x9c>
 8016d54:	9b03      	ldr	r3, [sp, #12]
 8016d56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016d58:	1a1b      	subs	r3, r3, r0
 8016d5a:	6013      	str	r3, [r2, #0]
 8016d5c:	b005      	add	sp, #20
 8016d5e:	ecbd 8b02 	vpop	{d8}
 8016d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d64:	1c5c      	adds	r4, r3, #1
 8016d66:	9403      	str	r4, [sp, #12]
 8016d68:	7019      	strb	r1, [r3, #0]
 8016d6a:	e7f0      	b.n	8016d4e <__cvt+0x86>

08016d6c <__exponent>:
 8016d6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016d6e:	4603      	mov	r3, r0
 8016d70:	2900      	cmp	r1, #0
 8016d72:	bfb8      	it	lt
 8016d74:	4249      	neglt	r1, r1
 8016d76:	f803 2b02 	strb.w	r2, [r3], #2
 8016d7a:	bfb4      	ite	lt
 8016d7c:	222d      	movlt	r2, #45	; 0x2d
 8016d7e:	222b      	movge	r2, #43	; 0x2b
 8016d80:	2909      	cmp	r1, #9
 8016d82:	7042      	strb	r2, [r0, #1]
 8016d84:	dd2a      	ble.n	8016ddc <__exponent+0x70>
 8016d86:	f10d 0407 	add.w	r4, sp, #7
 8016d8a:	46a4      	mov	ip, r4
 8016d8c:	270a      	movs	r7, #10
 8016d8e:	46a6      	mov	lr, r4
 8016d90:	460a      	mov	r2, r1
 8016d92:	fb91 f6f7 	sdiv	r6, r1, r7
 8016d96:	fb07 1516 	mls	r5, r7, r6, r1
 8016d9a:	3530      	adds	r5, #48	; 0x30
 8016d9c:	2a63      	cmp	r2, #99	; 0x63
 8016d9e:	f104 34ff 	add.w	r4, r4, #4294967295
 8016da2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8016da6:	4631      	mov	r1, r6
 8016da8:	dcf1      	bgt.n	8016d8e <__exponent+0x22>
 8016daa:	3130      	adds	r1, #48	; 0x30
 8016dac:	f1ae 0502 	sub.w	r5, lr, #2
 8016db0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8016db4:	1c44      	adds	r4, r0, #1
 8016db6:	4629      	mov	r1, r5
 8016db8:	4561      	cmp	r1, ip
 8016dba:	d30a      	bcc.n	8016dd2 <__exponent+0x66>
 8016dbc:	f10d 0209 	add.w	r2, sp, #9
 8016dc0:	eba2 020e 	sub.w	r2, r2, lr
 8016dc4:	4565      	cmp	r5, ip
 8016dc6:	bf88      	it	hi
 8016dc8:	2200      	movhi	r2, #0
 8016dca:	4413      	add	r3, r2
 8016dcc:	1a18      	subs	r0, r3, r0
 8016dce:	b003      	add	sp, #12
 8016dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016dd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016dd6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8016dda:	e7ed      	b.n	8016db8 <__exponent+0x4c>
 8016ddc:	2330      	movs	r3, #48	; 0x30
 8016dde:	3130      	adds	r1, #48	; 0x30
 8016de0:	7083      	strb	r3, [r0, #2]
 8016de2:	70c1      	strb	r1, [r0, #3]
 8016de4:	1d03      	adds	r3, r0, #4
 8016de6:	e7f1      	b.n	8016dcc <__exponent+0x60>

08016de8 <_printf_float>:
 8016de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016dec:	b08b      	sub	sp, #44	; 0x2c
 8016dee:	460c      	mov	r4, r1
 8016df0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8016df4:	4616      	mov	r6, r2
 8016df6:	461f      	mov	r7, r3
 8016df8:	4605      	mov	r5, r0
 8016dfa:	f002 fdff 	bl	80199fc <_localeconv_r>
 8016dfe:	f8d0 b000 	ldr.w	fp, [r0]
 8016e02:	4658      	mov	r0, fp
 8016e04:	f7e9 fa8e 	bl	8000324 <strlen>
 8016e08:	2300      	movs	r3, #0
 8016e0a:	9308      	str	r3, [sp, #32]
 8016e0c:	f8d8 3000 	ldr.w	r3, [r8]
 8016e10:	f894 9018 	ldrb.w	r9, [r4, #24]
 8016e14:	6822      	ldr	r2, [r4, #0]
 8016e16:	3307      	adds	r3, #7
 8016e18:	f023 0307 	bic.w	r3, r3, #7
 8016e1c:	f103 0108 	add.w	r1, r3, #8
 8016e20:	f8c8 1000 	str.w	r1, [r8]
 8016e24:	4682      	mov	sl, r0
 8016e26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016e2a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8016e2e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8017090 <_printf_float+0x2a8>
 8016e32:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8016e36:	eeb0 6bc0 	vabs.f64	d6, d0
 8016e3a:	eeb4 6b47 	vcmp.f64	d6, d7
 8016e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e42:	dd24      	ble.n	8016e8e <_printf_float+0xa6>
 8016e44:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8016e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e4c:	d502      	bpl.n	8016e54 <_printf_float+0x6c>
 8016e4e:	232d      	movs	r3, #45	; 0x2d
 8016e50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016e54:	4b90      	ldr	r3, [pc, #576]	; (8017098 <_printf_float+0x2b0>)
 8016e56:	4891      	ldr	r0, [pc, #580]	; (801709c <_printf_float+0x2b4>)
 8016e58:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8016e5c:	bf94      	ite	ls
 8016e5e:	4698      	movls	r8, r3
 8016e60:	4680      	movhi	r8, r0
 8016e62:	2303      	movs	r3, #3
 8016e64:	6123      	str	r3, [r4, #16]
 8016e66:	f022 0204 	bic.w	r2, r2, #4
 8016e6a:	2300      	movs	r3, #0
 8016e6c:	6022      	str	r2, [r4, #0]
 8016e6e:	9304      	str	r3, [sp, #16]
 8016e70:	9700      	str	r7, [sp, #0]
 8016e72:	4633      	mov	r3, r6
 8016e74:	aa09      	add	r2, sp, #36	; 0x24
 8016e76:	4621      	mov	r1, r4
 8016e78:	4628      	mov	r0, r5
 8016e7a:	f000 f9d3 	bl	8017224 <_printf_common>
 8016e7e:	3001      	adds	r0, #1
 8016e80:	f040 808a 	bne.w	8016f98 <_printf_float+0x1b0>
 8016e84:	f04f 30ff 	mov.w	r0, #4294967295
 8016e88:	b00b      	add	sp, #44	; 0x2c
 8016e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e8e:	eeb4 0b40 	vcmp.f64	d0, d0
 8016e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e96:	d709      	bvc.n	8016eac <_printf_float+0xc4>
 8016e98:	ee10 3a90 	vmov	r3, s1
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	bfbc      	itt	lt
 8016ea0:	232d      	movlt	r3, #45	; 0x2d
 8016ea2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8016ea6:	487e      	ldr	r0, [pc, #504]	; (80170a0 <_printf_float+0x2b8>)
 8016ea8:	4b7e      	ldr	r3, [pc, #504]	; (80170a4 <_printf_float+0x2bc>)
 8016eaa:	e7d5      	b.n	8016e58 <_printf_float+0x70>
 8016eac:	6863      	ldr	r3, [r4, #4]
 8016eae:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8016eb2:	9104      	str	r1, [sp, #16]
 8016eb4:	1c59      	adds	r1, r3, #1
 8016eb6:	d13c      	bne.n	8016f32 <_printf_float+0x14a>
 8016eb8:	2306      	movs	r3, #6
 8016eba:	6063      	str	r3, [r4, #4]
 8016ebc:	2300      	movs	r3, #0
 8016ebe:	9303      	str	r3, [sp, #12]
 8016ec0:	ab08      	add	r3, sp, #32
 8016ec2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8016ec6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8016eca:	ab07      	add	r3, sp, #28
 8016ecc:	6861      	ldr	r1, [r4, #4]
 8016ece:	9300      	str	r3, [sp, #0]
 8016ed0:	6022      	str	r2, [r4, #0]
 8016ed2:	f10d 031b 	add.w	r3, sp, #27
 8016ed6:	4628      	mov	r0, r5
 8016ed8:	f7ff fef6 	bl	8016cc8 <__cvt>
 8016edc:	9b04      	ldr	r3, [sp, #16]
 8016ede:	9907      	ldr	r1, [sp, #28]
 8016ee0:	2b47      	cmp	r3, #71	; 0x47
 8016ee2:	4680      	mov	r8, r0
 8016ee4:	d108      	bne.n	8016ef8 <_printf_float+0x110>
 8016ee6:	1cc8      	adds	r0, r1, #3
 8016ee8:	db02      	blt.n	8016ef0 <_printf_float+0x108>
 8016eea:	6863      	ldr	r3, [r4, #4]
 8016eec:	4299      	cmp	r1, r3
 8016eee:	dd41      	ble.n	8016f74 <_printf_float+0x18c>
 8016ef0:	f1a9 0902 	sub.w	r9, r9, #2
 8016ef4:	fa5f f989 	uxtb.w	r9, r9
 8016ef8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8016efc:	d820      	bhi.n	8016f40 <_printf_float+0x158>
 8016efe:	3901      	subs	r1, #1
 8016f00:	464a      	mov	r2, r9
 8016f02:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016f06:	9107      	str	r1, [sp, #28]
 8016f08:	f7ff ff30 	bl	8016d6c <__exponent>
 8016f0c:	9a08      	ldr	r2, [sp, #32]
 8016f0e:	9004      	str	r0, [sp, #16]
 8016f10:	1813      	adds	r3, r2, r0
 8016f12:	2a01      	cmp	r2, #1
 8016f14:	6123      	str	r3, [r4, #16]
 8016f16:	dc02      	bgt.n	8016f1e <_printf_float+0x136>
 8016f18:	6822      	ldr	r2, [r4, #0]
 8016f1a:	07d2      	lsls	r2, r2, #31
 8016f1c:	d501      	bpl.n	8016f22 <_printf_float+0x13a>
 8016f1e:	3301      	adds	r3, #1
 8016f20:	6123      	str	r3, [r4, #16]
 8016f22:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	d0a2      	beq.n	8016e70 <_printf_float+0x88>
 8016f2a:	232d      	movs	r3, #45	; 0x2d
 8016f2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016f30:	e79e      	b.n	8016e70 <_printf_float+0x88>
 8016f32:	9904      	ldr	r1, [sp, #16]
 8016f34:	2947      	cmp	r1, #71	; 0x47
 8016f36:	d1c1      	bne.n	8016ebc <_printf_float+0xd4>
 8016f38:	2b00      	cmp	r3, #0
 8016f3a:	d1bf      	bne.n	8016ebc <_printf_float+0xd4>
 8016f3c:	2301      	movs	r3, #1
 8016f3e:	e7bc      	b.n	8016eba <_printf_float+0xd2>
 8016f40:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8016f44:	d118      	bne.n	8016f78 <_printf_float+0x190>
 8016f46:	2900      	cmp	r1, #0
 8016f48:	6863      	ldr	r3, [r4, #4]
 8016f4a:	dd0b      	ble.n	8016f64 <_printf_float+0x17c>
 8016f4c:	6121      	str	r1, [r4, #16]
 8016f4e:	b913      	cbnz	r3, 8016f56 <_printf_float+0x16e>
 8016f50:	6822      	ldr	r2, [r4, #0]
 8016f52:	07d0      	lsls	r0, r2, #31
 8016f54:	d502      	bpl.n	8016f5c <_printf_float+0x174>
 8016f56:	3301      	adds	r3, #1
 8016f58:	440b      	add	r3, r1
 8016f5a:	6123      	str	r3, [r4, #16]
 8016f5c:	2300      	movs	r3, #0
 8016f5e:	65a1      	str	r1, [r4, #88]	; 0x58
 8016f60:	9304      	str	r3, [sp, #16]
 8016f62:	e7de      	b.n	8016f22 <_printf_float+0x13a>
 8016f64:	b913      	cbnz	r3, 8016f6c <_printf_float+0x184>
 8016f66:	6822      	ldr	r2, [r4, #0]
 8016f68:	07d2      	lsls	r2, r2, #31
 8016f6a:	d501      	bpl.n	8016f70 <_printf_float+0x188>
 8016f6c:	3302      	adds	r3, #2
 8016f6e:	e7f4      	b.n	8016f5a <_printf_float+0x172>
 8016f70:	2301      	movs	r3, #1
 8016f72:	e7f2      	b.n	8016f5a <_printf_float+0x172>
 8016f74:	f04f 0967 	mov.w	r9, #103	; 0x67
 8016f78:	9b08      	ldr	r3, [sp, #32]
 8016f7a:	4299      	cmp	r1, r3
 8016f7c:	db05      	blt.n	8016f8a <_printf_float+0x1a2>
 8016f7e:	6823      	ldr	r3, [r4, #0]
 8016f80:	6121      	str	r1, [r4, #16]
 8016f82:	07d8      	lsls	r0, r3, #31
 8016f84:	d5ea      	bpl.n	8016f5c <_printf_float+0x174>
 8016f86:	1c4b      	adds	r3, r1, #1
 8016f88:	e7e7      	b.n	8016f5a <_printf_float+0x172>
 8016f8a:	2900      	cmp	r1, #0
 8016f8c:	bfd4      	ite	le
 8016f8e:	f1c1 0202 	rsble	r2, r1, #2
 8016f92:	2201      	movgt	r2, #1
 8016f94:	4413      	add	r3, r2
 8016f96:	e7e0      	b.n	8016f5a <_printf_float+0x172>
 8016f98:	6823      	ldr	r3, [r4, #0]
 8016f9a:	055a      	lsls	r2, r3, #21
 8016f9c:	d407      	bmi.n	8016fae <_printf_float+0x1c6>
 8016f9e:	6923      	ldr	r3, [r4, #16]
 8016fa0:	4642      	mov	r2, r8
 8016fa2:	4631      	mov	r1, r6
 8016fa4:	4628      	mov	r0, r5
 8016fa6:	47b8      	blx	r7
 8016fa8:	3001      	adds	r0, #1
 8016faa:	d12a      	bne.n	8017002 <_printf_float+0x21a>
 8016fac:	e76a      	b.n	8016e84 <_printf_float+0x9c>
 8016fae:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8016fb2:	f240 80e2 	bls.w	801717a <_printf_float+0x392>
 8016fb6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8016fba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fc2:	d133      	bne.n	801702c <_printf_float+0x244>
 8016fc4:	4a38      	ldr	r2, [pc, #224]	; (80170a8 <_printf_float+0x2c0>)
 8016fc6:	2301      	movs	r3, #1
 8016fc8:	4631      	mov	r1, r6
 8016fca:	4628      	mov	r0, r5
 8016fcc:	47b8      	blx	r7
 8016fce:	3001      	adds	r0, #1
 8016fd0:	f43f af58 	beq.w	8016e84 <_printf_float+0x9c>
 8016fd4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8016fd8:	429a      	cmp	r2, r3
 8016fda:	db02      	blt.n	8016fe2 <_printf_float+0x1fa>
 8016fdc:	6823      	ldr	r3, [r4, #0]
 8016fde:	07d8      	lsls	r0, r3, #31
 8016fe0:	d50f      	bpl.n	8017002 <_printf_float+0x21a>
 8016fe2:	4653      	mov	r3, sl
 8016fe4:	465a      	mov	r2, fp
 8016fe6:	4631      	mov	r1, r6
 8016fe8:	4628      	mov	r0, r5
 8016fea:	47b8      	blx	r7
 8016fec:	3001      	adds	r0, #1
 8016fee:	f43f af49 	beq.w	8016e84 <_printf_float+0x9c>
 8016ff2:	f04f 0800 	mov.w	r8, #0
 8016ff6:	f104 091a 	add.w	r9, r4, #26
 8016ffa:	9b08      	ldr	r3, [sp, #32]
 8016ffc:	3b01      	subs	r3, #1
 8016ffe:	4543      	cmp	r3, r8
 8017000:	dc09      	bgt.n	8017016 <_printf_float+0x22e>
 8017002:	6823      	ldr	r3, [r4, #0]
 8017004:	079b      	lsls	r3, r3, #30
 8017006:	f100 8108 	bmi.w	801721a <_printf_float+0x432>
 801700a:	68e0      	ldr	r0, [r4, #12]
 801700c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801700e:	4298      	cmp	r0, r3
 8017010:	bfb8      	it	lt
 8017012:	4618      	movlt	r0, r3
 8017014:	e738      	b.n	8016e88 <_printf_float+0xa0>
 8017016:	2301      	movs	r3, #1
 8017018:	464a      	mov	r2, r9
 801701a:	4631      	mov	r1, r6
 801701c:	4628      	mov	r0, r5
 801701e:	47b8      	blx	r7
 8017020:	3001      	adds	r0, #1
 8017022:	f43f af2f 	beq.w	8016e84 <_printf_float+0x9c>
 8017026:	f108 0801 	add.w	r8, r8, #1
 801702a:	e7e6      	b.n	8016ffa <_printf_float+0x212>
 801702c:	9b07      	ldr	r3, [sp, #28]
 801702e:	2b00      	cmp	r3, #0
 8017030:	dc3c      	bgt.n	80170ac <_printf_float+0x2c4>
 8017032:	4a1d      	ldr	r2, [pc, #116]	; (80170a8 <_printf_float+0x2c0>)
 8017034:	2301      	movs	r3, #1
 8017036:	4631      	mov	r1, r6
 8017038:	4628      	mov	r0, r5
 801703a:	47b8      	blx	r7
 801703c:	3001      	adds	r0, #1
 801703e:	f43f af21 	beq.w	8016e84 <_printf_float+0x9c>
 8017042:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8017046:	4313      	orrs	r3, r2
 8017048:	d102      	bne.n	8017050 <_printf_float+0x268>
 801704a:	6823      	ldr	r3, [r4, #0]
 801704c:	07d9      	lsls	r1, r3, #31
 801704e:	d5d8      	bpl.n	8017002 <_printf_float+0x21a>
 8017050:	4653      	mov	r3, sl
 8017052:	465a      	mov	r2, fp
 8017054:	4631      	mov	r1, r6
 8017056:	4628      	mov	r0, r5
 8017058:	47b8      	blx	r7
 801705a:	3001      	adds	r0, #1
 801705c:	f43f af12 	beq.w	8016e84 <_printf_float+0x9c>
 8017060:	f04f 0900 	mov.w	r9, #0
 8017064:	f104 0a1a 	add.w	sl, r4, #26
 8017068:	9b07      	ldr	r3, [sp, #28]
 801706a:	425b      	negs	r3, r3
 801706c:	454b      	cmp	r3, r9
 801706e:	dc01      	bgt.n	8017074 <_printf_float+0x28c>
 8017070:	9b08      	ldr	r3, [sp, #32]
 8017072:	e795      	b.n	8016fa0 <_printf_float+0x1b8>
 8017074:	2301      	movs	r3, #1
 8017076:	4652      	mov	r2, sl
 8017078:	4631      	mov	r1, r6
 801707a:	4628      	mov	r0, r5
 801707c:	47b8      	blx	r7
 801707e:	3001      	adds	r0, #1
 8017080:	f43f af00 	beq.w	8016e84 <_printf_float+0x9c>
 8017084:	f109 0901 	add.w	r9, r9, #1
 8017088:	e7ee      	b.n	8017068 <_printf_float+0x280>
 801708a:	bf00      	nop
 801708c:	f3af 8000 	nop.w
 8017090:	ffffffff 	.word	0xffffffff
 8017094:	7fefffff 	.word	0x7fefffff
 8017098:	0801bba0 	.word	0x0801bba0
 801709c:	0801bba4 	.word	0x0801bba4
 80170a0:	0801bbac 	.word	0x0801bbac
 80170a4:	0801bba8 	.word	0x0801bba8
 80170a8:	0801bbb0 	.word	0x0801bbb0
 80170ac:	9a08      	ldr	r2, [sp, #32]
 80170ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80170b0:	429a      	cmp	r2, r3
 80170b2:	bfa8      	it	ge
 80170b4:	461a      	movge	r2, r3
 80170b6:	2a00      	cmp	r2, #0
 80170b8:	4691      	mov	r9, r2
 80170ba:	dc38      	bgt.n	801712e <_printf_float+0x346>
 80170bc:	2300      	movs	r3, #0
 80170be:	9305      	str	r3, [sp, #20]
 80170c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80170c4:	f104 021a 	add.w	r2, r4, #26
 80170c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80170ca:	9905      	ldr	r1, [sp, #20]
 80170cc:	9304      	str	r3, [sp, #16]
 80170ce:	eba3 0309 	sub.w	r3, r3, r9
 80170d2:	428b      	cmp	r3, r1
 80170d4:	dc33      	bgt.n	801713e <_printf_float+0x356>
 80170d6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80170da:	429a      	cmp	r2, r3
 80170dc:	db3c      	blt.n	8017158 <_printf_float+0x370>
 80170de:	6823      	ldr	r3, [r4, #0]
 80170e0:	07da      	lsls	r2, r3, #31
 80170e2:	d439      	bmi.n	8017158 <_printf_float+0x370>
 80170e4:	9b08      	ldr	r3, [sp, #32]
 80170e6:	9a04      	ldr	r2, [sp, #16]
 80170e8:	9907      	ldr	r1, [sp, #28]
 80170ea:	1a9a      	subs	r2, r3, r2
 80170ec:	eba3 0901 	sub.w	r9, r3, r1
 80170f0:	4591      	cmp	r9, r2
 80170f2:	bfa8      	it	ge
 80170f4:	4691      	movge	r9, r2
 80170f6:	f1b9 0f00 	cmp.w	r9, #0
 80170fa:	dc35      	bgt.n	8017168 <_printf_float+0x380>
 80170fc:	f04f 0800 	mov.w	r8, #0
 8017100:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017104:	f104 0a1a 	add.w	sl, r4, #26
 8017108:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801710c:	1a9b      	subs	r3, r3, r2
 801710e:	eba3 0309 	sub.w	r3, r3, r9
 8017112:	4543      	cmp	r3, r8
 8017114:	f77f af75 	ble.w	8017002 <_printf_float+0x21a>
 8017118:	2301      	movs	r3, #1
 801711a:	4652      	mov	r2, sl
 801711c:	4631      	mov	r1, r6
 801711e:	4628      	mov	r0, r5
 8017120:	47b8      	blx	r7
 8017122:	3001      	adds	r0, #1
 8017124:	f43f aeae 	beq.w	8016e84 <_printf_float+0x9c>
 8017128:	f108 0801 	add.w	r8, r8, #1
 801712c:	e7ec      	b.n	8017108 <_printf_float+0x320>
 801712e:	4613      	mov	r3, r2
 8017130:	4631      	mov	r1, r6
 8017132:	4642      	mov	r2, r8
 8017134:	4628      	mov	r0, r5
 8017136:	47b8      	blx	r7
 8017138:	3001      	adds	r0, #1
 801713a:	d1bf      	bne.n	80170bc <_printf_float+0x2d4>
 801713c:	e6a2      	b.n	8016e84 <_printf_float+0x9c>
 801713e:	2301      	movs	r3, #1
 8017140:	4631      	mov	r1, r6
 8017142:	4628      	mov	r0, r5
 8017144:	9204      	str	r2, [sp, #16]
 8017146:	47b8      	blx	r7
 8017148:	3001      	adds	r0, #1
 801714a:	f43f ae9b 	beq.w	8016e84 <_printf_float+0x9c>
 801714e:	9b05      	ldr	r3, [sp, #20]
 8017150:	9a04      	ldr	r2, [sp, #16]
 8017152:	3301      	adds	r3, #1
 8017154:	9305      	str	r3, [sp, #20]
 8017156:	e7b7      	b.n	80170c8 <_printf_float+0x2e0>
 8017158:	4653      	mov	r3, sl
 801715a:	465a      	mov	r2, fp
 801715c:	4631      	mov	r1, r6
 801715e:	4628      	mov	r0, r5
 8017160:	47b8      	blx	r7
 8017162:	3001      	adds	r0, #1
 8017164:	d1be      	bne.n	80170e4 <_printf_float+0x2fc>
 8017166:	e68d      	b.n	8016e84 <_printf_float+0x9c>
 8017168:	9a04      	ldr	r2, [sp, #16]
 801716a:	464b      	mov	r3, r9
 801716c:	4442      	add	r2, r8
 801716e:	4631      	mov	r1, r6
 8017170:	4628      	mov	r0, r5
 8017172:	47b8      	blx	r7
 8017174:	3001      	adds	r0, #1
 8017176:	d1c1      	bne.n	80170fc <_printf_float+0x314>
 8017178:	e684      	b.n	8016e84 <_printf_float+0x9c>
 801717a:	9a08      	ldr	r2, [sp, #32]
 801717c:	2a01      	cmp	r2, #1
 801717e:	dc01      	bgt.n	8017184 <_printf_float+0x39c>
 8017180:	07db      	lsls	r3, r3, #31
 8017182:	d537      	bpl.n	80171f4 <_printf_float+0x40c>
 8017184:	2301      	movs	r3, #1
 8017186:	4642      	mov	r2, r8
 8017188:	4631      	mov	r1, r6
 801718a:	4628      	mov	r0, r5
 801718c:	47b8      	blx	r7
 801718e:	3001      	adds	r0, #1
 8017190:	f43f ae78 	beq.w	8016e84 <_printf_float+0x9c>
 8017194:	4653      	mov	r3, sl
 8017196:	465a      	mov	r2, fp
 8017198:	4631      	mov	r1, r6
 801719a:	4628      	mov	r0, r5
 801719c:	47b8      	blx	r7
 801719e:	3001      	adds	r0, #1
 80171a0:	f43f ae70 	beq.w	8016e84 <_printf_float+0x9c>
 80171a4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80171a8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80171ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171b0:	d01b      	beq.n	80171ea <_printf_float+0x402>
 80171b2:	9b08      	ldr	r3, [sp, #32]
 80171b4:	f108 0201 	add.w	r2, r8, #1
 80171b8:	3b01      	subs	r3, #1
 80171ba:	4631      	mov	r1, r6
 80171bc:	4628      	mov	r0, r5
 80171be:	47b8      	blx	r7
 80171c0:	3001      	adds	r0, #1
 80171c2:	d10e      	bne.n	80171e2 <_printf_float+0x3fa>
 80171c4:	e65e      	b.n	8016e84 <_printf_float+0x9c>
 80171c6:	2301      	movs	r3, #1
 80171c8:	464a      	mov	r2, r9
 80171ca:	4631      	mov	r1, r6
 80171cc:	4628      	mov	r0, r5
 80171ce:	47b8      	blx	r7
 80171d0:	3001      	adds	r0, #1
 80171d2:	f43f ae57 	beq.w	8016e84 <_printf_float+0x9c>
 80171d6:	f108 0801 	add.w	r8, r8, #1
 80171da:	9b08      	ldr	r3, [sp, #32]
 80171dc:	3b01      	subs	r3, #1
 80171de:	4543      	cmp	r3, r8
 80171e0:	dcf1      	bgt.n	80171c6 <_printf_float+0x3de>
 80171e2:	9b04      	ldr	r3, [sp, #16]
 80171e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80171e8:	e6db      	b.n	8016fa2 <_printf_float+0x1ba>
 80171ea:	f04f 0800 	mov.w	r8, #0
 80171ee:	f104 091a 	add.w	r9, r4, #26
 80171f2:	e7f2      	b.n	80171da <_printf_float+0x3f2>
 80171f4:	2301      	movs	r3, #1
 80171f6:	4642      	mov	r2, r8
 80171f8:	e7df      	b.n	80171ba <_printf_float+0x3d2>
 80171fa:	2301      	movs	r3, #1
 80171fc:	464a      	mov	r2, r9
 80171fe:	4631      	mov	r1, r6
 8017200:	4628      	mov	r0, r5
 8017202:	47b8      	blx	r7
 8017204:	3001      	adds	r0, #1
 8017206:	f43f ae3d 	beq.w	8016e84 <_printf_float+0x9c>
 801720a:	f108 0801 	add.w	r8, r8, #1
 801720e:	68e3      	ldr	r3, [r4, #12]
 8017210:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017212:	1a5b      	subs	r3, r3, r1
 8017214:	4543      	cmp	r3, r8
 8017216:	dcf0      	bgt.n	80171fa <_printf_float+0x412>
 8017218:	e6f7      	b.n	801700a <_printf_float+0x222>
 801721a:	f04f 0800 	mov.w	r8, #0
 801721e:	f104 0919 	add.w	r9, r4, #25
 8017222:	e7f4      	b.n	801720e <_printf_float+0x426>

08017224 <_printf_common>:
 8017224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017228:	4616      	mov	r6, r2
 801722a:	4699      	mov	r9, r3
 801722c:	688a      	ldr	r2, [r1, #8]
 801722e:	690b      	ldr	r3, [r1, #16]
 8017230:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017234:	4293      	cmp	r3, r2
 8017236:	bfb8      	it	lt
 8017238:	4613      	movlt	r3, r2
 801723a:	6033      	str	r3, [r6, #0]
 801723c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017240:	4607      	mov	r7, r0
 8017242:	460c      	mov	r4, r1
 8017244:	b10a      	cbz	r2, 801724a <_printf_common+0x26>
 8017246:	3301      	adds	r3, #1
 8017248:	6033      	str	r3, [r6, #0]
 801724a:	6823      	ldr	r3, [r4, #0]
 801724c:	0699      	lsls	r1, r3, #26
 801724e:	bf42      	ittt	mi
 8017250:	6833      	ldrmi	r3, [r6, #0]
 8017252:	3302      	addmi	r3, #2
 8017254:	6033      	strmi	r3, [r6, #0]
 8017256:	6825      	ldr	r5, [r4, #0]
 8017258:	f015 0506 	ands.w	r5, r5, #6
 801725c:	d106      	bne.n	801726c <_printf_common+0x48>
 801725e:	f104 0a19 	add.w	sl, r4, #25
 8017262:	68e3      	ldr	r3, [r4, #12]
 8017264:	6832      	ldr	r2, [r6, #0]
 8017266:	1a9b      	subs	r3, r3, r2
 8017268:	42ab      	cmp	r3, r5
 801726a:	dc26      	bgt.n	80172ba <_printf_common+0x96>
 801726c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017270:	1e13      	subs	r3, r2, #0
 8017272:	6822      	ldr	r2, [r4, #0]
 8017274:	bf18      	it	ne
 8017276:	2301      	movne	r3, #1
 8017278:	0692      	lsls	r2, r2, #26
 801727a:	d42b      	bmi.n	80172d4 <_printf_common+0xb0>
 801727c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017280:	4649      	mov	r1, r9
 8017282:	4638      	mov	r0, r7
 8017284:	47c0      	blx	r8
 8017286:	3001      	adds	r0, #1
 8017288:	d01e      	beq.n	80172c8 <_printf_common+0xa4>
 801728a:	6823      	ldr	r3, [r4, #0]
 801728c:	68e5      	ldr	r5, [r4, #12]
 801728e:	6832      	ldr	r2, [r6, #0]
 8017290:	f003 0306 	and.w	r3, r3, #6
 8017294:	2b04      	cmp	r3, #4
 8017296:	bf08      	it	eq
 8017298:	1aad      	subeq	r5, r5, r2
 801729a:	68a3      	ldr	r3, [r4, #8]
 801729c:	6922      	ldr	r2, [r4, #16]
 801729e:	bf0c      	ite	eq
 80172a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80172a4:	2500      	movne	r5, #0
 80172a6:	4293      	cmp	r3, r2
 80172a8:	bfc4      	itt	gt
 80172aa:	1a9b      	subgt	r3, r3, r2
 80172ac:	18ed      	addgt	r5, r5, r3
 80172ae:	2600      	movs	r6, #0
 80172b0:	341a      	adds	r4, #26
 80172b2:	42b5      	cmp	r5, r6
 80172b4:	d11a      	bne.n	80172ec <_printf_common+0xc8>
 80172b6:	2000      	movs	r0, #0
 80172b8:	e008      	b.n	80172cc <_printf_common+0xa8>
 80172ba:	2301      	movs	r3, #1
 80172bc:	4652      	mov	r2, sl
 80172be:	4649      	mov	r1, r9
 80172c0:	4638      	mov	r0, r7
 80172c2:	47c0      	blx	r8
 80172c4:	3001      	adds	r0, #1
 80172c6:	d103      	bne.n	80172d0 <_printf_common+0xac>
 80172c8:	f04f 30ff 	mov.w	r0, #4294967295
 80172cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80172d0:	3501      	adds	r5, #1
 80172d2:	e7c6      	b.n	8017262 <_printf_common+0x3e>
 80172d4:	18e1      	adds	r1, r4, r3
 80172d6:	1c5a      	adds	r2, r3, #1
 80172d8:	2030      	movs	r0, #48	; 0x30
 80172da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80172de:	4422      	add	r2, r4
 80172e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80172e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80172e8:	3302      	adds	r3, #2
 80172ea:	e7c7      	b.n	801727c <_printf_common+0x58>
 80172ec:	2301      	movs	r3, #1
 80172ee:	4622      	mov	r2, r4
 80172f0:	4649      	mov	r1, r9
 80172f2:	4638      	mov	r0, r7
 80172f4:	47c0      	blx	r8
 80172f6:	3001      	adds	r0, #1
 80172f8:	d0e6      	beq.n	80172c8 <_printf_common+0xa4>
 80172fa:	3601      	adds	r6, #1
 80172fc:	e7d9      	b.n	80172b2 <_printf_common+0x8e>
	...

08017300 <_printf_i>:
 8017300:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017304:	7e0f      	ldrb	r7, [r1, #24]
 8017306:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017308:	2f78      	cmp	r7, #120	; 0x78
 801730a:	4691      	mov	r9, r2
 801730c:	4680      	mov	r8, r0
 801730e:	460c      	mov	r4, r1
 8017310:	469a      	mov	sl, r3
 8017312:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017316:	d807      	bhi.n	8017328 <_printf_i+0x28>
 8017318:	2f62      	cmp	r7, #98	; 0x62
 801731a:	d80a      	bhi.n	8017332 <_printf_i+0x32>
 801731c:	2f00      	cmp	r7, #0
 801731e:	f000 80d8 	beq.w	80174d2 <_printf_i+0x1d2>
 8017322:	2f58      	cmp	r7, #88	; 0x58
 8017324:	f000 80a3 	beq.w	801746e <_printf_i+0x16e>
 8017328:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801732c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017330:	e03a      	b.n	80173a8 <_printf_i+0xa8>
 8017332:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017336:	2b15      	cmp	r3, #21
 8017338:	d8f6      	bhi.n	8017328 <_printf_i+0x28>
 801733a:	a101      	add	r1, pc, #4	; (adr r1, 8017340 <_printf_i+0x40>)
 801733c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017340:	08017399 	.word	0x08017399
 8017344:	080173ad 	.word	0x080173ad
 8017348:	08017329 	.word	0x08017329
 801734c:	08017329 	.word	0x08017329
 8017350:	08017329 	.word	0x08017329
 8017354:	08017329 	.word	0x08017329
 8017358:	080173ad 	.word	0x080173ad
 801735c:	08017329 	.word	0x08017329
 8017360:	08017329 	.word	0x08017329
 8017364:	08017329 	.word	0x08017329
 8017368:	08017329 	.word	0x08017329
 801736c:	080174b9 	.word	0x080174b9
 8017370:	080173dd 	.word	0x080173dd
 8017374:	0801749b 	.word	0x0801749b
 8017378:	08017329 	.word	0x08017329
 801737c:	08017329 	.word	0x08017329
 8017380:	080174db 	.word	0x080174db
 8017384:	08017329 	.word	0x08017329
 8017388:	080173dd 	.word	0x080173dd
 801738c:	08017329 	.word	0x08017329
 8017390:	08017329 	.word	0x08017329
 8017394:	080174a3 	.word	0x080174a3
 8017398:	682b      	ldr	r3, [r5, #0]
 801739a:	1d1a      	adds	r2, r3, #4
 801739c:	681b      	ldr	r3, [r3, #0]
 801739e:	602a      	str	r2, [r5, #0]
 80173a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80173a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80173a8:	2301      	movs	r3, #1
 80173aa:	e0a3      	b.n	80174f4 <_printf_i+0x1f4>
 80173ac:	6820      	ldr	r0, [r4, #0]
 80173ae:	6829      	ldr	r1, [r5, #0]
 80173b0:	0606      	lsls	r6, r0, #24
 80173b2:	f101 0304 	add.w	r3, r1, #4
 80173b6:	d50a      	bpl.n	80173ce <_printf_i+0xce>
 80173b8:	680e      	ldr	r6, [r1, #0]
 80173ba:	602b      	str	r3, [r5, #0]
 80173bc:	2e00      	cmp	r6, #0
 80173be:	da03      	bge.n	80173c8 <_printf_i+0xc8>
 80173c0:	232d      	movs	r3, #45	; 0x2d
 80173c2:	4276      	negs	r6, r6
 80173c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80173c8:	485e      	ldr	r0, [pc, #376]	; (8017544 <_printf_i+0x244>)
 80173ca:	230a      	movs	r3, #10
 80173cc:	e019      	b.n	8017402 <_printf_i+0x102>
 80173ce:	680e      	ldr	r6, [r1, #0]
 80173d0:	602b      	str	r3, [r5, #0]
 80173d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80173d6:	bf18      	it	ne
 80173d8:	b236      	sxthne	r6, r6
 80173da:	e7ef      	b.n	80173bc <_printf_i+0xbc>
 80173dc:	682b      	ldr	r3, [r5, #0]
 80173de:	6820      	ldr	r0, [r4, #0]
 80173e0:	1d19      	adds	r1, r3, #4
 80173e2:	6029      	str	r1, [r5, #0]
 80173e4:	0601      	lsls	r1, r0, #24
 80173e6:	d501      	bpl.n	80173ec <_printf_i+0xec>
 80173e8:	681e      	ldr	r6, [r3, #0]
 80173ea:	e002      	b.n	80173f2 <_printf_i+0xf2>
 80173ec:	0646      	lsls	r6, r0, #25
 80173ee:	d5fb      	bpl.n	80173e8 <_printf_i+0xe8>
 80173f0:	881e      	ldrh	r6, [r3, #0]
 80173f2:	4854      	ldr	r0, [pc, #336]	; (8017544 <_printf_i+0x244>)
 80173f4:	2f6f      	cmp	r7, #111	; 0x6f
 80173f6:	bf0c      	ite	eq
 80173f8:	2308      	moveq	r3, #8
 80173fa:	230a      	movne	r3, #10
 80173fc:	2100      	movs	r1, #0
 80173fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017402:	6865      	ldr	r5, [r4, #4]
 8017404:	60a5      	str	r5, [r4, #8]
 8017406:	2d00      	cmp	r5, #0
 8017408:	bfa2      	ittt	ge
 801740a:	6821      	ldrge	r1, [r4, #0]
 801740c:	f021 0104 	bicge.w	r1, r1, #4
 8017410:	6021      	strge	r1, [r4, #0]
 8017412:	b90e      	cbnz	r6, 8017418 <_printf_i+0x118>
 8017414:	2d00      	cmp	r5, #0
 8017416:	d04d      	beq.n	80174b4 <_printf_i+0x1b4>
 8017418:	4615      	mov	r5, r2
 801741a:	fbb6 f1f3 	udiv	r1, r6, r3
 801741e:	fb03 6711 	mls	r7, r3, r1, r6
 8017422:	5dc7      	ldrb	r7, [r0, r7]
 8017424:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017428:	4637      	mov	r7, r6
 801742a:	42bb      	cmp	r3, r7
 801742c:	460e      	mov	r6, r1
 801742e:	d9f4      	bls.n	801741a <_printf_i+0x11a>
 8017430:	2b08      	cmp	r3, #8
 8017432:	d10b      	bne.n	801744c <_printf_i+0x14c>
 8017434:	6823      	ldr	r3, [r4, #0]
 8017436:	07de      	lsls	r6, r3, #31
 8017438:	d508      	bpl.n	801744c <_printf_i+0x14c>
 801743a:	6923      	ldr	r3, [r4, #16]
 801743c:	6861      	ldr	r1, [r4, #4]
 801743e:	4299      	cmp	r1, r3
 8017440:	bfde      	ittt	le
 8017442:	2330      	movle	r3, #48	; 0x30
 8017444:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017448:	f105 35ff 	addle.w	r5, r5, #4294967295
 801744c:	1b52      	subs	r2, r2, r5
 801744e:	6122      	str	r2, [r4, #16]
 8017450:	f8cd a000 	str.w	sl, [sp]
 8017454:	464b      	mov	r3, r9
 8017456:	aa03      	add	r2, sp, #12
 8017458:	4621      	mov	r1, r4
 801745a:	4640      	mov	r0, r8
 801745c:	f7ff fee2 	bl	8017224 <_printf_common>
 8017460:	3001      	adds	r0, #1
 8017462:	d14c      	bne.n	80174fe <_printf_i+0x1fe>
 8017464:	f04f 30ff 	mov.w	r0, #4294967295
 8017468:	b004      	add	sp, #16
 801746a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801746e:	4835      	ldr	r0, [pc, #212]	; (8017544 <_printf_i+0x244>)
 8017470:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8017474:	6829      	ldr	r1, [r5, #0]
 8017476:	6823      	ldr	r3, [r4, #0]
 8017478:	f851 6b04 	ldr.w	r6, [r1], #4
 801747c:	6029      	str	r1, [r5, #0]
 801747e:	061d      	lsls	r5, r3, #24
 8017480:	d514      	bpl.n	80174ac <_printf_i+0x1ac>
 8017482:	07df      	lsls	r7, r3, #31
 8017484:	bf44      	itt	mi
 8017486:	f043 0320 	orrmi.w	r3, r3, #32
 801748a:	6023      	strmi	r3, [r4, #0]
 801748c:	b91e      	cbnz	r6, 8017496 <_printf_i+0x196>
 801748e:	6823      	ldr	r3, [r4, #0]
 8017490:	f023 0320 	bic.w	r3, r3, #32
 8017494:	6023      	str	r3, [r4, #0]
 8017496:	2310      	movs	r3, #16
 8017498:	e7b0      	b.n	80173fc <_printf_i+0xfc>
 801749a:	6823      	ldr	r3, [r4, #0]
 801749c:	f043 0320 	orr.w	r3, r3, #32
 80174a0:	6023      	str	r3, [r4, #0]
 80174a2:	2378      	movs	r3, #120	; 0x78
 80174a4:	4828      	ldr	r0, [pc, #160]	; (8017548 <_printf_i+0x248>)
 80174a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80174aa:	e7e3      	b.n	8017474 <_printf_i+0x174>
 80174ac:	0659      	lsls	r1, r3, #25
 80174ae:	bf48      	it	mi
 80174b0:	b2b6      	uxthmi	r6, r6
 80174b2:	e7e6      	b.n	8017482 <_printf_i+0x182>
 80174b4:	4615      	mov	r5, r2
 80174b6:	e7bb      	b.n	8017430 <_printf_i+0x130>
 80174b8:	682b      	ldr	r3, [r5, #0]
 80174ba:	6826      	ldr	r6, [r4, #0]
 80174bc:	6961      	ldr	r1, [r4, #20]
 80174be:	1d18      	adds	r0, r3, #4
 80174c0:	6028      	str	r0, [r5, #0]
 80174c2:	0635      	lsls	r5, r6, #24
 80174c4:	681b      	ldr	r3, [r3, #0]
 80174c6:	d501      	bpl.n	80174cc <_printf_i+0x1cc>
 80174c8:	6019      	str	r1, [r3, #0]
 80174ca:	e002      	b.n	80174d2 <_printf_i+0x1d2>
 80174cc:	0670      	lsls	r0, r6, #25
 80174ce:	d5fb      	bpl.n	80174c8 <_printf_i+0x1c8>
 80174d0:	8019      	strh	r1, [r3, #0]
 80174d2:	2300      	movs	r3, #0
 80174d4:	6123      	str	r3, [r4, #16]
 80174d6:	4615      	mov	r5, r2
 80174d8:	e7ba      	b.n	8017450 <_printf_i+0x150>
 80174da:	682b      	ldr	r3, [r5, #0]
 80174dc:	1d1a      	adds	r2, r3, #4
 80174de:	602a      	str	r2, [r5, #0]
 80174e0:	681d      	ldr	r5, [r3, #0]
 80174e2:	6862      	ldr	r2, [r4, #4]
 80174e4:	2100      	movs	r1, #0
 80174e6:	4628      	mov	r0, r5
 80174e8:	f7e8 ff2a 	bl	8000340 <memchr>
 80174ec:	b108      	cbz	r0, 80174f2 <_printf_i+0x1f2>
 80174ee:	1b40      	subs	r0, r0, r5
 80174f0:	6060      	str	r0, [r4, #4]
 80174f2:	6863      	ldr	r3, [r4, #4]
 80174f4:	6123      	str	r3, [r4, #16]
 80174f6:	2300      	movs	r3, #0
 80174f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80174fc:	e7a8      	b.n	8017450 <_printf_i+0x150>
 80174fe:	6923      	ldr	r3, [r4, #16]
 8017500:	462a      	mov	r2, r5
 8017502:	4649      	mov	r1, r9
 8017504:	4640      	mov	r0, r8
 8017506:	47d0      	blx	sl
 8017508:	3001      	adds	r0, #1
 801750a:	d0ab      	beq.n	8017464 <_printf_i+0x164>
 801750c:	6823      	ldr	r3, [r4, #0]
 801750e:	079b      	lsls	r3, r3, #30
 8017510:	d413      	bmi.n	801753a <_printf_i+0x23a>
 8017512:	68e0      	ldr	r0, [r4, #12]
 8017514:	9b03      	ldr	r3, [sp, #12]
 8017516:	4298      	cmp	r0, r3
 8017518:	bfb8      	it	lt
 801751a:	4618      	movlt	r0, r3
 801751c:	e7a4      	b.n	8017468 <_printf_i+0x168>
 801751e:	2301      	movs	r3, #1
 8017520:	4632      	mov	r2, r6
 8017522:	4649      	mov	r1, r9
 8017524:	4640      	mov	r0, r8
 8017526:	47d0      	blx	sl
 8017528:	3001      	adds	r0, #1
 801752a:	d09b      	beq.n	8017464 <_printf_i+0x164>
 801752c:	3501      	adds	r5, #1
 801752e:	68e3      	ldr	r3, [r4, #12]
 8017530:	9903      	ldr	r1, [sp, #12]
 8017532:	1a5b      	subs	r3, r3, r1
 8017534:	42ab      	cmp	r3, r5
 8017536:	dcf2      	bgt.n	801751e <_printf_i+0x21e>
 8017538:	e7eb      	b.n	8017512 <_printf_i+0x212>
 801753a:	2500      	movs	r5, #0
 801753c:	f104 0619 	add.w	r6, r4, #25
 8017540:	e7f5      	b.n	801752e <_printf_i+0x22e>
 8017542:	bf00      	nop
 8017544:	0801bbb2 	.word	0x0801bbb2
 8017548:	0801bbc3 	.word	0x0801bbc3

0801754c <_scanf_float>:
 801754c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017550:	b087      	sub	sp, #28
 8017552:	4617      	mov	r7, r2
 8017554:	9303      	str	r3, [sp, #12]
 8017556:	688b      	ldr	r3, [r1, #8]
 8017558:	1e5a      	subs	r2, r3, #1
 801755a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801755e:	bf83      	ittte	hi
 8017560:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017564:	195b      	addhi	r3, r3, r5
 8017566:	9302      	strhi	r3, [sp, #8]
 8017568:	2300      	movls	r3, #0
 801756a:	bf86      	itte	hi
 801756c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017570:	608b      	strhi	r3, [r1, #8]
 8017572:	9302      	strls	r3, [sp, #8]
 8017574:	680b      	ldr	r3, [r1, #0]
 8017576:	468b      	mov	fp, r1
 8017578:	2500      	movs	r5, #0
 801757a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801757e:	f84b 3b1c 	str.w	r3, [fp], #28
 8017582:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8017586:	4680      	mov	r8, r0
 8017588:	460c      	mov	r4, r1
 801758a:	465e      	mov	r6, fp
 801758c:	46aa      	mov	sl, r5
 801758e:	46a9      	mov	r9, r5
 8017590:	9501      	str	r5, [sp, #4]
 8017592:	68a2      	ldr	r2, [r4, #8]
 8017594:	b152      	cbz	r2, 80175ac <_scanf_float+0x60>
 8017596:	683b      	ldr	r3, [r7, #0]
 8017598:	781b      	ldrb	r3, [r3, #0]
 801759a:	2b4e      	cmp	r3, #78	; 0x4e
 801759c:	d864      	bhi.n	8017668 <_scanf_float+0x11c>
 801759e:	2b40      	cmp	r3, #64	; 0x40
 80175a0:	d83c      	bhi.n	801761c <_scanf_float+0xd0>
 80175a2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80175a6:	b2c8      	uxtb	r0, r1
 80175a8:	280e      	cmp	r0, #14
 80175aa:	d93a      	bls.n	8017622 <_scanf_float+0xd6>
 80175ac:	f1b9 0f00 	cmp.w	r9, #0
 80175b0:	d003      	beq.n	80175ba <_scanf_float+0x6e>
 80175b2:	6823      	ldr	r3, [r4, #0]
 80175b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80175b8:	6023      	str	r3, [r4, #0]
 80175ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80175be:	f1ba 0f01 	cmp.w	sl, #1
 80175c2:	f200 8113 	bhi.w	80177ec <_scanf_float+0x2a0>
 80175c6:	455e      	cmp	r6, fp
 80175c8:	f200 8105 	bhi.w	80177d6 <_scanf_float+0x28a>
 80175cc:	2501      	movs	r5, #1
 80175ce:	4628      	mov	r0, r5
 80175d0:	b007      	add	sp, #28
 80175d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175d6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80175da:	2a0d      	cmp	r2, #13
 80175dc:	d8e6      	bhi.n	80175ac <_scanf_float+0x60>
 80175de:	a101      	add	r1, pc, #4	; (adr r1, 80175e4 <_scanf_float+0x98>)
 80175e0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80175e4:	08017723 	.word	0x08017723
 80175e8:	080175ad 	.word	0x080175ad
 80175ec:	080175ad 	.word	0x080175ad
 80175f0:	080175ad 	.word	0x080175ad
 80175f4:	08017783 	.word	0x08017783
 80175f8:	0801775b 	.word	0x0801775b
 80175fc:	080175ad 	.word	0x080175ad
 8017600:	080175ad 	.word	0x080175ad
 8017604:	08017731 	.word	0x08017731
 8017608:	080175ad 	.word	0x080175ad
 801760c:	080175ad 	.word	0x080175ad
 8017610:	080175ad 	.word	0x080175ad
 8017614:	080175ad 	.word	0x080175ad
 8017618:	080176e9 	.word	0x080176e9
 801761c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8017620:	e7db      	b.n	80175da <_scanf_float+0x8e>
 8017622:	290e      	cmp	r1, #14
 8017624:	d8c2      	bhi.n	80175ac <_scanf_float+0x60>
 8017626:	a001      	add	r0, pc, #4	; (adr r0, 801762c <_scanf_float+0xe0>)
 8017628:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801762c:	080176db 	.word	0x080176db
 8017630:	080175ad 	.word	0x080175ad
 8017634:	080176db 	.word	0x080176db
 8017638:	0801776f 	.word	0x0801776f
 801763c:	080175ad 	.word	0x080175ad
 8017640:	08017689 	.word	0x08017689
 8017644:	080176c5 	.word	0x080176c5
 8017648:	080176c5 	.word	0x080176c5
 801764c:	080176c5 	.word	0x080176c5
 8017650:	080176c5 	.word	0x080176c5
 8017654:	080176c5 	.word	0x080176c5
 8017658:	080176c5 	.word	0x080176c5
 801765c:	080176c5 	.word	0x080176c5
 8017660:	080176c5 	.word	0x080176c5
 8017664:	080176c5 	.word	0x080176c5
 8017668:	2b6e      	cmp	r3, #110	; 0x6e
 801766a:	d809      	bhi.n	8017680 <_scanf_float+0x134>
 801766c:	2b60      	cmp	r3, #96	; 0x60
 801766e:	d8b2      	bhi.n	80175d6 <_scanf_float+0x8a>
 8017670:	2b54      	cmp	r3, #84	; 0x54
 8017672:	d077      	beq.n	8017764 <_scanf_float+0x218>
 8017674:	2b59      	cmp	r3, #89	; 0x59
 8017676:	d199      	bne.n	80175ac <_scanf_float+0x60>
 8017678:	2d07      	cmp	r5, #7
 801767a:	d197      	bne.n	80175ac <_scanf_float+0x60>
 801767c:	2508      	movs	r5, #8
 801767e:	e029      	b.n	80176d4 <_scanf_float+0x188>
 8017680:	2b74      	cmp	r3, #116	; 0x74
 8017682:	d06f      	beq.n	8017764 <_scanf_float+0x218>
 8017684:	2b79      	cmp	r3, #121	; 0x79
 8017686:	e7f6      	b.n	8017676 <_scanf_float+0x12a>
 8017688:	6821      	ldr	r1, [r4, #0]
 801768a:	05c8      	lsls	r0, r1, #23
 801768c:	d51a      	bpl.n	80176c4 <_scanf_float+0x178>
 801768e:	9b02      	ldr	r3, [sp, #8]
 8017690:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8017694:	6021      	str	r1, [r4, #0]
 8017696:	f109 0901 	add.w	r9, r9, #1
 801769a:	b11b      	cbz	r3, 80176a4 <_scanf_float+0x158>
 801769c:	3b01      	subs	r3, #1
 801769e:	3201      	adds	r2, #1
 80176a0:	9302      	str	r3, [sp, #8]
 80176a2:	60a2      	str	r2, [r4, #8]
 80176a4:	68a3      	ldr	r3, [r4, #8]
 80176a6:	3b01      	subs	r3, #1
 80176a8:	60a3      	str	r3, [r4, #8]
 80176aa:	6923      	ldr	r3, [r4, #16]
 80176ac:	3301      	adds	r3, #1
 80176ae:	6123      	str	r3, [r4, #16]
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	3b01      	subs	r3, #1
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	607b      	str	r3, [r7, #4]
 80176b8:	f340 8084 	ble.w	80177c4 <_scanf_float+0x278>
 80176bc:	683b      	ldr	r3, [r7, #0]
 80176be:	3301      	adds	r3, #1
 80176c0:	603b      	str	r3, [r7, #0]
 80176c2:	e766      	b.n	8017592 <_scanf_float+0x46>
 80176c4:	eb1a 0f05 	cmn.w	sl, r5
 80176c8:	f47f af70 	bne.w	80175ac <_scanf_float+0x60>
 80176cc:	6822      	ldr	r2, [r4, #0]
 80176ce:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80176d2:	6022      	str	r2, [r4, #0]
 80176d4:	f806 3b01 	strb.w	r3, [r6], #1
 80176d8:	e7e4      	b.n	80176a4 <_scanf_float+0x158>
 80176da:	6822      	ldr	r2, [r4, #0]
 80176dc:	0610      	lsls	r0, r2, #24
 80176de:	f57f af65 	bpl.w	80175ac <_scanf_float+0x60>
 80176e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80176e6:	e7f4      	b.n	80176d2 <_scanf_float+0x186>
 80176e8:	f1ba 0f00 	cmp.w	sl, #0
 80176ec:	d10e      	bne.n	801770c <_scanf_float+0x1c0>
 80176ee:	f1b9 0f00 	cmp.w	r9, #0
 80176f2:	d10e      	bne.n	8017712 <_scanf_float+0x1c6>
 80176f4:	6822      	ldr	r2, [r4, #0]
 80176f6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80176fa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80176fe:	d108      	bne.n	8017712 <_scanf_float+0x1c6>
 8017700:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017704:	6022      	str	r2, [r4, #0]
 8017706:	f04f 0a01 	mov.w	sl, #1
 801770a:	e7e3      	b.n	80176d4 <_scanf_float+0x188>
 801770c:	f1ba 0f02 	cmp.w	sl, #2
 8017710:	d055      	beq.n	80177be <_scanf_float+0x272>
 8017712:	2d01      	cmp	r5, #1
 8017714:	d002      	beq.n	801771c <_scanf_float+0x1d0>
 8017716:	2d04      	cmp	r5, #4
 8017718:	f47f af48 	bne.w	80175ac <_scanf_float+0x60>
 801771c:	3501      	adds	r5, #1
 801771e:	b2ed      	uxtb	r5, r5
 8017720:	e7d8      	b.n	80176d4 <_scanf_float+0x188>
 8017722:	f1ba 0f01 	cmp.w	sl, #1
 8017726:	f47f af41 	bne.w	80175ac <_scanf_float+0x60>
 801772a:	f04f 0a02 	mov.w	sl, #2
 801772e:	e7d1      	b.n	80176d4 <_scanf_float+0x188>
 8017730:	b97d      	cbnz	r5, 8017752 <_scanf_float+0x206>
 8017732:	f1b9 0f00 	cmp.w	r9, #0
 8017736:	f47f af3c 	bne.w	80175b2 <_scanf_float+0x66>
 801773a:	6822      	ldr	r2, [r4, #0]
 801773c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8017740:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8017744:	f47f af39 	bne.w	80175ba <_scanf_float+0x6e>
 8017748:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801774c:	6022      	str	r2, [r4, #0]
 801774e:	2501      	movs	r5, #1
 8017750:	e7c0      	b.n	80176d4 <_scanf_float+0x188>
 8017752:	2d03      	cmp	r5, #3
 8017754:	d0e2      	beq.n	801771c <_scanf_float+0x1d0>
 8017756:	2d05      	cmp	r5, #5
 8017758:	e7de      	b.n	8017718 <_scanf_float+0x1cc>
 801775a:	2d02      	cmp	r5, #2
 801775c:	f47f af26 	bne.w	80175ac <_scanf_float+0x60>
 8017760:	2503      	movs	r5, #3
 8017762:	e7b7      	b.n	80176d4 <_scanf_float+0x188>
 8017764:	2d06      	cmp	r5, #6
 8017766:	f47f af21 	bne.w	80175ac <_scanf_float+0x60>
 801776a:	2507      	movs	r5, #7
 801776c:	e7b2      	b.n	80176d4 <_scanf_float+0x188>
 801776e:	6822      	ldr	r2, [r4, #0]
 8017770:	0591      	lsls	r1, r2, #22
 8017772:	f57f af1b 	bpl.w	80175ac <_scanf_float+0x60>
 8017776:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801777a:	6022      	str	r2, [r4, #0]
 801777c:	f8cd 9004 	str.w	r9, [sp, #4]
 8017780:	e7a8      	b.n	80176d4 <_scanf_float+0x188>
 8017782:	6822      	ldr	r2, [r4, #0]
 8017784:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8017788:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801778c:	d006      	beq.n	801779c <_scanf_float+0x250>
 801778e:	0550      	lsls	r0, r2, #21
 8017790:	f57f af0c 	bpl.w	80175ac <_scanf_float+0x60>
 8017794:	f1b9 0f00 	cmp.w	r9, #0
 8017798:	f43f af0f 	beq.w	80175ba <_scanf_float+0x6e>
 801779c:	0591      	lsls	r1, r2, #22
 801779e:	bf58      	it	pl
 80177a0:	9901      	ldrpl	r1, [sp, #4]
 80177a2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80177a6:	bf58      	it	pl
 80177a8:	eba9 0101 	subpl.w	r1, r9, r1
 80177ac:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80177b0:	bf58      	it	pl
 80177b2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80177b6:	6022      	str	r2, [r4, #0]
 80177b8:	f04f 0900 	mov.w	r9, #0
 80177bc:	e78a      	b.n	80176d4 <_scanf_float+0x188>
 80177be:	f04f 0a03 	mov.w	sl, #3
 80177c2:	e787      	b.n	80176d4 <_scanf_float+0x188>
 80177c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80177c8:	4639      	mov	r1, r7
 80177ca:	4640      	mov	r0, r8
 80177cc:	4798      	blx	r3
 80177ce:	2800      	cmp	r0, #0
 80177d0:	f43f aedf 	beq.w	8017592 <_scanf_float+0x46>
 80177d4:	e6ea      	b.n	80175ac <_scanf_float+0x60>
 80177d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80177da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80177de:	463a      	mov	r2, r7
 80177e0:	4640      	mov	r0, r8
 80177e2:	4798      	blx	r3
 80177e4:	6923      	ldr	r3, [r4, #16]
 80177e6:	3b01      	subs	r3, #1
 80177e8:	6123      	str	r3, [r4, #16]
 80177ea:	e6ec      	b.n	80175c6 <_scanf_float+0x7a>
 80177ec:	1e6b      	subs	r3, r5, #1
 80177ee:	2b06      	cmp	r3, #6
 80177f0:	d825      	bhi.n	801783e <_scanf_float+0x2f2>
 80177f2:	2d02      	cmp	r5, #2
 80177f4:	d836      	bhi.n	8017864 <_scanf_float+0x318>
 80177f6:	455e      	cmp	r6, fp
 80177f8:	f67f aee8 	bls.w	80175cc <_scanf_float+0x80>
 80177fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017800:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017804:	463a      	mov	r2, r7
 8017806:	4640      	mov	r0, r8
 8017808:	4798      	blx	r3
 801780a:	6923      	ldr	r3, [r4, #16]
 801780c:	3b01      	subs	r3, #1
 801780e:	6123      	str	r3, [r4, #16]
 8017810:	e7f1      	b.n	80177f6 <_scanf_float+0x2aa>
 8017812:	9802      	ldr	r0, [sp, #8]
 8017814:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017818:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801781c:	9002      	str	r0, [sp, #8]
 801781e:	463a      	mov	r2, r7
 8017820:	4640      	mov	r0, r8
 8017822:	4798      	blx	r3
 8017824:	6923      	ldr	r3, [r4, #16]
 8017826:	3b01      	subs	r3, #1
 8017828:	6123      	str	r3, [r4, #16]
 801782a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801782e:	fa5f fa8a 	uxtb.w	sl, sl
 8017832:	f1ba 0f02 	cmp.w	sl, #2
 8017836:	d1ec      	bne.n	8017812 <_scanf_float+0x2c6>
 8017838:	3d03      	subs	r5, #3
 801783a:	b2ed      	uxtb	r5, r5
 801783c:	1b76      	subs	r6, r6, r5
 801783e:	6823      	ldr	r3, [r4, #0]
 8017840:	05da      	lsls	r2, r3, #23
 8017842:	d52f      	bpl.n	80178a4 <_scanf_float+0x358>
 8017844:	055b      	lsls	r3, r3, #21
 8017846:	d510      	bpl.n	801786a <_scanf_float+0x31e>
 8017848:	455e      	cmp	r6, fp
 801784a:	f67f aebf 	bls.w	80175cc <_scanf_float+0x80>
 801784e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017852:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017856:	463a      	mov	r2, r7
 8017858:	4640      	mov	r0, r8
 801785a:	4798      	blx	r3
 801785c:	6923      	ldr	r3, [r4, #16]
 801785e:	3b01      	subs	r3, #1
 8017860:	6123      	str	r3, [r4, #16]
 8017862:	e7f1      	b.n	8017848 <_scanf_float+0x2fc>
 8017864:	46aa      	mov	sl, r5
 8017866:	9602      	str	r6, [sp, #8]
 8017868:	e7df      	b.n	801782a <_scanf_float+0x2de>
 801786a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801786e:	6923      	ldr	r3, [r4, #16]
 8017870:	2965      	cmp	r1, #101	; 0x65
 8017872:	f103 33ff 	add.w	r3, r3, #4294967295
 8017876:	f106 35ff 	add.w	r5, r6, #4294967295
 801787a:	6123      	str	r3, [r4, #16]
 801787c:	d00c      	beq.n	8017898 <_scanf_float+0x34c>
 801787e:	2945      	cmp	r1, #69	; 0x45
 8017880:	d00a      	beq.n	8017898 <_scanf_float+0x34c>
 8017882:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017886:	463a      	mov	r2, r7
 8017888:	4640      	mov	r0, r8
 801788a:	4798      	blx	r3
 801788c:	6923      	ldr	r3, [r4, #16]
 801788e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8017892:	3b01      	subs	r3, #1
 8017894:	1eb5      	subs	r5, r6, #2
 8017896:	6123      	str	r3, [r4, #16]
 8017898:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801789c:	463a      	mov	r2, r7
 801789e:	4640      	mov	r0, r8
 80178a0:	4798      	blx	r3
 80178a2:	462e      	mov	r6, r5
 80178a4:	6825      	ldr	r5, [r4, #0]
 80178a6:	f015 0510 	ands.w	r5, r5, #16
 80178aa:	d14e      	bne.n	801794a <_scanf_float+0x3fe>
 80178ac:	7035      	strb	r5, [r6, #0]
 80178ae:	6823      	ldr	r3, [r4, #0]
 80178b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80178b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80178b8:	d119      	bne.n	80178ee <_scanf_float+0x3a2>
 80178ba:	9b01      	ldr	r3, [sp, #4]
 80178bc:	454b      	cmp	r3, r9
 80178be:	eba3 0209 	sub.w	r2, r3, r9
 80178c2:	d121      	bne.n	8017908 <_scanf_float+0x3bc>
 80178c4:	2200      	movs	r2, #0
 80178c6:	4659      	mov	r1, fp
 80178c8:	4640      	mov	r0, r8
 80178ca:	f000 fe7f 	bl	80185cc <_strtod_r>
 80178ce:	6822      	ldr	r2, [r4, #0]
 80178d0:	9b03      	ldr	r3, [sp, #12]
 80178d2:	f012 0f02 	tst.w	r2, #2
 80178d6:	681b      	ldr	r3, [r3, #0]
 80178d8:	d021      	beq.n	801791e <_scanf_float+0x3d2>
 80178da:	9903      	ldr	r1, [sp, #12]
 80178dc:	1d1a      	adds	r2, r3, #4
 80178de:	600a      	str	r2, [r1, #0]
 80178e0:	681b      	ldr	r3, [r3, #0]
 80178e2:	ed83 0b00 	vstr	d0, [r3]
 80178e6:	68e3      	ldr	r3, [r4, #12]
 80178e8:	3301      	adds	r3, #1
 80178ea:	60e3      	str	r3, [r4, #12]
 80178ec:	e66f      	b.n	80175ce <_scanf_float+0x82>
 80178ee:	9b04      	ldr	r3, [sp, #16]
 80178f0:	2b00      	cmp	r3, #0
 80178f2:	d0e7      	beq.n	80178c4 <_scanf_float+0x378>
 80178f4:	9905      	ldr	r1, [sp, #20]
 80178f6:	230a      	movs	r3, #10
 80178f8:	462a      	mov	r2, r5
 80178fa:	3101      	adds	r1, #1
 80178fc:	4640      	mov	r0, r8
 80178fe:	f000 feed 	bl	80186dc <_strtol_r>
 8017902:	9b04      	ldr	r3, [sp, #16]
 8017904:	9e05      	ldr	r6, [sp, #20]
 8017906:	1ac2      	subs	r2, r0, r3
 8017908:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801790c:	429e      	cmp	r6, r3
 801790e:	bf28      	it	cs
 8017910:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8017914:	490e      	ldr	r1, [pc, #56]	; (8017950 <_scanf_float+0x404>)
 8017916:	4630      	mov	r0, r6
 8017918:	f000 f824 	bl	8017964 <siprintf>
 801791c:	e7d2      	b.n	80178c4 <_scanf_float+0x378>
 801791e:	9903      	ldr	r1, [sp, #12]
 8017920:	f012 0f04 	tst.w	r2, #4
 8017924:	f103 0204 	add.w	r2, r3, #4
 8017928:	600a      	str	r2, [r1, #0]
 801792a:	d1d9      	bne.n	80178e0 <_scanf_float+0x394>
 801792c:	eeb4 0b40 	vcmp.f64	d0, d0
 8017930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017934:	681e      	ldr	r6, [r3, #0]
 8017936:	d705      	bvc.n	8017944 <_scanf_float+0x3f8>
 8017938:	4806      	ldr	r0, [pc, #24]	; (8017954 <_scanf_float+0x408>)
 801793a:	f000 f80d 	bl	8017958 <nanf>
 801793e:	ed86 0a00 	vstr	s0, [r6]
 8017942:	e7d0      	b.n	80178e6 <_scanf_float+0x39a>
 8017944:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8017948:	e7f9      	b.n	801793e <_scanf_float+0x3f2>
 801794a:	2500      	movs	r5, #0
 801794c:	e63f      	b.n	80175ce <_scanf_float+0x82>
 801794e:	bf00      	nop
 8017950:	0801bbd4 	.word	0x0801bbd4
 8017954:	0801bfe0 	.word	0x0801bfe0

08017958 <nanf>:
 8017958:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017960 <nanf+0x8>
 801795c:	4770      	bx	lr
 801795e:	bf00      	nop
 8017960:	7fc00000 	.word	0x7fc00000

08017964 <siprintf>:
 8017964:	b40e      	push	{r1, r2, r3}
 8017966:	b500      	push	{lr}
 8017968:	b09c      	sub	sp, #112	; 0x70
 801796a:	ab1d      	add	r3, sp, #116	; 0x74
 801796c:	9002      	str	r0, [sp, #8]
 801796e:	9006      	str	r0, [sp, #24]
 8017970:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017974:	4809      	ldr	r0, [pc, #36]	; (801799c <siprintf+0x38>)
 8017976:	9107      	str	r1, [sp, #28]
 8017978:	9104      	str	r1, [sp, #16]
 801797a:	4909      	ldr	r1, [pc, #36]	; (80179a0 <siprintf+0x3c>)
 801797c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017980:	9105      	str	r1, [sp, #20]
 8017982:	6800      	ldr	r0, [r0, #0]
 8017984:	9301      	str	r3, [sp, #4]
 8017986:	a902      	add	r1, sp, #8
 8017988:	f002 fe78 	bl	801a67c <_svfiprintf_r>
 801798c:	9b02      	ldr	r3, [sp, #8]
 801798e:	2200      	movs	r2, #0
 8017990:	701a      	strb	r2, [r3, #0]
 8017992:	b01c      	add	sp, #112	; 0x70
 8017994:	f85d eb04 	ldr.w	lr, [sp], #4
 8017998:	b003      	add	sp, #12
 801799a:	4770      	bx	lr
 801799c:	24000100 	.word	0x24000100
 80179a0:	ffff0208 	.word	0xffff0208

080179a4 <__sread>:
 80179a4:	b510      	push	{r4, lr}
 80179a6:	460c      	mov	r4, r1
 80179a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80179ac:	f002 ff66 	bl	801a87c <_read_r>
 80179b0:	2800      	cmp	r0, #0
 80179b2:	bfab      	itete	ge
 80179b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80179b6:	89a3      	ldrhlt	r3, [r4, #12]
 80179b8:	181b      	addge	r3, r3, r0
 80179ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80179be:	bfac      	ite	ge
 80179c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80179c2:	81a3      	strhlt	r3, [r4, #12]
 80179c4:	bd10      	pop	{r4, pc}

080179c6 <__swrite>:
 80179c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179ca:	461f      	mov	r7, r3
 80179cc:	898b      	ldrh	r3, [r1, #12]
 80179ce:	05db      	lsls	r3, r3, #23
 80179d0:	4605      	mov	r5, r0
 80179d2:	460c      	mov	r4, r1
 80179d4:	4616      	mov	r6, r2
 80179d6:	d505      	bpl.n	80179e4 <__swrite+0x1e>
 80179d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80179dc:	2302      	movs	r3, #2
 80179de:	2200      	movs	r2, #0
 80179e0:	f002 f810 	bl	8019a04 <_lseek_r>
 80179e4:	89a3      	ldrh	r3, [r4, #12]
 80179e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80179ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80179ee:	81a3      	strh	r3, [r4, #12]
 80179f0:	4632      	mov	r2, r6
 80179f2:	463b      	mov	r3, r7
 80179f4:	4628      	mov	r0, r5
 80179f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80179fa:	f000 be71 	b.w	80186e0 <_write_r>

080179fe <__sseek>:
 80179fe:	b510      	push	{r4, lr}
 8017a00:	460c      	mov	r4, r1
 8017a02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a06:	f001 fffd 	bl	8019a04 <_lseek_r>
 8017a0a:	1c43      	adds	r3, r0, #1
 8017a0c:	89a3      	ldrh	r3, [r4, #12]
 8017a0e:	bf15      	itete	ne
 8017a10:	6560      	strne	r0, [r4, #84]	; 0x54
 8017a12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017a16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017a1a:	81a3      	strheq	r3, [r4, #12]
 8017a1c:	bf18      	it	ne
 8017a1e:	81a3      	strhne	r3, [r4, #12]
 8017a20:	bd10      	pop	{r4, pc}

08017a22 <__sclose>:
 8017a22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a26:	f000 be6d 	b.w	8018704 <_close_r>

08017a2a <sulp>:
 8017a2a:	b570      	push	{r4, r5, r6, lr}
 8017a2c:	4604      	mov	r4, r0
 8017a2e:	460d      	mov	r5, r1
 8017a30:	4616      	mov	r6, r2
 8017a32:	ec45 4b10 	vmov	d0, r4, r5
 8017a36:	f002 fb83 	bl	801a140 <__ulp>
 8017a3a:	b17e      	cbz	r6, 8017a5c <sulp+0x32>
 8017a3c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8017a40:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	dd09      	ble.n	8017a5c <sulp+0x32>
 8017a48:	051b      	lsls	r3, r3, #20
 8017a4a:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8017a4e:	2000      	movs	r0, #0
 8017a50:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8017a54:	ec41 0b17 	vmov	d7, r0, r1
 8017a58:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017a5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08017a60 <_strtod_l>:
 8017a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a64:	ed2d 8b0e 	vpush	{d8-d14}
 8017a68:	b097      	sub	sp, #92	; 0x5c
 8017a6a:	461f      	mov	r7, r3
 8017a6c:	2300      	movs	r3, #0
 8017a6e:	9312      	str	r3, [sp, #72]	; 0x48
 8017a70:	4ba1      	ldr	r3, [pc, #644]	; (8017cf8 <_strtod_l+0x298>)
 8017a72:	920d      	str	r2, [sp, #52]	; 0x34
 8017a74:	681b      	ldr	r3, [r3, #0]
 8017a76:	9307      	str	r3, [sp, #28]
 8017a78:	4604      	mov	r4, r0
 8017a7a:	4618      	mov	r0, r3
 8017a7c:	468b      	mov	fp, r1
 8017a7e:	f7e8 fc51 	bl	8000324 <strlen>
 8017a82:	f04f 0800 	mov.w	r8, #0
 8017a86:	4605      	mov	r5, r0
 8017a88:	f04f 0900 	mov.w	r9, #0
 8017a8c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8017a90:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017a92:	7813      	ldrb	r3, [r2, #0]
 8017a94:	2b2b      	cmp	r3, #43	; 0x2b
 8017a96:	d04d      	beq.n	8017b34 <_strtod_l+0xd4>
 8017a98:	d83a      	bhi.n	8017b10 <_strtod_l+0xb0>
 8017a9a:	2b0d      	cmp	r3, #13
 8017a9c:	d833      	bhi.n	8017b06 <_strtod_l+0xa6>
 8017a9e:	2b08      	cmp	r3, #8
 8017aa0:	d833      	bhi.n	8017b0a <_strtod_l+0xaa>
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	d03d      	beq.n	8017b22 <_strtod_l+0xc2>
 8017aa6:	2300      	movs	r3, #0
 8017aa8:	9308      	str	r3, [sp, #32]
 8017aaa:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8017aac:	7833      	ldrb	r3, [r6, #0]
 8017aae:	2b30      	cmp	r3, #48	; 0x30
 8017ab0:	f040 80b0 	bne.w	8017c14 <_strtod_l+0x1b4>
 8017ab4:	7873      	ldrb	r3, [r6, #1]
 8017ab6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017aba:	2b58      	cmp	r3, #88	; 0x58
 8017abc:	d167      	bne.n	8017b8e <_strtod_l+0x12e>
 8017abe:	9b08      	ldr	r3, [sp, #32]
 8017ac0:	9301      	str	r3, [sp, #4]
 8017ac2:	ab12      	add	r3, sp, #72	; 0x48
 8017ac4:	9702      	str	r7, [sp, #8]
 8017ac6:	9300      	str	r3, [sp, #0]
 8017ac8:	4a8c      	ldr	r2, [pc, #560]	; (8017cfc <_strtod_l+0x29c>)
 8017aca:	ab13      	add	r3, sp, #76	; 0x4c
 8017acc:	a911      	add	r1, sp, #68	; 0x44
 8017ace:	4620      	mov	r0, r4
 8017ad0:	f001 fc8c 	bl	80193ec <__gethex>
 8017ad4:	f010 0507 	ands.w	r5, r0, #7
 8017ad8:	4607      	mov	r7, r0
 8017ada:	d005      	beq.n	8017ae8 <_strtod_l+0x88>
 8017adc:	2d06      	cmp	r5, #6
 8017ade:	d12b      	bne.n	8017b38 <_strtod_l+0xd8>
 8017ae0:	3601      	adds	r6, #1
 8017ae2:	2300      	movs	r3, #0
 8017ae4:	9611      	str	r6, [sp, #68]	; 0x44
 8017ae6:	9308      	str	r3, [sp, #32]
 8017ae8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	f040 854e 	bne.w	801858c <_strtod_l+0xb2c>
 8017af0:	9b08      	ldr	r3, [sp, #32]
 8017af2:	b1e3      	cbz	r3, 8017b2e <_strtod_l+0xce>
 8017af4:	ec49 8b17 	vmov	d7, r8, r9
 8017af8:	eeb1 0b47 	vneg.f64	d0, d7
 8017afc:	b017      	add	sp, #92	; 0x5c
 8017afe:	ecbd 8b0e 	vpop	{d8-d14}
 8017b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b06:	2b20      	cmp	r3, #32
 8017b08:	d1cd      	bne.n	8017aa6 <_strtod_l+0x46>
 8017b0a:	3201      	adds	r2, #1
 8017b0c:	9211      	str	r2, [sp, #68]	; 0x44
 8017b0e:	e7bf      	b.n	8017a90 <_strtod_l+0x30>
 8017b10:	2b2d      	cmp	r3, #45	; 0x2d
 8017b12:	d1c8      	bne.n	8017aa6 <_strtod_l+0x46>
 8017b14:	2301      	movs	r3, #1
 8017b16:	9308      	str	r3, [sp, #32]
 8017b18:	1c53      	adds	r3, r2, #1
 8017b1a:	9311      	str	r3, [sp, #68]	; 0x44
 8017b1c:	7853      	ldrb	r3, [r2, #1]
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	d1c3      	bne.n	8017aaa <_strtod_l+0x4a>
 8017b22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017b24:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	f040 852d 	bne.w	8018588 <_strtod_l+0xb28>
 8017b2e:	ec49 8b10 	vmov	d0, r8, r9
 8017b32:	e7e3      	b.n	8017afc <_strtod_l+0x9c>
 8017b34:	2300      	movs	r3, #0
 8017b36:	e7ee      	b.n	8017b16 <_strtod_l+0xb6>
 8017b38:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017b3a:	b13a      	cbz	r2, 8017b4c <_strtod_l+0xec>
 8017b3c:	2135      	movs	r1, #53	; 0x35
 8017b3e:	a814      	add	r0, sp, #80	; 0x50
 8017b40:	f002 fc06 	bl	801a350 <__copybits>
 8017b44:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017b46:	4620      	mov	r0, r4
 8017b48:	f001 ffc8 	bl	8019adc <_Bfree>
 8017b4c:	3d01      	subs	r5, #1
 8017b4e:	2d04      	cmp	r5, #4
 8017b50:	d806      	bhi.n	8017b60 <_strtod_l+0x100>
 8017b52:	e8df f005 	tbb	[pc, r5]
 8017b56:	030a      	.short	0x030a
 8017b58:	1714      	.short	0x1714
 8017b5a:	0a          	.byte	0x0a
 8017b5b:	00          	.byte	0x00
 8017b5c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8017b60:	073f      	lsls	r7, r7, #28
 8017b62:	d5c1      	bpl.n	8017ae8 <_strtod_l+0x88>
 8017b64:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8017b68:	e7be      	b.n	8017ae8 <_strtod_l+0x88>
 8017b6a:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8017b6e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017b70:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8017b74:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8017b78:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8017b7c:	e7f0      	b.n	8017b60 <_strtod_l+0x100>
 8017b7e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8017d00 <_strtod_l+0x2a0>
 8017b82:	e7ed      	b.n	8017b60 <_strtod_l+0x100>
 8017b84:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8017b88:	f04f 38ff 	mov.w	r8, #4294967295
 8017b8c:	e7e8      	b.n	8017b60 <_strtod_l+0x100>
 8017b8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017b90:	1c5a      	adds	r2, r3, #1
 8017b92:	9211      	str	r2, [sp, #68]	; 0x44
 8017b94:	785b      	ldrb	r3, [r3, #1]
 8017b96:	2b30      	cmp	r3, #48	; 0x30
 8017b98:	d0f9      	beq.n	8017b8e <_strtod_l+0x12e>
 8017b9a:	2b00      	cmp	r3, #0
 8017b9c:	d0a4      	beq.n	8017ae8 <_strtod_l+0x88>
 8017b9e:	2301      	movs	r3, #1
 8017ba0:	f04f 0a00 	mov.w	sl, #0
 8017ba4:	9304      	str	r3, [sp, #16]
 8017ba6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017ba8:	930a      	str	r3, [sp, #40]	; 0x28
 8017baa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8017bae:	f8cd a018 	str.w	sl, [sp, #24]
 8017bb2:	220a      	movs	r2, #10
 8017bb4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017bb6:	7807      	ldrb	r7, [r0, #0]
 8017bb8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8017bbc:	b2d9      	uxtb	r1, r3
 8017bbe:	2909      	cmp	r1, #9
 8017bc0:	d92a      	bls.n	8017c18 <_strtod_l+0x1b8>
 8017bc2:	9907      	ldr	r1, [sp, #28]
 8017bc4:	462a      	mov	r2, r5
 8017bc6:	f002 fe83 	bl	801a8d0 <strncmp>
 8017bca:	2800      	cmp	r0, #0
 8017bcc:	d033      	beq.n	8017c36 <_strtod_l+0x1d6>
 8017bce:	2000      	movs	r0, #0
 8017bd0:	9b06      	ldr	r3, [sp, #24]
 8017bd2:	463a      	mov	r2, r7
 8017bd4:	4601      	mov	r1, r0
 8017bd6:	4607      	mov	r7, r0
 8017bd8:	2a65      	cmp	r2, #101	; 0x65
 8017bda:	d001      	beq.n	8017be0 <_strtod_l+0x180>
 8017bdc:	2a45      	cmp	r2, #69	; 0x45
 8017bde:	d117      	bne.n	8017c10 <_strtod_l+0x1b0>
 8017be0:	b91b      	cbnz	r3, 8017bea <_strtod_l+0x18a>
 8017be2:	9b04      	ldr	r3, [sp, #16]
 8017be4:	4303      	orrs	r3, r0
 8017be6:	d09c      	beq.n	8017b22 <_strtod_l+0xc2>
 8017be8:	2300      	movs	r3, #0
 8017bea:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8017bee:	f10b 0201 	add.w	r2, fp, #1
 8017bf2:	9211      	str	r2, [sp, #68]	; 0x44
 8017bf4:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8017bf8:	2a2b      	cmp	r2, #43	; 0x2b
 8017bfa:	d071      	beq.n	8017ce0 <_strtod_l+0x280>
 8017bfc:	2a2d      	cmp	r2, #45	; 0x2d
 8017bfe:	d077      	beq.n	8017cf0 <_strtod_l+0x290>
 8017c00:	f04f 0e00 	mov.w	lr, #0
 8017c04:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8017c08:	2d09      	cmp	r5, #9
 8017c0a:	d97f      	bls.n	8017d0c <_strtod_l+0x2ac>
 8017c0c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8017c10:	2500      	movs	r5, #0
 8017c12:	e09b      	b.n	8017d4c <_strtod_l+0x2ec>
 8017c14:	2300      	movs	r3, #0
 8017c16:	e7c3      	b.n	8017ba0 <_strtod_l+0x140>
 8017c18:	9906      	ldr	r1, [sp, #24]
 8017c1a:	2908      	cmp	r1, #8
 8017c1c:	bfdd      	ittte	le
 8017c1e:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8017c20:	fb02 3301 	mlale	r3, r2, r1, r3
 8017c24:	9309      	strle	r3, [sp, #36]	; 0x24
 8017c26:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8017c2a:	9b06      	ldr	r3, [sp, #24]
 8017c2c:	3001      	adds	r0, #1
 8017c2e:	3301      	adds	r3, #1
 8017c30:	9306      	str	r3, [sp, #24]
 8017c32:	9011      	str	r0, [sp, #68]	; 0x44
 8017c34:	e7be      	b.n	8017bb4 <_strtod_l+0x154>
 8017c36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017c38:	195a      	adds	r2, r3, r5
 8017c3a:	9211      	str	r2, [sp, #68]	; 0x44
 8017c3c:	5d5a      	ldrb	r2, [r3, r5]
 8017c3e:	9b06      	ldr	r3, [sp, #24]
 8017c40:	b3a3      	cbz	r3, 8017cac <_strtod_l+0x24c>
 8017c42:	4607      	mov	r7, r0
 8017c44:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8017c48:	2909      	cmp	r1, #9
 8017c4a:	d912      	bls.n	8017c72 <_strtod_l+0x212>
 8017c4c:	2101      	movs	r1, #1
 8017c4e:	e7c3      	b.n	8017bd8 <_strtod_l+0x178>
 8017c50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017c52:	1c5a      	adds	r2, r3, #1
 8017c54:	9211      	str	r2, [sp, #68]	; 0x44
 8017c56:	785a      	ldrb	r2, [r3, #1]
 8017c58:	3001      	adds	r0, #1
 8017c5a:	2a30      	cmp	r2, #48	; 0x30
 8017c5c:	d0f8      	beq.n	8017c50 <_strtod_l+0x1f0>
 8017c5e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8017c62:	2b08      	cmp	r3, #8
 8017c64:	f200 8497 	bhi.w	8018596 <_strtod_l+0xb36>
 8017c68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017c6a:	930a      	str	r3, [sp, #40]	; 0x28
 8017c6c:	4607      	mov	r7, r0
 8017c6e:	2000      	movs	r0, #0
 8017c70:	4603      	mov	r3, r0
 8017c72:	3a30      	subs	r2, #48	; 0x30
 8017c74:	f100 0101 	add.w	r1, r0, #1
 8017c78:	d012      	beq.n	8017ca0 <_strtod_l+0x240>
 8017c7a:	440f      	add	r7, r1
 8017c7c:	eb00 0c03 	add.w	ip, r0, r3
 8017c80:	4619      	mov	r1, r3
 8017c82:	250a      	movs	r5, #10
 8017c84:	4561      	cmp	r1, ip
 8017c86:	d113      	bne.n	8017cb0 <_strtod_l+0x250>
 8017c88:	1819      	adds	r1, r3, r0
 8017c8a:	2908      	cmp	r1, #8
 8017c8c:	f103 0301 	add.w	r3, r3, #1
 8017c90:	4403      	add	r3, r0
 8017c92:	dc1c      	bgt.n	8017cce <_strtod_l+0x26e>
 8017c94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017c96:	210a      	movs	r1, #10
 8017c98:	fb01 2200 	mla	r2, r1, r0, r2
 8017c9c:	9209      	str	r2, [sp, #36]	; 0x24
 8017c9e:	2100      	movs	r1, #0
 8017ca0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017ca2:	1c50      	adds	r0, r2, #1
 8017ca4:	9011      	str	r0, [sp, #68]	; 0x44
 8017ca6:	7852      	ldrb	r2, [r2, #1]
 8017ca8:	4608      	mov	r0, r1
 8017caa:	e7cb      	b.n	8017c44 <_strtod_l+0x1e4>
 8017cac:	9806      	ldr	r0, [sp, #24]
 8017cae:	e7d4      	b.n	8017c5a <_strtod_l+0x1fa>
 8017cb0:	2908      	cmp	r1, #8
 8017cb2:	dc04      	bgt.n	8017cbe <_strtod_l+0x25e>
 8017cb4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8017cb6:	436e      	muls	r6, r5
 8017cb8:	9609      	str	r6, [sp, #36]	; 0x24
 8017cba:	3101      	adds	r1, #1
 8017cbc:	e7e2      	b.n	8017c84 <_strtod_l+0x224>
 8017cbe:	f101 0e01 	add.w	lr, r1, #1
 8017cc2:	f1be 0f10 	cmp.w	lr, #16
 8017cc6:	bfd8      	it	le
 8017cc8:	fb05 fa0a 	mulle.w	sl, r5, sl
 8017ccc:	e7f5      	b.n	8017cba <_strtod_l+0x25a>
 8017cce:	2b10      	cmp	r3, #16
 8017cd0:	bfdc      	itt	le
 8017cd2:	210a      	movle	r1, #10
 8017cd4:	fb01 2a0a 	mlale	sl, r1, sl, r2
 8017cd8:	e7e1      	b.n	8017c9e <_strtod_l+0x23e>
 8017cda:	2700      	movs	r7, #0
 8017cdc:	2101      	movs	r1, #1
 8017cde:	e780      	b.n	8017be2 <_strtod_l+0x182>
 8017ce0:	f04f 0e00 	mov.w	lr, #0
 8017ce4:	f10b 0202 	add.w	r2, fp, #2
 8017ce8:	9211      	str	r2, [sp, #68]	; 0x44
 8017cea:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8017cee:	e789      	b.n	8017c04 <_strtod_l+0x1a4>
 8017cf0:	f04f 0e01 	mov.w	lr, #1
 8017cf4:	e7f6      	b.n	8017ce4 <_strtod_l+0x284>
 8017cf6:	bf00      	nop
 8017cf8:	0801be28 	.word	0x0801be28
 8017cfc:	0801bbdc 	.word	0x0801bbdc
 8017d00:	7ff00000 	.word	0x7ff00000
 8017d04:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017d06:	1c55      	adds	r5, r2, #1
 8017d08:	9511      	str	r5, [sp, #68]	; 0x44
 8017d0a:	7852      	ldrb	r2, [r2, #1]
 8017d0c:	2a30      	cmp	r2, #48	; 0x30
 8017d0e:	d0f9      	beq.n	8017d04 <_strtod_l+0x2a4>
 8017d10:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8017d14:	2d08      	cmp	r5, #8
 8017d16:	f63f af7b 	bhi.w	8017c10 <_strtod_l+0x1b0>
 8017d1a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8017d1e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017d20:	9207      	str	r2, [sp, #28]
 8017d22:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017d24:	1c55      	adds	r5, r2, #1
 8017d26:	9511      	str	r5, [sp, #68]	; 0x44
 8017d28:	7852      	ldrb	r2, [r2, #1]
 8017d2a:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8017d2e:	2e09      	cmp	r6, #9
 8017d30:	d937      	bls.n	8017da2 <_strtod_l+0x342>
 8017d32:	9e07      	ldr	r6, [sp, #28]
 8017d34:	1bad      	subs	r5, r5, r6
 8017d36:	2d08      	cmp	r5, #8
 8017d38:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8017d3c:	dc02      	bgt.n	8017d44 <_strtod_l+0x2e4>
 8017d3e:	4565      	cmp	r5, ip
 8017d40:	bfa8      	it	ge
 8017d42:	4665      	movge	r5, ip
 8017d44:	f1be 0f00 	cmp.w	lr, #0
 8017d48:	d000      	beq.n	8017d4c <_strtod_l+0x2ec>
 8017d4a:	426d      	negs	r5, r5
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	d14d      	bne.n	8017dec <_strtod_l+0x38c>
 8017d50:	9b04      	ldr	r3, [sp, #16]
 8017d52:	4303      	orrs	r3, r0
 8017d54:	f47f aec8 	bne.w	8017ae8 <_strtod_l+0x88>
 8017d58:	2900      	cmp	r1, #0
 8017d5a:	f47f aee2 	bne.w	8017b22 <_strtod_l+0xc2>
 8017d5e:	2a69      	cmp	r2, #105	; 0x69
 8017d60:	d027      	beq.n	8017db2 <_strtod_l+0x352>
 8017d62:	dc24      	bgt.n	8017dae <_strtod_l+0x34e>
 8017d64:	2a49      	cmp	r2, #73	; 0x49
 8017d66:	d024      	beq.n	8017db2 <_strtod_l+0x352>
 8017d68:	2a4e      	cmp	r2, #78	; 0x4e
 8017d6a:	f47f aeda 	bne.w	8017b22 <_strtod_l+0xc2>
 8017d6e:	4996      	ldr	r1, [pc, #600]	; (8017fc8 <_strtod_l+0x568>)
 8017d70:	a811      	add	r0, sp, #68	; 0x44
 8017d72:	f001 fd93 	bl	801989c <__match>
 8017d76:	2800      	cmp	r0, #0
 8017d78:	f43f aed3 	beq.w	8017b22 <_strtod_l+0xc2>
 8017d7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017d7e:	781b      	ldrb	r3, [r3, #0]
 8017d80:	2b28      	cmp	r3, #40	; 0x28
 8017d82:	d12d      	bne.n	8017de0 <_strtod_l+0x380>
 8017d84:	4991      	ldr	r1, [pc, #580]	; (8017fcc <_strtod_l+0x56c>)
 8017d86:	aa14      	add	r2, sp, #80	; 0x50
 8017d88:	a811      	add	r0, sp, #68	; 0x44
 8017d8a:	f001 fd9b 	bl	80198c4 <__hexnan>
 8017d8e:	2805      	cmp	r0, #5
 8017d90:	d126      	bne.n	8017de0 <_strtod_l+0x380>
 8017d92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017d94:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8017d98:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8017d9c:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8017da0:	e6a2      	b.n	8017ae8 <_strtod_l+0x88>
 8017da2:	250a      	movs	r5, #10
 8017da4:	fb05 250c 	mla	r5, r5, ip, r2
 8017da8:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8017dac:	e7b9      	b.n	8017d22 <_strtod_l+0x2c2>
 8017dae:	2a6e      	cmp	r2, #110	; 0x6e
 8017db0:	e7db      	b.n	8017d6a <_strtod_l+0x30a>
 8017db2:	4987      	ldr	r1, [pc, #540]	; (8017fd0 <_strtod_l+0x570>)
 8017db4:	a811      	add	r0, sp, #68	; 0x44
 8017db6:	f001 fd71 	bl	801989c <__match>
 8017dba:	2800      	cmp	r0, #0
 8017dbc:	f43f aeb1 	beq.w	8017b22 <_strtod_l+0xc2>
 8017dc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017dc2:	4984      	ldr	r1, [pc, #528]	; (8017fd4 <_strtod_l+0x574>)
 8017dc4:	3b01      	subs	r3, #1
 8017dc6:	a811      	add	r0, sp, #68	; 0x44
 8017dc8:	9311      	str	r3, [sp, #68]	; 0x44
 8017dca:	f001 fd67 	bl	801989c <__match>
 8017dce:	b910      	cbnz	r0, 8017dd6 <_strtod_l+0x376>
 8017dd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017dd2:	3301      	adds	r3, #1
 8017dd4:	9311      	str	r3, [sp, #68]	; 0x44
 8017dd6:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8017fe8 <_strtod_l+0x588>
 8017dda:	f04f 0800 	mov.w	r8, #0
 8017dde:	e683      	b.n	8017ae8 <_strtod_l+0x88>
 8017de0:	487d      	ldr	r0, [pc, #500]	; (8017fd8 <_strtod_l+0x578>)
 8017de2:	f002 fd5d 	bl	801a8a0 <nan>
 8017de6:	ec59 8b10 	vmov	r8, r9, d0
 8017dea:	e67d      	b.n	8017ae8 <_strtod_l+0x88>
 8017dec:	1bea      	subs	r2, r5, r7
 8017dee:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8017df2:	9207      	str	r2, [sp, #28]
 8017df4:	9a06      	ldr	r2, [sp, #24]
 8017df6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8017dfa:	2a00      	cmp	r2, #0
 8017dfc:	bf08      	it	eq
 8017dfe:	461a      	moveq	r2, r3
 8017e00:	2b10      	cmp	r3, #16
 8017e02:	9206      	str	r2, [sp, #24]
 8017e04:	461a      	mov	r2, r3
 8017e06:	bfa8      	it	ge
 8017e08:	2210      	movge	r2, #16
 8017e0a:	2b09      	cmp	r3, #9
 8017e0c:	ec59 8b17 	vmov	r8, r9, d7
 8017e10:	dd0c      	ble.n	8017e2c <_strtod_l+0x3cc>
 8017e12:	4972      	ldr	r1, [pc, #456]	; (8017fdc <_strtod_l+0x57c>)
 8017e14:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8017e18:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8017e1c:	ee06 aa90 	vmov	s13, sl
 8017e20:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8017e24:	eea7 6b05 	vfma.f64	d6, d7, d5
 8017e28:	ec59 8b16 	vmov	r8, r9, d6
 8017e2c:	2b0f      	cmp	r3, #15
 8017e2e:	dc36      	bgt.n	8017e9e <_strtod_l+0x43e>
 8017e30:	9907      	ldr	r1, [sp, #28]
 8017e32:	2900      	cmp	r1, #0
 8017e34:	f43f ae58 	beq.w	8017ae8 <_strtod_l+0x88>
 8017e38:	dd23      	ble.n	8017e82 <_strtod_l+0x422>
 8017e3a:	2916      	cmp	r1, #22
 8017e3c:	dc0b      	bgt.n	8017e56 <_strtod_l+0x3f6>
 8017e3e:	4b67      	ldr	r3, [pc, #412]	; (8017fdc <_strtod_l+0x57c>)
 8017e40:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8017e44:	ed93 7b00 	vldr	d7, [r3]
 8017e48:	ec49 8b16 	vmov	d6, r8, r9
 8017e4c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017e50:	ec59 8b17 	vmov	r8, r9, d7
 8017e54:	e648      	b.n	8017ae8 <_strtod_l+0x88>
 8017e56:	9807      	ldr	r0, [sp, #28]
 8017e58:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8017e5c:	4281      	cmp	r1, r0
 8017e5e:	db1e      	blt.n	8017e9e <_strtod_l+0x43e>
 8017e60:	4a5e      	ldr	r2, [pc, #376]	; (8017fdc <_strtod_l+0x57c>)
 8017e62:	f1c3 030f 	rsb	r3, r3, #15
 8017e66:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8017e6a:	ed91 7b00 	vldr	d7, [r1]
 8017e6e:	ec49 8b16 	vmov	d6, r8, r9
 8017e72:	1ac3      	subs	r3, r0, r3
 8017e74:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8017e78:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017e7c:	ed92 6b00 	vldr	d6, [r2]
 8017e80:	e7e4      	b.n	8017e4c <_strtod_l+0x3ec>
 8017e82:	9907      	ldr	r1, [sp, #28]
 8017e84:	3116      	adds	r1, #22
 8017e86:	db0a      	blt.n	8017e9e <_strtod_l+0x43e>
 8017e88:	4b54      	ldr	r3, [pc, #336]	; (8017fdc <_strtod_l+0x57c>)
 8017e8a:	1b7d      	subs	r5, r7, r5
 8017e8c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8017e90:	ed95 7b00 	vldr	d7, [r5]
 8017e94:	ec49 8b16 	vmov	d6, r8, r9
 8017e98:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8017e9c:	e7d8      	b.n	8017e50 <_strtod_l+0x3f0>
 8017e9e:	9907      	ldr	r1, [sp, #28]
 8017ea0:	1a9a      	subs	r2, r3, r2
 8017ea2:	440a      	add	r2, r1
 8017ea4:	2a00      	cmp	r2, #0
 8017ea6:	dd6f      	ble.n	8017f88 <_strtod_l+0x528>
 8017ea8:	f012 000f 	ands.w	r0, r2, #15
 8017eac:	d00a      	beq.n	8017ec4 <_strtod_l+0x464>
 8017eae:	494b      	ldr	r1, [pc, #300]	; (8017fdc <_strtod_l+0x57c>)
 8017eb0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8017eb4:	ed91 7b00 	vldr	d7, [r1]
 8017eb8:	ec49 8b16 	vmov	d6, r8, r9
 8017ebc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017ec0:	ec59 8b17 	vmov	r8, r9, d7
 8017ec4:	f032 020f 	bics.w	r2, r2, #15
 8017ec8:	d04f      	beq.n	8017f6a <_strtod_l+0x50a>
 8017eca:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8017ece:	dd22      	ble.n	8017f16 <_strtod_l+0x4b6>
 8017ed0:	2500      	movs	r5, #0
 8017ed2:	462e      	mov	r6, r5
 8017ed4:	9506      	str	r5, [sp, #24]
 8017ed6:	462f      	mov	r7, r5
 8017ed8:	2322      	movs	r3, #34	; 0x22
 8017eda:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8017fe8 <_strtod_l+0x588>
 8017ede:	6023      	str	r3, [r4, #0]
 8017ee0:	f04f 0800 	mov.w	r8, #0
 8017ee4:	9b06      	ldr	r3, [sp, #24]
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	f43f adfe 	beq.w	8017ae8 <_strtod_l+0x88>
 8017eec:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017eee:	4620      	mov	r0, r4
 8017ef0:	f001 fdf4 	bl	8019adc <_Bfree>
 8017ef4:	4639      	mov	r1, r7
 8017ef6:	4620      	mov	r0, r4
 8017ef8:	f001 fdf0 	bl	8019adc <_Bfree>
 8017efc:	4631      	mov	r1, r6
 8017efe:	4620      	mov	r0, r4
 8017f00:	f001 fdec 	bl	8019adc <_Bfree>
 8017f04:	9906      	ldr	r1, [sp, #24]
 8017f06:	4620      	mov	r0, r4
 8017f08:	f001 fde8 	bl	8019adc <_Bfree>
 8017f0c:	4629      	mov	r1, r5
 8017f0e:	4620      	mov	r0, r4
 8017f10:	f001 fde4 	bl	8019adc <_Bfree>
 8017f14:	e5e8      	b.n	8017ae8 <_strtod_l+0x88>
 8017f16:	2000      	movs	r0, #0
 8017f18:	ec49 8b17 	vmov	d7, r8, r9
 8017f1c:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8017fe0 <_strtod_l+0x580>
 8017f20:	1112      	asrs	r2, r2, #4
 8017f22:	4601      	mov	r1, r0
 8017f24:	2a01      	cmp	r2, #1
 8017f26:	dc23      	bgt.n	8017f70 <_strtod_l+0x510>
 8017f28:	b108      	cbz	r0, 8017f2e <_strtod_l+0x4ce>
 8017f2a:	ec59 8b17 	vmov	r8, r9, d7
 8017f2e:	4a2c      	ldr	r2, [pc, #176]	; (8017fe0 <_strtod_l+0x580>)
 8017f30:	482c      	ldr	r0, [pc, #176]	; (8017fe4 <_strtod_l+0x584>)
 8017f32:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8017f36:	ed92 7b00 	vldr	d7, [r2]
 8017f3a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8017f3e:	ec49 8b16 	vmov	d6, r8, r9
 8017f42:	4a29      	ldr	r2, [pc, #164]	; (8017fe8 <_strtod_l+0x588>)
 8017f44:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017f48:	ee17 1a90 	vmov	r1, s15
 8017f4c:	400a      	ands	r2, r1
 8017f4e:	4282      	cmp	r2, r0
 8017f50:	ec59 8b17 	vmov	r8, r9, d7
 8017f54:	d8bc      	bhi.n	8017ed0 <_strtod_l+0x470>
 8017f56:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8017f5a:	4282      	cmp	r2, r0
 8017f5c:	bf86      	itte	hi
 8017f5e:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8017fec <_strtod_l+0x58c>
 8017f62:	f04f 38ff 	movhi.w	r8, #4294967295
 8017f66:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8017f6a:	2200      	movs	r2, #0
 8017f6c:	9204      	str	r2, [sp, #16]
 8017f6e:	e078      	b.n	8018062 <_strtod_l+0x602>
 8017f70:	07d6      	lsls	r6, r2, #31
 8017f72:	d504      	bpl.n	8017f7e <_strtod_l+0x51e>
 8017f74:	ed9c 6b00 	vldr	d6, [ip]
 8017f78:	2001      	movs	r0, #1
 8017f7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017f7e:	3101      	adds	r1, #1
 8017f80:	1052      	asrs	r2, r2, #1
 8017f82:	f10c 0c08 	add.w	ip, ip, #8
 8017f86:	e7cd      	b.n	8017f24 <_strtod_l+0x4c4>
 8017f88:	d0ef      	beq.n	8017f6a <_strtod_l+0x50a>
 8017f8a:	4252      	negs	r2, r2
 8017f8c:	f012 000f 	ands.w	r0, r2, #15
 8017f90:	d00a      	beq.n	8017fa8 <_strtod_l+0x548>
 8017f92:	4912      	ldr	r1, [pc, #72]	; (8017fdc <_strtod_l+0x57c>)
 8017f94:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8017f98:	ed91 7b00 	vldr	d7, [r1]
 8017f9c:	ec49 8b16 	vmov	d6, r8, r9
 8017fa0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8017fa4:	ec59 8b17 	vmov	r8, r9, d7
 8017fa8:	1112      	asrs	r2, r2, #4
 8017faa:	d0de      	beq.n	8017f6a <_strtod_l+0x50a>
 8017fac:	2a1f      	cmp	r2, #31
 8017fae:	dd1f      	ble.n	8017ff0 <_strtod_l+0x590>
 8017fb0:	2500      	movs	r5, #0
 8017fb2:	462e      	mov	r6, r5
 8017fb4:	9506      	str	r5, [sp, #24]
 8017fb6:	462f      	mov	r7, r5
 8017fb8:	2322      	movs	r3, #34	; 0x22
 8017fba:	f04f 0800 	mov.w	r8, #0
 8017fbe:	f04f 0900 	mov.w	r9, #0
 8017fc2:	6023      	str	r3, [r4, #0]
 8017fc4:	e78e      	b.n	8017ee4 <_strtod_l+0x484>
 8017fc6:	bf00      	nop
 8017fc8:	0801bbad 	.word	0x0801bbad
 8017fcc:	0801bbf0 	.word	0x0801bbf0
 8017fd0:	0801bba5 	.word	0x0801bba5
 8017fd4:	0801bd34 	.word	0x0801bd34
 8017fd8:	0801bfe0 	.word	0x0801bfe0
 8017fdc:	0801bec0 	.word	0x0801bec0
 8017fe0:	0801be98 	.word	0x0801be98
 8017fe4:	7ca00000 	.word	0x7ca00000
 8017fe8:	7ff00000 	.word	0x7ff00000
 8017fec:	7fefffff 	.word	0x7fefffff
 8017ff0:	f012 0110 	ands.w	r1, r2, #16
 8017ff4:	bf18      	it	ne
 8017ff6:	216a      	movne	r1, #106	; 0x6a
 8017ff8:	9104      	str	r1, [sp, #16]
 8017ffa:	ec49 8b17 	vmov	d7, r8, r9
 8017ffe:	49be      	ldr	r1, [pc, #760]	; (80182f8 <_strtod_l+0x898>)
 8018000:	2000      	movs	r0, #0
 8018002:	07d6      	lsls	r6, r2, #31
 8018004:	d504      	bpl.n	8018010 <_strtod_l+0x5b0>
 8018006:	ed91 6b00 	vldr	d6, [r1]
 801800a:	2001      	movs	r0, #1
 801800c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018010:	1052      	asrs	r2, r2, #1
 8018012:	f101 0108 	add.w	r1, r1, #8
 8018016:	d1f4      	bne.n	8018002 <_strtod_l+0x5a2>
 8018018:	b108      	cbz	r0, 801801e <_strtod_l+0x5be>
 801801a:	ec59 8b17 	vmov	r8, r9, d7
 801801e:	9a04      	ldr	r2, [sp, #16]
 8018020:	b1c2      	cbz	r2, 8018054 <_strtod_l+0x5f4>
 8018022:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8018026:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 801802a:	2a00      	cmp	r2, #0
 801802c:	4648      	mov	r0, r9
 801802e:	dd11      	ble.n	8018054 <_strtod_l+0x5f4>
 8018030:	2a1f      	cmp	r2, #31
 8018032:	f340 812e 	ble.w	8018292 <_strtod_l+0x832>
 8018036:	2a34      	cmp	r2, #52	; 0x34
 8018038:	bfde      	ittt	le
 801803a:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 801803e:	f04f 32ff 	movle.w	r2, #4294967295
 8018042:	fa02 f101 	lslle.w	r1, r2, r1
 8018046:	f04f 0800 	mov.w	r8, #0
 801804a:	bfcc      	ite	gt
 801804c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8018050:	ea01 0900 	andle.w	r9, r1, r0
 8018054:	ec49 8b17 	vmov	d7, r8, r9
 8018058:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801805c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018060:	d0a6      	beq.n	8017fb0 <_strtod_l+0x550>
 8018062:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018064:	9200      	str	r2, [sp, #0]
 8018066:	990a      	ldr	r1, [sp, #40]	; 0x28
 8018068:	9a06      	ldr	r2, [sp, #24]
 801806a:	4620      	mov	r0, r4
 801806c:	f001 fd9e 	bl	8019bac <__s2b>
 8018070:	9006      	str	r0, [sp, #24]
 8018072:	2800      	cmp	r0, #0
 8018074:	f43f af2c 	beq.w	8017ed0 <_strtod_l+0x470>
 8018078:	9b07      	ldr	r3, [sp, #28]
 801807a:	1b7d      	subs	r5, r7, r5
 801807c:	2b00      	cmp	r3, #0
 801807e:	bfb4      	ite	lt
 8018080:	462b      	movlt	r3, r5
 8018082:	2300      	movge	r3, #0
 8018084:	9309      	str	r3, [sp, #36]	; 0x24
 8018086:	9b07      	ldr	r3, [sp, #28]
 8018088:	ed9f 9b93 	vldr	d9, [pc, #588]	; 80182d8 <_strtod_l+0x878>
 801808c:	ed9f ab94 	vldr	d10, [pc, #592]	; 80182e0 <_strtod_l+0x880>
 8018090:	ed9f bb95 	vldr	d11, [pc, #596]	; 80182e8 <_strtod_l+0x888>
 8018094:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018098:	2500      	movs	r5, #0
 801809a:	930c      	str	r3, [sp, #48]	; 0x30
 801809c:	462e      	mov	r6, r5
 801809e:	9b06      	ldr	r3, [sp, #24]
 80180a0:	4620      	mov	r0, r4
 80180a2:	6859      	ldr	r1, [r3, #4]
 80180a4:	f001 fcda 	bl	8019a5c <_Balloc>
 80180a8:	4607      	mov	r7, r0
 80180aa:	2800      	cmp	r0, #0
 80180ac:	f43f af14 	beq.w	8017ed8 <_strtod_l+0x478>
 80180b0:	9b06      	ldr	r3, [sp, #24]
 80180b2:	691a      	ldr	r2, [r3, #16]
 80180b4:	3202      	adds	r2, #2
 80180b6:	f103 010c 	add.w	r1, r3, #12
 80180ba:	0092      	lsls	r2, r2, #2
 80180bc:	300c      	adds	r0, #12
 80180be:	f7fe fded 	bl	8016c9c <memcpy>
 80180c2:	ec49 8b10 	vmov	d0, r8, r9
 80180c6:	aa14      	add	r2, sp, #80	; 0x50
 80180c8:	a913      	add	r1, sp, #76	; 0x4c
 80180ca:	4620      	mov	r0, r4
 80180cc:	f002 f8b4 	bl	801a238 <__d2b>
 80180d0:	ec49 8b18 	vmov	d8, r8, r9
 80180d4:	9012      	str	r0, [sp, #72]	; 0x48
 80180d6:	2800      	cmp	r0, #0
 80180d8:	f43f aefe 	beq.w	8017ed8 <_strtod_l+0x478>
 80180dc:	2101      	movs	r1, #1
 80180de:	4620      	mov	r0, r4
 80180e0:	f001 fdfe 	bl	8019ce0 <__i2b>
 80180e4:	4606      	mov	r6, r0
 80180e6:	2800      	cmp	r0, #0
 80180e8:	f43f aef6 	beq.w	8017ed8 <_strtod_l+0x478>
 80180ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80180ee:	9914      	ldr	r1, [sp, #80]	; 0x50
 80180f0:	2b00      	cmp	r3, #0
 80180f2:	bfab      	itete	ge
 80180f4:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 80180f6:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 80180f8:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 80180fc:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8018100:	bfac      	ite	ge
 8018102:	eb03 0b02 	addge.w	fp, r3, r2
 8018106:	eba2 0a03 	sublt.w	sl, r2, r3
 801810a:	9a04      	ldr	r2, [sp, #16]
 801810c:	1a9b      	subs	r3, r3, r2
 801810e:	440b      	add	r3, r1
 8018110:	4a7a      	ldr	r2, [pc, #488]	; (80182fc <_strtod_l+0x89c>)
 8018112:	3b01      	subs	r3, #1
 8018114:	4293      	cmp	r3, r2
 8018116:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 801811a:	f280 80cd 	bge.w	80182b8 <_strtod_l+0x858>
 801811e:	1ad2      	subs	r2, r2, r3
 8018120:	2a1f      	cmp	r2, #31
 8018122:	eba1 0102 	sub.w	r1, r1, r2
 8018126:	f04f 0001 	mov.w	r0, #1
 801812a:	f300 80b9 	bgt.w	80182a0 <_strtod_l+0x840>
 801812e:	fa00 f302 	lsl.w	r3, r0, r2
 8018132:	930b      	str	r3, [sp, #44]	; 0x2c
 8018134:	2300      	movs	r3, #0
 8018136:	930a      	str	r3, [sp, #40]	; 0x28
 8018138:	eb0b 0301 	add.w	r3, fp, r1
 801813c:	9a04      	ldr	r2, [sp, #16]
 801813e:	459b      	cmp	fp, r3
 8018140:	448a      	add	sl, r1
 8018142:	4492      	add	sl, r2
 8018144:	465a      	mov	r2, fp
 8018146:	bfa8      	it	ge
 8018148:	461a      	movge	r2, r3
 801814a:	4552      	cmp	r2, sl
 801814c:	bfa8      	it	ge
 801814e:	4652      	movge	r2, sl
 8018150:	2a00      	cmp	r2, #0
 8018152:	bfc2      	ittt	gt
 8018154:	1a9b      	subgt	r3, r3, r2
 8018156:	ebaa 0a02 	subgt.w	sl, sl, r2
 801815a:	ebab 0b02 	subgt.w	fp, fp, r2
 801815e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018160:	2a00      	cmp	r2, #0
 8018162:	dd18      	ble.n	8018196 <_strtod_l+0x736>
 8018164:	4631      	mov	r1, r6
 8018166:	4620      	mov	r0, r4
 8018168:	930f      	str	r3, [sp, #60]	; 0x3c
 801816a:	f001 fe79 	bl	8019e60 <__pow5mult>
 801816e:	4606      	mov	r6, r0
 8018170:	2800      	cmp	r0, #0
 8018172:	f43f aeb1 	beq.w	8017ed8 <_strtod_l+0x478>
 8018176:	4601      	mov	r1, r0
 8018178:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801817a:	4620      	mov	r0, r4
 801817c:	f001 fdc6 	bl	8019d0c <__multiply>
 8018180:	900e      	str	r0, [sp, #56]	; 0x38
 8018182:	2800      	cmp	r0, #0
 8018184:	f43f aea8 	beq.w	8017ed8 <_strtod_l+0x478>
 8018188:	9912      	ldr	r1, [sp, #72]	; 0x48
 801818a:	4620      	mov	r0, r4
 801818c:	f001 fca6 	bl	8019adc <_Bfree>
 8018190:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018192:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018194:	9212      	str	r2, [sp, #72]	; 0x48
 8018196:	2b00      	cmp	r3, #0
 8018198:	f300 8093 	bgt.w	80182c2 <_strtod_l+0x862>
 801819c:	9b07      	ldr	r3, [sp, #28]
 801819e:	2b00      	cmp	r3, #0
 80181a0:	dd08      	ble.n	80181b4 <_strtod_l+0x754>
 80181a2:	4639      	mov	r1, r7
 80181a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80181a6:	4620      	mov	r0, r4
 80181a8:	f001 fe5a 	bl	8019e60 <__pow5mult>
 80181ac:	4607      	mov	r7, r0
 80181ae:	2800      	cmp	r0, #0
 80181b0:	f43f ae92 	beq.w	8017ed8 <_strtod_l+0x478>
 80181b4:	f1ba 0f00 	cmp.w	sl, #0
 80181b8:	dd08      	ble.n	80181cc <_strtod_l+0x76c>
 80181ba:	4639      	mov	r1, r7
 80181bc:	4652      	mov	r2, sl
 80181be:	4620      	mov	r0, r4
 80181c0:	f001 fea8 	bl	8019f14 <__lshift>
 80181c4:	4607      	mov	r7, r0
 80181c6:	2800      	cmp	r0, #0
 80181c8:	f43f ae86 	beq.w	8017ed8 <_strtod_l+0x478>
 80181cc:	f1bb 0f00 	cmp.w	fp, #0
 80181d0:	dd08      	ble.n	80181e4 <_strtod_l+0x784>
 80181d2:	4631      	mov	r1, r6
 80181d4:	465a      	mov	r2, fp
 80181d6:	4620      	mov	r0, r4
 80181d8:	f001 fe9c 	bl	8019f14 <__lshift>
 80181dc:	4606      	mov	r6, r0
 80181de:	2800      	cmp	r0, #0
 80181e0:	f43f ae7a 	beq.w	8017ed8 <_strtod_l+0x478>
 80181e4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80181e6:	463a      	mov	r2, r7
 80181e8:	4620      	mov	r0, r4
 80181ea:	f001 ff1f 	bl	801a02c <__mdiff>
 80181ee:	4605      	mov	r5, r0
 80181f0:	2800      	cmp	r0, #0
 80181f2:	f43f ae71 	beq.w	8017ed8 <_strtod_l+0x478>
 80181f6:	2300      	movs	r3, #0
 80181f8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80181fc:	60c3      	str	r3, [r0, #12]
 80181fe:	4631      	mov	r1, r6
 8018200:	f001 fef8 	bl	8019ff4 <__mcmp>
 8018204:	2800      	cmp	r0, #0
 8018206:	da7d      	bge.n	8018304 <_strtod_l+0x8a4>
 8018208:	ea5a 0308 	orrs.w	r3, sl, r8
 801820c:	f040 80a3 	bne.w	8018356 <_strtod_l+0x8f6>
 8018210:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018214:	2b00      	cmp	r3, #0
 8018216:	f040 809e 	bne.w	8018356 <_strtod_l+0x8f6>
 801821a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801821e:	0d1b      	lsrs	r3, r3, #20
 8018220:	051b      	lsls	r3, r3, #20
 8018222:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8018226:	f240 8096 	bls.w	8018356 <_strtod_l+0x8f6>
 801822a:	696b      	ldr	r3, [r5, #20]
 801822c:	b91b      	cbnz	r3, 8018236 <_strtod_l+0x7d6>
 801822e:	692b      	ldr	r3, [r5, #16]
 8018230:	2b01      	cmp	r3, #1
 8018232:	f340 8090 	ble.w	8018356 <_strtod_l+0x8f6>
 8018236:	4629      	mov	r1, r5
 8018238:	2201      	movs	r2, #1
 801823a:	4620      	mov	r0, r4
 801823c:	f001 fe6a 	bl	8019f14 <__lshift>
 8018240:	4631      	mov	r1, r6
 8018242:	4605      	mov	r5, r0
 8018244:	f001 fed6 	bl	8019ff4 <__mcmp>
 8018248:	2800      	cmp	r0, #0
 801824a:	f340 8084 	ble.w	8018356 <_strtod_l+0x8f6>
 801824e:	9904      	ldr	r1, [sp, #16]
 8018250:	4a2b      	ldr	r2, [pc, #172]	; (8018300 <_strtod_l+0x8a0>)
 8018252:	464b      	mov	r3, r9
 8018254:	2900      	cmp	r1, #0
 8018256:	f000 809d 	beq.w	8018394 <_strtod_l+0x934>
 801825a:	ea02 0109 	and.w	r1, r2, r9
 801825e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8018262:	f300 8097 	bgt.w	8018394 <_strtod_l+0x934>
 8018266:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801826a:	f77f aea5 	ble.w	8017fb8 <_strtod_l+0x558>
 801826e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80182f0 <_strtod_l+0x890>
 8018272:	ec49 8b16 	vmov	d6, r8, r9
 8018276:	ee26 7b07 	vmul.f64	d7, d6, d7
 801827a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801827e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8018282:	4313      	orrs	r3, r2
 8018284:	bf08      	it	eq
 8018286:	2322      	moveq	r3, #34	; 0x22
 8018288:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801828c:	bf08      	it	eq
 801828e:	6023      	streq	r3, [r4, #0]
 8018290:	e62c      	b.n	8017eec <_strtod_l+0x48c>
 8018292:	f04f 31ff 	mov.w	r1, #4294967295
 8018296:	fa01 f202 	lsl.w	r2, r1, r2
 801829a:	ea02 0808 	and.w	r8, r2, r8
 801829e:	e6d9      	b.n	8018054 <_strtod_l+0x5f4>
 80182a0:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80182a4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80182a8:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80182ac:	33e2      	adds	r3, #226	; 0xe2
 80182ae:	fa00 f303 	lsl.w	r3, r0, r3
 80182b2:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 80182b6:	e73f      	b.n	8018138 <_strtod_l+0x6d8>
 80182b8:	2200      	movs	r2, #0
 80182ba:	2301      	movs	r3, #1
 80182bc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80182c0:	e73a      	b.n	8018138 <_strtod_l+0x6d8>
 80182c2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80182c4:	461a      	mov	r2, r3
 80182c6:	4620      	mov	r0, r4
 80182c8:	f001 fe24 	bl	8019f14 <__lshift>
 80182cc:	9012      	str	r0, [sp, #72]	; 0x48
 80182ce:	2800      	cmp	r0, #0
 80182d0:	f47f af64 	bne.w	801819c <_strtod_l+0x73c>
 80182d4:	e600      	b.n	8017ed8 <_strtod_l+0x478>
 80182d6:	bf00      	nop
 80182d8:	94a03595 	.word	0x94a03595
 80182dc:	3fcfffff 	.word	0x3fcfffff
 80182e0:	94a03595 	.word	0x94a03595
 80182e4:	3fdfffff 	.word	0x3fdfffff
 80182e8:	35afe535 	.word	0x35afe535
 80182ec:	3fe00000 	.word	0x3fe00000
 80182f0:	00000000 	.word	0x00000000
 80182f4:	39500000 	.word	0x39500000
 80182f8:	0801bc08 	.word	0x0801bc08
 80182fc:	fffffc02 	.word	0xfffffc02
 8018300:	7ff00000 	.word	0x7ff00000
 8018304:	46cb      	mov	fp, r9
 8018306:	d15f      	bne.n	80183c8 <_strtod_l+0x968>
 8018308:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801830c:	f1ba 0f00 	cmp.w	sl, #0
 8018310:	d02a      	beq.n	8018368 <_strtod_l+0x908>
 8018312:	4aa7      	ldr	r2, [pc, #668]	; (80185b0 <_strtod_l+0xb50>)
 8018314:	4293      	cmp	r3, r2
 8018316:	d12b      	bne.n	8018370 <_strtod_l+0x910>
 8018318:	9b04      	ldr	r3, [sp, #16]
 801831a:	4642      	mov	r2, r8
 801831c:	b1fb      	cbz	r3, 801835e <_strtod_l+0x8fe>
 801831e:	4ba5      	ldr	r3, [pc, #660]	; (80185b4 <_strtod_l+0xb54>)
 8018320:	ea09 0303 	and.w	r3, r9, r3
 8018324:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8018328:	f04f 31ff 	mov.w	r1, #4294967295
 801832c:	d81a      	bhi.n	8018364 <_strtod_l+0x904>
 801832e:	0d1b      	lsrs	r3, r3, #20
 8018330:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8018334:	fa01 f303 	lsl.w	r3, r1, r3
 8018338:	429a      	cmp	r2, r3
 801833a:	d119      	bne.n	8018370 <_strtod_l+0x910>
 801833c:	4b9e      	ldr	r3, [pc, #632]	; (80185b8 <_strtod_l+0xb58>)
 801833e:	459b      	cmp	fp, r3
 8018340:	d102      	bne.n	8018348 <_strtod_l+0x8e8>
 8018342:	3201      	adds	r2, #1
 8018344:	f43f adc8 	beq.w	8017ed8 <_strtod_l+0x478>
 8018348:	4b9a      	ldr	r3, [pc, #616]	; (80185b4 <_strtod_l+0xb54>)
 801834a:	ea0b 0303 	and.w	r3, fp, r3
 801834e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8018352:	f04f 0800 	mov.w	r8, #0
 8018356:	9b04      	ldr	r3, [sp, #16]
 8018358:	2b00      	cmp	r3, #0
 801835a:	d188      	bne.n	801826e <_strtod_l+0x80e>
 801835c:	e5c6      	b.n	8017eec <_strtod_l+0x48c>
 801835e:	f04f 33ff 	mov.w	r3, #4294967295
 8018362:	e7e9      	b.n	8018338 <_strtod_l+0x8d8>
 8018364:	460b      	mov	r3, r1
 8018366:	e7e7      	b.n	8018338 <_strtod_l+0x8d8>
 8018368:	ea53 0308 	orrs.w	r3, r3, r8
 801836c:	f43f af6f 	beq.w	801824e <_strtod_l+0x7ee>
 8018370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018372:	b1cb      	cbz	r3, 80183a8 <_strtod_l+0x948>
 8018374:	ea13 0f0b 	tst.w	r3, fp
 8018378:	d0ed      	beq.n	8018356 <_strtod_l+0x8f6>
 801837a:	9a04      	ldr	r2, [sp, #16]
 801837c:	4640      	mov	r0, r8
 801837e:	4649      	mov	r1, r9
 8018380:	f1ba 0f00 	cmp.w	sl, #0
 8018384:	d014      	beq.n	80183b0 <_strtod_l+0x950>
 8018386:	f7ff fb50 	bl	8017a2a <sulp>
 801838a:	ee38 7b00 	vadd.f64	d7, d8, d0
 801838e:	ec59 8b17 	vmov	r8, r9, d7
 8018392:	e7e0      	b.n	8018356 <_strtod_l+0x8f6>
 8018394:	4013      	ands	r3, r2
 8018396:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801839a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801839e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80183a2:	f04f 38ff 	mov.w	r8, #4294967295
 80183a6:	e7d6      	b.n	8018356 <_strtod_l+0x8f6>
 80183a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80183aa:	ea13 0f08 	tst.w	r3, r8
 80183ae:	e7e3      	b.n	8018378 <_strtod_l+0x918>
 80183b0:	f7ff fb3b 	bl	8017a2a <sulp>
 80183b4:	ee38 0b40 	vsub.f64	d0, d8, d0
 80183b8:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80183bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183c0:	ec59 8b10 	vmov	r8, r9, d0
 80183c4:	d1c7      	bne.n	8018356 <_strtod_l+0x8f6>
 80183c6:	e5f7      	b.n	8017fb8 <_strtod_l+0x558>
 80183c8:	4631      	mov	r1, r6
 80183ca:	4628      	mov	r0, r5
 80183cc:	f001 ff90 	bl	801a2f0 <__ratio>
 80183d0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80183d4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80183d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183dc:	d865      	bhi.n	80184aa <_strtod_l+0xa4a>
 80183de:	f1ba 0f00 	cmp.w	sl, #0
 80183e2:	d042      	beq.n	801846a <_strtod_l+0xa0a>
 80183e4:	4b75      	ldr	r3, [pc, #468]	; (80185bc <_strtod_l+0xb5c>)
 80183e6:	2200      	movs	r2, #0
 80183e8:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 80183ec:	4871      	ldr	r0, [pc, #452]	; (80185b4 <_strtod_l+0xb54>)
 80183ee:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 80185c8 <_strtod_l+0xb68>
 80183f2:	ea0b 0100 	and.w	r1, fp, r0
 80183f6:	4561      	cmp	r1, ip
 80183f8:	f040 808e 	bne.w	8018518 <_strtod_l+0xab8>
 80183fc:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8018400:	ec49 8b10 	vmov	d0, r8, r9
 8018404:	ec43 2b1c 	vmov	d12, r2, r3
 8018408:	910a      	str	r1, [sp, #40]	; 0x28
 801840a:	f001 fe99 	bl	801a140 <__ulp>
 801840e:	ec49 8b1e 	vmov	d14, r8, r9
 8018412:	4868      	ldr	r0, [pc, #416]	; (80185b4 <_strtod_l+0xb54>)
 8018414:	eeac eb00 	vfma.f64	d14, d12, d0
 8018418:	ee1e 3a90 	vmov	r3, s29
 801841c:	4a68      	ldr	r2, [pc, #416]	; (80185c0 <_strtod_l+0xb60>)
 801841e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8018420:	4018      	ands	r0, r3
 8018422:	4290      	cmp	r0, r2
 8018424:	ec59 8b1e 	vmov	r8, r9, d14
 8018428:	d94e      	bls.n	80184c8 <_strtod_l+0xa68>
 801842a:	ee18 3a90 	vmov	r3, s17
 801842e:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8018432:	4293      	cmp	r3, r2
 8018434:	d104      	bne.n	8018440 <_strtod_l+0x9e0>
 8018436:	ee18 3a10 	vmov	r3, s16
 801843a:	3301      	adds	r3, #1
 801843c:	f43f ad4c 	beq.w	8017ed8 <_strtod_l+0x478>
 8018440:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80185b8 <_strtod_l+0xb58>
 8018444:	f04f 38ff 	mov.w	r8, #4294967295
 8018448:	9912      	ldr	r1, [sp, #72]	; 0x48
 801844a:	4620      	mov	r0, r4
 801844c:	f001 fb46 	bl	8019adc <_Bfree>
 8018450:	4639      	mov	r1, r7
 8018452:	4620      	mov	r0, r4
 8018454:	f001 fb42 	bl	8019adc <_Bfree>
 8018458:	4631      	mov	r1, r6
 801845a:	4620      	mov	r0, r4
 801845c:	f001 fb3e 	bl	8019adc <_Bfree>
 8018460:	4629      	mov	r1, r5
 8018462:	4620      	mov	r0, r4
 8018464:	f001 fb3a 	bl	8019adc <_Bfree>
 8018468:	e619      	b.n	801809e <_strtod_l+0x63e>
 801846a:	f1b8 0f00 	cmp.w	r8, #0
 801846e:	d112      	bne.n	8018496 <_strtod_l+0xa36>
 8018470:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018474:	b9b3      	cbnz	r3, 80184a4 <_strtod_l+0xa44>
 8018476:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801847a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801847e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018482:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8018486:	bf58      	it	pl
 8018488:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 801848c:	eeb1 7b4d 	vneg.f64	d7, d13
 8018490:	ec53 2b17 	vmov	r2, r3, d7
 8018494:	e7aa      	b.n	80183ec <_strtod_l+0x98c>
 8018496:	f1b8 0f01 	cmp.w	r8, #1
 801849a:	d103      	bne.n	80184a4 <_strtod_l+0xa44>
 801849c:	f1b9 0f00 	cmp.w	r9, #0
 80184a0:	f43f ad8a 	beq.w	8017fb8 <_strtod_l+0x558>
 80184a4:	4b47      	ldr	r3, [pc, #284]	; (80185c4 <_strtod_l+0xb64>)
 80184a6:	2200      	movs	r2, #0
 80184a8:	e79e      	b.n	80183e8 <_strtod_l+0x988>
 80184aa:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80184ae:	ee20 db0d 	vmul.f64	d13, d0, d13
 80184b2:	f1ba 0f00 	cmp.w	sl, #0
 80184b6:	d104      	bne.n	80184c2 <_strtod_l+0xa62>
 80184b8:	eeb1 7b4d 	vneg.f64	d7, d13
 80184bc:	ec53 2b17 	vmov	r2, r3, d7
 80184c0:	e794      	b.n	80183ec <_strtod_l+0x98c>
 80184c2:	eeb0 7b4d 	vmov.f64	d7, d13
 80184c6:	e7f9      	b.n	80184bc <_strtod_l+0xa5c>
 80184c8:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80184cc:	9b04      	ldr	r3, [sp, #16]
 80184ce:	2b00      	cmp	r3, #0
 80184d0:	d1ba      	bne.n	8018448 <_strtod_l+0x9e8>
 80184d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80184d6:	0d1b      	lsrs	r3, r3, #20
 80184d8:	051b      	lsls	r3, r3, #20
 80184da:	4299      	cmp	r1, r3
 80184dc:	d1b4      	bne.n	8018448 <_strtod_l+0x9e8>
 80184de:	ec51 0b1d 	vmov	r0, r1, d13
 80184e2:	f7e8 f951 	bl	8000788 <__aeabi_d2lz>
 80184e6:	f7e8 f909 	bl	80006fc <__aeabi_l2d>
 80184ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80184ee:	ec41 0b17 	vmov	d7, r0, r1
 80184f2:	ea43 0308 	orr.w	r3, r3, r8
 80184f6:	ea53 030a 	orrs.w	r3, r3, sl
 80184fa:	ee3d db47 	vsub.f64	d13, d13, d7
 80184fe:	d03c      	beq.n	801857a <_strtod_l+0xb1a>
 8018500:	eeb4 dbca 	vcmpe.f64	d13, d10
 8018504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018508:	f53f acf0 	bmi.w	8017eec <_strtod_l+0x48c>
 801850c:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8018510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018514:	dd98      	ble.n	8018448 <_strtod_l+0x9e8>
 8018516:	e4e9      	b.n	8017eec <_strtod_l+0x48c>
 8018518:	9804      	ldr	r0, [sp, #16]
 801851a:	b1f0      	cbz	r0, 801855a <_strtod_l+0xafa>
 801851c:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8018520:	d81b      	bhi.n	801855a <_strtod_l+0xafa>
 8018522:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80185a8 <_strtod_l+0xb48>
 8018526:	eeb4 dbc7 	vcmpe.f64	d13, d7
 801852a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801852e:	d811      	bhi.n	8018554 <_strtod_l+0xaf4>
 8018530:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8018534:	ee1d 3a10 	vmov	r3, s26
 8018538:	2b01      	cmp	r3, #1
 801853a:	bf38      	it	cc
 801853c:	2301      	movcc	r3, #1
 801853e:	ee0d 3a10 	vmov	s26, r3
 8018542:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8018546:	f1ba 0f00 	cmp.w	sl, #0
 801854a:	d113      	bne.n	8018574 <_strtod_l+0xb14>
 801854c:	eeb1 7b4d 	vneg.f64	d7, d13
 8018550:	ec53 2b17 	vmov	r2, r3, d7
 8018554:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8018558:	1a43      	subs	r3, r0, r1
 801855a:	eeb0 0b48 	vmov.f64	d0, d8
 801855e:	ec43 2b1c 	vmov	d12, r2, r3
 8018562:	910a      	str	r1, [sp, #40]	; 0x28
 8018564:	f001 fdec 	bl	801a140 <__ulp>
 8018568:	990a      	ldr	r1, [sp, #40]	; 0x28
 801856a:	eeac 8b00 	vfma.f64	d8, d12, d0
 801856e:	ec59 8b18 	vmov	r8, r9, d8
 8018572:	e7ab      	b.n	80184cc <_strtod_l+0xa6c>
 8018574:	eeb0 7b4d 	vmov.f64	d7, d13
 8018578:	e7ea      	b.n	8018550 <_strtod_l+0xaf0>
 801857a:	eeb4 dbc9 	vcmpe.f64	d13, d9
 801857e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018582:	f57f af61 	bpl.w	8018448 <_strtod_l+0x9e8>
 8018586:	e4b1      	b.n	8017eec <_strtod_l+0x48c>
 8018588:	2300      	movs	r3, #0
 801858a:	9308      	str	r3, [sp, #32]
 801858c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801858e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018590:	6013      	str	r3, [r2, #0]
 8018592:	f7ff baad 	b.w	8017af0 <_strtod_l+0x90>
 8018596:	2a65      	cmp	r2, #101	; 0x65
 8018598:	f43f ab9f 	beq.w	8017cda <_strtod_l+0x27a>
 801859c:	2a45      	cmp	r2, #69	; 0x45
 801859e:	f43f ab9c 	beq.w	8017cda <_strtod_l+0x27a>
 80185a2:	2101      	movs	r1, #1
 80185a4:	f7ff bbd4 	b.w	8017d50 <_strtod_l+0x2f0>
 80185a8:	ffc00000 	.word	0xffc00000
 80185ac:	41dfffff 	.word	0x41dfffff
 80185b0:	000fffff 	.word	0x000fffff
 80185b4:	7ff00000 	.word	0x7ff00000
 80185b8:	7fefffff 	.word	0x7fefffff
 80185bc:	3ff00000 	.word	0x3ff00000
 80185c0:	7c9fffff 	.word	0x7c9fffff
 80185c4:	bff00000 	.word	0xbff00000
 80185c8:	7fe00000 	.word	0x7fe00000

080185cc <_strtod_r>:
 80185cc:	4b01      	ldr	r3, [pc, #4]	; (80185d4 <_strtod_r+0x8>)
 80185ce:	f7ff ba47 	b.w	8017a60 <_strtod_l>
 80185d2:	bf00      	nop
 80185d4:	24000168 	.word	0x24000168

080185d8 <_strtol_l.constprop.0>:
 80185d8:	2b01      	cmp	r3, #1
 80185da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80185de:	d001      	beq.n	80185e4 <_strtol_l.constprop.0+0xc>
 80185e0:	2b24      	cmp	r3, #36	; 0x24
 80185e2:	d906      	bls.n	80185f2 <_strtol_l.constprop.0+0x1a>
 80185e4:	f7fe fb30 	bl	8016c48 <__errno>
 80185e8:	2316      	movs	r3, #22
 80185ea:	6003      	str	r3, [r0, #0]
 80185ec:	2000      	movs	r0, #0
 80185ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80185f2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80186d8 <_strtol_l.constprop.0+0x100>
 80185f6:	460d      	mov	r5, r1
 80185f8:	462e      	mov	r6, r5
 80185fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80185fe:	f814 700c 	ldrb.w	r7, [r4, ip]
 8018602:	f017 0708 	ands.w	r7, r7, #8
 8018606:	d1f7      	bne.n	80185f8 <_strtol_l.constprop.0+0x20>
 8018608:	2c2d      	cmp	r4, #45	; 0x2d
 801860a:	d132      	bne.n	8018672 <_strtol_l.constprop.0+0x9a>
 801860c:	782c      	ldrb	r4, [r5, #0]
 801860e:	2701      	movs	r7, #1
 8018610:	1cb5      	adds	r5, r6, #2
 8018612:	2b00      	cmp	r3, #0
 8018614:	d05b      	beq.n	80186ce <_strtol_l.constprop.0+0xf6>
 8018616:	2b10      	cmp	r3, #16
 8018618:	d109      	bne.n	801862e <_strtol_l.constprop.0+0x56>
 801861a:	2c30      	cmp	r4, #48	; 0x30
 801861c:	d107      	bne.n	801862e <_strtol_l.constprop.0+0x56>
 801861e:	782c      	ldrb	r4, [r5, #0]
 8018620:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8018624:	2c58      	cmp	r4, #88	; 0x58
 8018626:	d14d      	bne.n	80186c4 <_strtol_l.constprop.0+0xec>
 8018628:	786c      	ldrb	r4, [r5, #1]
 801862a:	2310      	movs	r3, #16
 801862c:	3502      	adds	r5, #2
 801862e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8018632:	f108 38ff 	add.w	r8, r8, #4294967295
 8018636:	f04f 0c00 	mov.w	ip, #0
 801863a:	fbb8 f9f3 	udiv	r9, r8, r3
 801863e:	4666      	mov	r6, ip
 8018640:	fb03 8a19 	mls	sl, r3, r9, r8
 8018644:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8018648:	f1be 0f09 	cmp.w	lr, #9
 801864c:	d816      	bhi.n	801867c <_strtol_l.constprop.0+0xa4>
 801864e:	4674      	mov	r4, lr
 8018650:	42a3      	cmp	r3, r4
 8018652:	dd24      	ble.n	801869e <_strtol_l.constprop.0+0xc6>
 8018654:	f1bc 0f00 	cmp.w	ip, #0
 8018658:	db1e      	blt.n	8018698 <_strtol_l.constprop.0+0xc0>
 801865a:	45b1      	cmp	r9, r6
 801865c:	d31c      	bcc.n	8018698 <_strtol_l.constprop.0+0xc0>
 801865e:	d101      	bne.n	8018664 <_strtol_l.constprop.0+0x8c>
 8018660:	45a2      	cmp	sl, r4
 8018662:	db19      	blt.n	8018698 <_strtol_l.constprop.0+0xc0>
 8018664:	fb06 4603 	mla	r6, r6, r3, r4
 8018668:	f04f 0c01 	mov.w	ip, #1
 801866c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018670:	e7e8      	b.n	8018644 <_strtol_l.constprop.0+0x6c>
 8018672:	2c2b      	cmp	r4, #43	; 0x2b
 8018674:	bf04      	itt	eq
 8018676:	782c      	ldrbeq	r4, [r5, #0]
 8018678:	1cb5      	addeq	r5, r6, #2
 801867a:	e7ca      	b.n	8018612 <_strtol_l.constprop.0+0x3a>
 801867c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8018680:	f1be 0f19 	cmp.w	lr, #25
 8018684:	d801      	bhi.n	801868a <_strtol_l.constprop.0+0xb2>
 8018686:	3c37      	subs	r4, #55	; 0x37
 8018688:	e7e2      	b.n	8018650 <_strtol_l.constprop.0+0x78>
 801868a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801868e:	f1be 0f19 	cmp.w	lr, #25
 8018692:	d804      	bhi.n	801869e <_strtol_l.constprop.0+0xc6>
 8018694:	3c57      	subs	r4, #87	; 0x57
 8018696:	e7db      	b.n	8018650 <_strtol_l.constprop.0+0x78>
 8018698:	f04f 3cff 	mov.w	ip, #4294967295
 801869c:	e7e6      	b.n	801866c <_strtol_l.constprop.0+0x94>
 801869e:	f1bc 0f00 	cmp.w	ip, #0
 80186a2:	da05      	bge.n	80186b0 <_strtol_l.constprop.0+0xd8>
 80186a4:	2322      	movs	r3, #34	; 0x22
 80186a6:	6003      	str	r3, [r0, #0]
 80186a8:	4646      	mov	r6, r8
 80186aa:	b942      	cbnz	r2, 80186be <_strtol_l.constprop.0+0xe6>
 80186ac:	4630      	mov	r0, r6
 80186ae:	e79e      	b.n	80185ee <_strtol_l.constprop.0+0x16>
 80186b0:	b107      	cbz	r7, 80186b4 <_strtol_l.constprop.0+0xdc>
 80186b2:	4276      	negs	r6, r6
 80186b4:	2a00      	cmp	r2, #0
 80186b6:	d0f9      	beq.n	80186ac <_strtol_l.constprop.0+0xd4>
 80186b8:	f1bc 0f00 	cmp.w	ip, #0
 80186bc:	d000      	beq.n	80186c0 <_strtol_l.constprop.0+0xe8>
 80186be:	1e69      	subs	r1, r5, #1
 80186c0:	6011      	str	r1, [r2, #0]
 80186c2:	e7f3      	b.n	80186ac <_strtol_l.constprop.0+0xd4>
 80186c4:	2430      	movs	r4, #48	; 0x30
 80186c6:	2b00      	cmp	r3, #0
 80186c8:	d1b1      	bne.n	801862e <_strtol_l.constprop.0+0x56>
 80186ca:	2308      	movs	r3, #8
 80186cc:	e7af      	b.n	801862e <_strtol_l.constprop.0+0x56>
 80186ce:	2c30      	cmp	r4, #48	; 0x30
 80186d0:	d0a5      	beq.n	801861e <_strtol_l.constprop.0+0x46>
 80186d2:	230a      	movs	r3, #10
 80186d4:	e7ab      	b.n	801862e <_strtol_l.constprop.0+0x56>
 80186d6:	bf00      	nop
 80186d8:	0801bc31 	.word	0x0801bc31

080186dc <_strtol_r>:
 80186dc:	f7ff bf7c 	b.w	80185d8 <_strtol_l.constprop.0>

080186e0 <_write_r>:
 80186e0:	b538      	push	{r3, r4, r5, lr}
 80186e2:	4d07      	ldr	r5, [pc, #28]	; (8018700 <_write_r+0x20>)
 80186e4:	4604      	mov	r4, r0
 80186e6:	4608      	mov	r0, r1
 80186e8:	4611      	mov	r1, r2
 80186ea:	2200      	movs	r2, #0
 80186ec:	602a      	str	r2, [r5, #0]
 80186ee:	461a      	mov	r2, r3
 80186f0:	f7ea ff25 	bl	800353e <_write>
 80186f4:	1c43      	adds	r3, r0, #1
 80186f6:	d102      	bne.n	80186fe <_write_r+0x1e>
 80186f8:	682b      	ldr	r3, [r5, #0]
 80186fa:	b103      	cbz	r3, 80186fe <_write_r+0x1e>
 80186fc:	6023      	str	r3, [r4, #0]
 80186fe:	bd38      	pop	{r3, r4, r5, pc}
 8018700:	24003244 	.word	0x24003244

08018704 <_close_r>:
 8018704:	b538      	push	{r3, r4, r5, lr}
 8018706:	4d06      	ldr	r5, [pc, #24]	; (8018720 <_close_r+0x1c>)
 8018708:	2300      	movs	r3, #0
 801870a:	4604      	mov	r4, r0
 801870c:	4608      	mov	r0, r1
 801870e:	602b      	str	r3, [r5, #0]
 8018710:	f7ea ff31 	bl	8003576 <_close>
 8018714:	1c43      	adds	r3, r0, #1
 8018716:	d102      	bne.n	801871e <_close_r+0x1a>
 8018718:	682b      	ldr	r3, [r5, #0]
 801871a:	b103      	cbz	r3, 801871e <_close_r+0x1a>
 801871c:	6023      	str	r3, [r4, #0]
 801871e:	bd38      	pop	{r3, r4, r5, pc}
 8018720:	24003244 	.word	0x24003244

08018724 <quorem>:
 8018724:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018728:	6903      	ldr	r3, [r0, #16]
 801872a:	690c      	ldr	r4, [r1, #16]
 801872c:	42a3      	cmp	r3, r4
 801872e:	4607      	mov	r7, r0
 8018730:	f2c0 8081 	blt.w	8018836 <quorem+0x112>
 8018734:	3c01      	subs	r4, #1
 8018736:	f101 0814 	add.w	r8, r1, #20
 801873a:	f100 0514 	add.w	r5, r0, #20
 801873e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018742:	9301      	str	r3, [sp, #4]
 8018744:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8018748:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801874c:	3301      	adds	r3, #1
 801874e:	429a      	cmp	r2, r3
 8018750:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8018754:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8018758:	fbb2 f6f3 	udiv	r6, r2, r3
 801875c:	d331      	bcc.n	80187c2 <quorem+0x9e>
 801875e:	f04f 0e00 	mov.w	lr, #0
 8018762:	4640      	mov	r0, r8
 8018764:	46ac      	mov	ip, r5
 8018766:	46f2      	mov	sl, lr
 8018768:	f850 2b04 	ldr.w	r2, [r0], #4
 801876c:	b293      	uxth	r3, r2
 801876e:	fb06 e303 	mla	r3, r6, r3, lr
 8018772:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8018776:	b29b      	uxth	r3, r3
 8018778:	ebaa 0303 	sub.w	r3, sl, r3
 801877c:	f8dc a000 	ldr.w	sl, [ip]
 8018780:	0c12      	lsrs	r2, r2, #16
 8018782:	fa13 f38a 	uxtah	r3, r3, sl
 8018786:	fb06 e202 	mla	r2, r6, r2, lr
 801878a:	9300      	str	r3, [sp, #0]
 801878c:	9b00      	ldr	r3, [sp, #0]
 801878e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8018792:	b292      	uxth	r2, r2
 8018794:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8018798:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801879c:	f8bd 3000 	ldrh.w	r3, [sp]
 80187a0:	4581      	cmp	r9, r0
 80187a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80187a6:	f84c 3b04 	str.w	r3, [ip], #4
 80187aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80187ae:	d2db      	bcs.n	8018768 <quorem+0x44>
 80187b0:	f855 300b 	ldr.w	r3, [r5, fp]
 80187b4:	b92b      	cbnz	r3, 80187c2 <quorem+0x9e>
 80187b6:	9b01      	ldr	r3, [sp, #4]
 80187b8:	3b04      	subs	r3, #4
 80187ba:	429d      	cmp	r5, r3
 80187bc:	461a      	mov	r2, r3
 80187be:	d32e      	bcc.n	801881e <quorem+0xfa>
 80187c0:	613c      	str	r4, [r7, #16]
 80187c2:	4638      	mov	r0, r7
 80187c4:	f001 fc16 	bl	8019ff4 <__mcmp>
 80187c8:	2800      	cmp	r0, #0
 80187ca:	db24      	blt.n	8018816 <quorem+0xf2>
 80187cc:	3601      	adds	r6, #1
 80187ce:	4628      	mov	r0, r5
 80187d0:	f04f 0c00 	mov.w	ip, #0
 80187d4:	f858 2b04 	ldr.w	r2, [r8], #4
 80187d8:	f8d0 e000 	ldr.w	lr, [r0]
 80187dc:	b293      	uxth	r3, r2
 80187de:	ebac 0303 	sub.w	r3, ip, r3
 80187e2:	0c12      	lsrs	r2, r2, #16
 80187e4:	fa13 f38e 	uxtah	r3, r3, lr
 80187e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80187ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80187f0:	b29b      	uxth	r3, r3
 80187f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80187f6:	45c1      	cmp	r9, r8
 80187f8:	f840 3b04 	str.w	r3, [r0], #4
 80187fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8018800:	d2e8      	bcs.n	80187d4 <quorem+0xb0>
 8018802:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018806:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801880a:	b922      	cbnz	r2, 8018816 <quorem+0xf2>
 801880c:	3b04      	subs	r3, #4
 801880e:	429d      	cmp	r5, r3
 8018810:	461a      	mov	r2, r3
 8018812:	d30a      	bcc.n	801882a <quorem+0x106>
 8018814:	613c      	str	r4, [r7, #16]
 8018816:	4630      	mov	r0, r6
 8018818:	b003      	add	sp, #12
 801881a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801881e:	6812      	ldr	r2, [r2, #0]
 8018820:	3b04      	subs	r3, #4
 8018822:	2a00      	cmp	r2, #0
 8018824:	d1cc      	bne.n	80187c0 <quorem+0x9c>
 8018826:	3c01      	subs	r4, #1
 8018828:	e7c7      	b.n	80187ba <quorem+0x96>
 801882a:	6812      	ldr	r2, [r2, #0]
 801882c:	3b04      	subs	r3, #4
 801882e:	2a00      	cmp	r2, #0
 8018830:	d1f0      	bne.n	8018814 <quorem+0xf0>
 8018832:	3c01      	subs	r4, #1
 8018834:	e7eb      	b.n	801880e <quorem+0xea>
 8018836:	2000      	movs	r0, #0
 8018838:	e7ee      	b.n	8018818 <quorem+0xf4>
 801883a:	0000      	movs	r0, r0
 801883c:	0000      	movs	r0, r0
	...

08018840 <_dtoa_r>:
 8018840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018844:	ed2d 8b02 	vpush	{d8}
 8018848:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801884a:	b091      	sub	sp, #68	; 0x44
 801884c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8018850:	ec59 8b10 	vmov	r8, r9, d0
 8018854:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8018856:	9106      	str	r1, [sp, #24]
 8018858:	4606      	mov	r6, r0
 801885a:	9208      	str	r2, [sp, #32]
 801885c:	930c      	str	r3, [sp, #48]	; 0x30
 801885e:	b975      	cbnz	r5, 801887e <_dtoa_r+0x3e>
 8018860:	2010      	movs	r0, #16
 8018862:	f001 f8e1 	bl	8019a28 <malloc>
 8018866:	4602      	mov	r2, r0
 8018868:	6270      	str	r0, [r6, #36]	; 0x24
 801886a:	b920      	cbnz	r0, 8018876 <_dtoa_r+0x36>
 801886c:	4baa      	ldr	r3, [pc, #680]	; (8018b18 <_dtoa_r+0x2d8>)
 801886e:	21ea      	movs	r1, #234	; 0xea
 8018870:	48aa      	ldr	r0, [pc, #680]	; (8018b1c <_dtoa_r+0x2dc>)
 8018872:	f002 f84f 	bl	801a914 <__assert_func>
 8018876:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801887a:	6005      	str	r5, [r0, #0]
 801887c:	60c5      	str	r5, [r0, #12]
 801887e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018880:	6819      	ldr	r1, [r3, #0]
 8018882:	b151      	cbz	r1, 801889a <_dtoa_r+0x5a>
 8018884:	685a      	ldr	r2, [r3, #4]
 8018886:	604a      	str	r2, [r1, #4]
 8018888:	2301      	movs	r3, #1
 801888a:	4093      	lsls	r3, r2
 801888c:	608b      	str	r3, [r1, #8]
 801888e:	4630      	mov	r0, r6
 8018890:	f001 f924 	bl	8019adc <_Bfree>
 8018894:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018896:	2200      	movs	r2, #0
 8018898:	601a      	str	r2, [r3, #0]
 801889a:	f1b9 0300 	subs.w	r3, r9, #0
 801889e:	bfbb      	ittet	lt
 80188a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80188a4:	9303      	strlt	r3, [sp, #12]
 80188a6:	2300      	movge	r3, #0
 80188a8:	2201      	movlt	r2, #1
 80188aa:	bfac      	ite	ge
 80188ac:	6023      	strge	r3, [r4, #0]
 80188ae:	6022      	strlt	r2, [r4, #0]
 80188b0:	4b9b      	ldr	r3, [pc, #620]	; (8018b20 <_dtoa_r+0x2e0>)
 80188b2:	9c03      	ldr	r4, [sp, #12]
 80188b4:	43a3      	bics	r3, r4
 80188b6:	d11c      	bne.n	80188f2 <_dtoa_r+0xb2>
 80188b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80188ba:	f242 730f 	movw	r3, #9999	; 0x270f
 80188be:	6013      	str	r3, [r2, #0]
 80188c0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80188c4:	ea53 0308 	orrs.w	r3, r3, r8
 80188c8:	f000 84fd 	beq.w	80192c6 <_dtoa_r+0xa86>
 80188cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80188ce:	b963      	cbnz	r3, 80188ea <_dtoa_r+0xaa>
 80188d0:	4b94      	ldr	r3, [pc, #592]	; (8018b24 <_dtoa_r+0x2e4>)
 80188d2:	e01f      	b.n	8018914 <_dtoa_r+0xd4>
 80188d4:	4b94      	ldr	r3, [pc, #592]	; (8018b28 <_dtoa_r+0x2e8>)
 80188d6:	9301      	str	r3, [sp, #4]
 80188d8:	3308      	adds	r3, #8
 80188da:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80188dc:	6013      	str	r3, [r2, #0]
 80188de:	9801      	ldr	r0, [sp, #4]
 80188e0:	b011      	add	sp, #68	; 0x44
 80188e2:	ecbd 8b02 	vpop	{d8}
 80188e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188ea:	4b8e      	ldr	r3, [pc, #568]	; (8018b24 <_dtoa_r+0x2e4>)
 80188ec:	9301      	str	r3, [sp, #4]
 80188ee:	3303      	adds	r3, #3
 80188f0:	e7f3      	b.n	80188da <_dtoa_r+0x9a>
 80188f2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80188f6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80188fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188fe:	d10b      	bne.n	8018918 <_dtoa_r+0xd8>
 8018900:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018902:	2301      	movs	r3, #1
 8018904:	6013      	str	r3, [r2, #0]
 8018906:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018908:	2b00      	cmp	r3, #0
 801890a:	f000 84d9 	beq.w	80192c0 <_dtoa_r+0xa80>
 801890e:	4887      	ldr	r0, [pc, #540]	; (8018b2c <_dtoa_r+0x2ec>)
 8018910:	6018      	str	r0, [r3, #0]
 8018912:	1e43      	subs	r3, r0, #1
 8018914:	9301      	str	r3, [sp, #4]
 8018916:	e7e2      	b.n	80188de <_dtoa_r+0x9e>
 8018918:	a90f      	add	r1, sp, #60	; 0x3c
 801891a:	aa0e      	add	r2, sp, #56	; 0x38
 801891c:	4630      	mov	r0, r6
 801891e:	eeb0 0b48 	vmov.f64	d0, d8
 8018922:	f001 fc89 	bl	801a238 <__d2b>
 8018926:	f3c4 510a 	ubfx	r1, r4, #20, #11
 801892a:	4605      	mov	r5, r0
 801892c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801892e:	2900      	cmp	r1, #0
 8018930:	d046      	beq.n	80189c0 <_dtoa_r+0x180>
 8018932:	ee18 4a90 	vmov	r4, s17
 8018936:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801893a:	ec53 2b18 	vmov	r2, r3, d8
 801893e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8018942:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8018946:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801894a:	2400      	movs	r4, #0
 801894c:	ec43 2b16 	vmov	d6, r2, r3
 8018950:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8018954:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8018b00 <_dtoa_r+0x2c0>
 8018958:	ee36 7b47 	vsub.f64	d7, d6, d7
 801895c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8018b08 <_dtoa_r+0x2c8>
 8018960:	eea7 6b05 	vfma.f64	d6, d7, d5
 8018964:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8018b10 <_dtoa_r+0x2d0>
 8018968:	ee07 1a90 	vmov	s15, r1
 801896c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8018970:	eeb0 7b46 	vmov.f64	d7, d6
 8018974:	eea4 7b05 	vfma.f64	d7, d4, d5
 8018978:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801897c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8018980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018984:	ee16 ba90 	vmov	fp, s13
 8018988:	940a      	str	r4, [sp, #40]	; 0x28
 801898a:	d508      	bpl.n	801899e <_dtoa_r+0x15e>
 801898c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8018990:	eeb4 6b47 	vcmp.f64	d6, d7
 8018994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018998:	bf18      	it	ne
 801899a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801899e:	f1bb 0f16 	cmp.w	fp, #22
 80189a2:	d82f      	bhi.n	8018a04 <_dtoa_r+0x1c4>
 80189a4:	4b62      	ldr	r3, [pc, #392]	; (8018b30 <_dtoa_r+0x2f0>)
 80189a6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80189aa:	ed93 7b00 	vldr	d7, [r3]
 80189ae:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80189b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189b6:	d501      	bpl.n	80189bc <_dtoa_r+0x17c>
 80189b8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80189bc:	2300      	movs	r3, #0
 80189be:	e022      	b.n	8018a06 <_dtoa_r+0x1c6>
 80189c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80189c2:	4401      	add	r1, r0
 80189c4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80189c8:	2b20      	cmp	r3, #32
 80189ca:	bfc1      	itttt	gt
 80189cc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80189d0:	fa04 f303 	lslgt.w	r3, r4, r3
 80189d4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80189d8:	fa28 f804 	lsrgt.w	r8, r8, r4
 80189dc:	bfd6      	itet	le
 80189de:	f1c3 0320 	rsble	r3, r3, #32
 80189e2:	ea43 0808 	orrgt.w	r8, r3, r8
 80189e6:	fa08 f803 	lslle.w	r8, r8, r3
 80189ea:	ee07 8a90 	vmov	s15, r8
 80189ee:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80189f2:	3901      	subs	r1, #1
 80189f4:	ee17 4a90 	vmov	r4, s15
 80189f8:	ec53 2b17 	vmov	r2, r3, d7
 80189fc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8018a00:	2401      	movs	r4, #1
 8018a02:	e7a3      	b.n	801894c <_dtoa_r+0x10c>
 8018a04:	2301      	movs	r3, #1
 8018a06:	930b      	str	r3, [sp, #44]	; 0x2c
 8018a08:	1a43      	subs	r3, r0, r1
 8018a0a:	1e5a      	subs	r2, r3, #1
 8018a0c:	bf45      	ittet	mi
 8018a0e:	f1c3 0301 	rsbmi	r3, r3, #1
 8018a12:	9304      	strmi	r3, [sp, #16]
 8018a14:	2300      	movpl	r3, #0
 8018a16:	2300      	movmi	r3, #0
 8018a18:	9205      	str	r2, [sp, #20]
 8018a1a:	bf54      	ite	pl
 8018a1c:	9304      	strpl	r3, [sp, #16]
 8018a1e:	9305      	strmi	r3, [sp, #20]
 8018a20:	f1bb 0f00 	cmp.w	fp, #0
 8018a24:	db18      	blt.n	8018a58 <_dtoa_r+0x218>
 8018a26:	9b05      	ldr	r3, [sp, #20]
 8018a28:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8018a2c:	445b      	add	r3, fp
 8018a2e:	9305      	str	r3, [sp, #20]
 8018a30:	2300      	movs	r3, #0
 8018a32:	9a06      	ldr	r2, [sp, #24]
 8018a34:	2a09      	cmp	r2, #9
 8018a36:	d849      	bhi.n	8018acc <_dtoa_r+0x28c>
 8018a38:	2a05      	cmp	r2, #5
 8018a3a:	bfc4      	itt	gt
 8018a3c:	3a04      	subgt	r2, #4
 8018a3e:	9206      	strgt	r2, [sp, #24]
 8018a40:	9a06      	ldr	r2, [sp, #24]
 8018a42:	f1a2 0202 	sub.w	r2, r2, #2
 8018a46:	bfcc      	ite	gt
 8018a48:	2400      	movgt	r4, #0
 8018a4a:	2401      	movle	r4, #1
 8018a4c:	2a03      	cmp	r2, #3
 8018a4e:	d848      	bhi.n	8018ae2 <_dtoa_r+0x2a2>
 8018a50:	e8df f002 	tbb	[pc, r2]
 8018a54:	3a2c2e0b 	.word	0x3a2c2e0b
 8018a58:	9b04      	ldr	r3, [sp, #16]
 8018a5a:	2200      	movs	r2, #0
 8018a5c:	eba3 030b 	sub.w	r3, r3, fp
 8018a60:	9304      	str	r3, [sp, #16]
 8018a62:	9209      	str	r2, [sp, #36]	; 0x24
 8018a64:	f1cb 0300 	rsb	r3, fp, #0
 8018a68:	e7e3      	b.n	8018a32 <_dtoa_r+0x1f2>
 8018a6a:	2200      	movs	r2, #0
 8018a6c:	9207      	str	r2, [sp, #28]
 8018a6e:	9a08      	ldr	r2, [sp, #32]
 8018a70:	2a00      	cmp	r2, #0
 8018a72:	dc39      	bgt.n	8018ae8 <_dtoa_r+0x2a8>
 8018a74:	f04f 0a01 	mov.w	sl, #1
 8018a78:	46d1      	mov	r9, sl
 8018a7a:	4652      	mov	r2, sl
 8018a7c:	f8cd a020 	str.w	sl, [sp, #32]
 8018a80:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8018a82:	2100      	movs	r1, #0
 8018a84:	6079      	str	r1, [r7, #4]
 8018a86:	2004      	movs	r0, #4
 8018a88:	f100 0c14 	add.w	ip, r0, #20
 8018a8c:	4594      	cmp	ip, r2
 8018a8e:	6879      	ldr	r1, [r7, #4]
 8018a90:	d92f      	bls.n	8018af2 <_dtoa_r+0x2b2>
 8018a92:	4630      	mov	r0, r6
 8018a94:	930d      	str	r3, [sp, #52]	; 0x34
 8018a96:	f000 ffe1 	bl	8019a5c <_Balloc>
 8018a9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018a9c:	9001      	str	r0, [sp, #4]
 8018a9e:	4602      	mov	r2, r0
 8018aa0:	2800      	cmp	r0, #0
 8018aa2:	d149      	bne.n	8018b38 <_dtoa_r+0x2f8>
 8018aa4:	4b23      	ldr	r3, [pc, #140]	; (8018b34 <_dtoa_r+0x2f4>)
 8018aa6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8018aaa:	e6e1      	b.n	8018870 <_dtoa_r+0x30>
 8018aac:	2201      	movs	r2, #1
 8018aae:	e7dd      	b.n	8018a6c <_dtoa_r+0x22c>
 8018ab0:	2200      	movs	r2, #0
 8018ab2:	9207      	str	r2, [sp, #28]
 8018ab4:	9a08      	ldr	r2, [sp, #32]
 8018ab6:	eb0b 0a02 	add.w	sl, fp, r2
 8018aba:	f10a 0901 	add.w	r9, sl, #1
 8018abe:	464a      	mov	r2, r9
 8018ac0:	2a01      	cmp	r2, #1
 8018ac2:	bfb8      	it	lt
 8018ac4:	2201      	movlt	r2, #1
 8018ac6:	e7db      	b.n	8018a80 <_dtoa_r+0x240>
 8018ac8:	2201      	movs	r2, #1
 8018aca:	e7f2      	b.n	8018ab2 <_dtoa_r+0x272>
 8018acc:	2401      	movs	r4, #1
 8018ace:	2200      	movs	r2, #0
 8018ad0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8018ad4:	f04f 3aff 	mov.w	sl, #4294967295
 8018ad8:	2100      	movs	r1, #0
 8018ada:	46d1      	mov	r9, sl
 8018adc:	2212      	movs	r2, #18
 8018ade:	9108      	str	r1, [sp, #32]
 8018ae0:	e7ce      	b.n	8018a80 <_dtoa_r+0x240>
 8018ae2:	2201      	movs	r2, #1
 8018ae4:	9207      	str	r2, [sp, #28]
 8018ae6:	e7f5      	b.n	8018ad4 <_dtoa_r+0x294>
 8018ae8:	f8dd a020 	ldr.w	sl, [sp, #32]
 8018aec:	46d1      	mov	r9, sl
 8018aee:	4652      	mov	r2, sl
 8018af0:	e7c6      	b.n	8018a80 <_dtoa_r+0x240>
 8018af2:	3101      	adds	r1, #1
 8018af4:	6079      	str	r1, [r7, #4]
 8018af6:	0040      	lsls	r0, r0, #1
 8018af8:	e7c6      	b.n	8018a88 <_dtoa_r+0x248>
 8018afa:	bf00      	nop
 8018afc:	f3af 8000 	nop.w
 8018b00:	636f4361 	.word	0x636f4361
 8018b04:	3fd287a7 	.word	0x3fd287a7
 8018b08:	8b60c8b3 	.word	0x8b60c8b3
 8018b0c:	3fc68a28 	.word	0x3fc68a28
 8018b10:	509f79fb 	.word	0x509f79fb
 8018b14:	3fd34413 	.word	0x3fd34413
 8018b18:	0801bd3e 	.word	0x0801bd3e
 8018b1c:	0801bd55 	.word	0x0801bd55
 8018b20:	7ff00000 	.word	0x7ff00000
 8018b24:	0801bd3a 	.word	0x0801bd3a
 8018b28:	0801bd31 	.word	0x0801bd31
 8018b2c:	0801bbb1 	.word	0x0801bbb1
 8018b30:	0801bec0 	.word	0x0801bec0
 8018b34:	0801bdb0 	.word	0x0801bdb0
 8018b38:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8018b3a:	9901      	ldr	r1, [sp, #4]
 8018b3c:	6011      	str	r1, [r2, #0]
 8018b3e:	f1b9 0f0e 	cmp.w	r9, #14
 8018b42:	d86c      	bhi.n	8018c1e <_dtoa_r+0x3de>
 8018b44:	2c00      	cmp	r4, #0
 8018b46:	d06a      	beq.n	8018c1e <_dtoa_r+0x3de>
 8018b48:	f1bb 0f00 	cmp.w	fp, #0
 8018b4c:	f340 80a0 	ble.w	8018c90 <_dtoa_r+0x450>
 8018b50:	49c1      	ldr	r1, [pc, #772]	; (8018e58 <_dtoa_r+0x618>)
 8018b52:	f00b 020f 	and.w	r2, fp, #15
 8018b56:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8018b5a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8018b5e:	ed92 7b00 	vldr	d7, [r2]
 8018b62:	ea4f 112b 	mov.w	r1, fp, asr #4
 8018b66:	f000 8087 	beq.w	8018c78 <_dtoa_r+0x438>
 8018b6a:	4abc      	ldr	r2, [pc, #752]	; (8018e5c <_dtoa_r+0x61c>)
 8018b6c:	ed92 6b08 	vldr	d6, [r2, #32]
 8018b70:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8018b74:	ed8d 6b02 	vstr	d6, [sp, #8]
 8018b78:	f001 010f 	and.w	r1, r1, #15
 8018b7c:	2203      	movs	r2, #3
 8018b7e:	48b7      	ldr	r0, [pc, #732]	; (8018e5c <_dtoa_r+0x61c>)
 8018b80:	2900      	cmp	r1, #0
 8018b82:	d17b      	bne.n	8018c7c <_dtoa_r+0x43c>
 8018b84:	ed9d 6b02 	vldr	d6, [sp, #8]
 8018b88:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8018b8c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018b90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018b92:	2900      	cmp	r1, #0
 8018b94:	f000 80a2 	beq.w	8018cdc <_dtoa_r+0x49c>
 8018b98:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8018b9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018ba0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8018ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ba8:	f140 8098 	bpl.w	8018cdc <_dtoa_r+0x49c>
 8018bac:	f1b9 0f00 	cmp.w	r9, #0
 8018bb0:	f000 8094 	beq.w	8018cdc <_dtoa_r+0x49c>
 8018bb4:	f1ba 0f00 	cmp.w	sl, #0
 8018bb8:	dd2f      	ble.n	8018c1a <_dtoa_r+0x3da>
 8018bba:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8018bbe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018bc2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018bc6:	f10b 37ff 	add.w	r7, fp, #4294967295
 8018bca:	3201      	adds	r2, #1
 8018bcc:	4650      	mov	r0, sl
 8018bce:	ed9d 6b02 	vldr	d6, [sp, #8]
 8018bd2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8018bd6:	ee07 2a90 	vmov	s15, r2
 8018bda:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8018bde:	eea7 5b06 	vfma.f64	d5, d7, d6
 8018be2:	ee15 4a90 	vmov	r4, s11
 8018be6:	ec52 1b15 	vmov	r1, r2, d5
 8018bea:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8018bee:	2800      	cmp	r0, #0
 8018bf0:	d177      	bne.n	8018ce2 <_dtoa_r+0x4a2>
 8018bf2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8018bf6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8018bfa:	ec42 1b17 	vmov	d7, r1, r2
 8018bfe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c06:	f300 8263 	bgt.w	80190d0 <_dtoa_r+0x890>
 8018c0a:	eeb1 7b47 	vneg.f64	d7, d7
 8018c0e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c16:	f100 8258 	bmi.w	80190ca <_dtoa_r+0x88a>
 8018c1a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8018c1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018c20:	2a00      	cmp	r2, #0
 8018c22:	f2c0 811d 	blt.w	8018e60 <_dtoa_r+0x620>
 8018c26:	f1bb 0f0e 	cmp.w	fp, #14
 8018c2a:	f300 8119 	bgt.w	8018e60 <_dtoa_r+0x620>
 8018c2e:	4b8a      	ldr	r3, [pc, #552]	; (8018e58 <_dtoa_r+0x618>)
 8018c30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8018c34:	ed93 6b00 	vldr	d6, [r3]
 8018c38:	9b08      	ldr	r3, [sp, #32]
 8018c3a:	2b00      	cmp	r3, #0
 8018c3c:	f280 80b7 	bge.w	8018dae <_dtoa_r+0x56e>
 8018c40:	f1b9 0f00 	cmp.w	r9, #0
 8018c44:	f300 80b3 	bgt.w	8018dae <_dtoa_r+0x56e>
 8018c48:	f040 823f 	bne.w	80190ca <_dtoa_r+0x88a>
 8018c4c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8018c50:	ee26 6b07 	vmul.f64	d6, d6, d7
 8018c54:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018c58:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c60:	464c      	mov	r4, r9
 8018c62:	464f      	mov	r7, r9
 8018c64:	f280 8215 	bge.w	8019092 <_dtoa_r+0x852>
 8018c68:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018c6c:	2331      	movs	r3, #49	; 0x31
 8018c6e:	f808 3b01 	strb.w	r3, [r8], #1
 8018c72:	f10b 0b01 	add.w	fp, fp, #1
 8018c76:	e211      	b.n	801909c <_dtoa_r+0x85c>
 8018c78:	2202      	movs	r2, #2
 8018c7a:	e780      	b.n	8018b7e <_dtoa_r+0x33e>
 8018c7c:	07cc      	lsls	r4, r1, #31
 8018c7e:	d504      	bpl.n	8018c8a <_dtoa_r+0x44a>
 8018c80:	ed90 6b00 	vldr	d6, [r0]
 8018c84:	3201      	adds	r2, #1
 8018c86:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018c8a:	1049      	asrs	r1, r1, #1
 8018c8c:	3008      	adds	r0, #8
 8018c8e:	e777      	b.n	8018b80 <_dtoa_r+0x340>
 8018c90:	d022      	beq.n	8018cd8 <_dtoa_r+0x498>
 8018c92:	f1cb 0100 	rsb	r1, fp, #0
 8018c96:	4a70      	ldr	r2, [pc, #448]	; (8018e58 <_dtoa_r+0x618>)
 8018c98:	f001 000f 	and.w	r0, r1, #15
 8018c9c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8018ca0:	ed92 7b00 	vldr	d7, [r2]
 8018ca4:	ee28 7b07 	vmul.f64	d7, d8, d7
 8018ca8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018cac:	486b      	ldr	r0, [pc, #428]	; (8018e5c <_dtoa_r+0x61c>)
 8018cae:	1109      	asrs	r1, r1, #4
 8018cb0:	2400      	movs	r4, #0
 8018cb2:	2202      	movs	r2, #2
 8018cb4:	b929      	cbnz	r1, 8018cc2 <_dtoa_r+0x482>
 8018cb6:	2c00      	cmp	r4, #0
 8018cb8:	f43f af6a 	beq.w	8018b90 <_dtoa_r+0x350>
 8018cbc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018cc0:	e766      	b.n	8018b90 <_dtoa_r+0x350>
 8018cc2:	07cf      	lsls	r7, r1, #31
 8018cc4:	d505      	bpl.n	8018cd2 <_dtoa_r+0x492>
 8018cc6:	ed90 6b00 	vldr	d6, [r0]
 8018cca:	3201      	adds	r2, #1
 8018ccc:	2401      	movs	r4, #1
 8018cce:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018cd2:	1049      	asrs	r1, r1, #1
 8018cd4:	3008      	adds	r0, #8
 8018cd6:	e7ed      	b.n	8018cb4 <_dtoa_r+0x474>
 8018cd8:	2202      	movs	r2, #2
 8018cda:	e759      	b.n	8018b90 <_dtoa_r+0x350>
 8018cdc:	465f      	mov	r7, fp
 8018cde:	4648      	mov	r0, r9
 8018ce0:	e775      	b.n	8018bce <_dtoa_r+0x38e>
 8018ce2:	ec42 1b17 	vmov	d7, r1, r2
 8018ce6:	4a5c      	ldr	r2, [pc, #368]	; (8018e58 <_dtoa_r+0x618>)
 8018ce8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8018cec:	ed12 4b02 	vldr	d4, [r2, #-8]
 8018cf0:	9a01      	ldr	r2, [sp, #4]
 8018cf2:	1814      	adds	r4, r2, r0
 8018cf4:	9a07      	ldr	r2, [sp, #28]
 8018cf6:	b352      	cbz	r2, 8018d4e <_dtoa_r+0x50e>
 8018cf8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8018cfc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8018d00:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018d04:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8018d08:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8018d0c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8018d10:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8018d14:	ee14 2a90 	vmov	r2, s9
 8018d18:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8018d1c:	3230      	adds	r2, #48	; 0x30
 8018d1e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8018d22:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d2a:	f808 2b01 	strb.w	r2, [r8], #1
 8018d2e:	d439      	bmi.n	8018da4 <_dtoa_r+0x564>
 8018d30:	ee32 5b46 	vsub.f64	d5, d2, d6
 8018d34:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8018d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d3c:	d472      	bmi.n	8018e24 <_dtoa_r+0x5e4>
 8018d3e:	45a0      	cmp	r8, r4
 8018d40:	f43f af6b 	beq.w	8018c1a <_dtoa_r+0x3da>
 8018d44:	ee27 7b03 	vmul.f64	d7, d7, d3
 8018d48:	ee26 6b03 	vmul.f64	d6, d6, d3
 8018d4c:	e7e0      	b.n	8018d10 <_dtoa_r+0x4d0>
 8018d4e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018d52:	ee27 7b04 	vmul.f64	d7, d7, d4
 8018d56:	4621      	mov	r1, r4
 8018d58:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8018d5c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8018d60:	ee14 2a90 	vmov	r2, s9
 8018d64:	3230      	adds	r2, #48	; 0x30
 8018d66:	f808 2b01 	strb.w	r2, [r8], #1
 8018d6a:	45a0      	cmp	r8, r4
 8018d6c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8018d70:	ee36 6b45 	vsub.f64	d6, d6, d5
 8018d74:	d118      	bne.n	8018da8 <_dtoa_r+0x568>
 8018d76:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8018d7a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8018d7e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8018d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d86:	dc4d      	bgt.n	8018e24 <_dtoa_r+0x5e4>
 8018d88:	ee35 7b47 	vsub.f64	d7, d5, d7
 8018d8c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d94:	f57f af41 	bpl.w	8018c1a <_dtoa_r+0x3da>
 8018d98:	4688      	mov	r8, r1
 8018d9a:	3901      	subs	r1, #1
 8018d9c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8018da0:	2b30      	cmp	r3, #48	; 0x30
 8018da2:	d0f9      	beq.n	8018d98 <_dtoa_r+0x558>
 8018da4:	46bb      	mov	fp, r7
 8018da6:	e02a      	b.n	8018dfe <_dtoa_r+0x5be>
 8018da8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8018dac:	e7d6      	b.n	8018d5c <_dtoa_r+0x51c>
 8018dae:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018db2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8018db6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018dba:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8018dbe:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8018dc2:	ee15 3a10 	vmov	r3, s10
 8018dc6:	3330      	adds	r3, #48	; 0x30
 8018dc8:	f808 3b01 	strb.w	r3, [r8], #1
 8018dcc:	9b01      	ldr	r3, [sp, #4]
 8018dce:	eba8 0303 	sub.w	r3, r8, r3
 8018dd2:	4599      	cmp	r9, r3
 8018dd4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8018dd8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8018ddc:	d133      	bne.n	8018e46 <_dtoa_r+0x606>
 8018dde:	ee37 7b07 	vadd.f64	d7, d7, d7
 8018de2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8018de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018dea:	dc1a      	bgt.n	8018e22 <_dtoa_r+0x5e2>
 8018dec:	eeb4 7b46 	vcmp.f64	d7, d6
 8018df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018df4:	d103      	bne.n	8018dfe <_dtoa_r+0x5be>
 8018df6:	ee15 3a10 	vmov	r3, s10
 8018dfa:	07d9      	lsls	r1, r3, #31
 8018dfc:	d411      	bmi.n	8018e22 <_dtoa_r+0x5e2>
 8018dfe:	4629      	mov	r1, r5
 8018e00:	4630      	mov	r0, r6
 8018e02:	f000 fe6b 	bl	8019adc <_Bfree>
 8018e06:	2300      	movs	r3, #0
 8018e08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018e0a:	f888 3000 	strb.w	r3, [r8]
 8018e0e:	f10b 0301 	add.w	r3, fp, #1
 8018e12:	6013      	str	r3, [r2, #0]
 8018e14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	f43f ad61 	beq.w	80188de <_dtoa_r+0x9e>
 8018e1c:	f8c3 8000 	str.w	r8, [r3]
 8018e20:	e55d      	b.n	80188de <_dtoa_r+0x9e>
 8018e22:	465f      	mov	r7, fp
 8018e24:	4643      	mov	r3, r8
 8018e26:	4698      	mov	r8, r3
 8018e28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018e2c:	2a39      	cmp	r2, #57	; 0x39
 8018e2e:	d106      	bne.n	8018e3e <_dtoa_r+0x5fe>
 8018e30:	9a01      	ldr	r2, [sp, #4]
 8018e32:	429a      	cmp	r2, r3
 8018e34:	d1f7      	bne.n	8018e26 <_dtoa_r+0x5e6>
 8018e36:	9901      	ldr	r1, [sp, #4]
 8018e38:	2230      	movs	r2, #48	; 0x30
 8018e3a:	3701      	adds	r7, #1
 8018e3c:	700a      	strb	r2, [r1, #0]
 8018e3e:	781a      	ldrb	r2, [r3, #0]
 8018e40:	3201      	adds	r2, #1
 8018e42:	701a      	strb	r2, [r3, #0]
 8018e44:	e7ae      	b.n	8018da4 <_dtoa_r+0x564>
 8018e46:	ee27 7b04 	vmul.f64	d7, d7, d4
 8018e4a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e52:	d1b2      	bne.n	8018dba <_dtoa_r+0x57a>
 8018e54:	e7d3      	b.n	8018dfe <_dtoa_r+0x5be>
 8018e56:	bf00      	nop
 8018e58:	0801bec0 	.word	0x0801bec0
 8018e5c:	0801be98 	.word	0x0801be98
 8018e60:	9907      	ldr	r1, [sp, #28]
 8018e62:	2900      	cmp	r1, #0
 8018e64:	f000 80d0 	beq.w	8019008 <_dtoa_r+0x7c8>
 8018e68:	9906      	ldr	r1, [sp, #24]
 8018e6a:	2901      	cmp	r1, #1
 8018e6c:	f300 80b4 	bgt.w	8018fd8 <_dtoa_r+0x798>
 8018e70:	990a      	ldr	r1, [sp, #40]	; 0x28
 8018e72:	2900      	cmp	r1, #0
 8018e74:	f000 80ac 	beq.w	8018fd0 <_dtoa_r+0x790>
 8018e78:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8018e7c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8018e80:	461c      	mov	r4, r3
 8018e82:	930a      	str	r3, [sp, #40]	; 0x28
 8018e84:	9b04      	ldr	r3, [sp, #16]
 8018e86:	4413      	add	r3, r2
 8018e88:	9304      	str	r3, [sp, #16]
 8018e8a:	9b05      	ldr	r3, [sp, #20]
 8018e8c:	2101      	movs	r1, #1
 8018e8e:	4413      	add	r3, r2
 8018e90:	4630      	mov	r0, r6
 8018e92:	9305      	str	r3, [sp, #20]
 8018e94:	f000 ff24 	bl	8019ce0 <__i2b>
 8018e98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018e9a:	4607      	mov	r7, r0
 8018e9c:	f1b8 0f00 	cmp.w	r8, #0
 8018ea0:	dd0d      	ble.n	8018ebe <_dtoa_r+0x67e>
 8018ea2:	9a05      	ldr	r2, [sp, #20]
 8018ea4:	2a00      	cmp	r2, #0
 8018ea6:	dd0a      	ble.n	8018ebe <_dtoa_r+0x67e>
 8018ea8:	4542      	cmp	r2, r8
 8018eaa:	9904      	ldr	r1, [sp, #16]
 8018eac:	bfa8      	it	ge
 8018eae:	4642      	movge	r2, r8
 8018eb0:	1a89      	subs	r1, r1, r2
 8018eb2:	9104      	str	r1, [sp, #16]
 8018eb4:	9905      	ldr	r1, [sp, #20]
 8018eb6:	eba8 0802 	sub.w	r8, r8, r2
 8018eba:	1a8a      	subs	r2, r1, r2
 8018ebc:	9205      	str	r2, [sp, #20]
 8018ebe:	b303      	cbz	r3, 8018f02 <_dtoa_r+0x6c2>
 8018ec0:	9a07      	ldr	r2, [sp, #28]
 8018ec2:	2a00      	cmp	r2, #0
 8018ec4:	f000 80a5 	beq.w	8019012 <_dtoa_r+0x7d2>
 8018ec8:	2c00      	cmp	r4, #0
 8018eca:	dd13      	ble.n	8018ef4 <_dtoa_r+0x6b4>
 8018ecc:	4639      	mov	r1, r7
 8018ece:	4622      	mov	r2, r4
 8018ed0:	4630      	mov	r0, r6
 8018ed2:	930d      	str	r3, [sp, #52]	; 0x34
 8018ed4:	f000 ffc4 	bl	8019e60 <__pow5mult>
 8018ed8:	462a      	mov	r2, r5
 8018eda:	4601      	mov	r1, r0
 8018edc:	4607      	mov	r7, r0
 8018ede:	4630      	mov	r0, r6
 8018ee0:	f000 ff14 	bl	8019d0c <__multiply>
 8018ee4:	4629      	mov	r1, r5
 8018ee6:	900a      	str	r0, [sp, #40]	; 0x28
 8018ee8:	4630      	mov	r0, r6
 8018eea:	f000 fdf7 	bl	8019adc <_Bfree>
 8018eee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018ef0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018ef2:	4615      	mov	r5, r2
 8018ef4:	1b1a      	subs	r2, r3, r4
 8018ef6:	d004      	beq.n	8018f02 <_dtoa_r+0x6c2>
 8018ef8:	4629      	mov	r1, r5
 8018efa:	4630      	mov	r0, r6
 8018efc:	f000 ffb0 	bl	8019e60 <__pow5mult>
 8018f00:	4605      	mov	r5, r0
 8018f02:	2101      	movs	r1, #1
 8018f04:	4630      	mov	r0, r6
 8018f06:	f000 feeb 	bl	8019ce0 <__i2b>
 8018f0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f0c:	2b00      	cmp	r3, #0
 8018f0e:	4604      	mov	r4, r0
 8018f10:	f340 8081 	ble.w	8019016 <_dtoa_r+0x7d6>
 8018f14:	461a      	mov	r2, r3
 8018f16:	4601      	mov	r1, r0
 8018f18:	4630      	mov	r0, r6
 8018f1a:	f000 ffa1 	bl	8019e60 <__pow5mult>
 8018f1e:	9b06      	ldr	r3, [sp, #24]
 8018f20:	2b01      	cmp	r3, #1
 8018f22:	4604      	mov	r4, r0
 8018f24:	dd7a      	ble.n	801901c <_dtoa_r+0x7dc>
 8018f26:	2300      	movs	r3, #0
 8018f28:	930a      	str	r3, [sp, #40]	; 0x28
 8018f2a:	6922      	ldr	r2, [r4, #16]
 8018f2c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8018f30:	6910      	ldr	r0, [r2, #16]
 8018f32:	f000 fe85 	bl	8019c40 <__hi0bits>
 8018f36:	f1c0 0020 	rsb	r0, r0, #32
 8018f3a:	9b05      	ldr	r3, [sp, #20]
 8018f3c:	4418      	add	r0, r3
 8018f3e:	f010 001f 	ands.w	r0, r0, #31
 8018f42:	f000 808c 	beq.w	801905e <_dtoa_r+0x81e>
 8018f46:	f1c0 0220 	rsb	r2, r0, #32
 8018f4a:	2a04      	cmp	r2, #4
 8018f4c:	f340 8085 	ble.w	801905a <_dtoa_r+0x81a>
 8018f50:	f1c0 001c 	rsb	r0, r0, #28
 8018f54:	9b04      	ldr	r3, [sp, #16]
 8018f56:	4403      	add	r3, r0
 8018f58:	9304      	str	r3, [sp, #16]
 8018f5a:	9b05      	ldr	r3, [sp, #20]
 8018f5c:	4403      	add	r3, r0
 8018f5e:	4480      	add	r8, r0
 8018f60:	9305      	str	r3, [sp, #20]
 8018f62:	9b04      	ldr	r3, [sp, #16]
 8018f64:	2b00      	cmp	r3, #0
 8018f66:	dd05      	ble.n	8018f74 <_dtoa_r+0x734>
 8018f68:	4629      	mov	r1, r5
 8018f6a:	461a      	mov	r2, r3
 8018f6c:	4630      	mov	r0, r6
 8018f6e:	f000 ffd1 	bl	8019f14 <__lshift>
 8018f72:	4605      	mov	r5, r0
 8018f74:	9b05      	ldr	r3, [sp, #20]
 8018f76:	2b00      	cmp	r3, #0
 8018f78:	dd05      	ble.n	8018f86 <_dtoa_r+0x746>
 8018f7a:	4621      	mov	r1, r4
 8018f7c:	461a      	mov	r2, r3
 8018f7e:	4630      	mov	r0, r6
 8018f80:	f000 ffc8 	bl	8019f14 <__lshift>
 8018f84:	4604      	mov	r4, r0
 8018f86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018f88:	2b00      	cmp	r3, #0
 8018f8a:	d06a      	beq.n	8019062 <_dtoa_r+0x822>
 8018f8c:	4621      	mov	r1, r4
 8018f8e:	4628      	mov	r0, r5
 8018f90:	f001 f830 	bl	8019ff4 <__mcmp>
 8018f94:	2800      	cmp	r0, #0
 8018f96:	da64      	bge.n	8019062 <_dtoa_r+0x822>
 8018f98:	2300      	movs	r3, #0
 8018f9a:	4629      	mov	r1, r5
 8018f9c:	220a      	movs	r2, #10
 8018f9e:	4630      	mov	r0, r6
 8018fa0:	f000 fdbe 	bl	8019b20 <__multadd>
 8018fa4:	9b07      	ldr	r3, [sp, #28]
 8018fa6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018faa:	4605      	mov	r5, r0
 8018fac:	2b00      	cmp	r3, #0
 8018fae:	f000 8191 	beq.w	80192d4 <_dtoa_r+0xa94>
 8018fb2:	4639      	mov	r1, r7
 8018fb4:	2300      	movs	r3, #0
 8018fb6:	220a      	movs	r2, #10
 8018fb8:	4630      	mov	r0, r6
 8018fba:	f000 fdb1 	bl	8019b20 <__multadd>
 8018fbe:	f1ba 0f00 	cmp.w	sl, #0
 8018fc2:	4607      	mov	r7, r0
 8018fc4:	f300 808d 	bgt.w	80190e2 <_dtoa_r+0x8a2>
 8018fc8:	9b06      	ldr	r3, [sp, #24]
 8018fca:	2b02      	cmp	r3, #2
 8018fcc:	dc50      	bgt.n	8019070 <_dtoa_r+0x830>
 8018fce:	e088      	b.n	80190e2 <_dtoa_r+0x8a2>
 8018fd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018fd2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8018fd6:	e751      	b.n	8018e7c <_dtoa_r+0x63c>
 8018fd8:	f109 34ff 	add.w	r4, r9, #4294967295
 8018fdc:	42a3      	cmp	r3, r4
 8018fde:	bfbf      	itttt	lt
 8018fe0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8018fe2:	1ae3      	sublt	r3, r4, r3
 8018fe4:	18d2      	addlt	r2, r2, r3
 8018fe6:	9209      	strlt	r2, [sp, #36]	; 0x24
 8018fe8:	bfb6      	itet	lt
 8018fea:	4623      	movlt	r3, r4
 8018fec:	1b1c      	subge	r4, r3, r4
 8018fee:	2400      	movlt	r4, #0
 8018ff0:	f1b9 0f00 	cmp.w	r9, #0
 8018ff4:	bfb5      	itete	lt
 8018ff6:	9a04      	ldrlt	r2, [sp, #16]
 8018ff8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8018ffc:	eba2 0809 	sublt.w	r8, r2, r9
 8019000:	464a      	movge	r2, r9
 8019002:	bfb8      	it	lt
 8019004:	2200      	movlt	r2, #0
 8019006:	e73c      	b.n	8018e82 <_dtoa_r+0x642>
 8019008:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801900c:	9f07      	ldr	r7, [sp, #28]
 801900e:	461c      	mov	r4, r3
 8019010:	e744      	b.n	8018e9c <_dtoa_r+0x65c>
 8019012:	461a      	mov	r2, r3
 8019014:	e770      	b.n	8018ef8 <_dtoa_r+0x6b8>
 8019016:	9b06      	ldr	r3, [sp, #24]
 8019018:	2b01      	cmp	r3, #1
 801901a:	dc18      	bgt.n	801904e <_dtoa_r+0x80e>
 801901c:	9b02      	ldr	r3, [sp, #8]
 801901e:	b9b3      	cbnz	r3, 801904e <_dtoa_r+0x80e>
 8019020:	9b03      	ldr	r3, [sp, #12]
 8019022:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8019026:	b9a2      	cbnz	r2, 8019052 <_dtoa_r+0x812>
 8019028:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801902c:	0d12      	lsrs	r2, r2, #20
 801902e:	0512      	lsls	r2, r2, #20
 8019030:	b18a      	cbz	r2, 8019056 <_dtoa_r+0x816>
 8019032:	9b04      	ldr	r3, [sp, #16]
 8019034:	3301      	adds	r3, #1
 8019036:	9304      	str	r3, [sp, #16]
 8019038:	9b05      	ldr	r3, [sp, #20]
 801903a:	3301      	adds	r3, #1
 801903c:	9305      	str	r3, [sp, #20]
 801903e:	2301      	movs	r3, #1
 8019040:	930a      	str	r3, [sp, #40]	; 0x28
 8019042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019044:	2b00      	cmp	r3, #0
 8019046:	f47f af70 	bne.w	8018f2a <_dtoa_r+0x6ea>
 801904a:	2001      	movs	r0, #1
 801904c:	e775      	b.n	8018f3a <_dtoa_r+0x6fa>
 801904e:	2300      	movs	r3, #0
 8019050:	e7f6      	b.n	8019040 <_dtoa_r+0x800>
 8019052:	9b02      	ldr	r3, [sp, #8]
 8019054:	e7f4      	b.n	8019040 <_dtoa_r+0x800>
 8019056:	920a      	str	r2, [sp, #40]	; 0x28
 8019058:	e7f3      	b.n	8019042 <_dtoa_r+0x802>
 801905a:	d082      	beq.n	8018f62 <_dtoa_r+0x722>
 801905c:	4610      	mov	r0, r2
 801905e:	301c      	adds	r0, #28
 8019060:	e778      	b.n	8018f54 <_dtoa_r+0x714>
 8019062:	f1b9 0f00 	cmp.w	r9, #0
 8019066:	dc37      	bgt.n	80190d8 <_dtoa_r+0x898>
 8019068:	9b06      	ldr	r3, [sp, #24]
 801906a:	2b02      	cmp	r3, #2
 801906c:	dd34      	ble.n	80190d8 <_dtoa_r+0x898>
 801906e:	46ca      	mov	sl, r9
 8019070:	f1ba 0f00 	cmp.w	sl, #0
 8019074:	d10d      	bne.n	8019092 <_dtoa_r+0x852>
 8019076:	4621      	mov	r1, r4
 8019078:	4653      	mov	r3, sl
 801907a:	2205      	movs	r2, #5
 801907c:	4630      	mov	r0, r6
 801907e:	f000 fd4f 	bl	8019b20 <__multadd>
 8019082:	4601      	mov	r1, r0
 8019084:	4604      	mov	r4, r0
 8019086:	4628      	mov	r0, r5
 8019088:	f000 ffb4 	bl	8019ff4 <__mcmp>
 801908c:	2800      	cmp	r0, #0
 801908e:	f73f adeb 	bgt.w	8018c68 <_dtoa_r+0x428>
 8019092:	9b08      	ldr	r3, [sp, #32]
 8019094:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8019098:	ea6f 0b03 	mvn.w	fp, r3
 801909c:	f04f 0900 	mov.w	r9, #0
 80190a0:	4621      	mov	r1, r4
 80190a2:	4630      	mov	r0, r6
 80190a4:	f000 fd1a 	bl	8019adc <_Bfree>
 80190a8:	2f00      	cmp	r7, #0
 80190aa:	f43f aea8 	beq.w	8018dfe <_dtoa_r+0x5be>
 80190ae:	f1b9 0f00 	cmp.w	r9, #0
 80190b2:	d005      	beq.n	80190c0 <_dtoa_r+0x880>
 80190b4:	45b9      	cmp	r9, r7
 80190b6:	d003      	beq.n	80190c0 <_dtoa_r+0x880>
 80190b8:	4649      	mov	r1, r9
 80190ba:	4630      	mov	r0, r6
 80190bc:	f000 fd0e 	bl	8019adc <_Bfree>
 80190c0:	4639      	mov	r1, r7
 80190c2:	4630      	mov	r0, r6
 80190c4:	f000 fd0a 	bl	8019adc <_Bfree>
 80190c8:	e699      	b.n	8018dfe <_dtoa_r+0x5be>
 80190ca:	2400      	movs	r4, #0
 80190cc:	4627      	mov	r7, r4
 80190ce:	e7e0      	b.n	8019092 <_dtoa_r+0x852>
 80190d0:	46bb      	mov	fp, r7
 80190d2:	4604      	mov	r4, r0
 80190d4:	4607      	mov	r7, r0
 80190d6:	e5c7      	b.n	8018c68 <_dtoa_r+0x428>
 80190d8:	9b07      	ldr	r3, [sp, #28]
 80190da:	46ca      	mov	sl, r9
 80190dc:	2b00      	cmp	r3, #0
 80190de:	f000 8100 	beq.w	80192e2 <_dtoa_r+0xaa2>
 80190e2:	f1b8 0f00 	cmp.w	r8, #0
 80190e6:	dd05      	ble.n	80190f4 <_dtoa_r+0x8b4>
 80190e8:	4639      	mov	r1, r7
 80190ea:	4642      	mov	r2, r8
 80190ec:	4630      	mov	r0, r6
 80190ee:	f000 ff11 	bl	8019f14 <__lshift>
 80190f2:	4607      	mov	r7, r0
 80190f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80190f6:	2b00      	cmp	r3, #0
 80190f8:	d05d      	beq.n	80191b6 <_dtoa_r+0x976>
 80190fa:	6879      	ldr	r1, [r7, #4]
 80190fc:	4630      	mov	r0, r6
 80190fe:	f000 fcad 	bl	8019a5c <_Balloc>
 8019102:	4680      	mov	r8, r0
 8019104:	b928      	cbnz	r0, 8019112 <_dtoa_r+0x8d2>
 8019106:	4b82      	ldr	r3, [pc, #520]	; (8019310 <_dtoa_r+0xad0>)
 8019108:	4602      	mov	r2, r0
 801910a:	f240 21ea 	movw	r1, #746	; 0x2ea
 801910e:	f7ff bbaf 	b.w	8018870 <_dtoa_r+0x30>
 8019112:	693a      	ldr	r2, [r7, #16]
 8019114:	3202      	adds	r2, #2
 8019116:	0092      	lsls	r2, r2, #2
 8019118:	f107 010c 	add.w	r1, r7, #12
 801911c:	300c      	adds	r0, #12
 801911e:	f7fd fdbd 	bl	8016c9c <memcpy>
 8019122:	2201      	movs	r2, #1
 8019124:	4641      	mov	r1, r8
 8019126:	4630      	mov	r0, r6
 8019128:	f000 fef4 	bl	8019f14 <__lshift>
 801912c:	9b01      	ldr	r3, [sp, #4]
 801912e:	3301      	adds	r3, #1
 8019130:	9304      	str	r3, [sp, #16]
 8019132:	9b01      	ldr	r3, [sp, #4]
 8019134:	4453      	add	r3, sl
 8019136:	9308      	str	r3, [sp, #32]
 8019138:	9b02      	ldr	r3, [sp, #8]
 801913a:	f003 0301 	and.w	r3, r3, #1
 801913e:	46b9      	mov	r9, r7
 8019140:	9307      	str	r3, [sp, #28]
 8019142:	4607      	mov	r7, r0
 8019144:	9b04      	ldr	r3, [sp, #16]
 8019146:	4621      	mov	r1, r4
 8019148:	3b01      	subs	r3, #1
 801914a:	4628      	mov	r0, r5
 801914c:	9302      	str	r3, [sp, #8]
 801914e:	f7ff fae9 	bl	8018724 <quorem>
 8019152:	4603      	mov	r3, r0
 8019154:	3330      	adds	r3, #48	; 0x30
 8019156:	9005      	str	r0, [sp, #20]
 8019158:	4649      	mov	r1, r9
 801915a:	4628      	mov	r0, r5
 801915c:	9309      	str	r3, [sp, #36]	; 0x24
 801915e:	f000 ff49 	bl	8019ff4 <__mcmp>
 8019162:	463a      	mov	r2, r7
 8019164:	4682      	mov	sl, r0
 8019166:	4621      	mov	r1, r4
 8019168:	4630      	mov	r0, r6
 801916a:	f000 ff5f 	bl	801a02c <__mdiff>
 801916e:	68c2      	ldr	r2, [r0, #12]
 8019170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019172:	4680      	mov	r8, r0
 8019174:	bb0a      	cbnz	r2, 80191ba <_dtoa_r+0x97a>
 8019176:	4601      	mov	r1, r0
 8019178:	4628      	mov	r0, r5
 801917a:	f000 ff3b 	bl	8019ff4 <__mcmp>
 801917e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019180:	4602      	mov	r2, r0
 8019182:	4641      	mov	r1, r8
 8019184:	4630      	mov	r0, r6
 8019186:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801918a:	f000 fca7 	bl	8019adc <_Bfree>
 801918e:	9b06      	ldr	r3, [sp, #24]
 8019190:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019192:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8019196:	ea43 0102 	orr.w	r1, r3, r2
 801919a:	9b07      	ldr	r3, [sp, #28]
 801919c:	430b      	orrs	r3, r1
 801919e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80191a0:	d10d      	bne.n	80191be <_dtoa_r+0x97e>
 80191a2:	2b39      	cmp	r3, #57	; 0x39
 80191a4:	d029      	beq.n	80191fa <_dtoa_r+0x9ba>
 80191a6:	f1ba 0f00 	cmp.w	sl, #0
 80191aa:	dd01      	ble.n	80191b0 <_dtoa_r+0x970>
 80191ac:	9b05      	ldr	r3, [sp, #20]
 80191ae:	3331      	adds	r3, #49	; 0x31
 80191b0:	9a02      	ldr	r2, [sp, #8]
 80191b2:	7013      	strb	r3, [r2, #0]
 80191b4:	e774      	b.n	80190a0 <_dtoa_r+0x860>
 80191b6:	4638      	mov	r0, r7
 80191b8:	e7b8      	b.n	801912c <_dtoa_r+0x8ec>
 80191ba:	2201      	movs	r2, #1
 80191bc:	e7e1      	b.n	8019182 <_dtoa_r+0x942>
 80191be:	f1ba 0f00 	cmp.w	sl, #0
 80191c2:	db06      	blt.n	80191d2 <_dtoa_r+0x992>
 80191c4:	9906      	ldr	r1, [sp, #24]
 80191c6:	ea41 0a0a 	orr.w	sl, r1, sl
 80191ca:	9907      	ldr	r1, [sp, #28]
 80191cc:	ea5a 0101 	orrs.w	r1, sl, r1
 80191d0:	d120      	bne.n	8019214 <_dtoa_r+0x9d4>
 80191d2:	2a00      	cmp	r2, #0
 80191d4:	ddec      	ble.n	80191b0 <_dtoa_r+0x970>
 80191d6:	4629      	mov	r1, r5
 80191d8:	2201      	movs	r2, #1
 80191da:	4630      	mov	r0, r6
 80191dc:	9304      	str	r3, [sp, #16]
 80191de:	f000 fe99 	bl	8019f14 <__lshift>
 80191e2:	4621      	mov	r1, r4
 80191e4:	4605      	mov	r5, r0
 80191e6:	f000 ff05 	bl	8019ff4 <__mcmp>
 80191ea:	2800      	cmp	r0, #0
 80191ec:	9b04      	ldr	r3, [sp, #16]
 80191ee:	dc02      	bgt.n	80191f6 <_dtoa_r+0x9b6>
 80191f0:	d1de      	bne.n	80191b0 <_dtoa_r+0x970>
 80191f2:	07da      	lsls	r2, r3, #31
 80191f4:	d5dc      	bpl.n	80191b0 <_dtoa_r+0x970>
 80191f6:	2b39      	cmp	r3, #57	; 0x39
 80191f8:	d1d8      	bne.n	80191ac <_dtoa_r+0x96c>
 80191fa:	9a02      	ldr	r2, [sp, #8]
 80191fc:	2339      	movs	r3, #57	; 0x39
 80191fe:	7013      	strb	r3, [r2, #0]
 8019200:	4643      	mov	r3, r8
 8019202:	4698      	mov	r8, r3
 8019204:	3b01      	subs	r3, #1
 8019206:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801920a:	2a39      	cmp	r2, #57	; 0x39
 801920c:	d051      	beq.n	80192b2 <_dtoa_r+0xa72>
 801920e:	3201      	adds	r2, #1
 8019210:	701a      	strb	r2, [r3, #0]
 8019212:	e745      	b.n	80190a0 <_dtoa_r+0x860>
 8019214:	2a00      	cmp	r2, #0
 8019216:	dd03      	ble.n	8019220 <_dtoa_r+0x9e0>
 8019218:	2b39      	cmp	r3, #57	; 0x39
 801921a:	d0ee      	beq.n	80191fa <_dtoa_r+0x9ba>
 801921c:	3301      	adds	r3, #1
 801921e:	e7c7      	b.n	80191b0 <_dtoa_r+0x970>
 8019220:	9a04      	ldr	r2, [sp, #16]
 8019222:	9908      	ldr	r1, [sp, #32]
 8019224:	f802 3c01 	strb.w	r3, [r2, #-1]
 8019228:	428a      	cmp	r2, r1
 801922a:	d02b      	beq.n	8019284 <_dtoa_r+0xa44>
 801922c:	4629      	mov	r1, r5
 801922e:	2300      	movs	r3, #0
 8019230:	220a      	movs	r2, #10
 8019232:	4630      	mov	r0, r6
 8019234:	f000 fc74 	bl	8019b20 <__multadd>
 8019238:	45b9      	cmp	r9, r7
 801923a:	4605      	mov	r5, r0
 801923c:	f04f 0300 	mov.w	r3, #0
 8019240:	f04f 020a 	mov.w	r2, #10
 8019244:	4649      	mov	r1, r9
 8019246:	4630      	mov	r0, r6
 8019248:	d107      	bne.n	801925a <_dtoa_r+0xa1a>
 801924a:	f000 fc69 	bl	8019b20 <__multadd>
 801924e:	4681      	mov	r9, r0
 8019250:	4607      	mov	r7, r0
 8019252:	9b04      	ldr	r3, [sp, #16]
 8019254:	3301      	adds	r3, #1
 8019256:	9304      	str	r3, [sp, #16]
 8019258:	e774      	b.n	8019144 <_dtoa_r+0x904>
 801925a:	f000 fc61 	bl	8019b20 <__multadd>
 801925e:	4639      	mov	r1, r7
 8019260:	4681      	mov	r9, r0
 8019262:	2300      	movs	r3, #0
 8019264:	220a      	movs	r2, #10
 8019266:	4630      	mov	r0, r6
 8019268:	f000 fc5a 	bl	8019b20 <__multadd>
 801926c:	4607      	mov	r7, r0
 801926e:	e7f0      	b.n	8019252 <_dtoa_r+0xa12>
 8019270:	f1ba 0f00 	cmp.w	sl, #0
 8019274:	9a01      	ldr	r2, [sp, #4]
 8019276:	bfcc      	ite	gt
 8019278:	46d0      	movgt	r8, sl
 801927a:	f04f 0801 	movle.w	r8, #1
 801927e:	4490      	add	r8, r2
 8019280:	f04f 0900 	mov.w	r9, #0
 8019284:	4629      	mov	r1, r5
 8019286:	2201      	movs	r2, #1
 8019288:	4630      	mov	r0, r6
 801928a:	9302      	str	r3, [sp, #8]
 801928c:	f000 fe42 	bl	8019f14 <__lshift>
 8019290:	4621      	mov	r1, r4
 8019292:	4605      	mov	r5, r0
 8019294:	f000 feae 	bl	8019ff4 <__mcmp>
 8019298:	2800      	cmp	r0, #0
 801929a:	dcb1      	bgt.n	8019200 <_dtoa_r+0x9c0>
 801929c:	d102      	bne.n	80192a4 <_dtoa_r+0xa64>
 801929e:	9b02      	ldr	r3, [sp, #8]
 80192a0:	07db      	lsls	r3, r3, #31
 80192a2:	d4ad      	bmi.n	8019200 <_dtoa_r+0x9c0>
 80192a4:	4643      	mov	r3, r8
 80192a6:	4698      	mov	r8, r3
 80192a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80192ac:	2a30      	cmp	r2, #48	; 0x30
 80192ae:	d0fa      	beq.n	80192a6 <_dtoa_r+0xa66>
 80192b0:	e6f6      	b.n	80190a0 <_dtoa_r+0x860>
 80192b2:	9a01      	ldr	r2, [sp, #4]
 80192b4:	429a      	cmp	r2, r3
 80192b6:	d1a4      	bne.n	8019202 <_dtoa_r+0x9c2>
 80192b8:	f10b 0b01 	add.w	fp, fp, #1
 80192bc:	2331      	movs	r3, #49	; 0x31
 80192be:	e778      	b.n	80191b2 <_dtoa_r+0x972>
 80192c0:	4b14      	ldr	r3, [pc, #80]	; (8019314 <_dtoa_r+0xad4>)
 80192c2:	f7ff bb27 	b.w	8018914 <_dtoa_r+0xd4>
 80192c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80192c8:	2b00      	cmp	r3, #0
 80192ca:	f47f ab03 	bne.w	80188d4 <_dtoa_r+0x94>
 80192ce:	4b12      	ldr	r3, [pc, #72]	; (8019318 <_dtoa_r+0xad8>)
 80192d0:	f7ff bb20 	b.w	8018914 <_dtoa_r+0xd4>
 80192d4:	f1ba 0f00 	cmp.w	sl, #0
 80192d8:	dc03      	bgt.n	80192e2 <_dtoa_r+0xaa2>
 80192da:	9b06      	ldr	r3, [sp, #24]
 80192dc:	2b02      	cmp	r3, #2
 80192de:	f73f aec7 	bgt.w	8019070 <_dtoa_r+0x830>
 80192e2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80192e6:	4621      	mov	r1, r4
 80192e8:	4628      	mov	r0, r5
 80192ea:	f7ff fa1b 	bl	8018724 <quorem>
 80192ee:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80192f2:	f808 3b01 	strb.w	r3, [r8], #1
 80192f6:	9a01      	ldr	r2, [sp, #4]
 80192f8:	eba8 0202 	sub.w	r2, r8, r2
 80192fc:	4592      	cmp	sl, r2
 80192fe:	ddb7      	ble.n	8019270 <_dtoa_r+0xa30>
 8019300:	4629      	mov	r1, r5
 8019302:	2300      	movs	r3, #0
 8019304:	220a      	movs	r2, #10
 8019306:	4630      	mov	r0, r6
 8019308:	f000 fc0a 	bl	8019b20 <__multadd>
 801930c:	4605      	mov	r5, r0
 801930e:	e7ea      	b.n	80192e6 <_dtoa_r+0xaa6>
 8019310:	0801bdb0 	.word	0x0801bdb0
 8019314:	0801bbb0 	.word	0x0801bbb0
 8019318:	0801bd31 	.word	0x0801bd31

0801931c <rshift>:
 801931c:	6903      	ldr	r3, [r0, #16]
 801931e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8019322:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019326:	ea4f 1261 	mov.w	r2, r1, asr #5
 801932a:	f100 0414 	add.w	r4, r0, #20
 801932e:	dd45      	ble.n	80193bc <rshift+0xa0>
 8019330:	f011 011f 	ands.w	r1, r1, #31
 8019334:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8019338:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801933c:	d10c      	bne.n	8019358 <rshift+0x3c>
 801933e:	f100 0710 	add.w	r7, r0, #16
 8019342:	4629      	mov	r1, r5
 8019344:	42b1      	cmp	r1, r6
 8019346:	d334      	bcc.n	80193b2 <rshift+0x96>
 8019348:	1a9b      	subs	r3, r3, r2
 801934a:	009b      	lsls	r3, r3, #2
 801934c:	1eea      	subs	r2, r5, #3
 801934e:	4296      	cmp	r6, r2
 8019350:	bf38      	it	cc
 8019352:	2300      	movcc	r3, #0
 8019354:	4423      	add	r3, r4
 8019356:	e015      	b.n	8019384 <rshift+0x68>
 8019358:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801935c:	f1c1 0820 	rsb	r8, r1, #32
 8019360:	40cf      	lsrs	r7, r1
 8019362:	f105 0e04 	add.w	lr, r5, #4
 8019366:	46a1      	mov	r9, r4
 8019368:	4576      	cmp	r6, lr
 801936a:	46f4      	mov	ip, lr
 801936c:	d815      	bhi.n	801939a <rshift+0x7e>
 801936e:	1a9a      	subs	r2, r3, r2
 8019370:	0092      	lsls	r2, r2, #2
 8019372:	3a04      	subs	r2, #4
 8019374:	3501      	adds	r5, #1
 8019376:	42ae      	cmp	r6, r5
 8019378:	bf38      	it	cc
 801937a:	2200      	movcc	r2, #0
 801937c:	18a3      	adds	r3, r4, r2
 801937e:	50a7      	str	r7, [r4, r2]
 8019380:	b107      	cbz	r7, 8019384 <rshift+0x68>
 8019382:	3304      	adds	r3, #4
 8019384:	1b1a      	subs	r2, r3, r4
 8019386:	42a3      	cmp	r3, r4
 8019388:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801938c:	bf08      	it	eq
 801938e:	2300      	moveq	r3, #0
 8019390:	6102      	str	r2, [r0, #16]
 8019392:	bf08      	it	eq
 8019394:	6143      	streq	r3, [r0, #20]
 8019396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801939a:	f8dc c000 	ldr.w	ip, [ip]
 801939e:	fa0c fc08 	lsl.w	ip, ip, r8
 80193a2:	ea4c 0707 	orr.w	r7, ip, r7
 80193a6:	f849 7b04 	str.w	r7, [r9], #4
 80193aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80193ae:	40cf      	lsrs	r7, r1
 80193b0:	e7da      	b.n	8019368 <rshift+0x4c>
 80193b2:	f851 cb04 	ldr.w	ip, [r1], #4
 80193b6:	f847 cf04 	str.w	ip, [r7, #4]!
 80193ba:	e7c3      	b.n	8019344 <rshift+0x28>
 80193bc:	4623      	mov	r3, r4
 80193be:	e7e1      	b.n	8019384 <rshift+0x68>

080193c0 <__hexdig_fun>:
 80193c0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80193c4:	2b09      	cmp	r3, #9
 80193c6:	d802      	bhi.n	80193ce <__hexdig_fun+0xe>
 80193c8:	3820      	subs	r0, #32
 80193ca:	b2c0      	uxtb	r0, r0
 80193cc:	4770      	bx	lr
 80193ce:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80193d2:	2b05      	cmp	r3, #5
 80193d4:	d801      	bhi.n	80193da <__hexdig_fun+0x1a>
 80193d6:	3847      	subs	r0, #71	; 0x47
 80193d8:	e7f7      	b.n	80193ca <__hexdig_fun+0xa>
 80193da:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80193de:	2b05      	cmp	r3, #5
 80193e0:	d801      	bhi.n	80193e6 <__hexdig_fun+0x26>
 80193e2:	3827      	subs	r0, #39	; 0x27
 80193e4:	e7f1      	b.n	80193ca <__hexdig_fun+0xa>
 80193e6:	2000      	movs	r0, #0
 80193e8:	4770      	bx	lr
	...

080193ec <__gethex>:
 80193ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193f0:	ed2d 8b02 	vpush	{d8}
 80193f4:	b089      	sub	sp, #36	; 0x24
 80193f6:	ee08 0a10 	vmov	s16, r0
 80193fa:	9304      	str	r3, [sp, #16]
 80193fc:	4bb4      	ldr	r3, [pc, #720]	; (80196d0 <__gethex+0x2e4>)
 80193fe:	681b      	ldr	r3, [r3, #0]
 8019400:	9301      	str	r3, [sp, #4]
 8019402:	4618      	mov	r0, r3
 8019404:	468b      	mov	fp, r1
 8019406:	4690      	mov	r8, r2
 8019408:	f7e6 ff8c 	bl	8000324 <strlen>
 801940c:	9b01      	ldr	r3, [sp, #4]
 801940e:	f8db 2000 	ldr.w	r2, [fp]
 8019412:	4403      	add	r3, r0
 8019414:	4682      	mov	sl, r0
 8019416:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801941a:	9305      	str	r3, [sp, #20]
 801941c:	1c93      	adds	r3, r2, #2
 801941e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8019422:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8019426:	32fe      	adds	r2, #254	; 0xfe
 8019428:	18d1      	adds	r1, r2, r3
 801942a:	461f      	mov	r7, r3
 801942c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8019430:	9100      	str	r1, [sp, #0]
 8019432:	2830      	cmp	r0, #48	; 0x30
 8019434:	d0f8      	beq.n	8019428 <__gethex+0x3c>
 8019436:	f7ff ffc3 	bl	80193c0 <__hexdig_fun>
 801943a:	4604      	mov	r4, r0
 801943c:	2800      	cmp	r0, #0
 801943e:	d13a      	bne.n	80194b6 <__gethex+0xca>
 8019440:	9901      	ldr	r1, [sp, #4]
 8019442:	4652      	mov	r2, sl
 8019444:	4638      	mov	r0, r7
 8019446:	f001 fa43 	bl	801a8d0 <strncmp>
 801944a:	4605      	mov	r5, r0
 801944c:	2800      	cmp	r0, #0
 801944e:	d168      	bne.n	8019522 <__gethex+0x136>
 8019450:	f817 000a 	ldrb.w	r0, [r7, sl]
 8019454:	eb07 060a 	add.w	r6, r7, sl
 8019458:	f7ff ffb2 	bl	80193c0 <__hexdig_fun>
 801945c:	2800      	cmp	r0, #0
 801945e:	d062      	beq.n	8019526 <__gethex+0x13a>
 8019460:	4633      	mov	r3, r6
 8019462:	7818      	ldrb	r0, [r3, #0]
 8019464:	2830      	cmp	r0, #48	; 0x30
 8019466:	461f      	mov	r7, r3
 8019468:	f103 0301 	add.w	r3, r3, #1
 801946c:	d0f9      	beq.n	8019462 <__gethex+0x76>
 801946e:	f7ff ffa7 	bl	80193c0 <__hexdig_fun>
 8019472:	2301      	movs	r3, #1
 8019474:	fab0 f480 	clz	r4, r0
 8019478:	0964      	lsrs	r4, r4, #5
 801947a:	4635      	mov	r5, r6
 801947c:	9300      	str	r3, [sp, #0]
 801947e:	463a      	mov	r2, r7
 8019480:	4616      	mov	r6, r2
 8019482:	3201      	adds	r2, #1
 8019484:	7830      	ldrb	r0, [r6, #0]
 8019486:	f7ff ff9b 	bl	80193c0 <__hexdig_fun>
 801948a:	2800      	cmp	r0, #0
 801948c:	d1f8      	bne.n	8019480 <__gethex+0x94>
 801948e:	9901      	ldr	r1, [sp, #4]
 8019490:	4652      	mov	r2, sl
 8019492:	4630      	mov	r0, r6
 8019494:	f001 fa1c 	bl	801a8d0 <strncmp>
 8019498:	b980      	cbnz	r0, 80194bc <__gethex+0xd0>
 801949a:	b94d      	cbnz	r5, 80194b0 <__gethex+0xc4>
 801949c:	eb06 050a 	add.w	r5, r6, sl
 80194a0:	462a      	mov	r2, r5
 80194a2:	4616      	mov	r6, r2
 80194a4:	3201      	adds	r2, #1
 80194a6:	7830      	ldrb	r0, [r6, #0]
 80194a8:	f7ff ff8a 	bl	80193c0 <__hexdig_fun>
 80194ac:	2800      	cmp	r0, #0
 80194ae:	d1f8      	bne.n	80194a2 <__gethex+0xb6>
 80194b0:	1bad      	subs	r5, r5, r6
 80194b2:	00ad      	lsls	r5, r5, #2
 80194b4:	e004      	b.n	80194c0 <__gethex+0xd4>
 80194b6:	2400      	movs	r4, #0
 80194b8:	4625      	mov	r5, r4
 80194ba:	e7e0      	b.n	801947e <__gethex+0x92>
 80194bc:	2d00      	cmp	r5, #0
 80194be:	d1f7      	bne.n	80194b0 <__gethex+0xc4>
 80194c0:	7833      	ldrb	r3, [r6, #0]
 80194c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80194c6:	2b50      	cmp	r3, #80	; 0x50
 80194c8:	d13b      	bne.n	8019542 <__gethex+0x156>
 80194ca:	7873      	ldrb	r3, [r6, #1]
 80194cc:	2b2b      	cmp	r3, #43	; 0x2b
 80194ce:	d02c      	beq.n	801952a <__gethex+0x13e>
 80194d0:	2b2d      	cmp	r3, #45	; 0x2d
 80194d2:	d02e      	beq.n	8019532 <__gethex+0x146>
 80194d4:	1c71      	adds	r1, r6, #1
 80194d6:	f04f 0900 	mov.w	r9, #0
 80194da:	7808      	ldrb	r0, [r1, #0]
 80194dc:	f7ff ff70 	bl	80193c0 <__hexdig_fun>
 80194e0:	1e43      	subs	r3, r0, #1
 80194e2:	b2db      	uxtb	r3, r3
 80194e4:	2b18      	cmp	r3, #24
 80194e6:	d82c      	bhi.n	8019542 <__gethex+0x156>
 80194e8:	f1a0 0210 	sub.w	r2, r0, #16
 80194ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80194f0:	f7ff ff66 	bl	80193c0 <__hexdig_fun>
 80194f4:	1e43      	subs	r3, r0, #1
 80194f6:	b2db      	uxtb	r3, r3
 80194f8:	2b18      	cmp	r3, #24
 80194fa:	d91d      	bls.n	8019538 <__gethex+0x14c>
 80194fc:	f1b9 0f00 	cmp.w	r9, #0
 8019500:	d000      	beq.n	8019504 <__gethex+0x118>
 8019502:	4252      	negs	r2, r2
 8019504:	4415      	add	r5, r2
 8019506:	f8cb 1000 	str.w	r1, [fp]
 801950a:	b1e4      	cbz	r4, 8019546 <__gethex+0x15a>
 801950c:	9b00      	ldr	r3, [sp, #0]
 801950e:	2b00      	cmp	r3, #0
 8019510:	bf14      	ite	ne
 8019512:	2700      	movne	r7, #0
 8019514:	2706      	moveq	r7, #6
 8019516:	4638      	mov	r0, r7
 8019518:	b009      	add	sp, #36	; 0x24
 801951a:	ecbd 8b02 	vpop	{d8}
 801951e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019522:	463e      	mov	r6, r7
 8019524:	4625      	mov	r5, r4
 8019526:	2401      	movs	r4, #1
 8019528:	e7ca      	b.n	80194c0 <__gethex+0xd4>
 801952a:	f04f 0900 	mov.w	r9, #0
 801952e:	1cb1      	adds	r1, r6, #2
 8019530:	e7d3      	b.n	80194da <__gethex+0xee>
 8019532:	f04f 0901 	mov.w	r9, #1
 8019536:	e7fa      	b.n	801952e <__gethex+0x142>
 8019538:	230a      	movs	r3, #10
 801953a:	fb03 0202 	mla	r2, r3, r2, r0
 801953e:	3a10      	subs	r2, #16
 8019540:	e7d4      	b.n	80194ec <__gethex+0x100>
 8019542:	4631      	mov	r1, r6
 8019544:	e7df      	b.n	8019506 <__gethex+0x11a>
 8019546:	1bf3      	subs	r3, r6, r7
 8019548:	3b01      	subs	r3, #1
 801954a:	4621      	mov	r1, r4
 801954c:	2b07      	cmp	r3, #7
 801954e:	dc0b      	bgt.n	8019568 <__gethex+0x17c>
 8019550:	ee18 0a10 	vmov	r0, s16
 8019554:	f000 fa82 	bl	8019a5c <_Balloc>
 8019558:	4604      	mov	r4, r0
 801955a:	b940      	cbnz	r0, 801956e <__gethex+0x182>
 801955c:	4b5d      	ldr	r3, [pc, #372]	; (80196d4 <__gethex+0x2e8>)
 801955e:	4602      	mov	r2, r0
 8019560:	21de      	movs	r1, #222	; 0xde
 8019562:	485d      	ldr	r0, [pc, #372]	; (80196d8 <__gethex+0x2ec>)
 8019564:	f001 f9d6 	bl	801a914 <__assert_func>
 8019568:	3101      	adds	r1, #1
 801956a:	105b      	asrs	r3, r3, #1
 801956c:	e7ee      	b.n	801954c <__gethex+0x160>
 801956e:	f100 0914 	add.w	r9, r0, #20
 8019572:	f04f 0b00 	mov.w	fp, #0
 8019576:	f1ca 0301 	rsb	r3, sl, #1
 801957a:	f8cd 9008 	str.w	r9, [sp, #8]
 801957e:	f8cd b000 	str.w	fp, [sp]
 8019582:	9306      	str	r3, [sp, #24]
 8019584:	42b7      	cmp	r7, r6
 8019586:	d340      	bcc.n	801960a <__gethex+0x21e>
 8019588:	9802      	ldr	r0, [sp, #8]
 801958a:	9b00      	ldr	r3, [sp, #0]
 801958c:	f840 3b04 	str.w	r3, [r0], #4
 8019590:	eba0 0009 	sub.w	r0, r0, r9
 8019594:	1080      	asrs	r0, r0, #2
 8019596:	0146      	lsls	r6, r0, #5
 8019598:	6120      	str	r0, [r4, #16]
 801959a:	4618      	mov	r0, r3
 801959c:	f000 fb50 	bl	8019c40 <__hi0bits>
 80195a0:	1a30      	subs	r0, r6, r0
 80195a2:	f8d8 6000 	ldr.w	r6, [r8]
 80195a6:	42b0      	cmp	r0, r6
 80195a8:	dd63      	ble.n	8019672 <__gethex+0x286>
 80195aa:	1b87      	subs	r7, r0, r6
 80195ac:	4639      	mov	r1, r7
 80195ae:	4620      	mov	r0, r4
 80195b0:	f000 fef1 	bl	801a396 <__any_on>
 80195b4:	4682      	mov	sl, r0
 80195b6:	b1a8      	cbz	r0, 80195e4 <__gethex+0x1f8>
 80195b8:	1e7b      	subs	r3, r7, #1
 80195ba:	1159      	asrs	r1, r3, #5
 80195bc:	f003 021f 	and.w	r2, r3, #31
 80195c0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80195c4:	f04f 0a01 	mov.w	sl, #1
 80195c8:	fa0a f202 	lsl.w	r2, sl, r2
 80195cc:	420a      	tst	r2, r1
 80195ce:	d009      	beq.n	80195e4 <__gethex+0x1f8>
 80195d0:	4553      	cmp	r3, sl
 80195d2:	dd05      	ble.n	80195e0 <__gethex+0x1f4>
 80195d4:	1eb9      	subs	r1, r7, #2
 80195d6:	4620      	mov	r0, r4
 80195d8:	f000 fedd 	bl	801a396 <__any_on>
 80195dc:	2800      	cmp	r0, #0
 80195de:	d145      	bne.n	801966c <__gethex+0x280>
 80195e0:	f04f 0a02 	mov.w	sl, #2
 80195e4:	4639      	mov	r1, r7
 80195e6:	4620      	mov	r0, r4
 80195e8:	f7ff fe98 	bl	801931c <rshift>
 80195ec:	443d      	add	r5, r7
 80195ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80195f2:	42ab      	cmp	r3, r5
 80195f4:	da4c      	bge.n	8019690 <__gethex+0x2a4>
 80195f6:	ee18 0a10 	vmov	r0, s16
 80195fa:	4621      	mov	r1, r4
 80195fc:	f000 fa6e 	bl	8019adc <_Bfree>
 8019600:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019602:	2300      	movs	r3, #0
 8019604:	6013      	str	r3, [r2, #0]
 8019606:	27a3      	movs	r7, #163	; 0xa3
 8019608:	e785      	b.n	8019516 <__gethex+0x12a>
 801960a:	1e73      	subs	r3, r6, #1
 801960c:	9a05      	ldr	r2, [sp, #20]
 801960e:	9303      	str	r3, [sp, #12]
 8019610:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8019614:	4293      	cmp	r3, r2
 8019616:	d019      	beq.n	801964c <__gethex+0x260>
 8019618:	f1bb 0f20 	cmp.w	fp, #32
 801961c:	d107      	bne.n	801962e <__gethex+0x242>
 801961e:	9b02      	ldr	r3, [sp, #8]
 8019620:	9a00      	ldr	r2, [sp, #0]
 8019622:	f843 2b04 	str.w	r2, [r3], #4
 8019626:	9302      	str	r3, [sp, #8]
 8019628:	2300      	movs	r3, #0
 801962a:	9300      	str	r3, [sp, #0]
 801962c:	469b      	mov	fp, r3
 801962e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8019632:	f7ff fec5 	bl	80193c0 <__hexdig_fun>
 8019636:	9b00      	ldr	r3, [sp, #0]
 8019638:	f000 000f 	and.w	r0, r0, #15
 801963c:	fa00 f00b 	lsl.w	r0, r0, fp
 8019640:	4303      	orrs	r3, r0
 8019642:	9300      	str	r3, [sp, #0]
 8019644:	f10b 0b04 	add.w	fp, fp, #4
 8019648:	9b03      	ldr	r3, [sp, #12]
 801964a:	e00d      	b.n	8019668 <__gethex+0x27c>
 801964c:	9b03      	ldr	r3, [sp, #12]
 801964e:	9a06      	ldr	r2, [sp, #24]
 8019650:	4413      	add	r3, r2
 8019652:	42bb      	cmp	r3, r7
 8019654:	d3e0      	bcc.n	8019618 <__gethex+0x22c>
 8019656:	4618      	mov	r0, r3
 8019658:	9901      	ldr	r1, [sp, #4]
 801965a:	9307      	str	r3, [sp, #28]
 801965c:	4652      	mov	r2, sl
 801965e:	f001 f937 	bl	801a8d0 <strncmp>
 8019662:	9b07      	ldr	r3, [sp, #28]
 8019664:	2800      	cmp	r0, #0
 8019666:	d1d7      	bne.n	8019618 <__gethex+0x22c>
 8019668:	461e      	mov	r6, r3
 801966a:	e78b      	b.n	8019584 <__gethex+0x198>
 801966c:	f04f 0a03 	mov.w	sl, #3
 8019670:	e7b8      	b.n	80195e4 <__gethex+0x1f8>
 8019672:	da0a      	bge.n	801968a <__gethex+0x29e>
 8019674:	1a37      	subs	r7, r6, r0
 8019676:	4621      	mov	r1, r4
 8019678:	ee18 0a10 	vmov	r0, s16
 801967c:	463a      	mov	r2, r7
 801967e:	f000 fc49 	bl	8019f14 <__lshift>
 8019682:	1bed      	subs	r5, r5, r7
 8019684:	4604      	mov	r4, r0
 8019686:	f100 0914 	add.w	r9, r0, #20
 801968a:	f04f 0a00 	mov.w	sl, #0
 801968e:	e7ae      	b.n	80195ee <__gethex+0x202>
 8019690:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8019694:	42a8      	cmp	r0, r5
 8019696:	dd72      	ble.n	801977e <__gethex+0x392>
 8019698:	1b45      	subs	r5, r0, r5
 801969a:	42ae      	cmp	r6, r5
 801969c:	dc36      	bgt.n	801970c <__gethex+0x320>
 801969e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80196a2:	2b02      	cmp	r3, #2
 80196a4:	d02a      	beq.n	80196fc <__gethex+0x310>
 80196a6:	2b03      	cmp	r3, #3
 80196a8:	d02c      	beq.n	8019704 <__gethex+0x318>
 80196aa:	2b01      	cmp	r3, #1
 80196ac:	d11c      	bne.n	80196e8 <__gethex+0x2fc>
 80196ae:	42ae      	cmp	r6, r5
 80196b0:	d11a      	bne.n	80196e8 <__gethex+0x2fc>
 80196b2:	2e01      	cmp	r6, #1
 80196b4:	d112      	bne.n	80196dc <__gethex+0x2f0>
 80196b6:	9a04      	ldr	r2, [sp, #16]
 80196b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80196bc:	6013      	str	r3, [r2, #0]
 80196be:	2301      	movs	r3, #1
 80196c0:	6123      	str	r3, [r4, #16]
 80196c2:	f8c9 3000 	str.w	r3, [r9]
 80196c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80196c8:	2762      	movs	r7, #98	; 0x62
 80196ca:	601c      	str	r4, [r3, #0]
 80196cc:	e723      	b.n	8019516 <__gethex+0x12a>
 80196ce:	bf00      	nop
 80196d0:	0801be28 	.word	0x0801be28
 80196d4:	0801bdb0 	.word	0x0801bdb0
 80196d8:	0801bdc1 	.word	0x0801bdc1
 80196dc:	1e71      	subs	r1, r6, #1
 80196de:	4620      	mov	r0, r4
 80196e0:	f000 fe59 	bl	801a396 <__any_on>
 80196e4:	2800      	cmp	r0, #0
 80196e6:	d1e6      	bne.n	80196b6 <__gethex+0x2ca>
 80196e8:	ee18 0a10 	vmov	r0, s16
 80196ec:	4621      	mov	r1, r4
 80196ee:	f000 f9f5 	bl	8019adc <_Bfree>
 80196f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80196f4:	2300      	movs	r3, #0
 80196f6:	6013      	str	r3, [r2, #0]
 80196f8:	2750      	movs	r7, #80	; 0x50
 80196fa:	e70c      	b.n	8019516 <__gethex+0x12a>
 80196fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80196fe:	2b00      	cmp	r3, #0
 8019700:	d1f2      	bne.n	80196e8 <__gethex+0x2fc>
 8019702:	e7d8      	b.n	80196b6 <__gethex+0x2ca>
 8019704:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019706:	2b00      	cmp	r3, #0
 8019708:	d1d5      	bne.n	80196b6 <__gethex+0x2ca>
 801970a:	e7ed      	b.n	80196e8 <__gethex+0x2fc>
 801970c:	1e6f      	subs	r7, r5, #1
 801970e:	f1ba 0f00 	cmp.w	sl, #0
 8019712:	d131      	bne.n	8019778 <__gethex+0x38c>
 8019714:	b127      	cbz	r7, 8019720 <__gethex+0x334>
 8019716:	4639      	mov	r1, r7
 8019718:	4620      	mov	r0, r4
 801971a:	f000 fe3c 	bl	801a396 <__any_on>
 801971e:	4682      	mov	sl, r0
 8019720:	117b      	asrs	r3, r7, #5
 8019722:	2101      	movs	r1, #1
 8019724:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8019728:	f007 071f 	and.w	r7, r7, #31
 801972c:	fa01 f707 	lsl.w	r7, r1, r7
 8019730:	421f      	tst	r7, r3
 8019732:	4629      	mov	r1, r5
 8019734:	4620      	mov	r0, r4
 8019736:	bf18      	it	ne
 8019738:	f04a 0a02 	orrne.w	sl, sl, #2
 801973c:	1b76      	subs	r6, r6, r5
 801973e:	f7ff fded 	bl	801931c <rshift>
 8019742:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8019746:	2702      	movs	r7, #2
 8019748:	f1ba 0f00 	cmp.w	sl, #0
 801974c:	d048      	beq.n	80197e0 <__gethex+0x3f4>
 801974e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019752:	2b02      	cmp	r3, #2
 8019754:	d015      	beq.n	8019782 <__gethex+0x396>
 8019756:	2b03      	cmp	r3, #3
 8019758:	d017      	beq.n	801978a <__gethex+0x39e>
 801975a:	2b01      	cmp	r3, #1
 801975c:	d109      	bne.n	8019772 <__gethex+0x386>
 801975e:	f01a 0f02 	tst.w	sl, #2
 8019762:	d006      	beq.n	8019772 <__gethex+0x386>
 8019764:	f8d9 0000 	ldr.w	r0, [r9]
 8019768:	ea4a 0a00 	orr.w	sl, sl, r0
 801976c:	f01a 0f01 	tst.w	sl, #1
 8019770:	d10e      	bne.n	8019790 <__gethex+0x3a4>
 8019772:	f047 0710 	orr.w	r7, r7, #16
 8019776:	e033      	b.n	80197e0 <__gethex+0x3f4>
 8019778:	f04f 0a01 	mov.w	sl, #1
 801977c:	e7d0      	b.n	8019720 <__gethex+0x334>
 801977e:	2701      	movs	r7, #1
 8019780:	e7e2      	b.n	8019748 <__gethex+0x35c>
 8019782:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019784:	f1c3 0301 	rsb	r3, r3, #1
 8019788:	9315      	str	r3, [sp, #84]	; 0x54
 801978a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801978c:	2b00      	cmp	r3, #0
 801978e:	d0f0      	beq.n	8019772 <__gethex+0x386>
 8019790:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8019794:	f104 0314 	add.w	r3, r4, #20
 8019798:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801979c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80197a0:	f04f 0c00 	mov.w	ip, #0
 80197a4:	4618      	mov	r0, r3
 80197a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80197aa:	f1b2 3fff 	cmp.w	r2, #4294967295
 80197ae:	d01c      	beq.n	80197ea <__gethex+0x3fe>
 80197b0:	3201      	adds	r2, #1
 80197b2:	6002      	str	r2, [r0, #0]
 80197b4:	2f02      	cmp	r7, #2
 80197b6:	f104 0314 	add.w	r3, r4, #20
 80197ba:	d13f      	bne.n	801983c <__gethex+0x450>
 80197bc:	f8d8 2000 	ldr.w	r2, [r8]
 80197c0:	3a01      	subs	r2, #1
 80197c2:	42b2      	cmp	r2, r6
 80197c4:	d10a      	bne.n	80197dc <__gethex+0x3f0>
 80197c6:	1171      	asrs	r1, r6, #5
 80197c8:	2201      	movs	r2, #1
 80197ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80197ce:	f006 061f 	and.w	r6, r6, #31
 80197d2:	fa02 f606 	lsl.w	r6, r2, r6
 80197d6:	421e      	tst	r6, r3
 80197d8:	bf18      	it	ne
 80197da:	4617      	movne	r7, r2
 80197dc:	f047 0720 	orr.w	r7, r7, #32
 80197e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80197e2:	601c      	str	r4, [r3, #0]
 80197e4:	9b04      	ldr	r3, [sp, #16]
 80197e6:	601d      	str	r5, [r3, #0]
 80197e8:	e695      	b.n	8019516 <__gethex+0x12a>
 80197ea:	4299      	cmp	r1, r3
 80197ec:	f843 cc04 	str.w	ip, [r3, #-4]
 80197f0:	d8d8      	bhi.n	80197a4 <__gethex+0x3b8>
 80197f2:	68a3      	ldr	r3, [r4, #8]
 80197f4:	459b      	cmp	fp, r3
 80197f6:	db19      	blt.n	801982c <__gethex+0x440>
 80197f8:	6861      	ldr	r1, [r4, #4]
 80197fa:	ee18 0a10 	vmov	r0, s16
 80197fe:	3101      	adds	r1, #1
 8019800:	f000 f92c 	bl	8019a5c <_Balloc>
 8019804:	4681      	mov	r9, r0
 8019806:	b918      	cbnz	r0, 8019810 <__gethex+0x424>
 8019808:	4b1a      	ldr	r3, [pc, #104]	; (8019874 <__gethex+0x488>)
 801980a:	4602      	mov	r2, r0
 801980c:	2184      	movs	r1, #132	; 0x84
 801980e:	e6a8      	b.n	8019562 <__gethex+0x176>
 8019810:	6922      	ldr	r2, [r4, #16]
 8019812:	3202      	adds	r2, #2
 8019814:	f104 010c 	add.w	r1, r4, #12
 8019818:	0092      	lsls	r2, r2, #2
 801981a:	300c      	adds	r0, #12
 801981c:	f7fd fa3e 	bl	8016c9c <memcpy>
 8019820:	4621      	mov	r1, r4
 8019822:	ee18 0a10 	vmov	r0, s16
 8019826:	f000 f959 	bl	8019adc <_Bfree>
 801982a:	464c      	mov	r4, r9
 801982c:	6923      	ldr	r3, [r4, #16]
 801982e:	1c5a      	adds	r2, r3, #1
 8019830:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8019834:	6122      	str	r2, [r4, #16]
 8019836:	2201      	movs	r2, #1
 8019838:	615a      	str	r2, [r3, #20]
 801983a:	e7bb      	b.n	80197b4 <__gethex+0x3c8>
 801983c:	6922      	ldr	r2, [r4, #16]
 801983e:	455a      	cmp	r2, fp
 8019840:	dd0b      	ble.n	801985a <__gethex+0x46e>
 8019842:	2101      	movs	r1, #1
 8019844:	4620      	mov	r0, r4
 8019846:	f7ff fd69 	bl	801931c <rshift>
 801984a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801984e:	3501      	adds	r5, #1
 8019850:	42ab      	cmp	r3, r5
 8019852:	f6ff aed0 	blt.w	80195f6 <__gethex+0x20a>
 8019856:	2701      	movs	r7, #1
 8019858:	e7c0      	b.n	80197dc <__gethex+0x3f0>
 801985a:	f016 061f 	ands.w	r6, r6, #31
 801985e:	d0fa      	beq.n	8019856 <__gethex+0x46a>
 8019860:	4453      	add	r3, sl
 8019862:	f1c6 0620 	rsb	r6, r6, #32
 8019866:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801986a:	f000 f9e9 	bl	8019c40 <__hi0bits>
 801986e:	42b0      	cmp	r0, r6
 8019870:	dbe7      	blt.n	8019842 <__gethex+0x456>
 8019872:	e7f0      	b.n	8019856 <__gethex+0x46a>
 8019874:	0801bdb0 	.word	0x0801bdb0

08019878 <L_shift>:
 8019878:	f1c2 0208 	rsb	r2, r2, #8
 801987c:	0092      	lsls	r2, r2, #2
 801987e:	b570      	push	{r4, r5, r6, lr}
 8019880:	f1c2 0620 	rsb	r6, r2, #32
 8019884:	6843      	ldr	r3, [r0, #4]
 8019886:	6804      	ldr	r4, [r0, #0]
 8019888:	fa03 f506 	lsl.w	r5, r3, r6
 801988c:	432c      	orrs	r4, r5
 801988e:	40d3      	lsrs	r3, r2
 8019890:	6004      	str	r4, [r0, #0]
 8019892:	f840 3f04 	str.w	r3, [r0, #4]!
 8019896:	4288      	cmp	r0, r1
 8019898:	d3f4      	bcc.n	8019884 <L_shift+0xc>
 801989a:	bd70      	pop	{r4, r5, r6, pc}

0801989c <__match>:
 801989c:	b530      	push	{r4, r5, lr}
 801989e:	6803      	ldr	r3, [r0, #0]
 80198a0:	3301      	adds	r3, #1
 80198a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80198a6:	b914      	cbnz	r4, 80198ae <__match+0x12>
 80198a8:	6003      	str	r3, [r0, #0]
 80198aa:	2001      	movs	r0, #1
 80198ac:	bd30      	pop	{r4, r5, pc}
 80198ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80198b2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80198b6:	2d19      	cmp	r5, #25
 80198b8:	bf98      	it	ls
 80198ba:	3220      	addls	r2, #32
 80198bc:	42a2      	cmp	r2, r4
 80198be:	d0f0      	beq.n	80198a2 <__match+0x6>
 80198c0:	2000      	movs	r0, #0
 80198c2:	e7f3      	b.n	80198ac <__match+0x10>

080198c4 <__hexnan>:
 80198c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198c8:	680b      	ldr	r3, [r1, #0]
 80198ca:	115e      	asrs	r6, r3, #5
 80198cc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80198d0:	f013 031f 	ands.w	r3, r3, #31
 80198d4:	b087      	sub	sp, #28
 80198d6:	bf18      	it	ne
 80198d8:	3604      	addne	r6, #4
 80198da:	2500      	movs	r5, #0
 80198dc:	1f37      	subs	r7, r6, #4
 80198de:	4690      	mov	r8, r2
 80198e0:	6802      	ldr	r2, [r0, #0]
 80198e2:	9301      	str	r3, [sp, #4]
 80198e4:	4682      	mov	sl, r0
 80198e6:	f846 5c04 	str.w	r5, [r6, #-4]
 80198ea:	46b9      	mov	r9, r7
 80198ec:	463c      	mov	r4, r7
 80198ee:	9502      	str	r5, [sp, #8]
 80198f0:	46ab      	mov	fp, r5
 80198f2:	7851      	ldrb	r1, [r2, #1]
 80198f4:	1c53      	adds	r3, r2, #1
 80198f6:	9303      	str	r3, [sp, #12]
 80198f8:	b341      	cbz	r1, 801994c <__hexnan+0x88>
 80198fa:	4608      	mov	r0, r1
 80198fc:	9205      	str	r2, [sp, #20]
 80198fe:	9104      	str	r1, [sp, #16]
 8019900:	f7ff fd5e 	bl	80193c0 <__hexdig_fun>
 8019904:	2800      	cmp	r0, #0
 8019906:	d14f      	bne.n	80199a8 <__hexnan+0xe4>
 8019908:	9904      	ldr	r1, [sp, #16]
 801990a:	9a05      	ldr	r2, [sp, #20]
 801990c:	2920      	cmp	r1, #32
 801990e:	d818      	bhi.n	8019942 <__hexnan+0x7e>
 8019910:	9b02      	ldr	r3, [sp, #8]
 8019912:	459b      	cmp	fp, r3
 8019914:	dd13      	ble.n	801993e <__hexnan+0x7a>
 8019916:	454c      	cmp	r4, r9
 8019918:	d206      	bcs.n	8019928 <__hexnan+0x64>
 801991a:	2d07      	cmp	r5, #7
 801991c:	dc04      	bgt.n	8019928 <__hexnan+0x64>
 801991e:	462a      	mov	r2, r5
 8019920:	4649      	mov	r1, r9
 8019922:	4620      	mov	r0, r4
 8019924:	f7ff ffa8 	bl	8019878 <L_shift>
 8019928:	4544      	cmp	r4, r8
 801992a:	d950      	bls.n	80199ce <__hexnan+0x10a>
 801992c:	2300      	movs	r3, #0
 801992e:	f1a4 0904 	sub.w	r9, r4, #4
 8019932:	f844 3c04 	str.w	r3, [r4, #-4]
 8019936:	f8cd b008 	str.w	fp, [sp, #8]
 801993a:	464c      	mov	r4, r9
 801993c:	461d      	mov	r5, r3
 801993e:	9a03      	ldr	r2, [sp, #12]
 8019940:	e7d7      	b.n	80198f2 <__hexnan+0x2e>
 8019942:	2929      	cmp	r1, #41	; 0x29
 8019944:	d156      	bne.n	80199f4 <__hexnan+0x130>
 8019946:	3202      	adds	r2, #2
 8019948:	f8ca 2000 	str.w	r2, [sl]
 801994c:	f1bb 0f00 	cmp.w	fp, #0
 8019950:	d050      	beq.n	80199f4 <__hexnan+0x130>
 8019952:	454c      	cmp	r4, r9
 8019954:	d206      	bcs.n	8019964 <__hexnan+0xa0>
 8019956:	2d07      	cmp	r5, #7
 8019958:	dc04      	bgt.n	8019964 <__hexnan+0xa0>
 801995a:	462a      	mov	r2, r5
 801995c:	4649      	mov	r1, r9
 801995e:	4620      	mov	r0, r4
 8019960:	f7ff ff8a 	bl	8019878 <L_shift>
 8019964:	4544      	cmp	r4, r8
 8019966:	d934      	bls.n	80199d2 <__hexnan+0x10e>
 8019968:	f1a8 0204 	sub.w	r2, r8, #4
 801996c:	4623      	mov	r3, r4
 801996e:	f853 1b04 	ldr.w	r1, [r3], #4
 8019972:	f842 1f04 	str.w	r1, [r2, #4]!
 8019976:	429f      	cmp	r7, r3
 8019978:	d2f9      	bcs.n	801996e <__hexnan+0xaa>
 801997a:	1b3b      	subs	r3, r7, r4
 801997c:	f023 0303 	bic.w	r3, r3, #3
 8019980:	3304      	adds	r3, #4
 8019982:	3401      	adds	r4, #1
 8019984:	3e03      	subs	r6, #3
 8019986:	42b4      	cmp	r4, r6
 8019988:	bf88      	it	hi
 801998a:	2304      	movhi	r3, #4
 801998c:	4443      	add	r3, r8
 801998e:	2200      	movs	r2, #0
 8019990:	f843 2b04 	str.w	r2, [r3], #4
 8019994:	429f      	cmp	r7, r3
 8019996:	d2fb      	bcs.n	8019990 <__hexnan+0xcc>
 8019998:	683b      	ldr	r3, [r7, #0]
 801999a:	b91b      	cbnz	r3, 80199a4 <__hexnan+0xe0>
 801999c:	4547      	cmp	r7, r8
 801999e:	d127      	bne.n	80199f0 <__hexnan+0x12c>
 80199a0:	2301      	movs	r3, #1
 80199a2:	603b      	str	r3, [r7, #0]
 80199a4:	2005      	movs	r0, #5
 80199a6:	e026      	b.n	80199f6 <__hexnan+0x132>
 80199a8:	3501      	adds	r5, #1
 80199aa:	2d08      	cmp	r5, #8
 80199ac:	f10b 0b01 	add.w	fp, fp, #1
 80199b0:	dd06      	ble.n	80199c0 <__hexnan+0xfc>
 80199b2:	4544      	cmp	r4, r8
 80199b4:	d9c3      	bls.n	801993e <__hexnan+0x7a>
 80199b6:	2300      	movs	r3, #0
 80199b8:	f844 3c04 	str.w	r3, [r4, #-4]
 80199bc:	2501      	movs	r5, #1
 80199be:	3c04      	subs	r4, #4
 80199c0:	6822      	ldr	r2, [r4, #0]
 80199c2:	f000 000f 	and.w	r0, r0, #15
 80199c6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80199ca:	6022      	str	r2, [r4, #0]
 80199cc:	e7b7      	b.n	801993e <__hexnan+0x7a>
 80199ce:	2508      	movs	r5, #8
 80199d0:	e7b5      	b.n	801993e <__hexnan+0x7a>
 80199d2:	9b01      	ldr	r3, [sp, #4]
 80199d4:	2b00      	cmp	r3, #0
 80199d6:	d0df      	beq.n	8019998 <__hexnan+0xd4>
 80199d8:	f04f 32ff 	mov.w	r2, #4294967295
 80199dc:	f1c3 0320 	rsb	r3, r3, #32
 80199e0:	fa22 f303 	lsr.w	r3, r2, r3
 80199e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80199e8:	401a      	ands	r2, r3
 80199ea:	f846 2c04 	str.w	r2, [r6, #-4]
 80199ee:	e7d3      	b.n	8019998 <__hexnan+0xd4>
 80199f0:	3f04      	subs	r7, #4
 80199f2:	e7d1      	b.n	8019998 <__hexnan+0xd4>
 80199f4:	2004      	movs	r0, #4
 80199f6:	b007      	add	sp, #28
 80199f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080199fc <_localeconv_r>:
 80199fc:	4800      	ldr	r0, [pc, #0]	; (8019a00 <_localeconv_r+0x4>)
 80199fe:	4770      	bx	lr
 8019a00:	24000258 	.word	0x24000258

08019a04 <_lseek_r>:
 8019a04:	b538      	push	{r3, r4, r5, lr}
 8019a06:	4d07      	ldr	r5, [pc, #28]	; (8019a24 <_lseek_r+0x20>)
 8019a08:	4604      	mov	r4, r0
 8019a0a:	4608      	mov	r0, r1
 8019a0c:	4611      	mov	r1, r2
 8019a0e:	2200      	movs	r2, #0
 8019a10:	602a      	str	r2, [r5, #0]
 8019a12:	461a      	mov	r2, r3
 8019a14:	f7e9 fdd6 	bl	80035c4 <_lseek>
 8019a18:	1c43      	adds	r3, r0, #1
 8019a1a:	d102      	bne.n	8019a22 <_lseek_r+0x1e>
 8019a1c:	682b      	ldr	r3, [r5, #0]
 8019a1e:	b103      	cbz	r3, 8019a22 <_lseek_r+0x1e>
 8019a20:	6023      	str	r3, [r4, #0]
 8019a22:	bd38      	pop	{r3, r4, r5, pc}
 8019a24:	24003244 	.word	0x24003244

08019a28 <malloc>:
 8019a28:	4b02      	ldr	r3, [pc, #8]	; (8019a34 <malloc+0xc>)
 8019a2a:	4601      	mov	r1, r0
 8019a2c:	6818      	ldr	r0, [r3, #0]
 8019a2e:	f000 bd55 	b.w	801a4dc <_malloc_r>
 8019a32:	bf00      	nop
 8019a34:	24000100 	.word	0x24000100

08019a38 <__ascii_mbtowc>:
 8019a38:	b082      	sub	sp, #8
 8019a3a:	b901      	cbnz	r1, 8019a3e <__ascii_mbtowc+0x6>
 8019a3c:	a901      	add	r1, sp, #4
 8019a3e:	b142      	cbz	r2, 8019a52 <__ascii_mbtowc+0x1a>
 8019a40:	b14b      	cbz	r3, 8019a56 <__ascii_mbtowc+0x1e>
 8019a42:	7813      	ldrb	r3, [r2, #0]
 8019a44:	600b      	str	r3, [r1, #0]
 8019a46:	7812      	ldrb	r2, [r2, #0]
 8019a48:	1e10      	subs	r0, r2, #0
 8019a4a:	bf18      	it	ne
 8019a4c:	2001      	movne	r0, #1
 8019a4e:	b002      	add	sp, #8
 8019a50:	4770      	bx	lr
 8019a52:	4610      	mov	r0, r2
 8019a54:	e7fb      	b.n	8019a4e <__ascii_mbtowc+0x16>
 8019a56:	f06f 0001 	mvn.w	r0, #1
 8019a5a:	e7f8      	b.n	8019a4e <__ascii_mbtowc+0x16>

08019a5c <_Balloc>:
 8019a5c:	b570      	push	{r4, r5, r6, lr}
 8019a5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019a60:	4604      	mov	r4, r0
 8019a62:	460d      	mov	r5, r1
 8019a64:	b976      	cbnz	r6, 8019a84 <_Balloc+0x28>
 8019a66:	2010      	movs	r0, #16
 8019a68:	f7ff ffde 	bl	8019a28 <malloc>
 8019a6c:	4602      	mov	r2, r0
 8019a6e:	6260      	str	r0, [r4, #36]	; 0x24
 8019a70:	b920      	cbnz	r0, 8019a7c <_Balloc+0x20>
 8019a72:	4b18      	ldr	r3, [pc, #96]	; (8019ad4 <_Balloc+0x78>)
 8019a74:	4818      	ldr	r0, [pc, #96]	; (8019ad8 <_Balloc+0x7c>)
 8019a76:	2166      	movs	r1, #102	; 0x66
 8019a78:	f000 ff4c 	bl	801a914 <__assert_func>
 8019a7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019a80:	6006      	str	r6, [r0, #0]
 8019a82:	60c6      	str	r6, [r0, #12]
 8019a84:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8019a86:	68f3      	ldr	r3, [r6, #12]
 8019a88:	b183      	cbz	r3, 8019aac <_Balloc+0x50>
 8019a8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019a8c:	68db      	ldr	r3, [r3, #12]
 8019a8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019a92:	b9b8      	cbnz	r0, 8019ac4 <_Balloc+0x68>
 8019a94:	2101      	movs	r1, #1
 8019a96:	fa01 f605 	lsl.w	r6, r1, r5
 8019a9a:	1d72      	adds	r2, r6, #5
 8019a9c:	0092      	lsls	r2, r2, #2
 8019a9e:	4620      	mov	r0, r4
 8019aa0:	f000 fc9a 	bl	801a3d8 <_calloc_r>
 8019aa4:	b160      	cbz	r0, 8019ac0 <_Balloc+0x64>
 8019aa6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8019aaa:	e00e      	b.n	8019aca <_Balloc+0x6e>
 8019aac:	2221      	movs	r2, #33	; 0x21
 8019aae:	2104      	movs	r1, #4
 8019ab0:	4620      	mov	r0, r4
 8019ab2:	f000 fc91 	bl	801a3d8 <_calloc_r>
 8019ab6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019ab8:	60f0      	str	r0, [r6, #12]
 8019aba:	68db      	ldr	r3, [r3, #12]
 8019abc:	2b00      	cmp	r3, #0
 8019abe:	d1e4      	bne.n	8019a8a <_Balloc+0x2e>
 8019ac0:	2000      	movs	r0, #0
 8019ac2:	bd70      	pop	{r4, r5, r6, pc}
 8019ac4:	6802      	ldr	r2, [r0, #0]
 8019ac6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019aca:	2300      	movs	r3, #0
 8019acc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019ad0:	e7f7      	b.n	8019ac2 <_Balloc+0x66>
 8019ad2:	bf00      	nop
 8019ad4:	0801bd3e 	.word	0x0801bd3e
 8019ad8:	0801be3c 	.word	0x0801be3c

08019adc <_Bfree>:
 8019adc:	b570      	push	{r4, r5, r6, lr}
 8019ade:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019ae0:	4605      	mov	r5, r0
 8019ae2:	460c      	mov	r4, r1
 8019ae4:	b976      	cbnz	r6, 8019b04 <_Bfree+0x28>
 8019ae6:	2010      	movs	r0, #16
 8019ae8:	f7ff ff9e 	bl	8019a28 <malloc>
 8019aec:	4602      	mov	r2, r0
 8019aee:	6268      	str	r0, [r5, #36]	; 0x24
 8019af0:	b920      	cbnz	r0, 8019afc <_Bfree+0x20>
 8019af2:	4b09      	ldr	r3, [pc, #36]	; (8019b18 <_Bfree+0x3c>)
 8019af4:	4809      	ldr	r0, [pc, #36]	; (8019b1c <_Bfree+0x40>)
 8019af6:	218a      	movs	r1, #138	; 0x8a
 8019af8:	f000 ff0c 	bl	801a914 <__assert_func>
 8019afc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019b00:	6006      	str	r6, [r0, #0]
 8019b02:	60c6      	str	r6, [r0, #12]
 8019b04:	b13c      	cbz	r4, 8019b16 <_Bfree+0x3a>
 8019b06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8019b08:	6862      	ldr	r2, [r4, #4]
 8019b0a:	68db      	ldr	r3, [r3, #12]
 8019b0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019b10:	6021      	str	r1, [r4, #0]
 8019b12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8019b16:	bd70      	pop	{r4, r5, r6, pc}
 8019b18:	0801bd3e 	.word	0x0801bd3e
 8019b1c:	0801be3c 	.word	0x0801be3c

08019b20 <__multadd>:
 8019b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b24:	690d      	ldr	r5, [r1, #16]
 8019b26:	4607      	mov	r7, r0
 8019b28:	460c      	mov	r4, r1
 8019b2a:	461e      	mov	r6, r3
 8019b2c:	f101 0c14 	add.w	ip, r1, #20
 8019b30:	2000      	movs	r0, #0
 8019b32:	f8dc 3000 	ldr.w	r3, [ip]
 8019b36:	b299      	uxth	r1, r3
 8019b38:	fb02 6101 	mla	r1, r2, r1, r6
 8019b3c:	0c1e      	lsrs	r6, r3, #16
 8019b3e:	0c0b      	lsrs	r3, r1, #16
 8019b40:	fb02 3306 	mla	r3, r2, r6, r3
 8019b44:	b289      	uxth	r1, r1
 8019b46:	3001      	adds	r0, #1
 8019b48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8019b4c:	4285      	cmp	r5, r0
 8019b4e:	f84c 1b04 	str.w	r1, [ip], #4
 8019b52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8019b56:	dcec      	bgt.n	8019b32 <__multadd+0x12>
 8019b58:	b30e      	cbz	r6, 8019b9e <__multadd+0x7e>
 8019b5a:	68a3      	ldr	r3, [r4, #8]
 8019b5c:	42ab      	cmp	r3, r5
 8019b5e:	dc19      	bgt.n	8019b94 <__multadd+0x74>
 8019b60:	6861      	ldr	r1, [r4, #4]
 8019b62:	4638      	mov	r0, r7
 8019b64:	3101      	adds	r1, #1
 8019b66:	f7ff ff79 	bl	8019a5c <_Balloc>
 8019b6a:	4680      	mov	r8, r0
 8019b6c:	b928      	cbnz	r0, 8019b7a <__multadd+0x5a>
 8019b6e:	4602      	mov	r2, r0
 8019b70:	4b0c      	ldr	r3, [pc, #48]	; (8019ba4 <__multadd+0x84>)
 8019b72:	480d      	ldr	r0, [pc, #52]	; (8019ba8 <__multadd+0x88>)
 8019b74:	21b5      	movs	r1, #181	; 0xb5
 8019b76:	f000 fecd 	bl	801a914 <__assert_func>
 8019b7a:	6922      	ldr	r2, [r4, #16]
 8019b7c:	3202      	adds	r2, #2
 8019b7e:	f104 010c 	add.w	r1, r4, #12
 8019b82:	0092      	lsls	r2, r2, #2
 8019b84:	300c      	adds	r0, #12
 8019b86:	f7fd f889 	bl	8016c9c <memcpy>
 8019b8a:	4621      	mov	r1, r4
 8019b8c:	4638      	mov	r0, r7
 8019b8e:	f7ff ffa5 	bl	8019adc <_Bfree>
 8019b92:	4644      	mov	r4, r8
 8019b94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8019b98:	3501      	adds	r5, #1
 8019b9a:	615e      	str	r6, [r3, #20]
 8019b9c:	6125      	str	r5, [r4, #16]
 8019b9e:	4620      	mov	r0, r4
 8019ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ba4:	0801bdb0 	.word	0x0801bdb0
 8019ba8:	0801be3c 	.word	0x0801be3c

08019bac <__s2b>:
 8019bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019bb0:	460c      	mov	r4, r1
 8019bb2:	4615      	mov	r5, r2
 8019bb4:	461f      	mov	r7, r3
 8019bb6:	2209      	movs	r2, #9
 8019bb8:	3308      	adds	r3, #8
 8019bba:	4606      	mov	r6, r0
 8019bbc:	fb93 f3f2 	sdiv	r3, r3, r2
 8019bc0:	2100      	movs	r1, #0
 8019bc2:	2201      	movs	r2, #1
 8019bc4:	429a      	cmp	r2, r3
 8019bc6:	db09      	blt.n	8019bdc <__s2b+0x30>
 8019bc8:	4630      	mov	r0, r6
 8019bca:	f7ff ff47 	bl	8019a5c <_Balloc>
 8019bce:	b940      	cbnz	r0, 8019be2 <__s2b+0x36>
 8019bd0:	4602      	mov	r2, r0
 8019bd2:	4b19      	ldr	r3, [pc, #100]	; (8019c38 <__s2b+0x8c>)
 8019bd4:	4819      	ldr	r0, [pc, #100]	; (8019c3c <__s2b+0x90>)
 8019bd6:	21ce      	movs	r1, #206	; 0xce
 8019bd8:	f000 fe9c 	bl	801a914 <__assert_func>
 8019bdc:	0052      	lsls	r2, r2, #1
 8019bde:	3101      	adds	r1, #1
 8019be0:	e7f0      	b.n	8019bc4 <__s2b+0x18>
 8019be2:	9b08      	ldr	r3, [sp, #32]
 8019be4:	6143      	str	r3, [r0, #20]
 8019be6:	2d09      	cmp	r5, #9
 8019be8:	f04f 0301 	mov.w	r3, #1
 8019bec:	6103      	str	r3, [r0, #16]
 8019bee:	dd16      	ble.n	8019c1e <__s2b+0x72>
 8019bf0:	f104 0909 	add.w	r9, r4, #9
 8019bf4:	46c8      	mov	r8, r9
 8019bf6:	442c      	add	r4, r5
 8019bf8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8019bfc:	4601      	mov	r1, r0
 8019bfe:	3b30      	subs	r3, #48	; 0x30
 8019c00:	220a      	movs	r2, #10
 8019c02:	4630      	mov	r0, r6
 8019c04:	f7ff ff8c 	bl	8019b20 <__multadd>
 8019c08:	45a0      	cmp	r8, r4
 8019c0a:	d1f5      	bne.n	8019bf8 <__s2b+0x4c>
 8019c0c:	f1a5 0408 	sub.w	r4, r5, #8
 8019c10:	444c      	add	r4, r9
 8019c12:	1b2d      	subs	r5, r5, r4
 8019c14:	1963      	adds	r3, r4, r5
 8019c16:	42bb      	cmp	r3, r7
 8019c18:	db04      	blt.n	8019c24 <__s2b+0x78>
 8019c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019c1e:	340a      	adds	r4, #10
 8019c20:	2509      	movs	r5, #9
 8019c22:	e7f6      	b.n	8019c12 <__s2b+0x66>
 8019c24:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019c28:	4601      	mov	r1, r0
 8019c2a:	3b30      	subs	r3, #48	; 0x30
 8019c2c:	220a      	movs	r2, #10
 8019c2e:	4630      	mov	r0, r6
 8019c30:	f7ff ff76 	bl	8019b20 <__multadd>
 8019c34:	e7ee      	b.n	8019c14 <__s2b+0x68>
 8019c36:	bf00      	nop
 8019c38:	0801bdb0 	.word	0x0801bdb0
 8019c3c:	0801be3c 	.word	0x0801be3c

08019c40 <__hi0bits>:
 8019c40:	0c03      	lsrs	r3, r0, #16
 8019c42:	041b      	lsls	r3, r3, #16
 8019c44:	b9d3      	cbnz	r3, 8019c7c <__hi0bits+0x3c>
 8019c46:	0400      	lsls	r0, r0, #16
 8019c48:	2310      	movs	r3, #16
 8019c4a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8019c4e:	bf04      	itt	eq
 8019c50:	0200      	lsleq	r0, r0, #8
 8019c52:	3308      	addeq	r3, #8
 8019c54:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019c58:	bf04      	itt	eq
 8019c5a:	0100      	lsleq	r0, r0, #4
 8019c5c:	3304      	addeq	r3, #4
 8019c5e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8019c62:	bf04      	itt	eq
 8019c64:	0080      	lsleq	r0, r0, #2
 8019c66:	3302      	addeq	r3, #2
 8019c68:	2800      	cmp	r0, #0
 8019c6a:	db05      	blt.n	8019c78 <__hi0bits+0x38>
 8019c6c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8019c70:	f103 0301 	add.w	r3, r3, #1
 8019c74:	bf08      	it	eq
 8019c76:	2320      	moveq	r3, #32
 8019c78:	4618      	mov	r0, r3
 8019c7a:	4770      	bx	lr
 8019c7c:	2300      	movs	r3, #0
 8019c7e:	e7e4      	b.n	8019c4a <__hi0bits+0xa>

08019c80 <__lo0bits>:
 8019c80:	6803      	ldr	r3, [r0, #0]
 8019c82:	f013 0207 	ands.w	r2, r3, #7
 8019c86:	4601      	mov	r1, r0
 8019c88:	d00b      	beq.n	8019ca2 <__lo0bits+0x22>
 8019c8a:	07da      	lsls	r2, r3, #31
 8019c8c:	d423      	bmi.n	8019cd6 <__lo0bits+0x56>
 8019c8e:	0798      	lsls	r0, r3, #30
 8019c90:	bf49      	itett	mi
 8019c92:	085b      	lsrmi	r3, r3, #1
 8019c94:	089b      	lsrpl	r3, r3, #2
 8019c96:	2001      	movmi	r0, #1
 8019c98:	600b      	strmi	r3, [r1, #0]
 8019c9a:	bf5c      	itt	pl
 8019c9c:	600b      	strpl	r3, [r1, #0]
 8019c9e:	2002      	movpl	r0, #2
 8019ca0:	4770      	bx	lr
 8019ca2:	b298      	uxth	r0, r3
 8019ca4:	b9a8      	cbnz	r0, 8019cd2 <__lo0bits+0x52>
 8019ca6:	0c1b      	lsrs	r3, r3, #16
 8019ca8:	2010      	movs	r0, #16
 8019caa:	b2da      	uxtb	r2, r3
 8019cac:	b90a      	cbnz	r2, 8019cb2 <__lo0bits+0x32>
 8019cae:	3008      	adds	r0, #8
 8019cb0:	0a1b      	lsrs	r3, r3, #8
 8019cb2:	071a      	lsls	r2, r3, #28
 8019cb4:	bf04      	itt	eq
 8019cb6:	091b      	lsreq	r3, r3, #4
 8019cb8:	3004      	addeq	r0, #4
 8019cba:	079a      	lsls	r2, r3, #30
 8019cbc:	bf04      	itt	eq
 8019cbe:	089b      	lsreq	r3, r3, #2
 8019cc0:	3002      	addeq	r0, #2
 8019cc2:	07da      	lsls	r2, r3, #31
 8019cc4:	d403      	bmi.n	8019cce <__lo0bits+0x4e>
 8019cc6:	085b      	lsrs	r3, r3, #1
 8019cc8:	f100 0001 	add.w	r0, r0, #1
 8019ccc:	d005      	beq.n	8019cda <__lo0bits+0x5a>
 8019cce:	600b      	str	r3, [r1, #0]
 8019cd0:	4770      	bx	lr
 8019cd2:	4610      	mov	r0, r2
 8019cd4:	e7e9      	b.n	8019caa <__lo0bits+0x2a>
 8019cd6:	2000      	movs	r0, #0
 8019cd8:	4770      	bx	lr
 8019cda:	2020      	movs	r0, #32
 8019cdc:	4770      	bx	lr
	...

08019ce0 <__i2b>:
 8019ce0:	b510      	push	{r4, lr}
 8019ce2:	460c      	mov	r4, r1
 8019ce4:	2101      	movs	r1, #1
 8019ce6:	f7ff feb9 	bl	8019a5c <_Balloc>
 8019cea:	4602      	mov	r2, r0
 8019cec:	b928      	cbnz	r0, 8019cfa <__i2b+0x1a>
 8019cee:	4b05      	ldr	r3, [pc, #20]	; (8019d04 <__i2b+0x24>)
 8019cf0:	4805      	ldr	r0, [pc, #20]	; (8019d08 <__i2b+0x28>)
 8019cf2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8019cf6:	f000 fe0d 	bl	801a914 <__assert_func>
 8019cfa:	2301      	movs	r3, #1
 8019cfc:	6144      	str	r4, [r0, #20]
 8019cfe:	6103      	str	r3, [r0, #16]
 8019d00:	bd10      	pop	{r4, pc}
 8019d02:	bf00      	nop
 8019d04:	0801bdb0 	.word	0x0801bdb0
 8019d08:	0801be3c 	.word	0x0801be3c

08019d0c <__multiply>:
 8019d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d10:	4691      	mov	r9, r2
 8019d12:	690a      	ldr	r2, [r1, #16]
 8019d14:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019d18:	429a      	cmp	r2, r3
 8019d1a:	bfb8      	it	lt
 8019d1c:	460b      	movlt	r3, r1
 8019d1e:	460c      	mov	r4, r1
 8019d20:	bfbc      	itt	lt
 8019d22:	464c      	movlt	r4, r9
 8019d24:	4699      	movlt	r9, r3
 8019d26:	6927      	ldr	r7, [r4, #16]
 8019d28:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8019d2c:	68a3      	ldr	r3, [r4, #8]
 8019d2e:	6861      	ldr	r1, [r4, #4]
 8019d30:	eb07 060a 	add.w	r6, r7, sl
 8019d34:	42b3      	cmp	r3, r6
 8019d36:	b085      	sub	sp, #20
 8019d38:	bfb8      	it	lt
 8019d3a:	3101      	addlt	r1, #1
 8019d3c:	f7ff fe8e 	bl	8019a5c <_Balloc>
 8019d40:	b930      	cbnz	r0, 8019d50 <__multiply+0x44>
 8019d42:	4602      	mov	r2, r0
 8019d44:	4b44      	ldr	r3, [pc, #272]	; (8019e58 <__multiply+0x14c>)
 8019d46:	4845      	ldr	r0, [pc, #276]	; (8019e5c <__multiply+0x150>)
 8019d48:	f240 115d 	movw	r1, #349	; 0x15d
 8019d4c:	f000 fde2 	bl	801a914 <__assert_func>
 8019d50:	f100 0514 	add.w	r5, r0, #20
 8019d54:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8019d58:	462b      	mov	r3, r5
 8019d5a:	2200      	movs	r2, #0
 8019d5c:	4543      	cmp	r3, r8
 8019d5e:	d321      	bcc.n	8019da4 <__multiply+0x98>
 8019d60:	f104 0314 	add.w	r3, r4, #20
 8019d64:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8019d68:	f109 0314 	add.w	r3, r9, #20
 8019d6c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8019d70:	9202      	str	r2, [sp, #8]
 8019d72:	1b3a      	subs	r2, r7, r4
 8019d74:	3a15      	subs	r2, #21
 8019d76:	f022 0203 	bic.w	r2, r2, #3
 8019d7a:	3204      	adds	r2, #4
 8019d7c:	f104 0115 	add.w	r1, r4, #21
 8019d80:	428f      	cmp	r7, r1
 8019d82:	bf38      	it	cc
 8019d84:	2204      	movcc	r2, #4
 8019d86:	9201      	str	r2, [sp, #4]
 8019d88:	9a02      	ldr	r2, [sp, #8]
 8019d8a:	9303      	str	r3, [sp, #12]
 8019d8c:	429a      	cmp	r2, r3
 8019d8e:	d80c      	bhi.n	8019daa <__multiply+0x9e>
 8019d90:	2e00      	cmp	r6, #0
 8019d92:	dd03      	ble.n	8019d9c <__multiply+0x90>
 8019d94:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	d05a      	beq.n	8019e52 <__multiply+0x146>
 8019d9c:	6106      	str	r6, [r0, #16]
 8019d9e:	b005      	add	sp, #20
 8019da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019da4:	f843 2b04 	str.w	r2, [r3], #4
 8019da8:	e7d8      	b.n	8019d5c <__multiply+0x50>
 8019daa:	f8b3 a000 	ldrh.w	sl, [r3]
 8019dae:	f1ba 0f00 	cmp.w	sl, #0
 8019db2:	d024      	beq.n	8019dfe <__multiply+0xf2>
 8019db4:	f104 0e14 	add.w	lr, r4, #20
 8019db8:	46a9      	mov	r9, r5
 8019dba:	f04f 0c00 	mov.w	ip, #0
 8019dbe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8019dc2:	f8d9 1000 	ldr.w	r1, [r9]
 8019dc6:	fa1f fb82 	uxth.w	fp, r2
 8019dca:	b289      	uxth	r1, r1
 8019dcc:	fb0a 110b 	mla	r1, sl, fp, r1
 8019dd0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8019dd4:	f8d9 2000 	ldr.w	r2, [r9]
 8019dd8:	4461      	add	r1, ip
 8019dda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8019dde:	fb0a c20b 	mla	r2, sl, fp, ip
 8019de2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8019de6:	b289      	uxth	r1, r1
 8019de8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8019dec:	4577      	cmp	r7, lr
 8019dee:	f849 1b04 	str.w	r1, [r9], #4
 8019df2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8019df6:	d8e2      	bhi.n	8019dbe <__multiply+0xb2>
 8019df8:	9a01      	ldr	r2, [sp, #4]
 8019dfa:	f845 c002 	str.w	ip, [r5, r2]
 8019dfe:	9a03      	ldr	r2, [sp, #12]
 8019e00:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8019e04:	3304      	adds	r3, #4
 8019e06:	f1b9 0f00 	cmp.w	r9, #0
 8019e0a:	d020      	beq.n	8019e4e <__multiply+0x142>
 8019e0c:	6829      	ldr	r1, [r5, #0]
 8019e0e:	f104 0c14 	add.w	ip, r4, #20
 8019e12:	46ae      	mov	lr, r5
 8019e14:	f04f 0a00 	mov.w	sl, #0
 8019e18:	f8bc b000 	ldrh.w	fp, [ip]
 8019e1c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8019e20:	fb09 220b 	mla	r2, r9, fp, r2
 8019e24:	4492      	add	sl, r2
 8019e26:	b289      	uxth	r1, r1
 8019e28:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8019e2c:	f84e 1b04 	str.w	r1, [lr], #4
 8019e30:	f85c 2b04 	ldr.w	r2, [ip], #4
 8019e34:	f8be 1000 	ldrh.w	r1, [lr]
 8019e38:	0c12      	lsrs	r2, r2, #16
 8019e3a:	fb09 1102 	mla	r1, r9, r2, r1
 8019e3e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8019e42:	4567      	cmp	r7, ip
 8019e44:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8019e48:	d8e6      	bhi.n	8019e18 <__multiply+0x10c>
 8019e4a:	9a01      	ldr	r2, [sp, #4]
 8019e4c:	50a9      	str	r1, [r5, r2]
 8019e4e:	3504      	adds	r5, #4
 8019e50:	e79a      	b.n	8019d88 <__multiply+0x7c>
 8019e52:	3e01      	subs	r6, #1
 8019e54:	e79c      	b.n	8019d90 <__multiply+0x84>
 8019e56:	bf00      	nop
 8019e58:	0801bdb0 	.word	0x0801bdb0
 8019e5c:	0801be3c 	.word	0x0801be3c

08019e60 <__pow5mult>:
 8019e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019e64:	4615      	mov	r5, r2
 8019e66:	f012 0203 	ands.w	r2, r2, #3
 8019e6a:	4606      	mov	r6, r0
 8019e6c:	460f      	mov	r7, r1
 8019e6e:	d007      	beq.n	8019e80 <__pow5mult+0x20>
 8019e70:	4c25      	ldr	r4, [pc, #148]	; (8019f08 <__pow5mult+0xa8>)
 8019e72:	3a01      	subs	r2, #1
 8019e74:	2300      	movs	r3, #0
 8019e76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8019e7a:	f7ff fe51 	bl	8019b20 <__multadd>
 8019e7e:	4607      	mov	r7, r0
 8019e80:	10ad      	asrs	r5, r5, #2
 8019e82:	d03d      	beq.n	8019f00 <__pow5mult+0xa0>
 8019e84:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8019e86:	b97c      	cbnz	r4, 8019ea8 <__pow5mult+0x48>
 8019e88:	2010      	movs	r0, #16
 8019e8a:	f7ff fdcd 	bl	8019a28 <malloc>
 8019e8e:	4602      	mov	r2, r0
 8019e90:	6270      	str	r0, [r6, #36]	; 0x24
 8019e92:	b928      	cbnz	r0, 8019ea0 <__pow5mult+0x40>
 8019e94:	4b1d      	ldr	r3, [pc, #116]	; (8019f0c <__pow5mult+0xac>)
 8019e96:	481e      	ldr	r0, [pc, #120]	; (8019f10 <__pow5mult+0xb0>)
 8019e98:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8019e9c:	f000 fd3a 	bl	801a914 <__assert_func>
 8019ea0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019ea4:	6004      	str	r4, [r0, #0]
 8019ea6:	60c4      	str	r4, [r0, #12]
 8019ea8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8019eac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019eb0:	b94c      	cbnz	r4, 8019ec6 <__pow5mult+0x66>
 8019eb2:	f240 2171 	movw	r1, #625	; 0x271
 8019eb6:	4630      	mov	r0, r6
 8019eb8:	f7ff ff12 	bl	8019ce0 <__i2b>
 8019ebc:	2300      	movs	r3, #0
 8019ebe:	f8c8 0008 	str.w	r0, [r8, #8]
 8019ec2:	4604      	mov	r4, r0
 8019ec4:	6003      	str	r3, [r0, #0]
 8019ec6:	f04f 0900 	mov.w	r9, #0
 8019eca:	07eb      	lsls	r3, r5, #31
 8019ecc:	d50a      	bpl.n	8019ee4 <__pow5mult+0x84>
 8019ece:	4639      	mov	r1, r7
 8019ed0:	4622      	mov	r2, r4
 8019ed2:	4630      	mov	r0, r6
 8019ed4:	f7ff ff1a 	bl	8019d0c <__multiply>
 8019ed8:	4639      	mov	r1, r7
 8019eda:	4680      	mov	r8, r0
 8019edc:	4630      	mov	r0, r6
 8019ede:	f7ff fdfd 	bl	8019adc <_Bfree>
 8019ee2:	4647      	mov	r7, r8
 8019ee4:	106d      	asrs	r5, r5, #1
 8019ee6:	d00b      	beq.n	8019f00 <__pow5mult+0xa0>
 8019ee8:	6820      	ldr	r0, [r4, #0]
 8019eea:	b938      	cbnz	r0, 8019efc <__pow5mult+0x9c>
 8019eec:	4622      	mov	r2, r4
 8019eee:	4621      	mov	r1, r4
 8019ef0:	4630      	mov	r0, r6
 8019ef2:	f7ff ff0b 	bl	8019d0c <__multiply>
 8019ef6:	6020      	str	r0, [r4, #0]
 8019ef8:	f8c0 9000 	str.w	r9, [r0]
 8019efc:	4604      	mov	r4, r0
 8019efe:	e7e4      	b.n	8019eca <__pow5mult+0x6a>
 8019f00:	4638      	mov	r0, r7
 8019f02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019f06:	bf00      	nop
 8019f08:	0801bf88 	.word	0x0801bf88
 8019f0c:	0801bd3e 	.word	0x0801bd3e
 8019f10:	0801be3c 	.word	0x0801be3c

08019f14 <__lshift>:
 8019f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019f18:	460c      	mov	r4, r1
 8019f1a:	6849      	ldr	r1, [r1, #4]
 8019f1c:	6923      	ldr	r3, [r4, #16]
 8019f1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019f22:	68a3      	ldr	r3, [r4, #8]
 8019f24:	4607      	mov	r7, r0
 8019f26:	4691      	mov	r9, r2
 8019f28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019f2c:	f108 0601 	add.w	r6, r8, #1
 8019f30:	42b3      	cmp	r3, r6
 8019f32:	db0b      	blt.n	8019f4c <__lshift+0x38>
 8019f34:	4638      	mov	r0, r7
 8019f36:	f7ff fd91 	bl	8019a5c <_Balloc>
 8019f3a:	4605      	mov	r5, r0
 8019f3c:	b948      	cbnz	r0, 8019f52 <__lshift+0x3e>
 8019f3e:	4602      	mov	r2, r0
 8019f40:	4b2a      	ldr	r3, [pc, #168]	; (8019fec <__lshift+0xd8>)
 8019f42:	482b      	ldr	r0, [pc, #172]	; (8019ff0 <__lshift+0xdc>)
 8019f44:	f240 11d9 	movw	r1, #473	; 0x1d9
 8019f48:	f000 fce4 	bl	801a914 <__assert_func>
 8019f4c:	3101      	adds	r1, #1
 8019f4e:	005b      	lsls	r3, r3, #1
 8019f50:	e7ee      	b.n	8019f30 <__lshift+0x1c>
 8019f52:	2300      	movs	r3, #0
 8019f54:	f100 0114 	add.w	r1, r0, #20
 8019f58:	f100 0210 	add.w	r2, r0, #16
 8019f5c:	4618      	mov	r0, r3
 8019f5e:	4553      	cmp	r3, sl
 8019f60:	db37      	blt.n	8019fd2 <__lshift+0xbe>
 8019f62:	6920      	ldr	r0, [r4, #16]
 8019f64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019f68:	f104 0314 	add.w	r3, r4, #20
 8019f6c:	f019 091f 	ands.w	r9, r9, #31
 8019f70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019f74:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019f78:	d02f      	beq.n	8019fda <__lshift+0xc6>
 8019f7a:	f1c9 0e20 	rsb	lr, r9, #32
 8019f7e:	468a      	mov	sl, r1
 8019f80:	f04f 0c00 	mov.w	ip, #0
 8019f84:	681a      	ldr	r2, [r3, #0]
 8019f86:	fa02 f209 	lsl.w	r2, r2, r9
 8019f8a:	ea42 020c 	orr.w	r2, r2, ip
 8019f8e:	f84a 2b04 	str.w	r2, [sl], #4
 8019f92:	f853 2b04 	ldr.w	r2, [r3], #4
 8019f96:	4298      	cmp	r0, r3
 8019f98:	fa22 fc0e 	lsr.w	ip, r2, lr
 8019f9c:	d8f2      	bhi.n	8019f84 <__lshift+0x70>
 8019f9e:	1b03      	subs	r3, r0, r4
 8019fa0:	3b15      	subs	r3, #21
 8019fa2:	f023 0303 	bic.w	r3, r3, #3
 8019fa6:	3304      	adds	r3, #4
 8019fa8:	f104 0215 	add.w	r2, r4, #21
 8019fac:	4290      	cmp	r0, r2
 8019fae:	bf38      	it	cc
 8019fb0:	2304      	movcc	r3, #4
 8019fb2:	f841 c003 	str.w	ip, [r1, r3]
 8019fb6:	f1bc 0f00 	cmp.w	ip, #0
 8019fba:	d001      	beq.n	8019fc0 <__lshift+0xac>
 8019fbc:	f108 0602 	add.w	r6, r8, #2
 8019fc0:	3e01      	subs	r6, #1
 8019fc2:	4638      	mov	r0, r7
 8019fc4:	612e      	str	r6, [r5, #16]
 8019fc6:	4621      	mov	r1, r4
 8019fc8:	f7ff fd88 	bl	8019adc <_Bfree>
 8019fcc:	4628      	mov	r0, r5
 8019fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019fd2:	f842 0f04 	str.w	r0, [r2, #4]!
 8019fd6:	3301      	adds	r3, #1
 8019fd8:	e7c1      	b.n	8019f5e <__lshift+0x4a>
 8019fda:	3904      	subs	r1, #4
 8019fdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8019fe0:	f841 2f04 	str.w	r2, [r1, #4]!
 8019fe4:	4298      	cmp	r0, r3
 8019fe6:	d8f9      	bhi.n	8019fdc <__lshift+0xc8>
 8019fe8:	e7ea      	b.n	8019fc0 <__lshift+0xac>
 8019fea:	bf00      	nop
 8019fec:	0801bdb0 	.word	0x0801bdb0
 8019ff0:	0801be3c 	.word	0x0801be3c

08019ff4 <__mcmp>:
 8019ff4:	b530      	push	{r4, r5, lr}
 8019ff6:	6902      	ldr	r2, [r0, #16]
 8019ff8:	690c      	ldr	r4, [r1, #16]
 8019ffa:	1b12      	subs	r2, r2, r4
 8019ffc:	d10e      	bne.n	801a01c <__mcmp+0x28>
 8019ffe:	f100 0314 	add.w	r3, r0, #20
 801a002:	3114      	adds	r1, #20
 801a004:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801a008:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801a00c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801a010:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801a014:	42a5      	cmp	r5, r4
 801a016:	d003      	beq.n	801a020 <__mcmp+0x2c>
 801a018:	d305      	bcc.n	801a026 <__mcmp+0x32>
 801a01a:	2201      	movs	r2, #1
 801a01c:	4610      	mov	r0, r2
 801a01e:	bd30      	pop	{r4, r5, pc}
 801a020:	4283      	cmp	r3, r0
 801a022:	d3f3      	bcc.n	801a00c <__mcmp+0x18>
 801a024:	e7fa      	b.n	801a01c <__mcmp+0x28>
 801a026:	f04f 32ff 	mov.w	r2, #4294967295
 801a02a:	e7f7      	b.n	801a01c <__mcmp+0x28>

0801a02c <__mdiff>:
 801a02c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a030:	460c      	mov	r4, r1
 801a032:	4606      	mov	r6, r0
 801a034:	4611      	mov	r1, r2
 801a036:	4620      	mov	r0, r4
 801a038:	4690      	mov	r8, r2
 801a03a:	f7ff ffdb 	bl	8019ff4 <__mcmp>
 801a03e:	1e05      	subs	r5, r0, #0
 801a040:	d110      	bne.n	801a064 <__mdiff+0x38>
 801a042:	4629      	mov	r1, r5
 801a044:	4630      	mov	r0, r6
 801a046:	f7ff fd09 	bl	8019a5c <_Balloc>
 801a04a:	b930      	cbnz	r0, 801a05a <__mdiff+0x2e>
 801a04c:	4b3a      	ldr	r3, [pc, #232]	; (801a138 <__mdiff+0x10c>)
 801a04e:	4602      	mov	r2, r0
 801a050:	f240 2132 	movw	r1, #562	; 0x232
 801a054:	4839      	ldr	r0, [pc, #228]	; (801a13c <__mdiff+0x110>)
 801a056:	f000 fc5d 	bl	801a914 <__assert_func>
 801a05a:	2301      	movs	r3, #1
 801a05c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801a060:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a064:	bfa4      	itt	ge
 801a066:	4643      	movge	r3, r8
 801a068:	46a0      	movge	r8, r4
 801a06a:	4630      	mov	r0, r6
 801a06c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801a070:	bfa6      	itte	ge
 801a072:	461c      	movge	r4, r3
 801a074:	2500      	movge	r5, #0
 801a076:	2501      	movlt	r5, #1
 801a078:	f7ff fcf0 	bl	8019a5c <_Balloc>
 801a07c:	b920      	cbnz	r0, 801a088 <__mdiff+0x5c>
 801a07e:	4b2e      	ldr	r3, [pc, #184]	; (801a138 <__mdiff+0x10c>)
 801a080:	4602      	mov	r2, r0
 801a082:	f44f 7110 	mov.w	r1, #576	; 0x240
 801a086:	e7e5      	b.n	801a054 <__mdiff+0x28>
 801a088:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801a08c:	6926      	ldr	r6, [r4, #16]
 801a08e:	60c5      	str	r5, [r0, #12]
 801a090:	f104 0914 	add.w	r9, r4, #20
 801a094:	f108 0514 	add.w	r5, r8, #20
 801a098:	f100 0e14 	add.w	lr, r0, #20
 801a09c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801a0a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801a0a4:	f108 0210 	add.w	r2, r8, #16
 801a0a8:	46f2      	mov	sl, lr
 801a0aa:	2100      	movs	r1, #0
 801a0ac:	f859 3b04 	ldr.w	r3, [r9], #4
 801a0b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801a0b4:	fa1f f883 	uxth.w	r8, r3
 801a0b8:	fa11 f18b 	uxtah	r1, r1, fp
 801a0bc:	0c1b      	lsrs	r3, r3, #16
 801a0be:	eba1 0808 	sub.w	r8, r1, r8
 801a0c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801a0c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801a0ca:	fa1f f888 	uxth.w	r8, r8
 801a0ce:	1419      	asrs	r1, r3, #16
 801a0d0:	454e      	cmp	r6, r9
 801a0d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801a0d6:	f84a 3b04 	str.w	r3, [sl], #4
 801a0da:	d8e7      	bhi.n	801a0ac <__mdiff+0x80>
 801a0dc:	1b33      	subs	r3, r6, r4
 801a0de:	3b15      	subs	r3, #21
 801a0e0:	f023 0303 	bic.w	r3, r3, #3
 801a0e4:	3304      	adds	r3, #4
 801a0e6:	3415      	adds	r4, #21
 801a0e8:	42a6      	cmp	r6, r4
 801a0ea:	bf38      	it	cc
 801a0ec:	2304      	movcc	r3, #4
 801a0ee:	441d      	add	r5, r3
 801a0f0:	4473      	add	r3, lr
 801a0f2:	469e      	mov	lr, r3
 801a0f4:	462e      	mov	r6, r5
 801a0f6:	4566      	cmp	r6, ip
 801a0f8:	d30e      	bcc.n	801a118 <__mdiff+0xec>
 801a0fa:	f10c 0203 	add.w	r2, ip, #3
 801a0fe:	1b52      	subs	r2, r2, r5
 801a100:	f022 0203 	bic.w	r2, r2, #3
 801a104:	3d03      	subs	r5, #3
 801a106:	45ac      	cmp	ip, r5
 801a108:	bf38      	it	cc
 801a10a:	2200      	movcc	r2, #0
 801a10c:	441a      	add	r2, r3
 801a10e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801a112:	b17b      	cbz	r3, 801a134 <__mdiff+0x108>
 801a114:	6107      	str	r7, [r0, #16]
 801a116:	e7a3      	b.n	801a060 <__mdiff+0x34>
 801a118:	f856 8b04 	ldr.w	r8, [r6], #4
 801a11c:	fa11 f288 	uxtah	r2, r1, r8
 801a120:	1414      	asrs	r4, r2, #16
 801a122:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801a126:	b292      	uxth	r2, r2
 801a128:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801a12c:	f84e 2b04 	str.w	r2, [lr], #4
 801a130:	1421      	asrs	r1, r4, #16
 801a132:	e7e0      	b.n	801a0f6 <__mdiff+0xca>
 801a134:	3f01      	subs	r7, #1
 801a136:	e7ea      	b.n	801a10e <__mdiff+0xe2>
 801a138:	0801bdb0 	.word	0x0801bdb0
 801a13c:	0801be3c 	.word	0x0801be3c

0801a140 <__ulp>:
 801a140:	b082      	sub	sp, #8
 801a142:	ed8d 0b00 	vstr	d0, [sp]
 801a146:	9b01      	ldr	r3, [sp, #4]
 801a148:	4912      	ldr	r1, [pc, #72]	; (801a194 <__ulp+0x54>)
 801a14a:	4019      	ands	r1, r3
 801a14c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801a150:	2900      	cmp	r1, #0
 801a152:	dd05      	ble.n	801a160 <__ulp+0x20>
 801a154:	2200      	movs	r2, #0
 801a156:	460b      	mov	r3, r1
 801a158:	ec43 2b10 	vmov	d0, r2, r3
 801a15c:	b002      	add	sp, #8
 801a15e:	4770      	bx	lr
 801a160:	4249      	negs	r1, r1
 801a162:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801a166:	ea4f 5021 	mov.w	r0, r1, asr #20
 801a16a:	f04f 0200 	mov.w	r2, #0
 801a16e:	f04f 0300 	mov.w	r3, #0
 801a172:	da04      	bge.n	801a17e <__ulp+0x3e>
 801a174:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801a178:	fa41 f300 	asr.w	r3, r1, r0
 801a17c:	e7ec      	b.n	801a158 <__ulp+0x18>
 801a17e:	f1a0 0114 	sub.w	r1, r0, #20
 801a182:	291e      	cmp	r1, #30
 801a184:	bfda      	itte	le
 801a186:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801a18a:	fa20 f101 	lsrle.w	r1, r0, r1
 801a18e:	2101      	movgt	r1, #1
 801a190:	460a      	mov	r2, r1
 801a192:	e7e1      	b.n	801a158 <__ulp+0x18>
 801a194:	7ff00000 	.word	0x7ff00000

0801a198 <__b2d>:
 801a198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a19a:	6905      	ldr	r5, [r0, #16]
 801a19c:	f100 0714 	add.w	r7, r0, #20
 801a1a0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801a1a4:	1f2e      	subs	r6, r5, #4
 801a1a6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801a1aa:	4620      	mov	r0, r4
 801a1ac:	f7ff fd48 	bl	8019c40 <__hi0bits>
 801a1b0:	f1c0 0320 	rsb	r3, r0, #32
 801a1b4:	280a      	cmp	r0, #10
 801a1b6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801a234 <__b2d+0x9c>
 801a1ba:	600b      	str	r3, [r1, #0]
 801a1bc:	dc14      	bgt.n	801a1e8 <__b2d+0x50>
 801a1be:	f1c0 0e0b 	rsb	lr, r0, #11
 801a1c2:	fa24 f10e 	lsr.w	r1, r4, lr
 801a1c6:	42b7      	cmp	r7, r6
 801a1c8:	ea41 030c 	orr.w	r3, r1, ip
 801a1cc:	bf34      	ite	cc
 801a1ce:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801a1d2:	2100      	movcs	r1, #0
 801a1d4:	3015      	adds	r0, #21
 801a1d6:	fa04 f000 	lsl.w	r0, r4, r0
 801a1da:	fa21 f10e 	lsr.w	r1, r1, lr
 801a1de:	ea40 0201 	orr.w	r2, r0, r1
 801a1e2:	ec43 2b10 	vmov	d0, r2, r3
 801a1e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a1e8:	42b7      	cmp	r7, r6
 801a1ea:	bf3a      	itte	cc
 801a1ec:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801a1f0:	f1a5 0608 	subcc.w	r6, r5, #8
 801a1f4:	2100      	movcs	r1, #0
 801a1f6:	380b      	subs	r0, #11
 801a1f8:	d017      	beq.n	801a22a <__b2d+0x92>
 801a1fa:	f1c0 0c20 	rsb	ip, r0, #32
 801a1fe:	fa04 f500 	lsl.w	r5, r4, r0
 801a202:	42be      	cmp	r6, r7
 801a204:	fa21 f40c 	lsr.w	r4, r1, ip
 801a208:	ea45 0504 	orr.w	r5, r5, r4
 801a20c:	bf8c      	ite	hi
 801a20e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801a212:	2400      	movls	r4, #0
 801a214:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801a218:	fa01 f000 	lsl.w	r0, r1, r0
 801a21c:	fa24 f40c 	lsr.w	r4, r4, ip
 801a220:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801a224:	ea40 0204 	orr.w	r2, r0, r4
 801a228:	e7db      	b.n	801a1e2 <__b2d+0x4a>
 801a22a:	ea44 030c 	orr.w	r3, r4, ip
 801a22e:	460a      	mov	r2, r1
 801a230:	e7d7      	b.n	801a1e2 <__b2d+0x4a>
 801a232:	bf00      	nop
 801a234:	3ff00000 	.word	0x3ff00000

0801a238 <__d2b>:
 801a238:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a23c:	4689      	mov	r9, r1
 801a23e:	2101      	movs	r1, #1
 801a240:	ec57 6b10 	vmov	r6, r7, d0
 801a244:	4690      	mov	r8, r2
 801a246:	f7ff fc09 	bl	8019a5c <_Balloc>
 801a24a:	4604      	mov	r4, r0
 801a24c:	b930      	cbnz	r0, 801a25c <__d2b+0x24>
 801a24e:	4602      	mov	r2, r0
 801a250:	4b25      	ldr	r3, [pc, #148]	; (801a2e8 <__d2b+0xb0>)
 801a252:	4826      	ldr	r0, [pc, #152]	; (801a2ec <__d2b+0xb4>)
 801a254:	f240 310a 	movw	r1, #778	; 0x30a
 801a258:	f000 fb5c 	bl	801a914 <__assert_func>
 801a25c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801a260:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801a264:	bb35      	cbnz	r5, 801a2b4 <__d2b+0x7c>
 801a266:	2e00      	cmp	r6, #0
 801a268:	9301      	str	r3, [sp, #4]
 801a26a:	d028      	beq.n	801a2be <__d2b+0x86>
 801a26c:	4668      	mov	r0, sp
 801a26e:	9600      	str	r6, [sp, #0]
 801a270:	f7ff fd06 	bl	8019c80 <__lo0bits>
 801a274:	9900      	ldr	r1, [sp, #0]
 801a276:	b300      	cbz	r0, 801a2ba <__d2b+0x82>
 801a278:	9a01      	ldr	r2, [sp, #4]
 801a27a:	f1c0 0320 	rsb	r3, r0, #32
 801a27e:	fa02 f303 	lsl.w	r3, r2, r3
 801a282:	430b      	orrs	r3, r1
 801a284:	40c2      	lsrs	r2, r0
 801a286:	6163      	str	r3, [r4, #20]
 801a288:	9201      	str	r2, [sp, #4]
 801a28a:	9b01      	ldr	r3, [sp, #4]
 801a28c:	61a3      	str	r3, [r4, #24]
 801a28e:	2b00      	cmp	r3, #0
 801a290:	bf14      	ite	ne
 801a292:	2202      	movne	r2, #2
 801a294:	2201      	moveq	r2, #1
 801a296:	6122      	str	r2, [r4, #16]
 801a298:	b1d5      	cbz	r5, 801a2d0 <__d2b+0x98>
 801a29a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801a29e:	4405      	add	r5, r0
 801a2a0:	f8c9 5000 	str.w	r5, [r9]
 801a2a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801a2a8:	f8c8 0000 	str.w	r0, [r8]
 801a2ac:	4620      	mov	r0, r4
 801a2ae:	b003      	add	sp, #12
 801a2b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a2b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a2b8:	e7d5      	b.n	801a266 <__d2b+0x2e>
 801a2ba:	6161      	str	r1, [r4, #20]
 801a2bc:	e7e5      	b.n	801a28a <__d2b+0x52>
 801a2be:	a801      	add	r0, sp, #4
 801a2c0:	f7ff fcde 	bl	8019c80 <__lo0bits>
 801a2c4:	9b01      	ldr	r3, [sp, #4]
 801a2c6:	6163      	str	r3, [r4, #20]
 801a2c8:	2201      	movs	r2, #1
 801a2ca:	6122      	str	r2, [r4, #16]
 801a2cc:	3020      	adds	r0, #32
 801a2ce:	e7e3      	b.n	801a298 <__d2b+0x60>
 801a2d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801a2d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801a2d8:	f8c9 0000 	str.w	r0, [r9]
 801a2dc:	6918      	ldr	r0, [r3, #16]
 801a2de:	f7ff fcaf 	bl	8019c40 <__hi0bits>
 801a2e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801a2e6:	e7df      	b.n	801a2a8 <__d2b+0x70>
 801a2e8:	0801bdb0 	.word	0x0801bdb0
 801a2ec:	0801be3c 	.word	0x0801be3c

0801a2f0 <__ratio>:
 801a2f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2f4:	4688      	mov	r8, r1
 801a2f6:	4669      	mov	r1, sp
 801a2f8:	4681      	mov	r9, r0
 801a2fa:	f7ff ff4d 	bl	801a198 <__b2d>
 801a2fe:	a901      	add	r1, sp, #4
 801a300:	4640      	mov	r0, r8
 801a302:	ec55 4b10 	vmov	r4, r5, d0
 801a306:	ee10 aa10 	vmov	sl, s0
 801a30a:	f7ff ff45 	bl	801a198 <__b2d>
 801a30e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a312:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801a316:	1a59      	subs	r1, r3, r1
 801a318:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a31c:	1ad3      	subs	r3, r2, r3
 801a31e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801a322:	ec57 6b10 	vmov	r6, r7, d0
 801a326:	2b00      	cmp	r3, #0
 801a328:	bfd6      	itet	le
 801a32a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801a32e:	462a      	movgt	r2, r5
 801a330:	463a      	movle	r2, r7
 801a332:	46ab      	mov	fp, r5
 801a334:	bfd6      	itet	le
 801a336:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801a33a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801a33e:	ee00 3a90 	vmovle	s1, r3
 801a342:	ec4b ab17 	vmov	d7, sl, fp
 801a346:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801a34a:	b003      	add	sp, #12
 801a34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a350 <__copybits>:
 801a350:	3901      	subs	r1, #1
 801a352:	b570      	push	{r4, r5, r6, lr}
 801a354:	1149      	asrs	r1, r1, #5
 801a356:	6914      	ldr	r4, [r2, #16]
 801a358:	3101      	adds	r1, #1
 801a35a:	f102 0314 	add.w	r3, r2, #20
 801a35e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801a362:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801a366:	1f05      	subs	r5, r0, #4
 801a368:	42a3      	cmp	r3, r4
 801a36a:	d30c      	bcc.n	801a386 <__copybits+0x36>
 801a36c:	1aa3      	subs	r3, r4, r2
 801a36e:	3b11      	subs	r3, #17
 801a370:	f023 0303 	bic.w	r3, r3, #3
 801a374:	3211      	adds	r2, #17
 801a376:	42a2      	cmp	r2, r4
 801a378:	bf88      	it	hi
 801a37a:	2300      	movhi	r3, #0
 801a37c:	4418      	add	r0, r3
 801a37e:	2300      	movs	r3, #0
 801a380:	4288      	cmp	r0, r1
 801a382:	d305      	bcc.n	801a390 <__copybits+0x40>
 801a384:	bd70      	pop	{r4, r5, r6, pc}
 801a386:	f853 6b04 	ldr.w	r6, [r3], #4
 801a38a:	f845 6f04 	str.w	r6, [r5, #4]!
 801a38e:	e7eb      	b.n	801a368 <__copybits+0x18>
 801a390:	f840 3b04 	str.w	r3, [r0], #4
 801a394:	e7f4      	b.n	801a380 <__copybits+0x30>

0801a396 <__any_on>:
 801a396:	f100 0214 	add.w	r2, r0, #20
 801a39a:	6900      	ldr	r0, [r0, #16]
 801a39c:	114b      	asrs	r3, r1, #5
 801a39e:	4298      	cmp	r0, r3
 801a3a0:	b510      	push	{r4, lr}
 801a3a2:	db11      	blt.n	801a3c8 <__any_on+0x32>
 801a3a4:	dd0a      	ble.n	801a3bc <__any_on+0x26>
 801a3a6:	f011 011f 	ands.w	r1, r1, #31
 801a3aa:	d007      	beq.n	801a3bc <__any_on+0x26>
 801a3ac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801a3b0:	fa24 f001 	lsr.w	r0, r4, r1
 801a3b4:	fa00 f101 	lsl.w	r1, r0, r1
 801a3b8:	428c      	cmp	r4, r1
 801a3ba:	d10b      	bne.n	801a3d4 <__any_on+0x3e>
 801a3bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a3c0:	4293      	cmp	r3, r2
 801a3c2:	d803      	bhi.n	801a3cc <__any_on+0x36>
 801a3c4:	2000      	movs	r0, #0
 801a3c6:	bd10      	pop	{r4, pc}
 801a3c8:	4603      	mov	r3, r0
 801a3ca:	e7f7      	b.n	801a3bc <__any_on+0x26>
 801a3cc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801a3d0:	2900      	cmp	r1, #0
 801a3d2:	d0f5      	beq.n	801a3c0 <__any_on+0x2a>
 801a3d4:	2001      	movs	r0, #1
 801a3d6:	e7f6      	b.n	801a3c6 <__any_on+0x30>

0801a3d8 <_calloc_r>:
 801a3d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a3da:	fba1 2402 	umull	r2, r4, r1, r2
 801a3de:	b94c      	cbnz	r4, 801a3f4 <_calloc_r+0x1c>
 801a3e0:	4611      	mov	r1, r2
 801a3e2:	9201      	str	r2, [sp, #4]
 801a3e4:	f000 f87a 	bl	801a4dc <_malloc_r>
 801a3e8:	9a01      	ldr	r2, [sp, #4]
 801a3ea:	4605      	mov	r5, r0
 801a3ec:	b930      	cbnz	r0, 801a3fc <_calloc_r+0x24>
 801a3ee:	4628      	mov	r0, r5
 801a3f0:	b003      	add	sp, #12
 801a3f2:	bd30      	pop	{r4, r5, pc}
 801a3f4:	220c      	movs	r2, #12
 801a3f6:	6002      	str	r2, [r0, #0]
 801a3f8:	2500      	movs	r5, #0
 801a3fa:	e7f8      	b.n	801a3ee <_calloc_r+0x16>
 801a3fc:	4621      	mov	r1, r4
 801a3fe:	f7fc fc5b 	bl	8016cb8 <memset>
 801a402:	e7f4      	b.n	801a3ee <_calloc_r+0x16>

0801a404 <_free_r>:
 801a404:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a406:	2900      	cmp	r1, #0
 801a408:	d044      	beq.n	801a494 <_free_r+0x90>
 801a40a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a40e:	9001      	str	r0, [sp, #4]
 801a410:	2b00      	cmp	r3, #0
 801a412:	f1a1 0404 	sub.w	r4, r1, #4
 801a416:	bfb8      	it	lt
 801a418:	18e4      	addlt	r4, r4, r3
 801a41a:	f000 fc7f 	bl	801ad1c <__malloc_lock>
 801a41e:	4a1e      	ldr	r2, [pc, #120]	; (801a498 <_free_r+0x94>)
 801a420:	9801      	ldr	r0, [sp, #4]
 801a422:	6813      	ldr	r3, [r2, #0]
 801a424:	b933      	cbnz	r3, 801a434 <_free_r+0x30>
 801a426:	6063      	str	r3, [r4, #4]
 801a428:	6014      	str	r4, [r2, #0]
 801a42a:	b003      	add	sp, #12
 801a42c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a430:	f000 bc7a 	b.w	801ad28 <__malloc_unlock>
 801a434:	42a3      	cmp	r3, r4
 801a436:	d908      	bls.n	801a44a <_free_r+0x46>
 801a438:	6825      	ldr	r5, [r4, #0]
 801a43a:	1961      	adds	r1, r4, r5
 801a43c:	428b      	cmp	r3, r1
 801a43e:	bf01      	itttt	eq
 801a440:	6819      	ldreq	r1, [r3, #0]
 801a442:	685b      	ldreq	r3, [r3, #4]
 801a444:	1949      	addeq	r1, r1, r5
 801a446:	6021      	streq	r1, [r4, #0]
 801a448:	e7ed      	b.n	801a426 <_free_r+0x22>
 801a44a:	461a      	mov	r2, r3
 801a44c:	685b      	ldr	r3, [r3, #4]
 801a44e:	b10b      	cbz	r3, 801a454 <_free_r+0x50>
 801a450:	42a3      	cmp	r3, r4
 801a452:	d9fa      	bls.n	801a44a <_free_r+0x46>
 801a454:	6811      	ldr	r1, [r2, #0]
 801a456:	1855      	adds	r5, r2, r1
 801a458:	42a5      	cmp	r5, r4
 801a45a:	d10b      	bne.n	801a474 <_free_r+0x70>
 801a45c:	6824      	ldr	r4, [r4, #0]
 801a45e:	4421      	add	r1, r4
 801a460:	1854      	adds	r4, r2, r1
 801a462:	42a3      	cmp	r3, r4
 801a464:	6011      	str	r1, [r2, #0]
 801a466:	d1e0      	bne.n	801a42a <_free_r+0x26>
 801a468:	681c      	ldr	r4, [r3, #0]
 801a46a:	685b      	ldr	r3, [r3, #4]
 801a46c:	6053      	str	r3, [r2, #4]
 801a46e:	4421      	add	r1, r4
 801a470:	6011      	str	r1, [r2, #0]
 801a472:	e7da      	b.n	801a42a <_free_r+0x26>
 801a474:	d902      	bls.n	801a47c <_free_r+0x78>
 801a476:	230c      	movs	r3, #12
 801a478:	6003      	str	r3, [r0, #0]
 801a47a:	e7d6      	b.n	801a42a <_free_r+0x26>
 801a47c:	6825      	ldr	r5, [r4, #0]
 801a47e:	1961      	adds	r1, r4, r5
 801a480:	428b      	cmp	r3, r1
 801a482:	bf04      	itt	eq
 801a484:	6819      	ldreq	r1, [r3, #0]
 801a486:	685b      	ldreq	r3, [r3, #4]
 801a488:	6063      	str	r3, [r4, #4]
 801a48a:	bf04      	itt	eq
 801a48c:	1949      	addeq	r1, r1, r5
 801a48e:	6021      	streq	r1, [r4, #0]
 801a490:	6054      	str	r4, [r2, #4]
 801a492:	e7ca      	b.n	801a42a <_free_r+0x26>
 801a494:	b003      	add	sp, #12
 801a496:	bd30      	pop	{r4, r5, pc}
 801a498:	2400323c 	.word	0x2400323c

0801a49c <sbrk_aligned>:
 801a49c:	b570      	push	{r4, r5, r6, lr}
 801a49e:	4e0e      	ldr	r6, [pc, #56]	; (801a4d8 <sbrk_aligned+0x3c>)
 801a4a0:	460c      	mov	r4, r1
 801a4a2:	6831      	ldr	r1, [r6, #0]
 801a4a4:	4605      	mov	r5, r0
 801a4a6:	b911      	cbnz	r1, 801a4ae <sbrk_aligned+0x12>
 801a4a8:	f000 fa02 	bl	801a8b0 <_sbrk_r>
 801a4ac:	6030      	str	r0, [r6, #0]
 801a4ae:	4621      	mov	r1, r4
 801a4b0:	4628      	mov	r0, r5
 801a4b2:	f000 f9fd 	bl	801a8b0 <_sbrk_r>
 801a4b6:	1c43      	adds	r3, r0, #1
 801a4b8:	d00a      	beq.n	801a4d0 <sbrk_aligned+0x34>
 801a4ba:	1cc4      	adds	r4, r0, #3
 801a4bc:	f024 0403 	bic.w	r4, r4, #3
 801a4c0:	42a0      	cmp	r0, r4
 801a4c2:	d007      	beq.n	801a4d4 <sbrk_aligned+0x38>
 801a4c4:	1a21      	subs	r1, r4, r0
 801a4c6:	4628      	mov	r0, r5
 801a4c8:	f000 f9f2 	bl	801a8b0 <_sbrk_r>
 801a4cc:	3001      	adds	r0, #1
 801a4ce:	d101      	bne.n	801a4d4 <sbrk_aligned+0x38>
 801a4d0:	f04f 34ff 	mov.w	r4, #4294967295
 801a4d4:	4620      	mov	r0, r4
 801a4d6:	bd70      	pop	{r4, r5, r6, pc}
 801a4d8:	24003240 	.word	0x24003240

0801a4dc <_malloc_r>:
 801a4dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4e0:	1ccd      	adds	r5, r1, #3
 801a4e2:	f025 0503 	bic.w	r5, r5, #3
 801a4e6:	3508      	adds	r5, #8
 801a4e8:	2d0c      	cmp	r5, #12
 801a4ea:	bf38      	it	cc
 801a4ec:	250c      	movcc	r5, #12
 801a4ee:	2d00      	cmp	r5, #0
 801a4f0:	4607      	mov	r7, r0
 801a4f2:	db01      	blt.n	801a4f8 <_malloc_r+0x1c>
 801a4f4:	42a9      	cmp	r1, r5
 801a4f6:	d905      	bls.n	801a504 <_malloc_r+0x28>
 801a4f8:	230c      	movs	r3, #12
 801a4fa:	603b      	str	r3, [r7, #0]
 801a4fc:	2600      	movs	r6, #0
 801a4fe:	4630      	mov	r0, r6
 801a500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a504:	4e2e      	ldr	r6, [pc, #184]	; (801a5c0 <_malloc_r+0xe4>)
 801a506:	f000 fc09 	bl	801ad1c <__malloc_lock>
 801a50a:	6833      	ldr	r3, [r6, #0]
 801a50c:	461c      	mov	r4, r3
 801a50e:	bb34      	cbnz	r4, 801a55e <_malloc_r+0x82>
 801a510:	4629      	mov	r1, r5
 801a512:	4638      	mov	r0, r7
 801a514:	f7ff ffc2 	bl	801a49c <sbrk_aligned>
 801a518:	1c43      	adds	r3, r0, #1
 801a51a:	4604      	mov	r4, r0
 801a51c:	d14d      	bne.n	801a5ba <_malloc_r+0xde>
 801a51e:	6834      	ldr	r4, [r6, #0]
 801a520:	4626      	mov	r6, r4
 801a522:	2e00      	cmp	r6, #0
 801a524:	d140      	bne.n	801a5a8 <_malloc_r+0xcc>
 801a526:	6823      	ldr	r3, [r4, #0]
 801a528:	4631      	mov	r1, r6
 801a52a:	4638      	mov	r0, r7
 801a52c:	eb04 0803 	add.w	r8, r4, r3
 801a530:	f000 f9be 	bl	801a8b0 <_sbrk_r>
 801a534:	4580      	cmp	r8, r0
 801a536:	d13a      	bne.n	801a5ae <_malloc_r+0xd2>
 801a538:	6821      	ldr	r1, [r4, #0]
 801a53a:	3503      	adds	r5, #3
 801a53c:	1a6d      	subs	r5, r5, r1
 801a53e:	f025 0503 	bic.w	r5, r5, #3
 801a542:	3508      	adds	r5, #8
 801a544:	2d0c      	cmp	r5, #12
 801a546:	bf38      	it	cc
 801a548:	250c      	movcc	r5, #12
 801a54a:	4629      	mov	r1, r5
 801a54c:	4638      	mov	r0, r7
 801a54e:	f7ff ffa5 	bl	801a49c <sbrk_aligned>
 801a552:	3001      	adds	r0, #1
 801a554:	d02b      	beq.n	801a5ae <_malloc_r+0xd2>
 801a556:	6823      	ldr	r3, [r4, #0]
 801a558:	442b      	add	r3, r5
 801a55a:	6023      	str	r3, [r4, #0]
 801a55c:	e00e      	b.n	801a57c <_malloc_r+0xa0>
 801a55e:	6822      	ldr	r2, [r4, #0]
 801a560:	1b52      	subs	r2, r2, r5
 801a562:	d41e      	bmi.n	801a5a2 <_malloc_r+0xc6>
 801a564:	2a0b      	cmp	r2, #11
 801a566:	d916      	bls.n	801a596 <_malloc_r+0xba>
 801a568:	1961      	adds	r1, r4, r5
 801a56a:	42a3      	cmp	r3, r4
 801a56c:	6025      	str	r5, [r4, #0]
 801a56e:	bf18      	it	ne
 801a570:	6059      	strne	r1, [r3, #4]
 801a572:	6863      	ldr	r3, [r4, #4]
 801a574:	bf08      	it	eq
 801a576:	6031      	streq	r1, [r6, #0]
 801a578:	5162      	str	r2, [r4, r5]
 801a57a:	604b      	str	r3, [r1, #4]
 801a57c:	4638      	mov	r0, r7
 801a57e:	f104 060b 	add.w	r6, r4, #11
 801a582:	f000 fbd1 	bl	801ad28 <__malloc_unlock>
 801a586:	f026 0607 	bic.w	r6, r6, #7
 801a58a:	1d23      	adds	r3, r4, #4
 801a58c:	1af2      	subs	r2, r6, r3
 801a58e:	d0b6      	beq.n	801a4fe <_malloc_r+0x22>
 801a590:	1b9b      	subs	r3, r3, r6
 801a592:	50a3      	str	r3, [r4, r2]
 801a594:	e7b3      	b.n	801a4fe <_malloc_r+0x22>
 801a596:	6862      	ldr	r2, [r4, #4]
 801a598:	42a3      	cmp	r3, r4
 801a59a:	bf0c      	ite	eq
 801a59c:	6032      	streq	r2, [r6, #0]
 801a59e:	605a      	strne	r2, [r3, #4]
 801a5a0:	e7ec      	b.n	801a57c <_malloc_r+0xa0>
 801a5a2:	4623      	mov	r3, r4
 801a5a4:	6864      	ldr	r4, [r4, #4]
 801a5a6:	e7b2      	b.n	801a50e <_malloc_r+0x32>
 801a5a8:	4634      	mov	r4, r6
 801a5aa:	6876      	ldr	r6, [r6, #4]
 801a5ac:	e7b9      	b.n	801a522 <_malloc_r+0x46>
 801a5ae:	230c      	movs	r3, #12
 801a5b0:	603b      	str	r3, [r7, #0]
 801a5b2:	4638      	mov	r0, r7
 801a5b4:	f000 fbb8 	bl	801ad28 <__malloc_unlock>
 801a5b8:	e7a1      	b.n	801a4fe <_malloc_r+0x22>
 801a5ba:	6025      	str	r5, [r4, #0]
 801a5bc:	e7de      	b.n	801a57c <_malloc_r+0xa0>
 801a5be:	bf00      	nop
 801a5c0:	2400323c 	.word	0x2400323c

0801a5c4 <__ssputs_r>:
 801a5c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a5c8:	688e      	ldr	r6, [r1, #8]
 801a5ca:	429e      	cmp	r6, r3
 801a5cc:	4682      	mov	sl, r0
 801a5ce:	460c      	mov	r4, r1
 801a5d0:	4690      	mov	r8, r2
 801a5d2:	461f      	mov	r7, r3
 801a5d4:	d838      	bhi.n	801a648 <__ssputs_r+0x84>
 801a5d6:	898a      	ldrh	r2, [r1, #12]
 801a5d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a5dc:	d032      	beq.n	801a644 <__ssputs_r+0x80>
 801a5de:	6825      	ldr	r5, [r4, #0]
 801a5e0:	6909      	ldr	r1, [r1, #16]
 801a5e2:	eba5 0901 	sub.w	r9, r5, r1
 801a5e6:	6965      	ldr	r5, [r4, #20]
 801a5e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a5ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a5f0:	3301      	adds	r3, #1
 801a5f2:	444b      	add	r3, r9
 801a5f4:	106d      	asrs	r5, r5, #1
 801a5f6:	429d      	cmp	r5, r3
 801a5f8:	bf38      	it	cc
 801a5fa:	461d      	movcc	r5, r3
 801a5fc:	0553      	lsls	r3, r2, #21
 801a5fe:	d531      	bpl.n	801a664 <__ssputs_r+0xa0>
 801a600:	4629      	mov	r1, r5
 801a602:	f7ff ff6b 	bl	801a4dc <_malloc_r>
 801a606:	4606      	mov	r6, r0
 801a608:	b950      	cbnz	r0, 801a620 <__ssputs_r+0x5c>
 801a60a:	230c      	movs	r3, #12
 801a60c:	f8ca 3000 	str.w	r3, [sl]
 801a610:	89a3      	ldrh	r3, [r4, #12]
 801a612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a616:	81a3      	strh	r3, [r4, #12]
 801a618:	f04f 30ff 	mov.w	r0, #4294967295
 801a61c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a620:	6921      	ldr	r1, [r4, #16]
 801a622:	464a      	mov	r2, r9
 801a624:	f7fc fb3a 	bl	8016c9c <memcpy>
 801a628:	89a3      	ldrh	r3, [r4, #12]
 801a62a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a62e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a632:	81a3      	strh	r3, [r4, #12]
 801a634:	6126      	str	r6, [r4, #16]
 801a636:	6165      	str	r5, [r4, #20]
 801a638:	444e      	add	r6, r9
 801a63a:	eba5 0509 	sub.w	r5, r5, r9
 801a63e:	6026      	str	r6, [r4, #0]
 801a640:	60a5      	str	r5, [r4, #8]
 801a642:	463e      	mov	r6, r7
 801a644:	42be      	cmp	r6, r7
 801a646:	d900      	bls.n	801a64a <__ssputs_r+0x86>
 801a648:	463e      	mov	r6, r7
 801a64a:	6820      	ldr	r0, [r4, #0]
 801a64c:	4632      	mov	r2, r6
 801a64e:	4641      	mov	r1, r8
 801a650:	f000 fb4a 	bl	801ace8 <memmove>
 801a654:	68a3      	ldr	r3, [r4, #8]
 801a656:	1b9b      	subs	r3, r3, r6
 801a658:	60a3      	str	r3, [r4, #8]
 801a65a:	6823      	ldr	r3, [r4, #0]
 801a65c:	4433      	add	r3, r6
 801a65e:	6023      	str	r3, [r4, #0]
 801a660:	2000      	movs	r0, #0
 801a662:	e7db      	b.n	801a61c <__ssputs_r+0x58>
 801a664:	462a      	mov	r2, r5
 801a666:	f000 fb65 	bl	801ad34 <_realloc_r>
 801a66a:	4606      	mov	r6, r0
 801a66c:	2800      	cmp	r0, #0
 801a66e:	d1e1      	bne.n	801a634 <__ssputs_r+0x70>
 801a670:	6921      	ldr	r1, [r4, #16]
 801a672:	4650      	mov	r0, sl
 801a674:	f7ff fec6 	bl	801a404 <_free_r>
 801a678:	e7c7      	b.n	801a60a <__ssputs_r+0x46>
	...

0801a67c <_svfiprintf_r>:
 801a67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a680:	4698      	mov	r8, r3
 801a682:	898b      	ldrh	r3, [r1, #12]
 801a684:	061b      	lsls	r3, r3, #24
 801a686:	b09d      	sub	sp, #116	; 0x74
 801a688:	4607      	mov	r7, r0
 801a68a:	460d      	mov	r5, r1
 801a68c:	4614      	mov	r4, r2
 801a68e:	d50e      	bpl.n	801a6ae <_svfiprintf_r+0x32>
 801a690:	690b      	ldr	r3, [r1, #16]
 801a692:	b963      	cbnz	r3, 801a6ae <_svfiprintf_r+0x32>
 801a694:	2140      	movs	r1, #64	; 0x40
 801a696:	f7ff ff21 	bl	801a4dc <_malloc_r>
 801a69a:	6028      	str	r0, [r5, #0]
 801a69c:	6128      	str	r0, [r5, #16]
 801a69e:	b920      	cbnz	r0, 801a6aa <_svfiprintf_r+0x2e>
 801a6a0:	230c      	movs	r3, #12
 801a6a2:	603b      	str	r3, [r7, #0]
 801a6a4:	f04f 30ff 	mov.w	r0, #4294967295
 801a6a8:	e0d1      	b.n	801a84e <_svfiprintf_r+0x1d2>
 801a6aa:	2340      	movs	r3, #64	; 0x40
 801a6ac:	616b      	str	r3, [r5, #20]
 801a6ae:	2300      	movs	r3, #0
 801a6b0:	9309      	str	r3, [sp, #36]	; 0x24
 801a6b2:	2320      	movs	r3, #32
 801a6b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a6b8:	f8cd 800c 	str.w	r8, [sp, #12]
 801a6bc:	2330      	movs	r3, #48	; 0x30
 801a6be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801a868 <_svfiprintf_r+0x1ec>
 801a6c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a6c6:	f04f 0901 	mov.w	r9, #1
 801a6ca:	4623      	mov	r3, r4
 801a6cc:	469a      	mov	sl, r3
 801a6ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a6d2:	b10a      	cbz	r2, 801a6d8 <_svfiprintf_r+0x5c>
 801a6d4:	2a25      	cmp	r2, #37	; 0x25
 801a6d6:	d1f9      	bne.n	801a6cc <_svfiprintf_r+0x50>
 801a6d8:	ebba 0b04 	subs.w	fp, sl, r4
 801a6dc:	d00b      	beq.n	801a6f6 <_svfiprintf_r+0x7a>
 801a6de:	465b      	mov	r3, fp
 801a6e0:	4622      	mov	r2, r4
 801a6e2:	4629      	mov	r1, r5
 801a6e4:	4638      	mov	r0, r7
 801a6e6:	f7ff ff6d 	bl	801a5c4 <__ssputs_r>
 801a6ea:	3001      	adds	r0, #1
 801a6ec:	f000 80aa 	beq.w	801a844 <_svfiprintf_r+0x1c8>
 801a6f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a6f2:	445a      	add	r2, fp
 801a6f4:	9209      	str	r2, [sp, #36]	; 0x24
 801a6f6:	f89a 3000 	ldrb.w	r3, [sl]
 801a6fa:	2b00      	cmp	r3, #0
 801a6fc:	f000 80a2 	beq.w	801a844 <_svfiprintf_r+0x1c8>
 801a700:	2300      	movs	r3, #0
 801a702:	f04f 32ff 	mov.w	r2, #4294967295
 801a706:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a70a:	f10a 0a01 	add.w	sl, sl, #1
 801a70e:	9304      	str	r3, [sp, #16]
 801a710:	9307      	str	r3, [sp, #28]
 801a712:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a716:	931a      	str	r3, [sp, #104]	; 0x68
 801a718:	4654      	mov	r4, sl
 801a71a:	2205      	movs	r2, #5
 801a71c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a720:	4851      	ldr	r0, [pc, #324]	; (801a868 <_svfiprintf_r+0x1ec>)
 801a722:	f7e5 fe0d 	bl	8000340 <memchr>
 801a726:	9a04      	ldr	r2, [sp, #16]
 801a728:	b9d8      	cbnz	r0, 801a762 <_svfiprintf_r+0xe6>
 801a72a:	06d0      	lsls	r0, r2, #27
 801a72c:	bf44      	itt	mi
 801a72e:	2320      	movmi	r3, #32
 801a730:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a734:	0711      	lsls	r1, r2, #28
 801a736:	bf44      	itt	mi
 801a738:	232b      	movmi	r3, #43	; 0x2b
 801a73a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a73e:	f89a 3000 	ldrb.w	r3, [sl]
 801a742:	2b2a      	cmp	r3, #42	; 0x2a
 801a744:	d015      	beq.n	801a772 <_svfiprintf_r+0xf6>
 801a746:	9a07      	ldr	r2, [sp, #28]
 801a748:	4654      	mov	r4, sl
 801a74a:	2000      	movs	r0, #0
 801a74c:	f04f 0c0a 	mov.w	ip, #10
 801a750:	4621      	mov	r1, r4
 801a752:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a756:	3b30      	subs	r3, #48	; 0x30
 801a758:	2b09      	cmp	r3, #9
 801a75a:	d94e      	bls.n	801a7fa <_svfiprintf_r+0x17e>
 801a75c:	b1b0      	cbz	r0, 801a78c <_svfiprintf_r+0x110>
 801a75e:	9207      	str	r2, [sp, #28]
 801a760:	e014      	b.n	801a78c <_svfiprintf_r+0x110>
 801a762:	eba0 0308 	sub.w	r3, r0, r8
 801a766:	fa09 f303 	lsl.w	r3, r9, r3
 801a76a:	4313      	orrs	r3, r2
 801a76c:	9304      	str	r3, [sp, #16]
 801a76e:	46a2      	mov	sl, r4
 801a770:	e7d2      	b.n	801a718 <_svfiprintf_r+0x9c>
 801a772:	9b03      	ldr	r3, [sp, #12]
 801a774:	1d19      	adds	r1, r3, #4
 801a776:	681b      	ldr	r3, [r3, #0]
 801a778:	9103      	str	r1, [sp, #12]
 801a77a:	2b00      	cmp	r3, #0
 801a77c:	bfbb      	ittet	lt
 801a77e:	425b      	neglt	r3, r3
 801a780:	f042 0202 	orrlt.w	r2, r2, #2
 801a784:	9307      	strge	r3, [sp, #28]
 801a786:	9307      	strlt	r3, [sp, #28]
 801a788:	bfb8      	it	lt
 801a78a:	9204      	strlt	r2, [sp, #16]
 801a78c:	7823      	ldrb	r3, [r4, #0]
 801a78e:	2b2e      	cmp	r3, #46	; 0x2e
 801a790:	d10c      	bne.n	801a7ac <_svfiprintf_r+0x130>
 801a792:	7863      	ldrb	r3, [r4, #1]
 801a794:	2b2a      	cmp	r3, #42	; 0x2a
 801a796:	d135      	bne.n	801a804 <_svfiprintf_r+0x188>
 801a798:	9b03      	ldr	r3, [sp, #12]
 801a79a:	1d1a      	adds	r2, r3, #4
 801a79c:	681b      	ldr	r3, [r3, #0]
 801a79e:	9203      	str	r2, [sp, #12]
 801a7a0:	2b00      	cmp	r3, #0
 801a7a2:	bfb8      	it	lt
 801a7a4:	f04f 33ff 	movlt.w	r3, #4294967295
 801a7a8:	3402      	adds	r4, #2
 801a7aa:	9305      	str	r3, [sp, #20]
 801a7ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801a878 <_svfiprintf_r+0x1fc>
 801a7b0:	7821      	ldrb	r1, [r4, #0]
 801a7b2:	2203      	movs	r2, #3
 801a7b4:	4650      	mov	r0, sl
 801a7b6:	f7e5 fdc3 	bl	8000340 <memchr>
 801a7ba:	b140      	cbz	r0, 801a7ce <_svfiprintf_r+0x152>
 801a7bc:	2340      	movs	r3, #64	; 0x40
 801a7be:	eba0 000a 	sub.w	r0, r0, sl
 801a7c2:	fa03 f000 	lsl.w	r0, r3, r0
 801a7c6:	9b04      	ldr	r3, [sp, #16]
 801a7c8:	4303      	orrs	r3, r0
 801a7ca:	3401      	adds	r4, #1
 801a7cc:	9304      	str	r3, [sp, #16]
 801a7ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a7d2:	4826      	ldr	r0, [pc, #152]	; (801a86c <_svfiprintf_r+0x1f0>)
 801a7d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a7d8:	2206      	movs	r2, #6
 801a7da:	f7e5 fdb1 	bl	8000340 <memchr>
 801a7de:	2800      	cmp	r0, #0
 801a7e0:	d038      	beq.n	801a854 <_svfiprintf_r+0x1d8>
 801a7e2:	4b23      	ldr	r3, [pc, #140]	; (801a870 <_svfiprintf_r+0x1f4>)
 801a7e4:	bb1b      	cbnz	r3, 801a82e <_svfiprintf_r+0x1b2>
 801a7e6:	9b03      	ldr	r3, [sp, #12]
 801a7e8:	3307      	adds	r3, #7
 801a7ea:	f023 0307 	bic.w	r3, r3, #7
 801a7ee:	3308      	adds	r3, #8
 801a7f0:	9303      	str	r3, [sp, #12]
 801a7f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a7f4:	4433      	add	r3, r6
 801a7f6:	9309      	str	r3, [sp, #36]	; 0x24
 801a7f8:	e767      	b.n	801a6ca <_svfiprintf_r+0x4e>
 801a7fa:	fb0c 3202 	mla	r2, ip, r2, r3
 801a7fe:	460c      	mov	r4, r1
 801a800:	2001      	movs	r0, #1
 801a802:	e7a5      	b.n	801a750 <_svfiprintf_r+0xd4>
 801a804:	2300      	movs	r3, #0
 801a806:	3401      	adds	r4, #1
 801a808:	9305      	str	r3, [sp, #20]
 801a80a:	4619      	mov	r1, r3
 801a80c:	f04f 0c0a 	mov.w	ip, #10
 801a810:	4620      	mov	r0, r4
 801a812:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a816:	3a30      	subs	r2, #48	; 0x30
 801a818:	2a09      	cmp	r2, #9
 801a81a:	d903      	bls.n	801a824 <_svfiprintf_r+0x1a8>
 801a81c:	2b00      	cmp	r3, #0
 801a81e:	d0c5      	beq.n	801a7ac <_svfiprintf_r+0x130>
 801a820:	9105      	str	r1, [sp, #20]
 801a822:	e7c3      	b.n	801a7ac <_svfiprintf_r+0x130>
 801a824:	fb0c 2101 	mla	r1, ip, r1, r2
 801a828:	4604      	mov	r4, r0
 801a82a:	2301      	movs	r3, #1
 801a82c:	e7f0      	b.n	801a810 <_svfiprintf_r+0x194>
 801a82e:	ab03      	add	r3, sp, #12
 801a830:	9300      	str	r3, [sp, #0]
 801a832:	462a      	mov	r2, r5
 801a834:	4b0f      	ldr	r3, [pc, #60]	; (801a874 <_svfiprintf_r+0x1f8>)
 801a836:	a904      	add	r1, sp, #16
 801a838:	4638      	mov	r0, r7
 801a83a:	f7fc fad5 	bl	8016de8 <_printf_float>
 801a83e:	1c42      	adds	r2, r0, #1
 801a840:	4606      	mov	r6, r0
 801a842:	d1d6      	bne.n	801a7f2 <_svfiprintf_r+0x176>
 801a844:	89ab      	ldrh	r3, [r5, #12]
 801a846:	065b      	lsls	r3, r3, #25
 801a848:	f53f af2c 	bmi.w	801a6a4 <_svfiprintf_r+0x28>
 801a84c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a84e:	b01d      	add	sp, #116	; 0x74
 801a850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a854:	ab03      	add	r3, sp, #12
 801a856:	9300      	str	r3, [sp, #0]
 801a858:	462a      	mov	r2, r5
 801a85a:	4b06      	ldr	r3, [pc, #24]	; (801a874 <_svfiprintf_r+0x1f8>)
 801a85c:	a904      	add	r1, sp, #16
 801a85e:	4638      	mov	r0, r7
 801a860:	f7fc fd4e 	bl	8017300 <_printf_i>
 801a864:	e7eb      	b.n	801a83e <_svfiprintf_r+0x1c2>
 801a866:	bf00      	nop
 801a868:	0801bf94 	.word	0x0801bf94
 801a86c:	0801bf9e 	.word	0x0801bf9e
 801a870:	08016de9 	.word	0x08016de9
 801a874:	0801a5c5 	.word	0x0801a5c5
 801a878:	0801bf9a 	.word	0x0801bf9a

0801a87c <_read_r>:
 801a87c:	b538      	push	{r3, r4, r5, lr}
 801a87e:	4d07      	ldr	r5, [pc, #28]	; (801a89c <_read_r+0x20>)
 801a880:	4604      	mov	r4, r0
 801a882:	4608      	mov	r0, r1
 801a884:	4611      	mov	r1, r2
 801a886:	2200      	movs	r2, #0
 801a888:	602a      	str	r2, [r5, #0]
 801a88a:	461a      	mov	r2, r3
 801a88c:	f7e8 fe3a 	bl	8003504 <_read>
 801a890:	1c43      	adds	r3, r0, #1
 801a892:	d102      	bne.n	801a89a <_read_r+0x1e>
 801a894:	682b      	ldr	r3, [r5, #0]
 801a896:	b103      	cbz	r3, 801a89a <_read_r+0x1e>
 801a898:	6023      	str	r3, [r4, #0]
 801a89a:	bd38      	pop	{r3, r4, r5, pc}
 801a89c:	24003244 	.word	0x24003244

0801a8a0 <nan>:
 801a8a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801a8a8 <nan+0x8>
 801a8a4:	4770      	bx	lr
 801a8a6:	bf00      	nop
 801a8a8:	00000000 	.word	0x00000000
 801a8ac:	7ff80000 	.word	0x7ff80000

0801a8b0 <_sbrk_r>:
 801a8b0:	b538      	push	{r3, r4, r5, lr}
 801a8b2:	4d06      	ldr	r5, [pc, #24]	; (801a8cc <_sbrk_r+0x1c>)
 801a8b4:	2300      	movs	r3, #0
 801a8b6:	4604      	mov	r4, r0
 801a8b8:	4608      	mov	r0, r1
 801a8ba:	602b      	str	r3, [r5, #0]
 801a8bc:	f7e8 fe90 	bl	80035e0 <_sbrk>
 801a8c0:	1c43      	adds	r3, r0, #1
 801a8c2:	d102      	bne.n	801a8ca <_sbrk_r+0x1a>
 801a8c4:	682b      	ldr	r3, [r5, #0]
 801a8c6:	b103      	cbz	r3, 801a8ca <_sbrk_r+0x1a>
 801a8c8:	6023      	str	r3, [r4, #0]
 801a8ca:	bd38      	pop	{r3, r4, r5, pc}
 801a8cc:	24003244 	.word	0x24003244

0801a8d0 <strncmp>:
 801a8d0:	b510      	push	{r4, lr}
 801a8d2:	b17a      	cbz	r2, 801a8f4 <strncmp+0x24>
 801a8d4:	4603      	mov	r3, r0
 801a8d6:	3901      	subs	r1, #1
 801a8d8:	1884      	adds	r4, r0, r2
 801a8da:	f813 0b01 	ldrb.w	r0, [r3], #1
 801a8de:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801a8e2:	4290      	cmp	r0, r2
 801a8e4:	d101      	bne.n	801a8ea <strncmp+0x1a>
 801a8e6:	42a3      	cmp	r3, r4
 801a8e8:	d101      	bne.n	801a8ee <strncmp+0x1e>
 801a8ea:	1a80      	subs	r0, r0, r2
 801a8ec:	bd10      	pop	{r4, pc}
 801a8ee:	2800      	cmp	r0, #0
 801a8f0:	d1f3      	bne.n	801a8da <strncmp+0xa>
 801a8f2:	e7fa      	b.n	801a8ea <strncmp+0x1a>
 801a8f4:	4610      	mov	r0, r2
 801a8f6:	e7f9      	b.n	801a8ec <strncmp+0x1c>

0801a8f8 <__ascii_wctomb>:
 801a8f8:	b149      	cbz	r1, 801a90e <__ascii_wctomb+0x16>
 801a8fa:	2aff      	cmp	r2, #255	; 0xff
 801a8fc:	bf85      	ittet	hi
 801a8fe:	238a      	movhi	r3, #138	; 0x8a
 801a900:	6003      	strhi	r3, [r0, #0]
 801a902:	700a      	strbls	r2, [r1, #0]
 801a904:	f04f 30ff 	movhi.w	r0, #4294967295
 801a908:	bf98      	it	ls
 801a90a:	2001      	movls	r0, #1
 801a90c:	4770      	bx	lr
 801a90e:	4608      	mov	r0, r1
 801a910:	4770      	bx	lr
	...

0801a914 <__assert_func>:
 801a914:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a916:	4614      	mov	r4, r2
 801a918:	461a      	mov	r2, r3
 801a91a:	4b09      	ldr	r3, [pc, #36]	; (801a940 <__assert_func+0x2c>)
 801a91c:	681b      	ldr	r3, [r3, #0]
 801a91e:	4605      	mov	r5, r0
 801a920:	68d8      	ldr	r0, [r3, #12]
 801a922:	b14c      	cbz	r4, 801a938 <__assert_func+0x24>
 801a924:	4b07      	ldr	r3, [pc, #28]	; (801a944 <__assert_func+0x30>)
 801a926:	9100      	str	r1, [sp, #0]
 801a928:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a92c:	4906      	ldr	r1, [pc, #24]	; (801a948 <__assert_func+0x34>)
 801a92e:	462b      	mov	r3, r5
 801a930:	f000 f9a6 	bl	801ac80 <fiprintf>
 801a934:	f000 fc46 	bl	801b1c4 <abort>
 801a938:	4b04      	ldr	r3, [pc, #16]	; (801a94c <__assert_func+0x38>)
 801a93a:	461c      	mov	r4, r3
 801a93c:	e7f3      	b.n	801a926 <__assert_func+0x12>
 801a93e:	bf00      	nop
 801a940:	24000100 	.word	0x24000100
 801a944:	0801bfa5 	.word	0x0801bfa5
 801a948:	0801bfb2 	.word	0x0801bfb2
 801a94c:	0801bfe0 	.word	0x0801bfe0

0801a950 <__sflush_r>:
 801a950:	898a      	ldrh	r2, [r1, #12]
 801a952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a956:	4605      	mov	r5, r0
 801a958:	0710      	lsls	r0, r2, #28
 801a95a:	460c      	mov	r4, r1
 801a95c:	d458      	bmi.n	801aa10 <__sflush_r+0xc0>
 801a95e:	684b      	ldr	r3, [r1, #4]
 801a960:	2b00      	cmp	r3, #0
 801a962:	dc05      	bgt.n	801a970 <__sflush_r+0x20>
 801a964:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a966:	2b00      	cmp	r3, #0
 801a968:	dc02      	bgt.n	801a970 <__sflush_r+0x20>
 801a96a:	2000      	movs	r0, #0
 801a96c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a970:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a972:	2e00      	cmp	r6, #0
 801a974:	d0f9      	beq.n	801a96a <__sflush_r+0x1a>
 801a976:	2300      	movs	r3, #0
 801a978:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a97c:	682f      	ldr	r7, [r5, #0]
 801a97e:	602b      	str	r3, [r5, #0]
 801a980:	d032      	beq.n	801a9e8 <__sflush_r+0x98>
 801a982:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a984:	89a3      	ldrh	r3, [r4, #12]
 801a986:	075a      	lsls	r2, r3, #29
 801a988:	d505      	bpl.n	801a996 <__sflush_r+0x46>
 801a98a:	6863      	ldr	r3, [r4, #4]
 801a98c:	1ac0      	subs	r0, r0, r3
 801a98e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a990:	b10b      	cbz	r3, 801a996 <__sflush_r+0x46>
 801a992:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a994:	1ac0      	subs	r0, r0, r3
 801a996:	2300      	movs	r3, #0
 801a998:	4602      	mov	r2, r0
 801a99a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a99c:	6a21      	ldr	r1, [r4, #32]
 801a99e:	4628      	mov	r0, r5
 801a9a0:	47b0      	blx	r6
 801a9a2:	1c43      	adds	r3, r0, #1
 801a9a4:	89a3      	ldrh	r3, [r4, #12]
 801a9a6:	d106      	bne.n	801a9b6 <__sflush_r+0x66>
 801a9a8:	6829      	ldr	r1, [r5, #0]
 801a9aa:	291d      	cmp	r1, #29
 801a9ac:	d82c      	bhi.n	801aa08 <__sflush_r+0xb8>
 801a9ae:	4a2a      	ldr	r2, [pc, #168]	; (801aa58 <__sflush_r+0x108>)
 801a9b0:	40ca      	lsrs	r2, r1
 801a9b2:	07d6      	lsls	r6, r2, #31
 801a9b4:	d528      	bpl.n	801aa08 <__sflush_r+0xb8>
 801a9b6:	2200      	movs	r2, #0
 801a9b8:	6062      	str	r2, [r4, #4]
 801a9ba:	04d9      	lsls	r1, r3, #19
 801a9bc:	6922      	ldr	r2, [r4, #16]
 801a9be:	6022      	str	r2, [r4, #0]
 801a9c0:	d504      	bpl.n	801a9cc <__sflush_r+0x7c>
 801a9c2:	1c42      	adds	r2, r0, #1
 801a9c4:	d101      	bne.n	801a9ca <__sflush_r+0x7a>
 801a9c6:	682b      	ldr	r3, [r5, #0]
 801a9c8:	b903      	cbnz	r3, 801a9cc <__sflush_r+0x7c>
 801a9ca:	6560      	str	r0, [r4, #84]	; 0x54
 801a9cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a9ce:	602f      	str	r7, [r5, #0]
 801a9d0:	2900      	cmp	r1, #0
 801a9d2:	d0ca      	beq.n	801a96a <__sflush_r+0x1a>
 801a9d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a9d8:	4299      	cmp	r1, r3
 801a9da:	d002      	beq.n	801a9e2 <__sflush_r+0x92>
 801a9dc:	4628      	mov	r0, r5
 801a9de:	f7ff fd11 	bl	801a404 <_free_r>
 801a9e2:	2000      	movs	r0, #0
 801a9e4:	6360      	str	r0, [r4, #52]	; 0x34
 801a9e6:	e7c1      	b.n	801a96c <__sflush_r+0x1c>
 801a9e8:	6a21      	ldr	r1, [r4, #32]
 801a9ea:	2301      	movs	r3, #1
 801a9ec:	4628      	mov	r0, r5
 801a9ee:	47b0      	blx	r6
 801a9f0:	1c41      	adds	r1, r0, #1
 801a9f2:	d1c7      	bne.n	801a984 <__sflush_r+0x34>
 801a9f4:	682b      	ldr	r3, [r5, #0]
 801a9f6:	2b00      	cmp	r3, #0
 801a9f8:	d0c4      	beq.n	801a984 <__sflush_r+0x34>
 801a9fa:	2b1d      	cmp	r3, #29
 801a9fc:	d001      	beq.n	801aa02 <__sflush_r+0xb2>
 801a9fe:	2b16      	cmp	r3, #22
 801aa00:	d101      	bne.n	801aa06 <__sflush_r+0xb6>
 801aa02:	602f      	str	r7, [r5, #0]
 801aa04:	e7b1      	b.n	801a96a <__sflush_r+0x1a>
 801aa06:	89a3      	ldrh	r3, [r4, #12]
 801aa08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801aa0c:	81a3      	strh	r3, [r4, #12]
 801aa0e:	e7ad      	b.n	801a96c <__sflush_r+0x1c>
 801aa10:	690f      	ldr	r7, [r1, #16]
 801aa12:	2f00      	cmp	r7, #0
 801aa14:	d0a9      	beq.n	801a96a <__sflush_r+0x1a>
 801aa16:	0793      	lsls	r3, r2, #30
 801aa18:	680e      	ldr	r6, [r1, #0]
 801aa1a:	bf08      	it	eq
 801aa1c:	694b      	ldreq	r3, [r1, #20]
 801aa1e:	600f      	str	r7, [r1, #0]
 801aa20:	bf18      	it	ne
 801aa22:	2300      	movne	r3, #0
 801aa24:	eba6 0807 	sub.w	r8, r6, r7
 801aa28:	608b      	str	r3, [r1, #8]
 801aa2a:	f1b8 0f00 	cmp.w	r8, #0
 801aa2e:	dd9c      	ble.n	801a96a <__sflush_r+0x1a>
 801aa30:	6a21      	ldr	r1, [r4, #32]
 801aa32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801aa34:	4643      	mov	r3, r8
 801aa36:	463a      	mov	r2, r7
 801aa38:	4628      	mov	r0, r5
 801aa3a:	47b0      	blx	r6
 801aa3c:	2800      	cmp	r0, #0
 801aa3e:	dc06      	bgt.n	801aa4e <__sflush_r+0xfe>
 801aa40:	89a3      	ldrh	r3, [r4, #12]
 801aa42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801aa46:	81a3      	strh	r3, [r4, #12]
 801aa48:	f04f 30ff 	mov.w	r0, #4294967295
 801aa4c:	e78e      	b.n	801a96c <__sflush_r+0x1c>
 801aa4e:	4407      	add	r7, r0
 801aa50:	eba8 0800 	sub.w	r8, r8, r0
 801aa54:	e7e9      	b.n	801aa2a <__sflush_r+0xda>
 801aa56:	bf00      	nop
 801aa58:	20400001 	.word	0x20400001

0801aa5c <_fflush_r>:
 801aa5c:	b538      	push	{r3, r4, r5, lr}
 801aa5e:	690b      	ldr	r3, [r1, #16]
 801aa60:	4605      	mov	r5, r0
 801aa62:	460c      	mov	r4, r1
 801aa64:	b913      	cbnz	r3, 801aa6c <_fflush_r+0x10>
 801aa66:	2500      	movs	r5, #0
 801aa68:	4628      	mov	r0, r5
 801aa6a:	bd38      	pop	{r3, r4, r5, pc}
 801aa6c:	b118      	cbz	r0, 801aa76 <_fflush_r+0x1a>
 801aa6e:	6983      	ldr	r3, [r0, #24]
 801aa70:	b90b      	cbnz	r3, 801aa76 <_fflush_r+0x1a>
 801aa72:	f000 f887 	bl	801ab84 <__sinit>
 801aa76:	4b14      	ldr	r3, [pc, #80]	; (801aac8 <_fflush_r+0x6c>)
 801aa78:	429c      	cmp	r4, r3
 801aa7a:	d11b      	bne.n	801aab4 <_fflush_r+0x58>
 801aa7c:	686c      	ldr	r4, [r5, #4]
 801aa7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801aa82:	2b00      	cmp	r3, #0
 801aa84:	d0ef      	beq.n	801aa66 <_fflush_r+0xa>
 801aa86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801aa88:	07d0      	lsls	r0, r2, #31
 801aa8a:	d404      	bmi.n	801aa96 <_fflush_r+0x3a>
 801aa8c:	0599      	lsls	r1, r3, #22
 801aa8e:	d402      	bmi.n	801aa96 <_fflush_r+0x3a>
 801aa90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801aa92:	f000 f927 	bl	801ace4 <__retarget_lock_acquire_recursive>
 801aa96:	4628      	mov	r0, r5
 801aa98:	4621      	mov	r1, r4
 801aa9a:	f7ff ff59 	bl	801a950 <__sflush_r>
 801aa9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801aaa0:	07da      	lsls	r2, r3, #31
 801aaa2:	4605      	mov	r5, r0
 801aaa4:	d4e0      	bmi.n	801aa68 <_fflush_r+0xc>
 801aaa6:	89a3      	ldrh	r3, [r4, #12]
 801aaa8:	059b      	lsls	r3, r3, #22
 801aaaa:	d4dd      	bmi.n	801aa68 <_fflush_r+0xc>
 801aaac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801aaae:	f000 f91a 	bl	801ace6 <__retarget_lock_release_recursive>
 801aab2:	e7d9      	b.n	801aa68 <_fflush_r+0xc>
 801aab4:	4b05      	ldr	r3, [pc, #20]	; (801aacc <_fflush_r+0x70>)
 801aab6:	429c      	cmp	r4, r3
 801aab8:	d101      	bne.n	801aabe <_fflush_r+0x62>
 801aaba:	68ac      	ldr	r4, [r5, #8]
 801aabc:	e7df      	b.n	801aa7e <_fflush_r+0x22>
 801aabe:	4b04      	ldr	r3, [pc, #16]	; (801aad0 <_fflush_r+0x74>)
 801aac0:	429c      	cmp	r4, r3
 801aac2:	bf08      	it	eq
 801aac4:	68ec      	ldreq	r4, [r5, #12]
 801aac6:	e7da      	b.n	801aa7e <_fflush_r+0x22>
 801aac8:	0801c004 	.word	0x0801c004
 801aacc:	0801c024 	.word	0x0801c024
 801aad0:	0801bfe4 	.word	0x0801bfe4

0801aad4 <std>:
 801aad4:	2300      	movs	r3, #0
 801aad6:	b510      	push	{r4, lr}
 801aad8:	4604      	mov	r4, r0
 801aada:	e9c0 3300 	strd	r3, r3, [r0]
 801aade:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801aae2:	6083      	str	r3, [r0, #8]
 801aae4:	8181      	strh	r1, [r0, #12]
 801aae6:	6643      	str	r3, [r0, #100]	; 0x64
 801aae8:	81c2      	strh	r2, [r0, #14]
 801aaea:	6183      	str	r3, [r0, #24]
 801aaec:	4619      	mov	r1, r3
 801aaee:	2208      	movs	r2, #8
 801aaf0:	305c      	adds	r0, #92	; 0x5c
 801aaf2:	f7fc f8e1 	bl	8016cb8 <memset>
 801aaf6:	4b05      	ldr	r3, [pc, #20]	; (801ab0c <std+0x38>)
 801aaf8:	6263      	str	r3, [r4, #36]	; 0x24
 801aafa:	4b05      	ldr	r3, [pc, #20]	; (801ab10 <std+0x3c>)
 801aafc:	62a3      	str	r3, [r4, #40]	; 0x28
 801aafe:	4b05      	ldr	r3, [pc, #20]	; (801ab14 <std+0x40>)
 801ab00:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ab02:	4b05      	ldr	r3, [pc, #20]	; (801ab18 <std+0x44>)
 801ab04:	6224      	str	r4, [r4, #32]
 801ab06:	6323      	str	r3, [r4, #48]	; 0x30
 801ab08:	bd10      	pop	{r4, pc}
 801ab0a:	bf00      	nop
 801ab0c:	080179a5 	.word	0x080179a5
 801ab10:	080179c7 	.word	0x080179c7
 801ab14:	080179ff 	.word	0x080179ff
 801ab18:	08017a23 	.word	0x08017a23

0801ab1c <_cleanup_r>:
 801ab1c:	4901      	ldr	r1, [pc, #4]	; (801ab24 <_cleanup_r+0x8>)
 801ab1e:	f000 b8c1 	b.w	801aca4 <_fwalk_reent>
 801ab22:	bf00      	nop
 801ab24:	0801aa5d 	.word	0x0801aa5d

0801ab28 <__sfmoreglue>:
 801ab28:	b570      	push	{r4, r5, r6, lr}
 801ab2a:	2268      	movs	r2, #104	; 0x68
 801ab2c:	1e4d      	subs	r5, r1, #1
 801ab2e:	4355      	muls	r5, r2
 801ab30:	460e      	mov	r6, r1
 801ab32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801ab36:	f7ff fcd1 	bl	801a4dc <_malloc_r>
 801ab3a:	4604      	mov	r4, r0
 801ab3c:	b140      	cbz	r0, 801ab50 <__sfmoreglue+0x28>
 801ab3e:	2100      	movs	r1, #0
 801ab40:	e9c0 1600 	strd	r1, r6, [r0]
 801ab44:	300c      	adds	r0, #12
 801ab46:	60a0      	str	r0, [r4, #8]
 801ab48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801ab4c:	f7fc f8b4 	bl	8016cb8 <memset>
 801ab50:	4620      	mov	r0, r4
 801ab52:	bd70      	pop	{r4, r5, r6, pc}

0801ab54 <__sfp_lock_acquire>:
 801ab54:	4801      	ldr	r0, [pc, #4]	; (801ab5c <__sfp_lock_acquire+0x8>)
 801ab56:	f000 b8c5 	b.w	801ace4 <__retarget_lock_acquire_recursive>
 801ab5a:	bf00      	nop
 801ab5c:	24003249 	.word	0x24003249

0801ab60 <__sfp_lock_release>:
 801ab60:	4801      	ldr	r0, [pc, #4]	; (801ab68 <__sfp_lock_release+0x8>)
 801ab62:	f000 b8c0 	b.w	801ace6 <__retarget_lock_release_recursive>
 801ab66:	bf00      	nop
 801ab68:	24003249 	.word	0x24003249

0801ab6c <__sinit_lock_acquire>:
 801ab6c:	4801      	ldr	r0, [pc, #4]	; (801ab74 <__sinit_lock_acquire+0x8>)
 801ab6e:	f000 b8b9 	b.w	801ace4 <__retarget_lock_acquire_recursive>
 801ab72:	bf00      	nop
 801ab74:	2400324a 	.word	0x2400324a

0801ab78 <__sinit_lock_release>:
 801ab78:	4801      	ldr	r0, [pc, #4]	; (801ab80 <__sinit_lock_release+0x8>)
 801ab7a:	f000 b8b4 	b.w	801ace6 <__retarget_lock_release_recursive>
 801ab7e:	bf00      	nop
 801ab80:	2400324a 	.word	0x2400324a

0801ab84 <__sinit>:
 801ab84:	b510      	push	{r4, lr}
 801ab86:	4604      	mov	r4, r0
 801ab88:	f7ff fff0 	bl	801ab6c <__sinit_lock_acquire>
 801ab8c:	69a3      	ldr	r3, [r4, #24]
 801ab8e:	b11b      	cbz	r3, 801ab98 <__sinit+0x14>
 801ab90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ab94:	f7ff bff0 	b.w	801ab78 <__sinit_lock_release>
 801ab98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801ab9c:	6523      	str	r3, [r4, #80]	; 0x50
 801ab9e:	4b13      	ldr	r3, [pc, #76]	; (801abec <__sinit+0x68>)
 801aba0:	4a13      	ldr	r2, [pc, #76]	; (801abf0 <__sinit+0x6c>)
 801aba2:	681b      	ldr	r3, [r3, #0]
 801aba4:	62a2      	str	r2, [r4, #40]	; 0x28
 801aba6:	42a3      	cmp	r3, r4
 801aba8:	bf04      	itt	eq
 801abaa:	2301      	moveq	r3, #1
 801abac:	61a3      	streq	r3, [r4, #24]
 801abae:	4620      	mov	r0, r4
 801abb0:	f000 f820 	bl	801abf4 <__sfp>
 801abb4:	6060      	str	r0, [r4, #4]
 801abb6:	4620      	mov	r0, r4
 801abb8:	f000 f81c 	bl	801abf4 <__sfp>
 801abbc:	60a0      	str	r0, [r4, #8]
 801abbe:	4620      	mov	r0, r4
 801abc0:	f000 f818 	bl	801abf4 <__sfp>
 801abc4:	2200      	movs	r2, #0
 801abc6:	60e0      	str	r0, [r4, #12]
 801abc8:	2104      	movs	r1, #4
 801abca:	6860      	ldr	r0, [r4, #4]
 801abcc:	f7ff ff82 	bl	801aad4 <std>
 801abd0:	68a0      	ldr	r0, [r4, #8]
 801abd2:	2201      	movs	r2, #1
 801abd4:	2109      	movs	r1, #9
 801abd6:	f7ff ff7d 	bl	801aad4 <std>
 801abda:	68e0      	ldr	r0, [r4, #12]
 801abdc:	2202      	movs	r2, #2
 801abde:	2112      	movs	r1, #18
 801abe0:	f7ff ff78 	bl	801aad4 <std>
 801abe4:	2301      	movs	r3, #1
 801abe6:	61a3      	str	r3, [r4, #24]
 801abe8:	e7d2      	b.n	801ab90 <__sinit+0xc>
 801abea:	bf00      	nop
 801abec:	0801bb9c 	.word	0x0801bb9c
 801abf0:	0801ab1d 	.word	0x0801ab1d

0801abf4 <__sfp>:
 801abf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801abf6:	4607      	mov	r7, r0
 801abf8:	f7ff ffac 	bl	801ab54 <__sfp_lock_acquire>
 801abfc:	4b1e      	ldr	r3, [pc, #120]	; (801ac78 <__sfp+0x84>)
 801abfe:	681e      	ldr	r6, [r3, #0]
 801ac00:	69b3      	ldr	r3, [r6, #24]
 801ac02:	b913      	cbnz	r3, 801ac0a <__sfp+0x16>
 801ac04:	4630      	mov	r0, r6
 801ac06:	f7ff ffbd 	bl	801ab84 <__sinit>
 801ac0a:	3648      	adds	r6, #72	; 0x48
 801ac0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801ac10:	3b01      	subs	r3, #1
 801ac12:	d503      	bpl.n	801ac1c <__sfp+0x28>
 801ac14:	6833      	ldr	r3, [r6, #0]
 801ac16:	b30b      	cbz	r3, 801ac5c <__sfp+0x68>
 801ac18:	6836      	ldr	r6, [r6, #0]
 801ac1a:	e7f7      	b.n	801ac0c <__sfp+0x18>
 801ac1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801ac20:	b9d5      	cbnz	r5, 801ac58 <__sfp+0x64>
 801ac22:	4b16      	ldr	r3, [pc, #88]	; (801ac7c <__sfp+0x88>)
 801ac24:	60e3      	str	r3, [r4, #12]
 801ac26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801ac2a:	6665      	str	r5, [r4, #100]	; 0x64
 801ac2c:	f000 f859 	bl	801ace2 <__retarget_lock_init_recursive>
 801ac30:	f7ff ff96 	bl	801ab60 <__sfp_lock_release>
 801ac34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801ac38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801ac3c:	6025      	str	r5, [r4, #0]
 801ac3e:	61a5      	str	r5, [r4, #24]
 801ac40:	2208      	movs	r2, #8
 801ac42:	4629      	mov	r1, r5
 801ac44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801ac48:	f7fc f836 	bl	8016cb8 <memset>
 801ac4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801ac50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801ac54:	4620      	mov	r0, r4
 801ac56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ac58:	3468      	adds	r4, #104	; 0x68
 801ac5a:	e7d9      	b.n	801ac10 <__sfp+0x1c>
 801ac5c:	2104      	movs	r1, #4
 801ac5e:	4638      	mov	r0, r7
 801ac60:	f7ff ff62 	bl	801ab28 <__sfmoreglue>
 801ac64:	4604      	mov	r4, r0
 801ac66:	6030      	str	r0, [r6, #0]
 801ac68:	2800      	cmp	r0, #0
 801ac6a:	d1d5      	bne.n	801ac18 <__sfp+0x24>
 801ac6c:	f7ff ff78 	bl	801ab60 <__sfp_lock_release>
 801ac70:	230c      	movs	r3, #12
 801ac72:	603b      	str	r3, [r7, #0]
 801ac74:	e7ee      	b.n	801ac54 <__sfp+0x60>
 801ac76:	bf00      	nop
 801ac78:	0801bb9c 	.word	0x0801bb9c
 801ac7c:	ffff0001 	.word	0xffff0001

0801ac80 <fiprintf>:
 801ac80:	b40e      	push	{r1, r2, r3}
 801ac82:	b503      	push	{r0, r1, lr}
 801ac84:	4601      	mov	r1, r0
 801ac86:	ab03      	add	r3, sp, #12
 801ac88:	4805      	ldr	r0, [pc, #20]	; (801aca0 <fiprintf+0x20>)
 801ac8a:	f853 2b04 	ldr.w	r2, [r3], #4
 801ac8e:	6800      	ldr	r0, [r0, #0]
 801ac90:	9301      	str	r3, [sp, #4]
 801ac92:	f000 f8a7 	bl	801ade4 <_vfiprintf_r>
 801ac96:	b002      	add	sp, #8
 801ac98:	f85d eb04 	ldr.w	lr, [sp], #4
 801ac9c:	b003      	add	sp, #12
 801ac9e:	4770      	bx	lr
 801aca0:	24000100 	.word	0x24000100

0801aca4 <_fwalk_reent>:
 801aca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aca8:	4606      	mov	r6, r0
 801acaa:	4688      	mov	r8, r1
 801acac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801acb0:	2700      	movs	r7, #0
 801acb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801acb6:	f1b9 0901 	subs.w	r9, r9, #1
 801acba:	d505      	bpl.n	801acc8 <_fwalk_reent+0x24>
 801acbc:	6824      	ldr	r4, [r4, #0]
 801acbe:	2c00      	cmp	r4, #0
 801acc0:	d1f7      	bne.n	801acb2 <_fwalk_reent+0xe>
 801acc2:	4638      	mov	r0, r7
 801acc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801acc8:	89ab      	ldrh	r3, [r5, #12]
 801acca:	2b01      	cmp	r3, #1
 801accc:	d907      	bls.n	801acde <_fwalk_reent+0x3a>
 801acce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801acd2:	3301      	adds	r3, #1
 801acd4:	d003      	beq.n	801acde <_fwalk_reent+0x3a>
 801acd6:	4629      	mov	r1, r5
 801acd8:	4630      	mov	r0, r6
 801acda:	47c0      	blx	r8
 801acdc:	4307      	orrs	r7, r0
 801acde:	3568      	adds	r5, #104	; 0x68
 801ace0:	e7e9      	b.n	801acb6 <_fwalk_reent+0x12>

0801ace2 <__retarget_lock_init_recursive>:
 801ace2:	4770      	bx	lr

0801ace4 <__retarget_lock_acquire_recursive>:
 801ace4:	4770      	bx	lr

0801ace6 <__retarget_lock_release_recursive>:
 801ace6:	4770      	bx	lr

0801ace8 <memmove>:
 801ace8:	4288      	cmp	r0, r1
 801acea:	b510      	push	{r4, lr}
 801acec:	eb01 0402 	add.w	r4, r1, r2
 801acf0:	d902      	bls.n	801acf8 <memmove+0x10>
 801acf2:	4284      	cmp	r4, r0
 801acf4:	4623      	mov	r3, r4
 801acf6:	d807      	bhi.n	801ad08 <memmove+0x20>
 801acf8:	1e43      	subs	r3, r0, #1
 801acfa:	42a1      	cmp	r1, r4
 801acfc:	d008      	beq.n	801ad10 <memmove+0x28>
 801acfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ad02:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ad06:	e7f8      	b.n	801acfa <memmove+0x12>
 801ad08:	4402      	add	r2, r0
 801ad0a:	4601      	mov	r1, r0
 801ad0c:	428a      	cmp	r2, r1
 801ad0e:	d100      	bne.n	801ad12 <memmove+0x2a>
 801ad10:	bd10      	pop	{r4, pc}
 801ad12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ad16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ad1a:	e7f7      	b.n	801ad0c <memmove+0x24>

0801ad1c <__malloc_lock>:
 801ad1c:	4801      	ldr	r0, [pc, #4]	; (801ad24 <__malloc_lock+0x8>)
 801ad1e:	f7ff bfe1 	b.w	801ace4 <__retarget_lock_acquire_recursive>
 801ad22:	bf00      	nop
 801ad24:	24003248 	.word	0x24003248

0801ad28 <__malloc_unlock>:
 801ad28:	4801      	ldr	r0, [pc, #4]	; (801ad30 <__malloc_unlock+0x8>)
 801ad2a:	f7ff bfdc 	b.w	801ace6 <__retarget_lock_release_recursive>
 801ad2e:	bf00      	nop
 801ad30:	24003248 	.word	0x24003248

0801ad34 <_realloc_r>:
 801ad34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad38:	4680      	mov	r8, r0
 801ad3a:	4614      	mov	r4, r2
 801ad3c:	460e      	mov	r6, r1
 801ad3e:	b921      	cbnz	r1, 801ad4a <_realloc_r+0x16>
 801ad40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ad44:	4611      	mov	r1, r2
 801ad46:	f7ff bbc9 	b.w	801a4dc <_malloc_r>
 801ad4a:	b92a      	cbnz	r2, 801ad58 <_realloc_r+0x24>
 801ad4c:	f7ff fb5a 	bl	801a404 <_free_r>
 801ad50:	4625      	mov	r5, r4
 801ad52:	4628      	mov	r0, r5
 801ad54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad58:	f000 faa0 	bl	801b29c <_malloc_usable_size_r>
 801ad5c:	4284      	cmp	r4, r0
 801ad5e:	4607      	mov	r7, r0
 801ad60:	d802      	bhi.n	801ad68 <_realloc_r+0x34>
 801ad62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801ad66:	d812      	bhi.n	801ad8e <_realloc_r+0x5a>
 801ad68:	4621      	mov	r1, r4
 801ad6a:	4640      	mov	r0, r8
 801ad6c:	f7ff fbb6 	bl	801a4dc <_malloc_r>
 801ad70:	4605      	mov	r5, r0
 801ad72:	2800      	cmp	r0, #0
 801ad74:	d0ed      	beq.n	801ad52 <_realloc_r+0x1e>
 801ad76:	42bc      	cmp	r4, r7
 801ad78:	4622      	mov	r2, r4
 801ad7a:	4631      	mov	r1, r6
 801ad7c:	bf28      	it	cs
 801ad7e:	463a      	movcs	r2, r7
 801ad80:	f7fb ff8c 	bl	8016c9c <memcpy>
 801ad84:	4631      	mov	r1, r6
 801ad86:	4640      	mov	r0, r8
 801ad88:	f7ff fb3c 	bl	801a404 <_free_r>
 801ad8c:	e7e1      	b.n	801ad52 <_realloc_r+0x1e>
 801ad8e:	4635      	mov	r5, r6
 801ad90:	e7df      	b.n	801ad52 <_realloc_r+0x1e>

0801ad92 <__sfputc_r>:
 801ad92:	6893      	ldr	r3, [r2, #8]
 801ad94:	3b01      	subs	r3, #1
 801ad96:	2b00      	cmp	r3, #0
 801ad98:	b410      	push	{r4}
 801ad9a:	6093      	str	r3, [r2, #8]
 801ad9c:	da08      	bge.n	801adb0 <__sfputc_r+0x1e>
 801ad9e:	6994      	ldr	r4, [r2, #24]
 801ada0:	42a3      	cmp	r3, r4
 801ada2:	db01      	blt.n	801ada8 <__sfputc_r+0x16>
 801ada4:	290a      	cmp	r1, #10
 801ada6:	d103      	bne.n	801adb0 <__sfputc_r+0x1e>
 801ada8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801adac:	f000 b94a 	b.w	801b044 <__swbuf_r>
 801adb0:	6813      	ldr	r3, [r2, #0]
 801adb2:	1c58      	adds	r0, r3, #1
 801adb4:	6010      	str	r0, [r2, #0]
 801adb6:	7019      	strb	r1, [r3, #0]
 801adb8:	4608      	mov	r0, r1
 801adba:	f85d 4b04 	ldr.w	r4, [sp], #4
 801adbe:	4770      	bx	lr

0801adc0 <__sfputs_r>:
 801adc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801adc2:	4606      	mov	r6, r0
 801adc4:	460f      	mov	r7, r1
 801adc6:	4614      	mov	r4, r2
 801adc8:	18d5      	adds	r5, r2, r3
 801adca:	42ac      	cmp	r4, r5
 801adcc:	d101      	bne.n	801add2 <__sfputs_r+0x12>
 801adce:	2000      	movs	r0, #0
 801add0:	e007      	b.n	801ade2 <__sfputs_r+0x22>
 801add2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801add6:	463a      	mov	r2, r7
 801add8:	4630      	mov	r0, r6
 801adda:	f7ff ffda 	bl	801ad92 <__sfputc_r>
 801adde:	1c43      	adds	r3, r0, #1
 801ade0:	d1f3      	bne.n	801adca <__sfputs_r+0xa>
 801ade2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801ade4 <_vfiprintf_r>:
 801ade4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ade8:	460d      	mov	r5, r1
 801adea:	b09d      	sub	sp, #116	; 0x74
 801adec:	4614      	mov	r4, r2
 801adee:	4698      	mov	r8, r3
 801adf0:	4606      	mov	r6, r0
 801adf2:	b118      	cbz	r0, 801adfc <_vfiprintf_r+0x18>
 801adf4:	6983      	ldr	r3, [r0, #24]
 801adf6:	b90b      	cbnz	r3, 801adfc <_vfiprintf_r+0x18>
 801adf8:	f7ff fec4 	bl	801ab84 <__sinit>
 801adfc:	4b89      	ldr	r3, [pc, #548]	; (801b024 <_vfiprintf_r+0x240>)
 801adfe:	429d      	cmp	r5, r3
 801ae00:	d11b      	bne.n	801ae3a <_vfiprintf_r+0x56>
 801ae02:	6875      	ldr	r5, [r6, #4]
 801ae04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ae06:	07d9      	lsls	r1, r3, #31
 801ae08:	d405      	bmi.n	801ae16 <_vfiprintf_r+0x32>
 801ae0a:	89ab      	ldrh	r3, [r5, #12]
 801ae0c:	059a      	lsls	r2, r3, #22
 801ae0e:	d402      	bmi.n	801ae16 <_vfiprintf_r+0x32>
 801ae10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ae12:	f7ff ff67 	bl	801ace4 <__retarget_lock_acquire_recursive>
 801ae16:	89ab      	ldrh	r3, [r5, #12]
 801ae18:	071b      	lsls	r3, r3, #28
 801ae1a:	d501      	bpl.n	801ae20 <_vfiprintf_r+0x3c>
 801ae1c:	692b      	ldr	r3, [r5, #16]
 801ae1e:	b9eb      	cbnz	r3, 801ae5c <_vfiprintf_r+0x78>
 801ae20:	4629      	mov	r1, r5
 801ae22:	4630      	mov	r0, r6
 801ae24:	f000 f960 	bl	801b0e8 <__swsetup_r>
 801ae28:	b1c0      	cbz	r0, 801ae5c <_vfiprintf_r+0x78>
 801ae2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ae2c:	07dc      	lsls	r4, r3, #31
 801ae2e:	d50e      	bpl.n	801ae4e <_vfiprintf_r+0x6a>
 801ae30:	f04f 30ff 	mov.w	r0, #4294967295
 801ae34:	b01d      	add	sp, #116	; 0x74
 801ae36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae3a:	4b7b      	ldr	r3, [pc, #492]	; (801b028 <_vfiprintf_r+0x244>)
 801ae3c:	429d      	cmp	r5, r3
 801ae3e:	d101      	bne.n	801ae44 <_vfiprintf_r+0x60>
 801ae40:	68b5      	ldr	r5, [r6, #8]
 801ae42:	e7df      	b.n	801ae04 <_vfiprintf_r+0x20>
 801ae44:	4b79      	ldr	r3, [pc, #484]	; (801b02c <_vfiprintf_r+0x248>)
 801ae46:	429d      	cmp	r5, r3
 801ae48:	bf08      	it	eq
 801ae4a:	68f5      	ldreq	r5, [r6, #12]
 801ae4c:	e7da      	b.n	801ae04 <_vfiprintf_r+0x20>
 801ae4e:	89ab      	ldrh	r3, [r5, #12]
 801ae50:	0598      	lsls	r0, r3, #22
 801ae52:	d4ed      	bmi.n	801ae30 <_vfiprintf_r+0x4c>
 801ae54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ae56:	f7ff ff46 	bl	801ace6 <__retarget_lock_release_recursive>
 801ae5a:	e7e9      	b.n	801ae30 <_vfiprintf_r+0x4c>
 801ae5c:	2300      	movs	r3, #0
 801ae5e:	9309      	str	r3, [sp, #36]	; 0x24
 801ae60:	2320      	movs	r3, #32
 801ae62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ae66:	f8cd 800c 	str.w	r8, [sp, #12]
 801ae6a:	2330      	movs	r3, #48	; 0x30
 801ae6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801b030 <_vfiprintf_r+0x24c>
 801ae70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ae74:	f04f 0901 	mov.w	r9, #1
 801ae78:	4623      	mov	r3, r4
 801ae7a:	469a      	mov	sl, r3
 801ae7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ae80:	b10a      	cbz	r2, 801ae86 <_vfiprintf_r+0xa2>
 801ae82:	2a25      	cmp	r2, #37	; 0x25
 801ae84:	d1f9      	bne.n	801ae7a <_vfiprintf_r+0x96>
 801ae86:	ebba 0b04 	subs.w	fp, sl, r4
 801ae8a:	d00b      	beq.n	801aea4 <_vfiprintf_r+0xc0>
 801ae8c:	465b      	mov	r3, fp
 801ae8e:	4622      	mov	r2, r4
 801ae90:	4629      	mov	r1, r5
 801ae92:	4630      	mov	r0, r6
 801ae94:	f7ff ff94 	bl	801adc0 <__sfputs_r>
 801ae98:	3001      	adds	r0, #1
 801ae9a:	f000 80aa 	beq.w	801aff2 <_vfiprintf_r+0x20e>
 801ae9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801aea0:	445a      	add	r2, fp
 801aea2:	9209      	str	r2, [sp, #36]	; 0x24
 801aea4:	f89a 3000 	ldrb.w	r3, [sl]
 801aea8:	2b00      	cmp	r3, #0
 801aeaa:	f000 80a2 	beq.w	801aff2 <_vfiprintf_r+0x20e>
 801aeae:	2300      	movs	r3, #0
 801aeb0:	f04f 32ff 	mov.w	r2, #4294967295
 801aeb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801aeb8:	f10a 0a01 	add.w	sl, sl, #1
 801aebc:	9304      	str	r3, [sp, #16]
 801aebe:	9307      	str	r3, [sp, #28]
 801aec0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801aec4:	931a      	str	r3, [sp, #104]	; 0x68
 801aec6:	4654      	mov	r4, sl
 801aec8:	2205      	movs	r2, #5
 801aeca:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aece:	4858      	ldr	r0, [pc, #352]	; (801b030 <_vfiprintf_r+0x24c>)
 801aed0:	f7e5 fa36 	bl	8000340 <memchr>
 801aed4:	9a04      	ldr	r2, [sp, #16]
 801aed6:	b9d8      	cbnz	r0, 801af10 <_vfiprintf_r+0x12c>
 801aed8:	06d1      	lsls	r1, r2, #27
 801aeda:	bf44      	itt	mi
 801aedc:	2320      	movmi	r3, #32
 801aede:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801aee2:	0713      	lsls	r3, r2, #28
 801aee4:	bf44      	itt	mi
 801aee6:	232b      	movmi	r3, #43	; 0x2b
 801aee8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801aeec:	f89a 3000 	ldrb.w	r3, [sl]
 801aef0:	2b2a      	cmp	r3, #42	; 0x2a
 801aef2:	d015      	beq.n	801af20 <_vfiprintf_r+0x13c>
 801aef4:	9a07      	ldr	r2, [sp, #28]
 801aef6:	4654      	mov	r4, sl
 801aef8:	2000      	movs	r0, #0
 801aefa:	f04f 0c0a 	mov.w	ip, #10
 801aefe:	4621      	mov	r1, r4
 801af00:	f811 3b01 	ldrb.w	r3, [r1], #1
 801af04:	3b30      	subs	r3, #48	; 0x30
 801af06:	2b09      	cmp	r3, #9
 801af08:	d94e      	bls.n	801afa8 <_vfiprintf_r+0x1c4>
 801af0a:	b1b0      	cbz	r0, 801af3a <_vfiprintf_r+0x156>
 801af0c:	9207      	str	r2, [sp, #28]
 801af0e:	e014      	b.n	801af3a <_vfiprintf_r+0x156>
 801af10:	eba0 0308 	sub.w	r3, r0, r8
 801af14:	fa09 f303 	lsl.w	r3, r9, r3
 801af18:	4313      	orrs	r3, r2
 801af1a:	9304      	str	r3, [sp, #16]
 801af1c:	46a2      	mov	sl, r4
 801af1e:	e7d2      	b.n	801aec6 <_vfiprintf_r+0xe2>
 801af20:	9b03      	ldr	r3, [sp, #12]
 801af22:	1d19      	adds	r1, r3, #4
 801af24:	681b      	ldr	r3, [r3, #0]
 801af26:	9103      	str	r1, [sp, #12]
 801af28:	2b00      	cmp	r3, #0
 801af2a:	bfbb      	ittet	lt
 801af2c:	425b      	neglt	r3, r3
 801af2e:	f042 0202 	orrlt.w	r2, r2, #2
 801af32:	9307      	strge	r3, [sp, #28]
 801af34:	9307      	strlt	r3, [sp, #28]
 801af36:	bfb8      	it	lt
 801af38:	9204      	strlt	r2, [sp, #16]
 801af3a:	7823      	ldrb	r3, [r4, #0]
 801af3c:	2b2e      	cmp	r3, #46	; 0x2e
 801af3e:	d10c      	bne.n	801af5a <_vfiprintf_r+0x176>
 801af40:	7863      	ldrb	r3, [r4, #1]
 801af42:	2b2a      	cmp	r3, #42	; 0x2a
 801af44:	d135      	bne.n	801afb2 <_vfiprintf_r+0x1ce>
 801af46:	9b03      	ldr	r3, [sp, #12]
 801af48:	1d1a      	adds	r2, r3, #4
 801af4a:	681b      	ldr	r3, [r3, #0]
 801af4c:	9203      	str	r2, [sp, #12]
 801af4e:	2b00      	cmp	r3, #0
 801af50:	bfb8      	it	lt
 801af52:	f04f 33ff 	movlt.w	r3, #4294967295
 801af56:	3402      	adds	r4, #2
 801af58:	9305      	str	r3, [sp, #20]
 801af5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801b040 <_vfiprintf_r+0x25c>
 801af5e:	7821      	ldrb	r1, [r4, #0]
 801af60:	2203      	movs	r2, #3
 801af62:	4650      	mov	r0, sl
 801af64:	f7e5 f9ec 	bl	8000340 <memchr>
 801af68:	b140      	cbz	r0, 801af7c <_vfiprintf_r+0x198>
 801af6a:	2340      	movs	r3, #64	; 0x40
 801af6c:	eba0 000a 	sub.w	r0, r0, sl
 801af70:	fa03 f000 	lsl.w	r0, r3, r0
 801af74:	9b04      	ldr	r3, [sp, #16]
 801af76:	4303      	orrs	r3, r0
 801af78:	3401      	adds	r4, #1
 801af7a:	9304      	str	r3, [sp, #16]
 801af7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801af80:	482c      	ldr	r0, [pc, #176]	; (801b034 <_vfiprintf_r+0x250>)
 801af82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801af86:	2206      	movs	r2, #6
 801af88:	f7e5 f9da 	bl	8000340 <memchr>
 801af8c:	2800      	cmp	r0, #0
 801af8e:	d03f      	beq.n	801b010 <_vfiprintf_r+0x22c>
 801af90:	4b29      	ldr	r3, [pc, #164]	; (801b038 <_vfiprintf_r+0x254>)
 801af92:	bb1b      	cbnz	r3, 801afdc <_vfiprintf_r+0x1f8>
 801af94:	9b03      	ldr	r3, [sp, #12]
 801af96:	3307      	adds	r3, #7
 801af98:	f023 0307 	bic.w	r3, r3, #7
 801af9c:	3308      	adds	r3, #8
 801af9e:	9303      	str	r3, [sp, #12]
 801afa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801afa2:	443b      	add	r3, r7
 801afa4:	9309      	str	r3, [sp, #36]	; 0x24
 801afa6:	e767      	b.n	801ae78 <_vfiprintf_r+0x94>
 801afa8:	fb0c 3202 	mla	r2, ip, r2, r3
 801afac:	460c      	mov	r4, r1
 801afae:	2001      	movs	r0, #1
 801afb0:	e7a5      	b.n	801aefe <_vfiprintf_r+0x11a>
 801afb2:	2300      	movs	r3, #0
 801afb4:	3401      	adds	r4, #1
 801afb6:	9305      	str	r3, [sp, #20]
 801afb8:	4619      	mov	r1, r3
 801afba:	f04f 0c0a 	mov.w	ip, #10
 801afbe:	4620      	mov	r0, r4
 801afc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801afc4:	3a30      	subs	r2, #48	; 0x30
 801afc6:	2a09      	cmp	r2, #9
 801afc8:	d903      	bls.n	801afd2 <_vfiprintf_r+0x1ee>
 801afca:	2b00      	cmp	r3, #0
 801afcc:	d0c5      	beq.n	801af5a <_vfiprintf_r+0x176>
 801afce:	9105      	str	r1, [sp, #20]
 801afd0:	e7c3      	b.n	801af5a <_vfiprintf_r+0x176>
 801afd2:	fb0c 2101 	mla	r1, ip, r1, r2
 801afd6:	4604      	mov	r4, r0
 801afd8:	2301      	movs	r3, #1
 801afda:	e7f0      	b.n	801afbe <_vfiprintf_r+0x1da>
 801afdc:	ab03      	add	r3, sp, #12
 801afde:	9300      	str	r3, [sp, #0]
 801afe0:	462a      	mov	r2, r5
 801afe2:	4b16      	ldr	r3, [pc, #88]	; (801b03c <_vfiprintf_r+0x258>)
 801afe4:	a904      	add	r1, sp, #16
 801afe6:	4630      	mov	r0, r6
 801afe8:	f7fb fefe 	bl	8016de8 <_printf_float>
 801afec:	4607      	mov	r7, r0
 801afee:	1c78      	adds	r0, r7, #1
 801aff0:	d1d6      	bne.n	801afa0 <_vfiprintf_r+0x1bc>
 801aff2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801aff4:	07d9      	lsls	r1, r3, #31
 801aff6:	d405      	bmi.n	801b004 <_vfiprintf_r+0x220>
 801aff8:	89ab      	ldrh	r3, [r5, #12]
 801affa:	059a      	lsls	r2, r3, #22
 801affc:	d402      	bmi.n	801b004 <_vfiprintf_r+0x220>
 801affe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b000:	f7ff fe71 	bl	801ace6 <__retarget_lock_release_recursive>
 801b004:	89ab      	ldrh	r3, [r5, #12]
 801b006:	065b      	lsls	r3, r3, #25
 801b008:	f53f af12 	bmi.w	801ae30 <_vfiprintf_r+0x4c>
 801b00c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b00e:	e711      	b.n	801ae34 <_vfiprintf_r+0x50>
 801b010:	ab03      	add	r3, sp, #12
 801b012:	9300      	str	r3, [sp, #0]
 801b014:	462a      	mov	r2, r5
 801b016:	4b09      	ldr	r3, [pc, #36]	; (801b03c <_vfiprintf_r+0x258>)
 801b018:	a904      	add	r1, sp, #16
 801b01a:	4630      	mov	r0, r6
 801b01c:	f7fc f970 	bl	8017300 <_printf_i>
 801b020:	e7e4      	b.n	801afec <_vfiprintf_r+0x208>
 801b022:	bf00      	nop
 801b024:	0801c004 	.word	0x0801c004
 801b028:	0801c024 	.word	0x0801c024
 801b02c:	0801bfe4 	.word	0x0801bfe4
 801b030:	0801bf94 	.word	0x0801bf94
 801b034:	0801bf9e 	.word	0x0801bf9e
 801b038:	08016de9 	.word	0x08016de9
 801b03c:	0801adc1 	.word	0x0801adc1
 801b040:	0801bf9a 	.word	0x0801bf9a

0801b044 <__swbuf_r>:
 801b044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b046:	460e      	mov	r6, r1
 801b048:	4614      	mov	r4, r2
 801b04a:	4605      	mov	r5, r0
 801b04c:	b118      	cbz	r0, 801b056 <__swbuf_r+0x12>
 801b04e:	6983      	ldr	r3, [r0, #24]
 801b050:	b90b      	cbnz	r3, 801b056 <__swbuf_r+0x12>
 801b052:	f7ff fd97 	bl	801ab84 <__sinit>
 801b056:	4b21      	ldr	r3, [pc, #132]	; (801b0dc <__swbuf_r+0x98>)
 801b058:	429c      	cmp	r4, r3
 801b05a:	d12b      	bne.n	801b0b4 <__swbuf_r+0x70>
 801b05c:	686c      	ldr	r4, [r5, #4]
 801b05e:	69a3      	ldr	r3, [r4, #24]
 801b060:	60a3      	str	r3, [r4, #8]
 801b062:	89a3      	ldrh	r3, [r4, #12]
 801b064:	071a      	lsls	r2, r3, #28
 801b066:	d52f      	bpl.n	801b0c8 <__swbuf_r+0x84>
 801b068:	6923      	ldr	r3, [r4, #16]
 801b06a:	b36b      	cbz	r3, 801b0c8 <__swbuf_r+0x84>
 801b06c:	6923      	ldr	r3, [r4, #16]
 801b06e:	6820      	ldr	r0, [r4, #0]
 801b070:	1ac0      	subs	r0, r0, r3
 801b072:	6963      	ldr	r3, [r4, #20]
 801b074:	b2f6      	uxtb	r6, r6
 801b076:	4283      	cmp	r3, r0
 801b078:	4637      	mov	r7, r6
 801b07a:	dc04      	bgt.n	801b086 <__swbuf_r+0x42>
 801b07c:	4621      	mov	r1, r4
 801b07e:	4628      	mov	r0, r5
 801b080:	f7ff fcec 	bl	801aa5c <_fflush_r>
 801b084:	bb30      	cbnz	r0, 801b0d4 <__swbuf_r+0x90>
 801b086:	68a3      	ldr	r3, [r4, #8]
 801b088:	3b01      	subs	r3, #1
 801b08a:	60a3      	str	r3, [r4, #8]
 801b08c:	6823      	ldr	r3, [r4, #0]
 801b08e:	1c5a      	adds	r2, r3, #1
 801b090:	6022      	str	r2, [r4, #0]
 801b092:	701e      	strb	r6, [r3, #0]
 801b094:	6963      	ldr	r3, [r4, #20]
 801b096:	3001      	adds	r0, #1
 801b098:	4283      	cmp	r3, r0
 801b09a:	d004      	beq.n	801b0a6 <__swbuf_r+0x62>
 801b09c:	89a3      	ldrh	r3, [r4, #12]
 801b09e:	07db      	lsls	r3, r3, #31
 801b0a0:	d506      	bpl.n	801b0b0 <__swbuf_r+0x6c>
 801b0a2:	2e0a      	cmp	r6, #10
 801b0a4:	d104      	bne.n	801b0b0 <__swbuf_r+0x6c>
 801b0a6:	4621      	mov	r1, r4
 801b0a8:	4628      	mov	r0, r5
 801b0aa:	f7ff fcd7 	bl	801aa5c <_fflush_r>
 801b0ae:	b988      	cbnz	r0, 801b0d4 <__swbuf_r+0x90>
 801b0b0:	4638      	mov	r0, r7
 801b0b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b0b4:	4b0a      	ldr	r3, [pc, #40]	; (801b0e0 <__swbuf_r+0x9c>)
 801b0b6:	429c      	cmp	r4, r3
 801b0b8:	d101      	bne.n	801b0be <__swbuf_r+0x7a>
 801b0ba:	68ac      	ldr	r4, [r5, #8]
 801b0bc:	e7cf      	b.n	801b05e <__swbuf_r+0x1a>
 801b0be:	4b09      	ldr	r3, [pc, #36]	; (801b0e4 <__swbuf_r+0xa0>)
 801b0c0:	429c      	cmp	r4, r3
 801b0c2:	bf08      	it	eq
 801b0c4:	68ec      	ldreq	r4, [r5, #12]
 801b0c6:	e7ca      	b.n	801b05e <__swbuf_r+0x1a>
 801b0c8:	4621      	mov	r1, r4
 801b0ca:	4628      	mov	r0, r5
 801b0cc:	f000 f80c 	bl	801b0e8 <__swsetup_r>
 801b0d0:	2800      	cmp	r0, #0
 801b0d2:	d0cb      	beq.n	801b06c <__swbuf_r+0x28>
 801b0d4:	f04f 37ff 	mov.w	r7, #4294967295
 801b0d8:	e7ea      	b.n	801b0b0 <__swbuf_r+0x6c>
 801b0da:	bf00      	nop
 801b0dc:	0801c004 	.word	0x0801c004
 801b0e0:	0801c024 	.word	0x0801c024
 801b0e4:	0801bfe4 	.word	0x0801bfe4

0801b0e8 <__swsetup_r>:
 801b0e8:	4b32      	ldr	r3, [pc, #200]	; (801b1b4 <__swsetup_r+0xcc>)
 801b0ea:	b570      	push	{r4, r5, r6, lr}
 801b0ec:	681d      	ldr	r5, [r3, #0]
 801b0ee:	4606      	mov	r6, r0
 801b0f0:	460c      	mov	r4, r1
 801b0f2:	b125      	cbz	r5, 801b0fe <__swsetup_r+0x16>
 801b0f4:	69ab      	ldr	r3, [r5, #24]
 801b0f6:	b913      	cbnz	r3, 801b0fe <__swsetup_r+0x16>
 801b0f8:	4628      	mov	r0, r5
 801b0fa:	f7ff fd43 	bl	801ab84 <__sinit>
 801b0fe:	4b2e      	ldr	r3, [pc, #184]	; (801b1b8 <__swsetup_r+0xd0>)
 801b100:	429c      	cmp	r4, r3
 801b102:	d10f      	bne.n	801b124 <__swsetup_r+0x3c>
 801b104:	686c      	ldr	r4, [r5, #4]
 801b106:	89a3      	ldrh	r3, [r4, #12]
 801b108:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b10c:	0719      	lsls	r1, r3, #28
 801b10e:	d42c      	bmi.n	801b16a <__swsetup_r+0x82>
 801b110:	06dd      	lsls	r5, r3, #27
 801b112:	d411      	bmi.n	801b138 <__swsetup_r+0x50>
 801b114:	2309      	movs	r3, #9
 801b116:	6033      	str	r3, [r6, #0]
 801b118:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b11c:	81a3      	strh	r3, [r4, #12]
 801b11e:	f04f 30ff 	mov.w	r0, #4294967295
 801b122:	e03e      	b.n	801b1a2 <__swsetup_r+0xba>
 801b124:	4b25      	ldr	r3, [pc, #148]	; (801b1bc <__swsetup_r+0xd4>)
 801b126:	429c      	cmp	r4, r3
 801b128:	d101      	bne.n	801b12e <__swsetup_r+0x46>
 801b12a:	68ac      	ldr	r4, [r5, #8]
 801b12c:	e7eb      	b.n	801b106 <__swsetup_r+0x1e>
 801b12e:	4b24      	ldr	r3, [pc, #144]	; (801b1c0 <__swsetup_r+0xd8>)
 801b130:	429c      	cmp	r4, r3
 801b132:	bf08      	it	eq
 801b134:	68ec      	ldreq	r4, [r5, #12]
 801b136:	e7e6      	b.n	801b106 <__swsetup_r+0x1e>
 801b138:	0758      	lsls	r0, r3, #29
 801b13a:	d512      	bpl.n	801b162 <__swsetup_r+0x7a>
 801b13c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b13e:	b141      	cbz	r1, 801b152 <__swsetup_r+0x6a>
 801b140:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b144:	4299      	cmp	r1, r3
 801b146:	d002      	beq.n	801b14e <__swsetup_r+0x66>
 801b148:	4630      	mov	r0, r6
 801b14a:	f7ff f95b 	bl	801a404 <_free_r>
 801b14e:	2300      	movs	r3, #0
 801b150:	6363      	str	r3, [r4, #52]	; 0x34
 801b152:	89a3      	ldrh	r3, [r4, #12]
 801b154:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b158:	81a3      	strh	r3, [r4, #12]
 801b15a:	2300      	movs	r3, #0
 801b15c:	6063      	str	r3, [r4, #4]
 801b15e:	6923      	ldr	r3, [r4, #16]
 801b160:	6023      	str	r3, [r4, #0]
 801b162:	89a3      	ldrh	r3, [r4, #12]
 801b164:	f043 0308 	orr.w	r3, r3, #8
 801b168:	81a3      	strh	r3, [r4, #12]
 801b16a:	6923      	ldr	r3, [r4, #16]
 801b16c:	b94b      	cbnz	r3, 801b182 <__swsetup_r+0x9a>
 801b16e:	89a3      	ldrh	r3, [r4, #12]
 801b170:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b178:	d003      	beq.n	801b182 <__swsetup_r+0x9a>
 801b17a:	4621      	mov	r1, r4
 801b17c:	4630      	mov	r0, r6
 801b17e:	f000 f84d 	bl	801b21c <__smakebuf_r>
 801b182:	89a0      	ldrh	r0, [r4, #12]
 801b184:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b188:	f010 0301 	ands.w	r3, r0, #1
 801b18c:	d00a      	beq.n	801b1a4 <__swsetup_r+0xbc>
 801b18e:	2300      	movs	r3, #0
 801b190:	60a3      	str	r3, [r4, #8]
 801b192:	6963      	ldr	r3, [r4, #20]
 801b194:	425b      	negs	r3, r3
 801b196:	61a3      	str	r3, [r4, #24]
 801b198:	6923      	ldr	r3, [r4, #16]
 801b19a:	b943      	cbnz	r3, 801b1ae <__swsetup_r+0xc6>
 801b19c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b1a0:	d1ba      	bne.n	801b118 <__swsetup_r+0x30>
 801b1a2:	bd70      	pop	{r4, r5, r6, pc}
 801b1a4:	0781      	lsls	r1, r0, #30
 801b1a6:	bf58      	it	pl
 801b1a8:	6963      	ldrpl	r3, [r4, #20]
 801b1aa:	60a3      	str	r3, [r4, #8]
 801b1ac:	e7f4      	b.n	801b198 <__swsetup_r+0xb0>
 801b1ae:	2000      	movs	r0, #0
 801b1b0:	e7f7      	b.n	801b1a2 <__swsetup_r+0xba>
 801b1b2:	bf00      	nop
 801b1b4:	24000100 	.word	0x24000100
 801b1b8:	0801c004 	.word	0x0801c004
 801b1bc:	0801c024 	.word	0x0801c024
 801b1c0:	0801bfe4 	.word	0x0801bfe4

0801b1c4 <abort>:
 801b1c4:	b508      	push	{r3, lr}
 801b1c6:	2006      	movs	r0, #6
 801b1c8:	f000 f898 	bl	801b2fc <raise>
 801b1cc:	2001      	movs	r0, #1
 801b1ce:	f7e8 f98f 	bl	80034f0 <_exit>

0801b1d2 <__swhatbuf_r>:
 801b1d2:	b570      	push	{r4, r5, r6, lr}
 801b1d4:	460e      	mov	r6, r1
 801b1d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b1da:	2900      	cmp	r1, #0
 801b1dc:	b096      	sub	sp, #88	; 0x58
 801b1de:	4614      	mov	r4, r2
 801b1e0:	461d      	mov	r5, r3
 801b1e2:	da08      	bge.n	801b1f6 <__swhatbuf_r+0x24>
 801b1e4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801b1e8:	2200      	movs	r2, #0
 801b1ea:	602a      	str	r2, [r5, #0]
 801b1ec:	061a      	lsls	r2, r3, #24
 801b1ee:	d410      	bmi.n	801b212 <__swhatbuf_r+0x40>
 801b1f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b1f4:	e00e      	b.n	801b214 <__swhatbuf_r+0x42>
 801b1f6:	466a      	mov	r2, sp
 801b1f8:	f000 f89c 	bl	801b334 <_fstat_r>
 801b1fc:	2800      	cmp	r0, #0
 801b1fe:	dbf1      	blt.n	801b1e4 <__swhatbuf_r+0x12>
 801b200:	9a01      	ldr	r2, [sp, #4]
 801b202:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b206:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b20a:	425a      	negs	r2, r3
 801b20c:	415a      	adcs	r2, r3
 801b20e:	602a      	str	r2, [r5, #0]
 801b210:	e7ee      	b.n	801b1f0 <__swhatbuf_r+0x1e>
 801b212:	2340      	movs	r3, #64	; 0x40
 801b214:	2000      	movs	r0, #0
 801b216:	6023      	str	r3, [r4, #0]
 801b218:	b016      	add	sp, #88	; 0x58
 801b21a:	bd70      	pop	{r4, r5, r6, pc}

0801b21c <__smakebuf_r>:
 801b21c:	898b      	ldrh	r3, [r1, #12]
 801b21e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b220:	079d      	lsls	r5, r3, #30
 801b222:	4606      	mov	r6, r0
 801b224:	460c      	mov	r4, r1
 801b226:	d507      	bpl.n	801b238 <__smakebuf_r+0x1c>
 801b228:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b22c:	6023      	str	r3, [r4, #0]
 801b22e:	6123      	str	r3, [r4, #16]
 801b230:	2301      	movs	r3, #1
 801b232:	6163      	str	r3, [r4, #20]
 801b234:	b002      	add	sp, #8
 801b236:	bd70      	pop	{r4, r5, r6, pc}
 801b238:	ab01      	add	r3, sp, #4
 801b23a:	466a      	mov	r2, sp
 801b23c:	f7ff ffc9 	bl	801b1d2 <__swhatbuf_r>
 801b240:	9900      	ldr	r1, [sp, #0]
 801b242:	4605      	mov	r5, r0
 801b244:	4630      	mov	r0, r6
 801b246:	f7ff f949 	bl	801a4dc <_malloc_r>
 801b24a:	b948      	cbnz	r0, 801b260 <__smakebuf_r+0x44>
 801b24c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b250:	059a      	lsls	r2, r3, #22
 801b252:	d4ef      	bmi.n	801b234 <__smakebuf_r+0x18>
 801b254:	f023 0303 	bic.w	r3, r3, #3
 801b258:	f043 0302 	orr.w	r3, r3, #2
 801b25c:	81a3      	strh	r3, [r4, #12]
 801b25e:	e7e3      	b.n	801b228 <__smakebuf_r+0xc>
 801b260:	4b0d      	ldr	r3, [pc, #52]	; (801b298 <__smakebuf_r+0x7c>)
 801b262:	62b3      	str	r3, [r6, #40]	; 0x28
 801b264:	89a3      	ldrh	r3, [r4, #12]
 801b266:	6020      	str	r0, [r4, #0]
 801b268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b26c:	81a3      	strh	r3, [r4, #12]
 801b26e:	9b00      	ldr	r3, [sp, #0]
 801b270:	6163      	str	r3, [r4, #20]
 801b272:	9b01      	ldr	r3, [sp, #4]
 801b274:	6120      	str	r0, [r4, #16]
 801b276:	b15b      	cbz	r3, 801b290 <__smakebuf_r+0x74>
 801b278:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b27c:	4630      	mov	r0, r6
 801b27e:	f000 f86b 	bl	801b358 <_isatty_r>
 801b282:	b128      	cbz	r0, 801b290 <__smakebuf_r+0x74>
 801b284:	89a3      	ldrh	r3, [r4, #12]
 801b286:	f023 0303 	bic.w	r3, r3, #3
 801b28a:	f043 0301 	orr.w	r3, r3, #1
 801b28e:	81a3      	strh	r3, [r4, #12]
 801b290:	89a0      	ldrh	r0, [r4, #12]
 801b292:	4305      	orrs	r5, r0
 801b294:	81a5      	strh	r5, [r4, #12]
 801b296:	e7cd      	b.n	801b234 <__smakebuf_r+0x18>
 801b298:	0801ab1d 	.word	0x0801ab1d

0801b29c <_malloc_usable_size_r>:
 801b29c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b2a0:	1f18      	subs	r0, r3, #4
 801b2a2:	2b00      	cmp	r3, #0
 801b2a4:	bfbc      	itt	lt
 801b2a6:	580b      	ldrlt	r3, [r1, r0]
 801b2a8:	18c0      	addlt	r0, r0, r3
 801b2aa:	4770      	bx	lr

0801b2ac <_raise_r>:
 801b2ac:	291f      	cmp	r1, #31
 801b2ae:	b538      	push	{r3, r4, r5, lr}
 801b2b0:	4604      	mov	r4, r0
 801b2b2:	460d      	mov	r5, r1
 801b2b4:	d904      	bls.n	801b2c0 <_raise_r+0x14>
 801b2b6:	2316      	movs	r3, #22
 801b2b8:	6003      	str	r3, [r0, #0]
 801b2ba:	f04f 30ff 	mov.w	r0, #4294967295
 801b2be:	bd38      	pop	{r3, r4, r5, pc}
 801b2c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b2c2:	b112      	cbz	r2, 801b2ca <_raise_r+0x1e>
 801b2c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b2c8:	b94b      	cbnz	r3, 801b2de <_raise_r+0x32>
 801b2ca:	4620      	mov	r0, r4
 801b2cc:	f000 f830 	bl	801b330 <_getpid_r>
 801b2d0:	462a      	mov	r2, r5
 801b2d2:	4601      	mov	r1, r0
 801b2d4:	4620      	mov	r0, r4
 801b2d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b2da:	f000 b817 	b.w	801b30c <_kill_r>
 801b2de:	2b01      	cmp	r3, #1
 801b2e0:	d00a      	beq.n	801b2f8 <_raise_r+0x4c>
 801b2e2:	1c59      	adds	r1, r3, #1
 801b2e4:	d103      	bne.n	801b2ee <_raise_r+0x42>
 801b2e6:	2316      	movs	r3, #22
 801b2e8:	6003      	str	r3, [r0, #0]
 801b2ea:	2001      	movs	r0, #1
 801b2ec:	e7e7      	b.n	801b2be <_raise_r+0x12>
 801b2ee:	2400      	movs	r4, #0
 801b2f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b2f4:	4628      	mov	r0, r5
 801b2f6:	4798      	blx	r3
 801b2f8:	2000      	movs	r0, #0
 801b2fa:	e7e0      	b.n	801b2be <_raise_r+0x12>

0801b2fc <raise>:
 801b2fc:	4b02      	ldr	r3, [pc, #8]	; (801b308 <raise+0xc>)
 801b2fe:	4601      	mov	r1, r0
 801b300:	6818      	ldr	r0, [r3, #0]
 801b302:	f7ff bfd3 	b.w	801b2ac <_raise_r>
 801b306:	bf00      	nop
 801b308:	24000100 	.word	0x24000100

0801b30c <_kill_r>:
 801b30c:	b538      	push	{r3, r4, r5, lr}
 801b30e:	4d07      	ldr	r5, [pc, #28]	; (801b32c <_kill_r+0x20>)
 801b310:	2300      	movs	r3, #0
 801b312:	4604      	mov	r4, r0
 801b314:	4608      	mov	r0, r1
 801b316:	4611      	mov	r1, r2
 801b318:	602b      	str	r3, [r5, #0]
 801b31a:	f7e8 f8d9 	bl	80034d0 <_kill>
 801b31e:	1c43      	adds	r3, r0, #1
 801b320:	d102      	bne.n	801b328 <_kill_r+0x1c>
 801b322:	682b      	ldr	r3, [r5, #0]
 801b324:	b103      	cbz	r3, 801b328 <_kill_r+0x1c>
 801b326:	6023      	str	r3, [r4, #0]
 801b328:	bd38      	pop	{r3, r4, r5, pc}
 801b32a:	bf00      	nop
 801b32c:	24003244 	.word	0x24003244

0801b330 <_getpid_r>:
 801b330:	f7e8 b8c6 	b.w	80034c0 <_getpid>

0801b334 <_fstat_r>:
 801b334:	b538      	push	{r3, r4, r5, lr}
 801b336:	4d07      	ldr	r5, [pc, #28]	; (801b354 <_fstat_r+0x20>)
 801b338:	2300      	movs	r3, #0
 801b33a:	4604      	mov	r4, r0
 801b33c:	4608      	mov	r0, r1
 801b33e:	4611      	mov	r1, r2
 801b340:	602b      	str	r3, [r5, #0]
 801b342:	f7e8 f924 	bl	800358e <_fstat>
 801b346:	1c43      	adds	r3, r0, #1
 801b348:	d102      	bne.n	801b350 <_fstat_r+0x1c>
 801b34a:	682b      	ldr	r3, [r5, #0]
 801b34c:	b103      	cbz	r3, 801b350 <_fstat_r+0x1c>
 801b34e:	6023      	str	r3, [r4, #0]
 801b350:	bd38      	pop	{r3, r4, r5, pc}
 801b352:	bf00      	nop
 801b354:	24003244 	.word	0x24003244

0801b358 <_isatty_r>:
 801b358:	b538      	push	{r3, r4, r5, lr}
 801b35a:	4d06      	ldr	r5, [pc, #24]	; (801b374 <_isatty_r+0x1c>)
 801b35c:	2300      	movs	r3, #0
 801b35e:	4604      	mov	r4, r0
 801b360:	4608      	mov	r0, r1
 801b362:	602b      	str	r3, [r5, #0]
 801b364:	f7e8 f923 	bl	80035ae <_isatty>
 801b368:	1c43      	adds	r3, r0, #1
 801b36a:	d102      	bne.n	801b372 <_isatty_r+0x1a>
 801b36c:	682b      	ldr	r3, [r5, #0]
 801b36e:	b103      	cbz	r3, 801b372 <_isatty_r+0x1a>
 801b370:	6023      	str	r3, [r4, #0]
 801b372:	bd38      	pop	{r3, r4, r5, pc}
 801b374:	24003244 	.word	0x24003244

0801b378 <checkint>:
 801b378:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801b37c:	f240 33fe 	movw	r3, #1022	; 0x3fe
 801b380:	429a      	cmp	r2, r3
 801b382:	b570      	push	{r4, r5, r6, lr}
 801b384:	dd2a      	ble.n	801b3dc <checkint+0x64>
 801b386:	f240 4333 	movw	r3, #1075	; 0x433
 801b38a:	429a      	cmp	r2, r3
 801b38c:	dc24      	bgt.n	801b3d8 <checkint+0x60>
 801b38e:	1a9b      	subs	r3, r3, r2
 801b390:	f1a3 0620 	sub.w	r6, r3, #32
 801b394:	f04f 32ff 	mov.w	r2, #4294967295
 801b398:	fa02 f403 	lsl.w	r4, r2, r3
 801b39c:	fa02 f606 	lsl.w	r6, r2, r6
 801b3a0:	f1c3 0520 	rsb	r5, r3, #32
 801b3a4:	fa22 f505 	lsr.w	r5, r2, r5
 801b3a8:	4334      	orrs	r4, r6
 801b3aa:	432c      	orrs	r4, r5
 801b3ac:	409a      	lsls	r2, r3
 801b3ae:	ea20 0202 	bic.w	r2, r0, r2
 801b3b2:	ea21 0404 	bic.w	r4, r1, r4
 801b3b6:	4322      	orrs	r2, r4
 801b3b8:	f1a3 0420 	sub.w	r4, r3, #32
 801b3bc:	f1c3 0220 	rsb	r2, r3, #32
 801b3c0:	d10c      	bne.n	801b3dc <checkint+0x64>
 801b3c2:	40d8      	lsrs	r0, r3
 801b3c4:	fa01 f302 	lsl.w	r3, r1, r2
 801b3c8:	4318      	orrs	r0, r3
 801b3ca:	40e1      	lsrs	r1, r4
 801b3cc:	4308      	orrs	r0, r1
 801b3ce:	f000 0001 	and.w	r0, r0, #1
 801b3d2:	f1d0 0002 	rsbs	r0, r0, #2
 801b3d6:	bd70      	pop	{r4, r5, r6, pc}
 801b3d8:	2002      	movs	r0, #2
 801b3da:	e7fc      	b.n	801b3d6 <checkint+0x5e>
 801b3dc:	2000      	movs	r0, #0
 801b3de:	e7fa      	b.n	801b3d6 <checkint+0x5e>

0801b3e0 <pow>:
 801b3e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b3e4:	ee10 4a90 	vmov	r4, s1
 801b3e8:	ed2d 8b0a 	vpush	{d8-d12}
 801b3ec:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 801b3f0:	ee11 7a90 	vmov	r7, s3
 801b3f4:	f10a 32ff 	add.w	r2, sl, #4294967295
 801b3f8:	f240 73fd 	movw	r3, #2045	; 0x7fd
 801b3fc:	429a      	cmp	r2, r3
 801b3fe:	ee10 6a10 	vmov	r6, s0
 801b402:	ee11 0a10 	vmov	r0, s2
 801b406:	b086      	sub	sp, #24
 801b408:	46d4      	mov	ip, sl
 801b40a:	ea4f 5517 	mov.w	r5, r7, lsr #20
 801b40e:	d806      	bhi.n	801b41e <pow+0x3e>
 801b410:	f3c5 030a 	ubfx	r3, r5, #0, #11
 801b414:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 801b418:	2b7f      	cmp	r3, #127	; 0x7f
 801b41a:	f240 8156 	bls.w	801b6ca <pow+0x2ea>
 801b41e:	1802      	adds	r2, r0, r0
 801b420:	eb47 0107 	adc.w	r1, r7, r7
 801b424:	f06f 0e01 	mvn.w	lr, #1
 801b428:	f112 39ff 	adds.w	r9, r2, #4294967295
 801b42c:	f141 38ff 	adc.w	r8, r1, #4294967295
 801b430:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 801b434:	45ce      	cmp	lr, r9
 801b436:	eb73 0808 	sbcs.w	r8, r3, r8
 801b43a:	d23f      	bcs.n	801b4bc <pow+0xdc>
 801b43c:	ea52 0301 	orrs.w	r3, r2, r1
 801b440:	f04f 0300 	mov.w	r3, #0
 801b444:	d10c      	bne.n	801b460 <pow+0x80>
 801b446:	19b6      	adds	r6, r6, r6
 801b448:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 801b44c:	4164      	adcs	r4, r4
 801b44e:	42b3      	cmp	r3, r6
 801b450:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801b454:	41a3      	sbcs	r3, r4
 801b456:	f0c0 808c 	bcc.w	801b572 <pow+0x192>
 801b45a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801b45e:	e028      	b.n	801b4b2 <pow+0xd2>
 801b460:	4da3      	ldr	r5, [pc, #652]	; (801b6f0 <pow+0x310>)
 801b462:	42ac      	cmp	r4, r5
 801b464:	bf08      	it	eq
 801b466:	429e      	cmpeq	r6, r3
 801b468:	d107      	bne.n	801b47a <pow+0x9a>
 801b46a:	1800      	adds	r0, r0, r0
 801b46c:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 801b470:	417f      	adcs	r7, r7
 801b472:	4283      	cmp	r3, r0
 801b474:	4b9f      	ldr	r3, [pc, #636]	; (801b6f4 <pow+0x314>)
 801b476:	41bb      	sbcs	r3, r7
 801b478:	e7ed      	b.n	801b456 <pow+0x76>
 801b47a:	19b6      	adds	r6, r6, r6
 801b47c:	489e      	ldr	r0, [pc, #632]	; (801b6f8 <pow+0x318>)
 801b47e:	4164      	adcs	r4, r4
 801b480:	42b3      	cmp	r3, r6
 801b482:	eb70 0504 	sbcs.w	r5, r0, r4
 801b486:	d374      	bcc.n	801b572 <pow+0x192>
 801b488:	4281      	cmp	r1, r0
 801b48a:	bf08      	it	eq
 801b48c:	429a      	cmpeq	r2, r3
 801b48e:	d170      	bne.n	801b572 <pow+0x192>
 801b490:	4a9a      	ldr	r2, [pc, #616]	; (801b6fc <pow+0x31c>)
 801b492:	4294      	cmp	r4, r2
 801b494:	bf08      	it	eq
 801b496:	429e      	cmpeq	r6, r3
 801b498:	d0df      	beq.n	801b45a <pow+0x7a>
 801b49a:	4294      	cmp	r4, r2
 801b49c:	ea6f 0707 	mvn.w	r7, r7
 801b4a0:	bf34      	ite	cc
 801b4a2:	2400      	movcc	r4, #0
 801b4a4:	2401      	movcs	r4, #1
 801b4a6:	0fff      	lsrs	r7, r7, #31
 801b4a8:	42bc      	cmp	r4, r7
 801b4aa:	f040 81d9 	bne.w	801b860 <pow+0x480>
 801b4ae:	ee21 0b01 	vmul.f64	d0, d1, d1
 801b4b2:	b006      	add	sp, #24
 801b4b4:	ecbd 8b0a 	vpop	{d8-d12}
 801b4b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b4bc:	eb16 0806 	adds.w	r8, r6, r6
 801b4c0:	eb44 0904 	adc.w	r9, r4, r4
 801b4c4:	f118 31ff 	adds.w	r1, r8, #4294967295
 801b4c8:	f169 0200 	sbc.w	r2, r9, #0
 801b4cc:	458e      	cmp	lr, r1
 801b4ce:	4193      	sbcs	r3, r2
 801b4d0:	d223      	bcs.n	801b51a <pow+0x13a>
 801b4d2:	ee20 0b00 	vmul.f64	d0, d0, d0
 801b4d6:	2c00      	cmp	r4, #0
 801b4d8:	da12      	bge.n	801b500 <pow+0x120>
 801b4da:	4639      	mov	r1, r7
 801b4dc:	f7ff ff4c 	bl	801b378 <checkint>
 801b4e0:	2801      	cmp	r0, #1
 801b4e2:	d10d      	bne.n	801b500 <pow+0x120>
 801b4e4:	eeb1 0b40 	vneg.f64	d0, d0
 801b4e8:	ea58 0309 	orrs.w	r3, r8, r9
 801b4ec:	d10a      	bne.n	801b504 <pow+0x124>
 801b4ee:	2f00      	cmp	r7, #0
 801b4f0:	dadf      	bge.n	801b4b2 <pow+0xd2>
 801b4f2:	b006      	add	sp, #24
 801b4f4:	ecbd 8b0a 	vpop	{d8-d12}
 801b4f8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b4fc:	f000 b9f0 	b.w	801b8e0 <__math_divzero>
 801b500:	2000      	movs	r0, #0
 801b502:	e7f1      	b.n	801b4e8 <pow+0x108>
 801b504:	2f00      	cmp	r7, #0
 801b506:	dad4      	bge.n	801b4b2 <pow+0xd2>
 801b508:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801b50c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801b510:	ed8d 7b00 	vstr	d7, [sp]
 801b514:	ed9d 0b00 	vldr	d0, [sp]
 801b518:	e7cb      	b.n	801b4b2 <pow+0xd2>
 801b51a:	2c00      	cmp	r4, #0
 801b51c:	da2c      	bge.n	801b578 <pow+0x198>
 801b51e:	4639      	mov	r1, r7
 801b520:	f7ff ff2a 	bl	801b378 <checkint>
 801b524:	b930      	cbnz	r0, 801b534 <pow+0x154>
 801b526:	b006      	add	sp, #24
 801b528:	ecbd 8b0a 	vpop	{d8-d12}
 801b52c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b530:	f000 b9ee 	b.w	801b910 <__math_invalid>
 801b534:	2801      	cmp	r0, #1
 801b536:	bf14      	ite	ne
 801b538:	2000      	movne	r0, #0
 801b53a:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 801b53e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801b542:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 801b546:	f3c5 020a 	ubfx	r2, r5, #0, #11
 801b54a:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 801b54e:	2b7f      	cmp	r3, #127	; 0x7f
 801b550:	d92d      	bls.n	801b5ae <pow+0x1ce>
 801b552:	4b67      	ldr	r3, [pc, #412]	; (801b6f0 <pow+0x310>)
 801b554:	2000      	movs	r0, #0
 801b556:	429c      	cmp	r4, r3
 801b558:	bf08      	it	eq
 801b55a:	4286      	cmpeq	r6, r0
 801b55c:	f43f af7d 	beq.w	801b45a <pow+0x7a>
 801b560:	f240 31bd 	movw	r1, #957	; 0x3bd
 801b564:	428a      	cmp	r2, r1
 801b566:	d80c      	bhi.n	801b582 <pow+0x1a2>
 801b568:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801b56c:	42b0      	cmp	r0, r6
 801b56e:	41a3      	sbcs	r3, r4
 801b570:	d204      	bcs.n	801b57c <pow+0x19c>
 801b572:	ee31 0b00 	vadd.f64	d0, d1, d0
 801b576:	e79c      	b.n	801b4b2 <pow+0xd2>
 801b578:	2000      	movs	r0, #0
 801b57a:	e7e4      	b.n	801b546 <pow+0x166>
 801b57c:	ee30 0b41 	vsub.f64	d0, d0, d1
 801b580:	e797      	b.n	801b4b2 <pow+0xd2>
 801b582:	2e01      	cmp	r6, #1
 801b584:	eb74 0303 	sbcs.w	r3, r4, r3
 801b588:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801b58c:	bf34      	ite	cc
 801b58e:	2301      	movcc	r3, #1
 801b590:	2300      	movcs	r3, #0
 801b592:	4295      	cmp	r5, r2
 801b594:	bf8c      	ite	hi
 801b596:	2500      	movhi	r5, #0
 801b598:	2501      	movls	r5, #1
 801b59a:	42ab      	cmp	r3, r5
 801b59c:	f000 809d 	beq.w	801b6da <pow+0x2fa>
 801b5a0:	b006      	add	sp, #24
 801b5a2:	ecbd 8b0a 	vpop	{d8-d12}
 801b5a6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b5aa:	f000 b991 	b.w	801b8d0 <__math_oflow>
 801b5ae:	f1bc 0f00 	cmp.w	ip, #0
 801b5b2:	d10b      	bne.n	801b5cc <pow+0x1ec>
 801b5b4:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 801b6e8 <pow+0x308>
 801b5b8:	ee20 7b07 	vmul.f64	d7, d0, d7
 801b5bc:	ec53 2b17 	vmov	r2, r3, d7
 801b5c0:	ee17 6a10 	vmov	r6, s14
 801b5c4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 801b5c8:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 801b5cc:	4b4c      	ldr	r3, [pc, #304]	; (801b700 <pow+0x320>)
 801b5ce:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 801b5d2:	4423      	add	r3, r4
 801b5d4:	f3c3 3246 	ubfx	r2, r3, #13, #7
 801b5d8:	1519      	asrs	r1, r3, #20
 801b5da:	0d1b      	lsrs	r3, r3, #20
 801b5dc:	051b      	lsls	r3, r3, #20
 801b5de:	eba4 0903 	sub.w	r9, r4, r3
 801b5e2:	4b48      	ldr	r3, [pc, #288]	; (801b704 <pow+0x324>)
 801b5e4:	ee04 1a10 	vmov	s8, r1
 801b5e8:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 801b5ec:	f1b6 0800 	subs.w	r8, r6, #0
 801b5f0:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 801b5f4:	ec49 8b15 	vmov	d5, r8, r9
 801b5f8:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 801b5fc:	eea5 6b07 	vfma.f64	d6, d5, d7
 801b600:	ed93 7b00 	vldr	d7, [r3]
 801b604:	ed93 5b02 	vldr	d5, [r3, #8]
 801b608:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 801b60c:	eea4 2b07 	vfma.f64	d2, d4, d7
 801b610:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 801b614:	ee36 ab02 	vadd.f64	d10, d6, d2
 801b618:	ee32 2b4a 	vsub.f64	d2, d2, d10
 801b61c:	eea4 7b05 	vfma.f64	d7, d4, d5
 801b620:	ed93 5b04 	vldr	d5, [r3, #16]
 801b624:	ee32 2b06 	vadd.f64	d2, d2, d6
 801b628:	ee37 7b02 	vadd.f64	d7, d7, d2
 801b62c:	ee26 5b05 	vmul.f64	d5, d6, d5
 801b630:	ed93 4b08 	vldr	d4, [r3, #32]
 801b634:	ee26 0b05 	vmul.f64	d0, d6, d5
 801b638:	eeb0 9b40 	vmov.f64	d9, d0
 801b63c:	ee95 9b06 	vfnms.f64	d9, d5, d6
 801b640:	ed93 5b06 	vldr	d5, [r3, #24]
 801b644:	ee3a 8b00 	vadd.f64	d8, d10, d0
 801b648:	ee26 bb00 	vmul.f64	d11, d6, d0
 801b64c:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 801b650:	eea6 5b04 	vfma.f64	d5, d6, d4
 801b654:	ee3a ab48 	vsub.f64	d10, d10, d8
 801b658:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 801b65c:	ee37 9b09 	vadd.f64	d9, d7, d9
 801b660:	ee3a ab00 	vadd.f64	d10, d10, d0
 801b664:	eea6 4b03 	vfma.f64	d4, d6, d3
 801b668:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 801b66c:	ee39 ab0a 	vadd.f64	d10, d9, d10
 801b670:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 801b674:	eea6 3b0c 	vfma.f64	d3, d6, d12
 801b678:	eea0 4b03 	vfma.f64	d4, d0, d3
 801b67c:	eea0 5b04 	vfma.f64	d5, d0, d4
 801b680:	eeab ab05 	vfma.f64	d10, d11, d5
 801b684:	ee38 6b0a 	vadd.f64	d6, d8, d10
 801b688:	ee21 7b06 	vmul.f64	d7, d1, d6
 801b68c:	ee17 3a90 	vmov	r3, s15
 801b690:	eeb0 5b47 	vmov.f64	d5, d7
 801b694:	f3c3 560a 	ubfx	r6, r3, #20, #11
 801b698:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 801b69c:	18b2      	adds	r2, r6, r2
 801b69e:	2a3e      	cmp	r2, #62	; 0x3e
 801b6a0:	ee91 5b06 	vfnms.f64	d5, d1, d6
 801b6a4:	ee38 8b46 	vsub.f64	d8, d8, d6
 801b6a8:	ee38 ab0a 	vadd.f64	d10, d8, d10
 801b6ac:	eea1 5b0a 	vfma.f64	d5, d1, d10
 801b6b0:	d92b      	bls.n	801b70a <pow+0x32a>
 801b6b2:	2a00      	cmp	r2, #0
 801b6b4:	da0b      	bge.n	801b6ce <pow+0x2ee>
 801b6b6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801b6ba:	ee37 0b00 	vadd.f64	d0, d7, d0
 801b6be:	2800      	cmp	r0, #0
 801b6c0:	f43f aef7 	beq.w	801b4b2 <pow+0xd2>
 801b6c4:	eeb1 0b40 	vneg.f64	d0, d0
 801b6c8:	e6f3      	b.n	801b4b2 <pow+0xd2>
 801b6ca:	2000      	movs	r0, #0
 801b6cc:	e77e      	b.n	801b5cc <pow+0x1ec>
 801b6ce:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 801b6d2:	d919      	bls.n	801b708 <pow+0x328>
 801b6d4:	2b00      	cmp	r3, #0
 801b6d6:	f6bf af63 	bge.w	801b5a0 <pow+0x1c0>
 801b6da:	b006      	add	sp, #24
 801b6dc:	ecbd 8b0a 	vpop	{d8-d12}
 801b6e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b6e4:	f000 b8ec 	b.w	801b8c0 <__math_uflow>
 801b6e8:	00000000 	.word	0x00000000
 801b6ec:	43300000 	.word	0x43300000
 801b6f0:	3ff00000 	.word	0x3ff00000
 801b6f4:	fff00000 	.word	0xfff00000
 801b6f8:	ffe00000 	.word	0xffe00000
 801b6fc:	7fe00000 	.word	0x7fe00000
 801b700:	c0196aab 	.word	0xc0196aab
 801b704:	0801c048 	.word	0x0801c048
 801b708:	2600      	movs	r6, #0
 801b70a:	495d      	ldr	r1, [pc, #372]	; (801b880 <pow+0x4a0>)
 801b70c:	ed91 4b02 	vldr	d4, [r1, #8]
 801b710:	ed91 3b00 	vldr	d3, [r1]
 801b714:	eeb0 6b44 	vmov.f64	d6, d4
 801b718:	eea7 6b03 	vfma.f64	d6, d7, d3
 801b71c:	ee16 5a10 	vmov	r5, s12
 801b720:	ee36 6b44 	vsub.f64	d6, d6, d4
 801b724:	ed91 4b04 	vldr	d4, [r1, #16]
 801b728:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 801b72c:	eea6 7b04 	vfma.f64	d7, d6, d4
 801b730:	eeb0 0b47 	vmov.f64	d0, d7
 801b734:	ed91 7b06 	vldr	d7, [r1, #24]
 801b738:	18dc      	adds	r4, r3, r3
 801b73a:	f104 030f 	add.w	r3, r4, #15
 801b73e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801b742:	eea6 0b07 	vfma.f64	d0, d6, d7
 801b746:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 801b74a:	ee35 0b00 	vadd.f64	d0, d5, d0
 801b74e:	ee20 6b00 	vmul.f64	d6, d0, d0
 801b752:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 801b756:	ed91 5b08 	vldr	d5, [r1, #32]
 801b75a:	ee30 7b07 	vadd.f64	d7, d0, d7
 801b75e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801b762:	eea0 5b04 	vfma.f64	d5, d0, d4
 801b766:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 801b76a:	eea6 7b05 	vfma.f64	d7, d6, d5
 801b76e:	ee26 6b06 	vmul.f64	d6, d6, d6
 801b772:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 801b776:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 801b77a:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801b77e:	eea0 5b04 	vfma.f64	d5, d0, d4
 801b782:	1940      	adds	r0, r0, r5
 801b784:	2700      	movs	r7, #0
 801b786:	eb17 020c 	adds.w	r2, r7, ip
 801b78a:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 801b78e:	eea6 7b05 	vfma.f64	d7, d6, d5
 801b792:	2e00      	cmp	r6, #0
 801b794:	d15f      	bne.n	801b856 <pow+0x476>
 801b796:	42bd      	cmp	r5, r7
 801b798:	db13      	blt.n	801b7c2 <pow+0x3e2>
 801b79a:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 801b79e:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 801b7a2:	4610      	mov	r0, r2
 801b7a4:	ec41 0b10 	vmov	d0, r0, r1
 801b7a8:	eea7 0b00 	vfma.f64	d0, d7, d0
 801b7ac:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801b868 <pow+0x488>
 801b7b0:	ee20 0b07 	vmul.f64	d0, d0, d7
 801b7b4:	b006      	add	sp, #24
 801b7b6:	ecbd 8b0a 	vpop	{d8-d12}
 801b7ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b7be:	f000 b8bf 	b.w	801b940 <__math_check_oflow>
 801b7c2:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801b7c6:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 801b7ca:	4610      	mov	r0, r2
 801b7cc:	ec41 0b15 	vmov	d5, r0, r1
 801b7d0:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801b7d4:	ee27 6b05 	vmul.f64	d6, d7, d5
 801b7d8:	ee35 7b06 	vadd.f64	d7, d5, d6
 801b7dc:	eeb0 3bc7 	vabs.f64	d3, d7
 801b7e0:	eeb4 3bc4 	vcmpe.f64	d3, d4
 801b7e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7e8:	ed9f 0b21 	vldr	d0, [pc, #132]	; 801b870 <pow+0x490>
 801b7ec:	d52a      	bpl.n	801b844 <pow+0x464>
 801b7ee:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801b7f2:	ee35 5b47 	vsub.f64	d5, d5, d7
 801b7f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7fa:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 801b7fe:	ee35 6b06 	vadd.f64	d6, d5, d6
 801b802:	bf48      	it	mi
 801b804:	eeb0 4b43 	vmovmi.f64	d4, d3
 801b808:	ee37 3b04 	vadd.f64	d3, d7, d4
 801b80c:	ee34 5b43 	vsub.f64	d5, d4, d3
 801b810:	ee35 7b07 	vadd.f64	d7, d5, d7
 801b814:	ee37 7b06 	vadd.f64	d7, d7, d6
 801b818:	ee37 7b03 	vadd.f64	d7, d7, d3
 801b81c:	ee37 7b44 	vsub.f64	d7, d7, d4
 801b820:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b828:	d104      	bne.n	801b834 <pow+0x454>
 801b82a:	4632      	mov	r2, r6
 801b82c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801b830:	ec43 2b17 	vmov	d7, r2, r3
 801b834:	ed8d 0b02 	vstr	d0, [sp, #8]
 801b838:	ed9d 6b02 	vldr	d6, [sp, #8]
 801b83c:	ee26 6b00 	vmul.f64	d6, d6, d0
 801b840:	ed8d 6b04 	vstr	d6, [sp, #16]
 801b844:	ee27 0b00 	vmul.f64	d0, d7, d0
 801b848:	b006      	add	sp, #24
 801b84a:	ecbd 8b0a 	vpop	{d8-d12}
 801b84e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b852:	f000 b86c 	b.w	801b92e <__math_check_uflow>
 801b856:	ec43 2b10 	vmov	d0, r2, r3
 801b85a:	eea7 0b00 	vfma.f64	d0, d7, d0
 801b85e:	e628      	b.n	801b4b2 <pow+0xd2>
 801b860:	ed9f 0b05 	vldr	d0, [pc, #20]	; 801b878 <pow+0x498>
 801b864:	e625      	b.n	801b4b2 <pow+0xd2>
 801b866:	bf00      	nop
 801b868:	00000000 	.word	0x00000000
 801b86c:	7f000000 	.word	0x7f000000
 801b870:	00000000 	.word	0x00000000
 801b874:	00100000 	.word	0x00100000
	...
 801b880:	0801d090 	.word	0x0801d090

0801b884 <with_errno>:
 801b884:	b513      	push	{r0, r1, r4, lr}
 801b886:	4604      	mov	r4, r0
 801b888:	ed8d 0b00 	vstr	d0, [sp]
 801b88c:	f7fb f9dc 	bl	8016c48 <__errno>
 801b890:	ed9d 0b00 	vldr	d0, [sp]
 801b894:	6004      	str	r4, [r0, #0]
 801b896:	b002      	add	sp, #8
 801b898:	bd10      	pop	{r4, pc}

0801b89a <xflow>:
 801b89a:	b082      	sub	sp, #8
 801b89c:	b158      	cbz	r0, 801b8b6 <xflow+0x1c>
 801b89e:	eeb1 7b40 	vneg.f64	d7, d0
 801b8a2:	ed8d 7b00 	vstr	d7, [sp]
 801b8a6:	ed9d 7b00 	vldr	d7, [sp]
 801b8aa:	2022      	movs	r0, #34	; 0x22
 801b8ac:	ee20 0b07 	vmul.f64	d0, d0, d7
 801b8b0:	b002      	add	sp, #8
 801b8b2:	f7ff bfe7 	b.w	801b884 <with_errno>
 801b8b6:	eeb0 7b40 	vmov.f64	d7, d0
 801b8ba:	e7f2      	b.n	801b8a2 <xflow+0x8>
 801b8bc:	0000      	movs	r0, r0
	...

0801b8c0 <__math_uflow>:
 801b8c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801b8c8 <__math_uflow+0x8>
 801b8c4:	f7ff bfe9 	b.w	801b89a <xflow>
 801b8c8:	00000000 	.word	0x00000000
 801b8cc:	10000000 	.word	0x10000000

0801b8d0 <__math_oflow>:
 801b8d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801b8d8 <__math_oflow+0x8>
 801b8d4:	f7ff bfe1 	b.w	801b89a <xflow>
 801b8d8:	00000000 	.word	0x00000000
 801b8dc:	70000000 	.word	0x70000000

0801b8e0 <__math_divzero>:
 801b8e0:	b082      	sub	sp, #8
 801b8e2:	2800      	cmp	r0, #0
 801b8e4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801b8e8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801b8ec:	fe06 7b07 	vseleq.f64	d7, d6, d7
 801b8f0:	ed8d 7b00 	vstr	d7, [sp]
 801b8f4:	ed9d 0b00 	vldr	d0, [sp]
 801b8f8:	ed9f 7b03 	vldr	d7, [pc, #12]	; 801b908 <__math_divzero+0x28>
 801b8fc:	2022      	movs	r0, #34	; 0x22
 801b8fe:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801b902:	b002      	add	sp, #8
 801b904:	f7ff bfbe 	b.w	801b884 <with_errno>
	...

0801b910 <__math_invalid>:
 801b910:	eeb0 7b40 	vmov.f64	d7, d0
 801b914:	eeb4 7b47 	vcmp.f64	d7, d7
 801b918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b91c:	ee30 6b40 	vsub.f64	d6, d0, d0
 801b920:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801b924:	d602      	bvs.n	801b92c <__math_invalid+0x1c>
 801b926:	2021      	movs	r0, #33	; 0x21
 801b928:	f7ff bfac 	b.w	801b884 <with_errno>
 801b92c:	4770      	bx	lr

0801b92e <__math_check_uflow>:
 801b92e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801b932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b936:	d102      	bne.n	801b93e <__math_check_uflow+0x10>
 801b938:	2022      	movs	r0, #34	; 0x22
 801b93a:	f7ff bfa3 	b.w	801b884 <with_errno>
 801b93e:	4770      	bx	lr

0801b940 <__math_check_oflow>:
 801b940:	ed9f 6b07 	vldr	d6, [pc, #28]	; 801b960 <__math_check_oflow+0x20>
 801b944:	eeb0 7bc0 	vabs.f64	d7, d0
 801b948:	eeb4 7b46 	vcmp.f64	d7, d6
 801b94c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b950:	dd02      	ble.n	801b958 <__math_check_oflow+0x18>
 801b952:	2022      	movs	r0, #34	; 0x22
 801b954:	f7ff bf96 	b.w	801b884 <with_errno>
 801b958:	4770      	bx	lr
 801b95a:	bf00      	nop
 801b95c:	f3af 8000 	nop.w
 801b960:	ffffffff 	.word	0xffffffff
 801b964:	7fefffff 	.word	0x7fefffff

0801b968 <_init>:
 801b968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b96a:	bf00      	nop
 801b96c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b96e:	bc08      	pop	{r3}
 801b970:	469e      	mov	lr, r3
 801b972:	4770      	bx	lr

0801b974 <_fini>:
 801b974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b976:	bf00      	nop
 801b978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b97a:	bc08      	pop	{r3}
 801b97c:	469e      	mov	lr, r3
 801b97e:	4770      	bx	lr
